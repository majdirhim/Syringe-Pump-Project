
openh7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000280d8  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003f00  08028378  08028378  00038378  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 FontFlashSection 00000496  0802c278  0802c278  0003c278  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 FontSearchFlashSection 00000018  0802c710  0802c710  0003c710  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 ExtFlashSection 0001c6f0  0802c728  0802c728  0003c728  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 TextFlashSection 00000028  08048e18  08048e18  00058e18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .ARM          00000008  08048e40  08048e40  00058e40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .init_array   00000014  08048e48  08048e48  00058e48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .fini_array   00000008  08048e5c  08048e5c  00058e5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .data         00000254  20000000  08048e64  00060000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          0000585c  20000254  080490b8  00060254  2**2
                  ALLOC
 12 ._user_heap_stack 00000600  20005ab0  080490b8  00065ab0  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  00060254  2**0
                  CONTENTS, READONLY
 14 .debug_info   000aed7c  00000000  00000000  00060282  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00013790  00000000  00000000  0010effe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000042e0  00000000  00000000  00122790  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00003df0  00000000  00000000  00126a70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00049a0b  00000000  00000000  0012a860  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0004c709  00000000  00000000  0017426b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    001a9de0  00000000  00000000  001c0974  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      000000cf  00000000  00000000  0036a754  2**0
                  CONTENTS, READONLY
 22 .debug_frame  000122cc  00000000  00000000  0036a824  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	20000254 	.word	0x20000254
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08028360 	.word	0x08028360

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	20000258 	.word	0x20000258
 80002dc:	08028360 	.word	0x08028360

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <__aeabi_uldivmod>:
 8000380:	b953      	cbnz	r3, 8000398 <__aeabi_uldivmod+0x18>
 8000382:	b94a      	cbnz	r2, 8000398 <__aeabi_uldivmod+0x18>
 8000384:	2900      	cmp	r1, #0
 8000386:	bf08      	it	eq
 8000388:	2800      	cmpeq	r0, #0
 800038a:	bf1c      	itt	ne
 800038c:	f04f 31ff 	movne.w	r1, #4294967295
 8000390:	f04f 30ff 	movne.w	r0, #4294967295
 8000394:	f000 b974 	b.w	8000680 <__aeabi_idiv0>
 8000398:	f1ad 0c08 	sub.w	ip, sp, #8
 800039c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003a0:	f000 f806 	bl	80003b0 <__udivmoddi4>
 80003a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ac:	b004      	add	sp, #16
 80003ae:	4770      	bx	lr

080003b0 <__udivmoddi4>:
 80003b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003b4:	9d08      	ldr	r5, [sp, #32]
 80003b6:	4604      	mov	r4, r0
 80003b8:	468e      	mov	lr, r1
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	d14d      	bne.n	800045a <__udivmoddi4+0xaa>
 80003be:	428a      	cmp	r2, r1
 80003c0:	4694      	mov	ip, r2
 80003c2:	d969      	bls.n	8000498 <__udivmoddi4+0xe8>
 80003c4:	fab2 f282 	clz	r2, r2
 80003c8:	b152      	cbz	r2, 80003e0 <__udivmoddi4+0x30>
 80003ca:	fa01 f302 	lsl.w	r3, r1, r2
 80003ce:	f1c2 0120 	rsb	r1, r2, #32
 80003d2:	fa20 f101 	lsr.w	r1, r0, r1
 80003d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80003da:	ea41 0e03 	orr.w	lr, r1, r3
 80003de:	4094      	lsls	r4, r2
 80003e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003e4:	0c21      	lsrs	r1, r4, #16
 80003e6:	fbbe f6f8 	udiv	r6, lr, r8
 80003ea:	fa1f f78c 	uxth.w	r7, ip
 80003ee:	fb08 e316 	mls	r3, r8, r6, lr
 80003f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80003f6:	fb06 f107 	mul.w	r1, r6, r7
 80003fa:	4299      	cmp	r1, r3
 80003fc:	d90a      	bls.n	8000414 <__udivmoddi4+0x64>
 80003fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000402:	f106 30ff 	add.w	r0, r6, #4294967295
 8000406:	f080 811f 	bcs.w	8000648 <__udivmoddi4+0x298>
 800040a:	4299      	cmp	r1, r3
 800040c:	f240 811c 	bls.w	8000648 <__udivmoddi4+0x298>
 8000410:	3e02      	subs	r6, #2
 8000412:	4463      	add	r3, ip
 8000414:	1a5b      	subs	r3, r3, r1
 8000416:	b2a4      	uxth	r4, r4
 8000418:	fbb3 f0f8 	udiv	r0, r3, r8
 800041c:	fb08 3310 	mls	r3, r8, r0, r3
 8000420:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000424:	fb00 f707 	mul.w	r7, r0, r7
 8000428:	42a7      	cmp	r7, r4
 800042a:	d90a      	bls.n	8000442 <__udivmoddi4+0x92>
 800042c:	eb1c 0404 	adds.w	r4, ip, r4
 8000430:	f100 33ff 	add.w	r3, r0, #4294967295
 8000434:	f080 810a 	bcs.w	800064c <__udivmoddi4+0x29c>
 8000438:	42a7      	cmp	r7, r4
 800043a:	f240 8107 	bls.w	800064c <__udivmoddi4+0x29c>
 800043e:	4464      	add	r4, ip
 8000440:	3802      	subs	r0, #2
 8000442:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000446:	1be4      	subs	r4, r4, r7
 8000448:	2600      	movs	r6, #0
 800044a:	b11d      	cbz	r5, 8000454 <__udivmoddi4+0xa4>
 800044c:	40d4      	lsrs	r4, r2
 800044e:	2300      	movs	r3, #0
 8000450:	e9c5 4300 	strd	r4, r3, [r5]
 8000454:	4631      	mov	r1, r6
 8000456:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800045a:	428b      	cmp	r3, r1
 800045c:	d909      	bls.n	8000472 <__udivmoddi4+0xc2>
 800045e:	2d00      	cmp	r5, #0
 8000460:	f000 80ef 	beq.w	8000642 <__udivmoddi4+0x292>
 8000464:	2600      	movs	r6, #0
 8000466:	e9c5 0100 	strd	r0, r1, [r5]
 800046a:	4630      	mov	r0, r6
 800046c:	4631      	mov	r1, r6
 800046e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000472:	fab3 f683 	clz	r6, r3
 8000476:	2e00      	cmp	r6, #0
 8000478:	d14a      	bne.n	8000510 <__udivmoddi4+0x160>
 800047a:	428b      	cmp	r3, r1
 800047c:	d302      	bcc.n	8000484 <__udivmoddi4+0xd4>
 800047e:	4282      	cmp	r2, r0
 8000480:	f200 80f9 	bhi.w	8000676 <__udivmoddi4+0x2c6>
 8000484:	1a84      	subs	r4, r0, r2
 8000486:	eb61 0303 	sbc.w	r3, r1, r3
 800048a:	2001      	movs	r0, #1
 800048c:	469e      	mov	lr, r3
 800048e:	2d00      	cmp	r5, #0
 8000490:	d0e0      	beq.n	8000454 <__udivmoddi4+0xa4>
 8000492:	e9c5 4e00 	strd	r4, lr, [r5]
 8000496:	e7dd      	b.n	8000454 <__udivmoddi4+0xa4>
 8000498:	b902      	cbnz	r2, 800049c <__udivmoddi4+0xec>
 800049a:	deff      	udf	#255	; 0xff
 800049c:	fab2 f282 	clz	r2, r2
 80004a0:	2a00      	cmp	r2, #0
 80004a2:	f040 8092 	bne.w	80005ca <__udivmoddi4+0x21a>
 80004a6:	eba1 010c 	sub.w	r1, r1, ip
 80004aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004ae:	fa1f fe8c 	uxth.w	lr, ip
 80004b2:	2601      	movs	r6, #1
 80004b4:	0c20      	lsrs	r0, r4, #16
 80004b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80004ba:	fb07 1113 	mls	r1, r7, r3, r1
 80004be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004c2:	fb0e f003 	mul.w	r0, lr, r3
 80004c6:	4288      	cmp	r0, r1
 80004c8:	d908      	bls.n	80004dc <__udivmoddi4+0x12c>
 80004ca:	eb1c 0101 	adds.w	r1, ip, r1
 80004ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80004d2:	d202      	bcs.n	80004da <__udivmoddi4+0x12a>
 80004d4:	4288      	cmp	r0, r1
 80004d6:	f200 80cb 	bhi.w	8000670 <__udivmoddi4+0x2c0>
 80004da:	4643      	mov	r3, r8
 80004dc:	1a09      	subs	r1, r1, r0
 80004de:	b2a4      	uxth	r4, r4
 80004e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e4:	fb07 1110 	mls	r1, r7, r0, r1
 80004e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80004ec:	fb0e fe00 	mul.w	lr, lr, r0
 80004f0:	45a6      	cmp	lr, r4
 80004f2:	d908      	bls.n	8000506 <__udivmoddi4+0x156>
 80004f4:	eb1c 0404 	adds.w	r4, ip, r4
 80004f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80004fc:	d202      	bcs.n	8000504 <__udivmoddi4+0x154>
 80004fe:	45a6      	cmp	lr, r4
 8000500:	f200 80bb 	bhi.w	800067a <__udivmoddi4+0x2ca>
 8000504:	4608      	mov	r0, r1
 8000506:	eba4 040e 	sub.w	r4, r4, lr
 800050a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800050e:	e79c      	b.n	800044a <__udivmoddi4+0x9a>
 8000510:	f1c6 0720 	rsb	r7, r6, #32
 8000514:	40b3      	lsls	r3, r6
 8000516:	fa22 fc07 	lsr.w	ip, r2, r7
 800051a:	ea4c 0c03 	orr.w	ip, ip, r3
 800051e:	fa20 f407 	lsr.w	r4, r0, r7
 8000522:	fa01 f306 	lsl.w	r3, r1, r6
 8000526:	431c      	orrs	r4, r3
 8000528:	40f9      	lsrs	r1, r7
 800052a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800052e:	fa00 f306 	lsl.w	r3, r0, r6
 8000532:	fbb1 f8f9 	udiv	r8, r1, r9
 8000536:	0c20      	lsrs	r0, r4, #16
 8000538:	fa1f fe8c 	uxth.w	lr, ip
 800053c:	fb09 1118 	mls	r1, r9, r8, r1
 8000540:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000544:	fb08 f00e 	mul.w	r0, r8, lr
 8000548:	4288      	cmp	r0, r1
 800054a:	fa02 f206 	lsl.w	r2, r2, r6
 800054e:	d90b      	bls.n	8000568 <__udivmoddi4+0x1b8>
 8000550:	eb1c 0101 	adds.w	r1, ip, r1
 8000554:	f108 3aff 	add.w	sl, r8, #4294967295
 8000558:	f080 8088 	bcs.w	800066c <__udivmoddi4+0x2bc>
 800055c:	4288      	cmp	r0, r1
 800055e:	f240 8085 	bls.w	800066c <__udivmoddi4+0x2bc>
 8000562:	f1a8 0802 	sub.w	r8, r8, #2
 8000566:	4461      	add	r1, ip
 8000568:	1a09      	subs	r1, r1, r0
 800056a:	b2a4      	uxth	r4, r4
 800056c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000570:	fb09 1110 	mls	r1, r9, r0, r1
 8000574:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000578:	fb00 fe0e 	mul.w	lr, r0, lr
 800057c:	458e      	cmp	lr, r1
 800057e:	d908      	bls.n	8000592 <__udivmoddi4+0x1e2>
 8000580:	eb1c 0101 	adds.w	r1, ip, r1
 8000584:	f100 34ff 	add.w	r4, r0, #4294967295
 8000588:	d26c      	bcs.n	8000664 <__udivmoddi4+0x2b4>
 800058a:	458e      	cmp	lr, r1
 800058c:	d96a      	bls.n	8000664 <__udivmoddi4+0x2b4>
 800058e:	3802      	subs	r0, #2
 8000590:	4461      	add	r1, ip
 8000592:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000596:	fba0 9402 	umull	r9, r4, r0, r2
 800059a:	eba1 010e 	sub.w	r1, r1, lr
 800059e:	42a1      	cmp	r1, r4
 80005a0:	46c8      	mov	r8, r9
 80005a2:	46a6      	mov	lr, r4
 80005a4:	d356      	bcc.n	8000654 <__udivmoddi4+0x2a4>
 80005a6:	d053      	beq.n	8000650 <__udivmoddi4+0x2a0>
 80005a8:	b15d      	cbz	r5, 80005c2 <__udivmoddi4+0x212>
 80005aa:	ebb3 0208 	subs.w	r2, r3, r8
 80005ae:	eb61 010e 	sbc.w	r1, r1, lr
 80005b2:	fa01 f707 	lsl.w	r7, r1, r7
 80005b6:	fa22 f306 	lsr.w	r3, r2, r6
 80005ba:	40f1      	lsrs	r1, r6
 80005bc:	431f      	orrs	r7, r3
 80005be:	e9c5 7100 	strd	r7, r1, [r5]
 80005c2:	2600      	movs	r6, #0
 80005c4:	4631      	mov	r1, r6
 80005c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	40d8      	lsrs	r0, r3
 80005d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80005d4:	fa21 f303 	lsr.w	r3, r1, r3
 80005d8:	4091      	lsls	r1, r2
 80005da:	4301      	orrs	r1, r0
 80005dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005e0:	fa1f fe8c 	uxth.w	lr, ip
 80005e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80005e8:	fb07 3610 	mls	r6, r7, r0, r3
 80005ec:	0c0b      	lsrs	r3, r1, #16
 80005ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80005f2:	fb00 f60e 	mul.w	r6, r0, lr
 80005f6:	429e      	cmp	r6, r3
 80005f8:	fa04 f402 	lsl.w	r4, r4, r2
 80005fc:	d908      	bls.n	8000610 <__udivmoddi4+0x260>
 80005fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000602:	f100 38ff 	add.w	r8, r0, #4294967295
 8000606:	d22f      	bcs.n	8000668 <__udivmoddi4+0x2b8>
 8000608:	429e      	cmp	r6, r3
 800060a:	d92d      	bls.n	8000668 <__udivmoddi4+0x2b8>
 800060c:	3802      	subs	r0, #2
 800060e:	4463      	add	r3, ip
 8000610:	1b9b      	subs	r3, r3, r6
 8000612:	b289      	uxth	r1, r1
 8000614:	fbb3 f6f7 	udiv	r6, r3, r7
 8000618:	fb07 3316 	mls	r3, r7, r6, r3
 800061c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000620:	fb06 f30e 	mul.w	r3, r6, lr
 8000624:	428b      	cmp	r3, r1
 8000626:	d908      	bls.n	800063a <__udivmoddi4+0x28a>
 8000628:	eb1c 0101 	adds.w	r1, ip, r1
 800062c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000630:	d216      	bcs.n	8000660 <__udivmoddi4+0x2b0>
 8000632:	428b      	cmp	r3, r1
 8000634:	d914      	bls.n	8000660 <__udivmoddi4+0x2b0>
 8000636:	3e02      	subs	r6, #2
 8000638:	4461      	add	r1, ip
 800063a:	1ac9      	subs	r1, r1, r3
 800063c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000640:	e738      	b.n	80004b4 <__udivmoddi4+0x104>
 8000642:	462e      	mov	r6, r5
 8000644:	4628      	mov	r0, r5
 8000646:	e705      	b.n	8000454 <__udivmoddi4+0xa4>
 8000648:	4606      	mov	r6, r0
 800064a:	e6e3      	b.n	8000414 <__udivmoddi4+0x64>
 800064c:	4618      	mov	r0, r3
 800064e:	e6f8      	b.n	8000442 <__udivmoddi4+0x92>
 8000650:	454b      	cmp	r3, r9
 8000652:	d2a9      	bcs.n	80005a8 <__udivmoddi4+0x1f8>
 8000654:	ebb9 0802 	subs.w	r8, r9, r2
 8000658:	eb64 0e0c 	sbc.w	lr, r4, ip
 800065c:	3801      	subs	r0, #1
 800065e:	e7a3      	b.n	80005a8 <__udivmoddi4+0x1f8>
 8000660:	4646      	mov	r6, r8
 8000662:	e7ea      	b.n	800063a <__udivmoddi4+0x28a>
 8000664:	4620      	mov	r0, r4
 8000666:	e794      	b.n	8000592 <__udivmoddi4+0x1e2>
 8000668:	4640      	mov	r0, r8
 800066a:	e7d1      	b.n	8000610 <__udivmoddi4+0x260>
 800066c:	46d0      	mov	r8, sl
 800066e:	e77b      	b.n	8000568 <__udivmoddi4+0x1b8>
 8000670:	3b02      	subs	r3, #2
 8000672:	4461      	add	r1, ip
 8000674:	e732      	b.n	80004dc <__udivmoddi4+0x12c>
 8000676:	4630      	mov	r0, r6
 8000678:	e709      	b.n	800048e <__udivmoddi4+0xde>
 800067a:	4464      	add	r4, ip
 800067c:	3802      	subs	r0, #2
 800067e:	e742      	b.n	8000506 <__udivmoddi4+0x156>

08000680 <__aeabi_idiv0>:
 8000680:	4770      	bx	lr
 8000682:	bf00      	nop

08000684 <MX_ADC3_Init>:

ADC_HandleTypeDef hadc3;

/* ADC3 init function */
void MX_ADC3_Init(void)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	b088      	sub	sp, #32
 8000688:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800068a:	1d3b      	adds	r3, r7, #4
 800068c:	2200      	movs	r2, #0
 800068e:	601a      	str	r2, [r3, #0]
 8000690:	605a      	str	r2, [r3, #4]
 8000692:	609a      	str	r2, [r3, #8]
 8000694:	60da      	str	r2, [r3, #12]
 8000696:	611a      	str	r2, [r3, #16]
 8000698:	615a      	str	r2, [r3, #20]
 800069a:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Common config
  */
  hadc3.Instance = ADC3;
 800069c:	4b29      	ldr	r3, [pc, #164]	; (8000744 <MX_ADC3_Init+0xc0>)
 800069e:	4a2a      	ldr	r2, [pc, #168]	; (8000748 <MX_ADC3_Init+0xc4>)
 80006a0:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 80006a2:	4b28      	ldr	r3, [pc, #160]	; (8000744 <MX_ADC3_Init+0xc0>)
 80006a4:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80006a8:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_16B;
 80006aa:	4b26      	ldr	r3, [pc, #152]	; (8000744 <MX_ADC3_Init+0xc0>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80006b0:	4b24      	ldr	r3, [pc, #144]	; (8000744 <MX_ADC3_Init+0xc0>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	60da      	str	r2, [r3, #12]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80006b6:	4b23      	ldr	r3, [pc, #140]	; (8000744 <MX_ADC3_Init+0xc0>)
 80006b8:	2204      	movs	r2, #4
 80006ba:	611a      	str	r2, [r3, #16]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 80006bc:	4b21      	ldr	r3, [pc, #132]	; (8000744 <MX_ADC3_Init+0xc0>)
 80006be:	2200      	movs	r2, #0
 80006c0:	751a      	strb	r2, [r3, #20]
  hadc3.Init.ContinuousConvMode = ENABLE;
 80006c2:	4b20      	ldr	r3, [pc, #128]	; (8000744 <MX_ADC3_Init+0xc0>)
 80006c4:	2201      	movs	r2, #1
 80006c6:	755a      	strb	r2, [r3, #21]
  hadc3.Init.NbrOfConversion = 1;
 80006c8:	4b1e      	ldr	r3, [pc, #120]	; (8000744 <MX_ADC3_Init+0xc0>)
 80006ca:	2201      	movs	r2, #1
 80006cc:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80006ce:	4b1d      	ldr	r3, [pc, #116]	; (8000744 <MX_ADC3_Init+0xc0>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80006d4:	4b1b      	ldr	r3, [pc, #108]	; (8000744 <MX_ADC3_Init+0xc0>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	625a      	str	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80006da:	4b1a      	ldr	r3, [pc, #104]	; (8000744 <MX_ADC3_Init+0xc0>)
 80006dc:	2200      	movs	r2, #0
 80006de:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 80006e0:	4b18      	ldr	r3, [pc, #96]	; (8000744 <MX_ADC3_Init+0xc0>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80006e6:	4b17      	ldr	r3, [pc, #92]	; (8000744 <MX_ADC3_Init+0xc0>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80006ec:	4b15      	ldr	r3, [pc, #84]	; (8000744 <MX_ADC3_Init+0xc0>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 80006f2:	4b14      	ldr	r3, [pc, #80]	; (8000744 <MX_ADC3_Init+0xc0>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 80006fa:	4812      	ldr	r0, [pc, #72]	; (8000744 <MX_ADC3_Init+0xc0>)
 80006fc:	f004 fa1a 	bl	8004b34 <HAL_ADC_Init>
 8000700:	4603      	mov	r3, r0
 8000702:	2b00      	cmp	r3, #0
 8000704:	d001      	beq.n	800070a <MX_ADC3_Init+0x86>
  {
    Error_Handler();
 8000706:	f002 ffcd 	bl	80036a4 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 800070a:	4b10      	ldr	r3, [pc, #64]	; (800074c <MX_ADC3_Init+0xc8>)
 800070c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800070e:	2306      	movs	r3, #6
 8000710:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_387CYCLES_5;
 8000712:	2306      	movs	r3, #6
 8000714:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000716:	f240 73ff 	movw	r3, #2047	; 0x7ff
 800071a:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800071c:	2304      	movs	r3, #4
 800071e:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000720:	2300      	movs	r3, #0
 8000722:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000724:	2300      	movs	r3, #0
 8000726:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000728:	1d3b      	adds	r3, r7, #4
 800072a:	4619      	mov	r1, r3
 800072c:	4805      	ldr	r0, [pc, #20]	; (8000744 <MX_ADC3_Init+0xc0>)
 800072e:	f004 fd6f 	bl	8005210 <HAL_ADC_ConfigChannel>
 8000732:	4603      	mov	r3, r0
 8000734:	2b00      	cmp	r3, #0
 8000736:	d001      	beq.n	800073c <MX_ADC3_Init+0xb8>
  {
    Error_Handler();
 8000738:	f002 ffb4 	bl	80036a4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 800073c:	bf00      	nop
 800073e:	3720      	adds	r7, #32
 8000740:	46bd      	mov	sp, r7
 8000742:	bd80      	pop	{r7, pc}
 8000744:	20000270 	.word	0x20000270
 8000748:	58026000 	.word	0x58026000
 800074c:	cb840000 	.word	0xcb840000

08000750 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	b0b2      	sub	sp, #200	; 0xc8
 8000754:	af00      	add	r7, sp, #0
 8000756:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000758:	f107 030c 	add.w	r3, r7, #12
 800075c:	22bc      	movs	r2, #188	; 0xbc
 800075e:	2100      	movs	r1, #0
 8000760:	4618      	mov	r0, r3
 8000762:	f026 fe67 	bl	8027434 <memset>
  if(adcHandle->Instance==ADC3)
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	681b      	ldr	r3, [r3, #0]
 800076a:	4a1b      	ldr	r2, [pc, #108]	; (80007d8 <HAL_ADC_MspInit+0x88>)
 800076c:	4293      	cmp	r3, r2
 800076e:	d12f      	bne.n	80007d0 <HAL_ADC_MspInit+0x80>
  /* USER CODE BEGIN ADC3_MspInit 0 */

  /* USER CODE END ADC3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000770:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8000774:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.PLL2.PLL2M = 1;
 8000776:	2301      	movs	r3, #1
 8000778:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2N = 18;
 800077a:	2312      	movs	r3, #18
 800077c:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLL2.PLL2P = 2;
 800077e:	2302      	movs	r3, #2
 8000780:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8000782:	2302      	movs	r3, #2
 8000784:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 8000786:	2302      	movs	r3, #2
 8000788:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 800078a:	23c0      	movs	r3, #192	; 0xc0
 800078c:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 800078e:	2320      	movs	r3, #32
 8000790:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLL2.PLL2FRACN = 6144;
 8000792:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000796:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8000798:	2300      	movs	r3, #0
 800079a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800079e:	f107 030c 	add.w	r3, r7, #12
 80007a2:	4618      	mov	r0, r3
 80007a4:	f007 fa8c 	bl	8007cc0 <HAL_RCCEx_PeriphCLKConfig>
 80007a8:	4603      	mov	r3, r0
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	d001      	beq.n	80007b2 <HAL_ADC_MspInit+0x62>
    {
      Error_Handler();
 80007ae:	f002 ff79 	bl	80036a4 <Error_Handler>
    }

    /* ADC3 clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 80007b2:	4b0a      	ldr	r3, [pc, #40]	; (80007dc <HAL_ADC_MspInit+0x8c>)
 80007b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007b8:	4a08      	ldr	r2, [pc, #32]	; (80007dc <HAL_ADC_MspInit+0x8c>)
 80007ba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80007be:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80007c2:	4b06      	ldr	r3, [pc, #24]	; (80007dc <HAL_ADC_MspInit+0x8c>)
 80007c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007c8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80007cc:	60bb      	str	r3, [r7, #8]
 80007ce:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 80007d0:	bf00      	nop
 80007d2:	37c8      	adds	r7, #200	; 0xc8
 80007d4:	46bd      	mov	sp, r7
 80007d6:	bd80      	pop	{r7, pc}
 80007d8:	58026000 	.word	0x58026000
 80007dc:	58024400 	.word	0x58024400

080007e0 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80007e4:	4b0d      	ldr	r3, [pc, #52]	; (800081c <MX_CRC_Init+0x3c>)
 80007e6:	4a0e      	ldr	r2, [pc, #56]	; (8000820 <MX_CRC_Init+0x40>)
 80007e8:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 80007ea:	4b0c      	ldr	r3, [pc, #48]	; (800081c <MX_CRC_Init+0x3c>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 80007f0:	4b0a      	ldr	r3, [pc, #40]	; (800081c <MX_CRC_Init+0x3c>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 80007f6:	4b09      	ldr	r3, [pc, #36]	; (800081c <MX_CRC_Init+0x3c>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 80007fc:	4b07      	ldr	r3, [pc, #28]	; (800081c <MX_CRC_Init+0x3c>)
 80007fe:	2200      	movs	r2, #0
 8000800:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8000802:	4b06      	ldr	r3, [pc, #24]	; (800081c <MX_CRC_Init+0x3c>)
 8000804:	2201      	movs	r2, #1
 8000806:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000808:	4804      	ldr	r0, [pc, #16]	; (800081c <MX_CRC_Init+0x3c>)
 800080a:	f005 fac5 	bl	8005d98 <HAL_CRC_Init>
 800080e:	4603      	mov	r3, r0
 8000810:	2b00      	cmp	r3, #0
 8000812:	d001      	beq.n	8000818 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8000814:	f002 ff46 	bl	80036a4 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000818:	bf00      	nop
 800081a:	bd80      	pop	{r7, pc}
 800081c:	200002d4 	.word	0x200002d4
 8000820:	58024c00 	.word	0x58024c00

08000824 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 8000824:	b480      	push	{r7}
 8000826:	b085      	sub	sp, #20
 8000828:	af00      	add	r7, sp, #0
 800082a:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	4a0b      	ldr	r2, [pc, #44]	; (8000860 <HAL_CRC_MspInit+0x3c>)
 8000832:	4293      	cmp	r3, r2
 8000834:	d10e      	bne.n	8000854 <HAL_CRC_MspInit+0x30>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000836:	4b0b      	ldr	r3, [pc, #44]	; (8000864 <HAL_CRC_MspInit+0x40>)
 8000838:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800083c:	4a09      	ldr	r2, [pc, #36]	; (8000864 <HAL_CRC_MspInit+0x40>)
 800083e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000842:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000846:	4b07      	ldr	r3, [pc, #28]	; (8000864 <HAL_CRC_MspInit+0x40>)
 8000848:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800084c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000850:	60fb      	str	r3, [r7, #12]
 8000852:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 8000854:	bf00      	nop
 8000856:	3714      	adds	r7, #20
 8000858:	46bd      	mov	sp, r7
 800085a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800085e:	4770      	bx	lr
 8000860:	58024c00 	.word	0x58024c00
 8000864:	58024400 	.word	0x58024400

08000868 <MX_DMA2D_Init>:

DMA2D_HandleTypeDef hdma2d;

/* DMA2D init function */
void MX_DMA2D_Init(void)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 800086c:	4b19      	ldr	r3, [pc, #100]	; (80008d4 <MX_DMA2D_Init+0x6c>)
 800086e:	4a1a      	ldr	r2, [pc, #104]	; (80008d8 <MX_DMA2D_Init+0x70>)
 8000870:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 8000872:	4b18      	ldr	r3, [pc, #96]	; (80008d4 <MX_DMA2D_Init+0x6c>)
 8000874:	2200      	movs	r2, #0
 8000876:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_RGB565;
 8000878:	4b16      	ldr	r3, [pc, #88]	; (80008d4 <MX_DMA2D_Init+0x6c>)
 800087a:	2202      	movs	r2, #2
 800087c:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 800087e:	4b15      	ldr	r3, [pc, #84]	; (80008d4 <MX_DMA2D_Init+0x6c>)
 8000880:	2200      	movs	r2, #0
 8000882:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8000884:	4b13      	ldr	r3, [pc, #76]	; (80008d4 <MX_DMA2D_Init+0x6c>)
 8000886:	2200      	movs	r2, #0
 8000888:	645a      	str	r2, [r3, #68]	; 0x44
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_RGB565;
 800088a:	4b12      	ldr	r3, [pc, #72]	; (80008d4 <MX_DMA2D_Init+0x6c>)
 800088c:	2202      	movs	r2, #2
 800088e:	649a      	str	r2, [r3, #72]	; 0x48
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8000890:	4b10      	ldr	r3, [pc, #64]	; (80008d4 <MX_DMA2D_Init+0x6c>)
 8000892:	2200      	movs	r2, #0
 8000894:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma2d.LayerCfg[1].InputAlpha = 0;
 8000896:	4b0f      	ldr	r3, [pc, #60]	; (80008d4 <MX_DMA2D_Init+0x6c>)
 8000898:	2200      	movs	r2, #0
 800089a:	651a      	str	r2, [r3, #80]	; 0x50
  hdma2d.LayerCfg[1].AlphaInverted = DMA2D_REGULAR_ALPHA;
 800089c:	4b0d      	ldr	r3, [pc, #52]	; (80008d4 <MX_DMA2D_Init+0x6c>)
 800089e:	2200      	movs	r2, #0
 80008a0:	655a      	str	r2, [r3, #84]	; 0x54
  hdma2d.LayerCfg[1].RedBlueSwap = DMA2D_RB_REGULAR;
 80008a2:	4b0c      	ldr	r3, [pc, #48]	; (80008d4 <MX_DMA2D_Init+0x6c>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	659a      	str	r2, [r3, #88]	; 0x58
  hdma2d.LayerCfg[1].ChromaSubSampling = DMA2D_NO_CSS;
 80008a8:	4b0a      	ldr	r3, [pc, #40]	; (80008d4 <MX_DMA2D_Init+0x6c>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	65da      	str	r2, [r3, #92]	; 0x5c
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 80008ae:	4809      	ldr	r0, [pc, #36]	; (80008d4 <MX_DMA2D_Init+0x6c>)
 80008b0:	f005 fb5c 	bl	8005f6c <HAL_DMA2D_Init>
 80008b4:	4603      	mov	r3, r0
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d001      	beq.n	80008be <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 80008ba:	f002 fef3 	bl	80036a4 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 80008be:	2101      	movs	r1, #1
 80008c0:	4804      	ldr	r0, [pc, #16]	; (80008d4 <MX_DMA2D_Init+0x6c>)
 80008c2:	f005 fbb7 	bl	8006034 <HAL_DMA2D_ConfigLayer>
 80008c6:	4603      	mov	r3, r0
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	d001      	beq.n	80008d0 <MX_DMA2D_Init+0x68>
  {
    Error_Handler();
 80008cc:	f002 feea 	bl	80036a4 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 80008d0:	bf00      	nop
 80008d2:	bd80      	pop	{r7, pc}
 80008d4:	200002f8 	.word	0x200002f8
 80008d8:	52001000 	.word	0x52001000

080008dc <HAL_DMA2D_MspInit>:

void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* dma2dHandle)
{
 80008dc:	b480      	push	{r7}
 80008de:	b085      	sub	sp, #20
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	6078      	str	r0, [r7, #4]

  if(dma2dHandle->Instance==DMA2D)
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	4a0b      	ldr	r2, [pc, #44]	; (8000918 <HAL_DMA2D_MspInit+0x3c>)
 80008ea:	4293      	cmp	r3, r2
 80008ec:	d10e      	bne.n	800090c <HAL_DMA2D_MspInit+0x30>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* DMA2D clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 80008ee:	4b0b      	ldr	r3, [pc, #44]	; (800091c <HAL_DMA2D_MspInit+0x40>)
 80008f0:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80008f4:	4a09      	ldr	r2, [pc, #36]	; (800091c <HAL_DMA2D_MspInit+0x40>)
 80008f6:	f043 0310 	orr.w	r3, r3, #16
 80008fa:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 80008fe:	4b07      	ldr	r3, [pc, #28]	; (800091c <HAL_DMA2D_MspInit+0x40>)
 8000900:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8000904:	f003 0310 	and.w	r3, r3, #16
 8000908:	60fb      	str	r3, [r7, #12]
 800090a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }
}
 800090c:	bf00      	nop
 800090e:	3714      	adds	r7, #20
 8000910:	46bd      	mov	sp, r7
 8000912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000916:	4770      	bx	lr
 8000918:	52001000 	.word	0x52001000
 800091c:	58024400 	.word	0x58024400

08000920 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000920:	b580      	push	{r7, lr}
 8000922:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000924:	4a14      	ldr	r2, [pc, #80]	; (8000978 <MX_FREERTOS_Init+0x58>)
 8000926:	2100      	movs	r1, #0
 8000928:	4814      	ldr	r0, [pc, #80]	; (800097c <MX_FREERTOS_Init+0x5c>)
 800092a:	f00c fbed 	bl	800d108 <osThreadNew>
 800092e:	4603      	mov	r3, r0
 8000930:	4a13      	ldr	r2, [pc, #76]	; (8000980 <MX_FREERTOS_Init+0x60>)
 8000932:	6013      	str	r3, [r2, #0]

  /* creation of Stepper */
  StepperHandle = osThreadNew(Stepper_motor, NULL, &Stepper_attributes);
 8000934:	4a13      	ldr	r2, [pc, #76]	; (8000984 <MX_FREERTOS_Init+0x64>)
 8000936:	2100      	movs	r1, #0
 8000938:	4813      	ldr	r0, [pc, #76]	; (8000988 <MX_FREERTOS_Init+0x68>)
 800093a:	f00c fbe5 	bl	800d108 <osThreadNew>
 800093e:	4603      	mov	r3, r0
 8000940:	4a12      	ldr	r2, [pc, #72]	; (800098c <MX_FREERTOS_Init+0x6c>)
 8000942:	6013      	str	r3, [r2, #0]

  /* creation of Connectivity */
  ConnectivityHandle = osThreadNew(Cloud_Connectivity, NULL, &Connectivity_attributes);
 8000944:	4a12      	ldr	r2, [pc, #72]	; (8000990 <MX_FREERTOS_Init+0x70>)
 8000946:	2100      	movs	r1, #0
 8000948:	4812      	ldr	r0, [pc, #72]	; (8000994 <MX_FREERTOS_Init+0x74>)
 800094a:	f00c fbdd 	bl	800d108 <osThreadNew>
 800094e:	4603      	mov	r3, r0
 8000950:	4a11      	ldr	r2, [pc, #68]	; (8000998 <MX_FREERTOS_Init+0x78>)
 8000952:	6013      	str	r3, [r2, #0]

  /* creation of Sensors */
  SensorsHandle = osThreadNew(Sensors_measurements, NULL, &Sensors_attributes);
 8000954:	4a11      	ldr	r2, [pc, #68]	; (800099c <MX_FREERTOS_Init+0x7c>)
 8000956:	2100      	movs	r1, #0
 8000958:	4811      	ldr	r0, [pc, #68]	; (80009a0 <MX_FREERTOS_Init+0x80>)
 800095a:	f00c fbd5 	bl	800d108 <osThreadNew>
 800095e:	4603      	mov	r3, r0
 8000960:	4a10      	ldr	r2, [pc, #64]	; (80009a4 <MX_FREERTOS_Init+0x84>)
 8000962:	6013      	str	r3, [r2, #0]

  /* creation of IHM */
  IHMHandle = osThreadNew(Interface, NULL, &IHM_attributes);
 8000964:	4a10      	ldr	r2, [pc, #64]	; (80009a8 <MX_FREERTOS_Init+0x88>)
 8000966:	2100      	movs	r1, #0
 8000968:	4810      	ldr	r0, [pc, #64]	; (80009ac <MX_FREERTOS_Init+0x8c>)
 800096a:	f00c fbcd 	bl	800d108 <osThreadNew>
 800096e:	4603      	mov	r3, r0
 8000970:	4a0f      	ldr	r2, [pc, #60]	; (80009b0 <MX_FREERTOS_Init+0x90>)
 8000972:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8000974:	bf00      	nop
 8000976:	bd80      	pop	{r7, pc}
 8000978:	08028e84 	.word	0x08028e84
 800097c:	080009b5 	.word	0x080009b5
 8000980:	20000364 	.word	0x20000364
 8000984:	08028ea8 	.word	0x08028ea8
 8000988:	080009c5 	.word	0x080009c5
 800098c:	20000368 	.word	0x20000368
 8000990:	08028ecc 	.word	0x08028ecc
 8000994:	08000a1d 	.word	0x08000a1d
 8000998:	2000036c 	.word	0x2000036c
 800099c:	08028ef0 	.word	0x08028ef0
 80009a0:	08000a31 	.word	0x08000a31
 80009a4:	20000370 	.word	0x20000370
 80009a8:	08028f14 	.word	0x08028f14
 80009ac:	08000a99 	.word	0x08000a99
 80009b0:	20000374 	.word	0x20000374

080009b4 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b082      	sub	sp, #8
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80009bc:	2001      	movs	r0, #1
 80009be:	f00c fc35 	bl	800d22c <osDelay>
 80009c2:	e7fb      	b.n	80009bc <StartDefaultTask+0x8>

080009c4 <Stepper_motor>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Stepper_motor */
void Stepper_motor(void *argument)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b082      	sub	sp, #8
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Stepper_motor */
	BSP_MotorControl_AttachFlagInterrupt(MyFlagInterruptHandler);
 80009cc:	4812      	ldr	r0, [pc, #72]	; (8000a18 <Stepper_motor+0x54>)
 80009ce:	f002 fe87 	bl	80036e0 <BSP_MotorControl_AttachFlagInterrupt>
  /* Infinite loop */
  for(;;)
  {
	L6474_SetMaxSpeed(0, 100);
 80009d2:	2164      	movs	r1, #100	; 0x64
 80009d4:	2000      	movs	r0, #0
 80009d6:	f001 fa61 	bl	8001e9c <L6474_SetMaxSpeed>
	L6474_SetMinSpeed(0, 100);
 80009da:	2164      	movs	r1, #100	; 0x64
 80009dc:	2000      	movs	r0, #0
 80009de:	f001 faa9 	bl	8001f34 <L6474_SetMinSpeed>
	L6474_Move(0, BACKWARD, 16000);
 80009e2:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 80009e6:	2100      	movs	r1, #0
 80009e8:	2000      	movs	r0, #0
 80009ea:	f000 ff39 	bl	8001860 <L6474_Move>
	L6474_WaitWhileActive(0);
 80009ee:	2000      	movs	r0, #0
 80009f0:	f001 fb2e 	bl	8002050 <L6474_WaitWhileActive>
	osDelay(1000);
 80009f4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80009f8:	f00c fc18 	bl	800d22c <osDelay>
	L6474_Move(0, FORWARD, 16000);
 80009fc:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 8000a00:	2101      	movs	r1, #1
 8000a02:	2000      	movs	r0, #0
 8000a04:	f000 ff2c 	bl	8001860 <L6474_Move>
	L6474_WaitWhileActive(0);
 8000a08:	2000      	movs	r0, #0
 8000a0a:	f001 fb21 	bl	8002050 <L6474_WaitWhileActive>
	osDelay(1000);
 8000a0e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000a12:	f00c fc0b 	bl	800d22c <osDelay>
	L6474_SetMaxSpeed(0, 100);
 8000a16:	e7dc      	b.n	80009d2 <Stepper_motor+0xe>
 8000a18:	08003669 	.word	0x08003669

08000a1c <Cloud_Connectivity>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Cloud_Connectivity */
void Cloud_Connectivity(void *argument)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b082      	sub	sp, #8
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Cloud_Connectivity */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000a24:	2001      	movs	r0, #1
 8000a26:	f00c fc01 	bl	800d22c <osDelay>
 8000a2a:	e7fb      	b.n	8000a24 <Cloud_Connectivity+0x8>
 8000a2c:	0000      	movs	r0, r0
	...

08000a30 <Sensors_measurements>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Sensors_measurements */
void Sensors_measurements(void *argument)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b084      	sub	sp, #16
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	6078      	str	r0, [r7, #4]
	uint16_t readValue;

  /* Infinite loop */
  for(;;)
  {
	  HAL_ADC_PollForConversion(&hadc3, 10000);
 8000a38:	f242 7110 	movw	r1, #10000	; 0x2710
 8000a3c:	4814      	ldr	r0, [pc, #80]	; (8000a90 <Sensors_measurements+0x60>)
 8000a3e:	f004 fae5 	bl	800500c <HAL_ADC_PollForConversion>
	  readValue = HAL_ADC_GetValue(&hadc3);
 8000a42:	4813      	ldr	r0, [pc, #76]	; (8000a90 <Sensors_measurements+0x60>)
 8000a44:	f004 fbd6 	bl	80051f4 <HAL_ADC_GetValue>
 8000a48:	4603      	mov	r3, r0
 8000a4a:	81fb      	strh	r3, [r7, #14]
	  tCelsius = 357.558 - 0.187364 * readValue;
 8000a4c:	89fb      	ldrh	r3, [r7, #14]
 8000a4e:	ee07 3a90 	vmov	s15, r3
 8000a52:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000a56:	ed9f 6b0a 	vldr	d6, [pc, #40]	; 8000a80 <Sensors_measurements+0x50>
 8000a5a:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000a5e:	ed9f 6b0a 	vldr	d6, [pc, #40]	; 8000a88 <Sensors_measurements+0x58>
 8000a62:	ee36 7b47 	vsub.f64	d7, d6, d7
 8000a66:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8000a6a:	ee17 2a90 	vmov	r2, s15
 8000a6e:	4b09      	ldr	r3, [pc, #36]	; (8000a94 <Sensors_measurements+0x64>)
 8000a70:	601a      	str	r2, [r3, #0]
	  osDelay(1000);
 8000a72:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000a76:	f00c fbd9 	bl	800d22c <osDelay>
	  HAL_ADC_PollForConversion(&hadc3, 10000);
 8000a7a:	e7dd      	b.n	8000a38 <Sensors_measurements+0x8>
 8000a7c:	f3af 8000 	nop.w
 8000a80:	26394fad 	.word	0x26394fad
 8000a84:	3fc7fb8b 	.word	0x3fc7fb8b
 8000a88:	916872b0 	.word	0x916872b0
 8000a8c:	407658ed 	.word	0x407658ed
 8000a90:	20000270 	.word	0x20000270
 8000a94:	20000360 	.word	0x20000360

08000a98 <Interface>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Interface */
void Interface(void *argument)
{
 8000a98:	b480      	push	{r7}
 8000a9a:	b083      	sub	sp, #12
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Interface */
  /* Infinite loop */
  for(;;)
 8000aa0:	e7fe      	b.n	8000aa0 <Interface+0x8>
	...

08000aa4 <MX_GPIO_Init>:
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
     PA13 (JTMS/SWDIO)   ------> DEBUG_JTMS-SWDIO
     PA14 (JTCK/SWCLK)   ------> DEBUG_JTCK-SWCLK
*/
void MX_GPIO_Init(void)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b08e      	sub	sp, #56	; 0x38
 8000aa8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aaa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000aae:	2200      	movs	r2, #0
 8000ab0:	601a      	str	r2, [r3, #0]
 8000ab2:	605a      	str	r2, [r3, #4]
 8000ab4:	609a      	str	r2, [r3, #8]
 8000ab6:	60da      	str	r2, [r3, #12]
 8000ab8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000aba:	4b5f      	ldr	r3, [pc, #380]	; (8000c38 <MX_GPIO_Init+0x194>)
 8000abc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ac0:	4a5d      	ldr	r2, [pc, #372]	; (8000c38 <MX_GPIO_Init+0x194>)
 8000ac2:	f043 0310 	orr.w	r3, r3, #16
 8000ac6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000aca:	4b5b      	ldr	r3, [pc, #364]	; (8000c38 <MX_GPIO_Init+0x194>)
 8000acc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ad0:	f003 0310 	and.w	r3, r3, #16
 8000ad4:	623b      	str	r3, [r7, #32]
 8000ad6:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000ad8:	4b57      	ldr	r3, [pc, #348]	; (8000c38 <MX_GPIO_Init+0x194>)
 8000ada:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ade:	4a56      	ldr	r2, [pc, #344]	; (8000c38 <MX_GPIO_Init+0x194>)
 8000ae0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ae4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ae8:	4b53      	ldr	r3, [pc, #332]	; (8000c38 <MX_GPIO_Init+0x194>)
 8000aea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000aee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000af2:	61fb      	str	r3, [r7, #28]
 8000af4:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000af6:	4b50      	ldr	r3, [pc, #320]	; (8000c38 <MX_GPIO_Init+0x194>)
 8000af8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000afc:	4a4e      	ldr	r2, [pc, #312]	; (8000c38 <MX_GPIO_Init+0x194>)
 8000afe:	f043 0320 	orr.w	r3, r3, #32
 8000b02:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b06:	4b4c      	ldr	r3, [pc, #304]	; (8000c38 <MX_GPIO_Init+0x194>)
 8000b08:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b0c:	f003 0320 	and.w	r3, r3, #32
 8000b10:	61bb      	str	r3, [r7, #24]
 8000b12:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b14:	4b48      	ldr	r3, [pc, #288]	; (8000c38 <MX_GPIO_Init+0x194>)
 8000b16:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b1a:	4a47      	ldr	r2, [pc, #284]	; (8000c38 <MX_GPIO_Init+0x194>)
 8000b1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b20:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b24:	4b44      	ldr	r3, [pc, #272]	; (8000c38 <MX_GPIO_Init+0x194>)
 8000b26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b2e:	617b      	str	r3, [r7, #20]
 8000b30:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b32:	4b41      	ldr	r3, [pc, #260]	; (8000c38 <MX_GPIO_Init+0x194>)
 8000b34:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b38:	4a3f      	ldr	r2, [pc, #252]	; (8000c38 <MX_GPIO_Init+0x194>)
 8000b3a:	f043 0304 	orr.w	r3, r3, #4
 8000b3e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b42:	4b3d      	ldr	r3, [pc, #244]	; (8000c38 <MX_GPIO_Init+0x194>)
 8000b44:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b48:	f003 0304 	and.w	r3, r3, #4
 8000b4c:	613b      	str	r3, [r7, #16]
 8000b4e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b50:	4b39      	ldr	r3, [pc, #228]	; (8000c38 <MX_GPIO_Init+0x194>)
 8000b52:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b56:	4a38      	ldr	r2, [pc, #224]	; (8000c38 <MX_GPIO_Init+0x194>)
 8000b58:	f043 0301 	orr.w	r3, r3, #1
 8000b5c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b60:	4b35      	ldr	r3, [pc, #212]	; (8000c38 <MX_GPIO_Init+0x194>)
 8000b62:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b66:	f003 0301 	and.w	r3, r3, #1
 8000b6a:	60fb      	str	r3, [r7, #12]
 8000b6c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b6e:	4b32      	ldr	r3, [pc, #200]	; (8000c38 <MX_GPIO_Init+0x194>)
 8000b70:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b74:	4a30      	ldr	r2, [pc, #192]	; (8000c38 <MX_GPIO_Init+0x194>)
 8000b76:	f043 0302 	orr.w	r3, r3, #2
 8000b7a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b7e:	4b2e      	ldr	r3, [pc, #184]	; (8000c38 <MX_GPIO_Init+0x194>)
 8000b80:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b84:	f003 0302 	and.w	r3, r3, #2
 8000b88:	60bb      	str	r3, [r7, #8]
 8000b8a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000b8c:	4b2a      	ldr	r3, [pc, #168]	; (8000c38 <MX_GPIO_Init+0x194>)
 8000b8e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b92:	4a29      	ldr	r2, [pc, #164]	; (8000c38 <MX_GPIO_Init+0x194>)
 8000b94:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000b98:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b9c:	4b26      	ldr	r3, [pc, #152]	; (8000c38 <MX_GPIO_Init+0x194>)
 8000b9e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ba2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000ba6:	607b      	str	r3, [r7, #4]
 8000ba8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000baa:	4b23      	ldr	r3, [pc, #140]	; (8000c38 <MX_GPIO_Init+0x194>)
 8000bac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bb0:	4a21      	ldr	r2, [pc, #132]	; (8000c38 <MX_GPIO_Init+0x194>)
 8000bb2:	f043 0308 	orr.w	r3, r3, #8
 8000bb6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000bba:	4b1f      	ldr	r3, [pc, #124]	; (8000c38 <MX_GPIO_Init+0x194>)
 8000bbc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bc0:	f003 0308 	and.w	r3, r3, #8
 8000bc4:	603b      	str	r3, [r7, #0]
 8000bc6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, STBY_RST_Pin|DIR1_Pin, GPIO_PIN_RESET);
 8000bc8:	2200      	movs	r2, #0
 8000bca:	f44f 7184 	mov.w	r1, #264	; 0x108
 8000bce:	481b      	ldr	r0, [pc, #108]	; (8000c3c <MX_GPIO_Init+0x198>)
 8000bd0:	f005 fc8e 	bl	80064f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED1_Pin|LED2_Pin, GPIO_PIN_RESET);
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	21c0      	movs	r1, #192	; 0xc0
 8000bd8:	4819      	ldr	r0, [pc, #100]	; (8000c40 <MX_GPIO_Init+0x19c>)
 8000bda:	f005 fc89 	bl	80064f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PIPin PIPin */
  GPIO_InitStruct.Pin = STBY_RST_Pin|DIR1_Pin;
 8000bde:	f44f 7384 	mov.w	r3, #264	; 0x108
 8000be2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000be4:	2301      	movs	r3, #1
 8000be6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be8:	2300      	movs	r3, #0
 8000bea:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bec:	2300      	movs	r3, #0
 8000bee:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000bf0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bf4:	4619      	mov	r1, r3
 8000bf6:	4811      	ldr	r0, [pc, #68]	; (8000c3c <MX_GPIO_Init+0x198>)
 8000bf8:	f005 faca 	bl	8006190 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = FLAG_Pin;
 8000bfc:	2310      	movs	r3, #16
 8000bfe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c00:	2300      	movs	r3, #0
 8000c02:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c04:	2300      	movs	r3, #0
 8000c06:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(FLAG_GPIO_Port, &GPIO_InitStruct);
 8000c08:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c0c:	4619      	mov	r1, r3
 8000c0e:	480d      	ldr	r0, [pc, #52]	; (8000c44 <MX_GPIO_Init+0x1a0>)
 8000c10:	f005 fabe 	bl	8006190 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin;
 8000c14:	23c0      	movs	r3, #192	; 0xc0
 8000c16:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c18:	2301      	movs	r3, #1
 8000c1a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c20:	2300      	movs	r3, #0
 8000c22:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c24:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c28:	4619      	mov	r1, r3
 8000c2a:	4805      	ldr	r0, [pc, #20]	; (8000c40 <MX_GPIO_Init+0x19c>)
 8000c2c:	f005 fab0 	bl	8006190 <HAL_GPIO_Init>

}
 8000c30:	bf00      	nop
 8000c32:	3738      	adds	r7, #56	; 0x38
 8000c34:	46bd      	mov	sp, r7
 8000c36:	bd80      	pop	{r7, pc}
 8000c38:	58024400 	.word	0x58024400
 8000c3c:	58022000 	.word	0x58022000
 8000c40:	58020400 	.word	0x58020400
 8000c44:	58021c00 	.word	0x58021c00

08000c48 <MX_I2C1_SMBUS_Init>:
SMBUS_HandleTypeDef hsmbus1;

/* I2C1 init function */

void MX_I2C1_SMBUS_Init(void)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hsmbus1.Instance = I2C1;
 8000c4c:	4b1d      	ldr	r3, [pc, #116]	; (8000cc4 <MX_I2C1_SMBUS_Init+0x7c>)
 8000c4e:	4a1e      	ldr	r2, [pc, #120]	; (8000cc8 <MX_I2C1_SMBUS_Init+0x80>)
 8000c50:	601a      	str	r2, [r3, #0]
  hsmbus1.Init.Timing = 0x10C0ECFF;
 8000c52:	4b1c      	ldr	r3, [pc, #112]	; (8000cc4 <MX_I2C1_SMBUS_Init+0x7c>)
 8000c54:	4a1d      	ldr	r2, [pc, #116]	; (8000ccc <MX_I2C1_SMBUS_Init+0x84>)
 8000c56:	605a      	str	r2, [r3, #4]
  hsmbus1.Init.AnalogFilter = SMBUS_ANALOGFILTER_ENABLE;
 8000c58:	4b1a      	ldr	r3, [pc, #104]	; (8000cc4 <MX_I2C1_SMBUS_Init+0x7c>)
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	609a      	str	r2, [r3, #8]
  hsmbus1.Init.OwnAddress1 = 2;
 8000c5e:	4b19      	ldr	r3, [pc, #100]	; (8000cc4 <MX_I2C1_SMBUS_Init+0x7c>)
 8000c60:	2202      	movs	r2, #2
 8000c62:	60da      	str	r2, [r3, #12]
  hsmbus1.Init.AddressingMode = SMBUS_ADDRESSINGMODE_7BIT;
 8000c64:	4b17      	ldr	r3, [pc, #92]	; (8000cc4 <MX_I2C1_SMBUS_Init+0x7c>)
 8000c66:	2201      	movs	r2, #1
 8000c68:	611a      	str	r2, [r3, #16]
  hsmbus1.Init.DualAddressMode = SMBUS_DUALADDRESS_DISABLE;
 8000c6a:	4b16      	ldr	r3, [pc, #88]	; (8000cc4 <MX_I2C1_SMBUS_Init+0x7c>)
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	615a      	str	r2, [r3, #20]
  hsmbus1.Init.OwnAddress2 = 0;
 8000c70:	4b14      	ldr	r3, [pc, #80]	; (8000cc4 <MX_I2C1_SMBUS_Init+0x7c>)
 8000c72:	2200      	movs	r2, #0
 8000c74:	619a      	str	r2, [r3, #24]
  hsmbus1.Init.OwnAddress2Masks = SMBUS_OA2_NOMASK;
 8000c76:	4b13      	ldr	r3, [pc, #76]	; (8000cc4 <MX_I2C1_SMBUS_Init+0x7c>)
 8000c78:	2200      	movs	r2, #0
 8000c7a:	61da      	str	r2, [r3, #28]
  hsmbus1.Init.GeneralCallMode = SMBUS_GENERALCALL_DISABLE;
 8000c7c:	4b11      	ldr	r3, [pc, #68]	; (8000cc4 <MX_I2C1_SMBUS_Init+0x7c>)
 8000c7e:	2200      	movs	r2, #0
 8000c80:	621a      	str	r2, [r3, #32]
  hsmbus1.Init.NoStretchMode = SMBUS_NOSTRETCH_DISABLE;
 8000c82:	4b10      	ldr	r3, [pc, #64]	; (8000cc4 <MX_I2C1_SMBUS_Init+0x7c>)
 8000c84:	2200      	movs	r2, #0
 8000c86:	625a      	str	r2, [r3, #36]	; 0x24
  hsmbus1.Init.PacketErrorCheckMode = SMBUS_PEC_DISABLE;
 8000c88:	4b0e      	ldr	r3, [pc, #56]	; (8000cc4 <MX_I2C1_SMBUS_Init+0x7c>)
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	629a      	str	r2, [r3, #40]	; 0x28
  hsmbus1.Init.PeripheralMode = SMBUS_PERIPHERAL_MODE_SMBUS_SLAVE;
 8000c8e:	4b0d      	ldr	r3, [pc, #52]	; (8000cc4 <MX_I2C1_SMBUS_Init+0x7c>)
 8000c90:	2200      	movs	r2, #0
 8000c92:	62da      	str	r2, [r3, #44]	; 0x2c
  hsmbus1.Init.SMBusTimeout = 0x000084C4;
 8000c94:	4b0b      	ldr	r3, [pc, #44]	; (8000cc4 <MX_I2C1_SMBUS_Init+0x7c>)
 8000c96:	f248 42c4 	movw	r2, #33988	; 0x84c4
 8000c9a:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_SMBUS_Init(&hsmbus1) != HAL_OK)
 8000c9c:	4809      	ldr	r0, [pc, #36]	; (8000cc4 <MX_I2C1_SMBUS_Init+0x7c>)
 8000c9e:	f009 f99b 	bl	8009fd8 <HAL_SMBUS_Init>
 8000ca2:	4603      	mov	r3, r0
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d001      	beq.n	8000cac <MX_I2C1_SMBUS_Init+0x64>
  {
    Error_Handler();
 8000ca8:	f002 fcfc 	bl	80036a4 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_SMBUS_ConfigDigitalFilter(&hsmbus1, 0) != HAL_OK)
 8000cac:	2100      	movs	r1, #0
 8000cae:	4805      	ldr	r0, [pc, #20]	; (8000cc4 <MX_I2C1_SMBUS_Init+0x7c>)
 8000cb0:	f009 fa4a 	bl	800a148 <HAL_SMBUS_ConfigDigitalFilter>
 8000cb4:	4603      	mov	r3, r0
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d001      	beq.n	8000cbe <MX_I2C1_SMBUS_Init+0x76>
  {
    Error_Handler();
 8000cba:	f002 fcf3 	bl	80036a4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000cbe:	bf00      	nop
 8000cc0:	bd80      	pop	{r7, pc}
 8000cc2:	bf00      	nop
 8000cc4:	20000378 	.word	0x20000378
 8000cc8:	40005400 	.word	0x40005400
 8000ccc:	10c0ecff 	.word	0x10c0ecff

08000cd0 <HAL_SMBUS_MspInit>:

void HAL_SMBUS_MspInit(SMBUS_HandleTypeDef* smbusHandle)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b0b8      	sub	sp, #224	; 0xe0
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cd8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000cdc:	2200      	movs	r2, #0
 8000cde:	601a      	str	r2, [r3, #0]
 8000ce0:	605a      	str	r2, [r3, #4]
 8000ce2:	609a      	str	r2, [r3, #8]
 8000ce4:	60da      	str	r2, [r3, #12]
 8000ce6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000ce8:	f107 0310 	add.w	r3, r7, #16
 8000cec:	22bc      	movs	r2, #188	; 0xbc
 8000cee:	2100      	movs	r1, #0
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	f026 fb9f 	bl	8027434 <memset>
  if(smbusHandle->Instance==I2C1)
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	4a25      	ldr	r2, [pc, #148]	; (8000d90 <HAL_SMBUS_MspInit+0xc0>)
 8000cfc:	4293      	cmp	r3, r2
 8000cfe:	d142      	bne.n	8000d86 <HAL_SMBUS_MspInit+0xb6>
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000d00:	2308      	movs	r3, #8
 8000d02:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8000d04:	2300      	movs	r3, #0
 8000d06:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d0a:	f107 0310 	add.w	r3, r7, #16
 8000d0e:	4618      	mov	r0, r3
 8000d10:	f006 ffd6 	bl	8007cc0 <HAL_RCCEx_PeriphCLKConfig>
 8000d14:	4603      	mov	r3, r0
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d001      	beq.n	8000d1e <HAL_SMBUS_MspInit+0x4e>
    {
      Error_Handler();
 8000d1a:	f002 fcc3 	bl	80036a4 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d1e:	4b1d      	ldr	r3, [pc, #116]	; (8000d94 <HAL_SMBUS_MspInit+0xc4>)
 8000d20:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d24:	4a1b      	ldr	r2, [pc, #108]	; (8000d94 <HAL_SMBUS_MspInit+0xc4>)
 8000d26:	f043 0302 	orr.w	r3, r3, #2
 8000d2a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d2e:	4b19      	ldr	r3, [pc, #100]	; (8000d94 <HAL_SMBUS_MspInit+0xc4>)
 8000d30:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d34:	f003 0302 	and.w	r3, r3, #2
 8000d38:	60fb      	str	r3, [r7, #12]
 8000d3a:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000d3c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000d40:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d44:	2312      	movs	r3, #18
 8000d46:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d50:	2300      	movs	r3, #0
 8000d52:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000d56:	2304      	movs	r3, #4
 8000d58:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d5c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000d60:	4619      	mov	r1, r3
 8000d62:	480d      	ldr	r0, [pc, #52]	; (8000d98 <HAL_SMBUS_MspInit+0xc8>)
 8000d64:	f005 fa14 	bl	8006190 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000d68:	4b0a      	ldr	r3, [pc, #40]	; (8000d94 <HAL_SMBUS_MspInit+0xc4>)
 8000d6a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000d6e:	4a09      	ldr	r2, [pc, #36]	; (8000d94 <HAL_SMBUS_MspInit+0xc4>)
 8000d70:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000d74:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000d78:	4b06      	ldr	r3, [pc, #24]	; (8000d94 <HAL_SMBUS_MspInit+0xc4>)
 8000d7a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000d7e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d82:	60bb      	str	r3, [r7, #8]
 8000d84:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000d86:	bf00      	nop
 8000d88:	37e0      	adds	r7, #224	; 0xe0
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	bd80      	pop	{r7, pc}
 8000d8e:	bf00      	nop
 8000d90:	40005400 	.word	0x40005400
 8000d94:	58024400 	.word	0x58024400
 8000d98:	58020400 	.word	0x58020400

08000d9c <L6474_AttachErrorHandler>:
 * @param[in] callback Name of the callback to attach 
 * to the error Hanlder
 * @retval None
 **********************************************************/
void L6474_AttachErrorHandler(void (*callback)(uint16_t))
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	b083      	sub	sp, #12
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	6078      	str	r0, [r7, #4]
  errorHandlerCallback = (void (*)(uint16_t))callback;
 8000da4:	4a04      	ldr	r2, [pc, #16]	; (8000db8 <L6474_AttachErrorHandler+0x1c>)
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	6013      	str	r3, [r2, #0]
}
 8000daa:	bf00      	nop
 8000dac:	370c      	adds	r7, #12
 8000dae:	46bd      	mov	sp, r7
 8000db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db4:	4770      	bx	lr
 8000db6:	bf00      	nop
 8000db8:	200003cc 	.word	0x200003cc

08000dbc <L6474_AttachFlagInterrupt>:
 * @param[in] callback Name of the callback to attach 
 * to the Flag Interrupt
 * @retval None
 **********************************************************/
void L6474_AttachFlagInterrupt(void (*callback)(void))
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	b083      	sub	sp, #12
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	6078      	str	r0, [r7, #4]
  flagInterruptCallback = (void (*)())callback;
 8000dc4:	4a04      	ldr	r2, [pc, #16]	; (8000dd8 <L6474_AttachFlagInterrupt+0x1c>)
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	6013      	str	r3, [r2, #0]
}
 8000dca:	bf00      	nop
 8000dcc:	370c      	adds	r7, #12
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd4:	4770      	bx	lr
 8000dd6:	bf00      	nop
 8000dd8:	200003c8 	.word	0x200003c8

08000ddc <L6474_CmdDisable>:
 * @brief  Issue the Disable command to the L6474 of the specified device
 * @param[in] deviceId (from 0 to 2)
 * @retval None
 **********************************************************/
void L6474_CmdDisable(uint8_t deviceId)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b082      	sub	sp, #8
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	4603      	mov	r3, r0
 8000de4:	71fb      	strb	r3, [r7, #7]
  L6474_SendCommand(deviceId, L6474_DISABLE);
 8000de6:	79fb      	ldrb	r3, [r7, #7]
 8000de8:	21a8      	movs	r1, #168	; 0xa8
 8000dea:	4618      	mov	r0, r3
 8000dec:	f001 fa8c 	bl	8002308 <L6474_SendCommand>
}
 8000df0:	bf00      	nop
 8000df2:	3708      	adds	r7, #8
 8000df4:	46bd      	mov	sp, r7
 8000df6:	bd80      	pop	{r7, pc}

08000df8 <L6474_CmdEnable>:
 * @brief  Issues the Enable command to the L6474 of the specified device
 * @param[in] deviceId (from 0 to 2)
 * @retval None
 **********************************************************/
void L6474_CmdEnable(uint8_t deviceId)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b082      	sub	sp, #8
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	4603      	mov	r3, r0
 8000e00:	71fb      	strb	r3, [r7, #7]
  L6474_SendCommand(deviceId, L6474_ENABLE);
 8000e02:	79fb      	ldrb	r3, [r7, #7]
 8000e04:	21b8      	movs	r1, #184	; 0xb8
 8000e06:	4618      	mov	r0, r3
 8000e08:	f001 fa7e 	bl	8002308 <L6474_SendCommand>
}
 8000e0c:	bf00      	nop
 8000e0e:	3708      	adds	r7, #8
 8000e10:	46bd      	mov	sp, r7
 8000e12:	bd80      	pop	{r7, pc}

08000e14 <L6474_CmdGetParam>:
 * @param[in] deviceId (from 0 to 2)
 * @param[in] param Register adress (L6474_ABS_POS, L6474_MARK,...)
 * @retval Register value
 **********************************************************/
uint32_t L6474_CmdGetParam(uint8_t deviceId, uint32_t param)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b086      	sub	sp, #24
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	6039      	str	r1, [r7, #0]
 8000e1e:	71fb      	strb	r3, [r7, #7]
  uint32_t i;
  uint32_t spiRxData;
  uint8_t maxArgumentNbBytes = 0;
 8000e20:	2300      	movs	r3, #0
 8000e22:	74fb      	strb	r3, [r7, #19]
  uint8_t spiIndex = numberOfDevices - deviceId - 1;
 8000e24:	4b70      	ldr	r3, [pc, #448]	; (8000fe8 <L6474_CmdGetParam+0x1d4>)
 8000e26:	781b      	ldrb	r3, [r3, #0]
 8000e28:	b2da      	uxtb	r2, r3
 8000e2a:	79fb      	ldrb	r3, [r7, #7]
 8000e2c:	1ad3      	subs	r3, r2, r3
 8000e2e:	b2db      	uxtb	r3, r3
 8000e30:	3b01      	subs	r3, #1
 8000e32:	747b      	strb	r3, [r7, #17]
  bool itDisable = FALSE;  
 8000e34:	2300      	movs	r3, #0
 8000e36:	74bb      	strb	r3, [r7, #18]
  
  do
  {
    spiPreemtionByIsr = FALSE;
 8000e38:	4b6c      	ldr	r3, [pc, #432]	; (8000fec <L6474_CmdGetParam+0x1d8>)
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	701a      	strb	r2, [r3, #0]
    if (itDisable)
 8000e3e:	7cbb      	ldrb	r3, [r7, #18]
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d001      	beq.n	8000e48 <L6474_CmdGetParam+0x34>
    {
      /* re-enable L6474_Board_EnableIrq if disable in previous iteration */
      //L6474_Board_EnableIrq();
      //__enable_irq();
      itDisable = FALSE;
 8000e44:	2300      	movs	r3, #0
 8000e46:	74bb      	strb	r3, [r7, #18]
    }
  
    for (i = 0; i < numberOfDevices; i++)
 8000e48:	2300      	movs	r3, #0
 8000e4a:	617b      	str	r3, [r7, #20]
 8000e4c:	e02b      	b.n	8000ea6 <L6474_CmdGetParam+0x92>
    {
      spiTxBursts[0][i] = L6474_NOP;
 8000e4e:	4a68      	ldr	r2, [pc, #416]	; (8000ff0 <L6474_CmdGetParam+0x1dc>)
 8000e50:	697b      	ldr	r3, [r7, #20]
 8000e52:	4413      	add	r3, r2
 8000e54:	2200      	movs	r2, #0
 8000e56:	701a      	strb	r2, [r3, #0]
      spiTxBursts[1][i] = L6474_NOP;
 8000e58:	4a65      	ldr	r2, [pc, #404]	; (8000ff0 <L6474_CmdGetParam+0x1dc>)
 8000e5a:	697b      	ldr	r3, [r7, #20]
 8000e5c:	4413      	add	r3, r2
 8000e5e:	3303      	adds	r3, #3
 8000e60:	2200      	movs	r2, #0
 8000e62:	701a      	strb	r2, [r3, #0]
      spiTxBursts[2][i] = L6474_NOP;
 8000e64:	4a62      	ldr	r2, [pc, #392]	; (8000ff0 <L6474_CmdGetParam+0x1dc>)
 8000e66:	697b      	ldr	r3, [r7, #20]
 8000e68:	4413      	add	r3, r2
 8000e6a:	3306      	adds	r3, #6
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	701a      	strb	r2, [r3, #0]
      spiTxBursts[3][i] = L6474_NOP;
 8000e70:	4a5f      	ldr	r2, [pc, #380]	; (8000ff0 <L6474_CmdGetParam+0x1dc>)
 8000e72:	697b      	ldr	r3, [r7, #20]
 8000e74:	4413      	add	r3, r2
 8000e76:	3309      	adds	r3, #9
 8000e78:	2200      	movs	r2, #0
 8000e7a:	701a      	strb	r2, [r3, #0]
      spiRxBursts[1][i] = 0;
 8000e7c:	4a5d      	ldr	r2, [pc, #372]	; (8000ff4 <L6474_CmdGetParam+0x1e0>)
 8000e7e:	697b      	ldr	r3, [r7, #20]
 8000e80:	4413      	add	r3, r2
 8000e82:	3303      	adds	r3, #3
 8000e84:	2200      	movs	r2, #0
 8000e86:	701a      	strb	r2, [r3, #0]
      spiRxBursts[2][i] = 0;
 8000e88:	4a5a      	ldr	r2, [pc, #360]	; (8000ff4 <L6474_CmdGetParam+0x1e0>)
 8000e8a:	697b      	ldr	r3, [r7, #20]
 8000e8c:	4413      	add	r3, r2
 8000e8e:	3306      	adds	r3, #6
 8000e90:	2200      	movs	r2, #0
 8000e92:	701a      	strb	r2, [r3, #0]
      spiRxBursts[3][i] = 0;    
 8000e94:	4a57      	ldr	r2, [pc, #348]	; (8000ff4 <L6474_CmdGetParam+0x1e0>)
 8000e96:	697b      	ldr	r3, [r7, #20]
 8000e98:	4413      	add	r3, r2
 8000e9a:	3309      	adds	r3, #9
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < numberOfDevices; i++)
 8000ea0:	697b      	ldr	r3, [r7, #20]
 8000ea2:	3301      	adds	r3, #1
 8000ea4:	617b      	str	r3, [r7, #20]
 8000ea6:	4b50      	ldr	r3, [pc, #320]	; (8000fe8 <L6474_CmdGetParam+0x1d4>)
 8000ea8:	781b      	ldrb	r3, [r3, #0]
 8000eaa:	b2db      	uxtb	r3, r3
 8000eac:	461a      	mov	r2, r3
 8000eae:	697b      	ldr	r3, [r7, #20]
 8000eb0:	4293      	cmp	r3, r2
 8000eb2:	d3cc      	bcc.n	8000e4e <L6474_CmdGetParam+0x3a>
    }
    switch (param)
 8000eb4:	683b      	ldr	r3, [r7, #0]
 8000eb6:	3b01      	subs	r3, #1
 8000eb8:	2b18      	cmp	r3, #24
 8000eba:	d84d      	bhi.n	8000f58 <L6474_CmdGetParam+0x144>
 8000ebc:	a201      	add	r2, pc, #4	; (adr r2, 8000ec4 <L6474_CmdGetParam+0xb0>)
 8000ebe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ec2:	bf00      	nop
 8000ec4:	08000f29 	.word	0x08000f29
 8000ec8:	08000f3f 	.word	0x08000f3f
 8000ecc:	08000f29 	.word	0x08000f29
 8000ed0:	08000f59 	.word	0x08000f59
 8000ed4:	08000f59 	.word	0x08000f59
 8000ed8:	08000f59 	.word	0x08000f59
 8000edc:	08000f59 	.word	0x08000f59
 8000ee0:	08000f59 	.word	0x08000f59
 8000ee4:	08000f59 	.word	0x08000f59
 8000ee8:	08000f59 	.word	0x08000f59
 8000eec:	08000f59 	.word	0x08000f59
 8000ef0:	08000f59 	.word	0x08000f59
 8000ef4:	08000f59 	.word	0x08000f59
 8000ef8:	08000f59 	.word	0x08000f59
 8000efc:	08000f59 	.word	0x08000f59
 8000f00:	08000f59 	.word	0x08000f59
 8000f04:	08000f59 	.word	0x08000f59
 8000f08:	08000f59 	.word	0x08000f59
 8000f0c:	08000f59 	.word	0x08000f59
 8000f10:	08000f59 	.word	0x08000f59
 8000f14:	08000f59 	.word	0x08000f59
 8000f18:	08000f59 	.word	0x08000f59
 8000f1c:	08000f59 	.word	0x08000f59
 8000f20:	08000f3f 	.word	0x08000f3f
 8000f24:	08000f3f 	.word	0x08000f3f
    {
      case L6474_ABS_POS: ;
      case L6474_MARK:
        spiTxBursts[0][spiIndex] = ((uint8_t)L6474_GET_PARAM )| (param);
 8000f28:	683b      	ldr	r3, [r7, #0]
 8000f2a:	b2da      	uxtb	r2, r3
 8000f2c:	7c7b      	ldrb	r3, [r7, #17]
 8000f2e:	f042 0220 	orr.w	r2, r2, #32
 8000f32:	b2d1      	uxtb	r1, r2
 8000f34:	4a2e      	ldr	r2, [pc, #184]	; (8000ff0 <L6474_CmdGetParam+0x1dc>)
 8000f36:	54d1      	strb	r1, [r2, r3]
        maxArgumentNbBytes = 3;
 8000f38:	2303      	movs	r3, #3
 8000f3a:	74fb      	strb	r3, [r7, #19]
        break;
 8000f3c:	e018      	b.n	8000f70 <L6474_CmdGetParam+0x15c>
      case L6474_EL_POS: ;
      case L6474_CONFIG: ;
      case L6474_STATUS:
        spiTxBursts[1][spiIndex] = ((uint8_t)L6474_GET_PARAM )| (param);
 8000f3e:	683b      	ldr	r3, [r7, #0]
 8000f40:	b2da      	uxtb	r2, r3
 8000f42:	7c7b      	ldrb	r3, [r7, #17]
 8000f44:	f042 0220 	orr.w	r2, r2, #32
 8000f48:	b2d1      	uxtb	r1, r2
 8000f4a:	4a29      	ldr	r2, [pc, #164]	; (8000ff0 <L6474_CmdGetParam+0x1dc>)
 8000f4c:	4413      	add	r3, r2
 8000f4e:	460a      	mov	r2, r1
 8000f50:	70da      	strb	r2, [r3, #3]
        maxArgumentNbBytes = 2;
 8000f52:	2302      	movs	r3, #2
 8000f54:	74fb      	strb	r3, [r7, #19]
        break;
 8000f56:	e00b      	b.n	8000f70 <L6474_CmdGetParam+0x15c>
      default:
        spiTxBursts[2][spiIndex] = ((uint8_t)L6474_GET_PARAM )| (param);
 8000f58:	683b      	ldr	r3, [r7, #0]
 8000f5a:	b2da      	uxtb	r2, r3
 8000f5c:	7c7b      	ldrb	r3, [r7, #17]
 8000f5e:	f042 0220 	orr.w	r2, r2, #32
 8000f62:	b2d1      	uxtb	r1, r2
 8000f64:	4a22      	ldr	r2, [pc, #136]	; (8000ff0 <L6474_CmdGetParam+0x1dc>)
 8000f66:	4413      	add	r3, r2
 8000f68:	460a      	mov	r2, r1
 8000f6a:	719a      	strb	r2, [r3, #6]
        maxArgumentNbBytes = 1;
 8000f6c:	2301      	movs	r3, #1
 8000f6e:	74fb      	strb	r3, [r7, #19]
    }
    
    /* Disable interruption before checking */
    /* pre-emption by ISR and SPI transfers*/
    L6474_Board_DisableIrq();
 8000f70:	f003 f8c1 	bl	80040f6 <L6474_Board_DisableIrq>
    itDisable = TRUE;
 8000f74:	2301      	movs	r3, #1
 8000f76:	74bb      	strb	r3, [r7, #18]
  } while (spiPreemtionByIsr); // check pre-emption by ISR
 8000f78:	4b1c      	ldr	r3, [pc, #112]	; (8000fec <L6474_CmdGetParam+0x1d8>)
 8000f7a:	781b      	ldrb	r3, [r3, #0]
 8000f7c:	b2db      	uxtb	r3, r3
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	f47f af5a 	bne.w	8000e38 <L6474_CmdGetParam+0x24>
    
  for (i = L6474_CMD_ARG_MAX_NB_BYTES-1-maxArgumentNbBytes;
 8000f84:	7cfb      	ldrb	r3, [r7, #19]
 8000f86:	f1c3 0303 	rsb	r3, r3, #3
 8000f8a:	617b      	str	r3, [r7, #20]
 8000f8c:	e011      	b.n	8000fb2 <L6474_CmdGetParam+0x19e>
       i < L6474_CMD_ARG_MAX_NB_BYTES;
       i++)
  {
     L6474_WriteBytes(&spiTxBursts[i][0],
 8000f8e:	697a      	ldr	r2, [r7, #20]
 8000f90:	4613      	mov	r3, r2
 8000f92:	005b      	lsls	r3, r3, #1
 8000f94:	4413      	add	r3, r2
 8000f96:	4a16      	ldr	r2, [pc, #88]	; (8000ff0 <L6474_CmdGetParam+0x1dc>)
 8000f98:	1898      	adds	r0, r3, r2
 8000f9a:	697a      	ldr	r2, [r7, #20]
 8000f9c:	4613      	mov	r3, r2
 8000f9e:	005b      	lsls	r3, r3, #1
 8000fa0:	4413      	add	r3, r2
 8000fa2:	4a14      	ldr	r2, [pc, #80]	; (8000ff4 <L6474_CmdGetParam+0x1e0>)
 8000fa4:	4413      	add	r3, r2
 8000fa6:	4619      	mov	r1, r3
 8000fa8:	f002 f850 	bl	800304c <L6474_WriteBytes>
       i++)
 8000fac:	697b      	ldr	r3, [r7, #20]
 8000fae:	3301      	adds	r3, #1
 8000fb0:	617b      	str	r3, [r7, #20]
  for (i = L6474_CMD_ARG_MAX_NB_BYTES-1-maxArgumentNbBytes;
 8000fb2:	697b      	ldr	r3, [r7, #20]
 8000fb4:	2b03      	cmp	r3, #3
 8000fb6:	d9ea      	bls.n	8000f8e <L6474_CmdGetParam+0x17a>
                          &spiRxBursts[i][0]);
  }
  
  spiRxData = ((uint32_t)spiRxBursts[1][spiIndex] << 16)|
 8000fb8:	7c7b      	ldrb	r3, [r7, #17]
 8000fba:	4a0e      	ldr	r2, [pc, #56]	; (8000ff4 <L6474_CmdGetParam+0x1e0>)
 8000fbc:	4413      	add	r3, r2
 8000fbe:	78db      	ldrb	r3, [r3, #3]
 8000fc0:	041b      	lsls	r3, r3, #16
              (spiRxBursts[2][spiIndex] << 8) |
 8000fc2:	7c7a      	ldrb	r2, [r7, #17]
 8000fc4:	490b      	ldr	r1, [pc, #44]	; (8000ff4 <L6474_CmdGetParam+0x1e0>)
 8000fc6:	440a      	add	r2, r1
 8000fc8:	7992      	ldrb	r2, [r2, #6]
 8000fca:	0212      	lsls	r2, r2, #8
  spiRxData = ((uint32_t)spiRxBursts[1][spiIndex] << 16)|
 8000fcc:	4313      	orrs	r3, r2
              (spiRxBursts[3][spiIndex]);
 8000fce:	7c7a      	ldrb	r2, [r7, #17]
 8000fd0:	4908      	ldr	r1, [pc, #32]	; (8000ff4 <L6474_CmdGetParam+0x1e0>)
 8000fd2:	440a      	add	r2, r1
 8000fd4:	7a52      	ldrb	r2, [r2, #9]
  spiRxData = ((uint32_t)spiRxBursts[1][spiIndex] << 16)|
 8000fd6:	4313      	orrs	r3, r2
 8000fd8:	60fb      	str	r3, [r7, #12]
  
  /* re-enable L6474_Board_EnableIrq after SPI transfers*/
  L6474_Board_EnableIrq();
 8000fda:	f003 f895 	bl	8004108 <L6474_Board_EnableIrq>
    
  return (spiRxData);
 8000fde:	68fb      	ldr	r3, [r7, #12]
}
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	3718      	adds	r7, #24
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	bd80      	pop	{r7, pc}
 8000fe8:	200003d0 	.word	0x200003d0
 8000fec:	200003ec 	.word	0x200003ec
 8000ff0:	200003d4 	.word	0x200003d4
 8000ff4:	200003e0 	.word	0x200003e0

08000ff8 <L6474_CmdGetStatus>:
 * @note Once the GetStatus command is performed, the flags of the status register
 * are reset. This is not the case when the status register is read with the
 * GetParam command (via the functions L6474ReadStatusRegister or L6474CmdGetParam).
 **********************************************************/
uint16_t L6474_CmdGetStatus(uint8_t deviceId)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b084      	sub	sp, #16
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	4603      	mov	r3, r0
 8001000:	71fb      	strb	r3, [r7, #7]
  uint32_t i;
  uint16_t status;
  uint8_t spiIndex = numberOfDevices - deviceId - 1;
 8001002:	4b3c      	ldr	r3, [pc, #240]	; (80010f4 <L6474_CmdGetStatus+0xfc>)
 8001004:	781b      	ldrb	r3, [r3, #0]
 8001006:	b2da      	uxtb	r2, r3
 8001008:	79fb      	ldrb	r3, [r7, #7]
 800100a:	1ad3      	subs	r3, r2, r3
 800100c:	b2db      	uxtb	r3, r3
 800100e:	3b01      	subs	r3, #1
 8001010:	72bb      	strb	r3, [r7, #10]
  bool itDisable = FALSE;  
 8001012:	2300      	movs	r3, #0
 8001014:	72fb      	strb	r3, [r7, #11]
  
  do
  {
    spiPreemtionByIsr = FALSE;
 8001016:	4b38      	ldr	r3, [pc, #224]	; (80010f8 <L6474_CmdGetStatus+0x100>)
 8001018:	2200      	movs	r2, #0
 800101a:	701a      	strb	r2, [r3, #0]
    if (itDisable)
 800101c:	7afb      	ldrb	r3, [r7, #11]
 800101e:	2b00      	cmp	r3, #0
 8001020:	d003      	beq.n	800102a <L6474_CmdGetStatus+0x32>
    {
      /* re-enable L6474_Board_EnableIrq if disable in previous iteration */
      L6474_Board_EnableIrq();
 8001022:	f003 f871 	bl	8004108 <L6474_Board_EnableIrq>
      itDisable = FALSE;
 8001026:	2300      	movs	r3, #0
 8001028:	72fb      	strb	r3, [r7, #11]
    }

    for (i = 0; i < numberOfDevices; i++)
 800102a:	2300      	movs	r3, #0
 800102c:	60fb      	str	r3, [r7, #12]
 800102e:	e01f      	b.n	8001070 <L6474_CmdGetStatus+0x78>
    {
       spiTxBursts[0][i] = L6474_NOP;
 8001030:	4a32      	ldr	r2, [pc, #200]	; (80010fc <L6474_CmdGetStatus+0x104>)
 8001032:	68fb      	ldr	r3, [r7, #12]
 8001034:	4413      	add	r3, r2
 8001036:	2200      	movs	r2, #0
 8001038:	701a      	strb	r2, [r3, #0]
       spiTxBursts[1][i] = L6474_NOP;
 800103a:	4a30      	ldr	r2, [pc, #192]	; (80010fc <L6474_CmdGetStatus+0x104>)
 800103c:	68fb      	ldr	r3, [r7, #12]
 800103e:	4413      	add	r3, r2
 8001040:	3303      	adds	r3, #3
 8001042:	2200      	movs	r2, #0
 8001044:	701a      	strb	r2, [r3, #0]
       spiTxBursts[2][i] = L6474_NOP;
 8001046:	4a2d      	ldr	r2, [pc, #180]	; (80010fc <L6474_CmdGetStatus+0x104>)
 8001048:	68fb      	ldr	r3, [r7, #12]
 800104a:	4413      	add	r3, r2
 800104c:	3306      	adds	r3, #6
 800104e:	2200      	movs	r2, #0
 8001050:	701a      	strb	r2, [r3, #0]
       spiRxBursts[1][i] = 0;
 8001052:	4a2b      	ldr	r2, [pc, #172]	; (8001100 <L6474_CmdGetStatus+0x108>)
 8001054:	68fb      	ldr	r3, [r7, #12]
 8001056:	4413      	add	r3, r2
 8001058:	3303      	adds	r3, #3
 800105a:	2200      	movs	r2, #0
 800105c:	701a      	strb	r2, [r3, #0]
       spiRxBursts[2][i] = 0;
 800105e:	4a28      	ldr	r2, [pc, #160]	; (8001100 <L6474_CmdGetStatus+0x108>)
 8001060:	68fb      	ldr	r3, [r7, #12]
 8001062:	4413      	add	r3, r2
 8001064:	3306      	adds	r3, #6
 8001066:	2200      	movs	r2, #0
 8001068:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < numberOfDevices; i++)
 800106a:	68fb      	ldr	r3, [r7, #12]
 800106c:	3301      	adds	r3, #1
 800106e:	60fb      	str	r3, [r7, #12]
 8001070:	4b20      	ldr	r3, [pc, #128]	; (80010f4 <L6474_CmdGetStatus+0xfc>)
 8001072:	781b      	ldrb	r3, [r3, #0]
 8001074:	b2db      	uxtb	r3, r3
 8001076:	461a      	mov	r2, r3
 8001078:	68fb      	ldr	r3, [r7, #12]
 800107a:	4293      	cmp	r3, r2
 800107c:	d3d8      	bcc.n	8001030 <L6474_CmdGetStatus+0x38>
    }
    spiTxBursts[0][spiIndex] = L6474_GET_STATUS;
 800107e:	7abb      	ldrb	r3, [r7, #10]
 8001080:	4a1e      	ldr	r2, [pc, #120]	; (80010fc <L6474_CmdGetStatus+0x104>)
 8001082:	21d0      	movs	r1, #208	; 0xd0
 8001084:	54d1      	strb	r1, [r2, r3]

    /* Disable interruption before checking */
    /* pre-emption by ISR and SPI transfers*/
    L6474_Board_DisableIrq();
 8001086:	f003 f836 	bl	80040f6 <L6474_Board_DisableIrq>
    itDisable = TRUE;
 800108a:	2301      	movs	r3, #1
 800108c:	72fb      	strb	r3, [r7, #11]
  } while (spiPreemtionByIsr); // check pre-emption by ISR
 800108e:	4b1a      	ldr	r3, [pc, #104]	; (80010f8 <L6474_CmdGetStatus+0x100>)
 8001090:	781b      	ldrb	r3, [r3, #0]
 8001092:	b2db      	uxtb	r3, r3
 8001094:	2b00      	cmp	r3, #0
 8001096:	d1be      	bne.n	8001016 <L6474_CmdGetStatus+0x1e>

  for (i = 0; i < L6474_CMD_ARG_NB_BYTES_GET_STATUS + L6474_RSP_NB_BYTES_GET_STATUS; i++)
 8001098:	2300      	movs	r3, #0
 800109a:	60fb      	str	r3, [r7, #12]
 800109c:	e011      	b.n	80010c2 <L6474_CmdGetStatus+0xca>
  {
     L6474_WriteBytes(&spiTxBursts[i][0], &spiRxBursts[i][0]);
 800109e:	68fa      	ldr	r2, [r7, #12]
 80010a0:	4613      	mov	r3, r2
 80010a2:	005b      	lsls	r3, r3, #1
 80010a4:	4413      	add	r3, r2
 80010a6:	4a15      	ldr	r2, [pc, #84]	; (80010fc <L6474_CmdGetStatus+0x104>)
 80010a8:	1898      	adds	r0, r3, r2
 80010aa:	68fa      	ldr	r2, [r7, #12]
 80010ac:	4613      	mov	r3, r2
 80010ae:	005b      	lsls	r3, r3, #1
 80010b0:	4413      	add	r3, r2
 80010b2:	4a13      	ldr	r2, [pc, #76]	; (8001100 <L6474_CmdGetStatus+0x108>)
 80010b4:	4413      	add	r3, r2
 80010b6:	4619      	mov	r1, r3
 80010b8:	f001 ffc8 	bl	800304c <L6474_WriteBytes>
  for (i = 0; i < L6474_CMD_ARG_NB_BYTES_GET_STATUS + L6474_RSP_NB_BYTES_GET_STATUS; i++)
 80010bc:	68fb      	ldr	r3, [r7, #12]
 80010be:	3301      	adds	r3, #1
 80010c0:	60fb      	str	r3, [r7, #12]
 80010c2:	68fb      	ldr	r3, [r7, #12]
 80010c4:	2b02      	cmp	r3, #2
 80010c6:	d9ea      	bls.n	800109e <L6474_CmdGetStatus+0xa6>
  }
  status = (spiRxBursts[1][spiIndex] << 8) | (spiRxBursts[2][spiIndex]);
 80010c8:	7abb      	ldrb	r3, [r7, #10]
 80010ca:	4a0d      	ldr	r2, [pc, #52]	; (8001100 <L6474_CmdGetStatus+0x108>)
 80010cc:	4413      	add	r3, r2
 80010ce:	78db      	ldrb	r3, [r3, #3]
 80010d0:	021b      	lsls	r3, r3, #8
 80010d2:	b21a      	sxth	r2, r3
 80010d4:	7abb      	ldrb	r3, [r7, #10]
 80010d6:	490a      	ldr	r1, [pc, #40]	; (8001100 <L6474_CmdGetStatus+0x108>)
 80010d8:	440b      	add	r3, r1
 80010da:	799b      	ldrb	r3, [r3, #6]
 80010dc:	b21b      	sxth	r3, r3
 80010de:	4313      	orrs	r3, r2
 80010e0:	b21b      	sxth	r3, r3
 80010e2:	813b      	strh	r3, [r7, #8]
  
  /* re-enable L6474_Board_EnableIrq after SPI transfers*/
  L6474_Board_EnableIrq();
 80010e4:	f003 f810 	bl	8004108 <L6474_Board_EnableIrq>
  
  return (status);
 80010e8:	893b      	ldrh	r3, [r7, #8]
}
 80010ea:	4618      	mov	r0, r3
 80010ec:	3710      	adds	r7, #16
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bd80      	pop	{r7, pc}
 80010f2:	bf00      	nop
 80010f4:	200003d0 	.word	0x200003d0
 80010f8:	200003ec 	.word	0x200003ec
 80010fc:	200003d4 	.word	0x200003d4
 8001100:	200003e0 	.word	0x200003e0

08001104 <L6474_CmdNop>:
 * @brief  Issues the Nop command to the L6474 of the specified device
 * @param[in] deviceId (from 0 to 2)
 * @retval None
 **********************************************************/
void L6474_CmdNop(uint8_t deviceId)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b082      	sub	sp, #8
 8001108:	af00      	add	r7, sp, #0
 800110a:	4603      	mov	r3, r0
 800110c:	71fb      	strb	r3, [r7, #7]
  L6474_SendCommand(deviceId, L6474_NOP);
 800110e:	79fb      	ldrb	r3, [r7, #7]
 8001110:	2100      	movs	r1, #0
 8001112:	4618      	mov	r0, r3
 8001114:	f001 f8f8 	bl	8002308 <L6474_SendCommand>
}
 8001118:	bf00      	nop
 800111a:	3708      	adds	r7, #8
 800111c:	46bd      	mov	sp, r7
 800111e:	bd80      	pop	{r7, pc}

08001120 <L6474_CmdSetParam>:
 * @retval None
 **********************************************************/
void L6474_CmdSetParam(uint8_t deviceId,
                       uint32_t param,
                       uint32_t value)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b086      	sub	sp, #24
 8001124:	af00      	add	r7, sp, #0
 8001126:	4603      	mov	r3, r0
 8001128:	60b9      	str	r1, [r7, #8]
 800112a:	607a      	str	r2, [r7, #4]
 800112c:	73fb      	strb	r3, [r7, #15]
  uint32_t i;
  uint8_t maxArgumentNbBytes = 0;
 800112e:	2300      	movs	r3, #0
 8001130:	74fb      	strb	r3, [r7, #19]
  uint8_t spiIndex = numberOfDevices - deviceId - 1;
 8001132:	4b69      	ldr	r3, [pc, #420]	; (80012d8 <L6474_CmdSetParam+0x1b8>)
 8001134:	781b      	ldrb	r3, [r3, #0]
 8001136:	b2da      	uxtb	r2, r3
 8001138:	7bfb      	ldrb	r3, [r7, #15]
 800113a:	1ad3      	subs	r3, r2, r3
 800113c:	b2db      	uxtb	r3, r3
 800113e:	3b01      	subs	r3, #1
 8001140:	747b      	strb	r3, [r7, #17]
  bool itDisable = FALSE;  
 8001142:	2300      	movs	r3, #0
 8001144:	74bb      	strb	r3, [r7, #18]
  do
  {
    spiPreemtionByIsr = FALSE;
 8001146:	4b65      	ldr	r3, [pc, #404]	; (80012dc <L6474_CmdSetParam+0x1bc>)
 8001148:	2200      	movs	r2, #0
 800114a:	701a      	strb	r2, [r3, #0]
    if (itDisable)
 800114c:	7cbb      	ldrb	r3, [r7, #18]
 800114e:	2b00      	cmp	r3, #0
 8001150:	d003      	beq.n	800115a <L6474_CmdSetParam+0x3a>
    {
      /* re-enable L6474_Board_EnableIrq if disable in previous iteration */
      L6474_Board_EnableIrq();
 8001152:	f002 ffd9 	bl	8004108 <L6474_Board_EnableIrq>
      itDisable = FALSE;
 8001156:	2300      	movs	r3, #0
 8001158:	74bb      	strb	r3, [r7, #18]
    }
    for (i = 0; i < numberOfDevices; i++)
 800115a:	2300      	movs	r3, #0
 800115c:	617b      	str	r3, [r7, #20]
 800115e:	e019      	b.n	8001194 <L6474_CmdSetParam+0x74>
    {
      spiTxBursts[0][i] = L6474_NOP;
 8001160:	4a5f      	ldr	r2, [pc, #380]	; (80012e0 <L6474_CmdSetParam+0x1c0>)
 8001162:	697b      	ldr	r3, [r7, #20]
 8001164:	4413      	add	r3, r2
 8001166:	2200      	movs	r2, #0
 8001168:	701a      	strb	r2, [r3, #0]
      spiTxBursts[1][i] = L6474_NOP;
 800116a:	4a5d      	ldr	r2, [pc, #372]	; (80012e0 <L6474_CmdSetParam+0x1c0>)
 800116c:	697b      	ldr	r3, [r7, #20]
 800116e:	4413      	add	r3, r2
 8001170:	3303      	adds	r3, #3
 8001172:	2200      	movs	r2, #0
 8001174:	701a      	strb	r2, [r3, #0]
      spiTxBursts[2][i] = L6474_NOP;
 8001176:	4a5a      	ldr	r2, [pc, #360]	; (80012e0 <L6474_CmdSetParam+0x1c0>)
 8001178:	697b      	ldr	r3, [r7, #20]
 800117a:	4413      	add	r3, r2
 800117c:	3306      	adds	r3, #6
 800117e:	2200      	movs	r2, #0
 8001180:	701a      	strb	r2, [r3, #0]
      spiTxBursts[3][i] = L6474_NOP;
 8001182:	4a57      	ldr	r2, [pc, #348]	; (80012e0 <L6474_CmdSetParam+0x1c0>)
 8001184:	697b      	ldr	r3, [r7, #20]
 8001186:	4413      	add	r3, r2
 8001188:	3309      	adds	r3, #9
 800118a:	2200      	movs	r2, #0
 800118c:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < numberOfDevices; i++)
 800118e:	697b      	ldr	r3, [r7, #20]
 8001190:	3301      	adds	r3, #1
 8001192:	617b      	str	r3, [r7, #20]
 8001194:	4b50      	ldr	r3, [pc, #320]	; (80012d8 <L6474_CmdSetParam+0x1b8>)
 8001196:	781b      	ldrb	r3, [r3, #0]
 8001198:	b2db      	uxtb	r3, r3
 800119a:	461a      	mov	r2, r3
 800119c:	697b      	ldr	r3, [r7, #20]
 800119e:	4293      	cmp	r3, r2
 80011a0:	d3de      	bcc.n	8001160 <L6474_CmdSetParam+0x40>
    }
    switch (param)
 80011a2:	68bb      	ldr	r3, [r7, #8]
 80011a4:	3b01      	subs	r3, #1
 80011a6:	2b17      	cmp	r3, #23
 80011a8:	d85c      	bhi.n	8001264 <L6474_CmdSetParam+0x144>
 80011aa:	a201      	add	r2, pc, #4	; (adr r2, 80011b0 <L6474_CmdSetParam+0x90>)
 80011ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011b0:	08001211 	.word	0x08001211
 80011b4:	08001241 	.word	0x08001241
 80011b8:	08001211 	.word	0x08001211
 80011bc:	08001265 	.word	0x08001265
 80011c0:	08001265 	.word	0x08001265
 80011c4:	08001265 	.word	0x08001265
 80011c8:	08001265 	.word	0x08001265
 80011cc:	08001265 	.word	0x08001265
 80011d0:	08001265 	.word	0x08001265
 80011d4:	08001265 	.word	0x08001265
 80011d8:	08001265 	.word	0x08001265
 80011dc:	08001265 	.word	0x08001265
 80011e0:	08001265 	.word	0x08001265
 80011e4:	08001265 	.word	0x08001265
 80011e8:	08001265 	.word	0x08001265
 80011ec:	08001265 	.word	0x08001265
 80011f0:	08001265 	.word	0x08001265
 80011f4:	08001265 	.word	0x08001265
 80011f8:	08001265 	.word	0x08001265
 80011fc:	08001265 	.word	0x08001265
 8001200:	08001265 	.word	0x08001265
 8001204:	08001265 	.word	0x08001265
 8001208:	08001265 	.word	0x08001265
 800120c:	08001241 	.word	0x08001241
  {
    case L6474_ABS_POS: ;
    case L6474_MARK:
        spiTxBursts[0][spiIndex] = param;
 8001210:	7c7b      	ldrb	r3, [r7, #17]
 8001212:	68ba      	ldr	r2, [r7, #8]
 8001214:	b2d1      	uxtb	r1, r2
 8001216:	4a32      	ldr	r2, [pc, #200]	; (80012e0 <L6474_CmdSetParam+0x1c0>)
 8001218:	54d1      	strb	r1, [r2, r3]
        spiTxBursts[1][spiIndex] = (uint8_t)(value >> 16);
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	0c1a      	lsrs	r2, r3, #16
 800121e:	7c7b      	ldrb	r3, [r7, #17]
 8001220:	b2d1      	uxtb	r1, r2
 8001222:	4a2f      	ldr	r2, [pc, #188]	; (80012e0 <L6474_CmdSetParam+0x1c0>)
 8001224:	4413      	add	r3, r2
 8001226:	460a      	mov	r2, r1
 8001228:	70da      	strb	r2, [r3, #3]
        spiTxBursts[2][spiIndex] = (uint8_t)(value >> 8);
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	0a1a      	lsrs	r2, r3, #8
 800122e:	7c7b      	ldrb	r3, [r7, #17]
 8001230:	b2d1      	uxtb	r1, r2
 8001232:	4a2b      	ldr	r2, [pc, #172]	; (80012e0 <L6474_CmdSetParam+0x1c0>)
 8001234:	4413      	add	r3, r2
 8001236:	460a      	mov	r2, r1
 8001238:	719a      	strb	r2, [r3, #6]
        maxArgumentNbBytes = 3;
 800123a:	2303      	movs	r3, #3
 800123c:	74fb      	strb	r3, [r7, #19]
        break;
 800123e:	e01a      	b.n	8001276 <L6474_CmdSetParam+0x156>
    case L6474_EL_POS: ;
    case L6474_CONFIG:
        spiTxBursts[1][spiIndex] = param;
 8001240:	7c7b      	ldrb	r3, [r7, #17]
 8001242:	68ba      	ldr	r2, [r7, #8]
 8001244:	b2d1      	uxtb	r1, r2
 8001246:	4a26      	ldr	r2, [pc, #152]	; (80012e0 <L6474_CmdSetParam+0x1c0>)
 8001248:	4413      	add	r3, r2
 800124a:	460a      	mov	r2, r1
 800124c:	70da      	strb	r2, [r3, #3]
        spiTxBursts[2][spiIndex] = (uint8_t)(value >> 8);
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	0a1a      	lsrs	r2, r3, #8
 8001252:	7c7b      	ldrb	r3, [r7, #17]
 8001254:	b2d1      	uxtb	r1, r2
 8001256:	4a22      	ldr	r2, [pc, #136]	; (80012e0 <L6474_CmdSetParam+0x1c0>)
 8001258:	4413      	add	r3, r2
 800125a:	460a      	mov	r2, r1
 800125c:	719a      	strb	r2, [r3, #6]
        maxArgumentNbBytes = 2;
 800125e:	2302      	movs	r3, #2
 8001260:	74fb      	strb	r3, [r7, #19]
        break;
 8001262:	e008      	b.n	8001276 <L6474_CmdSetParam+0x156>
    default:
        spiTxBursts[2][spiIndex] = param;
 8001264:	7c7b      	ldrb	r3, [r7, #17]
 8001266:	68ba      	ldr	r2, [r7, #8]
 8001268:	b2d1      	uxtb	r1, r2
 800126a:	4a1d      	ldr	r2, [pc, #116]	; (80012e0 <L6474_CmdSetParam+0x1c0>)
 800126c:	4413      	add	r3, r2
 800126e:	460a      	mov	r2, r1
 8001270:	719a      	strb	r2, [r3, #6]
        maxArgumentNbBytes = 1;
 8001272:	2301      	movs	r3, #1
 8001274:	74fb      	strb	r3, [r7, #19]
    }
    spiTxBursts[3][spiIndex] = (uint8_t)(value);
 8001276:	7c7b      	ldrb	r3, [r7, #17]
 8001278:	687a      	ldr	r2, [r7, #4]
 800127a:	b2d1      	uxtb	r1, r2
 800127c:	4a18      	ldr	r2, [pc, #96]	; (80012e0 <L6474_CmdSetParam+0x1c0>)
 800127e:	4413      	add	r3, r2
 8001280:	460a      	mov	r2, r1
 8001282:	725a      	strb	r2, [r3, #9]
    
    /* Disable interruption before checking */
    /* pre-emption by ISR and SPI transfers*/
    L6474_Board_DisableIrq();
 8001284:	f002 ff37 	bl	80040f6 <L6474_Board_DisableIrq>
    itDisable = TRUE;
 8001288:	2301      	movs	r3, #1
 800128a:	74bb      	strb	r3, [r7, #18]
  } while (spiPreemtionByIsr); // check pre-emption by ISR
 800128c:	4b13      	ldr	r3, [pc, #76]	; (80012dc <L6474_CmdSetParam+0x1bc>)
 800128e:	781b      	ldrb	r3, [r3, #0]
 8001290:	b2db      	uxtb	r3, r3
 8001292:	2b00      	cmp	r3, #0
 8001294:	f47f af57 	bne.w	8001146 <L6474_CmdSetParam+0x26>
 
  /* SPI transfer */
  for (i = L6474_CMD_ARG_MAX_NB_BYTES-1-maxArgumentNbBytes;
 8001298:	7cfb      	ldrb	r3, [r7, #19]
 800129a:	f1c3 0303 	rsb	r3, r3, #3
 800129e:	617b      	str	r3, [r7, #20]
 80012a0:	e011      	b.n	80012c6 <L6474_CmdSetParam+0x1a6>
       i < L6474_CMD_ARG_MAX_NB_BYTES;
       i++)
  {
     L6474_WriteBytes(&spiTxBursts[i][0],&spiRxBursts[i][0]);
 80012a2:	697a      	ldr	r2, [r7, #20]
 80012a4:	4613      	mov	r3, r2
 80012a6:	005b      	lsls	r3, r3, #1
 80012a8:	4413      	add	r3, r2
 80012aa:	4a0d      	ldr	r2, [pc, #52]	; (80012e0 <L6474_CmdSetParam+0x1c0>)
 80012ac:	1898      	adds	r0, r3, r2
 80012ae:	697a      	ldr	r2, [r7, #20]
 80012b0:	4613      	mov	r3, r2
 80012b2:	005b      	lsls	r3, r3, #1
 80012b4:	4413      	add	r3, r2
 80012b6:	4a0b      	ldr	r2, [pc, #44]	; (80012e4 <L6474_CmdSetParam+0x1c4>)
 80012b8:	4413      	add	r3, r2
 80012ba:	4619      	mov	r1, r3
 80012bc:	f001 fec6 	bl	800304c <L6474_WriteBytes>
       i++)
 80012c0:	697b      	ldr	r3, [r7, #20]
 80012c2:	3301      	adds	r3, #1
 80012c4:	617b      	str	r3, [r7, #20]
  for (i = L6474_CMD_ARG_MAX_NB_BYTES-1-maxArgumentNbBytes;
 80012c6:	697b      	ldr	r3, [r7, #20]
 80012c8:	2b03      	cmp	r3, #3
 80012ca:	d9ea      	bls.n	80012a2 <L6474_CmdSetParam+0x182>
  }
  /* re-enable L6474_Board_EnableIrq after SPI transfers*/
  L6474_Board_EnableIrq();
 80012cc:	f002 ff1c 	bl	8004108 <L6474_Board_EnableIrq>
}
 80012d0:	bf00      	nop
 80012d2:	3718      	adds	r7, #24
 80012d4:	46bd      	mov	sp, r7
 80012d6:	bd80      	pop	{r7, pc}
 80012d8:	200003d0 	.word	0x200003d0
 80012dc:	200003ec 	.word	0x200003ec
 80012e0:	200003d4 	.word	0x200003d4
 80012e4:	200003e0 	.word	0x200003e0

080012e8 <L6474_Init>:
 * @brief Starts a new L6474 instance 
 * @param[in] pInit pointer to the initialization data
 * @retval None
 **********************************************************/
void L6474_Init(void* pInit)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b082      	sub	sp, #8
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
  /* Initialise the GPIOs */
  L6474_Board_GpioInit(l6474DriverInstance);
 80012f0:	4b22      	ldr	r3, [pc, #136]	; (800137c <L6474_Init+0x94>)
 80012f2:	881b      	ldrh	r3, [r3, #0]
 80012f4:	b2db      	uxtb	r3, r3
 80012f6:	4618      	mov	r0, r3
 80012f8:	f002 ff10 	bl	800411c <L6474_Board_GpioInit>
  
  if(L6474_Board_SpiInit() != 0)
 80012fc:	f003 f90c 	bl	8004518 <L6474_Board_SpiInit>
 8001300:	4603      	mov	r3, r0
 8001302:	2b00      	cmp	r3, #0
 8001304:	d003      	beq.n	800130e <L6474_Init+0x26>
  {
    /* Initialization Error */
    L6474_ErrorHandler(L6474_ERROR_0);
 8001306:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800130a:	f000 ffd1 	bl	80022b0 <L6474_ErrorHandler>
  } 

  /* Initialise the PWMs used for the Step clocks ----------------------------*/
  L6474_Board_PwmInit(l6474DriverInstance);
 800130e:	4b1b      	ldr	r3, [pc, #108]	; (800137c <L6474_Init+0x94>)
 8001310:	881b      	ldrh	r3, [r3, #0]
 8001312:	b2db      	uxtb	r3, r3
 8001314:	4618      	mov	r0, r3
 8001316:	f003 f82b 	bl	8004370 <L6474_Board_PwmInit>
 
  /* Standby-reset deactivation */
  L6474_Board_ReleaseReset(l6474DriverInstance);
 800131a:	4b18      	ldr	r3, [pc, #96]	; (800137c <L6474_Init+0x94>)
 800131c:	881b      	ldrh	r3, [r3, #0]
 800131e:	b2db      	uxtb	r3, r3
 8001320:	4618      	mov	r0, r3
 8001322:	f003 f8a5 	bl	8004470 <L6474_Board_ReleaseReset>
  
  /* Let a delay after reset */
  L6474_Board_Delay(1); 
 8001326:	2001      	movs	r0, #1
 8001328:	f002 feda 	bl	80040e0 <L6474_Board_Delay>
  
  /* Set all registers and context variables to the predefined values from l6474_target_config.h */
  if (pInit == 0)
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	2b00      	cmp	r3, #0
 8001330:	d106      	bne.n	8001340 <L6474_Init+0x58>
  {
    L6474_SetDeviceParamsToPredefinedValues(l6474DriverInstance);
 8001332:	4b12      	ldr	r3, [pc, #72]	; (800137c <L6474_Init+0x94>)
 8001334:	881b      	ldrh	r3, [r3, #0]
 8001336:	b2db      	uxtb	r3, r3
 8001338:	4618      	mov	r0, r3
 800133a:	f001 f8db 	bl	80024f4 <L6474_SetDeviceParamsToPredefinedValues>
 800133e:	e006      	b.n	800134e <L6474_Init+0x66>
  }
  else
  {
    L6474_SetDeviceParamsToGivenValues(l6474DriverInstance, pInit);
 8001340:	4b0e      	ldr	r3, [pc, #56]	; (800137c <L6474_Init+0x94>)
 8001342:	881b      	ldrh	r3, [r3, #0]
 8001344:	b2db      	uxtb	r3, r3
 8001346:	6879      	ldr	r1, [r7, #4]
 8001348:	4618      	mov	r0, r3
 800134a:	f001 f82f 	bl	80023ac <L6474_SetDeviceParamsToGivenValues>
  }
  /* Disable L6474 powerstage */
  L6474_CmdDisable(l6474DriverInstance);
 800134e:	4b0b      	ldr	r3, [pc, #44]	; (800137c <L6474_Init+0x94>)
 8001350:	881b      	ldrh	r3, [r3, #0]
 8001352:	b2db      	uxtb	r3, r3
 8001354:	4618      	mov	r0, r3
 8001356:	f7ff fd41 	bl	8000ddc <L6474_CmdDisable>

  /* Get Status to clear flags after start up */
  L6474_CmdGetStatus(l6474DriverInstance);
 800135a:	4b08      	ldr	r3, [pc, #32]	; (800137c <L6474_Init+0x94>)
 800135c:	881b      	ldrh	r3, [r3, #0]
 800135e:	b2db      	uxtb	r3, r3
 8001360:	4618      	mov	r0, r3
 8001362:	f7ff fe49 	bl	8000ff8 <L6474_CmdGetStatus>

  l6474DriverInstance++;
 8001366:	4b05      	ldr	r3, [pc, #20]	; (800137c <L6474_Init+0x94>)
 8001368:	881b      	ldrh	r3, [r3, #0]
 800136a:	3301      	adds	r3, #1
 800136c:	b29a      	uxth	r2, r3
 800136e:	4b03      	ldr	r3, [pc, #12]	; (800137c <L6474_Init+0x94>)
 8001370:	801a      	strh	r2, [r3, #0]
}
 8001372:	bf00      	nop
 8001374:	3708      	adds	r7, #8
 8001376:	46bd      	mov	sp, r7
 8001378:	bd80      	pop	{r7, pc}
 800137a:	bf00      	nop
 800137c:	200003ee 	.word	0x200003ee

08001380 <L6474_GetAcceleration>:
 * @brief Returns the acceleration of the specified device
 * @param[in] deviceId (from 0 to 2)
 * @retval Acceleration in pps^2
 **********************************************************/
uint16_t L6474_GetAcceleration(uint8_t deviceId)
{                                                  
 8001380:	b480      	push	{r7}
 8001382:	b083      	sub	sp, #12
 8001384:	af00      	add	r7, sp, #0
 8001386:	4603      	mov	r3, r0
 8001388:	71fb      	strb	r3, [r7, #7]
  return (devicePrm[deviceId].acceleration);
 800138a:	79fa      	ldrb	r2, [r7, #7]
 800138c:	4907      	ldr	r1, [pc, #28]	; (80013ac <L6474_GetAcceleration+0x2c>)
 800138e:	4613      	mov	r3, r2
 8001390:	009b      	lsls	r3, r3, #2
 8001392:	4413      	add	r3, r2
 8001394:	00db      	lsls	r3, r3, #3
 8001396:	440b      	add	r3, r1
 8001398:	3318      	adds	r3, #24
 800139a:	881b      	ldrh	r3, [r3, #0]
 800139c:	b29b      	uxth	r3, r3
}            
 800139e:	4618      	mov	r0, r3
 80013a0:	370c      	adds	r7, #12
 80013a2:	46bd      	mov	sp, r7
 80013a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a8:	4770      	bx	lr
 80013aa:	bf00      	nop
 80013ac:	200003f0 	.word	0x200003f0

080013b0 <L6474_GetCurrentSpeed>:
 * @brief Returns the current speed of the specified device
 * @param[in] deviceId (from 0 to 2)
 * @retval Speed in pps
 **********************************************************/
uint16_t L6474_GetCurrentSpeed(uint8_t deviceId)
{
 80013b0:	b480      	push	{r7}
 80013b2:	b083      	sub	sp, #12
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	4603      	mov	r3, r0
 80013b8:	71fb      	strb	r3, [r7, #7]
  return devicePrm[deviceId].speed;
 80013ba:	79fa      	ldrb	r2, [r7, #7]
 80013bc:	4907      	ldr	r1, [pc, #28]	; (80013dc <L6474_GetCurrentSpeed+0x2c>)
 80013be:	4613      	mov	r3, r2
 80013c0:	009b      	lsls	r3, r3, #2
 80013c2:	4413      	add	r3, r2
 80013c4:	00db      	lsls	r3, r3, #3
 80013c6:	440b      	add	r3, r1
 80013c8:	3320      	adds	r3, #32
 80013ca:	881b      	ldrh	r3, [r3, #0]
 80013cc:	b29b      	uxth	r3, r3
}
 80013ce:	4618      	mov	r0, r3
 80013d0:	370c      	adds	r7, #12
 80013d2:	46bd      	mov	sp, r7
 80013d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d8:	4770      	bx	lr
 80013da:	bf00      	nop
 80013dc:	200003f0 	.word	0x200003f0

080013e0 <L6474_GetDeceleration>:
 * @brief Returns the deceleration of the specified device
 * @param[in] deviceId (from 0 to 2)
 * @retval Deceleration in pps^2
 **********************************************************/
uint16_t L6474_GetDeceleration(uint8_t deviceId)
{                                                  
 80013e0:	b480      	push	{r7}
 80013e2:	b083      	sub	sp, #12
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	4603      	mov	r3, r0
 80013e8:	71fb      	strb	r3, [r7, #7]
  return (devicePrm[deviceId].deceleration);
 80013ea:	79fa      	ldrb	r2, [r7, #7]
 80013ec:	4907      	ldr	r1, [pc, #28]	; (800140c <L6474_GetDeceleration+0x2c>)
 80013ee:	4613      	mov	r3, r2
 80013f0:	009b      	lsls	r3, r3, #2
 80013f2:	4413      	add	r3, r2
 80013f4:	00db      	lsls	r3, r3, #3
 80013f6:	440b      	add	r3, r1
 80013f8:	331a      	adds	r3, #26
 80013fa:	881b      	ldrh	r3, [r3, #0]
 80013fc:	b29b      	uxth	r3, r3
}          
 80013fe:	4618      	mov	r0, r3
 8001400:	370c      	adds	r7, #12
 8001402:	46bd      	mov	sp, r7
 8001404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001408:	4770      	bx	lr
 800140a:	bf00      	nop
 800140c:	200003f0 	.word	0x200003f0

08001410 <L6474_GetDeviceState>:
 * @brief Returns the device state
 * @param[in] deviceId (from 0 to 2)
 * @retval State (ACCELERATING, DECELERATING, STEADY or INACTIVE)
 **********************************************************/
motorState_t L6474_GetDeviceState(uint8_t deviceId)
{
 8001410:	b480      	push	{r7}
 8001412:	b083      	sub	sp, #12
 8001414:	af00      	add	r7, sp, #0
 8001416:	4603      	mov	r3, r0
 8001418:	71fb      	strb	r3, [r7, #7]
  return devicePrm[deviceId].motionState;
 800141a:	79fa      	ldrb	r2, [r7, #7]
 800141c:	4907      	ldr	r1, [pc, #28]	; (800143c <L6474_GetDeviceState+0x2c>)
 800141e:	4613      	mov	r3, r2
 8001420:	009b      	lsls	r3, r3, #2
 8001422:	4413      	add	r3, r2
 8001424:	00db      	lsls	r3, r3, #3
 8001426:	440b      	add	r3, r1
 8001428:	3324      	adds	r3, #36	; 0x24
 800142a:	781b      	ldrb	r3, [r3, #0]
 800142c:	b2db      	uxtb	r3, r3
}
 800142e:	4618      	mov	r0, r3
 8001430:	370c      	adds	r7, #12
 8001432:	46bd      	mov	sp, r7
 8001434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001438:	4770      	bx	lr
 800143a:	bf00      	nop
 800143c:	200003f0 	.word	0x200003f0

08001440 <L6474_GetDirection>:
 * @brief Get the motor current direction
 * @param[in] deviceId Unused parameter
 * @retval direction
 **********************************************************/
motorDir_t L6474_GetDirection(uint8_t deviceId)
{
 8001440:	b480      	push	{r7}
 8001442:	b083      	sub	sp, #12
 8001444:	af00      	add	r7, sp, #0
 8001446:	4603      	mov	r3, r0
 8001448:	71fb      	strb	r3, [r7, #7]
  return devicePrm[deviceId].direction;
 800144a:	79fa      	ldrb	r2, [r7, #7]
 800144c:	4907      	ldr	r1, [pc, #28]	; (800146c <L6474_GetDirection+0x2c>)
 800144e:	4613      	mov	r3, r2
 8001450:	009b      	lsls	r3, r3, #2
 8001452:	4413      	add	r3, r2
 8001454:	00db      	lsls	r3, r3, #3
 8001456:	440b      	add	r3, r1
 8001458:	3323      	adds	r3, #35	; 0x23
 800145a:	781b      	ldrb	r3, [r3, #0]
 800145c:	b2db      	uxtb	r3, r3
}
 800145e:	4618      	mov	r0, r3
 8001460:	370c      	adds	r7, #12
 8001462:	46bd      	mov	sp, r7
 8001464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001468:	4770      	bx	lr
 800146a:	bf00      	nop
 800146c:	200003f0 	.word	0x200003f0

08001470 <L6474_GetFwVersion>:
/******************************************************//**
 * @brief Returns the FW version of the library
 * @retval L6474_FW_VERSION
 **********************************************************/
uint32_t L6474_GetFwVersion(void)
{
 8001470:	b480      	push	{r7}
 8001472:	af00      	add	r7, sp, #0
  return (L6474_FW_VERSION);
 8001474:	f44f 3385 	mov.w	r3, #68096	; 0x10a00
}
 8001478:	4618      	mov	r0, r3
 800147a:	46bd      	mov	sp, r7
 800147c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001480:	4770      	bx	lr
	...

08001484 <L6474_GetMotorHandle>:
/******************************************************//**
 * @brief  Return motor handle (pointer to the L6474 motor driver structure)
 * @retval Pointer to the motorDrv_t structure
 **********************************************************/
motorDrv_t* L6474_GetMotorHandle(void)
{
 8001484:	b480      	push	{r7}
 8001486:	af00      	add	r7, sp, #0
  return (&l6474Drv);
 8001488:	4b02      	ldr	r3, [pc, #8]	; (8001494 <L6474_GetMotorHandle+0x10>)
}
 800148a:	4618      	mov	r0, r3
 800148c:	46bd      	mov	sp, r7
 800148e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001492:	4770      	bx	lr
 8001494:	20000004 	.word	0x20000004

08001498 <L6474_GetMark>:
 * @brief  Returns the mark position  of the specified device
 * @param[in] deviceId (from 0 to 2)
 * @retval Mark register value converted in a 32b signed integer 
 **********************************************************/
int32_t L6474_GetMark(uint8_t deviceId)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	b082      	sub	sp, #8
 800149c:	af00      	add	r7, sp, #0
 800149e:	4603      	mov	r3, r0
 80014a0:	71fb      	strb	r3, [r7, #7]
  return L6474_ConvertPosition(L6474_CmdGetParam(deviceId,L6474_MARK));
 80014a2:	79fb      	ldrb	r3, [r7, #7]
 80014a4:	2103      	movs	r1, #3
 80014a6:	4618      	mov	r0, r3
 80014a8:	f7ff fcb4 	bl	8000e14 <L6474_CmdGetParam>
 80014ac:	4603      	mov	r3, r0
 80014ae:	4618      	mov	r0, r3
 80014b0:	f000 fede 	bl	8002270 <L6474_ConvertPosition>
 80014b4:	4603      	mov	r3, r0
}
 80014b6:	4618      	mov	r0, r3
 80014b8:	3708      	adds	r7, #8
 80014ba:	46bd      	mov	sp, r7
 80014bc:	bd80      	pop	{r7, pc}
	...

080014c0 <L6474_GetMaxSpeed>:
 * @brief  Returns the max speed of the specified device
 * @param[in] deviceId (from 0 to 2)
 * @retval maxSpeed in pps
 **********************************************************/
uint16_t L6474_GetMaxSpeed(uint8_t deviceId)
{                                                  
 80014c0:	b480      	push	{r7}
 80014c2:	b083      	sub	sp, #12
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	4603      	mov	r3, r0
 80014c8:	71fb      	strb	r3, [r7, #7]
  return (devicePrm[deviceId].maxSpeed);
 80014ca:	79fa      	ldrb	r2, [r7, #7]
 80014cc:	4907      	ldr	r1, [pc, #28]	; (80014ec <L6474_GetMaxSpeed+0x2c>)
 80014ce:	4613      	mov	r3, r2
 80014d0:	009b      	lsls	r3, r3, #2
 80014d2:	4413      	add	r3, r2
 80014d4:	00db      	lsls	r3, r3, #3
 80014d6:	440b      	add	r3, r1
 80014d8:	331c      	adds	r3, #28
 80014da:	881b      	ldrh	r3, [r3, #0]
 80014dc:	b29b      	uxth	r3, r3
}
 80014de:	4618      	mov	r0, r3
 80014e0:	370c      	adds	r7, #12
 80014e2:	46bd      	mov	sp, r7
 80014e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e8:	4770      	bx	lr
 80014ea:	bf00      	nop
 80014ec:	200003f0 	.word	0x200003f0

080014f0 <L6474_GetMinSpeed>:
 * @brief  Returns the min speed of the specified device
 * @param[in] deviceId (from 0 to 2)
 * @retval minSpeed in pps
 **********************************************************/
uint16_t L6474_GetMinSpeed(uint8_t deviceId)
{                                                  
 80014f0:	b480      	push	{r7}
 80014f2:	b083      	sub	sp, #12
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	4603      	mov	r3, r0
 80014f8:	71fb      	strb	r3, [r7, #7]
  return (devicePrm[deviceId].minSpeed);
 80014fa:	79fa      	ldrb	r2, [r7, #7]
 80014fc:	4907      	ldr	r1, [pc, #28]	; (800151c <L6474_GetMinSpeed+0x2c>)
 80014fe:	4613      	mov	r3, r2
 8001500:	009b      	lsls	r3, r3, #2
 8001502:	4413      	add	r3, r2
 8001504:	00db      	lsls	r3, r3, #3
 8001506:	440b      	add	r3, r1
 8001508:	331e      	adds	r3, #30
 800150a:	881b      	ldrh	r3, [r3, #0]
 800150c:	b29b      	uxth	r3, r3
}                                                     
 800150e:	4618      	mov	r0, r3
 8001510:	370c      	adds	r7, #12
 8001512:	46bd      	mov	sp, r7
 8001514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001518:	4770      	bx	lr
 800151a:	bf00      	nop
 800151c:	200003f0 	.word	0x200003f0

08001520 <L6474_GetNbDevices>:
/******************************************************//**
 * @brief  Returns the number of devices
 * @retval number of devices
 **********************************************************/
uint8_t L6474_GetNbDevices(void)
{
 8001520:	b480      	push	{r7}
 8001522:	af00      	add	r7, sp, #0
  return (numberOfDevices);
 8001524:	4b03      	ldr	r3, [pc, #12]	; (8001534 <L6474_GetNbDevices+0x14>)
 8001526:	781b      	ldrb	r3, [r3, #0]
 8001528:	b2db      	uxtb	r3, r3
}
 800152a:	4618      	mov	r0, r3
 800152c:	46bd      	mov	sp, r7
 800152e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001532:	4770      	bx	lr
 8001534:	200003d0 	.word	0x200003d0

08001538 <L6474_GetPosition>:
 * @brief  Returns the ABS_POSITION of the specified device
 * @param[in] deviceId (from 0 to 2)
 * @retval ABS_POSITION register value converted in a 32b signed integer
 **********************************************************/
int32_t L6474_GetPosition(uint8_t deviceId)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b082      	sub	sp, #8
 800153c:	af00      	add	r7, sp, #0
 800153e:	4603      	mov	r3, r0
 8001540:	71fb      	strb	r3, [r7, #7]
  return L6474_ConvertPosition(L6474_CmdGetParam(deviceId,L6474_ABS_POS));
 8001542:	79fb      	ldrb	r3, [r7, #7]
 8001544:	2101      	movs	r1, #1
 8001546:	4618      	mov	r0, r3
 8001548:	f7ff fc64 	bl	8000e14 <L6474_CmdGetParam>
 800154c:	4603      	mov	r3, r0
 800154e:	4618      	mov	r0, r3
 8001550:	f000 fe8e 	bl	8002270 <L6474_ConvertPosition>
 8001554:	4603      	mov	r3, r0
}
 8001556:	4618      	mov	r0, r3
 8001558:	3708      	adds	r7, #8
 800155a:	46bd      	mov	sp, r7
 800155c:	bd80      	pop	{r7, pc}
	...

08001560 <L6474_GetStepMode>:
 * @brief Get the motor step mode
 * @param[in] deviceId Unused parameter
 * @retval step mode
 **********************************************************/
motorStepMode_t L6474_GetStepMode(uint8_t deviceId)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b084      	sub	sp, #16
 8001564:	af00      	add	r7, sp, #0
 8001566:	4603      	mov	r3, r0
 8001568:	71fb      	strb	r3, [r7, #7]
  motorStepMode_t stepMode;
  uint8_t stepSelValue;
  
  /* Get STEP_SEL field of step mode register  */
  stepSelValue = (uint8_t)((0x07 & L6474_CmdGetParam(deviceId,L6474_STEP_MODE))|0x08) ;
 800156a:	79fb      	ldrb	r3, [r7, #7]
 800156c:	2116      	movs	r1, #22
 800156e:	4618      	mov	r0, r3
 8001570:	f7ff fc50 	bl	8000e14 <L6474_CmdGetParam>
 8001574:	4603      	mov	r3, r0
 8001576:	b2db      	uxtb	r3, r3
 8001578:	f003 0307 	and.w	r3, r3, #7
 800157c:	b2db      	uxtb	r3, r3
 800157e:	f043 0308 	orr.w	r3, r3, #8
 8001582:	73bb      	strb	r3, [r7, #14]
  
   switch (stepSelValue)
 8001584:	7bbb      	ldrb	r3, [r7, #14]
 8001586:	3b08      	subs	r3, #8
 8001588:	2b04      	cmp	r3, #4
 800158a:	d81c      	bhi.n	80015c6 <L6474_GetStepMode+0x66>
 800158c:	a201      	add	r2, pc, #4	; (adr r2, 8001594 <L6474_GetStepMode+0x34>)
 800158e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001592:	bf00      	nop
 8001594:	080015a9 	.word	0x080015a9
 8001598:	080015af 	.word	0x080015af
 800159c:	080015b5 	.word	0x080015b5
 80015a0:	080015bb 	.word	0x080015bb
 80015a4:	080015c1 	.word	0x080015c1
  {
    case L6474_STEP_SEL_1:
      stepMode = STEP_MODE_FULL;
 80015a8:	2300      	movs	r3, #0
 80015aa:	73fb      	strb	r3, [r7, #15]
      break;
 80015ac:	e00e      	b.n	80015cc <L6474_GetStepMode+0x6c>
    case L6474_STEP_SEL_1_2:
      stepMode = STEP_MODE_HALF;
 80015ae:	2301      	movs	r3, #1
 80015b0:	73fb      	strb	r3, [r7, #15]
      break;    
 80015b2:	e00b      	b.n	80015cc <L6474_GetStepMode+0x6c>
    case L6474_STEP_SEL_1_4:
      stepMode = STEP_MODE_1_4;
 80015b4:	2302      	movs	r3, #2
 80015b6:	73fb      	strb	r3, [r7, #15]
      break;        
 80015b8:	e008      	b.n	80015cc <L6474_GetStepMode+0x6c>
    case L6474_STEP_SEL_1_8:
      stepMode = STEP_MODE_1_8;
 80015ba:	2303      	movs	r3, #3
 80015bc:	73fb      	strb	r3, [r7, #15]
      break;       
 80015be:	e005      	b.n	80015cc <L6474_GetStepMode+0x6c>
    case L6474_STEP_SEL_1_16:
      stepMode = STEP_MODE_1_16;
 80015c0:	2304      	movs	r3, #4
 80015c2:	73fb      	strb	r3, [r7, #15]
      break;
 80015c4:	e002      	b.n	80015cc <L6474_GetStepMode+0x6c>
    default:
      stepMode = STEP_MODE_UNKNOW;
 80015c6:	23fe      	movs	r3, #254	; 0xfe
 80015c8:	73fb      	strb	r3, [r7, #15]
      break;       
 80015ca:	bf00      	nop
  }
  
  return stepMode;
 80015cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80015ce:	4618      	mov	r0, r3
 80015d0:	3710      	adds	r7, #16
 80015d2:	46bd      	mov	sp, r7
 80015d4:	bd80      	pop	{r7, pc}
 80015d6:	bf00      	nop

080015d8 <L6474_GetStopMode>:
 * @brief Get the selected stop mode
 * @param[in] deviceId Unused parameter
 * @retval the selected stop mode
 **********************************************************/
motorStopMode_t L6474_GetStopMode(uint8_t deviceId)
{
 80015d8:	b480      	push	{r7}
 80015da:	b083      	sub	sp, #12
 80015dc:	af00      	add	r7, sp, #0
 80015de:	4603      	mov	r3, r0
 80015e0:	71fb      	strb	r3, [r7, #7]
  return devicePrm[deviceId].stopMode;
 80015e2:	79fa      	ldrb	r2, [r7, #7]
 80015e4:	4907      	ldr	r1, [pc, #28]	; (8001604 <L6474_GetStopMode+0x2c>)
 80015e6:	4613      	mov	r3, r2
 80015e8:	009b      	lsls	r3, r3, #2
 80015ea:	4413      	add	r3, r2
 80015ec:	00db      	lsls	r3, r3, #3
 80015ee:	440b      	add	r3, r1
 80015f0:	3325      	adds	r3, #37	; 0x25
 80015f2:	781b      	ldrb	r3, [r3, #0]
 80015f4:	b2db      	uxtb	r3, r3
}
 80015f6:	4618      	mov	r0, r3
 80015f8:	370c      	adds	r7, #12
 80015fa:	46bd      	mov	sp, r7
 80015fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001600:	4770      	bx	lr
 8001602:	bf00      	nop
 8001604:	200003f0 	.word	0x200003f0

08001608 <L6474_GoHome>:
 * @brief  Requests the motor to move to the home position (ABS_POSITION = 0)
 * @param[in] deviceId (from 0 to 2)
 * @retval None
 **********************************************************/
void L6474_GoHome(uint8_t deviceId)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	b082      	sub	sp, #8
 800160c:	af00      	add	r7, sp, #0
 800160e:	4603      	mov	r3, r0
 8001610:	71fb      	strb	r3, [r7, #7]
  L6474_GoTo(deviceId, 0);
 8001612:	79fb      	ldrb	r3, [r7, #7]
 8001614:	2100      	movs	r1, #0
 8001616:	4618      	mov	r0, r3
 8001618:	f000 f81e 	bl	8001658 <L6474_GoTo>
} 
 800161c:	bf00      	nop
 800161e:	3708      	adds	r7, #8
 8001620:	46bd      	mov	sp, r7
 8001622:	bd80      	pop	{r7, pc}

08001624 <L6474_GoMark>:
 * @brief  Requests the motor to move to the mark position 
 * @param[in] deviceId (from 0 to 2)
 * @retval None
 **********************************************************/
void L6474_GoMark(uint8_t deviceId)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	b084      	sub	sp, #16
 8001628:	af00      	add	r7, sp, #0
 800162a:	4603      	mov	r3, r0
 800162c:	71fb      	strb	r3, [r7, #7]
  uint32_t mark;

  mark = L6474_ConvertPosition(L6474_CmdGetParam(deviceId,L6474_MARK));
 800162e:	79fb      	ldrb	r3, [r7, #7]
 8001630:	2103      	movs	r1, #3
 8001632:	4618      	mov	r0, r3
 8001634:	f7ff fbee 	bl	8000e14 <L6474_CmdGetParam>
 8001638:	4603      	mov	r3, r0
 800163a:	4618      	mov	r0, r3
 800163c:	f000 fe18 	bl	8002270 <L6474_ConvertPosition>
 8001640:	4603      	mov	r3, r0
 8001642:	60fb      	str	r3, [r7, #12]
  L6474_GoTo(deviceId,mark);  
 8001644:	68fa      	ldr	r2, [r7, #12]
 8001646:	79fb      	ldrb	r3, [r7, #7]
 8001648:	4611      	mov	r1, r2
 800164a:	4618      	mov	r0, r3
 800164c:	f000 f804 	bl	8001658 <L6474_GoTo>
}
 8001650:	bf00      	nop
 8001652:	3710      	adds	r7, #16
 8001654:	46bd      	mov	sp, r7
 8001656:	bd80      	pop	{r7, pc}

08001658 <L6474_GoTo>:
 * @param[in] deviceId (from 0 to 2)
 * @param[in] targetPosition absolute position in steps
 * @retval None
 **********************************************************/
void L6474_GoTo(uint8_t deviceId, int32_t targetPosition)
{
 8001658:	b590      	push	{r4, r7, lr}
 800165a:	b085      	sub	sp, #20
 800165c:	af00      	add	r7, sp, #0
 800165e:	4603      	mov	r3, r0
 8001660:	6039      	str	r1, [r7, #0]
 8001662:	71fb      	strb	r3, [r7, #7]
  motorDir_t direction;
  int32_t steps;
  
  /* If required deactivate motor */
  if (devicePrm[deviceId].motionState != INACTIVE) 
 8001664:	79fa      	ldrb	r2, [r7, #7]
 8001666:	493a      	ldr	r1, [pc, #232]	; (8001750 <L6474_GoTo+0xf8>)
 8001668:	4613      	mov	r3, r2
 800166a:	009b      	lsls	r3, r3, #2
 800166c:	4413      	add	r3, r2
 800166e:	00db      	lsls	r3, r3, #3
 8001670:	440b      	add	r3, r1
 8001672:	3324      	adds	r3, #36	; 0x24
 8001674:	781b      	ldrb	r3, [r3, #0]
 8001676:	b2db      	uxtb	r3, r3
 8001678:	2b08      	cmp	r3, #8
 800167a:	d003      	beq.n	8001684 <L6474_GoTo+0x2c>
  {
    L6474_HardStop(deviceId);
 800167c:	79fb      	ldrb	r3, [r7, #7]
 800167e:	4618      	mov	r0, r3
 8001680:	f000 f868 	bl	8001754 <L6474_HardStop>
  }

  /* Get current position */
  devicePrm[deviceId].currentPosition = L6474_ConvertPosition(L6474_CmdGetParam(deviceId,L6474_ABS_POS));
 8001684:	79fb      	ldrb	r3, [r7, #7]
 8001686:	2101      	movs	r1, #1
 8001688:	4618      	mov	r0, r3
 800168a:	f7ff fbc3 	bl	8000e14 <L6474_CmdGetParam>
 800168e:	4603      	mov	r3, r0
 8001690:	79fc      	ldrb	r4, [r7, #7]
 8001692:	4618      	mov	r0, r3
 8001694:	f000 fdec 	bl	8002270 <L6474_ConvertPosition>
 8001698:	4602      	mov	r2, r0
 800169a:	492d      	ldr	r1, [pc, #180]	; (8001750 <L6474_GoTo+0xf8>)
 800169c:	4623      	mov	r3, r4
 800169e:	009b      	lsls	r3, r3, #2
 80016a0:	4423      	add	r3, r4
 80016a2:	00db      	lsls	r3, r3, #3
 80016a4:	440b      	add	r3, r1
 80016a6:	3304      	adds	r3, #4
 80016a8:	601a      	str	r2, [r3, #0]
  
  /* Compute the number of steps to perform */
  steps = targetPosition - devicePrm[deviceId].currentPosition;
 80016aa:	79fa      	ldrb	r2, [r7, #7]
 80016ac:	4928      	ldr	r1, [pc, #160]	; (8001750 <L6474_GoTo+0xf8>)
 80016ae:	4613      	mov	r3, r2
 80016b0:	009b      	lsls	r3, r3, #2
 80016b2:	4413      	add	r3, r2
 80016b4:	00db      	lsls	r3, r3, #3
 80016b6:	440b      	add	r3, r1
 80016b8:	3304      	adds	r3, #4
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	683a      	ldr	r2, [r7, #0]
 80016be:	1ad3      	subs	r3, r2, r3
 80016c0:	60bb      	str	r3, [r7, #8]
  
  if (steps >= 0) 
 80016c2:	68bb      	ldr	r3, [r7, #8]
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	db0c      	blt.n	80016e2 <L6474_GoTo+0x8a>
  {
    devicePrm[deviceId].stepsToTake = steps;
 80016c8:	79fa      	ldrb	r2, [r7, #7]
 80016ca:	68b9      	ldr	r1, [r7, #8]
 80016cc:	4820      	ldr	r0, [pc, #128]	; (8001750 <L6474_GoTo+0xf8>)
 80016ce:	4613      	mov	r3, r2
 80016d0:	009b      	lsls	r3, r3, #2
 80016d2:	4413      	add	r3, r2
 80016d4:	00db      	lsls	r3, r3, #3
 80016d6:	4403      	add	r3, r0
 80016d8:	3314      	adds	r3, #20
 80016da:	6019      	str	r1, [r3, #0]
    direction = FORWARD;
 80016dc:	2301      	movs	r3, #1
 80016de:	73fb      	strb	r3, [r7, #15]
 80016e0:	e00d      	b.n	80016fe <L6474_GoTo+0xa6>
    
  } 
  else 
  {
    devicePrm[deviceId].stepsToTake = -steps;
 80016e2:	68bb      	ldr	r3, [r7, #8]
 80016e4:	425b      	negs	r3, r3
 80016e6:	79fa      	ldrb	r2, [r7, #7]
 80016e8:	4618      	mov	r0, r3
 80016ea:	4919      	ldr	r1, [pc, #100]	; (8001750 <L6474_GoTo+0xf8>)
 80016ec:	4613      	mov	r3, r2
 80016ee:	009b      	lsls	r3, r3, #2
 80016f0:	4413      	add	r3, r2
 80016f2:	00db      	lsls	r3, r3, #3
 80016f4:	440b      	add	r3, r1
 80016f6:	3314      	adds	r3, #20
 80016f8:	6018      	str	r0, [r3, #0]
    direction = BACKWARD;
 80016fa:	2300      	movs	r3, #0
 80016fc:	73fb      	strb	r3, [r7, #15]
  }
  
  if (steps != 0) 
 80016fe:	68bb      	ldr	r3, [r7, #8]
 8001700:	2b00      	cmp	r3, #0
 8001702:	d021      	beq.n	8001748 <L6474_GoTo+0xf0>
  {
    
    devicePrm[deviceId].commandExecuted = MOVE_CMD;
 8001704:	79fa      	ldrb	r2, [r7, #7]
 8001706:	4912      	ldr	r1, [pc, #72]	; (8001750 <L6474_GoTo+0xf8>)
 8001708:	4613      	mov	r3, r2
 800170a:	009b      	lsls	r3, r3, #2
 800170c:	4413      	add	r3, r2
 800170e:	00db      	lsls	r3, r3, #3
 8001710:	440b      	add	r3, r1
 8001712:	3322      	adds	r3, #34	; 0x22
 8001714:	2201      	movs	r2, #1
 8001716:	701a      	strb	r2, [r3, #0]
        
    /* Direction setup */
    L6474_SetDirection(deviceId,direction);
 8001718:	7bfa      	ldrb	r2, [r7, #15]
 800171a:	79fb      	ldrb	r3, [r7, #7]
 800171c:	4611      	mov	r1, r2
 800171e:	4618      	mov	r0, r3
 8001720:	f000 fb48 	bl	8001db4 <L6474_SetDirection>

    L6474_ComputeSpeedProfile(deviceId, devicePrm[deviceId].stepsToTake);
 8001724:	79fa      	ldrb	r2, [r7, #7]
 8001726:	490a      	ldr	r1, [pc, #40]	; (8001750 <L6474_GoTo+0xf8>)
 8001728:	4613      	mov	r3, r2
 800172a:	009b      	lsls	r3, r3, #2
 800172c:	4413      	add	r3, r2
 800172e:	00db      	lsls	r3, r3, #3
 8001730:	440b      	add	r3, r1
 8001732:	3314      	adds	r3, #20
 8001734:	681a      	ldr	r2, [r3, #0]
 8001736:	79fb      	ldrb	r3, [r7, #7]
 8001738:	4611      	mov	r1, r2
 800173a:	4618      	mov	r0, r3
 800173c:	f000 fcda 	bl	80020f4 <L6474_ComputeSpeedProfile>
    
    /* Motor activation */
    L6474_StartMovement(deviceId);
 8001740:	79fb      	ldrb	r3, [r7, #7]
 8001742:	4618      	mov	r0, r3
 8001744:	f001 f8ea 	bl	800291c <L6474_StartMovement>
  }  
}
 8001748:	bf00      	nop
 800174a:	3714      	adds	r7, #20
 800174c:	46bd      	mov	sp, r7
 800174e:	bd90      	pop	{r4, r7, pc}
 8001750:	200003f0 	.word	0x200003f0

08001754 <L6474_HardStop>:
 * @brief  Immediatly stops the motor 
 * @param[in] deviceId (from 0 to 2)
 * @retval None
 **********************************************************/
void L6474_HardStop(uint8_t deviceId) 
{
 8001754:	b580      	push	{r7, lr}
 8001756:	b082      	sub	sp, #8
 8001758:	af00      	add	r7, sp, #0
 800175a:	4603      	mov	r3, r0
 800175c:	71fb      	strb	r3, [r7, #7]
  if (devicePrm[deviceId].stopMode == HOLD_MODE)
 800175e:	79fa      	ldrb	r2, [r7, #7]
 8001760:	4920      	ldr	r1, [pc, #128]	; (80017e4 <L6474_HardStop+0x90>)
 8001762:	4613      	mov	r3, r2
 8001764:	009b      	lsls	r3, r3, #2
 8001766:	4413      	add	r3, r2
 8001768:	00db      	lsls	r3, r3, #3
 800176a:	440b      	add	r3, r1
 800176c:	3325      	adds	r3, #37	; 0x25
 800176e:	781b      	ldrb	r3, [r3, #0]
 8001770:	b2db      	uxtb	r3, r3
 8001772:	2b00      	cmp	r3, #0
 8001774:	d12d      	bne.n	80017d2 <L6474_HardStop+0x7e>
  {
    /* Disable corresponding PWM */
    L6474_Board_PwmStop(deviceId);
 8001776:	79fb      	ldrb	r3, [r7, #7]
 8001778:	4618      	mov	r0, r3
 800177a:	f002 fe4f 	bl	800441c <L6474_Board_PwmStop>

    /* Set inactive state */
    devicePrm[deviceId].motionState = INACTIVE;
 800177e:	79fa      	ldrb	r2, [r7, #7]
 8001780:	4918      	ldr	r1, [pc, #96]	; (80017e4 <L6474_HardStop+0x90>)
 8001782:	4613      	mov	r3, r2
 8001784:	009b      	lsls	r3, r3, #2
 8001786:	4413      	add	r3, r2
 8001788:	00db      	lsls	r3, r3, #3
 800178a:	440b      	add	r3, r1
 800178c:	3324      	adds	r3, #36	; 0x24
 800178e:	2208      	movs	r2, #8
 8001790:	701a      	strb	r2, [r3, #0]
    devicePrm[deviceId].commandExecuted = NO_CMD;
 8001792:	79fa      	ldrb	r2, [r7, #7]
 8001794:	4913      	ldr	r1, [pc, #76]	; (80017e4 <L6474_HardStop+0x90>)
 8001796:	4613      	mov	r3, r2
 8001798:	009b      	lsls	r3, r3, #2
 800179a:	4413      	add	r3, r2
 800179c:	00db      	lsls	r3, r3, #3
 800179e:	440b      	add	r3, r1
 80017a0:	3322      	adds	r3, #34	; 0x22
 80017a2:	2203      	movs	r2, #3
 80017a4:	701a      	strb	r2, [r3, #0]
    devicePrm[deviceId].stepsToTake = MAX_STEPS;  
 80017a6:	79fa      	ldrb	r2, [r7, #7]
 80017a8:	490e      	ldr	r1, [pc, #56]	; (80017e4 <L6474_HardStop+0x90>)
 80017aa:	4613      	mov	r3, r2
 80017ac:	009b      	lsls	r3, r3, #2
 80017ae:	4413      	add	r3, r2
 80017b0:	00db      	lsls	r3, r3, #3
 80017b2:	440b      	add	r3, r1
 80017b4:	3314      	adds	r3, #20
 80017b6:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 80017ba:	601a      	str	r2, [r3, #0]
    devicePrm[deviceId].speed = 0;
 80017bc:	79fa      	ldrb	r2, [r7, #7]
 80017be:	4909      	ldr	r1, [pc, #36]	; (80017e4 <L6474_HardStop+0x90>)
 80017c0:	4613      	mov	r3, r2
 80017c2:	009b      	lsls	r3, r3, #2
 80017c4:	4413      	add	r3, r2
 80017c6:	00db      	lsls	r3, r3, #3
 80017c8:	440b      	add	r3, r1
 80017ca:	3320      	adds	r3, #32
 80017cc:	2200      	movs	r2, #0
 80017ce:	801a      	strh	r2, [r3, #0]
  else
  {
    //same handling for HIZ_MODE and STANDBY_MODE
    L6474_HizStop(deviceId);
  }
}
 80017d0:	e003      	b.n	80017da <L6474_HardStop+0x86>
    L6474_HizStop(deviceId);
 80017d2:	79fb      	ldrb	r3, [r7, #7]
 80017d4:	4618      	mov	r0, r3
 80017d6:	f000 f807 	bl	80017e8 <L6474_HizStop>
}
 80017da:	bf00      	nop
 80017dc:	3708      	adds	r7, #8
 80017de:	46bd      	mov	sp, r7
 80017e0:	bd80      	pop	{r7, pc}
 80017e2:	bf00      	nop
 80017e4:	200003f0 	.word	0x200003f0

080017e8 <L6474_HizStop>:
 * @brief  Immediatly stops the motor and disable the power bridge
 * @param[in] deviceId (from 0 to 2)
 * @retval None
 **********************************************************/
void L6474_HizStop(uint8_t deviceId) 
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b082      	sub	sp, #8
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	4603      	mov	r3, r0
 80017f0:	71fb      	strb	r3, [r7, #7]
  /* Disable corresponding PWM */
  L6474_Board_PwmStop(deviceId);
 80017f2:	79fb      	ldrb	r3, [r7, #7]
 80017f4:	4618      	mov	r0, r3
 80017f6:	f002 fe11 	bl	800441c <L6474_Board_PwmStop>

  /* Disable power stage */
  L6474_CmdDisable(deviceId);
 80017fa:	79fb      	ldrb	r3, [r7, #7]
 80017fc:	4618      	mov	r0, r3
 80017fe:	f7ff faed 	bl	8000ddc <L6474_CmdDisable>

  /* Set inactive state */
  devicePrm[deviceId].motionState = INACTIVE;
 8001802:	79fa      	ldrb	r2, [r7, #7]
 8001804:	4915      	ldr	r1, [pc, #84]	; (800185c <L6474_HizStop+0x74>)
 8001806:	4613      	mov	r3, r2
 8001808:	009b      	lsls	r3, r3, #2
 800180a:	4413      	add	r3, r2
 800180c:	00db      	lsls	r3, r3, #3
 800180e:	440b      	add	r3, r1
 8001810:	3324      	adds	r3, #36	; 0x24
 8001812:	2208      	movs	r2, #8
 8001814:	701a      	strb	r2, [r3, #0]
  devicePrm[deviceId].commandExecuted = NO_CMD;
 8001816:	79fa      	ldrb	r2, [r7, #7]
 8001818:	4910      	ldr	r1, [pc, #64]	; (800185c <L6474_HizStop+0x74>)
 800181a:	4613      	mov	r3, r2
 800181c:	009b      	lsls	r3, r3, #2
 800181e:	4413      	add	r3, r2
 8001820:	00db      	lsls	r3, r3, #3
 8001822:	440b      	add	r3, r1
 8001824:	3322      	adds	r3, #34	; 0x22
 8001826:	2203      	movs	r2, #3
 8001828:	701a      	strb	r2, [r3, #0]
  devicePrm[deviceId].stepsToTake = MAX_STEPS;  
 800182a:	79fa      	ldrb	r2, [r7, #7]
 800182c:	490b      	ldr	r1, [pc, #44]	; (800185c <L6474_HizStop+0x74>)
 800182e:	4613      	mov	r3, r2
 8001830:	009b      	lsls	r3, r3, #2
 8001832:	4413      	add	r3, r2
 8001834:	00db      	lsls	r3, r3, #3
 8001836:	440b      	add	r3, r1
 8001838:	3314      	adds	r3, #20
 800183a:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 800183e:	601a      	str	r2, [r3, #0]
  devicePrm[deviceId].speed = 0;
 8001840:	79fa      	ldrb	r2, [r7, #7]
 8001842:	4906      	ldr	r1, [pc, #24]	; (800185c <L6474_HizStop+0x74>)
 8001844:	4613      	mov	r3, r2
 8001846:	009b      	lsls	r3, r3, #2
 8001848:	4413      	add	r3, r2
 800184a:	00db      	lsls	r3, r3, #3
 800184c:	440b      	add	r3, r1
 800184e:	3320      	adds	r3, #32
 8001850:	2200      	movs	r2, #0
 8001852:	801a      	strh	r2, [r3, #0]
}
 8001854:	bf00      	nop
 8001856:	3708      	adds	r7, #8
 8001858:	46bd      	mov	sp, r7
 800185a:	bd80      	pop	{r7, pc}
 800185c:	200003f0 	.word	0x200003f0

08001860 <L6474_Move>:
 * @param[in] direction FORWARD or BACKWARD
 * @param[in] stepCount Number of steps to perform
 * @retval None
 **********************************************************/
void L6474_Move(uint8_t deviceId, motorDir_t direction, uint32_t stepCount)
{
 8001860:	b590      	push	{r4, r7, lr}
 8001862:	b083      	sub	sp, #12
 8001864:	af00      	add	r7, sp, #0
 8001866:	4603      	mov	r3, r0
 8001868:	603a      	str	r2, [r7, #0]
 800186a:	71fb      	strb	r3, [r7, #7]
 800186c:	460b      	mov	r3, r1
 800186e:	71bb      	strb	r3, [r7, #6]
  /* If required deactivate motor */
  if (devicePrm[deviceId].motionState != INACTIVE) 
 8001870:	79fa      	ldrb	r2, [r7, #7]
 8001872:	4926      	ldr	r1, [pc, #152]	; (800190c <L6474_Move+0xac>)
 8001874:	4613      	mov	r3, r2
 8001876:	009b      	lsls	r3, r3, #2
 8001878:	4413      	add	r3, r2
 800187a:	00db      	lsls	r3, r3, #3
 800187c:	440b      	add	r3, r1
 800187e:	3324      	adds	r3, #36	; 0x24
 8001880:	781b      	ldrb	r3, [r3, #0]
 8001882:	b2db      	uxtb	r3, r3
 8001884:	2b08      	cmp	r3, #8
 8001886:	d003      	beq.n	8001890 <L6474_Move+0x30>
  {
    L6474_HardStop(deviceId);
 8001888:	79fb      	ldrb	r3, [r7, #7]
 800188a:	4618      	mov	r0, r3
 800188c:	f7ff ff62 	bl	8001754 <L6474_HardStop>
  }
  
  if (stepCount != 0) 
 8001890:	683b      	ldr	r3, [r7, #0]
 8001892:	2b00      	cmp	r3, #0
 8001894:	d035      	beq.n	8001902 <L6474_Move+0xa2>
  {
    devicePrm[deviceId].stepsToTake = stepCount;
 8001896:	79fa      	ldrb	r2, [r7, #7]
 8001898:	491c      	ldr	r1, [pc, #112]	; (800190c <L6474_Move+0xac>)
 800189a:	4613      	mov	r3, r2
 800189c:	009b      	lsls	r3, r3, #2
 800189e:	4413      	add	r3, r2
 80018a0:	00db      	lsls	r3, r3, #3
 80018a2:	440b      	add	r3, r1
 80018a4:	3314      	adds	r3, #20
 80018a6:	683a      	ldr	r2, [r7, #0]
 80018a8:	601a      	str	r2, [r3, #0]
    
    devicePrm[deviceId].commandExecuted = MOVE_CMD;
 80018aa:	79fa      	ldrb	r2, [r7, #7]
 80018ac:	4917      	ldr	r1, [pc, #92]	; (800190c <L6474_Move+0xac>)
 80018ae:	4613      	mov	r3, r2
 80018b0:	009b      	lsls	r3, r3, #2
 80018b2:	4413      	add	r3, r2
 80018b4:	00db      	lsls	r3, r3, #3
 80018b6:	440b      	add	r3, r1
 80018b8:	3322      	adds	r3, #34	; 0x22
 80018ba:	2201      	movs	r2, #1
 80018bc:	701a      	strb	r2, [r3, #0]
    
    devicePrm[deviceId].currentPosition = L6474_ConvertPosition(L6474_CmdGetParam(deviceId,L6474_ABS_POS));
 80018be:	79fb      	ldrb	r3, [r7, #7]
 80018c0:	2101      	movs	r1, #1
 80018c2:	4618      	mov	r0, r3
 80018c4:	f7ff faa6 	bl	8000e14 <L6474_CmdGetParam>
 80018c8:	4603      	mov	r3, r0
 80018ca:	79fc      	ldrb	r4, [r7, #7]
 80018cc:	4618      	mov	r0, r3
 80018ce:	f000 fccf 	bl	8002270 <L6474_ConvertPosition>
 80018d2:	4602      	mov	r2, r0
 80018d4:	490d      	ldr	r1, [pc, #52]	; (800190c <L6474_Move+0xac>)
 80018d6:	4623      	mov	r3, r4
 80018d8:	009b      	lsls	r3, r3, #2
 80018da:	4423      	add	r3, r4
 80018dc:	00db      	lsls	r3, r3, #3
 80018de:	440b      	add	r3, r1
 80018e0:	3304      	adds	r3, #4
 80018e2:	601a      	str	r2, [r3, #0]
    
    /* Direction setup */
    L6474_SetDirection(deviceId,direction);
 80018e4:	79ba      	ldrb	r2, [r7, #6]
 80018e6:	79fb      	ldrb	r3, [r7, #7]
 80018e8:	4611      	mov	r1, r2
 80018ea:	4618      	mov	r0, r3
 80018ec:	f000 fa62 	bl	8001db4 <L6474_SetDirection>

    L6474_ComputeSpeedProfile(deviceId, stepCount);
 80018f0:	79fb      	ldrb	r3, [r7, #7]
 80018f2:	6839      	ldr	r1, [r7, #0]
 80018f4:	4618      	mov	r0, r3
 80018f6:	f000 fbfd 	bl	80020f4 <L6474_ComputeSpeedProfile>
    
    /* Motor activation */
    L6474_StartMovement(deviceId);
 80018fa:	79fb      	ldrb	r3, [r7, #7]
 80018fc:	4618      	mov	r0, r3
 80018fe:	f001 f80d 	bl	800291c <L6474_StartMovement>
  }  
}
 8001902:	bf00      	nop
 8001904:	370c      	adds	r7, #12
 8001906:	46bd      	mov	sp, r7
 8001908:	bd90      	pop	{r4, r7, pc}
 800190a:	bf00      	nop
 800190c:	200003f0 	.word	0x200003f0

08001910 <L6474_ReadId>:
/******************************************************//**
 * @brief Read id
 * @retval Id of the l6474 Driver Instance
 **********************************************************/
uint16_t L6474_ReadId(void)
{
 8001910:	b480      	push	{r7}
 8001912:	af00      	add	r7, sp, #0
  return(l6474DriverInstance);
 8001914:	4b03      	ldr	r3, [pc, #12]	; (8001924 <L6474_ReadId+0x14>)
 8001916:	881b      	ldrh	r3, [r3, #0]
}
 8001918:	4618      	mov	r0, r3
 800191a:	46bd      	mov	sp, r7
 800191c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001920:	4770      	bx	lr
 8001922:	bf00      	nop
 8001924:	200003ee 	.word	0x200003ee

08001928 <L6474_ReadStatusRegister>:
 * @retval Status register valued
 * @note The status register flags are not cleared 
 * at the difference with L6474CmdGetStatus()
 **********************************************************/
uint16_t L6474_ReadStatusRegister(uint8_t deviceId)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	b082      	sub	sp, #8
 800192c:	af00      	add	r7, sp, #0
 800192e:	4603      	mov	r3, r0
 8001930:	71fb      	strb	r3, [r7, #7]
  return (L6474_CmdGetParam(deviceId,L6474_STATUS));
 8001932:	79fb      	ldrb	r3, [r7, #7]
 8001934:	2119      	movs	r1, #25
 8001936:	4618      	mov	r0, r3
 8001938:	f7ff fa6c 	bl	8000e14 <L6474_CmdGetParam>
 800193c:	4603      	mov	r3, r0
 800193e:	b29b      	uxth	r3, r3
}
 8001940:	4618      	mov	r0, r3
 8001942:	3708      	adds	r7, #8
 8001944:	46bd      	mov	sp, r7
 8001946:	bd80      	pop	{r7, pc}

08001948 <L6474_ReleaseReset>:
/******************************************************//**
 * @brief  Releases the L6474 reset (pin set to High) of all devices
 * @retval None
 **********************************************************/
void L6474_ReleaseReset(uint8_t deviceId)
{ 
 8001948:	b580      	push	{r7, lr}
 800194a:	b082      	sub	sp, #8
 800194c:	af00      	add	r7, sp, #0
 800194e:	4603      	mov	r3, r0
 8001950:	71fb      	strb	r3, [r7, #7]
  L6474_Board_ReleaseReset(deviceId); 
 8001952:	79fb      	ldrb	r3, [r7, #7]
 8001954:	4618      	mov	r0, r3
 8001956:	f002 fd8b 	bl	8004470 <L6474_Board_ReleaseReset>
}
 800195a:	bf00      	nop
 800195c:	3708      	adds	r7, #8
 800195e:	46bd      	mov	sp, r7
 8001960:	bd80      	pop	{r7, pc}

08001962 <L6474_Reset>:
 * @brief  Resets the L6474 (reset pin set to low) of all devices
 * @param[in] deviceId (from 0 to 2)
 * @retval None
 **********************************************************/
void L6474_Reset(uint8_t deviceId)
{
 8001962:	b580      	push	{r7, lr}
 8001964:	b082      	sub	sp, #8
 8001966:	af00      	add	r7, sp, #0
 8001968:	4603      	mov	r3, r0
 800196a:	71fb      	strb	r3, [r7, #7]
  L6474_Board_Reset(deviceId); 
 800196c:	79fb      	ldrb	r3, [r7, #7]
 800196e:	4618      	mov	r0, r3
 8001970:	f002 fd90 	bl	8004494 <L6474_Board_Reset>
}
 8001974:	bf00      	nop
 8001976:	3708      	adds	r7, #8
 8001978:	46bd      	mov	sp, r7
 800197a:	bd80      	pop	{r7, pc}

0800197c <L6474_ResetAllDevices>:
/******************************************************//**
 * @brief Resets all L6474 devices
 * @retval None
 **********************************************************/
void L6474_ResetAllDevices(void)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	b082      	sub	sp, #8
 8001980:	af00      	add	r7, sp, #0
 	uint8_t loop;
 	
 	for (loop = 0; loop < numberOfDevices; loop++)
 8001982:	2300      	movs	r3, #0
 8001984:	71fb      	strb	r3, [r7, #7]
 8001986:	e014      	b.n	80019b2 <L6474_ResetAllDevices+0x36>
 	{
   	/* Stop movement and disable power stage*/
  	L6474_HizStop(loop);
 8001988:	79fb      	ldrb	r3, [r7, #7]
 800198a:	4618      	mov	r0, r3
 800198c:	f7ff ff2c 	bl	80017e8 <L6474_HizStop>
    L6474_Reset(loop);
 8001990:	79fb      	ldrb	r3, [r7, #7]
 8001992:	4618      	mov	r0, r3
 8001994:	f7ff ffe5 	bl	8001962 <L6474_Reset>
    L6474_Board_Delay(1); // Reset pin must be forced low for at least 10us
 8001998:	2001      	movs	r0, #1
 800199a:	f002 fba1 	bl	80040e0 <L6474_Board_Delay>
    L6474_Board_ReleaseReset(loop);
 800199e:	79fb      	ldrb	r3, [r7, #7]
 80019a0:	4618      	mov	r0, r3
 80019a2:	f002 fd65 	bl	8004470 <L6474_Board_ReleaseReset>
    L6474_Board_Delay(1); 
 80019a6:	2001      	movs	r0, #1
 80019a8:	f002 fb9a 	bl	80040e0 <L6474_Board_Delay>
 	for (loop = 0; loop < numberOfDevices; loop++)
 80019ac:	79fb      	ldrb	r3, [r7, #7]
 80019ae:	3301      	adds	r3, #1
 80019b0:	71fb      	strb	r3, [r7, #7]
 80019b2:	4b05      	ldr	r3, [pc, #20]	; (80019c8 <L6474_ResetAllDevices+0x4c>)
 80019b4:	781b      	ldrb	r3, [r3, #0]
 80019b6:	b2db      	uxtb	r3, r3
 80019b8:	79fa      	ldrb	r2, [r7, #7]
 80019ba:	429a      	cmp	r2, r3
 80019bc:	d3e4      	bcc.n	8001988 <L6474_ResetAllDevices+0xc>
  }
}
 80019be:	bf00      	nop
 80019c0:	bf00      	nop
 80019c2:	3708      	adds	r7, #8
 80019c4:	46bd      	mov	sp, r7
 80019c6:	bd80      	pop	{r7, pc}
 80019c8:	200003d0 	.word	0x200003d0

080019cc <L6474_Run>:
 * @param[in] deviceId (from 0 to 2)
 * @param[in] direction FORWARD or BACKWARD
 * @retval None
 **********************************************************/
void L6474_Run(uint8_t deviceId, motorDir_t direction)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b082      	sub	sp, #8
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	4603      	mov	r3, r0
 80019d4:	460a      	mov	r2, r1
 80019d6:	71fb      	strb	r3, [r7, #7]
 80019d8:	4613      	mov	r3, r2
 80019da:	71bb      	strb	r3, [r7, #6]
  /* If required deactivate motor */
  if (devicePrm[deviceId].motionState != INACTIVE) 
 80019dc:	79fa      	ldrb	r2, [r7, #7]
 80019de:	4913      	ldr	r1, [pc, #76]	; (8001a2c <L6474_Run+0x60>)
 80019e0:	4613      	mov	r3, r2
 80019e2:	009b      	lsls	r3, r3, #2
 80019e4:	4413      	add	r3, r2
 80019e6:	00db      	lsls	r3, r3, #3
 80019e8:	440b      	add	r3, r1
 80019ea:	3324      	adds	r3, #36	; 0x24
 80019ec:	781b      	ldrb	r3, [r3, #0]
 80019ee:	b2db      	uxtb	r3, r3
 80019f0:	2b08      	cmp	r3, #8
 80019f2:	d003      	beq.n	80019fc <L6474_Run+0x30>
  {
    L6474_HardStop(deviceId);
 80019f4:	79fb      	ldrb	r3, [r7, #7]
 80019f6:	4618      	mov	r0, r3
 80019f8:	f7ff feac 	bl	8001754 <L6474_HardStop>
  }
  
	/* Direction setup */
	L6474_SetDirection(deviceId,direction);
 80019fc:	79ba      	ldrb	r2, [r7, #6]
 80019fe:	79fb      	ldrb	r3, [r7, #7]
 8001a00:	4611      	mov	r1, r2
 8001a02:	4618      	mov	r0, r3
 8001a04:	f000 f9d6 	bl	8001db4 <L6474_SetDirection>

	devicePrm[deviceId].commandExecuted = RUN_CMD;
 8001a08:	79fa      	ldrb	r2, [r7, #7]
 8001a0a:	4908      	ldr	r1, [pc, #32]	; (8001a2c <L6474_Run+0x60>)
 8001a0c:	4613      	mov	r3, r2
 8001a0e:	009b      	lsls	r3, r3, #2
 8001a10:	4413      	add	r3, r2
 8001a12:	00db      	lsls	r3, r3, #3
 8001a14:	440b      	add	r3, r1
 8001a16:	3322      	adds	r3, #34	; 0x22
 8001a18:	2200      	movs	r2, #0
 8001a1a:	701a      	strb	r2, [r3, #0]

	/* Motor activation */
	L6474_StartMovement(deviceId); 
 8001a1c:	79fb      	ldrb	r3, [r7, #7]
 8001a1e:	4618      	mov	r0, r3
 8001a20:	f000 ff7c 	bl	800291c <L6474_StartMovement>
}
 8001a24:	bf00      	nop
 8001a26:	3708      	adds	r7, #8
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	bd80      	pop	{r7, pc}
 8001a2c:	200003f0 	.word	0x200003f0

08001a30 <L6474_SelectStepMode>:
 * @param[in] deviceId (from 0 to 2)
 * @param[in] stepMod from full step to 1/16 microstep as specified in enum motorStepMode_t
 * @retval None
 **********************************************************/
bool L6474_SelectStepMode(uint8_t deviceId, motorStepMode_t stepMod)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b084      	sub	sp, #16
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	4603      	mov	r3, r0
 8001a38:	460a      	mov	r2, r1
 8001a3a:	71fb      	strb	r3, [r7, #7]
 8001a3c:	4613      	mov	r3, r2
 8001a3e:	71bb      	strb	r3, [r7, #6]
  uint8_t stepModeRegister;
  L6474_STEP_SEL_t l6474StepMod;
  
  switch (stepMod)
 8001a40:	79bb      	ldrb	r3, [r7, #6]
 8001a42:	2b03      	cmp	r3, #3
 8001a44:	d816      	bhi.n	8001a74 <L6474_SelectStepMode+0x44>
 8001a46:	a201      	add	r2, pc, #4	; (adr r2, 8001a4c <L6474_SelectStepMode+0x1c>)
 8001a48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a4c:	08001a5d 	.word	0x08001a5d
 8001a50:	08001a63 	.word	0x08001a63
 8001a54:	08001a69 	.word	0x08001a69
 8001a58:	08001a6f 	.word	0x08001a6f
  {
    case STEP_MODE_FULL:
      l6474StepMod = L6474_STEP_SEL_1;
 8001a5c:	2308      	movs	r3, #8
 8001a5e:	73fb      	strb	r3, [r7, #15]
      break;
 8001a60:	e00b      	b.n	8001a7a <L6474_SelectStepMode+0x4a>
    case STEP_MODE_HALF:
      l6474StepMod = L6474_STEP_SEL_1_2;
 8001a62:	2309      	movs	r3, #9
 8001a64:	73fb      	strb	r3, [r7, #15]
      break;    
 8001a66:	e008      	b.n	8001a7a <L6474_SelectStepMode+0x4a>
    case STEP_MODE_1_4:
      l6474StepMod = L6474_STEP_SEL_1_4;
 8001a68:	230a      	movs	r3, #10
 8001a6a:	73fb      	strb	r3, [r7, #15]
      break;        
 8001a6c:	e005      	b.n	8001a7a <L6474_SelectStepMode+0x4a>
    case STEP_MODE_1_8:
      l6474StepMod = L6474_STEP_SEL_1_8;
 8001a6e:	230b      	movs	r3, #11
 8001a70:	73fb      	strb	r3, [r7, #15]
      break;       
 8001a72:	e002      	b.n	8001a7a <L6474_SelectStepMode+0x4a>
    case STEP_MODE_1_16:
    default:
      l6474StepMod = L6474_STEP_SEL_1_16;
 8001a74:	230c      	movs	r3, #12
 8001a76:	73fb      	strb	r3, [r7, #15]
      break;       
 8001a78:	bf00      	nop
  }

  /* Deactivate motor*/
  L6474_HizStop(deviceId);
 8001a7a:	79fb      	ldrb	r3, [r7, #7]
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	f7ff feb3 	bl	80017e8 <L6474_HizStop>
  
  /* Read Step mode register and clear STEP_SEL field */
  stepModeRegister = (uint8_t)(0xF8 & L6474_CmdGetParam(deviceId,L6474_STEP_MODE)) ;
 8001a82:	79fb      	ldrb	r3, [r7, #7]
 8001a84:	2116      	movs	r1, #22
 8001a86:	4618      	mov	r0, r3
 8001a88:	f7ff f9c4 	bl	8000e14 <L6474_CmdGetParam>
 8001a8c:	4603      	mov	r3, r0
 8001a8e:	b2db      	uxtb	r3, r3
 8001a90:	f023 0307 	bic.w	r3, r3, #7
 8001a94:	73bb      	strb	r3, [r7, #14]
  
  /* Apply new step mode */
  L6474_CmdSetParam(deviceId, L6474_STEP_MODE, stepModeRegister | (uint8_t)l6474StepMod);
 8001a96:	7bba      	ldrb	r2, [r7, #14]
 8001a98:	7bfb      	ldrb	r3, [r7, #15]
 8001a9a:	4313      	orrs	r3, r2
 8001a9c:	b2db      	uxtb	r3, r3
 8001a9e:	461a      	mov	r2, r3
 8001aa0:	79fb      	ldrb	r3, [r7, #7]
 8001aa2:	2116      	movs	r1, #22
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	f7ff fb3b 	bl	8001120 <L6474_CmdSetParam>

  /* Reset abs pos register */
  L6474_CmdSetParam(deviceId, L6474_ABS_POS, 0);
 8001aaa:	79fb      	ldrb	r3, [r7, #7]
 8001aac:	2200      	movs	r2, #0
 8001aae:	2101      	movs	r1, #1
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	f7ff fb35 	bl	8001120 <L6474_CmdSetParam>
  
  return (1);
 8001ab6:	2301      	movs	r3, #1
}
 8001ab8:	4618      	mov	r0, r3
 8001aba:	3710      	adds	r7, #16
 8001abc:	46bd      	mov	sp, r7
 8001abe:	bd80      	pop	{r7, pc}

08001ac0 <L6474_SetAcceleration>:
 * @retval true if the command is successfully executed, else false
 * @note The command is not performed is the device is executing 
 * a MOVE or GOTO command (but it can be used during a RUN command)
 **********************************************************/
bool L6474_SetAcceleration(uint8_t deviceId,uint16_t newAcc)
{                                                  
 8001ac0:	b480      	push	{r7}
 8001ac2:	b085      	sub	sp, #20
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	460a      	mov	r2, r1
 8001aca:	71fb      	strb	r3, [r7, #7]
 8001acc:	4613      	mov	r3, r2
 8001ace:	80bb      	strh	r3, [r7, #4]
  bool cmdExecuted = FALSE;
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	73fb      	strb	r3, [r7, #15]
  if ((newAcc != 0)&&
 8001ad4:	88bb      	ldrh	r3, [r7, #4]
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d023      	beq.n	8001b22 <L6474_SetAcceleration+0x62>
      ((devicePrm[deviceId].motionState == INACTIVE)||
 8001ada:	79fa      	ldrb	r2, [r7, #7]
 8001adc:	4914      	ldr	r1, [pc, #80]	; (8001b30 <L6474_SetAcceleration+0x70>)
 8001ade:	4613      	mov	r3, r2
 8001ae0:	009b      	lsls	r3, r3, #2
 8001ae2:	4413      	add	r3, r2
 8001ae4:	00db      	lsls	r3, r3, #3
 8001ae6:	440b      	add	r3, r1
 8001ae8:	3324      	adds	r3, #36	; 0x24
 8001aea:	781b      	ldrb	r3, [r3, #0]
 8001aec:	b2db      	uxtb	r3, r3
  if ((newAcc != 0)&&
 8001aee:	2b08      	cmp	r3, #8
 8001af0:	d00b      	beq.n	8001b0a <L6474_SetAcceleration+0x4a>
       (devicePrm[deviceId].commandExecuted == RUN_CMD)))
 8001af2:	79fa      	ldrb	r2, [r7, #7]
 8001af4:	490e      	ldr	r1, [pc, #56]	; (8001b30 <L6474_SetAcceleration+0x70>)
 8001af6:	4613      	mov	r3, r2
 8001af8:	009b      	lsls	r3, r3, #2
 8001afa:	4413      	add	r3, r2
 8001afc:	00db      	lsls	r3, r3, #3
 8001afe:	440b      	add	r3, r1
 8001b00:	3322      	adds	r3, #34	; 0x22
 8001b02:	781b      	ldrb	r3, [r3, #0]
 8001b04:	b2db      	uxtb	r3, r3
      ((devicePrm[deviceId].motionState == INACTIVE)||
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d10b      	bne.n	8001b22 <L6474_SetAcceleration+0x62>
  {
    devicePrm[deviceId].acceleration = newAcc;
 8001b0a:	79fa      	ldrb	r2, [r7, #7]
 8001b0c:	4908      	ldr	r1, [pc, #32]	; (8001b30 <L6474_SetAcceleration+0x70>)
 8001b0e:	4613      	mov	r3, r2
 8001b10:	009b      	lsls	r3, r3, #2
 8001b12:	4413      	add	r3, r2
 8001b14:	00db      	lsls	r3, r3, #3
 8001b16:	440b      	add	r3, r1
 8001b18:	3318      	adds	r3, #24
 8001b1a:	88ba      	ldrh	r2, [r7, #4]
 8001b1c:	801a      	strh	r2, [r3, #0]
    cmdExecuted = TRUE;
 8001b1e:	2301      	movs	r3, #1
 8001b20:	73fb      	strb	r3, [r7, #15]
  }    
  return cmdExecuted;
 8001b22:	7bfb      	ldrb	r3, [r7, #15]
}            
 8001b24:	4618      	mov	r0, r3
 8001b26:	3714      	adds	r7, #20
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2e:	4770      	bx	lr
 8001b30:	200003f0 	.word	0x200003f0

08001b34 <L6474_SetAnalogValue>:
 * L6474_TVAL, L6474_TON_MIN, L6474_TOFF_MIN, L6474_OCD_TH)
 * @param[in] value Analog value to convert and set into the register
 * @retval TRUE if param and param is valid, FALSE otherwise
 *********************************************************/
bool L6474_SetAnalogValue(uint8_t deviceId, uint32_t param, float value)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b086      	sub	sp, #24
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	4603      	mov	r3, r0
 8001b3c:	60b9      	str	r1, [r7, #8]
 8001b3e:	ed87 0a01 	vstr	s0, [r7, #4]
 8001b42:	73fb      	strb	r3, [r7, #15]
  uint32_t registerValue;
  bool result = TRUE;
 8001b44:	2301      	movs	r3, #1
 8001b46:	74fb      	strb	r3, [r7, #19]
  if ((value < 0)&&(param != L6474_ABS_POS)&&(param != L6474_MARK)) 
 8001b48:	edd7 7a01 	vldr	s15, [r7, #4]
 8001b4c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001b50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b54:	d508      	bpl.n	8001b68 <L6474_SetAnalogValue+0x34>
 8001b56:	68bb      	ldr	r3, [r7, #8]
 8001b58:	2b01      	cmp	r3, #1
 8001b5a:	d005      	beq.n	8001b68 <L6474_SetAnalogValue+0x34>
 8001b5c:	68bb      	ldr	r3, [r7, #8]
 8001b5e:	2b03      	cmp	r3, #3
 8001b60:	d002      	beq.n	8001b68 <L6474_SetAnalogValue+0x34>
  {
    result = FALSE;
 8001b62:	2300      	movs	r3, #0
 8001b64:	74fb      	strb	r3, [r7, #19]
 8001b66:	e0d9      	b.n	8001d1c <L6474_SetAnalogValue+0x1e8>
  }
  else
  {
    switch (param)
 8001b68:	68bb      	ldr	r3, [r7, #8]
 8001b6a:	3b01      	subs	r3, #1
 8001b6c:	2b12      	cmp	r3, #18
 8001b6e:	f200 80ca 	bhi.w	8001d06 <L6474_SetAnalogValue+0x1d2>
 8001b72:	a201      	add	r2, pc, #4	; (adr r2, 8001b78 <L6474_SetAnalogValue+0x44>)
 8001b74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b78:	08001c2b 	.word	0x08001c2b
 8001b7c:	08001bc5 	.word	0x08001bc5
 8001b80:	08001c2b 	.word	0x08001c2b
 8001b84:	08001d07 	.word	0x08001d07
 8001b88:	08001d07 	.word	0x08001d07
 8001b8c:	08001d07 	.word	0x08001d07
 8001b90:	08001d07 	.word	0x08001d07
 8001b94:	08001d07 	.word	0x08001d07
 8001b98:	08001c95 	.word	0x08001c95
 8001b9c:	08001d07 	.word	0x08001d07
 8001ba0:	08001d07 	.word	0x08001d07
 8001ba4:	08001d07 	.word	0x08001d07
 8001ba8:	08001d07 	.word	0x08001d07
 8001bac:	08001d07 	.word	0x08001d07
 8001bb0:	08001ce1 	.word	0x08001ce1
 8001bb4:	08001ce1 	.word	0x08001ce1
 8001bb8:	08001d07 	.word	0x08001d07
 8001bbc:	08001d07 	.word	0x08001d07
 8001bc0:	08001cbb 	.word	0x08001cbb
    {
      case L6474_EL_POS:
        if  ((value !=0)&&
 8001bc4:	edd7 7a01 	vldr	s15, [r7, #4]
 8001bc8:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001bcc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bd0:	d021      	beq.n	8001c16 <L6474_SetAnalogValue+0xe2>
 8001bd2:	edd7 7a01 	vldr	s15, [r7, #4]
 8001bd6:	ed9f 7a54 	vldr	s14, [pc, #336]	; 8001d28 <L6474_SetAnalogValue+0x1f4>
 8001bda:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001bde:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001be2:	dc15      	bgt.n	8001c10 <L6474_SetAnalogValue+0xdc>
            ((value > (L6474_ELPOS_STEP_MASK | L6474_ELPOS_MICROSTEP_MASK))||
             (value < (1<<(7-(L6474_STEP_MODE_STEP_SEL & L6474_CmdGetParam(0,L6474_STEP_MODE)))))))
 8001be4:	2116      	movs	r1, #22
 8001be6:	2000      	movs	r0, #0
 8001be8:	f7ff f914 	bl	8000e14 <L6474_CmdGetParam>
 8001bec:	4603      	mov	r3, r0
 8001bee:	43db      	mvns	r3, r3
 8001bf0:	f003 0307 	and.w	r3, r3, #7
 8001bf4:	2201      	movs	r2, #1
 8001bf6:	fa02 f303 	lsl.w	r3, r2, r3
 8001bfa:	ee07 3a90 	vmov	s15, r3
 8001bfe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
            ((value > (L6474_ELPOS_STEP_MASK | L6474_ELPOS_MICROSTEP_MASK))||
 8001c02:	ed97 7a01 	vldr	s14, [r7, #4]
 8001c06:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001c0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c0e:	d502      	bpl.n	8001c16 <L6474_SetAnalogValue+0xe2>
        {
          result = FALSE;
 8001c10:	2300      	movs	r3, #0
 8001c12:	74fb      	strb	r3, [r7, #19]
        }
        else
        {
          registerValue = ((uint32_t) value)& (L6474_ELPOS_STEP_MASK | L6474_ELPOS_MICROSTEP_MASK);
        }
        break;
 8001c14:	e079      	b.n	8001d0a <L6474_SetAnalogValue+0x1d6>
          registerValue = ((uint32_t) value)& (L6474_ELPOS_STEP_MASK | L6474_ELPOS_MICROSTEP_MASK);
 8001c16:	edd7 7a01 	vldr	s15, [r7, #4]
 8001c1a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001c1e:	ee17 3a90 	vmov	r3, s15
 8001c22:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001c26:	617b      	str	r3, [r7, #20]
        break;
 8001c28:	e06f      	b.n	8001d0a <L6474_SetAnalogValue+0x1d6>
      case L6474_ABS_POS:
      case L6474_MARK:
        if ((value >= L6474_MIN_POSITION) &&
 8001c2a:	edd7 7a01 	vldr	s15, [r7, #4]
 8001c2e:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 8001d2c <L6474_SetAnalogValue+0x1f8>
 8001c32:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001c36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c3a:	db27      	blt.n	8001c8c <L6474_SetAnalogValue+0x158>
 8001c3c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001c40:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 8001d30 <L6474_SetAnalogValue+0x1fc>
 8001c44:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001c48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c4c:	d81e      	bhi.n	8001c8c <L6474_SetAnalogValue+0x158>
            (value <= L6474_MAX_POSITION))
        {
          if (value >= 0)
 8001c4e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001c52:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001c56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c5a:	db09      	blt.n	8001c70 <L6474_SetAnalogValue+0x13c>
          {
            registerValue = ((uint32_t) value)& L6474_ABS_POS_VALUE_MASK;
 8001c5c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001c60:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001c64:	ee17 3a90 	vmov	r3, s15
 8001c68:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8001c6c:	617b      	str	r3, [r7, #20]
          if (value >= 0)
 8001c6e:	e010      	b.n	8001c92 <L6474_SetAnalogValue+0x15e>
          }
          else
          {
            registerValue = L6474_ABS_POS_VALUE_MASK - (((uint32_t) (-value))& L6474_ABS_POS_VALUE_MASK) + 1;
 8001c70:	edd7 7a01 	vldr	s15, [r7, #4]
 8001c74:	eef1 7a67 	vneg.f32	s15, s15
 8001c78:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001c7c:	ee17 3a90 	vmov	r3, s15
 8001c80:	43db      	mvns	r3, r3
 8001c82:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8001c86:	3301      	adds	r3, #1
 8001c88:	617b      	str	r3, [r7, #20]
          if (value >= 0)
 8001c8a:	e002      	b.n	8001c92 <L6474_SetAnalogValue+0x15e>
          }
        }
        else 
        {
          result = FALSE;
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	74fb      	strb	r3, [r7, #19]
        }
        break;
 8001c90:	e03b      	b.n	8001d0a <L6474_SetAnalogValue+0x1d6>
 8001c92:	e03a      	b.n	8001d0a <L6474_SetAnalogValue+0x1d6>
      case L6474_TVAL:
        if (value > L6474_TVAL_MAX_VALUE)
 8001c94:	edd7 7a01 	vldr	s15, [r7, #4]
 8001c98:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8001d34 <L6474_SetAnalogValue+0x200>
 8001c9c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001ca0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ca4:	dd02      	ble.n	8001cac <L6474_SetAnalogValue+0x178>
        {
          result = FALSE;
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	74fb      	strb	r3, [r7, #19]
        }
        else
        {
          registerValue = L6474_Tval_Current_to_Par(value);
        }
        break;
 8001caa:	e02e      	b.n	8001d0a <L6474_SetAnalogValue+0x1d6>
          registerValue = L6474_Tval_Current_to_Par(value);
 8001cac:	ed97 0a01 	vldr	s0, [r7, #4]
 8001cb0:	f001 f98a 	bl	8002fc8 <L6474_Tval_Current_to_Par>
 8001cb4:	4603      	mov	r3, r0
 8001cb6:	617b      	str	r3, [r7, #20]
        break;
 8001cb8:	e027      	b.n	8001d0a <L6474_SetAnalogValue+0x1d6>
      case L6474_OCD_TH:
        if (value > L6474_OCD_TH_MAX_VALUE)
 8001cba:	edd7 7a01 	vldr	s15, [r7, #4]
 8001cbe:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8001d38 <L6474_SetAnalogValue+0x204>
 8001cc2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001cc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cca:	dd02      	ble.n	8001cd2 <L6474_SetAnalogValue+0x19e>
        {
          result = FALSE;
 8001ccc:	2300      	movs	r3, #0
 8001cce:	74fb      	strb	r3, [r7, #19]
        }
        else 
        {
          registerValue = L6474_Ocd_Th_to_Par(value);
        }
        break;
 8001cd0:	e01b      	b.n	8001d0a <L6474_SetAnalogValue+0x1d6>
          registerValue = L6474_Ocd_Th_to_Par(value);
 8001cd2:	ed97 0a01 	vldr	s0, [r7, #4]
 8001cd6:	f001 f953 	bl	8002f80 <L6474_Ocd_Th_to_Par>
 8001cda:	4603      	mov	r3, r0
 8001cdc:	617b      	str	r3, [r7, #20]
        break;
 8001cde:	e014      	b.n	8001d0a <L6474_SetAnalogValue+0x1d6>
      case L6474_TON_MIN:
      case L6474_TOFF_MIN:
        if (value > L6474_TOFF_TON_MIN_MAX_VALUE)
 8001ce0:	edd7 7a01 	vldr	s15, [r7, #4]
 8001ce4:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8001d3c <L6474_SetAnalogValue+0x208>
 8001ce8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001cec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cf0:	dd02      	ble.n	8001cf8 <L6474_SetAnalogValue+0x1c4>
        {
          result = FALSE;
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	74fb      	strb	r3, [r7, #19]
        }
        else
        {
          registerValue = L6474_Tmin_Time_to_Par(value);
        }
        break;    
 8001cf6:	e008      	b.n	8001d0a <L6474_SetAnalogValue+0x1d6>
          registerValue = L6474_Tmin_Time_to_Par(value);
 8001cf8:	ed97 0a01 	vldr	s0, [r7, #4]
 8001cfc:	f001 f988 	bl	8003010 <L6474_Tmin_Time_to_Par>
 8001d00:	4603      	mov	r3, r0
 8001d02:	617b      	str	r3, [r7, #20]
        break;    
 8001d04:	e001      	b.n	8001d0a <L6474_SetAnalogValue+0x1d6>
      default:
        result = FALSE;
 8001d06:	2300      	movs	r3, #0
 8001d08:	74fb      	strb	r3, [r7, #19]
    }
    if (result != FALSE)
 8001d0a:	7cfb      	ldrb	r3, [r7, #19]
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d005      	beq.n	8001d1c <L6474_SetAnalogValue+0x1e8>
    {
      L6474_CmdSetParam(deviceId, param, registerValue);
 8001d10:	7bfb      	ldrb	r3, [r7, #15]
 8001d12:	697a      	ldr	r2, [r7, #20]
 8001d14:	68b9      	ldr	r1, [r7, #8]
 8001d16:	4618      	mov	r0, r3
 8001d18:	f7ff fa02 	bl	8001120 <L6474_CmdSetParam>
    }
  }
  return result;
 8001d1c:	7cfb      	ldrb	r3, [r7, #19]
}
 8001d1e:	4618      	mov	r0, r3
 8001d20:	3718      	adds	r7, #24
 8001d22:	46bd      	mov	sp, r7
 8001d24:	bd80      	pop	{r7, pc}
 8001d26:	bf00      	nop
 8001d28:	43ff8000 	.word	0x43ff8000
 8001d2c:	ca000000 	.word	0xca000000
 8001d30:	49fffff8 	.word	0x49fffff8
 8001d34:	457a0000 	.word	0x457a0000
 8001d38:	45bb8000 	.word	0x45bb8000
 8001d3c:	42800000 	.word	0x42800000

08001d40 <L6474_SetDeceleration>:
 * @retval true if the command is successfully executed, else false
 * @note The command is not performed is the device is executing 
 * a MOVE or GOTO command (but it can be used during a RUN command)
 **********************************************************/
bool L6474_SetDeceleration(uint8_t deviceId, uint16_t newDec)
{                                                  
 8001d40:	b480      	push	{r7}
 8001d42:	b085      	sub	sp, #20
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	4603      	mov	r3, r0
 8001d48:	460a      	mov	r2, r1
 8001d4a:	71fb      	strb	r3, [r7, #7]
 8001d4c:	4613      	mov	r3, r2
 8001d4e:	80bb      	strh	r3, [r7, #4]
  bool cmdExecuted = FALSE;
 8001d50:	2300      	movs	r3, #0
 8001d52:	73fb      	strb	r3, [r7, #15]
  if ((newDec != 0)&& 
 8001d54:	88bb      	ldrh	r3, [r7, #4]
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d023      	beq.n	8001da2 <L6474_SetDeceleration+0x62>
      ((devicePrm[deviceId].motionState == INACTIVE)||
 8001d5a:	79fa      	ldrb	r2, [r7, #7]
 8001d5c:	4914      	ldr	r1, [pc, #80]	; (8001db0 <L6474_SetDeceleration+0x70>)
 8001d5e:	4613      	mov	r3, r2
 8001d60:	009b      	lsls	r3, r3, #2
 8001d62:	4413      	add	r3, r2
 8001d64:	00db      	lsls	r3, r3, #3
 8001d66:	440b      	add	r3, r1
 8001d68:	3324      	adds	r3, #36	; 0x24
 8001d6a:	781b      	ldrb	r3, [r3, #0]
 8001d6c:	b2db      	uxtb	r3, r3
  if ((newDec != 0)&& 
 8001d6e:	2b08      	cmp	r3, #8
 8001d70:	d00b      	beq.n	8001d8a <L6474_SetDeceleration+0x4a>
       (devicePrm[deviceId].commandExecuted == RUN_CMD)))
 8001d72:	79fa      	ldrb	r2, [r7, #7]
 8001d74:	490e      	ldr	r1, [pc, #56]	; (8001db0 <L6474_SetDeceleration+0x70>)
 8001d76:	4613      	mov	r3, r2
 8001d78:	009b      	lsls	r3, r3, #2
 8001d7a:	4413      	add	r3, r2
 8001d7c:	00db      	lsls	r3, r3, #3
 8001d7e:	440b      	add	r3, r1
 8001d80:	3322      	adds	r3, #34	; 0x22
 8001d82:	781b      	ldrb	r3, [r3, #0]
 8001d84:	b2db      	uxtb	r3, r3
      ((devicePrm[deviceId].motionState == INACTIVE)||
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d10b      	bne.n	8001da2 <L6474_SetDeceleration+0x62>
  {
    devicePrm[deviceId].deceleration = newDec;
 8001d8a:	79fa      	ldrb	r2, [r7, #7]
 8001d8c:	4908      	ldr	r1, [pc, #32]	; (8001db0 <L6474_SetDeceleration+0x70>)
 8001d8e:	4613      	mov	r3, r2
 8001d90:	009b      	lsls	r3, r3, #2
 8001d92:	4413      	add	r3, r2
 8001d94:	00db      	lsls	r3, r3, #3
 8001d96:	440b      	add	r3, r1
 8001d98:	331a      	adds	r3, #26
 8001d9a:	88ba      	ldrh	r2, [r7, #4]
 8001d9c:	801a      	strh	r2, [r3, #0]
    cmdExecuted = TRUE;
 8001d9e:	2301      	movs	r3, #1
 8001da0:	73fb      	strb	r3, [r7, #15]
  }      
  return cmdExecuted;
 8001da2:	7bfb      	ldrb	r3, [r7, #15]
}        
 8001da4:	4618      	mov	r0, r3
 8001da6:	3714      	adds	r7, #20
 8001da8:	46bd      	mov	sp, r7
 8001daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dae:	4770      	bx	lr
 8001db0:	200003f0 	.word	0x200003f0

08001db4 <L6474_SetDirection>:
 * @note The direction change is only applied if the device 
 * is in INACTIVE state
 * @retval None
 **********************************************************/
void L6474_SetDirection(uint8_t deviceId, motorDir_t dir)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b082      	sub	sp, #8
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	4603      	mov	r3, r0
 8001dbc:	460a      	mov	r2, r1
 8001dbe:	71fb      	strb	r3, [r7, #7]
 8001dc0:	4613      	mov	r3, r2
 8001dc2:	71bb      	strb	r3, [r7, #6]
  if (devicePrm[deviceId].motionState == INACTIVE)
 8001dc4:	79fa      	ldrb	r2, [r7, #7]
 8001dc6:	490f      	ldr	r1, [pc, #60]	; (8001e04 <L6474_SetDirection+0x50>)
 8001dc8:	4613      	mov	r3, r2
 8001dca:	009b      	lsls	r3, r3, #2
 8001dcc:	4413      	add	r3, r2
 8001dce:	00db      	lsls	r3, r3, #3
 8001dd0:	440b      	add	r3, r1
 8001dd2:	3324      	adds	r3, #36	; 0x24
 8001dd4:	781b      	ldrb	r3, [r3, #0]
 8001dd6:	b2db      	uxtb	r3, r3
 8001dd8:	2b08      	cmp	r3, #8
 8001dda:	d10f      	bne.n	8001dfc <L6474_SetDirection+0x48>
  {
    devicePrm[deviceId].direction = dir;
 8001ddc:	79fa      	ldrb	r2, [r7, #7]
 8001dde:	4909      	ldr	r1, [pc, #36]	; (8001e04 <L6474_SetDirection+0x50>)
 8001de0:	4613      	mov	r3, r2
 8001de2:	009b      	lsls	r3, r3, #2
 8001de4:	4413      	add	r3, r2
 8001de6:	00db      	lsls	r3, r3, #3
 8001de8:	440b      	add	r3, r1
 8001dea:	3323      	adds	r3, #35	; 0x23
 8001dec:	79ba      	ldrb	r2, [r7, #6]
 8001dee:	701a      	strb	r2, [r3, #0]
    L6474_Board_SetDirectionGpio(deviceId, dir);
 8001df0:	79ba      	ldrb	r2, [r7, #6]
 8001df2:	79fb      	ldrb	r3, [r7, #7]
 8001df4:	4611      	mov	r1, r2
 8001df6:	4618      	mov	r0, r3
 8001df8:	f002 fb5e 	bl	80044b8 <L6474_Board_SetDirectionGpio>
  }
}
 8001dfc:	bf00      	nop
 8001dfe:	3708      	adds	r7, #8
 8001e00:	46bd      	mov	sp, r7
 8001e02:	bd80      	pop	{r7, pc}
 8001e04:	200003f0 	.word	0x200003f0

08001e08 <L6474_SetHome>:
 * @param[in] deviceId (from 0 to 2)
 * @param[in] markPos new home position
 * @retval None
 **********************************************************/
void L6474_SetHome(uint8_t deviceId, int32_t homePos)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b084      	sub	sp, #16
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	4603      	mov	r3, r0
 8001e10:	6039      	str	r1, [r7, #0]
 8001e12:	71fb      	strb	r3, [r7, #7]
  int32_t absHomePos = L6474_ConvertPosition(L6474_CmdGetParam(deviceId,L6474_ABS_POS)) - homePos;
 8001e14:	79fb      	ldrb	r3, [r7, #7]
 8001e16:	2101      	movs	r1, #1
 8001e18:	4618      	mov	r0, r3
 8001e1a:	f7fe fffb 	bl	8000e14 <L6474_CmdGetParam>
 8001e1e:	4603      	mov	r3, r0
 8001e20:	4618      	mov	r0, r3
 8001e22:	f000 fa25 	bl	8002270 <L6474_ConvertPosition>
 8001e26:	4602      	mov	r2, r0
 8001e28:	683b      	ldr	r3, [r7, #0]
 8001e2a:	1ad3      	subs	r3, r2, r3
 8001e2c:	60bb      	str	r3, [r7, #8]
  uint32_t registerValue;
  
  if (absHomePos >= 0)
 8001e2e:	68bb      	ldr	r3, [r7, #8]
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	db04      	blt.n	8001e3e <L6474_SetHome+0x36>
  {
    registerValue = ((uint32_t) absHomePos)& L6474_ABS_POS_VALUE_MASK;
 8001e34:	68bb      	ldr	r3, [r7, #8]
 8001e36:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8001e3a:	60fb      	str	r3, [r7, #12]
 8001e3c:	e005      	b.n	8001e4a <L6474_SetHome+0x42>
  }
  else
  {
    registerValue = L6474_ABS_POS_VALUE_MASK - (((uint32_t) (-absHomePos))& L6474_ABS_POS_VALUE_MASK) + 1;
 8001e3e:	68bb      	ldr	r3, [r7, #8]
 8001e40:	3b01      	subs	r3, #1
 8001e42:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8001e46:	3301      	adds	r3, #1
 8001e48:	60fb      	str	r3, [r7, #12]
  }
 
  L6474_CmdSetParam(deviceId, L6474_ABS_POS, registerValue);
 8001e4a:	79fb      	ldrb	r3, [r7, #7]
 8001e4c:	68fa      	ldr	r2, [r7, #12]
 8001e4e:	2101      	movs	r1, #1
 8001e50:	4618      	mov	r0, r3
 8001e52:	f7ff f965 	bl	8001120 <L6474_CmdSetParam>
}
 8001e56:	bf00      	nop
 8001e58:	3710      	adds	r7, #16
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	bd80      	pop	{r7, pc}

08001e5e <L6474_SetMark>:
 * @param[in] deviceId (from 0 to 2)
 * @param[in] markPos new Mark position
 * @retval None
 **********************************************************/
void L6474_SetMark(uint8_t deviceId, int32_t markPos)
{
 8001e5e:	b580      	push	{r7, lr}
 8001e60:	b084      	sub	sp, #16
 8001e62:	af00      	add	r7, sp, #0
 8001e64:	4603      	mov	r3, r0
 8001e66:	6039      	str	r1, [r7, #0]
 8001e68:	71fb      	strb	r3, [r7, #7]
  uint32_t registerValue;
  if (markPos >= 0)
 8001e6a:	683b      	ldr	r3, [r7, #0]
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	db04      	blt.n	8001e7a <L6474_SetMark+0x1c>
  {
    registerValue = ((uint32_t) markPos)& L6474_ABS_POS_VALUE_MASK;
 8001e70:	683b      	ldr	r3, [r7, #0]
 8001e72:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8001e76:	60fb      	str	r3, [r7, #12]
 8001e78:	e005      	b.n	8001e86 <L6474_SetMark+0x28>
  }
  else
  {
    registerValue = L6474_ABS_POS_VALUE_MASK - (((uint32_t) (-markPos))& L6474_ABS_POS_VALUE_MASK) + 1;
 8001e7a:	683b      	ldr	r3, [r7, #0]
 8001e7c:	3b01      	subs	r3, #1
 8001e7e:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8001e82:	3301      	adds	r3, #1
 8001e84:	60fb      	str	r3, [r7, #12]
  }
  
  L6474_CmdSetParam(deviceId,L6474_MARK, registerValue);
 8001e86:	79fb      	ldrb	r3, [r7, #7]
 8001e88:	68fa      	ldr	r2, [r7, #12]
 8001e8a:	2103      	movs	r1, #3
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	f7ff f947 	bl	8001120 <L6474_CmdSetParam>
}
 8001e92:	bf00      	nop
 8001e94:	3710      	adds	r7, #16
 8001e96:	46bd      	mov	sp, r7
 8001e98:	bd80      	pop	{r7, pc}
	...

08001e9c <L6474_SetMaxSpeed>:
 * @retval true if the command is successfully executed, else false
 * @note The command is not performed is the device is executing 
 * a MOVE or GOTO command (but it can be used during a RUN command).
 **********************************************************/
bool L6474_SetMaxSpeed(uint8_t deviceId, uint16_t newMaxSpeed)
{                                                  
 8001e9c:	b480      	push	{r7}
 8001e9e:	b085      	sub	sp, #20
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	4603      	mov	r3, r0
 8001ea4:	460a      	mov	r2, r1
 8001ea6:	71fb      	strb	r3, [r7, #7]
 8001ea8:	4613      	mov	r3, r2
 8001eaa:	80bb      	strh	r3, [r7, #4]
  bool cmdExecuted = FALSE;
 8001eac:	2300      	movs	r3, #0
 8001eae:	73fb      	strb	r3, [r7, #15]
  if ((newMaxSpeed >= L6474_MIN_PWM_FREQ)&&
 8001eb0:	88bb      	ldrh	r3, [r7, #4]
 8001eb2:	2b01      	cmp	r3, #1
 8001eb4:	d935      	bls.n	8001f22 <L6474_SetMaxSpeed+0x86>
 8001eb6:	88bb      	ldrh	r3, [r7, #4]
 8001eb8:	f242 7210 	movw	r2, #10000	; 0x2710
 8001ebc:	4293      	cmp	r3, r2
 8001ebe:	d830      	bhi.n	8001f22 <L6474_SetMaxSpeed+0x86>
      (newMaxSpeed <= L6474_MAX_PWM_FREQ) &&
      (devicePrm[deviceId].minSpeed <= newMaxSpeed) &&
 8001ec0:	79fa      	ldrb	r2, [r7, #7]
 8001ec2:	491b      	ldr	r1, [pc, #108]	; (8001f30 <L6474_SetMaxSpeed+0x94>)
 8001ec4:	4613      	mov	r3, r2
 8001ec6:	009b      	lsls	r3, r3, #2
 8001ec8:	4413      	add	r3, r2
 8001eca:	00db      	lsls	r3, r3, #3
 8001ecc:	440b      	add	r3, r1
 8001ece:	331e      	adds	r3, #30
 8001ed0:	881b      	ldrh	r3, [r3, #0]
 8001ed2:	b29b      	uxth	r3, r3
      (newMaxSpeed <= L6474_MAX_PWM_FREQ) &&
 8001ed4:	88ba      	ldrh	r2, [r7, #4]
 8001ed6:	429a      	cmp	r2, r3
 8001ed8:	d323      	bcc.n	8001f22 <L6474_SetMaxSpeed+0x86>
      ((devicePrm[deviceId].motionState == INACTIVE)||
 8001eda:	79fa      	ldrb	r2, [r7, #7]
 8001edc:	4914      	ldr	r1, [pc, #80]	; (8001f30 <L6474_SetMaxSpeed+0x94>)
 8001ede:	4613      	mov	r3, r2
 8001ee0:	009b      	lsls	r3, r3, #2
 8001ee2:	4413      	add	r3, r2
 8001ee4:	00db      	lsls	r3, r3, #3
 8001ee6:	440b      	add	r3, r1
 8001ee8:	3324      	adds	r3, #36	; 0x24
 8001eea:	781b      	ldrb	r3, [r3, #0]
 8001eec:	b2db      	uxtb	r3, r3
      (devicePrm[deviceId].minSpeed <= newMaxSpeed) &&
 8001eee:	2b08      	cmp	r3, #8
 8001ef0:	d00b      	beq.n	8001f0a <L6474_SetMaxSpeed+0x6e>
       (devicePrm[deviceId].commandExecuted == RUN_CMD)))
 8001ef2:	79fa      	ldrb	r2, [r7, #7]
 8001ef4:	490e      	ldr	r1, [pc, #56]	; (8001f30 <L6474_SetMaxSpeed+0x94>)
 8001ef6:	4613      	mov	r3, r2
 8001ef8:	009b      	lsls	r3, r3, #2
 8001efa:	4413      	add	r3, r2
 8001efc:	00db      	lsls	r3, r3, #3
 8001efe:	440b      	add	r3, r1
 8001f00:	3322      	adds	r3, #34	; 0x22
 8001f02:	781b      	ldrb	r3, [r3, #0]
 8001f04:	b2db      	uxtb	r3, r3
      ((devicePrm[deviceId].motionState == INACTIVE)||
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d10b      	bne.n	8001f22 <L6474_SetMaxSpeed+0x86>
  {
    devicePrm[deviceId].maxSpeed = newMaxSpeed;
 8001f0a:	79fa      	ldrb	r2, [r7, #7]
 8001f0c:	4908      	ldr	r1, [pc, #32]	; (8001f30 <L6474_SetMaxSpeed+0x94>)
 8001f0e:	4613      	mov	r3, r2
 8001f10:	009b      	lsls	r3, r3, #2
 8001f12:	4413      	add	r3, r2
 8001f14:	00db      	lsls	r3, r3, #3
 8001f16:	440b      	add	r3, r1
 8001f18:	331c      	adds	r3, #28
 8001f1a:	88ba      	ldrh	r2, [r7, #4]
 8001f1c:	801a      	strh	r2, [r3, #0]
    cmdExecuted = TRUE;
 8001f1e:	2301      	movs	r3, #1
 8001f20:	73fb      	strb	r3, [r7, #15]
  }
  return cmdExecuted;
 8001f22:	7bfb      	ldrb	r3, [r7, #15]
}                                                     
 8001f24:	4618      	mov	r0, r3
 8001f26:	3714      	adds	r7, #20
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2e:	4770      	bx	lr
 8001f30:	200003f0 	.word	0x200003f0

08001f34 <L6474_SetMinSpeed>:
 * @retval true if the command is successfully executed, else false
 * @note The command is not performed is the device is executing 
 * a MOVE or GOTO command (but it can be used during a RUN command).
 **********************************************************/
bool L6474_SetMinSpeed(uint8_t deviceId, uint16_t newMinSpeed)
{                                                  
 8001f34:	b480      	push	{r7}
 8001f36:	b085      	sub	sp, #20
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	4603      	mov	r3, r0
 8001f3c:	460a      	mov	r2, r1
 8001f3e:	71fb      	strb	r3, [r7, #7]
 8001f40:	4613      	mov	r3, r2
 8001f42:	80bb      	strh	r3, [r7, #4]
  bool cmdExecuted = FALSE;
 8001f44:	2300      	movs	r3, #0
 8001f46:	73fb      	strb	r3, [r7, #15]
  if ((newMinSpeed >= L6474_MIN_PWM_FREQ)&&
 8001f48:	88bb      	ldrh	r3, [r7, #4]
 8001f4a:	2b01      	cmp	r3, #1
 8001f4c:	d935      	bls.n	8001fba <L6474_SetMinSpeed+0x86>
 8001f4e:	88bb      	ldrh	r3, [r7, #4]
 8001f50:	f242 7210 	movw	r2, #10000	; 0x2710
 8001f54:	4293      	cmp	r3, r2
 8001f56:	d830      	bhi.n	8001fba <L6474_SetMinSpeed+0x86>
      (newMinSpeed <= L6474_MAX_PWM_FREQ) &&
      (newMinSpeed <= devicePrm[deviceId].maxSpeed) && 
 8001f58:	79fa      	ldrb	r2, [r7, #7]
 8001f5a:	491b      	ldr	r1, [pc, #108]	; (8001fc8 <L6474_SetMinSpeed+0x94>)
 8001f5c:	4613      	mov	r3, r2
 8001f5e:	009b      	lsls	r3, r3, #2
 8001f60:	4413      	add	r3, r2
 8001f62:	00db      	lsls	r3, r3, #3
 8001f64:	440b      	add	r3, r1
 8001f66:	331c      	adds	r3, #28
 8001f68:	881b      	ldrh	r3, [r3, #0]
 8001f6a:	b29b      	uxth	r3, r3
      (newMinSpeed <= L6474_MAX_PWM_FREQ) &&
 8001f6c:	88ba      	ldrh	r2, [r7, #4]
 8001f6e:	429a      	cmp	r2, r3
 8001f70:	d823      	bhi.n	8001fba <L6474_SetMinSpeed+0x86>
      ((devicePrm[deviceId].motionState == INACTIVE)||
 8001f72:	79fa      	ldrb	r2, [r7, #7]
 8001f74:	4914      	ldr	r1, [pc, #80]	; (8001fc8 <L6474_SetMinSpeed+0x94>)
 8001f76:	4613      	mov	r3, r2
 8001f78:	009b      	lsls	r3, r3, #2
 8001f7a:	4413      	add	r3, r2
 8001f7c:	00db      	lsls	r3, r3, #3
 8001f7e:	440b      	add	r3, r1
 8001f80:	3324      	adds	r3, #36	; 0x24
 8001f82:	781b      	ldrb	r3, [r3, #0]
 8001f84:	b2db      	uxtb	r3, r3
      (newMinSpeed <= devicePrm[deviceId].maxSpeed) && 
 8001f86:	2b08      	cmp	r3, #8
 8001f88:	d00b      	beq.n	8001fa2 <L6474_SetMinSpeed+0x6e>
       (devicePrm[deviceId].commandExecuted == RUN_CMD)))
 8001f8a:	79fa      	ldrb	r2, [r7, #7]
 8001f8c:	490e      	ldr	r1, [pc, #56]	; (8001fc8 <L6474_SetMinSpeed+0x94>)
 8001f8e:	4613      	mov	r3, r2
 8001f90:	009b      	lsls	r3, r3, #2
 8001f92:	4413      	add	r3, r2
 8001f94:	00db      	lsls	r3, r3, #3
 8001f96:	440b      	add	r3, r1
 8001f98:	3322      	adds	r3, #34	; 0x22
 8001f9a:	781b      	ldrb	r3, [r3, #0]
 8001f9c:	b2db      	uxtb	r3, r3
      ((devicePrm[deviceId].motionState == INACTIVE)||
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d10b      	bne.n	8001fba <L6474_SetMinSpeed+0x86>
  {
    devicePrm[deviceId].minSpeed = newMinSpeed;
 8001fa2:	79fa      	ldrb	r2, [r7, #7]
 8001fa4:	4908      	ldr	r1, [pc, #32]	; (8001fc8 <L6474_SetMinSpeed+0x94>)
 8001fa6:	4613      	mov	r3, r2
 8001fa8:	009b      	lsls	r3, r3, #2
 8001faa:	4413      	add	r3, r2
 8001fac:	00db      	lsls	r3, r3, #3
 8001fae:	440b      	add	r3, r1
 8001fb0:	331e      	adds	r3, #30
 8001fb2:	88ba      	ldrh	r2, [r7, #4]
 8001fb4:	801a      	strh	r2, [r3, #0]
    cmdExecuted = TRUE;
 8001fb6:	2301      	movs	r3, #1
 8001fb8:	73fb      	strb	r3, [r7, #15]
  }  
  return cmdExecuted;
 8001fba:	7bfb      	ldrb	r3, [r7, #15]
}                 
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	3714      	adds	r7, #20
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc6:	4770      	bx	lr
 8001fc8:	200003f0 	.word	0x200003f0

08001fcc <L6474_SetStopMode>:
 * @param[in] deviceId Unused parameter
 * @param[in] stopMode HOLD_MODE to let power bridge enabled
 * @retval None
 **********************************************************/
void L6474_SetStopMode(uint8_t deviceId, motorStopMode_t stopMode)
{
 8001fcc:	b480      	push	{r7}
 8001fce:	b083      	sub	sp, #12
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	4603      	mov	r3, r0
 8001fd4:	460a      	mov	r2, r1
 8001fd6:	71fb      	strb	r3, [r7, #7]
 8001fd8:	4613      	mov	r3, r2
 8001fda:	71bb      	strb	r3, [r7, #6]
  devicePrm[deviceId].stopMode = stopMode;
 8001fdc:	79fa      	ldrb	r2, [r7, #7]
 8001fde:	4907      	ldr	r1, [pc, #28]	; (8001ffc <L6474_SetStopMode+0x30>)
 8001fe0:	4613      	mov	r3, r2
 8001fe2:	009b      	lsls	r3, r3, #2
 8001fe4:	4413      	add	r3, r2
 8001fe6:	00db      	lsls	r3, r3, #3
 8001fe8:	440b      	add	r3, r1
 8001fea:	3325      	adds	r3, #37	; 0x25
 8001fec:	79ba      	ldrb	r2, [r7, #6]
 8001fee:	701a      	strb	r2, [r3, #0]
}
 8001ff0:	bf00      	nop
 8001ff2:	370c      	adds	r7, #12
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffa:	4770      	bx	lr
 8001ffc:	200003f0 	.word	0x200003f0

08002000 <L6474_SoftStop>:
 * @param[in] deviceId (from 0 to 2)
 * @retval true if the command is successfully executed, else false
 * @note The command is not performed is the device is in INACTIVE state.
 **********************************************************/
bool L6474_SoftStop(uint8_t deviceId)
{	
 8002000:	b480      	push	{r7}
 8002002:	b085      	sub	sp, #20
 8002004:	af00      	add	r7, sp, #0
 8002006:	4603      	mov	r3, r0
 8002008:	71fb      	strb	r3, [r7, #7]
  bool cmdExecuted = FALSE;
 800200a:	2300      	movs	r3, #0
 800200c:	73fb      	strb	r3, [r7, #15]
  if (devicePrm[deviceId].motionState != INACTIVE)
 800200e:	79fa      	ldrb	r2, [r7, #7]
 8002010:	490e      	ldr	r1, [pc, #56]	; (800204c <L6474_SoftStop+0x4c>)
 8002012:	4613      	mov	r3, r2
 8002014:	009b      	lsls	r3, r3, #2
 8002016:	4413      	add	r3, r2
 8002018:	00db      	lsls	r3, r3, #3
 800201a:	440b      	add	r3, r1
 800201c:	3324      	adds	r3, #36	; 0x24
 800201e:	781b      	ldrb	r3, [r3, #0]
 8002020:	b2db      	uxtb	r3, r3
 8002022:	2b08      	cmp	r3, #8
 8002024:	d00b      	beq.n	800203e <L6474_SoftStop+0x3e>
  {
    devicePrm[deviceId].commandExecuted = SOFT_STOP_CMD;
 8002026:	79fa      	ldrb	r2, [r7, #7]
 8002028:	4908      	ldr	r1, [pc, #32]	; (800204c <L6474_SoftStop+0x4c>)
 800202a:	4613      	mov	r3, r2
 800202c:	009b      	lsls	r3, r3, #2
 800202e:	4413      	add	r3, r2
 8002030:	00db      	lsls	r3, r3, #3
 8002032:	440b      	add	r3, r1
 8002034:	3322      	adds	r3, #34	; 0x22
 8002036:	2202      	movs	r2, #2
 8002038:	701a      	strb	r2, [r3, #0]
    cmdExecuted = TRUE;
 800203a:	2301      	movs	r3, #1
 800203c:	73fb      	strb	r3, [r7, #15]
  }
  return (cmdExecuted);
 800203e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002040:	4618      	mov	r0, r3
 8002042:	3714      	adds	r7, #20
 8002044:	46bd      	mov	sp, r7
 8002046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204a:	4770      	bx	lr
 800204c:	200003f0 	.word	0x200003f0

08002050 <L6474_WaitWhileActive>:
 * @brief  Locks until the device state becomes Inactive
 * @param[in] deviceId (from 0 to 2)
 * @retval None
 **********************************************************/
void L6474_WaitWhileActive(uint8_t deviceId)
 {
 8002050:	b580      	push	{r7, lr}
 8002052:	b082      	sub	sp, #8
 8002054:	af00      	add	r7, sp, #0
 8002056:	4603      	mov	r3, r0
 8002058:	71fb      	strb	r3, [r7, #7]
	/* Wait while motor is running */
	while (L6474_GetDeviceState(deviceId) != INACTIVE);
 800205a:	bf00      	nop
 800205c:	79fb      	ldrb	r3, [r7, #7]
 800205e:	4618      	mov	r0, r3
 8002060:	f7ff f9d6 	bl	8001410 <L6474_GetDeviceState>
 8002064:	4603      	mov	r3, r0
 8002066:	2b08      	cmp	r3, #8
 8002068:	d1f8      	bne.n	800205c <L6474_WaitWhileActive+0xc>
}
 800206a:	bf00      	nop
 800206c:	bf00      	nop
 800206e:	3708      	adds	r7, #8
 8002070:	46bd      	mov	sp, r7
 8002072:	bd80      	pop	{r7, pc}

08002074 <L6474_ApplySpeed>:
 * @param[in] deviceId (from 0 to 2)
 * @param[in] newSpeed in pps
 * @retval None
 **********************************************************/
void L6474_ApplySpeed(uint8_t deviceId, uint16_t newSpeed)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b082      	sub	sp, #8
 8002078:	af00      	add	r7, sp, #0
 800207a:	4603      	mov	r3, r0
 800207c:	460a      	mov	r2, r1
 800207e:	71fb      	strb	r3, [r7, #7]
 8002080:	4613      	mov	r3, r2
 8002082:	80bb      	strh	r3, [r7, #4]
  if (newSpeed < L6474_MIN_PWM_FREQ)
 8002084:	88bb      	ldrh	r3, [r7, #4]
 8002086:	2b01      	cmp	r3, #1
 8002088:	d801      	bhi.n	800208e <L6474_ApplySpeed+0x1a>
  {
    newSpeed = L6474_MIN_PWM_FREQ;  
 800208a:	2302      	movs	r3, #2
 800208c:	80bb      	strh	r3, [r7, #4]
  }
  if (newSpeed > L6474_MAX_PWM_FREQ)
 800208e:	88bb      	ldrh	r3, [r7, #4]
 8002090:	f242 7210 	movw	r2, #10000	; 0x2710
 8002094:	4293      	cmp	r3, r2
 8002096:	d902      	bls.n	800209e <L6474_ApplySpeed+0x2a>
  {
    newSpeed = L6474_MAX_PWM_FREQ;
 8002098:	f242 7310 	movw	r3, #10000	; 0x2710
 800209c:	80bb      	strh	r3, [r7, #4]
  }
  
  devicePrm[deviceId].speed = newSpeed;
 800209e:	79fa      	ldrb	r2, [r7, #7]
 80020a0:	4913      	ldr	r1, [pc, #76]	; (80020f0 <L6474_ApplySpeed+0x7c>)
 80020a2:	4613      	mov	r3, r2
 80020a4:	009b      	lsls	r3, r3, #2
 80020a6:	4413      	add	r3, r2
 80020a8:	00db      	lsls	r3, r3, #3
 80020aa:	440b      	add	r3, r1
 80020ac:	3320      	adds	r3, #32
 80020ae:	88ba      	ldrh	r2, [r7, #4]
 80020b0:	801a      	strh	r2, [r3, #0]

  switch (deviceId)
 80020b2:	79fb      	ldrb	r3, [r7, #7]
 80020b4:	2b02      	cmp	r3, #2
 80020b6:	d010      	beq.n	80020da <L6474_ApplySpeed+0x66>
 80020b8:	2b02      	cmp	r3, #2
 80020ba:	dc13      	bgt.n	80020e4 <L6474_ApplySpeed+0x70>
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d002      	beq.n	80020c6 <L6474_ApplySpeed+0x52>
 80020c0:	2b01      	cmp	r3, #1
 80020c2:	d005      	beq.n	80020d0 <L6474_ApplySpeed+0x5c>
      break;
    case 2:
      L6474_Board_Pwm3SetFreq(newSpeed);
      break;
    default:
      break; //ignore error
 80020c4:	e00e      	b.n	80020e4 <L6474_ApplySpeed+0x70>
      L6474_Board_Pwm1SetFreq(newSpeed);
 80020c6:	88bb      	ldrh	r3, [r7, #4]
 80020c8:	4618      	mov	r0, r3
 80020ca:	f002 f8df 	bl	800428c <L6474_Board_Pwm1SetFreq>
      break;
 80020ce:	e00a      	b.n	80020e6 <L6474_ApplySpeed+0x72>
      L6474_Board_Pwm2SetFreq(newSpeed);
 80020d0:	88bb      	ldrh	r3, [r7, #4]
 80020d2:	4618      	mov	r0, r3
 80020d4:	f002 f900 	bl	80042d8 <L6474_Board_Pwm2SetFreq>
      break;
 80020d8:	e005      	b.n	80020e6 <L6474_ApplySpeed+0x72>
      L6474_Board_Pwm3SetFreq(newSpeed);
 80020da:	88bb      	ldrh	r3, [r7, #4]
 80020dc:	4618      	mov	r0, r3
 80020de:	f002 f921 	bl	8004324 <L6474_Board_Pwm3SetFreq>
      break;
 80020e2:	e000      	b.n	80020e6 <L6474_ApplySpeed+0x72>
      break; //ignore error
 80020e4:	bf00      	nop
  }
}
 80020e6:	bf00      	nop
 80020e8:	3708      	adds	r7, #8
 80020ea:	46bd      	mov	sp, r7
 80020ec:	bd80      	pop	{r7, pc}
 80020ee:	bf00      	nop
 80020f0:	200003f0 	.word	0x200003f0

080020f4 <L6474_ComputeSpeedProfile>:
 * speed.
 * Else, a triangular move is performed (no steady phase: the maximum speed is never
 * reached.
 **********************************************************/
void L6474_ComputeSpeedProfile(uint8_t deviceId, uint32_t nbSteps)
{
 80020f4:	b480      	push	{r7}
 80020f6:	b089      	sub	sp, #36	; 0x24
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	4603      	mov	r3, r0
 80020fc:	6039      	str	r1, [r7, #0]
 80020fe:	71fb      	strb	r3, [r7, #7]
  uint32_t reqAccSteps; 
  uint32_t reqDecSteps;
   
  /* compute the number of steps to get the targeted speed */
  uint16_t minSpeed = devicePrm[deviceId].minSpeed;
 8002100:	79fa      	ldrb	r2, [r7, #7]
 8002102:	495a      	ldr	r1, [pc, #360]	; (800226c <L6474_ComputeSpeedProfile+0x178>)
 8002104:	4613      	mov	r3, r2
 8002106:	009b      	lsls	r3, r3, #2
 8002108:	4413      	add	r3, r2
 800210a:	00db      	lsls	r3, r3, #3
 800210c:	440b      	add	r3, r1
 800210e:	331e      	adds	r3, #30
 8002110:	881b      	ldrh	r3, [r3, #0]
 8002112:	837b      	strh	r3, [r7, #26]
  reqAccSteps = (devicePrm[deviceId].maxSpeed - minSpeed);
 8002114:	79fa      	ldrb	r2, [r7, #7]
 8002116:	4955      	ldr	r1, [pc, #340]	; (800226c <L6474_ComputeSpeedProfile+0x178>)
 8002118:	4613      	mov	r3, r2
 800211a:	009b      	lsls	r3, r3, #2
 800211c:	4413      	add	r3, r2
 800211e:	00db      	lsls	r3, r3, #3
 8002120:	440b      	add	r3, r1
 8002122:	331c      	adds	r3, #28
 8002124:	881b      	ldrh	r3, [r3, #0]
 8002126:	b29b      	uxth	r3, r3
 8002128:	461a      	mov	r2, r3
 800212a:	8b7b      	ldrh	r3, [r7, #26]
 800212c:	1ad3      	subs	r3, r2, r3
 800212e:	61fb      	str	r3, [r7, #28]
  reqAccSteps *= (devicePrm[deviceId].maxSpeed + minSpeed);
 8002130:	79fa      	ldrb	r2, [r7, #7]
 8002132:	494e      	ldr	r1, [pc, #312]	; (800226c <L6474_ComputeSpeedProfile+0x178>)
 8002134:	4613      	mov	r3, r2
 8002136:	009b      	lsls	r3, r3, #2
 8002138:	4413      	add	r3, r2
 800213a:	00db      	lsls	r3, r3, #3
 800213c:	440b      	add	r3, r1
 800213e:	331c      	adds	r3, #28
 8002140:	881b      	ldrh	r3, [r3, #0]
 8002142:	b29b      	uxth	r3, r3
 8002144:	461a      	mov	r2, r3
 8002146:	8b7b      	ldrh	r3, [r7, #26]
 8002148:	4413      	add	r3, r2
 800214a:	461a      	mov	r2, r3
 800214c:	69fb      	ldr	r3, [r7, #28]
 800214e:	fb02 f303 	mul.w	r3, r2, r3
 8002152:	61fb      	str	r3, [r7, #28]
  reqDecSteps = reqAccSteps;
 8002154:	69fb      	ldr	r3, [r7, #28]
 8002156:	617b      	str	r3, [r7, #20]
  reqAccSteps /= (uint32_t)devicePrm[deviceId].acceleration;
 8002158:	79fa      	ldrb	r2, [r7, #7]
 800215a:	4944      	ldr	r1, [pc, #272]	; (800226c <L6474_ComputeSpeedProfile+0x178>)
 800215c:	4613      	mov	r3, r2
 800215e:	009b      	lsls	r3, r3, #2
 8002160:	4413      	add	r3, r2
 8002162:	00db      	lsls	r3, r3, #3
 8002164:	440b      	add	r3, r1
 8002166:	3318      	adds	r3, #24
 8002168:	881b      	ldrh	r3, [r3, #0]
 800216a:	b29b      	uxth	r3, r3
 800216c:	461a      	mov	r2, r3
 800216e:	69fb      	ldr	r3, [r7, #28]
 8002170:	fbb3 f3f2 	udiv	r3, r3, r2
 8002174:	61fb      	str	r3, [r7, #28]
  reqAccSteps /= 2;
 8002176:	69fb      	ldr	r3, [r7, #28]
 8002178:	085b      	lsrs	r3, r3, #1
 800217a:	61fb      	str	r3, [r7, #28]

  /* compute the number of steps to stop */
  reqDecSteps /= (uint32_t)devicePrm[deviceId].deceleration;
 800217c:	79fa      	ldrb	r2, [r7, #7]
 800217e:	493b      	ldr	r1, [pc, #236]	; (800226c <L6474_ComputeSpeedProfile+0x178>)
 8002180:	4613      	mov	r3, r2
 8002182:	009b      	lsls	r3, r3, #2
 8002184:	4413      	add	r3, r2
 8002186:	00db      	lsls	r3, r3, #3
 8002188:	440b      	add	r3, r1
 800218a:	331a      	adds	r3, #26
 800218c:	881b      	ldrh	r3, [r3, #0]
 800218e:	b29b      	uxth	r3, r3
 8002190:	461a      	mov	r2, r3
 8002192:	697b      	ldr	r3, [r7, #20]
 8002194:	fbb3 f3f2 	udiv	r3, r3, r2
 8002198:	617b      	str	r3, [r7, #20]
  reqDecSteps /= 2;
 800219a:	697b      	ldr	r3, [r7, #20]
 800219c:	085b      	lsrs	r3, r3, #1
 800219e:	617b      	str	r3, [r7, #20]

	if(( reqAccSteps + reqDecSteps ) > nbSteps)
 80021a0:	69fa      	ldr	r2, [r7, #28]
 80021a2:	697b      	ldr	r3, [r7, #20]
 80021a4:	4413      	add	r3, r2
 80021a6:	683a      	ldr	r2, [r7, #0]
 80021a8:	429a      	cmp	r2, r3
 80021aa:	d242      	bcs.n	8002232 <L6474_ComputeSpeedProfile+0x13e>
	{	
    /* Triangular move  */
    /* reqDecSteps = (Pos * Dec) /(Dec+Acc) */
    uint32_t dec = devicePrm[deviceId].deceleration;
 80021ac:	79fa      	ldrb	r2, [r7, #7]
 80021ae:	492f      	ldr	r1, [pc, #188]	; (800226c <L6474_ComputeSpeedProfile+0x178>)
 80021b0:	4613      	mov	r3, r2
 80021b2:	009b      	lsls	r3, r3, #2
 80021b4:	4413      	add	r3, r2
 80021b6:	00db      	lsls	r3, r3, #3
 80021b8:	440b      	add	r3, r1
 80021ba:	331a      	adds	r3, #26
 80021bc:	881b      	ldrh	r3, [r3, #0]
 80021be:	b29b      	uxth	r3, r3
 80021c0:	613b      	str	r3, [r7, #16]
    uint32_t acc = devicePrm[deviceId].acceleration;
 80021c2:	79fa      	ldrb	r2, [r7, #7]
 80021c4:	4929      	ldr	r1, [pc, #164]	; (800226c <L6474_ComputeSpeedProfile+0x178>)
 80021c6:	4613      	mov	r3, r2
 80021c8:	009b      	lsls	r3, r3, #2
 80021ca:	4413      	add	r3, r2
 80021cc:	00db      	lsls	r3, r3, #3
 80021ce:	440b      	add	r3, r1
 80021d0:	3318      	adds	r3, #24
 80021d2:	881b      	ldrh	r3, [r3, #0]
 80021d4:	b29b      	uxth	r3, r3
 80021d6:	60fb      	str	r3, [r7, #12]
    
    reqDecSteps =  ((uint32_t) dec * nbSteps) / (acc + dec);
 80021d8:	693b      	ldr	r3, [r7, #16]
 80021da:	683a      	ldr	r2, [r7, #0]
 80021dc:	fb03 f202 	mul.w	r2, r3, r2
 80021e0:	68f9      	ldr	r1, [r7, #12]
 80021e2:	693b      	ldr	r3, [r7, #16]
 80021e4:	440b      	add	r3, r1
 80021e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80021ea:	617b      	str	r3, [r7, #20]
    if (reqDecSteps > 1)
 80021ec:	697b      	ldr	r3, [r7, #20]
 80021ee:	2b01      	cmp	r3, #1
 80021f0:	d908      	bls.n	8002204 <L6474_ComputeSpeedProfile+0x110>
    {
      reqAccSteps = reqDecSteps - 1;
 80021f2:	697b      	ldr	r3, [r7, #20]
 80021f4:	3b01      	subs	r3, #1
 80021f6:	61fb      	str	r3, [r7, #28]
      if(reqAccSteps == 0)
 80021f8:	69fb      	ldr	r3, [r7, #28]
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d104      	bne.n	8002208 <L6474_ComputeSpeedProfile+0x114>
      {
        reqAccSteps = 1;
 80021fe:	2301      	movs	r3, #1
 8002200:	61fb      	str	r3, [r7, #28]
 8002202:	e001      	b.n	8002208 <L6474_ComputeSpeedProfile+0x114>
      }      
    }
    else
    {
      reqAccSteps = 0;
 8002204:	2300      	movs	r3, #0
 8002206:	61fb      	str	r3, [r7, #28]
    }
    devicePrm[deviceId].endAccPos = reqAccSteps;
 8002208:	79fa      	ldrb	r2, [r7, #7]
 800220a:	4918      	ldr	r1, [pc, #96]	; (800226c <L6474_ComputeSpeedProfile+0x178>)
 800220c:	4613      	mov	r3, r2
 800220e:	009b      	lsls	r3, r3, #2
 8002210:	4413      	add	r3, r2
 8002212:	00db      	lsls	r3, r3, #3
 8002214:	440b      	add	r3, r1
 8002216:	3308      	adds	r3, #8
 8002218:	69fa      	ldr	r2, [r7, #28]
 800221a:	601a      	str	r2, [r3, #0]
    devicePrm[deviceId].startDecPos = reqDecSteps;
 800221c:	79fa      	ldrb	r2, [r7, #7]
 800221e:	4913      	ldr	r1, [pc, #76]	; (800226c <L6474_ComputeSpeedProfile+0x178>)
 8002220:	4613      	mov	r3, r2
 8002222:	009b      	lsls	r3, r3, #2
 8002224:	4413      	add	r3, r2
 8002226:	00db      	lsls	r3, r3, #3
 8002228:	440b      	add	r3, r1
 800222a:	3310      	adds	r3, #16
 800222c:	697a      	ldr	r2, [r7, #20]
 800222e:	601a      	str	r2, [r3, #0]
    /* steady phase from  endAccPos to startDecPos */
    /* decelerating from startDecPos to stepsToTake*/
    devicePrm[deviceId].endAccPos = reqAccSteps;
    devicePrm[deviceId].startDecPos = nbSteps - reqDecSteps - 1;
	}
}
 8002230:	e016      	b.n	8002260 <L6474_ComputeSpeedProfile+0x16c>
    devicePrm[deviceId].endAccPos = reqAccSteps;
 8002232:	79fa      	ldrb	r2, [r7, #7]
 8002234:	490d      	ldr	r1, [pc, #52]	; (800226c <L6474_ComputeSpeedProfile+0x178>)
 8002236:	4613      	mov	r3, r2
 8002238:	009b      	lsls	r3, r3, #2
 800223a:	4413      	add	r3, r2
 800223c:	00db      	lsls	r3, r3, #3
 800223e:	440b      	add	r3, r1
 8002240:	3308      	adds	r3, #8
 8002242:	69fa      	ldr	r2, [r7, #28]
 8002244:	601a      	str	r2, [r3, #0]
    devicePrm[deviceId].startDecPos = nbSteps - reqDecSteps - 1;
 8002246:	683a      	ldr	r2, [r7, #0]
 8002248:	697b      	ldr	r3, [r7, #20]
 800224a:	1ad3      	subs	r3, r2, r3
 800224c:	79fa      	ldrb	r2, [r7, #7]
 800224e:	1e59      	subs	r1, r3, #1
 8002250:	4806      	ldr	r0, [pc, #24]	; (800226c <L6474_ComputeSpeedProfile+0x178>)
 8002252:	4613      	mov	r3, r2
 8002254:	009b      	lsls	r3, r3, #2
 8002256:	4413      	add	r3, r2
 8002258:	00db      	lsls	r3, r3, #3
 800225a:	4403      	add	r3, r0
 800225c:	3310      	adds	r3, #16
 800225e:	6019      	str	r1, [r3, #0]
}
 8002260:	bf00      	nop
 8002262:	3724      	adds	r7, #36	; 0x24
 8002264:	46bd      	mov	sp, r7
 8002266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226a:	4770      	bx	lr
 800226c:	200003f0 	.word	0x200003f0

08002270 <L6474_ConvertPosition>:
 * @brief  Converts the ABS_POSITION register value to a 32b signed integer
 * @param[in] abs_position_reg value of the ABS_POSITION register
 * @retval operation_result 32b signed integer corresponding to the absolute position 
 **********************************************************/
int32_t L6474_ConvertPosition(uint32_t abs_position_reg)
{
 8002270:	b480      	push	{r7}
 8002272:	b085      	sub	sp, #20
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
  int32_t operation_result;

  if (abs_position_reg & L6474_ABS_POS_SIGN_BIT_MASK) 
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800227e:	2b00      	cmp	r3, #0
 8002280:	d00d      	beq.n	800229e <L6474_ConvertPosition+0x2e>
  {
    /* Negative register value */
    abs_position_reg = ~abs_position_reg;
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	43db      	mvns	r3, r3
 8002286:	607b      	str	r3, [r7, #4]
    abs_position_reg += 1;
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	3301      	adds	r3, #1
 800228c:	607b      	str	r3, [r7, #4]

    operation_result = (int32_t) (abs_position_reg & L6474_ABS_POS_VALUE_MASK);
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8002294:	60fb      	str	r3, [r7, #12]
    operation_result = -operation_result;
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	425b      	negs	r3, r3
 800229a:	60fb      	str	r3, [r7, #12]
 800229c:	e001      	b.n	80022a2 <L6474_ConvertPosition+0x32>
  } 
  else 
  {
    operation_result = (int32_t) abs_position_reg;
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	60fb      	str	r3, [r7, #12]
  }
  return operation_result;
 80022a2:	68fb      	ldr	r3, [r7, #12]
}
 80022a4:	4618      	mov	r0, r3
 80022a6:	3714      	adds	r7, #20
 80022a8:	46bd      	mov	sp, r7
 80022aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ae:	4770      	bx	lr

080022b0 <L6474_ErrorHandler>:
 * @brief Error handler which calls the user callback (if defined)
 * @param[in] error Number of the error
 * @retval None
 **********************************************************/
void L6474_ErrorHandler(uint16_t error)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	b082      	sub	sp, #8
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	4603      	mov	r3, r0
 80022b8:	80fb      	strh	r3, [r7, #6]
  if (errorHandlerCallback != 0)
 80022ba:	4b07      	ldr	r3, [pc, #28]	; (80022d8 <L6474_ErrorHandler+0x28>)
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d005      	beq.n	80022ce <L6474_ErrorHandler+0x1e>
  {
    (void) errorHandlerCallback(error);
 80022c2:	4b05      	ldr	r3, [pc, #20]	; (80022d8 <L6474_ErrorHandler+0x28>)
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	88fa      	ldrh	r2, [r7, #6]
 80022c8:	4610      	mov	r0, r2
 80022ca:	4798      	blx	r3
    while(1)
    {
      /* Infinite loop */
    }
  }
}
 80022cc:	e000      	b.n	80022d0 <L6474_ErrorHandler+0x20>
    while(1)
 80022ce:	e7fe      	b.n	80022ce <L6474_ErrorHandler+0x1e>
}
 80022d0:	3708      	adds	r7, #8
 80022d2:	46bd      	mov	sp, r7
 80022d4:	bd80      	pop	{r7, pc}
 80022d6:	bf00      	nop
 80022d8:	200003cc 	.word	0x200003cc

080022dc <L6474_FlagInterruptHandler>:
/******************************************************//**
 * @brief  Handlers of the flag interrupt which calls the user callback (if defined)
 * @retval None
 **********************************************************/
void L6474_FlagInterruptHandler(void)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	af00      	add	r7, sp, #0
  if (flagInterruptCallback != 0)
 80022e0:	4b07      	ldr	r3, [pc, #28]	; (8002300 <L6474_FlagInterruptHandler+0x24>)
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d008      	beq.n	80022fa <L6474_FlagInterruptHandler+0x1e>
  {
    /* Set isr flag */
    isrFlag = TRUE;
 80022e8:	4b06      	ldr	r3, [pc, #24]	; (8002304 <L6474_FlagInterruptHandler+0x28>)
 80022ea:	2201      	movs	r2, #1
 80022ec:	701a      	strb	r2, [r3, #0]
    
    flagInterruptCallback();
 80022ee:	4b04      	ldr	r3, [pc, #16]	; (8002300 <L6474_FlagInterruptHandler+0x24>)
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	4798      	blx	r3
    
    /* Reset isr flag */
    isrFlag = FALSE;   
 80022f4:	4b03      	ldr	r3, [pc, #12]	; (8002304 <L6474_FlagInterruptHandler+0x28>)
 80022f6:	2200      	movs	r2, #0
 80022f8:	701a      	strb	r2, [r3, #0]
  }
}
 80022fa:	bf00      	nop
 80022fc:	bd80      	pop	{r7, pc}
 80022fe:	bf00      	nop
 8002300:	200003c8 	.word	0x200003c8
 8002304:	200003ed 	.word	0x200003ed

08002308 <L6474_SendCommand>:
 * @param[in] deviceId (from 0 to 2)
 * @param[in] param Command to send 
 * @retval None
 **********************************************************/
void L6474_SendCommand(uint8_t deviceId, uint8_t param)
{
 8002308:	b580      	push	{r7, lr}
 800230a:	b084      	sub	sp, #16
 800230c:	af00      	add	r7, sp, #0
 800230e:	4603      	mov	r3, r0
 8002310:	460a      	mov	r2, r1
 8002312:	71fb      	strb	r3, [r7, #7]
 8002314:	4613      	mov	r3, r2
 8002316:	71bb      	strb	r3, [r7, #6]
  uint32_t i;
  uint8_t spiIndex = numberOfDevices - deviceId - 1;
 8002318:	4b1f      	ldr	r3, [pc, #124]	; (8002398 <L6474_SendCommand+0x90>)
 800231a:	781b      	ldrb	r3, [r3, #0]
 800231c:	b2da      	uxtb	r2, r3
 800231e:	79fb      	ldrb	r3, [r7, #7]
 8002320:	1ad3      	subs	r3, r2, r3
 8002322:	b2db      	uxtb	r3, r3
 8002324:	3b01      	subs	r3, #1
 8002326:	72bb      	strb	r3, [r7, #10]
  bool itDisable = FALSE;  
 8002328:	2300      	movs	r3, #0
 800232a:	72fb      	strb	r3, [r7, #11]
  
  do
  {
    spiPreemtionByIsr = FALSE;
 800232c:	4b1b      	ldr	r3, [pc, #108]	; (800239c <L6474_SendCommand+0x94>)
 800232e:	2200      	movs	r2, #0
 8002330:	701a      	strb	r2, [r3, #0]
    if (itDisable)
 8002332:	7afb      	ldrb	r3, [r7, #11]
 8002334:	2b00      	cmp	r3, #0
 8002336:	d003      	beq.n	8002340 <L6474_SendCommand+0x38>
    {
      /* re-enable L6474_Board_EnableIrq if disable in previous iteration */
      L6474_Board_EnableIrq();
 8002338:	f001 fee6 	bl	8004108 <L6474_Board_EnableIrq>
      itDisable = FALSE;
 800233c:	2300      	movs	r3, #0
 800233e:	72fb      	strb	r3, [r7, #11]
    }
  
    for (i = 0; i < numberOfDevices; i++)
 8002340:	2300      	movs	r3, #0
 8002342:	60fb      	str	r3, [r7, #12]
 8002344:	e008      	b.n	8002358 <L6474_SendCommand+0x50>
    {
      spiTxBursts[3][i] = L6474_NOP;     
 8002346:	4a16      	ldr	r2, [pc, #88]	; (80023a0 <L6474_SendCommand+0x98>)
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	4413      	add	r3, r2
 800234c:	3309      	adds	r3, #9
 800234e:	2200      	movs	r2, #0
 8002350:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < numberOfDevices; i++)
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	3301      	adds	r3, #1
 8002356:	60fb      	str	r3, [r7, #12]
 8002358:	4b0f      	ldr	r3, [pc, #60]	; (8002398 <L6474_SendCommand+0x90>)
 800235a:	781b      	ldrb	r3, [r3, #0]
 800235c:	b2db      	uxtb	r3, r3
 800235e:	461a      	mov	r2, r3
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	4293      	cmp	r3, r2
 8002364:	d3ef      	bcc.n	8002346 <L6474_SendCommand+0x3e>
    }
    spiTxBursts[3][spiIndex] = param;
 8002366:	7abb      	ldrb	r3, [r7, #10]
 8002368:	4a0d      	ldr	r2, [pc, #52]	; (80023a0 <L6474_SendCommand+0x98>)
 800236a:	4413      	add	r3, r2
 800236c:	79ba      	ldrb	r2, [r7, #6]
 800236e:	725a      	strb	r2, [r3, #9]
    
    /* Disable interruption before checking */
    /* pre-emption by ISR and SPI transfers*/
    L6474_Board_DisableIrq();
 8002370:	f001 fec1 	bl	80040f6 <L6474_Board_DisableIrq>
    itDisable = TRUE;
 8002374:	2301      	movs	r3, #1
 8002376:	72fb      	strb	r3, [r7, #11]
  } while (spiPreemtionByIsr); // check pre-emption by ISR
 8002378:	4b08      	ldr	r3, [pc, #32]	; (800239c <L6474_SendCommand+0x94>)
 800237a:	781b      	ldrb	r3, [r3, #0]
 800237c:	b2db      	uxtb	r3, r3
 800237e:	2b00      	cmp	r3, #0
 8002380:	d1d4      	bne.n	800232c <L6474_SendCommand+0x24>

  L6474_WriteBytes(&spiTxBursts[3][0], &spiRxBursts[3][0]); 
 8002382:	4908      	ldr	r1, [pc, #32]	; (80023a4 <L6474_SendCommand+0x9c>)
 8002384:	4808      	ldr	r0, [pc, #32]	; (80023a8 <L6474_SendCommand+0xa0>)
 8002386:	f000 fe61 	bl	800304c <L6474_WriteBytes>
  
  /* re-enable L6474_Board_EnableIrq after SPI transfers*/
  L6474_Board_EnableIrq();
 800238a:	f001 febd 	bl	8004108 <L6474_Board_EnableIrq>
}
 800238e:	bf00      	nop
 8002390:	3710      	adds	r7, #16
 8002392:	46bd      	mov	sp, r7
 8002394:	bd80      	pop	{r7, pc}
 8002396:	bf00      	nop
 8002398:	200003d0 	.word	0x200003d0
 800239c:	200003ec 	.word	0x200003ec
 80023a0:	200003d4 	.word	0x200003d4
 80023a4:	200003e9 	.word	0x200003e9
 80023a8:	200003dd 	.word	0x200003dd

080023ac <L6474_SetDeviceParamsToGivenValues>:
 * @param[in] deviceId (from 0 to 2)
 * @param pInitPrm pointer to a structure containing the initial device parameters 
 * @retval None
 **********************************************************/
void L6474_SetDeviceParamsToGivenValues(uint8_t deviceId, L6474_Init_t *pInitPrm)
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	b082      	sub	sp, #8
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	4603      	mov	r3, r0
 80023b4:	6039      	str	r1, [r7, #0]
 80023b6:	71fb      	strb	r3, [r7, #7]
  devicePrm[deviceId].acceleration = pInitPrm->acceleration_step_s2;
 80023b8:	79fa      	ldrb	r2, [r7, #7]
 80023ba:	683b      	ldr	r3, [r7, #0]
 80023bc:	8818      	ldrh	r0, [r3, #0]
 80023be:	494c      	ldr	r1, [pc, #304]	; (80024f0 <L6474_SetDeviceParamsToGivenValues+0x144>)
 80023c0:	4613      	mov	r3, r2
 80023c2:	009b      	lsls	r3, r3, #2
 80023c4:	4413      	add	r3, r2
 80023c6:	00db      	lsls	r3, r3, #3
 80023c8:	440b      	add	r3, r1
 80023ca:	3318      	adds	r3, #24
 80023cc:	4602      	mov	r2, r0
 80023ce:	801a      	strh	r2, [r3, #0]
  devicePrm[deviceId].deceleration = pInitPrm->deceleration_step_s2;
 80023d0:	79fa      	ldrb	r2, [r7, #7]
 80023d2:	683b      	ldr	r3, [r7, #0]
 80023d4:	8858      	ldrh	r0, [r3, #2]
 80023d6:	4946      	ldr	r1, [pc, #280]	; (80024f0 <L6474_SetDeviceParamsToGivenValues+0x144>)
 80023d8:	4613      	mov	r3, r2
 80023da:	009b      	lsls	r3, r3, #2
 80023dc:	4413      	add	r3, r2
 80023de:	00db      	lsls	r3, r3, #3
 80023e0:	440b      	add	r3, r1
 80023e2:	331a      	adds	r3, #26
 80023e4:	4602      	mov	r2, r0
 80023e6:	801a      	strh	r2, [r3, #0]
  devicePrm[deviceId].maxSpeed = pInitPrm->maximum_speed_step_s;
 80023e8:	79fa      	ldrb	r2, [r7, #7]
 80023ea:	683b      	ldr	r3, [r7, #0]
 80023ec:	8898      	ldrh	r0, [r3, #4]
 80023ee:	4940      	ldr	r1, [pc, #256]	; (80024f0 <L6474_SetDeviceParamsToGivenValues+0x144>)
 80023f0:	4613      	mov	r3, r2
 80023f2:	009b      	lsls	r3, r3, #2
 80023f4:	4413      	add	r3, r2
 80023f6:	00db      	lsls	r3, r3, #3
 80023f8:	440b      	add	r3, r1
 80023fa:	331c      	adds	r3, #28
 80023fc:	4602      	mov	r2, r0
 80023fe:	801a      	strh	r2, [r3, #0]
  devicePrm[deviceId].minSpeed = pInitPrm->minimum_speed_step_s;
 8002400:	79fa      	ldrb	r2, [r7, #7]
 8002402:	683b      	ldr	r3, [r7, #0]
 8002404:	88d8      	ldrh	r0, [r3, #6]
 8002406:	493a      	ldr	r1, [pc, #232]	; (80024f0 <L6474_SetDeviceParamsToGivenValues+0x144>)
 8002408:	4613      	mov	r3, r2
 800240a:	009b      	lsls	r3, r3, #2
 800240c:	4413      	add	r3, r2
 800240e:	00db      	lsls	r3, r3, #3
 8002410:	440b      	add	r3, r1
 8002412:	331e      	adds	r3, #30
 8002414:	4602      	mov	r2, r0
 8002416:	801a      	strh	r2, [r3, #0]
  
  devicePrm[deviceId].accu = 0;
 8002418:	79fa      	ldrb	r2, [r7, #7]
 800241a:	4935      	ldr	r1, [pc, #212]	; (80024f0 <L6474_SetDeviceParamsToGivenValues+0x144>)
 800241c:	4613      	mov	r3, r2
 800241e:	009b      	lsls	r3, r3, #2
 8002420:	4413      	add	r3, r2
 8002422:	00db      	lsls	r3, r3, #3
 8002424:	440b      	add	r3, r1
 8002426:	2200      	movs	r2, #0
 8002428:	601a      	str	r2, [r3, #0]
  devicePrm[deviceId].currentPosition = 0;
 800242a:	79fa      	ldrb	r2, [r7, #7]
 800242c:	4930      	ldr	r1, [pc, #192]	; (80024f0 <L6474_SetDeviceParamsToGivenValues+0x144>)
 800242e:	4613      	mov	r3, r2
 8002430:	009b      	lsls	r3, r3, #2
 8002432:	4413      	add	r3, r2
 8002434:	00db      	lsls	r3, r3, #3
 8002436:	440b      	add	r3, r1
 8002438:	3304      	adds	r3, #4
 800243a:	2200      	movs	r2, #0
 800243c:	601a      	str	r2, [r3, #0]
  devicePrm[deviceId].endAccPos = 0;
 800243e:	79fa      	ldrb	r2, [r7, #7]
 8002440:	492b      	ldr	r1, [pc, #172]	; (80024f0 <L6474_SetDeviceParamsToGivenValues+0x144>)
 8002442:	4613      	mov	r3, r2
 8002444:	009b      	lsls	r3, r3, #2
 8002446:	4413      	add	r3, r2
 8002448:	00db      	lsls	r3, r3, #3
 800244a:	440b      	add	r3, r1
 800244c:	3308      	adds	r3, #8
 800244e:	2200      	movs	r2, #0
 8002450:	601a      	str	r2, [r3, #0]
  devicePrm[deviceId].relativePos = 0;
 8002452:	79fa      	ldrb	r2, [r7, #7]
 8002454:	4926      	ldr	r1, [pc, #152]	; (80024f0 <L6474_SetDeviceParamsToGivenValues+0x144>)
 8002456:	4613      	mov	r3, r2
 8002458:	009b      	lsls	r3, r3, #2
 800245a:	4413      	add	r3, r2
 800245c:	00db      	lsls	r3, r3, #3
 800245e:	440b      	add	r3, r1
 8002460:	330c      	adds	r3, #12
 8002462:	2200      	movs	r2, #0
 8002464:	601a      	str	r2, [r3, #0]
  devicePrm[deviceId].startDecPos = 0;
 8002466:	79fa      	ldrb	r2, [r7, #7]
 8002468:	4921      	ldr	r1, [pc, #132]	; (80024f0 <L6474_SetDeviceParamsToGivenValues+0x144>)
 800246a:	4613      	mov	r3, r2
 800246c:	009b      	lsls	r3, r3, #2
 800246e:	4413      	add	r3, r2
 8002470:	00db      	lsls	r3, r3, #3
 8002472:	440b      	add	r3, r1
 8002474:	3310      	adds	r3, #16
 8002476:	2200      	movs	r2, #0
 8002478:	601a      	str	r2, [r3, #0]
  devicePrm[deviceId].stepsToTake = 0;
 800247a:	79fa      	ldrb	r2, [r7, #7]
 800247c:	491c      	ldr	r1, [pc, #112]	; (80024f0 <L6474_SetDeviceParamsToGivenValues+0x144>)
 800247e:	4613      	mov	r3, r2
 8002480:	009b      	lsls	r3, r3, #2
 8002482:	4413      	add	r3, r2
 8002484:	00db      	lsls	r3, r3, #3
 8002486:	440b      	add	r3, r1
 8002488:	3314      	adds	r3, #20
 800248a:	2200      	movs	r2, #0
 800248c:	601a      	str	r2, [r3, #0]
  devicePrm[deviceId].speed = 0;
 800248e:	79fa      	ldrb	r2, [r7, #7]
 8002490:	4917      	ldr	r1, [pc, #92]	; (80024f0 <L6474_SetDeviceParamsToGivenValues+0x144>)
 8002492:	4613      	mov	r3, r2
 8002494:	009b      	lsls	r3, r3, #2
 8002496:	4413      	add	r3, r2
 8002498:	00db      	lsls	r3, r3, #3
 800249a:	440b      	add	r3, r1
 800249c:	3320      	adds	r3, #32
 800249e:	2200      	movs	r2, #0
 80024a0:	801a      	strh	r2, [r3, #0]
  devicePrm[deviceId].commandExecuted = NO_CMD;
 80024a2:	79fa      	ldrb	r2, [r7, #7]
 80024a4:	4912      	ldr	r1, [pc, #72]	; (80024f0 <L6474_SetDeviceParamsToGivenValues+0x144>)
 80024a6:	4613      	mov	r3, r2
 80024a8:	009b      	lsls	r3, r3, #2
 80024aa:	4413      	add	r3, r2
 80024ac:	00db      	lsls	r3, r3, #3
 80024ae:	440b      	add	r3, r1
 80024b0:	3322      	adds	r3, #34	; 0x22
 80024b2:	2203      	movs	r2, #3
 80024b4:	701a      	strb	r2, [r3, #0]
  devicePrm[deviceId].direction = FORWARD;
 80024b6:	79fa      	ldrb	r2, [r7, #7]
 80024b8:	490d      	ldr	r1, [pc, #52]	; (80024f0 <L6474_SetDeviceParamsToGivenValues+0x144>)
 80024ba:	4613      	mov	r3, r2
 80024bc:	009b      	lsls	r3, r3, #2
 80024be:	4413      	add	r3, r2
 80024c0:	00db      	lsls	r3, r3, #3
 80024c2:	440b      	add	r3, r1
 80024c4:	3323      	adds	r3, #35	; 0x23
 80024c6:	2201      	movs	r2, #1
 80024c8:	701a      	strb	r2, [r3, #0]
  devicePrm[deviceId].motionState = INACTIVE;  
 80024ca:	79fa      	ldrb	r2, [r7, #7]
 80024cc:	4908      	ldr	r1, [pc, #32]	; (80024f0 <L6474_SetDeviceParamsToGivenValues+0x144>)
 80024ce:	4613      	mov	r3, r2
 80024d0:	009b      	lsls	r3, r3, #2
 80024d2:	4413      	add	r3, r2
 80024d4:	00db      	lsls	r3, r3, #3
 80024d6:	440b      	add	r3, r1
 80024d8:	3324      	adds	r3, #36	; 0x24
 80024da:	2208      	movs	r2, #8
 80024dc:	701a      	strb	r2, [r3, #0]
 
  L6474_SetRegisterToGivenValues(deviceId, pInitPrm);
 80024de:	79fb      	ldrb	r3, [r7, #7]
 80024e0:	6839      	ldr	r1, [r7, #0]
 80024e2:	4618      	mov	r0, r3
 80024e4:	f000 f8a2 	bl	800262c <L6474_SetRegisterToGivenValues>
}
 80024e8:	bf00      	nop
 80024ea:	3708      	adds	r7, #8
 80024ec:	46bd      	mov	sp, r7
 80024ee:	bd80      	pop	{r7, pc}
 80024f0:	200003f0 	.word	0x200003f0

080024f4 <L6474_SetDeviceParamsToPredefinedValues>:
 * from l6474_target_config.h
 * @param[in] deviceId (from 0 to 2)
 * @retval None
 **********************************************************/
void L6474_SetDeviceParamsToPredefinedValues(uint8_t deviceId)
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	b082      	sub	sp, #8
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	4603      	mov	r3, r0
 80024fc:	71fb      	strb	r3, [r7, #7]
  devicePrm[deviceId].acceleration = L6474_CONF_PARAM_ACC_DEVICE_0;
 80024fe:	79fa      	ldrb	r2, [r7, #7]
 8002500:	4949      	ldr	r1, [pc, #292]	; (8002628 <L6474_SetDeviceParamsToPredefinedValues+0x134>)
 8002502:	4613      	mov	r3, r2
 8002504:	009b      	lsls	r3, r3, #2
 8002506:	4413      	add	r3, r2
 8002508:	00db      	lsls	r3, r3, #3
 800250a:	440b      	add	r3, r1
 800250c:	3318      	adds	r3, #24
 800250e:	22a0      	movs	r2, #160	; 0xa0
 8002510:	801a      	strh	r2, [r3, #0]
  devicePrm[deviceId].deceleration = L6474_CONF_PARAM_DEC_DEVICE_0;
 8002512:	79fa      	ldrb	r2, [r7, #7]
 8002514:	4944      	ldr	r1, [pc, #272]	; (8002628 <L6474_SetDeviceParamsToPredefinedValues+0x134>)
 8002516:	4613      	mov	r3, r2
 8002518:	009b      	lsls	r3, r3, #2
 800251a:	4413      	add	r3, r2
 800251c:	00db      	lsls	r3, r3, #3
 800251e:	440b      	add	r3, r1
 8002520:	331a      	adds	r3, #26
 8002522:	22a0      	movs	r2, #160	; 0xa0
 8002524:	801a      	strh	r2, [r3, #0]
  devicePrm[deviceId].maxSpeed = L6474_CONF_PARAM_MAX_SPEED_DEVICE_0;
 8002526:	79fa      	ldrb	r2, [r7, #7]
 8002528:	493f      	ldr	r1, [pc, #252]	; (8002628 <L6474_SetDeviceParamsToPredefinedValues+0x134>)
 800252a:	4613      	mov	r3, r2
 800252c:	009b      	lsls	r3, r3, #2
 800252e:	4413      	add	r3, r2
 8002530:	00db      	lsls	r3, r3, #3
 8002532:	440b      	add	r3, r1
 8002534:	331c      	adds	r3, #28
 8002536:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800253a:	801a      	strh	r2, [r3, #0]
  devicePrm[deviceId].minSpeed = L6474_CONF_PARAM_MIN_SPEED_DEVICE_0;
 800253c:	79fa      	ldrb	r2, [r7, #7]
 800253e:	493a      	ldr	r1, [pc, #232]	; (8002628 <L6474_SetDeviceParamsToPredefinedValues+0x134>)
 8002540:	4613      	mov	r3, r2
 8002542:	009b      	lsls	r3, r3, #2
 8002544:	4413      	add	r3, r2
 8002546:	00db      	lsls	r3, r3, #3
 8002548:	440b      	add	r3, r1
 800254a:	331e      	adds	r3, #30
 800254c:	f44f 7248 	mov.w	r2, #800	; 0x320
 8002550:	801a      	strh	r2, [r3, #0]
  
  devicePrm[deviceId].accu = 0;
 8002552:	79fa      	ldrb	r2, [r7, #7]
 8002554:	4934      	ldr	r1, [pc, #208]	; (8002628 <L6474_SetDeviceParamsToPredefinedValues+0x134>)
 8002556:	4613      	mov	r3, r2
 8002558:	009b      	lsls	r3, r3, #2
 800255a:	4413      	add	r3, r2
 800255c:	00db      	lsls	r3, r3, #3
 800255e:	440b      	add	r3, r1
 8002560:	2200      	movs	r2, #0
 8002562:	601a      	str	r2, [r3, #0]
  devicePrm[deviceId].currentPosition = 0;
 8002564:	79fa      	ldrb	r2, [r7, #7]
 8002566:	4930      	ldr	r1, [pc, #192]	; (8002628 <L6474_SetDeviceParamsToPredefinedValues+0x134>)
 8002568:	4613      	mov	r3, r2
 800256a:	009b      	lsls	r3, r3, #2
 800256c:	4413      	add	r3, r2
 800256e:	00db      	lsls	r3, r3, #3
 8002570:	440b      	add	r3, r1
 8002572:	3304      	adds	r3, #4
 8002574:	2200      	movs	r2, #0
 8002576:	601a      	str	r2, [r3, #0]
  devicePrm[deviceId].endAccPos = 0;
 8002578:	79fa      	ldrb	r2, [r7, #7]
 800257a:	492b      	ldr	r1, [pc, #172]	; (8002628 <L6474_SetDeviceParamsToPredefinedValues+0x134>)
 800257c:	4613      	mov	r3, r2
 800257e:	009b      	lsls	r3, r3, #2
 8002580:	4413      	add	r3, r2
 8002582:	00db      	lsls	r3, r3, #3
 8002584:	440b      	add	r3, r1
 8002586:	3308      	adds	r3, #8
 8002588:	2200      	movs	r2, #0
 800258a:	601a      	str	r2, [r3, #0]
  devicePrm[deviceId].relativePos = 0;
 800258c:	79fa      	ldrb	r2, [r7, #7]
 800258e:	4926      	ldr	r1, [pc, #152]	; (8002628 <L6474_SetDeviceParamsToPredefinedValues+0x134>)
 8002590:	4613      	mov	r3, r2
 8002592:	009b      	lsls	r3, r3, #2
 8002594:	4413      	add	r3, r2
 8002596:	00db      	lsls	r3, r3, #3
 8002598:	440b      	add	r3, r1
 800259a:	330c      	adds	r3, #12
 800259c:	2200      	movs	r2, #0
 800259e:	601a      	str	r2, [r3, #0]
  devicePrm[deviceId].startDecPos = 0;
 80025a0:	79fa      	ldrb	r2, [r7, #7]
 80025a2:	4921      	ldr	r1, [pc, #132]	; (8002628 <L6474_SetDeviceParamsToPredefinedValues+0x134>)
 80025a4:	4613      	mov	r3, r2
 80025a6:	009b      	lsls	r3, r3, #2
 80025a8:	4413      	add	r3, r2
 80025aa:	00db      	lsls	r3, r3, #3
 80025ac:	440b      	add	r3, r1
 80025ae:	3310      	adds	r3, #16
 80025b0:	2200      	movs	r2, #0
 80025b2:	601a      	str	r2, [r3, #0]
  devicePrm[deviceId].stepsToTake = 0;
 80025b4:	79fa      	ldrb	r2, [r7, #7]
 80025b6:	491c      	ldr	r1, [pc, #112]	; (8002628 <L6474_SetDeviceParamsToPredefinedValues+0x134>)
 80025b8:	4613      	mov	r3, r2
 80025ba:	009b      	lsls	r3, r3, #2
 80025bc:	4413      	add	r3, r2
 80025be:	00db      	lsls	r3, r3, #3
 80025c0:	440b      	add	r3, r1
 80025c2:	3314      	adds	r3, #20
 80025c4:	2200      	movs	r2, #0
 80025c6:	601a      	str	r2, [r3, #0]
  devicePrm[deviceId].speed = 0;
 80025c8:	79fa      	ldrb	r2, [r7, #7]
 80025ca:	4917      	ldr	r1, [pc, #92]	; (8002628 <L6474_SetDeviceParamsToPredefinedValues+0x134>)
 80025cc:	4613      	mov	r3, r2
 80025ce:	009b      	lsls	r3, r3, #2
 80025d0:	4413      	add	r3, r2
 80025d2:	00db      	lsls	r3, r3, #3
 80025d4:	440b      	add	r3, r1
 80025d6:	3320      	adds	r3, #32
 80025d8:	2200      	movs	r2, #0
 80025da:	801a      	strh	r2, [r3, #0]
  devicePrm[deviceId].commandExecuted = NO_CMD;
 80025dc:	79fa      	ldrb	r2, [r7, #7]
 80025de:	4912      	ldr	r1, [pc, #72]	; (8002628 <L6474_SetDeviceParamsToPredefinedValues+0x134>)
 80025e0:	4613      	mov	r3, r2
 80025e2:	009b      	lsls	r3, r3, #2
 80025e4:	4413      	add	r3, r2
 80025e6:	00db      	lsls	r3, r3, #3
 80025e8:	440b      	add	r3, r1
 80025ea:	3322      	adds	r3, #34	; 0x22
 80025ec:	2203      	movs	r2, #3
 80025ee:	701a      	strb	r2, [r3, #0]
  devicePrm[deviceId].direction = FORWARD;
 80025f0:	79fa      	ldrb	r2, [r7, #7]
 80025f2:	490d      	ldr	r1, [pc, #52]	; (8002628 <L6474_SetDeviceParamsToPredefinedValues+0x134>)
 80025f4:	4613      	mov	r3, r2
 80025f6:	009b      	lsls	r3, r3, #2
 80025f8:	4413      	add	r3, r2
 80025fa:	00db      	lsls	r3, r3, #3
 80025fc:	440b      	add	r3, r1
 80025fe:	3323      	adds	r3, #35	; 0x23
 8002600:	2201      	movs	r2, #1
 8002602:	701a      	strb	r2, [r3, #0]
  devicePrm[deviceId].motionState = INACTIVE;
 8002604:	79fa      	ldrb	r2, [r7, #7]
 8002606:	4908      	ldr	r1, [pc, #32]	; (8002628 <L6474_SetDeviceParamsToPredefinedValues+0x134>)
 8002608:	4613      	mov	r3, r2
 800260a:	009b      	lsls	r3, r3, #2
 800260c:	4413      	add	r3, r2
 800260e:	00db      	lsls	r3, r3, #3
 8002610:	440b      	add	r3, r1
 8002612:	3324      	adds	r3, #36	; 0x24
 8002614:	2208      	movs	r2, #8
 8002616:	701a      	strb	r2, [r3, #0]
  
  L6474_SetRegisterToPredefinedValues(deviceId);
 8002618:	79fb      	ldrb	r3, [r7, #7]
 800261a:	4618      	mov	r0, r3
 800261c:	f000 f882 	bl	8002724 <L6474_SetRegisterToPredefinedValues>

}
 8002620:	bf00      	nop
 8002622:	3708      	adds	r7, #8
 8002624:	46bd      	mov	sp, r7
 8002626:	bd80      	pop	{r7, pc}
 8002628:	200003f0 	.word	0x200003f0

0800262c <L6474_SetRegisterToGivenValues>:
 * @param[in] deviceId (from 0 to 2)
 * @param pInitPrm pointer to a structure containing the initial device parameters 
 * @retval None
 **********************************************************/
void L6474_SetRegisterToGivenValues(uint8_t deviceId, L6474_Init_t *pInitPrm)
{
 800262c:	b580      	push	{r7, lr}
 800262e:	b082      	sub	sp, #8
 8002630:	af00      	add	r7, sp, #0
 8002632:	4603      	mov	r3, r0
 8002634:	6039      	str	r1, [r7, #0]
 8002636:	71fb      	strb	r3, [r7, #7]
  L6474_CmdSetParam(deviceId,
 8002638:	79fb      	ldrb	r3, [r7, #7]
 800263a:	2200      	movs	r2, #0
 800263c:	2101      	movs	r1, #1
 800263e:	4618      	mov	r0, r3
 8002640:	f7fe fd6e 	bl	8001120 <L6474_CmdSetParam>
                    L6474_ABS_POS,
                    0);
  L6474_CmdSetParam(deviceId,
 8002644:	79fb      	ldrb	r3, [r7, #7]
 8002646:	2200      	movs	r2, #0
 8002648:	2102      	movs	r1, #2
 800264a:	4618      	mov	r0, r3
 800264c:	f7fe fd68 	bl	8001120 <L6474_CmdSetParam>
                    L6474_EL_POS,
                    0);
  L6474_CmdSetParam(deviceId,
 8002650:	79fb      	ldrb	r3, [r7, #7]
 8002652:	2200      	movs	r2, #0
 8002654:	2103      	movs	r1, #3
 8002656:	4618      	mov	r0, r3
 8002658:	f7fe fd62 	bl	8001120 <L6474_CmdSetParam>
                    L6474_MARK,
                    0);
  L6474_SetAnalogValue(deviceId,
 800265c:	683b      	ldr	r3, [r7, #0]
 800265e:	edd3 7a02 	vldr	s15, [r3, #8]
 8002662:	79fb      	ldrb	r3, [r7, #7]
 8002664:	eeb0 0a67 	vmov.f32	s0, s15
 8002668:	2109      	movs	r1, #9
 800266a:	4618      	mov	r0, r3
 800266c:	f7ff fa62 	bl	8001b34 <L6474_SetAnalogValue>
                       L6474_TVAL,
                       pInitPrm->torque_regulation_current_mA);
  L6474_CmdSetParam(deviceId,
                    L6474_T_FAST,
                    (uint8_t) pInitPrm->maximum_fast_decay_time |
 8002670:	683b      	ldr	r3, [r7, #0]
 8002672:	7d5a      	ldrb	r2, [r3, #21]
                    (uint8_t) pInitPrm->fall_time);
 8002674:	683b      	ldr	r3, [r7, #0]
 8002676:	7d1b      	ldrb	r3, [r3, #20]
  L6474_CmdSetParam(deviceId,
 8002678:	4313      	orrs	r3, r2
 800267a:	b2db      	uxtb	r3, r3
 800267c:	461a      	mov	r2, r3
 800267e:	79fb      	ldrb	r3, [r7, #7]
 8002680:	210e      	movs	r1, #14
 8002682:	4618      	mov	r0, r3
 8002684:	f7fe fd4c 	bl	8001120 <L6474_CmdSetParam>
  L6474_SetAnalogValue(deviceId,
 8002688:	683b      	ldr	r3, [r7, #0]
 800268a:	edd3 7a06 	vldr	s15, [r3, #24]
 800268e:	79fb      	ldrb	r3, [r7, #7]
 8002690:	eeb0 0a67 	vmov.f32	s0, s15
 8002694:	210f      	movs	r1, #15
 8002696:	4618      	mov	r0, r3
 8002698:	f7ff fa4c 	bl	8001b34 <L6474_SetAnalogValue>
                       L6474_TON_MIN,
                       pInitPrm->minimum_ON_time_us);
  L6474_SetAnalogValue(deviceId,
 800269c:	683b      	ldr	r3, [r7, #0]
 800269e:	edd3 7a07 	vldr	s15, [r3, #28]
 80026a2:	79fb      	ldrb	r3, [r7, #7]
 80026a4:	eeb0 0a67 	vmov.f32	s0, s15
 80026a8:	2110      	movs	r1, #16
 80026aa:	4618      	mov	r0, r3
 80026ac:	f7ff fa42 	bl	8001b34 <L6474_SetAnalogValue>
                       L6474_TOFF_MIN,
                       pInitPrm->minimum_OFF_time_us);
  L6474_SetAnalogValue(deviceId,
 80026b0:	683b      	ldr	r3, [r7, #0]
 80026b2:	edd3 7a03 	vldr	s15, [r3, #12]
 80026b6:	79fb      	ldrb	r3, [r7, #7]
 80026b8:	eeb0 0a67 	vmov.f32	s0, s15
 80026bc:	2113      	movs	r1, #19
 80026be:	4618      	mov	r0, r3
 80026c0:	f7ff fa38 	bl	8001b34 <L6474_SetAnalogValue>
                       L6474_OCD_TH,
                       pInitPrm->overcurrent_threshold);
  L6474_CmdSetParam(deviceId,
                  L6474_STEP_MODE,
                  (uint8_t) pInitPrm->step_selection |
 80026c4:	683b      	ldr	r3, [r7, #0]
 80026c6:	7c9a      	ldrb	r2, [r3, #18]
                  (uint8_t) pInitPrm->sync_selection);
 80026c8:	683b      	ldr	r3, [r7, #0]
 80026ca:	7cdb      	ldrb	r3, [r3, #19]
  L6474_CmdSetParam(deviceId,
 80026cc:	4313      	orrs	r3, r2
 80026ce:	b2db      	uxtb	r3, r3
 80026d0:	461a      	mov	r2, r3
 80026d2:	79fb      	ldrb	r3, [r7, #7]
 80026d4:	2116      	movs	r1, #22
 80026d6:	4618      	mov	r0, r3
 80026d8:	f7fe fd22 	bl	8001120 <L6474_CmdSetParam>
  L6474_CmdSetParam(deviceId,
 80026dc:	683b      	ldr	r3, [r7, #0]
 80026de:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80026e0:	79fb      	ldrb	r3, [r7, #7]
 80026e2:	2117      	movs	r1, #23
 80026e4:	4618      	mov	r0, r3
 80026e6:	f7fe fd1b 	bl	8001120 <L6474_CmdSetParam>
                    L6474_ALARM_EN,
                    pInitPrm->alarm);
  L6474_CmdSetParam(deviceId,
                    L6474_CONFIG,
                    (uint16_t) pInitPrm->clock |
 80026ea:	683b      	ldr	r3, [r7, #0]
 80026ec:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
                    (uint16_t) pInitPrm->torque_regulation_method |
 80026f0:	683b      	ldr	r3, [r7, #0]
 80026f2:	7c5b      	ldrb	r3, [r3, #17]
 80026f4:	4313      	orrs	r3, r2
 80026f6:	b2da      	uxtb	r2, r3
                    (uint16_t) pInitPrm->overcurrent_shutwdown |
 80026f8:	683b      	ldr	r3, [r7, #0]
 80026fa:	7c1b      	ldrb	r3, [r3, #16]
                    (uint16_t) pInitPrm->torque_regulation_method |
 80026fc:	4313      	orrs	r3, r2
 80026fe:	b2db      	uxtb	r3, r3
 8002700:	461a      	mov	r2, r3
                    (uint16_t) pInitPrm->slew_rate |
 8002702:	683b      	ldr	r3, [r7, #0]
 8002704:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
                    (uint16_t) pInitPrm->overcurrent_shutwdown |
 8002706:	4313      	orrs	r3, r2
                    (uint16_t) pInitPrm->target_swicthing_period);
 8002708:	683a      	ldr	r2, [r7, #0]
 800270a:	8c12      	ldrh	r2, [r2, #32]
                    (uint16_t) pInitPrm->slew_rate |
 800270c:	4313      	orrs	r3, r2
  L6474_CmdSetParam(deviceId,
 800270e:	461a      	mov	r2, r3
 8002710:	79fb      	ldrb	r3, [r7, #7]
 8002712:	2118      	movs	r1, #24
 8002714:	4618      	mov	r0, r3
 8002716:	f7fe fd03 	bl	8001120 <L6474_CmdSetParam>
  
}
 800271a:	bf00      	nop
 800271c:	3708      	adds	r7, #8
 800271e:	46bd      	mov	sp, r7
 8002720:	bd80      	pop	{r7, pc}
	...

08002724 <L6474_SetRegisterToPredefinedValues>:
 * from l6474_target_config.h
 * @param[in] deviceId (from 0 to 2)
 * @retval None
 **********************************************************/
void L6474_SetRegisterToPredefinedValues(uint8_t deviceId)
{
 8002724:	b580      	push	{r7, lr}
 8002726:	b082      	sub	sp, #8
 8002728:	af00      	add	r7, sp, #0
 800272a:	4603      	mov	r3, r0
 800272c:	71fb      	strb	r3, [r7, #7]
  L6474_CmdSetParam(deviceId,
 800272e:	79fb      	ldrb	r3, [r7, #7]
 8002730:	2200      	movs	r2, #0
 8002732:	2101      	movs	r1, #1
 8002734:	4618      	mov	r0, r3
 8002736:	f7fe fcf3 	bl	8001120 <L6474_CmdSetParam>
                    L6474_ABS_POS,
                    0);
  L6474_CmdSetParam(deviceId,
 800273a:	79fb      	ldrb	r3, [r7, #7]
 800273c:	2200      	movs	r2, #0
 800273e:	2102      	movs	r1, #2
 8002740:	4618      	mov	r0, r3
 8002742:	f7fe fced 	bl	8001120 <L6474_CmdSetParam>
                    L6474_EL_POS,
                    0);
  L6474_CmdSetParam(deviceId,
 8002746:	79fb      	ldrb	r3, [r7, #7]
 8002748:	2200      	movs	r2, #0
 800274a:	2103      	movs	r1, #3
 800274c:	4618      	mov	r0, r3
 800274e:	f7fe fce7 	bl	8001120 <L6474_CmdSetParam>
                    L6474_MARK,
                    0);
  switch (deviceId)
 8002752:	79fb      	ldrb	r3, [r7, #7]
 8002754:	2b02      	cmp	r3, #2
 8002756:	f000 8094 	beq.w	8002882 <L6474_SetRegisterToPredefinedValues+0x15e>
 800275a:	2b02      	cmp	r3, #2
 800275c:	f300 80d7 	bgt.w	800290e <L6474_SetRegisterToPredefinedValues+0x1ea>
 8002760:	2b00      	cmp	r3, #0
 8002762:	d002      	beq.n	800276a <L6474_SetRegisterToPredefinedValues+0x46>
 8002764:	2b01      	cmp	r3, #1
 8002766:	d046      	beq.n	80027f6 <L6474_SetRegisterToPredefinedValues+0xd2>
#endif         
      break;
#endif      
    default: ;
  }
}
 8002768:	e0d1      	b.n	800290e <L6474_SetRegisterToPredefinedValues+0x1ea>
                        L6474_Tval_Current_to_Par(L6474_CONF_PARAM_TVAL_DEVICE_0));
 800276a:	ed9f 0a6b 	vldr	s0, [pc, #428]	; 8002918 <L6474_SetRegisterToPredefinedValues+0x1f4>
 800276e:	f000 fc2b 	bl	8002fc8 <L6474_Tval_Current_to_Par>
 8002772:	4603      	mov	r3, r0
      L6474_CmdSetParam(deviceId,
 8002774:	461a      	mov	r2, r3
 8002776:	79fb      	ldrb	r3, [r7, #7]
 8002778:	2109      	movs	r1, #9
 800277a:	4618      	mov	r0, r3
 800277c:	f7fe fcd0 	bl	8001120 <L6474_CmdSetParam>
      L6474_CmdSetParam(deviceId,
 8002780:	79fb      	ldrb	r3, [r7, #7]
 8002782:	2235      	movs	r2, #53	; 0x35
 8002784:	210e      	movs	r1, #14
 8002786:	4618      	mov	r0, r3
 8002788:	f7fe fcca 	bl	8001120 <L6474_CmdSetParam>
                              L6474_Tmin_Time_to_Par(L6474_CONF_PARAM_TON_MIN_DEVICE_0)
 800278c:	eeb0 0a08 	vmov.f32	s0, #8	; 0x40400000  3.0
 8002790:	f000 fc3e 	bl	8003010 <L6474_Tmin_Time_to_Par>
 8002794:	4603      	mov	r3, r0
      L6474_CmdSetParam(deviceId,
 8002796:	461a      	mov	r2, r3
 8002798:	79fb      	ldrb	r3, [r7, #7]
 800279a:	210f      	movs	r1, #15
 800279c:	4618      	mov	r0, r3
 800279e:	f7fe fcbf 	bl	8001120 <L6474_CmdSetParam>
                              L6474_Tmin_Time_to_Par(L6474_CONF_PARAM_TOFF_MIN_DEVICE_0));
 80027a2:	eeb3 0a05 	vmov.f32	s0, #53	; 0x41a80000  21.0
 80027a6:	f000 fc33 	bl	8003010 <L6474_Tmin_Time_to_Par>
 80027aa:	4603      	mov	r3, r0
      L6474_CmdSetParam(deviceId,
 80027ac:	461a      	mov	r2, r3
 80027ae:	79fb      	ldrb	r3, [r7, #7]
 80027b0:	2110      	movs	r1, #16
 80027b2:	4618      	mov	r0, r3
 80027b4:	f7fe fcb4 	bl	8001120 <L6474_CmdSetParam>
      L6474_CmdSetParam(deviceId,
 80027b8:	79fb      	ldrb	r3, [r7, #7]
 80027ba:	2201      	movs	r2, #1
 80027bc:	2113      	movs	r1, #19
 80027be:	4618      	mov	r0, r3
 80027c0:	f7fe fcae 	bl	8001120 <L6474_CmdSetParam>
      L6474_CmdSetParam(deviceId,
 80027c4:	79fb      	ldrb	r3, [r7, #7]
 80027c6:	228c      	movs	r2, #140	; 0x8c
 80027c8:	2116      	movs	r1, #22
 80027ca:	4618      	mov	r0, r3
 80027cc:	f7fe fca8 	bl	8001120 <L6474_CmdSetParam>
      L6474_CmdSetParam(deviceId,
 80027d0:	79fb      	ldrb	r3, [r7, #7]
 80027d2:	22cf      	movs	r2, #207	; 0xcf
 80027d4:	2117      	movs	r1, #23
 80027d6:	4618      	mov	r0, r3
 80027d8:	f7fe fca2 	bl	8001120 <L6474_CmdSetParam>
      L6474_CmdSetParam(deviceId,
 80027dc:	79fb      	ldrb	r3, [r7, #7]
 80027de:	f44f 5232 	mov.w	r2, #11392	; 0x2c80
 80027e2:	2118      	movs	r1, #24
 80027e4:	4618      	mov	r0, r3
 80027e6:	f7fe fc9b 	bl	8001120 <L6474_CmdSetParam>
      L6474_SetStopMode(deviceId, L6474_CONF_PARAM_AUTO_HIZ_STOP_DEVICE_0);
 80027ea:	79fb      	ldrb	r3, [r7, #7]
 80027ec:	2100      	movs	r1, #0
 80027ee:	4618      	mov	r0, r3
 80027f0:	f7ff fbec 	bl	8001fcc <L6474_SetStopMode>
      break;
 80027f4:	e08b      	b.n	800290e <L6474_SetRegisterToPredefinedValues+0x1ea>
                        L6474_Tval_Current_to_Par(L6474_CONF_PARAM_TVAL_DEVICE_1));
 80027f6:	ed9f 0a48 	vldr	s0, [pc, #288]	; 8002918 <L6474_SetRegisterToPredefinedValues+0x1f4>
 80027fa:	f000 fbe5 	bl	8002fc8 <L6474_Tval_Current_to_Par>
 80027fe:	4603      	mov	r3, r0
      L6474_CmdSetParam(deviceId,
 8002800:	461a      	mov	r2, r3
 8002802:	79fb      	ldrb	r3, [r7, #7]
 8002804:	2109      	movs	r1, #9
 8002806:	4618      	mov	r0, r3
 8002808:	f7fe fc8a 	bl	8001120 <L6474_CmdSetParam>
      L6474_CmdSetParam(deviceId,
 800280c:	79fb      	ldrb	r3, [r7, #7]
 800280e:	2235      	movs	r2, #53	; 0x35
 8002810:	210e      	movs	r1, #14
 8002812:	4618      	mov	r0, r3
 8002814:	f7fe fc84 	bl	8001120 <L6474_CmdSetParam>
                        L6474_Tmin_Time_to_Par(L6474_CONF_PARAM_TON_MIN_DEVICE_1));
 8002818:	eeb0 0a08 	vmov.f32	s0, #8	; 0x40400000  3.0
 800281c:	f000 fbf8 	bl	8003010 <L6474_Tmin_Time_to_Par>
 8002820:	4603      	mov	r3, r0
      L6474_CmdSetParam(deviceId,
 8002822:	461a      	mov	r2, r3
 8002824:	79fb      	ldrb	r3, [r7, #7]
 8002826:	210f      	movs	r1, #15
 8002828:	4618      	mov	r0, r3
 800282a:	f7fe fc79 	bl	8001120 <L6474_CmdSetParam>
                        L6474_Tmin_Time_to_Par(L6474_CONF_PARAM_TOFF_MIN_DEVICE_1));
 800282e:	eeb3 0a05 	vmov.f32	s0, #53	; 0x41a80000  21.0
 8002832:	f000 fbed 	bl	8003010 <L6474_Tmin_Time_to_Par>
 8002836:	4603      	mov	r3, r0
      L6474_CmdSetParam(deviceId,
 8002838:	461a      	mov	r2, r3
 800283a:	79fb      	ldrb	r3, [r7, #7]
 800283c:	2110      	movs	r1, #16
 800283e:	4618      	mov	r0, r3
 8002840:	f7fe fc6e 	bl	8001120 <L6474_CmdSetParam>
      L6474_CmdSetParam(deviceId,
 8002844:	79fb      	ldrb	r3, [r7, #7]
 8002846:	2201      	movs	r2, #1
 8002848:	2113      	movs	r1, #19
 800284a:	4618      	mov	r0, r3
 800284c:	f7fe fc68 	bl	8001120 <L6474_CmdSetParam>
      L6474_CmdSetParam(deviceId,
 8002850:	79fb      	ldrb	r3, [r7, #7]
 8002852:	228c      	movs	r2, #140	; 0x8c
 8002854:	2116      	movs	r1, #22
 8002856:	4618      	mov	r0, r3
 8002858:	f7fe fc62 	bl	8001120 <L6474_CmdSetParam>
      L6474_CmdSetParam(deviceId,
 800285c:	79fb      	ldrb	r3, [r7, #7]
 800285e:	22cf      	movs	r2, #207	; 0xcf
 8002860:	2117      	movs	r1, #23
 8002862:	4618      	mov	r0, r3
 8002864:	f7fe fc5c 	bl	8001120 <L6474_CmdSetParam>
      L6474_CmdSetParam(deviceId,
 8002868:	79fb      	ldrb	r3, [r7, #7]
 800286a:	f44f 5232 	mov.w	r2, #11392	; 0x2c80
 800286e:	2118      	movs	r1, #24
 8002870:	4618      	mov	r0, r3
 8002872:	f7fe fc55 	bl	8001120 <L6474_CmdSetParam>
      L6474_SetStopMode(deviceId, L6474_CONF_PARAM_AUTO_HIZ_STOP_DEVICE_1);
 8002876:	79fb      	ldrb	r3, [r7, #7]
 8002878:	2100      	movs	r1, #0
 800287a:	4618      	mov	r0, r3
 800287c:	f7ff fba6 	bl	8001fcc <L6474_SetStopMode>
      break;
 8002880:	e045      	b.n	800290e <L6474_SetRegisterToPredefinedValues+0x1ea>
                        L6474_Tval_Current_to_Par(L6474_CONF_PARAM_TVAL_DEVICE_2));
 8002882:	ed9f 0a25 	vldr	s0, [pc, #148]	; 8002918 <L6474_SetRegisterToPredefinedValues+0x1f4>
 8002886:	f000 fb9f 	bl	8002fc8 <L6474_Tval_Current_to_Par>
 800288a:	4603      	mov	r3, r0
      L6474_CmdSetParam(deviceId,
 800288c:	461a      	mov	r2, r3
 800288e:	79fb      	ldrb	r3, [r7, #7]
 8002890:	2109      	movs	r1, #9
 8002892:	4618      	mov	r0, r3
 8002894:	f7fe fc44 	bl	8001120 <L6474_CmdSetParam>
      L6474_CmdSetParam(deviceId,
 8002898:	79fb      	ldrb	r3, [r7, #7]
 800289a:	2235      	movs	r2, #53	; 0x35
 800289c:	210e      	movs	r1, #14
 800289e:	4618      	mov	r0, r3
 80028a0:	f7fe fc3e 	bl	8001120 <L6474_CmdSetParam>
                        L6474_Tmin_Time_to_Par(L6474_CONF_PARAM_TON_MIN_DEVICE_2));
 80028a4:	eeb0 0a08 	vmov.f32	s0, #8	; 0x40400000  3.0
 80028a8:	f000 fbb2 	bl	8003010 <L6474_Tmin_Time_to_Par>
 80028ac:	4603      	mov	r3, r0
      L6474_CmdSetParam(deviceId,
 80028ae:	461a      	mov	r2, r3
 80028b0:	79fb      	ldrb	r3, [r7, #7]
 80028b2:	210f      	movs	r1, #15
 80028b4:	4618      	mov	r0, r3
 80028b6:	f7fe fc33 	bl	8001120 <L6474_CmdSetParam>
                        L6474_Tmin_Time_to_Par(L6474_CONF_PARAM_TOFF_MIN_DEVICE_2));
 80028ba:	eeb3 0a05 	vmov.f32	s0, #53	; 0x41a80000  21.0
 80028be:	f000 fba7 	bl	8003010 <L6474_Tmin_Time_to_Par>
 80028c2:	4603      	mov	r3, r0
      L6474_CmdSetParam(deviceId,
 80028c4:	461a      	mov	r2, r3
 80028c6:	79fb      	ldrb	r3, [r7, #7]
 80028c8:	2110      	movs	r1, #16
 80028ca:	4618      	mov	r0, r3
 80028cc:	f7fe fc28 	bl	8001120 <L6474_CmdSetParam>
      L6474_CmdSetParam(deviceId,
 80028d0:	79fb      	ldrb	r3, [r7, #7]
 80028d2:	2201      	movs	r2, #1
 80028d4:	2113      	movs	r1, #19
 80028d6:	4618      	mov	r0, r3
 80028d8:	f7fe fc22 	bl	8001120 <L6474_CmdSetParam>
      L6474_CmdSetParam(deviceId,
 80028dc:	79fb      	ldrb	r3, [r7, #7]
 80028de:	228c      	movs	r2, #140	; 0x8c
 80028e0:	2116      	movs	r1, #22
 80028e2:	4618      	mov	r0, r3
 80028e4:	f7fe fc1c 	bl	8001120 <L6474_CmdSetParam>
      L6474_CmdSetParam(deviceId,
 80028e8:	79fb      	ldrb	r3, [r7, #7]
 80028ea:	22cf      	movs	r2, #207	; 0xcf
 80028ec:	2117      	movs	r1, #23
 80028ee:	4618      	mov	r0, r3
 80028f0:	f7fe fc16 	bl	8001120 <L6474_CmdSetParam>
      L6474_CmdSetParam(deviceId,
 80028f4:	79fb      	ldrb	r3, [r7, #7]
 80028f6:	f44f 5232 	mov.w	r2, #11392	; 0x2c80
 80028fa:	2118      	movs	r1, #24
 80028fc:	4618      	mov	r0, r3
 80028fe:	f7fe fc0f 	bl	8001120 <L6474_CmdSetParam>
      L6474_SetStopMode(deviceId, L6474_CONF_PARAM_AUTO_HIZ_STOP_DEVICE_2);
 8002902:	79fb      	ldrb	r3, [r7, #7]
 8002904:	2100      	movs	r1, #0
 8002906:	4618      	mov	r0, r3
 8002908:	f7ff fb60 	bl	8001fcc <L6474_SetStopMode>
      break;
 800290c:	bf00      	nop
}
 800290e:	bf00      	nop
 8002910:	3708      	adds	r7, #8
 8002912:	46bd      	mov	sp, r7
 8002914:	bd80      	pop	{r7, pc}
 8002916:	bf00      	nop
 8002918:	437a0000 	.word	0x437a0000

0800291c <L6474_StartMovement>:
 * and enable the power bridge
 * @param[in] deviceId (from 0 to 2)
 * @retval None
 **********************************************************/
void L6474_StartMovement(uint8_t deviceId)  
{
 800291c:	b580      	push	{r7, lr}
 800291e:	b082      	sub	sp, #8
 8002920:	af00      	add	r7, sp, #0
 8002922:	4603      	mov	r3, r0
 8002924:	71fb      	strb	r3, [r7, #7]
  /* Enable L6474 powerstage */
  L6474_CmdEnable(deviceId);
 8002926:	79fb      	ldrb	r3, [r7, #7]
 8002928:	4618      	mov	r0, r3
 800292a:	f7fe fa65 	bl	8000df8 <L6474_CmdEnable>
  if (devicePrm[deviceId].endAccPos != 0)
 800292e:	79fa      	ldrb	r2, [r7, #7]
 8002930:	4922      	ldr	r1, [pc, #136]	; (80029bc <L6474_StartMovement+0xa0>)
 8002932:	4613      	mov	r3, r2
 8002934:	009b      	lsls	r3, r3, #2
 8002936:	4413      	add	r3, r2
 8002938:	00db      	lsls	r3, r3, #3
 800293a:	440b      	add	r3, r1
 800293c:	3308      	adds	r3, #8
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	2b00      	cmp	r3, #0
 8002942:	d00a      	beq.n	800295a <L6474_StartMovement+0x3e>
  {
    devicePrm[deviceId].motionState = ACCELERATING;
 8002944:	79fa      	ldrb	r2, [r7, #7]
 8002946:	491d      	ldr	r1, [pc, #116]	; (80029bc <L6474_StartMovement+0xa0>)
 8002948:	4613      	mov	r3, r2
 800294a:	009b      	lsls	r3, r3, #2
 800294c:	4413      	add	r3, r2
 800294e:	00db      	lsls	r3, r3, #3
 8002950:	440b      	add	r3, r1
 8002952:	3324      	adds	r3, #36	; 0x24
 8002954:	2200      	movs	r2, #0
 8002956:	701a      	strb	r2, [r3, #0]
 8002958:	e009      	b.n	800296e <L6474_StartMovement+0x52>
  }
  else
  {
    devicePrm[deviceId].motionState = DECELERATING;    
 800295a:	79fa      	ldrb	r2, [r7, #7]
 800295c:	4917      	ldr	r1, [pc, #92]	; (80029bc <L6474_StartMovement+0xa0>)
 800295e:	4613      	mov	r3, r2
 8002960:	009b      	lsls	r3, r3, #2
 8002962:	4413      	add	r3, r2
 8002964:	00db      	lsls	r3, r3, #3
 8002966:	440b      	add	r3, r1
 8002968:	3324      	adds	r3, #36	; 0x24
 800296a:	2202      	movs	r2, #2
 800296c:	701a      	strb	r2, [r3, #0]
  }
  devicePrm[deviceId].accu = 0;
 800296e:	79fa      	ldrb	r2, [r7, #7]
 8002970:	4912      	ldr	r1, [pc, #72]	; (80029bc <L6474_StartMovement+0xa0>)
 8002972:	4613      	mov	r3, r2
 8002974:	009b      	lsls	r3, r3, #2
 8002976:	4413      	add	r3, r2
 8002978:	00db      	lsls	r3, r3, #3
 800297a:	440b      	add	r3, r1
 800297c:	2200      	movs	r2, #0
 800297e:	601a      	str	r2, [r3, #0]
  devicePrm[deviceId].relativePos = 0;
 8002980:	79fa      	ldrb	r2, [r7, #7]
 8002982:	490e      	ldr	r1, [pc, #56]	; (80029bc <L6474_StartMovement+0xa0>)
 8002984:	4613      	mov	r3, r2
 8002986:	009b      	lsls	r3, r3, #2
 8002988:	4413      	add	r3, r2
 800298a:	00db      	lsls	r3, r3, #3
 800298c:	440b      	add	r3, r1
 800298e:	330c      	adds	r3, #12
 8002990:	2200      	movs	r2, #0
 8002992:	601a      	str	r2, [r3, #0]
  L6474_ApplySpeed(deviceId, devicePrm[deviceId].minSpeed);
 8002994:	79fa      	ldrb	r2, [r7, #7]
 8002996:	4909      	ldr	r1, [pc, #36]	; (80029bc <L6474_StartMovement+0xa0>)
 8002998:	4613      	mov	r3, r2
 800299a:	009b      	lsls	r3, r3, #2
 800299c:	4413      	add	r3, r2
 800299e:	00db      	lsls	r3, r3, #3
 80029a0:	440b      	add	r3, r1
 80029a2:	331e      	adds	r3, #30
 80029a4:	881b      	ldrh	r3, [r3, #0]
 80029a6:	b29a      	uxth	r2, r3
 80029a8:	79fb      	ldrb	r3, [r7, #7]
 80029aa:	4611      	mov	r1, r2
 80029ac:	4618      	mov	r0, r3
 80029ae:	f7ff fb61 	bl	8002074 <L6474_ApplySpeed>
}
 80029b2:	bf00      	nop
 80029b4:	3708      	adds	r7, #8
 80029b6:	46bd      	mov	sp, r7
 80029b8:	bd80      	pop	{r7, pc}
 80029ba:	bf00      	nop
 80029bc:	200003f0 	.word	0x200003f0

080029c0 <L6474_StepClockHandler>:
 * @param[in] deviceId (from 0 to 2)
 * @retval None
 * @note Must only be called by the timer ISR
 **********************************************************/
void L6474_StepClockHandler(uint8_t deviceId)
{
 80029c0:	b580      	push	{r7, lr}
 80029c2:	b08c      	sub	sp, #48	; 0x30
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	4603      	mov	r3, r0
 80029c8:	71fb      	strb	r3, [r7, #7]
  /* Set isr flag */
  isrFlag = TRUE;
 80029ca:	4b96      	ldr	r3, [pc, #600]	; (8002c24 <L6474_StepClockHandler+0x264>)
 80029cc:	2201      	movs	r2, #1
 80029ce:	701a      	strb	r2, [r3, #0]
  
  /* Incrementation of the relative position */
  devicePrm[deviceId].relativePos++;
 80029d0:	79fa      	ldrb	r2, [r7, #7]
 80029d2:	4995      	ldr	r1, [pc, #596]	; (8002c28 <L6474_StepClockHandler+0x268>)
 80029d4:	4613      	mov	r3, r2
 80029d6:	009b      	lsls	r3, r3, #2
 80029d8:	4413      	add	r3, r2
 80029da:	00db      	lsls	r3, r3, #3
 80029dc:	440b      	add	r3, r1
 80029de:	330c      	adds	r3, #12
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	1c59      	adds	r1, r3, #1
 80029e4:	4890      	ldr	r0, [pc, #576]	; (8002c28 <L6474_StepClockHandler+0x268>)
 80029e6:	4613      	mov	r3, r2
 80029e8:	009b      	lsls	r3, r3, #2
 80029ea:	4413      	add	r3, r2
 80029ec:	00db      	lsls	r3, r3, #3
 80029ee:	4403      	add	r3, r0
 80029f0:	330c      	adds	r3, #12
 80029f2:	6019      	str	r1, [r3, #0]

  switch (devicePrm[deviceId].motionState) 
 80029f4:	79fa      	ldrb	r2, [r7, #7]
 80029f6:	498c      	ldr	r1, [pc, #560]	; (8002c28 <L6474_StepClockHandler+0x268>)
 80029f8:	4613      	mov	r3, r2
 80029fa:	009b      	lsls	r3, r3, #2
 80029fc:	4413      	add	r3, r2
 80029fe:	00db      	lsls	r3, r3, #3
 8002a00:	440b      	add	r3, r1
 8002a02:	3324      	adds	r3, #36	; 0x24
 8002a04:	781b      	ldrb	r3, [r3, #0]
 8002a06:	b2db      	uxtb	r3, r3
 8002a08:	2b03      	cmp	r3, #3
 8002a0a:	f000 810f 	beq.w	8002c2c <L6474_StepClockHandler+0x26c>
 8002a0e:	2b03      	cmp	r3, #3
 8002a10:	f300 82a4 	bgt.w	8002f5c <L6474_StepClockHandler+0x59c>
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d003      	beq.n	8002a20 <L6474_StepClockHandler+0x60>
 8002a18:	2b02      	cmp	r3, #2
 8002a1a:	f000 819b 	beq.w	8002d54 <L6474_StepClockHandler+0x394>
      }
      break;
    }
    default: 
    {
      break;
 8002a1e:	e29d      	b.n	8002f5c <L6474_StepClockHandler+0x59c>
        uint32_t relPos = devicePrm[deviceId].relativePos;
 8002a20:	79fa      	ldrb	r2, [r7, #7]
 8002a22:	4981      	ldr	r1, [pc, #516]	; (8002c28 <L6474_StepClockHandler+0x268>)
 8002a24:	4613      	mov	r3, r2
 8002a26:	009b      	lsls	r3, r3, #2
 8002a28:	4413      	add	r3, r2
 8002a2a:	00db      	lsls	r3, r3, #3
 8002a2c:	440b      	add	r3, r1
 8002a2e:	330c      	adds	r3, #12
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	617b      	str	r3, [r7, #20]
        uint32_t endAccPos = devicePrm[deviceId].endAccPos;
 8002a34:	79fa      	ldrb	r2, [r7, #7]
 8002a36:	497c      	ldr	r1, [pc, #496]	; (8002c28 <L6474_StepClockHandler+0x268>)
 8002a38:	4613      	mov	r3, r2
 8002a3a:	009b      	lsls	r3, r3, #2
 8002a3c:	4413      	add	r3, r2
 8002a3e:	00db      	lsls	r3, r3, #3
 8002a40:	440b      	add	r3, r1
 8002a42:	3308      	adds	r3, #8
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	613b      	str	r3, [r7, #16]
        uint16_t speed = devicePrm[deviceId].speed;
 8002a48:	79fa      	ldrb	r2, [r7, #7]
 8002a4a:	4977      	ldr	r1, [pc, #476]	; (8002c28 <L6474_StepClockHandler+0x268>)
 8002a4c:	4613      	mov	r3, r2
 8002a4e:	009b      	lsls	r3, r3, #2
 8002a50:	4413      	add	r3, r2
 8002a52:	00db      	lsls	r3, r3, #3
 8002a54:	440b      	add	r3, r1
 8002a56:	3320      	adds	r3, #32
 8002a58:	881b      	ldrh	r3, [r3, #0]
 8002a5a:	85fb      	strh	r3, [r7, #46]	; 0x2e
        uint32_t acc = ((uint32_t)devicePrm[deviceId].acceleration << 16);
 8002a5c:	79fa      	ldrb	r2, [r7, #7]
 8002a5e:	4972      	ldr	r1, [pc, #456]	; (8002c28 <L6474_StepClockHandler+0x268>)
 8002a60:	4613      	mov	r3, r2
 8002a62:	009b      	lsls	r3, r3, #2
 8002a64:	4413      	add	r3, r2
 8002a66:	00db      	lsls	r3, r3, #3
 8002a68:	440b      	add	r3, r1
 8002a6a:	3318      	adds	r3, #24
 8002a6c:	881b      	ldrh	r3, [r3, #0]
 8002a6e:	b29b      	uxth	r3, r3
 8002a70:	041b      	lsls	r3, r3, #16
 8002a72:	60fb      	str	r3, [r7, #12]
        if ((devicePrm[deviceId].commandExecuted == SOFT_STOP_CMD)||
 8002a74:	79fa      	ldrb	r2, [r7, #7]
 8002a76:	496c      	ldr	r1, [pc, #432]	; (8002c28 <L6474_StepClockHandler+0x268>)
 8002a78:	4613      	mov	r3, r2
 8002a7a:	009b      	lsls	r3, r3, #2
 8002a7c:	4413      	add	r3, r2
 8002a7e:	00db      	lsls	r3, r3, #3
 8002a80:	440b      	add	r3, r1
 8002a82:	3322      	adds	r3, #34	; 0x22
 8002a84:	781b      	ldrb	r3, [r3, #0]
 8002a86:	b2db      	uxtb	r3, r3
 8002a88:	2b02      	cmp	r3, #2
 8002a8a:	d017      	beq.n	8002abc <L6474_StepClockHandler+0xfc>
            ((devicePrm[deviceId].commandExecuted != RUN_CMD)&&  
 8002a8c:	79fa      	ldrb	r2, [r7, #7]
 8002a8e:	4966      	ldr	r1, [pc, #408]	; (8002c28 <L6474_StepClockHandler+0x268>)
 8002a90:	4613      	mov	r3, r2
 8002a92:	009b      	lsls	r3, r3, #2
 8002a94:	4413      	add	r3, r2
 8002a96:	00db      	lsls	r3, r3, #3
 8002a98:	440b      	add	r3, r1
 8002a9a:	3322      	adds	r3, #34	; 0x22
 8002a9c:	781b      	ldrb	r3, [r3, #0]
 8002a9e:	b2db      	uxtb	r3, r3
        if ((devicePrm[deviceId].commandExecuted == SOFT_STOP_CMD)||
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d01f      	beq.n	8002ae4 <L6474_StepClockHandler+0x124>
             (relPos == devicePrm[deviceId].startDecPos)))
 8002aa4:	79fa      	ldrb	r2, [r7, #7]
 8002aa6:	4960      	ldr	r1, [pc, #384]	; (8002c28 <L6474_StepClockHandler+0x268>)
 8002aa8:	4613      	mov	r3, r2
 8002aaa:	009b      	lsls	r3, r3, #2
 8002aac:	4413      	add	r3, r2
 8002aae:	00db      	lsls	r3, r3, #3
 8002ab0:	440b      	add	r3, r1
 8002ab2:	3310      	adds	r3, #16
 8002ab4:	681b      	ldr	r3, [r3, #0]
            ((devicePrm[deviceId].commandExecuted != RUN_CMD)&&  
 8002ab6:	697a      	ldr	r2, [r7, #20]
 8002ab8:	429a      	cmp	r2, r3
 8002aba:	d113      	bne.n	8002ae4 <L6474_StepClockHandler+0x124>
          devicePrm[deviceId].motionState = DECELERATING;
 8002abc:	79fa      	ldrb	r2, [r7, #7]
 8002abe:	495a      	ldr	r1, [pc, #360]	; (8002c28 <L6474_StepClockHandler+0x268>)
 8002ac0:	4613      	mov	r3, r2
 8002ac2:	009b      	lsls	r3, r3, #2
 8002ac4:	4413      	add	r3, r2
 8002ac6:	00db      	lsls	r3, r3, #3
 8002ac8:	440b      	add	r3, r1
 8002aca:	3324      	adds	r3, #36	; 0x24
 8002acc:	2202      	movs	r2, #2
 8002ace:	701a      	strb	r2, [r3, #0]
          devicePrm[deviceId].accu = 0;
 8002ad0:	79fa      	ldrb	r2, [r7, #7]
 8002ad2:	4955      	ldr	r1, [pc, #340]	; (8002c28 <L6474_StepClockHandler+0x268>)
 8002ad4:	4613      	mov	r3, r2
 8002ad6:	009b      	lsls	r3, r3, #2
 8002ad8:	4413      	add	r3, r2
 8002ada:	00db      	lsls	r3, r3, #3
 8002adc:	440b      	add	r3, r1
 8002ade:	2200      	movs	r2, #0
 8002ae0:	601a      	str	r2, [r3, #0]
 8002ae2:	e09e      	b.n	8002c22 <L6474_StepClockHandler+0x262>
        else if ((speed >= devicePrm[deviceId].maxSpeed)||
 8002ae4:	79fa      	ldrb	r2, [r7, #7]
 8002ae6:	4950      	ldr	r1, [pc, #320]	; (8002c28 <L6474_StepClockHandler+0x268>)
 8002ae8:	4613      	mov	r3, r2
 8002aea:	009b      	lsls	r3, r3, #2
 8002aec:	4413      	add	r3, r2
 8002aee:	00db      	lsls	r3, r3, #3
 8002af0:	440b      	add	r3, r1
 8002af2:	331c      	adds	r3, #28
 8002af4:	881b      	ldrh	r3, [r3, #0]
 8002af6:	b29b      	uxth	r3, r3
 8002af8:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8002afa:	429a      	cmp	r2, r3
 8002afc:	d20f      	bcs.n	8002b1e <L6474_StepClockHandler+0x15e>
                 ((devicePrm[deviceId].commandExecuted != RUN_CMD)&&
 8002afe:	79fa      	ldrb	r2, [r7, #7]
 8002b00:	4949      	ldr	r1, [pc, #292]	; (8002c28 <L6474_StepClockHandler+0x268>)
 8002b02:	4613      	mov	r3, r2
 8002b04:	009b      	lsls	r3, r3, #2
 8002b06:	4413      	add	r3, r2
 8002b08:	00db      	lsls	r3, r3, #3
 8002b0a:	440b      	add	r3, r1
 8002b0c:	3322      	adds	r3, #34	; 0x22
 8002b0e:	781b      	ldrb	r3, [r3, #0]
 8002b10:	b2db      	uxtb	r3, r3
        else if ((speed >= devicePrm[deviceId].maxSpeed)||
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d00e      	beq.n	8002b34 <L6474_StepClockHandler+0x174>
                 ((devicePrm[deviceId].commandExecuted != RUN_CMD)&&
 8002b16:	697a      	ldr	r2, [r7, #20]
 8002b18:	693b      	ldr	r3, [r7, #16]
 8002b1a:	429a      	cmp	r2, r3
 8002b1c:	d10a      	bne.n	8002b34 <L6474_StepClockHandler+0x174>
          devicePrm[deviceId].motionState = STEADY;
 8002b1e:	79fa      	ldrb	r2, [r7, #7]
 8002b20:	4941      	ldr	r1, [pc, #260]	; (8002c28 <L6474_StepClockHandler+0x268>)
 8002b22:	4613      	mov	r3, r2
 8002b24:	009b      	lsls	r3, r3, #2
 8002b26:	4413      	add	r3, r2
 8002b28:	00db      	lsls	r3, r3, #3
 8002b2a:	440b      	add	r3, r1
 8002b2c:	3324      	adds	r3, #36	; 0x24
 8002b2e:	2203      	movs	r2, #3
 8002b30:	701a      	strb	r2, [r3, #0]
 8002b32:	e076      	b.n	8002c22 <L6474_StepClockHandler+0x262>
          bool speedUpdated = FALSE;
 8002b34:	2300      	movs	r3, #0
 8002b36:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          if (speed == 0) speed =1;
 8002b3a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d101      	bne.n	8002b44 <L6474_StepClockHandler+0x184>
 8002b40:	2301      	movs	r3, #1
 8002b42:	85fb      	strh	r3, [r7, #46]	; 0x2e
          devicePrm[deviceId].accu += acc / speed;
 8002b44:	79fa      	ldrb	r2, [r7, #7]
 8002b46:	4938      	ldr	r1, [pc, #224]	; (8002c28 <L6474_StepClockHandler+0x268>)
 8002b48:	4613      	mov	r3, r2
 8002b4a:	009b      	lsls	r3, r3, #2
 8002b4c:	4413      	add	r3, r2
 8002b4e:	00db      	lsls	r3, r3, #3
 8002b50:	440b      	add	r3, r1
 8002b52:	6819      	ldr	r1, [r3, #0]
 8002b54:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002b56:	68fa      	ldr	r2, [r7, #12]
 8002b58:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b5c:	79fa      	ldrb	r2, [r7, #7]
 8002b5e:	4419      	add	r1, r3
 8002b60:	4831      	ldr	r0, [pc, #196]	; (8002c28 <L6474_StepClockHandler+0x268>)
 8002b62:	4613      	mov	r3, r2
 8002b64:	009b      	lsls	r3, r3, #2
 8002b66:	4413      	add	r3, r2
 8002b68:	00db      	lsls	r3, r3, #3
 8002b6a:	4403      	add	r3, r0
 8002b6c:	6019      	str	r1, [r3, #0]
          while (devicePrm[deviceId].accu >= (0X10000L))
 8002b6e:	e017      	b.n	8002ba0 <L6474_StepClockHandler+0x1e0>
            devicePrm[deviceId].accu -= (0X10000L);
 8002b70:	79fa      	ldrb	r2, [r7, #7]
 8002b72:	492d      	ldr	r1, [pc, #180]	; (8002c28 <L6474_StepClockHandler+0x268>)
 8002b74:	4613      	mov	r3, r2
 8002b76:	009b      	lsls	r3, r3, #2
 8002b78:	4413      	add	r3, r2
 8002b7a:	00db      	lsls	r3, r3, #3
 8002b7c:	440b      	add	r3, r1
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	79fa      	ldrb	r2, [r7, #7]
 8002b82:	f5a3 3180 	sub.w	r1, r3, #65536	; 0x10000
 8002b86:	4828      	ldr	r0, [pc, #160]	; (8002c28 <L6474_StepClockHandler+0x268>)
 8002b88:	4613      	mov	r3, r2
 8002b8a:	009b      	lsls	r3, r3, #2
 8002b8c:	4413      	add	r3, r2
 8002b8e:	00db      	lsls	r3, r3, #3
 8002b90:	4403      	add	r3, r0
 8002b92:	6019      	str	r1, [r3, #0]
            speed +=1;
 8002b94:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002b96:	3301      	adds	r3, #1
 8002b98:	85fb      	strh	r3, [r7, #46]	; 0x2e
            speedUpdated = TRUE;
 8002b9a:	2301      	movs	r3, #1
 8002b9c:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          while (devicePrm[deviceId].accu >= (0X10000L))
 8002ba0:	79fa      	ldrb	r2, [r7, #7]
 8002ba2:	4921      	ldr	r1, [pc, #132]	; (8002c28 <L6474_StepClockHandler+0x268>)
 8002ba4:	4613      	mov	r3, r2
 8002ba6:	009b      	lsls	r3, r3, #2
 8002ba8:	4413      	add	r3, r2
 8002baa:	00db      	lsls	r3, r3, #3
 8002bac:	440b      	add	r3, r1
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002bb4:	d2dc      	bcs.n	8002b70 <L6474_StepClockHandler+0x1b0>
          if (speedUpdated)
 8002bb6:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	f000 81d0 	beq.w	8002f60 <L6474_StepClockHandler+0x5a0>
            if (speed > devicePrm[deviceId].maxSpeed)
 8002bc0:	79fa      	ldrb	r2, [r7, #7]
 8002bc2:	4919      	ldr	r1, [pc, #100]	; (8002c28 <L6474_StepClockHandler+0x268>)
 8002bc4:	4613      	mov	r3, r2
 8002bc6:	009b      	lsls	r3, r3, #2
 8002bc8:	4413      	add	r3, r2
 8002bca:	00db      	lsls	r3, r3, #3
 8002bcc:	440b      	add	r3, r1
 8002bce:	331c      	adds	r3, #28
 8002bd0:	881b      	ldrh	r3, [r3, #0]
 8002bd2:	b29b      	uxth	r3, r3
 8002bd4:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8002bd6:	429a      	cmp	r2, r3
 8002bd8:	d909      	bls.n	8002bee <L6474_StepClockHandler+0x22e>
              speed = devicePrm[deviceId].maxSpeed;
 8002bda:	79fa      	ldrb	r2, [r7, #7]
 8002bdc:	4912      	ldr	r1, [pc, #72]	; (8002c28 <L6474_StepClockHandler+0x268>)
 8002bde:	4613      	mov	r3, r2
 8002be0:	009b      	lsls	r3, r3, #2
 8002be2:	4413      	add	r3, r2
 8002be4:	00db      	lsls	r3, r3, #3
 8002be6:	440b      	add	r3, r1
 8002be8:	331c      	adds	r3, #28
 8002bea:	881b      	ldrh	r3, [r3, #0]
 8002bec:	85fb      	strh	r3, [r7, #46]	; 0x2e
            devicePrm[deviceId].speed = speed;
 8002bee:	79fa      	ldrb	r2, [r7, #7]
 8002bf0:	490d      	ldr	r1, [pc, #52]	; (8002c28 <L6474_StepClockHandler+0x268>)
 8002bf2:	4613      	mov	r3, r2
 8002bf4:	009b      	lsls	r3, r3, #2
 8002bf6:	4413      	add	r3, r2
 8002bf8:	00db      	lsls	r3, r3, #3
 8002bfa:	440b      	add	r3, r1
 8002bfc:	3320      	adds	r3, #32
 8002bfe:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8002c00:	801a      	strh	r2, [r3, #0]
            L6474_ApplySpeed(deviceId, devicePrm[deviceId].speed);
 8002c02:	79fa      	ldrb	r2, [r7, #7]
 8002c04:	4908      	ldr	r1, [pc, #32]	; (8002c28 <L6474_StepClockHandler+0x268>)
 8002c06:	4613      	mov	r3, r2
 8002c08:	009b      	lsls	r3, r3, #2
 8002c0a:	4413      	add	r3, r2
 8002c0c:	00db      	lsls	r3, r3, #3
 8002c0e:	440b      	add	r3, r1
 8002c10:	3320      	adds	r3, #32
 8002c12:	881b      	ldrh	r3, [r3, #0]
 8002c14:	b29a      	uxth	r2, r3
 8002c16:	79fb      	ldrb	r3, [r7, #7]
 8002c18:	4611      	mov	r1, r2
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	f7ff fa2a 	bl	8002074 <L6474_ApplySpeed>
        break;
 8002c20:	e19e      	b.n	8002f60 <L6474_StepClockHandler+0x5a0>
 8002c22:	e19d      	b.n	8002f60 <L6474_StepClockHandler+0x5a0>
 8002c24:	200003ed 	.word	0x200003ed
 8002c28:	200003f0 	.word	0x200003f0
      uint16_t maxSpeed = devicePrm[deviceId].maxSpeed;
 8002c2c:	79fa      	ldrb	r2, [r7, #7]
 8002c2e:	499c      	ldr	r1, [pc, #624]	; (8002ea0 <L6474_StepClockHandler+0x4e0>)
 8002c30:	4613      	mov	r3, r2
 8002c32:	009b      	lsls	r3, r3, #2
 8002c34:	4413      	add	r3, r2
 8002c36:	00db      	lsls	r3, r3, #3
 8002c38:	440b      	add	r3, r1
 8002c3a:	331c      	adds	r3, #28
 8002c3c:	881b      	ldrh	r3, [r3, #0]
 8002c3e:	84fb      	strh	r3, [r7, #38]	; 0x26
      uint32_t relativePos = devicePrm[deviceId].relativePos;
 8002c40:	79fa      	ldrb	r2, [r7, #7]
 8002c42:	4997      	ldr	r1, [pc, #604]	; (8002ea0 <L6474_StepClockHandler+0x4e0>)
 8002c44:	4613      	mov	r3, r2
 8002c46:	009b      	lsls	r3, r3, #2
 8002c48:	4413      	add	r3, r2
 8002c4a:	00db      	lsls	r3, r3, #3
 8002c4c:	440b      	add	r3, r1
 8002c4e:	330c      	adds	r3, #12
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	623b      	str	r3, [r7, #32]
      if  ((devicePrm[deviceId].commandExecuted == SOFT_STOP_CMD)||
 8002c54:	79fa      	ldrb	r2, [r7, #7]
 8002c56:	4992      	ldr	r1, [pc, #584]	; (8002ea0 <L6474_StepClockHandler+0x4e0>)
 8002c58:	4613      	mov	r3, r2
 8002c5a:	009b      	lsls	r3, r3, #2
 8002c5c:	4413      	add	r3, r2
 8002c5e:	00db      	lsls	r3, r3, #3
 8002c60:	440b      	add	r3, r1
 8002c62:	3322      	adds	r3, #34	; 0x22
 8002c64:	781b      	ldrb	r3, [r3, #0]
 8002c66:	b2db      	uxtb	r3, r3
 8002c68:	2b02      	cmp	r3, #2
 8002c6a:	d030      	beq.n	8002cce <L6474_StepClockHandler+0x30e>
           ((devicePrm[deviceId].commandExecuted != RUN_CMD)&&
 8002c6c:	79fa      	ldrb	r2, [r7, #7]
 8002c6e:	498c      	ldr	r1, [pc, #560]	; (8002ea0 <L6474_StepClockHandler+0x4e0>)
 8002c70:	4613      	mov	r3, r2
 8002c72:	009b      	lsls	r3, r3, #2
 8002c74:	4413      	add	r3, r2
 8002c76:	00db      	lsls	r3, r3, #3
 8002c78:	440b      	add	r3, r1
 8002c7a:	3322      	adds	r3, #34	; 0x22
 8002c7c:	781b      	ldrb	r3, [r3, #0]
 8002c7e:	b2db      	uxtb	r3, r3
      if  ((devicePrm[deviceId].commandExecuted == SOFT_STOP_CMD)||
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d00b      	beq.n	8002c9c <L6474_StepClockHandler+0x2dc>
            (relativePos >= (devicePrm[deviceId].startDecPos))) ||
 8002c84:	79fa      	ldrb	r2, [r7, #7]
 8002c86:	4986      	ldr	r1, [pc, #536]	; (8002ea0 <L6474_StepClockHandler+0x4e0>)
 8002c88:	4613      	mov	r3, r2
 8002c8a:	009b      	lsls	r3, r3, #2
 8002c8c:	4413      	add	r3, r2
 8002c8e:	00db      	lsls	r3, r3, #3
 8002c90:	440b      	add	r3, r1
 8002c92:	3310      	adds	r3, #16
 8002c94:	681b      	ldr	r3, [r3, #0]
           ((devicePrm[deviceId].commandExecuted != RUN_CMD)&&
 8002c96:	6a3a      	ldr	r2, [r7, #32]
 8002c98:	429a      	cmp	r2, r3
 8002c9a:	d218      	bcs.n	8002cce <L6474_StepClockHandler+0x30e>
           ((devicePrm[deviceId].commandExecuted == RUN_CMD)&&
 8002c9c:	79fa      	ldrb	r2, [r7, #7]
 8002c9e:	4980      	ldr	r1, [pc, #512]	; (8002ea0 <L6474_StepClockHandler+0x4e0>)
 8002ca0:	4613      	mov	r3, r2
 8002ca2:	009b      	lsls	r3, r3, #2
 8002ca4:	4413      	add	r3, r2
 8002ca6:	00db      	lsls	r3, r3, #3
 8002ca8:	440b      	add	r3, r1
 8002caa:	3322      	adds	r3, #34	; 0x22
 8002cac:	781b      	ldrb	r3, [r3, #0]
 8002cae:	b2db      	uxtb	r3, r3
            (relativePos >= (devicePrm[deviceId].startDecPos))) ||
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d120      	bne.n	8002cf6 <L6474_StepClockHandler+0x336>
            (devicePrm[deviceId].speed > maxSpeed)))
 8002cb4:	79fa      	ldrb	r2, [r7, #7]
 8002cb6:	497a      	ldr	r1, [pc, #488]	; (8002ea0 <L6474_StepClockHandler+0x4e0>)
 8002cb8:	4613      	mov	r3, r2
 8002cba:	009b      	lsls	r3, r3, #2
 8002cbc:	4413      	add	r3, r2
 8002cbe:	00db      	lsls	r3, r3, #3
 8002cc0:	440b      	add	r3, r1
 8002cc2:	3320      	adds	r3, #32
 8002cc4:	881b      	ldrh	r3, [r3, #0]
 8002cc6:	b29b      	uxth	r3, r3
           ((devicePrm[deviceId].commandExecuted == RUN_CMD)&&
 8002cc8:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8002cca:	429a      	cmp	r2, r3
 8002ccc:	d213      	bcs.n	8002cf6 <L6474_StepClockHandler+0x336>
        devicePrm[deviceId].motionState = DECELERATING;
 8002cce:	79fa      	ldrb	r2, [r7, #7]
 8002cd0:	4973      	ldr	r1, [pc, #460]	; (8002ea0 <L6474_StepClockHandler+0x4e0>)
 8002cd2:	4613      	mov	r3, r2
 8002cd4:	009b      	lsls	r3, r3, #2
 8002cd6:	4413      	add	r3, r2
 8002cd8:	00db      	lsls	r3, r3, #3
 8002cda:	440b      	add	r3, r1
 8002cdc:	3324      	adds	r3, #36	; 0x24
 8002cde:	2202      	movs	r2, #2
 8002ce0:	701a      	strb	r2, [r3, #0]
        devicePrm[deviceId].accu = 0;
 8002ce2:	79fa      	ldrb	r2, [r7, #7]
 8002ce4:	496e      	ldr	r1, [pc, #440]	; (8002ea0 <L6474_StepClockHandler+0x4e0>)
 8002ce6:	4613      	mov	r3, r2
 8002ce8:	009b      	lsls	r3, r3, #2
 8002cea:	4413      	add	r3, r2
 8002cec:	00db      	lsls	r3, r3, #3
 8002cee:	440b      	add	r3, r1
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	601a      	str	r2, [r3, #0]
      break;
 8002cf4:	e136      	b.n	8002f64 <L6474_StepClockHandler+0x5a4>
      else if ((devicePrm[deviceId].commandExecuted == RUN_CMD)&&
 8002cf6:	79fa      	ldrb	r2, [r7, #7]
 8002cf8:	4969      	ldr	r1, [pc, #420]	; (8002ea0 <L6474_StepClockHandler+0x4e0>)
 8002cfa:	4613      	mov	r3, r2
 8002cfc:	009b      	lsls	r3, r3, #2
 8002cfe:	4413      	add	r3, r2
 8002d00:	00db      	lsls	r3, r3, #3
 8002d02:	440b      	add	r3, r1
 8002d04:	3322      	adds	r3, #34	; 0x22
 8002d06:	781b      	ldrb	r3, [r3, #0]
 8002d08:	b2db      	uxtb	r3, r3
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	f040 812a 	bne.w	8002f64 <L6474_StepClockHandler+0x5a4>
               (devicePrm[deviceId].speed < maxSpeed))
 8002d10:	79fa      	ldrb	r2, [r7, #7]
 8002d12:	4963      	ldr	r1, [pc, #396]	; (8002ea0 <L6474_StepClockHandler+0x4e0>)
 8002d14:	4613      	mov	r3, r2
 8002d16:	009b      	lsls	r3, r3, #2
 8002d18:	4413      	add	r3, r2
 8002d1a:	00db      	lsls	r3, r3, #3
 8002d1c:	440b      	add	r3, r1
 8002d1e:	3320      	adds	r3, #32
 8002d20:	881b      	ldrh	r3, [r3, #0]
 8002d22:	b29b      	uxth	r3, r3
      else if ((devicePrm[deviceId].commandExecuted == RUN_CMD)&&
 8002d24:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8002d26:	429a      	cmp	r2, r3
 8002d28:	f240 811c 	bls.w	8002f64 <L6474_StepClockHandler+0x5a4>
        devicePrm[deviceId].motionState = ACCELERATING;
 8002d2c:	79fa      	ldrb	r2, [r7, #7]
 8002d2e:	495c      	ldr	r1, [pc, #368]	; (8002ea0 <L6474_StepClockHandler+0x4e0>)
 8002d30:	4613      	mov	r3, r2
 8002d32:	009b      	lsls	r3, r3, #2
 8002d34:	4413      	add	r3, r2
 8002d36:	00db      	lsls	r3, r3, #3
 8002d38:	440b      	add	r3, r1
 8002d3a:	3324      	adds	r3, #36	; 0x24
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	701a      	strb	r2, [r3, #0]
        devicePrm[deviceId].accu = 0;
 8002d40:	79fa      	ldrb	r2, [r7, #7]
 8002d42:	4957      	ldr	r1, [pc, #348]	; (8002ea0 <L6474_StepClockHandler+0x4e0>)
 8002d44:	4613      	mov	r3, r2
 8002d46:	009b      	lsls	r3, r3, #2
 8002d48:	4413      	add	r3, r2
 8002d4a:	00db      	lsls	r3, r3, #3
 8002d4c:	440b      	add	r3, r1
 8002d4e:	2200      	movs	r2, #0
 8002d50:	601a      	str	r2, [r3, #0]
      break;
 8002d52:	e107      	b.n	8002f64 <L6474_StepClockHandler+0x5a4>
      uint32_t relativePos = devicePrm[deviceId].relativePos;
 8002d54:	79fa      	ldrb	r2, [r7, #7]
 8002d56:	4952      	ldr	r1, [pc, #328]	; (8002ea0 <L6474_StepClockHandler+0x4e0>)
 8002d58:	4613      	mov	r3, r2
 8002d5a:	009b      	lsls	r3, r3, #2
 8002d5c:	4413      	add	r3, r2
 8002d5e:	00db      	lsls	r3, r3, #3
 8002d60:	440b      	add	r3, r1
 8002d62:	330c      	adds	r3, #12
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	61fb      	str	r3, [r7, #28]
      uint16_t speed = devicePrm[deviceId].speed;
 8002d68:	79fa      	ldrb	r2, [r7, #7]
 8002d6a:	494d      	ldr	r1, [pc, #308]	; (8002ea0 <L6474_StepClockHandler+0x4e0>)
 8002d6c:	4613      	mov	r3, r2
 8002d6e:	009b      	lsls	r3, r3, #2
 8002d70:	4413      	add	r3, r2
 8002d72:	00db      	lsls	r3, r3, #3
 8002d74:	440b      	add	r3, r1
 8002d76:	3320      	adds	r3, #32
 8002d78:	881b      	ldrh	r3, [r3, #0]
 8002d7a:	857b      	strh	r3, [r7, #42]	; 0x2a
      uint32_t deceleration = ((uint32_t)devicePrm[deviceId].deceleration << 16);
 8002d7c:	79fa      	ldrb	r2, [r7, #7]
 8002d7e:	4948      	ldr	r1, [pc, #288]	; (8002ea0 <L6474_StepClockHandler+0x4e0>)
 8002d80:	4613      	mov	r3, r2
 8002d82:	009b      	lsls	r3, r3, #2
 8002d84:	4413      	add	r3, r2
 8002d86:	00db      	lsls	r3, r3, #3
 8002d88:	440b      	add	r3, r1
 8002d8a:	331a      	adds	r3, #26
 8002d8c:	881b      	ldrh	r3, [r3, #0]
 8002d8e:	b29b      	uxth	r3, r3
 8002d90:	041b      	lsls	r3, r3, #16
 8002d92:	61bb      	str	r3, [r7, #24]
      if (((devicePrm[deviceId].commandExecuted == SOFT_STOP_CMD)&&(speed <=  devicePrm[deviceId].minSpeed))||
 8002d94:	79fa      	ldrb	r2, [r7, #7]
 8002d96:	4942      	ldr	r1, [pc, #264]	; (8002ea0 <L6474_StepClockHandler+0x4e0>)
 8002d98:	4613      	mov	r3, r2
 8002d9a:	009b      	lsls	r3, r3, #2
 8002d9c:	4413      	add	r3, r2
 8002d9e:	00db      	lsls	r3, r3, #3
 8002da0:	440b      	add	r3, r1
 8002da2:	3322      	adds	r3, #34	; 0x22
 8002da4:	781b      	ldrb	r3, [r3, #0]
 8002da6:	b2db      	uxtb	r3, r3
 8002da8:	2b02      	cmp	r3, #2
 8002daa:	d10c      	bne.n	8002dc6 <L6474_StepClockHandler+0x406>
 8002dac:	79fa      	ldrb	r2, [r7, #7]
 8002dae:	493c      	ldr	r1, [pc, #240]	; (8002ea0 <L6474_StepClockHandler+0x4e0>)
 8002db0:	4613      	mov	r3, r2
 8002db2:	009b      	lsls	r3, r3, #2
 8002db4:	4413      	add	r3, r2
 8002db6:	00db      	lsls	r3, r3, #3
 8002db8:	440b      	add	r3, r1
 8002dba:	331e      	adds	r3, #30
 8002dbc:	881b      	ldrh	r3, [r3, #0]
 8002dbe:	b29b      	uxth	r3, r3
 8002dc0:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 8002dc2:	429a      	cmp	r2, r3
 8002dc4:	d917      	bls.n	8002df6 <L6474_StepClockHandler+0x436>
          ((devicePrm[deviceId].commandExecuted != RUN_CMD)&&
 8002dc6:	79fa      	ldrb	r2, [r7, #7]
 8002dc8:	4935      	ldr	r1, [pc, #212]	; (8002ea0 <L6474_StepClockHandler+0x4e0>)
 8002dca:	4613      	mov	r3, r2
 8002dcc:	009b      	lsls	r3, r3, #2
 8002dce:	4413      	add	r3, r2
 8002dd0:	00db      	lsls	r3, r3, #3
 8002dd2:	440b      	add	r3, r1
 8002dd4:	3322      	adds	r3, #34	; 0x22
 8002dd6:	781b      	ldrb	r3, [r3, #0]
 8002dd8:	b2db      	uxtb	r3, r3
      if (((devicePrm[deviceId].commandExecuted == SOFT_STOP_CMD)&&(speed <=  devicePrm[deviceId].minSpeed))||
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d010      	beq.n	8002e00 <L6474_StepClockHandler+0x440>
           (relativePos >= devicePrm[deviceId].stepsToTake)))
 8002dde:	79fa      	ldrb	r2, [r7, #7]
 8002de0:	492f      	ldr	r1, [pc, #188]	; (8002ea0 <L6474_StepClockHandler+0x4e0>)
 8002de2:	4613      	mov	r3, r2
 8002de4:	009b      	lsls	r3, r3, #2
 8002de6:	4413      	add	r3, r2
 8002de8:	00db      	lsls	r3, r3, #3
 8002dea:	440b      	add	r3, r1
 8002dec:	3314      	adds	r3, #20
 8002dee:	681b      	ldr	r3, [r3, #0]
          ((devicePrm[deviceId].commandExecuted != RUN_CMD)&&
 8002df0:	69fa      	ldr	r2, [r7, #28]
 8002df2:	429a      	cmp	r2, r3
 8002df4:	d304      	bcc.n	8002e00 <L6474_StepClockHandler+0x440>
        L6474_HardStop(deviceId);
 8002df6:	79fb      	ldrb	r3, [r7, #7]
 8002df8:	4618      	mov	r0, r3
 8002dfa:	f7fe fcab 	bl	8001754 <L6474_HardStop>
 8002dfe:	e0ac      	b.n	8002f5a <L6474_StepClockHandler+0x59a>
      else if ((devicePrm[deviceId].commandExecuted == RUN_CMD)&&
 8002e00:	79fa      	ldrb	r2, [r7, #7]
 8002e02:	4927      	ldr	r1, [pc, #156]	; (8002ea0 <L6474_StepClockHandler+0x4e0>)
 8002e04:	4613      	mov	r3, r2
 8002e06:	009b      	lsls	r3, r3, #2
 8002e08:	4413      	add	r3, r2
 8002e0a:	00db      	lsls	r3, r3, #3
 8002e0c:	440b      	add	r3, r1
 8002e0e:	3322      	adds	r3, #34	; 0x22
 8002e10:	781b      	ldrb	r3, [r3, #0]
 8002e12:	b2db      	uxtb	r3, r3
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d117      	bne.n	8002e48 <L6474_StepClockHandler+0x488>
               (speed <= devicePrm[deviceId].maxSpeed))
 8002e18:	79fa      	ldrb	r2, [r7, #7]
 8002e1a:	4921      	ldr	r1, [pc, #132]	; (8002ea0 <L6474_StepClockHandler+0x4e0>)
 8002e1c:	4613      	mov	r3, r2
 8002e1e:	009b      	lsls	r3, r3, #2
 8002e20:	4413      	add	r3, r2
 8002e22:	00db      	lsls	r3, r3, #3
 8002e24:	440b      	add	r3, r1
 8002e26:	331c      	adds	r3, #28
 8002e28:	881b      	ldrh	r3, [r3, #0]
 8002e2a:	b29b      	uxth	r3, r3
      else if ((devicePrm[deviceId].commandExecuted == RUN_CMD)&&
 8002e2c:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 8002e2e:	429a      	cmp	r2, r3
 8002e30:	d80a      	bhi.n	8002e48 <L6474_StepClockHandler+0x488>
        devicePrm[deviceId].motionState = STEADY;
 8002e32:	79fa      	ldrb	r2, [r7, #7]
 8002e34:	491a      	ldr	r1, [pc, #104]	; (8002ea0 <L6474_StepClockHandler+0x4e0>)
 8002e36:	4613      	mov	r3, r2
 8002e38:	009b      	lsls	r3, r3, #2
 8002e3a:	4413      	add	r3, r2
 8002e3c:	00db      	lsls	r3, r3, #3
 8002e3e:	440b      	add	r3, r1
 8002e40:	3324      	adds	r3, #36	; 0x24
 8002e42:	2203      	movs	r2, #3
 8002e44:	701a      	strb	r2, [r3, #0]
 8002e46:	e088      	b.n	8002f5a <L6474_StepClockHandler+0x59a>
        if (speed > devicePrm[deviceId].minSpeed)
 8002e48:	79fa      	ldrb	r2, [r7, #7]
 8002e4a:	4915      	ldr	r1, [pc, #84]	; (8002ea0 <L6474_StepClockHandler+0x4e0>)
 8002e4c:	4613      	mov	r3, r2
 8002e4e:	009b      	lsls	r3, r3, #2
 8002e50:	4413      	add	r3, r2
 8002e52:	00db      	lsls	r3, r3, #3
 8002e54:	440b      	add	r3, r1
 8002e56:	331e      	adds	r3, #30
 8002e58:	881b      	ldrh	r3, [r3, #0]
 8002e5a:	b29b      	uxth	r3, r3
 8002e5c:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 8002e5e:	429a      	cmp	r2, r3
 8002e60:	f240 8082 	bls.w	8002f68 <L6474_StepClockHandler+0x5a8>
          bool speedUpdated = FALSE;
 8002e64:	2300      	movs	r3, #0
 8002e66:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
          if (speed == 0) speed =1;
 8002e6a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d101      	bne.n	8002e74 <L6474_StepClockHandler+0x4b4>
 8002e70:	2301      	movs	r3, #1
 8002e72:	857b      	strh	r3, [r7, #42]	; 0x2a
          devicePrm[deviceId].accu += deceleration / speed;
 8002e74:	79fa      	ldrb	r2, [r7, #7]
 8002e76:	490a      	ldr	r1, [pc, #40]	; (8002ea0 <L6474_StepClockHandler+0x4e0>)
 8002e78:	4613      	mov	r3, r2
 8002e7a:	009b      	lsls	r3, r3, #2
 8002e7c:	4413      	add	r3, r2
 8002e7e:	00db      	lsls	r3, r3, #3
 8002e80:	440b      	add	r3, r1
 8002e82:	6819      	ldr	r1, [r3, #0]
 8002e84:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002e86:	69ba      	ldr	r2, [r7, #24]
 8002e88:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e8c:	79fa      	ldrb	r2, [r7, #7]
 8002e8e:	4419      	add	r1, r3
 8002e90:	4803      	ldr	r0, [pc, #12]	; (8002ea0 <L6474_StepClockHandler+0x4e0>)
 8002e92:	4613      	mov	r3, r2
 8002e94:	009b      	lsls	r3, r3, #2
 8002e96:	4413      	add	r3, r2
 8002e98:	00db      	lsls	r3, r3, #3
 8002e9a:	4403      	add	r3, r0
 8002e9c:	6019      	str	r1, [r3, #0]
          while (devicePrm[deviceId].accu >= (0X10000L))
 8002e9e:	e01c      	b.n	8002eda <L6474_StepClockHandler+0x51a>
 8002ea0:	200003f0 	.word	0x200003f0
            devicePrm[deviceId].accu -= (0X10000L);
 8002ea4:	79fa      	ldrb	r2, [r7, #7]
 8002ea6:	4934      	ldr	r1, [pc, #208]	; (8002f78 <L6474_StepClockHandler+0x5b8>)
 8002ea8:	4613      	mov	r3, r2
 8002eaa:	009b      	lsls	r3, r3, #2
 8002eac:	4413      	add	r3, r2
 8002eae:	00db      	lsls	r3, r3, #3
 8002eb0:	440b      	add	r3, r1
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	79fa      	ldrb	r2, [r7, #7]
 8002eb6:	f5a3 3180 	sub.w	r1, r3, #65536	; 0x10000
 8002eba:	482f      	ldr	r0, [pc, #188]	; (8002f78 <L6474_StepClockHandler+0x5b8>)
 8002ebc:	4613      	mov	r3, r2
 8002ebe:	009b      	lsls	r3, r3, #2
 8002ec0:	4413      	add	r3, r2
 8002ec2:	00db      	lsls	r3, r3, #3
 8002ec4:	4403      	add	r3, r0
 8002ec6:	6019      	str	r1, [r3, #0]
            if (speed > 1)
 8002ec8:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002eca:	2b01      	cmp	r3, #1
 8002ecc:	d902      	bls.n	8002ed4 <L6474_StepClockHandler+0x514>
              speed -=1;
 8002ece:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002ed0:	3b01      	subs	r3, #1
 8002ed2:	857b      	strh	r3, [r7, #42]	; 0x2a
            speedUpdated = TRUE;
 8002ed4:	2301      	movs	r3, #1
 8002ed6:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
          while (devicePrm[deviceId].accu >= (0X10000L))
 8002eda:	79fa      	ldrb	r2, [r7, #7]
 8002edc:	4926      	ldr	r1, [pc, #152]	; (8002f78 <L6474_StepClockHandler+0x5b8>)
 8002ede:	4613      	mov	r3, r2
 8002ee0:	009b      	lsls	r3, r3, #2
 8002ee2:	4413      	add	r3, r2
 8002ee4:	00db      	lsls	r3, r3, #3
 8002ee6:	440b      	add	r3, r1
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002eee:	d2d9      	bcs.n	8002ea4 <L6474_StepClockHandler+0x4e4>
          if (speedUpdated)
 8002ef0:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d037      	beq.n	8002f68 <L6474_StepClockHandler+0x5a8>
            if (speed < devicePrm[deviceId].minSpeed)
 8002ef8:	79fa      	ldrb	r2, [r7, #7]
 8002efa:	491f      	ldr	r1, [pc, #124]	; (8002f78 <L6474_StepClockHandler+0x5b8>)
 8002efc:	4613      	mov	r3, r2
 8002efe:	009b      	lsls	r3, r3, #2
 8002f00:	4413      	add	r3, r2
 8002f02:	00db      	lsls	r3, r3, #3
 8002f04:	440b      	add	r3, r1
 8002f06:	331e      	adds	r3, #30
 8002f08:	881b      	ldrh	r3, [r3, #0]
 8002f0a:	b29b      	uxth	r3, r3
 8002f0c:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 8002f0e:	429a      	cmp	r2, r3
 8002f10:	d209      	bcs.n	8002f26 <L6474_StepClockHandler+0x566>
              speed = devicePrm[deviceId].minSpeed;
 8002f12:	79fa      	ldrb	r2, [r7, #7]
 8002f14:	4918      	ldr	r1, [pc, #96]	; (8002f78 <L6474_StepClockHandler+0x5b8>)
 8002f16:	4613      	mov	r3, r2
 8002f18:	009b      	lsls	r3, r3, #2
 8002f1a:	4413      	add	r3, r2
 8002f1c:	00db      	lsls	r3, r3, #3
 8002f1e:	440b      	add	r3, r1
 8002f20:	331e      	adds	r3, #30
 8002f22:	881b      	ldrh	r3, [r3, #0]
 8002f24:	857b      	strh	r3, [r7, #42]	; 0x2a
            devicePrm[deviceId].speed = speed;
 8002f26:	79fa      	ldrb	r2, [r7, #7]
 8002f28:	4913      	ldr	r1, [pc, #76]	; (8002f78 <L6474_StepClockHandler+0x5b8>)
 8002f2a:	4613      	mov	r3, r2
 8002f2c:	009b      	lsls	r3, r3, #2
 8002f2e:	4413      	add	r3, r2
 8002f30:	00db      	lsls	r3, r3, #3
 8002f32:	440b      	add	r3, r1
 8002f34:	3320      	adds	r3, #32
 8002f36:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 8002f38:	801a      	strh	r2, [r3, #0]
            L6474_ApplySpeed(deviceId, devicePrm[deviceId].speed);
 8002f3a:	79fa      	ldrb	r2, [r7, #7]
 8002f3c:	490e      	ldr	r1, [pc, #56]	; (8002f78 <L6474_StepClockHandler+0x5b8>)
 8002f3e:	4613      	mov	r3, r2
 8002f40:	009b      	lsls	r3, r3, #2
 8002f42:	4413      	add	r3, r2
 8002f44:	00db      	lsls	r3, r3, #3
 8002f46:	440b      	add	r3, r1
 8002f48:	3320      	adds	r3, #32
 8002f4a:	881b      	ldrh	r3, [r3, #0]
 8002f4c:	b29a      	uxth	r2, r3
 8002f4e:	79fb      	ldrb	r3, [r7, #7]
 8002f50:	4611      	mov	r1, r2
 8002f52:	4618      	mov	r0, r3
 8002f54:	f7ff f88e 	bl	8002074 <L6474_ApplySpeed>
      break;
 8002f58:	e006      	b.n	8002f68 <L6474_StepClockHandler+0x5a8>
 8002f5a:	e005      	b.n	8002f68 <L6474_StepClockHandler+0x5a8>
      break;
 8002f5c:	bf00      	nop
 8002f5e:	e004      	b.n	8002f6a <L6474_StepClockHandler+0x5aa>
        break;
 8002f60:	bf00      	nop
 8002f62:	e002      	b.n	8002f6a <L6474_StepClockHandler+0x5aa>
      break;
 8002f64:	bf00      	nop
 8002f66:	e000      	b.n	8002f6a <L6474_StepClockHandler+0x5aa>
      break;
 8002f68:	bf00      	nop
    }
  }  
  /* Set isr flag */
  isrFlag = FALSE;
 8002f6a:	4b04      	ldr	r3, [pc, #16]	; (8002f7c <L6474_StepClockHandler+0x5bc>)
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	701a      	strb	r2, [r3, #0]
}
 8002f70:	bf00      	nop
 8002f72:	3730      	adds	r7, #48	; 0x30
 8002f74:	46bd      	mov	sp, r7
 8002f76:	bd80      	pop	{r7, pc}
 8002f78:	200003f0 	.word	0x200003f0
 8002f7c:	200003ed 	.word	0x200003ed

08002f80 <L6474_Ocd_Th_to_Par>:
 * @brief Converts mA in compatible values for OCD_TH register
 * @param[in] Tval
 * @retval OCD_TH values
 **********************************************************/
inline uint8_t L6474_Ocd_Th_to_Par(float Tval)
{
 8002f80:	b480      	push	{r7}
 8002f82:	b083      	sub	sp, #12
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	ed87 0a01 	vstr	s0, [r7, #4]
  return ((uint8_t)(((Tval - 375)*0.002666f)+0.5f));
 8002f8a:	edd7 7a01 	vldr	s15, [r7, #4]
 8002f8e:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8002fc0 <L6474_Ocd_Th_to_Par+0x40>
 8002f92:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002f96:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 8002fc4 <L6474_Ocd_Th_to_Par+0x44>
 8002f9a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002f9e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002fa2:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002fa6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002faa:	edc7 7a00 	vstr	s15, [r7]
 8002fae:	783b      	ldrb	r3, [r7, #0]
 8002fb0:	b2db      	uxtb	r3, r3
}
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	370c      	adds	r7, #12
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fbc:	4770      	bx	lr
 8002fbe:	bf00      	nop
 8002fc0:	43bb8000 	.word	0x43bb8000
 8002fc4:	3b2eb80f 	.word	0x3b2eb80f

08002fc8 <L6474_Tval_Current_to_Par>:
 * @brief Converts mA in compatible values for TVAL register 
 * @param[in] Tval
 * @retval TVAL values
 **********************************************************/
inline uint8_t L6474_Tval_Current_to_Par(float Tval)
{
 8002fc8:	b480      	push	{r7}
 8002fca:	b083      	sub	sp, #12
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	ed87 0a01 	vstr	s0, [r7, #4]
  return ((uint8_t)(((Tval - 31.25f)*0.032f)+0.5f));
 8002fd2:	edd7 7a01 	vldr	s15, [r7, #4]
 8002fd6:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8003008 <L6474_Tval_Current_to_Par+0x40>
 8002fda:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002fde:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 800300c <L6474_Tval_Current_to_Par+0x44>
 8002fe2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002fe6:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002fea:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002fee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002ff2:	edc7 7a00 	vstr	s15, [r7]
 8002ff6:	783b      	ldrb	r3, [r7, #0]
 8002ff8:	b2db      	uxtb	r3, r3
}
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	370c      	adds	r7, #12
 8002ffe:	46bd      	mov	sp, r7
 8003000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003004:	4770      	bx	lr
 8003006:	bf00      	nop
 8003008:	41fa0000 	.word	0x41fa0000
 800300c:	3d03126f 	.word	0x3d03126f

08003010 <L6474_Tmin_Time_to_Par>:
 * for TON_MIN register
 * @param[in] Tmin
 * @retval TON_MIN values
 **********************************************************/
inline uint8_t L6474_Tmin_Time_to_Par(float Tmin)
{
 8003010:	b480      	push	{r7}
 8003012:	b083      	sub	sp, #12
 8003014:	af00      	add	r7, sp, #0
 8003016:	ed87 0a01 	vstr	s0, [r7, #4]
  return ((uint8_t)(((Tmin - 0.5f)*2.0f)+0.5f));
 800301a:	edd7 7a01 	vldr	s15, [r7, #4]
 800301e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8003022:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003026:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800302a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800302e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003032:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003036:	edc7 7a00 	vstr	s15, [r7]
 800303a:	783b      	ldrb	r3, [r7, #0]
 800303c:	b2db      	uxtb	r3, r3
}
 800303e:	4618      	mov	r0, r3
 8003040:	370c      	adds	r7, #12
 8003042:	46bd      	mov	sp, r7
 8003044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003048:	4770      	bx	lr
	...

0800304c <L6474_WriteBytes>:
 * @param[in] pByteToTransmit pointer to the byte to transmit
 * @param[in] pReceivedByte pointer to the received byte
 * @retval None
 **********************************************************/
void L6474_WriteBytes(uint8_t *pByteToTransmit, uint8_t *pReceivedByte)
{
 800304c:	b580      	push	{r7, lr}
 800304e:	b082      	sub	sp, #8
 8003050:	af00      	add	r7, sp, #0
 8003052:	6078      	str	r0, [r7, #4]
 8003054:	6039      	str	r1, [r7, #0]
  if (L6474_Board_SpiWriteBytes(pByteToTransmit, pReceivedByte, numberOfDevices) != 0)
 8003056:	4b0d      	ldr	r3, [pc, #52]	; (800308c <L6474_WriteBytes+0x40>)
 8003058:	781b      	ldrb	r3, [r3, #0]
 800305a:	b2db      	uxtb	r3, r3
 800305c:	461a      	mov	r2, r3
 800305e:	6839      	ldr	r1, [r7, #0]
 8003060:	6878      	ldr	r0, [r7, #4]
 8003062:	f001 fa93 	bl	800458c <L6474_Board_SpiWriteBytes>
 8003066:	4603      	mov	r3, r0
 8003068:	2b00      	cmp	r3, #0
 800306a:	d003      	beq.n	8003074 <L6474_WriteBytes+0x28>
  {
    L6474_ErrorHandler(L6474_ERROR_1);
 800306c:	f248 0001 	movw	r0, #32769	; 0x8001
 8003070:	f7ff f91e 	bl	80022b0 <L6474_ErrorHandler>
  }
  
  if (isrFlag)
 8003074:	4b06      	ldr	r3, [pc, #24]	; (8003090 <L6474_WriteBytes+0x44>)
 8003076:	781b      	ldrb	r3, [r3, #0]
 8003078:	b2db      	uxtb	r3, r3
 800307a:	2b00      	cmp	r3, #0
 800307c:	d002      	beq.n	8003084 <L6474_WriteBytes+0x38>
  {
    spiPreemtionByIsr = TRUE;
 800307e:	4b05      	ldr	r3, [pc, #20]	; (8003094 <L6474_WriteBytes+0x48>)
 8003080:	2201      	movs	r2, #1
 8003082:	701a      	strb	r2, [r3, #0]
  }
}
 8003084:	bf00      	nop
 8003086:	3708      	adds	r7, #8
 8003088:	46bd      	mov	sp, r7
 800308a:	bd80      	pop	{r7, pc}
 800308c:	200003d0 	.word	0x200003d0
 8003090:	200003ed 	.word	0x200003ed
 8003094:	200003ec 	.word	0x200003ec

08003098 <MX_LTDC_Init>:

LTDC_HandleTypeDef hltdc;

/* LTDC init function */
void MX_LTDC_Init(void)
{
 8003098:	b580      	push	{r7, lr}
 800309a:	b08e      	sub	sp, #56	; 0x38
 800309c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 800309e:	1d3b      	adds	r3, r7, #4
 80030a0:	2234      	movs	r2, #52	; 0x34
 80030a2:	2100      	movs	r1, #0
 80030a4:	4618      	mov	r0, r3
 80030a6:	f024 f9c5 	bl	8027434 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 80030aa:	4b3a      	ldr	r3, [pc, #232]	; (8003194 <MX_LTDC_Init+0xfc>)
 80030ac:	4a3a      	ldr	r2, [pc, #232]	; (8003198 <MX_LTDC_Init+0x100>)
 80030ae:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 80030b0:	4b38      	ldr	r3, [pc, #224]	; (8003194 <MX_LTDC_Init+0xfc>)
 80030b2:	2200      	movs	r2, #0
 80030b4:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 80030b6:	4b37      	ldr	r3, [pc, #220]	; (8003194 <MX_LTDC_Init+0xfc>)
 80030b8:	2200      	movs	r2, #0
 80030ba:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 80030bc:	4b35      	ldr	r3, [pc, #212]	; (8003194 <MX_LTDC_Init+0xfc>)
 80030be:	2200      	movs	r2, #0
 80030c0:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80030c2:	4b34      	ldr	r3, [pc, #208]	; (8003194 <MX_LTDC_Init+0xfc>)
 80030c4:	2200      	movs	r2, #0
 80030c6:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 39;
 80030c8:	4b32      	ldr	r3, [pc, #200]	; (8003194 <MX_LTDC_Init+0xfc>)
 80030ca:	2227      	movs	r2, #39	; 0x27
 80030cc:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 8;
 80030ce:	4b31      	ldr	r3, [pc, #196]	; (8003194 <MX_LTDC_Init+0xfc>)
 80030d0:	2208      	movs	r2, #8
 80030d2:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 42;
 80030d4:	4b2f      	ldr	r3, [pc, #188]	; (8003194 <MX_LTDC_Init+0xfc>)
 80030d6:	222a      	movs	r2, #42	; 0x2a
 80030d8:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 11;
 80030da:	4b2e      	ldr	r3, [pc, #184]	; (8003194 <MX_LTDC_Init+0xfc>)
 80030dc:	220b      	movs	r2, #11
 80030de:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 522;
 80030e0:	4b2c      	ldr	r3, [pc, #176]	; (8003194 <MX_LTDC_Init+0xfc>)
 80030e2:	f240 220a 	movw	r2, #522	; 0x20a
 80030e6:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 283;
 80030e8:	4b2a      	ldr	r3, [pc, #168]	; (8003194 <MX_LTDC_Init+0xfc>)
 80030ea:	f240 121b 	movw	r2, #283	; 0x11b
 80030ee:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 528;
 80030f0:	4b28      	ldr	r3, [pc, #160]	; (8003194 <MX_LTDC_Init+0xfc>)
 80030f2:	f44f 7204 	mov.w	r2, #528	; 0x210
 80030f6:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 285;
 80030f8:	4b26      	ldr	r3, [pc, #152]	; (8003194 <MX_LTDC_Init+0xfc>)
 80030fa:	f240 121d 	movw	r2, #285	; 0x11d
 80030fe:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8003100:	4b24      	ldr	r3, [pc, #144]	; (8003194 <MX_LTDC_Init+0xfc>)
 8003102:	2200      	movs	r2, #0
 8003104:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8003108:	4b22      	ldr	r3, [pc, #136]	; (8003194 <MX_LTDC_Init+0xfc>)
 800310a:	2200      	movs	r2, #0
 800310c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8003110:	4b20      	ldr	r3, [pc, #128]	; (8003194 <MX_LTDC_Init+0xfc>)
 8003112:	2200      	movs	r2, #0
 8003114:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8003118:	481e      	ldr	r0, [pc, #120]	; (8003194 <MX_LTDC_Init+0xfc>)
 800311a:	f003 fa03 	bl	8006524 <HAL_LTDC_Init>
 800311e:	4603      	mov	r3, r0
 8003120:	2b00      	cmp	r3, #0
 8003122:	d001      	beq.n	8003128 <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 8003124:	f000 fabe 	bl	80036a4 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8003128:	2300      	movs	r3, #0
 800312a:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 480;
 800312c:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8003130:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 8003132:	2300      	movs	r3, #0
 8003134:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 272;
 8003136:	f44f 7388 	mov.w	r3, #272	; 0x110
 800313a:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 800313c:	2302      	movs	r3, #2
 800313e:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 8003140:	23ff      	movs	r3, #255	; 0xff
 8003142:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 8003144:	2300      	movs	r3, #0
 8003146:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8003148:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800314c:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 800314e:	2305      	movs	r3, #5
 8003150:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0;
 8003152:	2300      	movs	r3, #0
 8003154:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 480;
 8003156:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 800315a:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 272;
 800315c:	f44f 7388 	mov.w	r3, #272	; 0x110
 8003160:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 8003162:	2300      	movs	r3, #0
 8003164:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 8003168:	2300      	movs	r3, #0
 800316a:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 800316e:	2300      	movs	r3, #0
 8003170:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8003174:	1d3b      	adds	r3, r7, #4
 8003176:	2200      	movs	r2, #0
 8003178:	4619      	mov	r1, r3
 800317a:	4806      	ldr	r0, [pc, #24]	; (8003194 <MX_LTDC_Init+0xfc>)
 800317c:	f003 fb5a 	bl	8006834 <HAL_LTDC_ConfigLayer>
 8003180:	4603      	mov	r3, r0
 8003182:	2b00      	cmp	r3, #0
 8003184:	d001      	beq.n	800318a <MX_LTDC_Init+0xf2>
  {
    Error_Handler();
 8003186:	f000 fa8d 	bl	80036a4 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 800318a:	bf00      	nop
 800318c:	3738      	adds	r7, #56	; 0x38
 800318e:	46bd      	mov	sp, r7
 8003190:	bd80      	pop	{r7, pc}
 8003192:	bf00      	nop
 8003194:	20000468 	.word	0x20000468
 8003198:	50001000 	.word	0x50001000

0800319c <HAL_LTDC_MspInit>:

void HAL_LTDC_MspInit(LTDC_HandleTypeDef* ltdcHandle)
{
 800319c:	b580      	push	{r7, lr}
 800319e:	b0c0      	sub	sp, #256	; 0x100
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80031a4:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80031a8:	2200      	movs	r2, #0
 80031aa:	601a      	str	r2, [r3, #0]
 80031ac:	605a      	str	r2, [r3, #4]
 80031ae:	609a      	str	r2, [r3, #8]
 80031b0:	60da      	str	r2, [r3, #12]
 80031b2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80031b4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80031b8:	22bc      	movs	r2, #188	; 0xbc
 80031ba:	2100      	movs	r1, #0
 80031bc:	4618      	mov	r0, r3
 80031be:	f024 f939 	bl	8027434 <memset>
  if(ltdcHandle->Instance==LTDC)
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	4abd      	ldr	r2, [pc, #756]	; (80034bc <HAL_LTDC_MspInit+0x320>)
 80031c8:	4293      	cmp	r3, r2
 80031ca:	f040 8171 	bne.w	80034b0 <HAL_LTDC_MspInit+0x314>
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 80031ce:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80031d2:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.PLL3.PLL3M = 1;
 80031d4:	2301      	movs	r3, #1
 80031d6:	657b      	str	r3, [r7, #84]	; 0x54
    PeriphClkInitStruct.PLL3.PLL3N = 18;
 80031d8:	2312      	movs	r3, #18
 80031da:	65bb      	str	r3, [r7, #88]	; 0x58
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 80031dc:	2302      	movs	r3, #2
 80031de:	65fb      	str	r3, [r7, #92]	; 0x5c
    PeriphClkInitStruct.PLL3.PLL3Q = 2;
 80031e0:	2302      	movs	r3, #2
 80031e2:	663b      	str	r3, [r7, #96]	; 0x60
    PeriphClkInitStruct.PLL3.PLL3R = 1;
 80031e4:	2301      	movs	r3, #1
 80031e6:	667b      	str	r3, [r7, #100]	; 0x64
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 80031e8:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80031ec:	66bb      	str	r3, [r7, #104]	; 0x68
    PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOMEDIUM;
 80031ee:	f44f 7300 	mov.w	r3, #512	; 0x200
 80031f2:	66fb      	str	r3, [r7, #108]	; 0x6c
    PeriphClkInitStruct.PLL3.PLL3FRACN = 6144;
 80031f4:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80031f8:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80031fa:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80031fe:	4618      	mov	r0, r3
 8003200:	f004 fd5e 	bl	8007cc0 <HAL_RCCEx_PeriphCLKConfig>
 8003204:	4603      	mov	r3, r0
 8003206:	2b00      	cmp	r3, #0
 8003208:	d001      	beq.n	800320e <HAL_LTDC_MspInit+0x72>
    {
      Error_Handler();
 800320a:	f000 fa4b 	bl	80036a4 <Error_Handler>
    }

    /* LTDC clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 800320e:	4bac      	ldr	r3, [pc, #688]	; (80034c0 <HAL_LTDC_MspInit+0x324>)
 8003210:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8003214:	4aaa      	ldr	r2, [pc, #680]	; (80034c0 <HAL_LTDC_MspInit+0x324>)
 8003216:	f043 0308 	orr.w	r3, r3, #8
 800321a:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 800321e:	4ba8      	ldr	r3, [pc, #672]	; (80034c0 <HAL_LTDC_MspInit+0x324>)
 8003220:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8003224:	f003 0308 	and.w	r3, r3, #8
 8003228:	62fb      	str	r3, [r7, #44]	; 0x2c
 800322a:	6afb      	ldr	r3, [r7, #44]	; 0x2c

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800322c:	4ba4      	ldr	r3, [pc, #656]	; (80034c0 <HAL_LTDC_MspInit+0x324>)
 800322e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003232:	4aa3      	ldr	r2, [pc, #652]	; (80034c0 <HAL_LTDC_MspInit+0x324>)
 8003234:	f043 0310 	orr.w	r3, r3, #16
 8003238:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800323c:	4ba0      	ldr	r3, [pc, #640]	; (80034c0 <HAL_LTDC_MspInit+0x324>)
 800323e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003242:	f003 0310 	and.w	r3, r3, #16
 8003246:	62bb      	str	r3, [r7, #40]	; 0x28
 8003248:	6abb      	ldr	r3, [r7, #40]	; 0x28
    __HAL_RCC_GPIOI_CLK_ENABLE();
 800324a:	4b9d      	ldr	r3, [pc, #628]	; (80034c0 <HAL_LTDC_MspInit+0x324>)
 800324c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003250:	4a9b      	ldr	r2, [pc, #620]	; (80034c0 <HAL_LTDC_MspInit+0x324>)
 8003252:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003256:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800325a:	4b99      	ldr	r3, [pc, #612]	; (80034c0 <HAL_LTDC_MspInit+0x324>)
 800325c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003260:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003264:	627b      	str	r3, [r7, #36]	; 0x24
 8003266:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8003268:	4b95      	ldr	r3, [pc, #596]	; (80034c0 <HAL_LTDC_MspInit+0x324>)
 800326a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800326e:	4a94      	ldr	r2, [pc, #592]	; (80034c0 <HAL_LTDC_MspInit+0x324>)
 8003270:	f043 0320 	orr.w	r3, r3, #32
 8003274:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003278:	4b91      	ldr	r3, [pc, #580]	; (80034c0 <HAL_LTDC_MspInit+0x324>)
 800327a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800327e:	f003 0320 	and.w	r3, r3, #32
 8003282:	623b      	str	r3, [r7, #32]
 8003284:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003286:	4b8e      	ldr	r3, [pc, #568]	; (80034c0 <HAL_LTDC_MspInit+0x324>)
 8003288:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800328c:	4a8c      	ldr	r2, [pc, #560]	; (80034c0 <HAL_LTDC_MspInit+0x324>)
 800328e:	f043 0304 	orr.w	r3, r3, #4
 8003292:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003296:	4b8a      	ldr	r3, [pc, #552]	; (80034c0 <HAL_LTDC_MspInit+0x324>)
 8003298:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800329c:	f003 0304 	and.w	r3, r3, #4
 80032a0:	61fb      	str	r3, [r7, #28]
 80032a2:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80032a4:	4b86      	ldr	r3, [pc, #536]	; (80034c0 <HAL_LTDC_MspInit+0x324>)
 80032a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80032aa:	4a85      	ldr	r2, [pc, #532]	; (80034c0 <HAL_LTDC_MspInit+0x324>)
 80032ac:	f043 0301 	orr.w	r3, r3, #1
 80032b0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80032b4:	4b82      	ldr	r3, [pc, #520]	; (80034c0 <HAL_LTDC_MspInit+0x324>)
 80032b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80032ba:	f003 0301 	and.w	r3, r3, #1
 80032be:	61bb      	str	r3, [r7, #24]
 80032c0:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80032c2:	4b7f      	ldr	r3, [pc, #508]	; (80034c0 <HAL_LTDC_MspInit+0x324>)
 80032c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80032c8:	4a7d      	ldr	r2, [pc, #500]	; (80034c0 <HAL_LTDC_MspInit+0x324>)
 80032ca:	f043 0302 	orr.w	r3, r3, #2
 80032ce:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80032d2:	4b7b      	ldr	r3, [pc, #492]	; (80034c0 <HAL_LTDC_MspInit+0x324>)
 80032d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80032d8:	f003 0302 	and.w	r3, r3, #2
 80032dc:	617b      	str	r3, [r7, #20]
 80032de:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 80032e0:	4b77      	ldr	r3, [pc, #476]	; (80034c0 <HAL_LTDC_MspInit+0x324>)
 80032e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80032e6:	4a76      	ldr	r2, [pc, #472]	; (80034c0 <HAL_LTDC_MspInit+0x324>)
 80032e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80032ec:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80032f0:	4b73      	ldr	r3, [pc, #460]	; (80034c0 <HAL_LTDC_MspInit+0x324>)
 80032f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80032f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032fa:	613b      	str	r3, [r7, #16]
 80032fc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80032fe:	4b70      	ldr	r3, [pc, #448]	; (80034c0 <HAL_LTDC_MspInit+0x324>)
 8003300:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003304:	4a6e      	ldr	r2, [pc, #440]	; (80034c0 <HAL_LTDC_MspInit+0x324>)
 8003306:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800330a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800330e:	4b6c      	ldr	r3, [pc, #432]	; (80034c0 <HAL_LTDC_MspInit+0x324>)
 8003310:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003314:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003318:	60fb      	str	r3, [r7, #12]
 800331a:	68fb      	ldr	r3, [r7, #12]
    PI4     ------> LTDC_B4
    PI5     ------> LTDC_B5
    PI6     ------> LTDC_B6
    PI7     ------> LTDC_B7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 800331c:	2370      	movs	r3, #112	; 0x70
 800331e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003322:	2302      	movs	r3, #2
 8003324:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003328:	2300      	movs	r3, #0
 800332a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800332e:	2300      	movs	r3, #0
 8003330:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8003334:	230e      	movs	r3, #14
 8003336:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800333a:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 800333e:	4619      	mov	r1, r3
 8003340:	4860      	ldr	r0, [pc, #384]	; (80034c4 <HAL_LTDC_MspInit+0x328>)
 8003342:	f002 ff25 	bl	8006190 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_0|GPIO_PIN_1
 8003346:	f240 63f7 	movw	r3, #1783	; 0x6f7
 800334a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
                          |GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
                          |GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800334e:	2302      	movs	r3, #2
 8003350:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003354:	2300      	movs	r3, #0
 8003356:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800335a:	2300      	movs	r3, #0
 800335c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8003360:	230e      	movs	r3, #14
 8003362:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8003366:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 800336a:	4619      	mov	r1, r3
 800336c:	4856      	ldr	r0, [pc, #344]	; (80034c8 <HAL_LTDC_MspInit+0x32c>)
 800336e:	f002 ff0f 	bl	8006190 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003372:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003376:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800337a:	2302      	movs	r3, #2
 800337c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003380:	2300      	movs	r3, #0
 8003382:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003386:	2300      	movs	r3, #0
 8003388:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800338c:	230e      	movs	r3, #14
 800338e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003392:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8003396:	4619      	mov	r1, r3
 8003398:	484c      	ldr	r0, [pc, #304]	; (80034cc <HAL_LTDC_MspInit+0x330>)
 800339a:	f002 fef9 	bl	8006190 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800339e:	2301      	movs	r3, #1
 80033a0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033a4:	2302      	movs	r3, #2
 80033a6:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033aa:	2300      	movs	r3, #0
 80033ac:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033b0:	2300      	movs	r3, #0
 80033b2:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80033b6:	230e      	movs	r3, #14
 80033b8:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80033bc:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80033c0:	4619      	mov	r1, r3
 80033c2:	4843      	ldr	r0, [pc, #268]	; (80034d0 <HAL_LTDC_MspInit+0x334>)
 80033c4:	f002 fee4 	bl	8006190 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80033c8:	2320      	movs	r3, #32
 80033ca:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033ce:	2302      	movs	r3, #2
 80033d0:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033d4:	2300      	movs	r3, #0
 80033d6:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033da:	2300      	movs	r3, #0
 80033dc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80033e0:	230e      	movs	r3, #14
 80033e2:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80033e6:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80033ea:	4619      	mov	r1, r3
 80033ec:	4839      	ldr	r0, [pc, #228]	; (80034d4 <HAL_LTDC_MspInit+0x338>)
 80033ee:	f002 fecf 	bl	8006190 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80033f2:	2302      	movs	r3, #2
 80033f4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033f8:	2302      	movs	r3, #2
 80033fa:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033fe:	2300      	movs	r3, #0
 8003400:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003404:	2300      	movs	r3, #0
 8003406:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 800340a:	2309      	movs	r3, #9
 800340c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003410:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8003414:	4619      	mov	r1, r3
 8003416:	4830      	ldr	r0, [pc, #192]	; (80034d8 <HAL_LTDC_MspInit+0x33c>)
 8003418:	f002 feba 	bl	8006190 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_13|GPIO_PIN_15;
 800341c:	f44f 4322 	mov.w	r3, #41472	; 0xa200
 8003420:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003424:	2302      	movs	r3, #2
 8003426:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800342a:	2300      	movs	r3, #0
 800342c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003430:	2300      	movs	r3, #0
 8003432:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8003436:	230e      	movs	r3, #14
 8003438:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800343c:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8003440:	4619      	mov	r1, r3
 8003442:	4826      	ldr	r0, [pc, #152]	; (80034dc <HAL_LTDC_MspInit+0x340>)
 8003444:	f002 fea4 	bl	8006190 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_11;
 8003448:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 800344c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003450:	2302      	movs	r3, #2
 8003452:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003456:	2300      	movs	r3, #0
 8003458:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800345c:	2300      	movs	r3, #0
 800345e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8003462:	230e      	movs	r3, #14
 8003464:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003468:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 800346c:	4619      	mov	r1, r3
 800346e:	481c      	ldr	r0, [pc, #112]	; (80034e0 <HAL_LTDC_MspInit+0x344>)
 8003470:	f002 fe8e 	bl	8006190 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003474:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003478:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800347c:	2302      	movs	r3, #2
 800347e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003482:	2300      	movs	r3, #0
 8003484:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003488:	2300      	movs	r3, #0
 800348a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 800348e:	2309      	movs	r3, #9
 8003490:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003494:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8003498:	4619      	mov	r1, r3
 800349a:	4811      	ldr	r0, [pc, #68]	; (80034e0 <HAL_LTDC_MspInit+0x344>)
 800349c:	f002 fe78 	bl	8006190 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 80034a0:	2200      	movs	r2, #0
 80034a2:	2105      	movs	r1, #5
 80034a4:	2058      	movs	r0, #88	; 0x58
 80034a6:	f002 fc4f 	bl	8005d48 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 80034aa:	2058      	movs	r0, #88	; 0x58
 80034ac:	f002 fc66 	bl	8005d7c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }
}
 80034b0:	bf00      	nop
 80034b2:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80034b6:	46bd      	mov	sp, r7
 80034b8:	bd80      	pop	{r7, pc}
 80034ba:	bf00      	nop
 80034bc:	50001000 	.word	0x50001000
 80034c0:	58024400 	.word	0x58024400
 80034c4:	58021000 	.word	0x58021000
 80034c8:	58022000 	.word	0x58022000
 80034cc:	58021400 	.word	0x58021400
 80034d0:	58020800 	.word	0x58020800
 80034d4:	58020000 	.word	0x58020000
 80034d8:	58020400 	.word	0x58020400
 80034dc:	58021c00 	.word	0x58021c00
 80034e0:	58021800 	.word	0x58021800

080034e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80034e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80034e6:	b089      	sub	sp, #36	; 0x24
 80034e8:	af08      	add	r7, sp, #32
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80034ea:	f001 f8b5 	bl	8004658 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80034ee:	f000 f837 	bl	8003560 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80034f2:	f7fd fad7 	bl	8000aa4 <MX_GPIO_Init>
  MX_SPI2_Init();
 80034f6:	f000 f9a9 	bl	800384c <MX_SPI2_Init>
  MX_ADC3_Init();
 80034fa:	f7fd f8c3 	bl	8000684 <MX_ADC3_Init>
  MX_UART5_Init();
 80034fe:	f000 fd17 	bl	8003f30 <MX_UART5_Init>
  MX_I2C1_SMBUS_Init();
 8003502:	f7fd fba1 	bl	8000c48 <MX_I2C1_SMBUS_Init>
  MX_DMA2D_Init();
 8003506:	f7fd f9af 	bl	8000868 <MX_DMA2D_Init>
  MX_LTDC_Init();
 800350a:	f7ff fdc5 	bl	8003098 <MX_LTDC_Init>
  MX_CRC_Init();
 800350e:	f7fd f967 	bl	80007e0 <MX_CRC_Init>
  MX_TIM2_Init();
 8003512:	f000 fc59 	bl	8003dc8 <MX_TIM2_Init>
  MX_TouchGFX_Init();
 8003516:	f00d f999 	bl	801084c <MX_TouchGFX_Init>
  /* USER CODE BEGIN 2 */
  L6474_SetRegisterToGivenValues(0,gL6474InitParams);
 800351a:	4e0f      	ldr	r6, [pc, #60]	; (8003558 <main+0x74>)
 800351c:	466d      	mov	r5, sp
 800351e:	f106 040c 	add.w	r4, r6, #12
 8003522:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003524:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003526:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800352a:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 800352e:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8003532:	2000      	movs	r0, #0
 8003534:	f7ff f87a 	bl	800262c <L6474_SetRegisterToGivenValues>
  BSP_MotorControl_Init(BSP_MOTOR_CONTROL_BOARD_ID_L6474,1);
 8003538:	2101      	movs	r1, #1
 800353a:	f641 104a 	movw	r0, #6474	; 0x194a
 800353e:	f000 f90b 	bl	8003758 <BSP_MotorControl_Init>
  HAL_ADC_Start(&hadc3); // internal_temp measurement
 8003542:	4806      	ldr	r0, [pc, #24]	; (800355c <main+0x78>)
 8003544:	f001 fc98 	bl	8004e78 <HAL_ADC_Start>


  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8003548:	f009 fd94 	bl	800d074 <osKernelInitialize>
  MX_FREERTOS_Init();
 800354c:	f7fd f9e8 	bl	8000920 <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 8003550:	f009 fdb4 	bl	800d0bc <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8003554:	e7fe      	b.n	8003554 <main+0x70>
 8003556:	bf00      	nop
 8003558:	2000012c 	.word	0x2000012c
 800355c:	20000270 	.word	0x20000270

08003560 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003560:	b580      	push	{r7, lr}
 8003562:	b09c      	sub	sp, #112	; 0x70
 8003564:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003566:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800356a:	224c      	movs	r2, #76	; 0x4c
 800356c:	2100      	movs	r1, #0
 800356e:	4618      	mov	r0, r3
 8003570:	f023 ff60 	bl	8027434 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003574:	1d3b      	adds	r3, r7, #4
 8003576:	2220      	movs	r2, #32
 8003578:	2100      	movs	r1, #0
 800357a:	4618      	mov	r0, r3
 800357c:	f023 ff5a 	bl	8027434 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8003580:	2002      	movs	r0, #2
 8003582:	f003 fb67 	bl	8006c54 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003586:	2300      	movs	r3, #0
 8003588:	603b      	str	r3, [r7, #0]
 800358a:	4b34      	ldr	r3, [pc, #208]	; (800365c <SystemClock_Config+0xfc>)
 800358c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800358e:	4a33      	ldr	r2, [pc, #204]	; (800365c <SystemClock_Config+0xfc>)
 8003590:	f023 0301 	bic.w	r3, r3, #1
 8003594:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003596:	4b31      	ldr	r3, [pc, #196]	; (800365c <SystemClock_Config+0xfc>)
 8003598:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800359a:	f003 0301 	and.w	r3, r3, #1
 800359e:	603b      	str	r3, [r7, #0]
 80035a0:	4b2f      	ldr	r3, [pc, #188]	; (8003660 <SystemClock_Config+0x100>)
 80035a2:	699b      	ldr	r3, [r3, #24]
 80035a4:	4a2e      	ldr	r2, [pc, #184]	; (8003660 <SystemClock_Config+0x100>)
 80035a6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80035aa:	6193      	str	r3, [r2, #24]
 80035ac:	4b2c      	ldr	r3, [pc, #176]	; (8003660 <SystemClock_Config+0x100>)
 80035ae:	699b      	ldr	r3, [r3, #24]
 80035b0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80035b4:	603b      	str	r3, [r7, #0]
 80035b6:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80035b8:	bf00      	nop
 80035ba:	4b29      	ldr	r3, [pc, #164]	; (8003660 <SystemClock_Config+0x100>)
 80035bc:	699b      	ldr	r3, [r3, #24]
 80035be:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80035c2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80035c6:	d1f8      	bne.n	80035ba <SystemClock_Config+0x5a>
  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 80035c8:	4b26      	ldr	r3, [pc, #152]	; (8003664 <SystemClock_Config+0x104>)
 80035ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035cc:	f023 0303 	bic.w	r3, r3, #3
 80035d0:	4a24      	ldr	r2, [pc, #144]	; (8003664 <SystemClock_Config+0x104>)
 80035d2:	f043 0302 	orr.w	r3, r3, #2
 80035d6:	6293      	str	r3, [r2, #40]	; 0x28
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80035d8:	2301      	movs	r3, #1
 80035da:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80035dc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80035e0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80035e2:	2302      	movs	r3, #2
 80035e4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80035e6:	2302      	movs	r3, #2
 80035e8:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 80035ea:	2301      	movs	r3, #1
 80035ec:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 100;
 80035ee:	2364      	movs	r3, #100	; 0x64
 80035f0:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80035f2:	2302      	movs	r3, #2
 80035f4:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80035f6:	2304      	movs	r3, #4
 80035f8:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80035fa:	2302      	movs	r3, #2
 80035fc:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80035fe:	230c      	movs	r3, #12
 8003600:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8003602:	2300      	movs	r3, #0
 8003604:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8003606:	2300      	movs	r3, #0
 8003608:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800360a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800360e:	4618      	mov	r0, r3
 8003610:	f003 fb5a 	bl	8006cc8 <HAL_RCC_OscConfig>
 8003614:	4603      	mov	r3, r0
 8003616:	2b00      	cmp	r3, #0
 8003618:	d001      	beq.n	800361e <SystemClock_Config+0xbe>
  {
    Error_Handler();
 800361a:	f000 f843 	bl	80036a4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800361e:	233f      	movs	r3, #63	; 0x3f
 8003620:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003622:	2303      	movs	r3, #3
 8003624:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8003626:	2300      	movs	r3, #0
 8003628:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 800362a:	2308      	movs	r3, #8
 800362c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800362e:	2340      	movs	r3, #64	; 0x40
 8003630:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8003632:	2340      	movs	r3, #64	; 0x40
 8003634:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8003636:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800363a:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 800363c:	2340      	movs	r3, #64	; 0x40
 800363e:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8003640:	1d3b      	adds	r3, r7, #4
 8003642:	2102      	movs	r1, #2
 8003644:	4618      	mov	r0, r3
 8003646:	f003 ff6d 	bl	8007524 <HAL_RCC_ClockConfig>
 800364a:	4603      	mov	r3, r0
 800364c:	2b00      	cmp	r3, #0
 800364e:	d001      	beq.n	8003654 <SystemClock_Config+0xf4>
  {
    Error_Handler();
 8003650:	f000 f828 	bl	80036a4 <Error_Handler>
  }
}
 8003654:	bf00      	nop
 8003656:	3770      	adds	r7, #112	; 0x70
 8003658:	46bd      	mov	sp, r7
 800365a:	bd80      	pop	{r7, pc}
 800365c:	58000400 	.word	0x58000400
 8003660:	58024800 	.word	0x58024800
 8003664:	58024400 	.word	0x58024400

08003668 <MyFlagInterruptHandler>:

/* USER CODE BEGIN 4 */
void MyFlagInterruptHandler(void)
{
 8003668:	b580      	push	{r7, lr}
 800366a:	b082      	sub	sp, #8
 800366c:	af00      	add	r7, sp, #0
  /* Get the value of the status register via the L6474 command GET_STATUS */
  uint16_t statusRegister = BSP_MotorControl_CmdGetStatus(0);
 800366e:	2000      	movs	r0, #0
 8003670:	f000 f8c6 	bl	8003800 <BSP_MotorControl_CmdGetStatus>
 8003674:	4603      	mov	r3, r0
 8003676:	80fb      	strh	r3, [r7, #6]
  {
    //overcurrent detection
    // Action to be customized
  }

}
 8003678:	bf00      	nop
 800367a:	3708      	adds	r7, #8
 800367c:	46bd      	mov	sp, r7
 800367e:	bd80      	pop	{r7, pc}

08003680 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003680:	b580      	push	{r7, lr}
 8003682:	b082      	sub	sp, #8
 8003684:	af00      	add	r7, sp, #0
 8003686:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM3) {
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	4a04      	ldr	r2, [pc, #16]	; (80036a0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800368e:	4293      	cmp	r3, r2
 8003690:	d101      	bne.n	8003696 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8003692:	f001 f81d 	bl	80046d0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8003696:	bf00      	nop
 8003698:	3708      	adds	r7, #8
 800369a:	46bd      	mov	sp, r7
 800369c:	bd80      	pop	{r7, pc}
 800369e:	bf00      	nop
 80036a0:	40000400 	.word	0x40000400

080036a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80036a4:	b480      	push	{r7}
 80036a6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80036a8:	b672      	cpsid	i
}
 80036aa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80036ac:	e7fe      	b.n	80036ac <Error_Handler+0x8>

080036ae <Powerstep01_GetMotorHandle>:
 * @{
 */
/// Get motor handle for L6474
__weak motorDrv_t* L6474_GetMotorHandle(void){return ((motorDrv_t* )0);}
/// Get motor handle for Powerstep
__weak motorDrv_t* Powerstep01_GetMotorHandle(void){return ((motorDrv_t* )0);}
 80036ae:	b480      	push	{r7}
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	2300      	movs	r3, #0
 80036b4:	4618      	mov	r0, r3
 80036b6:	46bd      	mov	sp, r7
 80036b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036bc:	4770      	bx	lr

080036be <L6206_GetMotorHandle>:
/// Get motor handle for L6206
__weak motorDrv_t* L6206_GetMotorHandle(void){return ((motorDrv_t* )0);}
 80036be:	b480      	push	{r7}
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	2300      	movs	r3, #0
 80036c4:	4618      	mov	r0, r3
 80036c6:	46bd      	mov	sp, r7
 80036c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036cc:	4770      	bx	lr

080036ce <L6208_GetMotorHandle>:
/// Get motor handle for L6208
__weak motorDrv_t* L6208_GetMotorHandle(void){return ((motorDrv_t* )0);}
 80036ce:	b480      	push	{r7}
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	2300      	movs	r3, #0
 80036d4:	4618      	mov	r0, r3
 80036d6:	46bd      	mov	sp, r7
 80036d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036dc:	4770      	bx	lr
	...

080036e0 <BSP_MotorControl_AttachFlagInterrupt>:
 * @param[in] callback Name of the callback to attach 
 * to the Flag interrupt Hanlder
 * @retval None
 **********************************************************/
void BSP_MotorControl_AttachFlagInterrupt(void (*callback)(void))
{
 80036e0:	b580      	push	{r7, lr}
 80036e2:	b082      	sub	sp, #8
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	6078      	str	r0, [r7, #4]
  if ((motorDrvHandle != 0)&&(motorDrvHandle->AttachFlagInterrupt != 0))
 80036e8:	4b0b      	ldr	r3, [pc, #44]	; (8003718 <BSP_MotorControl_AttachFlagInterrupt+0x38>)
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d00a      	beq.n	8003706 <BSP_MotorControl_AttachFlagInterrupt+0x26>
 80036f0:	4b09      	ldr	r3, [pc, #36]	; (8003718 <BSP_MotorControl_AttachFlagInterrupt+0x38>)
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	68db      	ldr	r3, [r3, #12]
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d005      	beq.n	8003706 <BSP_MotorControl_AttachFlagInterrupt+0x26>
  {
    motorDrvHandle->AttachFlagInterrupt(callback);
 80036fa:	4b07      	ldr	r3, [pc, #28]	; (8003718 <BSP_MotorControl_AttachFlagInterrupt+0x38>)
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	68db      	ldr	r3, [r3, #12]
 8003700:	6878      	ldr	r0, [r7, #4]
 8003702:	4798      	blx	r3
 8003704:	e004      	b.n	8003710 <BSP_MotorControl_AttachFlagInterrupt+0x30>
  }
  else
  {
    MOTOR_CONTROL_ERROR_UNDEFINED_FUNCTION(2);
 8003706:	f640 0002 	movw	r0, #2050	; 0x802
 800370a:	f000 f807 	bl	800371c <BSP_MotorControl_ErrorHandler>
  }  
}
 800370e:	bf00      	nop
 8003710:	bf00      	nop
 8003712:	3708      	adds	r7, #8
 8003714:	46bd      	mov	sp, r7
 8003716:	bd80      	pop	{r7, pc}
 8003718:	20000510 	.word	0x20000510

0800371c <BSP_MotorControl_ErrorHandler>:
 * @brief Motor control error handler
 * @param[in] error number of the error
 * @retval None
 **********************************************************/
void BSP_MotorControl_ErrorHandler(uint16_t error)
{
 800371c:	b580      	push	{r7, lr}
 800371e:	b082      	sub	sp, #8
 8003720:	af00      	add	r7, sp, #0
 8003722:	4603      	mov	r3, r0
 8003724:	80fb      	strh	r3, [r7, #6]
  if ((motorDrvHandle != 0)&&(motorDrvHandle->ErrorHandler != 0))
 8003726:	4b0b      	ldr	r3, [pc, #44]	; (8003754 <BSP_MotorControl_ErrorHandler+0x38>)
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	2b00      	cmp	r3, #0
 800372c:	d00d      	beq.n	800374a <BSP_MotorControl_ErrorHandler+0x2e>
 800372e:	4b09      	ldr	r3, [pc, #36]	; (8003754 <BSP_MotorControl_ErrorHandler+0x38>)
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003736:	2b00      	cmp	r3, #0
 8003738:	d007      	beq.n	800374a <BSP_MotorControl_ErrorHandler+0x2e>
  {
    motorDrvHandle->ErrorHandler(error);
 800373a:	4b06      	ldr	r3, [pc, #24]	; (8003754 <BSP_MotorControl_ErrorHandler+0x38>)
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003742:	88fa      	ldrh	r2, [r7, #6]
 8003744:	4610      	mov	r0, r2
 8003746:	4798      	blx	r3
    while(1)
    {
      /* Infinite loop as Error handler must be defined*/
    }
  }
}
 8003748:	e000      	b.n	800374c <BSP_MotorControl_ErrorHandler+0x30>
    while(1)
 800374a:	e7fe      	b.n	800374a <BSP_MotorControl_ErrorHandler+0x2e>
}
 800374c:	3708      	adds	r7, #8
 800374e:	46bd      	mov	sp, r7
 8003750:	bd80      	pop	{r7, pc}
 8003752:	bf00      	nop
 8003754:	20000510 	.word	0x20000510

08003758 <BSP_MotorControl_Init>:
 * @param[in] id Component Id (L6474, Powerstep01,...)
 * @param[in] nbDevices Number of motor devices to use (from 1 to MAX_NUMBER_OF_DEVICES)
 * @retval None
 **********************************************************/
void BSP_MotorControl_Init(uint16_t id, uint8_t nbDevices)
{
 8003758:	b580      	push	{r7, lr}
 800375a:	b082      	sub	sp, #8
 800375c:	af00      	add	r7, sp, #0
 800375e:	4603      	mov	r3, r0
 8003760:	460a      	mov	r2, r1
 8003762:	80fb      	strh	r3, [r7, #6]
 8003764:	4613      	mov	r3, r2
 8003766:	717b      	strb	r3, [r7, #5]
  MotorControlBoardId = id;
 8003768:	4a23      	ldr	r2, [pc, #140]	; (80037f8 <BSP_MotorControl_Init+0xa0>)
 800376a:	88fb      	ldrh	r3, [r7, #6]
 800376c:	8013      	strh	r3, [r2, #0]
  
  if (id == BSP_MOTOR_CONTROL_BOARD_ID_L6474)
 800376e:	88fb      	ldrh	r3, [r7, #6]
 8003770:	f641 124a 	movw	r2, #6474	; 0x194a
 8003774:	4293      	cmp	r3, r2
 8003776:	d105      	bne.n	8003784 <BSP_MotorControl_Init+0x2c>
  {
    motorDrvHandle = L6474_GetMotorHandle();
 8003778:	f7fd fe84 	bl	8001484 <L6474_GetMotorHandle>
 800377c:	4603      	mov	r3, r0
 800377e:	4a1f      	ldr	r2, [pc, #124]	; (80037fc <BSP_MotorControl_Init+0xa4>)
 8003780:	6013      	str	r3, [r2, #0]
 8003782:	e020      	b.n	80037c6 <BSP_MotorControl_Init+0x6e>
  }
  else if (id == BSP_MOTOR_CONTROL_BOARD_ID_POWERSTEP01)
 8003784:	88fb      	ldrh	r3, [r7, #6]
 8003786:	2b01      	cmp	r3, #1
 8003788:	d105      	bne.n	8003796 <BSP_MotorControl_Init+0x3e>
  {
    motorDrvHandle = Powerstep01_GetMotorHandle();
 800378a:	f7ff ff90 	bl	80036ae <Powerstep01_GetMotorHandle>
 800378e:	4603      	mov	r3, r0
 8003790:	4a1a      	ldr	r2, [pc, #104]	; (80037fc <BSP_MotorControl_Init+0xa4>)
 8003792:	6013      	str	r3, [r2, #0]
 8003794:	e017      	b.n	80037c6 <BSP_MotorControl_Init+0x6e>
  }
  else if (id == BSP_MOTOR_CONTROL_BOARD_ID_L6206)
 8003796:	88fb      	ldrh	r3, [r7, #6]
 8003798:	f641 023e 	movw	r2, #6206	; 0x183e
 800379c:	4293      	cmp	r3, r2
 800379e:	d105      	bne.n	80037ac <BSP_MotorControl_Init+0x54>
  {
    motorDrvHandle = L6206_GetMotorHandle();
 80037a0:	f7ff ff8d 	bl	80036be <L6206_GetMotorHandle>
 80037a4:	4603      	mov	r3, r0
 80037a6:	4a15      	ldr	r2, [pc, #84]	; (80037fc <BSP_MotorControl_Init+0xa4>)
 80037a8:	6013      	str	r3, [r2, #0]
 80037aa:	e00c      	b.n	80037c6 <BSP_MotorControl_Init+0x6e>
  }
  else if (id == BSP_MOTOR_CONTROL_BOARD_ID_L6208)
 80037ac:	88fb      	ldrh	r3, [r7, #6]
 80037ae:	f5b3 5fc2 	cmp.w	r3, #6208	; 0x1840
 80037b2:	d105      	bne.n	80037c0 <BSP_MotorControl_Init+0x68>
  {
    motorDrvHandle = L6208_GetMotorHandle();
 80037b4:	f7ff ff8b 	bl	80036ce <L6208_GetMotorHandle>
 80037b8:	4603      	mov	r3, r0
 80037ba:	4a10      	ldr	r2, [pc, #64]	; (80037fc <BSP_MotorControl_Init+0xa4>)
 80037bc:	6013      	str	r3, [r2, #0]
 80037be:	e002      	b.n	80037c6 <BSP_MotorControl_Init+0x6e>
  }
  else
  {
    motorDrvHandle = 0;
 80037c0:	4b0e      	ldr	r3, [pc, #56]	; (80037fc <BSP_MotorControl_Init+0xa4>)
 80037c2:	2200      	movs	r2, #0
 80037c4:	601a      	str	r2, [r3, #0]
  }

  if ((motorDrvHandle != 0)&&(motorDrvHandle->Init != 0))
 80037c6:	4b0d      	ldr	r3, [pc, #52]	; (80037fc <BSP_MotorControl_Init+0xa4>)
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d00b      	beq.n	80037e6 <BSP_MotorControl_Init+0x8e>
 80037ce:	4b0b      	ldr	r3, [pc, #44]	; (80037fc <BSP_MotorControl_Init+0xa4>)
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d006      	beq.n	80037e6 <BSP_MotorControl_Init+0x8e>
  {
    motorDrvHandle->Init(nbDevices);
 80037d8:	4b08      	ldr	r3, [pc, #32]	; (80037fc <BSP_MotorControl_Init+0xa4>)
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	797a      	ldrb	r2, [r7, #5]
 80037e0:	4610      	mov	r0, r2
 80037e2:	4798      	blx	r3
 80037e4:	e004      	b.n	80037f0 <BSP_MotorControl_Init+0x98>
  }  
  else
  {
    MOTOR_CONTROL_ERROR_UNDEFINED_FUNCTION(4);
 80037e6:	f640 0004 	movw	r0, #2052	; 0x804
 80037ea:	f7ff ff97 	bl	800371c <BSP_MotorControl_ErrorHandler>
  }  
}
 80037ee:	bf00      	nop
 80037f0:	bf00      	nop
 80037f2:	3708      	adds	r7, #8
 80037f4:	46bd      	mov	sp, r7
 80037f6:	bd80      	pop	{r7, pc}
 80037f8:	20000514 	.word	0x20000514
 80037fc:	20000510 	.word	0x20000510

08003800 <BSP_MotorControl_CmdGetStatus>:
 * the flags of the status register are reset. 
 * This is not the case when the status register is read with the
 * GetParam command (via the functions ReadStatusRegister or CmdGetParam).
 **********************************************************/
uint16_t BSP_MotorControl_CmdGetStatus(uint8_t deviceId)
{
 8003800:	b580      	push	{r7, lr}
 8003802:	b084      	sub	sp, #16
 8003804:	af00      	add	r7, sp, #0
 8003806:	4603      	mov	r3, r0
 8003808:	71fb      	strb	r3, [r7, #7]
  uint16_t status = 0;
 800380a:	2300      	movs	r3, #0
 800380c:	81fb      	strh	r3, [r7, #14]
  if ((motorDrvHandle != 0)&&(motorDrvHandle->CmdGetStatus != 0))
 800380e:	4b0e      	ldr	r3, [pc, #56]	; (8003848 <BSP_MotorControl_CmdGetStatus+0x48>)
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	2b00      	cmp	r3, #0
 8003814:	d00f      	beq.n	8003836 <BSP_MotorControl_CmdGetStatus+0x36>
 8003816:	4b0c      	ldr	r3, [pc, #48]	; (8003848 <BSP_MotorControl_CmdGetStatus+0x48>)
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800381e:	2b00      	cmp	r3, #0
 8003820:	d009      	beq.n	8003836 <BSP_MotorControl_CmdGetStatus+0x36>
  {
    status = motorDrvHandle->CmdGetStatus(deviceId);
 8003822:	4b09      	ldr	r3, [pc, #36]	; (8003848 <BSP_MotorControl_CmdGetStatus+0x48>)
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800382a:	79fa      	ldrb	r2, [r7, #7]
 800382c:	4610      	mov	r0, r2
 800382e:	4798      	blx	r3
 8003830:	4603      	mov	r3, r0
 8003832:	81fb      	strh	r3, [r7, #14]
 8003834:	e003      	b.n	800383e <BSP_MotorControl_CmdGetStatus+0x3e>
  }
  else
  {
    MOTOR_CONTROL_ERROR_UNDEFINED_FUNCTION(34);
 8003836:	f640 0022 	movw	r0, #2082	; 0x822
 800383a:	f7ff ff6f 	bl	800371c <BSP_MotorControl_ErrorHandler>
  }      
  return (status);
 800383e:	89fb      	ldrh	r3, [r7, #14]
}
 8003840:	4618      	mov	r0, r3
 8003842:	3710      	adds	r7, #16
 8003844:	46bd      	mov	sp, r7
 8003846:	bd80      	pop	{r7, pc}
 8003848:	20000510 	.word	0x20000510

0800384c <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 800384c:	b580      	push	{r7, lr}
 800384e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8003850:	4b27      	ldr	r3, [pc, #156]	; (80038f0 <MX_SPI2_Init+0xa4>)
 8003852:	4a28      	ldr	r2, [pc, #160]	; (80038f4 <MX_SPI2_Init+0xa8>)
 8003854:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8003856:	4b26      	ldr	r3, [pc, #152]	; (80038f0 <MX_SPI2_Init+0xa4>)
 8003858:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 800385c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800385e:	4b24      	ldr	r3, [pc, #144]	; (80038f0 <MX_SPI2_Init+0xa4>)
 8003860:	2200      	movs	r2, #0
 8003862:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_32BIT;
 8003864:	4b22      	ldr	r3, [pc, #136]	; (80038f0 <MX_SPI2_Init+0xa4>)
 8003866:	221f      	movs	r2, #31
 8003868:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800386a:	4b21      	ldr	r3, [pc, #132]	; (80038f0 <MX_SPI2_Init+0xa4>)
 800386c:	2200      	movs	r2, #0
 800386e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003870:	4b1f      	ldr	r3, [pc, #124]	; (80038f0 <MX_SPI2_Init+0xa4>)
 8003872:	2200      	movs	r2, #0
 8003874:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8003876:	4b1e      	ldr	r3, [pc, #120]	; (80038f0 <MX_SPI2_Init+0xa4>)
 8003878:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800387c:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 800387e:	4b1c      	ldr	r3, [pc, #112]	; (80038f0 <MX_SPI2_Init+0xa4>)
 8003880:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003884:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003886:	4b1a      	ldr	r3, [pc, #104]	; (80038f0 <MX_SPI2_Init+0xa4>)
 8003888:	2200      	movs	r2, #0
 800388a:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800388c:	4b18      	ldr	r3, [pc, #96]	; (80038f0 <MX_SPI2_Init+0xa4>)
 800388e:	2200      	movs	r2, #0
 8003890:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003892:	4b17      	ldr	r3, [pc, #92]	; (80038f0 <MX_SPI2_Init+0xa4>)
 8003894:	2200      	movs	r2, #0
 8003896:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 8003898:	4b15      	ldr	r3, [pc, #84]	; (80038f0 <MX_SPI2_Init+0xa4>)
 800389a:	2200      	movs	r2, #0
 800389c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800389e:	4b14      	ldr	r3, [pc, #80]	; (80038f0 <MX_SPI2_Init+0xa4>)
 80038a0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80038a4:	635a      	str	r2, [r3, #52]	; 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80038a6:	4b12      	ldr	r3, [pc, #72]	; (80038f0 <MX_SPI2_Init+0xa4>)
 80038a8:	2200      	movs	r2, #0
 80038aa:	639a      	str	r2, [r3, #56]	; 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80038ac:	4b10      	ldr	r3, [pc, #64]	; (80038f0 <MX_SPI2_Init+0xa4>)
 80038ae:	2200      	movs	r2, #0
 80038b0:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80038b2:	4b0f      	ldr	r3, [pc, #60]	; (80038f0 <MX_SPI2_Init+0xa4>)
 80038b4:	2200      	movs	r2, #0
 80038b6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80038b8:	4b0d      	ldr	r3, [pc, #52]	; (80038f0 <MX_SPI2_Init+0xa4>)
 80038ba:	2200      	movs	r2, #0
 80038bc:	645a      	str	r2, [r3, #68]	; 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80038be:	4b0c      	ldr	r3, [pc, #48]	; (80038f0 <MX_SPI2_Init+0xa4>)
 80038c0:	2200      	movs	r2, #0
 80038c2:	649a      	str	r2, [r3, #72]	; 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80038c4:	4b0a      	ldr	r3, [pc, #40]	; (80038f0 <MX_SPI2_Init+0xa4>)
 80038c6:	2200      	movs	r2, #0
 80038c8:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80038ca:	4b09      	ldr	r3, [pc, #36]	; (80038f0 <MX_SPI2_Init+0xa4>)
 80038cc:	2200      	movs	r2, #0
 80038ce:	651a      	str	r2, [r3, #80]	; 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80038d0:	4b07      	ldr	r3, [pc, #28]	; (80038f0 <MX_SPI2_Init+0xa4>)
 80038d2:	2200      	movs	r2, #0
 80038d4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80038d6:	4b06      	ldr	r3, [pc, #24]	; (80038f0 <MX_SPI2_Init+0xa4>)
 80038d8:	2200      	movs	r2, #0
 80038da:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80038dc:	4804      	ldr	r0, [pc, #16]	; (80038f0 <MX_SPI2_Init+0xa4>)
 80038de:	f006 fc7b 	bl	800a1d8 <HAL_SPI_Init>
 80038e2:	4603      	mov	r3, r0
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d001      	beq.n	80038ec <MX_SPI2_Init+0xa0>
  {
    Error_Handler();
 80038e8:	f7ff fedc 	bl	80036a4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80038ec:	bf00      	nop
 80038ee:	bd80      	pop	{r7, pc}
 80038f0:	20000518 	.word	0x20000518
 80038f4:	40003800 	.word	0x40003800

080038f8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80038f8:	b580      	push	{r7, lr}
 80038fa:	b0b8      	sub	sp, #224	; 0xe0
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003900:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8003904:	2200      	movs	r2, #0
 8003906:	601a      	str	r2, [r3, #0]
 8003908:	605a      	str	r2, [r3, #4]
 800390a:	609a      	str	r2, [r3, #8]
 800390c:	60da      	str	r2, [r3, #12]
 800390e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003910:	f107 0310 	add.w	r3, r7, #16
 8003914:	22bc      	movs	r2, #188	; 0xbc
 8003916:	2100      	movs	r1, #0
 8003918:	4618      	mov	r0, r3
 800391a:	f023 fd8b 	bl	8027434 <memset>
  if(spiHandle->Instance==SPI2)
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	4a25      	ldr	r2, [pc, #148]	; (80039b8 <HAL_SPI_MspInit+0xc0>)
 8003924:	4293      	cmp	r3, r2
 8003926:	d142      	bne.n	80039ae <HAL_SPI_MspInit+0xb6>
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 8003928:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800392c:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 800392e:	2300      	movs	r3, #0
 8003930:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003932:	f107 0310 	add.w	r3, r7, #16
 8003936:	4618      	mov	r0, r3
 8003938:	f004 f9c2 	bl	8007cc0 <HAL_RCCEx_PeriphCLKConfig>
 800393c:	4603      	mov	r3, r0
 800393e:	2b00      	cmp	r3, #0
 8003940:	d001      	beq.n	8003946 <HAL_SPI_MspInit+0x4e>
    {
      Error_Handler();
 8003942:	f7ff feaf 	bl	80036a4 <Error_Handler>
    }

    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8003946:	4b1d      	ldr	r3, [pc, #116]	; (80039bc <HAL_SPI_MspInit+0xc4>)
 8003948:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800394c:	4a1b      	ldr	r2, [pc, #108]	; (80039bc <HAL_SPI_MspInit+0xc4>)
 800394e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003952:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003956:	4b19      	ldr	r3, [pc, #100]	; (80039bc <HAL_SPI_MspInit+0xc4>)
 8003958:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800395c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003960:	60fb      	str	r3, [r7, #12]
 8003962:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003964:	4b15      	ldr	r3, [pc, #84]	; (80039bc <HAL_SPI_MspInit+0xc4>)
 8003966:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800396a:	4a14      	ldr	r2, [pc, #80]	; (80039bc <HAL_SPI_MspInit+0xc4>)
 800396c:	f043 0302 	orr.w	r3, r3, #2
 8003970:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003974:	4b11      	ldr	r3, [pc, #68]	; (80039bc <HAL_SPI_MspInit+0xc4>)
 8003976:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800397a:	f003 0302 	and.w	r3, r3, #2
 800397e:	60bb      	str	r3, [r7, #8]
 8003980:	68bb      	ldr	r3, [r7, #8]
    PB12     ------> SPI2_NSS
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8003982:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8003986:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800398a:	2302      	movs	r3, #2
 800398c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003990:	2300      	movs	r3, #0
 8003992:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003996:	2300      	movs	r3, #0
 8003998:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800399c:	2305      	movs	r3, #5
 800399e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80039a2:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80039a6:	4619      	mov	r1, r3
 80039a8:	4805      	ldr	r0, [pc, #20]	; (80039c0 <HAL_SPI_MspInit+0xc8>)
 80039aa:	f002 fbf1 	bl	8006190 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 80039ae:	bf00      	nop
 80039b0:	37e0      	adds	r7, #224	; 0xe0
 80039b2:	46bd      	mov	sp, r7
 80039b4:	bd80      	pop	{r7, pc}
 80039b6:	bf00      	nop
 80039b8:	40003800 	.word	0x40003800
 80039bc:	58024400 	.word	0x58024400
 80039c0:	58020400 	.word	0x58020400

080039c4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80039c4:	b580      	push	{r7, lr}
 80039c6:	b082      	sub	sp, #8
 80039c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80039ca:	4b0c      	ldr	r3, [pc, #48]	; (80039fc <HAL_MspInit+0x38>)
 80039cc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80039d0:	4a0a      	ldr	r2, [pc, #40]	; (80039fc <HAL_MspInit+0x38>)
 80039d2:	f043 0302 	orr.w	r3, r3, #2
 80039d6:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80039da:	4b08      	ldr	r3, [pc, #32]	; (80039fc <HAL_MspInit+0x38>)
 80039dc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80039e0:	f003 0302 	and.w	r3, r3, #2
 80039e4:	607b      	str	r3, [r7, #4]
 80039e6:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80039e8:	2200      	movs	r2, #0
 80039ea:	210f      	movs	r1, #15
 80039ec:	f06f 0001 	mvn.w	r0, #1
 80039f0:	f002 f9aa 	bl	8005d48 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80039f4:	bf00      	nop
 80039f6:	3708      	adds	r7, #8
 80039f8:	46bd      	mov	sp, r7
 80039fa:	bd80      	pop	{r7, pc}
 80039fc:	58024400 	.word	0x58024400

08003a00 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003a00:	b580      	push	{r7, lr}
 8003a02:	b090      	sub	sp, #64	; 0x40
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM3 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	2b0f      	cmp	r3, #15
 8003a0c:	d827      	bhi.n	8003a5e <HAL_InitTick+0x5e>
  {
  HAL_NVIC_SetPriority(TIM3_IRQn, TickPriority ,0U);
 8003a0e:	2200      	movs	r2, #0
 8003a10:	6879      	ldr	r1, [r7, #4]
 8003a12:	201d      	movs	r0, #29
 8003a14:	f002 f998 	bl	8005d48 <HAL_NVIC_SetPriority>

  /* Enable the TIM3 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8003a18:	201d      	movs	r0, #29
 8003a1a:	f002 f9af 	bl	8005d7c <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 8003a1e:	4a29      	ldr	r2, [pc, #164]	; (8003ac4 <HAL_InitTick+0xc4>)
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
  /* Enable TIM3 clock */
  __HAL_RCC_TIM3_CLK_ENABLE();
 8003a24:	4b28      	ldr	r3, [pc, #160]	; (8003ac8 <HAL_InitTick+0xc8>)
 8003a26:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003a2a:	4a27      	ldr	r2, [pc, #156]	; (8003ac8 <HAL_InitTick+0xc8>)
 8003a2c:	f043 0302 	orr.w	r3, r3, #2
 8003a30:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003a34:	4b24      	ldr	r3, [pc, #144]	; (8003ac8 <HAL_InitTick+0xc8>)
 8003a36:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003a3a:	f003 0302 	and.w	r3, r3, #2
 8003a3e:	60fb      	str	r3, [r7, #12]
 8003a40:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003a42:	f107 0210 	add.w	r2, r7, #16
 8003a46:	f107 0314 	add.w	r3, r7, #20
 8003a4a:	4611      	mov	r1, r2
 8003a4c:	4618      	mov	r0, r3
 8003a4e:	f004 f8f5 	bl	8007c3c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8003a52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a54:	63bb      	str	r3, [r7, #56]	; 0x38
  /* Compute TIM3 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8003a56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d106      	bne.n	8003a6a <HAL_InitTick+0x6a>
 8003a5c:	e001      	b.n	8003a62 <HAL_InitTick+0x62>
    return HAL_ERROR;
 8003a5e:	2301      	movs	r3, #1
 8003a60:	e02b      	b.n	8003aba <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8003a62:	f004 f8bf 	bl	8007be4 <HAL_RCC_GetPCLK1Freq>
 8003a66:	63f8      	str	r0, [r7, #60]	; 0x3c
 8003a68:	e004      	b.n	8003a74 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8003a6a:	f004 f8bb 	bl	8007be4 <HAL_RCC_GetPCLK1Freq>
 8003a6e:	4603      	mov	r3, r0
 8003a70:	005b      	lsls	r3, r3, #1
 8003a72:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  /* Compute the prescaler value to have TIM3 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8003a74:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003a76:	4a15      	ldr	r2, [pc, #84]	; (8003acc <HAL_InitTick+0xcc>)
 8003a78:	fba2 2303 	umull	r2, r3, r2, r3
 8003a7c:	0c9b      	lsrs	r3, r3, #18
 8003a7e:	3b01      	subs	r3, #1
 8003a80:	637b      	str	r3, [r7, #52]	; 0x34

  /* Initialize TIM3 */
  htim3.Instance = TIM3;
 8003a82:	4b13      	ldr	r3, [pc, #76]	; (8003ad0 <HAL_InitTick+0xd0>)
 8003a84:	4a13      	ldr	r2, [pc, #76]	; (8003ad4 <HAL_InitTick+0xd4>)
 8003a86:	601a      	str	r2, [r3, #0]
  + Period = [(TIM3CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim3.Init.Period = (1000000U / 1000U) - 1U;
 8003a88:	4b11      	ldr	r3, [pc, #68]	; (8003ad0 <HAL_InitTick+0xd0>)
 8003a8a:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003a8e:	60da      	str	r2, [r3, #12]
  htim3.Init.Prescaler = uwPrescalerValue;
 8003a90:	4a0f      	ldr	r2, [pc, #60]	; (8003ad0 <HAL_InitTick+0xd0>)
 8003a92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a94:	6053      	str	r3, [r2, #4]
  htim3.Init.ClockDivision = 0;
 8003a96:	4b0e      	ldr	r3, [pc, #56]	; (8003ad0 <HAL_InitTick+0xd0>)
 8003a98:	2200      	movs	r2, #0
 8003a9a:	611a      	str	r2, [r3, #16]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003a9c:	4b0c      	ldr	r3, [pc, #48]	; (8003ad0 <HAL_InitTick+0xd0>)
 8003a9e:	2200      	movs	r2, #0
 8003aa0:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim3) == HAL_OK)
 8003aa2:	480b      	ldr	r0, [pc, #44]	; (8003ad0 <HAL_InitTick+0xd0>)
 8003aa4:	f007 f873 	bl	800ab8e <HAL_TIM_Base_Init>
 8003aa8:	4603      	mov	r3, r0
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d104      	bne.n	8003ab8 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim3);
 8003aae:	4808      	ldr	r0, [pc, #32]	; (8003ad0 <HAL_InitTick+0xd0>)
 8003ab0:	f007 f8ce 	bl	800ac50 <HAL_TIM_Base_Start_IT>
 8003ab4:	4603      	mov	r3, r0
 8003ab6:	e000      	b.n	8003aba <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 8003ab8:	2301      	movs	r3, #1
}
 8003aba:	4618      	mov	r0, r3
 8003abc:	3740      	adds	r7, #64	; 0x40
 8003abe:	46bd      	mov	sp, r7
 8003ac0:	bd80      	pop	{r7, pc}
 8003ac2:	bf00      	nop
 8003ac4:	20000160 	.word	0x20000160
 8003ac8:	58024400 	.word	0x58024400
 8003acc:	431bde83 	.word	0x431bde83
 8003ad0:	200005a0 	.word	0x200005a0
 8003ad4:	40000400 	.word	0x40000400

08003ad8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003ad8:	b480      	push	{r7}
 8003ada:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003adc:	e7fe      	b.n	8003adc <NMI_Handler+0x4>

08003ade <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003ade:	b480      	push	{r7}
 8003ae0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003ae2:	e7fe      	b.n	8003ae2 <HardFault_Handler+0x4>

08003ae4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003ae4:	b480      	push	{r7}
 8003ae6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003ae8:	e7fe      	b.n	8003ae8 <MemManage_Handler+0x4>

08003aea <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003aea:	b480      	push	{r7}
 8003aec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003aee:	e7fe      	b.n	8003aee <BusFault_Handler+0x4>

08003af0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003af0:	b480      	push	{r7}
 8003af2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003af4:	e7fe      	b.n	8003af4 <UsageFault_Handler+0x4>

08003af6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003af6:	b480      	push	{r7}
 8003af8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003afa:	bf00      	nop
 8003afc:	46bd      	mov	sp, r7
 8003afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b02:	4770      	bx	lr

08003b04 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8003b04:	b580      	push	{r7, lr}
 8003b06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8003b08:	4802      	ldr	r0, [pc, #8]	; (8003b14 <TIM3_IRQHandler+0x10>)
 8003b0a:	f007 fb61 	bl	800b1d0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8003b0e:	bf00      	nop
 8003b10:	bd80      	pop	{r7, pc}
 8003b12:	bf00      	nop
 8003b14:	200005a0 	.word	0x200005a0

08003b18 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8003b18:	b580      	push	{r7, lr}
 8003b1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8003b1c:	4802      	ldr	r0, [pc, #8]	; (8003b28 <LTDC_IRQHandler+0x10>)
 8003b1e:	f002 fdd1 	bl	80066c4 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 8003b22:	bf00      	nop
 8003b24:	bd80      	pop	{r7, pc}
 8003b26:	bf00      	nop
 8003b28:	20000468 	.word	0x20000468

08003b2c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003b2c:	b480      	push	{r7}
 8003b2e:	af00      	add	r7, sp, #0
	return 1;
 8003b30:	2301      	movs	r3, #1
}
 8003b32:	4618      	mov	r0, r3
 8003b34:	46bd      	mov	sp, r7
 8003b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b3a:	4770      	bx	lr

08003b3c <_kill>:

int _kill(int pid, int sig)
{
 8003b3c:	b580      	push	{r7, lr}
 8003b3e:	b082      	sub	sp, #8
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	6078      	str	r0, [r7, #4]
 8003b44:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8003b46:	f023 fb21 	bl	802718c <__errno>
 8003b4a:	4603      	mov	r3, r0
 8003b4c:	2216      	movs	r2, #22
 8003b4e:	601a      	str	r2, [r3, #0]
	return -1;
 8003b50:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003b54:	4618      	mov	r0, r3
 8003b56:	3708      	adds	r7, #8
 8003b58:	46bd      	mov	sp, r7
 8003b5a:	bd80      	pop	{r7, pc}

08003b5c <_exit>:

void _exit (int status)
{
 8003b5c:	b580      	push	{r7, lr}
 8003b5e:	b082      	sub	sp, #8
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8003b64:	f04f 31ff 	mov.w	r1, #4294967295
 8003b68:	6878      	ldr	r0, [r7, #4]
 8003b6a:	f7ff ffe7 	bl	8003b3c <_kill>
	while (1) {}		/* Make sure we hang here */
 8003b6e:	e7fe      	b.n	8003b6e <_exit+0x12>

08003b70 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003b70:	b580      	push	{r7, lr}
 8003b72:	b086      	sub	sp, #24
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	60f8      	str	r0, [r7, #12]
 8003b78:	60b9      	str	r1, [r7, #8]
 8003b7a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003b7c:	2300      	movs	r3, #0
 8003b7e:	617b      	str	r3, [r7, #20]
 8003b80:	e00a      	b.n	8003b98 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003b82:	f3af 8000 	nop.w
 8003b86:	4601      	mov	r1, r0
 8003b88:	68bb      	ldr	r3, [r7, #8]
 8003b8a:	1c5a      	adds	r2, r3, #1
 8003b8c:	60ba      	str	r2, [r7, #8]
 8003b8e:	b2ca      	uxtb	r2, r1
 8003b90:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003b92:	697b      	ldr	r3, [r7, #20]
 8003b94:	3301      	adds	r3, #1
 8003b96:	617b      	str	r3, [r7, #20]
 8003b98:	697a      	ldr	r2, [r7, #20]
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	429a      	cmp	r2, r3
 8003b9e:	dbf0      	blt.n	8003b82 <_read+0x12>
	}

return len;
 8003ba0:	687b      	ldr	r3, [r7, #4]
}
 8003ba2:	4618      	mov	r0, r3
 8003ba4:	3718      	adds	r7, #24
 8003ba6:	46bd      	mov	sp, r7
 8003ba8:	bd80      	pop	{r7, pc}

08003baa <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003baa:	b580      	push	{r7, lr}
 8003bac:	b086      	sub	sp, #24
 8003bae:	af00      	add	r7, sp, #0
 8003bb0:	60f8      	str	r0, [r7, #12]
 8003bb2:	60b9      	str	r1, [r7, #8]
 8003bb4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003bb6:	2300      	movs	r3, #0
 8003bb8:	617b      	str	r3, [r7, #20]
 8003bba:	e009      	b.n	8003bd0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8003bbc:	68bb      	ldr	r3, [r7, #8]
 8003bbe:	1c5a      	adds	r2, r3, #1
 8003bc0:	60ba      	str	r2, [r7, #8]
 8003bc2:	781b      	ldrb	r3, [r3, #0]
 8003bc4:	4618      	mov	r0, r3
 8003bc6:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003bca:	697b      	ldr	r3, [r7, #20]
 8003bcc:	3301      	adds	r3, #1
 8003bce:	617b      	str	r3, [r7, #20]
 8003bd0:	697a      	ldr	r2, [r7, #20]
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	429a      	cmp	r2, r3
 8003bd6:	dbf1      	blt.n	8003bbc <_write+0x12>
	}
	return len;
 8003bd8:	687b      	ldr	r3, [r7, #4]
}
 8003bda:	4618      	mov	r0, r3
 8003bdc:	3718      	adds	r7, #24
 8003bde:	46bd      	mov	sp, r7
 8003be0:	bd80      	pop	{r7, pc}

08003be2 <_close>:

int _close(int file)
{
 8003be2:	b480      	push	{r7}
 8003be4:	b083      	sub	sp, #12
 8003be6:	af00      	add	r7, sp, #0
 8003be8:	6078      	str	r0, [r7, #4]
	return -1;
 8003bea:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003bee:	4618      	mov	r0, r3
 8003bf0:	370c      	adds	r7, #12
 8003bf2:	46bd      	mov	sp, r7
 8003bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf8:	4770      	bx	lr

08003bfa <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003bfa:	b480      	push	{r7}
 8003bfc:	b083      	sub	sp, #12
 8003bfe:	af00      	add	r7, sp, #0
 8003c00:	6078      	str	r0, [r7, #4]
 8003c02:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003c04:	683b      	ldr	r3, [r7, #0]
 8003c06:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003c0a:	605a      	str	r2, [r3, #4]
	return 0;
 8003c0c:	2300      	movs	r3, #0
}
 8003c0e:	4618      	mov	r0, r3
 8003c10:	370c      	adds	r7, #12
 8003c12:	46bd      	mov	sp, r7
 8003c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c18:	4770      	bx	lr

08003c1a <_isatty>:

int _isatty(int file)
{
 8003c1a:	b480      	push	{r7}
 8003c1c:	b083      	sub	sp, #12
 8003c1e:	af00      	add	r7, sp, #0
 8003c20:	6078      	str	r0, [r7, #4]
	return 1;
 8003c22:	2301      	movs	r3, #1
}
 8003c24:	4618      	mov	r0, r3
 8003c26:	370c      	adds	r7, #12
 8003c28:	46bd      	mov	sp, r7
 8003c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c2e:	4770      	bx	lr

08003c30 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003c30:	b480      	push	{r7}
 8003c32:	b085      	sub	sp, #20
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	60f8      	str	r0, [r7, #12]
 8003c38:	60b9      	str	r1, [r7, #8]
 8003c3a:	607a      	str	r2, [r7, #4]
	return 0;
 8003c3c:	2300      	movs	r3, #0
}
 8003c3e:	4618      	mov	r0, r3
 8003c40:	3714      	adds	r7, #20
 8003c42:	46bd      	mov	sp, r7
 8003c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c48:	4770      	bx	lr
	...

08003c4c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003c4c:	b580      	push	{r7, lr}
 8003c4e:	b086      	sub	sp, #24
 8003c50:	af00      	add	r7, sp, #0
 8003c52:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003c54:	4a14      	ldr	r2, [pc, #80]	; (8003ca8 <_sbrk+0x5c>)
 8003c56:	4b15      	ldr	r3, [pc, #84]	; (8003cac <_sbrk+0x60>)
 8003c58:	1ad3      	subs	r3, r2, r3
 8003c5a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003c5c:	697b      	ldr	r3, [r7, #20]
 8003c5e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003c60:	4b13      	ldr	r3, [pc, #76]	; (8003cb0 <_sbrk+0x64>)
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d102      	bne.n	8003c6e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003c68:	4b11      	ldr	r3, [pc, #68]	; (8003cb0 <_sbrk+0x64>)
 8003c6a:	4a12      	ldr	r2, [pc, #72]	; (8003cb4 <_sbrk+0x68>)
 8003c6c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003c6e:	4b10      	ldr	r3, [pc, #64]	; (8003cb0 <_sbrk+0x64>)
 8003c70:	681a      	ldr	r2, [r3, #0]
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	4413      	add	r3, r2
 8003c76:	693a      	ldr	r2, [r7, #16]
 8003c78:	429a      	cmp	r2, r3
 8003c7a:	d207      	bcs.n	8003c8c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003c7c:	f023 fa86 	bl	802718c <__errno>
 8003c80:	4603      	mov	r3, r0
 8003c82:	220c      	movs	r2, #12
 8003c84:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003c86:	f04f 33ff 	mov.w	r3, #4294967295
 8003c8a:	e009      	b.n	8003ca0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003c8c:	4b08      	ldr	r3, [pc, #32]	; (8003cb0 <_sbrk+0x64>)
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003c92:	4b07      	ldr	r3, [pc, #28]	; (8003cb0 <_sbrk+0x64>)
 8003c94:	681a      	ldr	r2, [r3, #0]
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	4413      	add	r3, r2
 8003c9a:	4a05      	ldr	r2, [pc, #20]	; (8003cb0 <_sbrk+0x64>)
 8003c9c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003c9e:	68fb      	ldr	r3, [r7, #12]
}
 8003ca0:	4618      	mov	r0, r3
 8003ca2:	3718      	adds	r7, #24
 8003ca4:	46bd      	mov	sp, r7
 8003ca6:	bd80      	pop	{r7, pc}
 8003ca8:	20020000 	.word	0x20020000
 8003cac:	00000400 	.word	0x00000400
 8003cb0:	200005ec 	.word	0x200005ec
 8003cb4:	20005ab0 	.word	0x20005ab0

08003cb8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003cb8:	b480      	push	{r7}
 8003cba:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8003cbc:	4b37      	ldr	r3, [pc, #220]	; (8003d9c <SystemInit+0xe4>)
 8003cbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cc2:	4a36      	ldr	r2, [pc, #216]	; (8003d9c <SystemInit+0xe4>)
 8003cc4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003cc8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8003ccc:	4b34      	ldr	r3, [pc, #208]	; (8003da0 <SystemInit+0xe8>)
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f003 030f 	and.w	r3, r3, #15
 8003cd4:	2b06      	cmp	r3, #6
 8003cd6:	d807      	bhi.n	8003ce8 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8003cd8:	4b31      	ldr	r3, [pc, #196]	; (8003da0 <SystemInit+0xe8>)
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f023 030f 	bic.w	r3, r3, #15
 8003ce0:	4a2f      	ldr	r2, [pc, #188]	; (8003da0 <SystemInit+0xe8>)
 8003ce2:	f043 0307 	orr.w	r3, r3, #7
 8003ce6:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8003ce8:	4b2e      	ldr	r3, [pc, #184]	; (8003da4 <SystemInit+0xec>)
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	4a2d      	ldr	r2, [pc, #180]	; (8003da4 <SystemInit+0xec>)
 8003cee:	f043 0301 	orr.w	r3, r3, #1
 8003cf2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8003cf4:	4b2b      	ldr	r3, [pc, #172]	; (8003da4 <SystemInit+0xec>)
 8003cf6:	2200      	movs	r2, #0
 8003cf8:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8003cfa:	4b2a      	ldr	r3, [pc, #168]	; (8003da4 <SystemInit+0xec>)
 8003cfc:	681a      	ldr	r2, [r3, #0]
 8003cfe:	4929      	ldr	r1, [pc, #164]	; (8003da4 <SystemInit+0xec>)
 8003d00:	4b29      	ldr	r3, [pc, #164]	; (8003da8 <SystemInit+0xf0>)
 8003d02:	4013      	ands	r3, r2
 8003d04:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8003d06:	4b26      	ldr	r3, [pc, #152]	; (8003da0 <SystemInit+0xe8>)
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f003 0308 	and.w	r3, r3, #8
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d007      	beq.n	8003d22 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8003d12:	4b23      	ldr	r3, [pc, #140]	; (8003da0 <SystemInit+0xe8>)
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f023 030f 	bic.w	r3, r3, #15
 8003d1a:	4a21      	ldr	r2, [pc, #132]	; (8003da0 <SystemInit+0xe8>)
 8003d1c:	f043 0307 	orr.w	r3, r3, #7
 8003d20:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8003d22:	4b20      	ldr	r3, [pc, #128]	; (8003da4 <SystemInit+0xec>)
 8003d24:	2200      	movs	r2, #0
 8003d26:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8003d28:	4b1e      	ldr	r3, [pc, #120]	; (8003da4 <SystemInit+0xec>)
 8003d2a:	2200      	movs	r2, #0
 8003d2c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8003d2e:	4b1d      	ldr	r3, [pc, #116]	; (8003da4 <SystemInit+0xec>)
 8003d30:	2200      	movs	r2, #0
 8003d32:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8003d34:	4b1b      	ldr	r3, [pc, #108]	; (8003da4 <SystemInit+0xec>)
 8003d36:	4a1d      	ldr	r2, [pc, #116]	; (8003dac <SystemInit+0xf4>)
 8003d38:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8003d3a:	4b1a      	ldr	r3, [pc, #104]	; (8003da4 <SystemInit+0xec>)
 8003d3c:	4a1c      	ldr	r2, [pc, #112]	; (8003db0 <SystemInit+0xf8>)
 8003d3e:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8003d40:	4b18      	ldr	r3, [pc, #96]	; (8003da4 <SystemInit+0xec>)
 8003d42:	4a1c      	ldr	r2, [pc, #112]	; (8003db4 <SystemInit+0xfc>)
 8003d44:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8003d46:	4b17      	ldr	r3, [pc, #92]	; (8003da4 <SystemInit+0xec>)
 8003d48:	2200      	movs	r2, #0
 8003d4a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8003d4c:	4b15      	ldr	r3, [pc, #84]	; (8003da4 <SystemInit+0xec>)
 8003d4e:	4a19      	ldr	r2, [pc, #100]	; (8003db4 <SystemInit+0xfc>)
 8003d50:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8003d52:	4b14      	ldr	r3, [pc, #80]	; (8003da4 <SystemInit+0xec>)
 8003d54:	2200      	movs	r2, #0
 8003d56:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8003d58:	4b12      	ldr	r3, [pc, #72]	; (8003da4 <SystemInit+0xec>)
 8003d5a:	4a16      	ldr	r2, [pc, #88]	; (8003db4 <SystemInit+0xfc>)
 8003d5c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8003d5e:	4b11      	ldr	r3, [pc, #68]	; (8003da4 <SystemInit+0xec>)
 8003d60:	2200      	movs	r2, #0
 8003d62:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8003d64:	4b0f      	ldr	r3, [pc, #60]	; (8003da4 <SystemInit+0xec>)
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	4a0e      	ldr	r2, [pc, #56]	; (8003da4 <SystemInit+0xec>)
 8003d6a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003d6e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8003d70:	4b0c      	ldr	r3, [pc, #48]	; (8003da4 <SystemInit+0xec>)
 8003d72:	2200      	movs	r2, #0
 8003d74:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8003d76:	4b10      	ldr	r3, [pc, #64]	; (8003db8 <SystemInit+0x100>)
 8003d78:	681a      	ldr	r2, [r3, #0]
 8003d7a:	4b10      	ldr	r3, [pc, #64]	; (8003dbc <SystemInit+0x104>)
 8003d7c:	4013      	ands	r3, r2
 8003d7e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003d82:	d202      	bcs.n	8003d8a <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8003d84:	4b0e      	ldr	r3, [pc, #56]	; (8003dc0 <SystemInit+0x108>)
 8003d86:	2201      	movs	r2, #1
 8003d88:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8003d8a:	4b0e      	ldr	r3, [pc, #56]	; (8003dc4 <SystemInit+0x10c>)
 8003d8c:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8003d90:	601a      	str	r2, [r3, #0]
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/

}
 8003d92:	bf00      	nop
 8003d94:	46bd      	mov	sp, r7
 8003d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d9a:	4770      	bx	lr
 8003d9c:	e000ed00 	.word	0xe000ed00
 8003da0:	52002000 	.word	0x52002000
 8003da4:	58024400 	.word	0x58024400
 8003da8:	eaf6ed7f 	.word	0xeaf6ed7f
 8003dac:	02020200 	.word	0x02020200
 8003db0:	01ff0000 	.word	0x01ff0000
 8003db4:	01010280 	.word	0x01010280
 8003db8:	5c001000 	.word	0x5c001000
 8003dbc:	ffff0000 	.word	0xffff0000
 8003dc0:	51008108 	.word	0x51008108
 8003dc4:	52004000 	.word	0x52004000

08003dc8 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8003dc8:	b580      	push	{r7, lr}
 8003dca:	b08a      	sub	sp, #40	; 0x28
 8003dcc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003dce:	f107 031c 	add.w	r3, r7, #28
 8003dd2:	2200      	movs	r2, #0
 8003dd4:	601a      	str	r2, [r3, #0]
 8003dd6:	605a      	str	r2, [r3, #4]
 8003dd8:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003dda:	463b      	mov	r3, r7
 8003ddc:	2200      	movs	r2, #0
 8003dde:	601a      	str	r2, [r3, #0]
 8003de0:	605a      	str	r2, [r3, #4]
 8003de2:	609a      	str	r2, [r3, #8]
 8003de4:	60da      	str	r2, [r3, #12]
 8003de6:	611a      	str	r2, [r3, #16]
 8003de8:	615a      	str	r2, [r3, #20]
 8003dea:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003dec:	4b22      	ldr	r3, [pc, #136]	; (8003e78 <MX_TIM2_Init+0xb0>)
 8003dee:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003df2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8003df4:	4b20      	ldr	r3, [pc, #128]	; (8003e78 <MX_TIM2_Init+0xb0>)
 8003df6:	2200      	movs	r2, #0
 8003df8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003dfa:	4b1f      	ldr	r3, [pc, #124]	; (8003e78 <MX_TIM2_Init+0xb0>)
 8003dfc:	2200      	movs	r2, #0
 8003dfe:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8003e00:	4b1d      	ldr	r3, [pc, #116]	; (8003e78 <MX_TIM2_Init+0xb0>)
 8003e02:	f04f 32ff 	mov.w	r2, #4294967295
 8003e06:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003e08:	4b1b      	ldr	r3, [pc, #108]	; (8003e78 <MX_TIM2_Init+0xb0>)
 8003e0a:	2200      	movs	r2, #0
 8003e0c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003e0e:	4b1a      	ldr	r3, [pc, #104]	; (8003e78 <MX_TIM2_Init+0xb0>)
 8003e10:	2200      	movs	r2, #0
 8003e12:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8003e14:	4818      	ldr	r0, [pc, #96]	; (8003e78 <MX_TIM2_Init+0xb0>)
 8003e16:	f006 ff93 	bl	800ad40 <HAL_TIM_PWM_Init>
 8003e1a:	4603      	mov	r3, r0
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d001      	beq.n	8003e24 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8003e20:	f7ff fc40 	bl	80036a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003e24:	2300      	movs	r3, #0
 8003e26:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003e28:	2300      	movs	r3, #0
 8003e2a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003e2c:	f107 031c 	add.w	r3, r7, #28
 8003e30:	4619      	mov	r1, r3
 8003e32:	4811      	ldr	r0, [pc, #68]	; (8003e78 <MX_TIM2_Init+0xb0>)
 8003e34:	f007 ffbe 	bl	800bdb4 <HAL_TIMEx_MasterConfigSynchronization>
 8003e38:	4603      	mov	r3, r0
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d001      	beq.n	8003e42 <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 8003e3e:	f7ff fc31 	bl	80036a4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003e42:	2360      	movs	r3, #96	; 0x60
 8003e44:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8003e46:	2300      	movs	r3, #0
 8003e48:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003e4a:	2300      	movs	r3, #0
 8003e4c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003e4e:	2300      	movs	r3, #0
 8003e50:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003e52:	463b      	mov	r3, r7
 8003e54:	2200      	movs	r2, #0
 8003e56:	4619      	mov	r1, r3
 8003e58:	4807      	ldr	r0, [pc, #28]	; (8003e78 <MX_TIM2_Init+0xb0>)
 8003e5a:	f007 fad9 	bl	800b410 <HAL_TIM_PWM_ConfigChannel>
 8003e5e:	4603      	mov	r3, r0
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d001      	beq.n	8003e68 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8003e64:	f7ff fc1e 	bl	80036a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8003e68:	4803      	ldr	r0, [pc, #12]	; (8003e78 <MX_TIM2_Init+0xb0>)
 8003e6a:	f000 f827 	bl	8003ebc <HAL_TIM_MspPostInit>

}
 8003e6e:	bf00      	nop
 8003e70:	3728      	adds	r7, #40	; 0x28
 8003e72:	46bd      	mov	sp, r7
 8003e74:	bd80      	pop	{r7, pc}
 8003e76:	bf00      	nop
 8003e78:	200005f0 	.word	0x200005f0

08003e7c <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8003e7c:	b480      	push	{r7}
 8003e7e:	b085      	sub	sp, #20
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e8c:	d10e      	bne.n	8003eac <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003e8e:	4b0a      	ldr	r3, [pc, #40]	; (8003eb8 <HAL_TIM_PWM_MspInit+0x3c>)
 8003e90:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003e94:	4a08      	ldr	r2, [pc, #32]	; (8003eb8 <HAL_TIM_PWM_MspInit+0x3c>)
 8003e96:	f043 0301 	orr.w	r3, r3, #1
 8003e9a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003e9e:	4b06      	ldr	r3, [pc, #24]	; (8003eb8 <HAL_TIM_PWM_MspInit+0x3c>)
 8003ea0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003ea4:	f003 0301 	and.w	r3, r3, #1
 8003ea8:	60fb      	str	r3, [r7, #12]
 8003eaa:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8003eac:	bf00      	nop
 8003eae:	3714      	adds	r7, #20
 8003eb0:	46bd      	mov	sp, r7
 8003eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb6:	4770      	bx	lr
 8003eb8:	58024400 	.word	0x58024400

08003ebc <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8003ebc:	b580      	push	{r7, lr}
 8003ebe:	b088      	sub	sp, #32
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ec4:	f107 030c 	add.w	r3, r7, #12
 8003ec8:	2200      	movs	r2, #0
 8003eca:	601a      	str	r2, [r3, #0]
 8003ecc:	605a      	str	r2, [r3, #4]
 8003ece:	609a      	str	r2, [r3, #8]
 8003ed0:	60da      	str	r2, [r3, #12]
 8003ed2:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003edc:	d11f      	bne.n	8003f1e <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003ede:	4b12      	ldr	r3, [pc, #72]	; (8003f28 <HAL_TIM_MspPostInit+0x6c>)
 8003ee0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003ee4:	4a10      	ldr	r2, [pc, #64]	; (8003f28 <HAL_TIM_MspPostInit+0x6c>)
 8003ee6:	f043 0301 	orr.w	r3, r3, #1
 8003eea:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003eee:	4b0e      	ldr	r3, [pc, #56]	; (8003f28 <HAL_TIM_MspPostInit+0x6c>)
 8003ef0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003ef4:	f003 0301 	and.w	r3, r3, #1
 8003ef8:	60bb      	str	r3, [r7, #8]
 8003efa:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA15 (JTDI)     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8003efc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003f00:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f02:	2302      	movs	r3, #2
 8003f04:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f06:	2300      	movs	r3, #0
 8003f08:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003f0a:	2300      	movs	r3, #0
 8003f0c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003f0e:	2301      	movs	r3, #1
 8003f10:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003f12:	f107 030c 	add.w	r3, r7, #12
 8003f16:	4619      	mov	r1, r3
 8003f18:	4804      	ldr	r0, [pc, #16]	; (8003f2c <HAL_TIM_MspPostInit+0x70>)
 8003f1a:	f002 f939 	bl	8006190 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8003f1e:	bf00      	nop
 8003f20:	3720      	adds	r7, #32
 8003f22:	46bd      	mov	sp, r7
 8003f24:	bd80      	pop	{r7, pc}
 8003f26:	bf00      	nop
 8003f28:	58024400 	.word	0x58024400
 8003f2c:	58020000 	.word	0x58020000

08003f30 <MX_UART5_Init>:

UART_HandleTypeDef huart5;

/* UART5 init function */
void MX_UART5_Init(void)
{
 8003f30:	b580      	push	{r7, lr}
 8003f32:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8003f34:	4b22      	ldr	r3, [pc, #136]	; (8003fc0 <MX_UART5_Init+0x90>)
 8003f36:	4a23      	ldr	r2, [pc, #140]	; (8003fc4 <MX_UART5_Init+0x94>)
 8003f38:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 9600;
 8003f3a:	4b21      	ldr	r3, [pc, #132]	; (8003fc0 <MX_UART5_Init+0x90>)
 8003f3c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8003f40:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8003f42:	4b1f      	ldr	r3, [pc, #124]	; (8003fc0 <MX_UART5_Init+0x90>)
 8003f44:	2200      	movs	r2, #0
 8003f46:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8003f48:	4b1d      	ldr	r3, [pc, #116]	; (8003fc0 <MX_UART5_Init+0x90>)
 8003f4a:	2200      	movs	r2, #0
 8003f4c:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8003f4e:	4b1c      	ldr	r3, [pc, #112]	; (8003fc0 <MX_UART5_Init+0x90>)
 8003f50:	2200      	movs	r2, #0
 8003f52:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8003f54:	4b1a      	ldr	r3, [pc, #104]	; (8003fc0 <MX_UART5_Init+0x90>)
 8003f56:	220c      	movs	r2, #12
 8003f58:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003f5a:	4b19      	ldr	r3, [pc, #100]	; (8003fc0 <MX_UART5_Init+0x90>)
 8003f5c:	2200      	movs	r2, #0
 8003f5e:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8003f60:	4b17      	ldr	r3, [pc, #92]	; (8003fc0 <MX_UART5_Init+0x90>)
 8003f62:	2200      	movs	r2, #0
 8003f64:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003f66:	4b16      	ldr	r3, [pc, #88]	; (8003fc0 <MX_UART5_Init+0x90>)
 8003f68:	2200      	movs	r2, #0
 8003f6a:	621a      	str	r2, [r3, #32]
  huart5.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003f6c:	4b14      	ldr	r3, [pc, #80]	; (8003fc0 <MX_UART5_Init+0x90>)
 8003f6e:	2200      	movs	r2, #0
 8003f70:	625a      	str	r2, [r3, #36]	; 0x24
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003f72:	4b13      	ldr	r3, [pc, #76]	; (8003fc0 <MX_UART5_Init+0x90>)
 8003f74:	2200      	movs	r2, #0
 8003f76:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8003f78:	4811      	ldr	r0, [pc, #68]	; (8003fc0 <MX_UART5_Init+0x90>)
 8003f7a:	f007 ffc7 	bl	800bf0c <HAL_UART_Init>
 8003f7e:	4603      	mov	r3, r0
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d001      	beq.n	8003f88 <MX_UART5_Init+0x58>
  {
    Error_Handler();
 8003f84:	f7ff fb8e 	bl	80036a4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart5, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003f88:	2100      	movs	r1, #0
 8003f8a:	480d      	ldr	r0, [pc, #52]	; (8003fc0 <MX_UART5_Init+0x90>)
 8003f8c:	f008 ff64 	bl	800ce58 <HAL_UARTEx_SetTxFifoThreshold>
 8003f90:	4603      	mov	r3, r0
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d001      	beq.n	8003f9a <MX_UART5_Init+0x6a>
  {
    Error_Handler();
 8003f96:	f7ff fb85 	bl	80036a4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart5, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003f9a:	2100      	movs	r1, #0
 8003f9c:	4808      	ldr	r0, [pc, #32]	; (8003fc0 <MX_UART5_Init+0x90>)
 8003f9e:	f008 ff99 	bl	800ced4 <HAL_UARTEx_SetRxFifoThreshold>
 8003fa2:	4603      	mov	r3, r0
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d001      	beq.n	8003fac <MX_UART5_Init+0x7c>
  {
    Error_Handler();
 8003fa8:	f7ff fb7c 	bl	80036a4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart5) != HAL_OK)
 8003fac:	4804      	ldr	r0, [pc, #16]	; (8003fc0 <MX_UART5_Init+0x90>)
 8003fae:	f008 ff1a 	bl	800cde6 <HAL_UARTEx_DisableFifoMode>
 8003fb2:	4603      	mov	r3, r0
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d001      	beq.n	8003fbc <MX_UART5_Init+0x8c>
  {
    Error_Handler();
 8003fb8:	f7ff fb74 	bl	80036a4 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8003fbc:	bf00      	nop
 8003fbe:	bd80      	pop	{r7, pc}
 8003fc0:	2000063c 	.word	0x2000063c
 8003fc4:	40005000 	.word	0x40005000

08003fc8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003fc8:	b580      	push	{r7, lr}
 8003fca:	b0ba      	sub	sp, #232	; 0xe8
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003fd0:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003fd4:	2200      	movs	r2, #0
 8003fd6:	601a      	str	r2, [r3, #0]
 8003fd8:	605a      	str	r2, [r3, #4]
 8003fda:	609a      	str	r2, [r3, #8]
 8003fdc:	60da      	str	r2, [r3, #12]
 8003fde:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003fe0:	f107 0318 	add.w	r3, r7, #24
 8003fe4:	22bc      	movs	r2, #188	; 0xbc
 8003fe6:	2100      	movs	r1, #0
 8003fe8:	4618      	mov	r0, r3
 8003fea:	f023 fa23 	bl	8027434 <memset>
  if(uartHandle->Instance==UART5)
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	4a37      	ldr	r2, [pc, #220]	; (80040d0 <HAL_UART_MspInit+0x108>)
 8003ff4:	4293      	cmp	r3, r2
 8003ff6:	d166      	bne.n	80040c6 <HAL_UART_MspInit+0xfe>
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 8003ff8:	2302      	movs	r3, #2
 8003ffa:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8003ffc:	2300      	movs	r3, #0
 8003ffe:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004002:	f107 0318 	add.w	r3, r7, #24
 8004006:	4618      	mov	r0, r3
 8004008:	f003 fe5a 	bl	8007cc0 <HAL_RCCEx_PeriphCLKConfig>
 800400c:	4603      	mov	r3, r0
 800400e:	2b00      	cmp	r3, #0
 8004010:	d001      	beq.n	8004016 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8004012:	f7ff fb47 	bl	80036a4 <Error_Handler>
    }

    /* UART5 clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 8004016:	4b2f      	ldr	r3, [pc, #188]	; (80040d4 <HAL_UART_MspInit+0x10c>)
 8004018:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800401c:	4a2d      	ldr	r2, [pc, #180]	; (80040d4 <HAL_UART_MspInit+0x10c>)
 800401e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004022:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8004026:	4b2b      	ldr	r3, [pc, #172]	; (80040d4 <HAL_UART_MspInit+0x10c>)
 8004028:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800402c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004030:	617b      	str	r3, [r7, #20]
 8004032:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004034:	4b27      	ldr	r3, [pc, #156]	; (80040d4 <HAL_UART_MspInit+0x10c>)
 8004036:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800403a:	4a26      	ldr	r2, [pc, #152]	; (80040d4 <HAL_UART_MspInit+0x10c>)
 800403c:	f043 0304 	orr.w	r3, r3, #4
 8004040:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004044:	4b23      	ldr	r3, [pc, #140]	; (80040d4 <HAL_UART_MspInit+0x10c>)
 8004046:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800404a:	f003 0304 	and.w	r3, r3, #4
 800404e:	613b      	str	r3, [r7, #16]
 8004050:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004052:	4b20      	ldr	r3, [pc, #128]	; (80040d4 <HAL_UART_MspInit+0x10c>)
 8004054:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004058:	4a1e      	ldr	r2, [pc, #120]	; (80040d4 <HAL_UART_MspInit+0x10c>)
 800405a:	f043 0308 	orr.w	r3, r3, #8
 800405e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004062:	4b1c      	ldr	r3, [pc, #112]	; (80040d4 <HAL_UART_MspInit+0x10c>)
 8004064:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004068:	f003 0308 	and.w	r3, r3, #8
 800406c:	60fb      	str	r3, [r7, #12]
 800406e:	68fb      	ldr	r3, [r7, #12]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8004070:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004074:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004078:	2302      	movs	r3, #2
 800407a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800407e:	2300      	movs	r3, #0
 8004080:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004084:	2300      	movs	r3, #0
 8004086:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 800408a:	2308      	movs	r3, #8
 800408c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004090:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8004094:	4619      	mov	r1, r3
 8004096:	4810      	ldr	r0, [pc, #64]	; (80040d8 <HAL_UART_MspInit+0x110>)
 8004098:	f002 f87a 	bl	8006190 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800409c:	2304      	movs	r3, #4
 800409e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80040a2:	2302      	movs	r3, #2
 80040a4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040a8:	2300      	movs	r3, #0
 80040aa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80040ae:	2300      	movs	r3, #0
 80040b0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 80040b4:	2308      	movs	r3, #8
 80040b6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80040ba:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80040be:	4619      	mov	r1, r3
 80040c0:	4806      	ldr	r0, [pc, #24]	; (80040dc <HAL_UART_MspInit+0x114>)
 80040c2:	f002 f865 	bl	8006190 <HAL_GPIO_Init>

  /* USER CODE BEGIN UART5_MspInit 1 */

  /* USER CODE END UART5_MspInit 1 */
  }
}
 80040c6:	bf00      	nop
 80040c8:	37e8      	adds	r7, #232	; 0xe8
 80040ca:	46bd      	mov	sp, r7
 80040cc:	bd80      	pop	{r7, pc}
 80040ce:	bf00      	nop
 80040d0:	40005000 	.word	0x40005000
 80040d4:	58024400 	.word	0x58024400
 80040d8:	58020800 	.word	0x58020800
 80040dc:	58020c00 	.word	0x58020c00

080040e0 <L6474_Board_Delay>:
 * @brief This function provides an accurate delay in milliseconds
 * @param[in] delay  time length in milliseconds
 * @retval None
 **********************************************************/
void L6474_Board_Delay(uint32_t delay)
{
 80040e0:	b580      	push	{r7, lr}
 80040e2:	b082      	sub	sp, #8
 80040e4:	af00      	add	r7, sp, #0
 80040e6:	6078      	str	r0, [r7, #4]
  HAL_Delay(delay);
 80040e8:	6878      	ldr	r0, [r7, #4]
 80040ea:	f000 fb11 	bl	8004710 <HAL_Delay>
}
 80040ee:	bf00      	nop
 80040f0:	3708      	adds	r7, #8
 80040f2:	46bd      	mov	sp, r7
 80040f4:	bd80      	pop	{r7, pc}

080040f6 <L6474_Board_DisableIrq>:
/******************************************************//**
 * @brief This function disable the interruptions
  * @retval None
 **********************************************************/
void L6474_Board_DisableIrq(void)
{
 80040f6:	b480      	push	{r7}
 80040f8:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80040fa:	b672      	cpsid	i
}
 80040fc:	bf00      	nop
  __disable_irq();
}
 80040fe:	bf00      	nop
 8004100:	46bd      	mov	sp, r7
 8004102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004106:	4770      	bx	lr

08004108 <L6474_Board_EnableIrq>:
/******************************************************//**
 * @brief This function enable the interruptions
 * @retval None
 **********************************************************/
void L6474_Board_EnableIrq(void)
{
 8004108:	b480      	push	{r7}
 800410a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsie i" : : : "memory");
 800410c:	b662      	cpsie	i
}
 800410e:	bf00      	nop
  __enable_irq();
}
 8004110:	bf00      	nop
 8004112:	46bd      	mov	sp, r7
 8004114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004118:	4770      	bx	lr
	...

0800411c <L6474_Board_GpioInit>:
 * @brief  Initiliases the GPIOs used by the L6474s
 * @param[in] deviceId (from 0 to 2)
 * @retval None
  **********************************************************/
void L6474_Board_GpioInit(uint8_t deviceId)
{
 800411c:	b580      	push	{r7, lr}
 800411e:	b08a      	sub	sp, #40	; 0x28
 8004120:	af00      	add	r7, sp, #0
 8004122:	4603      	mov	r3, r0
 8004124:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef GPIO_InitStruct;

  if (deviceId ==0)
 8004126:	79fb      	ldrb	r3, [r7, #7]
 8004128:	2b00      	cmp	r3, #0
 800412a:	d16a      	bne.n	8004202 <L6474_Board_GpioInit+0xe6>
  {
    /* GPIO Ports Clock Enable */
    __GPIOC_CLK_ENABLE();
 800412c:	4b53      	ldr	r3, [pc, #332]	; (800427c <L6474_Board_GpioInit+0x160>)
 800412e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004132:	4a52      	ldr	r2, [pc, #328]	; (800427c <L6474_Board_GpioInit+0x160>)
 8004134:	f043 0304 	orr.w	r3, r3, #4
 8004138:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800413c:	4b4f      	ldr	r3, [pc, #316]	; (800427c <L6474_Board_GpioInit+0x160>)
 800413e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004142:	f003 0304 	and.w	r3, r3, #4
 8004146:	613b      	str	r3, [r7, #16]
 8004148:	693b      	ldr	r3, [r7, #16]
    __GPIOA_CLK_ENABLE();
 800414a:	4b4c      	ldr	r3, [pc, #304]	; (800427c <L6474_Board_GpioInit+0x160>)
 800414c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004150:	4a4a      	ldr	r2, [pc, #296]	; (800427c <L6474_Board_GpioInit+0x160>)
 8004152:	f043 0301 	orr.w	r3, r3, #1
 8004156:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800415a:	4b48      	ldr	r3, [pc, #288]	; (800427c <L6474_Board_GpioInit+0x160>)
 800415c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004160:	f003 0301 	and.w	r3, r3, #1
 8004164:	60fb      	str	r3, [r7, #12]
 8004166:	68fb      	ldr	r3, [r7, #12]
    __GPIOB_CLK_ENABLE();
 8004168:	4b44      	ldr	r3, [pc, #272]	; (800427c <L6474_Board_GpioInit+0x160>)
 800416a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800416e:	4a43      	ldr	r2, [pc, #268]	; (800427c <L6474_Board_GpioInit+0x160>)
 8004170:	f043 0302 	orr.w	r3, r3, #2
 8004174:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004178:	4b40      	ldr	r3, [pc, #256]	; (800427c <L6474_Board_GpioInit+0x160>)
 800417a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800417e:	f003 0302 	and.w	r3, r3, #2
 8004182:	60bb      	str	r3, [r7, #8]
 8004184:	68bb      	ldr	r3, [r7, #8]
    
    /* Configure L6474 - Flag pin -------------------------------------------*/
    GPIO_InitStruct.Pin = BSP_MOTOR_CONTROL_BOARD_FLAG_PIN;
 8004186:	2310      	movs	r3, #16
 8004188:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800418a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800418e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004190:	2301      	movs	r3, #1
 8004192:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_MEDIUM;
 8004194:	2301      	movs	r3, #1
 8004196:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(BSP_MOTOR_CONTROL_BOARD_FLAG_PORT, &GPIO_InitStruct);
 8004198:	f107 0314 	add.w	r3, r7, #20
 800419c:	4619      	mov	r1, r3
 800419e:	4838      	ldr	r0, [pc, #224]	; (8004280 <L6474_Board_GpioInit+0x164>)
 80041a0:	f001 fff6 	bl	8006190 <HAL_GPIO_Init>
    
   /* Set Priority of External Line Interrupt used for the Flag interrupt*/ 
    HAL_NVIC_SetPriority(EXTI_MCU_LINE_IRQn, 5, 0);
 80041a4:	2200      	movs	r2, #0
 80041a6:	2105      	movs	r1, #5
 80041a8:	2028      	movs	r0, #40	; 0x28
 80041aa:	f001 fdcd 	bl	8005d48 <HAL_NVIC_SetPriority>
      
    /* Enable the External Line Interrupt used for the Flag interrupt*/
    HAL_NVIC_EnableIRQ(EXTI_MCU_LINE_IRQn);    
 80041ae:	2028      	movs	r0, #40	; 0x28
 80041b0:	f001 fde4 	bl	8005d7c <HAL_NVIC_EnableIRQ>

    /* Configure L6474 - CS pin ---------------------------------------------*/
    GPIO_InitStruct.Pin = BSP_MOTOR_CONTROL_BOARD_CS_PIN;
 80041b4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80041b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80041ba:	2301      	movs	r3, #1
 80041bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041be:	2300      	movs	r3, #0
 80041c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_MEDIUM;
 80041c2:	2301      	movs	r3, #1
 80041c4:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(BSP_MOTOR_CONTROL_BOARD_CS_PORT, &GPIO_InitStruct);
 80041c6:	f107 0314 	add.w	r3, r7, #20
 80041ca:	4619      	mov	r1, r3
 80041cc:	482d      	ldr	r0, [pc, #180]	; (8004284 <L6474_Board_GpioInit+0x168>)
 80041ce:	f001 ffdf 	bl	8006190 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(BSP_MOTOR_CONTROL_BOARD_CS_PORT, BSP_MOTOR_CONTROL_BOARD_CS_PIN, GPIO_PIN_SET); 
 80041d2:	2201      	movs	r2, #1
 80041d4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80041d8:	482a      	ldr	r0, [pc, #168]	; (8004284 <L6474_Board_GpioInit+0x168>)
 80041da:	f002 f989 	bl	80064f0 <HAL_GPIO_WritePin>
    
    /* Configure L6474 - STBY/RESET pin -------------------------------------*/
    GPIO_InitStruct.Pin = BSP_MOTOR_CONTROL_BOARD_RESET_PIN;
 80041de:	f44f 7380 	mov.w	r3, #256	; 0x100
 80041e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80041e4:	2301      	movs	r3, #1
 80041e6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041e8:	2300      	movs	r3, #0
 80041ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_MEDIUM;
 80041ec:	2301      	movs	r3, #1
 80041ee:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(BSP_MOTOR_CONTROL_BOARD_RESET_PORT, &GPIO_InitStruct);
 80041f0:	f107 0314 	add.w	r3, r7, #20
 80041f4:	4619      	mov	r1, r3
 80041f6:	4824      	ldr	r0, [pc, #144]	; (8004288 <L6474_Board_GpioInit+0x16c>)
 80041f8:	f001 ffca 	bl	8006190 <HAL_GPIO_Init>
    L6474_Board_Reset(0);  
 80041fc:	2000      	movs	r0, #0
 80041fe:	f000 f949 	bl	8004494 <L6474_Board_Reset>
  }
  
  switch (deviceId)
 8004202:	79fb      	ldrb	r3, [r7, #7]
 8004204:	2b02      	cmp	r3, #2
 8004206:	d025      	beq.n	8004254 <L6474_Board_GpioInit+0x138>
 8004208:	2b02      	cmp	r3, #2
 800420a:	dc32      	bgt.n	8004272 <L6474_Board_GpioInit+0x156>
 800420c:	2b00      	cmp	r3, #0
 800420e:	d002      	beq.n	8004216 <L6474_Board_GpioInit+0xfa>
 8004210:	2b01      	cmp	r3, #1
 8004212:	d010      	beq.n	8004236 <L6474_Board_GpioInit+0x11a>
      GPIO_InitStruct.Pull = GPIO_NOPULL;
      GPIO_InitStruct.Speed = GPIO_SPEED_MEDIUM;
      HAL_GPIO_Init(BSP_MOTOR_CONTROL_BOARD_DIR_3_PORT, &GPIO_InitStruct);    
        break;
  }
}
 8004214:	e02d      	b.n	8004272 <L6474_Board_GpioInit+0x156>
      GPIO_InitStruct.Pin = BSP_MOTOR_CONTROL_BOARD_DIR_1_PIN;
 8004216:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800421a:	617b      	str	r3, [r7, #20]
      GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800421c:	2301      	movs	r3, #1
 800421e:	61bb      	str	r3, [r7, #24]
      GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004220:	2300      	movs	r3, #0
 8004222:	61fb      	str	r3, [r7, #28]
      GPIO_InitStruct.Speed = GPIO_SPEED_MEDIUM;
 8004224:	2301      	movs	r3, #1
 8004226:	623b      	str	r3, [r7, #32]
      HAL_GPIO_Init(BSP_MOTOR_CONTROL_BOARD_DIR_1_PORT, &GPIO_InitStruct);
 8004228:	f107 0314 	add.w	r3, r7, #20
 800422c:	4619      	mov	r1, r3
 800422e:	4816      	ldr	r0, [pc, #88]	; (8004288 <L6474_Board_GpioInit+0x16c>)
 8004230:	f001 ffae 	bl	8006190 <HAL_GPIO_Init>
      break;
 8004234:	e01d      	b.n	8004272 <L6474_Board_GpioInit+0x156>
      GPIO_InitStruct.Pin = BSP_MOTOR_CONTROL_BOARD_DIR_2_PIN;
 8004236:	2320      	movs	r3, #32
 8004238:	617b      	str	r3, [r7, #20]
      GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800423a:	2301      	movs	r3, #1
 800423c:	61bb      	str	r3, [r7, #24]
      GPIO_InitStruct.Pull = GPIO_NOPULL;
 800423e:	2300      	movs	r3, #0
 8004240:	61fb      	str	r3, [r7, #28]
      GPIO_InitStruct.Speed = GPIO_SPEED_MEDIUM;
 8004242:	2301      	movs	r3, #1
 8004244:	623b      	str	r3, [r7, #32]
      HAL_GPIO_Init(BSP_MOTOR_CONTROL_BOARD_DIR_2_PORT, &GPIO_InitStruct);
 8004246:	f107 0314 	add.w	r3, r7, #20
 800424a:	4619      	mov	r1, r3
 800424c:	480d      	ldr	r0, [pc, #52]	; (8004284 <L6474_Board_GpioInit+0x168>)
 800424e:	f001 ff9f 	bl	8006190 <HAL_GPIO_Init>
      break;
 8004252:	e00e      	b.n	8004272 <L6474_Board_GpioInit+0x156>
      GPIO_InitStruct.Pin = BSP_MOTOR_CONTROL_BOARD_DIR_3_PIN;
 8004254:	2310      	movs	r3, #16
 8004256:	617b      	str	r3, [r7, #20]
      GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004258:	2301      	movs	r3, #1
 800425a:	61bb      	str	r3, [r7, #24]
      GPIO_InitStruct.Pull = GPIO_NOPULL;
 800425c:	2300      	movs	r3, #0
 800425e:	61fb      	str	r3, [r7, #28]
      GPIO_InitStruct.Speed = GPIO_SPEED_MEDIUM;
 8004260:	2301      	movs	r3, #1
 8004262:	623b      	str	r3, [r7, #32]
      HAL_GPIO_Init(BSP_MOTOR_CONTROL_BOARD_DIR_3_PORT, &GPIO_InitStruct);    
 8004264:	f107 0314 	add.w	r3, r7, #20
 8004268:	4619      	mov	r1, r3
 800426a:	4806      	ldr	r0, [pc, #24]	; (8004284 <L6474_Board_GpioInit+0x168>)
 800426c:	f001 ff90 	bl	8006190 <HAL_GPIO_Init>
        break;
 8004270:	bf00      	nop
}
 8004272:	bf00      	nop
 8004274:	3728      	adds	r7, #40	; 0x28
 8004276:	46bd      	mov	sp, r7
 8004278:	bd80      	pop	{r7, pc}
 800427a:	bf00      	nop
 800427c:	58024400 	.word	0x58024400
 8004280:	58021c00 	.word	0x58021c00
 8004284:	58020400 	.word	0x58020400
 8004288:	58022000 	.word	0x58022000

0800428c <L6474_Board_Pwm1SetFreq>:
 * @param[in] newFreq in Hz
 * @retval None
 * @note The frequency is directly the current speed of the device
 **********************************************************/
void L6474_Board_Pwm1SetFreq(uint16_t newFreq)
{
 800428c:	b580      	push	{r7, lr}
 800428e:	b084      	sub	sp, #16
 8004290:	af00      	add	r7, sp, #0
 8004292:	4603      	mov	r3, r0
 8004294:	80fb      	strh	r3, [r7, #6]
  uint32_t sysFreq = HAL_RCC_GetSysClockFreq();
 8004296:	f003 fafb 	bl	8007890 <HAL_RCC_GetSysClockFreq>
 800429a:	60f8      	str	r0, [r7, #12]
  uint32_t period = (sysFreq/ (TIMER_PRESCALER * BSP_MOTOR_CONTROL_BOARD_PWM1_FREQ_RESCALER * (uint32_t)newFreq)) - 1;
 800429c:	88fb      	ldrh	r3, [r7, #6]
 800429e:	029b      	lsls	r3, r3, #10
 80042a0:	68fa      	ldr	r2, [r7, #12]
 80042a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80042a6:	3b01      	subs	r3, #1
 80042a8:	60bb      	str	r3, [r7, #8]
  
  __HAL_TIM_SetAutoreload(&hTimPwm1, period);
 80042aa:	4b0a      	ldr	r3, [pc, #40]	; (80042d4 <L6474_Board_Pwm1SetFreq+0x48>)
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	68ba      	ldr	r2, [r7, #8]
 80042b0:	62da      	str	r2, [r3, #44]	; 0x2c
 80042b2:	4a08      	ldr	r2, [pc, #32]	; (80042d4 <L6474_Board_Pwm1SetFreq+0x48>)
 80042b4:	68bb      	ldr	r3, [r7, #8]
 80042b6:	60d3      	str	r3, [r2, #12]
  __HAL_TIM_SetCompare(&hTimPwm1, BSP_MOTOR_CONTROL_BOARD_CHAN_TIMER_PWM1, period >> 1);
 80042b8:	4b06      	ldr	r3, [pc, #24]	; (80042d4 <L6474_Board_Pwm1SetFreq+0x48>)
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	68ba      	ldr	r2, [r7, #8]
 80042be:	0852      	lsrs	r2, r2, #1
 80042c0:	635a      	str	r2, [r3, #52]	; 0x34
  HAL_TIM_PWM_Start_IT(&hTimPwm1, BSP_MOTOR_CONTROL_BOARD_CHAN_TIMER_PWM1);  
 80042c2:	2100      	movs	r1, #0
 80042c4:	4803      	ldr	r0, [pc, #12]	; (80042d4 <L6474_Board_Pwm1SetFreq+0x48>)
 80042c6:	f006 fe29 	bl	800af1c <HAL_TIM_PWM_Start_IT>
}
 80042ca:	bf00      	nop
 80042cc:	3710      	adds	r7, #16
 80042ce:	46bd      	mov	sp, r7
 80042d0:	bd80      	pop	{r7, pc}
 80042d2:	bf00      	nop
 80042d4:	20000754 	.word	0x20000754

080042d8 <L6474_Board_Pwm2SetFreq>:
 * @param[in] newFreq in Hz
 * @retval None
 * @note The frequency is directly the current speed of the device
 **********************************************************/
void L6474_Board_Pwm2SetFreq(uint16_t newFreq)
{
 80042d8:	b580      	push	{r7, lr}
 80042da:	b084      	sub	sp, #16
 80042dc:	af00      	add	r7, sp, #0
 80042de:	4603      	mov	r3, r0
 80042e0:	80fb      	strh	r3, [r7, #6]
  uint32_t sysFreq = HAL_RCC_GetSysClockFreq();
 80042e2:	f003 fad5 	bl	8007890 <HAL_RCC_GetSysClockFreq>
 80042e6:	60f8      	str	r0, [r7, #12]
  uint32_t period = (sysFreq/ (TIMER_PRESCALER * BSP_MOTOR_CONTROL_BOARD_PWM2_FREQ_RESCALER  * (uint32_t)newFreq)) - 1;
 80042e8:	88fb      	ldrh	r3, [r7, #6]
 80042ea:	029b      	lsls	r3, r3, #10
 80042ec:	68fa      	ldr	r2, [r7, #12]
 80042ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80042f2:	3b01      	subs	r3, #1
 80042f4:	60bb      	str	r3, [r7, #8]
  
  __HAL_TIM_SetAutoreload(&hTimPwm2, period);
 80042f6:	4b0a      	ldr	r3, [pc, #40]	; (8004320 <L6474_Board_Pwm2SetFreq+0x48>)
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	68ba      	ldr	r2, [r7, #8]
 80042fc:	62da      	str	r2, [r3, #44]	; 0x2c
 80042fe:	4a08      	ldr	r2, [pc, #32]	; (8004320 <L6474_Board_Pwm2SetFreq+0x48>)
 8004300:	68bb      	ldr	r3, [r7, #8]
 8004302:	60d3      	str	r3, [r2, #12]
  __HAL_TIM_SetCompare(&hTimPwm2, BSP_MOTOR_CONTROL_BOARD_CHAN_TIMER_PWM2, period >> 1);
 8004304:	4b06      	ldr	r3, [pc, #24]	; (8004320 <L6474_Board_Pwm2SetFreq+0x48>)
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	68ba      	ldr	r2, [r7, #8]
 800430a:	0852      	lsrs	r2, r2, #1
 800430c:	639a      	str	r2, [r3, #56]	; 0x38
  HAL_TIM_PWM_Start_IT(&hTimPwm2, BSP_MOTOR_CONTROL_BOARD_CHAN_TIMER_PWM2);
 800430e:	2104      	movs	r1, #4
 8004310:	4803      	ldr	r0, [pc, #12]	; (8004320 <L6474_Board_Pwm2SetFreq+0x48>)
 8004312:	f006 fe03 	bl	800af1c <HAL_TIM_PWM_Start_IT>
}
 8004316:	bf00      	nop
 8004318:	3710      	adds	r7, #16
 800431a:	46bd      	mov	sp, r7
 800431c:	bd80      	pop	{r7, pc}
 800431e:	bf00      	nop
 8004320:	200007a0 	.word	0x200007a0

08004324 <L6474_Board_Pwm3SetFreq>:
 * @param[in] newFreq in Hz
 * @retval None
 * @note The frequency is directly the current speed of the device
 **********************************************************/
void L6474_Board_Pwm3SetFreq(uint16_t newFreq)
{
 8004324:	b580      	push	{r7, lr}
 8004326:	b084      	sub	sp, #16
 8004328:	af00      	add	r7, sp, #0
 800432a:	4603      	mov	r3, r0
 800432c:	80fb      	strh	r3, [r7, #6]
  uint32_t sysFreq = HAL_RCC_GetSysClockFreq();
 800432e:	f003 faaf 	bl	8007890 <HAL_RCC_GetSysClockFreq>
 8004332:	60f8      	str	r0, [r7, #12]
  /* Double the frequency as the SW is generated by SW */
  uint32_t period = (sysFreq/ (TIMER_PRESCALER * BSP_MOTOR_CONTROL_BOARD_PWM3_FREQ_RESCALER * (uint32_t)newFreq)) - 1;
 8004334:	88fb      	ldrh	r3, [r7, #6]
 8004336:	02db      	lsls	r3, r3, #11
 8004338:	68fa      	ldr	r2, [r7, #12]
 800433a:	fbb2 f3f3 	udiv	r3, r2, r3
 800433e:	3b01      	subs	r3, #1
 8004340:	60bb      	str	r3, [r7, #8]
  
  __HAL_TIM_SetAutoreload(&hTimPwm3, period);
 8004342:	4b0a      	ldr	r3, [pc, #40]	; (800436c <L6474_Board_Pwm3SetFreq+0x48>)
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	68ba      	ldr	r2, [r7, #8]
 8004348:	62da      	str	r2, [r3, #44]	; 0x2c
 800434a:	4a08      	ldr	r2, [pc, #32]	; (800436c <L6474_Board_Pwm3SetFreq+0x48>)
 800434c:	68bb      	ldr	r3, [r7, #8]
 800434e:	60d3      	str	r3, [r2, #12]
  __HAL_TIM_SetCompare(&hTimPwm3, BSP_MOTOR_CONTROL_BOARD_CHAN_TIMER_PWM3, period >> 1);
 8004350:	4b06      	ldr	r3, [pc, #24]	; (800436c <L6474_Board_Pwm3SetFreq+0x48>)
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	68ba      	ldr	r2, [r7, #8]
 8004356:	0852      	lsrs	r2, r2, #1
 8004358:	63da      	str	r2, [r3, #60]	; 0x3c
  HAL_TIM_PWM_Start_IT(&hTimPwm3, BSP_MOTOR_CONTROL_BOARD_CHAN_TIMER_PWM3);  
 800435a:	2108      	movs	r1, #8
 800435c:	4803      	ldr	r0, [pc, #12]	; (800436c <L6474_Board_Pwm3SetFreq+0x48>)
 800435e:	f006 fddd 	bl	800af1c <HAL_TIM_PWM_Start_IT>
}
 8004362:	bf00      	nop
 8004364:	3710      	adds	r7, #16
 8004366:	46bd      	mov	sp, r7
 8004368:	bd80      	pop	{r7, pc}
 800436a:	bf00      	nop
 800436c:	200007ec 	.word	0x200007ec

08004370 <L6474_Board_PwmInit>:
 * @note Device 0 uses PWM1 based on timer 1 
 * Device 1 uses PWM 2 based on timer 2
 * Device 2 uses PWM3 based timer 0
 **********************************************************/
void L6474_Board_PwmInit(uint8_t deviceId)
{
 8004370:	b580      	push	{r7, lr}
 8004372:	b08e      	sub	sp, #56	; 0x38
 8004374:	af00      	add	r7, sp, #0
 8004376:	4603      	mov	r3, r0
 8004378:	71fb      	strb	r3, [r7, #7]
  TIM_OC_InitTypeDef sConfigOC;
  TIM_MasterConfigTypeDef sMasterConfig;
  TIM_HandleTypeDef *pHTim;
  uint32_t  channel;

  switch (deviceId)
 800437a:	79fb      	ldrb	r3, [r7, #7]
 800437c:	2b01      	cmp	r3, #1
 800437e:	d00a      	beq.n	8004396 <L6474_Board_PwmInit+0x26>
 8004380:	2b02      	cmp	r3, #2
 8004382:	d011      	beq.n	80043a8 <L6474_Board_PwmInit+0x38>
  {

  case 0:
  default:
      pHTim = &hTimPwm1;
 8004384:	4b21      	ldr	r3, [pc, #132]	; (800440c <L6474_Board_PwmInit+0x9c>)
 8004386:	637b      	str	r3, [r7, #52]	; 0x34
      pHTim->Instance = BSP_MOTOR_CONTROL_BOARD_TIMER_PWM1;
 8004388:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800438a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800438e:	601a      	str	r2, [r3, #0]
      channel = BSP_MOTOR_CONTROL_BOARD_CHAN_TIMER_PWM1;
 8004390:	2300      	movs	r3, #0
 8004392:	633b      	str	r3, [r7, #48]	; 0x30

      break;
 8004394:	e010      	b.n	80043b8 <L6474_Board_PwmInit+0x48>
    case  1:
      pHTim = &hTimPwm2;
 8004396:	4b1e      	ldr	r3, [pc, #120]	; (8004410 <L6474_Board_PwmInit+0xa0>)
 8004398:	637b      	str	r3, [r7, #52]	; 0x34
      pHTim->Instance = BSP_MOTOR_CONTROL_BOARD_TIMER_PWM2;
 800439a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800439c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80043a0:	601a      	str	r2, [r3, #0]
      channel = BSP_MOTOR_CONTROL_BOARD_CHAN_TIMER_PWM2;
 80043a2:	2304      	movs	r3, #4
 80043a4:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80043a6:	e007      	b.n	80043b8 <L6474_Board_PwmInit+0x48>


    case 2:
      pHTim = &hTimPwm3;
 80043a8:	4b1a      	ldr	r3, [pc, #104]	; (8004414 <L6474_Board_PwmInit+0xa4>)
 80043aa:	637b      	str	r3, [r7, #52]	; 0x34
      pHTim->Instance = BSP_MOTOR_CONTROL_BOARD_TIMER_PWM3;
 80043ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80043ae:	4a1a      	ldr	r2, [pc, #104]	; (8004418 <L6474_Board_PwmInit+0xa8>)
 80043b0:	601a      	str	r2, [r3, #0]
      channel = BSP_MOTOR_CONTROL_BOARD_CHAN_TIMER_PWM3;
 80043b2:	2308      	movs	r3, #8
 80043b4:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80043b6:	bf00      	nop
  }
  pHTim->Init.Prescaler = TIMER_PRESCALER -1;
 80043b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80043ba:	f240 32ff 	movw	r2, #1023	; 0x3ff
 80043be:	605a      	str	r2, [r3, #4]
  
  pHTim->Init.Period = 0;
 80043c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80043c2:	2200      	movs	r2, #0
 80043c4:	60da      	str	r2, [r3, #12]
  pHTim->Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80043c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80043c8:	2200      	movs	r2, #0
 80043ca:	611a      	str	r2, [r3, #16]
  HAL_TIM_PWM_Init(pHTim);
 80043cc:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80043ce:	f006 fcb7 	bl	800ad40 <HAL_TIM_PWM_Init>
  
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80043d2:	2360      	movs	r3, #96	; 0x60
 80043d4:	617b      	str	r3, [r7, #20]
  sConfigOC.Pulse = 0;
 80043d6:	2300      	movs	r3, #0
 80043d8:	61bb      	str	r3, [r7, #24]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80043da:	2300      	movs	r3, #0
 80043dc:	61fb      	str	r3, [r7, #28]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80043de:	2300      	movs	r3, #0
 80043e0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_TIM_PWM_ConfigChannel(pHTim, &sConfigOC, channel);
 80043e2:	f107 0314 	add.w	r3, r7, #20
 80043e6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80043e8:	4619      	mov	r1, r3
 80043ea:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80043ec:	f007 f810 	bl	800b410 <HAL_TIM_PWM_ConfigChannel>
  
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80043f0:	2300      	movs	r3, #0
 80043f2:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80043f4:	2300      	movs	r3, #0
 80043f6:	613b      	str	r3, [r7, #16]
  HAL_TIMEx_MasterConfigSynchronization(pHTim, &sMasterConfig);
 80043f8:	f107 0308 	add.w	r3, r7, #8
 80043fc:	4619      	mov	r1, r3
 80043fe:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8004400:	f007 fcd8 	bl	800bdb4 <HAL_TIMEx_MasterConfigSynchronization>
}
 8004404:	bf00      	nop
 8004406:	3738      	adds	r7, #56	; 0x38
 8004408:	46bd      	mov	sp, r7
 800440a:	bd80      	pop	{r7, pc}
 800440c:	20000754 	.word	0x20000754
 8004410:	200007a0 	.word	0x200007a0
 8004414:	200007ec 	.word	0x200007ec
 8004418:	40000800 	.word	0x40000800

0800441c <L6474_Board_PwmStop>:
 * @brief  Stops the PWM uses by the specified device
 * @param[in] deviceId (from 0 to 2)
 * @retval None
 **********************************************************/
void L6474_Board_PwmStop(uint8_t deviceId)
{
 800441c:	b580      	push	{r7, lr}
 800441e:	b082      	sub	sp, #8
 8004420:	af00      	add	r7, sp, #0
 8004422:	4603      	mov	r3, r0
 8004424:	71fb      	strb	r3, [r7, #7]
  switch (deviceId)
 8004426:	79fb      	ldrb	r3, [r7, #7]
 8004428:	2b02      	cmp	r3, #2
 800442a:	d010      	beq.n	800444e <L6474_Board_PwmStop+0x32>
 800442c:	2b02      	cmp	r3, #2
 800442e:	dc13      	bgt.n	8004458 <L6474_Board_PwmStop+0x3c>
 8004430:	2b00      	cmp	r3, #0
 8004432:	d002      	beq.n	800443a <L6474_Board_PwmStop+0x1e>
 8004434:	2b01      	cmp	r3, #1
 8004436:	d005      	beq.n	8004444 <L6474_Board_PwmStop+0x28>
    case 2:
       HAL_TIM_PWM_Stop(&hTimPwm3,BSP_MOTOR_CONTROL_BOARD_CHAN_TIMER_PWM3);
      
      break;
    default:
      break;//ignore error
 8004438:	e00e      	b.n	8004458 <L6474_Board_PwmStop+0x3c>
       HAL_TIM_PWM_Stop(&hTimPwm1,BSP_MOTOR_CONTROL_BOARD_CHAN_TIMER_PWM1);
 800443a:	2100      	movs	r1, #0
 800443c:	4809      	ldr	r0, [pc, #36]	; (8004464 <L6474_Board_PwmStop+0x48>)
 800443e:	f006 fcd7 	bl	800adf0 <HAL_TIM_PWM_Stop>
      break;
 8004442:	e00a      	b.n	800445a <L6474_Board_PwmStop+0x3e>
      HAL_TIM_PWM_Stop(&hTimPwm2,BSP_MOTOR_CONTROL_BOARD_CHAN_TIMER_PWM2);
 8004444:	2104      	movs	r1, #4
 8004446:	4808      	ldr	r0, [pc, #32]	; (8004468 <L6474_Board_PwmStop+0x4c>)
 8004448:	f006 fcd2 	bl	800adf0 <HAL_TIM_PWM_Stop>
      break;
 800444c:	e005      	b.n	800445a <L6474_Board_PwmStop+0x3e>
       HAL_TIM_PWM_Stop(&hTimPwm3,BSP_MOTOR_CONTROL_BOARD_CHAN_TIMER_PWM3);
 800444e:	2108      	movs	r1, #8
 8004450:	4806      	ldr	r0, [pc, #24]	; (800446c <L6474_Board_PwmStop+0x50>)
 8004452:	f006 fccd 	bl	800adf0 <HAL_TIM_PWM_Stop>
      break;
 8004456:	e000      	b.n	800445a <L6474_Board_PwmStop+0x3e>
      break;//ignore error
 8004458:	bf00      	nop
  }
}
 800445a:	bf00      	nop
 800445c:	3708      	adds	r7, #8
 800445e:	46bd      	mov	sp, r7
 8004460:	bd80      	pop	{r7, pc}
 8004462:	bf00      	nop
 8004464:	20000754 	.word	0x20000754
 8004468:	200007a0 	.word	0x200007a0
 800446c:	200007ec 	.word	0x200007ec

08004470 <L6474_Board_ReleaseReset>:
 * @brief  Releases the L6474 reset (pin set to High) of all devices
 * @param[in] deviceId (from 0 to 2)
 * @retval None
 **********************************************************/
void L6474_Board_ReleaseReset(uint8_t deviceId)
{ 
 8004470:	b580      	push	{r7, lr}
 8004472:	b082      	sub	sp, #8
 8004474:	af00      	add	r7, sp, #0
 8004476:	4603      	mov	r3, r0
 8004478:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(BSP_MOTOR_CONTROL_BOARD_RESET_PORT, BSP_MOTOR_CONTROL_BOARD_RESET_PIN, GPIO_PIN_SET); 
 800447a:	2201      	movs	r2, #1
 800447c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004480:	4803      	ldr	r0, [pc, #12]	; (8004490 <L6474_Board_ReleaseReset+0x20>)
 8004482:	f002 f835 	bl	80064f0 <HAL_GPIO_WritePin>
}
 8004486:	bf00      	nop
 8004488:	3708      	adds	r7, #8
 800448a:	46bd      	mov	sp, r7
 800448c:	bd80      	pop	{r7, pc}
 800448e:	bf00      	nop
 8004490:	58022000 	.word	0x58022000

08004494 <L6474_Board_Reset>:
 * @brief  Resets the L6474 (reset pin set to low) of all devices
 * @param[in] deviceId (from 0 to 2)
 * @retval None
 **********************************************************/
void L6474_Board_Reset(uint8_t deviceId)
{
 8004494:	b580      	push	{r7, lr}
 8004496:	b082      	sub	sp, #8
 8004498:	af00      	add	r7, sp, #0
 800449a:	4603      	mov	r3, r0
 800449c:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(BSP_MOTOR_CONTROL_BOARD_RESET_PORT, BSP_MOTOR_CONTROL_BOARD_RESET_PIN, GPIO_PIN_RESET); 
 800449e:	2200      	movs	r2, #0
 80044a0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80044a4:	4803      	ldr	r0, [pc, #12]	; (80044b4 <L6474_Board_Reset+0x20>)
 80044a6:	f002 f823 	bl	80064f0 <HAL_GPIO_WritePin>
}
 80044aa:	bf00      	nop
 80044ac:	3708      	adds	r7, #8
 80044ae:	46bd      	mov	sp, r7
 80044b0:	bd80      	pop	{r7, pc}
 80044b2:	bf00      	nop
 80044b4:	58022000 	.word	0x58022000

080044b8 <L6474_Board_SetDirectionGpio>:
 * @param[in] deviceId (from 0 to 2)
 * @param[in] gpioState state of the direction gpio (0 to reset, 1 to set)
 * @retval None
 **********************************************************/
void L6474_Board_SetDirectionGpio(uint8_t deviceId, uint8_t gpioState)
{
 80044b8:	b580      	push	{r7, lr}
 80044ba:	b082      	sub	sp, #8
 80044bc:	af00      	add	r7, sp, #0
 80044be:	4603      	mov	r3, r0
 80044c0:	460a      	mov	r2, r1
 80044c2:	71fb      	strb	r3, [r7, #7]
 80044c4:	4613      	mov	r3, r2
 80044c6:	71bb      	strb	r3, [r7, #6]
  switch (deviceId)
 80044c8:	79fb      	ldrb	r3, [r7, #7]
 80044ca:	2b02      	cmp	r3, #2
 80044cc:	d006      	beq.n	80044dc <L6474_Board_SetDirectionGpio+0x24>
 80044ce:	2b02      	cmp	r3, #2
 80044d0:	dc1a      	bgt.n	8004508 <L6474_Board_SetDirectionGpio+0x50>
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d010      	beq.n	80044f8 <L6474_Board_SetDirectionGpio+0x40>
 80044d6:	2b01      	cmp	r3, #1
 80044d8:	d007      	beq.n	80044ea <L6474_Board_SetDirectionGpio+0x32>
      HAL_GPIO_WritePin(BSP_MOTOR_CONTROL_BOARD_DIR_1_PORT, BSP_MOTOR_CONTROL_BOARD_DIR_1_PIN, (GPIO_PinState)gpioState); 
      break;
    default:
      ;
  }
}
 80044da:	e015      	b.n	8004508 <L6474_Board_SetDirectionGpio+0x50>
      HAL_GPIO_WritePin(BSP_MOTOR_CONTROL_BOARD_DIR_3_PORT, BSP_MOTOR_CONTROL_BOARD_DIR_3_PIN, (GPIO_PinState)gpioState); 
 80044dc:	79bb      	ldrb	r3, [r7, #6]
 80044de:	461a      	mov	r2, r3
 80044e0:	2110      	movs	r1, #16
 80044e2:	480b      	ldr	r0, [pc, #44]	; (8004510 <L6474_Board_SetDirectionGpio+0x58>)
 80044e4:	f002 f804 	bl	80064f0 <HAL_GPIO_WritePin>
      break;
 80044e8:	e00e      	b.n	8004508 <L6474_Board_SetDirectionGpio+0x50>
      HAL_GPIO_WritePin(BSP_MOTOR_CONTROL_BOARD_DIR_2_PORT, BSP_MOTOR_CONTROL_BOARD_DIR_2_PIN, (GPIO_PinState)gpioState); 
 80044ea:	79bb      	ldrb	r3, [r7, #6]
 80044ec:	461a      	mov	r2, r3
 80044ee:	2120      	movs	r1, #32
 80044f0:	4807      	ldr	r0, [pc, #28]	; (8004510 <L6474_Board_SetDirectionGpio+0x58>)
 80044f2:	f001 fffd 	bl	80064f0 <HAL_GPIO_WritePin>
      break;
 80044f6:	e007      	b.n	8004508 <L6474_Board_SetDirectionGpio+0x50>
      HAL_GPIO_WritePin(BSP_MOTOR_CONTROL_BOARD_DIR_1_PORT, BSP_MOTOR_CONTROL_BOARD_DIR_1_PIN, (GPIO_PinState)gpioState); 
 80044f8:	79bb      	ldrb	r3, [r7, #6]
 80044fa:	461a      	mov	r2, r3
 80044fc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004500:	4804      	ldr	r0, [pc, #16]	; (8004514 <L6474_Board_SetDirectionGpio+0x5c>)
 8004502:	f001 fff5 	bl	80064f0 <HAL_GPIO_WritePin>
      break;
 8004506:	bf00      	nop
}
 8004508:	bf00      	nop
 800450a:	3708      	adds	r7, #8
 800450c:	46bd      	mov	sp, r7
 800450e:	bd80      	pop	{r7, pc}
 8004510:	58020400 	.word	0x58020400
 8004514:	58022000 	.word	0x58022000

08004518 <L6474_Board_SpiInit>:
/******************************************************//**
 * @brief  Initialise the SPI used by L6474
 * @retval HAL_OK if SPI transaction is OK, HAL_KO else
 **********************************************************/
uint8_t L6474_Board_SpiInit(void)
{
 8004518:	b580      	push	{r7, lr}
 800451a:	b082      	sub	sp, #8
 800451c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status;
  
  /* Initialises the SPI  --------------------------------------------------*/
  SpiHandle.Instance               = SPIx;
 800451e:	4b19      	ldr	r3, [pc, #100]	; (8004584 <L6474_Board_SpiInit+0x6c>)
 8004520:	4a19      	ldr	r2, [pc, #100]	; (8004588 <L6474_Board_SpiInit+0x70>)
 8004522:	601a      	str	r2, [r3, #0]
  SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32; 
 8004524:	4b17      	ldr	r3, [pc, #92]	; (8004584 <L6474_Board_SpiInit+0x6c>)
 8004526:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800452a:	61da      	str	r2, [r3, #28]
  SpiHandle.Init.Direction         = SPI_DIRECTION_2LINES;
 800452c:	4b15      	ldr	r3, [pc, #84]	; (8004584 <L6474_Board_SpiInit+0x6c>)
 800452e:	2200      	movs	r2, #0
 8004530:	609a      	str	r2, [r3, #8]
  SpiHandle.Init.CLKPhase          = SPI_PHASE_2EDGE;    
 8004532:	4b14      	ldr	r3, [pc, #80]	; (8004584 <L6474_Board_SpiInit+0x6c>)
 8004534:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004538:	615a      	str	r2, [r3, #20]
  SpiHandle.Init.CLKPolarity       = SPI_POLARITY_HIGH;
 800453a:	4b12      	ldr	r3, [pc, #72]	; (8004584 <L6474_Board_SpiInit+0x6c>)
 800453c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004540:	611a      	str	r2, [r3, #16]
  SpiHandle.Init.CRCCalculation    = SPI_CRCCALCULATION_DISABLED;
 8004542:	4b10      	ldr	r3, [pc, #64]	; (8004584 <L6474_Board_SpiInit+0x6c>)
 8004544:	2200      	movs	r2, #0
 8004546:	629a      	str	r2, [r3, #40]	; 0x28
  SpiHandle.Init.CRCPolynomial     = 7;
 8004548:	4b0e      	ldr	r3, [pc, #56]	; (8004584 <L6474_Board_SpiInit+0x6c>)
 800454a:	2207      	movs	r2, #7
 800454c:	62da      	str	r2, [r3, #44]	; 0x2c
  SpiHandle.Init.DataSize          = SPI_DATASIZE_8BIT;
 800454e:	4b0d      	ldr	r3, [pc, #52]	; (8004584 <L6474_Board_SpiInit+0x6c>)
 8004550:	2207      	movs	r2, #7
 8004552:	60da      	str	r2, [r3, #12]
  SpiHandle.Init.FirstBit          = SPI_FIRSTBIT_MSB;
 8004554:	4b0b      	ldr	r3, [pc, #44]	; (8004584 <L6474_Board_SpiInit+0x6c>)
 8004556:	2200      	movs	r2, #0
 8004558:	621a      	str	r2, [r3, #32]
  SpiHandle.Init.NSS               = SPI_NSS_SOFT;
 800455a:	4b0a      	ldr	r3, [pc, #40]	; (8004584 <L6474_Board_SpiInit+0x6c>)
 800455c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8004560:	619a      	str	r2, [r3, #24]
  SpiHandle.Init.TIMode            = SPI_TIMODE_DISABLED;
 8004562:	4b08      	ldr	r3, [pc, #32]	; (8004584 <L6474_Board_SpiInit+0x6c>)
 8004564:	2200      	movs	r2, #0
 8004566:	625a      	str	r2, [r3, #36]	; 0x24
  
  SpiHandle.Init.Mode = SPI_MODE_MASTER;
 8004568:	4b06      	ldr	r3, [pc, #24]	; (8004584 <L6474_Board_SpiInit+0x6c>)
 800456a:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 800456e:	605a      	str	r2, [r3, #4]
  
  status = HAL_SPI_Init(&SpiHandle);
 8004570:	4804      	ldr	r0, [pc, #16]	; (8004584 <L6474_Board_SpiInit+0x6c>)
 8004572:	f005 fe31 	bl	800a1d8 <HAL_SPI_Init>
 8004576:	4603      	mov	r3, r0
 8004578:	71fb      	strb	r3, [r7, #7]
  
  return (uint8_t) status;
 800457a:	79fb      	ldrb	r3, [r7, #7]
}
 800457c:	4618      	mov	r0, r3
 800457e:	3708      	adds	r7, #8
 8004580:	46bd      	mov	sp, r7
 8004582:	bd80      	pop	{r7, pc}
 8004584:	200006cc 	.word	0x200006cc
 8004588:	40003800 	.word	0x40003800

0800458c <L6474_Board_SpiWriteBytes>:
 * @param[in] pReceivedByte pointer to the received byte
 * @param[in] nbDevices Number of device in the SPI chain
 * @retval HAL_OK if SPI transaction is OK, HAL_KO else 
 **********************************************************/
uint8_t L6474_Board_SpiWriteBytes(uint8_t *pByteToTransmit, uint8_t *pReceivedByte, uint8_t nbDevices)
{
 800458c:	b580      	push	{r7, lr}
 800458e:	b088      	sub	sp, #32
 8004590:	af02      	add	r7, sp, #8
 8004592:	60f8      	str	r0, [r7, #12]
 8004594:	60b9      	str	r1, [r7, #8]
 8004596:	4613      	mov	r3, r2
 8004598:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status;
  uint32_t i;
  HAL_GPIO_WritePin(BSP_MOTOR_CONTROL_BOARD_CS_PORT, BSP_MOTOR_CONTROL_BOARD_CS_PIN, GPIO_PIN_RESET); 
 800459a:	2200      	movs	r2, #0
 800459c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80045a0:	4816      	ldr	r0, [pc, #88]	; (80045fc <L6474_Board_SpiWriteBytes+0x70>)
 80045a2:	f001 ffa5 	bl	80064f0 <HAL_GPIO_WritePin>
  for (i = 0; i < nbDevices; i++)
 80045a6:	2300      	movs	r3, #0
 80045a8:	613b      	str	r3, [r7, #16]
 80045aa:	e016      	b.n	80045da <L6474_Board_SpiWriteBytes+0x4e>
  {
    status = HAL_SPI_TransmitReceive(&SpiHandle, pByteToTransmit, pReceivedByte, 1, SPIx_TIMEOUT_MAX);
 80045ac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80045b0:	9300      	str	r3, [sp, #0]
 80045b2:	2301      	movs	r3, #1
 80045b4:	68ba      	ldr	r2, [r7, #8]
 80045b6:	68f9      	ldr	r1, [r7, #12]
 80045b8:	4811      	ldr	r0, [pc, #68]	; (8004600 <L6474_Board_SpiWriteBytes+0x74>)
 80045ba:	f005 ff13 	bl	800a3e4 <HAL_SPI_TransmitReceive>
 80045be:	4603      	mov	r3, r0
 80045c0:	75fb      	strb	r3, [r7, #23]
    if (status != HAL_OK)
 80045c2:	7dfb      	ldrb	r3, [r7, #23]
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d10d      	bne.n	80045e4 <L6474_Board_SpiWriteBytes+0x58>
    {
      break;
    }
    pByteToTransmit++;
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	3301      	adds	r3, #1
 80045cc:	60fb      	str	r3, [r7, #12]
    pReceivedByte++;
 80045ce:	68bb      	ldr	r3, [r7, #8]
 80045d0:	3301      	adds	r3, #1
 80045d2:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < nbDevices; i++)
 80045d4:	693b      	ldr	r3, [r7, #16]
 80045d6:	3301      	adds	r3, #1
 80045d8:	613b      	str	r3, [r7, #16]
 80045da:	79fb      	ldrb	r3, [r7, #7]
 80045dc:	693a      	ldr	r2, [r7, #16]
 80045de:	429a      	cmp	r2, r3
 80045e0:	d3e4      	bcc.n	80045ac <L6474_Board_SpiWriteBytes+0x20>
 80045e2:	e000      	b.n	80045e6 <L6474_Board_SpiWriteBytes+0x5a>
      break;
 80045e4:	bf00      	nop
  }
  HAL_GPIO_WritePin(BSP_MOTOR_CONTROL_BOARD_CS_PORT, BSP_MOTOR_CONTROL_BOARD_CS_PIN, GPIO_PIN_SET); 
 80045e6:	2201      	movs	r2, #1
 80045e8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80045ec:	4803      	ldr	r0, [pc, #12]	; (80045fc <L6474_Board_SpiWriteBytes+0x70>)
 80045ee:	f001 ff7f 	bl	80064f0 <HAL_GPIO_WritePin>
  
  return (uint8_t) status;  
 80045f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80045f4:	4618      	mov	r0, r3
 80045f6:	3718      	adds	r7, #24
 80045f8:	46bd      	mov	sp, r7
 80045fa:	bd80      	pop	{r7, pc}
 80045fc:	58020400 	.word	0x58020400
 8004600:	200006cc 	.word	0x200006cc

08004604 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8004604:	f8df d034 	ldr.w	sp, [pc, #52]	; 800463c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8004608:	f7ff fb56 	bl	8003cb8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800460c:	480c      	ldr	r0, [pc, #48]	; (8004640 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800460e:	490d      	ldr	r1, [pc, #52]	; (8004644 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8004610:	4a0d      	ldr	r2, [pc, #52]	; (8004648 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8004612:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004614:	e002      	b.n	800461c <LoopCopyDataInit>

08004616 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004616:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004618:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800461a:	3304      	adds	r3, #4

0800461c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800461c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800461e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004620:	d3f9      	bcc.n	8004616 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004622:	4a0a      	ldr	r2, [pc, #40]	; (800464c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8004624:	4c0a      	ldr	r4, [pc, #40]	; (8004650 <LoopFillZerobss+0x22>)
  movs r3, #0
 8004626:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004628:	e001      	b.n	800462e <LoopFillZerobss>

0800462a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800462a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800462c:	3204      	adds	r2, #4

0800462e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800462e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004630:	d3fb      	bcc.n	800462a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8004632:	f022 feb9 	bl	80273a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004636:	f7fe ff55 	bl	80034e4 <main>
  bx  lr
 800463a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800463c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8004640:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004644:	20000254 	.word	0x20000254
  ldr r2, =_sidata
 8004648:	08048e64 	.word	0x08048e64
  ldr r2, =_sbss
 800464c:	20000254 	.word	0x20000254
  ldr r4, =_ebss
 8004650:	20005ab0 	.word	0x20005ab0

08004654 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004654:	e7fe      	b.n	8004654 <ADC3_IRQHandler>
	...

08004658 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004658:	b580      	push	{r7, lr}
 800465a:	b082      	sub	sp, #8
 800465c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800465e:	2003      	movs	r0, #3
 8004660:	f001 fb67 	bl	8005d32 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004664:	f003 f914 	bl	8007890 <HAL_RCC_GetSysClockFreq>
 8004668:	4602      	mov	r2, r0
 800466a:	4b15      	ldr	r3, [pc, #84]	; (80046c0 <HAL_Init+0x68>)
 800466c:	699b      	ldr	r3, [r3, #24]
 800466e:	0a1b      	lsrs	r3, r3, #8
 8004670:	f003 030f 	and.w	r3, r3, #15
 8004674:	4913      	ldr	r1, [pc, #76]	; (80046c4 <HAL_Init+0x6c>)
 8004676:	5ccb      	ldrb	r3, [r1, r3]
 8004678:	f003 031f 	and.w	r3, r3, #31
 800467c:	fa22 f303 	lsr.w	r3, r2, r3
 8004680:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004682:	4b0f      	ldr	r3, [pc, #60]	; (80046c0 <HAL_Init+0x68>)
 8004684:	699b      	ldr	r3, [r3, #24]
 8004686:	f003 030f 	and.w	r3, r3, #15
 800468a:	4a0e      	ldr	r2, [pc, #56]	; (80046c4 <HAL_Init+0x6c>)
 800468c:	5cd3      	ldrb	r3, [r2, r3]
 800468e:	f003 031f 	and.w	r3, r3, #31
 8004692:	687a      	ldr	r2, [r7, #4]
 8004694:	fa22 f303 	lsr.w	r3, r2, r3
 8004698:	4a0b      	ldr	r2, [pc, #44]	; (80046c8 <HAL_Init+0x70>)
 800469a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800469c:	4a0b      	ldr	r2, [pc, #44]	; (80046cc <HAL_Init+0x74>)
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80046a2:	2000      	movs	r0, #0
 80046a4:	f7ff f9ac 	bl	8003a00 <HAL_InitTick>
 80046a8:	4603      	mov	r3, r0
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d001      	beq.n	80046b2 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80046ae:	2301      	movs	r3, #1
 80046b0:	e002      	b.n	80046b8 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80046b2:	f7ff f987 	bl	80039c4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80046b6:	2300      	movs	r3, #0
}
 80046b8:	4618      	mov	r0, r3
 80046ba:	3708      	adds	r7, #8
 80046bc:	46bd      	mov	sp, r7
 80046be:	bd80      	pop	{r7, pc}
 80046c0:	58024400 	.word	0x58024400
 80046c4:	08028f38 	.word	0x08028f38
 80046c8:	2000015c 	.word	0x2000015c
 80046cc:	20000158 	.word	0x20000158

080046d0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80046d0:	b480      	push	{r7}
 80046d2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80046d4:	4b06      	ldr	r3, [pc, #24]	; (80046f0 <HAL_IncTick+0x20>)
 80046d6:	781b      	ldrb	r3, [r3, #0]
 80046d8:	461a      	mov	r2, r3
 80046da:	4b06      	ldr	r3, [pc, #24]	; (80046f4 <HAL_IncTick+0x24>)
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	4413      	add	r3, r2
 80046e0:	4a04      	ldr	r2, [pc, #16]	; (80046f4 <HAL_IncTick+0x24>)
 80046e2:	6013      	str	r3, [r2, #0]
}
 80046e4:	bf00      	nop
 80046e6:	46bd      	mov	sp, r7
 80046e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ec:	4770      	bx	lr
 80046ee:	bf00      	nop
 80046f0:	20000164 	.word	0x20000164
 80046f4:	20000838 	.word	0x20000838

080046f8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80046f8:	b480      	push	{r7}
 80046fa:	af00      	add	r7, sp, #0
  return uwTick;
 80046fc:	4b03      	ldr	r3, [pc, #12]	; (800470c <HAL_GetTick+0x14>)
 80046fe:	681b      	ldr	r3, [r3, #0]
}
 8004700:	4618      	mov	r0, r3
 8004702:	46bd      	mov	sp, r7
 8004704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004708:	4770      	bx	lr
 800470a:	bf00      	nop
 800470c:	20000838 	.word	0x20000838

08004710 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004710:	b580      	push	{r7, lr}
 8004712:	b084      	sub	sp, #16
 8004714:	af00      	add	r7, sp, #0
 8004716:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004718:	f7ff ffee 	bl	80046f8 <HAL_GetTick>
 800471c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004728:	d005      	beq.n	8004736 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800472a:	4b0a      	ldr	r3, [pc, #40]	; (8004754 <HAL_Delay+0x44>)
 800472c:	781b      	ldrb	r3, [r3, #0]
 800472e:	461a      	mov	r2, r3
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	4413      	add	r3, r2
 8004734:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004736:	bf00      	nop
 8004738:	f7ff ffde 	bl	80046f8 <HAL_GetTick>
 800473c:	4602      	mov	r2, r0
 800473e:	68bb      	ldr	r3, [r7, #8]
 8004740:	1ad3      	subs	r3, r2, r3
 8004742:	68fa      	ldr	r2, [r7, #12]
 8004744:	429a      	cmp	r2, r3
 8004746:	d8f7      	bhi.n	8004738 <HAL_Delay+0x28>
  {
  }
}
 8004748:	bf00      	nop
 800474a:	bf00      	nop
 800474c:	3710      	adds	r7, #16
 800474e:	46bd      	mov	sp, r7
 8004750:	bd80      	pop	{r7, pc}
 8004752:	bf00      	nop
 8004754:	20000164 	.word	0x20000164

08004758 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8004758:	b480      	push	{r7}
 800475a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 800475c:	4b03      	ldr	r3, [pc, #12]	; (800476c <HAL_GetREVID+0x14>)
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	0c1b      	lsrs	r3, r3, #16
}
 8004762:	4618      	mov	r0, r3
 8004764:	46bd      	mov	sp, r7
 8004766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800476a:	4770      	bx	lr
 800476c:	5c001000 	.word	0x5c001000

08004770 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8004770:	b480      	push	{r7}
 8004772:	b083      	sub	sp, #12
 8004774:	af00      	add	r7, sp, #0
 8004776:	6078      	str	r0, [r7, #4]
 8004778:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	689b      	ldr	r3, [r3, #8]
 800477e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8004782:	683b      	ldr	r3, [r7, #0]
 8004784:	431a      	orrs	r2, r3
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	609a      	str	r2, [r3, #8]
}
 800478a:	bf00      	nop
 800478c:	370c      	adds	r7, #12
 800478e:	46bd      	mov	sp, r7
 8004790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004794:	4770      	bx	lr

08004796 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8004796:	b480      	push	{r7}
 8004798:	b083      	sub	sp, #12
 800479a:	af00      	add	r7, sp, #0
 800479c:	6078      	str	r0, [r7, #4]
 800479e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	689b      	ldr	r3, [r3, #8]
 80047a4:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80047a8:	683b      	ldr	r3, [r7, #0]
 80047aa:	431a      	orrs	r2, r3
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	609a      	str	r2, [r3, #8]
}
 80047b0:	bf00      	nop
 80047b2:	370c      	adds	r7, #12
 80047b4:	46bd      	mov	sp, r7
 80047b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ba:	4770      	bx	lr

080047bc <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80047bc:	b480      	push	{r7}
 80047be:	b083      	sub	sp, #12
 80047c0:	af00      	add	r7, sp, #0
 80047c2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	689b      	ldr	r3, [r3, #8]
 80047c8:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80047cc:	4618      	mov	r0, r3
 80047ce:	370c      	adds	r7, #12
 80047d0:	46bd      	mov	sp, r7
 80047d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d6:	4770      	bx	lr

080047d8 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80047d8:	b480      	push	{r7}
 80047da:	b087      	sub	sp, #28
 80047dc:	af00      	add	r7, sp, #0
 80047de:	60f8      	str	r0, [r7, #12]
 80047e0:	60b9      	str	r1, [r7, #8]
 80047e2:	607a      	str	r2, [r7, #4]
 80047e4:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	3360      	adds	r3, #96	; 0x60
 80047ea:	461a      	mov	r2, r3
 80047ec:	68bb      	ldr	r3, [r7, #8]
 80047ee:	009b      	lsls	r3, r3, #2
 80047f0:	4413      	add	r3, r2
 80047f2:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 80047f4:	697b      	ldr	r3, [r7, #20]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 8004802:	683b      	ldr	r3, [r7, #0]
 8004804:	430b      	orrs	r3, r1
 8004806:	431a      	orrs	r2, r3
 8004808:	697b      	ldr	r3, [r7, #20]
 800480a:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 800480c:	bf00      	nop
 800480e:	371c      	adds	r7, #28
 8004810:	46bd      	mov	sp, r7
 8004812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004816:	4770      	bx	lr

08004818 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8004818:	b480      	push	{r7}
 800481a:	b085      	sub	sp, #20
 800481c:	af00      	add	r7, sp, #0
 800481e:	60f8      	str	r0, [r7, #12]
 8004820:	60b9      	str	r1, [r7, #8]
 8004822:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	691b      	ldr	r3, [r3, #16]
 8004828:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 800482c:	68bb      	ldr	r3, [r7, #8]
 800482e:	f003 031f 	and.w	r3, r3, #31
 8004832:	6879      	ldr	r1, [r7, #4]
 8004834:	fa01 f303 	lsl.w	r3, r1, r3
 8004838:	431a      	orrs	r2, r3
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	611a      	str	r2, [r3, #16]
}
 800483e:	bf00      	nop
 8004840:	3714      	adds	r7, #20
 8004842:	46bd      	mov	sp, r7
 8004844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004848:	4770      	bx	lr

0800484a <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 800484a:	b480      	push	{r7}
 800484c:	b087      	sub	sp, #28
 800484e:	af00      	add	r7, sp, #0
 8004850:	60f8      	str	r0, [r7, #12]
 8004852:	60b9      	str	r1, [r7, #8]
 8004854:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	3360      	adds	r3, #96	; 0x60
 800485a:	461a      	mov	r2, r3
 800485c:	68bb      	ldr	r3, [r7, #8]
 800485e:	009b      	lsls	r3, r3, #2
 8004860:	4413      	add	r3, r2
 8004862:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8004864:	697b      	ldr	r3, [r7, #20]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	431a      	orrs	r2, r3
 8004870:	697b      	ldr	r3, [r7, #20]
 8004872:	601a      	str	r2, [r3, #0]
  }
}
 8004874:	bf00      	nop
 8004876:	371c      	adds	r7, #28
 8004878:	46bd      	mov	sp, r7
 800487a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800487e:	4770      	bx	lr

08004880 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8004880:	b480      	push	{r7}
 8004882:	b083      	sub	sp, #12
 8004884:	af00      	add	r7, sp, #0
 8004886:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	68db      	ldr	r3, [r3, #12]
 800488c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004890:	2b00      	cmp	r3, #0
 8004892:	d101      	bne.n	8004898 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8004894:	2301      	movs	r3, #1
 8004896:	e000      	b.n	800489a <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8004898:	2300      	movs	r3, #0
}
 800489a:	4618      	mov	r0, r3
 800489c:	370c      	adds	r7, #12
 800489e:	46bd      	mov	sp, r7
 80048a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a4:	4770      	bx	lr

080048a6 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80048a6:	b480      	push	{r7}
 80048a8:	b087      	sub	sp, #28
 80048aa:	af00      	add	r7, sp, #0
 80048ac:	60f8      	str	r0, [r7, #12]
 80048ae:	60b9      	str	r1, [r7, #8]
 80048b0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	3330      	adds	r3, #48	; 0x30
 80048b6:	461a      	mov	r2, r3
 80048b8:	68bb      	ldr	r3, [r7, #8]
 80048ba:	0a1b      	lsrs	r3, r3, #8
 80048bc:	009b      	lsls	r3, r3, #2
 80048be:	f003 030c 	and.w	r3, r3, #12
 80048c2:	4413      	add	r3, r2
 80048c4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80048c6:	697b      	ldr	r3, [r7, #20]
 80048c8:	681a      	ldr	r2, [r3, #0]
 80048ca:	68bb      	ldr	r3, [r7, #8]
 80048cc:	f003 031f 	and.w	r3, r3, #31
 80048d0:	211f      	movs	r1, #31
 80048d2:	fa01 f303 	lsl.w	r3, r1, r3
 80048d6:	43db      	mvns	r3, r3
 80048d8:	401a      	ands	r2, r3
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	0e9b      	lsrs	r3, r3, #26
 80048de:	f003 011f 	and.w	r1, r3, #31
 80048e2:	68bb      	ldr	r3, [r7, #8]
 80048e4:	f003 031f 	and.w	r3, r3, #31
 80048e8:	fa01 f303 	lsl.w	r3, r1, r3
 80048ec:	431a      	orrs	r2, r3
 80048ee:	697b      	ldr	r3, [r7, #20]
 80048f0:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80048f2:	bf00      	nop
 80048f4:	371c      	adds	r7, #28
 80048f6:	46bd      	mov	sp, r7
 80048f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048fc:	4770      	bx	lr

080048fe <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80048fe:	b480      	push	{r7}
 8004900:	b087      	sub	sp, #28
 8004902:	af00      	add	r7, sp, #0
 8004904:	60f8      	str	r0, [r7, #12]
 8004906:	60b9      	str	r1, [r7, #8]
 8004908:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	3314      	adds	r3, #20
 800490e:	461a      	mov	r2, r3
 8004910:	68bb      	ldr	r3, [r7, #8]
 8004912:	0e5b      	lsrs	r3, r3, #25
 8004914:	009b      	lsls	r3, r3, #2
 8004916:	f003 0304 	and.w	r3, r3, #4
 800491a:	4413      	add	r3, r2
 800491c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800491e:	697b      	ldr	r3, [r7, #20]
 8004920:	681a      	ldr	r2, [r3, #0]
 8004922:	68bb      	ldr	r3, [r7, #8]
 8004924:	0d1b      	lsrs	r3, r3, #20
 8004926:	f003 031f 	and.w	r3, r3, #31
 800492a:	2107      	movs	r1, #7
 800492c:	fa01 f303 	lsl.w	r3, r1, r3
 8004930:	43db      	mvns	r3, r3
 8004932:	401a      	ands	r2, r3
 8004934:	68bb      	ldr	r3, [r7, #8]
 8004936:	0d1b      	lsrs	r3, r3, #20
 8004938:	f003 031f 	and.w	r3, r3, #31
 800493c:	6879      	ldr	r1, [r7, #4]
 800493e:	fa01 f303 	lsl.w	r3, r1, r3
 8004942:	431a      	orrs	r2, r3
 8004944:	697b      	ldr	r3, [r7, #20]
 8004946:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8004948:	bf00      	nop
 800494a:	371c      	adds	r7, #28
 800494c:	46bd      	mov	sp, r7
 800494e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004952:	4770      	bx	lr

08004954 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8004954:	b480      	push	{r7}
 8004956:	b085      	sub	sp, #20
 8004958:	af00      	add	r7, sp, #0
 800495a:	60f8      	str	r0, [r7, #12]
 800495c:	60b9      	str	r1, [r7, #8]
 800495e:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8004966:	68bb      	ldr	r3, [r7, #8]
 8004968:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800496c:	43db      	mvns	r3, r3
 800496e:	401a      	ands	r2, r3
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	f003 0318 	and.w	r3, r3, #24
 8004976:	4908      	ldr	r1, [pc, #32]	; (8004998 <LL_ADC_SetChannelSingleDiff+0x44>)
 8004978:	40d9      	lsrs	r1, r3
 800497a:	68bb      	ldr	r3, [r7, #8]
 800497c:	400b      	ands	r3, r1
 800497e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004982:	431a      	orrs	r2, r3
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif
}
 800498a:	bf00      	nop
 800498c:	3714      	adds	r7, #20
 800498e:	46bd      	mov	sp, r7
 8004990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004994:	4770      	bx	lr
 8004996:	bf00      	nop
 8004998:	000fffff 	.word	0x000fffff

0800499c <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800499c:	b480      	push	{r7}
 800499e:	b083      	sub	sp, #12
 80049a0:	af00      	add	r7, sp, #0
 80049a2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	689b      	ldr	r3, [r3, #8]
 80049a8:	f003 031f 	and.w	r3, r3, #31
}
 80049ac:	4618      	mov	r0, r3
 80049ae:	370c      	adds	r7, #12
 80049b0:	46bd      	mov	sp, r7
 80049b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b6:	4770      	bx	lr

080049b8 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80049b8:	b480      	push	{r7}
 80049ba:	b083      	sub	sp, #12
 80049bc:	af00      	add	r7, sp, #0
 80049be:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	689b      	ldr	r3, [r3, #8]
 80049c4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
}
 80049c8:	4618      	mov	r0, r3
 80049ca:	370c      	adds	r7, #12
 80049cc:	46bd      	mov	sp, r7
 80049ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d2:	4770      	bx	lr

080049d4 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80049d4:	b480      	push	{r7}
 80049d6:	b083      	sub	sp, #12
 80049d8:	af00      	add	r7, sp, #0
 80049da:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	689a      	ldr	r2, [r3, #8]
 80049e0:	4b04      	ldr	r3, [pc, #16]	; (80049f4 <LL_ADC_DisableDeepPowerDown+0x20>)
 80049e2:	4013      	ands	r3, r2
 80049e4:	687a      	ldr	r2, [r7, #4]
 80049e6:	6093      	str	r3, [r2, #8]
}
 80049e8:	bf00      	nop
 80049ea:	370c      	adds	r7, #12
 80049ec:	46bd      	mov	sp, r7
 80049ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f2:	4770      	bx	lr
 80049f4:	5fffffc0 	.word	0x5fffffc0

080049f8 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80049f8:	b480      	push	{r7}
 80049fa:	b083      	sub	sp, #12
 80049fc:	af00      	add	r7, sp, #0
 80049fe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	689b      	ldr	r3, [r3, #8]
 8004a04:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004a08:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004a0c:	d101      	bne.n	8004a12 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8004a0e:	2301      	movs	r3, #1
 8004a10:	e000      	b.n	8004a14 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8004a12:	2300      	movs	r3, #0
}
 8004a14:	4618      	mov	r0, r3
 8004a16:	370c      	adds	r7, #12
 8004a18:	46bd      	mov	sp, r7
 8004a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a1e:	4770      	bx	lr

08004a20 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8004a20:	b480      	push	{r7}
 8004a22:	b083      	sub	sp, #12
 8004a24:	af00      	add	r7, sp, #0
 8004a26:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	689a      	ldr	r2, [r3, #8]
 8004a2c:	4b05      	ldr	r3, [pc, #20]	; (8004a44 <LL_ADC_EnableInternalRegulator+0x24>)
 8004a2e:	4013      	ands	r3, r2
 8004a30:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8004a38:	bf00      	nop
 8004a3a:	370c      	adds	r7, #12
 8004a3c:	46bd      	mov	sp, r7
 8004a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a42:	4770      	bx	lr
 8004a44:	6fffffc0 	.word	0x6fffffc0

08004a48 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8004a48:	b480      	push	{r7}
 8004a4a:	b083      	sub	sp, #12
 8004a4c:	af00      	add	r7, sp, #0
 8004a4e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	689b      	ldr	r3, [r3, #8]
 8004a54:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a58:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004a5c:	d101      	bne.n	8004a62 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8004a5e:	2301      	movs	r3, #1
 8004a60:	e000      	b.n	8004a64 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8004a62:	2300      	movs	r3, #0
}
 8004a64:	4618      	mov	r0, r3
 8004a66:	370c      	adds	r7, #12
 8004a68:	46bd      	mov	sp, r7
 8004a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a6e:	4770      	bx	lr

08004a70 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8004a70:	b480      	push	{r7}
 8004a72:	b083      	sub	sp, #12
 8004a74:	af00      	add	r7, sp, #0
 8004a76:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	689a      	ldr	r2, [r3, #8]
 8004a7c:	4b05      	ldr	r3, [pc, #20]	; (8004a94 <LL_ADC_Enable+0x24>)
 8004a7e:	4013      	ands	r3, r2
 8004a80:	f043 0201 	orr.w	r2, r3, #1
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8004a88:	bf00      	nop
 8004a8a:	370c      	adds	r7, #12
 8004a8c:	46bd      	mov	sp, r7
 8004a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a92:	4770      	bx	lr
 8004a94:	7fffffc0 	.word	0x7fffffc0

08004a98 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8004a98:	b480      	push	{r7}
 8004a9a:	b083      	sub	sp, #12
 8004a9c:	af00      	add	r7, sp, #0
 8004a9e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	689b      	ldr	r3, [r3, #8]
 8004aa4:	f003 0301 	and.w	r3, r3, #1
 8004aa8:	2b01      	cmp	r3, #1
 8004aaa:	d101      	bne.n	8004ab0 <LL_ADC_IsEnabled+0x18>
 8004aac:	2301      	movs	r3, #1
 8004aae:	e000      	b.n	8004ab2 <LL_ADC_IsEnabled+0x1a>
 8004ab0:	2300      	movs	r3, #0
}
 8004ab2:	4618      	mov	r0, r3
 8004ab4:	370c      	adds	r7, #12
 8004ab6:	46bd      	mov	sp, r7
 8004ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004abc:	4770      	bx	lr
	...

08004ac0 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8004ac0:	b480      	push	{r7}
 8004ac2:	b083      	sub	sp, #12
 8004ac4:	af00      	add	r7, sp, #0
 8004ac6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	689a      	ldr	r2, [r3, #8]
 8004acc:	4b05      	ldr	r3, [pc, #20]	; (8004ae4 <LL_ADC_REG_StartConversion+0x24>)
 8004ace:	4013      	ands	r3, r2
 8004ad0:	f043 0204 	orr.w	r2, r3, #4
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8004ad8:	bf00      	nop
 8004ada:	370c      	adds	r7, #12
 8004adc:	46bd      	mov	sp, r7
 8004ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae2:	4770      	bx	lr
 8004ae4:	7fffffc0 	.word	0x7fffffc0

08004ae8 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8004ae8:	b480      	push	{r7}
 8004aea:	b083      	sub	sp, #12
 8004aec:	af00      	add	r7, sp, #0
 8004aee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	689b      	ldr	r3, [r3, #8]
 8004af4:	f003 0304 	and.w	r3, r3, #4
 8004af8:	2b04      	cmp	r3, #4
 8004afa:	d101      	bne.n	8004b00 <LL_ADC_REG_IsConversionOngoing+0x18>
 8004afc:	2301      	movs	r3, #1
 8004afe:	e000      	b.n	8004b02 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004b00:	2300      	movs	r3, #0
}
 8004b02:	4618      	mov	r0, r3
 8004b04:	370c      	adds	r7, #12
 8004b06:	46bd      	mov	sp, r7
 8004b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b0c:	4770      	bx	lr

08004b0e <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8004b0e:	b480      	push	{r7}
 8004b10:	b083      	sub	sp, #12
 8004b12:	af00      	add	r7, sp, #0
 8004b14:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	689b      	ldr	r3, [r3, #8]
 8004b1a:	f003 0308 	and.w	r3, r3, #8
 8004b1e:	2b08      	cmp	r3, #8
 8004b20:	d101      	bne.n	8004b26 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8004b22:	2301      	movs	r3, #1
 8004b24:	e000      	b.n	8004b28 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8004b26:	2300      	movs	r3, #0
}
 8004b28:	4618      	mov	r0, r3
 8004b2a:	370c      	adds	r7, #12
 8004b2c:	46bd      	mov	sp, r7
 8004b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b32:	4770      	bx	lr

08004b34 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8004b34:	b590      	push	{r4, r7, lr}
 8004b36:	b089      	sub	sp, #36	; 0x24
 8004b38:	af00      	add	r7, sp, #0
 8004b3a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004b3c:	2300      	movs	r3, #0
 8004b3e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8004b40:	2300      	movs	r3, #0
 8004b42:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d101      	bne.n	8004b4e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8004b4a:	2301      	movs	r3, #1
 8004b4c:	e18f      	b.n	8004e6e <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	68db      	ldr	r3, [r3, #12]
 8004b52:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d109      	bne.n	8004b70 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004b5c:	6878      	ldr	r0, [r7, #4]
 8004b5e:	f7fb fdf7 	bl	8000750 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	2200      	movs	r2, #0
 8004b66:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	2200      	movs	r2, #0
 8004b6c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	4618      	mov	r0, r3
 8004b76:	f7ff ff3f 	bl	80049f8 <LL_ADC_IsDeepPowerDownEnabled>
 8004b7a:	4603      	mov	r3, r0
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d004      	beq.n	8004b8a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	4618      	mov	r0, r3
 8004b86:	f7ff ff25 	bl	80049d4 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	4618      	mov	r0, r3
 8004b90:	f7ff ff5a 	bl	8004a48 <LL_ADC_IsInternalRegulatorEnabled>
 8004b94:	4603      	mov	r3, r0
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d114      	bne.n	8004bc4 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	4618      	mov	r0, r3
 8004ba0:	f7ff ff3e 	bl	8004a20 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004ba4:	4b87      	ldr	r3, [pc, #540]	; (8004dc4 <HAL_ADC_Init+0x290>)
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	099b      	lsrs	r3, r3, #6
 8004baa:	4a87      	ldr	r2, [pc, #540]	; (8004dc8 <HAL_ADC_Init+0x294>)
 8004bac:	fba2 2303 	umull	r2, r3, r2, r3
 8004bb0:	099b      	lsrs	r3, r3, #6
 8004bb2:	3301      	adds	r3, #1
 8004bb4:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8004bb6:	e002      	b.n	8004bbe <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8004bb8:	68bb      	ldr	r3, [r7, #8]
 8004bba:	3b01      	subs	r3, #1
 8004bbc:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8004bbe:	68bb      	ldr	r3, [r7, #8]
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d1f9      	bne.n	8004bb8 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	4618      	mov	r0, r3
 8004bca:	f7ff ff3d 	bl	8004a48 <LL_ADC_IsInternalRegulatorEnabled>
 8004bce:	4603      	mov	r3, r0
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d10d      	bne.n	8004bf0 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004bd8:	f043 0210 	orr.w	r2, r3, #16
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004be4:	f043 0201 	orr.w	r2, r3, #1
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8004bec:	2301      	movs	r3, #1
 8004bee:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	4618      	mov	r0, r3
 8004bf6:	f7ff ff77 	bl	8004ae8 <LL_ADC_REG_IsConversionOngoing>
 8004bfa:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c00:	f003 0310 	and.w	r3, r3, #16
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	f040 8129 	bne.w	8004e5c <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8004c0a:	697b      	ldr	r3, [r7, #20]
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	f040 8125 	bne.w	8004e5c <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c16:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8004c1a:	f043 0202 	orr.w	r2, r3, #2
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	4618      	mov	r0, r3
 8004c28:	f7ff ff36 	bl	8004a98 <LL_ADC_IsEnabled>
 8004c2c:	4603      	mov	r3, r0
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d136      	bne.n	8004ca0 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	4a65      	ldr	r2, [pc, #404]	; (8004dcc <HAL_ADC_Init+0x298>)
 8004c38:	4293      	cmp	r3, r2
 8004c3a:	d004      	beq.n	8004c46 <HAL_ADC_Init+0x112>
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	4a63      	ldr	r2, [pc, #396]	; (8004dd0 <HAL_ADC_Init+0x29c>)
 8004c42:	4293      	cmp	r3, r2
 8004c44:	d10e      	bne.n	8004c64 <HAL_ADC_Init+0x130>
 8004c46:	4861      	ldr	r0, [pc, #388]	; (8004dcc <HAL_ADC_Init+0x298>)
 8004c48:	f7ff ff26 	bl	8004a98 <LL_ADC_IsEnabled>
 8004c4c:	4604      	mov	r4, r0
 8004c4e:	4860      	ldr	r0, [pc, #384]	; (8004dd0 <HAL_ADC_Init+0x29c>)
 8004c50:	f7ff ff22 	bl	8004a98 <LL_ADC_IsEnabled>
 8004c54:	4603      	mov	r3, r0
 8004c56:	4323      	orrs	r3, r4
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	bf0c      	ite	eq
 8004c5c:	2301      	moveq	r3, #1
 8004c5e:	2300      	movne	r3, #0
 8004c60:	b2db      	uxtb	r3, r3
 8004c62:	e008      	b.n	8004c76 <HAL_ADC_Init+0x142>
 8004c64:	485b      	ldr	r0, [pc, #364]	; (8004dd4 <HAL_ADC_Init+0x2a0>)
 8004c66:	f7ff ff17 	bl	8004a98 <LL_ADC_IsEnabled>
 8004c6a:	4603      	mov	r3, r0
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	bf0c      	ite	eq
 8004c70:	2301      	moveq	r3, #1
 8004c72:	2300      	movne	r3, #0
 8004c74:	b2db      	uxtb	r3, r3
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d012      	beq.n	8004ca0 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	4a53      	ldr	r2, [pc, #332]	; (8004dcc <HAL_ADC_Init+0x298>)
 8004c80:	4293      	cmp	r3, r2
 8004c82:	d004      	beq.n	8004c8e <HAL_ADC_Init+0x15a>
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	4a51      	ldr	r2, [pc, #324]	; (8004dd0 <HAL_ADC_Init+0x29c>)
 8004c8a:	4293      	cmp	r3, r2
 8004c8c:	d101      	bne.n	8004c92 <HAL_ADC_Init+0x15e>
 8004c8e:	4a52      	ldr	r2, [pc, #328]	; (8004dd8 <HAL_ADC_Init+0x2a4>)
 8004c90:	e000      	b.n	8004c94 <HAL_ADC_Init+0x160>
 8004c92:	4a52      	ldr	r2, [pc, #328]	; (8004ddc <HAL_ADC_Init+0x2a8>)
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	685b      	ldr	r3, [r3, #4]
 8004c98:	4619      	mov	r1, r3
 8004c9a:	4610      	mov	r0, r2
 8004c9c:	f7ff fd68 	bl	8004770 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8004ca0:	f7ff fd5a 	bl	8004758 <HAL_GetREVID>
 8004ca4:	4603      	mov	r3, r0
 8004ca6:	f241 0203 	movw	r2, #4099	; 0x1003
 8004caa:	4293      	cmp	r3, r2
 8004cac:	d914      	bls.n	8004cd8 <HAL_ADC_Init+0x1a4>
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	689b      	ldr	r3, [r3, #8]
 8004cb2:	2b10      	cmp	r3, #16
 8004cb4:	d110      	bne.n	8004cd8 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	7d5b      	ldrb	r3, [r3, #21]
 8004cba:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8004cc0:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8004cc6:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	7f1b      	ldrb	r3, [r3, #28]
 8004ccc:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8004cce:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8004cd0:	f043 030c 	orr.w	r3, r3, #12
 8004cd4:	61bb      	str	r3, [r7, #24]
 8004cd6:	e00d      	b.n	8004cf4 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	7d5b      	ldrb	r3, [r3, #21]
 8004cdc:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8004ce2:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8004ce8:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	7f1b      	ldrb	r3, [r3, #28]
 8004cee:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8004cf0:	4313      	orrs	r3, r2
 8004cf2:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	7f1b      	ldrb	r3, [r3, #28]
 8004cf8:	2b01      	cmp	r3, #1
 8004cfa:	d106      	bne.n	8004d0a <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	6a1b      	ldr	r3, [r3, #32]
 8004d00:	3b01      	subs	r3, #1
 8004d02:	045b      	lsls	r3, r3, #17
 8004d04:	69ba      	ldr	r2, [r7, #24]
 8004d06:	4313      	orrs	r3, r2
 8004d08:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d009      	beq.n	8004d26 <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d16:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d1e:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004d20:	69ba      	ldr	r2, [r7, #24]
 8004d22:	4313      	orrs	r3, r2
 8004d24:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	68da      	ldr	r2, [r3, #12]
 8004d2c:	4b2c      	ldr	r3, [pc, #176]	; (8004de0 <HAL_ADC_Init+0x2ac>)
 8004d2e:	4013      	ands	r3, r2
 8004d30:	687a      	ldr	r2, [r7, #4]
 8004d32:	6812      	ldr	r2, [r2, #0]
 8004d34:	69b9      	ldr	r1, [r7, #24]
 8004d36:	430b      	orrs	r3, r1
 8004d38:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	4618      	mov	r0, r3
 8004d40:	f7ff fed2 	bl	8004ae8 <LL_ADC_REG_IsConversionOngoing>
 8004d44:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	4618      	mov	r0, r3
 8004d4c:	f7ff fedf 	bl	8004b0e <LL_ADC_INJ_IsConversionOngoing>
 8004d50:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004d52:	693b      	ldr	r3, [r7, #16]
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d15f      	bne.n	8004e18 <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d15c      	bne.n	8004e18 <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	7d1b      	ldrb	r3, [r3, #20]
 8004d62:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 8004d68:	4313      	orrs	r3, r2
 8004d6a:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	68da      	ldr	r2, [r3, #12]
 8004d72:	4b1c      	ldr	r3, [pc, #112]	; (8004de4 <HAL_ADC_Init+0x2b0>)
 8004d74:	4013      	ands	r3, r2
 8004d76:	687a      	ldr	r2, [r7, #4]
 8004d78:	6812      	ldr	r2, [r2, #0]
 8004d7a:	69b9      	ldr	r1, [r7, #24]
 8004d7c:	430b      	orrs	r3, r1
 8004d7e:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004d86:	2b01      	cmp	r3, #1
 8004d88:	d130      	bne.n	8004dec <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d8e:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	691a      	ldr	r2, [r3, #16]
 8004d96:	4b14      	ldr	r3, [pc, #80]	; (8004de8 <HAL_ADC_Init+0x2b4>)
 8004d98:	4013      	ands	r3, r2
 8004d9a:	687a      	ldr	r2, [r7, #4]
 8004d9c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004d9e:	3a01      	subs	r2, #1
 8004da0:	0411      	lsls	r1, r2, #16
 8004da2:	687a      	ldr	r2, [r7, #4]
 8004da4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004da6:	4311      	orrs	r1, r2
 8004da8:	687a      	ldr	r2, [r7, #4]
 8004daa:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8004dac:	4311      	orrs	r1, r2
 8004dae:	687a      	ldr	r2, [r7, #4]
 8004db0:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8004db2:	430a      	orrs	r2, r1
 8004db4:	431a      	orrs	r2, r3
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	f042 0201 	orr.w	r2, r2, #1
 8004dbe:	611a      	str	r2, [r3, #16]
 8004dc0:	e01c      	b.n	8004dfc <HAL_ADC_Init+0x2c8>
 8004dc2:	bf00      	nop
 8004dc4:	20000158 	.word	0x20000158
 8004dc8:	053e2d63 	.word	0x053e2d63
 8004dcc:	40022000 	.word	0x40022000
 8004dd0:	40022100 	.word	0x40022100
 8004dd4:	58026000 	.word	0x58026000
 8004dd8:	40022300 	.word	0x40022300
 8004ddc:	58026300 	.word	0x58026300
 8004de0:	fff0c003 	.word	0xfff0c003
 8004de4:	ffffbffc 	.word	0xffffbffc
 8004de8:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	691a      	ldr	r2, [r3, #16]
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	f022 0201 	bic.w	r2, r2, #1
 8004dfa:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	691b      	ldr	r3, [r3, #16]
 8004e02:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	430a      	orrs	r2, r1
 8004e10:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8004e12:	6878      	ldr	r0, [r7, #4]
 8004e14:	f000 fdd6 	bl	80059c4 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	68db      	ldr	r3, [r3, #12]
 8004e1c:	2b01      	cmp	r3, #1
 8004e1e:	d10c      	bne.n	8004e3a <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e26:	f023 010f 	bic.w	r1, r3, #15
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	699b      	ldr	r3, [r3, #24]
 8004e2e:	1e5a      	subs	r2, r3, #1
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	430a      	orrs	r2, r1
 8004e36:	631a      	str	r2, [r3, #48]	; 0x30
 8004e38:	e007      	b.n	8004e4a <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	f022 020f 	bic.w	r2, r2, #15
 8004e48:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e4e:	f023 0303 	bic.w	r3, r3, #3
 8004e52:	f043 0201 	orr.w	r2, r3, #1
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	655a      	str	r2, [r3, #84]	; 0x54
 8004e5a:	e007      	b.n	8004e6c <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e60:	f043 0210 	orr.w	r2, r3, #16
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8004e68:	2301      	movs	r3, #1
 8004e6a:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8004e6c:	7ffb      	ldrb	r3, [r7, #31]
}
 8004e6e:	4618      	mov	r0, r3
 8004e70:	3724      	adds	r7, #36	; 0x24
 8004e72:	46bd      	mov	sp, r7
 8004e74:	bd90      	pop	{r4, r7, pc}
 8004e76:	bf00      	nop

08004e78 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8004e78:	b580      	push	{r7, lr}
 8004e7a:	b086      	sub	sp, #24
 8004e7c:	af00      	add	r7, sp, #0
 8004e7e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	4a5c      	ldr	r2, [pc, #368]	; (8004ff8 <HAL_ADC_Start+0x180>)
 8004e86:	4293      	cmp	r3, r2
 8004e88:	d004      	beq.n	8004e94 <HAL_ADC_Start+0x1c>
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	4a5b      	ldr	r2, [pc, #364]	; (8004ffc <HAL_ADC_Start+0x184>)
 8004e90:	4293      	cmp	r3, r2
 8004e92:	d101      	bne.n	8004e98 <HAL_ADC_Start+0x20>
 8004e94:	4b5a      	ldr	r3, [pc, #360]	; (8005000 <HAL_ADC_Start+0x188>)
 8004e96:	e000      	b.n	8004e9a <HAL_ADC_Start+0x22>
 8004e98:	4b5a      	ldr	r3, [pc, #360]	; (8005004 <HAL_ADC_Start+0x18c>)
 8004e9a:	4618      	mov	r0, r3
 8004e9c:	f7ff fd7e 	bl	800499c <LL_ADC_GetMultimode>
 8004ea0:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	4618      	mov	r0, r3
 8004ea8:	f7ff fe1e 	bl	8004ae8 <LL_ADC_REG_IsConversionOngoing>
 8004eac:	4603      	mov	r3, r0
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	f040 809a 	bne.w	8004fe8 <HAL_ADC_Start+0x170>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004eba:	2b01      	cmp	r3, #1
 8004ebc:	d101      	bne.n	8004ec2 <HAL_ADC_Start+0x4a>
 8004ebe:	2302      	movs	r3, #2
 8004ec0:	e095      	b.n	8004fee <HAL_ADC_Start+0x176>
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	2201      	movs	r2, #1
 8004ec6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8004eca:	6878      	ldr	r0, [r7, #4]
 8004ecc:	f000 fcf0 	bl	80058b0 <ADC_Enable>
 8004ed0:	4603      	mov	r3, r0
 8004ed2:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8004ed4:	7dfb      	ldrb	r3, [r7, #23]
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	f040 8081 	bne.w	8004fde <HAL_ADC_Start+0x166>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004ee0:	4b49      	ldr	r3, [pc, #292]	; (8005008 <HAL_ADC_Start+0x190>)
 8004ee2:	4013      	ands	r3, r2
 8004ee4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	4a42      	ldr	r2, [pc, #264]	; (8004ffc <HAL_ADC_Start+0x184>)
 8004ef2:	4293      	cmp	r3, r2
 8004ef4:	d002      	beq.n	8004efc <HAL_ADC_Start+0x84>
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	e000      	b.n	8004efe <HAL_ADC_Start+0x86>
 8004efc:	4b3e      	ldr	r3, [pc, #248]	; (8004ff8 <HAL_ADC_Start+0x180>)
 8004efe:	687a      	ldr	r2, [r7, #4]
 8004f00:	6812      	ldr	r2, [r2, #0]
 8004f02:	4293      	cmp	r3, r2
 8004f04:	d002      	beq.n	8004f0c <HAL_ADC_Start+0x94>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004f06:	693b      	ldr	r3, [r7, #16]
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d105      	bne.n	8004f18 <HAL_ADC_Start+0xa0>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f10:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	655a      	str	r2, [r3, #84]	; 0x54
      }

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f1c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004f20:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f24:	d106      	bne.n	8004f34 <HAL_ADC_Start+0xbc>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f2a:	f023 0206 	bic.w	r2, r3, #6
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	659a      	str	r2, [r3, #88]	; 0x58
 8004f32:	e002      	b.n	8004f3a <HAL_ADC_Start+0xc2>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	2200      	movs	r2, #0
 8004f38:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	221c      	movs	r2, #28
 8004f40:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	2200      	movs	r2, #0
 8004f46:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      /* trigger event.                                                       */
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	4a2b      	ldr	r2, [pc, #172]	; (8004ffc <HAL_ADC_Start+0x184>)
 8004f50:	4293      	cmp	r3, r2
 8004f52:	d002      	beq.n	8004f5a <HAL_ADC_Start+0xe2>
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	e000      	b.n	8004f5c <HAL_ADC_Start+0xe4>
 8004f5a:	4b27      	ldr	r3, [pc, #156]	; (8004ff8 <HAL_ADC_Start+0x180>)
 8004f5c:	687a      	ldr	r2, [r7, #4]
 8004f5e:	6812      	ldr	r2, [r2, #0]
 8004f60:	4293      	cmp	r3, r2
 8004f62:	d008      	beq.n	8004f76 <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004f64:	693b      	ldr	r3, [r7, #16]
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d005      	beq.n	8004f76 <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8004f6a:	693b      	ldr	r3, [r7, #16]
 8004f6c:	2b05      	cmp	r3, #5
 8004f6e:	d002      	beq.n	8004f76 <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8004f70:	693b      	ldr	r3, [r7, #16]
 8004f72:	2b09      	cmp	r3, #9
 8004f74:	d114      	bne.n	8004fa0 <HAL_ADC_Start+0x128>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	68db      	ldr	r3, [r3, #12]
 8004f7c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d007      	beq.n	8004f94 <HAL_ADC_Start+0x11c>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f88:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004f8c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	4618      	mov	r0, r3
 8004f9a:	f7ff fd91 	bl	8004ac0 <LL_ADC_REG_StartConversion>
 8004f9e:	e025      	b.n	8004fec <HAL_ADC_Start+0x174>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fa4:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	655a      	str	r2, [r3, #84]	; 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	4a12      	ldr	r2, [pc, #72]	; (8004ffc <HAL_ADC_Start+0x184>)
 8004fb2:	4293      	cmp	r3, r2
 8004fb4:	d002      	beq.n	8004fbc <HAL_ADC_Start+0x144>
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	e000      	b.n	8004fbe <HAL_ADC_Start+0x146>
 8004fbc:	4b0e      	ldr	r3, [pc, #56]	; (8004ff8 <HAL_ADC_Start+0x180>)
 8004fbe:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	68db      	ldr	r3, [r3, #12]
 8004fc4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d00f      	beq.n	8004fec <HAL_ADC_Start+0x174>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fd0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004fd4:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	655a      	str	r2, [r3, #84]	; 0x54
 8004fdc:	e006      	b.n	8004fec <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	2200      	movs	r2, #0
 8004fe2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8004fe6:	e001      	b.n	8004fec <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8004fe8:	2302      	movs	r3, #2
 8004fea:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8004fec:	7dfb      	ldrb	r3, [r7, #23]
}
 8004fee:	4618      	mov	r0, r3
 8004ff0:	3718      	adds	r7, #24
 8004ff2:	46bd      	mov	sp, r7
 8004ff4:	bd80      	pop	{r7, pc}
 8004ff6:	bf00      	nop
 8004ff8:	40022000 	.word	0x40022000
 8004ffc:	40022100 	.word	0x40022100
 8005000:	40022300 	.word	0x40022300
 8005004:	58026300 	.word	0x58026300
 8005008:	fffff0fe 	.word	0xfffff0fe

0800500c <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 800500c:	b580      	push	{r7, lr}
 800500e:	b088      	sub	sp, #32
 8005010:	af00      	add	r7, sp, #0
 8005012:	6078      	str	r0, [r7, #4]
 8005014:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	4a72      	ldr	r2, [pc, #456]	; (80051e4 <HAL_ADC_PollForConversion+0x1d8>)
 800501c:	4293      	cmp	r3, r2
 800501e:	d004      	beq.n	800502a <HAL_ADC_PollForConversion+0x1e>
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	4a70      	ldr	r2, [pc, #448]	; (80051e8 <HAL_ADC_PollForConversion+0x1dc>)
 8005026:	4293      	cmp	r3, r2
 8005028:	d101      	bne.n	800502e <HAL_ADC_PollForConversion+0x22>
 800502a:	4b70      	ldr	r3, [pc, #448]	; (80051ec <HAL_ADC_PollForConversion+0x1e0>)
 800502c:	e000      	b.n	8005030 <HAL_ADC_PollForConversion+0x24>
 800502e:	4b70      	ldr	r3, [pc, #448]	; (80051f0 <HAL_ADC_PollForConversion+0x1e4>)
 8005030:	4618      	mov	r0, r3
 8005032:	f7ff fcb3 	bl	800499c <LL_ADC_GetMultimode>
 8005036:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	691b      	ldr	r3, [r3, #16]
 800503c:	2b08      	cmp	r3, #8
 800503e:	d102      	bne.n	8005046 <HAL_ADC_PollForConversion+0x3a>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8005040:	2308      	movs	r3, #8
 8005042:	61fb      	str	r3, [r7, #28]
 8005044:	e037      	b.n	80050b6 <HAL_ADC_PollForConversion+0xaa>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8005046:	697b      	ldr	r3, [r7, #20]
 8005048:	2b00      	cmp	r3, #0
 800504a:	d005      	beq.n	8005058 <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800504c:	697b      	ldr	r3, [r7, #20]
 800504e:	2b05      	cmp	r3, #5
 8005050:	d002      	beq.n	8005058 <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8005052:	697b      	ldr	r3, [r7, #20]
 8005054:	2b09      	cmp	r3, #9
 8005056:	d111      	bne.n	800507c <HAL_ADC_PollForConversion+0x70>
       )
    {
      /* Check DMNGT bit in handle ADC CFGR register */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	68db      	ldr	r3, [r3, #12]
 800505e:	f003 0301 	and.w	r3, r3, #1
 8005062:	2b00      	cmp	r3, #0
 8005064:	d007      	beq.n	8005076 <HAL_ADC_PollForConversion+0x6a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800506a:	f043 0220 	orr.w	r2, r3, #32
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 8005072:	2301      	movs	r3, #1
 8005074:	e0b1      	b.n	80051da <HAL_ADC_PollForConversion+0x1ce>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8005076:	2304      	movs	r3, #4
 8005078:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 800507a:	e01c      	b.n	80050b6 <HAL_ADC_PollForConversion+0xaa>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	4a58      	ldr	r2, [pc, #352]	; (80051e4 <HAL_ADC_PollForConversion+0x1d8>)
 8005082:	4293      	cmp	r3, r2
 8005084:	d004      	beq.n	8005090 <HAL_ADC_PollForConversion+0x84>
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	4a57      	ldr	r2, [pc, #348]	; (80051e8 <HAL_ADC_PollForConversion+0x1dc>)
 800508c:	4293      	cmp	r3, r2
 800508e:	d101      	bne.n	8005094 <HAL_ADC_PollForConversion+0x88>
 8005090:	4b56      	ldr	r3, [pc, #344]	; (80051ec <HAL_ADC_PollForConversion+0x1e0>)
 8005092:	e000      	b.n	8005096 <HAL_ADC_PollForConversion+0x8a>
 8005094:	4b56      	ldr	r3, [pc, #344]	; (80051f0 <HAL_ADC_PollForConversion+0x1e4>)
 8005096:	4618      	mov	r0, r3
 8005098:	f7ff fc8e 	bl	80049b8 <LL_ADC_GetMultiDMATransfer>
 800509c:	4603      	mov	r3, r0
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d007      	beq.n	80050b2 <HAL_ADC_PollForConversion+0xa6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050a6:	f043 0220 	orr.w	r2, r3, #32
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 80050ae:	2301      	movs	r3, #1
 80050b0:	e093      	b.n	80051da <HAL_ADC_PollForConversion+0x1ce>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 80050b2:	2304      	movs	r3, #4
 80050b4:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 80050b6:	f7ff fb1f 	bl	80046f8 <HAL_GetTick>
 80050ba:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80050bc:	e021      	b.n	8005102 <HAL_ADC_PollForConversion+0xf6>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80050be:	683b      	ldr	r3, [r7, #0]
 80050c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050c4:	d01d      	beq.n	8005102 <HAL_ADC_PollForConversion+0xf6>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 80050c6:	f7ff fb17 	bl	80046f8 <HAL_GetTick>
 80050ca:	4602      	mov	r2, r0
 80050cc:	693b      	ldr	r3, [r7, #16]
 80050ce:	1ad3      	subs	r3, r2, r3
 80050d0:	683a      	ldr	r2, [r7, #0]
 80050d2:	429a      	cmp	r2, r3
 80050d4:	d302      	bcc.n	80050dc <HAL_ADC_PollForConversion+0xd0>
 80050d6:	683b      	ldr	r3, [r7, #0]
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d112      	bne.n	8005102 <HAL_ADC_PollForConversion+0xf6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	681a      	ldr	r2, [r3, #0]
 80050e2:	69fb      	ldr	r3, [r7, #28]
 80050e4:	4013      	ands	r3, r2
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d10b      	bne.n	8005102 <HAL_ADC_PollForConversion+0xf6>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050ee:	f043 0204 	orr.w	r2, r3, #4
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	655a      	str	r2, [r3, #84]	; 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	2200      	movs	r2, #0
 80050fa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

          return HAL_TIMEOUT;
 80050fe:	2303      	movs	r3, #3
 8005100:	e06b      	b.n	80051da <HAL_ADC_PollForConversion+0x1ce>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	681a      	ldr	r2, [r3, #0]
 8005108:	69fb      	ldr	r3, [r7, #28]
 800510a:	4013      	ands	r3, r2
 800510c:	2b00      	cmp	r3, #0
 800510e:	d0d6      	beq.n	80050be <HAL_ADC_PollForConversion+0xb2>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005114:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	4618      	mov	r0, r3
 8005122:	f7ff fbad 	bl	8004880 <LL_ADC_REG_IsTriggerSourceSWStart>
 8005126:	4603      	mov	r3, r0
 8005128:	2b00      	cmp	r3, #0
 800512a:	d01c      	beq.n	8005166 <HAL_ADC_PollForConversion+0x15a>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	7d5b      	ldrb	r3, [r3, #21]
 8005130:	2b00      	cmp	r3, #0
 8005132:	d118      	bne.n	8005166 <HAL_ADC_PollForConversion+0x15a>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	f003 0308 	and.w	r3, r3, #8
 800513e:	2b08      	cmp	r3, #8
 8005140:	d111      	bne.n	8005166 <HAL_ADC_PollForConversion+0x15a>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005146:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	655a      	str	r2, [r3, #84]	; 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005152:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005156:	2b00      	cmp	r3, #0
 8005158:	d105      	bne.n	8005166 <HAL_ADC_PollForConversion+0x15a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800515e:	f043 0201 	orr.w	r2, r3, #1
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	4a1f      	ldr	r2, [pc, #124]	; (80051e8 <HAL_ADC_PollForConversion+0x1dc>)
 800516c:	4293      	cmp	r3, r2
 800516e:	d002      	beq.n	8005176 <HAL_ADC_PollForConversion+0x16a>
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	e000      	b.n	8005178 <HAL_ADC_PollForConversion+0x16c>
 8005176:	4b1b      	ldr	r3, [pc, #108]	; (80051e4 <HAL_ADC_PollForConversion+0x1d8>)
 8005178:	687a      	ldr	r2, [r7, #4]
 800517a:	6812      	ldr	r2, [r2, #0]
 800517c:	4293      	cmp	r3, r2
 800517e:	d008      	beq.n	8005192 <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8005180:	697b      	ldr	r3, [r7, #20]
 8005182:	2b00      	cmp	r3, #0
 8005184:	d005      	beq.n	8005192 <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8005186:	697b      	ldr	r3, [r7, #20]
 8005188:	2b05      	cmp	r3, #5
 800518a:	d002      	beq.n	8005192 <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800518c:	697b      	ldr	r3, [r7, #20]
 800518e:	2b09      	cmp	r3, #9
 8005190:	d104      	bne.n	800519c <HAL_ADC_PollForConversion+0x190>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	68db      	ldr	r3, [r3, #12]
 8005198:	61bb      	str	r3, [r7, #24]
 800519a:	e00c      	b.n	80051b6 <HAL_ADC_PollForConversion+0x1aa>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	4a11      	ldr	r2, [pc, #68]	; (80051e8 <HAL_ADC_PollForConversion+0x1dc>)
 80051a2:	4293      	cmp	r3, r2
 80051a4:	d002      	beq.n	80051ac <HAL_ADC_PollForConversion+0x1a0>
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	e000      	b.n	80051ae <HAL_ADC_PollForConversion+0x1a2>
 80051ac:	4b0d      	ldr	r3, [pc, #52]	; (80051e4 <HAL_ADC_PollForConversion+0x1d8>)
 80051ae:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	68db      	ldr	r3, [r3, #12]
 80051b4:	61bb      	str	r3, [r7, #24]
  }

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 80051b6:	69fb      	ldr	r3, [r7, #28]
 80051b8:	2b08      	cmp	r3, #8
 80051ba:	d104      	bne.n	80051c6 <HAL_ADC_PollForConversion+0x1ba>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	2208      	movs	r2, #8
 80051c2:	601a      	str	r2, [r3, #0]
 80051c4:	e008      	b.n	80051d8 <HAL_ADC_PollForConversion+0x1cc>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 80051c6:	69bb      	ldr	r3, [r7, #24]
 80051c8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d103      	bne.n	80051d8 <HAL_ADC_PollForConversion+0x1cc>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	220c      	movs	r2, #12
 80051d6:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 80051d8:	2300      	movs	r3, #0
}
 80051da:	4618      	mov	r0, r3
 80051dc:	3720      	adds	r7, #32
 80051de:	46bd      	mov	sp, r7
 80051e0:	bd80      	pop	{r7, pc}
 80051e2:	bf00      	nop
 80051e4:	40022000 	.word	0x40022000
 80051e8:	40022100 	.word	0x40022100
 80051ec:	40022300 	.word	0x40022300
 80051f0:	58026300 	.word	0x58026300

080051f4 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 80051f4:	b480      	push	{r7}
 80051f6:	b083      	sub	sp, #12
 80051f8:	af00      	add	r7, sp, #0
 80051fa:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8005202:	4618      	mov	r0, r3
 8005204:	370c      	adds	r7, #12
 8005206:	46bd      	mov	sp, r7
 8005208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800520c:	4770      	bx	lr
	...

08005210 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8005210:	b590      	push	{r4, r7, lr}
 8005212:	b0a1      	sub	sp, #132	; 0x84
 8005214:	af00      	add	r7, sp, #0
 8005216:	6078      	str	r0, [r7, #4]
 8005218:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800521a:	2300      	movs	r3, #0
 800521c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8005220:	2300      	movs	r3, #0
 8005222:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8005224:	683b      	ldr	r3, [r7, #0]
 8005226:	68db      	ldr	r3, [r3, #12]
 8005228:	4a9d      	ldr	r2, [pc, #628]	; (80054a0 <HAL_ADC_ConfigChannel+0x290>)
 800522a:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005232:	2b01      	cmp	r3, #1
 8005234:	d101      	bne.n	800523a <HAL_ADC_ConfigChannel+0x2a>
 8005236:	2302      	movs	r3, #2
 8005238:	e321      	b.n	800587e <HAL_ADC_ConfigChannel+0x66e>
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	2201      	movs	r2, #1
 800523e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	4618      	mov	r0, r3
 8005248:	f7ff fc4e 	bl	8004ae8 <LL_ADC_REG_IsConversionOngoing>
 800524c:	4603      	mov	r3, r0
 800524e:	2b00      	cmp	r3, #0
 8005250:	f040 8306 	bne.w	8005860 <HAL_ADC_ConfigChannel+0x650>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8005254:	683b      	ldr	r3, [r7, #0]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800525c:	2b00      	cmp	r3, #0
 800525e:	d108      	bne.n	8005272 <HAL_ADC_ConfigChannel+0x62>
 8005260:	683b      	ldr	r3, [r7, #0]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	0e9b      	lsrs	r3, r3, #26
 8005266:	f003 031f 	and.w	r3, r3, #31
 800526a:	2201      	movs	r2, #1
 800526c:	fa02 f303 	lsl.w	r3, r2, r3
 8005270:	e016      	b.n	80052a0 <HAL_ADC_ConfigChannel+0x90>
 8005272:	683b      	ldr	r3, [r7, #0]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005278:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800527a:	fa93 f3a3 	rbit	r3, r3
 800527e:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8005280:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005282:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8005284:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005286:	2b00      	cmp	r3, #0
 8005288:	d101      	bne.n	800528e <HAL_ADC_ConfigChannel+0x7e>
  {
    return 32U;
 800528a:	2320      	movs	r3, #32
 800528c:	e003      	b.n	8005296 <HAL_ADC_ConfigChannel+0x86>
  }
  return __builtin_clz(value);
 800528e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005290:	fab3 f383 	clz	r3, r3
 8005294:	b2db      	uxtb	r3, r3
 8005296:	f003 031f 	and.w	r3, r3, #31
 800529a:	2201      	movs	r2, #1
 800529c:	fa02 f303 	lsl.w	r3, r2, r3
 80052a0:	687a      	ldr	r2, [r7, #4]
 80052a2:	6812      	ldr	r2, [r2, #0]
 80052a4:	69d1      	ldr	r1, [r2, #28]
 80052a6:	687a      	ldr	r2, [r7, #4]
 80052a8:	6812      	ldr	r2, [r2, #0]
 80052aa:	430b      	orrs	r3, r1
 80052ac:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	6818      	ldr	r0, [r3, #0]
 80052b2:	683b      	ldr	r3, [r7, #0]
 80052b4:	6859      	ldr	r1, [r3, #4]
 80052b6:	683b      	ldr	r3, [r7, #0]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	461a      	mov	r2, r3
 80052bc:	f7ff faf3 	bl	80048a6 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	4618      	mov	r0, r3
 80052c6:	f7ff fc0f 	bl	8004ae8 <LL_ADC_REG_IsConversionOngoing>
 80052ca:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	4618      	mov	r0, r3
 80052d2:	f7ff fc1c 	bl	8004b0e <LL_ADC_INJ_IsConversionOngoing>
 80052d6:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80052d8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80052da:	2b00      	cmp	r3, #0
 80052dc:	f040 80b3 	bne.w	8005446 <HAL_ADC_ConfigChannel+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80052e0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	f040 80af 	bne.w	8005446 <HAL_ADC_ConfigChannel+0x236>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	6818      	ldr	r0, [r3, #0]
 80052ec:	683b      	ldr	r3, [r7, #0]
 80052ee:	6819      	ldr	r1, [r3, #0]
 80052f0:	683b      	ldr	r3, [r7, #0]
 80052f2:	689b      	ldr	r3, [r3, #8]
 80052f4:	461a      	mov	r2, r3
 80052f6:	f7ff fb02 	bl	80048fe <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80052fa:	4b6a      	ldr	r3, [pc, #424]	; (80054a4 <HAL_ADC_ConfigChannel+0x294>)
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8005302:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005306:	d10b      	bne.n	8005320 <HAL_ADC_ConfigChannel+0x110>
 8005308:	683b      	ldr	r3, [r7, #0]
 800530a:	695a      	ldr	r2, [r3, #20]
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	68db      	ldr	r3, [r3, #12]
 8005312:	089b      	lsrs	r3, r3, #2
 8005314:	f003 0307 	and.w	r3, r3, #7
 8005318:	005b      	lsls	r3, r3, #1
 800531a:	fa02 f303 	lsl.w	r3, r2, r3
 800531e:	e01d      	b.n	800535c <HAL_ADC_ConfigChannel+0x14c>
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	68db      	ldr	r3, [r3, #12]
 8005326:	f003 0310 	and.w	r3, r3, #16
 800532a:	2b00      	cmp	r3, #0
 800532c:	d10b      	bne.n	8005346 <HAL_ADC_ConfigChannel+0x136>
 800532e:	683b      	ldr	r3, [r7, #0]
 8005330:	695a      	ldr	r2, [r3, #20]
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	68db      	ldr	r3, [r3, #12]
 8005338:	089b      	lsrs	r3, r3, #2
 800533a:	f003 0307 	and.w	r3, r3, #7
 800533e:	005b      	lsls	r3, r3, #1
 8005340:	fa02 f303 	lsl.w	r3, r2, r3
 8005344:	e00a      	b.n	800535c <HAL_ADC_ConfigChannel+0x14c>
 8005346:	683b      	ldr	r3, [r7, #0]
 8005348:	695a      	ldr	r2, [r3, #20]
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	68db      	ldr	r3, [r3, #12]
 8005350:	089b      	lsrs	r3, r3, #2
 8005352:	f003 0304 	and.w	r3, r3, #4
 8005356:	005b      	lsls	r3, r3, #1
 8005358:	fa02 f303 	lsl.w	r3, r2, r3
 800535c:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800535e:	683b      	ldr	r3, [r7, #0]
 8005360:	691b      	ldr	r3, [r3, #16]
 8005362:	2b04      	cmp	r3, #4
 8005364:	d027      	beq.n	80053b6 <HAL_ADC_ConfigChannel+0x1a6>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	6818      	ldr	r0, [r3, #0]
 800536a:	683b      	ldr	r3, [r7, #0]
 800536c:	6919      	ldr	r1, [r3, #16]
 800536e:	683b      	ldr	r3, [r7, #0]
 8005370:	681a      	ldr	r2, [r3, #0]
 8005372:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005374:	f7ff fa30 	bl	80047d8 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	6818      	ldr	r0, [r3, #0]
 800537c:	683b      	ldr	r3, [r7, #0]
 800537e:	6919      	ldr	r1, [r3, #16]
 8005380:	683b      	ldr	r3, [r7, #0]
 8005382:	7e5b      	ldrb	r3, [r3, #25]
 8005384:	2b01      	cmp	r3, #1
 8005386:	d102      	bne.n	800538e <HAL_ADC_ConfigChannel+0x17e>
 8005388:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800538c:	e000      	b.n	8005390 <HAL_ADC_ConfigChannel+0x180>
 800538e:	2300      	movs	r3, #0
 8005390:	461a      	mov	r2, r3
 8005392:	f7ff fa5a 	bl	800484a <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	6818      	ldr	r0, [r3, #0]
 800539a:	683b      	ldr	r3, [r7, #0]
 800539c:	6919      	ldr	r1, [r3, #16]
 800539e:	683b      	ldr	r3, [r7, #0]
 80053a0:	7e1b      	ldrb	r3, [r3, #24]
 80053a2:	2b01      	cmp	r3, #1
 80053a4:	d102      	bne.n	80053ac <HAL_ADC_ConfigChannel+0x19c>
 80053a6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80053aa:	e000      	b.n	80053ae <HAL_ADC_ConfigChannel+0x19e>
 80053ac:	2300      	movs	r3, #0
 80053ae:	461a      	mov	r2, r3
 80053b0:	f7ff fa32 	bl	8004818 <LL_ADC_SetDataRightShift>
 80053b4:	e047      	b.n	8005446 <HAL_ADC_ConfigChannel+0x236>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80053bc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80053c0:	683b      	ldr	r3, [r7, #0]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	069b      	lsls	r3, r3, #26
 80053c6:	429a      	cmp	r2, r3
 80053c8:	d107      	bne.n	80053da <HAL_ADC_ConfigChannel+0x1ca>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80053d8:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80053e0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80053e4:	683b      	ldr	r3, [r7, #0]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	069b      	lsls	r3, r3, #26
 80053ea:	429a      	cmp	r2, r3
 80053ec:	d107      	bne.n	80053fe <HAL_ADC_ConfigChannel+0x1ee>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80053fc:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005404:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005408:	683b      	ldr	r3, [r7, #0]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	069b      	lsls	r3, r3, #26
 800540e:	429a      	cmp	r2, r3
 8005410:	d107      	bne.n	8005422 <HAL_ADC_ConfigChannel+0x212>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8005420:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005428:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800542c:	683b      	ldr	r3, [r7, #0]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	069b      	lsls	r3, r3, #26
 8005432:	429a      	cmp	r2, r3
 8005434:	d107      	bne.n	8005446 <HAL_ADC_ConfigChannel+0x236>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8005444:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	4618      	mov	r0, r3
 800544c:	f7ff fb24 	bl	8004a98 <LL_ADC_IsEnabled>
 8005450:	4603      	mov	r3, r0
 8005452:	2b00      	cmp	r3, #0
 8005454:	f040 820d 	bne.w	8005872 <HAL_ADC_ConfigChannel+0x662>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	6818      	ldr	r0, [r3, #0]
 800545c:	683b      	ldr	r3, [r7, #0]
 800545e:	6819      	ldr	r1, [r3, #0]
 8005460:	683b      	ldr	r3, [r7, #0]
 8005462:	68db      	ldr	r3, [r3, #12]
 8005464:	461a      	mov	r2, r3
 8005466:	f7ff fa75 	bl	8004954 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800546a:	683b      	ldr	r3, [r7, #0]
 800546c:	68db      	ldr	r3, [r3, #12]
 800546e:	4a0c      	ldr	r2, [pc, #48]	; (80054a0 <HAL_ADC_ConfigChannel+0x290>)
 8005470:	4293      	cmp	r3, r2
 8005472:	f040 8133 	bne.w	80056dc <HAL_ADC_ConfigChannel+0x4cc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800547a:	683b      	ldr	r3, [r7, #0]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005482:	2b00      	cmp	r3, #0
 8005484:	d110      	bne.n	80054a8 <HAL_ADC_ConfigChannel+0x298>
 8005486:	683b      	ldr	r3, [r7, #0]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	0e9b      	lsrs	r3, r3, #26
 800548c:	3301      	adds	r3, #1
 800548e:	f003 031f 	and.w	r3, r3, #31
 8005492:	2b09      	cmp	r3, #9
 8005494:	bf94      	ite	ls
 8005496:	2301      	movls	r3, #1
 8005498:	2300      	movhi	r3, #0
 800549a:	b2db      	uxtb	r3, r3
 800549c:	e01e      	b.n	80054dc <HAL_ADC_ConfigChannel+0x2cc>
 800549e:	bf00      	nop
 80054a0:	47ff0000 	.word	0x47ff0000
 80054a4:	5c001000 	.word	0x5c001000
 80054a8:	683b      	ldr	r3, [r7, #0]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80054ae:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80054b0:	fa93 f3a3 	rbit	r3, r3
 80054b4:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 80054b6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80054b8:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 80054ba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d101      	bne.n	80054c4 <HAL_ADC_ConfigChannel+0x2b4>
    return 32U;
 80054c0:	2320      	movs	r3, #32
 80054c2:	e003      	b.n	80054cc <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 80054c4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80054c6:	fab3 f383 	clz	r3, r3
 80054ca:	b2db      	uxtb	r3, r3
 80054cc:	3301      	adds	r3, #1
 80054ce:	f003 031f 	and.w	r3, r3, #31
 80054d2:	2b09      	cmp	r3, #9
 80054d4:	bf94      	ite	ls
 80054d6:	2301      	movls	r3, #1
 80054d8:	2300      	movhi	r3, #0
 80054da:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d079      	beq.n	80055d4 <HAL_ADC_ConfigChannel+0x3c4>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80054e0:	683b      	ldr	r3, [r7, #0]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d107      	bne.n	80054fc <HAL_ADC_ConfigChannel+0x2ec>
 80054ec:	683b      	ldr	r3, [r7, #0]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	0e9b      	lsrs	r3, r3, #26
 80054f2:	3301      	adds	r3, #1
 80054f4:	069b      	lsls	r3, r3, #26
 80054f6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80054fa:	e015      	b.n	8005528 <HAL_ADC_ConfigChannel+0x318>
 80054fc:	683b      	ldr	r3, [r7, #0]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005502:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005504:	fa93 f3a3 	rbit	r3, r3
 8005508:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 800550a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800550c:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 800550e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005510:	2b00      	cmp	r3, #0
 8005512:	d101      	bne.n	8005518 <HAL_ADC_ConfigChannel+0x308>
    return 32U;
 8005514:	2320      	movs	r3, #32
 8005516:	e003      	b.n	8005520 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8005518:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800551a:	fab3 f383 	clz	r3, r3
 800551e:	b2db      	uxtb	r3, r3
 8005520:	3301      	adds	r3, #1
 8005522:	069b      	lsls	r3, r3, #26
 8005524:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005528:	683b      	ldr	r3, [r7, #0]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005530:	2b00      	cmp	r3, #0
 8005532:	d109      	bne.n	8005548 <HAL_ADC_ConfigChannel+0x338>
 8005534:	683b      	ldr	r3, [r7, #0]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	0e9b      	lsrs	r3, r3, #26
 800553a:	3301      	adds	r3, #1
 800553c:	f003 031f 	and.w	r3, r3, #31
 8005540:	2101      	movs	r1, #1
 8005542:	fa01 f303 	lsl.w	r3, r1, r3
 8005546:	e017      	b.n	8005578 <HAL_ADC_ConfigChannel+0x368>
 8005548:	683b      	ldr	r3, [r7, #0]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800554e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005550:	fa93 f3a3 	rbit	r3, r3
 8005554:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8005556:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005558:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 800555a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800555c:	2b00      	cmp	r3, #0
 800555e:	d101      	bne.n	8005564 <HAL_ADC_ConfigChannel+0x354>
    return 32U;
 8005560:	2320      	movs	r3, #32
 8005562:	e003      	b.n	800556c <HAL_ADC_ConfigChannel+0x35c>
  return __builtin_clz(value);
 8005564:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005566:	fab3 f383 	clz	r3, r3
 800556a:	b2db      	uxtb	r3, r3
 800556c:	3301      	adds	r3, #1
 800556e:	f003 031f 	and.w	r3, r3, #31
 8005572:	2101      	movs	r1, #1
 8005574:	fa01 f303 	lsl.w	r3, r1, r3
 8005578:	ea42 0103 	orr.w	r1, r2, r3
 800557c:	683b      	ldr	r3, [r7, #0]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005584:	2b00      	cmp	r3, #0
 8005586:	d10a      	bne.n	800559e <HAL_ADC_ConfigChannel+0x38e>
 8005588:	683b      	ldr	r3, [r7, #0]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	0e9b      	lsrs	r3, r3, #26
 800558e:	3301      	adds	r3, #1
 8005590:	f003 021f 	and.w	r2, r3, #31
 8005594:	4613      	mov	r3, r2
 8005596:	005b      	lsls	r3, r3, #1
 8005598:	4413      	add	r3, r2
 800559a:	051b      	lsls	r3, r3, #20
 800559c:	e018      	b.n	80055d0 <HAL_ADC_ConfigChannel+0x3c0>
 800559e:	683b      	ldr	r3, [r7, #0]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80055a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055a6:	fa93 f3a3 	rbit	r3, r3
 80055aa:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 80055ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055ae:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 80055b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d101      	bne.n	80055ba <HAL_ADC_ConfigChannel+0x3aa>
    return 32U;
 80055b6:	2320      	movs	r3, #32
 80055b8:	e003      	b.n	80055c2 <HAL_ADC_ConfigChannel+0x3b2>
  return __builtin_clz(value);
 80055ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055bc:	fab3 f383 	clz	r3, r3
 80055c0:	b2db      	uxtb	r3, r3
 80055c2:	3301      	adds	r3, #1
 80055c4:	f003 021f 	and.w	r2, r3, #31
 80055c8:	4613      	mov	r3, r2
 80055ca:	005b      	lsls	r3, r3, #1
 80055cc:	4413      	add	r3, r2
 80055ce:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80055d0:	430b      	orrs	r3, r1
 80055d2:	e07e      	b.n	80056d2 <HAL_ADC_ConfigChannel+0x4c2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80055d4:	683b      	ldr	r3, [r7, #0]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d107      	bne.n	80055f0 <HAL_ADC_ConfigChannel+0x3e0>
 80055e0:	683b      	ldr	r3, [r7, #0]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	0e9b      	lsrs	r3, r3, #26
 80055e6:	3301      	adds	r3, #1
 80055e8:	069b      	lsls	r3, r3, #26
 80055ea:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80055ee:	e015      	b.n	800561c <HAL_ADC_ConfigChannel+0x40c>
 80055f0:	683b      	ldr	r3, [r7, #0]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80055f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055f8:	fa93 f3a3 	rbit	r3, r3
 80055fc:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 80055fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005600:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8005602:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005604:	2b00      	cmp	r3, #0
 8005606:	d101      	bne.n	800560c <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8005608:	2320      	movs	r3, #32
 800560a:	e003      	b.n	8005614 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 800560c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800560e:	fab3 f383 	clz	r3, r3
 8005612:	b2db      	uxtb	r3, r3
 8005614:	3301      	adds	r3, #1
 8005616:	069b      	lsls	r3, r3, #26
 8005618:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800561c:	683b      	ldr	r3, [r7, #0]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005624:	2b00      	cmp	r3, #0
 8005626:	d109      	bne.n	800563c <HAL_ADC_ConfigChannel+0x42c>
 8005628:	683b      	ldr	r3, [r7, #0]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	0e9b      	lsrs	r3, r3, #26
 800562e:	3301      	adds	r3, #1
 8005630:	f003 031f 	and.w	r3, r3, #31
 8005634:	2101      	movs	r1, #1
 8005636:	fa01 f303 	lsl.w	r3, r1, r3
 800563a:	e017      	b.n	800566c <HAL_ADC_ConfigChannel+0x45c>
 800563c:	683b      	ldr	r3, [r7, #0]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005642:	69fb      	ldr	r3, [r7, #28]
 8005644:	fa93 f3a3 	rbit	r3, r3
 8005648:	61bb      	str	r3, [r7, #24]
  return result;
 800564a:	69bb      	ldr	r3, [r7, #24]
 800564c:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 800564e:	6a3b      	ldr	r3, [r7, #32]
 8005650:	2b00      	cmp	r3, #0
 8005652:	d101      	bne.n	8005658 <HAL_ADC_ConfigChannel+0x448>
    return 32U;
 8005654:	2320      	movs	r3, #32
 8005656:	e003      	b.n	8005660 <HAL_ADC_ConfigChannel+0x450>
  return __builtin_clz(value);
 8005658:	6a3b      	ldr	r3, [r7, #32]
 800565a:	fab3 f383 	clz	r3, r3
 800565e:	b2db      	uxtb	r3, r3
 8005660:	3301      	adds	r3, #1
 8005662:	f003 031f 	and.w	r3, r3, #31
 8005666:	2101      	movs	r1, #1
 8005668:	fa01 f303 	lsl.w	r3, r1, r3
 800566c:	ea42 0103 	orr.w	r1, r2, r3
 8005670:	683b      	ldr	r3, [r7, #0]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005678:	2b00      	cmp	r3, #0
 800567a:	d10d      	bne.n	8005698 <HAL_ADC_ConfigChannel+0x488>
 800567c:	683b      	ldr	r3, [r7, #0]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	0e9b      	lsrs	r3, r3, #26
 8005682:	3301      	adds	r3, #1
 8005684:	f003 021f 	and.w	r2, r3, #31
 8005688:	4613      	mov	r3, r2
 800568a:	005b      	lsls	r3, r3, #1
 800568c:	4413      	add	r3, r2
 800568e:	3b1e      	subs	r3, #30
 8005690:	051b      	lsls	r3, r3, #20
 8005692:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005696:	e01b      	b.n	80056d0 <HAL_ADC_ConfigChannel+0x4c0>
 8005698:	683b      	ldr	r3, [r7, #0]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800569e:	693b      	ldr	r3, [r7, #16]
 80056a0:	fa93 f3a3 	rbit	r3, r3
 80056a4:	60fb      	str	r3, [r7, #12]
  return result;
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80056aa:	697b      	ldr	r3, [r7, #20]
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d101      	bne.n	80056b4 <HAL_ADC_ConfigChannel+0x4a4>
    return 32U;
 80056b0:	2320      	movs	r3, #32
 80056b2:	e003      	b.n	80056bc <HAL_ADC_ConfigChannel+0x4ac>
  return __builtin_clz(value);
 80056b4:	697b      	ldr	r3, [r7, #20]
 80056b6:	fab3 f383 	clz	r3, r3
 80056ba:	b2db      	uxtb	r3, r3
 80056bc:	3301      	adds	r3, #1
 80056be:	f003 021f 	and.w	r2, r3, #31
 80056c2:	4613      	mov	r3, r2
 80056c4:	005b      	lsls	r3, r3, #1
 80056c6:	4413      	add	r3, r2
 80056c8:	3b1e      	subs	r3, #30
 80056ca:	051b      	lsls	r3, r3, #20
 80056cc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80056d0:	430b      	orrs	r3, r1
 80056d2:	683a      	ldr	r2, [r7, #0]
 80056d4:	6892      	ldr	r2, [r2, #8]
 80056d6:	4619      	mov	r1, r3
 80056d8:	f7ff f911 	bl	80048fe <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80056dc:	683b      	ldr	r3, [r7, #0]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	f280 80c6 	bge.w	8005872 <HAL_ADC_ConfigChannel+0x662>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	4a67      	ldr	r2, [pc, #412]	; (8005888 <HAL_ADC_ConfigChannel+0x678>)
 80056ec:	4293      	cmp	r3, r2
 80056ee:	d004      	beq.n	80056fa <HAL_ADC_ConfigChannel+0x4ea>
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	4a65      	ldr	r2, [pc, #404]	; (800588c <HAL_ADC_ConfigChannel+0x67c>)
 80056f6:	4293      	cmp	r3, r2
 80056f8:	d101      	bne.n	80056fe <HAL_ADC_ConfigChannel+0x4ee>
 80056fa:	4b65      	ldr	r3, [pc, #404]	; (8005890 <HAL_ADC_ConfigChannel+0x680>)
 80056fc:	e000      	b.n	8005700 <HAL_ADC_ConfigChannel+0x4f0>
 80056fe:	4b65      	ldr	r3, [pc, #404]	; (8005894 <HAL_ADC_ConfigChannel+0x684>)
 8005700:	4618      	mov	r0, r3
 8005702:	f7ff f85b 	bl	80047bc <LL_ADC_GetCommonPathInternalCh>
 8005706:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	4a5e      	ldr	r2, [pc, #376]	; (8005888 <HAL_ADC_ConfigChannel+0x678>)
 800570e:	4293      	cmp	r3, r2
 8005710:	d004      	beq.n	800571c <HAL_ADC_ConfigChannel+0x50c>
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	4a5d      	ldr	r2, [pc, #372]	; (800588c <HAL_ADC_ConfigChannel+0x67c>)
 8005718:	4293      	cmp	r3, r2
 800571a:	d10e      	bne.n	800573a <HAL_ADC_ConfigChannel+0x52a>
 800571c:	485a      	ldr	r0, [pc, #360]	; (8005888 <HAL_ADC_ConfigChannel+0x678>)
 800571e:	f7ff f9bb 	bl	8004a98 <LL_ADC_IsEnabled>
 8005722:	4604      	mov	r4, r0
 8005724:	4859      	ldr	r0, [pc, #356]	; (800588c <HAL_ADC_ConfigChannel+0x67c>)
 8005726:	f7ff f9b7 	bl	8004a98 <LL_ADC_IsEnabled>
 800572a:	4603      	mov	r3, r0
 800572c:	4323      	orrs	r3, r4
 800572e:	2b00      	cmp	r3, #0
 8005730:	bf0c      	ite	eq
 8005732:	2301      	moveq	r3, #1
 8005734:	2300      	movne	r3, #0
 8005736:	b2db      	uxtb	r3, r3
 8005738:	e008      	b.n	800574c <HAL_ADC_ConfigChannel+0x53c>
 800573a:	4857      	ldr	r0, [pc, #348]	; (8005898 <HAL_ADC_ConfigChannel+0x688>)
 800573c:	f7ff f9ac 	bl	8004a98 <LL_ADC_IsEnabled>
 8005740:	4603      	mov	r3, r0
 8005742:	2b00      	cmp	r3, #0
 8005744:	bf0c      	ite	eq
 8005746:	2301      	moveq	r3, #1
 8005748:	2300      	movne	r3, #0
 800574a:	b2db      	uxtb	r3, r3
 800574c:	2b00      	cmp	r3, #0
 800574e:	d07d      	beq.n	800584c <HAL_ADC_ConfigChannel+0x63c>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8005750:	683b      	ldr	r3, [r7, #0]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	4a51      	ldr	r2, [pc, #324]	; (800589c <HAL_ADC_ConfigChannel+0x68c>)
 8005756:	4293      	cmp	r3, r2
 8005758:	d130      	bne.n	80057bc <HAL_ADC_ConfigChannel+0x5ac>
 800575a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800575c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005760:	2b00      	cmp	r3, #0
 8005762:	d12b      	bne.n	80057bc <HAL_ADC_ConfigChannel+0x5ac>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	4a4b      	ldr	r2, [pc, #300]	; (8005898 <HAL_ADC_ConfigChannel+0x688>)
 800576a:	4293      	cmp	r3, r2
 800576c:	f040 8081 	bne.w	8005872 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	4a44      	ldr	r2, [pc, #272]	; (8005888 <HAL_ADC_ConfigChannel+0x678>)
 8005776:	4293      	cmp	r3, r2
 8005778:	d004      	beq.n	8005784 <HAL_ADC_ConfigChannel+0x574>
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	4a43      	ldr	r2, [pc, #268]	; (800588c <HAL_ADC_ConfigChannel+0x67c>)
 8005780:	4293      	cmp	r3, r2
 8005782:	d101      	bne.n	8005788 <HAL_ADC_ConfigChannel+0x578>
 8005784:	4a42      	ldr	r2, [pc, #264]	; (8005890 <HAL_ADC_ConfigChannel+0x680>)
 8005786:	e000      	b.n	800578a <HAL_ADC_ConfigChannel+0x57a>
 8005788:	4a42      	ldr	r2, [pc, #264]	; (8005894 <HAL_ADC_ConfigChannel+0x684>)
 800578a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800578c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005790:	4619      	mov	r1, r3
 8005792:	4610      	mov	r0, r2
 8005794:	f7fe ffff 	bl	8004796 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005798:	4b41      	ldr	r3, [pc, #260]	; (80058a0 <HAL_ADC_ConfigChannel+0x690>)
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	099b      	lsrs	r3, r3, #6
 800579e:	4a41      	ldr	r2, [pc, #260]	; (80058a4 <HAL_ADC_ConfigChannel+0x694>)
 80057a0:	fba2 2303 	umull	r2, r3, r2, r3
 80057a4:	099b      	lsrs	r3, r3, #6
 80057a6:	3301      	adds	r3, #1
 80057a8:	005b      	lsls	r3, r3, #1
 80057aa:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 80057ac:	e002      	b.n	80057b4 <HAL_ADC_ConfigChannel+0x5a4>
              {
                wait_loop_index--;
 80057ae:	68bb      	ldr	r3, [r7, #8]
 80057b0:	3b01      	subs	r3, #1
 80057b2:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 80057b4:	68bb      	ldr	r3, [r7, #8]
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d1f9      	bne.n	80057ae <HAL_ADC_ConfigChannel+0x59e>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80057ba:	e05a      	b.n	8005872 <HAL_ADC_ConfigChannel+0x662>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80057bc:	683b      	ldr	r3, [r7, #0]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	4a39      	ldr	r2, [pc, #228]	; (80058a8 <HAL_ADC_ConfigChannel+0x698>)
 80057c2:	4293      	cmp	r3, r2
 80057c4:	d11e      	bne.n	8005804 <HAL_ADC_ConfigChannel+0x5f4>
 80057c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80057c8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d119      	bne.n	8005804 <HAL_ADC_ConfigChannel+0x5f4>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	4a30      	ldr	r2, [pc, #192]	; (8005898 <HAL_ADC_ConfigChannel+0x688>)
 80057d6:	4293      	cmp	r3, r2
 80057d8:	d14b      	bne.n	8005872 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	4a2a      	ldr	r2, [pc, #168]	; (8005888 <HAL_ADC_ConfigChannel+0x678>)
 80057e0:	4293      	cmp	r3, r2
 80057e2:	d004      	beq.n	80057ee <HAL_ADC_ConfigChannel+0x5de>
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	4a28      	ldr	r2, [pc, #160]	; (800588c <HAL_ADC_ConfigChannel+0x67c>)
 80057ea:	4293      	cmp	r3, r2
 80057ec:	d101      	bne.n	80057f2 <HAL_ADC_ConfigChannel+0x5e2>
 80057ee:	4a28      	ldr	r2, [pc, #160]	; (8005890 <HAL_ADC_ConfigChannel+0x680>)
 80057f0:	e000      	b.n	80057f4 <HAL_ADC_ConfigChannel+0x5e4>
 80057f2:	4a28      	ldr	r2, [pc, #160]	; (8005894 <HAL_ADC_ConfigChannel+0x684>)
 80057f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80057f6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80057fa:	4619      	mov	r1, r3
 80057fc:	4610      	mov	r0, r2
 80057fe:	f7fe ffca 	bl	8004796 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005802:	e036      	b.n	8005872 <HAL_ADC_ConfigChannel+0x662>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8005804:	683b      	ldr	r3, [r7, #0]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	4a28      	ldr	r2, [pc, #160]	; (80058ac <HAL_ADC_ConfigChannel+0x69c>)
 800580a:	4293      	cmp	r3, r2
 800580c:	d131      	bne.n	8005872 <HAL_ADC_ConfigChannel+0x662>
 800580e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005810:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005814:	2b00      	cmp	r3, #0
 8005816:	d12c      	bne.n	8005872 <HAL_ADC_ConfigChannel+0x662>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	4a1e      	ldr	r2, [pc, #120]	; (8005898 <HAL_ADC_ConfigChannel+0x688>)
 800581e:	4293      	cmp	r3, r2
 8005820:	d127      	bne.n	8005872 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	4a18      	ldr	r2, [pc, #96]	; (8005888 <HAL_ADC_ConfigChannel+0x678>)
 8005828:	4293      	cmp	r3, r2
 800582a:	d004      	beq.n	8005836 <HAL_ADC_ConfigChannel+0x626>
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	4a16      	ldr	r2, [pc, #88]	; (800588c <HAL_ADC_ConfigChannel+0x67c>)
 8005832:	4293      	cmp	r3, r2
 8005834:	d101      	bne.n	800583a <HAL_ADC_ConfigChannel+0x62a>
 8005836:	4a16      	ldr	r2, [pc, #88]	; (8005890 <HAL_ADC_ConfigChannel+0x680>)
 8005838:	e000      	b.n	800583c <HAL_ADC_ConfigChannel+0x62c>
 800583a:	4a16      	ldr	r2, [pc, #88]	; (8005894 <HAL_ADC_ConfigChannel+0x684>)
 800583c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800583e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005842:	4619      	mov	r1, r3
 8005844:	4610      	mov	r0, r2
 8005846:	f7fe ffa6 	bl	8004796 <LL_ADC_SetCommonPathInternalCh>
 800584a:	e012      	b.n	8005872 <HAL_ADC_ConfigChannel+0x662>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005850:	f043 0220 	orr.w	r2, r3, #32
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 8005858:	2301      	movs	r3, #1
 800585a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 800585e:	e008      	b.n	8005872 <HAL_ADC_ConfigChannel+0x662>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005864:	f043 0220 	orr.w	r2, r3, #32
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800586c:	2301      	movs	r3, #1
 800586e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	2200      	movs	r2, #0
 8005876:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800587a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 800587e:	4618      	mov	r0, r3
 8005880:	3784      	adds	r7, #132	; 0x84
 8005882:	46bd      	mov	sp, r7
 8005884:	bd90      	pop	{r4, r7, pc}
 8005886:	bf00      	nop
 8005888:	40022000 	.word	0x40022000
 800588c:	40022100 	.word	0x40022100
 8005890:	40022300 	.word	0x40022300
 8005894:	58026300 	.word	0x58026300
 8005898:	58026000 	.word	0x58026000
 800589c:	cb840000 	.word	0xcb840000
 80058a0:	20000158 	.word	0x20000158
 80058a4:	053e2d63 	.word	0x053e2d63
 80058a8:	c7520000 	.word	0xc7520000
 80058ac:	cfb80000 	.word	0xcfb80000

080058b0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80058b0:	b580      	push	{r7, lr}
 80058b2:	b084      	sub	sp, #16
 80058b4:	af00      	add	r7, sp, #0
 80058b6:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	4618      	mov	r0, r3
 80058be:	f7ff f8eb 	bl	8004a98 <LL_ADC_IsEnabled>
 80058c2:	4603      	mov	r3, r0
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d16e      	bne.n	80059a6 <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	689a      	ldr	r2, [r3, #8]
 80058ce:	4b38      	ldr	r3, [pc, #224]	; (80059b0 <ADC_Enable+0x100>)
 80058d0:	4013      	ands	r3, r2
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d00d      	beq.n	80058f2 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80058da:	f043 0210 	orr.w	r2, r3, #16
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80058e6:	f043 0201 	orr.w	r2, r3, #1
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 80058ee:	2301      	movs	r3, #1
 80058f0:	e05a      	b.n	80059a8 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	4618      	mov	r0, r3
 80058f8:	f7ff f8ba 	bl	8004a70 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80058fc:	f7fe fefc 	bl	80046f8 <HAL_GetTick>
 8005900:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	4a2b      	ldr	r2, [pc, #172]	; (80059b4 <ADC_Enable+0x104>)
 8005908:	4293      	cmp	r3, r2
 800590a:	d004      	beq.n	8005916 <ADC_Enable+0x66>
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	4a29      	ldr	r2, [pc, #164]	; (80059b8 <ADC_Enable+0x108>)
 8005912:	4293      	cmp	r3, r2
 8005914:	d101      	bne.n	800591a <ADC_Enable+0x6a>
 8005916:	4b29      	ldr	r3, [pc, #164]	; (80059bc <ADC_Enable+0x10c>)
 8005918:	e000      	b.n	800591c <ADC_Enable+0x6c>
 800591a:	4b29      	ldr	r3, [pc, #164]	; (80059c0 <ADC_Enable+0x110>)
 800591c:	4618      	mov	r0, r3
 800591e:	f7ff f83d 	bl	800499c <LL_ADC_GetMultimode>
 8005922:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	4a23      	ldr	r2, [pc, #140]	; (80059b8 <ADC_Enable+0x108>)
 800592a:	4293      	cmp	r3, r2
 800592c:	d002      	beq.n	8005934 <ADC_Enable+0x84>
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	e000      	b.n	8005936 <ADC_Enable+0x86>
 8005934:	4b1f      	ldr	r3, [pc, #124]	; (80059b4 <ADC_Enable+0x104>)
 8005936:	687a      	ldr	r2, [r7, #4]
 8005938:	6812      	ldr	r2, [r2, #0]
 800593a:	4293      	cmp	r3, r2
 800593c:	d02c      	beq.n	8005998 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800593e:	68bb      	ldr	r3, [r7, #8]
 8005940:	2b00      	cmp	r3, #0
 8005942:	d130      	bne.n	80059a6 <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005944:	e028      	b.n	8005998 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	4618      	mov	r0, r3
 800594c:	f7ff f8a4 	bl	8004a98 <LL_ADC_IsEnabled>
 8005950:	4603      	mov	r3, r0
 8005952:	2b00      	cmp	r3, #0
 8005954:	d104      	bne.n	8005960 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	4618      	mov	r0, r3
 800595c:	f7ff f888 	bl	8004a70 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8005960:	f7fe feca 	bl	80046f8 <HAL_GetTick>
 8005964:	4602      	mov	r2, r0
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	1ad3      	subs	r3, r2, r3
 800596a:	2b02      	cmp	r3, #2
 800596c:	d914      	bls.n	8005998 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	f003 0301 	and.w	r3, r3, #1
 8005978:	2b01      	cmp	r3, #1
 800597a:	d00d      	beq.n	8005998 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005980:	f043 0210 	orr.w	r2, r3, #16
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800598c:	f043 0201 	orr.w	r2, r3, #1
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	659a      	str	r2, [r3, #88]	; 0x58

            return HAL_ERROR;
 8005994:	2301      	movs	r3, #1
 8005996:	e007      	b.n	80059a8 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	f003 0301 	and.w	r3, r3, #1
 80059a2:	2b01      	cmp	r3, #1
 80059a4:	d1cf      	bne.n	8005946 <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80059a6:	2300      	movs	r3, #0
}
 80059a8:	4618      	mov	r0, r3
 80059aa:	3710      	adds	r7, #16
 80059ac:	46bd      	mov	sp, r7
 80059ae:	bd80      	pop	{r7, pc}
 80059b0:	8000003f 	.word	0x8000003f
 80059b4:	40022000 	.word	0x40022000
 80059b8:	40022100 	.word	0x40022100
 80059bc:	40022300 	.word	0x40022300
 80059c0:	58026300 	.word	0x58026300

080059c4 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 80059c4:	b580      	push	{r7, lr}
 80059c6:	b084      	sub	sp, #16
 80059c8:	af00      	add	r7, sp, #0
 80059ca:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	4a79      	ldr	r2, [pc, #484]	; (8005bb8 <ADC_ConfigureBoostMode+0x1f4>)
 80059d2:	4293      	cmp	r3, r2
 80059d4:	d004      	beq.n	80059e0 <ADC_ConfigureBoostMode+0x1c>
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	4a78      	ldr	r2, [pc, #480]	; (8005bbc <ADC_ConfigureBoostMode+0x1f8>)
 80059dc:	4293      	cmp	r3, r2
 80059de:	d109      	bne.n	80059f4 <ADC_ConfigureBoostMode+0x30>
 80059e0:	4b77      	ldr	r3, [pc, #476]	; (8005bc0 <ADC_ConfigureBoostMode+0x1fc>)
 80059e2:	689b      	ldr	r3, [r3, #8]
 80059e4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	bf14      	ite	ne
 80059ec:	2301      	movne	r3, #1
 80059ee:	2300      	moveq	r3, #0
 80059f0:	b2db      	uxtb	r3, r3
 80059f2:	e008      	b.n	8005a06 <ADC_ConfigureBoostMode+0x42>
 80059f4:	4b73      	ldr	r3, [pc, #460]	; (8005bc4 <ADC_ConfigureBoostMode+0x200>)
 80059f6:	689b      	ldr	r3, [r3, #8]
 80059f8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	bf14      	ite	ne
 8005a00:	2301      	movne	r3, #1
 8005a02:	2300      	moveq	r3, #0
 8005a04:	b2db      	uxtb	r3, r3
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d01c      	beq.n	8005a44 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8005a0a:	f002 f8bb 	bl	8007b84 <HAL_RCC_GetHCLKFreq>
 8005a0e:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	685b      	ldr	r3, [r3, #4]
 8005a14:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005a18:	d010      	beq.n	8005a3c <ADC_ConfigureBoostMode+0x78>
 8005a1a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005a1e:	d871      	bhi.n	8005b04 <ADC_ConfigureBoostMode+0x140>
 8005a20:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005a24:	d002      	beq.n	8005a2c <ADC_ConfigureBoostMode+0x68>
 8005a26:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005a2a:	d16b      	bne.n	8005b04 <ADC_ConfigureBoostMode+0x140>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	685b      	ldr	r3, [r3, #4]
 8005a30:	0c1b      	lsrs	r3, r3, #16
 8005a32:	68fa      	ldr	r2, [r7, #12]
 8005a34:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a38:	60fb      	str	r3, [r7, #12]
        break;
 8005a3a:	e066      	b.n	8005b0a <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	089b      	lsrs	r3, r3, #2
 8005a40:	60fb      	str	r3, [r7, #12]
        break;
 8005a42:	e062      	b.n	8005b0a <ADC_ConfigureBoostMode+0x146>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8005a44:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8005a48:	f003 f880 	bl	8008b4c <HAL_RCCEx_GetPeriphCLKFreq>
 8005a4c:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	685b      	ldr	r3, [r3, #4]
 8005a52:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8005a56:	d051      	beq.n	8005afc <ADC_ConfigureBoostMode+0x138>
 8005a58:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8005a5c:	d854      	bhi.n	8005b08 <ADC_ConfigureBoostMode+0x144>
 8005a5e:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8005a62:	d047      	beq.n	8005af4 <ADC_ConfigureBoostMode+0x130>
 8005a64:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8005a68:	d84e      	bhi.n	8005b08 <ADC_ConfigureBoostMode+0x144>
 8005a6a:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8005a6e:	d03d      	beq.n	8005aec <ADC_ConfigureBoostMode+0x128>
 8005a70:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8005a74:	d848      	bhi.n	8005b08 <ADC_ConfigureBoostMode+0x144>
 8005a76:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005a7a:	d033      	beq.n	8005ae4 <ADC_ConfigureBoostMode+0x120>
 8005a7c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005a80:	d842      	bhi.n	8005b08 <ADC_ConfigureBoostMode+0x144>
 8005a82:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8005a86:	d029      	beq.n	8005adc <ADC_ConfigureBoostMode+0x118>
 8005a88:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8005a8c:	d83c      	bhi.n	8005b08 <ADC_ConfigureBoostMode+0x144>
 8005a8e:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8005a92:	d01a      	beq.n	8005aca <ADC_ConfigureBoostMode+0x106>
 8005a94:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8005a98:	d836      	bhi.n	8005b08 <ADC_ConfigureBoostMode+0x144>
 8005a9a:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8005a9e:	d014      	beq.n	8005aca <ADC_ConfigureBoostMode+0x106>
 8005aa0:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8005aa4:	d830      	bhi.n	8005b08 <ADC_ConfigureBoostMode+0x144>
 8005aa6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005aaa:	d00e      	beq.n	8005aca <ADC_ConfigureBoostMode+0x106>
 8005aac:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005ab0:	d82a      	bhi.n	8005b08 <ADC_ConfigureBoostMode+0x144>
 8005ab2:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8005ab6:	d008      	beq.n	8005aca <ADC_ConfigureBoostMode+0x106>
 8005ab8:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8005abc:	d824      	bhi.n	8005b08 <ADC_ConfigureBoostMode+0x144>
 8005abe:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005ac2:	d002      	beq.n	8005aca <ADC_ConfigureBoostMode+0x106>
 8005ac4:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005ac8:	d11e      	bne.n	8005b08 <ADC_ConfigureBoostMode+0x144>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	685b      	ldr	r3, [r3, #4]
 8005ace:	0c9b      	lsrs	r3, r3, #18
 8005ad0:	005b      	lsls	r3, r3, #1
 8005ad2:	68fa      	ldr	r2, [r7, #12]
 8005ad4:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ad8:	60fb      	str	r3, [r7, #12]
        break;
 8005ada:	e016      	b.n	8005b0a <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	091b      	lsrs	r3, r3, #4
 8005ae0:	60fb      	str	r3, [r7, #12]
        break;
 8005ae2:	e012      	b.n	8005b0a <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	095b      	lsrs	r3, r3, #5
 8005ae8:	60fb      	str	r3, [r7, #12]
        break;
 8005aea:	e00e      	b.n	8005b0a <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	099b      	lsrs	r3, r3, #6
 8005af0:	60fb      	str	r3, [r7, #12]
        break;
 8005af2:	e00a      	b.n	8005b0a <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	09db      	lsrs	r3, r3, #7
 8005af8:	60fb      	str	r3, [r7, #12]
        break;
 8005afa:	e006      	b.n	8005b0a <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	0a1b      	lsrs	r3, r3, #8
 8005b00:	60fb      	str	r3, [r7, #12]
        break;
 8005b02:	e002      	b.n	8005b0a <ADC_ConfigureBoostMode+0x146>
        break;
 8005b04:	bf00      	nop
 8005b06:	e000      	b.n	8005b0a <ADC_ConfigureBoostMode+0x146>
      default:
        break;
 8005b08:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8005b0a:	f7fe fe25 	bl	8004758 <HAL_GetREVID>
 8005b0e:	4603      	mov	r3, r0
 8005b10:	f241 0203 	movw	r2, #4099	; 0x1003
 8005b14:	4293      	cmp	r3, r2
 8005b16:	d815      	bhi.n	8005b44 <ADC_ConfigureBoostMode+0x180>
  {
    if (freq > 20000000UL)
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	4a2b      	ldr	r2, [pc, #172]	; (8005bc8 <ADC_ConfigureBoostMode+0x204>)
 8005b1c:	4293      	cmp	r3, r2
 8005b1e:	d908      	bls.n	8005b32 <ADC_ConfigureBoostMode+0x16e>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	689a      	ldr	r2, [r3, #8]
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005b2e:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8005b30:	e03e      	b.n	8005bb0 <ADC_ConfigureBoostMode+0x1ec>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	689a      	ldr	r2, [r3, #8]
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005b40:	609a      	str	r2, [r3, #8]
}
 8005b42:	e035      	b.n	8005bb0 <ADC_ConfigureBoostMode+0x1ec>
    freq /= 2U; /* divider by 2 for Rev.V */
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	085b      	lsrs	r3, r3, #1
 8005b48:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	4a1f      	ldr	r2, [pc, #124]	; (8005bcc <ADC_ConfigureBoostMode+0x208>)
 8005b4e:	4293      	cmp	r3, r2
 8005b50:	d808      	bhi.n	8005b64 <ADC_ConfigureBoostMode+0x1a0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	689a      	ldr	r2, [r3, #8]
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8005b60:	609a      	str	r2, [r3, #8]
}
 8005b62:	e025      	b.n	8005bb0 <ADC_ConfigureBoostMode+0x1ec>
    else if (freq <= 12500000UL)
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	4a1a      	ldr	r2, [pc, #104]	; (8005bd0 <ADC_ConfigureBoostMode+0x20c>)
 8005b68:	4293      	cmp	r3, r2
 8005b6a:	d80a      	bhi.n	8005b82 <ADC_ConfigureBoostMode+0x1be>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	689b      	ldr	r3, [r3, #8]
 8005b72:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005b7e:	609a      	str	r2, [r3, #8]
}
 8005b80:	e016      	b.n	8005bb0 <ADC_ConfigureBoostMode+0x1ec>
    else if (freq <= 25000000UL)
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	4a13      	ldr	r2, [pc, #76]	; (8005bd4 <ADC_ConfigureBoostMode+0x210>)
 8005b86:	4293      	cmp	r3, r2
 8005b88:	d80a      	bhi.n	8005ba0 <ADC_ConfigureBoostMode+0x1dc>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	689b      	ldr	r3, [r3, #8]
 8005b90:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005b9c:	609a      	str	r2, [r3, #8]
}
 8005b9e:	e007      	b.n	8005bb0 <ADC_ConfigureBoostMode+0x1ec>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	689a      	ldr	r2, [r3, #8]
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8005bae:	609a      	str	r2, [r3, #8]
}
 8005bb0:	bf00      	nop
 8005bb2:	3710      	adds	r7, #16
 8005bb4:	46bd      	mov	sp, r7
 8005bb6:	bd80      	pop	{r7, pc}
 8005bb8:	40022000 	.word	0x40022000
 8005bbc:	40022100 	.word	0x40022100
 8005bc0:	40022300 	.word	0x40022300
 8005bc4:	58026300 	.word	0x58026300
 8005bc8:	01312d00 	.word	0x01312d00
 8005bcc:	005f5e10 	.word	0x005f5e10
 8005bd0:	00bebc20 	.word	0x00bebc20
 8005bd4:	017d7840 	.word	0x017d7840

08005bd8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005bd8:	b480      	push	{r7}
 8005bda:	b085      	sub	sp, #20
 8005bdc:	af00      	add	r7, sp, #0
 8005bde:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	f003 0307 	and.w	r3, r3, #7
 8005be6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005be8:	4b0b      	ldr	r3, [pc, #44]	; (8005c18 <__NVIC_SetPriorityGrouping+0x40>)
 8005bea:	68db      	ldr	r3, [r3, #12]
 8005bec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005bee:	68ba      	ldr	r2, [r7, #8]
 8005bf0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005bf4:	4013      	ands	r3, r2
 8005bf6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005bfc:	68bb      	ldr	r3, [r7, #8]
 8005bfe:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8005c00:	4b06      	ldr	r3, [pc, #24]	; (8005c1c <__NVIC_SetPriorityGrouping+0x44>)
 8005c02:	4313      	orrs	r3, r2
 8005c04:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005c06:	4a04      	ldr	r2, [pc, #16]	; (8005c18 <__NVIC_SetPriorityGrouping+0x40>)
 8005c08:	68bb      	ldr	r3, [r7, #8]
 8005c0a:	60d3      	str	r3, [r2, #12]
}
 8005c0c:	bf00      	nop
 8005c0e:	3714      	adds	r7, #20
 8005c10:	46bd      	mov	sp, r7
 8005c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c16:	4770      	bx	lr
 8005c18:	e000ed00 	.word	0xe000ed00
 8005c1c:	05fa0000 	.word	0x05fa0000

08005c20 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005c20:	b480      	push	{r7}
 8005c22:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005c24:	4b04      	ldr	r3, [pc, #16]	; (8005c38 <__NVIC_GetPriorityGrouping+0x18>)
 8005c26:	68db      	ldr	r3, [r3, #12]
 8005c28:	0a1b      	lsrs	r3, r3, #8
 8005c2a:	f003 0307 	and.w	r3, r3, #7
}
 8005c2e:	4618      	mov	r0, r3
 8005c30:	46bd      	mov	sp, r7
 8005c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c36:	4770      	bx	lr
 8005c38:	e000ed00 	.word	0xe000ed00

08005c3c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005c3c:	b480      	push	{r7}
 8005c3e:	b083      	sub	sp, #12
 8005c40:	af00      	add	r7, sp, #0
 8005c42:	4603      	mov	r3, r0
 8005c44:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8005c46:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	db0b      	blt.n	8005c66 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005c4e:	88fb      	ldrh	r3, [r7, #6]
 8005c50:	f003 021f 	and.w	r2, r3, #31
 8005c54:	4907      	ldr	r1, [pc, #28]	; (8005c74 <__NVIC_EnableIRQ+0x38>)
 8005c56:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005c5a:	095b      	lsrs	r3, r3, #5
 8005c5c:	2001      	movs	r0, #1
 8005c5e:	fa00 f202 	lsl.w	r2, r0, r2
 8005c62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8005c66:	bf00      	nop
 8005c68:	370c      	adds	r7, #12
 8005c6a:	46bd      	mov	sp, r7
 8005c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c70:	4770      	bx	lr
 8005c72:	bf00      	nop
 8005c74:	e000e100 	.word	0xe000e100

08005c78 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005c78:	b480      	push	{r7}
 8005c7a:	b083      	sub	sp, #12
 8005c7c:	af00      	add	r7, sp, #0
 8005c7e:	4603      	mov	r3, r0
 8005c80:	6039      	str	r1, [r7, #0]
 8005c82:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8005c84:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	db0a      	blt.n	8005ca2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005c8c:	683b      	ldr	r3, [r7, #0]
 8005c8e:	b2da      	uxtb	r2, r3
 8005c90:	490c      	ldr	r1, [pc, #48]	; (8005cc4 <__NVIC_SetPriority+0x4c>)
 8005c92:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005c96:	0112      	lsls	r2, r2, #4
 8005c98:	b2d2      	uxtb	r2, r2
 8005c9a:	440b      	add	r3, r1
 8005c9c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005ca0:	e00a      	b.n	8005cb8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005ca2:	683b      	ldr	r3, [r7, #0]
 8005ca4:	b2da      	uxtb	r2, r3
 8005ca6:	4908      	ldr	r1, [pc, #32]	; (8005cc8 <__NVIC_SetPriority+0x50>)
 8005ca8:	88fb      	ldrh	r3, [r7, #6]
 8005caa:	f003 030f 	and.w	r3, r3, #15
 8005cae:	3b04      	subs	r3, #4
 8005cb0:	0112      	lsls	r2, r2, #4
 8005cb2:	b2d2      	uxtb	r2, r2
 8005cb4:	440b      	add	r3, r1
 8005cb6:	761a      	strb	r2, [r3, #24]
}
 8005cb8:	bf00      	nop
 8005cba:	370c      	adds	r7, #12
 8005cbc:	46bd      	mov	sp, r7
 8005cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc2:	4770      	bx	lr
 8005cc4:	e000e100 	.word	0xe000e100
 8005cc8:	e000ed00 	.word	0xe000ed00

08005ccc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005ccc:	b480      	push	{r7}
 8005cce:	b089      	sub	sp, #36	; 0x24
 8005cd0:	af00      	add	r7, sp, #0
 8005cd2:	60f8      	str	r0, [r7, #12]
 8005cd4:	60b9      	str	r1, [r7, #8]
 8005cd6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	f003 0307 	and.w	r3, r3, #7
 8005cde:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005ce0:	69fb      	ldr	r3, [r7, #28]
 8005ce2:	f1c3 0307 	rsb	r3, r3, #7
 8005ce6:	2b04      	cmp	r3, #4
 8005ce8:	bf28      	it	cs
 8005cea:	2304      	movcs	r3, #4
 8005cec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005cee:	69fb      	ldr	r3, [r7, #28]
 8005cf0:	3304      	adds	r3, #4
 8005cf2:	2b06      	cmp	r3, #6
 8005cf4:	d902      	bls.n	8005cfc <NVIC_EncodePriority+0x30>
 8005cf6:	69fb      	ldr	r3, [r7, #28]
 8005cf8:	3b03      	subs	r3, #3
 8005cfa:	e000      	b.n	8005cfe <NVIC_EncodePriority+0x32>
 8005cfc:	2300      	movs	r3, #0
 8005cfe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005d00:	f04f 32ff 	mov.w	r2, #4294967295
 8005d04:	69bb      	ldr	r3, [r7, #24]
 8005d06:	fa02 f303 	lsl.w	r3, r2, r3
 8005d0a:	43da      	mvns	r2, r3
 8005d0c:	68bb      	ldr	r3, [r7, #8]
 8005d0e:	401a      	ands	r2, r3
 8005d10:	697b      	ldr	r3, [r7, #20]
 8005d12:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005d14:	f04f 31ff 	mov.w	r1, #4294967295
 8005d18:	697b      	ldr	r3, [r7, #20]
 8005d1a:	fa01 f303 	lsl.w	r3, r1, r3
 8005d1e:	43d9      	mvns	r1, r3
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005d24:	4313      	orrs	r3, r2
         );
}
 8005d26:	4618      	mov	r0, r3
 8005d28:	3724      	adds	r7, #36	; 0x24
 8005d2a:	46bd      	mov	sp, r7
 8005d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d30:	4770      	bx	lr

08005d32 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005d32:	b580      	push	{r7, lr}
 8005d34:	b082      	sub	sp, #8
 8005d36:	af00      	add	r7, sp, #0
 8005d38:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005d3a:	6878      	ldr	r0, [r7, #4]
 8005d3c:	f7ff ff4c 	bl	8005bd8 <__NVIC_SetPriorityGrouping>
}
 8005d40:	bf00      	nop
 8005d42:	3708      	adds	r7, #8
 8005d44:	46bd      	mov	sp, r7
 8005d46:	bd80      	pop	{r7, pc}

08005d48 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005d48:	b580      	push	{r7, lr}
 8005d4a:	b086      	sub	sp, #24
 8005d4c:	af00      	add	r7, sp, #0
 8005d4e:	4603      	mov	r3, r0
 8005d50:	60b9      	str	r1, [r7, #8]
 8005d52:	607a      	str	r2, [r7, #4]
 8005d54:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005d56:	f7ff ff63 	bl	8005c20 <__NVIC_GetPriorityGrouping>
 8005d5a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005d5c:	687a      	ldr	r2, [r7, #4]
 8005d5e:	68b9      	ldr	r1, [r7, #8]
 8005d60:	6978      	ldr	r0, [r7, #20]
 8005d62:	f7ff ffb3 	bl	8005ccc <NVIC_EncodePriority>
 8005d66:	4602      	mov	r2, r0
 8005d68:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005d6c:	4611      	mov	r1, r2
 8005d6e:	4618      	mov	r0, r3
 8005d70:	f7ff ff82 	bl	8005c78 <__NVIC_SetPriority>
}
 8005d74:	bf00      	nop
 8005d76:	3718      	adds	r7, #24
 8005d78:	46bd      	mov	sp, r7
 8005d7a:	bd80      	pop	{r7, pc}

08005d7c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005d7c:	b580      	push	{r7, lr}
 8005d7e:	b082      	sub	sp, #8
 8005d80:	af00      	add	r7, sp, #0
 8005d82:	4603      	mov	r3, r0
 8005d84:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005d86:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005d8a:	4618      	mov	r0, r3
 8005d8c:	f7ff ff56 	bl	8005c3c <__NVIC_EnableIRQ>
}
 8005d90:	bf00      	nop
 8005d92:	3708      	adds	r7, #8
 8005d94:	46bd      	mov	sp, r7
 8005d96:	bd80      	pop	{r7, pc}

08005d98 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8005d98:	b580      	push	{r7, lr}
 8005d9a:	b082      	sub	sp, #8
 8005d9c:	af00      	add	r7, sp, #0
 8005d9e:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d101      	bne.n	8005daa <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8005da6:	2301      	movs	r3, #1
 8005da8:	e054      	b.n	8005e54 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	7f5b      	ldrb	r3, [r3, #29]
 8005dae:	b2db      	uxtb	r3, r3
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d105      	bne.n	8005dc0 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	2200      	movs	r2, #0
 8005db8:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8005dba:	6878      	ldr	r0, [r7, #4]
 8005dbc:	f7fa fd32 	bl	8000824 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	2202      	movs	r2, #2
 8005dc4:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	791b      	ldrb	r3, [r3, #4]
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d10c      	bne.n	8005de8 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	4a22      	ldr	r2, [pc, #136]	; (8005e5c <HAL_CRC_Init+0xc4>)
 8005dd4:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	689a      	ldr	r2, [r3, #8]
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	f022 0218 	bic.w	r2, r2, #24
 8005de4:	609a      	str	r2, [r3, #8]
 8005de6:	e00c      	b.n	8005e02 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	6899      	ldr	r1, [r3, #8]
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	68db      	ldr	r3, [r3, #12]
 8005df0:	461a      	mov	r2, r3
 8005df2:	6878      	ldr	r0, [r7, #4]
 8005df4:	f000 f834 	bl	8005e60 <HAL_CRCEx_Polynomial_Set>
 8005df8:	4603      	mov	r3, r0
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d001      	beq.n	8005e02 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8005dfe:	2301      	movs	r3, #1
 8005e00:	e028      	b.n	8005e54 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	795b      	ldrb	r3, [r3, #5]
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d105      	bne.n	8005e16 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	f04f 32ff 	mov.w	r2, #4294967295
 8005e12:	611a      	str	r2, [r3, #16]
 8005e14:	e004      	b.n	8005e20 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	687a      	ldr	r2, [r7, #4]
 8005e1c:	6912      	ldr	r2, [r2, #16]
 8005e1e:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	689b      	ldr	r3, [r3, #8]
 8005e26:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	695a      	ldr	r2, [r3, #20]
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	430a      	orrs	r2, r1
 8005e34:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	689b      	ldr	r3, [r3, #8]
 8005e3c:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	699a      	ldr	r2, [r3, #24]
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	430a      	orrs	r2, r1
 8005e4a:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	2201      	movs	r2, #1
 8005e50:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8005e52:	2300      	movs	r3, #0
}
 8005e54:	4618      	mov	r0, r3
 8005e56:	3708      	adds	r7, #8
 8005e58:	46bd      	mov	sp, r7
 8005e5a:	bd80      	pop	{r7, pc}
 8005e5c:	04c11db7 	.word	0x04c11db7

08005e60 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8005e60:	b480      	push	{r7}
 8005e62:	b087      	sub	sp, #28
 8005e64:	af00      	add	r7, sp, #0
 8005e66:	60f8      	str	r0, [r7, #12]
 8005e68:	60b9      	str	r1, [r7, #8]
 8005e6a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005e6c:	2300      	movs	r3, #0
 8005e6e:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8005e70:	231f      	movs	r3, #31
 8005e72:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8005e74:	bf00      	nop
 8005e76:	693b      	ldr	r3, [r7, #16]
 8005e78:	1e5a      	subs	r2, r3, #1
 8005e7a:	613a      	str	r2, [r7, #16]
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d009      	beq.n	8005e94 <HAL_CRCEx_Polynomial_Set+0x34>
 8005e80:	693b      	ldr	r3, [r7, #16]
 8005e82:	f003 031f 	and.w	r3, r3, #31
 8005e86:	68ba      	ldr	r2, [r7, #8]
 8005e88:	fa22 f303 	lsr.w	r3, r2, r3
 8005e8c:	f003 0301 	and.w	r3, r3, #1
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d0f0      	beq.n	8005e76 <HAL_CRCEx_Polynomial_Set+0x16>
  {
  }

  switch (PolyLength)
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	2b18      	cmp	r3, #24
 8005e98:	d846      	bhi.n	8005f28 <HAL_CRCEx_Polynomial_Set+0xc8>
 8005e9a:	a201      	add	r2, pc, #4	; (adr r2, 8005ea0 <HAL_CRCEx_Polynomial_Set+0x40>)
 8005e9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ea0:	08005f2f 	.word	0x08005f2f
 8005ea4:	08005f29 	.word	0x08005f29
 8005ea8:	08005f29 	.word	0x08005f29
 8005eac:	08005f29 	.word	0x08005f29
 8005eb0:	08005f29 	.word	0x08005f29
 8005eb4:	08005f29 	.word	0x08005f29
 8005eb8:	08005f29 	.word	0x08005f29
 8005ebc:	08005f29 	.word	0x08005f29
 8005ec0:	08005f1d 	.word	0x08005f1d
 8005ec4:	08005f29 	.word	0x08005f29
 8005ec8:	08005f29 	.word	0x08005f29
 8005ecc:	08005f29 	.word	0x08005f29
 8005ed0:	08005f29 	.word	0x08005f29
 8005ed4:	08005f29 	.word	0x08005f29
 8005ed8:	08005f29 	.word	0x08005f29
 8005edc:	08005f29 	.word	0x08005f29
 8005ee0:	08005f11 	.word	0x08005f11
 8005ee4:	08005f29 	.word	0x08005f29
 8005ee8:	08005f29 	.word	0x08005f29
 8005eec:	08005f29 	.word	0x08005f29
 8005ef0:	08005f29 	.word	0x08005f29
 8005ef4:	08005f29 	.word	0x08005f29
 8005ef8:	08005f29 	.word	0x08005f29
 8005efc:	08005f29 	.word	0x08005f29
 8005f00:	08005f05 	.word	0x08005f05
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8005f04:	693b      	ldr	r3, [r7, #16]
 8005f06:	2b06      	cmp	r3, #6
 8005f08:	d913      	bls.n	8005f32 <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 8005f0a:	2301      	movs	r3, #1
 8005f0c:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8005f0e:	e010      	b.n	8005f32 <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8005f10:	693b      	ldr	r3, [r7, #16]
 8005f12:	2b07      	cmp	r3, #7
 8005f14:	d90f      	bls.n	8005f36 <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 8005f16:	2301      	movs	r3, #1
 8005f18:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8005f1a:	e00c      	b.n	8005f36 <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8005f1c:	693b      	ldr	r3, [r7, #16]
 8005f1e:	2b0f      	cmp	r3, #15
 8005f20:	d90b      	bls.n	8005f3a <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 8005f22:	2301      	movs	r3, #1
 8005f24:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8005f26:	e008      	b.n	8005f3a <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8005f28:	2301      	movs	r3, #1
 8005f2a:	75fb      	strb	r3, [r7, #23]
      break;
 8005f2c:	e006      	b.n	8005f3c <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8005f2e:	bf00      	nop
 8005f30:	e004      	b.n	8005f3c <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8005f32:	bf00      	nop
 8005f34:	e002      	b.n	8005f3c <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8005f36:	bf00      	nop
 8005f38:	e000      	b.n	8005f3c <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8005f3a:	bf00      	nop
  }
  if (status == HAL_OK)
 8005f3c:	7dfb      	ldrb	r3, [r7, #23]
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d10d      	bne.n	8005f5e <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	68ba      	ldr	r2, [r7, #8]
 8005f48:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	689b      	ldr	r3, [r3, #8]
 8005f50:	f023 0118 	bic.w	r1, r3, #24
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	687a      	ldr	r2, [r7, #4]
 8005f5a:	430a      	orrs	r2, r1
 8005f5c:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8005f5e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005f60:	4618      	mov	r0, r3
 8005f62:	371c      	adds	r7, #28
 8005f64:	46bd      	mov	sp, r7
 8005f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f6a:	4770      	bx	lr

08005f6c <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8005f6c:	b580      	push	{r7, lr}
 8005f6e:	b082      	sub	sp, #8
 8005f70:	af00      	add	r7, sp, #0
 8005f72:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d101      	bne.n	8005f7e <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 8005f7a:	2301      	movs	r3, #1
 8005f7c:	e04f      	b.n	800601e <HAL_DMA2D_Init+0xb2>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8005f84:	b2db      	uxtb	r3, r3
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d106      	bne.n	8005f98 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	2200      	movs	r2, #0
 8005f8e:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8005f92:	6878      	ldr	r0, [r7, #4]
 8005f94:	f7fa fca2 	bl	80008dc <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	2202      	movs	r2, #2
 8005f9c:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	681a      	ldr	r2, [r3, #0]
 8005fa6:	4b20      	ldr	r3, [pc, #128]	; (8006028 <HAL_DMA2D_Init+0xbc>)
 8005fa8:	4013      	ands	r3, r2
 8005faa:	687a      	ldr	r2, [r7, #4]
 8005fac:	6851      	ldr	r1, [r2, #4]
 8005fae:	687a      	ldr	r2, [r7, #4]
 8005fb0:	69d2      	ldr	r2, [r2, #28]
 8005fb2:	4311      	orrs	r1, r2
 8005fb4:	687a      	ldr	r2, [r7, #4]
 8005fb6:	6812      	ldr	r2, [r2, #0]
 8005fb8:	430b      	orrs	r3, r1
 8005fba:	6013      	str	r3, [r2, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005fc2:	4b1a      	ldr	r3, [pc, #104]	; (800602c <HAL_DMA2D_Init+0xc0>)
 8005fc4:	4013      	ands	r3, r2
 8005fc6:	687a      	ldr	r2, [r7, #4]
 8005fc8:	6891      	ldr	r1, [r2, #8]
 8005fca:	687a      	ldr	r2, [r7, #4]
 8005fcc:	6992      	ldr	r2, [r2, #24]
 8005fce:	4311      	orrs	r1, r2
 8005fd0:	687a      	ldr	r2, [r7, #4]
 8005fd2:	6812      	ldr	r2, [r2, #0]
 8005fd4:	430b      	orrs	r3, r1
 8005fd6:	6353      	str	r3, [r2, #52]	; 0x34
             hdma2d->Init.ColorMode | hdma2d->Init.BytesSwap);

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005fde:	4b14      	ldr	r3, [pc, #80]	; (8006030 <HAL_DMA2D_Init+0xc4>)
 8005fe0:	4013      	ands	r3, r2
 8005fe2:	687a      	ldr	r2, [r7, #4]
 8005fe4:	68d1      	ldr	r1, [r2, #12]
 8005fe6:	687a      	ldr	r2, [r7, #4]
 8005fe8:	6812      	ldr	r2, [r2, #0]
 8005fea:	430b      	orrs	r3, r1
 8005fec:	6413      	str	r3, [r2, #64]	; 0x40
  /* DMA2D OPFCCR AI and RBS fields setting (Output Alpha Inversion)*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ff4:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	691b      	ldr	r3, [r3, #16]
 8005ffc:	051a      	lsls	r2, r3, #20
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	695b      	ldr	r3, [r3, #20]
 8006002:	055b      	lsls	r3, r3, #21
 8006004:	431a      	orrs	r2, r3
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	430a      	orrs	r2, r1
 800600c:	635a      	str	r2, [r3, #52]	; 0x34
             ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | \
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	2200      	movs	r2, #0
 8006012:	665a      	str	r2, [r3, #100]	; 0x64

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	2201      	movs	r2, #1
 8006018:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  return HAL_OK;
 800601c:	2300      	movs	r3, #0
}
 800601e:	4618      	mov	r0, r3
 8006020:	3708      	adds	r7, #8
 8006022:	46bd      	mov	sp, r7
 8006024:	bd80      	pop	{r7, pc}
 8006026:	bf00      	nop
 8006028:	fff8ffbf 	.word	0xfff8ffbf
 800602c:	fffffef8 	.word	0xfffffef8
 8006030:	ffff0000 	.word	0xffff0000

08006034 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8006034:	b480      	push	{r7}
 8006036:	b087      	sub	sp, #28
 8006038:	af00      	add	r7, sp, #0
 800603a:	6078      	str	r0, [r7, #4]
 800603c:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	685b      	ldr	r3, [r3, #4]
 8006042:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
    }
  }
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));

  if ((LayerIdx == DMA2D_FOREGROUND_LAYER) && (hdma2d->LayerCfg[LayerIdx].InputColorMode == DMA2D_INPUT_YCBCR))
 8006046:	683b      	ldr	r3, [r7, #0]
 8006048:	2b01      	cmp	r3, #1
  {
    assert_param(IS_DMA2D_CHROMA_SUB_SAMPLING(hdma2d->LayerCfg[LayerIdx].ChromaSubSampling));
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 8006050:	2b01      	cmp	r3, #1
 8006052:	d101      	bne.n	8006058 <HAL_DMA2D_ConfigLayer+0x24>
 8006054:	2302      	movs	r3, #2
 8006056:	e092      	b.n	800617e <HAL_DMA2D_ConfigLayer+0x14a>
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	2201      	movs	r2, #1
 800605c:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	2202      	movs	r2, #2
 8006064:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8006068:	683a      	ldr	r2, [r7, #0]
 800606a:	4613      	mov	r3, r2
 800606c:	00db      	lsls	r3, r3, #3
 800606e:	1a9b      	subs	r3, r3, r2
 8006070:	009b      	lsls	r3, r3, #2
 8006072:	3328      	adds	r3, #40	; 0x28
 8006074:	687a      	ldr	r2, [r7, #4]
 8006076:	4413      	add	r3, r2
 8006078:	60fb      	str	r3, [r7, #12]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	685a      	ldr	r2, [r3, #4]
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	689b      	ldr	r3, [r3, #8]
 8006082:	041b      	lsls	r3, r3, #16
 8006084:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	691b      	ldr	r3, [r3, #16]
 800608a:	051b      	lsls	r3, r3, #20
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 800608c:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	695b      	ldr	r3, [r3, #20]
 8006092:	055b      	lsls	r3, r3, #21
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8006094:	4313      	orrs	r3, r2
 8006096:	613b      	str	r3, [r7, #16]
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
 8006098:	4b3c      	ldr	r3, [pc, #240]	; (800618c <HAL_DMA2D_ConfigLayer+0x158>)
 800609a:	617b      	str	r3, [r7, #20]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	685b      	ldr	r3, [r3, #4]
 80060a0:	2b0a      	cmp	r3, #10
 80060a2:	d003      	beq.n	80060ac <HAL_DMA2D_ConfigLayer+0x78>
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	685b      	ldr	r3, [r3, #4]
 80060a8:	2b09      	cmp	r3, #9
 80060aa:	d107      	bne.n	80060bc <HAL_DMA2D_ConfigLayer+0x88>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	68db      	ldr	r3, [r3, #12]
 80060b0:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80060b4:	693a      	ldr	r2, [r7, #16]
 80060b6:	4313      	orrs	r3, r2
 80060b8:	613b      	str	r3, [r7, #16]
 80060ba:	e005      	b.n	80060c8 <HAL_DMA2D_ConfigLayer+0x94>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	68db      	ldr	r3, [r3, #12]
 80060c0:	061b      	lsls	r3, r3, #24
 80060c2:	693a      	ldr	r2, [r7, #16]
 80060c4:	4313      	orrs	r3, r2
 80060c6:	613b      	str	r3, [r7, #16]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 80060c8:	683b      	ldr	r3, [r7, #0]
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d120      	bne.n	8006110 <HAL_DMA2D_ConfigLayer+0xdc>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80060d4:	697b      	ldr	r3, [r7, #20]
 80060d6:	43db      	mvns	r3, r3
 80060d8:	ea02 0103 	and.w	r1, r2, r3
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	693a      	ldr	r2, [r7, #16]
 80060e2:	430a      	orrs	r2, r1
 80060e4:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	68fa      	ldr	r2, [r7, #12]
 80060ec:	6812      	ldr	r2, [r2, #0]
 80060ee:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	685b      	ldr	r3, [r3, #4]
 80060f4:	2b0a      	cmp	r3, #10
 80060f6:	d003      	beq.n	8006100 <HAL_DMA2D_ConfigLayer+0xcc>
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	685b      	ldr	r3, [r3, #4]
 80060fc:	2b09      	cmp	r3, #9
 80060fe:	d135      	bne.n	800616c <HAL_DMA2D_ConfigLayer+0x138>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	68da      	ldr	r2, [r3, #12]
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 800610c:	629a      	str	r2, [r3, #40]	; 0x28
 800610e:	e02d      	b.n	800616c <HAL_DMA2D_ConfigLayer+0x138>
  }
  /* Configure the foreground DMA2D layer */
  else
  {

    if (pLayerCfg->InputColorMode == DMA2D_INPUT_YCBCR)
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	685b      	ldr	r3, [r3, #4]
 8006114:	2b0b      	cmp	r3, #11
 8006116:	d109      	bne.n	800612c <HAL_DMA2D_ConfigLayer+0xf8>
    {
      regValue |= (pLayerCfg->ChromaSubSampling << DMA2D_FGPFCCR_CSS_Pos);
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	699b      	ldr	r3, [r3, #24]
 800611c:	049b      	lsls	r3, r3, #18
 800611e:	693a      	ldr	r2, [r7, #16]
 8006120:	4313      	orrs	r3, r2
 8006122:	613b      	str	r3, [r7, #16]
      regMask  |= DMA2D_FGPFCCR_CSS;
 8006124:	697b      	ldr	r3, [r7, #20]
 8006126:	f443 2340 	orr.w	r3, r3, #786432	; 0xc0000
 800612a:	617b      	str	r3, [r7, #20]
    }

    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	69da      	ldr	r2, [r3, #28]
 8006132:	697b      	ldr	r3, [r7, #20]
 8006134:	43db      	mvns	r3, r3
 8006136:	ea02 0103 	and.w	r1, r2, r3
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	693a      	ldr	r2, [r7, #16]
 8006140:	430a      	orrs	r2, r1
 8006142:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	68fa      	ldr	r2, [r7, #12]
 800614a:	6812      	ldr	r2, [r2, #0]
 800614c:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	685b      	ldr	r3, [r3, #4]
 8006152:	2b0a      	cmp	r3, #10
 8006154:	d003      	beq.n	800615e <HAL_DMA2D_ConfigLayer+0x12a>
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	685b      	ldr	r3, [r3, #4]
 800615a:	2b09      	cmp	r3, #9
 800615c:	d106      	bne.n	800616c <HAL_DMA2D_ConfigLayer+0x138>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	68da      	ldr	r2, [r3, #12]
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 800616a:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	2201      	movs	r2, #1
 8006170:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	2200      	movs	r2, #0
 8006178:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

  return HAL_OK;
 800617c:	2300      	movs	r3, #0
}
 800617e:	4618      	mov	r0, r3
 8006180:	371c      	adds	r7, #28
 8006182:	46bd      	mov	sp, r7
 8006184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006188:	4770      	bx	lr
 800618a:	bf00      	nop
 800618c:	ff33000f 	.word	0xff33000f

08006190 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006190:	b480      	push	{r7}
 8006192:	b089      	sub	sp, #36	; 0x24
 8006194:	af00      	add	r7, sp, #0
 8006196:	6078      	str	r0, [r7, #4]
 8006198:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800619a:	2300      	movs	r3, #0
 800619c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800619e:	4b89      	ldr	r3, [pc, #548]	; (80063c4 <HAL_GPIO_Init+0x234>)
 80061a0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80061a2:	e194      	b.n	80064ce <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80061a4:	683b      	ldr	r3, [r7, #0]
 80061a6:	681a      	ldr	r2, [r3, #0]
 80061a8:	2101      	movs	r1, #1
 80061aa:	69fb      	ldr	r3, [r7, #28]
 80061ac:	fa01 f303 	lsl.w	r3, r1, r3
 80061b0:	4013      	ands	r3, r2
 80061b2:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80061b4:	693b      	ldr	r3, [r7, #16]
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	f000 8186 	beq.w	80064c8 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80061bc:	683b      	ldr	r3, [r7, #0]
 80061be:	685b      	ldr	r3, [r3, #4]
 80061c0:	f003 0303 	and.w	r3, r3, #3
 80061c4:	2b01      	cmp	r3, #1
 80061c6:	d005      	beq.n	80061d4 <HAL_GPIO_Init+0x44>
 80061c8:	683b      	ldr	r3, [r7, #0]
 80061ca:	685b      	ldr	r3, [r3, #4]
 80061cc:	f003 0303 	and.w	r3, r3, #3
 80061d0:	2b02      	cmp	r3, #2
 80061d2:	d130      	bne.n	8006236 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	689b      	ldr	r3, [r3, #8]
 80061d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80061da:	69fb      	ldr	r3, [r7, #28]
 80061dc:	005b      	lsls	r3, r3, #1
 80061de:	2203      	movs	r2, #3
 80061e0:	fa02 f303 	lsl.w	r3, r2, r3
 80061e4:	43db      	mvns	r3, r3
 80061e6:	69ba      	ldr	r2, [r7, #24]
 80061e8:	4013      	ands	r3, r2
 80061ea:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80061ec:	683b      	ldr	r3, [r7, #0]
 80061ee:	68da      	ldr	r2, [r3, #12]
 80061f0:	69fb      	ldr	r3, [r7, #28]
 80061f2:	005b      	lsls	r3, r3, #1
 80061f4:	fa02 f303 	lsl.w	r3, r2, r3
 80061f8:	69ba      	ldr	r2, [r7, #24]
 80061fa:	4313      	orrs	r3, r2
 80061fc:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	69ba      	ldr	r2, [r7, #24]
 8006202:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	685b      	ldr	r3, [r3, #4]
 8006208:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800620a:	2201      	movs	r2, #1
 800620c:	69fb      	ldr	r3, [r7, #28]
 800620e:	fa02 f303 	lsl.w	r3, r2, r3
 8006212:	43db      	mvns	r3, r3
 8006214:	69ba      	ldr	r2, [r7, #24]
 8006216:	4013      	ands	r3, r2
 8006218:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800621a:	683b      	ldr	r3, [r7, #0]
 800621c:	685b      	ldr	r3, [r3, #4]
 800621e:	091b      	lsrs	r3, r3, #4
 8006220:	f003 0201 	and.w	r2, r3, #1
 8006224:	69fb      	ldr	r3, [r7, #28]
 8006226:	fa02 f303 	lsl.w	r3, r2, r3
 800622a:	69ba      	ldr	r2, [r7, #24]
 800622c:	4313      	orrs	r3, r2
 800622e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	69ba      	ldr	r2, [r7, #24]
 8006234:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006236:	683b      	ldr	r3, [r7, #0]
 8006238:	685b      	ldr	r3, [r3, #4]
 800623a:	f003 0303 	and.w	r3, r3, #3
 800623e:	2b03      	cmp	r3, #3
 8006240:	d017      	beq.n	8006272 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	68db      	ldr	r3, [r3, #12]
 8006246:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8006248:	69fb      	ldr	r3, [r7, #28]
 800624a:	005b      	lsls	r3, r3, #1
 800624c:	2203      	movs	r2, #3
 800624e:	fa02 f303 	lsl.w	r3, r2, r3
 8006252:	43db      	mvns	r3, r3
 8006254:	69ba      	ldr	r2, [r7, #24]
 8006256:	4013      	ands	r3, r2
 8006258:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800625a:	683b      	ldr	r3, [r7, #0]
 800625c:	689a      	ldr	r2, [r3, #8]
 800625e:	69fb      	ldr	r3, [r7, #28]
 8006260:	005b      	lsls	r3, r3, #1
 8006262:	fa02 f303 	lsl.w	r3, r2, r3
 8006266:	69ba      	ldr	r2, [r7, #24]
 8006268:	4313      	orrs	r3, r2
 800626a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	69ba      	ldr	r2, [r7, #24]
 8006270:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006272:	683b      	ldr	r3, [r7, #0]
 8006274:	685b      	ldr	r3, [r3, #4]
 8006276:	f003 0303 	and.w	r3, r3, #3
 800627a:	2b02      	cmp	r3, #2
 800627c:	d123      	bne.n	80062c6 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800627e:	69fb      	ldr	r3, [r7, #28]
 8006280:	08da      	lsrs	r2, r3, #3
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	3208      	adds	r2, #8
 8006286:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800628a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800628c:	69fb      	ldr	r3, [r7, #28]
 800628e:	f003 0307 	and.w	r3, r3, #7
 8006292:	009b      	lsls	r3, r3, #2
 8006294:	220f      	movs	r2, #15
 8006296:	fa02 f303 	lsl.w	r3, r2, r3
 800629a:	43db      	mvns	r3, r3
 800629c:	69ba      	ldr	r2, [r7, #24]
 800629e:	4013      	ands	r3, r2
 80062a0:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80062a2:	683b      	ldr	r3, [r7, #0]
 80062a4:	691a      	ldr	r2, [r3, #16]
 80062a6:	69fb      	ldr	r3, [r7, #28]
 80062a8:	f003 0307 	and.w	r3, r3, #7
 80062ac:	009b      	lsls	r3, r3, #2
 80062ae:	fa02 f303 	lsl.w	r3, r2, r3
 80062b2:	69ba      	ldr	r2, [r7, #24]
 80062b4:	4313      	orrs	r3, r2
 80062b6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80062b8:	69fb      	ldr	r3, [r7, #28]
 80062ba:	08da      	lsrs	r2, r3, #3
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	3208      	adds	r2, #8
 80062c0:	69b9      	ldr	r1, [r7, #24]
 80062c2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80062cc:	69fb      	ldr	r3, [r7, #28]
 80062ce:	005b      	lsls	r3, r3, #1
 80062d0:	2203      	movs	r2, #3
 80062d2:	fa02 f303 	lsl.w	r3, r2, r3
 80062d6:	43db      	mvns	r3, r3
 80062d8:	69ba      	ldr	r2, [r7, #24]
 80062da:	4013      	ands	r3, r2
 80062dc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80062de:	683b      	ldr	r3, [r7, #0]
 80062e0:	685b      	ldr	r3, [r3, #4]
 80062e2:	f003 0203 	and.w	r2, r3, #3
 80062e6:	69fb      	ldr	r3, [r7, #28]
 80062e8:	005b      	lsls	r3, r3, #1
 80062ea:	fa02 f303 	lsl.w	r3, r2, r3
 80062ee:	69ba      	ldr	r2, [r7, #24]
 80062f0:	4313      	orrs	r3, r2
 80062f2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	69ba      	ldr	r2, [r7, #24]
 80062f8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80062fa:	683b      	ldr	r3, [r7, #0]
 80062fc:	685b      	ldr	r3, [r3, #4]
 80062fe:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006302:	2b00      	cmp	r3, #0
 8006304:	f000 80e0 	beq.w	80064c8 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006308:	4b2f      	ldr	r3, [pc, #188]	; (80063c8 <HAL_GPIO_Init+0x238>)
 800630a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800630e:	4a2e      	ldr	r2, [pc, #184]	; (80063c8 <HAL_GPIO_Init+0x238>)
 8006310:	f043 0302 	orr.w	r3, r3, #2
 8006314:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8006318:	4b2b      	ldr	r3, [pc, #172]	; (80063c8 <HAL_GPIO_Init+0x238>)
 800631a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800631e:	f003 0302 	and.w	r3, r3, #2
 8006322:	60fb      	str	r3, [r7, #12]
 8006324:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006326:	4a29      	ldr	r2, [pc, #164]	; (80063cc <HAL_GPIO_Init+0x23c>)
 8006328:	69fb      	ldr	r3, [r7, #28]
 800632a:	089b      	lsrs	r3, r3, #2
 800632c:	3302      	adds	r3, #2
 800632e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006332:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8006334:	69fb      	ldr	r3, [r7, #28]
 8006336:	f003 0303 	and.w	r3, r3, #3
 800633a:	009b      	lsls	r3, r3, #2
 800633c:	220f      	movs	r2, #15
 800633e:	fa02 f303 	lsl.w	r3, r2, r3
 8006342:	43db      	mvns	r3, r3
 8006344:	69ba      	ldr	r2, [r7, #24]
 8006346:	4013      	ands	r3, r2
 8006348:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	4a20      	ldr	r2, [pc, #128]	; (80063d0 <HAL_GPIO_Init+0x240>)
 800634e:	4293      	cmp	r3, r2
 8006350:	d052      	beq.n	80063f8 <HAL_GPIO_Init+0x268>
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	4a1f      	ldr	r2, [pc, #124]	; (80063d4 <HAL_GPIO_Init+0x244>)
 8006356:	4293      	cmp	r3, r2
 8006358:	d031      	beq.n	80063be <HAL_GPIO_Init+0x22e>
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	4a1e      	ldr	r2, [pc, #120]	; (80063d8 <HAL_GPIO_Init+0x248>)
 800635e:	4293      	cmp	r3, r2
 8006360:	d02b      	beq.n	80063ba <HAL_GPIO_Init+0x22a>
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	4a1d      	ldr	r2, [pc, #116]	; (80063dc <HAL_GPIO_Init+0x24c>)
 8006366:	4293      	cmp	r3, r2
 8006368:	d025      	beq.n	80063b6 <HAL_GPIO_Init+0x226>
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	4a1c      	ldr	r2, [pc, #112]	; (80063e0 <HAL_GPIO_Init+0x250>)
 800636e:	4293      	cmp	r3, r2
 8006370:	d01f      	beq.n	80063b2 <HAL_GPIO_Init+0x222>
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	4a1b      	ldr	r2, [pc, #108]	; (80063e4 <HAL_GPIO_Init+0x254>)
 8006376:	4293      	cmp	r3, r2
 8006378:	d019      	beq.n	80063ae <HAL_GPIO_Init+0x21e>
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	4a1a      	ldr	r2, [pc, #104]	; (80063e8 <HAL_GPIO_Init+0x258>)
 800637e:	4293      	cmp	r3, r2
 8006380:	d013      	beq.n	80063aa <HAL_GPIO_Init+0x21a>
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	4a19      	ldr	r2, [pc, #100]	; (80063ec <HAL_GPIO_Init+0x25c>)
 8006386:	4293      	cmp	r3, r2
 8006388:	d00d      	beq.n	80063a6 <HAL_GPIO_Init+0x216>
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	4a18      	ldr	r2, [pc, #96]	; (80063f0 <HAL_GPIO_Init+0x260>)
 800638e:	4293      	cmp	r3, r2
 8006390:	d007      	beq.n	80063a2 <HAL_GPIO_Init+0x212>
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	4a17      	ldr	r2, [pc, #92]	; (80063f4 <HAL_GPIO_Init+0x264>)
 8006396:	4293      	cmp	r3, r2
 8006398:	d101      	bne.n	800639e <HAL_GPIO_Init+0x20e>
 800639a:	2309      	movs	r3, #9
 800639c:	e02d      	b.n	80063fa <HAL_GPIO_Init+0x26a>
 800639e:	230a      	movs	r3, #10
 80063a0:	e02b      	b.n	80063fa <HAL_GPIO_Init+0x26a>
 80063a2:	2308      	movs	r3, #8
 80063a4:	e029      	b.n	80063fa <HAL_GPIO_Init+0x26a>
 80063a6:	2307      	movs	r3, #7
 80063a8:	e027      	b.n	80063fa <HAL_GPIO_Init+0x26a>
 80063aa:	2306      	movs	r3, #6
 80063ac:	e025      	b.n	80063fa <HAL_GPIO_Init+0x26a>
 80063ae:	2305      	movs	r3, #5
 80063b0:	e023      	b.n	80063fa <HAL_GPIO_Init+0x26a>
 80063b2:	2304      	movs	r3, #4
 80063b4:	e021      	b.n	80063fa <HAL_GPIO_Init+0x26a>
 80063b6:	2303      	movs	r3, #3
 80063b8:	e01f      	b.n	80063fa <HAL_GPIO_Init+0x26a>
 80063ba:	2302      	movs	r3, #2
 80063bc:	e01d      	b.n	80063fa <HAL_GPIO_Init+0x26a>
 80063be:	2301      	movs	r3, #1
 80063c0:	e01b      	b.n	80063fa <HAL_GPIO_Init+0x26a>
 80063c2:	bf00      	nop
 80063c4:	58000080 	.word	0x58000080
 80063c8:	58024400 	.word	0x58024400
 80063cc:	58000400 	.word	0x58000400
 80063d0:	58020000 	.word	0x58020000
 80063d4:	58020400 	.word	0x58020400
 80063d8:	58020800 	.word	0x58020800
 80063dc:	58020c00 	.word	0x58020c00
 80063e0:	58021000 	.word	0x58021000
 80063e4:	58021400 	.word	0x58021400
 80063e8:	58021800 	.word	0x58021800
 80063ec:	58021c00 	.word	0x58021c00
 80063f0:	58022000 	.word	0x58022000
 80063f4:	58022400 	.word	0x58022400
 80063f8:	2300      	movs	r3, #0
 80063fa:	69fa      	ldr	r2, [r7, #28]
 80063fc:	f002 0203 	and.w	r2, r2, #3
 8006400:	0092      	lsls	r2, r2, #2
 8006402:	4093      	lsls	r3, r2
 8006404:	69ba      	ldr	r2, [r7, #24]
 8006406:	4313      	orrs	r3, r2
 8006408:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800640a:	4938      	ldr	r1, [pc, #224]	; (80064ec <HAL_GPIO_Init+0x35c>)
 800640c:	69fb      	ldr	r3, [r7, #28]
 800640e:	089b      	lsrs	r3, r3, #2
 8006410:	3302      	adds	r3, #2
 8006412:	69ba      	ldr	r2, [r7, #24]
 8006414:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006418:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006420:	693b      	ldr	r3, [r7, #16]
 8006422:	43db      	mvns	r3, r3
 8006424:	69ba      	ldr	r2, [r7, #24]
 8006426:	4013      	ands	r3, r2
 8006428:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800642a:	683b      	ldr	r3, [r7, #0]
 800642c:	685b      	ldr	r3, [r3, #4]
 800642e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006432:	2b00      	cmp	r3, #0
 8006434:	d003      	beq.n	800643e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8006436:	69ba      	ldr	r2, [r7, #24]
 8006438:	693b      	ldr	r3, [r7, #16]
 800643a:	4313      	orrs	r3, r2
 800643c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800643e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006442:	69bb      	ldr	r3, [r7, #24]
 8006444:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8006446:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800644a:	685b      	ldr	r3, [r3, #4]
 800644c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800644e:	693b      	ldr	r3, [r7, #16]
 8006450:	43db      	mvns	r3, r3
 8006452:	69ba      	ldr	r2, [r7, #24]
 8006454:	4013      	ands	r3, r2
 8006456:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006458:	683b      	ldr	r3, [r7, #0]
 800645a:	685b      	ldr	r3, [r3, #4]
 800645c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006460:	2b00      	cmp	r3, #0
 8006462:	d003      	beq.n	800646c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8006464:	69ba      	ldr	r2, [r7, #24]
 8006466:	693b      	ldr	r3, [r7, #16]
 8006468:	4313      	orrs	r3, r2
 800646a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800646c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006470:	69bb      	ldr	r3, [r7, #24]
 8006472:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8006474:	697b      	ldr	r3, [r7, #20]
 8006476:	685b      	ldr	r3, [r3, #4]
 8006478:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800647a:	693b      	ldr	r3, [r7, #16]
 800647c:	43db      	mvns	r3, r3
 800647e:	69ba      	ldr	r2, [r7, #24]
 8006480:	4013      	ands	r3, r2
 8006482:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006484:	683b      	ldr	r3, [r7, #0]
 8006486:	685b      	ldr	r3, [r3, #4]
 8006488:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800648c:	2b00      	cmp	r3, #0
 800648e:	d003      	beq.n	8006498 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8006490:	69ba      	ldr	r2, [r7, #24]
 8006492:	693b      	ldr	r3, [r7, #16]
 8006494:	4313      	orrs	r3, r2
 8006496:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8006498:	697b      	ldr	r3, [r7, #20]
 800649a:	69ba      	ldr	r2, [r7, #24]
 800649c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800649e:	697b      	ldr	r3, [r7, #20]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80064a4:	693b      	ldr	r3, [r7, #16]
 80064a6:	43db      	mvns	r3, r3
 80064a8:	69ba      	ldr	r2, [r7, #24]
 80064aa:	4013      	ands	r3, r2
 80064ac:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80064ae:	683b      	ldr	r3, [r7, #0]
 80064b0:	685b      	ldr	r3, [r3, #4]
 80064b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d003      	beq.n	80064c2 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80064ba:	69ba      	ldr	r2, [r7, #24]
 80064bc:	693b      	ldr	r3, [r7, #16]
 80064be:	4313      	orrs	r3, r2
 80064c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80064c2:	697b      	ldr	r3, [r7, #20]
 80064c4:	69ba      	ldr	r2, [r7, #24]
 80064c6:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80064c8:	69fb      	ldr	r3, [r7, #28]
 80064ca:	3301      	adds	r3, #1
 80064cc:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80064ce:	683b      	ldr	r3, [r7, #0]
 80064d0:	681a      	ldr	r2, [r3, #0]
 80064d2:	69fb      	ldr	r3, [r7, #28]
 80064d4:	fa22 f303 	lsr.w	r3, r2, r3
 80064d8:	2b00      	cmp	r3, #0
 80064da:	f47f ae63 	bne.w	80061a4 <HAL_GPIO_Init+0x14>
  }
}
 80064de:	bf00      	nop
 80064e0:	bf00      	nop
 80064e2:	3724      	adds	r7, #36	; 0x24
 80064e4:	46bd      	mov	sp, r7
 80064e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ea:	4770      	bx	lr
 80064ec:	58000400 	.word	0x58000400

080064f0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80064f0:	b480      	push	{r7}
 80064f2:	b083      	sub	sp, #12
 80064f4:	af00      	add	r7, sp, #0
 80064f6:	6078      	str	r0, [r7, #4]
 80064f8:	460b      	mov	r3, r1
 80064fa:	807b      	strh	r3, [r7, #2]
 80064fc:	4613      	mov	r3, r2
 80064fe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006500:	787b      	ldrb	r3, [r7, #1]
 8006502:	2b00      	cmp	r3, #0
 8006504:	d003      	beq.n	800650e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006506:	887a      	ldrh	r2, [r7, #2]
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800650c:	e003      	b.n	8006516 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800650e:	887b      	ldrh	r3, [r7, #2]
 8006510:	041a      	lsls	r2, r3, #16
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	619a      	str	r2, [r3, #24]
}
 8006516:	bf00      	nop
 8006518:	370c      	adds	r7, #12
 800651a:	46bd      	mov	sp, r7
 800651c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006520:	4770      	bx	lr
	...

08006524 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8006524:	b580      	push	{r7, lr}
 8006526:	b084      	sub	sp, #16
 8006528:	af00      	add	r7, sp, #0
 800652a:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	2b00      	cmp	r3, #0
 8006530:	d101      	bne.n	8006536 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8006532:	2301      	movs	r3, #1
 8006534:	e0bf      	b.n	80066b6 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 800653c:	b2db      	uxtb	r3, r3
 800653e:	2b00      	cmp	r3, #0
 8006540:	d106      	bne.n	8006550 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	2200      	movs	r2, #0
 8006546:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 800654a:	6878      	ldr	r0, [r7, #4]
 800654c:	f7fc fe26 	bl	800319c <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	2202      	movs	r2, #2
 8006554:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	699a      	ldr	r2, [r3, #24]
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8006566:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	6999      	ldr	r1, [r3, #24]
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	685a      	ldr	r2, [r3, #4]
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	689b      	ldr	r3, [r3, #8]
 8006576:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800657c:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	691b      	ldr	r3, [r3, #16]
 8006582:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	430a      	orrs	r2, r1
 800658a:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	6899      	ldr	r1, [r3, #8]
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	681a      	ldr	r2, [r3, #0]
 8006596:	4b4a      	ldr	r3, [pc, #296]	; (80066c0 <HAL_LTDC_Init+0x19c>)
 8006598:	400b      	ands	r3, r1
 800659a:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	695b      	ldr	r3, [r3, #20]
 80065a0:	041b      	lsls	r3, r3, #16
 80065a2:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	6899      	ldr	r1, [r3, #8]
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	699a      	ldr	r2, [r3, #24]
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	431a      	orrs	r2, r3
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	430a      	orrs	r2, r1
 80065b8:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	68d9      	ldr	r1, [r3, #12]
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681a      	ldr	r2, [r3, #0]
 80065c4:	4b3e      	ldr	r3, [pc, #248]	; (80066c0 <HAL_LTDC_Init+0x19c>)
 80065c6:	400b      	ands	r3, r1
 80065c8:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	69db      	ldr	r3, [r3, #28]
 80065ce:	041b      	lsls	r3, r3, #16
 80065d0:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	68d9      	ldr	r1, [r3, #12]
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	6a1a      	ldr	r2, [r3, #32]
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	431a      	orrs	r2, r3
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	430a      	orrs	r2, r1
 80065e6:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	6919      	ldr	r1, [r3, #16]
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681a      	ldr	r2, [r3, #0]
 80065f2:	4b33      	ldr	r3, [pc, #204]	; (80066c0 <HAL_LTDC_Init+0x19c>)
 80065f4:	400b      	ands	r3, r1
 80065f6:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065fc:	041b      	lsls	r3, r3, #16
 80065fe:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	6919      	ldr	r1, [r3, #16]
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	431a      	orrs	r2, r3
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	430a      	orrs	r2, r1
 8006614:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	6959      	ldr	r1, [r3, #20]
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	681a      	ldr	r2, [r3, #0]
 8006620:	4b27      	ldr	r3, [pc, #156]	; (80066c0 <HAL_LTDC_Init+0x19c>)
 8006622:	400b      	ands	r3, r1
 8006624:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800662a:	041b      	lsls	r3, r3, #16
 800662c:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	6959      	ldr	r1, [r3, #20]
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	431a      	orrs	r2, r3
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	430a      	orrs	r2, r1
 8006642:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800664a:	021b      	lsls	r3, r3, #8
 800664c:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8006654:	041b      	lsls	r3, r3, #16
 8006656:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8006666:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800666e:	68ba      	ldr	r2, [r7, #8]
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	4313      	orrs	r3, r2
 8006674:	687a      	ldr	r2, [r7, #4]
 8006676:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 800667a:	431a      	orrs	r2, r3
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	430a      	orrs	r2, r1
 8006682:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	f042 0206 	orr.w	r2, r2, #6
 8006692:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	699a      	ldr	r2, [r3, #24]
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	f042 0201 	orr.w	r2, r2, #1
 80066a2:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	2200      	movs	r2, #0
 80066a8:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	2201      	movs	r2, #1
 80066b0:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 80066b4:	2300      	movs	r3, #0
}
 80066b6:	4618      	mov	r0, r3
 80066b8:	3710      	adds	r7, #16
 80066ba:	46bd      	mov	sp, r7
 80066bc:	bd80      	pop	{r7, pc}
 80066be:	bf00      	nop
 80066c0:	f000f800 	.word	0xf000f800

080066c4 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 80066c4:	b580      	push	{r7, lr}
 80066c6:	b084      	sub	sp, #16
 80066c8:	af00      	add	r7, sp, #0
 80066ca:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066d2:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80066da:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	f003 0304 	and.w	r3, r3, #4
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d023      	beq.n	800672e <HAL_LTDC_IRQHandler+0x6a>
 80066e6:	68bb      	ldr	r3, [r7, #8]
 80066e8:	f003 0304 	and.w	r3, r3, #4
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d01e      	beq.n	800672e <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	f022 0204 	bic.w	r2, r2, #4
 80066fe:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	2204      	movs	r2, #4
 8006706:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800670e:	f043 0201 	orr.w	r2, r3, #1
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	2204      	movs	r2, #4
 800671c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	2200      	movs	r2, #0
 8006724:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8006728:	6878      	ldr	r0, [r7, #4]
 800672a:	f000 f86f 	bl	800680c <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	f003 0302 	and.w	r3, r3, #2
 8006734:	2b00      	cmp	r3, #0
 8006736:	d023      	beq.n	8006780 <HAL_LTDC_IRQHandler+0xbc>
 8006738:	68bb      	ldr	r3, [r7, #8]
 800673a:	f003 0302 	and.w	r3, r3, #2
 800673e:	2b00      	cmp	r3, #0
 8006740:	d01e      	beq.n	8006780 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	f022 0202 	bic.w	r2, r2, #2
 8006750:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	2202      	movs	r2, #2
 8006758:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006760:	f043 0202 	orr.w	r2, r3, #2
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	2204      	movs	r2, #4
 800676e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	2200      	movs	r2, #0
 8006776:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 800677a:	6878      	ldr	r0, [r7, #4]
 800677c:	f000 f846 	bl	800680c <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	f003 0301 	and.w	r3, r3, #1
 8006786:	2b00      	cmp	r3, #0
 8006788:	d01b      	beq.n	80067c2 <HAL_LTDC_IRQHandler+0xfe>
 800678a:	68bb      	ldr	r3, [r7, #8]
 800678c:	f003 0301 	and.w	r3, r3, #1
 8006790:	2b00      	cmp	r3, #0
 8006792:	d016      	beq.n	80067c2 <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	f022 0201 	bic.w	r2, r2, #1
 80067a2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	2201      	movs	r2, #1
 80067aa:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	2201      	movs	r2, #1
 80067b0:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	2200      	movs	r2, #0
 80067b8:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 80067bc:	6878      	ldr	r0, [r7, #4]
 80067be:	f00e fcb9 	bl	8015134 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	f003 0308 	and.w	r3, r3, #8
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d01b      	beq.n	8006804 <HAL_LTDC_IRQHandler+0x140>
 80067cc:	68bb      	ldr	r3, [r7, #8]
 80067ce:	f003 0308 	and.w	r3, r3, #8
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d016      	beq.n	8006804 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	f022 0208 	bic.w	r2, r2, #8
 80067e4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	2208      	movs	r2, #8
 80067ec:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	2201      	movs	r2, #1
 80067f2:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	2200      	movs	r2, #0
 80067fa:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 80067fe:	6878      	ldr	r0, [r7, #4]
 8006800:	f000 f80e 	bl	8006820 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 8006804:	bf00      	nop
 8006806:	3710      	adds	r7, #16
 8006808:	46bd      	mov	sp, r7
 800680a:	bd80      	pop	{r7, pc}

0800680c <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 800680c:	b480      	push	{r7}
 800680e:	b083      	sub	sp, #12
 8006810:	af00      	add	r7, sp, #0
 8006812:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 8006814:	bf00      	nop
 8006816:	370c      	adds	r7, #12
 8006818:	46bd      	mov	sp, r7
 800681a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800681e:	4770      	bx	lr

08006820 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8006820:	b480      	push	{r7}
 8006822:	b083      	sub	sp, #12
 8006824:	af00      	add	r7, sp, #0
 8006826:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 8006828:	bf00      	nop
 800682a:	370c      	adds	r7, #12
 800682c:	46bd      	mov	sp, r7
 800682e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006832:	4770      	bx	lr

08006834 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8006834:	b5b0      	push	{r4, r5, r7, lr}
 8006836:	b084      	sub	sp, #16
 8006838:	af00      	add	r7, sp, #0
 800683a:	60f8      	str	r0, [r7, #12]
 800683c:	60b9      	str	r1, [r7, #8]
 800683e:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8006846:	2b01      	cmp	r3, #1
 8006848:	d101      	bne.n	800684e <HAL_LTDC_ConfigLayer+0x1a>
 800684a:	2302      	movs	r3, #2
 800684c:	e02c      	b.n	80068a8 <HAL_LTDC_ConfigLayer+0x74>
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	2201      	movs	r2, #1
 8006852:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	2202      	movs	r2, #2
 800685a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800685e:	68fa      	ldr	r2, [r7, #12]
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	2134      	movs	r1, #52	; 0x34
 8006864:	fb01 f303 	mul.w	r3, r1, r3
 8006868:	4413      	add	r3, r2
 800686a:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800686e:	68bb      	ldr	r3, [r7, #8]
 8006870:	4614      	mov	r4, r2
 8006872:	461d      	mov	r5, r3
 8006874:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006876:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006878:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800687a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800687c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800687e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006880:	682b      	ldr	r3, [r5, #0]
 8006882:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8006884:	687a      	ldr	r2, [r7, #4]
 8006886:	68b9      	ldr	r1, [r7, #8]
 8006888:	68f8      	ldr	r0, [r7, #12]
 800688a:	f000 f849 	bl	8006920 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	2201      	movs	r2, #1
 8006894:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	2201      	movs	r2, #1
 800689a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	2200      	movs	r2, #0
 80068a2:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 80068a6:	2300      	movs	r3, #0
}
 80068a8:	4618      	mov	r0, r3
 80068aa:	3710      	adds	r7, #16
 80068ac:	46bd      	mov	sp, r7
 80068ae:	bdb0      	pop	{r4, r5, r7, pc}

080068b0 <HAL_LTDC_ProgramLineEvent>:
  * @param  Line    Line Interrupt Position.
  * @note   User application may resort to HAL_LTDC_LineEventCallback() at line interrupt generation.
  * @retval  HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ProgramLineEvent(LTDC_HandleTypeDef *hltdc, uint32_t Line)
{
 80068b0:	b480      	push	{r7}
 80068b2:	b083      	sub	sp, #12
 80068b4:	af00      	add	r7, sp, #0
 80068b6:	6078      	str	r0, [r7, #4]
 80068b8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_LTDC_LIPOS(Line));

  /* Process locked */
  __HAL_LOCK(hltdc);
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 80068c0:	2b01      	cmp	r3, #1
 80068c2:	d101      	bne.n	80068c8 <HAL_LTDC_ProgramLineEvent+0x18>
 80068c4:	2302      	movs	r3, #2
 80068c6:	e023      	b.n	8006910 <HAL_LTDC_ProgramLineEvent+0x60>
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	2201      	movs	r2, #1
 80068cc:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	2202      	movs	r2, #2
 80068d4:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Disable the Line interrupt */
  __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	f022 0201 	bic.w	r2, r2, #1
 80068e6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the Line Interrupt position */
  LTDC->LIPCR = (uint32_t)Line;
 80068e8:	4a0c      	ldr	r2, [pc, #48]	; (800691c <HAL_LTDC_ProgramLineEvent+0x6c>)
 80068ea:	683b      	ldr	r3, [r7, #0]
 80068ec:	6413      	str	r3, [r2, #64]	; 0x40

  /* Enable the Line interrupt */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_LI);
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	f042 0201 	orr.w	r2, r2, #1
 80068fc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	2201      	movs	r2, #1
 8006902:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	2200      	movs	r2, #0
 800690a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 800690e:	2300      	movs	r3, #0
}
 8006910:	4618      	mov	r0, r3
 8006912:	370c      	adds	r7, #12
 8006914:	46bd      	mov	sp, r7
 8006916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800691a:	4770      	bx	lr
 800691c:	50001000 	.word	0x50001000

08006920 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8006920:	b480      	push	{r7}
 8006922:	b089      	sub	sp, #36	; 0x24
 8006924:	af00      	add	r7, sp, #0
 8006926:	60f8      	str	r0, [r7, #12]
 8006928:	60b9      	str	r1, [r7, #8]
 800692a:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800692c:	68bb      	ldr	r3, [r7, #8]
 800692e:	685a      	ldr	r2, [r3, #4]
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	68db      	ldr	r3, [r3, #12]
 8006936:	0c1b      	lsrs	r3, r3, #16
 8006938:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800693c:	4413      	add	r3, r2
 800693e:	041b      	lsls	r3, r3, #16
 8006940:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	461a      	mov	r2, r3
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	01db      	lsls	r3, r3, #7
 800694c:	4413      	add	r3, r2
 800694e:	3384      	adds	r3, #132	; 0x84
 8006950:	685b      	ldr	r3, [r3, #4]
 8006952:	68fa      	ldr	r2, [r7, #12]
 8006954:	6812      	ldr	r2, [r2, #0]
 8006956:	4611      	mov	r1, r2
 8006958:	687a      	ldr	r2, [r7, #4]
 800695a:	01d2      	lsls	r2, r2, #7
 800695c:	440a      	add	r2, r1
 800695e:	3284      	adds	r2, #132	; 0x84
 8006960:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8006964:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8006966:	68bb      	ldr	r3, [r7, #8]
 8006968:	681a      	ldr	r2, [r3, #0]
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	68db      	ldr	r3, [r3, #12]
 8006970:	0c1b      	lsrs	r3, r3, #16
 8006972:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006976:	4413      	add	r3, r2
 8006978:	1c5a      	adds	r2, r3, #1
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	4619      	mov	r1, r3
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	01db      	lsls	r3, r3, #7
 8006984:	440b      	add	r3, r1
 8006986:	3384      	adds	r3, #132	; 0x84
 8006988:	4619      	mov	r1, r3
 800698a:	69fb      	ldr	r3, [r7, #28]
 800698c:	4313      	orrs	r3, r2
 800698e:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8006990:	68bb      	ldr	r3, [r7, #8]
 8006992:	68da      	ldr	r2, [r3, #12]
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	68db      	ldr	r3, [r3, #12]
 800699a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800699e:	4413      	add	r3, r2
 80069a0:	041b      	lsls	r3, r3, #16
 80069a2:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	461a      	mov	r2, r3
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	01db      	lsls	r3, r3, #7
 80069ae:	4413      	add	r3, r2
 80069b0:	3384      	adds	r3, #132	; 0x84
 80069b2:	689b      	ldr	r3, [r3, #8]
 80069b4:	68fa      	ldr	r2, [r7, #12]
 80069b6:	6812      	ldr	r2, [r2, #0]
 80069b8:	4611      	mov	r1, r2
 80069ba:	687a      	ldr	r2, [r7, #4]
 80069bc:	01d2      	lsls	r2, r2, #7
 80069be:	440a      	add	r2, r1
 80069c0:	3284      	adds	r2, #132	; 0x84
 80069c2:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80069c6:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 80069c8:	68bb      	ldr	r3, [r7, #8]
 80069ca:	689a      	ldr	r2, [r3, #8]
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	68db      	ldr	r3, [r3, #12]
 80069d2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80069d6:	4413      	add	r3, r2
 80069d8:	1c5a      	adds	r2, r3, #1
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	4619      	mov	r1, r3
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	01db      	lsls	r3, r3, #7
 80069e4:	440b      	add	r3, r1
 80069e6:	3384      	adds	r3, #132	; 0x84
 80069e8:	4619      	mov	r1, r3
 80069ea:	69fb      	ldr	r3, [r7, #28]
 80069ec:	4313      	orrs	r3, r2
 80069ee:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	461a      	mov	r2, r3
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	01db      	lsls	r3, r3, #7
 80069fa:	4413      	add	r3, r2
 80069fc:	3384      	adds	r3, #132	; 0x84
 80069fe:	691b      	ldr	r3, [r3, #16]
 8006a00:	68fa      	ldr	r2, [r7, #12]
 8006a02:	6812      	ldr	r2, [r2, #0]
 8006a04:	4611      	mov	r1, r2
 8006a06:	687a      	ldr	r2, [r7, #4]
 8006a08:	01d2      	lsls	r2, r2, #7
 8006a0a:	440a      	add	r2, r1
 8006a0c:	3284      	adds	r2, #132	; 0x84
 8006a0e:	f023 0307 	bic.w	r3, r3, #7
 8006a12:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	461a      	mov	r2, r3
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	01db      	lsls	r3, r3, #7
 8006a1e:	4413      	add	r3, r2
 8006a20:	3384      	adds	r3, #132	; 0x84
 8006a22:	461a      	mov	r2, r3
 8006a24:	68bb      	ldr	r3, [r7, #8]
 8006a26:	691b      	ldr	r3, [r3, #16]
 8006a28:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8006a2a:	68bb      	ldr	r3, [r7, #8]
 8006a2c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8006a30:	021b      	lsls	r3, r3, #8
 8006a32:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8006a34:	68bb      	ldr	r3, [r7, #8]
 8006a36:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8006a3a:	041b      	lsls	r3, r3, #16
 8006a3c:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8006a3e:	68bb      	ldr	r3, [r7, #8]
 8006a40:	699b      	ldr	r3, [r3, #24]
 8006a42:	061b      	lsls	r3, r3, #24
 8006a44:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	461a      	mov	r2, r3
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	01db      	lsls	r3, r3, #7
 8006a50:	4413      	add	r3, r2
 8006a52:	3384      	adds	r3, #132	; 0x84
 8006a54:	699b      	ldr	r3, [r3, #24]
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	461a      	mov	r2, r3
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	01db      	lsls	r3, r3, #7
 8006a60:	4413      	add	r3, r2
 8006a62:	3384      	adds	r3, #132	; 0x84
 8006a64:	461a      	mov	r2, r3
 8006a66:	2300      	movs	r3, #0
 8006a68:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8006a6a:	68bb      	ldr	r3, [r7, #8]
 8006a6c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006a70:	461a      	mov	r2, r3
 8006a72:	69fb      	ldr	r3, [r7, #28]
 8006a74:	431a      	orrs	r2, r3
 8006a76:	69bb      	ldr	r3, [r7, #24]
 8006a78:	431a      	orrs	r2, r3
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	4619      	mov	r1, r3
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	01db      	lsls	r3, r3, #7
 8006a84:	440b      	add	r3, r1
 8006a86:	3384      	adds	r3, #132	; 0x84
 8006a88:	4619      	mov	r1, r3
 8006a8a:	697b      	ldr	r3, [r7, #20]
 8006a8c:	4313      	orrs	r3, r2
 8006a8e:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	461a      	mov	r2, r3
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	01db      	lsls	r3, r3, #7
 8006a9a:	4413      	add	r3, r2
 8006a9c:	3384      	adds	r3, #132	; 0x84
 8006a9e:	695b      	ldr	r3, [r3, #20]
 8006aa0:	68fa      	ldr	r2, [r7, #12]
 8006aa2:	6812      	ldr	r2, [r2, #0]
 8006aa4:	4611      	mov	r1, r2
 8006aa6:	687a      	ldr	r2, [r7, #4]
 8006aa8:	01d2      	lsls	r2, r2, #7
 8006aaa:	440a      	add	r2, r1
 8006aac:	3284      	adds	r2, #132	; 0x84
 8006aae:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8006ab2:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	461a      	mov	r2, r3
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	01db      	lsls	r3, r3, #7
 8006abe:	4413      	add	r3, r2
 8006ac0:	3384      	adds	r3, #132	; 0x84
 8006ac2:	461a      	mov	r2, r3
 8006ac4:	68bb      	ldr	r3, [r7, #8]
 8006ac6:	695b      	ldr	r3, [r3, #20]
 8006ac8:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	461a      	mov	r2, r3
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	01db      	lsls	r3, r3, #7
 8006ad4:	4413      	add	r3, r2
 8006ad6:	3384      	adds	r3, #132	; 0x84
 8006ad8:	69da      	ldr	r2, [r3, #28]
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	4619      	mov	r1, r3
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	01db      	lsls	r3, r3, #7
 8006ae4:	440b      	add	r3, r1
 8006ae6:	3384      	adds	r3, #132	; 0x84
 8006ae8:	4619      	mov	r1, r3
 8006aea:	4b58      	ldr	r3, [pc, #352]	; (8006c4c <LTDC_SetConfig+0x32c>)
 8006aec:	4013      	ands	r3, r2
 8006aee:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8006af0:	68bb      	ldr	r3, [r7, #8]
 8006af2:	69da      	ldr	r2, [r3, #28]
 8006af4:	68bb      	ldr	r3, [r7, #8]
 8006af6:	6a1b      	ldr	r3, [r3, #32]
 8006af8:	68f9      	ldr	r1, [r7, #12]
 8006afa:	6809      	ldr	r1, [r1, #0]
 8006afc:	4608      	mov	r0, r1
 8006afe:	6879      	ldr	r1, [r7, #4]
 8006b00:	01c9      	lsls	r1, r1, #7
 8006b02:	4401      	add	r1, r0
 8006b04:	3184      	adds	r1, #132	; 0x84
 8006b06:	4313      	orrs	r3, r2
 8006b08:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	461a      	mov	r2, r3
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	01db      	lsls	r3, r3, #7
 8006b14:	4413      	add	r3, r2
 8006b16:	3384      	adds	r3, #132	; 0x84
 8006b18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	461a      	mov	r2, r3
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	01db      	lsls	r3, r3, #7
 8006b24:	4413      	add	r3, r2
 8006b26:	3384      	adds	r3, #132	; 0x84
 8006b28:	461a      	mov	r2, r3
 8006b2a:	2300      	movs	r3, #0
 8006b2c:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	461a      	mov	r2, r3
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	01db      	lsls	r3, r3, #7
 8006b38:	4413      	add	r3, r2
 8006b3a:	3384      	adds	r3, #132	; 0x84
 8006b3c:	461a      	mov	r2, r3
 8006b3e:	68bb      	ldr	r3, [r7, #8]
 8006b40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b42:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8006b44:	68bb      	ldr	r3, [r7, #8]
 8006b46:	691b      	ldr	r3, [r3, #16]
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d102      	bne.n	8006b52 <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 8006b4c:	2304      	movs	r3, #4
 8006b4e:	61fb      	str	r3, [r7, #28]
 8006b50:	e01b      	b.n	8006b8a <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8006b52:	68bb      	ldr	r3, [r7, #8]
 8006b54:	691b      	ldr	r3, [r3, #16]
 8006b56:	2b01      	cmp	r3, #1
 8006b58:	d102      	bne.n	8006b60 <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 8006b5a:	2303      	movs	r3, #3
 8006b5c:	61fb      	str	r3, [r7, #28]
 8006b5e:	e014      	b.n	8006b8a <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8006b60:	68bb      	ldr	r3, [r7, #8]
 8006b62:	691b      	ldr	r3, [r3, #16]
 8006b64:	2b04      	cmp	r3, #4
 8006b66:	d00b      	beq.n	8006b80 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8006b68:	68bb      	ldr	r3, [r7, #8]
 8006b6a:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8006b6c:	2b02      	cmp	r3, #2
 8006b6e:	d007      	beq.n	8006b80 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8006b70:	68bb      	ldr	r3, [r7, #8]
 8006b72:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8006b74:	2b03      	cmp	r3, #3
 8006b76:	d003      	beq.n	8006b80 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8006b78:	68bb      	ldr	r3, [r7, #8]
 8006b7a:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8006b7c:	2b07      	cmp	r3, #7
 8006b7e:	d102      	bne.n	8006b86 <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 8006b80:	2302      	movs	r3, #2
 8006b82:	61fb      	str	r3, [r7, #28]
 8006b84:	e001      	b.n	8006b8a <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 8006b86:	2301      	movs	r3, #1
 8006b88:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	461a      	mov	r2, r3
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	01db      	lsls	r3, r3, #7
 8006b94:	4413      	add	r3, r2
 8006b96:	3384      	adds	r3, #132	; 0x84
 8006b98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b9a:	68fa      	ldr	r2, [r7, #12]
 8006b9c:	6812      	ldr	r2, [r2, #0]
 8006b9e:	4611      	mov	r1, r2
 8006ba0:	687a      	ldr	r2, [r7, #4]
 8006ba2:	01d2      	lsls	r2, r2, #7
 8006ba4:	440a      	add	r2, r1
 8006ba6:	3284      	adds	r2, #132	; 0x84
 8006ba8:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8006bac:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 8006bae:	68bb      	ldr	r3, [r7, #8]
 8006bb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006bb2:	69fa      	ldr	r2, [r7, #28]
 8006bb4:	fb02 f303 	mul.w	r3, r2, r3
 8006bb8:	041a      	lsls	r2, r3, #16
 8006bba:	68bb      	ldr	r3, [r7, #8]
 8006bbc:	6859      	ldr	r1, [r3, #4]
 8006bbe:	68bb      	ldr	r3, [r7, #8]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	1acb      	subs	r3, r1, r3
 8006bc4:	69f9      	ldr	r1, [r7, #28]
 8006bc6:	fb01 f303 	mul.w	r3, r1, r3
 8006bca:	3307      	adds	r3, #7
 8006bcc:	68f9      	ldr	r1, [r7, #12]
 8006bce:	6809      	ldr	r1, [r1, #0]
 8006bd0:	4608      	mov	r0, r1
 8006bd2:	6879      	ldr	r1, [r7, #4]
 8006bd4:	01c9      	lsls	r1, r1, #7
 8006bd6:	4401      	add	r1, r0
 8006bd8:	3184      	adds	r1, #132	; 0x84
 8006bda:	4313      	orrs	r3, r2
 8006bdc:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	461a      	mov	r2, r3
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	01db      	lsls	r3, r3, #7
 8006be8:	4413      	add	r3, r2
 8006bea:	3384      	adds	r3, #132	; 0x84
 8006bec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	4619      	mov	r1, r3
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	01db      	lsls	r3, r3, #7
 8006bf8:	440b      	add	r3, r1
 8006bfa:	3384      	adds	r3, #132	; 0x84
 8006bfc:	4619      	mov	r1, r3
 8006bfe:	4b14      	ldr	r3, [pc, #80]	; (8006c50 <LTDC_SetConfig+0x330>)
 8006c00:	4013      	ands	r3, r2
 8006c02:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	461a      	mov	r2, r3
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	01db      	lsls	r3, r3, #7
 8006c0e:	4413      	add	r3, r2
 8006c10:	3384      	adds	r3, #132	; 0x84
 8006c12:	461a      	mov	r2, r3
 8006c14:	68bb      	ldr	r3, [r7, #8]
 8006c16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c18:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	461a      	mov	r2, r3
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	01db      	lsls	r3, r3, #7
 8006c24:	4413      	add	r3, r2
 8006c26:	3384      	adds	r3, #132	; 0x84
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	68fa      	ldr	r2, [r7, #12]
 8006c2c:	6812      	ldr	r2, [r2, #0]
 8006c2e:	4611      	mov	r1, r2
 8006c30:	687a      	ldr	r2, [r7, #4]
 8006c32:	01d2      	lsls	r2, r2, #7
 8006c34:	440a      	add	r2, r1
 8006c36:	3284      	adds	r2, #132	; 0x84
 8006c38:	f043 0301 	orr.w	r3, r3, #1
 8006c3c:	6013      	str	r3, [r2, #0]
}
 8006c3e:	bf00      	nop
 8006c40:	3724      	adds	r7, #36	; 0x24
 8006c42:	46bd      	mov	sp, r7
 8006c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c48:	4770      	bx	lr
 8006c4a:	bf00      	nop
 8006c4c:	fffff8f8 	.word	0xfffff8f8
 8006c50:	fffff800 	.word	0xfffff800

08006c54 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8006c54:	b580      	push	{r7, lr}
 8006c56:	b084      	sub	sp, #16
 8006c58:	af00      	add	r7, sp, #0
 8006c5a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8006c5c:	4b19      	ldr	r3, [pc, #100]	; (8006cc4 <HAL_PWREx_ConfigSupply+0x70>)
 8006c5e:	68db      	ldr	r3, [r3, #12]
 8006c60:	f003 0304 	and.w	r3, r3, #4
 8006c64:	2b04      	cmp	r3, #4
 8006c66:	d00a      	beq.n	8006c7e <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8006c68:	4b16      	ldr	r3, [pc, #88]	; (8006cc4 <HAL_PWREx_ConfigSupply+0x70>)
 8006c6a:	68db      	ldr	r3, [r3, #12]
 8006c6c:	f003 0307 	and.w	r3, r3, #7
 8006c70:	687a      	ldr	r2, [r7, #4]
 8006c72:	429a      	cmp	r2, r3
 8006c74:	d001      	beq.n	8006c7a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8006c76:	2301      	movs	r3, #1
 8006c78:	e01f      	b.n	8006cba <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8006c7a:	2300      	movs	r3, #0
 8006c7c:	e01d      	b.n	8006cba <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8006c7e:	4b11      	ldr	r3, [pc, #68]	; (8006cc4 <HAL_PWREx_ConfigSupply+0x70>)
 8006c80:	68db      	ldr	r3, [r3, #12]
 8006c82:	f023 0207 	bic.w	r2, r3, #7
 8006c86:	490f      	ldr	r1, [pc, #60]	; (8006cc4 <HAL_PWREx_ConfigSupply+0x70>)
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	4313      	orrs	r3, r2
 8006c8c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8006c8e:	f7fd fd33 	bl	80046f8 <HAL_GetTick>
 8006c92:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8006c94:	e009      	b.n	8006caa <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8006c96:	f7fd fd2f 	bl	80046f8 <HAL_GetTick>
 8006c9a:	4602      	mov	r2, r0
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	1ad3      	subs	r3, r2, r3
 8006ca0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006ca4:	d901      	bls.n	8006caa <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8006ca6:	2301      	movs	r3, #1
 8006ca8:	e007      	b.n	8006cba <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8006caa:	4b06      	ldr	r3, [pc, #24]	; (8006cc4 <HAL_PWREx_ConfigSupply+0x70>)
 8006cac:	685b      	ldr	r3, [r3, #4]
 8006cae:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006cb2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006cb6:	d1ee      	bne.n	8006c96 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8006cb8:	2300      	movs	r3, #0
}
 8006cba:	4618      	mov	r0, r3
 8006cbc:	3710      	adds	r7, #16
 8006cbe:	46bd      	mov	sp, r7
 8006cc0:	bd80      	pop	{r7, pc}
 8006cc2:	bf00      	nop
 8006cc4:	58024800 	.word	0x58024800

08006cc8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006cc8:	b580      	push	{r7, lr}
 8006cca:	b08c      	sub	sp, #48	; 0x30
 8006ccc:	af00      	add	r7, sp, #0
 8006cce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d102      	bne.n	8006cdc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8006cd6:	2301      	movs	r3, #1
 8006cd8:	f000 bc1d 	b.w	8007516 <HAL_RCC_OscConfig+0x84e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	f003 0301 	and.w	r3, r3, #1
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	f000 8087 	beq.w	8006df8 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006cea:	4b99      	ldr	r3, [pc, #612]	; (8006f50 <HAL_RCC_OscConfig+0x288>)
 8006cec:	691b      	ldr	r3, [r3, #16]
 8006cee:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006cf2:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006cf4:	4b96      	ldr	r3, [pc, #600]	; (8006f50 <HAL_RCC_OscConfig+0x288>)
 8006cf6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006cf8:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8006cfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cfc:	2b10      	cmp	r3, #16
 8006cfe:	d007      	beq.n	8006d10 <HAL_RCC_OscConfig+0x48>
 8006d00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d02:	2b18      	cmp	r3, #24
 8006d04:	d110      	bne.n	8006d28 <HAL_RCC_OscConfig+0x60>
 8006d06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d08:	f003 0303 	and.w	r3, r3, #3
 8006d0c:	2b02      	cmp	r3, #2
 8006d0e:	d10b      	bne.n	8006d28 <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006d10:	4b8f      	ldr	r3, [pc, #572]	; (8006f50 <HAL_RCC_OscConfig+0x288>)
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d06c      	beq.n	8006df6 <HAL_RCC_OscConfig+0x12e>
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	685b      	ldr	r3, [r3, #4]
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d168      	bne.n	8006df6 <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 8006d24:	2301      	movs	r3, #1
 8006d26:	e3f6      	b.n	8007516 <HAL_RCC_OscConfig+0x84e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	685b      	ldr	r3, [r3, #4]
 8006d2c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006d30:	d106      	bne.n	8006d40 <HAL_RCC_OscConfig+0x78>
 8006d32:	4b87      	ldr	r3, [pc, #540]	; (8006f50 <HAL_RCC_OscConfig+0x288>)
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	4a86      	ldr	r2, [pc, #536]	; (8006f50 <HAL_RCC_OscConfig+0x288>)
 8006d38:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006d3c:	6013      	str	r3, [r2, #0]
 8006d3e:	e02e      	b.n	8006d9e <HAL_RCC_OscConfig+0xd6>
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	685b      	ldr	r3, [r3, #4]
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d10c      	bne.n	8006d62 <HAL_RCC_OscConfig+0x9a>
 8006d48:	4b81      	ldr	r3, [pc, #516]	; (8006f50 <HAL_RCC_OscConfig+0x288>)
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	4a80      	ldr	r2, [pc, #512]	; (8006f50 <HAL_RCC_OscConfig+0x288>)
 8006d4e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006d52:	6013      	str	r3, [r2, #0]
 8006d54:	4b7e      	ldr	r3, [pc, #504]	; (8006f50 <HAL_RCC_OscConfig+0x288>)
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	4a7d      	ldr	r2, [pc, #500]	; (8006f50 <HAL_RCC_OscConfig+0x288>)
 8006d5a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006d5e:	6013      	str	r3, [r2, #0]
 8006d60:	e01d      	b.n	8006d9e <HAL_RCC_OscConfig+0xd6>
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	685b      	ldr	r3, [r3, #4]
 8006d66:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006d6a:	d10c      	bne.n	8006d86 <HAL_RCC_OscConfig+0xbe>
 8006d6c:	4b78      	ldr	r3, [pc, #480]	; (8006f50 <HAL_RCC_OscConfig+0x288>)
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	4a77      	ldr	r2, [pc, #476]	; (8006f50 <HAL_RCC_OscConfig+0x288>)
 8006d72:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006d76:	6013      	str	r3, [r2, #0]
 8006d78:	4b75      	ldr	r3, [pc, #468]	; (8006f50 <HAL_RCC_OscConfig+0x288>)
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	4a74      	ldr	r2, [pc, #464]	; (8006f50 <HAL_RCC_OscConfig+0x288>)
 8006d7e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006d82:	6013      	str	r3, [r2, #0]
 8006d84:	e00b      	b.n	8006d9e <HAL_RCC_OscConfig+0xd6>
 8006d86:	4b72      	ldr	r3, [pc, #456]	; (8006f50 <HAL_RCC_OscConfig+0x288>)
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	4a71      	ldr	r2, [pc, #452]	; (8006f50 <HAL_RCC_OscConfig+0x288>)
 8006d8c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006d90:	6013      	str	r3, [r2, #0]
 8006d92:	4b6f      	ldr	r3, [pc, #444]	; (8006f50 <HAL_RCC_OscConfig+0x288>)
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	4a6e      	ldr	r2, [pc, #440]	; (8006f50 <HAL_RCC_OscConfig+0x288>)
 8006d98:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006d9c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	685b      	ldr	r3, [r3, #4]
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d013      	beq.n	8006dce <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006da6:	f7fd fca7 	bl	80046f8 <HAL_GetTick>
 8006daa:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006dac:	e008      	b.n	8006dc0 <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006dae:	f7fd fca3 	bl	80046f8 <HAL_GetTick>
 8006db2:	4602      	mov	r2, r0
 8006db4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006db6:	1ad3      	subs	r3, r2, r3
 8006db8:	2b64      	cmp	r3, #100	; 0x64
 8006dba:	d901      	bls.n	8006dc0 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8006dbc:	2303      	movs	r3, #3
 8006dbe:	e3aa      	b.n	8007516 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006dc0:	4b63      	ldr	r3, [pc, #396]	; (8006f50 <HAL_RCC_OscConfig+0x288>)
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d0f0      	beq.n	8006dae <HAL_RCC_OscConfig+0xe6>
 8006dcc:	e014      	b.n	8006df8 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006dce:	f7fd fc93 	bl	80046f8 <HAL_GetTick>
 8006dd2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006dd4:	e008      	b.n	8006de8 <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006dd6:	f7fd fc8f 	bl	80046f8 <HAL_GetTick>
 8006dda:	4602      	mov	r2, r0
 8006ddc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dde:	1ad3      	subs	r3, r2, r3
 8006de0:	2b64      	cmp	r3, #100	; 0x64
 8006de2:	d901      	bls.n	8006de8 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 8006de4:	2303      	movs	r3, #3
 8006de6:	e396      	b.n	8007516 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006de8:	4b59      	ldr	r3, [pc, #356]	; (8006f50 <HAL_RCC_OscConfig+0x288>)
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d1f0      	bne.n	8006dd6 <HAL_RCC_OscConfig+0x10e>
 8006df4:	e000      	b.n	8006df8 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006df6:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	f003 0302 	and.w	r3, r3, #2
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	f000 80cb 	beq.w	8006f9c <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006e06:	4b52      	ldr	r3, [pc, #328]	; (8006f50 <HAL_RCC_OscConfig+0x288>)
 8006e08:	691b      	ldr	r3, [r3, #16]
 8006e0a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006e0e:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006e10:	4b4f      	ldr	r3, [pc, #316]	; (8006f50 <HAL_RCC_OscConfig+0x288>)
 8006e12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e14:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8006e16:	6a3b      	ldr	r3, [r7, #32]
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d007      	beq.n	8006e2c <HAL_RCC_OscConfig+0x164>
 8006e1c:	6a3b      	ldr	r3, [r7, #32]
 8006e1e:	2b18      	cmp	r3, #24
 8006e20:	d156      	bne.n	8006ed0 <HAL_RCC_OscConfig+0x208>
 8006e22:	69fb      	ldr	r3, [r7, #28]
 8006e24:	f003 0303 	and.w	r3, r3, #3
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d151      	bne.n	8006ed0 <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006e2c:	4b48      	ldr	r3, [pc, #288]	; (8006f50 <HAL_RCC_OscConfig+0x288>)
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	f003 0304 	and.w	r3, r3, #4
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d005      	beq.n	8006e44 <HAL_RCC_OscConfig+0x17c>
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	68db      	ldr	r3, [r3, #12]
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d101      	bne.n	8006e44 <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 8006e40:	2301      	movs	r3, #1
 8006e42:	e368      	b.n	8007516 <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8006e44:	4b42      	ldr	r3, [pc, #264]	; (8006f50 <HAL_RCC_OscConfig+0x288>)
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	f023 0219 	bic.w	r2, r3, #25
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	68db      	ldr	r3, [r3, #12]
 8006e50:	493f      	ldr	r1, [pc, #252]	; (8006f50 <HAL_RCC_OscConfig+0x288>)
 8006e52:	4313      	orrs	r3, r2
 8006e54:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006e56:	f7fd fc4f 	bl	80046f8 <HAL_GetTick>
 8006e5a:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006e5c:	e008      	b.n	8006e70 <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006e5e:	f7fd fc4b 	bl	80046f8 <HAL_GetTick>
 8006e62:	4602      	mov	r2, r0
 8006e64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e66:	1ad3      	subs	r3, r2, r3
 8006e68:	2b02      	cmp	r3, #2
 8006e6a:	d901      	bls.n	8006e70 <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 8006e6c:	2303      	movs	r3, #3
 8006e6e:	e352      	b.n	8007516 <HAL_RCC_OscConfig+0x84e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006e70:	4b37      	ldr	r3, [pc, #220]	; (8006f50 <HAL_RCC_OscConfig+0x288>)
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	f003 0304 	and.w	r3, r3, #4
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d0f0      	beq.n	8006e5e <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006e7c:	f7fd fc6c 	bl	8004758 <HAL_GetREVID>
 8006e80:	4603      	mov	r3, r0
 8006e82:	f241 0203 	movw	r2, #4099	; 0x1003
 8006e86:	4293      	cmp	r3, r2
 8006e88:	d817      	bhi.n	8006eba <HAL_RCC_OscConfig+0x1f2>
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	691b      	ldr	r3, [r3, #16]
 8006e8e:	2b40      	cmp	r3, #64	; 0x40
 8006e90:	d108      	bne.n	8006ea4 <HAL_RCC_OscConfig+0x1dc>
 8006e92:	4b2f      	ldr	r3, [pc, #188]	; (8006f50 <HAL_RCC_OscConfig+0x288>)
 8006e94:	685b      	ldr	r3, [r3, #4]
 8006e96:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8006e9a:	4a2d      	ldr	r2, [pc, #180]	; (8006f50 <HAL_RCC_OscConfig+0x288>)
 8006e9c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006ea0:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006ea2:	e07b      	b.n	8006f9c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006ea4:	4b2a      	ldr	r3, [pc, #168]	; (8006f50 <HAL_RCC_OscConfig+0x288>)
 8006ea6:	685b      	ldr	r3, [r3, #4]
 8006ea8:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	691b      	ldr	r3, [r3, #16]
 8006eb0:	031b      	lsls	r3, r3, #12
 8006eb2:	4927      	ldr	r1, [pc, #156]	; (8006f50 <HAL_RCC_OscConfig+0x288>)
 8006eb4:	4313      	orrs	r3, r2
 8006eb6:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006eb8:	e070      	b.n	8006f9c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006eba:	4b25      	ldr	r3, [pc, #148]	; (8006f50 <HAL_RCC_OscConfig+0x288>)
 8006ebc:	685b      	ldr	r3, [r3, #4]
 8006ebe:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	691b      	ldr	r3, [r3, #16]
 8006ec6:	061b      	lsls	r3, r3, #24
 8006ec8:	4921      	ldr	r1, [pc, #132]	; (8006f50 <HAL_RCC_OscConfig+0x288>)
 8006eca:	4313      	orrs	r3, r2
 8006ecc:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006ece:	e065      	b.n	8006f9c <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	68db      	ldr	r3, [r3, #12]
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d048      	beq.n	8006f6a <HAL_RCC_OscConfig+0x2a2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8006ed8:	4b1d      	ldr	r3, [pc, #116]	; (8006f50 <HAL_RCC_OscConfig+0x288>)
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	f023 0219 	bic.w	r2, r3, #25
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	68db      	ldr	r3, [r3, #12]
 8006ee4:	491a      	ldr	r1, [pc, #104]	; (8006f50 <HAL_RCC_OscConfig+0x288>)
 8006ee6:	4313      	orrs	r3, r2
 8006ee8:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006eea:	f7fd fc05 	bl	80046f8 <HAL_GetTick>
 8006eee:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006ef0:	e008      	b.n	8006f04 <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006ef2:	f7fd fc01 	bl	80046f8 <HAL_GetTick>
 8006ef6:	4602      	mov	r2, r0
 8006ef8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006efa:	1ad3      	subs	r3, r2, r3
 8006efc:	2b02      	cmp	r3, #2
 8006efe:	d901      	bls.n	8006f04 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 8006f00:	2303      	movs	r3, #3
 8006f02:	e308      	b.n	8007516 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006f04:	4b12      	ldr	r3, [pc, #72]	; (8006f50 <HAL_RCC_OscConfig+0x288>)
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	f003 0304 	and.w	r3, r3, #4
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d0f0      	beq.n	8006ef2 <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006f10:	f7fd fc22 	bl	8004758 <HAL_GetREVID>
 8006f14:	4603      	mov	r3, r0
 8006f16:	f241 0203 	movw	r2, #4099	; 0x1003
 8006f1a:	4293      	cmp	r3, r2
 8006f1c:	d81a      	bhi.n	8006f54 <HAL_RCC_OscConfig+0x28c>
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	691b      	ldr	r3, [r3, #16]
 8006f22:	2b40      	cmp	r3, #64	; 0x40
 8006f24:	d108      	bne.n	8006f38 <HAL_RCC_OscConfig+0x270>
 8006f26:	4b0a      	ldr	r3, [pc, #40]	; (8006f50 <HAL_RCC_OscConfig+0x288>)
 8006f28:	685b      	ldr	r3, [r3, #4]
 8006f2a:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8006f2e:	4a08      	ldr	r2, [pc, #32]	; (8006f50 <HAL_RCC_OscConfig+0x288>)
 8006f30:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006f34:	6053      	str	r3, [r2, #4]
 8006f36:	e031      	b.n	8006f9c <HAL_RCC_OscConfig+0x2d4>
 8006f38:	4b05      	ldr	r3, [pc, #20]	; (8006f50 <HAL_RCC_OscConfig+0x288>)
 8006f3a:	685b      	ldr	r3, [r3, #4]
 8006f3c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	691b      	ldr	r3, [r3, #16]
 8006f44:	031b      	lsls	r3, r3, #12
 8006f46:	4902      	ldr	r1, [pc, #8]	; (8006f50 <HAL_RCC_OscConfig+0x288>)
 8006f48:	4313      	orrs	r3, r2
 8006f4a:	604b      	str	r3, [r1, #4]
 8006f4c:	e026      	b.n	8006f9c <HAL_RCC_OscConfig+0x2d4>
 8006f4e:	bf00      	nop
 8006f50:	58024400 	.word	0x58024400
 8006f54:	4b9a      	ldr	r3, [pc, #616]	; (80071c0 <HAL_RCC_OscConfig+0x4f8>)
 8006f56:	685b      	ldr	r3, [r3, #4]
 8006f58:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	691b      	ldr	r3, [r3, #16]
 8006f60:	061b      	lsls	r3, r3, #24
 8006f62:	4997      	ldr	r1, [pc, #604]	; (80071c0 <HAL_RCC_OscConfig+0x4f8>)
 8006f64:	4313      	orrs	r3, r2
 8006f66:	604b      	str	r3, [r1, #4]
 8006f68:	e018      	b.n	8006f9c <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006f6a:	4b95      	ldr	r3, [pc, #596]	; (80071c0 <HAL_RCC_OscConfig+0x4f8>)
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	4a94      	ldr	r2, [pc, #592]	; (80071c0 <HAL_RCC_OscConfig+0x4f8>)
 8006f70:	f023 0301 	bic.w	r3, r3, #1
 8006f74:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006f76:	f7fd fbbf 	bl	80046f8 <HAL_GetTick>
 8006f7a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006f7c:	e008      	b.n	8006f90 <HAL_RCC_OscConfig+0x2c8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006f7e:	f7fd fbbb 	bl	80046f8 <HAL_GetTick>
 8006f82:	4602      	mov	r2, r0
 8006f84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f86:	1ad3      	subs	r3, r2, r3
 8006f88:	2b02      	cmp	r3, #2
 8006f8a:	d901      	bls.n	8006f90 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8006f8c:	2303      	movs	r3, #3
 8006f8e:	e2c2      	b.n	8007516 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006f90:	4b8b      	ldr	r3, [pc, #556]	; (80071c0 <HAL_RCC_OscConfig+0x4f8>)
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	f003 0304 	and.w	r3, r3, #4
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d1f0      	bne.n	8006f7e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	f003 0310 	and.w	r3, r3, #16
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	f000 80a9 	beq.w	80070fc <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006faa:	4b85      	ldr	r3, [pc, #532]	; (80071c0 <HAL_RCC_OscConfig+0x4f8>)
 8006fac:	691b      	ldr	r3, [r3, #16]
 8006fae:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006fb2:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006fb4:	4b82      	ldr	r3, [pc, #520]	; (80071c0 <HAL_RCC_OscConfig+0x4f8>)
 8006fb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fb8:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8006fba:	69bb      	ldr	r3, [r7, #24]
 8006fbc:	2b08      	cmp	r3, #8
 8006fbe:	d007      	beq.n	8006fd0 <HAL_RCC_OscConfig+0x308>
 8006fc0:	69bb      	ldr	r3, [r7, #24]
 8006fc2:	2b18      	cmp	r3, #24
 8006fc4:	d13a      	bne.n	800703c <HAL_RCC_OscConfig+0x374>
 8006fc6:	697b      	ldr	r3, [r7, #20]
 8006fc8:	f003 0303 	and.w	r3, r3, #3
 8006fcc:	2b01      	cmp	r3, #1
 8006fce:	d135      	bne.n	800703c <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006fd0:	4b7b      	ldr	r3, [pc, #492]	; (80071c0 <HAL_RCC_OscConfig+0x4f8>)
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d005      	beq.n	8006fe8 <HAL_RCC_OscConfig+0x320>
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	69db      	ldr	r3, [r3, #28]
 8006fe0:	2b80      	cmp	r3, #128	; 0x80
 8006fe2:	d001      	beq.n	8006fe8 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8006fe4:	2301      	movs	r3, #1
 8006fe6:	e296      	b.n	8007516 <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006fe8:	f7fd fbb6 	bl	8004758 <HAL_GetREVID>
 8006fec:	4603      	mov	r3, r0
 8006fee:	f241 0203 	movw	r2, #4099	; 0x1003
 8006ff2:	4293      	cmp	r3, r2
 8006ff4:	d817      	bhi.n	8007026 <HAL_RCC_OscConfig+0x35e>
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	6a1b      	ldr	r3, [r3, #32]
 8006ffa:	2b20      	cmp	r3, #32
 8006ffc:	d108      	bne.n	8007010 <HAL_RCC_OscConfig+0x348>
 8006ffe:	4b70      	ldr	r3, [pc, #448]	; (80071c0 <HAL_RCC_OscConfig+0x4f8>)
 8007000:	685b      	ldr	r3, [r3, #4]
 8007002:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8007006:	4a6e      	ldr	r2, [pc, #440]	; (80071c0 <HAL_RCC_OscConfig+0x4f8>)
 8007008:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800700c:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800700e:	e075      	b.n	80070fc <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007010:	4b6b      	ldr	r3, [pc, #428]	; (80071c0 <HAL_RCC_OscConfig+0x4f8>)
 8007012:	685b      	ldr	r3, [r3, #4]
 8007014:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	6a1b      	ldr	r3, [r3, #32]
 800701c:	069b      	lsls	r3, r3, #26
 800701e:	4968      	ldr	r1, [pc, #416]	; (80071c0 <HAL_RCC_OscConfig+0x4f8>)
 8007020:	4313      	orrs	r3, r2
 8007022:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007024:	e06a      	b.n	80070fc <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007026:	4b66      	ldr	r3, [pc, #408]	; (80071c0 <HAL_RCC_OscConfig+0x4f8>)
 8007028:	68db      	ldr	r3, [r3, #12]
 800702a:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	6a1b      	ldr	r3, [r3, #32]
 8007032:	061b      	lsls	r3, r3, #24
 8007034:	4962      	ldr	r1, [pc, #392]	; (80071c0 <HAL_RCC_OscConfig+0x4f8>)
 8007036:	4313      	orrs	r3, r2
 8007038:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800703a:	e05f      	b.n	80070fc <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	69db      	ldr	r3, [r3, #28]
 8007040:	2b00      	cmp	r3, #0
 8007042:	d042      	beq.n	80070ca <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8007044:	4b5e      	ldr	r3, [pc, #376]	; (80071c0 <HAL_RCC_OscConfig+0x4f8>)
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	4a5d      	ldr	r2, [pc, #372]	; (80071c0 <HAL_RCC_OscConfig+0x4f8>)
 800704a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800704e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007050:	f7fd fb52 	bl	80046f8 <HAL_GetTick>
 8007054:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007056:	e008      	b.n	800706a <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8007058:	f7fd fb4e 	bl	80046f8 <HAL_GetTick>
 800705c:	4602      	mov	r2, r0
 800705e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007060:	1ad3      	subs	r3, r2, r3
 8007062:	2b02      	cmp	r3, #2
 8007064:	d901      	bls.n	800706a <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8007066:	2303      	movs	r3, #3
 8007068:	e255      	b.n	8007516 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800706a:	4b55      	ldr	r3, [pc, #340]	; (80071c0 <HAL_RCC_OscConfig+0x4f8>)
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007072:	2b00      	cmp	r3, #0
 8007074:	d0f0      	beq.n	8007058 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007076:	f7fd fb6f 	bl	8004758 <HAL_GetREVID>
 800707a:	4603      	mov	r3, r0
 800707c:	f241 0203 	movw	r2, #4099	; 0x1003
 8007080:	4293      	cmp	r3, r2
 8007082:	d817      	bhi.n	80070b4 <HAL_RCC_OscConfig+0x3ec>
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	6a1b      	ldr	r3, [r3, #32]
 8007088:	2b20      	cmp	r3, #32
 800708a:	d108      	bne.n	800709e <HAL_RCC_OscConfig+0x3d6>
 800708c:	4b4c      	ldr	r3, [pc, #304]	; (80071c0 <HAL_RCC_OscConfig+0x4f8>)
 800708e:	685b      	ldr	r3, [r3, #4]
 8007090:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8007094:	4a4a      	ldr	r2, [pc, #296]	; (80071c0 <HAL_RCC_OscConfig+0x4f8>)
 8007096:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800709a:	6053      	str	r3, [r2, #4]
 800709c:	e02e      	b.n	80070fc <HAL_RCC_OscConfig+0x434>
 800709e:	4b48      	ldr	r3, [pc, #288]	; (80071c0 <HAL_RCC_OscConfig+0x4f8>)
 80070a0:	685b      	ldr	r3, [r3, #4]
 80070a2:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	6a1b      	ldr	r3, [r3, #32]
 80070aa:	069b      	lsls	r3, r3, #26
 80070ac:	4944      	ldr	r1, [pc, #272]	; (80071c0 <HAL_RCC_OscConfig+0x4f8>)
 80070ae:	4313      	orrs	r3, r2
 80070b0:	604b      	str	r3, [r1, #4]
 80070b2:	e023      	b.n	80070fc <HAL_RCC_OscConfig+0x434>
 80070b4:	4b42      	ldr	r3, [pc, #264]	; (80071c0 <HAL_RCC_OscConfig+0x4f8>)
 80070b6:	68db      	ldr	r3, [r3, #12]
 80070b8:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	6a1b      	ldr	r3, [r3, #32]
 80070c0:	061b      	lsls	r3, r3, #24
 80070c2:	493f      	ldr	r1, [pc, #252]	; (80071c0 <HAL_RCC_OscConfig+0x4f8>)
 80070c4:	4313      	orrs	r3, r2
 80070c6:	60cb      	str	r3, [r1, #12]
 80070c8:	e018      	b.n	80070fc <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80070ca:	4b3d      	ldr	r3, [pc, #244]	; (80071c0 <HAL_RCC_OscConfig+0x4f8>)
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	4a3c      	ldr	r2, [pc, #240]	; (80071c0 <HAL_RCC_OscConfig+0x4f8>)
 80070d0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80070d4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80070d6:	f7fd fb0f 	bl	80046f8 <HAL_GetTick>
 80070da:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80070dc:	e008      	b.n	80070f0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80070de:	f7fd fb0b 	bl	80046f8 <HAL_GetTick>
 80070e2:	4602      	mov	r2, r0
 80070e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070e6:	1ad3      	subs	r3, r2, r3
 80070e8:	2b02      	cmp	r3, #2
 80070ea:	d901      	bls.n	80070f0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80070ec:	2303      	movs	r3, #3
 80070ee:	e212      	b.n	8007516 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80070f0:	4b33      	ldr	r3, [pc, #204]	; (80071c0 <HAL_RCC_OscConfig+0x4f8>)
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d1f0      	bne.n	80070de <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	f003 0308 	and.w	r3, r3, #8
 8007104:	2b00      	cmp	r3, #0
 8007106:	d036      	beq.n	8007176 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	695b      	ldr	r3, [r3, #20]
 800710c:	2b00      	cmp	r3, #0
 800710e:	d019      	beq.n	8007144 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007110:	4b2b      	ldr	r3, [pc, #172]	; (80071c0 <HAL_RCC_OscConfig+0x4f8>)
 8007112:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007114:	4a2a      	ldr	r2, [pc, #168]	; (80071c0 <HAL_RCC_OscConfig+0x4f8>)
 8007116:	f043 0301 	orr.w	r3, r3, #1
 800711a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800711c:	f7fd faec 	bl	80046f8 <HAL_GetTick>
 8007120:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8007122:	e008      	b.n	8007136 <HAL_RCC_OscConfig+0x46e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007124:	f7fd fae8 	bl	80046f8 <HAL_GetTick>
 8007128:	4602      	mov	r2, r0
 800712a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800712c:	1ad3      	subs	r3, r2, r3
 800712e:	2b02      	cmp	r3, #2
 8007130:	d901      	bls.n	8007136 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8007132:	2303      	movs	r3, #3
 8007134:	e1ef      	b.n	8007516 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8007136:	4b22      	ldr	r3, [pc, #136]	; (80071c0 <HAL_RCC_OscConfig+0x4f8>)
 8007138:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800713a:	f003 0302 	and.w	r3, r3, #2
 800713e:	2b00      	cmp	r3, #0
 8007140:	d0f0      	beq.n	8007124 <HAL_RCC_OscConfig+0x45c>
 8007142:	e018      	b.n	8007176 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007144:	4b1e      	ldr	r3, [pc, #120]	; (80071c0 <HAL_RCC_OscConfig+0x4f8>)
 8007146:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007148:	4a1d      	ldr	r2, [pc, #116]	; (80071c0 <HAL_RCC_OscConfig+0x4f8>)
 800714a:	f023 0301 	bic.w	r3, r3, #1
 800714e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007150:	f7fd fad2 	bl	80046f8 <HAL_GetTick>
 8007154:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8007156:	e008      	b.n	800716a <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007158:	f7fd face 	bl	80046f8 <HAL_GetTick>
 800715c:	4602      	mov	r2, r0
 800715e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007160:	1ad3      	subs	r3, r2, r3
 8007162:	2b02      	cmp	r3, #2
 8007164:	d901      	bls.n	800716a <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8007166:	2303      	movs	r3, #3
 8007168:	e1d5      	b.n	8007516 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800716a:	4b15      	ldr	r3, [pc, #84]	; (80071c0 <HAL_RCC_OscConfig+0x4f8>)
 800716c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800716e:	f003 0302 	and.w	r3, r3, #2
 8007172:	2b00      	cmp	r3, #0
 8007174:	d1f0      	bne.n	8007158 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	f003 0320 	and.w	r3, r3, #32
 800717e:	2b00      	cmp	r3, #0
 8007180:	d039      	beq.n	80071f6 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	699b      	ldr	r3, [r3, #24]
 8007186:	2b00      	cmp	r3, #0
 8007188:	d01c      	beq.n	80071c4 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800718a:	4b0d      	ldr	r3, [pc, #52]	; (80071c0 <HAL_RCC_OscConfig+0x4f8>)
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	4a0c      	ldr	r2, [pc, #48]	; (80071c0 <HAL_RCC_OscConfig+0x4f8>)
 8007190:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8007194:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8007196:	f7fd faaf 	bl	80046f8 <HAL_GetTick>
 800719a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800719c:	e008      	b.n	80071b0 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800719e:	f7fd faab 	bl	80046f8 <HAL_GetTick>
 80071a2:	4602      	mov	r2, r0
 80071a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071a6:	1ad3      	subs	r3, r2, r3
 80071a8:	2b02      	cmp	r3, #2
 80071aa:	d901      	bls.n	80071b0 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 80071ac:	2303      	movs	r3, #3
 80071ae:	e1b2      	b.n	8007516 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80071b0:	4b03      	ldr	r3, [pc, #12]	; (80071c0 <HAL_RCC_OscConfig+0x4f8>)
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d0f0      	beq.n	800719e <HAL_RCC_OscConfig+0x4d6>
 80071bc:	e01b      	b.n	80071f6 <HAL_RCC_OscConfig+0x52e>
 80071be:	bf00      	nop
 80071c0:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80071c4:	4b9b      	ldr	r3, [pc, #620]	; (8007434 <HAL_RCC_OscConfig+0x76c>)
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	4a9a      	ldr	r2, [pc, #616]	; (8007434 <HAL_RCC_OscConfig+0x76c>)
 80071ca:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80071ce:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80071d0:	f7fd fa92 	bl	80046f8 <HAL_GetTick>
 80071d4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80071d6:	e008      	b.n	80071ea <HAL_RCC_OscConfig+0x522>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80071d8:	f7fd fa8e 	bl	80046f8 <HAL_GetTick>
 80071dc:	4602      	mov	r2, r0
 80071de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071e0:	1ad3      	subs	r3, r2, r3
 80071e2:	2b02      	cmp	r3, #2
 80071e4:	d901      	bls.n	80071ea <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 80071e6:	2303      	movs	r3, #3
 80071e8:	e195      	b.n	8007516 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80071ea:	4b92      	ldr	r3, [pc, #584]	; (8007434 <HAL_RCC_OscConfig+0x76c>)
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d1f0      	bne.n	80071d8 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	f003 0304 	and.w	r3, r3, #4
 80071fe:	2b00      	cmp	r3, #0
 8007200:	f000 8081 	beq.w	8007306 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8007204:	4b8c      	ldr	r3, [pc, #560]	; (8007438 <HAL_RCC_OscConfig+0x770>)
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	4a8b      	ldr	r2, [pc, #556]	; (8007438 <HAL_RCC_OscConfig+0x770>)
 800720a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800720e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007210:	f7fd fa72 	bl	80046f8 <HAL_GetTick>
 8007214:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007216:	e008      	b.n	800722a <HAL_RCC_OscConfig+0x562>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8007218:	f7fd fa6e 	bl	80046f8 <HAL_GetTick>
 800721c:	4602      	mov	r2, r0
 800721e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007220:	1ad3      	subs	r3, r2, r3
 8007222:	2b64      	cmp	r3, #100	; 0x64
 8007224:	d901      	bls.n	800722a <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8007226:	2303      	movs	r3, #3
 8007228:	e175      	b.n	8007516 <HAL_RCC_OscConfig+0x84e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800722a:	4b83      	ldr	r3, [pc, #524]	; (8007438 <HAL_RCC_OscConfig+0x770>)
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007232:	2b00      	cmp	r3, #0
 8007234:	d0f0      	beq.n	8007218 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	689b      	ldr	r3, [r3, #8]
 800723a:	2b01      	cmp	r3, #1
 800723c:	d106      	bne.n	800724c <HAL_RCC_OscConfig+0x584>
 800723e:	4b7d      	ldr	r3, [pc, #500]	; (8007434 <HAL_RCC_OscConfig+0x76c>)
 8007240:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007242:	4a7c      	ldr	r2, [pc, #496]	; (8007434 <HAL_RCC_OscConfig+0x76c>)
 8007244:	f043 0301 	orr.w	r3, r3, #1
 8007248:	6713      	str	r3, [r2, #112]	; 0x70
 800724a:	e02d      	b.n	80072a8 <HAL_RCC_OscConfig+0x5e0>
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	689b      	ldr	r3, [r3, #8]
 8007250:	2b00      	cmp	r3, #0
 8007252:	d10c      	bne.n	800726e <HAL_RCC_OscConfig+0x5a6>
 8007254:	4b77      	ldr	r3, [pc, #476]	; (8007434 <HAL_RCC_OscConfig+0x76c>)
 8007256:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007258:	4a76      	ldr	r2, [pc, #472]	; (8007434 <HAL_RCC_OscConfig+0x76c>)
 800725a:	f023 0301 	bic.w	r3, r3, #1
 800725e:	6713      	str	r3, [r2, #112]	; 0x70
 8007260:	4b74      	ldr	r3, [pc, #464]	; (8007434 <HAL_RCC_OscConfig+0x76c>)
 8007262:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007264:	4a73      	ldr	r2, [pc, #460]	; (8007434 <HAL_RCC_OscConfig+0x76c>)
 8007266:	f023 0304 	bic.w	r3, r3, #4
 800726a:	6713      	str	r3, [r2, #112]	; 0x70
 800726c:	e01c      	b.n	80072a8 <HAL_RCC_OscConfig+0x5e0>
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	689b      	ldr	r3, [r3, #8]
 8007272:	2b05      	cmp	r3, #5
 8007274:	d10c      	bne.n	8007290 <HAL_RCC_OscConfig+0x5c8>
 8007276:	4b6f      	ldr	r3, [pc, #444]	; (8007434 <HAL_RCC_OscConfig+0x76c>)
 8007278:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800727a:	4a6e      	ldr	r2, [pc, #440]	; (8007434 <HAL_RCC_OscConfig+0x76c>)
 800727c:	f043 0304 	orr.w	r3, r3, #4
 8007280:	6713      	str	r3, [r2, #112]	; 0x70
 8007282:	4b6c      	ldr	r3, [pc, #432]	; (8007434 <HAL_RCC_OscConfig+0x76c>)
 8007284:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007286:	4a6b      	ldr	r2, [pc, #428]	; (8007434 <HAL_RCC_OscConfig+0x76c>)
 8007288:	f043 0301 	orr.w	r3, r3, #1
 800728c:	6713      	str	r3, [r2, #112]	; 0x70
 800728e:	e00b      	b.n	80072a8 <HAL_RCC_OscConfig+0x5e0>
 8007290:	4b68      	ldr	r3, [pc, #416]	; (8007434 <HAL_RCC_OscConfig+0x76c>)
 8007292:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007294:	4a67      	ldr	r2, [pc, #412]	; (8007434 <HAL_RCC_OscConfig+0x76c>)
 8007296:	f023 0301 	bic.w	r3, r3, #1
 800729a:	6713      	str	r3, [r2, #112]	; 0x70
 800729c:	4b65      	ldr	r3, [pc, #404]	; (8007434 <HAL_RCC_OscConfig+0x76c>)
 800729e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072a0:	4a64      	ldr	r2, [pc, #400]	; (8007434 <HAL_RCC_OscConfig+0x76c>)
 80072a2:	f023 0304 	bic.w	r3, r3, #4
 80072a6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	689b      	ldr	r3, [r3, #8]
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d015      	beq.n	80072dc <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80072b0:	f7fd fa22 	bl	80046f8 <HAL_GetTick>
 80072b4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80072b6:	e00a      	b.n	80072ce <HAL_RCC_OscConfig+0x606>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80072b8:	f7fd fa1e 	bl	80046f8 <HAL_GetTick>
 80072bc:	4602      	mov	r2, r0
 80072be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072c0:	1ad3      	subs	r3, r2, r3
 80072c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80072c6:	4293      	cmp	r3, r2
 80072c8:	d901      	bls.n	80072ce <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 80072ca:	2303      	movs	r3, #3
 80072cc:	e123      	b.n	8007516 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80072ce:	4b59      	ldr	r3, [pc, #356]	; (8007434 <HAL_RCC_OscConfig+0x76c>)
 80072d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072d2:	f003 0302 	and.w	r3, r3, #2
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d0ee      	beq.n	80072b8 <HAL_RCC_OscConfig+0x5f0>
 80072da:	e014      	b.n	8007306 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80072dc:	f7fd fa0c 	bl	80046f8 <HAL_GetTick>
 80072e0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80072e2:	e00a      	b.n	80072fa <HAL_RCC_OscConfig+0x632>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80072e4:	f7fd fa08 	bl	80046f8 <HAL_GetTick>
 80072e8:	4602      	mov	r2, r0
 80072ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072ec:	1ad3      	subs	r3, r2, r3
 80072ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80072f2:	4293      	cmp	r3, r2
 80072f4:	d901      	bls.n	80072fa <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 80072f6:	2303      	movs	r3, #3
 80072f8:	e10d      	b.n	8007516 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80072fa:	4b4e      	ldr	r3, [pc, #312]	; (8007434 <HAL_RCC_OscConfig+0x76c>)
 80072fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072fe:	f003 0302 	and.w	r3, r3, #2
 8007302:	2b00      	cmp	r3, #0
 8007304:	d1ee      	bne.n	80072e4 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800730a:	2b00      	cmp	r3, #0
 800730c:	f000 8102 	beq.w	8007514 <HAL_RCC_OscConfig+0x84c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8007310:	4b48      	ldr	r3, [pc, #288]	; (8007434 <HAL_RCC_OscConfig+0x76c>)
 8007312:	691b      	ldr	r3, [r3, #16]
 8007314:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007318:	2b18      	cmp	r3, #24
 800731a:	f000 80bd 	beq.w	8007498 <HAL_RCC_OscConfig+0x7d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007322:	2b02      	cmp	r3, #2
 8007324:	f040 809e 	bne.w	8007464 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007328:	4b42      	ldr	r3, [pc, #264]	; (8007434 <HAL_RCC_OscConfig+0x76c>)
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	4a41      	ldr	r2, [pc, #260]	; (8007434 <HAL_RCC_OscConfig+0x76c>)
 800732e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007332:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007334:	f7fd f9e0 	bl	80046f8 <HAL_GetTick>
 8007338:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800733a:	e008      	b.n	800734e <HAL_RCC_OscConfig+0x686>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800733c:	f7fd f9dc 	bl	80046f8 <HAL_GetTick>
 8007340:	4602      	mov	r2, r0
 8007342:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007344:	1ad3      	subs	r3, r2, r3
 8007346:	2b02      	cmp	r3, #2
 8007348:	d901      	bls.n	800734e <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800734a:	2303      	movs	r3, #3
 800734c:	e0e3      	b.n	8007516 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800734e:	4b39      	ldr	r3, [pc, #228]	; (8007434 <HAL_RCC_OscConfig+0x76c>)
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007356:	2b00      	cmp	r3, #0
 8007358:	d1f0      	bne.n	800733c <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800735a:	4b36      	ldr	r3, [pc, #216]	; (8007434 <HAL_RCC_OscConfig+0x76c>)
 800735c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800735e:	4b37      	ldr	r3, [pc, #220]	; (800743c <HAL_RCC_OscConfig+0x774>)
 8007360:	4013      	ands	r3, r2
 8007362:	687a      	ldr	r2, [r7, #4]
 8007364:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8007366:	687a      	ldr	r2, [r7, #4]
 8007368:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800736a:	0112      	lsls	r2, r2, #4
 800736c:	430a      	orrs	r2, r1
 800736e:	4931      	ldr	r1, [pc, #196]	; (8007434 <HAL_RCC_OscConfig+0x76c>)
 8007370:	4313      	orrs	r3, r2
 8007372:	628b      	str	r3, [r1, #40]	; 0x28
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007378:	3b01      	subs	r3, #1
 800737a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007382:	3b01      	subs	r3, #1
 8007384:	025b      	lsls	r3, r3, #9
 8007386:	b29b      	uxth	r3, r3
 8007388:	431a      	orrs	r2, r3
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800738e:	3b01      	subs	r3, #1
 8007390:	041b      	lsls	r3, r3, #16
 8007392:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007396:	431a      	orrs	r2, r3
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800739c:	3b01      	subs	r3, #1
 800739e:	061b      	lsls	r3, r3, #24
 80073a0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80073a4:	4923      	ldr	r1, [pc, #140]	; (8007434 <HAL_RCC_OscConfig+0x76c>)
 80073a6:	4313      	orrs	r3, r2
 80073a8:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 80073aa:	4b22      	ldr	r3, [pc, #136]	; (8007434 <HAL_RCC_OscConfig+0x76c>)
 80073ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073ae:	4a21      	ldr	r2, [pc, #132]	; (8007434 <HAL_RCC_OscConfig+0x76c>)
 80073b0:	f023 0301 	bic.w	r3, r3, #1
 80073b4:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80073b6:	4b1f      	ldr	r3, [pc, #124]	; (8007434 <HAL_RCC_OscConfig+0x76c>)
 80073b8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80073ba:	4b21      	ldr	r3, [pc, #132]	; (8007440 <HAL_RCC_OscConfig+0x778>)
 80073bc:	4013      	ands	r3, r2
 80073be:	687a      	ldr	r2, [r7, #4]
 80073c0:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80073c2:	00d2      	lsls	r2, r2, #3
 80073c4:	491b      	ldr	r1, [pc, #108]	; (8007434 <HAL_RCC_OscConfig+0x76c>)
 80073c6:	4313      	orrs	r3, r2
 80073c8:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80073ca:	4b1a      	ldr	r3, [pc, #104]	; (8007434 <HAL_RCC_OscConfig+0x76c>)
 80073cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073ce:	f023 020c 	bic.w	r2, r3, #12
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073d6:	4917      	ldr	r1, [pc, #92]	; (8007434 <HAL_RCC_OscConfig+0x76c>)
 80073d8:	4313      	orrs	r3, r2
 80073da:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80073dc:	4b15      	ldr	r3, [pc, #84]	; (8007434 <HAL_RCC_OscConfig+0x76c>)
 80073de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073e0:	f023 0202 	bic.w	r2, r3, #2
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80073e8:	4912      	ldr	r1, [pc, #72]	; (8007434 <HAL_RCC_OscConfig+0x76c>)
 80073ea:	4313      	orrs	r3, r2
 80073ec:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80073ee:	4b11      	ldr	r3, [pc, #68]	; (8007434 <HAL_RCC_OscConfig+0x76c>)
 80073f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073f2:	4a10      	ldr	r2, [pc, #64]	; (8007434 <HAL_RCC_OscConfig+0x76c>)
 80073f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80073f8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80073fa:	4b0e      	ldr	r3, [pc, #56]	; (8007434 <HAL_RCC_OscConfig+0x76c>)
 80073fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073fe:	4a0d      	ldr	r2, [pc, #52]	; (8007434 <HAL_RCC_OscConfig+0x76c>)
 8007400:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007404:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8007406:	4b0b      	ldr	r3, [pc, #44]	; (8007434 <HAL_RCC_OscConfig+0x76c>)
 8007408:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800740a:	4a0a      	ldr	r2, [pc, #40]	; (8007434 <HAL_RCC_OscConfig+0x76c>)
 800740c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007410:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8007412:	4b08      	ldr	r3, [pc, #32]	; (8007434 <HAL_RCC_OscConfig+0x76c>)
 8007414:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007416:	4a07      	ldr	r2, [pc, #28]	; (8007434 <HAL_RCC_OscConfig+0x76c>)
 8007418:	f043 0301 	orr.w	r3, r3, #1
 800741c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800741e:	4b05      	ldr	r3, [pc, #20]	; (8007434 <HAL_RCC_OscConfig+0x76c>)
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	4a04      	ldr	r2, [pc, #16]	; (8007434 <HAL_RCC_OscConfig+0x76c>)
 8007424:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007428:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800742a:	f7fd f965 	bl	80046f8 <HAL_GetTick>
 800742e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007430:	e011      	b.n	8007456 <HAL_RCC_OscConfig+0x78e>
 8007432:	bf00      	nop
 8007434:	58024400 	.word	0x58024400
 8007438:	58024800 	.word	0x58024800
 800743c:	fffffc0c 	.word	0xfffffc0c
 8007440:	ffff0007 	.word	0xffff0007
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007444:	f7fd f958 	bl	80046f8 <HAL_GetTick>
 8007448:	4602      	mov	r2, r0
 800744a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800744c:	1ad3      	subs	r3, r2, r3
 800744e:	2b02      	cmp	r3, #2
 8007450:	d901      	bls.n	8007456 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8007452:	2303      	movs	r3, #3
 8007454:	e05f      	b.n	8007516 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007456:	4b32      	ldr	r3, [pc, #200]	; (8007520 <HAL_RCC_OscConfig+0x858>)
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800745e:	2b00      	cmp	r3, #0
 8007460:	d0f0      	beq.n	8007444 <HAL_RCC_OscConfig+0x77c>
 8007462:	e057      	b.n	8007514 <HAL_RCC_OscConfig+0x84c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007464:	4b2e      	ldr	r3, [pc, #184]	; (8007520 <HAL_RCC_OscConfig+0x858>)
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	4a2d      	ldr	r2, [pc, #180]	; (8007520 <HAL_RCC_OscConfig+0x858>)
 800746a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800746e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007470:	f7fd f942 	bl	80046f8 <HAL_GetTick>
 8007474:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007476:	e008      	b.n	800748a <HAL_RCC_OscConfig+0x7c2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007478:	f7fd f93e 	bl	80046f8 <HAL_GetTick>
 800747c:	4602      	mov	r2, r0
 800747e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007480:	1ad3      	subs	r3, r2, r3
 8007482:	2b02      	cmp	r3, #2
 8007484:	d901      	bls.n	800748a <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8007486:	2303      	movs	r3, #3
 8007488:	e045      	b.n	8007516 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800748a:	4b25      	ldr	r3, [pc, #148]	; (8007520 <HAL_RCC_OscConfig+0x858>)
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007492:	2b00      	cmp	r3, #0
 8007494:	d1f0      	bne.n	8007478 <HAL_RCC_OscConfig+0x7b0>
 8007496:	e03d      	b.n	8007514 <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8007498:	4b21      	ldr	r3, [pc, #132]	; (8007520 <HAL_RCC_OscConfig+0x858>)
 800749a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800749c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800749e:	4b20      	ldr	r3, [pc, #128]	; (8007520 <HAL_RCC_OscConfig+0x858>)
 80074a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074a2:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074a8:	2b01      	cmp	r3, #1
 80074aa:	d031      	beq.n	8007510 <HAL_RCC_OscConfig+0x848>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80074ac:	693b      	ldr	r3, [r7, #16]
 80074ae:	f003 0203 	and.w	r2, r3, #3
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80074b6:	429a      	cmp	r2, r3
 80074b8:	d12a      	bne.n	8007510 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80074ba:	693b      	ldr	r3, [r7, #16]
 80074bc:	091b      	lsrs	r3, r3, #4
 80074be:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80074c6:	429a      	cmp	r2, r3
 80074c8:	d122      	bne.n	8007510 <HAL_RCC_OscConfig+0x848>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074d4:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80074d6:	429a      	cmp	r2, r3
 80074d8:	d11a      	bne.n	8007510 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	0a5b      	lsrs	r3, r3, #9
 80074de:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80074e6:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80074e8:	429a      	cmp	r2, r3
 80074ea:	d111      	bne.n	8007510 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	0c1b      	lsrs	r3, r3, #16
 80074f0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074f8:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80074fa:	429a      	cmp	r2, r3
 80074fc:	d108      	bne.n	8007510 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	0e1b      	lsrs	r3, r3, #24
 8007502:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800750a:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800750c:	429a      	cmp	r2, r3
 800750e:	d001      	beq.n	8007514 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8007510:	2301      	movs	r3, #1
 8007512:	e000      	b.n	8007516 <HAL_RCC_OscConfig+0x84e>
      }
    }
  }
  return HAL_OK;
 8007514:	2300      	movs	r3, #0
}
 8007516:	4618      	mov	r0, r3
 8007518:	3730      	adds	r7, #48	; 0x30
 800751a:	46bd      	mov	sp, r7
 800751c:	bd80      	pop	{r7, pc}
 800751e:	bf00      	nop
 8007520:	58024400 	.word	0x58024400

08007524 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007524:	b580      	push	{r7, lr}
 8007526:	b086      	sub	sp, #24
 8007528:	af00      	add	r7, sp, #0
 800752a:	6078      	str	r0, [r7, #4]
 800752c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	2b00      	cmp	r3, #0
 8007532:	d101      	bne.n	8007538 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007534:	2301      	movs	r3, #1
 8007536:	e19c      	b.n	8007872 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007538:	4b8a      	ldr	r3, [pc, #552]	; (8007764 <HAL_RCC_ClockConfig+0x240>)
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	f003 030f 	and.w	r3, r3, #15
 8007540:	683a      	ldr	r2, [r7, #0]
 8007542:	429a      	cmp	r2, r3
 8007544:	d910      	bls.n	8007568 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007546:	4b87      	ldr	r3, [pc, #540]	; (8007764 <HAL_RCC_ClockConfig+0x240>)
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	f023 020f 	bic.w	r2, r3, #15
 800754e:	4985      	ldr	r1, [pc, #532]	; (8007764 <HAL_RCC_ClockConfig+0x240>)
 8007550:	683b      	ldr	r3, [r7, #0]
 8007552:	4313      	orrs	r3, r2
 8007554:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007556:	4b83      	ldr	r3, [pc, #524]	; (8007764 <HAL_RCC_ClockConfig+0x240>)
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	f003 030f 	and.w	r3, r3, #15
 800755e:	683a      	ldr	r2, [r7, #0]
 8007560:	429a      	cmp	r2, r3
 8007562:	d001      	beq.n	8007568 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8007564:	2301      	movs	r3, #1
 8007566:	e184      	b.n	8007872 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	f003 0304 	and.w	r3, r3, #4
 8007570:	2b00      	cmp	r3, #0
 8007572:	d010      	beq.n	8007596 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	691a      	ldr	r2, [r3, #16]
 8007578:	4b7b      	ldr	r3, [pc, #492]	; (8007768 <HAL_RCC_ClockConfig+0x244>)
 800757a:	699b      	ldr	r3, [r3, #24]
 800757c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007580:	429a      	cmp	r2, r3
 8007582:	d908      	bls.n	8007596 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8007584:	4b78      	ldr	r3, [pc, #480]	; (8007768 <HAL_RCC_ClockConfig+0x244>)
 8007586:	699b      	ldr	r3, [r3, #24]
 8007588:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	691b      	ldr	r3, [r3, #16]
 8007590:	4975      	ldr	r1, [pc, #468]	; (8007768 <HAL_RCC_ClockConfig+0x244>)
 8007592:	4313      	orrs	r3, r2
 8007594:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	f003 0308 	and.w	r3, r3, #8
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d010      	beq.n	80075c4 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	695a      	ldr	r2, [r3, #20]
 80075a6:	4b70      	ldr	r3, [pc, #448]	; (8007768 <HAL_RCC_ClockConfig+0x244>)
 80075a8:	69db      	ldr	r3, [r3, #28]
 80075aa:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80075ae:	429a      	cmp	r2, r3
 80075b0:	d908      	bls.n	80075c4 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80075b2:	4b6d      	ldr	r3, [pc, #436]	; (8007768 <HAL_RCC_ClockConfig+0x244>)
 80075b4:	69db      	ldr	r3, [r3, #28]
 80075b6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	695b      	ldr	r3, [r3, #20]
 80075be:	496a      	ldr	r1, [pc, #424]	; (8007768 <HAL_RCC_ClockConfig+0x244>)
 80075c0:	4313      	orrs	r3, r2
 80075c2:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	f003 0310 	and.w	r3, r3, #16
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d010      	beq.n	80075f2 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	699a      	ldr	r2, [r3, #24]
 80075d4:	4b64      	ldr	r3, [pc, #400]	; (8007768 <HAL_RCC_ClockConfig+0x244>)
 80075d6:	69db      	ldr	r3, [r3, #28]
 80075d8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80075dc:	429a      	cmp	r2, r3
 80075de:	d908      	bls.n	80075f2 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80075e0:	4b61      	ldr	r3, [pc, #388]	; (8007768 <HAL_RCC_ClockConfig+0x244>)
 80075e2:	69db      	ldr	r3, [r3, #28]
 80075e4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	699b      	ldr	r3, [r3, #24]
 80075ec:	495e      	ldr	r1, [pc, #376]	; (8007768 <HAL_RCC_ClockConfig+0x244>)
 80075ee:	4313      	orrs	r3, r2
 80075f0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	f003 0320 	and.w	r3, r3, #32
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d010      	beq.n	8007620 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	69da      	ldr	r2, [r3, #28]
 8007602:	4b59      	ldr	r3, [pc, #356]	; (8007768 <HAL_RCC_ClockConfig+0x244>)
 8007604:	6a1b      	ldr	r3, [r3, #32]
 8007606:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800760a:	429a      	cmp	r2, r3
 800760c:	d908      	bls.n	8007620 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800760e:	4b56      	ldr	r3, [pc, #344]	; (8007768 <HAL_RCC_ClockConfig+0x244>)
 8007610:	6a1b      	ldr	r3, [r3, #32]
 8007612:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	69db      	ldr	r3, [r3, #28]
 800761a:	4953      	ldr	r1, [pc, #332]	; (8007768 <HAL_RCC_ClockConfig+0x244>)
 800761c:	4313      	orrs	r3, r2
 800761e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	f003 0302 	and.w	r3, r3, #2
 8007628:	2b00      	cmp	r3, #0
 800762a:	d010      	beq.n	800764e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	68da      	ldr	r2, [r3, #12]
 8007630:	4b4d      	ldr	r3, [pc, #308]	; (8007768 <HAL_RCC_ClockConfig+0x244>)
 8007632:	699b      	ldr	r3, [r3, #24]
 8007634:	f003 030f 	and.w	r3, r3, #15
 8007638:	429a      	cmp	r2, r3
 800763a:	d908      	bls.n	800764e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800763c:	4b4a      	ldr	r3, [pc, #296]	; (8007768 <HAL_RCC_ClockConfig+0x244>)
 800763e:	699b      	ldr	r3, [r3, #24]
 8007640:	f023 020f 	bic.w	r2, r3, #15
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	68db      	ldr	r3, [r3, #12]
 8007648:	4947      	ldr	r1, [pc, #284]	; (8007768 <HAL_RCC_ClockConfig+0x244>)
 800764a:	4313      	orrs	r3, r2
 800764c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	f003 0301 	and.w	r3, r3, #1
 8007656:	2b00      	cmp	r3, #0
 8007658:	d055      	beq.n	8007706 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800765a:	4b43      	ldr	r3, [pc, #268]	; (8007768 <HAL_RCC_ClockConfig+0x244>)
 800765c:	699b      	ldr	r3, [r3, #24]
 800765e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	689b      	ldr	r3, [r3, #8]
 8007666:	4940      	ldr	r1, [pc, #256]	; (8007768 <HAL_RCC_ClockConfig+0x244>)
 8007668:	4313      	orrs	r3, r2
 800766a:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	685b      	ldr	r3, [r3, #4]
 8007670:	2b02      	cmp	r3, #2
 8007672:	d107      	bne.n	8007684 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007674:	4b3c      	ldr	r3, [pc, #240]	; (8007768 <HAL_RCC_ClockConfig+0x244>)
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800767c:	2b00      	cmp	r3, #0
 800767e:	d121      	bne.n	80076c4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8007680:	2301      	movs	r3, #1
 8007682:	e0f6      	b.n	8007872 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	685b      	ldr	r3, [r3, #4]
 8007688:	2b03      	cmp	r3, #3
 800768a:	d107      	bne.n	800769c <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800768c:	4b36      	ldr	r3, [pc, #216]	; (8007768 <HAL_RCC_ClockConfig+0x244>)
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007694:	2b00      	cmp	r3, #0
 8007696:	d115      	bne.n	80076c4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8007698:	2301      	movs	r3, #1
 800769a:	e0ea      	b.n	8007872 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	685b      	ldr	r3, [r3, #4]
 80076a0:	2b01      	cmp	r3, #1
 80076a2:	d107      	bne.n	80076b4 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80076a4:	4b30      	ldr	r3, [pc, #192]	; (8007768 <HAL_RCC_ClockConfig+0x244>)
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d109      	bne.n	80076c4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80076b0:	2301      	movs	r3, #1
 80076b2:	e0de      	b.n	8007872 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80076b4:	4b2c      	ldr	r3, [pc, #176]	; (8007768 <HAL_RCC_ClockConfig+0x244>)
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	f003 0304 	and.w	r3, r3, #4
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d101      	bne.n	80076c4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80076c0:	2301      	movs	r3, #1
 80076c2:	e0d6      	b.n	8007872 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80076c4:	4b28      	ldr	r3, [pc, #160]	; (8007768 <HAL_RCC_ClockConfig+0x244>)
 80076c6:	691b      	ldr	r3, [r3, #16]
 80076c8:	f023 0207 	bic.w	r2, r3, #7
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	685b      	ldr	r3, [r3, #4]
 80076d0:	4925      	ldr	r1, [pc, #148]	; (8007768 <HAL_RCC_ClockConfig+0x244>)
 80076d2:	4313      	orrs	r3, r2
 80076d4:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80076d6:	f7fd f80f 	bl	80046f8 <HAL_GetTick>
 80076da:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80076dc:	e00a      	b.n	80076f4 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80076de:	f7fd f80b 	bl	80046f8 <HAL_GetTick>
 80076e2:	4602      	mov	r2, r0
 80076e4:	697b      	ldr	r3, [r7, #20]
 80076e6:	1ad3      	subs	r3, r2, r3
 80076e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80076ec:	4293      	cmp	r3, r2
 80076ee:	d901      	bls.n	80076f4 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80076f0:	2303      	movs	r3, #3
 80076f2:	e0be      	b.n	8007872 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80076f4:	4b1c      	ldr	r3, [pc, #112]	; (8007768 <HAL_RCC_ClockConfig+0x244>)
 80076f6:	691b      	ldr	r3, [r3, #16]
 80076f8:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	685b      	ldr	r3, [r3, #4]
 8007700:	00db      	lsls	r3, r3, #3
 8007702:	429a      	cmp	r2, r3
 8007704:	d1eb      	bne.n	80076de <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	f003 0302 	and.w	r3, r3, #2
 800770e:	2b00      	cmp	r3, #0
 8007710:	d010      	beq.n	8007734 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	68da      	ldr	r2, [r3, #12]
 8007716:	4b14      	ldr	r3, [pc, #80]	; (8007768 <HAL_RCC_ClockConfig+0x244>)
 8007718:	699b      	ldr	r3, [r3, #24]
 800771a:	f003 030f 	and.w	r3, r3, #15
 800771e:	429a      	cmp	r2, r3
 8007720:	d208      	bcs.n	8007734 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007722:	4b11      	ldr	r3, [pc, #68]	; (8007768 <HAL_RCC_ClockConfig+0x244>)
 8007724:	699b      	ldr	r3, [r3, #24]
 8007726:	f023 020f 	bic.w	r2, r3, #15
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	68db      	ldr	r3, [r3, #12]
 800772e:	490e      	ldr	r1, [pc, #56]	; (8007768 <HAL_RCC_ClockConfig+0x244>)
 8007730:	4313      	orrs	r3, r2
 8007732:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007734:	4b0b      	ldr	r3, [pc, #44]	; (8007764 <HAL_RCC_ClockConfig+0x240>)
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	f003 030f 	and.w	r3, r3, #15
 800773c:	683a      	ldr	r2, [r7, #0]
 800773e:	429a      	cmp	r2, r3
 8007740:	d214      	bcs.n	800776c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007742:	4b08      	ldr	r3, [pc, #32]	; (8007764 <HAL_RCC_ClockConfig+0x240>)
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	f023 020f 	bic.w	r2, r3, #15
 800774a:	4906      	ldr	r1, [pc, #24]	; (8007764 <HAL_RCC_ClockConfig+0x240>)
 800774c:	683b      	ldr	r3, [r7, #0]
 800774e:	4313      	orrs	r3, r2
 8007750:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007752:	4b04      	ldr	r3, [pc, #16]	; (8007764 <HAL_RCC_ClockConfig+0x240>)
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	f003 030f 	and.w	r3, r3, #15
 800775a:	683a      	ldr	r2, [r7, #0]
 800775c:	429a      	cmp	r2, r3
 800775e:	d005      	beq.n	800776c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8007760:	2301      	movs	r3, #1
 8007762:	e086      	b.n	8007872 <HAL_RCC_ClockConfig+0x34e>
 8007764:	52002000 	.word	0x52002000
 8007768:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	f003 0304 	and.w	r3, r3, #4
 8007774:	2b00      	cmp	r3, #0
 8007776:	d010      	beq.n	800779a <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	691a      	ldr	r2, [r3, #16]
 800777c:	4b3f      	ldr	r3, [pc, #252]	; (800787c <HAL_RCC_ClockConfig+0x358>)
 800777e:	699b      	ldr	r3, [r3, #24]
 8007780:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007784:	429a      	cmp	r2, r3
 8007786:	d208      	bcs.n	800779a <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8007788:	4b3c      	ldr	r3, [pc, #240]	; (800787c <HAL_RCC_ClockConfig+0x358>)
 800778a:	699b      	ldr	r3, [r3, #24]
 800778c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	691b      	ldr	r3, [r3, #16]
 8007794:	4939      	ldr	r1, [pc, #228]	; (800787c <HAL_RCC_ClockConfig+0x358>)
 8007796:	4313      	orrs	r3, r2
 8007798:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	f003 0308 	and.w	r3, r3, #8
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d010      	beq.n	80077c8 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	695a      	ldr	r2, [r3, #20]
 80077aa:	4b34      	ldr	r3, [pc, #208]	; (800787c <HAL_RCC_ClockConfig+0x358>)
 80077ac:	69db      	ldr	r3, [r3, #28]
 80077ae:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80077b2:	429a      	cmp	r2, r3
 80077b4:	d208      	bcs.n	80077c8 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80077b6:	4b31      	ldr	r3, [pc, #196]	; (800787c <HAL_RCC_ClockConfig+0x358>)
 80077b8:	69db      	ldr	r3, [r3, #28]
 80077ba:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	695b      	ldr	r3, [r3, #20]
 80077c2:	492e      	ldr	r1, [pc, #184]	; (800787c <HAL_RCC_ClockConfig+0x358>)
 80077c4:	4313      	orrs	r3, r2
 80077c6:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	f003 0310 	and.w	r3, r3, #16
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	d010      	beq.n	80077f6 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	699a      	ldr	r2, [r3, #24]
 80077d8:	4b28      	ldr	r3, [pc, #160]	; (800787c <HAL_RCC_ClockConfig+0x358>)
 80077da:	69db      	ldr	r3, [r3, #28]
 80077dc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80077e0:	429a      	cmp	r2, r3
 80077e2:	d208      	bcs.n	80077f6 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80077e4:	4b25      	ldr	r3, [pc, #148]	; (800787c <HAL_RCC_ClockConfig+0x358>)
 80077e6:	69db      	ldr	r3, [r3, #28]
 80077e8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	699b      	ldr	r3, [r3, #24]
 80077f0:	4922      	ldr	r1, [pc, #136]	; (800787c <HAL_RCC_ClockConfig+0x358>)
 80077f2:	4313      	orrs	r3, r2
 80077f4:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	f003 0320 	and.w	r3, r3, #32
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d010      	beq.n	8007824 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	69da      	ldr	r2, [r3, #28]
 8007806:	4b1d      	ldr	r3, [pc, #116]	; (800787c <HAL_RCC_ClockConfig+0x358>)
 8007808:	6a1b      	ldr	r3, [r3, #32]
 800780a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800780e:	429a      	cmp	r2, r3
 8007810:	d208      	bcs.n	8007824 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8007812:	4b1a      	ldr	r3, [pc, #104]	; (800787c <HAL_RCC_ClockConfig+0x358>)
 8007814:	6a1b      	ldr	r3, [r3, #32]
 8007816:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	69db      	ldr	r3, [r3, #28]
 800781e:	4917      	ldr	r1, [pc, #92]	; (800787c <HAL_RCC_ClockConfig+0x358>)
 8007820:	4313      	orrs	r3, r2
 8007822:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8007824:	f000 f834 	bl	8007890 <HAL_RCC_GetSysClockFreq>
 8007828:	4602      	mov	r2, r0
 800782a:	4b14      	ldr	r3, [pc, #80]	; (800787c <HAL_RCC_ClockConfig+0x358>)
 800782c:	699b      	ldr	r3, [r3, #24]
 800782e:	0a1b      	lsrs	r3, r3, #8
 8007830:	f003 030f 	and.w	r3, r3, #15
 8007834:	4912      	ldr	r1, [pc, #72]	; (8007880 <HAL_RCC_ClockConfig+0x35c>)
 8007836:	5ccb      	ldrb	r3, [r1, r3]
 8007838:	f003 031f 	and.w	r3, r3, #31
 800783c:	fa22 f303 	lsr.w	r3, r2, r3
 8007840:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007842:	4b0e      	ldr	r3, [pc, #56]	; (800787c <HAL_RCC_ClockConfig+0x358>)
 8007844:	699b      	ldr	r3, [r3, #24]
 8007846:	f003 030f 	and.w	r3, r3, #15
 800784a:	4a0d      	ldr	r2, [pc, #52]	; (8007880 <HAL_RCC_ClockConfig+0x35c>)
 800784c:	5cd3      	ldrb	r3, [r2, r3]
 800784e:	f003 031f 	and.w	r3, r3, #31
 8007852:	693a      	ldr	r2, [r7, #16]
 8007854:	fa22 f303 	lsr.w	r3, r2, r3
 8007858:	4a0a      	ldr	r2, [pc, #40]	; (8007884 <HAL_RCC_ClockConfig+0x360>)
 800785a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800785c:	4a0a      	ldr	r2, [pc, #40]	; (8007888 <HAL_RCC_ClockConfig+0x364>)
 800785e:	693b      	ldr	r3, [r7, #16]
 8007860:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8007862:	4b0a      	ldr	r3, [pc, #40]	; (800788c <HAL_RCC_ClockConfig+0x368>)
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	4618      	mov	r0, r3
 8007868:	f7fc f8ca 	bl	8003a00 <HAL_InitTick>
 800786c:	4603      	mov	r3, r0
 800786e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8007870:	7bfb      	ldrb	r3, [r7, #15]
}
 8007872:	4618      	mov	r0, r3
 8007874:	3718      	adds	r7, #24
 8007876:	46bd      	mov	sp, r7
 8007878:	bd80      	pop	{r7, pc}
 800787a:	bf00      	nop
 800787c:	58024400 	.word	0x58024400
 8007880:	08028f38 	.word	0x08028f38
 8007884:	2000015c 	.word	0x2000015c
 8007888:	20000158 	.word	0x20000158
 800788c:	20000160 	.word	0x20000160

08007890 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007890:	b480      	push	{r7}
 8007892:	b089      	sub	sp, #36	; 0x24
 8007894:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007896:	4bb3      	ldr	r3, [pc, #716]	; (8007b64 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007898:	691b      	ldr	r3, [r3, #16]
 800789a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800789e:	2b18      	cmp	r3, #24
 80078a0:	f200 8155 	bhi.w	8007b4e <HAL_RCC_GetSysClockFreq+0x2be>
 80078a4:	a201      	add	r2, pc, #4	; (adr r2, 80078ac <HAL_RCC_GetSysClockFreq+0x1c>)
 80078a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078aa:	bf00      	nop
 80078ac:	08007911 	.word	0x08007911
 80078b0:	08007b4f 	.word	0x08007b4f
 80078b4:	08007b4f 	.word	0x08007b4f
 80078b8:	08007b4f 	.word	0x08007b4f
 80078bc:	08007b4f 	.word	0x08007b4f
 80078c0:	08007b4f 	.word	0x08007b4f
 80078c4:	08007b4f 	.word	0x08007b4f
 80078c8:	08007b4f 	.word	0x08007b4f
 80078cc:	08007937 	.word	0x08007937
 80078d0:	08007b4f 	.word	0x08007b4f
 80078d4:	08007b4f 	.word	0x08007b4f
 80078d8:	08007b4f 	.word	0x08007b4f
 80078dc:	08007b4f 	.word	0x08007b4f
 80078e0:	08007b4f 	.word	0x08007b4f
 80078e4:	08007b4f 	.word	0x08007b4f
 80078e8:	08007b4f 	.word	0x08007b4f
 80078ec:	0800793d 	.word	0x0800793d
 80078f0:	08007b4f 	.word	0x08007b4f
 80078f4:	08007b4f 	.word	0x08007b4f
 80078f8:	08007b4f 	.word	0x08007b4f
 80078fc:	08007b4f 	.word	0x08007b4f
 8007900:	08007b4f 	.word	0x08007b4f
 8007904:	08007b4f 	.word	0x08007b4f
 8007908:	08007b4f 	.word	0x08007b4f
 800790c:	08007943 	.word	0x08007943
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007910:	4b94      	ldr	r3, [pc, #592]	; (8007b64 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	f003 0320 	and.w	r3, r3, #32
 8007918:	2b00      	cmp	r3, #0
 800791a:	d009      	beq.n	8007930 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800791c:	4b91      	ldr	r3, [pc, #580]	; (8007b64 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	08db      	lsrs	r3, r3, #3
 8007922:	f003 0303 	and.w	r3, r3, #3
 8007926:	4a90      	ldr	r2, [pc, #576]	; (8007b68 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007928:	fa22 f303 	lsr.w	r3, r2, r3
 800792c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 800792e:	e111      	b.n	8007b54 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8007930:	4b8d      	ldr	r3, [pc, #564]	; (8007b68 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007932:	61bb      	str	r3, [r7, #24]
    break;
 8007934:	e10e      	b.n	8007b54 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8007936:	4b8d      	ldr	r3, [pc, #564]	; (8007b6c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8007938:	61bb      	str	r3, [r7, #24]
    break;
 800793a:	e10b      	b.n	8007b54 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 800793c:	4b8c      	ldr	r3, [pc, #560]	; (8007b70 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800793e:	61bb      	str	r3, [r7, #24]
    break;
 8007940:	e108      	b.n	8007b54 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007942:	4b88      	ldr	r3, [pc, #544]	; (8007b64 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007944:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007946:	f003 0303 	and.w	r3, r3, #3
 800794a:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 800794c:	4b85      	ldr	r3, [pc, #532]	; (8007b64 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800794e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007950:	091b      	lsrs	r3, r3, #4
 8007952:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007956:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8007958:	4b82      	ldr	r3, [pc, #520]	; (8007b64 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800795a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800795c:	f003 0301 	and.w	r3, r3, #1
 8007960:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8007962:	4b80      	ldr	r3, [pc, #512]	; (8007b64 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007964:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007966:	08db      	lsrs	r3, r3, #3
 8007968:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800796c:	68fa      	ldr	r2, [r7, #12]
 800796e:	fb02 f303 	mul.w	r3, r2, r3
 8007972:	ee07 3a90 	vmov	s15, r3
 8007976:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800797a:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 800797e:	693b      	ldr	r3, [r7, #16]
 8007980:	2b00      	cmp	r3, #0
 8007982:	f000 80e1 	beq.w	8007b48 <HAL_RCC_GetSysClockFreq+0x2b8>
 8007986:	697b      	ldr	r3, [r7, #20]
 8007988:	2b02      	cmp	r3, #2
 800798a:	f000 8083 	beq.w	8007a94 <HAL_RCC_GetSysClockFreq+0x204>
 800798e:	697b      	ldr	r3, [r7, #20]
 8007990:	2b02      	cmp	r3, #2
 8007992:	f200 80a1 	bhi.w	8007ad8 <HAL_RCC_GetSysClockFreq+0x248>
 8007996:	697b      	ldr	r3, [r7, #20]
 8007998:	2b00      	cmp	r3, #0
 800799a:	d003      	beq.n	80079a4 <HAL_RCC_GetSysClockFreq+0x114>
 800799c:	697b      	ldr	r3, [r7, #20]
 800799e:	2b01      	cmp	r3, #1
 80079a0:	d056      	beq.n	8007a50 <HAL_RCC_GetSysClockFreq+0x1c0>
 80079a2:	e099      	b.n	8007ad8 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80079a4:	4b6f      	ldr	r3, [pc, #444]	; (8007b64 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	f003 0320 	and.w	r3, r3, #32
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d02d      	beq.n	8007a0c <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80079b0:	4b6c      	ldr	r3, [pc, #432]	; (8007b64 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	08db      	lsrs	r3, r3, #3
 80079b6:	f003 0303 	and.w	r3, r3, #3
 80079ba:	4a6b      	ldr	r2, [pc, #428]	; (8007b68 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80079bc:	fa22 f303 	lsr.w	r3, r2, r3
 80079c0:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	ee07 3a90 	vmov	s15, r3
 80079c8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80079cc:	693b      	ldr	r3, [r7, #16]
 80079ce:	ee07 3a90 	vmov	s15, r3
 80079d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80079d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80079da:	4b62      	ldr	r3, [pc, #392]	; (8007b64 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80079dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80079e2:	ee07 3a90 	vmov	s15, r3
 80079e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80079ea:	ed97 6a02 	vldr	s12, [r7, #8]
 80079ee:	eddf 5a61 	vldr	s11, [pc, #388]	; 8007b74 <HAL_RCC_GetSysClockFreq+0x2e4>
 80079f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80079f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80079fa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80079fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007a02:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007a06:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8007a0a:	e087      	b.n	8007b1c <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007a0c:	693b      	ldr	r3, [r7, #16]
 8007a0e:	ee07 3a90 	vmov	s15, r3
 8007a12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a16:	eddf 6a58 	vldr	s13, [pc, #352]	; 8007b78 <HAL_RCC_GetSysClockFreq+0x2e8>
 8007a1a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007a1e:	4b51      	ldr	r3, [pc, #324]	; (8007b64 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007a20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a22:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007a26:	ee07 3a90 	vmov	s15, r3
 8007a2a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007a2e:	ed97 6a02 	vldr	s12, [r7, #8]
 8007a32:	eddf 5a50 	vldr	s11, [pc, #320]	; 8007b74 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007a36:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007a3a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007a3e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007a42:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007a46:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007a4a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007a4e:	e065      	b.n	8007b1c <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007a50:	693b      	ldr	r3, [r7, #16]
 8007a52:	ee07 3a90 	vmov	s15, r3
 8007a56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a5a:	eddf 6a48 	vldr	s13, [pc, #288]	; 8007b7c <HAL_RCC_GetSysClockFreq+0x2ec>
 8007a5e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007a62:	4b40      	ldr	r3, [pc, #256]	; (8007b64 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007a64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a66:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007a6a:	ee07 3a90 	vmov	s15, r3
 8007a6e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007a72:	ed97 6a02 	vldr	s12, [r7, #8]
 8007a76:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8007b74 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007a7a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007a7e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007a82:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007a86:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007a8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007a8e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007a92:	e043      	b.n	8007b1c <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007a94:	693b      	ldr	r3, [r7, #16]
 8007a96:	ee07 3a90 	vmov	s15, r3
 8007a9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a9e:	eddf 6a38 	vldr	s13, [pc, #224]	; 8007b80 <HAL_RCC_GetSysClockFreq+0x2f0>
 8007aa2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007aa6:	4b2f      	ldr	r3, [pc, #188]	; (8007b64 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007aa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007aaa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007aae:	ee07 3a90 	vmov	s15, r3
 8007ab2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007ab6:	ed97 6a02 	vldr	s12, [r7, #8]
 8007aba:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8007b74 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007abe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007ac2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007ac6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007aca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007ace:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007ad2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007ad6:	e021      	b.n	8007b1c <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007ad8:	693b      	ldr	r3, [r7, #16]
 8007ada:	ee07 3a90 	vmov	s15, r3
 8007ade:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007ae2:	eddf 6a26 	vldr	s13, [pc, #152]	; 8007b7c <HAL_RCC_GetSysClockFreq+0x2ec>
 8007ae6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007aea:	4b1e      	ldr	r3, [pc, #120]	; (8007b64 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007aec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007aee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007af2:	ee07 3a90 	vmov	s15, r3
 8007af6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007afa:	ed97 6a02 	vldr	s12, [r7, #8]
 8007afe:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8007b74 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007b02:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007b06:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007b0a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007b0e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007b12:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007b16:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007b1a:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8007b1c:	4b11      	ldr	r3, [pc, #68]	; (8007b64 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007b1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b20:	0a5b      	lsrs	r3, r3, #9
 8007b22:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007b26:	3301      	adds	r3, #1
 8007b28:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8007b2a:	683b      	ldr	r3, [r7, #0]
 8007b2c:	ee07 3a90 	vmov	s15, r3
 8007b30:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8007b34:	edd7 6a07 	vldr	s13, [r7, #28]
 8007b38:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007b3c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007b40:	ee17 3a90 	vmov	r3, s15
 8007b44:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8007b46:	e005      	b.n	8007b54 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8007b48:	2300      	movs	r3, #0
 8007b4a:	61bb      	str	r3, [r7, #24]
    break;
 8007b4c:	e002      	b.n	8007b54 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8007b4e:	4b07      	ldr	r3, [pc, #28]	; (8007b6c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8007b50:	61bb      	str	r3, [r7, #24]
    break;
 8007b52:	bf00      	nop
  }

  return sysclockfreq;
 8007b54:	69bb      	ldr	r3, [r7, #24]
}
 8007b56:	4618      	mov	r0, r3
 8007b58:	3724      	adds	r7, #36	; 0x24
 8007b5a:	46bd      	mov	sp, r7
 8007b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b60:	4770      	bx	lr
 8007b62:	bf00      	nop
 8007b64:	58024400 	.word	0x58024400
 8007b68:	03d09000 	.word	0x03d09000
 8007b6c:	003d0900 	.word	0x003d0900
 8007b70:	007a1200 	.word	0x007a1200
 8007b74:	46000000 	.word	0x46000000
 8007b78:	4c742400 	.word	0x4c742400
 8007b7c:	4a742400 	.word	0x4a742400
 8007b80:	4af42400 	.word	0x4af42400

08007b84 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007b84:	b580      	push	{r7, lr}
 8007b86:	b082      	sub	sp, #8
 8007b88:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8007b8a:	f7ff fe81 	bl	8007890 <HAL_RCC_GetSysClockFreq>
 8007b8e:	4602      	mov	r2, r0
 8007b90:	4b10      	ldr	r3, [pc, #64]	; (8007bd4 <HAL_RCC_GetHCLKFreq+0x50>)
 8007b92:	699b      	ldr	r3, [r3, #24]
 8007b94:	0a1b      	lsrs	r3, r3, #8
 8007b96:	f003 030f 	and.w	r3, r3, #15
 8007b9a:	490f      	ldr	r1, [pc, #60]	; (8007bd8 <HAL_RCC_GetHCLKFreq+0x54>)
 8007b9c:	5ccb      	ldrb	r3, [r1, r3]
 8007b9e:	f003 031f 	and.w	r3, r3, #31
 8007ba2:	fa22 f303 	lsr.w	r3, r2, r3
 8007ba6:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007ba8:	4b0a      	ldr	r3, [pc, #40]	; (8007bd4 <HAL_RCC_GetHCLKFreq+0x50>)
 8007baa:	699b      	ldr	r3, [r3, #24]
 8007bac:	f003 030f 	and.w	r3, r3, #15
 8007bb0:	4a09      	ldr	r2, [pc, #36]	; (8007bd8 <HAL_RCC_GetHCLKFreq+0x54>)
 8007bb2:	5cd3      	ldrb	r3, [r2, r3]
 8007bb4:	f003 031f 	and.w	r3, r3, #31
 8007bb8:	687a      	ldr	r2, [r7, #4]
 8007bba:	fa22 f303 	lsr.w	r3, r2, r3
 8007bbe:	4a07      	ldr	r2, [pc, #28]	; (8007bdc <HAL_RCC_GetHCLKFreq+0x58>)
 8007bc0:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8007bc2:	4a07      	ldr	r2, [pc, #28]	; (8007be0 <HAL_RCC_GetHCLKFreq+0x5c>)
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8007bc8:	4b04      	ldr	r3, [pc, #16]	; (8007bdc <HAL_RCC_GetHCLKFreq+0x58>)
 8007bca:	681b      	ldr	r3, [r3, #0]
}
 8007bcc:	4618      	mov	r0, r3
 8007bce:	3708      	adds	r7, #8
 8007bd0:	46bd      	mov	sp, r7
 8007bd2:	bd80      	pop	{r7, pc}
 8007bd4:	58024400 	.word	0x58024400
 8007bd8:	08028f38 	.word	0x08028f38
 8007bdc:	2000015c 	.word	0x2000015c
 8007be0:	20000158 	.word	0x20000158

08007be4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007be4:	b580      	push	{r7, lr}
 8007be6:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8007be8:	f7ff ffcc 	bl	8007b84 <HAL_RCC_GetHCLKFreq>
 8007bec:	4602      	mov	r2, r0
 8007bee:	4b06      	ldr	r3, [pc, #24]	; (8007c08 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007bf0:	69db      	ldr	r3, [r3, #28]
 8007bf2:	091b      	lsrs	r3, r3, #4
 8007bf4:	f003 0307 	and.w	r3, r3, #7
 8007bf8:	4904      	ldr	r1, [pc, #16]	; (8007c0c <HAL_RCC_GetPCLK1Freq+0x28>)
 8007bfa:	5ccb      	ldrb	r3, [r1, r3]
 8007bfc:	f003 031f 	and.w	r3, r3, #31
 8007c00:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8007c04:	4618      	mov	r0, r3
 8007c06:	bd80      	pop	{r7, pc}
 8007c08:	58024400 	.word	0x58024400
 8007c0c:	08028f38 	.word	0x08028f38

08007c10 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007c10:	b580      	push	{r7, lr}
 8007c12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8007c14:	f7ff ffb6 	bl	8007b84 <HAL_RCC_GetHCLKFreq>
 8007c18:	4602      	mov	r2, r0
 8007c1a:	4b06      	ldr	r3, [pc, #24]	; (8007c34 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007c1c:	69db      	ldr	r3, [r3, #28]
 8007c1e:	0a1b      	lsrs	r3, r3, #8
 8007c20:	f003 0307 	and.w	r3, r3, #7
 8007c24:	4904      	ldr	r1, [pc, #16]	; (8007c38 <HAL_RCC_GetPCLK2Freq+0x28>)
 8007c26:	5ccb      	ldrb	r3, [r1, r3]
 8007c28:	f003 031f 	and.w	r3, r3, #31
 8007c2c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8007c30:	4618      	mov	r0, r3
 8007c32:	bd80      	pop	{r7, pc}
 8007c34:	58024400 	.word	0x58024400
 8007c38:	08028f38 	.word	0x08028f38

08007c3c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8007c3c:	b480      	push	{r7}
 8007c3e:	b083      	sub	sp, #12
 8007c40:	af00      	add	r7, sp, #0
 8007c42:	6078      	str	r0, [r7, #4]
 8007c44:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	223f      	movs	r2, #63	; 0x3f
 8007c4a:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8007c4c:	4b1a      	ldr	r3, [pc, #104]	; (8007cb8 <HAL_RCC_GetClockConfig+0x7c>)
 8007c4e:	691b      	ldr	r3, [r3, #16]
 8007c50:	f003 0207 	and.w	r2, r3, #7
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8007c58:	4b17      	ldr	r3, [pc, #92]	; (8007cb8 <HAL_RCC_GetClockConfig+0x7c>)
 8007c5a:	699b      	ldr	r3, [r3, #24]
 8007c5c:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8007c64:	4b14      	ldr	r3, [pc, #80]	; (8007cb8 <HAL_RCC_GetClockConfig+0x7c>)
 8007c66:	699b      	ldr	r3, [r3, #24]
 8007c68:	f003 020f 	and.w	r2, r3, #15
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8007c70:	4b11      	ldr	r3, [pc, #68]	; (8007cb8 <HAL_RCC_GetClockConfig+0x7c>)
 8007c72:	699b      	ldr	r3, [r3, #24]
 8007c74:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8007c7c:	4b0e      	ldr	r3, [pc, #56]	; (8007cb8 <HAL_RCC_GetClockConfig+0x7c>)
 8007c7e:	69db      	ldr	r3, [r3, #28]
 8007c80:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8007c88:	4b0b      	ldr	r3, [pc, #44]	; (8007cb8 <HAL_RCC_GetClockConfig+0x7c>)
 8007c8a:	69db      	ldr	r3, [r3, #28]
 8007c8c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8007c94:	4b08      	ldr	r3, [pc, #32]	; (8007cb8 <HAL_RCC_GetClockConfig+0x7c>)
 8007c96:	6a1b      	ldr	r3, [r3, #32]
 8007c98:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8007ca0:	4b06      	ldr	r3, [pc, #24]	; (8007cbc <HAL_RCC_GetClockConfig+0x80>)
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	f003 020f 	and.w	r2, r3, #15
 8007ca8:	683b      	ldr	r3, [r7, #0]
 8007caa:	601a      	str	r2, [r3, #0]
}
 8007cac:	bf00      	nop
 8007cae:	370c      	adds	r7, #12
 8007cb0:	46bd      	mov	sp, r7
 8007cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cb6:	4770      	bx	lr
 8007cb8:	58024400 	.word	0x58024400
 8007cbc:	52002000 	.word	0x52002000

08007cc0 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007cc0:	b580      	push	{r7, lr}
 8007cc2:	b086      	sub	sp, #24
 8007cc4:	af00      	add	r7, sp, #0
 8007cc6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007cc8:	2300      	movs	r3, #0
 8007cca:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007ccc:	2300      	movs	r3, #0
 8007cce:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	d03f      	beq.n	8007d5c <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007ce0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007ce4:	d02a      	beq.n	8007d3c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8007ce6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007cea:	d824      	bhi.n	8007d36 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8007cec:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007cf0:	d018      	beq.n	8007d24 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8007cf2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007cf6:	d81e      	bhi.n	8007d36 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	d003      	beq.n	8007d04 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8007cfc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007d00:	d007      	beq.n	8007d12 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8007d02:	e018      	b.n	8007d36 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007d04:	4ba3      	ldr	r3, [pc, #652]	; (8007f94 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8007d06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d08:	4aa2      	ldr	r2, [pc, #648]	; (8007f94 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8007d0a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007d0e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8007d10:	e015      	b.n	8007d3e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	3304      	adds	r3, #4
 8007d16:	2102      	movs	r1, #2
 8007d18:	4618      	mov	r0, r3
 8007d1a:	f001 fff9 	bl	8009d10 <RCCEx_PLL2_Config>
 8007d1e:	4603      	mov	r3, r0
 8007d20:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8007d22:	e00c      	b.n	8007d3e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	3324      	adds	r3, #36	; 0x24
 8007d28:	2102      	movs	r1, #2
 8007d2a:	4618      	mov	r0, r3
 8007d2c:	f002 f8a2 	bl	8009e74 <RCCEx_PLL3_Config>
 8007d30:	4603      	mov	r3, r0
 8007d32:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8007d34:	e003      	b.n	8007d3e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007d36:	2301      	movs	r3, #1
 8007d38:	75fb      	strb	r3, [r7, #23]
      break;
 8007d3a:	e000      	b.n	8007d3e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8007d3c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007d3e:	7dfb      	ldrb	r3, [r7, #23]
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	d109      	bne.n	8007d58 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8007d44:	4b93      	ldr	r3, [pc, #588]	; (8007f94 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8007d46:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007d48:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007d50:	4990      	ldr	r1, [pc, #576]	; (8007f94 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8007d52:	4313      	orrs	r3, r2
 8007d54:	650b      	str	r3, [r1, #80]	; 0x50
 8007d56:	e001      	b.n	8007d5c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007d58:	7dfb      	ldrb	r3, [r7, #23]
 8007d5a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	d03d      	beq.n	8007de4 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d6c:	2b04      	cmp	r3, #4
 8007d6e:	d826      	bhi.n	8007dbe <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8007d70:	a201      	add	r2, pc, #4	; (adr r2, 8007d78 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8007d72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d76:	bf00      	nop
 8007d78:	08007d8d 	.word	0x08007d8d
 8007d7c:	08007d9b 	.word	0x08007d9b
 8007d80:	08007dad 	.word	0x08007dad
 8007d84:	08007dc5 	.word	0x08007dc5
 8007d88:	08007dc5 	.word	0x08007dc5
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007d8c:	4b81      	ldr	r3, [pc, #516]	; (8007f94 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8007d8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d90:	4a80      	ldr	r2, [pc, #512]	; (8007f94 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8007d92:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007d96:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007d98:	e015      	b.n	8007dc6 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	3304      	adds	r3, #4
 8007d9e:	2100      	movs	r1, #0
 8007da0:	4618      	mov	r0, r3
 8007da2:	f001 ffb5 	bl	8009d10 <RCCEx_PLL2_Config>
 8007da6:	4603      	mov	r3, r0
 8007da8:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007daa:	e00c      	b.n	8007dc6 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	3324      	adds	r3, #36	; 0x24
 8007db0:	2100      	movs	r1, #0
 8007db2:	4618      	mov	r0, r3
 8007db4:	f002 f85e 	bl	8009e74 <RCCEx_PLL3_Config>
 8007db8:	4603      	mov	r3, r0
 8007dba:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007dbc:	e003      	b.n	8007dc6 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007dbe:	2301      	movs	r3, #1
 8007dc0:	75fb      	strb	r3, [r7, #23]
      break;
 8007dc2:	e000      	b.n	8007dc6 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8007dc4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007dc6:	7dfb      	ldrb	r3, [r7, #23]
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d109      	bne.n	8007de0 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007dcc:	4b71      	ldr	r3, [pc, #452]	; (8007f94 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8007dce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007dd0:	f023 0207 	bic.w	r2, r3, #7
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007dd8:	496e      	ldr	r1, [pc, #440]	; (8007f94 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8007dda:	4313      	orrs	r3, r2
 8007ddc:	650b      	str	r3, [r1, #80]	; 0x50
 8007dde:	e001      	b.n	8007de4 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007de0:	7dfb      	ldrb	r3, [r7, #23]
 8007de2:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	d042      	beq.n	8007e76 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007df4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007df8:	d02b      	beq.n	8007e52 <HAL_RCCEx_PeriphCLKConfig+0x192>
 8007dfa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007dfe:	d825      	bhi.n	8007e4c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8007e00:	2bc0      	cmp	r3, #192	; 0xc0
 8007e02:	d028      	beq.n	8007e56 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8007e04:	2bc0      	cmp	r3, #192	; 0xc0
 8007e06:	d821      	bhi.n	8007e4c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8007e08:	2b80      	cmp	r3, #128	; 0x80
 8007e0a:	d016      	beq.n	8007e3a <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8007e0c:	2b80      	cmp	r3, #128	; 0x80
 8007e0e:	d81d      	bhi.n	8007e4c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	d002      	beq.n	8007e1a <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8007e14:	2b40      	cmp	r3, #64	; 0x40
 8007e16:	d007      	beq.n	8007e28 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8007e18:	e018      	b.n	8007e4c <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007e1a:	4b5e      	ldr	r3, [pc, #376]	; (8007f94 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8007e1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e1e:	4a5d      	ldr	r2, [pc, #372]	; (8007f94 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8007e20:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007e24:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8007e26:	e017      	b.n	8007e58 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	3304      	adds	r3, #4
 8007e2c:	2100      	movs	r1, #0
 8007e2e:	4618      	mov	r0, r3
 8007e30:	f001 ff6e 	bl	8009d10 <RCCEx_PLL2_Config>
 8007e34:	4603      	mov	r3, r0
 8007e36:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8007e38:	e00e      	b.n	8007e58 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	3324      	adds	r3, #36	; 0x24
 8007e3e:	2100      	movs	r1, #0
 8007e40:	4618      	mov	r0, r3
 8007e42:	f002 f817 	bl	8009e74 <RCCEx_PLL3_Config>
 8007e46:	4603      	mov	r3, r0
 8007e48:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8007e4a:	e005      	b.n	8007e58 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007e4c:	2301      	movs	r3, #1
 8007e4e:	75fb      	strb	r3, [r7, #23]
      break;
 8007e50:	e002      	b.n	8007e58 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8007e52:	bf00      	nop
 8007e54:	e000      	b.n	8007e58 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8007e56:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007e58:	7dfb      	ldrb	r3, [r7, #23]
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	d109      	bne.n	8007e72 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8007e5e:	4b4d      	ldr	r3, [pc, #308]	; (8007f94 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8007e60:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007e62:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007e6a:	494a      	ldr	r1, [pc, #296]	; (8007f94 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8007e6c:	4313      	orrs	r3, r2
 8007e6e:	650b      	str	r3, [r1, #80]	; 0x50
 8007e70:	e001      	b.n	8007e76 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007e72:	7dfb      	ldrb	r3, [r7, #23]
 8007e74:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d049      	beq.n	8007f16 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8007e88:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007e8c:	d030      	beq.n	8007ef0 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8007e8e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007e92:	d82a      	bhi.n	8007eea <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8007e94:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8007e98:	d02c      	beq.n	8007ef4 <HAL_RCCEx_PeriphCLKConfig+0x234>
 8007e9a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8007e9e:	d824      	bhi.n	8007eea <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8007ea0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007ea4:	d018      	beq.n	8007ed8 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8007ea6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007eaa:	d81e      	bhi.n	8007eea <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	d003      	beq.n	8007eb8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8007eb0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007eb4:	d007      	beq.n	8007ec6 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8007eb6:	e018      	b.n	8007eea <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007eb8:	4b36      	ldr	r3, [pc, #216]	; (8007f94 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8007eba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ebc:	4a35      	ldr	r2, [pc, #212]	; (8007f94 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8007ebe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007ec2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007ec4:	e017      	b.n	8007ef6 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	3304      	adds	r3, #4
 8007eca:	2100      	movs	r1, #0
 8007ecc:	4618      	mov	r0, r3
 8007ece:	f001 ff1f 	bl	8009d10 <RCCEx_PLL2_Config>
 8007ed2:	4603      	mov	r3, r0
 8007ed4:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8007ed6:	e00e      	b.n	8007ef6 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	3324      	adds	r3, #36	; 0x24
 8007edc:	2100      	movs	r1, #0
 8007ede:	4618      	mov	r0, r3
 8007ee0:	f001 ffc8 	bl	8009e74 <RCCEx_PLL3_Config>
 8007ee4:	4603      	mov	r3, r0
 8007ee6:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007ee8:	e005      	b.n	8007ef6 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8007eea:	2301      	movs	r3, #1
 8007eec:	75fb      	strb	r3, [r7, #23]
      break;
 8007eee:	e002      	b.n	8007ef6 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8007ef0:	bf00      	nop
 8007ef2:	e000      	b.n	8007ef6 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8007ef4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007ef6:	7dfb      	ldrb	r3, [r7, #23]
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	d10a      	bne.n	8007f12 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8007efc:	4b25      	ldr	r3, [pc, #148]	; (8007f94 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8007efe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007f00:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8007f0a:	4922      	ldr	r1, [pc, #136]	; (8007f94 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8007f0c:	4313      	orrs	r3, r2
 8007f0e:	658b      	str	r3, [r1, #88]	; 0x58
 8007f10:	e001      	b.n	8007f16 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007f12:	7dfb      	ldrb	r3, [r7, #23]
 8007f14:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	d04b      	beq.n	8007fba <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8007f28:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007f2c:	d030      	beq.n	8007f90 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8007f2e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007f32:	d82a      	bhi.n	8007f8a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8007f34:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007f38:	d02e      	beq.n	8007f98 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 8007f3a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007f3e:	d824      	bhi.n	8007f8a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8007f40:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007f44:	d018      	beq.n	8007f78 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8007f46:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007f4a:	d81e      	bhi.n	8007f8a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	d003      	beq.n	8007f58 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8007f50:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007f54:	d007      	beq.n	8007f66 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8007f56:	e018      	b.n	8007f8a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007f58:	4b0e      	ldr	r3, [pc, #56]	; (8007f94 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8007f5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f5c:	4a0d      	ldr	r2, [pc, #52]	; (8007f94 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8007f5e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007f62:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007f64:	e019      	b.n	8007f9a <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	3304      	adds	r3, #4
 8007f6a:	2100      	movs	r1, #0
 8007f6c:	4618      	mov	r0, r3
 8007f6e:	f001 fecf 	bl	8009d10 <RCCEx_PLL2_Config>
 8007f72:	4603      	mov	r3, r0
 8007f74:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8007f76:	e010      	b.n	8007f9a <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	3324      	adds	r3, #36	; 0x24
 8007f7c:	2100      	movs	r1, #0
 8007f7e:	4618      	mov	r0, r3
 8007f80:	f001 ff78 	bl	8009e74 <RCCEx_PLL3_Config>
 8007f84:	4603      	mov	r3, r0
 8007f86:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007f88:	e007      	b.n	8007f9a <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8007f8a:	2301      	movs	r3, #1
 8007f8c:	75fb      	strb	r3, [r7, #23]
      break;
 8007f8e:	e004      	b.n	8007f9a <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 8007f90:	bf00      	nop
 8007f92:	e002      	b.n	8007f9a <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8007f94:	58024400 	.word	0x58024400
      break;
 8007f98:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007f9a:	7dfb      	ldrb	r3, [r7, #23]
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	d10a      	bne.n	8007fb6 <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8007fa0:	4b99      	ldr	r3, [pc, #612]	; (8008208 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8007fa2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007fa4:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8007fae:	4996      	ldr	r1, [pc, #600]	; (8008208 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8007fb0:	4313      	orrs	r3, r2
 8007fb2:	658b      	str	r3, [r1, #88]	; 0x58
 8007fb4:	e001      	b.n	8007fba <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007fb6:	7dfb      	ldrb	r3, [r7, #23]
 8007fb8:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	d032      	beq.n	800802c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007fca:	2b30      	cmp	r3, #48	; 0x30
 8007fcc:	d01c      	beq.n	8008008 <HAL_RCCEx_PeriphCLKConfig+0x348>
 8007fce:	2b30      	cmp	r3, #48	; 0x30
 8007fd0:	d817      	bhi.n	8008002 <HAL_RCCEx_PeriphCLKConfig+0x342>
 8007fd2:	2b20      	cmp	r3, #32
 8007fd4:	d00c      	beq.n	8007ff0 <HAL_RCCEx_PeriphCLKConfig+0x330>
 8007fd6:	2b20      	cmp	r3, #32
 8007fd8:	d813      	bhi.n	8008002 <HAL_RCCEx_PeriphCLKConfig+0x342>
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	d016      	beq.n	800800c <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8007fde:	2b10      	cmp	r3, #16
 8007fe0:	d10f      	bne.n	8008002 <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007fe2:	4b89      	ldr	r3, [pc, #548]	; (8008208 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8007fe4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fe6:	4a88      	ldr	r2, [pc, #544]	; (8008208 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8007fe8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007fec:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8007fee:	e00e      	b.n	800800e <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	3304      	adds	r3, #4
 8007ff4:	2102      	movs	r1, #2
 8007ff6:	4618      	mov	r0, r3
 8007ff8:	f001 fe8a 	bl	8009d10 <RCCEx_PLL2_Config>
 8007ffc:	4603      	mov	r3, r0
 8007ffe:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8008000:	e005      	b.n	800800e <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8008002:	2301      	movs	r3, #1
 8008004:	75fb      	strb	r3, [r7, #23]
      break;
 8008006:	e002      	b.n	800800e <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8008008:	bf00      	nop
 800800a:	e000      	b.n	800800e <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 800800c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800800e:	7dfb      	ldrb	r3, [r7, #23]
 8008010:	2b00      	cmp	r3, #0
 8008012:	d109      	bne.n	8008028 <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8008014:	4b7c      	ldr	r3, [pc, #496]	; (8008208 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8008016:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008018:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008020:	4979      	ldr	r1, [pc, #484]	; (8008208 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8008022:	4313      	orrs	r3, r2
 8008024:	64cb      	str	r3, [r1, #76]	; 0x4c
 8008026:	e001      	b.n	800802c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008028:	7dfb      	ldrb	r3, [r7, #23]
 800802a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008034:	2b00      	cmp	r3, #0
 8008036:	d047      	beq.n	80080c8 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800803c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008040:	d030      	beq.n	80080a4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8008042:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008046:	d82a      	bhi.n	800809e <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8008048:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800804c:	d02c      	beq.n	80080a8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 800804e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008052:	d824      	bhi.n	800809e <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8008054:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008058:	d018      	beq.n	800808c <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 800805a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800805e:	d81e      	bhi.n	800809e <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8008060:	2b00      	cmp	r3, #0
 8008062:	d003      	beq.n	800806c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 8008064:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008068:	d007      	beq.n	800807a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 800806a:	e018      	b.n	800809e <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800806c:	4b66      	ldr	r3, [pc, #408]	; (8008208 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800806e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008070:	4a65      	ldr	r2, [pc, #404]	; (8008208 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8008072:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008076:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8008078:	e017      	b.n	80080aa <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	3304      	adds	r3, #4
 800807e:	2100      	movs	r1, #0
 8008080:	4618      	mov	r0, r3
 8008082:	f001 fe45 	bl	8009d10 <RCCEx_PLL2_Config>
 8008086:	4603      	mov	r3, r0
 8008088:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800808a:	e00e      	b.n	80080aa <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	3324      	adds	r3, #36	; 0x24
 8008090:	2100      	movs	r1, #0
 8008092:	4618      	mov	r0, r3
 8008094:	f001 feee 	bl	8009e74 <RCCEx_PLL3_Config>
 8008098:	4603      	mov	r3, r0
 800809a:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800809c:	e005      	b.n	80080aa <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800809e:	2301      	movs	r3, #1
 80080a0:	75fb      	strb	r3, [r7, #23]
      break;
 80080a2:	e002      	b.n	80080aa <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 80080a4:	bf00      	nop
 80080a6:	e000      	b.n	80080aa <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 80080a8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80080aa:	7dfb      	ldrb	r3, [r7, #23]
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	d109      	bne.n	80080c4 <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80080b0:	4b55      	ldr	r3, [pc, #340]	; (8008208 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80080b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80080b4:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80080bc:	4952      	ldr	r1, [pc, #328]	; (8008208 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80080be:	4313      	orrs	r3, r2
 80080c0:	650b      	str	r3, [r1, #80]	; 0x50
 80080c2:	e001      	b.n	80080c8 <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80080c4:	7dfb      	ldrb	r3, [r7, #23]
 80080c6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	d049      	beq.n	8008168 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80080d8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80080dc:	d02e      	beq.n	800813c <HAL_RCCEx_PeriphCLKConfig+0x47c>
 80080de:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80080e2:	d828      	bhi.n	8008136 <HAL_RCCEx_PeriphCLKConfig+0x476>
 80080e4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80080e8:	d02a      	beq.n	8008140 <HAL_RCCEx_PeriphCLKConfig+0x480>
 80080ea:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80080ee:	d822      	bhi.n	8008136 <HAL_RCCEx_PeriphCLKConfig+0x476>
 80080f0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80080f4:	d026      	beq.n	8008144 <HAL_RCCEx_PeriphCLKConfig+0x484>
 80080f6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80080fa:	d81c      	bhi.n	8008136 <HAL_RCCEx_PeriphCLKConfig+0x476>
 80080fc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008100:	d010      	beq.n	8008124 <HAL_RCCEx_PeriphCLKConfig+0x464>
 8008102:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008106:	d816      	bhi.n	8008136 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8008108:	2b00      	cmp	r3, #0
 800810a:	d01d      	beq.n	8008148 <HAL_RCCEx_PeriphCLKConfig+0x488>
 800810c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008110:	d111      	bne.n	8008136 <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	3304      	adds	r3, #4
 8008116:	2101      	movs	r1, #1
 8008118:	4618      	mov	r0, r3
 800811a:	f001 fdf9 	bl	8009d10 <RCCEx_PLL2_Config>
 800811e:	4603      	mov	r3, r0
 8008120:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8008122:	e012      	b.n	800814a <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	3324      	adds	r3, #36	; 0x24
 8008128:	2101      	movs	r1, #1
 800812a:	4618      	mov	r0, r3
 800812c:	f001 fea2 	bl	8009e74 <RCCEx_PLL3_Config>
 8008130:	4603      	mov	r3, r0
 8008132:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8008134:	e009      	b.n	800814a <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008136:	2301      	movs	r3, #1
 8008138:	75fb      	strb	r3, [r7, #23]
      break;
 800813a:	e006      	b.n	800814a <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 800813c:	bf00      	nop
 800813e:	e004      	b.n	800814a <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8008140:	bf00      	nop
 8008142:	e002      	b.n	800814a <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8008144:	bf00      	nop
 8008146:	e000      	b.n	800814a <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8008148:	bf00      	nop
    }

    if(ret == HAL_OK)
 800814a:	7dfb      	ldrb	r3, [r7, #23]
 800814c:	2b00      	cmp	r3, #0
 800814e:	d109      	bne.n	8008164 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8008150:	4b2d      	ldr	r3, [pc, #180]	; (8008208 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8008152:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008154:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800815c:	492a      	ldr	r1, [pc, #168]	; (8008208 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800815e:	4313      	orrs	r3, r2
 8008160:	650b      	str	r3, [r1, #80]	; 0x50
 8008162:	e001      	b.n	8008168 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008164:	7dfb      	ldrb	r3, [r7, #23]
 8008166:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008170:	2b00      	cmp	r3, #0
 8008172:	d04d      	beq.n	8008210 <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800817a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800817e:	d02e      	beq.n	80081de <HAL_RCCEx_PeriphCLKConfig+0x51e>
 8008180:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008184:	d828      	bhi.n	80081d8 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8008186:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800818a:	d02a      	beq.n	80081e2 <HAL_RCCEx_PeriphCLKConfig+0x522>
 800818c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008190:	d822      	bhi.n	80081d8 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8008192:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008196:	d026      	beq.n	80081e6 <HAL_RCCEx_PeriphCLKConfig+0x526>
 8008198:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800819c:	d81c      	bhi.n	80081d8 <HAL_RCCEx_PeriphCLKConfig+0x518>
 800819e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80081a2:	d010      	beq.n	80081c6 <HAL_RCCEx_PeriphCLKConfig+0x506>
 80081a4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80081a8:	d816      	bhi.n	80081d8 <HAL_RCCEx_PeriphCLKConfig+0x518>
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	d01d      	beq.n	80081ea <HAL_RCCEx_PeriphCLKConfig+0x52a>
 80081ae:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80081b2:	d111      	bne.n	80081d8 <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	3304      	adds	r3, #4
 80081b8:	2101      	movs	r1, #1
 80081ba:	4618      	mov	r0, r3
 80081bc:	f001 fda8 	bl	8009d10 <RCCEx_PLL2_Config>
 80081c0:	4603      	mov	r3, r0
 80081c2:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80081c4:	e012      	b.n	80081ec <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	3324      	adds	r3, #36	; 0x24
 80081ca:	2101      	movs	r1, #1
 80081cc:	4618      	mov	r0, r3
 80081ce:	f001 fe51 	bl	8009e74 <RCCEx_PLL3_Config>
 80081d2:	4603      	mov	r3, r0
 80081d4:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80081d6:	e009      	b.n	80081ec <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 80081d8:	2301      	movs	r3, #1
 80081da:	75fb      	strb	r3, [r7, #23]
      break;
 80081dc:	e006      	b.n	80081ec <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 80081de:	bf00      	nop
 80081e0:	e004      	b.n	80081ec <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 80081e2:	bf00      	nop
 80081e4:	e002      	b.n	80081ec <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 80081e6:	bf00      	nop
 80081e8:	e000      	b.n	80081ec <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 80081ea:	bf00      	nop
    }

    if(ret == HAL_OK)
 80081ec:	7dfb      	ldrb	r3, [r7, #23]
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	d10c      	bne.n	800820c <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80081f2:	4b05      	ldr	r3, [pc, #20]	; (8008208 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80081f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80081f6:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8008200:	4901      	ldr	r1, [pc, #4]	; (8008208 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8008202:	4313      	orrs	r3, r2
 8008204:	658b      	str	r3, [r1, #88]	; 0x58
 8008206:	e003      	b.n	8008210 <HAL_RCCEx_PeriphCLKConfig+0x550>
 8008208:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800820c:	7dfb      	ldrb	r3, [r7, #23]
 800820e:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008218:	2b00      	cmp	r3, #0
 800821a:	d02f      	beq.n	800827c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008220:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008224:	d00e      	beq.n	8008244 <HAL_RCCEx_PeriphCLKConfig+0x584>
 8008226:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800822a:	d814      	bhi.n	8008256 <HAL_RCCEx_PeriphCLKConfig+0x596>
 800822c:	2b00      	cmp	r3, #0
 800822e:	d015      	beq.n	800825c <HAL_RCCEx_PeriphCLKConfig+0x59c>
 8008230:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008234:	d10f      	bne.n	8008256 <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008236:	4baf      	ldr	r3, [pc, #700]	; (80084f4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008238:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800823a:	4aae      	ldr	r2, [pc, #696]	; (80084f4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800823c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008240:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8008242:	e00c      	b.n	800825e <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	3304      	adds	r3, #4
 8008248:	2101      	movs	r1, #1
 800824a:	4618      	mov	r0, r3
 800824c:	f001 fd60 	bl	8009d10 <RCCEx_PLL2_Config>
 8008250:	4603      	mov	r3, r0
 8008252:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8008254:	e003      	b.n	800825e <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008256:	2301      	movs	r3, #1
 8008258:	75fb      	strb	r3, [r7, #23]
      break;
 800825a:	e000      	b.n	800825e <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 800825c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800825e:	7dfb      	ldrb	r3, [r7, #23]
 8008260:	2b00      	cmp	r3, #0
 8008262:	d109      	bne.n	8008278 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8008264:	4ba3      	ldr	r3, [pc, #652]	; (80084f4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008266:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008268:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008270:	49a0      	ldr	r1, [pc, #640]	; (80084f4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008272:	4313      	orrs	r3, r2
 8008274:	650b      	str	r3, [r1, #80]	; 0x50
 8008276:	e001      	b.n	800827c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008278:	7dfb      	ldrb	r3, [r7, #23]
 800827a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008284:	2b00      	cmp	r3, #0
 8008286:	d032      	beq.n	80082ee <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800828c:	2b03      	cmp	r3, #3
 800828e:	d81b      	bhi.n	80082c8 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8008290:	a201      	add	r2, pc, #4	; (adr r2, 8008298 <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 8008292:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008296:	bf00      	nop
 8008298:	080082cf 	.word	0x080082cf
 800829c:	080082a9 	.word	0x080082a9
 80082a0:	080082b7 	.word	0x080082b7
 80082a4:	080082cf 	.word	0x080082cf
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80082a8:	4b92      	ldr	r3, [pc, #584]	; (80084f4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80082aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082ac:	4a91      	ldr	r2, [pc, #580]	; (80084f4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80082ae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80082b2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 80082b4:	e00c      	b.n	80082d0 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	3304      	adds	r3, #4
 80082ba:	2102      	movs	r1, #2
 80082bc:	4618      	mov	r0, r3
 80082be:	f001 fd27 	bl	8009d10 <RCCEx_PLL2_Config>
 80082c2:	4603      	mov	r3, r0
 80082c4:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 80082c6:	e003      	b.n	80082d0 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80082c8:	2301      	movs	r3, #1
 80082ca:	75fb      	strb	r3, [r7, #23]
      break;
 80082cc:	e000      	b.n	80082d0 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 80082ce:	bf00      	nop
    }

    if(ret == HAL_OK)
 80082d0:	7dfb      	ldrb	r3, [r7, #23]
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	d109      	bne.n	80082ea <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80082d6:	4b87      	ldr	r3, [pc, #540]	; (80084f4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80082d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80082da:	f023 0203 	bic.w	r2, r3, #3
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80082e2:	4984      	ldr	r1, [pc, #528]	; (80084f4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80082e4:	4313      	orrs	r3, r2
 80082e6:	64cb      	str	r3, [r1, #76]	; 0x4c
 80082e8:	e001      	b.n	80082ee <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80082ea:	7dfb      	ldrb	r3, [r7, #23]
 80082ec:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	f000 8086 	beq.w	8008408 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80082fc:	4b7e      	ldr	r3, [pc, #504]	; (80084f8 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	4a7d      	ldr	r2, [pc, #500]	; (80084f8 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8008302:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008306:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008308:	f7fc f9f6 	bl	80046f8 <HAL_GetTick>
 800830c:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800830e:	e009      	b.n	8008324 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008310:	f7fc f9f2 	bl	80046f8 <HAL_GetTick>
 8008314:	4602      	mov	r2, r0
 8008316:	693b      	ldr	r3, [r7, #16]
 8008318:	1ad3      	subs	r3, r2, r3
 800831a:	2b64      	cmp	r3, #100	; 0x64
 800831c:	d902      	bls.n	8008324 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 800831e:	2303      	movs	r3, #3
 8008320:	75fb      	strb	r3, [r7, #23]
        break;
 8008322:	e005      	b.n	8008330 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008324:	4b74      	ldr	r3, [pc, #464]	; (80084f8 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800832c:	2b00      	cmp	r3, #0
 800832e:	d0ef      	beq.n	8008310 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8008330:	7dfb      	ldrb	r3, [r7, #23]
 8008332:	2b00      	cmp	r3, #0
 8008334:	d166      	bne.n	8008404 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8008336:	4b6f      	ldr	r3, [pc, #444]	; (80084f4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008338:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008340:	4053      	eors	r3, r2
 8008342:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008346:	2b00      	cmp	r3, #0
 8008348:	d013      	beq.n	8008372 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800834a:	4b6a      	ldr	r3, [pc, #424]	; (80084f4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800834c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800834e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008352:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8008354:	4b67      	ldr	r3, [pc, #412]	; (80084f4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008356:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008358:	4a66      	ldr	r2, [pc, #408]	; (80084f4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800835a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800835e:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8008360:	4b64      	ldr	r3, [pc, #400]	; (80084f4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008362:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008364:	4a63      	ldr	r2, [pc, #396]	; (80084f4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008366:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800836a:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800836c:	4a61      	ldr	r2, [pc, #388]	; (80084f4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800836e:	68fb      	ldr	r3, [r7, #12]
 8008370:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008378:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800837c:	d115      	bne.n	80083aa <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800837e:	f7fc f9bb 	bl	80046f8 <HAL_GetTick>
 8008382:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008384:	e00b      	b.n	800839e <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008386:	f7fc f9b7 	bl	80046f8 <HAL_GetTick>
 800838a:	4602      	mov	r2, r0
 800838c:	693b      	ldr	r3, [r7, #16]
 800838e:	1ad3      	subs	r3, r2, r3
 8008390:	f241 3288 	movw	r2, #5000	; 0x1388
 8008394:	4293      	cmp	r3, r2
 8008396:	d902      	bls.n	800839e <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8008398:	2303      	movs	r3, #3
 800839a:	75fb      	strb	r3, [r7, #23]
            break;
 800839c:	e005      	b.n	80083aa <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800839e:	4b55      	ldr	r3, [pc, #340]	; (80084f4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80083a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80083a2:	f003 0302 	and.w	r3, r3, #2
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	d0ed      	beq.n	8008386 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 80083aa:	7dfb      	ldrb	r3, [r7, #23]
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	d126      	bne.n	80083fe <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80083b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80083ba:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80083be:	d10d      	bne.n	80083dc <HAL_RCCEx_PeriphCLKConfig+0x71c>
 80083c0:	4b4c      	ldr	r3, [pc, #304]	; (80084f4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80083c2:	691b      	ldr	r3, [r3, #16]
 80083c4:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80083ce:	0919      	lsrs	r1, r3, #4
 80083d0:	4b4a      	ldr	r3, [pc, #296]	; (80084fc <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 80083d2:	400b      	ands	r3, r1
 80083d4:	4947      	ldr	r1, [pc, #284]	; (80084f4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80083d6:	4313      	orrs	r3, r2
 80083d8:	610b      	str	r3, [r1, #16]
 80083da:	e005      	b.n	80083e8 <HAL_RCCEx_PeriphCLKConfig+0x728>
 80083dc:	4b45      	ldr	r3, [pc, #276]	; (80084f4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80083de:	691b      	ldr	r3, [r3, #16]
 80083e0:	4a44      	ldr	r2, [pc, #272]	; (80084f4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80083e2:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80083e6:	6113      	str	r3, [r2, #16]
 80083e8:	4b42      	ldr	r3, [pc, #264]	; (80084f4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80083ea:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80083f2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80083f6:	493f      	ldr	r1, [pc, #252]	; (80084f4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80083f8:	4313      	orrs	r3, r2
 80083fa:	670b      	str	r3, [r1, #112]	; 0x70
 80083fc:	e004      	b.n	8008408 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80083fe:	7dfb      	ldrb	r3, [r7, #23]
 8008400:	75bb      	strb	r3, [r7, #22]
 8008402:	e001      	b.n	8008408 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008404:	7dfb      	ldrb	r3, [r7, #23]
 8008406:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	f003 0301 	and.w	r3, r3, #1
 8008410:	2b00      	cmp	r3, #0
 8008412:	f000 8085 	beq.w	8008520 <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800841a:	2b28      	cmp	r3, #40	; 0x28
 800841c:	d866      	bhi.n	80084ec <HAL_RCCEx_PeriphCLKConfig+0x82c>
 800841e:	a201      	add	r2, pc, #4	; (adr r2, 8008424 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8008420:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008424:	08008501 	.word	0x08008501
 8008428:	080084ed 	.word	0x080084ed
 800842c:	080084ed 	.word	0x080084ed
 8008430:	080084ed 	.word	0x080084ed
 8008434:	080084ed 	.word	0x080084ed
 8008438:	080084ed 	.word	0x080084ed
 800843c:	080084ed 	.word	0x080084ed
 8008440:	080084ed 	.word	0x080084ed
 8008444:	080084c9 	.word	0x080084c9
 8008448:	080084ed 	.word	0x080084ed
 800844c:	080084ed 	.word	0x080084ed
 8008450:	080084ed 	.word	0x080084ed
 8008454:	080084ed 	.word	0x080084ed
 8008458:	080084ed 	.word	0x080084ed
 800845c:	080084ed 	.word	0x080084ed
 8008460:	080084ed 	.word	0x080084ed
 8008464:	080084db 	.word	0x080084db
 8008468:	080084ed 	.word	0x080084ed
 800846c:	080084ed 	.word	0x080084ed
 8008470:	080084ed 	.word	0x080084ed
 8008474:	080084ed 	.word	0x080084ed
 8008478:	080084ed 	.word	0x080084ed
 800847c:	080084ed 	.word	0x080084ed
 8008480:	080084ed 	.word	0x080084ed
 8008484:	08008501 	.word	0x08008501
 8008488:	080084ed 	.word	0x080084ed
 800848c:	080084ed 	.word	0x080084ed
 8008490:	080084ed 	.word	0x080084ed
 8008494:	080084ed 	.word	0x080084ed
 8008498:	080084ed 	.word	0x080084ed
 800849c:	080084ed 	.word	0x080084ed
 80084a0:	080084ed 	.word	0x080084ed
 80084a4:	08008501 	.word	0x08008501
 80084a8:	080084ed 	.word	0x080084ed
 80084ac:	080084ed 	.word	0x080084ed
 80084b0:	080084ed 	.word	0x080084ed
 80084b4:	080084ed 	.word	0x080084ed
 80084b8:	080084ed 	.word	0x080084ed
 80084bc:	080084ed 	.word	0x080084ed
 80084c0:	080084ed 	.word	0x080084ed
 80084c4:	08008501 	.word	0x08008501
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	3304      	adds	r3, #4
 80084cc:	2101      	movs	r1, #1
 80084ce:	4618      	mov	r0, r3
 80084d0:	f001 fc1e 	bl	8009d10 <RCCEx_PLL2_Config>
 80084d4:	4603      	mov	r3, r0
 80084d6:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80084d8:	e013      	b.n	8008502 <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	3324      	adds	r3, #36	; 0x24
 80084de:	2101      	movs	r1, #1
 80084e0:	4618      	mov	r0, r3
 80084e2:	f001 fcc7 	bl	8009e74 <RCCEx_PLL3_Config>
 80084e6:	4603      	mov	r3, r0
 80084e8:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80084ea:	e00a      	b.n	8008502 <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80084ec:	2301      	movs	r3, #1
 80084ee:	75fb      	strb	r3, [r7, #23]
      break;
 80084f0:	e007      	b.n	8008502 <HAL_RCCEx_PeriphCLKConfig+0x842>
 80084f2:	bf00      	nop
 80084f4:	58024400 	.word	0x58024400
 80084f8:	58024800 	.word	0x58024800
 80084fc:	00ffffcf 	.word	0x00ffffcf
      break;
 8008500:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008502:	7dfb      	ldrb	r3, [r7, #23]
 8008504:	2b00      	cmp	r3, #0
 8008506:	d109      	bne.n	800851c <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8008508:	4b96      	ldr	r3, [pc, #600]	; (8008764 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800850a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800850c:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008514:	4993      	ldr	r1, [pc, #588]	; (8008764 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8008516:	4313      	orrs	r3, r2
 8008518:	654b      	str	r3, [r1, #84]	; 0x54
 800851a:	e001      	b.n	8008520 <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800851c:	7dfb      	ldrb	r3, [r7, #23]
 800851e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	f003 0302 	and.w	r3, r3, #2
 8008528:	2b00      	cmp	r3, #0
 800852a:	d038      	beq.n	800859e <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008530:	2b05      	cmp	r3, #5
 8008532:	d821      	bhi.n	8008578 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 8008534:	a201      	add	r2, pc, #4	; (adr r2, 800853c <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 8008536:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800853a:	bf00      	nop
 800853c:	0800857f 	.word	0x0800857f
 8008540:	08008555 	.word	0x08008555
 8008544:	08008567 	.word	0x08008567
 8008548:	0800857f 	.word	0x0800857f
 800854c:	0800857f 	.word	0x0800857f
 8008550:	0800857f 	.word	0x0800857f
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	3304      	adds	r3, #4
 8008558:	2101      	movs	r1, #1
 800855a:	4618      	mov	r0, r3
 800855c:	f001 fbd8 	bl	8009d10 <RCCEx_PLL2_Config>
 8008560:	4603      	mov	r3, r0
 8008562:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8008564:	e00c      	b.n	8008580 <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	3324      	adds	r3, #36	; 0x24
 800856a:	2101      	movs	r1, #1
 800856c:	4618      	mov	r0, r3
 800856e:	f001 fc81 	bl	8009e74 <RCCEx_PLL3_Config>
 8008572:	4603      	mov	r3, r0
 8008574:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8008576:	e003      	b.n	8008580 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008578:	2301      	movs	r3, #1
 800857a:	75fb      	strb	r3, [r7, #23]
      break;
 800857c:	e000      	b.n	8008580 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 800857e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008580:	7dfb      	ldrb	r3, [r7, #23]
 8008582:	2b00      	cmp	r3, #0
 8008584:	d109      	bne.n	800859a <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8008586:	4b77      	ldr	r3, [pc, #476]	; (8008764 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8008588:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800858a:	f023 0207 	bic.w	r2, r3, #7
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008592:	4974      	ldr	r1, [pc, #464]	; (8008764 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8008594:	4313      	orrs	r3, r2
 8008596:	654b      	str	r3, [r1, #84]	; 0x54
 8008598:	e001      	b.n	800859e <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800859a:	7dfb      	ldrb	r3, [r7, #23]
 800859c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	f003 0304 	and.w	r3, r3, #4
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	d03a      	beq.n	8008620 <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80085b0:	2b05      	cmp	r3, #5
 80085b2:	d821      	bhi.n	80085f8 <HAL_RCCEx_PeriphCLKConfig+0x938>
 80085b4:	a201      	add	r2, pc, #4	; (adr r2, 80085bc <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 80085b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085ba:	bf00      	nop
 80085bc:	080085ff 	.word	0x080085ff
 80085c0:	080085d5 	.word	0x080085d5
 80085c4:	080085e7 	.word	0x080085e7
 80085c8:	080085ff 	.word	0x080085ff
 80085cc:	080085ff 	.word	0x080085ff
 80085d0:	080085ff 	.word	0x080085ff
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	3304      	adds	r3, #4
 80085d8:	2101      	movs	r1, #1
 80085da:	4618      	mov	r0, r3
 80085dc:	f001 fb98 	bl	8009d10 <RCCEx_PLL2_Config>
 80085e0:	4603      	mov	r3, r0
 80085e2:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80085e4:	e00c      	b.n	8008600 <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	3324      	adds	r3, #36	; 0x24
 80085ea:	2101      	movs	r1, #1
 80085ec:	4618      	mov	r0, r3
 80085ee:	f001 fc41 	bl	8009e74 <RCCEx_PLL3_Config>
 80085f2:	4603      	mov	r3, r0
 80085f4:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80085f6:	e003      	b.n	8008600 <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80085f8:	2301      	movs	r3, #1
 80085fa:	75fb      	strb	r3, [r7, #23]
      break;
 80085fc:	e000      	b.n	8008600 <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 80085fe:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008600:	7dfb      	ldrb	r3, [r7, #23]
 8008602:	2b00      	cmp	r3, #0
 8008604:	d10a      	bne.n	800861c <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8008606:	4b57      	ldr	r3, [pc, #348]	; (8008764 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8008608:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800860a:	f023 0207 	bic.w	r2, r3, #7
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008614:	4953      	ldr	r1, [pc, #332]	; (8008764 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8008616:	4313      	orrs	r3, r2
 8008618:	658b      	str	r3, [r1, #88]	; 0x58
 800861a:	e001      	b.n	8008620 <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800861c:	7dfb      	ldrb	r3, [r7, #23]
 800861e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	f003 0320 	and.w	r3, r3, #32
 8008628:	2b00      	cmp	r3, #0
 800862a:	d04b      	beq.n	80086c4 <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008632:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008636:	d02e      	beq.n	8008696 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8008638:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800863c:	d828      	bhi.n	8008690 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800863e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008642:	d02a      	beq.n	800869a <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8008644:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008648:	d822      	bhi.n	8008690 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800864a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800864e:	d026      	beq.n	800869e <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8008650:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008654:	d81c      	bhi.n	8008690 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8008656:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800865a:	d010      	beq.n	800867e <HAL_RCCEx_PeriphCLKConfig+0x9be>
 800865c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008660:	d816      	bhi.n	8008690 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8008662:	2b00      	cmp	r3, #0
 8008664:	d01d      	beq.n	80086a2 <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 8008666:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800866a:	d111      	bne.n	8008690 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	3304      	adds	r3, #4
 8008670:	2100      	movs	r1, #0
 8008672:	4618      	mov	r0, r3
 8008674:	f001 fb4c 	bl	8009d10 <RCCEx_PLL2_Config>
 8008678:	4603      	mov	r3, r0
 800867a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800867c:	e012      	b.n	80086a4 <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	3324      	adds	r3, #36	; 0x24
 8008682:	2102      	movs	r1, #2
 8008684:	4618      	mov	r0, r3
 8008686:	f001 fbf5 	bl	8009e74 <RCCEx_PLL3_Config>
 800868a:	4603      	mov	r3, r0
 800868c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800868e:	e009      	b.n	80086a4 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008690:	2301      	movs	r3, #1
 8008692:	75fb      	strb	r3, [r7, #23]
      break;
 8008694:	e006      	b.n	80086a4 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8008696:	bf00      	nop
 8008698:	e004      	b.n	80086a4 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800869a:	bf00      	nop
 800869c:	e002      	b.n	80086a4 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800869e:	bf00      	nop
 80086a0:	e000      	b.n	80086a4 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 80086a2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80086a4:	7dfb      	ldrb	r3, [r7, #23]
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	d10a      	bne.n	80086c0 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80086aa:	4b2e      	ldr	r3, [pc, #184]	; (8008764 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80086ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80086ae:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80086b8:	492a      	ldr	r1, [pc, #168]	; (8008764 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80086ba:	4313      	orrs	r3, r2
 80086bc:	654b      	str	r3, [r1, #84]	; 0x54
 80086be:	e001      	b.n	80086c4 <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80086c0:	7dfb      	ldrb	r3, [r7, #23]
 80086c2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	d04d      	beq.n	800876c <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80086d6:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80086da:	d02e      	beq.n	800873a <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 80086dc:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80086e0:	d828      	bhi.n	8008734 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 80086e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80086e6:	d02a      	beq.n	800873e <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 80086e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80086ec:	d822      	bhi.n	8008734 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 80086ee:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80086f2:	d026      	beq.n	8008742 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 80086f4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80086f8:	d81c      	bhi.n	8008734 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 80086fa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80086fe:	d010      	beq.n	8008722 <HAL_RCCEx_PeriphCLKConfig+0xa62>
 8008700:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008704:	d816      	bhi.n	8008734 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8008706:	2b00      	cmp	r3, #0
 8008708:	d01d      	beq.n	8008746 <HAL_RCCEx_PeriphCLKConfig+0xa86>
 800870a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800870e:	d111      	bne.n	8008734 <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	3304      	adds	r3, #4
 8008714:	2100      	movs	r1, #0
 8008716:	4618      	mov	r0, r3
 8008718:	f001 fafa 	bl	8009d10 <RCCEx_PLL2_Config>
 800871c:	4603      	mov	r3, r0
 800871e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8008720:	e012      	b.n	8008748 <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	3324      	adds	r3, #36	; 0x24
 8008726:	2102      	movs	r1, #2
 8008728:	4618      	mov	r0, r3
 800872a:	f001 fba3 	bl	8009e74 <RCCEx_PLL3_Config>
 800872e:	4603      	mov	r3, r0
 8008730:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8008732:	e009      	b.n	8008748 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008734:	2301      	movs	r3, #1
 8008736:	75fb      	strb	r3, [r7, #23]
      break;
 8008738:	e006      	b.n	8008748 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800873a:	bf00      	nop
 800873c:	e004      	b.n	8008748 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800873e:	bf00      	nop
 8008740:	e002      	b.n	8008748 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8008742:	bf00      	nop
 8008744:	e000      	b.n	8008748 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8008746:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008748:	7dfb      	ldrb	r3, [r7, #23]
 800874a:	2b00      	cmp	r3, #0
 800874c:	d10c      	bne.n	8008768 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800874e:	4b05      	ldr	r3, [pc, #20]	; (8008764 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8008750:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008752:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800875c:	4901      	ldr	r1, [pc, #4]	; (8008764 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800875e:	4313      	orrs	r3, r2
 8008760:	658b      	str	r3, [r1, #88]	; 0x58
 8008762:	e003      	b.n	800876c <HAL_RCCEx_PeriphCLKConfig+0xaac>
 8008764:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008768:	7dfb      	ldrb	r3, [r7, #23]
 800876a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008774:	2b00      	cmp	r3, #0
 8008776:	d04b      	beq.n	8008810 <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800877e:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8008782:	d02e      	beq.n	80087e2 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8008784:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8008788:	d828      	bhi.n	80087dc <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800878a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800878e:	d02a      	beq.n	80087e6 <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8008790:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008794:	d822      	bhi.n	80087dc <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8008796:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800879a:	d026      	beq.n	80087ea <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 800879c:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80087a0:	d81c      	bhi.n	80087dc <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 80087a2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80087a6:	d010      	beq.n	80087ca <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 80087a8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80087ac:	d816      	bhi.n	80087dc <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 80087ae:	2b00      	cmp	r3, #0
 80087b0:	d01d      	beq.n	80087ee <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 80087b2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80087b6:	d111      	bne.n	80087dc <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	3304      	adds	r3, #4
 80087bc:	2100      	movs	r1, #0
 80087be:	4618      	mov	r0, r3
 80087c0:	f001 faa6 	bl	8009d10 <RCCEx_PLL2_Config>
 80087c4:	4603      	mov	r3, r0
 80087c6:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80087c8:	e012      	b.n	80087f0 <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	3324      	adds	r3, #36	; 0x24
 80087ce:	2102      	movs	r1, #2
 80087d0:	4618      	mov	r0, r3
 80087d2:	f001 fb4f 	bl	8009e74 <RCCEx_PLL3_Config>
 80087d6:	4603      	mov	r3, r0
 80087d8:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80087da:	e009      	b.n	80087f0 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80087dc:	2301      	movs	r3, #1
 80087de:	75fb      	strb	r3, [r7, #23]
      break;
 80087e0:	e006      	b.n	80087f0 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 80087e2:	bf00      	nop
 80087e4:	e004      	b.n	80087f0 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 80087e6:	bf00      	nop
 80087e8:	e002      	b.n	80087f0 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 80087ea:	bf00      	nop
 80087ec:	e000      	b.n	80087f0 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 80087ee:	bf00      	nop
    }

    if(ret == HAL_OK)
 80087f0:	7dfb      	ldrb	r3, [r7, #23]
 80087f2:	2b00      	cmp	r3, #0
 80087f4:	d10a      	bne.n	800880c <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80087f6:	4b9d      	ldr	r3, [pc, #628]	; (8008a6c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80087f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80087fa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008804:	4999      	ldr	r1, [pc, #612]	; (8008a6c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8008806:	4313      	orrs	r3, r2
 8008808:	658b      	str	r3, [r1, #88]	; 0x58
 800880a:	e001      	b.n	8008810 <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800880c:	7dfb      	ldrb	r3, [r7, #23]
 800880e:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	f003 0308 	and.w	r3, r3, #8
 8008818:	2b00      	cmp	r3, #0
 800881a:	d01a      	beq.n	8008852 <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008822:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008826:	d10a      	bne.n	800883e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	3324      	adds	r3, #36	; 0x24
 800882c:	2102      	movs	r1, #2
 800882e:	4618      	mov	r0, r3
 8008830:	f001 fb20 	bl	8009e74 <RCCEx_PLL3_Config>
 8008834:	4603      	mov	r3, r0
 8008836:	2b00      	cmp	r3, #0
 8008838:	d001      	beq.n	800883e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 800883a:	2301      	movs	r3, #1
 800883c:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800883e:	4b8b      	ldr	r3, [pc, #556]	; (8008a6c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8008840:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008842:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800884c:	4987      	ldr	r1, [pc, #540]	; (8008a6c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800884e:	4313      	orrs	r3, r2
 8008850:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	f003 0310 	and.w	r3, r3, #16
 800885a:	2b00      	cmp	r3, #0
 800885c:	d01a      	beq.n	8008894 <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008864:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008868:	d10a      	bne.n	8008880 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	3324      	adds	r3, #36	; 0x24
 800886e:	2102      	movs	r1, #2
 8008870:	4618      	mov	r0, r3
 8008872:	f001 faff 	bl	8009e74 <RCCEx_PLL3_Config>
 8008876:	4603      	mov	r3, r0
 8008878:	2b00      	cmp	r3, #0
 800887a:	d001      	beq.n	8008880 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 800887c:	2301      	movs	r3, #1
 800887e:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8008880:	4b7a      	ldr	r3, [pc, #488]	; (8008a6c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8008882:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008884:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800888e:	4977      	ldr	r1, [pc, #476]	; (8008a6c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8008890:	4313      	orrs	r3, r2
 8008892:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800889c:	2b00      	cmp	r3, #0
 800889e:	d034      	beq.n	800890a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80088a6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80088aa:	d01d      	beq.n	80088e8 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 80088ac:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80088b0:	d817      	bhi.n	80088e2 <HAL_RCCEx_PeriphCLKConfig+0xc22>
 80088b2:	2b00      	cmp	r3, #0
 80088b4:	d003      	beq.n	80088be <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 80088b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80088ba:	d009      	beq.n	80088d0 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 80088bc:	e011      	b.n	80088e2 <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	3304      	adds	r3, #4
 80088c2:	2100      	movs	r1, #0
 80088c4:	4618      	mov	r0, r3
 80088c6:	f001 fa23 	bl	8009d10 <RCCEx_PLL2_Config>
 80088ca:	4603      	mov	r3, r0
 80088cc:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80088ce:	e00c      	b.n	80088ea <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	3324      	adds	r3, #36	; 0x24
 80088d4:	2102      	movs	r1, #2
 80088d6:	4618      	mov	r0, r3
 80088d8:	f001 facc 	bl	8009e74 <RCCEx_PLL3_Config>
 80088dc:	4603      	mov	r3, r0
 80088de:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80088e0:	e003      	b.n	80088ea <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80088e2:	2301      	movs	r3, #1
 80088e4:	75fb      	strb	r3, [r7, #23]
      break;
 80088e6:	e000      	b.n	80088ea <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 80088e8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80088ea:	7dfb      	ldrb	r3, [r7, #23]
 80088ec:	2b00      	cmp	r3, #0
 80088ee:	d10a      	bne.n	8008906 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80088f0:	4b5e      	ldr	r3, [pc, #376]	; (8008a6c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80088f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80088f4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80088fe:	495b      	ldr	r1, [pc, #364]	; (8008a6c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8008900:	4313      	orrs	r3, r2
 8008902:	658b      	str	r3, [r1, #88]	; 0x58
 8008904:	e001      	b.n	800890a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008906:	7dfb      	ldrb	r3, [r7, #23]
 8008908:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008912:	2b00      	cmp	r3, #0
 8008914:	d033      	beq.n	800897e <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800891c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008920:	d01c      	beq.n	800895c <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 8008922:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008926:	d816      	bhi.n	8008956 <HAL_RCCEx_PeriphCLKConfig+0xc96>
 8008928:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800892c:	d003      	beq.n	8008936 <HAL_RCCEx_PeriphCLKConfig+0xc76>
 800892e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008932:	d007      	beq.n	8008944 <HAL_RCCEx_PeriphCLKConfig+0xc84>
 8008934:	e00f      	b.n	8008956 <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008936:	4b4d      	ldr	r3, [pc, #308]	; (8008a6c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8008938:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800893a:	4a4c      	ldr	r2, [pc, #304]	; (8008a6c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800893c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008940:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8008942:	e00c      	b.n	800895e <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	3324      	adds	r3, #36	; 0x24
 8008948:	2101      	movs	r1, #1
 800894a:	4618      	mov	r0, r3
 800894c:	f001 fa92 	bl	8009e74 <RCCEx_PLL3_Config>
 8008950:	4603      	mov	r3, r0
 8008952:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8008954:	e003      	b.n	800895e <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008956:	2301      	movs	r3, #1
 8008958:	75fb      	strb	r3, [r7, #23]
      break;
 800895a:	e000      	b.n	800895e <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 800895c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800895e:	7dfb      	ldrb	r3, [r7, #23]
 8008960:	2b00      	cmp	r3, #0
 8008962:	d10a      	bne.n	800897a <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8008964:	4b41      	ldr	r3, [pc, #260]	; (8008a6c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8008966:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008968:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008972:	493e      	ldr	r1, [pc, #248]	; (8008a6c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8008974:	4313      	orrs	r3, r2
 8008976:	654b      	str	r3, [r1, #84]	; 0x54
 8008978:	e001      	b.n	800897e <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800897a:	7dfb      	ldrb	r3, [r7, #23]
 800897c:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008986:	2b00      	cmp	r3, #0
 8008988:	d029      	beq.n	80089de <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800898e:	2b00      	cmp	r3, #0
 8008990:	d003      	beq.n	800899a <HAL_RCCEx_PeriphCLKConfig+0xcda>
 8008992:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008996:	d007      	beq.n	80089a8 <HAL_RCCEx_PeriphCLKConfig+0xce8>
 8008998:	e00f      	b.n	80089ba <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800899a:	4b34      	ldr	r3, [pc, #208]	; (8008a6c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800899c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800899e:	4a33      	ldr	r2, [pc, #204]	; (8008a6c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80089a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80089a4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80089a6:	e00b      	b.n	80089c0 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	3304      	adds	r3, #4
 80089ac:	2102      	movs	r1, #2
 80089ae:	4618      	mov	r0, r3
 80089b0:	f001 f9ae 	bl	8009d10 <RCCEx_PLL2_Config>
 80089b4:	4603      	mov	r3, r0
 80089b6:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80089b8:	e002      	b.n	80089c0 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 80089ba:	2301      	movs	r3, #1
 80089bc:	75fb      	strb	r3, [r7, #23]
      break;
 80089be:	bf00      	nop
    }

    if(ret == HAL_OK)
 80089c0:	7dfb      	ldrb	r3, [r7, #23]
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	d109      	bne.n	80089da <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80089c6:	4b29      	ldr	r3, [pc, #164]	; (8008a6c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80089c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80089ca:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80089d2:	4926      	ldr	r1, [pc, #152]	; (8008a6c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80089d4:	4313      	orrs	r3, r2
 80089d6:	64cb      	str	r3, [r1, #76]	; 0x4c
 80089d8:	e001      	b.n	80089de <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80089da:	7dfb      	ldrb	r3, [r7, #23]
 80089dc:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	d00a      	beq.n	8008a00 <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	3324      	adds	r3, #36	; 0x24
 80089ee:	2102      	movs	r1, #2
 80089f0:	4618      	mov	r0, r3
 80089f2:	f001 fa3f 	bl	8009e74 <RCCEx_PLL3_Config>
 80089f6:	4603      	mov	r3, r0
 80089f8:	2b00      	cmp	r3, #0
 80089fa:	d001      	beq.n	8008a00 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 80089fc:	2301      	movs	r3, #1
 80089fe:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	d033      	beq.n	8008a74 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008a10:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008a14:	d017      	beq.n	8008a46 <HAL_RCCEx_PeriphCLKConfig+0xd86>
 8008a16:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008a1a:	d811      	bhi.n	8008a40 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8008a1c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008a20:	d013      	beq.n	8008a4a <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8008a22:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008a26:	d80b      	bhi.n	8008a40 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8008a28:	2b00      	cmp	r3, #0
 8008a2a:	d010      	beq.n	8008a4e <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 8008a2c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008a30:	d106      	bne.n	8008a40 <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008a32:	4b0e      	ldr	r3, [pc, #56]	; (8008a6c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8008a34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a36:	4a0d      	ldr	r2, [pc, #52]	; (8008a6c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8008a38:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008a3c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8008a3e:	e007      	b.n	8008a50 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008a40:	2301      	movs	r3, #1
 8008a42:	75fb      	strb	r3, [r7, #23]
      break;
 8008a44:	e004      	b.n	8008a50 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8008a46:	bf00      	nop
 8008a48:	e002      	b.n	8008a50 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8008a4a:	bf00      	nop
 8008a4c:	e000      	b.n	8008a50 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8008a4e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008a50:	7dfb      	ldrb	r3, [r7, #23]
 8008a52:	2b00      	cmp	r3, #0
 8008a54:	d10c      	bne.n	8008a70 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8008a56:	4b05      	ldr	r3, [pc, #20]	; (8008a6c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8008a58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008a5a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008a62:	4902      	ldr	r1, [pc, #8]	; (8008a6c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8008a64:	4313      	orrs	r3, r2
 8008a66:	654b      	str	r3, [r1, #84]	; 0x54
 8008a68:	e004      	b.n	8008a74 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 8008a6a:	bf00      	nop
 8008a6c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008a70:	7dfb      	ldrb	r3, [r7, #23]
 8008a72:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008a7c:	2b00      	cmp	r3, #0
 8008a7e:	d008      	beq.n	8008a92 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8008a80:	4b31      	ldr	r3, [pc, #196]	; (8008b48 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8008a82:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008a84:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008a8c:	492e      	ldr	r1, [pc, #184]	; (8008b48 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8008a8e:	4313      	orrs	r3, r2
 8008a90:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	d009      	beq.n	8008ab2 <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8008a9e:	4b2a      	ldr	r3, [pc, #168]	; (8008b48 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8008aa0:	691b      	ldr	r3, [r3, #16]
 8008aa2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8008aac:	4926      	ldr	r1, [pc, #152]	; (8008b48 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8008aae:	4313      	orrs	r3, r2
 8008ab0:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008aba:	2b00      	cmp	r3, #0
 8008abc:	d008      	beq.n	8008ad0 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8008abe:	4b22      	ldr	r3, [pc, #136]	; (8008b48 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8008ac0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008ac2:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008aca:	491f      	ldr	r1, [pc, #124]	; (8008b48 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8008acc:	4313      	orrs	r3, r2
 8008ace:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008ad8:	2b00      	cmp	r3, #0
 8008ada:	d00d      	beq.n	8008af8 <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8008adc:	4b1a      	ldr	r3, [pc, #104]	; (8008b48 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8008ade:	691b      	ldr	r3, [r3, #16]
 8008ae0:	4a19      	ldr	r2, [pc, #100]	; (8008b48 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8008ae2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008ae6:	6113      	str	r3, [r2, #16]
 8008ae8:	4b17      	ldr	r3, [pc, #92]	; (8008b48 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8008aea:	691a      	ldr	r2, [r3, #16]
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8008af2:	4915      	ldr	r1, [pc, #84]	; (8008b48 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8008af4:	4313      	orrs	r3, r2
 8008af6:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	2b00      	cmp	r3, #0
 8008afe:	da08      	bge.n	8008b12 <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8008b00:	4b11      	ldr	r3, [pc, #68]	; (8008b48 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8008b02:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008b04:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008b0c:	490e      	ldr	r1, [pc, #56]	; (8008b48 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8008b0e:	4313      	orrs	r3, r2
 8008b10:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	d009      	beq.n	8008b32 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8008b1e:	4b0a      	ldr	r3, [pc, #40]	; (8008b48 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8008b20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008b22:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008b2c:	4906      	ldr	r1, [pc, #24]	; (8008b48 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8008b2e:	4313      	orrs	r3, r2
 8008b30:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8008b32:	7dbb      	ldrb	r3, [r7, #22]
 8008b34:	2b00      	cmp	r3, #0
 8008b36:	d101      	bne.n	8008b3c <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 8008b38:	2300      	movs	r3, #0
 8008b3a:	e000      	b.n	8008b3e <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 8008b3c:	2301      	movs	r3, #1
}
 8008b3e:	4618      	mov	r0, r3
 8008b40:	3718      	adds	r7, #24
 8008b42:	46bd      	mov	sp, r7
 8008b44:	bd80      	pop	{r7, pc}
 8008b46:	bf00      	nop
 8008b48:	58024400 	.word	0x58024400

08008b4c <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8008b4c:	b580      	push	{r7, lr}
 8008b4e:	b090      	sub	sp, #64	; 0x40
 8008b50:	af00      	add	r7, sp, #0
 8008b52:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008b5a:	f040 8095 	bne.w	8008c88 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 8008b5e:	4b97      	ldr	r3, [pc, #604]	; (8008dbc <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8008b60:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008b62:	f003 0307 	and.w	r3, r3, #7
 8008b66:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8008b68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b6a:	2b04      	cmp	r3, #4
 8008b6c:	f200 8088 	bhi.w	8008c80 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 8008b70:	a201      	add	r2, pc, #4	; (adr r2, 8008b78 <HAL_RCCEx_GetPeriphCLKFreq+0x2c>)
 8008b72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b76:	bf00      	nop
 8008b78:	08008b8d 	.word	0x08008b8d
 8008b7c:	08008bb5 	.word	0x08008bb5
 8008b80:	08008bdd 	.word	0x08008bdd
 8008b84:	08008c79 	.word	0x08008c79
 8008b88:	08008c05 	.word	0x08008c05
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008b8c:	4b8b      	ldr	r3, [pc, #556]	; (8008dbc <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008b94:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008b98:	d108      	bne.n	8008bac <HAL_RCCEx_GetPeriphCLKFreq+0x60>
         {
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008b9a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008b9e:	4618      	mov	r0, r3
 8008ba0:	f000 ff64 	bl	8009a6c <HAL_RCCEx_GetPLL1ClockFreq>
           frequency = pll1_clocks.PLL1_Q_Frequency;
 8008ba4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ba6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008ba8:	f000 bc94 	b.w	80094d4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8008bac:	2300      	movs	r3, #0
 8008bae:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008bb0:	f000 bc90 	b.w	80094d4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008bb4:	4b81      	ldr	r3, [pc, #516]	; (8008dbc <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008bbc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008bc0:	d108      	bne.n	8008bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008bc2:	f107 0318 	add.w	r3, r7, #24
 8008bc6:	4618      	mov	r0, r3
 8008bc8:	f000 fca8 	bl	800951c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008bcc:	69bb      	ldr	r3, [r7, #24]
 8008bce:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008bd0:	f000 bc80 	b.w	80094d4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8008bd4:	2300      	movs	r3, #0
 8008bd6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008bd8:	f000 bc7c 	b.w	80094d4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008bdc:	4b77      	ldr	r3, [pc, #476]	; (8008dbc <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008be4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008be8:	d108      	bne.n	8008bfc <HAL_RCCEx_GetPeriphCLKFreq+0xb0>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008bea:	f107 030c 	add.w	r3, r7, #12
 8008bee:	4618      	mov	r0, r3
 8008bf0:	f000 fde8 	bl	80097c4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008bf4:	68fb      	ldr	r3, [r7, #12]
 8008bf6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008bf8:	f000 bc6c 	b.w	80094d4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8008bfc:	2300      	movs	r3, #0
 8008bfe:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008c00:	f000 bc68 	b.w	80094d4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8008c04:	4b6d      	ldr	r3, [pc, #436]	; (8008dbc <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8008c06:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008c08:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008c0c:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008c0e:	4b6b      	ldr	r3, [pc, #428]	; (8008dbc <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	f003 0304 	and.w	r3, r3, #4
 8008c16:	2b04      	cmp	r3, #4
 8008c18:	d10c      	bne.n	8008c34 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
 8008c1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c1c:	2b00      	cmp	r3, #0
 8008c1e:	d109      	bne.n	8008c34 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008c20:	4b66      	ldr	r3, [pc, #408]	; (8008dbc <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	08db      	lsrs	r3, r3, #3
 8008c26:	f003 0303 	and.w	r3, r3, #3
 8008c2a:	4a65      	ldr	r2, [pc, #404]	; (8008dc0 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 8008c2c:	fa22 f303 	lsr.w	r3, r2, r3
 8008c30:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008c32:	e01f      	b.n	8008c74 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008c34:	4b61      	ldr	r3, [pc, #388]	; (8008dbc <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008c3c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008c40:	d106      	bne.n	8008c50 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
 8008c42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c44:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008c48:	d102      	bne.n	8008c50 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8008c4a:	4b5e      	ldr	r3, [pc, #376]	; (8008dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8008c4c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008c4e:	e011      	b.n	8008c74 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008c50:	4b5a      	ldr	r3, [pc, #360]	; (8008dbc <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008c58:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008c5c:	d106      	bne.n	8008c6c <HAL_RCCEx_GetPeriphCLKFreq+0x120>
 8008c5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c60:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008c64:	d102      	bne.n	8008c6c <HAL_RCCEx_GetPeriphCLKFreq+0x120>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8008c66:	4b58      	ldr	r3, [pc, #352]	; (8008dc8 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 8008c68:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008c6a:	e003      	b.n	8008c74 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8008c6c:	2300      	movs	r3, #0
 8008c6e:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8008c70:	f000 bc30 	b.w	80094d4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8008c74:	f000 bc2e 	b.w	80094d4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8008c78:	4b54      	ldr	r3, [pc, #336]	; (8008dcc <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 8008c7a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008c7c:	f000 bc2a 	b.w	80094d4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      default :
        {
          frequency = 0;
 8008c80:	2300      	movs	r3, #0
 8008c82:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008c84:	f000 bc26 	b.w	80094d4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008c8e:	f040 809f 	bne.w	8008dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x284>
    {

      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 8008c92:	4b4a      	ldr	r3, [pc, #296]	; (8008dbc <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8008c94:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008c96:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 8008c9a:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8008c9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c9e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008ca2:	d04d      	beq.n	8008d40 <HAL_RCCEx_GetPeriphCLKFreq+0x1f4>
 8008ca4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ca6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008caa:	f200 8084 	bhi.w	8008db6 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 8008cae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cb0:	2bc0      	cmp	r3, #192	; 0xc0
 8008cb2:	d07d      	beq.n	8008db0 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 8008cb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cb6:	2bc0      	cmp	r3, #192	; 0xc0
 8008cb8:	d87d      	bhi.n	8008db6 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 8008cba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cbc:	2b80      	cmp	r3, #128	; 0x80
 8008cbe:	d02d      	beq.n	8008d1c <HAL_RCCEx_GetPeriphCLKFreq+0x1d0>
 8008cc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cc2:	2b80      	cmp	r3, #128	; 0x80
 8008cc4:	d877      	bhi.n	8008db6 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 8008cc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cc8:	2b00      	cmp	r3, #0
 8008cca:	d003      	beq.n	8008cd4 <HAL_RCCEx_GetPeriphCLKFreq+0x188>
 8008ccc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cce:	2b40      	cmp	r3, #64	; 0x40
 8008cd0:	d012      	beq.n	8008cf8 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
 8008cd2:	e070      	b.n	8008db6 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
      {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008cd4:	4b39      	ldr	r3, [pc, #228]	; (8008dbc <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008cdc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008ce0:	d107      	bne.n	8008cf2 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008ce2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008ce6:	4618      	mov	r0, r3
 8008ce8:	f000 fec0 	bl	8009a6c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008cec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cee:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008cf0:	e3f0      	b.n	80094d4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8008cf2:	2300      	movs	r3, #0
 8008cf4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008cf6:	e3ed      	b.n	80094d4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008cf8:	4b30      	ldr	r3, [pc, #192]	; (8008dbc <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008d00:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008d04:	d107      	bne.n	8008d16 <HAL_RCCEx_GetPeriphCLKFreq+0x1ca>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008d06:	f107 0318 	add.w	r3, r7, #24
 8008d0a:	4618      	mov	r0, r3
 8008d0c:	f000 fc06 	bl	800951c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008d10:	69bb      	ldr	r3, [r7, #24]
 8008d12:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008d14:	e3de      	b.n	80094d4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8008d16:	2300      	movs	r3, #0
 8008d18:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008d1a:	e3db      	b.n	80094d4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008d1c:	4b27      	ldr	r3, [pc, #156]	; (8008dbc <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008d24:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008d28:	d107      	bne.n	8008d3a <HAL_RCCEx_GetPeriphCLKFreq+0x1ee>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008d2a:	f107 030c 	add.w	r3, r7, #12
 8008d2e:	4618      	mov	r0, r3
 8008d30:	f000 fd48 	bl	80097c4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008d34:	68fb      	ldr	r3, [r7, #12]
 8008d36:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008d38:	e3cc      	b.n	80094d4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8008d3a:	2300      	movs	r3, #0
 8008d3c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008d3e:	e3c9      	b.n	80094d4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8008d40:	4b1e      	ldr	r3, [pc, #120]	; (8008dbc <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8008d42:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008d44:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008d48:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008d4a:	4b1c      	ldr	r3, [pc, #112]	; (8008dbc <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	f003 0304 	and.w	r3, r3, #4
 8008d52:	2b04      	cmp	r3, #4
 8008d54:	d10c      	bne.n	8008d70 <HAL_RCCEx_GetPeriphCLKFreq+0x224>
 8008d56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d58:	2b00      	cmp	r3, #0
 8008d5a:	d109      	bne.n	8008d70 <HAL_RCCEx_GetPeriphCLKFreq+0x224>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008d5c:	4b17      	ldr	r3, [pc, #92]	; (8008dbc <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	08db      	lsrs	r3, r3, #3
 8008d62:	f003 0303 	and.w	r3, r3, #3
 8008d66:	4a16      	ldr	r2, [pc, #88]	; (8008dc0 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 8008d68:	fa22 f303 	lsr.w	r3, r2, r3
 8008d6c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008d6e:	e01e      	b.n	8008dae <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008d70:	4b12      	ldr	r3, [pc, #72]	; (8008dbc <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008d78:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008d7c:	d106      	bne.n	8008d8c <HAL_RCCEx_GetPeriphCLKFreq+0x240>
 8008d7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d80:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008d84:	d102      	bne.n	8008d8c <HAL_RCCEx_GetPeriphCLKFreq+0x240>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8008d86:	4b0f      	ldr	r3, [pc, #60]	; (8008dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8008d88:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008d8a:	e010      	b.n	8008dae <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008d8c:	4b0b      	ldr	r3, [pc, #44]	; (8008dbc <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008d94:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008d98:	d106      	bne.n	8008da8 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
 8008d9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d9c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008da0:	d102      	bne.n	8008da8 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8008da2:	4b09      	ldr	r3, [pc, #36]	; (8008dc8 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 8008da4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008da6:	e002      	b.n	8008dae <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8008da8:	2300      	movs	r3, #0
 8008daa:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8008dac:	e392      	b.n	80094d4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8008dae:	e391      	b.n	80094d4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8008db0:	4b06      	ldr	r3, [pc, #24]	; (8008dcc <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 8008db2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008db4:	e38e      	b.n	80094d4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      default :
        {
          frequency = 0;
 8008db6:	2300      	movs	r3, #0
 8008db8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008dba:	e38b      	b.n	80094d4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8008dbc:	58024400 	.word	0x58024400
 8008dc0:	03d09000 	.word	0x03d09000
 8008dc4:	003d0900 	.word	0x003d0900
 8008dc8:	007a1200 	.word	0x007a1200
 8008dcc:	00bb8000 	.word	0x00bb8000
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008dd6:	f040 809c 	bne.w	8008f12 <HAL_RCCEx_GetPeriphCLKFreq+0x3c6>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 8008dda:	4b9d      	ldr	r3, [pc, #628]	; (8009050 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8008ddc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008dde:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 8008de2:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8008de4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008de6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008dea:	d054      	beq.n	8008e96 <HAL_RCCEx_GetPeriphCLKFreq+0x34a>
 8008dec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008dee:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008df2:	f200 808b 	bhi.w	8008f0c <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 8008df6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008df8:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8008dfc:	f000 8083 	beq.w	8008f06 <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
 8008e00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e02:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8008e06:	f200 8081 	bhi.w	8008f0c <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 8008e0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e0c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008e10:	d02f      	beq.n	8008e72 <HAL_RCCEx_GetPeriphCLKFreq+0x326>
 8008e12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e14:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008e18:	d878      	bhi.n	8008f0c <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 8008e1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e1c:	2b00      	cmp	r3, #0
 8008e1e:	d004      	beq.n	8008e2a <HAL_RCCEx_GetPeriphCLKFreq+0x2de>
 8008e20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e22:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008e26:	d012      	beq.n	8008e4e <HAL_RCCEx_GetPeriphCLKFreq+0x302>
 8008e28:	e070      	b.n	8008f0c <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
      {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008e2a:	4b89      	ldr	r3, [pc, #548]	; (8009050 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008e32:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008e36:	d107      	bne.n	8008e48 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008e38:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008e3c:	4618      	mov	r0, r3
 8008e3e:	f000 fe15 	bl	8009a6c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008e42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e44:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008e46:	e345      	b.n	80094d4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8008e48:	2300      	movs	r3, #0
 8008e4a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008e4c:	e342      	b.n	80094d4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008e4e:	4b80      	ldr	r3, [pc, #512]	; (8009050 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008e56:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008e5a:	d107      	bne.n	8008e6c <HAL_RCCEx_GetPeriphCLKFreq+0x320>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008e5c:	f107 0318 	add.w	r3, r7, #24
 8008e60:	4618      	mov	r0, r3
 8008e62:	f000 fb5b 	bl	800951c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008e66:	69bb      	ldr	r3, [r7, #24]
 8008e68:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008e6a:	e333      	b.n	80094d4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8008e6c:	2300      	movs	r3, #0
 8008e6e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008e70:	e330      	b.n	80094d4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008e72:	4b77      	ldr	r3, [pc, #476]	; (8009050 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008e7a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008e7e:	d107      	bne.n	8008e90 <HAL_RCCEx_GetPeriphCLKFreq+0x344>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008e80:	f107 030c 	add.w	r3, r7, #12
 8008e84:	4618      	mov	r0, r3
 8008e86:	f000 fc9d 	bl	80097c4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008e8a:	68fb      	ldr	r3, [r7, #12]
 8008e8c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008e8e:	e321      	b.n	80094d4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8008e90:	2300      	movs	r3, #0
 8008e92:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008e94:	e31e      	b.n	80094d4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8008e96:	4b6e      	ldr	r3, [pc, #440]	; (8009050 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8008e98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008e9a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008e9e:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008ea0:	4b6b      	ldr	r3, [pc, #428]	; (8009050 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	f003 0304 	and.w	r3, r3, #4
 8008ea8:	2b04      	cmp	r3, #4
 8008eaa:	d10c      	bne.n	8008ec6 <HAL_RCCEx_GetPeriphCLKFreq+0x37a>
 8008eac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008eae:	2b00      	cmp	r3, #0
 8008eb0:	d109      	bne.n	8008ec6 <HAL_RCCEx_GetPeriphCLKFreq+0x37a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008eb2:	4b67      	ldr	r3, [pc, #412]	; (8009050 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	08db      	lsrs	r3, r3, #3
 8008eb8:	f003 0303 	and.w	r3, r3, #3
 8008ebc:	4a65      	ldr	r2, [pc, #404]	; (8009054 <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
 8008ebe:	fa22 f303 	lsr.w	r3, r2, r3
 8008ec2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008ec4:	e01e      	b.n	8008f04 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008ec6:	4b62      	ldr	r3, [pc, #392]	; (8009050 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008ece:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008ed2:	d106      	bne.n	8008ee2 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 8008ed4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ed6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008eda:	d102      	bne.n	8008ee2 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8008edc:	4b5e      	ldr	r3, [pc, #376]	; (8009058 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
 8008ede:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008ee0:	e010      	b.n	8008f04 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008ee2:	4b5b      	ldr	r3, [pc, #364]	; (8009050 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008eea:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008eee:	d106      	bne.n	8008efe <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 8008ef0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ef2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008ef6:	d102      	bne.n	8008efe <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8008ef8:	4b58      	ldr	r3, [pc, #352]	; (800905c <HAL_RCCEx_GetPeriphCLKFreq+0x510>)
 8008efa:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008efc:	e002      	b.n	8008f04 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8008efe:	2300      	movs	r3, #0
 8008f00:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8008f02:	e2e7      	b.n	80094d4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8008f04:	e2e6      	b.n	80094d4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8008f06:	4b56      	ldr	r3, [pc, #344]	; (8009060 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8008f08:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008f0a:	e2e3      	b.n	80094d4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      default :
        {
          frequency = 0;
 8008f0c:	2300      	movs	r3, #0
 8008f0e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008f10:	e2e0      	b.n	80094d4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008f18:	f040 80a7 	bne.w	800906a <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 8008f1c:	4b4c      	ldr	r3, [pc, #304]	; (8009050 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8008f1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008f20:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8008f24:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8008f26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f28:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008f2c:	d055      	beq.n	8008fda <HAL_RCCEx_GetPeriphCLKFreq+0x48e>
 8008f2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f30:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008f34:	f200 8096 	bhi.w	8009064 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
 8008f38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f3a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008f3e:	f000 8084 	beq.w	800904a <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
 8008f42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f44:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008f48:	f200 808c 	bhi.w	8009064 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
 8008f4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f4e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008f52:	d030      	beq.n	8008fb6 <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
 8008f54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f56:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008f5a:	f200 8083 	bhi.w	8009064 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
 8008f5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f60:	2b00      	cmp	r3, #0
 8008f62:	d004      	beq.n	8008f6e <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 8008f64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f66:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008f6a:	d012      	beq.n	8008f92 <HAL_RCCEx_GetPeriphCLKFreq+0x446>
 8008f6c:	e07a      	b.n	8009064 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
      {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008f6e:	4b38      	ldr	r3, [pc, #224]	; (8009050 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008f76:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008f7a:	d107      	bne.n	8008f8c <HAL_RCCEx_GetPeriphCLKFreq+0x440>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008f7c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008f80:	4618      	mov	r0, r3
 8008f82:	f000 fd73 	bl	8009a6c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008f86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f88:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008f8a:	e2a3      	b.n	80094d4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8008f8c:	2300      	movs	r3, #0
 8008f8e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008f90:	e2a0      	b.n	80094d4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008f92:	4b2f      	ldr	r3, [pc, #188]	; (8009050 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8008f94:	681b      	ldr	r3, [r3, #0]
 8008f96:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008f9a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008f9e:	d107      	bne.n	8008fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x464>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008fa0:	f107 0318 	add.w	r3, r7, #24
 8008fa4:	4618      	mov	r0, r3
 8008fa6:	f000 fab9 	bl	800951c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008faa:	69bb      	ldr	r3, [r7, #24]
 8008fac:	63fb      	str	r3, [r7, #60]	; 0x3c
          }
         else
         {
           frequency = 0;
         }
          break;
 8008fae:	e291      	b.n	80094d4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8008fb0:	2300      	movs	r3, #0
 8008fb2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008fb4:	e28e      	b.n	80094d4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008fb6:	4b26      	ldr	r3, [pc, #152]	; (8009050 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8008fb8:	681b      	ldr	r3, [r3, #0]
 8008fba:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008fbe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008fc2:	d107      	bne.n	8008fd4 <HAL_RCCEx_GetPeriphCLKFreq+0x488>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008fc4:	f107 030c 	add.w	r3, r7, #12
 8008fc8:	4618      	mov	r0, r3
 8008fca:	f000 fbfb 	bl	80097c4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008fce:	68fb      	ldr	r3, [r7, #12]
 8008fd0:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008fd2:	e27f      	b.n	80094d4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8008fd4:	2300      	movs	r3, #0
 8008fd6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008fd8:	e27c      	b.n	80094d4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8008fda:	4b1d      	ldr	r3, [pc, #116]	; (8009050 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8008fdc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008fde:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008fe2:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008fe4:	4b1a      	ldr	r3, [pc, #104]	; (8009050 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	f003 0304 	and.w	r3, r3, #4
 8008fec:	2b04      	cmp	r3, #4
 8008fee:	d10c      	bne.n	800900a <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
 8008ff0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ff2:	2b00      	cmp	r3, #0
 8008ff4:	d109      	bne.n	800900a <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008ff6:	4b16      	ldr	r3, [pc, #88]	; (8009050 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	08db      	lsrs	r3, r3, #3
 8008ffc:	f003 0303 	and.w	r3, r3, #3
 8009000:	4a14      	ldr	r2, [pc, #80]	; (8009054 <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
 8009002:	fa22 f303 	lsr.w	r3, r2, r3
 8009006:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009008:	e01e      	b.n	8009048 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800900a:	4b11      	ldr	r3, [pc, #68]	; (8009050 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009012:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009016:	d106      	bne.n	8009026 <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
 8009018:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800901a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800901e:	d102      	bne.n	8009026 <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8009020:	4b0d      	ldr	r3, [pc, #52]	; (8009058 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
 8009022:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009024:	e010      	b.n	8009048 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009026:	4b0a      	ldr	r3, [pc, #40]	; (8009050 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800902e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009032:	d106      	bne.n	8009042 <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
 8009034:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009036:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800903a:	d102      	bne.n	8009042 <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800903c:	4b07      	ldr	r3, [pc, #28]	; (800905c <HAL_RCCEx_GetPeriphCLKFreq+0x510>)
 800903e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009040:	e002      	b.n	8009048 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8009042:	2300      	movs	r3, #0
 8009044:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8009046:	e245      	b.n	80094d4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8009048:	e244      	b.n	80094d4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800904a:	4b05      	ldr	r3, [pc, #20]	; (8009060 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800904c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800904e:	e241      	b.n	80094d4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8009050:	58024400 	.word	0x58024400
 8009054:	03d09000 	.word	0x03d09000
 8009058:	003d0900 	.word	0x003d0900
 800905c:	007a1200 	.word	0x007a1200
 8009060:	00bb8000 	.word	0x00bb8000
        }

      default :
        {
          frequency = 0;
 8009064:	2300      	movs	r3, #0
 8009066:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009068:	e234      	b.n	80094d4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009070:	f040 809c 	bne.w	80091ac <HAL_RCCEx_GetPeriphCLKFreq+0x660>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 8009074:	4b9b      	ldr	r3, [pc, #620]	; (80092e4 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8009076:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009078:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800907c:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800907e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009080:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009084:	d054      	beq.n	8009130 <HAL_RCCEx_GetPeriphCLKFreq+0x5e4>
 8009086:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009088:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800908c:	f200 808b 	bhi.w	80091a6 <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
 8009090:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009092:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009096:	f000 8083 	beq.w	80091a0 <HAL_RCCEx_GetPeriphCLKFreq+0x654>
 800909a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800909c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80090a0:	f200 8081 	bhi.w	80091a6 <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
 80090a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80090aa:	d02f      	beq.n	800910c <HAL_RCCEx_GetPeriphCLKFreq+0x5c0>
 80090ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090ae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80090b2:	d878      	bhi.n	80091a6 <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
 80090b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090b6:	2b00      	cmp	r3, #0
 80090b8:	d004      	beq.n	80090c4 <HAL_RCCEx_GetPeriphCLKFreq+0x578>
 80090ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80090c0:	d012      	beq.n	80090e8 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>
 80090c2:	e070      	b.n	80091a6 <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80090c4:	4b87      	ldr	r3, [pc, #540]	; (80092e4 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80090cc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80090d0:	d107      	bne.n	80090e2 <HAL_RCCEx_GetPeriphCLKFreq+0x596>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80090d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80090d6:	4618      	mov	r0, r3
 80090d8:	f000 fcc8 	bl	8009a6c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80090dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090de:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80090e0:	e1f8      	b.n	80094d4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 80090e2:	2300      	movs	r3, #0
 80090e4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80090e6:	e1f5      	b.n	80094d4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80090e8:	4b7e      	ldr	r3, [pc, #504]	; (80092e4 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 80090ea:	681b      	ldr	r3, [r3, #0]
 80090ec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80090f0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80090f4:	d107      	bne.n	8009106 <HAL_RCCEx_GetPeriphCLKFreq+0x5ba>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80090f6:	f107 0318 	add.w	r3, r7, #24
 80090fa:	4618      	mov	r0, r3
 80090fc:	f000 fa0e 	bl	800951c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009100:	69bb      	ldr	r3, [r7, #24]
 8009102:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8009104:	e1e6      	b.n	80094d4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8009106:	2300      	movs	r3, #0
 8009108:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800910a:	e1e3      	b.n	80094d4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800910c:	4b75      	ldr	r3, [pc, #468]	; (80092e4 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800910e:	681b      	ldr	r3, [r3, #0]
 8009110:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009114:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009118:	d107      	bne.n	800912a <HAL_RCCEx_GetPeriphCLKFreq+0x5de>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800911a:	f107 030c 	add.w	r3, r7, #12
 800911e:	4618      	mov	r0, r3
 8009120:	f000 fb50 	bl	80097c4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8009124:	68fb      	ldr	r3, [r7, #12]
 8009126:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8009128:	e1d4      	b.n	80094d4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800912a:	2300      	movs	r3, #0
 800912c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800912e:	e1d1      	b.n	80094d4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8009130:	4b6c      	ldr	r3, [pc, #432]	; (80092e4 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8009132:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009134:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009138:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800913a:	4b6a      	ldr	r3, [pc, #424]	; (80092e4 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	f003 0304 	and.w	r3, r3, #4
 8009142:	2b04      	cmp	r3, #4
 8009144:	d10c      	bne.n	8009160 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 8009146:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009148:	2b00      	cmp	r3, #0
 800914a:	d109      	bne.n	8009160 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800914c:	4b65      	ldr	r3, [pc, #404]	; (80092e4 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	08db      	lsrs	r3, r3, #3
 8009152:	f003 0303 	and.w	r3, r3, #3
 8009156:	4a64      	ldr	r2, [pc, #400]	; (80092e8 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>)
 8009158:	fa22 f303 	lsr.w	r3, r2, r3
 800915c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800915e:	e01e      	b.n	800919e <HAL_RCCEx_GetPeriphCLKFreq+0x652>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009160:	4b60      	ldr	r3, [pc, #384]	; (80092e4 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009168:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800916c:	d106      	bne.n	800917c <HAL_RCCEx_GetPeriphCLKFreq+0x630>
 800916e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009170:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009174:	d102      	bne.n	800917c <HAL_RCCEx_GetPeriphCLKFreq+0x630>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8009176:	4b5d      	ldr	r3, [pc, #372]	; (80092ec <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>)
 8009178:	63fb      	str	r3, [r7, #60]	; 0x3c
 800917a:	e010      	b.n	800919e <HAL_RCCEx_GetPeriphCLKFreq+0x652>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800917c:	4b59      	ldr	r3, [pc, #356]	; (80092e4 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009184:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009188:	d106      	bne.n	8009198 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 800918a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800918c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009190:	d102      	bne.n	8009198 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8009192:	4b57      	ldr	r3, [pc, #348]	; (80092f0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>)
 8009194:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009196:	e002      	b.n	800919e <HAL_RCCEx_GetPeriphCLKFreq+0x652>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8009198:	2300      	movs	r3, #0
 800919a:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800919c:	e19a      	b.n	80094d4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 800919e:	e199      	b.n	80094d4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80091a0:	4b54      	ldr	r3, [pc, #336]	; (80092f4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80091a2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80091a4:	e196      	b.n	80094d4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      default :
        {
          frequency = 0;
 80091a6:	2300      	movs	r3, #0
 80091a8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80091aa:	e193      	b.n	80094d4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80091b2:	d173      	bne.n	800929c <HAL_RCCEx_GetPeriphCLKFreq+0x750>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 80091b4:	4b4b      	ldr	r3, [pc, #300]	; (80092e4 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 80091b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80091b8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80091bc:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 80091be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091c0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80091c4:	d02f      	beq.n	8009226 <HAL_RCCEx_GetPeriphCLKFreq+0x6da>
 80091c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091c8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80091cc:	d863      	bhi.n	8009296 <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
 80091ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091d0:	2b00      	cmp	r3, #0
 80091d2:	d004      	beq.n	80091de <HAL_RCCEx_GetPeriphCLKFreq+0x692>
 80091d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80091da:	d012      	beq.n	8009202 <HAL_RCCEx_GetPeriphCLKFreq+0x6b6>
 80091dc:	e05b      	b.n	8009296 <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80091de:	4b41      	ldr	r3, [pc, #260]	; (80092e4 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 80091e0:	681b      	ldr	r3, [r3, #0]
 80091e2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80091e6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80091ea:	d107      	bne.n	80091fc <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80091ec:	f107 0318 	add.w	r3, r7, #24
 80091f0:	4618      	mov	r0, r3
 80091f2:	f000 f993 	bl	800951c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80091f6:	69bb      	ldr	r3, [r7, #24]
 80091f8:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80091fa:	e16b      	b.n	80094d4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 80091fc:	2300      	movs	r3, #0
 80091fe:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009200:	e168      	b.n	80094d4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009202:	4b38      	ldr	r3, [pc, #224]	; (80092e4 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800920a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800920e:	d107      	bne.n	8009220 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009210:	f107 030c 	add.w	r3, r7, #12
 8009214:	4618      	mov	r0, r3
 8009216:	f000 fad5 	bl	80097c4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800921a:	697b      	ldr	r3, [r7, #20]
 800921c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800921e:	e159      	b.n	80094d4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8009220:	2300      	movs	r3, #0
 8009222:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009224:	e156      	b.n	80094d4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8009226:	4b2f      	ldr	r3, [pc, #188]	; (80092e4 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8009228:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800922a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800922e:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009230:	4b2c      	ldr	r3, [pc, #176]	; (80092e4 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8009232:	681b      	ldr	r3, [r3, #0]
 8009234:	f003 0304 	and.w	r3, r3, #4
 8009238:	2b04      	cmp	r3, #4
 800923a:	d10c      	bne.n	8009256 <HAL_RCCEx_GetPeriphCLKFreq+0x70a>
 800923c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800923e:	2b00      	cmp	r3, #0
 8009240:	d109      	bne.n	8009256 <HAL_RCCEx_GetPeriphCLKFreq+0x70a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009242:	4b28      	ldr	r3, [pc, #160]	; (80092e4 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	08db      	lsrs	r3, r3, #3
 8009248:	f003 0303 	and.w	r3, r3, #3
 800924c:	4a26      	ldr	r2, [pc, #152]	; (80092e8 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>)
 800924e:	fa22 f303 	lsr.w	r3, r2, r3
 8009252:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009254:	e01e      	b.n	8009294 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009256:	4b23      	ldr	r3, [pc, #140]	; (80092e4 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8009258:	681b      	ldr	r3, [r3, #0]
 800925a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800925e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009262:	d106      	bne.n	8009272 <HAL_RCCEx_GetPeriphCLKFreq+0x726>
 8009264:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009266:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800926a:	d102      	bne.n	8009272 <HAL_RCCEx_GetPeriphCLKFreq+0x726>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800926c:	4b1f      	ldr	r3, [pc, #124]	; (80092ec <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>)
 800926e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009270:	e010      	b.n	8009294 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009272:	4b1c      	ldr	r3, [pc, #112]	; (80092e4 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8009274:	681b      	ldr	r3, [r3, #0]
 8009276:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800927a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800927e:	d106      	bne.n	800928e <HAL_RCCEx_GetPeriphCLKFreq+0x742>
 8009280:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009282:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009286:	d102      	bne.n	800928e <HAL_RCCEx_GetPeriphCLKFreq+0x742>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8009288:	4b19      	ldr	r3, [pc, #100]	; (80092f0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>)
 800928a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800928c:	e002      	b.n	8009294 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800928e:	2300      	movs	r3, #0
 8009290:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8009292:	e11f      	b.n	80094d4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8009294:	e11e      	b.n	80094d4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      default :
        {
          frequency = 0;
 8009296:	2300      	movs	r3, #0
 8009298:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800929a:	e11b      	b.n	80094d4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80092a2:	d13e      	bne.n	8009322 <HAL_RCCEx_GetPeriphCLKFreq+0x7d6>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 80092a4:	4b0f      	ldr	r3, [pc, #60]	; (80092e4 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 80092a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80092a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80092ac:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 80092ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092b0:	2b00      	cmp	r3, #0
 80092b2:	d004      	beq.n	80092be <HAL_RCCEx_GetPeriphCLKFreq+0x772>
 80092b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80092ba:	d01d      	beq.n	80092f8 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 80092bc:	e02e      	b.n	800931c <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80092be:	4b09      	ldr	r3, [pc, #36]	; (80092e4 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 80092c0:	681b      	ldr	r3, [r3, #0]
 80092c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80092c6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80092ca:	d107      	bne.n	80092dc <HAL_RCCEx_GetPeriphCLKFreq+0x790>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80092cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80092d0:	4618      	mov	r0, r3
 80092d2:	f000 fbcb 	bl	8009a6c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80092d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092d8:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80092da:	e0fb      	b.n	80094d4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 80092dc:	2300      	movs	r3, #0
 80092de:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80092e0:	e0f8      	b.n	80094d4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 80092e2:	bf00      	nop
 80092e4:	58024400 	.word	0x58024400
 80092e8:	03d09000 	.word	0x03d09000
 80092ec:	003d0900 	.word	0x003d0900
 80092f0:	007a1200 	.word	0x007a1200
 80092f4:	00bb8000 	.word	0x00bb8000
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80092f8:	4b79      	ldr	r3, [pc, #484]	; (80094e0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009300:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009304:	d107      	bne.n	8009316 <HAL_RCCEx_GetPeriphCLKFreq+0x7ca>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009306:	f107 0318 	add.w	r3, r7, #24
 800930a:	4618      	mov	r0, r3
 800930c:	f000 f906 	bl	800951c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8009310:	6a3b      	ldr	r3, [r7, #32]
 8009312:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8009314:	e0de      	b.n	80094d4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 8009316:	2300      	movs	r3, #0
 8009318:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800931a:	e0db      	b.n	80094d4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      default :
        {
          frequency = 0;
 800931c:	2300      	movs	r3, #0
 800931e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009320:	e0d8      	b.n	80094d4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009328:	f040 8085 	bne.w	8009436 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 800932c:	4b6c      	ldr	r3, [pc, #432]	; (80094e0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800932e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009330:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8009334:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8009336:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009338:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800933c:	d06b      	beq.n	8009416 <HAL_RCCEx_GetPeriphCLKFreq+0x8ca>
 800933e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009340:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009344:	d874      	bhi.n	8009430 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 8009346:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009348:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800934c:	d056      	beq.n	80093fc <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
 800934e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009350:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009354:	d86c      	bhi.n	8009430 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 8009356:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009358:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800935c:	d03b      	beq.n	80093d6 <HAL_RCCEx_GetPeriphCLKFreq+0x88a>
 800935e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009360:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009364:	d864      	bhi.n	8009430 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 8009366:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009368:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800936c:	d021      	beq.n	80093b2 <HAL_RCCEx_GetPeriphCLKFreq+0x866>
 800936e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009370:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009374:	d85c      	bhi.n	8009430 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 8009376:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009378:	2b00      	cmp	r3, #0
 800937a:	d004      	beq.n	8009386 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800937c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800937e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009382:	d004      	beq.n	800938e <HAL_RCCEx_GetPeriphCLKFreq+0x842>
 8009384:	e054      	b.n	8009430 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8009386:	f000 f8b3 	bl	80094f0 <HAL_RCCEx_GetD3PCLK1Freq>
 800938a:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 800938c:	e0a2      	b.n	80094d4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800938e:	4b54      	ldr	r3, [pc, #336]	; (80094e0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8009390:	681b      	ldr	r3, [r3, #0]
 8009392:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009396:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800939a:	d107      	bne.n	80093ac <HAL_RCCEx_GetPeriphCLKFreq+0x860>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800939c:	f107 0318 	add.w	r3, r7, #24
 80093a0:	4618      	mov	r0, r3
 80093a2:	f000 f8bb 	bl	800951c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80093a6:	69fb      	ldr	r3, [r7, #28]
 80093a8:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80093aa:	e093      	b.n	80094d4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 80093ac:	2300      	movs	r3, #0
 80093ae:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80093b0:	e090      	b.n	80094d4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80093b2:	4b4b      	ldr	r3, [pc, #300]	; (80094e0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80093b4:	681b      	ldr	r3, [r3, #0]
 80093b6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80093ba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80093be:	d107      	bne.n	80093d0 <HAL_RCCEx_GetPeriphCLKFreq+0x884>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80093c0:	f107 030c 	add.w	r3, r7, #12
 80093c4:	4618      	mov	r0, r3
 80093c6:	f000 f9fd 	bl	80097c4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80093ca:	693b      	ldr	r3, [r7, #16]
 80093cc:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80093ce:	e081      	b.n	80094d4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 80093d0:	2300      	movs	r3, #0
 80093d2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80093d4:	e07e      	b.n	80094d4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80093d6:	4b42      	ldr	r3, [pc, #264]	; (80094e0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80093d8:	681b      	ldr	r3, [r3, #0]
 80093da:	f003 0304 	and.w	r3, r3, #4
 80093de:	2b04      	cmp	r3, #4
 80093e0:	d109      	bne.n	80093f6 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
         {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80093e2:	4b3f      	ldr	r3, [pc, #252]	; (80094e0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	08db      	lsrs	r3, r3, #3
 80093e8:	f003 0303 	and.w	r3, r3, #3
 80093ec:	4a3d      	ldr	r2, [pc, #244]	; (80094e4 <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 80093ee:	fa22 f303 	lsr.w	r3, r2, r3
 80093f2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80093f4:	e06e      	b.n	80094d4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 80093f6:	2300      	movs	r3, #0
 80093f8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80093fa:	e06b      	b.n	80094d4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 80093fc:	4b38      	ldr	r3, [pc, #224]	; (80094e0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009404:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009408:	d102      	bne.n	8009410 <HAL_RCCEx_GetPeriphCLKFreq+0x8c4>
         {
          frequency = CSI_VALUE;
 800940a:	4b37      	ldr	r3, [pc, #220]	; (80094e8 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800940c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800940e:	e061      	b.n	80094d4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8009410:	2300      	movs	r3, #0
 8009412:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009414:	e05e      	b.n	80094d4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8009416:	4b32      	ldr	r3, [pc, #200]	; (80094e0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8009418:	681b      	ldr	r3, [r3, #0]
 800941a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800941e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009422:	d102      	bne.n	800942a <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
         {
          frequency = HSE_VALUE;
 8009424:	4b31      	ldr	r3, [pc, #196]	; (80094ec <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 8009426:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8009428:	e054      	b.n	80094d4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 800942a:	2300      	movs	r3, #0
 800942c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800942e:	e051      	b.n	80094d4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 8009430:	2300      	movs	r3, #0
 8009432:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009434:	e04e      	b.n	80094d4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800943c:	d148      	bne.n	80094d0 <HAL_RCCEx_GetPeriphCLKFreq+0x984>
    {
      /* Get FDCAN clock source */
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
 800943e:	4b28      	ldr	r3, [pc, #160]	; (80094e0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8009440:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009442:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009446:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8009448:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800944a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800944e:	d02a      	beq.n	80094a6 <HAL_RCCEx_GetPeriphCLKFreq+0x95a>
 8009450:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009452:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009456:	d838      	bhi.n	80094ca <HAL_RCCEx_GetPeriphCLKFreq+0x97e>
 8009458:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800945a:	2b00      	cmp	r3, #0
 800945c:	d004      	beq.n	8009468 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
 800945e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009460:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009464:	d00d      	beq.n	8009482 <HAL_RCCEx_GetPeriphCLKFreq+0x936>
 8009466:	e030      	b.n	80094ca <HAL_RCCEx_GetPeriphCLKFreq+0x97e>
      {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8009468:	4b1d      	ldr	r3, [pc, #116]	; (80094e0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800946a:	681b      	ldr	r3, [r3, #0]
 800946c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009470:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009474:	d102      	bne.n	800947c <HAL_RCCEx_GetPeriphCLKFreq+0x930>
         {
          frequency = HSE_VALUE;
 8009476:	4b1d      	ldr	r3, [pc, #116]	; (80094ec <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 8009478:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800947a:	e02b      	b.n	80094d4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 800947c:	2300      	movs	r3, #0
 800947e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009480:	e028      	b.n	80094d4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009482:	4b17      	ldr	r3, [pc, #92]	; (80094e0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8009484:	681b      	ldr	r3, [r3, #0]
 8009486:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800948a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800948e:	d107      	bne.n	80094a0 <HAL_RCCEx_GetPeriphCLKFreq+0x954>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009490:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009494:	4618      	mov	r0, r3
 8009496:	f000 fae9 	bl	8009a6c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800949a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800949c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800949e:	e019      	b.n	80094d4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 80094a0:	2300      	movs	r3, #0
 80094a2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80094a4:	e016      	b.n	80094d4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80094a6:	4b0e      	ldr	r3, [pc, #56]	; (80094e0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80094a8:	681b      	ldr	r3, [r3, #0]
 80094aa:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80094ae:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80094b2:	d107      	bne.n	80094c4 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80094b4:	f107 0318 	add.w	r3, r7, #24
 80094b8:	4618      	mov	r0, r3
 80094ba:	f000 f82f 	bl	800951c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80094be:	69fb      	ldr	r3, [r7, #28]
 80094c0:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80094c2:	e007      	b.n	80094d4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 80094c4:	2300      	movs	r3, #0
 80094c6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80094c8:	e004      	b.n	80094d4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      default :
        {
          frequency = 0;
 80094ca:	2300      	movs	r3, #0
 80094cc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80094ce:	e001      	b.n	80094d4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else
    {
      frequency = 0;
 80094d0:	2300      	movs	r3, #0
 80094d2:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 80094d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80094d6:	4618      	mov	r0, r3
 80094d8:	3740      	adds	r7, #64	; 0x40
 80094da:	46bd      	mov	sp, r7
 80094dc:	bd80      	pop	{r7, pc}
 80094de:	bf00      	nop
 80094e0:	58024400 	.word	0x58024400
 80094e4:	03d09000 	.word	0x03d09000
 80094e8:	003d0900 	.word	0x003d0900
 80094ec:	007a1200 	.word	0x007a1200

080094f0 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80094f0:	b580      	push	{r7, lr}
 80094f2:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80094f4:	f7fe fb46 	bl	8007b84 <HAL_RCC_GetHCLKFreq>
 80094f8:	4602      	mov	r2, r0
 80094fa:	4b06      	ldr	r3, [pc, #24]	; (8009514 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80094fc:	6a1b      	ldr	r3, [r3, #32]
 80094fe:	091b      	lsrs	r3, r3, #4
 8009500:	f003 0307 	and.w	r3, r3, #7
 8009504:	4904      	ldr	r1, [pc, #16]	; (8009518 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8009506:	5ccb      	ldrb	r3, [r1, r3]
 8009508:	f003 031f 	and.w	r3, r3, #31
 800950c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8009510:	4618      	mov	r0, r3
 8009512:	bd80      	pop	{r7, pc}
 8009514:	58024400 	.word	0x58024400
 8009518:	08028f38 	.word	0x08028f38

0800951c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 800951c:	b480      	push	{r7}
 800951e:	b089      	sub	sp, #36	; 0x24
 8009520:	af00      	add	r7, sp, #0
 8009522:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009524:	4ba1      	ldr	r3, [pc, #644]	; (80097ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009526:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009528:	f003 0303 	and.w	r3, r3, #3
 800952c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800952e:	4b9f      	ldr	r3, [pc, #636]	; (80097ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009530:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009532:	0b1b      	lsrs	r3, r3, #12
 8009534:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009538:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800953a:	4b9c      	ldr	r3, [pc, #624]	; (80097ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800953c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800953e:	091b      	lsrs	r3, r3, #4
 8009540:	f003 0301 	and.w	r3, r3, #1
 8009544:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8009546:	4b99      	ldr	r3, [pc, #612]	; (80097ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009548:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800954a:	08db      	lsrs	r3, r3, #3
 800954c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009550:	693a      	ldr	r2, [r7, #16]
 8009552:	fb02 f303 	mul.w	r3, r2, r3
 8009556:	ee07 3a90 	vmov	s15, r3
 800955a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800955e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8009562:	697b      	ldr	r3, [r7, #20]
 8009564:	2b00      	cmp	r3, #0
 8009566:	f000 8111 	beq.w	800978c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800956a:	69bb      	ldr	r3, [r7, #24]
 800956c:	2b02      	cmp	r3, #2
 800956e:	f000 8083 	beq.w	8009678 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8009572:	69bb      	ldr	r3, [r7, #24]
 8009574:	2b02      	cmp	r3, #2
 8009576:	f200 80a1 	bhi.w	80096bc <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800957a:	69bb      	ldr	r3, [r7, #24]
 800957c:	2b00      	cmp	r3, #0
 800957e:	d003      	beq.n	8009588 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8009580:	69bb      	ldr	r3, [r7, #24]
 8009582:	2b01      	cmp	r3, #1
 8009584:	d056      	beq.n	8009634 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8009586:	e099      	b.n	80096bc <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009588:	4b88      	ldr	r3, [pc, #544]	; (80097ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	f003 0320 	and.w	r3, r3, #32
 8009590:	2b00      	cmp	r3, #0
 8009592:	d02d      	beq.n	80095f0 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009594:	4b85      	ldr	r3, [pc, #532]	; (80097ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009596:	681b      	ldr	r3, [r3, #0]
 8009598:	08db      	lsrs	r3, r3, #3
 800959a:	f003 0303 	and.w	r3, r3, #3
 800959e:	4a84      	ldr	r2, [pc, #528]	; (80097b0 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80095a0:	fa22 f303 	lsr.w	r3, r2, r3
 80095a4:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80095a6:	68bb      	ldr	r3, [r7, #8]
 80095a8:	ee07 3a90 	vmov	s15, r3
 80095ac:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80095b0:	697b      	ldr	r3, [r7, #20]
 80095b2:	ee07 3a90 	vmov	s15, r3
 80095b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80095ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80095be:	4b7b      	ldr	r3, [pc, #492]	; (80097ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80095c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80095c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80095c6:	ee07 3a90 	vmov	s15, r3
 80095ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80095ce:	ed97 6a03 	vldr	s12, [r7, #12]
 80095d2:	eddf 5a78 	vldr	s11, [pc, #480]	; 80097b4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80095d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80095da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80095de:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80095e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80095e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80095ea:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80095ee:	e087      	b.n	8009700 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80095f0:	697b      	ldr	r3, [r7, #20]
 80095f2:	ee07 3a90 	vmov	s15, r3
 80095f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80095fa:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80097b8 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80095fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009602:	4b6a      	ldr	r3, [pc, #424]	; (80097ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009604:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009606:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800960a:	ee07 3a90 	vmov	s15, r3
 800960e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009612:	ed97 6a03 	vldr	s12, [r7, #12]
 8009616:	eddf 5a67 	vldr	s11, [pc, #412]	; 80097b4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800961a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800961e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009622:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009626:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800962a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800962e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009632:	e065      	b.n	8009700 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009634:	697b      	ldr	r3, [r7, #20]
 8009636:	ee07 3a90 	vmov	s15, r3
 800963a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800963e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80097bc <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8009642:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009646:	4b59      	ldr	r3, [pc, #356]	; (80097ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009648:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800964a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800964e:	ee07 3a90 	vmov	s15, r3
 8009652:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009656:	ed97 6a03 	vldr	s12, [r7, #12]
 800965a:	eddf 5a56 	vldr	s11, [pc, #344]	; 80097b4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800965e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009662:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009666:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800966a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800966e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009672:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009676:	e043      	b.n	8009700 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009678:	697b      	ldr	r3, [r7, #20]
 800967a:	ee07 3a90 	vmov	s15, r3
 800967e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009682:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80097c0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8009686:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800968a:	4b48      	ldr	r3, [pc, #288]	; (80097ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800968c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800968e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009692:	ee07 3a90 	vmov	s15, r3
 8009696:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800969a:	ed97 6a03 	vldr	s12, [r7, #12]
 800969e:	eddf 5a45 	vldr	s11, [pc, #276]	; 80097b4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80096a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80096a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80096aa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80096ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80096b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80096b6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80096ba:	e021      	b.n	8009700 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80096bc:	697b      	ldr	r3, [r7, #20]
 80096be:	ee07 3a90 	vmov	s15, r3
 80096c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80096c6:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80097bc <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80096ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80096ce:	4b37      	ldr	r3, [pc, #220]	; (80097ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80096d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80096d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80096d6:	ee07 3a90 	vmov	s15, r3
 80096da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80096de:	ed97 6a03 	vldr	s12, [r7, #12]
 80096e2:	eddf 5a34 	vldr	s11, [pc, #208]	; 80097b4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80096e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80096ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80096ee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80096f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80096f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80096fa:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80096fe:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8009700:	4b2a      	ldr	r3, [pc, #168]	; (80097ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009702:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009704:	0a5b      	lsrs	r3, r3, #9
 8009706:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800970a:	ee07 3a90 	vmov	s15, r3
 800970e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009712:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009716:	ee37 7a87 	vadd.f32	s14, s15, s14
 800971a:	edd7 6a07 	vldr	s13, [r7, #28]
 800971e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009722:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009726:	ee17 2a90 	vmov	r2, s15
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800972e:	4b1f      	ldr	r3, [pc, #124]	; (80097ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009730:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009732:	0c1b      	lsrs	r3, r3, #16
 8009734:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009738:	ee07 3a90 	vmov	s15, r3
 800973c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009740:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009744:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009748:	edd7 6a07 	vldr	s13, [r7, #28]
 800974c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009750:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009754:	ee17 2a90 	vmov	r2, s15
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 800975c:	4b13      	ldr	r3, [pc, #76]	; (80097ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800975e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009760:	0e1b      	lsrs	r3, r3, #24
 8009762:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009766:	ee07 3a90 	vmov	s15, r3
 800976a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800976e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009772:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009776:	edd7 6a07 	vldr	s13, [r7, #28]
 800977a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800977e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009782:	ee17 2a90 	vmov	r2, s15
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800978a:	e008      	b.n	800979e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	2200      	movs	r2, #0
 8009790:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	2200      	movs	r2, #0
 8009796:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	2200      	movs	r2, #0
 800979c:	609a      	str	r2, [r3, #8]
}
 800979e:	bf00      	nop
 80097a0:	3724      	adds	r7, #36	; 0x24
 80097a2:	46bd      	mov	sp, r7
 80097a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097a8:	4770      	bx	lr
 80097aa:	bf00      	nop
 80097ac:	58024400 	.word	0x58024400
 80097b0:	03d09000 	.word	0x03d09000
 80097b4:	46000000 	.word	0x46000000
 80097b8:	4c742400 	.word	0x4c742400
 80097bc:	4a742400 	.word	0x4a742400
 80097c0:	4af42400 	.word	0x4af42400

080097c4 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 80097c4:	b480      	push	{r7}
 80097c6:	b089      	sub	sp, #36	; 0x24
 80097c8:	af00      	add	r7, sp, #0
 80097ca:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80097cc:	4ba1      	ldr	r3, [pc, #644]	; (8009a54 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80097ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80097d0:	f003 0303 	and.w	r3, r3, #3
 80097d4:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 80097d6:	4b9f      	ldr	r3, [pc, #636]	; (8009a54 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80097d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80097da:	0d1b      	lsrs	r3, r3, #20
 80097dc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80097e0:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80097e2:	4b9c      	ldr	r3, [pc, #624]	; (8009a54 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80097e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80097e6:	0a1b      	lsrs	r3, r3, #8
 80097e8:	f003 0301 	and.w	r3, r3, #1
 80097ec:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 80097ee:	4b99      	ldr	r3, [pc, #612]	; (8009a54 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80097f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80097f2:	08db      	lsrs	r3, r3, #3
 80097f4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80097f8:	693a      	ldr	r2, [r7, #16]
 80097fa:	fb02 f303 	mul.w	r3, r2, r3
 80097fe:	ee07 3a90 	vmov	s15, r3
 8009802:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009806:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800980a:	697b      	ldr	r3, [r7, #20]
 800980c:	2b00      	cmp	r3, #0
 800980e:	f000 8111 	beq.w	8009a34 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8009812:	69bb      	ldr	r3, [r7, #24]
 8009814:	2b02      	cmp	r3, #2
 8009816:	f000 8083 	beq.w	8009920 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800981a:	69bb      	ldr	r3, [r7, #24]
 800981c:	2b02      	cmp	r3, #2
 800981e:	f200 80a1 	bhi.w	8009964 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8009822:	69bb      	ldr	r3, [r7, #24]
 8009824:	2b00      	cmp	r3, #0
 8009826:	d003      	beq.n	8009830 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8009828:	69bb      	ldr	r3, [r7, #24]
 800982a:	2b01      	cmp	r3, #1
 800982c:	d056      	beq.n	80098dc <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800982e:	e099      	b.n	8009964 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009830:	4b88      	ldr	r3, [pc, #544]	; (8009a54 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009832:	681b      	ldr	r3, [r3, #0]
 8009834:	f003 0320 	and.w	r3, r3, #32
 8009838:	2b00      	cmp	r3, #0
 800983a:	d02d      	beq.n	8009898 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800983c:	4b85      	ldr	r3, [pc, #532]	; (8009a54 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800983e:	681b      	ldr	r3, [r3, #0]
 8009840:	08db      	lsrs	r3, r3, #3
 8009842:	f003 0303 	and.w	r3, r3, #3
 8009846:	4a84      	ldr	r2, [pc, #528]	; (8009a58 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8009848:	fa22 f303 	lsr.w	r3, r2, r3
 800984c:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800984e:	68bb      	ldr	r3, [r7, #8]
 8009850:	ee07 3a90 	vmov	s15, r3
 8009854:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009858:	697b      	ldr	r3, [r7, #20]
 800985a:	ee07 3a90 	vmov	s15, r3
 800985e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009862:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009866:	4b7b      	ldr	r3, [pc, #492]	; (8009a54 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009868:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800986a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800986e:	ee07 3a90 	vmov	s15, r3
 8009872:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009876:	ed97 6a03 	vldr	s12, [r7, #12]
 800987a:	eddf 5a78 	vldr	s11, [pc, #480]	; 8009a5c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800987e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009882:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009886:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800988a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800988e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009892:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8009896:	e087      	b.n	80099a8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009898:	697b      	ldr	r3, [r7, #20]
 800989a:	ee07 3a90 	vmov	s15, r3
 800989e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80098a2:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8009a60 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80098a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80098aa:	4b6a      	ldr	r3, [pc, #424]	; (8009a54 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80098ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80098ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80098b2:	ee07 3a90 	vmov	s15, r3
 80098b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80098ba:	ed97 6a03 	vldr	s12, [r7, #12]
 80098be:	eddf 5a67 	vldr	s11, [pc, #412]	; 8009a5c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80098c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80098c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80098ca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80098ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80098d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80098d6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80098da:	e065      	b.n	80099a8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80098dc:	697b      	ldr	r3, [r7, #20]
 80098de:	ee07 3a90 	vmov	s15, r3
 80098e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80098e6:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8009a64 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80098ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80098ee:	4b59      	ldr	r3, [pc, #356]	; (8009a54 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80098f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80098f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80098f6:	ee07 3a90 	vmov	s15, r3
 80098fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80098fe:	ed97 6a03 	vldr	s12, [r7, #12]
 8009902:	eddf 5a56 	vldr	s11, [pc, #344]	; 8009a5c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009906:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800990a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800990e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009912:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009916:	ee67 7a27 	vmul.f32	s15, s14, s15
 800991a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800991e:	e043      	b.n	80099a8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009920:	697b      	ldr	r3, [r7, #20]
 8009922:	ee07 3a90 	vmov	s15, r3
 8009926:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800992a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8009a68 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800992e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009932:	4b48      	ldr	r3, [pc, #288]	; (8009a54 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009934:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009936:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800993a:	ee07 3a90 	vmov	s15, r3
 800993e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009942:	ed97 6a03 	vldr	s12, [r7, #12]
 8009946:	eddf 5a45 	vldr	s11, [pc, #276]	; 8009a5c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800994a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800994e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009952:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009956:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800995a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800995e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009962:	e021      	b.n	80099a8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009964:	697b      	ldr	r3, [r7, #20]
 8009966:	ee07 3a90 	vmov	s15, r3
 800996a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800996e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8009a64 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8009972:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009976:	4b37      	ldr	r3, [pc, #220]	; (8009a54 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009978:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800997a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800997e:	ee07 3a90 	vmov	s15, r3
 8009982:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009986:	ed97 6a03 	vldr	s12, [r7, #12]
 800998a:	eddf 5a34 	vldr	s11, [pc, #208]	; 8009a5c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800998e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009992:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009996:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800999a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800999e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80099a2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80099a6:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 80099a8:	4b2a      	ldr	r3, [pc, #168]	; (8009a54 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80099aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80099ac:	0a5b      	lsrs	r3, r3, #9
 80099ae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80099b2:	ee07 3a90 	vmov	s15, r3
 80099b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80099ba:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80099be:	ee37 7a87 	vadd.f32	s14, s15, s14
 80099c2:	edd7 6a07 	vldr	s13, [r7, #28]
 80099c6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80099ca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80099ce:	ee17 2a90 	vmov	r2, s15
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 80099d6:	4b1f      	ldr	r3, [pc, #124]	; (8009a54 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80099d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80099da:	0c1b      	lsrs	r3, r3, #16
 80099dc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80099e0:	ee07 3a90 	vmov	s15, r3
 80099e4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80099e8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80099ec:	ee37 7a87 	vadd.f32	s14, s15, s14
 80099f0:	edd7 6a07 	vldr	s13, [r7, #28]
 80099f4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80099f8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80099fc:	ee17 2a90 	vmov	r2, s15
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8009a04:	4b13      	ldr	r3, [pc, #76]	; (8009a54 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009a06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a08:	0e1b      	lsrs	r3, r3, #24
 8009a0a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009a0e:	ee07 3a90 	vmov	s15, r3
 8009a12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009a16:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009a1a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009a1e:	edd7 6a07 	vldr	s13, [r7, #28]
 8009a22:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009a26:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009a2a:	ee17 2a90 	vmov	r2, s15
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8009a32:	e008      	b.n	8009a46 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	2200      	movs	r2, #0
 8009a38:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	2200      	movs	r2, #0
 8009a3e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	2200      	movs	r2, #0
 8009a44:	609a      	str	r2, [r3, #8]
}
 8009a46:	bf00      	nop
 8009a48:	3724      	adds	r7, #36	; 0x24
 8009a4a:	46bd      	mov	sp, r7
 8009a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a50:	4770      	bx	lr
 8009a52:	bf00      	nop
 8009a54:	58024400 	.word	0x58024400
 8009a58:	03d09000 	.word	0x03d09000
 8009a5c:	46000000 	.word	0x46000000
 8009a60:	4c742400 	.word	0x4c742400
 8009a64:	4a742400 	.word	0x4a742400
 8009a68:	4af42400 	.word	0x4af42400

08009a6c <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 8009a6c:	b480      	push	{r7}
 8009a6e:	b089      	sub	sp, #36	; 0x24
 8009a70:	af00      	add	r7, sp, #0
 8009a72:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009a74:	4ba0      	ldr	r3, [pc, #640]	; (8009cf8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009a76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a78:	f003 0303 	and.w	r3, r3, #3
 8009a7c:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 8009a7e:	4b9e      	ldr	r3, [pc, #632]	; (8009cf8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009a80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a82:	091b      	lsrs	r3, r3, #4
 8009a84:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009a88:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8009a8a:	4b9b      	ldr	r3, [pc, #620]	; (8009cf8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009a8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a8e:	f003 0301 	and.w	r3, r3, #1
 8009a92:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8009a94:	4b98      	ldr	r3, [pc, #608]	; (8009cf8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009a96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009a98:	08db      	lsrs	r3, r3, #3
 8009a9a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009a9e:	693a      	ldr	r2, [r7, #16]
 8009aa0:	fb02 f303 	mul.w	r3, r2, r3
 8009aa4:	ee07 3a90 	vmov	s15, r3
 8009aa8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009aac:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8009ab0:	697b      	ldr	r3, [r7, #20]
 8009ab2:	2b00      	cmp	r3, #0
 8009ab4:	f000 8111 	beq.w	8009cda <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8009ab8:	69bb      	ldr	r3, [r7, #24]
 8009aba:	2b02      	cmp	r3, #2
 8009abc:	f000 8083 	beq.w	8009bc6 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8009ac0:	69bb      	ldr	r3, [r7, #24]
 8009ac2:	2b02      	cmp	r3, #2
 8009ac4:	f200 80a1 	bhi.w	8009c0a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8009ac8:	69bb      	ldr	r3, [r7, #24]
 8009aca:	2b00      	cmp	r3, #0
 8009acc:	d003      	beq.n	8009ad6 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8009ace:	69bb      	ldr	r3, [r7, #24]
 8009ad0:	2b01      	cmp	r3, #1
 8009ad2:	d056      	beq.n	8009b82 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8009ad4:	e099      	b.n	8009c0a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009ad6:	4b88      	ldr	r3, [pc, #544]	; (8009cf8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009ad8:	681b      	ldr	r3, [r3, #0]
 8009ada:	f003 0320 	and.w	r3, r3, #32
 8009ade:	2b00      	cmp	r3, #0
 8009ae0:	d02d      	beq.n	8009b3e <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009ae2:	4b85      	ldr	r3, [pc, #532]	; (8009cf8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009ae4:	681b      	ldr	r3, [r3, #0]
 8009ae6:	08db      	lsrs	r3, r3, #3
 8009ae8:	f003 0303 	and.w	r3, r3, #3
 8009aec:	4a83      	ldr	r2, [pc, #524]	; (8009cfc <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8009aee:	fa22 f303 	lsr.w	r3, r2, r3
 8009af2:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009af4:	68bb      	ldr	r3, [r7, #8]
 8009af6:	ee07 3a90 	vmov	s15, r3
 8009afa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009afe:	697b      	ldr	r3, [r7, #20]
 8009b00:	ee07 3a90 	vmov	s15, r3
 8009b04:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009b08:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009b0c:	4b7a      	ldr	r3, [pc, #488]	; (8009cf8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009b0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b10:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009b14:	ee07 3a90 	vmov	s15, r3
 8009b18:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009b1c:	ed97 6a03 	vldr	s12, [r7, #12]
 8009b20:	eddf 5a77 	vldr	s11, [pc, #476]	; 8009d00 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009b24:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009b28:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009b2c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009b30:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009b34:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009b38:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8009b3c:	e087      	b.n	8009c4e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009b3e:	697b      	ldr	r3, [r7, #20]
 8009b40:	ee07 3a90 	vmov	s15, r3
 8009b44:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009b48:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8009d04 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8009b4c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009b50:	4b69      	ldr	r3, [pc, #420]	; (8009cf8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009b52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b54:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009b58:	ee07 3a90 	vmov	s15, r3
 8009b5c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009b60:	ed97 6a03 	vldr	s12, [r7, #12]
 8009b64:	eddf 5a66 	vldr	s11, [pc, #408]	; 8009d00 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009b68:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009b6c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009b70:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009b74:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009b78:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009b7c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009b80:	e065      	b.n	8009c4e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009b82:	697b      	ldr	r3, [r7, #20]
 8009b84:	ee07 3a90 	vmov	s15, r3
 8009b88:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009b8c:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8009d08 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8009b90:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009b94:	4b58      	ldr	r3, [pc, #352]	; (8009cf8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009b96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b98:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009b9c:	ee07 3a90 	vmov	s15, r3
 8009ba0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009ba4:	ed97 6a03 	vldr	s12, [r7, #12]
 8009ba8:	eddf 5a55 	vldr	s11, [pc, #340]	; 8009d00 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009bac:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009bb0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009bb4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009bb8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009bbc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009bc0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009bc4:	e043      	b.n	8009c4e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009bc6:	697b      	ldr	r3, [r7, #20]
 8009bc8:	ee07 3a90 	vmov	s15, r3
 8009bcc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009bd0:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8009d0c <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8009bd4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009bd8:	4b47      	ldr	r3, [pc, #284]	; (8009cf8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009bda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009bdc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009be0:	ee07 3a90 	vmov	s15, r3
 8009be4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009be8:	ed97 6a03 	vldr	s12, [r7, #12]
 8009bec:	eddf 5a44 	vldr	s11, [pc, #272]	; 8009d00 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009bf0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009bf4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009bf8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009bfc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009c00:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009c04:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009c08:	e021      	b.n	8009c4e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    default:
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009c0a:	697b      	ldr	r3, [r7, #20]
 8009c0c:	ee07 3a90 	vmov	s15, r3
 8009c10:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009c14:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8009d04 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8009c18:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009c1c:	4b36      	ldr	r3, [pc, #216]	; (8009cf8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009c1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009c20:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009c24:	ee07 3a90 	vmov	s15, r3
 8009c28:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009c2c:	ed97 6a03 	vldr	s12, [r7, #12]
 8009c30:	eddf 5a33 	vldr	s11, [pc, #204]	; 8009d00 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009c34:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009c38:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009c3c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009c40:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009c44:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009c48:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009c4c:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 8009c4e:	4b2a      	ldr	r3, [pc, #168]	; (8009cf8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009c50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009c52:	0a5b      	lsrs	r3, r3, #9
 8009c54:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009c58:	ee07 3a90 	vmov	s15, r3
 8009c5c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009c60:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009c64:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009c68:	edd7 6a07 	vldr	s13, [r7, #28]
 8009c6c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009c70:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009c74:	ee17 2a90 	vmov	r2, s15
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 8009c7c:	4b1e      	ldr	r3, [pc, #120]	; (8009cf8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009c7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009c80:	0c1b      	lsrs	r3, r3, #16
 8009c82:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009c86:	ee07 3a90 	vmov	s15, r3
 8009c8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009c8e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009c92:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009c96:	edd7 6a07 	vldr	s13, [r7, #28]
 8009c9a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009c9e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009ca2:	ee17 2a90 	vmov	r2, s15
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 8009caa:	4b13      	ldr	r3, [pc, #76]	; (8009cf8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009cac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009cae:	0e1b      	lsrs	r3, r3, #24
 8009cb0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009cb4:	ee07 3a90 	vmov	s15, r3
 8009cb8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009cbc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009cc0:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009cc4:	edd7 6a07 	vldr	s13, [r7, #28]
 8009cc8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009ccc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009cd0:	ee17 2a90 	vmov	r2, s15
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8009cd8:	e008      	b.n	8009cec <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	2200      	movs	r2, #0
 8009cde:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	2200      	movs	r2, #0
 8009ce4:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	2200      	movs	r2, #0
 8009cea:	609a      	str	r2, [r3, #8]
}
 8009cec:	bf00      	nop
 8009cee:	3724      	adds	r7, #36	; 0x24
 8009cf0:	46bd      	mov	sp, r7
 8009cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cf6:	4770      	bx	lr
 8009cf8:	58024400 	.word	0x58024400
 8009cfc:	03d09000 	.word	0x03d09000
 8009d00:	46000000 	.word	0x46000000
 8009d04:	4c742400 	.word	0x4c742400
 8009d08:	4a742400 	.word	0x4a742400
 8009d0c:	4af42400 	.word	0x4af42400

08009d10 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8009d10:	b580      	push	{r7, lr}
 8009d12:	b084      	sub	sp, #16
 8009d14:	af00      	add	r7, sp, #0
 8009d16:	6078      	str	r0, [r7, #4]
 8009d18:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009d1a:	2300      	movs	r3, #0
 8009d1c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8009d1e:	4b53      	ldr	r3, [pc, #332]	; (8009e6c <RCCEx_PLL2_Config+0x15c>)
 8009d20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009d22:	f003 0303 	and.w	r3, r3, #3
 8009d26:	2b03      	cmp	r3, #3
 8009d28:	d101      	bne.n	8009d2e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8009d2a:	2301      	movs	r3, #1
 8009d2c:	e099      	b.n	8009e62 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8009d2e:	4b4f      	ldr	r3, [pc, #316]	; (8009e6c <RCCEx_PLL2_Config+0x15c>)
 8009d30:	681b      	ldr	r3, [r3, #0]
 8009d32:	4a4e      	ldr	r2, [pc, #312]	; (8009e6c <RCCEx_PLL2_Config+0x15c>)
 8009d34:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8009d38:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009d3a:	f7fa fcdd 	bl	80046f8 <HAL_GetTick>
 8009d3e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009d40:	e008      	b.n	8009d54 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8009d42:	f7fa fcd9 	bl	80046f8 <HAL_GetTick>
 8009d46:	4602      	mov	r2, r0
 8009d48:	68bb      	ldr	r3, [r7, #8]
 8009d4a:	1ad3      	subs	r3, r2, r3
 8009d4c:	2b02      	cmp	r3, #2
 8009d4e:	d901      	bls.n	8009d54 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8009d50:	2303      	movs	r3, #3
 8009d52:	e086      	b.n	8009e62 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009d54:	4b45      	ldr	r3, [pc, #276]	; (8009e6c <RCCEx_PLL2_Config+0x15c>)
 8009d56:	681b      	ldr	r3, [r3, #0]
 8009d58:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009d5c:	2b00      	cmp	r3, #0
 8009d5e:	d1f0      	bne.n	8009d42 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8009d60:	4b42      	ldr	r3, [pc, #264]	; (8009e6c <RCCEx_PLL2_Config+0x15c>)
 8009d62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009d64:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	681b      	ldr	r3, [r3, #0]
 8009d6c:	031b      	lsls	r3, r3, #12
 8009d6e:	493f      	ldr	r1, [pc, #252]	; (8009e6c <RCCEx_PLL2_Config+0x15c>)
 8009d70:	4313      	orrs	r3, r2
 8009d72:	628b      	str	r3, [r1, #40]	; 0x28
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	685b      	ldr	r3, [r3, #4]
 8009d78:	3b01      	subs	r3, #1
 8009d7a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	689b      	ldr	r3, [r3, #8]
 8009d82:	3b01      	subs	r3, #1
 8009d84:	025b      	lsls	r3, r3, #9
 8009d86:	b29b      	uxth	r3, r3
 8009d88:	431a      	orrs	r2, r3
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	68db      	ldr	r3, [r3, #12]
 8009d8e:	3b01      	subs	r3, #1
 8009d90:	041b      	lsls	r3, r3, #16
 8009d92:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8009d96:	431a      	orrs	r2, r3
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	691b      	ldr	r3, [r3, #16]
 8009d9c:	3b01      	subs	r3, #1
 8009d9e:	061b      	lsls	r3, r3, #24
 8009da0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8009da4:	4931      	ldr	r1, [pc, #196]	; (8009e6c <RCCEx_PLL2_Config+0x15c>)
 8009da6:	4313      	orrs	r3, r2
 8009da8:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8009daa:	4b30      	ldr	r3, [pc, #192]	; (8009e6c <RCCEx_PLL2_Config+0x15c>)
 8009dac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009dae:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	695b      	ldr	r3, [r3, #20]
 8009db6:	492d      	ldr	r1, [pc, #180]	; (8009e6c <RCCEx_PLL2_Config+0x15c>)
 8009db8:	4313      	orrs	r3, r2
 8009dba:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8009dbc:	4b2b      	ldr	r3, [pc, #172]	; (8009e6c <RCCEx_PLL2_Config+0x15c>)
 8009dbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009dc0:	f023 0220 	bic.w	r2, r3, #32
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	699b      	ldr	r3, [r3, #24]
 8009dc8:	4928      	ldr	r1, [pc, #160]	; (8009e6c <RCCEx_PLL2_Config+0x15c>)
 8009dca:	4313      	orrs	r3, r2
 8009dcc:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8009dce:	4b27      	ldr	r3, [pc, #156]	; (8009e6c <RCCEx_PLL2_Config+0x15c>)
 8009dd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009dd2:	4a26      	ldr	r2, [pc, #152]	; (8009e6c <RCCEx_PLL2_Config+0x15c>)
 8009dd4:	f023 0310 	bic.w	r3, r3, #16
 8009dd8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8009dda:	4b24      	ldr	r3, [pc, #144]	; (8009e6c <RCCEx_PLL2_Config+0x15c>)
 8009ddc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009dde:	4b24      	ldr	r3, [pc, #144]	; (8009e70 <RCCEx_PLL2_Config+0x160>)
 8009de0:	4013      	ands	r3, r2
 8009de2:	687a      	ldr	r2, [r7, #4]
 8009de4:	69d2      	ldr	r2, [r2, #28]
 8009de6:	00d2      	lsls	r2, r2, #3
 8009de8:	4920      	ldr	r1, [pc, #128]	; (8009e6c <RCCEx_PLL2_Config+0x15c>)
 8009dea:	4313      	orrs	r3, r2
 8009dec:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8009dee:	4b1f      	ldr	r3, [pc, #124]	; (8009e6c <RCCEx_PLL2_Config+0x15c>)
 8009df0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009df2:	4a1e      	ldr	r2, [pc, #120]	; (8009e6c <RCCEx_PLL2_Config+0x15c>)
 8009df4:	f043 0310 	orr.w	r3, r3, #16
 8009df8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8009dfa:	683b      	ldr	r3, [r7, #0]
 8009dfc:	2b00      	cmp	r3, #0
 8009dfe:	d106      	bne.n	8009e0e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8009e00:	4b1a      	ldr	r3, [pc, #104]	; (8009e6c <RCCEx_PLL2_Config+0x15c>)
 8009e02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e04:	4a19      	ldr	r2, [pc, #100]	; (8009e6c <RCCEx_PLL2_Config+0x15c>)
 8009e06:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009e0a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009e0c:	e00f      	b.n	8009e2e <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8009e0e:	683b      	ldr	r3, [r7, #0]
 8009e10:	2b01      	cmp	r3, #1
 8009e12:	d106      	bne.n	8009e22 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8009e14:	4b15      	ldr	r3, [pc, #84]	; (8009e6c <RCCEx_PLL2_Config+0x15c>)
 8009e16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e18:	4a14      	ldr	r2, [pc, #80]	; (8009e6c <RCCEx_PLL2_Config+0x15c>)
 8009e1a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009e1e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009e20:	e005      	b.n	8009e2e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8009e22:	4b12      	ldr	r3, [pc, #72]	; (8009e6c <RCCEx_PLL2_Config+0x15c>)
 8009e24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e26:	4a11      	ldr	r2, [pc, #68]	; (8009e6c <RCCEx_PLL2_Config+0x15c>)
 8009e28:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8009e2c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8009e2e:	4b0f      	ldr	r3, [pc, #60]	; (8009e6c <RCCEx_PLL2_Config+0x15c>)
 8009e30:	681b      	ldr	r3, [r3, #0]
 8009e32:	4a0e      	ldr	r2, [pc, #56]	; (8009e6c <RCCEx_PLL2_Config+0x15c>)
 8009e34:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8009e38:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009e3a:	f7fa fc5d 	bl	80046f8 <HAL_GetTick>
 8009e3e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009e40:	e008      	b.n	8009e54 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8009e42:	f7fa fc59 	bl	80046f8 <HAL_GetTick>
 8009e46:	4602      	mov	r2, r0
 8009e48:	68bb      	ldr	r3, [r7, #8]
 8009e4a:	1ad3      	subs	r3, r2, r3
 8009e4c:	2b02      	cmp	r3, #2
 8009e4e:	d901      	bls.n	8009e54 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8009e50:	2303      	movs	r3, #3
 8009e52:	e006      	b.n	8009e62 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009e54:	4b05      	ldr	r3, [pc, #20]	; (8009e6c <RCCEx_PLL2_Config+0x15c>)
 8009e56:	681b      	ldr	r3, [r3, #0]
 8009e58:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009e5c:	2b00      	cmp	r3, #0
 8009e5e:	d0f0      	beq.n	8009e42 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8009e60:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e62:	4618      	mov	r0, r3
 8009e64:	3710      	adds	r7, #16
 8009e66:	46bd      	mov	sp, r7
 8009e68:	bd80      	pop	{r7, pc}
 8009e6a:	bf00      	nop
 8009e6c:	58024400 	.word	0x58024400
 8009e70:	ffff0007 	.word	0xffff0007

08009e74 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8009e74:	b580      	push	{r7, lr}
 8009e76:	b084      	sub	sp, #16
 8009e78:	af00      	add	r7, sp, #0
 8009e7a:	6078      	str	r0, [r7, #4]
 8009e7c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009e7e:	2300      	movs	r3, #0
 8009e80:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8009e82:	4b53      	ldr	r3, [pc, #332]	; (8009fd0 <RCCEx_PLL3_Config+0x15c>)
 8009e84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e86:	f003 0303 	and.w	r3, r3, #3
 8009e8a:	2b03      	cmp	r3, #3
 8009e8c:	d101      	bne.n	8009e92 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8009e8e:	2301      	movs	r3, #1
 8009e90:	e099      	b.n	8009fc6 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8009e92:	4b4f      	ldr	r3, [pc, #316]	; (8009fd0 <RCCEx_PLL3_Config+0x15c>)
 8009e94:	681b      	ldr	r3, [r3, #0]
 8009e96:	4a4e      	ldr	r2, [pc, #312]	; (8009fd0 <RCCEx_PLL3_Config+0x15c>)
 8009e98:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009e9c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009e9e:	f7fa fc2b 	bl	80046f8 <HAL_GetTick>
 8009ea2:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009ea4:	e008      	b.n	8009eb8 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8009ea6:	f7fa fc27 	bl	80046f8 <HAL_GetTick>
 8009eaa:	4602      	mov	r2, r0
 8009eac:	68bb      	ldr	r3, [r7, #8]
 8009eae:	1ad3      	subs	r3, r2, r3
 8009eb0:	2b02      	cmp	r3, #2
 8009eb2:	d901      	bls.n	8009eb8 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8009eb4:	2303      	movs	r3, #3
 8009eb6:	e086      	b.n	8009fc6 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009eb8:	4b45      	ldr	r3, [pc, #276]	; (8009fd0 <RCCEx_PLL3_Config+0x15c>)
 8009eba:	681b      	ldr	r3, [r3, #0]
 8009ebc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009ec0:	2b00      	cmp	r3, #0
 8009ec2:	d1f0      	bne.n	8009ea6 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8009ec4:	4b42      	ldr	r3, [pc, #264]	; (8009fd0 <RCCEx_PLL3_Config+0x15c>)
 8009ec6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009ec8:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	681b      	ldr	r3, [r3, #0]
 8009ed0:	051b      	lsls	r3, r3, #20
 8009ed2:	493f      	ldr	r1, [pc, #252]	; (8009fd0 <RCCEx_PLL3_Config+0x15c>)
 8009ed4:	4313      	orrs	r3, r2
 8009ed6:	628b      	str	r3, [r1, #40]	; 0x28
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	685b      	ldr	r3, [r3, #4]
 8009edc:	3b01      	subs	r3, #1
 8009ede:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	689b      	ldr	r3, [r3, #8]
 8009ee6:	3b01      	subs	r3, #1
 8009ee8:	025b      	lsls	r3, r3, #9
 8009eea:	b29b      	uxth	r3, r3
 8009eec:	431a      	orrs	r2, r3
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	68db      	ldr	r3, [r3, #12]
 8009ef2:	3b01      	subs	r3, #1
 8009ef4:	041b      	lsls	r3, r3, #16
 8009ef6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8009efa:	431a      	orrs	r2, r3
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	691b      	ldr	r3, [r3, #16]
 8009f00:	3b01      	subs	r3, #1
 8009f02:	061b      	lsls	r3, r3, #24
 8009f04:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8009f08:	4931      	ldr	r1, [pc, #196]	; (8009fd0 <RCCEx_PLL3_Config+0x15c>)
 8009f0a:	4313      	orrs	r3, r2
 8009f0c:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8009f0e:	4b30      	ldr	r3, [pc, #192]	; (8009fd0 <RCCEx_PLL3_Config+0x15c>)
 8009f10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f12:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	695b      	ldr	r3, [r3, #20]
 8009f1a:	492d      	ldr	r1, [pc, #180]	; (8009fd0 <RCCEx_PLL3_Config+0x15c>)
 8009f1c:	4313      	orrs	r3, r2
 8009f1e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8009f20:	4b2b      	ldr	r3, [pc, #172]	; (8009fd0 <RCCEx_PLL3_Config+0x15c>)
 8009f22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f24:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	699b      	ldr	r3, [r3, #24]
 8009f2c:	4928      	ldr	r1, [pc, #160]	; (8009fd0 <RCCEx_PLL3_Config+0x15c>)
 8009f2e:	4313      	orrs	r3, r2
 8009f30:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8009f32:	4b27      	ldr	r3, [pc, #156]	; (8009fd0 <RCCEx_PLL3_Config+0x15c>)
 8009f34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f36:	4a26      	ldr	r2, [pc, #152]	; (8009fd0 <RCCEx_PLL3_Config+0x15c>)
 8009f38:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009f3c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8009f3e:	4b24      	ldr	r3, [pc, #144]	; (8009fd0 <RCCEx_PLL3_Config+0x15c>)
 8009f40:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009f42:	4b24      	ldr	r3, [pc, #144]	; (8009fd4 <RCCEx_PLL3_Config+0x160>)
 8009f44:	4013      	ands	r3, r2
 8009f46:	687a      	ldr	r2, [r7, #4]
 8009f48:	69d2      	ldr	r2, [r2, #28]
 8009f4a:	00d2      	lsls	r2, r2, #3
 8009f4c:	4920      	ldr	r1, [pc, #128]	; (8009fd0 <RCCEx_PLL3_Config+0x15c>)
 8009f4e:	4313      	orrs	r3, r2
 8009f50:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8009f52:	4b1f      	ldr	r3, [pc, #124]	; (8009fd0 <RCCEx_PLL3_Config+0x15c>)
 8009f54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f56:	4a1e      	ldr	r2, [pc, #120]	; (8009fd0 <RCCEx_PLL3_Config+0x15c>)
 8009f58:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009f5c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8009f5e:	683b      	ldr	r3, [r7, #0]
 8009f60:	2b00      	cmp	r3, #0
 8009f62:	d106      	bne.n	8009f72 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8009f64:	4b1a      	ldr	r3, [pc, #104]	; (8009fd0 <RCCEx_PLL3_Config+0x15c>)
 8009f66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f68:	4a19      	ldr	r2, [pc, #100]	; (8009fd0 <RCCEx_PLL3_Config+0x15c>)
 8009f6a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8009f6e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009f70:	e00f      	b.n	8009f92 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8009f72:	683b      	ldr	r3, [r7, #0]
 8009f74:	2b01      	cmp	r3, #1
 8009f76:	d106      	bne.n	8009f86 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8009f78:	4b15      	ldr	r3, [pc, #84]	; (8009fd0 <RCCEx_PLL3_Config+0x15c>)
 8009f7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f7c:	4a14      	ldr	r2, [pc, #80]	; (8009fd0 <RCCEx_PLL3_Config+0x15c>)
 8009f7e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8009f82:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009f84:	e005      	b.n	8009f92 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8009f86:	4b12      	ldr	r3, [pc, #72]	; (8009fd0 <RCCEx_PLL3_Config+0x15c>)
 8009f88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f8a:	4a11      	ldr	r2, [pc, #68]	; (8009fd0 <RCCEx_PLL3_Config+0x15c>)
 8009f8c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009f90:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8009f92:	4b0f      	ldr	r3, [pc, #60]	; (8009fd0 <RCCEx_PLL3_Config+0x15c>)
 8009f94:	681b      	ldr	r3, [r3, #0]
 8009f96:	4a0e      	ldr	r2, [pc, #56]	; (8009fd0 <RCCEx_PLL3_Config+0x15c>)
 8009f98:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009f9c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009f9e:	f7fa fbab 	bl	80046f8 <HAL_GetTick>
 8009fa2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009fa4:	e008      	b.n	8009fb8 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8009fa6:	f7fa fba7 	bl	80046f8 <HAL_GetTick>
 8009faa:	4602      	mov	r2, r0
 8009fac:	68bb      	ldr	r3, [r7, #8]
 8009fae:	1ad3      	subs	r3, r2, r3
 8009fb0:	2b02      	cmp	r3, #2
 8009fb2:	d901      	bls.n	8009fb8 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8009fb4:	2303      	movs	r3, #3
 8009fb6:	e006      	b.n	8009fc6 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009fb8:	4b05      	ldr	r3, [pc, #20]	; (8009fd0 <RCCEx_PLL3_Config+0x15c>)
 8009fba:	681b      	ldr	r3, [r3, #0]
 8009fbc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009fc0:	2b00      	cmp	r3, #0
 8009fc2:	d0f0      	beq.n	8009fa6 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8009fc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8009fc6:	4618      	mov	r0, r3
 8009fc8:	3710      	adds	r7, #16
 8009fca:	46bd      	mov	sp, r7
 8009fcc:	bd80      	pop	{r7, pc}
 8009fce:	bf00      	nop
 8009fd0:	58024400 	.word	0x58024400
 8009fd4:	ffff0007 	.word	0xffff0007

08009fd8 <HAL_SMBUS_Init>:
  * @param  hsmbus Pointer to a SMBUS_HandleTypeDef structure that contains
  *                the configuration information for the specified SMBUS.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SMBUS_Init(SMBUS_HandleTypeDef *hsmbus)
{
 8009fd8:	b580      	push	{r7, lr}
 8009fda:	b082      	sub	sp, #8
 8009fdc:	af00      	add	r7, sp, #0
 8009fde:	6078      	str	r0, [r7, #4]
  /* Check the SMBUS handle allocation */
  if (hsmbus == NULL)
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	2b00      	cmp	r3, #0
 8009fe4:	d101      	bne.n	8009fea <HAL_SMBUS_Init+0x12>
  {
    return HAL_ERROR;
 8009fe6:	2301      	movs	r3, #1
 8009fe8:	e0a8      	b.n	800a13c <HAL_SMBUS_Init+0x164>
  assert_param(IS_SMBUS_GENERAL_CALL(hsmbus->Init.GeneralCallMode));
  assert_param(IS_SMBUS_NO_STRETCH(hsmbus->Init.NoStretchMode));
  assert_param(IS_SMBUS_PEC(hsmbus->Init.PacketErrorCheckMode));
  assert_param(IS_SMBUS_PERIPHERAL_MODE(hsmbus->Init.PeripheralMode));

  if (hsmbus->State == HAL_SMBUS_STATE_RESET)
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009fee:	2b00      	cmp	r3, #0
 8009ff0:	d106      	bne.n	800a000 <HAL_SMBUS_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hsmbus->Lock = HAL_UNLOCKED;
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	2200      	movs	r2, #0
 8009ff6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hsmbus->MspInitCallback(hsmbus);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_SMBUS_MspInit(hsmbus);
 8009ffa:	6878      	ldr	r0, [r7, #4]
 8009ffc:	f7f6 fe68 	bl	8000cd0 <HAL_SMBUS_MspInit>
#endif /* USE_HAL_SMBUS_REGISTER_CALLBACKS */
  }

  hsmbus->State = HAL_SMBUS_STATE_BUSY;
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	2202      	movs	r2, #2
 800a004:	649a      	str	r2, [r3, #72]	; 0x48

  /* Disable the selected SMBUS peripheral */
  __HAL_SMBUS_DISABLE(hsmbus);
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	681b      	ldr	r3, [r3, #0]
 800a00a:	681a      	ldr	r2, [r3, #0]
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	681b      	ldr	r3, [r3, #0]
 800a010:	f022 0201 	bic.w	r2, r2, #1
 800a014:	601a      	str	r2, [r3, #0]

  /*---------------------------- SMBUSx TIMINGR Configuration ------------------------*/
  /* Configure SMBUSx: Frequency range */
  hsmbus->Instance->TIMINGR = hsmbus->Init.Timing & TIMING_CLEAR_MASK;
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	685a      	ldr	r2, [r3, #4]
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	681b      	ldr	r3, [r3, #0]
 800a01e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800a022:	611a      	str	r2, [r3, #16]

  /*---------------------------- SMBUSx TIMEOUTR Configuration ------------------------*/
  /* Configure SMBUSx: Bus Timeout  */
  hsmbus->Instance->TIMEOUTR &= ~I2C_TIMEOUTR_TIMOUTEN;
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	681b      	ldr	r3, [r3, #0]
 800a028:	695a      	ldr	r2, [r3, #20]
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	681b      	ldr	r3, [r3, #0]
 800a02e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800a032:	615a      	str	r2, [r3, #20]
  hsmbus->Instance->TIMEOUTR &= ~I2C_TIMEOUTR_TEXTEN;
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	681b      	ldr	r3, [r3, #0]
 800a038:	695a      	ldr	r2, [r3, #20]
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	681b      	ldr	r3, [r3, #0]
 800a03e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800a042:	615a      	str	r2, [r3, #20]
  hsmbus->Instance->TIMEOUTR = hsmbus->Init.SMBusTimeout;
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	681b      	ldr	r3, [r3, #0]
 800a048:	687a      	ldr	r2, [r7, #4]
 800a04a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800a04c:	615a      	str	r2, [r3, #20]

  /*---------------------------- SMBUSx OAR1 Configuration -----------------------*/
  /* Configure SMBUSx: Own Address1 and ack own address1 mode */
  hsmbus->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	681b      	ldr	r3, [r3, #0]
 800a052:	689a      	ldr	r2, [r3, #8]
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	681b      	ldr	r3, [r3, #0]
 800a058:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800a05c:	609a      	str	r2, [r3, #8]

  if (hsmbus->Init.OwnAddress1 != 0UL)
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	68db      	ldr	r3, [r3, #12]
 800a062:	2b00      	cmp	r3, #0
 800a064:	d012      	beq.n	800a08c <HAL_SMBUS_Init+0xb4>
  {
    if (hsmbus->Init.AddressingMode == SMBUS_ADDRESSINGMODE_7BIT)
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	691b      	ldr	r3, [r3, #16]
 800a06a:	2b01      	cmp	r3, #1
 800a06c:	d107      	bne.n	800a07e <HAL_SMBUS_Init+0xa6>
    {
      hsmbus->Instance->OAR1 = (I2C_OAR1_OA1EN | hsmbus->Init.OwnAddress1);
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	68da      	ldr	r2, [r3, #12]
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	681b      	ldr	r3, [r3, #0]
 800a076:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a07a:	609a      	str	r2, [r3, #8]
 800a07c:	e006      	b.n	800a08c <HAL_SMBUS_Init+0xb4>
    }
    else /* SMBUS_ADDRESSINGMODE_10BIT */
    {
      hsmbus->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hsmbus->Init.OwnAddress1);
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	68da      	ldr	r2, [r3, #12]
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	681b      	ldr	r3, [r3, #0]
 800a086:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800a08a:	609a      	str	r2, [r3, #8]
    }
  }

  /*---------------------------- SMBUSx CR2 Configuration ------------------------*/
  /* Configure SMBUSx: Addressing Master mode */
  if (hsmbus->Init.AddressingMode == SMBUS_ADDRESSINGMODE_10BIT)
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	691b      	ldr	r3, [r3, #16]
 800a090:	2b02      	cmp	r3, #2
 800a092:	d104      	bne.n	800a09e <HAL_SMBUS_Init+0xc6>
  {
    hsmbus->Instance->CR2 = (I2C_CR2_ADD10);
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	681b      	ldr	r3, [r3, #0]
 800a098:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a09c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process) */
  /* AUTOEND and NACK bit will be manage during Transfer process */
  hsmbus->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	681b      	ldr	r3, [r3, #0]
 800a0a2:	6859      	ldr	r1, [r3, #4]
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	681a      	ldr	r2, [r3, #0]
 800a0a8:	4b26      	ldr	r3, [pc, #152]	; (800a144 <HAL_SMBUS_Init+0x16c>)
 800a0aa:	430b      	orrs	r3, r1
 800a0ac:	6053      	str	r3, [r2, #4]

  /*---------------------------- SMBUSx OAR2 Configuration -----------------------*/
  /* Configure SMBUSx: Dual mode and Own Address2 */
  hsmbus->Instance->OAR2 = (hsmbus->Init.DualAddressMode | hsmbus->Init.OwnAddress2 | \
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	695a      	ldr	r2, [r3, #20]
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	699b      	ldr	r3, [r3, #24]
 800a0b6:	ea42 0103 	orr.w	r1, r2, r3
                            (hsmbus->Init.OwnAddress2Masks << 8U));
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	69db      	ldr	r3, [r3, #28]
 800a0be:	021a      	lsls	r2, r3, #8
  hsmbus->Instance->OAR2 = (hsmbus->Init.DualAddressMode | hsmbus->Init.OwnAddress2 | \
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	681b      	ldr	r3, [r3, #0]
 800a0c4:	430a      	orrs	r2, r1
 800a0c6:	60da      	str	r2, [r3, #12]

  /*---------------------------- SMBUSx CR1 Configuration ------------------------*/
  /* Configure SMBUSx: Generalcall and NoStretch mode */
  hsmbus->Instance->CR1 = (hsmbus->Init.GeneralCallMode | hsmbus->Init.NoStretchMode | \
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	6a1a      	ldr	r2, [r3, #32]
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0d0:	431a      	orrs	r2, r3
                           hsmbus->Init.PacketErrorCheckMode | hsmbus->Init.PeripheralMode | \
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  hsmbus->Instance->CR1 = (hsmbus->Init.GeneralCallMode | hsmbus->Init.NoStretchMode | \
 800a0d6:	431a      	orrs	r2, r3
                           hsmbus->Init.PacketErrorCheckMode | hsmbus->Init.PeripheralMode | \
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a0dc:	ea42 0103 	orr.w	r1, r2, r3
                           hsmbus->Init.AnalogFilter);
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	689a      	ldr	r2, [r3, #8]
  hsmbus->Instance->CR1 = (hsmbus->Init.GeneralCallMode | hsmbus->Init.NoStretchMode | \
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	681b      	ldr	r3, [r3, #0]
                           hsmbus->Init.PacketErrorCheckMode | hsmbus->Init.PeripheralMode | \
 800a0e8:	430a      	orrs	r2, r1
  hsmbus->Instance->CR1 = (hsmbus->Init.GeneralCallMode | hsmbus->Init.NoStretchMode | \
 800a0ea:	601a      	str	r2, [r3, #0]

  /* Enable Slave Byte Control only in case of Packet Error Check is enabled
     and SMBUS Peripheral is set in Slave mode */
  if ((hsmbus->Init.PacketErrorCheckMode == SMBUS_PEC_ENABLE) && \
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a0f0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a0f4:	d110      	bne.n	800a118 <HAL_SMBUS_Init+0x140>
      ((hsmbus->Init.PeripheralMode == SMBUS_PERIPHERAL_MODE_SMBUS_SLAVE) || \
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  if ((hsmbus->Init.PacketErrorCheckMode == SMBUS_PEC_ENABLE) && \
 800a0fa:	2b00      	cmp	r3, #0
 800a0fc:	d004      	beq.n	800a108 <HAL_SMBUS_Init+0x130>
       (hsmbus->Init.PeripheralMode == SMBUS_PERIPHERAL_MODE_SMBUS_SLAVE_ARP)))
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      ((hsmbus->Init.PeripheralMode == SMBUS_PERIPHERAL_MODE_SMBUS_SLAVE) || \
 800a102:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a106:	d107      	bne.n	800a118 <HAL_SMBUS_Init+0x140>
  {
    hsmbus->Instance->CR1 |= I2C_CR1_SBC;
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	681b      	ldr	r3, [r3, #0]
 800a10c:	681a      	ldr	r2, [r3, #0]
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	681b      	ldr	r3, [r3, #0]
 800a112:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800a116:	601a      	str	r2, [r3, #0]
  }

  /* Enable the selected SMBUS peripheral */
  __HAL_SMBUS_ENABLE(hsmbus);
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	681b      	ldr	r3, [r3, #0]
 800a11c:	681a      	ldr	r2, [r3, #0]
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	681b      	ldr	r3, [r3, #0]
 800a122:	f042 0201 	orr.w	r2, r2, #1
 800a126:	601a      	str	r2, [r3, #0]

  hsmbus->ErrorCode = HAL_SMBUS_ERROR_NONE;
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	2200      	movs	r2, #0
 800a12c:	64da      	str	r2, [r3, #76]	; 0x4c
  hsmbus->PreviousState = HAL_SMBUS_STATE_READY;
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	2201      	movs	r2, #1
 800a132:	641a      	str	r2, [r3, #64]	; 0x40
  hsmbus->State = HAL_SMBUS_STATE_READY;
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	2201      	movs	r2, #1
 800a138:	649a      	str	r2, [r3, #72]	; 0x48

  return HAL_OK;
 800a13a:	2300      	movs	r3, #0
}
 800a13c:	4618      	mov	r0, r3
 800a13e:	3708      	adds	r7, #8
 800a140:	46bd      	mov	sp, r7
 800a142:	bd80      	pop	{r7, pc}
 800a144:	02008000 	.word	0x02008000

0800a148 <HAL_SMBUS_ConfigDigitalFilter>:
  *                the configuration information for the specified SMBUS.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SMBUS_ConfigDigitalFilter(SMBUS_HandleTypeDef *hsmbus, uint32_t DigitalFilter)
{
 800a148:	b480      	push	{r7}
 800a14a:	b085      	sub	sp, #20
 800a14c:	af00      	add	r7, sp, #0
 800a14e:	6078      	str	r0, [r7, #4]
 800a150:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SMBUS_ALL_INSTANCE(hsmbus->Instance));
  assert_param(IS_SMBUS_DIGITAL_FILTER(DigitalFilter));

  if (hsmbus->State == HAL_SMBUS_STATE_READY)
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a156:	2b01      	cmp	r3, #1
 800a158:	d137      	bne.n	800a1ca <HAL_SMBUS_ConfigDigitalFilter+0x82>
  {
    /* Process Locked */
    __HAL_LOCK(hsmbus);
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a160:	2b01      	cmp	r3, #1
 800a162:	d101      	bne.n	800a168 <HAL_SMBUS_ConfigDigitalFilter+0x20>
 800a164:	2302      	movs	r3, #2
 800a166:	e031      	b.n	800a1cc <HAL_SMBUS_ConfigDigitalFilter+0x84>
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	2201      	movs	r2, #1
 800a16c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

    hsmbus->State = HAL_SMBUS_STATE_BUSY;
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	2202      	movs	r2, #2
 800a174:	649a      	str	r2, [r3, #72]	; 0x48

    /* Disable the selected SMBUS peripheral */
    __HAL_SMBUS_DISABLE(hsmbus);
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	681b      	ldr	r3, [r3, #0]
 800a17a:	681a      	ldr	r2, [r3, #0]
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	681b      	ldr	r3, [r3, #0]
 800a180:	f022 0201 	bic.w	r2, r2, #1
 800a184:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hsmbus->Instance->CR1;
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	681b      	ldr	r3, [r3, #0]
 800a18a:	681b      	ldr	r3, [r3, #0]
 800a18c:	60fb      	str	r3, [r7, #12]

    /* Reset I2C DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800a18e:	68fb      	ldr	r3, [r7, #12]
 800a190:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800a194:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << I2C_CR1_DNF_Pos;
 800a196:	683b      	ldr	r3, [r7, #0]
 800a198:	021b      	lsls	r3, r3, #8
 800a19a:	68fa      	ldr	r2, [r7, #12]
 800a19c:	4313      	orrs	r3, r2
 800a19e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hsmbus->Instance->CR1 = tmpreg;
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	681b      	ldr	r3, [r3, #0]
 800a1a4:	68fa      	ldr	r2, [r7, #12]
 800a1a6:	601a      	str	r2, [r3, #0]

    __HAL_SMBUS_ENABLE(hsmbus);
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	681b      	ldr	r3, [r3, #0]
 800a1ac:	681a      	ldr	r2, [r3, #0]
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	681b      	ldr	r3, [r3, #0]
 800a1b2:	f042 0201 	orr.w	r2, r2, #1
 800a1b6:	601a      	str	r2, [r3, #0]

    hsmbus->State = HAL_SMBUS_STATE_READY;
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	2201      	movs	r2, #1
 800a1bc:	649a      	str	r2, [r3, #72]	; 0x48

    /* Process Unlocked */
    __HAL_UNLOCK(hsmbus);
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	2200      	movs	r2, #0
 800a1c2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

    return HAL_OK;
 800a1c6:	2300      	movs	r3, #0
 800a1c8:	e000      	b.n	800a1cc <HAL_SMBUS_ConfigDigitalFilter+0x84>
  }
  else
  {
    return HAL_BUSY;
 800a1ca:	2302      	movs	r3, #2
  }
}
 800a1cc:	4618      	mov	r0, r3
 800a1ce:	3714      	adds	r7, #20
 800a1d0:	46bd      	mov	sp, r7
 800a1d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1d6:	4770      	bx	lr

0800a1d8 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800a1d8:	b580      	push	{r7, lr}
 800a1da:	b084      	sub	sp, #16
 800a1dc:	af00      	add	r7, sp, #0
 800a1de:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	2b00      	cmp	r3, #0
 800a1e4:	d101      	bne.n	800a1ea <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800a1e6:	2301      	movs	r3, #1
 800a1e8:	e0f1      	b.n	800a3ce <HAL_SPI_Init+0x1f6>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	2200      	movs	r2, #0
 800a1ee:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	681b      	ldr	r3, [r3, #0]
 800a1f4:	4a78      	ldr	r2, [pc, #480]	; (800a3d8 <HAL_SPI_Init+0x200>)
 800a1f6:	4293      	cmp	r3, r2
 800a1f8:	d00f      	beq.n	800a21a <HAL_SPI_Init+0x42>
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	681b      	ldr	r3, [r3, #0]
 800a1fe:	4a77      	ldr	r2, [pc, #476]	; (800a3dc <HAL_SPI_Init+0x204>)
 800a200:	4293      	cmp	r3, r2
 800a202:	d00a      	beq.n	800a21a <HAL_SPI_Init+0x42>
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	681b      	ldr	r3, [r3, #0]
 800a208:	4a75      	ldr	r2, [pc, #468]	; (800a3e0 <HAL_SPI_Init+0x208>)
 800a20a:	4293      	cmp	r3, r2
 800a20c:	d005      	beq.n	800a21a <HAL_SPI_Init+0x42>
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	68db      	ldr	r3, [r3, #12]
 800a212:	2b0f      	cmp	r3, #15
 800a214:	d901      	bls.n	800a21a <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800a216:	2301      	movs	r3, #1
 800a218:	e0d9      	b.n	800a3ce <HAL_SPI_Init+0x1f6>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800a21a:	6878      	ldr	r0, [r7, #4]
 800a21c:	f000 fc9c 	bl	800ab58 <SPI_GetPacketSize>
 800a220:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	681b      	ldr	r3, [r3, #0]
 800a226:	4a6c      	ldr	r2, [pc, #432]	; (800a3d8 <HAL_SPI_Init+0x200>)
 800a228:	4293      	cmp	r3, r2
 800a22a:	d00c      	beq.n	800a246 <HAL_SPI_Init+0x6e>
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	681b      	ldr	r3, [r3, #0]
 800a230:	4a6a      	ldr	r2, [pc, #424]	; (800a3dc <HAL_SPI_Init+0x204>)
 800a232:	4293      	cmp	r3, r2
 800a234:	d007      	beq.n	800a246 <HAL_SPI_Init+0x6e>
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	681b      	ldr	r3, [r3, #0]
 800a23a:	4a69      	ldr	r2, [pc, #420]	; (800a3e0 <HAL_SPI_Init+0x208>)
 800a23c:	4293      	cmp	r3, r2
 800a23e:	d002      	beq.n	800a246 <HAL_SPI_Init+0x6e>
 800a240:	68fb      	ldr	r3, [r7, #12]
 800a242:	2b08      	cmp	r3, #8
 800a244:	d811      	bhi.n	800a26a <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800a24a:	4a63      	ldr	r2, [pc, #396]	; (800a3d8 <HAL_SPI_Init+0x200>)
 800a24c:	4293      	cmp	r3, r2
 800a24e:	d009      	beq.n	800a264 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	681b      	ldr	r3, [r3, #0]
 800a254:	4a61      	ldr	r2, [pc, #388]	; (800a3dc <HAL_SPI_Init+0x204>)
 800a256:	4293      	cmp	r3, r2
 800a258:	d004      	beq.n	800a264 <HAL_SPI_Init+0x8c>
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	681b      	ldr	r3, [r3, #0]
 800a25e:	4a60      	ldr	r2, [pc, #384]	; (800a3e0 <HAL_SPI_Init+0x208>)
 800a260:	4293      	cmp	r3, r2
 800a262:	d104      	bne.n	800a26e <HAL_SPI_Init+0x96>
 800a264:	68fb      	ldr	r3, [r7, #12]
 800a266:	2b10      	cmp	r3, #16
 800a268:	d901      	bls.n	800a26e <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800a26a:	2301      	movs	r3, #1
 800a26c:	e0af      	b.n	800a3ce <HAL_SPI_Init+0x1f6>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800a274:	b2db      	uxtb	r3, r3
 800a276:	2b00      	cmp	r3, #0
 800a278:	d106      	bne.n	800a288 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	2200      	movs	r2, #0
 800a27e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800a282:	6878      	ldr	r0, [r7, #4]
 800a284:	f7f9 fb38 	bl	80038f8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	2202      	movs	r2, #2
 800a28c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	681b      	ldr	r3, [r3, #0]
 800a294:	681a      	ldr	r2, [r3, #0]
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	681b      	ldr	r3, [r3, #0]
 800a29a:	f022 0201 	bic.w	r2, r2, #1
 800a29e:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	681b      	ldr	r3, [r3, #0]
 800a2a4:	689b      	ldr	r3, [r3, #8]
 800a2a6:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 800a2aa:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	699b      	ldr	r3, [r3, #24]
 800a2b0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a2b4:	d119      	bne.n	800a2ea <HAL_SPI_Init+0x112>
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	685b      	ldr	r3, [r3, #4]
 800a2ba:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a2be:	d103      	bne.n	800a2c8 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800a2c4:	2b00      	cmp	r3, #0
 800a2c6:	d008      	beq.n	800a2da <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800a2cc:	2b00      	cmp	r3, #0
 800a2ce:	d10c      	bne.n	800a2ea <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800a2d4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a2d8:	d107      	bne.n	800a2ea <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	681b      	ldr	r3, [r3, #0]
 800a2de:	681a      	ldr	r2, [r3, #0]
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	681b      	ldr	r3, [r3, #0]
 800a2e4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800a2e8:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	69da      	ldr	r2, [r3, #28]
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a2f2:	431a      	orrs	r2, r3
 800a2f4:	68bb      	ldr	r3, [r7, #8]
 800a2f6:	431a      	orrs	r2, r3
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a2fc:	ea42 0103 	orr.w	r1, r2, r3
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	68da      	ldr	r2, [r3, #12]
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	681b      	ldr	r3, [r3, #0]
 800a308:	430a      	orrs	r2, r1
 800a30a:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a314:	431a      	orrs	r2, r3
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a31a:	431a      	orrs	r2, r3
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	699b      	ldr	r3, [r3, #24]
 800a320:	431a      	orrs	r2, r3
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	691b      	ldr	r3, [r3, #16]
 800a326:	431a      	orrs	r2, r3
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	695b      	ldr	r3, [r3, #20]
 800a32c:	431a      	orrs	r2, r3
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	6a1b      	ldr	r3, [r3, #32]
 800a332:	431a      	orrs	r2, r3
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	685b      	ldr	r3, [r3, #4]
 800a338:	431a      	orrs	r2, r3
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a33e:	431a      	orrs	r2, r3
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	689b      	ldr	r3, [r3, #8]
 800a344:	431a      	orrs	r2, r3
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a34a:	ea42 0103 	orr.w	r1, r2, r3
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	681b      	ldr	r3, [r3, #0]
 800a356:	430a      	orrs	r2, r1
 800a358:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	685b      	ldr	r3, [r3, #4]
 800a35e:	2b00      	cmp	r3, #0
 800a360:	d113      	bne.n	800a38a <HAL_SPI_Init+0x1b2>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	681b      	ldr	r3, [r3, #0]
 800a366:	689b      	ldr	r3, [r3, #8]
 800a368:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	681b      	ldr	r3, [r3, #0]
 800a370:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a374:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	681b      	ldr	r3, [r3, #0]
 800a37a:	689b      	ldr	r3, [r3, #8]
 800a37c:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	681b      	ldr	r3, [r3, #0]
 800a384:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800a388:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	681b      	ldr	r3, [r3, #0]
 800a38e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	681b      	ldr	r3, [r3, #0]
 800a394:	f022 0201 	bic.w	r2, r2, #1
 800a398:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	685b      	ldr	r3, [r3, #4]
 800a39e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a3a2:	2b00      	cmp	r3, #0
 800a3a4:	d00a      	beq.n	800a3bc <HAL_SPI_Init+0x1e4>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	681b      	ldr	r3, [r3, #0]
 800a3aa:	68db      	ldr	r3, [r3, #12]
 800a3ac:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	681b      	ldr	r3, [r3, #0]
 800a3b8:	430a      	orrs	r2, r1
 800a3ba:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	2200      	movs	r2, #0
 800a3c0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	2201      	movs	r2, #1
 800a3c8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 800a3cc:	2300      	movs	r3, #0
}
 800a3ce:	4618      	mov	r0, r3
 800a3d0:	3710      	adds	r7, #16
 800a3d2:	46bd      	mov	sp, r7
 800a3d4:	bd80      	pop	{r7, pc}
 800a3d6:	bf00      	nop
 800a3d8:	40013000 	.word	0x40013000
 800a3dc:	40003800 	.word	0x40003800
 800a3e0:	40003c00 	.word	0x40003c00

0800a3e4 <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800a3e4:	b580      	push	{r7, lr}
 800a3e6:	b08e      	sub	sp, #56	; 0x38
 800a3e8:	af02      	add	r7, sp, #8
 800a3ea:	60f8      	str	r0, [r7, #12]
 800a3ec:	60b9      	str	r1, [r7, #8]
 800a3ee:	607a      	str	r2, [r7, #4]
 800a3f0:	807b      	strh	r3, [r7, #2]
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800a3f2:	2300      	movs	r3, #0
 800a3f4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800a3f8:	68fb      	ldr	r3, [r7, #12]
 800a3fa:	681b      	ldr	r3, [r3, #0]
 800a3fc:	3320      	adds	r3, #32
 800a3fe:	627b      	str	r3, [r7, #36]	; 0x24
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800a400:	68fb      	ldr	r3, [r7, #12]
 800a402:	681b      	ldr	r3, [r3, #0]
 800a404:	3330      	adds	r3, #48	; 0x30
 800a406:	623b      	str	r3, [r7, #32]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 800a408:	68fb      	ldr	r3, [r7, #12]
 800a40a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a40e:	2b01      	cmp	r3, #1
 800a410:	d101      	bne.n	800a416 <HAL_SPI_TransmitReceive+0x32>
 800a412:	2302      	movs	r3, #2
 800a414:	e2ce      	b.n	800a9b4 <HAL_SPI_TransmitReceive+0x5d0>
 800a416:	68fb      	ldr	r3, [r7, #12]
 800a418:	2201      	movs	r2, #1
 800a41a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800a41e:	f7fa f96b 	bl	80046f8 <HAL_GetTick>
 800a422:	61f8      	str	r0, [r7, #28]

  initial_TxXferCount = Size;
 800a424:	887b      	ldrh	r3, [r7, #2]
 800a426:	85fb      	strh	r3, [r7, #46]	; 0x2e
  initial_RxXferCount = Size;
 800a428:	887b      	ldrh	r3, [r7, #2]
 800a42a:	85bb      	strh	r3, [r7, #44]	; 0x2c
  tmp_state           = hspi->State;
 800a42c:	68fb      	ldr	r3, [r7, #12]
 800a42e:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800a432:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800a434:	68fb      	ldr	r3, [r7, #12]
 800a436:	685b      	ldr	r3, [r3, #4]
 800a438:	617b      	str	r3, [r7, #20]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800a43a:	7efb      	ldrb	r3, [r7, #27]
 800a43c:	2b01      	cmp	r3, #1
 800a43e:	d014      	beq.n	800a46a <HAL_SPI_TransmitReceive+0x86>
 800a440:	697b      	ldr	r3, [r7, #20]
 800a442:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a446:	d106      	bne.n	800a456 <HAL_SPI_TransmitReceive+0x72>
        ((tmp_mode == SPI_MODE_MASTER) && \
         (hspi->Init.Direction == SPI_DIRECTION_2LINES) && \
 800a448:	68fb      	ldr	r3, [r7, #12]
 800a44a:	689b      	ldr	r3, [r3, #8]
        ((tmp_mode == SPI_MODE_MASTER) && \
 800a44c:	2b00      	cmp	r3, #0
 800a44e:	d102      	bne.n	800a456 <HAL_SPI_TransmitReceive+0x72>
         (hspi->Init.Direction == SPI_DIRECTION_2LINES) && \
 800a450:	7efb      	ldrb	r3, [r7, #27]
 800a452:	2b04      	cmp	r3, #4
 800a454:	d009      	beq.n	800a46a <HAL_SPI_TransmitReceive+0x86>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    errorcode = HAL_BUSY;
 800a456:	2302      	movs	r3, #2
 800a458:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 800a45c:	68fb      	ldr	r3, [r7, #12]
 800a45e:	2200      	movs	r2, #0
 800a460:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800a464:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800a468:	e2a4      	b.n	800a9b4 <HAL_SPI_TransmitReceive+0x5d0>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 800a46a:	68bb      	ldr	r3, [r7, #8]
 800a46c:	2b00      	cmp	r3, #0
 800a46e:	d005      	beq.n	800a47c <HAL_SPI_TransmitReceive+0x98>
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	2b00      	cmp	r3, #0
 800a474:	d002      	beq.n	800a47c <HAL_SPI_TransmitReceive+0x98>
 800a476:	887b      	ldrh	r3, [r7, #2]
 800a478:	2b00      	cmp	r3, #0
 800a47a:	d109      	bne.n	800a490 <HAL_SPI_TransmitReceive+0xac>
  {
    errorcode = HAL_ERROR;
 800a47c:	2301      	movs	r3, #1
 800a47e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 800a482:	68fb      	ldr	r3, [r7, #12]
 800a484:	2200      	movs	r2, #0
 800a486:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800a48a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800a48e:	e291      	b.n	800a9b4 <HAL_SPI_TransmitReceive+0x5d0>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800a490:	68fb      	ldr	r3, [r7, #12]
 800a492:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800a496:	b2db      	uxtb	r3, r3
 800a498:	2b04      	cmp	r3, #4
 800a49a:	d003      	beq.n	800a4a4 <HAL_SPI_TransmitReceive+0xc0>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800a49c:	68fb      	ldr	r3, [r7, #12]
 800a49e:	2205      	movs	r2, #5
 800a4a0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a4a4:	68fb      	ldr	r3, [r7, #12]
 800a4a6:	2200      	movs	r2, #0
 800a4a8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800a4ac:	68fb      	ldr	r3, [r7, #12]
 800a4ae:	687a      	ldr	r2, [r7, #4]
 800a4b0:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferCount = Size;
 800a4b2:	68fb      	ldr	r3, [r7, #12]
 800a4b4:	887a      	ldrh	r2, [r7, #2]
 800a4b6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->RxXferSize  = Size;
 800a4ba:	68fb      	ldr	r3, [r7, #12]
 800a4bc:	887a      	ldrh	r2, [r7, #2]
 800a4be:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800a4c2:	68fb      	ldr	r3, [r7, #12]
 800a4c4:	68ba      	ldr	r2, [r7, #8]
 800a4c6:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferCount = Size;
 800a4c8:	68fb      	ldr	r3, [r7, #12]
 800a4ca:	887a      	ldrh	r2, [r7, #2]
 800a4cc:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->TxXferSize  = Size;
 800a4d0:	68fb      	ldr	r3, [r7, #12]
 800a4d2:	887a      	ldrh	r2, [r7, #2]
 800a4d4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800a4d8:	68fb      	ldr	r3, [r7, #12]
 800a4da:	2200      	movs	r2, #0
 800a4dc:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 800a4de:	68fb      	ldr	r3, [r7, #12]
 800a4e0:	2200      	movs	r2, #0
 800a4e2:	675a      	str	r2, [r3, #116]	; 0x74

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800a4e4:	68fb      	ldr	r3, [r7, #12]
 800a4e6:	681b      	ldr	r3, [r3, #0]
 800a4e8:	685a      	ldr	r2, [r3, #4]
 800a4ea:	4b81      	ldr	r3, [pc, #516]	; (800a6f0 <HAL_SPI_TransmitReceive+0x30c>)
 800a4ec:	4013      	ands	r3, r2
 800a4ee:	8879      	ldrh	r1, [r7, #2]
 800a4f0:	68fa      	ldr	r2, [r7, #12]
 800a4f2:	6812      	ldr	r2, [r2, #0]
 800a4f4:	430b      	orrs	r3, r1
 800a4f6:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 800a4f8:	68fb      	ldr	r3, [r7, #12]
 800a4fa:	681b      	ldr	r3, [r3, #0]
 800a4fc:	681a      	ldr	r2, [r3, #0]
 800a4fe:	68fb      	ldr	r3, [r7, #12]
 800a500:	681b      	ldr	r3, [r3, #0]
 800a502:	f042 0201 	orr.w	r2, r2, #1
 800a506:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800a508:	68fb      	ldr	r3, [r7, #12]
 800a50a:	685b      	ldr	r3, [r3, #4]
 800a50c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a510:	d107      	bne.n	800a522 <HAL_SPI_TransmitReceive+0x13e>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800a512:	68fb      	ldr	r3, [r7, #12]
 800a514:	681b      	ldr	r3, [r3, #0]
 800a516:	681a      	ldr	r2, [r3, #0]
 800a518:	68fb      	ldr	r3, [r7, #12]
 800a51a:	681b      	ldr	r3, [r3, #0]
 800a51c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a520:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800a522:	68fb      	ldr	r3, [r7, #12]
 800a524:	68db      	ldr	r3, [r3, #12]
 800a526:	2b0f      	cmp	r3, #15
 800a528:	d970      	bls.n	800a60c <HAL_SPI_TransmitReceive+0x228>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800a52a:	e068      	b.n	800a5fe <HAL_SPI_TransmitReceive+0x21a>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 800a52c:	68fb      	ldr	r3, [r7, #12]
 800a52e:	681b      	ldr	r3, [r3, #0]
 800a530:	695b      	ldr	r3, [r3, #20]
 800a532:	f003 0302 	and.w	r3, r3, #2
 800a536:	2b02      	cmp	r3, #2
 800a538:	d11a      	bne.n	800a570 <HAL_SPI_TransmitReceive+0x18c>
 800a53a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800a53c:	2b00      	cmp	r3, #0
 800a53e:	d017      	beq.n	800a570 <HAL_SPI_TransmitReceive+0x18c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800a540:	68fb      	ldr	r3, [r7, #12]
 800a542:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800a544:	68fb      	ldr	r3, [r7, #12]
 800a546:	681b      	ldr	r3, [r3, #0]
 800a548:	6812      	ldr	r2, [r2, #0]
 800a54a:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800a54c:	68fb      	ldr	r3, [r7, #12]
 800a54e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a550:	1d1a      	adds	r2, r3, #4
 800a552:	68fb      	ldr	r3, [r7, #12]
 800a554:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount --;
 800a556:	68fb      	ldr	r3, [r7, #12]
 800a558:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800a55c:	b29b      	uxth	r3, r3
 800a55e:	3b01      	subs	r3, #1
 800a560:	b29a      	uxth	r2, r3
 800a562:	68fb      	ldr	r3, [r7, #12]
 800a564:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 800a568:	68fb      	ldr	r3, [r7, #12]
 800a56a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800a56e:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }

      /* Check RXWNE/EOT flag */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL) && (initial_RxXferCount > 0UL))
 800a570:	68fb      	ldr	r3, [r7, #12]
 800a572:	681b      	ldr	r3, [r3, #0]
 800a574:	695a      	ldr	r2, [r3, #20]
 800a576:	f248 0308 	movw	r3, #32776	; 0x8008
 800a57a:	4013      	ands	r3, r2
 800a57c:	2b00      	cmp	r3, #0
 800a57e:	d01a      	beq.n	800a5b6 <HAL_SPI_TransmitReceive+0x1d2>
 800a580:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800a582:	2b00      	cmp	r3, #0
 800a584:	d017      	beq.n	800a5b6 <HAL_SPI_TransmitReceive+0x1d2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800a586:	68fb      	ldr	r3, [r7, #12]
 800a588:	681a      	ldr	r2, [r3, #0]
 800a58a:	68fb      	ldr	r3, [r7, #12]
 800a58c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a58e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800a590:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800a592:	68fb      	ldr	r3, [r7, #12]
 800a594:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a596:	1d1a      	adds	r2, r3, #4
 800a598:	68fb      	ldr	r3, [r7, #12]
 800a59a:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount --;
 800a59c:	68fb      	ldr	r3, [r7, #12]
 800a59e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800a5a2:	b29b      	uxth	r3, r3
 800a5a4:	3b01      	subs	r3, #1
 800a5a6:	b29a      	uxth	r2, r3
 800a5a8:	68fb      	ldr	r3, [r7, #12]
 800a5aa:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 800a5ae:	68fb      	ldr	r3, [r7, #12]
 800a5b0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800a5b4:	85bb      	strh	r3, [r7, #44]	; 0x2c
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a5b6:	f7fa f89f 	bl	80046f8 <HAL_GetTick>
 800a5ba:	4602      	mov	r2, r0
 800a5bc:	69fb      	ldr	r3, [r7, #28]
 800a5be:	1ad3      	subs	r3, r2, r3
 800a5c0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a5c2:	429a      	cmp	r2, r3
 800a5c4:	d803      	bhi.n	800a5ce <HAL_SPI_TransmitReceive+0x1ea>
 800a5c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a5cc:	d102      	bne.n	800a5d4 <HAL_SPI_TransmitReceive+0x1f0>
 800a5ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5d0:	2b00      	cmp	r3, #0
 800a5d2:	d114      	bne.n	800a5fe <HAL_SPI_TransmitReceive+0x21a>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 800a5d4:	68f8      	ldr	r0, [r7, #12]
 800a5d6:	f000 f9f1 	bl	800a9bc <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 800a5da:	68fb      	ldr	r3, [r7, #12]
 800a5dc:	2200      	movs	r2, #0
 800a5de:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800a5e2:	68fb      	ldr	r3, [r7, #12]
 800a5e4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a5e8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800a5ec:	68fb      	ldr	r3, [r7, #12]
 800a5ee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 800a5f2:	68fb      	ldr	r3, [r7, #12]
 800a5f4:	2201      	movs	r2, #1
 800a5f6:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 800a5fa:	2303      	movs	r3, #3
 800a5fc:	e1da      	b.n	800a9b4 <HAL_SPI_TransmitReceive+0x5d0>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800a5fe:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800a600:	2b00      	cmp	r3, #0
 800a602:	d193      	bne.n	800a52c <HAL_SPI_TransmitReceive+0x148>
 800a604:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800a606:	2b00      	cmp	r3, #0
 800a608:	d190      	bne.n	800a52c <HAL_SPI_TransmitReceive+0x148>
 800a60a:	e1ac      	b.n	800a966 <HAL_SPI_TransmitReceive+0x582>
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a60c:	68fb      	ldr	r3, [r7, #12]
 800a60e:	68db      	ldr	r3, [r3, #12]
 800a610:	2b07      	cmp	r3, #7
 800a612:	f240 81a0 	bls.w	800a956 <HAL_SPI_TransmitReceive+0x572>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800a616:	e0a9      	b.n	800a76c <HAL_SPI_TransmitReceive+0x388>
    {
      /* Check TXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP) && (initial_TxXferCount > 0UL))
 800a618:	68fb      	ldr	r3, [r7, #12]
 800a61a:	681b      	ldr	r3, [r3, #0]
 800a61c:	695b      	ldr	r3, [r3, #20]
 800a61e:	f003 0302 	and.w	r3, r3, #2
 800a622:	2b02      	cmp	r3, #2
 800a624:	d139      	bne.n	800a69a <HAL_SPI_TransmitReceive+0x2b6>
 800a626:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800a628:	2b00      	cmp	r3, #0
 800a62a:	d036      	beq.n	800a69a <HAL_SPI_TransmitReceive+0x2b6>
      {
        if ((initial_TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800a62c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800a62e:	2b01      	cmp	r3, #1
 800a630:	d91c      	bls.n	800a66c <HAL_SPI_TransmitReceive+0x288>
 800a632:	68fb      	ldr	r3, [r7, #12]
 800a634:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a636:	2b00      	cmp	r3, #0
 800a638:	d018      	beq.n	800a66c <HAL_SPI_TransmitReceive+0x288>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800a63a:	68fb      	ldr	r3, [r7, #12]
 800a63c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800a63e:	68fb      	ldr	r3, [r7, #12]
 800a640:	681b      	ldr	r3, [r3, #0]
 800a642:	6812      	ldr	r2, [r2, #0]
 800a644:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800a646:	68fb      	ldr	r3, [r7, #12]
 800a648:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a64a:	1d1a      	adds	r2, r3, #4
 800a64c:	68fb      	ldr	r3, [r7, #12]
 800a64e:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800a650:	68fb      	ldr	r3, [r7, #12]
 800a652:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800a656:	b29b      	uxth	r3, r3
 800a658:	3b02      	subs	r3, #2
 800a65a:	b29a      	uxth	r2, r3
 800a65c:	68fb      	ldr	r3, [r7, #12]
 800a65e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 800a662:	68fb      	ldr	r3, [r7, #12]
 800a664:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800a668:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800a66a:	e016      	b.n	800a69a <HAL_SPI_TransmitReceive+0x2b6>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800a66c:	68fb      	ldr	r3, [r7, #12]
 800a66e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a670:	881a      	ldrh	r2, [r3, #0]
 800a672:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a674:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800a676:	68fb      	ldr	r3, [r7, #12]
 800a678:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a67a:	1c9a      	adds	r2, r3, #2
 800a67c:	68fb      	ldr	r3, [r7, #12]
 800a67e:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800a680:	68fb      	ldr	r3, [r7, #12]
 800a682:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800a686:	b29b      	uxth	r3, r3
 800a688:	3b01      	subs	r3, #1
 800a68a:	b29a      	uxth	r2, r3
 800a68c:	68fb      	ldr	r3, [r7, #12]
 800a68e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 800a692:	68fb      	ldr	r3, [r7, #12]
 800a694:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800a698:	85fb      	strh	r3, [r7, #46]	; 0x2e
        }
      }

      /* Check RXWNE/FRLVL flag */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL) && (initial_RxXferCount > 0UL))
 800a69a:	68fb      	ldr	r3, [r7, #12]
 800a69c:	681b      	ldr	r3, [r3, #0]
 800a69e:	695b      	ldr	r3, [r3, #20]
 800a6a0:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800a6a4:	2b00      	cmp	r3, #0
 800a6a6:	d03d      	beq.n	800a724 <HAL_SPI_TransmitReceive+0x340>
 800a6a8:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800a6aa:	2b00      	cmp	r3, #0
 800a6ac:	d03a      	beq.n	800a724 <HAL_SPI_TransmitReceive+0x340>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 800a6ae:	68fb      	ldr	r3, [r7, #12]
 800a6b0:	681b      	ldr	r3, [r3, #0]
 800a6b2:	695b      	ldr	r3, [r3, #20]
 800a6b4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a6b8:	2b00      	cmp	r3, #0
 800a6ba:	d01b      	beq.n	800a6f4 <HAL_SPI_TransmitReceive+0x310>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800a6bc:	68fb      	ldr	r3, [r7, #12]
 800a6be:	681a      	ldr	r2, [r3, #0]
 800a6c0:	68fb      	ldr	r3, [r7, #12]
 800a6c2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a6c4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800a6c6:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800a6c8:	68fb      	ldr	r3, [r7, #12]
 800a6ca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a6cc:	1d1a      	adds	r2, r3, #4
 800a6ce:	68fb      	ldr	r3, [r7, #12]
 800a6d0:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 800a6d2:	68fb      	ldr	r3, [r7, #12]
 800a6d4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800a6d8:	b29b      	uxth	r3, r3
 800a6da:	3b02      	subs	r3, #2
 800a6dc:	b29a      	uxth	r2, r3
 800a6de:	68fb      	ldr	r3, [r7, #12]
 800a6e0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800a6e4:	68fb      	ldr	r3, [r7, #12]
 800a6e6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800a6ea:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800a6ec:	e01a      	b.n	800a724 <HAL_SPI_TransmitReceive+0x340>
 800a6ee:	bf00      	nop
 800a6f0:	ffff0000 	.word	0xffff0000
        }
        else
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800a6f4:	68fb      	ldr	r3, [r7, #12]
 800a6f6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a6f8:	6a3a      	ldr	r2, [r7, #32]
 800a6fa:	8812      	ldrh	r2, [r2, #0]
 800a6fc:	b292      	uxth	r2, r2
 800a6fe:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800a700:	68fb      	ldr	r3, [r7, #12]
 800a702:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a704:	1c9a      	adds	r2, r3, #2
 800a706:	68fb      	ldr	r3, [r7, #12]
 800a708:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 800a70a:	68fb      	ldr	r3, [r7, #12]
 800a70c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800a710:	b29b      	uxth	r3, r3
 800a712:	3b01      	subs	r3, #1
 800a714:	b29a      	uxth	r2, r3
 800a716:	68fb      	ldr	r3, [r7, #12]
 800a718:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800a71c:	68fb      	ldr	r3, [r7, #12]
 800a71e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800a722:	85bb      	strh	r3, [r7, #44]	; 0x2c
        }
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a724:	f7f9 ffe8 	bl	80046f8 <HAL_GetTick>
 800a728:	4602      	mov	r2, r0
 800a72a:	69fb      	ldr	r3, [r7, #28]
 800a72c:	1ad3      	subs	r3, r2, r3
 800a72e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a730:	429a      	cmp	r2, r3
 800a732:	d803      	bhi.n	800a73c <HAL_SPI_TransmitReceive+0x358>
 800a734:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a736:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a73a:	d102      	bne.n	800a742 <HAL_SPI_TransmitReceive+0x35e>
 800a73c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a73e:	2b00      	cmp	r3, #0
 800a740:	d114      	bne.n	800a76c <HAL_SPI_TransmitReceive+0x388>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 800a742:	68f8      	ldr	r0, [r7, #12]
 800a744:	f000 f93a 	bl	800a9bc <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 800a748:	68fb      	ldr	r3, [r7, #12]
 800a74a:	2200      	movs	r2, #0
 800a74c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800a750:	68fb      	ldr	r3, [r7, #12]
 800a752:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a756:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800a75a:	68fb      	ldr	r3, [r7, #12]
 800a75c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 800a760:	68fb      	ldr	r3, [r7, #12]
 800a762:	2201      	movs	r2, #1
 800a764:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 800a768:	2303      	movs	r3, #3
 800a76a:	e123      	b.n	800a9b4 <HAL_SPI_TransmitReceive+0x5d0>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800a76c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800a76e:	2b00      	cmp	r3, #0
 800a770:	f47f af52 	bne.w	800a618 <HAL_SPI_TransmitReceive+0x234>
 800a774:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800a776:	2b00      	cmp	r3, #0
 800a778:	f47f af4e 	bne.w	800a618 <HAL_SPI_TransmitReceive+0x234>
 800a77c:	e0f3      	b.n	800a966 <HAL_SPI_TransmitReceive+0x582>
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 800a77e:	68fb      	ldr	r3, [r7, #12]
 800a780:	681b      	ldr	r3, [r3, #0]
 800a782:	695b      	ldr	r3, [r3, #20]
 800a784:	f003 0302 	and.w	r3, r3, #2
 800a788:	2b02      	cmp	r3, #2
 800a78a:	d15a      	bne.n	800a842 <HAL_SPI_TransmitReceive+0x45e>
 800a78c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800a78e:	2b00      	cmp	r3, #0
 800a790:	d057      	beq.n	800a842 <HAL_SPI_TransmitReceive+0x45e>
      {
        if ((initial_TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800a792:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800a794:	2b03      	cmp	r3, #3
 800a796:	d91c      	bls.n	800a7d2 <HAL_SPI_TransmitReceive+0x3ee>
 800a798:	68fb      	ldr	r3, [r7, #12]
 800a79a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a79c:	2b40      	cmp	r3, #64	; 0x40
 800a79e:	d918      	bls.n	800a7d2 <HAL_SPI_TransmitReceive+0x3ee>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800a7a0:	68fb      	ldr	r3, [r7, #12]
 800a7a2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800a7a4:	68fb      	ldr	r3, [r7, #12]
 800a7a6:	681b      	ldr	r3, [r3, #0]
 800a7a8:	6812      	ldr	r2, [r2, #0]
 800a7aa:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800a7ac:	68fb      	ldr	r3, [r7, #12]
 800a7ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a7b0:	1d1a      	adds	r2, r3, #4
 800a7b2:	68fb      	ldr	r3, [r7, #12]
 800a7b4:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 800a7b6:	68fb      	ldr	r3, [r7, #12]
 800a7b8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800a7bc:	b29b      	uxth	r3, r3
 800a7be:	3b04      	subs	r3, #4
 800a7c0:	b29a      	uxth	r2, r3
 800a7c2:	68fb      	ldr	r3, [r7, #12]
 800a7c4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 800a7c8:	68fb      	ldr	r3, [r7, #12]
 800a7ca:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800a7ce:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800a7d0:	e037      	b.n	800a842 <HAL_SPI_TransmitReceive+0x45e>
        }
        else if ((initial_TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800a7d2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800a7d4:	2b01      	cmp	r3, #1
 800a7d6:	d91b      	bls.n	800a810 <HAL_SPI_TransmitReceive+0x42c>
 800a7d8:	68fb      	ldr	r3, [r7, #12]
 800a7da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a7dc:	2b00      	cmp	r3, #0
 800a7de:	d017      	beq.n	800a810 <HAL_SPI_TransmitReceive+0x42c>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800a7e0:	68fb      	ldr	r3, [r7, #12]
 800a7e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a7e4:	881a      	ldrh	r2, [r3, #0]
 800a7e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7e8:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800a7ea:	68fb      	ldr	r3, [r7, #12]
 800a7ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a7ee:	1c9a      	adds	r2, r3, #2
 800a7f0:	68fb      	ldr	r3, [r7, #12]
 800a7f2:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800a7f4:	68fb      	ldr	r3, [r7, #12]
 800a7f6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800a7fa:	b29b      	uxth	r3, r3
 800a7fc:	3b02      	subs	r3, #2
 800a7fe:	b29a      	uxth	r2, r3
 800a800:	68fb      	ldr	r3, [r7, #12]
 800a802:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 800a806:	68fb      	ldr	r3, [r7, #12]
 800a808:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800a80c:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800a80e:	e018      	b.n	800a842 <HAL_SPI_TransmitReceive+0x45e>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 800a810:	68fb      	ldr	r3, [r7, #12]
 800a812:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800a814:	68fb      	ldr	r3, [r7, #12]
 800a816:	681b      	ldr	r3, [r3, #0]
 800a818:	3320      	adds	r3, #32
 800a81a:	7812      	ldrb	r2, [r2, #0]
 800a81c:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800a81e:	68fb      	ldr	r3, [r7, #12]
 800a820:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a822:	1c5a      	adds	r2, r3, #1
 800a824:	68fb      	ldr	r3, [r7, #12]
 800a826:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800a828:	68fb      	ldr	r3, [r7, #12]
 800a82a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800a82e:	b29b      	uxth	r3, r3
 800a830:	3b01      	subs	r3, #1
 800a832:	b29a      	uxth	r2, r3
 800a834:	68fb      	ldr	r3, [r7, #12]
 800a836:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 800a83a:	68fb      	ldr	r3, [r7, #12]
 800a83c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800a840:	85fb      	strh	r3, [r7, #46]	; 0x2e
        }
      }

      /* Wait until RXWNE/FRLVL flag is reset */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL) && (initial_RxXferCount > 0UL))
 800a842:	68fb      	ldr	r3, [r7, #12]
 800a844:	681b      	ldr	r3, [r3, #0]
 800a846:	695b      	ldr	r3, [r3, #20]
 800a848:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800a84c:	2b00      	cmp	r3, #0
 800a84e:	d05e      	beq.n	800a90e <HAL_SPI_TransmitReceive+0x52a>
 800a850:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800a852:	2b00      	cmp	r3, #0
 800a854:	d05b      	beq.n	800a90e <HAL_SPI_TransmitReceive+0x52a>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 800a856:	68fb      	ldr	r3, [r7, #12]
 800a858:	681b      	ldr	r3, [r3, #0]
 800a85a:	695b      	ldr	r3, [r3, #20]
 800a85c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a860:	2b00      	cmp	r3, #0
 800a862:	d018      	beq.n	800a896 <HAL_SPI_TransmitReceive+0x4b2>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800a864:	68fb      	ldr	r3, [r7, #12]
 800a866:	681a      	ldr	r2, [r3, #0]
 800a868:	68fb      	ldr	r3, [r7, #12]
 800a86a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a86c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800a86e:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800a870:	68fb      	ldr	r3, [r7, #12]
 800a872:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a874:	1d1a      	adds	r2, r3, #4
 800a876:	68fb      	ldr	r3, [r7, #12]
 800a878:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)4UL;
 800a87a:	68fb      	ldr	r3, [r7, #12]
 800a87c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800a880:	b29b      	uxth	r3, r3
 800a882:	3b04      	subs	r3, #4
 800a884:	b29a      	uxth	r2, r3
 800a886:	68fb      	ldr	r3, [r7, #12]
 800a888:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800a88c:	68fb      	ldr	r3, [r7, #12]
 800a88e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800a892:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800a894:	e03b      	b.n	800a90e <HAL_SPI_TransmitReceive+0x52a>
        }
        else if ((hspi->Instance->SR & SPI_FLAG_FRLVL) > SPI_RX_FIFO_1PACKET)
 800a896:	68fb      	ldr	r3, [r7, #12]
 800a898:	681b      	ldr	r3, [r3, #0]
 800a89a:	695b      	ldr	r3, [r3, #20]
 800a89c:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 800a8a0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a8a4:	d918      	bls.n	800a8d8 <HAL_SPI_TransmitReceive+0x4f4>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800a8a6:	68fb      	ldr	r3, [r7, #12]
 800a8a8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a8aa:	6a3a      	ldr	r2, [r7, #32]
 800a8ac:	8812      	ldrh	r2, [r2, #0]
 800a8ae:	b292      	uxth	r2, r2
 800a8b0:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800a8b2:	68fb      	ldr	r3, [r7, #12]
 800a8b4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a8b6:	1c9a      	adds	r2, r3, #2
 800a8b8:	68fb      	ldr	r3, [r7, #12]
 800a8ba:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 800a8bc:	68fb      	ldr	r3, [r7, #12]
 800a8be:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800a8c2:	b29b      	uxth	r3, r3
 800a8c4:	3b02      	subs	r3, #2
 800a8c6:	b29a      	uxth	r2, r3
 800a8c8:	68fb      	ldr	r3, [r7, #12]
 800a8ca:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800a8ce:	68fb      	ldr	r3, [r7, #12]
 800a8d0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800a8d4:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800a8d6:	e01a      	b.n	800a90e <HAL_SPI_TransmitReceive+0x52a>
        }
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800a8d8:	68fb      	ldr	r3, [r7, #12]
 800a8da:	681b      	ldr	r3, [r3, #0]
 800a8dc:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800a8e0:	68fb      	ldr	r3, [r7, #12]
 800a8e2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a8e4:	7812      	ldrb	r2, [r2, #0]
 800a8e6:	b2d2      	uxtb	r2, r2
 800a8e8:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800a8ea:	68fb      	ldr	r3, [r7, #12]
 800a8ec:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a8ee:	1c5a      	adds	r2, r3, #1
 800a8f0:	68fb      	ldr	r3, [r7, #12]
 800a8f2:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 800a8f4:	68fb      	ldr	r3, [r7, #12]
 800a8f6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800a8fa:	b29b      	uxth	r3, r3
 800a8fc:	3b01      	subs	r3, #1
 800a8fe:	b29a      	uxth	r2, r3
 800a900:	68fb      	ldr	r3, [r7, #12]
 800a902:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800a906:	68fb      	ldr	r3, [r7, #12]
 800a908:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800a90c:	85bb      	strh	r3, [r7, #44]	; 0x2c
        }
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a90e:	f7f9 fef3 	bl	80046f8 <HAL_GetTick>
 800a912:	4602      	mov	r2, r0
 800a914:	69fb      	ldr	r3, [r7, #28]
 800a916:	1ad3      	subs	r3, r2, r3
 800a918:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a91a:	429a      	cmp	r2, r3
 800a91c:	d803      	bhi.n	800a926 <HAL_SPI_TransmitReceive+0x542>
 800a91e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a920:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a924:	d102      	bne.n	800a92c <HAL_SPI_TransmitReceive+0x548>
 800a926:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a928:	2b00      	cmp	r3, #0
 800a92a:	d114      	bne.n	800a956 <HAL_SPI_TransmitReceive+0x572>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 800a92c:	68f8      	ldr	r0, [r7, #12]
 800a92e:	f000 f845 	bl	800a9bc <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 800a932:	68fb      	ldr	r3, [r7, #12]
 800a934:	2200      	movs	r2, #0
 800a936:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800a93a:	68fb      	ldr	r3, [r7, #12]
 800a93c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a940:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800a944:	68fb      	ldr	r3, [r7, #12]
 800a946:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 800a94a:	68fb      	ldr	r3, [r7, #12]
 800a94c:	2201      	movs	r2, #1
 800a94e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 800a952:	2303      	movs	r3, #3
 800a954:	e02e      	b.n	800a9b4 <HAL_SPI_TransmitReceive+0x5d0>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800a956:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800a958:	2b00      	cmp	r3, #0
 800a95a:	f47f af10 	bne.w	800a77e <HAL_SPI_TransmitReceive+0x39a>
 800a95e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800a960:	2b00      	cmp	r3, #0
 800a962:	f47f af0c 	bne.w	800a77e <HAL_SPI_TransmitReceive+0x39a>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 800a966:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a968:	9300      	str	r3, [sp, #0]
 800a96a:	69fb      	ldr	r3, [r7, #28]
 800a96c:	2200      	movs	r2, #0
 800a96e:	2108      	movs	r1, #8
 800a970:	68f8      	ldr	r0, [r7, #12]
 800a972:	f000 f8c3 	bl	800aafc <SPI_WaitOnFlagUntilTimeout>
 800a976:	4603      	mov	r3, r0
 800a978:	2b00      	cmp	r3, #0
 800a97a:	d007      	beq.n	800a98c <HAL_SPI_TransmitReceive+0x5a8>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a97c:	68fb      	ldr	r3, [r7, #12]
 800a97e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a982:	f043 0220 	orr.w	r2, r3, #32
 800a986:	68fb      	ldr	r3, [r7, #12]
 800a988:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800a98c:	68f8      	ldr	r0, [r7, #12]
 800a98e:	f000 f815 	bl	800a9bc <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800a992:	68fb      	ldr	r3, [r7, #12]
 800a994:	2200      	movs	r2, #0
 800a996:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800a99a:	68fb      	ldr	r3, [r7, #12]
 800a99c:	2201      	movs	r2, #1
 800a99e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a9a2:	68fb      	ldr	r3, [r7, #12]
 800a9a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a9a8:	2b00      	cmp	r3, #0
 800a9aa:	d001      	beq.n	800a9b0 <HAL_SPI_TransmitReceive+0x5cc>
  {
    return HAL_ERROR;
 800a9ac:	2301      	movs	r3, #1
 800a9ae:	e001      	b.n	800a9b4 <HAL_SPI_TransmitReceive+0x5d0>
  }
  return errorcode;
 800a9b0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800a9b4:	4618      	mov	r0, r3
 800a9b6:	3730      	adds	r7, #48	; 0x30
 800a9b8:	46bd      	mov	sp, r7
 800a9ba:	bd80      	pop	{r7, pc}

0800a9bc <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800a9bc:	b480      	push	{r7}
 800a9be:	b085      	sub	sp, #20
 800a9c0:	af00      	add	r7, sp, #0
 800a9c2:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	681b      	ldr	r3, [r3, #0]
 800a9c8:	695b      	ldr	r3, [r3, #20]
 800a9ca:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	681b      	ldr	r3, [r3, #0]
 800a9d0:	699a      	ldr	r2, [r3, #24]
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	681b      	ldr	r3, [r3, #0]
 800a9d6:	f042 0208 	orr.w	r2, r2, #8
 800a9da:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	681b      	ldr	r3, [r3, #0]
 800a9e0:	699a      	ldr	r2, [r3, #24]
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	681b      	ldr	r3, [r3, #0]
 800a9e6:	f042 0210 	orr.w	r2, r2, #16
 800a9ea:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	681b      	ldr	r3, [r3, #0]
 800a9f0:	681a      	ldr	r2, [r3, #0]
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	681b      	ldr	r3, [r3, #0]
 800a9f6:	f022 0201 	bic.w	r2, r2, #1
 800a9fa:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	681b      	ldr	r3, [r3, #0]
 800aa00:	6919      	ldr	r1, [r3, #16]
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	681a      	ldr	r2, [r3, #0]
 800aa06:	4b3c      	ldr	r3, [pc, #240]	; (800aaf8 <SPI_CloseTransfer+0x13c>)
 800aa08:	400b      	ands	r3, r1
 800aa0a:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	681b      	ldr	r3, [r3, #0]
 800aa10:	689a      	ldr	r2, [r3, #8]
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	681b      	ldr	r3, [r3, #0]
 800aa16:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800aa1a:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800aa22:	b2db      	uxtb	r3, r3
 800aa24:	2b04      	cmp	r3, #4
 800aa26:	d014      	beq.n	800aa52 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800aa28:	68fb      	ldr	r3, [r7, #12]
 800aa2a:	f003 0320 	and.w	r3, r3, #32
 800aa2e:	2b00      	cmp	r3, #0
 800aa30:	d00f      	beq.n	800aa52 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800aa38:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	681b      	ldr	r3, [r3, #0]
 800aa46:	699a      	ldr	r2, [r3, #24]
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	681b      	ldr	r3, [r3, #0]
 800aa4c:	f042 0220 	orr.w	r2, r2, #32
 800aa50:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800aa58:	b2db      	uxtb	r3, r3
 800aa5a:	2b03      	cmp	r3, #3
 800aa5c:	d014      	beq.n	800aa88 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800aa5e:	68fb      	ldr	r3, [r7, #12]
 800aa60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aa64:	2b00      	cmp	r3, #0
 800aa66:	d00f      	beq.n	800aa88 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800aa6e:	f043 0204 	orr.w	r2, r3, #4
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	681b      	ldr	r3, [r3, #0]
 800aa7c:	699a      	ldr	r2, [r3, #24]
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	681b      	ldr	r3, [r3, #0]
 800aa82:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800aa86:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800aa88:	68fb      	ldr	r3, [r7, #12]
 800aa8a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800aa8e:	2b00      	cmp	r3, #0
 800aa90:	d00f      	beq.n	800aab2 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800aa98:	f043 0201 	orr.w	r2, r3, #1
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	681b      	ldr	r3, [r3, #0]
 800aaa6:	699a      	ldr	r2, [r3, #24]
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	681b      	ldr	r3, [r3, #0]
 800aaac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800aab0:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800aab2:	68fb      	ldr	r3, [r7, #12]
 800aab4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aab8:	2b00      	cmp	r3, #0
 800aaba:	d00f      	beq.n	800aadc <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800aac2:	f043 0208 	orr.w	r2, r3, #8
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	681b      	ldr	r3, [r3, #0]
 800aad0:	699a      	ldr	r2, [r3, #24]
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	681b      	ldr	r3, [r3, #0]
 800aad6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800aada:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	2200      	movs	r2, #0
 800aae0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	2200      	movs	r2, #0
 800aae8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 800aaec:	bf00      	nop
 800aaee:	3714      	adds	r7, #20
 800aaf0:	46bd      	mov	sp, r7
 800aaf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaf6:	4770      	bx	lr
 800aaf8:	fffffc90 	.word	0xfffffc90

0800aafc <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Tickstart, uint32_t Timeout)
{
 800aafc:	b580      	push	{r7, lr}
 800aafe:	b084      	sub	sp, #16
 800ab00:	af00      	add	r7, sp, #0
 800ab02:	60f8      	str	r0, [r7, #12]
 800ab04:	60b9      	str	r1, [r7, #8]
 800ab06:	603b      	str	r3, [r7, #0]
 800ab08:	4613      	mov	r3, r2
 800ab0a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800ab0c:	e010      	b.n	800ab30 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800ab0e:	f7f9 fdf3 	bl	80046f8 <HAL_GetTick>
 800ab12:	4602      	mov	r2, r0
 800ab14:	683b      	ldr	r3, [r7, #0]
 800ab16:	1ad3      	subs	r3, r2, r3
 800ab18:	69ba      	ldr	r2, [r7, #24]
 800ab1a:	429a      	cmp	r2, r3
 800ab1c:	d803      	bhi.n	800ab26 <SPI_WaitOnFlagUntilTimeout+0x2a>
 800ab1e:	69bb      	ldr	r3, [r7, #24]
 800ab20:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ab24:	d102      	bne.n	800ab2c <SPI_WaitOnFlagUntilTimeout+0x30>
 800ab26:	69bb      	ldr	r3, [r7, #24]
 800ab28:	2b00      	cmp	r3, #0
 800ab2a:	d101      	bne.n	800ab30 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 800ab2c:	2303      	movs	r3, #3
 800ab2e:	e00f      	b.n	800ab50 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800ab30:	68fb      	ldr	r3, [r7, #12]
 800ab32:	681b      	ldr	r3, [r3, #0]
 800ab34:	695a      	ldr	r2, [r3, #20]
 800ab36:	68bb      	ldr	r3, [r7, #8]
 800ab38:	4013      	ands	r3, r2
 800ab3a:	68ba      	ldr	r2, [r7, #8]
 800ab3c:	429a      	cmp	r2, r3
 800ab3e:	bf0c      	ite	eq
 800ab40:	2301      	moveq	r3, #1
 800ab42:	2300      	movne	r3, #0
 800ab44:	b2db      	uxtb	r3, r3
 800ab46:	461a      	mov	r2, r3
 800ab48:	79fb      	ldrb	r3, [r7, #7]
 800ab4a:	429a      	cmp	r2, r3
 800ab4c:	d0df      	beq.n	800ab0e <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 800ab4e:	2300      	movs	r3, #0
}
 800ab50:	4618      	mov	r0, r3
 800ab52:	3710      	adds	r7, #16
 800ab54:	46bd      	mov	sp, r7
 800ab56:	bd80      	pop	{r7, pc}

0800ab58 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 800ab58:	b480      	push	{r7}
 800ab5a:	b085      	sub	sp, #20
 800ab5c:	af00      	add	r7, sp, #0
 800ab5e:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ab64:	095b      	lsrs	r3, r3, #5
 800ab66:	3301      	adds	r3, #1
 800ab68:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	68db      	ldr	r3, [r3, #12]
 800ab6e:	3301      	adds	r3, #1
 800ab70:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800ab72:	68bb      	ldr	r3, [r7, #8]
 800ab74:	3307      	adds	r3, #7
 800ab76:	08db      	lsrs	r3, r3, #3
 800ab78:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800ab7a:	68bb      	ldr	r3, [r7, #8]
 800ab7c:	68fa      	ldr	r2, [r7, #12]
 800ab7e:	fb02 f303 	mul.w	r3, r2, r3
}
 800ab82:	4618      	mov	r0, r3
 800ab84:	3714      	adds	r7, #20
 800ab86:	46bd      	mov	sp, r7
 800ab88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab8c:	4770      	bx	lr

0800ab8e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800ab8e:	b580      	push	{r7, lr}
 800ab90:	b082      	sub	sp, #8
 800ab92:	af00      	add	r7, sp, #0
 800ab94:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	2b00      	cmp	r3, #0
 800ab9a:	d101      	bne.n	800aba0 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800ab9c:	2301      	movs	r3, #1
 800ab9e:	e049      	b.n	800ac34 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800aba6:	b2db      	uxtb	r3, r3
 800aba8:	2b00      	cmp	r3, #0
 800abaa:	d106      	bne.n	800abba <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	2200      	movs	r2, #0
 800abb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800abb4:	6878      	ldr	r0, [r7, #4]
 800abb6:	f000 f841 	bl	800ac3c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	2202      	movs	r2, #2
 800abbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	681a      	ldr	r2, [r3, #0]
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	3304      	adds	r3, #4
 800abca:	4619      	mov	r1, r3
 800abcc:	4610      	mov	r0, r2
 800abce:	f000 fd5b 	bl	800b688 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	2201      	movs	r2, #1
 800abd6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	2201      	movs	r2, #1
 800abde:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	2201      	movs	r2, #1
 800abe6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	2201      	movs	r2, #1
 800abee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	2201      	movs	r2, #1
 800abf6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	2201      	movs	r2, #1
 800abfe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	2201      	movs	r2, #1
 800ac06:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	2201      	movs	r2, #1
 800ac0e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	2201      	movs	r2, #1
 800ac16:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	2201      	movs	r2, #1
 800ac1e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	2201      	movs	r2, #1
 800ac26:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	2201      	movs	r2, #1
 800ac2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800ac32:	2300      	movs	r3, #0
}
 800ac34:	4618      	mov	r0, r3
 800ac36:	3708      	adds	r7, #8
 800ac38:	46bd      	mov	sp, r7
 800ac3a:	bd80      	pop	{r7, pc}

0800ac3c <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800ac3c:	b480      	push	{r7}
 800ac3e:	b083      	sub	sp, #12
 800ac40:	af00      	add	r7, sp, #0
 800ac42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800ac44:	bf00      	nop
 800ac46:	370c      	adds	r7, #12
 800ac48:	46bd      	mov	sp, r7
 800ac4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac4e:	4770      	bx	lr

0800ac50 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800ac50:	b480      	push	{r7}
 800ac52:	b085      	sub	sp, #20
 800ac54:	af00      	add	r7, sp, #0
 800ac56:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ac5e:	b2db      	uxtb	r3, r3
 800ac60:	2b01      	cmp	r3, #1
 800ac62:	d001      	beq.n	800ac68 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800ac64:	2301      	movs	r3, #1
 800ac66:	e054      	b.n	800ad12 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	2202      	movs	r2, #2
 800ac6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	681b      	ldr	r3, [r3, #0]
 800ac74:	68da      	ldr	r2, [r3, #12]
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	681b      	ldr	r3, [r3, #0]
 800ac7a:	f042 0201 	orr.w	r2, r2, #1
 800ac7e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	681b      	ldr	r3, [r3, #0]
 800ac84:	4a26      	ldr	r2, [pc, #152]	; (800ad20 <HAL_TIM_Base_Start_IT+0xd0>)
 800ac86:	4293      	cmp	r3, r2
 800ac88:	d022      	beq.n	800acd0 <HAL_TIM_Base_Start_IT+0x80>
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	681b      	ldr	r3, [r3, #0]
 800ac8e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ac92:	d01d      	beq.n	800acd0 <HAL_TIM_Base_Start_IT+0x80>
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	681b      	ldr	r3, [r3, #0]
 800ac98:	4a22      	ldr	r2, [pc, #136]	; (800ad24 <HAL_TIM_Base_Start_IT+0xd4>)
 800ac9a:	4293      	cmp	r3, r2
 800ac9c:	d018      	beq.n	800acd0 <HAL_TIM_Base_Start_IT+0x80>
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	681b      	ldr	r3, [r3, #0]
 800aca2:	4a21      	ldr	r2, [pc, #132]	; (800ad28 <HAL_TIM_Base_Start_IT+0xd8>)
 800aca4:	4293      	cmp	r3, r2
 800aca6:	d013      	beq.n	800acd0 <HAL_TIM_Base_Start_IT+0x80>
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	681b      	ldr	r3, [r3, #0]
 800acac:	4a1f      	ldr	r2, [pc, #124]	; (800ad2c <HAL_TIM_Base_Start_IT+0xdc>)
 800acae:	4293      	cmp	r3, r2
 800acb0:	d00e      	beq.n	800acd0 <HAL_TIM_Base_Start_IT+0x80>
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	681b      	ldr	r3, [r3, #0]
 800acb6:	4a1e      	ldr	r2, [pc, #120]	; (800ad30 <HAL_TIM_Base_Start_IT+0xe0>)
 800acb8:	4293      	cmp	r3, r2
 800acba:	d009      	beq.n	800acd0 <HAL_TIM_Base_Start_IT+0x80>
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	681b      	ldr	r3, [r3, #0]
 800acc0:	4a1c      	ldr	r2, [pc, #112]	; (800ad34 <HAL_TIM_Base_Start_IT+0xe4>)
 800acc2:	4293      	cmp	r3, r2
 800acc4:	d004      	beq.n	800acd0 <HAL_TIM_Base_Start_IT+0x80>
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	681b      	ldr	r3, [r3, #0]
 800acca:	4a1b      	ldr	r2, [pc, #108]	; (800ad38 <HAL_TIM_Base_Start_IT+0xe8>)
 800accc:	4293      	cmp	r3, r2
 800acce:	d115      	bne.n	800acfc <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	681b      	ldr	r3, [r3, #0]
 800acd4:	689a      	ldr	r2, [r3, #8]
 800acd6:	4b19      	ldr	r3, [pc, #100]	; (800ad3c <HAL_TIM_Base_Start_IT+0xec>)
 800acd8:	4013      	ands	r3, r2
 800acda:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800acdc:	68fb      	ldr	r3, [r7, #12]
 800acde:	2b06      	cmp	r3, #6
 800ace0:	d015      	beq.n	800ad0e <HAL_TIM_Base_Start_IT+0xbe>
 800ace2:	68fb      	ldr	r3, [r7, #12]
 800ace4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ace8:	d011      	beq.n	800ad0e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	681b      	ldr	r3, [r3, #0]
 800acee:	681a      	ldr	r2, [r3, #0]
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	681b      	ldr	r3, [r3, #0]
 800acf4:	f042 0201 	orr.w	r2, r2, #1
 800acf8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800acfa:	e008      	b.n	800ad0e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	681b      	ldr	r3, [r3, #0]
 800ad00:	681a      	ldr	r2, [r3, #0]
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	681b      	ldr	r3, [r3, #0]
 800ad06:	f042 0201 	orr.w	r2, r2, #1
 800ad0a:	601a      	str	r2, [r3, #0]
 800ad0c:	e000      	b.n	800ad10 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ad0e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800ad10:	2300      	movs	r3, #0
}
 800ad12:	4618      	mov	r0, r3
 800ad14:	3714      	adds	r7, #20
 800ad16:	46bd      	mov	sp, r7
 800ad18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad1c:	4770      	bx	lr
 800ad1e:	bf00      	nop
 800ad20:	40010000 	.word	0x40010000
 800ad24:	40000400 	.word	0x40000400
 800ad28:	40000800 	.word	0x40000800
 800ad2c:	40000c00 	.word	0x40000c00
 800ad30:	40010400 	.word	0x40010400
 800ad34:	40001800 	.word	0x40001800
 800ad38:	40014000 	.word	0x40014000
 800ad3c:	00010007 	.word	0x00010007

0800ad40 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800ad40:	b580      	push	{r7, lr}
 800ad42:	b082      	sub	sp, #8
 800ad44:	af00      	add	r7, sp, #0
 800ad46:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	2b00      	cmp	r3, #0
 800ad4c:	d101      	bne.n	800ad52 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800ad4e:	2301      	movs	r3, #1
 800ad50:	e049      	b.n	800ade6 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ad58:	b2db      	uxtb	r3, r3
 800ad5a:	2b00      	cmp	r3, #0
 800ad5c:	d106      	bne.n	800ad6c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	2200      	movs	r2, #0
 800ad62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800ad66:	6878      	ldr	r0, [r7, #4]
 800ad68:	f7f9 f888 	bl	8003e7c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	2202      	movs	r2, #2
 800ad70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	681a      	ldr	r2, [r3, #0]
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	3304      	adds	r3, #4
 800ad7c:	4619      	mov	r1, r3
 800ad7e:	4610      	mov	r0, r2
 800ad80:	f000 fc82 	bl	800b688 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	2201      	movs	r2, #1
 800ad88:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	2201      	movs	r2, #1
 800ad90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	2201      	movs	r2, #1
 800ad98:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	2201      	movs	r2, #1
 800ada0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	2201      	movs	r2, #1
 800ada8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	2201      	movs	r2, #1
 800adb0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	2201      	movs	r2, #1
 800adb8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	2201      	movs	r2, #1
 800adc0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	2201      	movs	r2, #1
 800adc8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	2201      	movs	r2, #1
 800add0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	2201      	movs	r2, #1
 800add8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	2201      	movs	r2, #1
 800ade0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800ade4:	2300      	movs	r3, #0
}
 800ade6:	4618      	mov	r0, r3
 800ade8:	3708      	adds	r7, #8
 800adea:	46bd      	mov	sp, r7
 800adec:	bd80      	pop	{r7, pc}
	...

0800adf0 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800adf0:	b580      	push	{r7, lr}
 800adf2:	b082      	sub	sp, #8
 800adf4:	af00      	add	r7, sp, #0
 800adf6:	6078      	str	r0, [r7, #4]
 800adf8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800adfa:	687b      	ldr	r3, [r7, #4]
 800adfc:	681b      	ldr	r3, [r3, #0]
 800adfe:	2200      	movs	r2, #0
 800ae00:	6839      	ldr	r1, [r7, #0]
 800ae02:	4618      	mov	r0, r3
 800ae04:	f000 ffb0 	bl	800bd68 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	681b      	ldr	r3, [r3, #0]
 800ae0c:	4a3e      	ldr	r2, [pc, #248]	; (800af08 <HAL_TIM_PWM_Stop+0x118>)
 800ae0e:	4293      	cmp	r3, r2
 800ae10:	d013      	beq.n	800ae3a <HAL_TIM_PWM_Stop+0x4a>
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	681b      	ldr	r3, [r3, #0]
 800ae16:	4a3d      	ldr	r2, [pc, #244]	; (800af0c <HAL_TIM_PWM_Stop+0x11c>)
 800ae18:	4293      	cmp	r3, r2
 800ae1a:	d00e      	beq.n	800ae3a <HAL_TIM_PWM_Stop+0x4a>
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	681b      	ldr	r3, [r3, #0]
 800ae20:	4a3b      	ldr	r2, [pc, #236]	; (800af10 <HAL_TIM_PWM_Stop+0x120>)
 800ae22:	4293      	cmp	r3, r2
 800ae24:	d009      	beq.n	800ae3a <HAL_TIM_PWM_Stop+0x4a>
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	681b      	ldr	r3, [r3, #0]
 800ae2a:	4a3a      	ldr	r2, [pc, #232]	; (800af14 <HAL_TIM_PWM_Stop+0x124>)
 800ae2c:	4293      	cmp	r3, r2
 800ae2e:	d004      	beq.n	800ae3a <HAL_TIM_PWM_Stop+0x4a>
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	681b      	ldr	r3, [r3, #0]
 800ae34:	4a38      	ldr	r2, [pc, #224]	; (800af18 <HAL_TIM_PWM_Stop+0x128>)
 800ae36:	4293      	cmp	r3, r2
 800ae38:	d101      	bne.n	800ae3e <HAL_TIM_PWM_Stop+0x4e>
 800ae3a:	2301      	movs	r3, #1
 800ae3c:	e000      	b.n	800ae40 <HAL_TIM_PWM_Stop+0x50>
 800ae3e:	2300      	movs	r3, #0
 800ae40:	2b00      	cmp	r3, #0
 800ae42:	d017      	beq.n	800ae74 <HAL_TIM_PWM_Stop+0x84>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	681b      	ldr	r3, [r3, #0]
 800ae48:	6a1a      	ldr	r2, [r3, #32]
 800ae4a:	f241 1311 	movw	r3, #4369	; 0x1111
 800ae4e:	4013      	ands	r3, r2
 800ae50:	2b00      	cmp	r3, #0
 800ae52:	d10f      	bne.n	800ae74 <HAL_TIM_PWM_Stop+0x84>
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	681b      	ldr	r3, [r3, #0]
 800ae58:	6a1a      	ldr	r2, [r3, #32]
 800ae5a:	f240 4344 	movw	r3, #1092	; 0x444
 800ae5e:	4013      	ands	r3, r2
 800ae60:	2b00      	cmp	r3, #0
 800ae62:	d107      	bne.n	800ae74 <HAL_TIM_PWM_Stop+0x84>
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	681b      	ldr	r3, [r3, #0]
 800ae68:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	681b      	ldr	r3, [r3, #0]
 800ae6e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800ae72:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	681b      	ldr	r3, [r3, #0]
 800ae78:	6a1a      	ldr	r2, [r3, #32]
 800ae7a:	f241 1311 	movw	r3, #4369	; 0x1111
 800ae7e:	4013      	ands	r3, r2
 800ae80:	2b00      	cmp	r3, #0
 800ae82:	d10f      	bne.n	800aea4 <HAL_TIM_PWM_Stop+0xb4>
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	681b      	ldr	r3, [r3, #0]
 800ae88:	6a1a      	ldr	r2, [r3, #32]
 800ae8a:	f240 4344 	movw	r3, #1092	; 0x444
 800ae8e:	4013      	ands	r3, r2
 800ae90:	2b00      	cmp	r3, #0
 800ae92:	d107      	bne.n	800aea4 <HAL_TIM_PWM_Stop+0xb4>
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	681b      	ldr	r3, [r3, #0]
 800ae98:	681a      	ldr	r2, [r3, #0]
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	681b      	ldr	r3, [r3, #0]
 800ae9e:	f022 0201 	bic.w	r2, r2, #1
 800aea2:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800aea4:	683b      	ldr	r3, [r7, #0]
 800aea6:	2b00      	cmp	r3, #0
 800aea8:	d104      	bne.n	800aeb4 <HAL_TIM_PWM_Stop+0xc4>
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	2201      	movs	r2, #1
 800aeae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800aeb2:	e023      	b.n	800aefc <HAL_TIM_PWM_Stop+0x10c>
 800aeb4:	683b      	ldr	r3, [r7, #0]
 800aeb6:	2b04      	cmp	r3, #4
 800aeb8:	d104      	bne.n	800aec4 <HAL_TIM_PWM_Stop+0xd4>
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	2201      	movs	r2, #1
 800aebe:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800aec2:	e01b      	b.n	800aefc <HAL_TIM_PWM_Stop+0x10c>
 800aec4:	683b      	ldr	r3, [r7, #0]
 800aec6:	2b08      	cmp	r3, #8
 800aec8:	d104      	bne.n	800aed4 <HAL_TIM_PWM_Stop+0xe4>
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	2201      	movs	r2, #1
 800aece:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800aed2:	e013      	b.n	800aefc <HAL_TIM_PWM_Stop+0x10c>
 800aed4:	683b      	ldr	r3, [r7, #0]
 800aed6:	2b0c      	cmp	r3, #12
 800aed8:	d104      	bne.n	800aee4 <HAL_TIM_PWM_Stop+0xf4>
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	2201      	movs	r2, #1
 800aede:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800aee2:	e00b      	b.n	800aefc <HAL_TIM_PWM_Stop+0x10c>
 800aee4:	683b      	ldr	r3, [r7, #0]
 800aee6:	2b10      	cmp	r3, #16
 800aee8:	d104      	bne.n	800aef4 <HAL_TIM_PWM_Stop+0x104>
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	2201      	movs	r2, #1
 800aeee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800aef2:	e003      	b.n	800aefc <HAL_TIM_PWM_Stop+0x10c>
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	2201      	movs	r2, #1
 800aef8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 800aefc:	2300      	movs	r3, #0
}
 800aefe:	4618      	mov	r0, r3
 800af00:	3708      	adds	r7, #8
 800af02:	46bd      	mov	sp, r7
 800af04:	bd80      	pop	{r7, pc}
 800af06:	bf00      	nop
 800af08:	40010000 	.word	0x40010000
 800af0c:	40010400 	.word	0x40010400
 800af10:	40014000 	.word	0x40014000
 800af14:	40014400 	.word	0x40014400
 800af18:	40014800 	.word	0x40014800

0800af1c <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800af1c:	b580      	push	{r7, lr}
 800af1e:	b084      	sub	sp, #16
 800af20:	af00      	add	r7, sp, #0
 800af22:	6078      	str	r0, [r7, #4]
 800af24:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800af26:	2300      	movs	r3, #0
 800af28:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800af2a:	683b      	ldr	r3, [r7, #0]
 800af2c:	2b00      	cmp	r3, #0
 800af2e:	d109      	bne.n	800af44 <HAL_TIM_PWM_Start_IT+0x28>
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800af36:	b2db      	uxtb	r3, r3
 800af38:	2b01      	cmp	r3, #1
 800af3a:	bf14      	ite	ne
 800af3c:	2301      	movne	r3, #1
 800af3e:	2300      	moveq	r3, #0
 800af40:	b2db      	uxtb	r3, r3
 800af42:	e03c      	b.n	800afbe <HAL_TIM_PWM_Start_IT+0xa2>
 800af44:	683b      	ldr	r3, [r7, #0]
 800af46:	2b04      	cmp	r3, #4
 800af48:	d109      	bne.n	800af5e <HAL_TIM_PWM_Start_IT+0x42>
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800af50:	b2db      	uxtb	r3, r3
 800af52:	2b01      	cmp	r3, #1
 800af54:	bf14      	ite	ne
 800af56:	2301      	movne	r3, #1
 800af58:	2300      	moveq	r3, #0
 800af5a:	b2db      	uxtb	r3, r3
 800af5c:	e02f      	b.n	800afbe <HAL_TIM_PWM_Start_IT+0xa2>
 800af5e:	683b      	ldr	r3, [r7, #0]
 800af60:	2b08      	cmp	r3, #8
 800af62:	d109      	bne.n	800af78 <HAL_TIM_PWM_Start_IT+0x5c>
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800af6a:	b2db      	uxtb	r3, r3
 800af6c:	2b01      	cmp	r3, #1
 800af6e:	bf14      	ite	ne
 800af70:	2301      	movne	r3, #1
 800af72:	2300      	moveq	r3, #0
 800af74:	b2db      	uxtb	r3, r3
 800af76:	e022      	b.n	800afbe <HAL_TIM_PWM_Start_IT+0xa2>
 800af78:	683b      	ldr	r3, [r7, #0]
 800af7a:	2b0c      	cmp	r3, #12
 800af7c:	d109      	bne.n	800af92 <HAL_TIM_PWM_Start_IT+0x76>
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800af84:	b2db      	uxtb	r3, r3
 800af86:	2b01      	cmp	r3, #1
 800af88:	bf14      	ite	ne
 800af8a:	2301      	movne	r3, #1
 800af8c:	2300      	moveq	r3, #0
 800af8e:	b2db      	uxtb	r3, r3
 800af90:	e015      	b.n	800afbe <HAL_TIM_PWM_Start_IT+0xa2>
 800af92:	683b      	ldr	r3, [r7, #0]
 800af94:	2b10      	cmp	r3, #16
 800af96:	d109      	bne.n	800afac <HAL_TIM_PWM_Start_IT+0x90>
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800af9e:	b2db      	uxtb	r3, r3
 800afa0:	2b01      	cmp	r3, #1
 800afa2:	bf14      	ite	ne
 800afa4:	2301      	movne	r3, #1
 800afa6:	2300      	moveq	r3, #0
 800afa8:	b2db      	uxtb	r3, r3
 800afaa:	e008      	b.n	800afbe <HAL_TIM_PWM_Start_IT+0xa2>
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800afb2:	b2db      	uxtb	r3, r3
 800afb4:	2b01      	cmp	r3, #1
 800afb6:	bf14      	ite	ne
 800afb8:	2301      	movne	r3, #1
 800afba:	2300      	moveq	r3, #0
 800afbc:	b2db      	uxtb	r3, r3
 800afbe:	2b00      	cmp	r3, #0
 800afc0:	d001      	beq.n	800afc6 <HAL_TIM_PWM_Start_IT+0xaa>
  {
    return HAL_ERROR;
 800afc2:	2301      	movs	r3, #1
 800afc4:	e0ec      	b.n	800b1a0 <HAL_TIM_PWM_Start_IT+0x284>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800afc6:	683b      	ldr	r3, [r7, #0]
 800afc8:	2b00      	cmp	r3, #0
 800afca:	d104      	bne.n	800afd6 <HAL_TIM_PWM_Start_IT+0xba>
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	2202      	movs	r2, #2
 800afd0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800afd4:	e023      	b.n	800b01e <HAL_TIM_PWM_Start_IT+0x102>
 800afd6:	683b      	ldr	r3, [r7, #0]
 800afd8:	2b04      	cmp	r3, #4
 800afda:	d104      	bne.n	800afe6 <HAL_TIM_PWM_Start_IT+0xca>
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	2202      	movs	r2, #2
 800afe0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800afe4:	e01b      	b.n	800b01e <HAL_TIM_PWM_Start_IT+0x102>
 800afe6:	683b      	ldr	r3, [r7, #0]
 800afe8:	2b08      	cmp	r3, #8
 800afea:	d104      	bne.n	800aff6 <HAL_TIM_PWM_Start_IT+0xda>
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	2202      	movs	r2, #2
 800aff0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800aff4:	e013      	b.n	800b01e <HAL_TIM_PWM_Start_IT+0x102>
 800aff6:	683b      	ldr	r3, [r7, #0]
 800aff8:	2b0c      	cmp	r3, #12
 800affa:	d104      	bne.n	800b006 <HAL_TIM_PWM_Start_IT+0xea>
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	2202      	movs	r2, #2
 800b000:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800b004:	e00b      	b.n	800b01e <HAL_TIM_PWM_Start_IT+0x102>
 800b006:	683b      	ldr	r3, [r7, #0]
 800b008:	2b10      	cmp	r3, #16
 800b00a:	d104      	bne.n	800b016 <HAL_TIM_PWM_Start_IT+0xfa>
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	2202      	movs	r2, #2
 800b010:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b014:	e003      	b.n	800b01e <HAL_TIM_PWM_Start_IT+0x102>
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	2202      	movs	r2, #2
 800b01a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  switch (Channel)
 800b01e:	683b      	ldr	r3, [r7, #0]
 800b020:	2b0c      	cmp	r3, #12
 800b022:	d841      	bhi.n	800b0a8 <HAL_TIM_PWM_Start_IT+0x18c>
 800b024:	a201      	add	r2, pc, #4	; (adr r2, 800b02c <HAL_TIM_PWM_Start_IT+0x110>)
 800b026:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b02a:	bf00      	nop
 800b02c:	0800b061 	.word	0x0800b061
 800b030:	0800b0a9 	.word	0x0800b0a9
 800b034:	0800b0a9 	.word	0x0800b0a9
 800b038:	0800b0a9 	.word	0x0800b0a9
 800b03c:	0800b073 	.word	0x0800b073
 800b040:	0800b0a9 	.word	0x0800b0a9
 800b044:	0800b0a9 	.word	0x0800b0a9
 800b048:	0800b0a9 	.word	0x0800b0a9
 800b04c:	0800b085 	.word	0x0800b085
 800b050:	0800b0a9 	.word	0x0800b0a9
 800b054:	0800b0a9 	.word	0x0800b0a9
 800b058:	0800b0a9 	.word	0x0800b0a9
 800b05c:	0800b097 	.word	0x0800b097
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	681b      	ldr	r3, [r3, #0]
 800b064:	68da      	ldr	r2, [r3, #12]
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	681b      	ldr	r3, [r3, #0]
 800b06a:	f042 0202 	orr.w	r2, r2, #2
 800b06e:	60da      	str	r2, [r3, #12]
      break;
 800b070:	e01d      	b.n	800b0ae <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	681b      	ldr	r3, [r3, #0]
 800b076:	68da      	ldr	r2, [r3, #12]
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	681b      	ldr	r3, [r3, #0]
 800b07c:	f042 0204 	orr.w	r2, r2, #4
 800b080:	60da      	str	r2, [r3, #12]
      break;
 800b082:	e014      	b.n	800b0ae <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	681b      	ldr	r3, [r3, #0]
 800b088:	68da      	ldr	r2, [r3, #12]
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	681b      	ldr	r3, [r3, #0]
 800b08e:	f042 0208 	orr.w	r2, r2, #8
 800b092:	60da      	str	r2, [r3, #12]
      break;
 800b094:	e00b      	b.n	800b0ae <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	681b      	ldr	r3, [r3, #0]
 800b09a:	68da      	ldr	r2, [r3, #12]
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	681b      	ldr	r3, [r3, #0]
 800b0a0:	f042 0210 	orr.w	r2, r2, #16
 800b0a4:	60da      	str	r2, [r3, #12]
      break;
 800b0a6:	e002      	b.n	800b0ae <HAL_TIM_PWM_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 800b0a8:	2301      	movs	r3, #1
 800b0aa:	73fb      	strb	r3, [r7, #15]
      break;
 800b0ac:	bf00      	nop
  }

  if (status == HAL_OK)
 800b0ae:	7bfb      	ldrb	r3, [r7, #15]
 800b0b0:	2b00      	cmp	r3, #0
 800b0b2:	d174      	bne.n	800b19e <HAL_TIM_PWM_Start_IT+0x282>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	681b      	ldr	r3, [r3, #0]
 800b0b8:	2201      	movs	r2, #1
 800b0ba:	6839      	ldr	r1, [r7, #0]
 800b0bc:	4618      	mov	r0, r3
 800b0be:	f000 fe53 	bl	800bd68 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800b0c2:	687b      	ldr	r3, [r7, #4]
 800b0c4:	681b      	ldr	r3, [r3, #0]
 800b0c6:	4a38      	ldr	r2, [pc, #224]	; (800b1a8 <HAL_TIM_PWM_Start_IT+0x28c>)
 800b0c8:	4293      	cmp	r3, r2
 800b0ca:	d013      	beq.n	800b0f4 <HAL_TIM_PWM_Start_IT+0x1d8>
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	681b      	ldr	r3, [r3, #0]
 800b0d0:	4a36      	ldr	r2, [pc, #216]	; (800b1ac <HAL_TIM_PWM_Start_IT+0x290>)
 800b0d2:	4293      	cmp	r3, r2
 800b0d4:	d00e      	beq.n	800b0f4 <HAL_TIM_PWM_Start_IT+0x1d8>
 800b0d6:	687b      	ldr	r3, [r7, #4]
 800b0d8:	681b      	ldr	r3, [r3, #0]
 800b0da:	4a35      	ldr	r2, [pc, #212]	; (800b1b0 <HAL_TIM_PWM_Start_IT+0x294>)
 800b0dc:	4293      	cmp	r3, r2
 800b0de:	d009      	beq.n	800b0f4 <HAL_TIM_PWM_Start_IT+0x1d8>
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	681b      	ldr	r3, [r3, #0]
 800b0e4:	4a33      	ldr	r2, [pc, #204]	; (800b1b4 <HAL_TIM_PWM_Start_IT+0x298>)
 800b0e6:	4293      	cmp	r3, r2
 800b0e8:	d004      	beq.n	800b0f4 <HAL_TIM_PWM_Start_IT+0x1d8>
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	681b      	ldr	r3, [r3, #0]
 800b0ee:	4a32      	ldr	r2, [pc, #200]	; (800b1b8 <HAL_TIM_PWM_Start_IT+0x29c>)
 800b0f0:	4293      	cmp	r3, r2
 800b0f2:	d101      	bne.n	800b0f8 <HAL_TIM_PWM_Start_IT+0x1dc>
 800b0f4:	2301      	movs	r3, #1
 800b0f6:	e000      	b.n	800b0fa <HAL_TIM_PWM_Start_IT+0x1de>
 800b0f8:	2300      	movs	r3, #0
 800b0fa:	2b00      	cmp	r3, #0
 800b0fc:	d007      	beq.n	800b10e <HAL_TIM_PWM_Start_IT+0x1f2>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	681b      	ldr	r3, [r3, #0]
 800b102:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	681b      	ldr	r3, [r3, #0]
 800b108:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800b10c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b10e:	687b      	ldr	r3, [r7, #4]
 800b110:	681b      	ldr	r3, [r3, #0]
 800b112:	4a25      	ldr	r2, [pc, #148]	; (800b1a8 <HAL_TIM_PWM_Start_IT+0x28c>)
 800b114:	4293      	cmp	r3, r2
 800b116:	d022      	beq.n	800b15e <HAL_TIM_PWM_Start_IT+0x242>
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	681b      	ldr	r3, [r3, #0]
 800b11c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b120:	d01d      	beq.n	800b15e <HAL_TIM_PWM_Start_IT+0x242>
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	681b      	ldr	r3, [r3, #0]
 800b126:	4a25      	ldr	r2, [pc, #148]	; (800b1bc <HAL_TIM_PWM_Start_IT+0x2a0>)
 800b128:	4293      	cmp	r3, r2
 800b12a:	d018      	beq.n	800b15e <HAL_TIM_PWM_Start_IT+0x242>
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	681b      	ldr	r3, [r3, #0]
 800b130:	4a23      	ldr	r2, [pc, #140]	; (800b1c0 <HAL_TIM_PWM_Start_IT+0x2a4>)
 800b132:	4293      	cmp	r3, r2
 800b134:	d013      	beq.n	800b15e <HAL_TIM_PWM_Start_IT+0x242>
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	681b      	ldr	r3, [r3, #0]
 800b13a:	4a22      	ldr	r2, [pc, #136]	; (800b1c4 <HAL_TIM_PWM_Start_IT+0x2a8>)
 800b13c:	4293      	cmp	r3, r2
 800b13e:	d00e      	beq.n	800b15e <HAL_TIM_PWM_Start_IT+0x242>
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	681b      	ldr	r3, [r3, #0]
 800b144:	4a19      	ldr	r2, [pc, #100]	; (800b1ac <HAL_TIM_PWM_Start_IT+0x290>)
 800b146:	4293      	cmp	r3, r2
 800b148:	d009      	beq.n	800b15e <HAL_TIM_PWM_Start_IT+0x242>
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	681b      	ldr	r3, [r3, #0]
 800b14e:	4a1e      	ldr	r2, [pc, #120]	; (800b1c8 <HAL_TIM_PWM_Start_IT+0x2ac>)
 800b150:	4293      	cmp	r3, r2
 800b152:	d004      	beq.n	800b15e <HAL_TIM_PWM_Start_IT+0x242>
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	681b      	ldr	r3, [r3, #0]
 800b158:	4a15      	ldr	r2, [pc, #84]	; (800b1b0 <HAL_TIM_PWM_Start_IT+0x294>)
 800b15a:	4293      	cmp	r3, r2
 800b15c:	d115      	bne.n	800b18a <HAL_TIM_PWM_Start_IT+0x26e>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	681b      	ldr	r3, [r3, #0]
 800b162:	689a      	ldr	r2, [r3, #8]
 800b164:	4b19      	ldr	r3, [pc, #100]	; (800b1cc <HAL_TIM_PWM_Start_IT+0x2b0>)
 800b166:	4013      	ands	r3, r2
 800b168:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b16a:	68bb      	ldr	r3, [r7, #8]
 800b16c:	2b06      	cmp	r3, #6
 800b16e:	d015      	beq.n	800b19c <HAL_TIM_PWM_Start_IT+0x280>
 800b170:	68bb      	ldr	r3, [r7, #8]
 800b172:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b176:	d011      	beq.n	800b19c <HAL_TIM_PWM_Start_IT+0x280>
      {
        __HAL_TIM_ENABLE(htim);
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	681b      	ldr	r3, [r3, #0]
 800b17c:	681a      	ldr	r2, [r3, #0]
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	681b      	ldr	r3, [r3, #0]
 800b182:	f042 0201 	orr.w	r2, r2, #1
 800b186:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b188:	e008      	b.n	800b19c <HAL_TIM_PWM_Start_IT+0x280>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	681b      	ldr	r3, [r3, #0]
 800b18e:	681a      	ldr	r2, [r3, #0]
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	681b      	ldr	r3, [r3, #0]
 800b194:	f042 0201 	orr.w	r2, r2, #1
 800b198:	601a      	str	r2, [r3, #0]
 800b19a:	e000      	b.n	800b19e <HAL_TIM_PWM_Start_IT+0x282>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b19c:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 800b19e:	7bfb      	ldrb	r3, [r7, #15]
}
 800b1a0:	4618      	mov	r0, r3
 800b1a2:	3710      	adds	r7, #16
 800b1a4:	46bd      	mov	sp, r7
 800b1a6:	bd80      	pop	{r7, pc}
 800b1a8:	40010000 	.word	0x40010000
 800b1ac:	40010400 	.word	0x40010400
 800b1b0:	40014000 	.word	0x40014000
 800b1b4:	40014400 	.word	0x40014400
 800b1b8:	40014800 	.word	0x40014800
 800b1bc:	40000400 	.word	0x40000400
 800b1c0:	40000800 	.word	0x40000800
 800b1c4:	40000c00 	.word	0x40000c00
 800b1c8:	40001800 	.word	0x40001800
 800b1cc:	00010007 	.word	0x00010007

0800b1d0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800b1d0:	b580      	push	{r7, lr}
 800b1d2:	b082      	sub	sp, #8
 800b1d4:	af00      	add	r7, sp, #0
 800b1d6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	681b      	ldr	r3, [r3, #0]
 800b1dc:	691b      	ldr	r3, [r3, #16]
 800b1de:	f003 0302 	and.w	r3, r3, #2
 800b1e2:	2b02      	cmp	r3, #2
 800b1e4:	d122      	bne.n	800b22c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800b1e6:	687b      	ldr	r3, [r7, #4]
 800b1e8:	681b      	ldr	r3, [r3, #0]
 800b1ea:	68db      	ldr	r3, [r3, #12]
 800b1ec:	f003 0302 	and.w	r3, r3, #2
 800b1f0:	2b02      	cmp	r3, #2
 800b1f2:	d11b      	bne.n	800b22c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	681b      	ldr	r3, [r3, #0]
 800b1f8:	f06f 0202 	mvn.w	r2, #2
 800b1fc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	2201      	movs	r2, #1
 800b202:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	681b      	ldr	r3, [r3, #0]
 800b208:	699b      	ldr	r3, [r3, #24]
 800b20a:	f003 0303 	and.w	r3, r3, #3
 800b20e:	2b00      	cmp	r3, #0
 800b210:	d003      	beq.n	800b21a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800b212:	6878      	ldr	r0, [r7, #4]
 800b214:	f000 fa1a 	bl	800b64c <HAL_TIM_IC_CaptureCallback>
 800b218:	e005      	b.n	800b226 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800b21a:	6878      	ldr	r0, [r7, #4]
 800b21c:	f000 fa0c 	bl	800b638 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b220:	6878      	ldr	r0, [r7, #4]
 800b222:	f000 fa1d 	bl	800b660 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	2200      	movs	r2, #0
 800b22a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	681b      	ldr	r3, [r3, #0]
 800b230:	691b      	ldr	r3, [r3, #16]
 800b232:	f003 0304 	and.w	r3, r3, #4
 800b236:	2b04      	cmp	r3, #4
 800b238:	d122      	bne.n	800b280 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	681b      	ldr	r3, [r3, #0]
 800b23e:	68db      	ldr	r3, [r3, #12]
 800b240:	f003 0304 	and.w	r3, r3, #4
 800b244:	2b04      	cmp	r3, #4
 800b246:	d11b      	bne.n	800b280 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	681b      	ldr	r3, [r3, #0]
 800b24c:	f06f 0204 	mvn.w	r2, #4
 800b250:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800b252:	687b      	ldr	r3, [r7, #4]
 800b254:	2202      	movs	r2, #2
 800b256:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	681b      	ldr	r3, [r3, #0]
 800b25c:	699b      	ldr	r3, [r3, #24]
 800b25e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b262:	2b00      	cmp	r3, #0
 800b264:	d003      	beq.n	800b26e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b266:	6878      	ldr	r0, [r7, #4]
 800b268:	f000 f9f0 	bl	800b64c <HAL_TIM_IC_CaptureCallback>
 800b26c:	e005      	b.n	800b27a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b26e:	6878      	ldr	r0, [r7, #4]
 800b270:	f000 f9e2 	bl	800b638 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b274:	6878      	ldr	r0, [r7, #4]
 800b276:	f000 f9f3 	bl	800b660 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	2200      	movs	r2, #0
 800b27e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	681b      	ldr	r3, [r3, #0]
 800b284:	691b      	ldr	r3, [r3, #16]
 800b286:	f003 0308 	and.w	r3, r3, #8
 800b28a:	2b08      	cmp	r3, #8
 800b28c:	d122      	bne.n	800b2d4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	681b      	ldr	r3, [r3, #0]
 800b292:	68db      	ldr	r3, [r3, #12]
 800b294:	f003 0308 	and.w	r3, r3, #8
 800b298:	2b08      	cmp	r3, #8
 800b29a:	d11b      	bne.n	800b2d4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	681b      	ldr	r3, [r3, #0]
 800b2a0:	f06f 0208 	mvn.w	r2, #8
 800b2a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	2204      	movs	r2, #4
 800b2aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	681b      	ldr	r3, [r3, #0]
 800b2b0:	69db      	ldr	r3, [r3, #28]
 800b2b2:	f003 0303 	and.w	r3, r3, #3
 800b2b6:	2b00      	cmp	r3, #0
 800b2b8:	d003      	beq.n	800b2c2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b2ba:	6878      	ldr	r0, [r7, #4]
 800b2bc:	f000 f9c6 	bl	800b64c <HAL_TIM_IC_CaptureCallback>
 800b2c0:	e005      	b.n	800b2ce <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b2c2:	6878      	ldr	r0, [r7, #4]
 800b2c4:	f000 f9b8 	bl	800b638 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b2c8:	6878      	ldr	r0, [r7, #4]
 800b2ca:	f000 f9c9 	bl	800b660 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	2200      	movs	r2, #0
 800b2d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	681b      	ldr	r3, [r3, #0]
 800b2d8:	691b      	ldr	r3, [r3, #16]
 800b2da:	f003 0310 	and.w	r3, r3, #16
 800b2de:	2b10      	cmp	r3, #16
 800b2e0:	d122      	bne.n	800b328 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800b2e2:	687b      	ldr	r3, [r7, #4]
 800b2e4:	681b      	ldr	r3, [r3, #0]
 800b2e6:	68db      	ldr	r3, [r3, #12]
 800b2e8:	f003 0310 	and.w	r3, r3, #16
 800b2ec:	2b10      	cmp	r3, #16
 800b2ee:	d11b      	bne.n	800b328 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	681b      	ldr	r3, [r3, #0]
 800b2f4:	f06f 0210 	mvn.w	r2, #16
 800b2f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	2208      	movs	r2, #8
 800b2fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	681b      	ldr	r3, [r3, #0]
 800b304:	69db      	ldr	r3, [r3, #28]
 800b306:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b30a:	2b00      	cmp	r3, #0
 800b30c:	d003      	beq.n	800b316 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b30e:	6878      	ldr	r0, [r7, #4]
 800b310:	f000 f99c 	bl	800b64c <HAL_TIM_IC_CaptureCallback>
 800b314:	e005      	b.n	800b322 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b316:	6878      	ldr	r0, [r7, #4]
 800b318:	f000 f98e 	bl	800b638 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b31c:	6878      	ldr	r0, [r7, #4]
 800b31e:	f000 f99f 	bl	800b660 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	2200      	movs	r2, #0
 800b326:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	681b      	ldr	r3, [r3, #0]
 800b32c:	691b      	ldr	r3, [r3, #16]
 800b32e:	f003 0301 	and.w	r3, r3, #1
 800b332:	2b01      	cmp	r3, #1
 800b334:	d10e      	bne.n	800b354 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800b336:	687b      	ldr	r3, [r7, #4]
 800b338:	681b      	ldr	r3, [r3, #0]
 800b33a:	68db      	ldr	r3, [r3, #12]
 800b33c:	f003 0301 	and.w	r3, r3, #1
 800b340:	2b01      	cmp	r3, #1
 800b342:	d107      	bne.n	800b354 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	681b      	ldr	r3, [r3, #0]
 800b348:	f06f 0201 	mvn.w	r2, #1
 800b34c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800b34e:	6878      	ldr	r0, [r7, #4]
 800b350:	f7f8 f996 	bl	8003680 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	681b      	ldr	r3, [r3, #0]
 800b358:	691b      	ldr	r3, [r3, #16]
 800b35a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b35e:	2b80      	cmp	r3, #128	; 0x80
 800b360:	d10e      	bne.n	800b380 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800b362:	687b      	ldr	r3, [r7, #4]
 800b364:	681b      	ldr	r3, [r3, #0]
 800b366:	68db      	ldr	r3, [r3, #12]
 800b368:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b36c:	2b80      	cmp	r3, #128	; 0x80
 800b36e:	d107      	bne.n	800b380 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800b370:	687b      	ldr	r3, [r7, #4]
 800b372:	681b      	ldr	r3, [r3, #0]
 800b374:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800b378:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800b37a:	6878      	ldr	r0, [r7, #4]
 800b37c:	f000 fdb2 	bl	800bee4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	681b      	ldr	r3, [r3, #0]
 800b384:	691b      	ldr	r3, [r3, #16]
 800b386:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b38a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b38e:	d10e      	bne.n	800b3ae <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	681b      	ldr	r3, [r3, #0]
 800b394:	68db      	ldr	r3, [r3, #12]
 800b396:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b39a:	2b80      	cmp	r3, #128	; 0x80
 800b39c:	d107      	bne.n	800b3ae <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	681b      	ldr	r3, [r3, #0]
 800b3a2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800b3a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800b3a8:	6878      	ldr	r0, [r7, #4]
 800b3aa:	f000 fda5 	bl	800bef8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800b3ae:	687b      	ldr	r3, [r7, #4]
 800b3b0:	681b      	ldr	r3, [r3, #0]
 800b3b2:	691b      	ldr	r3, [r3, #16]
 800b3b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b3b8:	2b40      	cmp	r3, #64	; 0x40
 800b3ba:	d10e      	bne.n	800b3da <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	681b      	ldr	r3, [r3, #0]
 800b3c0:	68db      	ldr	r3, [r3, #12]
 800b3c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b3c6:	2b40      	cmp	r3, #64	; 0x40
 800b3c8:	d107      	bne.n	800b3da <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800b3ca:	687b      	ldr	r3, [r7, #4]
 800b3cc:	681b      	ldr	r3, [r3, #0]
 800b3ce:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800b3d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800b3d4:	6878      	ldr	r0, [r7, #4]
 800b3d6:	f000 f94d 	bl	800b674 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800b3da:	687b      	ldr	r3, [r7, #4]
 800b3dc:	681b      	ldr	r3, [r3, #0]
 800b3de:	691b      	ldr	r3, [r3, #16]
 800b3e0:	f003 0320 	and.w	r3, r3, #32
 800b3e4:	2b20      	cmp	r3, #32
 800b3e6:	d10e      	bne.n	800b406 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	681b      	ldr	r3, [r3, #0]
 800b3ec:	68db      	ldr	r3, [r3, #12]
 800b3ee:	f003 0320 	and.w	r3, r3, #32
 800b3f2:	2b20      	cmp	r3, #32
 800b3f4:	d107      	bne.n	800b406 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800b3f6:	687b      	ldr	r3, [r7, #4]
 800b3f8:	681b      	ldr	r3, [r3, #0]
 800b3fa:	f06f 0220 	mvn.w	r2, #32
 800b3fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800b400:	6878      	ldr	r0, [r7, #4]
 800b402:	f000 fd65 	bl	800bed0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800b406:	bf00      	nop
 800b408:	3708      	adds	r7, #8
 800b40a:	46bd      	mov	sp, r7
 800b40c:	bd80      	pop	{r7, pc}
	...

0800b410 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800b410:	b580      	push	{r7, lr}
 800b412:	b086      	sub	sp, #24
 800b414:	af00      	add	r7, sp, #0
 800b416:	60f8      	str	r0, [r7, #12]
 800b418:	60b9      	str	r1, [r7, #8]
 800b41a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b41c:	2300      	movs	r3, #0
 800b41e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800b420:	68fb      	ldr	r3, [r7, #12]
 800b422:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b426:	2b01      	cmp	r3, #1
 800b428:	d101      	bne.n	800b42e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800b42a:	2302      	movs	r3, #2
 800b42c:	e0ff      	b.n	800b62e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800b42e:	68fb      	ldr	r3, [r7, #12]
 800b430:	2201      	movs	r2, #1
 800b432:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800b436:	687b      	ldr	r3, [r7, #4]
 800b438:	2b14      	cmp	r3, #20
 800b43a:	f200 80f0 	bhi.w	800b61e <HAL_TIM_PWM_ConfigChannel+0x20e>
 800b43e:	a201      	add	r2, pc, #4	; (adr r2, 800b444 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800b440:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b444:	0800b499 	.word	0x0800b499
 800b448:	0800b61f 	.word	0x0800b61f
 800b44c:	0800b61f 	.word	0x0800b61f
 800b450:	0800b61f 	.word	0x0800b61f
 800b454:	0800b4d9 	.word	0x0800b4d9
 800b458:	0800b61f 	.word	0x0800b61f
 800b45c:	0800b61f 	.word	0x0800b61f
 800b460:	0800b61f 	.word	0x0800b61f
 800b464:	0800b51b 	.word	0x0800b51b
 800b468:	0800b61f 	.word	0x0800b61f
 800b46c:	0800b61f 	.word	0x0800b61f
 800b470:	0800b61f 	.word	0x0800b61f
 800b474:	0800b55b 	.word	0x0800b55b
 800b478:	0800b61f 	.word	0x0800b61f
 800b47c:	0800b61f 	.word	0x0800b61f
 800b480:	0800b61f 	.word	0x0800b61f
 800b484:	0800b59d 	.word	0x0800b59d
 800b488:	0800b61f 	.word	0x0800b61f
 800b48c:	0800b61f 	.word	0x0800b61f
 800b490:	0800b61f 	.word	0x0800b61f
 800b494:	0800b5dd 	.word	0x0800b5dd
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800b498:	68fb      	ldr	r3, [r7, #12]
 800b49a:	681b      	ldr	r3, [r3, #0]
 800b49c:	68b9      	ldr	r1, [r7, #8]
 800b49e:	4618      	mov	r0, r3
 800b4a0:	f000 f98c 	bl	800b7bc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800b4a4:	68fb      	ldr	r3, [r7, #12]
 800b4a6:	681b      	ldr	r3, [r3, #0]
 800b4a8:	699a      	ldr	r2, [r3, #24]
 800b4aa:	68fb      	ldr	r3, [r7, #12]
 800b4ac:	681b      	ldr	r3, [r3, #0]
 800b4ae:	f042 0208 	orr.w	r2, r2, #8
 800b4b2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800b4b4:	68fb      	ldr	r3, [r7, #12]
 800b4b6:	681b      	ldr	r3, [r3, #0]
 800b4b8:	699a      	ldr	r2, [r3, #24]
 800b4ba:	68fb      	ldr	r3, [r7, #12]
 800b4bc:	681b      	ldr	r3, [r3, #0]
 800b4be:	f022 0204 	bic.w	r2, r2, #4
 800b4c2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800b4c4:	68fb      	ldr	r3, [r7, #12]
 800b4c6:	681b      	ldr	r3, [r3, #0]
 800b4c8:	6999      	ldr	r1, [r3, #24]
 800b4ca:	68bb      	ldr	r3, [r7, #8]
 800b4cc:	691a      	ldr	r2, [r3, #16]
 800b4ce:	68fb      	ldr	r3, [r7, #12]
 800b4d0:	681b      	ldr	r3, [r3, #0]
 800b4d2:	430a      	orrs	r2, r1
 800b4d4:	619a      	str	r2, [r3, #24]
      break;
 800b4d6:	e0a5      	b.n	800b624 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800b4d8:	68fb      	ldr	r3, [r7, #12]
 800b4da:	681b      	ldr	r3, [r3, #0]
 800b4dc:	68b9      	ldr	r1, [r7, #8]
 800b4de:	4618      	mov	r0, r3
 800b4e0:	f000 f9fc 	bl	800b8dc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800b4e4:	68fb      	ldr	r3, [r7, #12]
 800b4e6:	681b      	ldr	r3, [r3, #0]
 800b4e8:	699a      	ldr	r2, [r3, #24]
 800b4ea:	68fb      	ldr	r3, [r7, #12]
 800b4ec:	681b      	ldr	r3, [r3, #0]
 800b4ee:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b4f2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800b4f4:	68fb      	ldr	r3, [r7, #12]
 800b4f6:	681b      	ldr	r3, [r3, #0]
 800b4f8:	699a      	ldr	r2, [r3, #24]
 800b4fa:	68fb      	ldr	r3, [r7, #12]
 800b4fc:	681b      	ldr	r3, [r3, #0]
 800b4fe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b502:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800b504:	68fb      	ldr	r3, [r7, #12]
 800b506:	681b      	ldr	r3, [r3, #0]
 800b508:	6999      	ldr	r1, [r3, #24]
 800b50a:	68bb      	ldr	r3, [r7, #8]
 800b50c:	691b      	ldr	r3, [r3, #16]
 800b50e:	021a      	lsls	r2, r3, #8
 800b510:	68fb      	ldr	r3, [r7, #12]
 800b512:	681b      	ldr	r3, [r3, #0]
 800b514:	430a      	orrs	r2, r1
 800b516:	619a      	str	r2, [r3, #24]
      break;
 800b518:	e084      	b.n	800b624 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800b51a:	68fb      	ldr	r3, [r7, #12]
 800b51c:	681b      	ldr	r3, [r3, #0]
 800b51e:	68b9      	ldr	r1, [r7, #8]
 800b520:	4618      	mov	r0, r3
 800b522:	f000 fa65 	bl	800b9f0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800b526:	68fb      	ldr	r3, [r7, #12]
 800b528:	681b      	ldr	r3, [r3, #0]
 800b52a:	69da      	ldr	r2, [r3, #28]
 800b52c:	68fb      	ldr	r3, [r7, #12]
 800b52e:	681b      	ldr	r3, [r3, #0]
 800b530:	f042 0208 	orr.w	r2, r2, #8
 800b534:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800b536:	68fb      	ldr	r3, [r7, #12]
 800b538:	681b      	ldr	r3, [r3, #0]
 800b53a:	69da      	ldr	r2, [r3, #28]
 800b53c:	68fb      	ldr	r3, [r7, #12]
 800b53e:	681b      	ldr	r3, [r3, #0]
 800b540:	f022 0204 	bic.w	r2, r2, #4
 800b544:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800b546:	68fb      	ldr	r3, [r7, #12]
 800b548:	681b      	ldr	r3, [r3, #0]
 800b54a:	69d9      	ldr	r1, [r3, #28]
 800b54c:	68bb      	ldr	r3, [r7, #8]
 800b54e:	691a      	ldr	r2, [r3, #16]
 800b550:	68fb      	ldr	r3, [r7, #12]
 800b552:	681b      	ldr	r3, [r3, #0]
 800b554:	430a      	orrs	r2, r1
 800b556:	61da      	str	r2, [r3, #28]
      break;
 800b558:	e064      	b.n	800b624 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800b55a:	68fb      	ldr	r3, [r7, #12]
 800b55c:	681b      	ldr	r3, [r3, #0]
 800b55e:	68b9      	ldr	r1, [r7, #8]
 800b560:	4618      	mov	r0, r3
 800b562:	f000 facd 	bl	800bb00 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800b566:	68fb      	ldr	r3, [r7, #12]
 800b568:	681b      	ldr	r3, [r3, #0]
 800b56a:	69da      	ldr	r2, [r3, #28]
 800b56c:	68fb      	ldr	r3, [r7, #12]
 800b56e:	681b      	ldr	r3, [r3, #0]
 800b570:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b574:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800b576:	68fb      	ldr	r3, [r7, #12]
 800b578:	681b      	ldr	r3, [r3, #0]
 800b57a:	69da      	ldr	r2, [r3, #28]
 800b57c:	68fb      	ldr	r3, [r7, #12]
 800b57e:	681b      	ldr	r3, [r3, #0]
 800b580:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b584:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800b586:	68fb      	ldr	r3, [r7, #12]
 800b588:	681b      	ldr	r3, [r3, #0]
 800b58a:	69d9      	ldr	r1, [r3, #28]
 800b58c:	68bb      	ldr	r3, [r7, #8]
 800b58e:	691b      	ldr	r3, [r3, #16]
 800b590:	021a      	lsls	r2, r3, #8
 800b592:	68fb      	ldr	r3, [r7, #12]
 800b594:	681b      	ldr	r3, [r3, #0]
 800b596:	430a      	orrs	r2, r1
 800b598:	61da      	str	r2, [r3, #28]
      break;
 800b59a:	e043      	b.n	800b624 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800b59c:	68fb      	ldr	r3, [r7, #12]
 800b59e:	681b      	ldr	r3, [r3, #0]
 800b5a0:	68b9      	ldr	r1, [r7, #8]
 800b5a2:	4618      	mov	r0, r3
 800b5a4:	f000 fb16 	bl	800bbd4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800b5a8:	68fb      	ldr	r3, [r7, #12]
 800b5aa:	681b      	ldr	r3, [r3, #0]
 800b5ac:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b5ae:	68fb      	ldr	r3, [r7, #12]
 800b5b0:	681b      	ldr	r3, [r3, #0]
 800b5b2:	f042 0208 	orr.w	r2, r2, #8
 800b5b6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800b5b8:	68fb      	ldr	r3, [r7, #12]
 800b5ba:	681b      	ldr	r3, [r3, #0]
 800b5bc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b5be:	68fb      	ldr	r3, [r7, #12]
 800b5c0:	681b      	ldr	r3, [r3, #0]
 800b5c2:	f022 0204 	bic.w	r2, r2, #4
 800b5c6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800b5c8:	68fb      	ldr	r3, [r7, #12]
 800b5ca:	681b      	ldr	r3, [r3, #0]
 800b5cc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800b5ce:	68bb      	ldr	r3, [r7, #8]
 800b5d0:	691a      	ldr	r2, [r3, #16]
 800b5d2:	68fb      	ldr	r3, [r7, #12]
 800b5d4:	681b      	ldr	r3, [r3, #0]
 800b5d6:	430a      	orrs	r2, r1
 800b5d8:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800b5da:	e023      	b.n	800b624 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800b5dc:	68fb      	ldr	r3, [r7, #12]
 800b5de:	681b      	ldr	r3, [r3, #0]
 800b5e0:	68b9      	ldr	r1, [r7, #8]
 800b5e2:	4618      	mov	r0, r3
 800b5e4:	f000 fb5a 	bl	800bc9c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800b5e8:	68fb      	ldr	r3, [r7, #12]
 800b5ea:	681b      	ldr	r3, [r3, #0]
 800b5ec:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b5ee:	68fb      	ldr	r3, [r7, #12]
 800b5f0:	681b      	ldr	r3, [r3, #0]
 800b5f2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b5f6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800b5f8:	68fb      	ldr	r3, [r7, #12]
 800b5fa:	681b      	ldr	r3, [r3, #0]
 800b5fc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b5fe:	68fb      	ldr	r3, [r7, #12]
 800b600:	681b      	ldr	r3, [r3, #0]
 800b602:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b606:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800b608:	68fb      	ldr	r3, [r7, #12]
 800b60a:	681b      	ldr	r3, [r3, #0]
 800b60c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800b60e:	68bb      	ldr	r3, [r7, #8]
 800b610:	691b      	ldr	r3, [r3, #16]
 800b612:	021a      	lsls	r2, r3, #8
 800b614:	68fb      	ldr	r3, [r7, #12]
 800b616:	681b      	ldr	r3, [r3, #0]
 800b618:	430a      	orrs	r2, r1
 800b61a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800b61c:	e002      	b.n	800b624 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800b61e:	2301      	movs	r3, #1
 800b620:	75fb      	strb	r3, [r7, #23]
      break;
 800b622:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800b624:	68fb      	ldr	r3, [r7, #12]
 800b626:	2200      	movs	r2, #0
 800b628:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800b62c:	7dfb      	ldrb	r3, [r7, #23]
}
 800b62e:	4618      	mov	r0, r3
 800b630:	3718      	adds	r7, #24
 800b632:	46bd      	mov	sp, r7
 800b634:	bd80      	pop	{r7, pc}
 800b636:	bf00      	nop

0800b638 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b638:	b480      	push	{r7}
 800b63a:	b083      	sub	sp, #12
 800b63c:	af00      	add	r7, sp, #0
 800b63e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800b640:	bf00      	nop
 800b642:	370c      	adds	r7, #12
 800b644:	46bd      	mov	sp, r7
 800b646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b64a:	4770      	bx	lr

0800b64c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800b64c:	b480      	push	{r7}
 800b64e:	b083      	sub	sp, #12
 800b650:	af00      	add	r7, sp, #0
 800b652:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800b654:	bf00      	nop
 800b656:	370c      	adds	r7, #12
 800b658:	46bd      	mov	sp, r7
 800b65a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b65e:	4770      	bx	lr

0800b660 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800b660:	b480      	push	{r7}
 800b662:	b083      	sub	sp, #12
 800b664:	af00      	add	r7, sp, #0
 800b666:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800b668:	bf00      	nop
 800b66a:	370c      	adds	r7, #12
 800b66c:	46bd      	mov	sp, r7
 800b66e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b672:	4770      	bx	lr

0800b674 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800b674:	b480      	push	{r7}
 800b676:	b083      	sub	sp, #12
 800b678:	af00      	add	r7, sp, #0
 800b67a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800b67c:	bf00      	nop
 800b67e:	370c      	adds	r7, #12
 800b680:	46bd      	mov	sp, r7
 800b682:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b686:	4770      	bx	lr

0800b688 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800b688:	b480      	push	{r7}
 800b68a:	b085      	sub	sp, #20
 800b68c:	af00      	add	r7, sp, #0
 800b68e:	6078      	str	r0, [r7, #4]
 800b690:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b692:	687b      	ldr	r3, [r7, #4]
 800b694:	681b      	ldr	r3, [r3, #0]
 800b696:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	4a40      	ldr	r2, [pc, #256]	; (800b79c <TIM_Base_SetConfig+0x114>)
 800b69c:	4293      	cmp	r3, r2
 800b69e:	d013      	beq.n	800b6c8 <TIM_Base_SetConfig+0x40>
 800b6a0:	687b      	ldr	r3, [r7, #4]
 800b6a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b6a6:	d00f      	beq.n	800b6c8 <TIM_Base_SetConfig+0x40>
 800b6a8:	687b      	ldr	r3, [r7, #4]
 800b6aa:	4a3d      	ldr	r2, [pc, #244]	; (800b7a0 <TIM_Base_SetConfig+0x118>)
 800b6ac:	4293      	cmp	r3, r2
 800b6ae:	d00b      	beq.n	800b6c8 <TIM_Base_SetConfig+0x40>
 800b6b0:	687b      	ldr	r3, [r7, #4]
 800b6b2:	4a3c      	ldr	r2, [pc, #240]	; (800b7a4 <TIM_Base_SetConfig+0x11c>)
 800b6b4:	4293      	cmp	r3, r2
 800b6b6:	d007      	beq.n	800b6c8 <TIM_Base_SetConfig+0x40>
 800b6b8:	687b      	ldr	r3, [r7, #4]
 800b6ba:	4a3b      	ldr	r2, [pc, #236]	; (800b7a8 <TIM_Base_SetConfig+0x120>)
 800b6bc:	4293      	cmp	r3, r2
 800b6be:	d003      	beq.n	800b6c8 <TIM_Base_SetConfig+0x40>
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	4a3a      	ldr	r2, [pc, #232]	; (800b7ac <TIM_Base_SetConfig+0x124>)
 800b6c4:	4293      	cmp	r3, r2
 800b6c6:	d108      	bne.n	800b6da <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b6c8:	68fb      	ldr	r3, [r7, #12]
 800b6ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b6ce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b6d0:	683b      	ldr	r3, [r7, #0]
 800b6d2:	685b      	ldr	r3, [r3, #4]
 800b6d4:	68fa      	ldr	r2, [r7, #12]
 800b6d6:	4313      	orrs	r3, r2
 800b6d8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b6da:	687b      	ldr	r3, [r7, #4]
 800b6dc:	4a2f      	ldr	r2, [pc, #188]	; (800b79c <TIM_Base_SetConfig+0x114>)
 800b6de:	4293      	cmp	r3, r2
 800b6e0:	d01f      	beq.n	800b722 <TIM_Base_SetConfig+0x9a>
 800b6e2:	687b      	ldr	r3, [r7, #4]
 800b6e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b6e8:	d01b      	beq.n	800b722 <TIM_Base_SetConfig+0x9a>
 800b6ea:	687b      	ldr	r3, [r7, #4]
 800b6ec:	4a2c      	ldr	r2, [pc, #176]	; (800b7a0 <TIM_Base_SetConfig+0x118>)
 800b6ee:	4293      	cmp	r3, r2
 800b6f0:	d017      	beq.n	800b722 <TIM_Base_SetConfig+0x9a>
 800b6f2:	687b      	ldr	r3, [r7, #4]
 800b6f4:	4a2b      	ldr	r2, [pc, #172]	; (800b7a4 <TIM_Base_SetConfig+0x11c>)
 800b6f6:	4293      	cmp	r3, r2
 800b6f8:	d013      	beq.n	800b722 <TIM_Base_SetConfig+0x9a>
 800b6fa:	687b      	ldr	r3, [r7, #4]
 800b6fc:	4a2a      	ldr	r2, [pc, #168]	; (800b7a8 <TIM_Base_SetConfig+0x120>)
 800b6fe:	4293      	cmp	r3, r2
 800b700:	d00f      	beq.n	800b722 <TIM_Base_SetConfig+0x9a>
 800b702:	687b      	ldr	r3, [r7, #4]
 800b704:	4a29      	ldr	r2, [pc, #164]	; (800b7ac <TIM_Base_SetConfig+0x124>)
 800b706:	4293      	cmp	r3, r2
 800b708:	d00b      	beq.n	800b722 <TIM_Base_SetConfig+0x9a>
 800b70a:	687b      	ldr	r3, [r7, #4]
 800b70c:	4a28      	ldr	r2, [pc, #160]	; (800b7b0 <TIM_Base_SetConfig+0x128>)
 800b70e:	4293      	cmp	r3, r2
 800b710:	d007      	beq.n	800b722 <TIM_Base_SetConfig+0x9a>
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	4a27      	ldr	r2, [pc, #156]	; (800b7b4 <TIM_Base_SetConfig+0x12c>)
 800b716:	4293      	cmp	r3, r2
 800b718:	d003      	beq.n	800b722 <TIM_Base_SetConfig+0x9a>
 800b71a:	687b      	ldr	r3, [r7, #4]
 800b71c:	4a26      	ldr	r2, [pc, #152]	; (800b7b8 <TIM_Base_SetConfig+0x130>)
 800b71e:	4293      	cmp	r3, r2
 800b720:	d108      	bne.n	800b734 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b722:	68fb      	ldr	r3, [r7, #12]
 800b724:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b728:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b72a:	683b      	ldr	r3, [r7, #0]
 800b72c:	68db      	ldr	r3, [r3, #12]
 800b72e:	68fa      	ldr	r2, [r7, #12]
 800b730:	4313      	orrs	r3, r2
 800b732:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b734:	68fb      	ldr	r3, [r7, #12]
 800b736:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800b73a:	683b      	ldr	r3, [r7, #0]
 800b73c:	695b      	ldr	r3, [r3, #20]
 800b73e:	4313      	orrs	r3, r2
 800b740:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800b742:	687b      	ldr	r3, [r7, #4]
 800b744:	68fa      	ldr	r2, [r7, #12]
 800b746:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b748:	683b      	ldr	r3, [r7, #0]
 800b74a:	689a      	ldr	r2, [r3, #8]
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b750:	683b      	ldr	r3, [r7, #0]
 800b752:	681a      	ldr	r2, [r3, #0]
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b758:	687b      	ldr	r3, [r7, #4]
 800b75a:	4a10      	ldr	r2, [pc, #64]	; (800b79c <TIM_Base_SetConfig+0x114>)
 800b75c:	4293      	cmp	r3, r2
 800b75e:	d00f      	beq.n	800b780 <TIM_Base_SetConfig+0xf8>
 800b760:	687b      	ldr	r3, [r7, #4]
 800b762:	4a12      	ldr	r2, [pc, #72]	; (800b7ac <TIM_Base_SetConfig+0x124>)
 800b764:	4293      	cmp	r3, r2
 800b766:	d00b      	beq.n	800b780 <TIM_Base_SetConfig+0xf8>
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	4a11      	ldr	r2, [pc, #68]	; (800b7b0 <TIM_Base_SetConfig+0x128>)
 800b76c:	4293      	cmp	r3, r2
 800b76e:	d007      	beq.n	800b780 <TIM_Base_SetConfig+0xf8>
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	4a10      	ldr	r2, [pc, #64]	; (800b7b4 <TIM_Base_SetConfig+0x12c>)
 800b774:	4293      	cmp	r3, r2
 800b776:	d003      	beq.n	800b780 <TIM_Base_SetConfig+0xf8>
 800b778:	687b      	ldr	r3, [r7, #4]
 800b77a:	4a0f      	ldr	r2, [pc, #60]	; (800b7b8 <TIM_Base_SetConfig+0x130>)
 800b77c:	4293      	cmp	r3, r2
 800b77e:	d103      	bne.n	800b788 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b780:	683b      	ldr	r3, [r7, #0]
 800b782:	691a      	ldr	r2, [r3, #16]
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b788:	687b      	ldr	r3, [r7, #4]
 800b78a:	2201      	movs	r2, #1
 800b78c:	615a      	str	r2, [r3, #20]
}
 800b78e:	bf00      	nop
 800b790:	3714      	adds	r7, #20
 800b792:	46bd      	mov	sp, r7
 800b794:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b798:	4770      	bx	lr
 800b79a:	bf00      	nop
 800b79c:	40010000 	.word	0x40010000
 800b7a0:	40000400 	.word	0x40000400
 800b7a4:	40000800 	.word	0x40000800
 800b7a8:	40000c00 	.word	0x40000c00
 800b7ac:	40010400 	.word	0x40010400
 800b7b0:	40014000 	.word	0x40014000
 800b7b4:	40014400 	.word	0x40014400
 800b7b8:	40014800 	.word	0x40014800

0800b7bc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b7bc:	b480      	push	{r7}
 800b7be:	b087      	sub	sp, #28
 800b7c0:	af00      	add	r7, sp, #0
 800b7c2:	6078      	str	r0, [r7, #4]
 800b7c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b7c6:	687b      	ldr	r3, [r7, #4]
 800b7c8:	6a1b      	ldr	r3, [r3, #32]
 800b7ca:	f023 0201 	bic.w	r2, r3, #1
 800b7ce:	687b      	ldr	r3, [r7, #4]
 800b7d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b7d2:	687b      	ldr	r3, [r7, #4]
 800b7d4:	6a1b      	ldr	r3, [r3, #32]
 800b7d6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b7d8:	687b      	ldr	r3, [r7, #4]
 800b7da:	685b      	ldr	r3, [r3, #4]
 800b7dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b7de:	687b      	ldr	r3, [r7, #4]
 800b7e0:	699b      	ldr	r3, [r3, #24]
 800b7e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800b7e4:	68fa      	ldr	r2, [r7, #12]
 800b7e6:	4b37      	ldr	r3, [pc, #220]	; (800b8c4 <TIM_OC1_SetConfig+0x108>)
 800b7e8:	4013      	ands	r3, r2
 800b7ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800b7ec:	68fb      	ldr	r3, [r7, #12]
 800b7ee:	f023 0303 	bic.w	r3, r3, #3
 800b7f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b7f4:	683b      	ldr	r3, [r7, #0]
 800b7f6:	681b      	ldr	r3, [r3, #0]
 800b7f8:	68fa      	ldr	r2, [r7, #12]
 800b7fa:	4313      	orrs	r3, r2
 800b7fc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800b7fe:	697b      	ldr	r3, [r7, #20]
 800b800:	f023 0302 	bic.w	r3, r3, #2
 800b804:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800b806:	683b      	ldr	r3, [r7, #0]
 800b808:	689b      	ldr	r3, [r3, #8]
 800b80a:	697a      	ldr	r2, [r7, #20]
 800b80c:	4313      	orrs	r3, r2
 800b80e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	4a2d      	ldr	r2, [pc, #180]	; (800b8c8 <TIM_OC1_SetConfig+0x10c>)
 800b814:	4293      	cmp	r3, r2
 800b816:	d00f      	beq.n	800b838 <TIM_OC1_SetConfig+0x7c>
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	4a2c      	ldr	r2, [pc, #176]	; (800b8cc <TIM_OC1_SetConfig+0x110>)
 800b81c:	4293      	cmp	r3, r2
 800b81e:	d00b      	beq.n	800b838 <TIM_OC1_SetConfig+0x7c>
 800b820:	687b      	ldr	r3, [r7, #4]
 800b822:	4a2b      	ldr	r2, [pc, #172]	; (800b8d0 <TIM_OC1_SetConfig+0x114>)
 800b824:	4293      	cmp	r3, r2
 800b826:	d007      	beq.n	800b838 <TIM_OC1_SetConfig+0x7c>
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	4a2a      	ldr	r2, [pc, #168]	; (800b8d4 <TIM_OC1_SetConfig+0x118>)
 800b82c:	4293      	cmp	r3, r2
 800b82e:	d003      	beq.n	800b838 <TIM_OC1_SetConfig+0x7c>
 800b830:	687b      	ldr	r3, [r7, #4]
 800b832:	4a29      	ldr	r2, [pc, #164]	; (800b8d8 <TIM_OC1_SetConfig+0x11c>)
 800b834:	4293      	cmp	r3, r2
 800b836:	d10c      	bne.n	800b852 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800b838:	697b      	ldr	r3, [r7, #20]
 800b83a:	f023 0308 	bic.w	r3, r3, #8
 800b83e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800b840:	683b      	ldr	r3, [r7, #0]
 800b842:	68db      	ldr	r3, [r3, #12]
 800b844:	697a      	ldr	r2, [r7, #20]
 800b846:	4313      	orrs	r3, r2
 800b848:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800b84a:	697b      	ldr	r3, [r7, #20]
 800b84c:	f023 0304 	bic.w	r3, r3, #4
 800b850:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b852:	687b      	ldr	r3, [r7, #4]
 800b854:	4a1c      	ldr	r2, [pc, #112]	; (800b8c8 <TIM_OC1_SetConfig+0x10c>)
 800b856:	4293      	cmp	r3, r2
 800b858:	d00f      	beq.n	800b87a <TIM_OC1_SetConfig+0xbe>
 800b85a:	687b      	ldr	r3, [r7, #4]
 800b85c:	4a1b      	ldr	r2, [pc, #108]	; (800b8cc <TIM_OC1_SetConfig+0x110>)
 800b85e:	4293      	cmp	r3, r2
 800b860:	d00b      	beq.n	800b87a <TIM_OC1_SetConfig+0xbe>
 800b862:	687b      	ldr	r3, [r7, #4]
 800b864:	4a1a      	ldr	r2, [pc, #104]	; (800b8d0 <TIM_OC1_SetConfig+0x114>)
 800b866:	4293      	cmp	r3, r2
 800b868:	d007      	beq.n	800b87a <TIM_OC1_SetConfig+0xbe>
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	4a19      	ldr	r2, [pc, #100]	; (800b8d4 <TIM_OC1_SetConfig+0x118>)
 800b86e:	4293      	cmp	r3, r2
 800b870:	d003      	beq.n	800b87a <TIM_OC1_SetConfig+0xbe>
 800b872:	687b      	ldr	r3, [r7, #4]
 800b874:	4a18      	ldr	r2, [pc, #96]	; (800b8d8 <TIM_OC1_SetConfig+0x11c>)
 800b876:	4293      	cmp	r3, r2
 800b878:	d111      	bne.n	800b89e <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800b87a:	693b      	ldr	r3, [r7, #16]
 800b87c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b880:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800b882:	693b      	ldr	r3, [r7, #16]
 800b884:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800b888:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800b88a:	683b      	ldr	r3, [r7, #0]
 800b88c:	695b      	ldr	r3, [r3, #20]
 800b88e:	693a      	ldr	r2, [r7, #16]
 800b890:	4313      	orrs	r3, r2
 800b892:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800b894:	683b      	ldr	r3, [r7, #0]
 800b896:	699b      	ldr	r3, [r3, #24]
 800b898:	693a      	ldr	r2, [r7, #16]
 800b89a:	4313      	orrs	r3, r2
 800b89c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b89e:	687b      	ldr	r3, [r7, #4]
 800b8a0:	693a      	ldr	r2, [r7, #16]
 800b8a2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b8a4:	687b      	ldr	r3, [r7, #4]
 800b8a6:	68fa      	ldr	r2, [r7, #12]
 800b8a8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800b8aa:	683b      	ldr	r3, [r7, #0]
 800b8ac:	685a      	ldr	r2, [r3, #4]
 800b8ae:	687b      	ldr	r3, [r7, #4]
 800b8b0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b8b2:	687b      	ldr	r3, [r7, #4]
 800b8b4:	697a      	ldr	r2, [r7, #20]
 800b8b6:	621a      	str	r2, [r3, #32]
}
 800b8b8:	bf00      	nop
 800b8ba:	371c      	adds	r7, #28
 800b8bc:	46bd      	mov	sp, r7
 800b8be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8c2:	4770      	bx	lr
 800b8c4:	fffeff8f 	.word	0xfffeff8f
 800b8c8:	40010000 	.word	0x40010000
 800b8cc:	40010400 	.word	0x40010400
 800b8d0:	40014000 	.word	0x40014000
 800b8d4:	40014400 	.word	0x40014400
 800b8d8:	40014800 	.word	0x40014800

0800b8dc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b8dc:	b480      	push	{r7}
 800b8de:	b087      	sub	sp, #28
 800b8e0:	af00      	add	r7, sp, #0
 800b8e2:	6078      	str	r0, [r7, #4]
 800b8e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b8e6:	687b      	ldr	r3, [r7, #4]
 800b8e8:	6a1b      	ldr	r3, [r3, #32]
 800b8ea:	f023 0210 	bic.w	r2, r3, #16
 800b8ee:	687b      	ldr	r3, [r7, #4]
 800b8f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b8f2:	687b      	ldr	r3, [r7, #4]
 800b8f4:	6a1b      	ldr	r3, [r3, #32]
 800b8f6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b8f8:	687b      	ldr	r3, [r7, #4]
 800b8fa:	685b      	ldr	r3, [r3, #4]
 800b8fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b8fe:	687b      	ldr	r3, [r7, #4]
 800b900:	699b      	ldr	r3, [r3, #24]
 800b902:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800b904:	68fa      	ldr	r2, [r7, #12]
 800b906:	4b34      	ldr	r3, [pc, #208]	; (800b9d8 <TIM_OC2_SetConfig+0xfc>)
 800b908:	4013      	ands	r3, r2
 800b90a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800b90c:	68fb      	ldr	r3, [r7, #12]
 800b90e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b912:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b914:	683b      	ldr	r3, [r7, #0]
 800b916:	681b      	ldr	r3, [r3, #0]
 800b918:	021b      	lsls	r3, r3, #8
 800b91a:	68fa      	ldr	r2, [r7, #12]
 800b91c:	4313      	orrs	r3, r2
 800b91e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800b920:	697b      	ldr	r3, [r7, #20]
 800b922:	f023 0320 	bic.w	r3, r3, #32
 800b926:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800b928:	683b      	ldr	r3, [r7, #0]
 800b92a:	689b      	ldr	r3, [r3, #8]
 800b92c:	011b      	lsls	r3, r3, #4
 800b92e:	697a      	ldr	r2, [r7, #20]
 800b930:	4313      	orrs	r3, r2
 800b932:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800b934:	687b      	ldr	r3, [r7, #4]
 800b936:	4a29      	ldr	r2, [pc, #164]	; (800b9dc <TIM_OC2_SetConfig+0x100>)
 800b938:	4293      	cmp	r3, r2
 800b93a:	d003      	beq.n	800b944 <TIM_OC2_SetConfig+0x68>
 800b93c:	687b      	ldr	r3, [r7, #4]
 800b93e:	4a28      	ldr	r2, [pc, #160]	; (800b9e0 <TIM_OC2_SetConfig+0x104>)
 800b940:	4293      	cmp	r3, r2
 800b942:	d10d      	bne.n	800b960 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800b944:	697b      	ldr	r3, [r7, #20]
 800b946:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b94a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800b94c:	683b      	ldr	r3, [r7, #0]
 800b94e:	68db      	ldr	r3, [r3, #12]
 800b950:	011b      	lsls	r3, r3, #4
 800b952:	697a      	ldr	r2, [r7, #20]
 800b954:	4313      	orrs	r3, r2
 800b956:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800b958:	697b      	ldr	r3, [r7, #20]
 800b95a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b95e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b960:	687b      	ldr	r3, [r7, #4]
 800b962:	4a1e      	ldr	r2, [pc, #120]	; (800b9dc <TIM_OC2_SetConfig+0x100>)
 800b964:	4293      	cmp	r3, r2
 800b966:	d00f      	beq.n	800b988 <TIM_OC2_SetConfig+0xac>
 800b968:	687b      	ldr	r3, [r7, #4]
 800b96a:	4a1d      	ldr	r2, [pc, #116]	; (800b9e0 <TIM_OC2_SetConfig+0x104>)
 800b96c:	4293      	cmp	r3, r2
 800b96e:	d00b      	beq.n	800b988 <TIM_OC2_SetConfig+0xac>
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	4a1c      	ldr	r2, [pc, #112]	; (800b9e4 <TIM_OC2_SetConfig+0x108>)
 800b974:	4293      	cmp	r3, r2
 800b976:	d007      	beq.n	800b988 <TIM_OC2_SetConfig+0xac>
 800b978:	687b      	ldr	r3, [r7, #4]
 800b97a:	4a1b      	ldr	r2, [pc, #108]	; (800b9e8 <TIM_OC2_SetConfig+0x10c>)
 800b97c:	4293      	cmp	r3, r2
 800b97e:	d003      	beq.n	800b988 <TIM_OC2_SetConfig+0xac>
 800b980:	687b      	ldr	r3, [r7, #4]
 800b982:	4a1a      	ldr	r2, [pc, #104]	; (800b9ec <TIM_OC2_SetConfig+0x110>)
 800b984:	4293      	cmp	r3, r2
 800b986:	d113      	bne.n	800b9b0 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800b988:	693b      	ldr	r3, [r7, #16]
 800b98a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800b98e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800b990:	693b      	ldr	r3, [r7, #16]
 800b992:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b996:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800b998:	683b      	ldr	r3, [r7, #0]
 800b99a:	695b      	ldr	r3, [r3, #20]
 800b99c:	009b      	lsls	r3, r3, #2
 800b99e:	693a      	ldr	r2, [r7, #16]
 800b9a0:	4313      	orrs	r3, r2
 800b9a2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800b9a4:	683b      	ldr	r3, [r7, #0]
 800b9a6:	699b      	ldr	r3, [r3, #24]
 800b9a8:	009b      	lsls	r3, r3, #2
 800b9aa:	693a      	ldr	r2, [r7, #16]
 800b9ac:	4313      	orrs	r3, r2
 800b9ae:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b9b0:	687b      	ldr	r3, [r7, #4]
 800b9b2:	693a      	ldr	r2, [r7, #16]
 800b9b4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b9b6:	687b      	ldr	r3, [r7, #4]
 800b9b8:	68fa      	ldr	r2, [r7, #12]
 800b9ba:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800b9bc:	683b      	ldr	r3, [r7, #0]
 800b9be:	685a      	ldr	r2, [r3, #4]
 800b9c0:	687b      	ldr	r3, [r7, #4]
 800b9c2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b9c4:	687b      	ldr	r3, [r7, #4]
 800b9c6:	697a      	ldr	r2, [r7, #20]
 800b9c8:	621a      	str	r2, [r3, #32]
}
 800b9ca:	bf00      	nop
 800b9cc:	371c      	adds	r7, #28
 800b9ce:	46bd      	mov	sp, r7
 800b9d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9d4:	4770      	bx	lr
 800b9d6:	bf00      	nop
 800b9d8:	feff8fff 	.word	0xfeff8fff
 800b9dc:	40010000 	.word	0x40010000
 800b9e0:	40010400 	.word	0x40010400
 800b9e4:	40014000 	.word	0x40014000
 800b9e8:	40014400 	.word	0x40014400
 800b9ec:	40014800 	.word	0x40014800

0800b9f0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b9f0:	b480      	push	{r7}
 800b9f2:	b087      	sub	sp, #28
 800b9f4:	af00      	add	r7, sp, #0
 800b9f6:	6078      	str	r0, [r7, #4]
 800b9f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800b9fa:	687b      	ldr	r3, [r7, #4]
 800b9fc:	6a1b      	ldr	r3, [r3, #32]
 800b9fe:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800ba02:	687b      	ldr	r3, [r7, #4]
 800ba04:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ba06:	687b      	ldr	r3, [r7, #4]
 800ba08:	6a1b      	ldr	r3, [r3, #32]
 800ba0a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ba0c:	687b      	ldr	r3, [r7, #4]
 800ba0e:	685b      	ldr	r3, [r3, #4]
 800ba10:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800ba12:	687b      	ldr	r3, [r7, #4]
 800ba14:	69db      	ldr	r3, [r3, #28]
 800ba16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800ba18:	68fa      	ldr	r2, [r7, #12]
 800ba1a:	4b33      	ldr	r3, [pc, #204]	; (800bae8 <TIM_OC3_SetConfig+0xf8>)
 800ba1c:	4013      	ands	r3, r2
 800ba1e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800ba20:	68fb      	ldr	r3, [r7, #12]
 800ba22:	f023 0303 	bic.w	r3, r3, #3
 800ba26:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ba28:	683b      	ldr	r3, [r7, #0]
 800ba2a:	681b      	ldr	r3, [r3, #0]
 800ba2c:	68fa      	ldr	r2, [r7, #12]
 800ba2e:	4313      	orrs	r3, r2
 800ba30:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800ba32:	697b      	ldr	r3, [r7, #20]
 800ba34:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800ba38:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800ba3a:	683b      	ldr	r3, [r7, #0]
 800ba3c:	689b      	ldr	r3, [r3, #8]
 800ba3e:	021b      	lsls	r3, r3, #8
 800ba40:	697a      	ldr	r2, [r7, #20]
 800ba42:	4313      	orrs	r3, r2
 800ba44:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800ba46:	687b      	ldr	r3, [r7, #4]
 800ba48:	4a28      	ldr	r2, [pc, #160]	; (800baec <TIM_OC3_SetConfig+0xfc>)
 800ba4a:	4293      	cmp	r3, r2
 800ba4c:	d003      	beq.n	800ba56 <TIM_OC3_SetConfig+0x66>
 800ba4e:	687b      	ldr	r3, [r7, #4]
 800ba50:	4a27      	ldr	r2, [pc, #156]	; (800baf0 <TIM_OC3_SetConfig+0x100>)
 800ba52:	4293      	cmp	r3, r2
 800ba54:	d10d      	bne.n	800ba72 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800ba56:	697b      	ldr	r3, [r7, #20]
 800ba58:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800ba5c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800ba5e:	683b      	ldr	r3, [r7, #0]
 800ba60:	68db      	ldr	r3, [r3, #12]
 800ba62:	021b      	lsls	r3, r3, #8
 800ba64:	697a      	ldr	r2, [r7, #20]
 800ba66:	4313      	orrs	r3, r2
 800ba68:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800ba6a:	697b      	ldr	r3, [r7, #20]
 800ba6c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800ba70:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ba72:	687b      	ldr	r3, [r7, #4]
 800ba74:	4a1d      	ldr	r2, [pc, #116]	; (800baec <TIM_OC3_SetConfig+0xfc>)
 800ba76:	4293      	cmp	r3, r2
 800ba78:	d00f      	beq.n	800ba9a <TIM_OC3_SetConfig+0xaa>
 800ba7a:	687b      	ldr	r3, [r7, #4]
 800ba7c:	4a1c      	ldr	r2, [pc, #112]	; (800baf0 <TIM_OC3_SetConfig+0x100>)
 800ba7e:	4293      	cmp	r3, r2
 800ba80:	d00b      	beq.n	800ba9a <TIM_OC3_SetConfig+0xaa>
 800ba82:	687b      	ldr	r3, [r7, #4]
 800ba84:	4a1b      	ldr	r2, [pc, #108]	; (800baf4 <TIM_OC3_SetConfig+0x104>)
 800ba86:	4293      	cmp	r3, r2
 800ba88:	d007      	beq.n	800ba9a <TIM_OC3_SetConfig+0xaa>
 800ba8a:	687b      	ldr	r3, [r7, #4]
 800ba8c:	4a1a      	ldr	r2, [pc, #104]	; (800baf8 <TIM_OC3_SetConfig+0x108>)
 800ba8e:	4293      	cmp	r3, r2
 800ba90:	d003      	beq.n	800ba9a <TIM_OC3_SetConfig+0xaa>
 800ba92:	687b      	ldr	r3, [r7, #4]
 800ba94:	4a19      	ldr	r2, [pc, #100]	; (800bafc <TIM_OC3_SetConfig+0x10c>)
 800ba96:	4293      	cmp	r3, r2
 800ba98:	d113      	bne.n	800bac2 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800ba9a:	693b      	ldr	r3, [r7, #16]
 800ba9c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800baa0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800baa2:	693b      	ldr	r3, [r7, #16]
 800baa4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800baa8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800baaa:	683b      	ldr	r3, [r7, #0]
 800baac:	695b      	ldr	r3, [r3, #20]
 800baae:	011b      	lsls	r3, r3, #4
 800bab0:	693a      	ldr	r2, [r7, #16]
 800bab2:	4313      	orrs	r3, r2
 800bab4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800bab6:	683b      	ldr	r3, [r7, #0]
 800bab8:	699b      	ldr	r3, [r3, #24]
 800baba:	011b      	lsls	r3, r3, #4
 800babc:	693a      	ldr	r2, [r7, #16]
 800babe:	4313      	orrs	r3, r2
 800bac0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bac2:	687b      	ldr	r3, [r7, #4]
 800bac4:	693a      	ldr	r2, [r7, #16]
 800bac6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800bac8:	687b      	ldr	r3, [r7, #4]
 800baca:	68fa      	ldr	r2, [r7, #12]
 800bacc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800bace:	683b      	ldr	r3, [r7, #0]
 800bad0:	685a      	ldr	r2, [r3, #4]
 800bad2:	687b      	ldr	r3, [r7, #4]
 800bad4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bad6:	687b      	ldr	r3, [r7, #4]
 800bad8:	697a      	ldr	r2, [r7, #20]
 800bada:	621a      	str	r2, [r3, #32]
}
 800badc:	bf00      	nop
 800bade:	371c      	adds	r7, #28
 800bae0:	46bd      	mov	sp, r7
 800bae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bae6:	4770      	bx	lr
 800bae8:	fffeff8f 	.word	0xfffeff8f
 800baec:	40010000 	.word	0x40010000
 800baf0:	40010400 	.word	0x40010400
 800baf4:	40014000 	.word	0x40014000
 800baf8:	40014400 	.word	0x40014400
 800bafc:	40014800 	.word	0x40014800

0800bb00 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800bb00:	b480      	push	{r7}
 800bb02:	b087      	sub	sp, #28
 800bb04:	af00      	add	r7, sp, #0
 800bb06:	6078      	str	r0, [r7, #4]
 800bb08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800bb0a:	687b      	ldr	r3, [r7, #4]
 800bb0c:	6a1b      	ldr	r3, [r3, #32]
 800bb0e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800bb12:	687b      	ldr	r3, [r7, #4]
 800bb14:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bb16:	687b      	ldr	r3, [r7, #4]
 800bb18:	6a1b      	ldr	r3, [r3, #32]
 800bb1a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bb1c:	687b      	ldr	r3, [r7, #4]
 800bb1e:	685b      	ldr	r3, [r3, #4]
 800bb20:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800bb22:	687b      	ldr	r3, [r7, #4]
 800bb24:	69db      	ldr	r3, [r3, #28]
 800bb26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800bb28:	68fa      	ldr	r2, [r7, #12]
 800bb2a:	4b24      	ldr	r3, [pc, #144]	; (800bbbc <TIM_OC4_SetConfig+0xbc>)
 800bb2c:	4013      	ands	r3, r2
 800bb2e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800bb30:	68fb      	ldr	r3, [r7, #12]
 800bb32:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800bb36:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800bb38:	683b      	ldr	r3, [r7, #0]
 800bb3a:	681b      	ldr	r3, [r3, #0]
 800bb3c:	021b      	lsls	r3, r3, #8
 800bb3e:	68fa      	ldr	r2, [r7, #12]
 800bb40:	4313      	orrs	r3, r2
 800bb42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800bb44:	693b      	ldr	r3, [r7, #16]
 800bb46:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800bb4a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800bb4c:	683b      	ldr	r3, [r7, #0]
 800bb4e:	689b      	ldr	r3, [r3, #8]
 800bb50:	031b      	lsls	r3, r3, #12
 800bb52:	693a      	ldr	r2, [r7, #16]
 800bb54:	4313      	orrs	r3, r2
 800bb56:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bb58:	687b      	ldr	r3, [r7, #4]
 800bb5a:	4a19      	ldr	r2, [pc, #100]	; (800bbc0 <TIM_OC4_SetConfig+0xc0>)
 800bb5c:	4293      	cmp	r3, r2
 800bb5e:	d00f      	beq.n	800bb80 <TIM_OC4_SetConfig+0x80>
 800bb60:	687b      	ldr	r3, [r7, #4]
 800bb62:	4a18      	ldr	r2, [pc, #96]	; (800bbc4 <TIM_OC4_SetConfig+0xc4>)
 800bb64:	4293      	cmp	r3, r2
 800bb66:	d00b      	beq.n	800bb80 <TIM_OC4_SetConfig+0x80>
 800bb68:	687b      	ldr	r3, [r7, #4]
 800bb6a:	4a17      	ldr	r2, [pc, #92]	; (800bbc8 <TIM_OC4_SetConfig+0xc8>)
 800bb6c:	4293      	cmp	r3, r2
 800bb6e:	d007      	beq.n	800bb80 <TIM_OC4_SetConfig+0x80>
 800bb70:	687b      	ldr	r3, [r7, #4]
 800bb72:	4a16      	ldr	r2, [pc, #88]	; (800bbcc <TIM_OC4_SetConfig+0xcc>)
 800bb74:	4293      	cmp	r3, r2
 800bb76:	d003      	beq.n	800bb80 <TIM_OC4_SetConfig+0x80>
 800bb78:	687b      	ldr	r3, [r7, #4]
 800bb7a:	4a15      	ldr	r2, [pc, #84]	; (800bbd0 <TIM_OC4_SetConfig+0xd0>)
 800bb7c:	4293      	cmp	r3, r2
 800bb7e:	d109      	bne.n	800bb94 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800bb80:	697b      	ldr	r3, [r7, #20]
 800bb82:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800bb86:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800bb88:	683b      	ldr	r3, [r7, #0]
 800bb8a:	695b      	ldr	r3, [r3, #20]
 800bb8c:	019b      	lsls	r3, r3, #6
 800bb8e:	697a      	ldr	r2, [r7, #20]
 800bb90:	4313      	orrs	r3, r2
 800bb92:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bb94:	687b      	ldr	r3, [r7, #4]
 800bb96:	697a      	ldr	r2, [r7, #20]
 800bb98:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800bb9a:	687b      	ldr	r3, [r7, #4]
 800bb9c:	68fa      	ldr	r2, [r7, #12]
 800bb9e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800bba0:	683b      	ldr	r3, [r7, #0]
 800bba2:	685a      	ldr	r2, [r3, #4]
 800bba4:	687b      	ldr	r3, [r7, #4]
 800bba6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bba8:	687b      	ldr	r3, [r7, #4]
 800bbaa:	693a      	ldr	r2, [r7, #16]
 800bbac:	621a      	str	r2, [r3, #32]
}
 800bbae:	bf00      	nop
 800bbb0:	371c      	adds	r7, #28
 800bbb2:	46bd      	mov	sp, r7
 800bbb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbb8:	4770      	bx	lr
 800bbba:	bf00      	nop
 800bbbc:	feff8fff 	.word	0xfeff8fff
 800bbc0:	40010000 	.word	0x40010000
 800bbc4:	40010400 	.word	0x40010400
 800bbc8:	40014000 	.word	0x40014000
 800bbcc:	40014400 	.word	0x40014400
 800bbd0:	40014800 	.word	0x40014800

0800bbd4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800bbd4:	b480      	push	{r7}
 800bbd6:	b087      	sub	sp, #28
 800bbd8:	af00      	add	r7, sp, #0
 800bbda:	6078      	str	r0, [r7, #4]
 800bbdc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800bbde:	687b      	ldr	r3, [r7, #4]
 800bbe0:	6a1b      	ldr	r3, [r3, #32]
 800bbe2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800bbe6:	687b      	ldr	r3, [r7, #4]
 800bbe8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bbea:	687b      	ldr	r3, [r7, #4]
 800bbec:	6a1b      	ldr	r3, [r3, #32]
 800bbee:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bbf0:	687b      	ldr	r3, [r7, #4]
 800bbf2:	685b      	ldr	r3, [r3, #4]
 800bbf4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800bbf6:	687b      	ldr	r3, [r7, #4]
 800bbf8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bbfa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800bbfc:	68fa      	ldr	r2, [r7, #12]
 800bbfe:	4b21      	ldr	r3, [pc, #132]	; (800bc84 <TIM_OC5_SetConfig+0xb0>)
 800bc00:	4013      	ands	r3, r2
 800bc02:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800bc04:	683b      	ldr	r3, [r7, #0]
 800bc06:	681b      	ldr	r3, [r3, #0]
 800bc08:	68fa      	ldr	r2, [r7, #12]
 800bc0a:	4313      	orrs	r3, r2
 800bc0c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800bc0e:	693b      	ldr	r3, [r7, #16]
 800bc10:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800bc14:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800bc16:	683b      	ldr	r3, [r7, #0]
 800bc18:	689b      	ldr	r3, [r3, #8]
 800bc1a:	041b      	lsls	r3, r3, #16
 800bc1c:	693a      	ldr	r2, [r7, #16]
 800bc1e:	4313      	orrs	r3, r2
 800bc20:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bc22:	687b      	ldr	r3, [r7, #4]
 800bc24:	4a18      	ldr	r2, [pc, #96]	; (800bc88 <TIM_OC5_SetConfig+0xb4>)
 800bc26:	4293      	cmp	r3, r2
 800bc28:	d00f      	beq.n	800bc4a <TIM_OC5_SetConfig+0x76>
 800bc2a:	687b      	ldr	r3, [r7, #4]
 800bc2c:	4a17      	ldr	r2, [pc, #92]	; (800bc8c <TIM_OC5_SetConfig+0xb8>)
 800bc2e:	4293      	cmp	r3, r2
 800bc30:	d00b      	beq.n	800bc4a <TIM_OC5_SetConfig+0x76>
 800bc32:	687b      	ldr	r3, [r7, #4]
 800bc34:	4a16      	ldr	r2, [pc, #88]	; (800bc90 <TIM_OC5_SetConfig+0xbc>)
 800bc36:	4293      	cmp	r3, r2
 800bc38:	d007      	beq.n	800bc4a <TIM_OC5_SetConfig+0x76>
 800bc3a:	687b      	ldr	r3, [r7, #4]
 800bc3c:	4a15      	ldr	r2, [pc, #84]	; (800bc94 <TIM_OC5_SetConfig+0xc0>)
 800bc3e:	4293      	cmp	r3, r2
 800bc40:	d003      	beq.n	800bc4a <TIM_OC5_SetConfig+0x76>
 800bc42:	687b      	ldr	r3, [r7, #4]
 800bc44:	4a14      	ldr	r2, [pc, #80]	; (800bc98 <TIM_OC5_SetConfig+0xc4>)
 800bc46:	4293      	cmp	r3, r2
 800bc48:	d109      	bne.n	800bc5e <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800bc4a:	697b      	ldr	r3, [r7, #20]
 800bc4c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800bc50:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800bc52:	683b      	ldr	r3, [r7, #0]
 800bc54:	695b      	ldr	r3, [r3, #20]
 800bc56:	021b      	lsls	r3, r3, #8
 800bc58:	697a      	ldr	r2, [r7, #20]
 800bc5a:	4313      	orrs	r3, r2
 800bc5c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bc5e:	687b      	ldr	r3, [r7, #4]
 800bc60:	697a      	ldr	r2, [r7, #20]
 800bc62:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800bc64:	687b      	ldr	r3, [r7, #4]
 800bc66:	68fa      	ldr	r2, [r7, #12]
 800bc68:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800bc6a:	683b      	ldr	r3, [r7, #0]
 800bc6c:	685a      	ldr	r2, [r3, #4]
 800bc6e:	687b      	ldr	r3, [r7, #4]
 800bc70:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bc72:	687b      	ldr	r3, [r7, #4]
 800bc74:	693a      	ldr	r2, [r7, #16]
 800bc76:	621a      	str	r2, [r3, #32]
}
 800bc78:	bf00      	nop
 800bc7a:	371c      	adds	r7, #28
 800bc7c:	46bd      	mov	sp, r7
 800bc7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc82:	4770      	bx	lr
 800bc84:	fffeff8f 	.word	0xfffeff8f
 800bc88:	40010000 	.word	0x40010000
 800bc8c:	40010400 	.word	0x40010400
 800bc90:	40014000 	.word	0x40014000
 800bc94:	40014400 	.word	0x40014400
 800bc98:	40014800 	.word	0x40014800

0800bc9c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800bc9c:	b480      	push	{r7}
 800bc9e:	b087      	sub	sp, #28
 800bca0:	af00      	add	r7, sp, #0
 800bca2:	6078      	str	r0, [r7, #4]
 800bca4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800bca6:	687b      	ldr	r3, [r7, #4]
 800bca8:	6a1b      	ldr	r3, [r3, #32]
 800bcaa:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800bcae:	687b      	ldr	r3, [r7, #4]
 800bcb0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bcb2:	687b      	ldr	r3, [r7, #4]
 800bcb4:	6a1b      	ldr	r3, [r3, #32]
 800bcb6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bcb8:	687b      	ldr	r3, [r7, #4]
 800bcba:	685b      	ldr	r3, [r3, #4]
 800bcbc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800bcbe:	687b      	ldr	r3, [r7, #4]
 800bcc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bcc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800bcc4:	68fa      	ldr	r2, [r7, #12]
 800bcc6:	4b22      	ldr	r3, [pc, #136]	; (800bd50 <TIM_OC6_SetConfig+0xb4>)
 800bcc8:	4013      	ands	r3, r2
 800bcca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800bccc:	683b      	ldr	r3, [r7, #0]
 800bcce:	681b      	ldr	r3, [r3, #0]
 800bcd0:	021b      	lsls	r3, r3, #8
 800bcd2:	68fa      	ldr	r2, [r7, #12]
 800bcd4:	4313      	orrs	r3, r2
 800bcd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800bcd8:	693b      	ldr	r3, [r7, #16]
 800bcda:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800bcde:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800bce0:	683b      	ldr	r3, [r7, #0]
 800bce2:	689b      	ldr	r3, [r3, #8]
 800bce4:	051b      	lsls	r3, r3, #20
 800bce6:	693a      	ldr	r2, [r7, #16]
 800bce8:	4313      	orrs	r3, r2
 800bcea:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bcec:	687b      	ldr	r3, [r7, #4]
 800bcee:	4a19      	ldr	r2, [pc, #100]	; (800bd54 <TIM_OC6_SetConfig+0xb8>)
 800bcf0:	4293      	cmp	r3, r2
 800bcf2:	d00f      	beq.n	800bd14 <TIM_OC6_SetConfig+0x78>
 800bcf4:	687b      	ldr	r3, [r7, #4]
 800bcf6:	4a18      	ldr	r2, [pc, #96]	; (800bd58 <TIM_OC6_SetConfig+0xbc>)
 800bcf8:	4293      	cmp	r3, r2
 800bcfa:	d00b      	beq.n	800bd14 <TIM_OC6_SetConfig+0x78>
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	4a17      	ldr	r2, [pc, #92]	; (800bd5c <TIM_OC6_SetConfig+0xc0>)
 800bd00:	4293      	cmp	r3, r2
 800bd02:	d007      	beq.n	800bd14 <TIM_OC6_SetConfig+0x78>
 800bd04:	687b      	ldr	r3, [r7, #4]
 800bd06:	4a16      	ldr	r2, [pc, #88]	; (800bd60 <TIM_OC6_SetConfig+0xc4>)
 800bd08:	4293      	cmp	r3, r2
 800bd0a:	d003      	beq.n	800bd14 <TIM_OC6_SetConfig+0x78>
 800bd0c:	687b      	ldr	r3, [r7, #4]
 800bd0e:	4a15      	ldr	r2, [pc, #84]	; (800bd64 <TIM_OC6_SetConfig+0xc8>)
 800bd10:	4293      	cmp	r3, r2
 800bd12:	d109      	bne.n	800bd28 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800bd14:	697b      	ldr	r3, [r7, #20]
 800bd16:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800bd1a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800bd1c:	683b      	ldr	r3, [r7, #0]
 800bd1e:	695b      	ldr	r3, [r3, #20]
 800bd20:	029b      	lsls	r3, r3, #10
 800bd22:	697a      	ldr	r2, [r7, #20]
 800bd24:	4313      	orrs	r3, r2
 800bd26:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bd28:	687b      	ldr	r3, [r7, #4]
 800bd2a:	697a      	ldr	r2, [r7, #20]
 800bd2c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800bd2e:	687b      	ldr	r3, [r7, #4]
 800bd30:	68fa      	ldr	r2, [r7, #12]
 800bd32:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800bd34:	683b      	ldr	r3, [r7, #0]
 800bd36:	685a      	ldr	r2, [r3, #4]
 800bd38:	687b      	ldr	r3, [r7, #4]
 800bd3a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bd3c:	687b      	ldr	r3, [r7, #4]
 800bd3e:	693a      	ldr	r2, [r7, #16]
 800bd40:	621a      	str	r2, [r3, #32]
}
 800bd42:	bf00      	nop
 800bd44:	371c      	adds	r7, #28
 800bd46:	46bd      	mov	sp, r7
 800bd48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd4c:	4770      	bx	lr
 800bd4e:	bf00      	nop
 800bd50:	feff8fff 	.word	0xfeff8fff
 800bd54:	40010000 	.word	0x40010000
 800bd58:	40010400 	.word	0x40010400
 800bd5c:	40014000 	.word	0x40014000
 800bd60:	40014400 	.word	0x40014400
 800bd64:	40014800 	.word	0x40014800

0800bd68 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800bd68:	b480      	push	{r7}
 800bd6a:	b087      	sub	sp, #28
 800bd6c:	af00      	add	r7, sp, #0
 800bd6e:	60f8      	str	r0, [r7, #12]
 800bd70:	60b9      	str	r1, [r7, #8]
 800bd72:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800bd74:	68bb      	ldr	r3, [r7, #8]
 800bd76:	f003 031f 	and.w	r3, r3, #31
 800bd7a:	2201      	movs	r2, #1
 800bd7c:	fa02 f303 	lsl.w	r3, r2, r3
 800bd80:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800bd82:	68fb      	ldr	r3, [r7, #12]
 800bd84:	6a1a      	ldr	r2, [r3, #32]
 800bd86:	697b      	ldr	r3, [r7, #20]
 800bd88:	43db      	mvns	r3, r3
 800bd8a:	401a      	ands	r2, r3
 800bd8c:	68fb      	ldr	r3, [r7, #12]
 800bd8e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800bd90:	68fb      	ldr	r3, [r7, #12]
 800bd92:	6a1a      	ldr	r2, [r3, #32]
 800bd94:	68bb      	ldr	r3, [r7, #8]
 800bd96:	f003 031f 	and.w	r3, r3, #31
 800bd9a:	6879      	ldr	r1, [r7, #4]
 800bd9c:	fa01 f303 	lsl.w	r3, r1, r3
 800bda0:	431a      	orrs	r2, r3
 800bda2:	68fb      	ldr	r3, [r7, #12]
 800bda4:	621a      	str	r2, [r3, #32]
}
 800bda6:	bf00      	nop
 800bda8:	371c      	adds	r7, #28
 800bdaa:	46bd      	mov	sp, r7
 800bdac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdb0:	4770      	bx	lr
	...

0800bdb4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800bdb4:	b480      	push	{r7}
 800bdb6:	b085      	sub	sp, #20
 800bdb8:	af00      	add	r7, sp, #0
 800bdba:	6078      	str	r0, [r7, #4]
 800bdbc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800bdbe:	687b      	ldr	r3, [r7, #4]
 800bdc0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bdc4:	2b01      	cmp	r3, #1
 800bdc6:	d101      	bne.n	800bdcc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800bdc8:	2302      	movs	r3, #2
 800bdca:	e06d      	b.n	800bea8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800bdcc:	687b      	ldr	r3, [r7, #4]
 800bdce:	2201      	movs	r2, #1
 800bdd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bdd4:	687b      	ldr	r3, [r7, #4]
 800bdd6:	2202      	movs	r2, #2
 800bdd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800bddc:	687b      	ldr	r3, [r7, #4]
 800bdde:	681b      	ldr	r3, [r3, #0]
 800bde0:	685b      	ldr	r3, [r3, #4]
 800bde2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800bde4:	687b      	ldr	r3, [r7, #4]
 800bde6:	681b      	ldr	r3, [r3, #0]
 800bde8:	689b      	ldr	r3, [r3, #8]
 800bdea:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800bdec:	687b      	ldr	r3, [r7, #4]
 800bdee:	681b      	ldr	r3, [r3, #0]
 800bdf0:	4a30      	ldr	r2, [pc, #192]	; (800beb4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800bdf2:	4293      	cmp	r3, r2
 800bdf4:	d004      	beq.n	800be00 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800bdf6:	687b      	ldr	r3, [r7, #4]
 800bdf8:	681b      	ldr	r3, [r3, #0]
 800bdfa:	4a2f      	ldr	r2, [pc, #188]	; (800beb8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800bdfc:	4293      	cmp	r3, r2
 800bdfe:	d108      	bne.n	800be12 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800be00:	68fb      	ldr	r3, [r7, #12]
 800be02:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800be06:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800be08:	683b      	ldr	r3, [r7, #0]
 800be0a:	685b      	ldr	r3, [r3, #4]
 800be0c:	68fa      	ldr	r2, [r7, #12]
 800be0e:	4313      	orrs	r3, r2
 800be10:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800be12:	68fb      	ldr	r3, [r7, #12]
 800be14:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800be18:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800be1a:	683b      	ldr	r3, [r7, #0]
 800be1c:	681b      	ldr	r3, [r3, #0]
 800be1e:	68fa      	ldr	r2, [r7, #12]
 800be20:	4313      	orrs	r3, r2
 800be22:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800be24:	687b      	ldr	r3, [r7, #4]
 800be26:	681b      	ldr	r3, [r3, #0]
 800be28:	68fa      	ldr	r2, [r7, #12]
 800be2a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800be2c:	687b      	ldr	r3, [r7, #4]
 800be2e:	681b      	ldr	r3, [r3, #0]
 800be30:	4a20      	ldr	r2, [pc, #128]	; (800beb4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800be32:	4293      	cmp	r3, r2
 800be34:	d022      	beq.n	800be7c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800be36:	687b      	ldr	r3, [r7, #4]
 800be38:	681b      	ldr	r3, [r3, #0]
 800be3a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800be3e:	d01d      	beq.n	800be7c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800be40:	687b      	ldr	r3, [r7, #4]
 800be42:	681b      	ldr	r3, [r3, #0]
 800be44:	4a1d      	ldr	r2, [pc, #116]	; (800bebc <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800be46:	4293      	cmp	r3, r2
 800be48:	d018      	beq.n	800be7c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800be4a:	687b      	ldr	r3, [r7, #4]
 800be4c:	681b      	ldr	r3, [r3, #0]
 800be4e:	4a1c      	ldr	r2, [pc, #112]	; (800bec0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800be50:	4293      	cmp	r3, r2
 800be52:	d013      	beq.n	800be7c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800be54:	687b      	ldr	r3, [r7, #4]
 800be56:	681b      	ldr	r3, [r3, #0]
 800be58:	4a1a      	ldr	r2, [pc, #104]	; (800bec4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800be5a:	4293      	cmp	r3, r2
 800be5c:	d00e      	beq.n	800be7c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800be5e:	687b      	ldr	r3, [r7, #4]
 800be60:	681b      	ldr	r3, [r3, #0]
 800be62:	4a15      	ldr	r2, [pc, #84]	; (800beb8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800be64:	4293      	cmp	r3, r2
 800be66:	d009      	beq.n	800be7c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800be68:	687b      	ldr	r3, [r7, #4]
 800be6a:	681b      	ldr	r3, [r3, #0]
 800be6c:	4a16      	ldr	r2, [pc, #88]	; (800bec8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800be6e:	4293      	cmp	r3, r2
 800be70:	d004      	beq.n	800be7c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800be72:	687b      	ldr	r3, [r7, #4]
 800be74:	681b      	ldr	r3, [r3, #0]
 800be76:	4a15      	ldr	r2, [pc, #84]	; (800becc <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800be78:	4293      	cmp	r3, r2
 800be7a:	d10c      	bne.n	800be96 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800be7c:	68bb      	ldr	r3, [r7, #8]
 800be7e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800be82:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800be84:	683b      	ldr	r3, [r7, #0]
 800be86:	689b      	ldr	r3, [r3, #8]
 800be88:	68ba      	ldr	r2, [r7, #8]
 800be8a:	4313      	orrs	r3, r2
 800be8c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800be8e:	687b      	ldr	r3, [r7, #4]
 800be90:	681b      	ldr	r3, [r3, #0]
 800be92:	68ba      	ldr	r2, [r7, #8]
 800be94:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800be96:	687b      	ldr	r3, [r7, #4]
 800be98:	2201      	movs	r2, #1
 800be9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800be9e:	687b      	ldr	r3, [r7, #4]
 800bea0:	2200      	movs	r2, #0
 800bea2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800bea6:	2300      	movs	r3, #0
}
 800bea8:	4618      	mov	r0, r3
 800beaa:	3714      	adds	r7, #20
 800beac:	46bd      	mov	sp, r7
 800beae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beb2:	4770      	bx	lr
 800beb4:	40010000 	.word	0x40010000
 800beb8:	40010400 	.word	0x40010400
 800bebc:	40000400 	.word	0x40000400
 800bec0:	40000800 	.word	0x40000800
 800bec4:	40000c00 	.word	0x40000c00
 800bec8:	40001800 	.word	0x40001800
 800becc:	40014000 	.word	0x40014000

0800bed0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800bed0:	b480      	push	{r7}
 800bed2:	b083      	sub	sp, #12
 800bed4:	af00      	add	r7, sp, #0
 800bed6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800bed8:	bf00      	nop
 800beda:	370c      	adds	r7, #12
 800bedc:	46bd      	mov	sp, r7
 800bede:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bee2:	4770      	bx	lr

0800bee4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800bee4:	b480      	push	{r7}
 800bee6:	b083      	sub	sp, #12
 800bee8:	af00      	add	r7, sp, #0
 800beea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800beec:	bf00      	nop
 800beee:	370c      	adds	r7, #12
 800bef0:	46bd      	mov	sp, r7
 800bef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bef6:	4770      	bx	lr

0800bef8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800bef8:	b480      	push	{r7}
 800befa:	b083      	sub	sp, #12
 800befc:	af00      	add	r7, sp, #0
 800befe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800bf00:	bf00      	nop
 800bf02:	370c      	adds	r7, #12
 800bf04:	46bd      	mov	sp, r7
 800bf06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf0a:	4770      	bx	lr

0800bf0c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800bf0c:	b580      	push	{r7, lr}
 800bf0e:	b082      	sub	sp, #8
 800bf10:	af00      	add	r7, sp, #0
 800bf12:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800bf14:	687b      	ldr	r3, [r7, #4]
 800bf16:	2b00      	cmp	r3, #0
 800bf18:	d101      	bne.n	800bf1e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800bf1a:	2301      	movs	r3, #1
 800bf1c:	e042      	b.n	800bfa4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800bf1e:	687b      	ldr	r3, [r7, #4]
 800bf20:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bf24:	2b00      	cmp	r3, #0
 800bf26:	d106      	bne.n	800bf36 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800bf28:	687b      	ldr	r3, [r7, #4]
 800bf2a:	2200      	movs	r2, #0
 800bf2c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800bf30:	6878      	ldr	r0, [r7, #4]
 800bf32:	f7f8 f849 	bl	8003fc8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800bf36:	687b      	ldr	r3, [r7, #4]
 800bf38:	2224      	movs	r2, #36	; 0x24
 800bf3a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800bf3e:	687b      	ldr	r3, [r7, #4]
 800bf40:	681b      	ldr	r3, [r3, #0]
 800bf42:	681a      	ldr	r2, [r3, #0]
 800bf44:	687b      	ldr	r3, [r7, #4]
 800bf46:	681b      	ldr	r3, [r3, #0]
 800bf48:	f022 0201 	bic.w	r2, r2, #1
 800bf4c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800bf4e:	6878      	ldr	r0, [r7, #4]
 800bf50:	f000 f82c 	bl	800bfac <UART_SetConfig>
 800bf54:	4603      	mov	r3, r0
 800bf56:	2b01      	cmp	r3, #1
 800bf58:	d101      	bne.n	800bf5e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800bf5a:	2301      	movs	r3, #1
 800bf5c:	e022      	b.n	800bfa4 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800bf5e:	687b      	ldr	r3, [r7, #4]
 800bf60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bf62:	2b00      	cmp	r3, #0
 800bf64:	d002      	beq.n	800bf6c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800bf66:	6878      	ldr	r0, [r7, #4]
 800bf68:	f000 fd88 	bl	800ca7c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800bf6c:	687b      	ldr	r3, [r7, #4]
 800bf6e:	681b      	ldr	r3, [r3, #0]
 800bf70:	685a      	ldr	r2, [r3, #4]
 800bf72:	687b      	ldr	r3, [r7, #4]
 800bf74:	681b      	ldr	r3, [r3, #0]
 800bf76:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800bf7a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800bf7c:	687b      	ldr	r3, [r7, #4]
 800bf7e:	681b      	ldr	r3, [r3, #0]
 800bf80:	689a      	ldr	r2, [r3, #8]
 800bf82:	687b      	ldr	r3, [r7, #4]
 800bf84:	681b      	ldr	r3, [r3, #0]
 800bf86:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800bf8a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800bf8c:	687b      	ldr	r3, [r7, #4]
 800bf8e:	681b      	ldr	r3, [r3, #0]
 800bf90:	681a      	ldr	r2, [r3, #0]
 800bf92:	687b      	ldr	r3, [r7, #4]
 800bf94:	681b      	ldr	r3, [r3, #0]
 800bf96:	f042 0201 	orr.w	r2, r2, #1
 800bf9a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800bf9c:	6878      	ldr	r0, [r7, #4]
 800bf9e:	f000 fe0f 	bl	800cbc0 <UART_CheckIdleState>
 800bfa2:	4603      	mov	r3, r0
}
 800bfa4:	4618      	mov	r0, r3
 800bfa6:	3708      	adds	r7, #8
 800bfa8:	46bd      	mov	sp, r7
 800bfaa:	bd80      	pop	{r7, pc}

0800bfac <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800bfac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800bfb0:	b092      	sub	sp, #72	; 0x48
 800bfb2:	af00      	add	r7, sp, #0
 800bfb4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800bfb6:	2300      	movs	r3, #0
 800bfb8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800bfbc:	697b      	ldr	r3, [r7, #20]
 800bfbe:	689a      	ldr	r2, [r3, #8]
 800bfc0:	697b      	ldr	r3, [r7, #20]
 800bfc2:	691b      	ldr	r3, [r3, #16]
 800bfc4:	431a      	orrs	r2, r3
 800bfc6:	697b      	ldr	r3, [r7, #20]
 800bfc8:	695b      	ldr	r3, [r3, #20]
 800bfca:	431a      	orrs	r2, r3
 800bfcc:	697b      	ldr	r3, [r7, #20]
 800bfce:	69db      	ldr	r3, [r3, #28]
 800bfd0:	4313      	orrs	r3, r2
 800bfd2:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800bfd4:	697b      	ldr	r3, [r7, #20]
 800bfd6:	681b      	ldr	r3, [r3, #0]
 800bfd8:	681a      	ldr	r2, [r3, #0]
 800bfda:	4bbe      	ldr	r3, [pc, #760]	; (800c2d4 <UART_SetConfig+0x328>)
 800bfdc:	4013      	ands	r3, r2
 800bfde:	697a      	ldr	r2, [r7, #20]
 800bfe0:	6812      	ldr	r2, [r2, #0]
 800bfe2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800bfe4:	430b      	orrs	r3, r1
 800bfe6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800bfe8:	697b      	ldr	r3, [r7, #20]
 800bfea:	681b      	ldr	r3, [r3, #0]
 800bfec:	685b      	ldr	r3, [r3, #4]
 800bfee:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800bff2:	697b      	ldr	r3, [r7, #20]
 800bff4:	68da      	ldr	r2, [r3, #12]
 800bff6:	697b      	ldr	r3, [r7, #20]
 800bff8:	681b      	ldr	r3, [r3, #0]
 800bffa:	430a      	orrs	r2, r1
 800bffc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800bffe:	697b      	ldr	r3, [r7, #20]
 800c000:	699b      	ldr	r3, [r3, #24]
 800c002:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800c004:	697b      	ldr	r3, [r7, #20]
 800c006:	681b      	ldr	r3, [r3, #0]
 800c008:	4ab3      	ldr	r2, [pc, #716]	; (800c2d8 <UART_SetConfig+0x32c>)
 800c00a:	4293      	cmp	r3, r2
 800c00c:	d004      	beq.n	800c018 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800c00e:	697b      	ldr	r3, [r7, #20]
 800c010:	6a1b      	ldr	r3, [r3, #32]
 800c012:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c014:	4313      	orrs	r3, r2
 800c016:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800c018:	697b      	ldr	r3, [r7, #20]
 800c01a:	681b      	ldr	r3, [r3, #0]
 800c01c:	689a      	ldr	r2, [r3, #8]
 800c01e:	4baf      	ldr	r3, [pc, #700]	; (800c2dc <UART_SetConfig+0x330>)
 800c020:	4013      	ands	r3, r2
 800c022:	697a      	ldr	r2, [r7, #20]
 800c024:	6812      	ldr	r2, [r2, #0]
 800c026:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800c028:	430b      	orrs	r3, r1
 800c02a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800c02c:	697b      	ldr	r3, [r7, #20]
 800c02e:	681b      	ldr	r3, [r3, #0]
 800c030:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c032:	f023 010f 	bic.w	r1, r3, #15
 800c036:	697b      	ldr	r3, [r7, #20]
 800c038:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c03a:	697b      	ldr	r3, [r7, #20]
 800c03c:	681b      	ldr	r3, [r3, #0]
 800c03e:	430a      	orrs	r2, r1
 800c040:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800c042:	697b      	ldr	r3, [r7, #20]
 800c044:	681b      	ldr	r3, [r3, #0]
 800c046:	4aa6      	ldr	r2, [pc, #664]	; (800c2e0 <UART_SetConfig+0x334>)
 800c048:	4293      	cmp	r3, r2
 800c04a:	d177      	bne.n	800c13c <UART_SetConfig+0x190>
 800c04c:	4ba5      	ldr	r3, [pc, #660]	; (800c2e4 <UART_SetConfig+0x338>)
 800c04e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c050:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800c054:	2b28      	cmp	r3, #40	; 0x28
 800c056:	d86d      	bhi.n	800c134 <UART_SetConfig+0x188>
 800c058:	a201      	add	r2, pc, #4	; (adr r2, 800c060 <UART_SetConfig+0xb4>)
 800c05a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c05e:	bf00      	nop
 800c060:	0800c105 	.word	0x0800c105
 800c064:	0800c135 	.word	0x0800c135
 800c068:	0800c135 	.word	0x0800c135
 800c06c:	0800c135 	.word	0x0800c135
 800c070:	0800c135 	.word	0x0800c135
 800c074:	0800c135 	.word	0x0800c135
 800c078:	0800c135 	.word	0x0800c135
 800c07c:	0800c135 	.word	0x0800c135
 800c080:	0800c10d 	.word	0x0800c10d
 800c084:	0800c135 	.word	0x0800c135
 800c088:	0800c135 	.word	0x0800c135
 800c08c:	0800c135 	.word	0x0800c135
 800c090:	0800c135 	.word	0x0800c135
 800c094:	0800c135 	.word	0x0800c135
 800c098:	0800c135 	.word	0x0800c135
 800c09c:	0800c135 	.word	0x0800c135
 800c0a0:	0800c115 	.word	0x0800c115
 800c0a4:	0800c135 	.word	0x0800c135
 800c0a8:	0800c135 	.word	0x0800c135
 800c0ac:	0800c135 	.word	0x0800c135
 800c0b0:	0800c135 	.word	0x0800c135
 800c0b4:	0800c135 	.word	0x0800c135
 800c0b8:	0800c135 	.word	0x0800c135
 800c0bc:	0800c135 	.word	0x0800c135
 800c0c0:	0800c11d 	.word	0x0800c11d
 800c0c4:	0800c135 	.word	0x0800c135
 800c0c8:	0800c135 	.word	0x0800c135
 800c0cc:	0800c135 	.word	0x0800c135
 800c0d0:	0800c135 	.word	0x0800c135
 800c0d4:	0800c135 	.word	0x0800c135
 800c0d8:	0800c135 	.word	0x0800c135
 800c0dc:	0800c135 	.word	0x0800c135
 800c0e0:	0800c125 	.word	0x0800c125
 800c0e4:	0800c135 	.word	0x0800c135
 800c0e8:	0800c135 	.word	0x0800c135
 800c0ec:	0800c135 	.word	0x0800c135
 800c0f0:	0800c135 	.word	0x0800c135
 800c0f4:	0800c135 	.word	0x0800c135
 800c0f8:	0800c135 	.word	0x0800c135
 800c0fc:	0800c135 	.word	0x0800c135
 800c100:	0800c12d 	.word	0x0800c12d
 800c104:	2301      	movs	r3, #1
 800c106:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c10a:	e222      	b.n	800c552 <UART_SetConfig+0x5a6>
 800c10c:	2304      	movs	r3, #4
 800c10e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c112:	e21e      	b.n	800c552 <UART_SetConfig+0x5a6>
 800c114:	2308      	movs	r3, #8
 800c116:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c11a:	e21a      	b.n	800c552 <UART_SetConfig+0x5a6>
 800c11c:	2310      	movs	r3, #16
 800c11e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c122:	e216      	b.n	800c552 <UART_SetConfig+0x5a6>
 800c124:	2320      	movs	r3, #32
 800c126:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c12a:	e212      	b.n	800c552 <UART_SetConfig+0x5a6>
 800c12c:	2340      	movs	r3, #64	; 0x40
 800c12e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c132:	e20e      	b.n	800c552 <UART_SetConfig+0x5a6>
 800c134:	2380      	movs	r3, #128	; 0x80
 800c136:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c13a:	e20a      	b.n	800c552 <UART_SetConfig+0x5a6>
 800c13c:	697b      	ldr	r3, [r7, #20]
 800c13e:	681b      	ldr	r3, [r3, #0]
 800c140:	4a69      	ldr	r2, [pc, #420]	; (800c2e8 <UART_SetConfig+0x33c>)
 800c142:	4293      	cmp	r3, r2
 800c144:	d130      	bne.n	800c1a8 <UART_SetConfig+0x1fc>
 800c146:	4b67      	ldr	r3, [pc, #412]	; (800c2e4 <UART_SetConfig+0x338>)
 800c148:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c14a:	f003 0307 	and.w	r3, r3, #7
 800c14e:	2b05      	cmp	r3, #5
 800c150:	d826      	bhi.n	800c1a0 <UART_SetConfig+0x1f4>
 800c152:	a201      	add	r2, pc, #4	; (adr r2, 800c158 <UART_SetConfig+0x1ac>)
 800c154:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c158:	0800c171 	.word	0x0800c171
 800c15c:	0800c179 	.word	0x0800c179
 800c160:	0800c181 	.word	0x0800c181
 800c164:	0800c189 	.word	0x0800c189
 800c168:	0800c191 	.word	0x0800c191
 800c16c:	0800c199 	.word	0x0800c199
 800c170:	2300      	movs	r3, #0
 800c172:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c176:	e1ec      	b.n	800c552 <UART_SetConfig+0x5a6>
 800c178:	2304      	movs	r3, #4
 800c17a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c17e:	e1e8      	b.n	800c552 <UART_SetConfig+0x5a6>
 800c180:	2308      	movs	r3, #8
 800c182:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c186:	e1e4      	b.n	800c552 <UART_SetConfig+0x5a6>
 800c188:	2310      	movs	r3, #16
 800c18a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c18e:	e1e0      	b.n	800c552 <UART_SetConfig+0x5a6>
 800c190:	2320      	movs	r3, #32
 800c192:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c196:	e1dc      	b.n	800c552 <UART_SetConfig+0x5a6>
 800c198:	2340      	movs	r3, #64	; 0x40
 800c19a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c19e:	e1d8      	b.n	800c552 <UART_SetConfig+0x5a6>
 800c1a0:	2380      	movs	r3, #128	; 0x80
 800c1a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c1a6:	e1d4      	b.n	800c552 <UART_SetConfig+0x5a6>
 800c1a8:	697b      	ldr	r3, [r7, #20]
 800c1aa:	681b      	ldr	r3, [r3, #0]
 800c1ac:	4a4f      	ldr	r2, [pc, #316]	; (800c2ec <UART_SetConfig+0x340>)
 800c1ae:	4293      	cmp	r3, r2
 800c1b0:	d130      	bne.n	800c214 <UART_SetConfig+0x268>
 800c1b2:	4b4c      	ldr	r3, [pc, #304]	; (800c2e4 <UART_SetConfig+0x338>)
 800c1b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c1b6:	f003 0307 	and.w	r3, r3, #7
 800c1ba:	2b05      	cmp	r3, #5
 800c1bc:	d826      	bhi.n	800c20c <UART_SetConfig+0x260>
 800c1be:	a201      	add	r2, pc, #4	; (adr r2, 800c1c4 <UART_SetConfig+0x218>)
 800c1c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c1c4:	0800c1dd 	.word	0x0800c1dd
 800c1c8:	0800c1e5 	.word	0x0800c1e5
 800c1cc:	0800c1ed 	.word	0x0800c1ed
 800c1d0:	0800c1f5 	.word	0x0800c1f5
 800c1d4:	0800c1fd 	.word	0x0800c1fd
 800c1d8:	0800c205 	.word	0x0800c205
 800c1dc:	2300      	movs	r3, #0
 800c1de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c1e2:	e1b6      	b.n	800c552 <UART_SetConfig+0x5a6>
 800c1e4:	2304      	movs	r3, #4
 800c1e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c1ea:	e1b2      	b.n	800c552 <UART_SetConfig+0x5a6>
 800c1ec:	2308      	movs	r3, #8
 800c1ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c1f2:	e1ae      	b.n	800c552 <UART_SetConfig+0x5a6>
 800c1f4:	2310      	movs	r3, #16
 800c1f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c1fa:	e1aa      	b.n	800c552 <UART_SetConfig+0x5a6>
 800c1fc:	2320      	movs	r3, #32
 800c1fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c202:	e1a6      	b.n	800c552 <UART_SetConfig+0x5a6>
 800c204:	2340      	movs	r3, #64	; 0x40
 800c206:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c20a:	e1a2      	b.n	800c552 <UART_SetConfig+0x5a6>
 800c20c:	2380      	movs	r3, #128	; 0x80
 800c20e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c212:	e19e      	b.n	800c552 <UART_SetConfig+0x5a6>
 800c214:	697b      	ldr	r3, [r7, #20]
 800c216:	681b      	ldr	r3, [r3, #0]
 800c218:	4a35      	ldr	r2, [pc, #212]	; (800c2f0 <UART_SetConfig+0x344>)
 800c21a:	4293      	cmp	r3, r2
 800c21c:	d130      	bne.n	800c280 <UART_SetConfig+0x2d4>
 800c21e:	4b31      	ldr	r3, [pc, #196]	; (800c2e4 <UART_SetConfig+0x338>)
 800c220:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c222:	f003 0307 	and.w	r3, r3, #7
 800c226:	2b05      	cmp	r3, #5
 800c228:	d826      	bhi.n	800c278 <UART_SetConfig+0x2cc>
 800c22a:	a201      	add	r2, pc, #4	; (adr r2, 800c230 <UART_SetConfig+0x284>)
 800c22c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c230:	0800c249 	.word	0x0800c249
 800c234:	0800c251 	.word	0x0800c251
 800c238:	0800c259 	.word	0x0800c259
 800c23c:	0800c261 	.word	0x0800c261
 800c240:	0800c269 	.word	0x0800c269
 800c244:	0800c271 	.word	0x0800c271
 800c248:	2300      	movs	r3, #0
 800c24a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c24e:	e180      	b.n	800c552 <UART_SetConfig+0x5a6>
 800c250:	2304      	movs	r3, #4
 800c252:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c256:	e17c      	b.n	800c552 <UART_SetConfig+0x5a6>
 800c258:	2308      	movs	r3, #8
 800c25a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c25e:	e178      	b.n	800c552 <UART_SetConfig+0x5a6>
 800c260:	2310      	movs	r3, #16
 800c262:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c266:	e174      	b.n	800c552 <UART_SetConfig+0x5a6>
 800c268:	2320      	movs	r3, #32
 800c26a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c26e:	e170      	b.n	800c552 <UART_SetConfig+0x5a6>
 800c270:	2340      	movs	r3, #64	; 0x40
 800c272:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c276:	e16c      	b.n	800c552 <UART_SetConfig+0x5a6>
 800c278:	2380      	movs	r3, #128	; 0x80
 800c27a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c27e:	e168      	b.n	800c552 <UART_SetConfig+0x5a6>
 800c280:	697b      	ldr	r3, [r7, #20]
 800c282:	681b      	ldr	r3, [r3, #0]
 800c284:	4a1b      	ldr	r2, [pc, #108]	; (800c2f4 <UART_SetConfig+0x348>)
 800c286:	4293      	cmp	r3, r2
 800c288:	d142      	bne.n	800c310 <UART_SetConfig+0x364>
 800c28a:	4b16      	ldr	r3, [pc, #88]	; (800c2e4 <UART_SetConfig+0x338>)
 800c28c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c28e:	f003 0307 	and.w	r3, r3, #7
 800c292:	2b05      	cmp	r3, #5
 800c294:	d838      	bhi.n	800c308 <UART_SetConfig+0x35c>
 800c296:	a201      	add	r2, pc, #4	; (adr r2, 800c29c <UART_SetConfig+0x2f0>)
 800c298:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c29c:	0800c2b5 	.word	0x0800c2b5
 800c2a0:	0800c2bd 	.word	0x0800c2bd
 800c2a4:	0800c2c5 	.word	0x0800c2c5
 800c2a8:	0800c2cd 	.word	0x0800c2cd
 800c2ac:	0800c2f9 	.word	0x0800c2f9
 800c2b0:	0800c301 	.word	0x0800c301
 800c2b4:	2300      	movs	r3, #0
 800c2b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c2ba:	e14a      	b.n	800c552 <UART_SetConfig+0x5a6>
 800c2bc:	2304      	movs	r3, #4
 800c2be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c2c2:	e146      	b.n	800c552 <UART_SetConfig+0x5a6>
 800c2c4:	2308      	movs	r3, #8
 800c2c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c2ca:	e142      	b.n	800c552 <UART_SetConfig+0x5a6>
 800c2cc:	2310      	movs	r3, #16
 800c2ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c2d2:	e13e      	b.n	800c552 <UART_SetConfig+0x5a6>
 800c2d4:	cfff69f3 	.word	0xcfff69f3
 800c2d8:	58000c00 	.word	0x58000c00
 800c2dc:	11fff4ff 	.word	0x11fff4ff
 800c2e0:	40011000 	.word	0x40011000
 800c2e4:	58024400 	.word	0x58024400
 800c2e8:	40004400 	.word	0x40004400
 800c2ec:	40004800 	.word	0x40004800
 800c2f0:	40004c00 	.word	0x40004c00
 800c2f4:	40005000 	.word	0x40005000
 800c2f8:	2320      	movs	r3, #32
 800c2fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c2fe:	e128      	b.n	800c552 <UART_SetConfig+0x5a6>
 800c300:	2340      	movs	r3, #64	; 0x40
 800c302:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c306:	e124      	b.n	800c552 <UART_SetConfig+0x5a6>
 800c308:	2380      	movs	r3, #128	; 0x80
 800c30a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c30e:	e120      	b.n	800c552 <UART_SetConfig+0x5a6>
 800c310:	697b      	ldr	r3, [r7, #20]
 800c312:	681b      	ldr	r3, [r3, #0]
 800c314:	4acb      	ldr	r2, [pc, #812]	; (800c644 <UART_SetConfig+0x698>)
 800c316:	4293      	cmp	r3, r2
 800c318:	d176      	bne.n	800c408 <UART_SetConfig+0x45c>
 800c31a:	4bcb      	ldr	r3, [pc, #812]	; (800c648 <UART_SetConfig+0x69c>)
 800c31c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c31e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800c322:	2b28      	cmp	r3, #40	; 0x28
 800c324:	d86c      	bhi.n	800c400 <UART_SetConfig+0x454>
 800c326:	a201      	add	r2, pc, #4	; (adr r2, 800c32c <UART_SetConfig+0x380>)
 800c328:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c32c:	0800c3d1 	.word	0x0800c3d1
 800c330:	0800c401 	.word	0x0800c401
 800c334:	0800c401 	.word	0x0800c401
 800c338:	0800c401 	.word	0x0800c401
 800c33c:	0800c401 	.word	0x0800c401
 800c340:	0800c401 	.word	0x0800c401
 800c344:	0800c401 	.word	0x0800c401
 800c348:	0800c401 	.word	0x0800c401
 800c34c:	0800c3d9 	.word	0x0800c3d9
 800c350:	0800c401 	.word	0x0800c401
 800c354:	0800c401 	.word	0x0800c401
 800c358:	0800c401 	.word	0x0800c401
 800c35c:	0800c401 	.word	0x0800c401
 800c360:	0800c401 	.word	0x0800c401
 800c364:	0800c401 	.word	0x0800c401
 800c368:	0800c401 	.word	0x0800c401
 800c36c:	0800c3e1 	.word	0x0800c3e1
 800c370:	0800c401 	.word	0x0800c401
 800c374:	0800c401 	.word	0x0800c401
 800c378:	0800c401 	.word	0x0800c401
 800c37c:	0800c401 	.word	0x0800c401
 800c380:	0800c401 	.word	0x0800c401
 800c384:	0800c401 	.word	0x0800c401
 800c388:	0800c401 	.word	0x0800c401
 800c38c:	0800c3e9 	.word	0x0800c3e9
 800c390:	0800c401 	.word	0x0800c401
 800c394:	0800c401 	.word	0x0800c401
 800c398:	0800c401 	.word	0x0800c401
 800c39c:	0800c401 	.word	0x0800c401
 800c3a0:	0800c401 	.word	0x0800c401
 800c3a4:	0800c401 	.word	0x0800c401
 800c3a8:	0800c401 	.word	0x0800c401
 800c3ac:	0800c3f1 	.word	0x0800c3f1
 800c3b0:	0800c401 	.word	0x0800c401
 800c3b4:	0800c401 	.word	0x0800c401
 800c3b8:	0800c401 	.word	0x0800c401
 800c3bc:	0800c401 	.word	0x0800c401
 800c3c0:	0800c401 	.word	0x0800c401
 800c3c4:	0800c401 	.word	0x0800c401
 800c3c8:	0800c401 	.word	0x0800c401
 800c3cc:	0800c3f9 	.word	0x0800c3f9
 800c3d0:	2301      	movs	r3, #1
 800c3d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c3d6:	e0bc      	b.n	800c552 <UART_SetConfig+0x5a6>
 800c3d8:	2304      	movs	r3, #4
 800c3da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c3de:	e0b8      	b.n	800c552 <UART_SetConfig+0x5a6>
 800c3e0:	2308      	movs	r3, #8
 800c3e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c3e6:	e0b4      	b.n	800c552 <UART_SetConfig+0x5a6>
 800c3e8:	2310      	movs	r3, #16
 800c3ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c3ee:	e0b0      	b.n	800c552 <UART_SetConfig+0x5a6>
 800c3f0:	2320      	movs	r3, #32
 800c3f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c3f6:	e0ac      	b.n	800c552 <UART_SetConfig+0x5a6>
 800c3f8:	2340      	movs	r3, #64	; 0x40
 800c3fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c3fe:	e0a8      	b.n	800c552 <UART_SetConfig+0x5a6>
 800c400:	2380      	movs	r3, #128	; 0x80
 800c402:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c406:	e0a4      	b.n	800c552 <UART_SetConfig+0x5a6>
 800c408:	697b      	ldr	r3, [r7, #20]
 800c40a:	681b      	ldr	r3, [r3, #0]
 800c40c:	4a8f      	ldr	r2, [pc, #572]	; (800c64c <UART_SetConfig+0x6a0>)
 800c40e:	4293      	cmp	r3, r2
 800c410:	d130      	bne.n	800c474 <UART_SetConfig+0x4c8>
 800c412:	4b8d      	ldr	r3, [pc, #564]	; (800c648 <UART_SetConfig+0x69c>)
 800c414:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c416:	f003 0307 	and.w	r3, r3, #7
 800c41a:	2b05      	cmp	r3, #5
 800c41c:	d826      	bhi.n	800c46c <UART_SetConfig+0x4c0>
 800c41e:	a201      	add	r2, pc, #4	; (adr r2, 800c424 <UART_SetConfig+0x478>)
 800c420:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c424:	0800c43d 	.word	0x0800c43d
 800c428:	0800c445 	.word	0x0800c445
 800c42c:	0800c44d 	.word	0x0800c44d
 800c430:	0800c455 	.word	0x0800c455
 800c434:	0800c45d 	.word	0x0800c45d
 800c438:	0800c465 	.word	0x0800c465
 800c43c:	2300      	movs	r3, #0
 800c43e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c442:	e086      	b.n	800c552 <UART_SetConfig+0x5a6>
 800c444:	2304      	movs	r3, #4
 800c446:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c44a:	e082      	b.n	800c552 <UART_SetConfig+0x5a6>
 800c44c:	2308      	movs	r3, #8
 800c44e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c452:	e07e      	b.n	800c552 <UART_SetConfig+0x5a6>
 800c454:	2310      	movs	r3, #16
 800c456:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c45a:	e07a      	b.n	800c552 <UART_SetConfig+0x5a6>
 800c45c:	2320      	movs	r3, #32
 800c45e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c462:	e076      	b.n	800c552 <UART_SetConfig+0x5a6>
 800c464:	2340      	movs	r3, #64	; 0x40
 800c466:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c46a:	e072      	b.n	800c552 <UART_SetConfig+0x5a6>
 800c46c:	2380      	movs	r3, #128	; 0x80
 800c46e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c472:	e06e      	b.n	800c552 <UART_SetConfig+0x5a6>
 800c474:	697b      	ldr	r3, [r7, #20]
 800c476:	681b      	ldr	r3, [r3, #0]
 800c478:	4a75      	ldr	r2, [pc, #468]	; (800c650 <UART_SetConfig+0x6a4>)
 800c47a:	4293      	cmp	r3, r2
 800c47c:	d130      	bne.n	800c4e0 <UART_SetConfig+0x534>
 800c47e:	4b72      	ldr	r3, [pc, #456]	; (800c648 <UART_SetConfig+0x69c>)
 800c480:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c482:	f003 0307 	and.w	r3, r3, #7
 800c486:	2b05      	cmp	r3, #5
 800c488:	d826      	bhi.n	800c4d8 <UART_SetConfig+0x52c>
 800c48a:	a201      	add	r2, pc, #4	; (adr r2, 800c490 <UART_SetConfig+0x4e4>)
 800c48c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c490:	0800c4a9 	.word	0x0800c4a9
 800c494:	0800c4b1 	.word	0x0800c4b1
 800c498:	0800c4b9 	.word	0x0800c4b9
 800c49c:	0800c4c1 	.word	0x0800c4c1
 800c4a0:	0800c4c9 	.word	0x0800c4c9
 800c4a4:	0800c4d1 	.word	0x0800c4d1
 800c4a8:	2300      	movs	r3, #0
 800c4aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c4ae:	e050      	b.n	800c552 <UART_SetConfig+0x5a6>
 800c4b0:	2304      	movs	r3, #4
 800c4b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c4b6:	e04c      	b.n	800c552 <UART_SetConfig+0x5a6>
 800c4b8:	2308      	movs	r3, #8
 800c4ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c4be:	e048      	b.n	800c552 <UART_SetConfig+0x5a6>
 800c4c0:	2310      	movs	r3, #16
 800c4c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c4c6:	e044      	b.n	800c552 <UART_SetConfig+0x5a6>
 800c4c8:	2320      	movs	r3, #32
 800c4ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c4ce:	e040      	b.n	800c552 <UART_SetConfig+0x5a6>
 800c4d0:	2340      	movs	r3, #64	; 0x40
 800c4d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c4d6:	e03c      	b.n	800c552 <UART_SetConfig+0x5a6>
 800c4d8:	2380      	movs	r3, #128	; 0x80
 800c4da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c4de:	e038      	b.n	800c552 <UART_SetConfig+0x5a6>
 800c4e0:	697b      	ldr	r3, [r7, #20]
 800c4e2:	681b      	ldr	r3, [r3, #0]
 800c4e4:	4a5b      	ldr	r2, [pc, #364]	; (800c654 <UART_SetConfig+0x6a8>)
 800c4e6:	4293      	cmp	r3, r2
 800c4e8:	d130      	bne.n	800c54c <UART_SetConfig+0x5a0>
 800c4ea:	4b57      	ldr	r3, [pc, #348]	; (800c648 <UART_SetConfig+0x69c>)
 800c4ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c4ee:	f003 0307 	and.w	r3, r3, #7
 800c4f2:	2b05      	cmp	r3, #5
 800c4f4:	d826      	bhi.n	800c544 <UART_SetConfig+0x598>
 800c4f6:	a201      	add	r2, pc, #4	; (adr r2, 800c4fc <UART_SetConfig+0x550>)
 800c4f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c4fc:	0800c515 	.word	0x0800c515
 800c500:	0800c51d 	.word	0x0800c51d
 800c504:	0800c525 	.word	0x0800c525
 800c508:	0800c52d 	.word	0x0800c52d
 800c50c:	0800c535 	.word	0x0800c535
 800c510:	0800c53d 	.word	0x0800c53d
 800c514:	2302      	movs	r3, #2
 800c516:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c51a:	e01a      	b.n	800c552 <UART_SetConfig+0x5a6>
 800c51c:	2304      	movs	r3, #4
 800c51e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c522:	e016      	b.n	800c552 <UART_SetConfig+0x5a6>
 800c524:	2308      	movs	r3, #8
 800c526:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c52a:	e012      	b.n	800c552 <UART_SetConfig+0x5a6>
 800c52c:	2310      	movs	r3, #16
 800c52e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c532:	e00e      	b.n	800c552 <UART_SetConfig+0x5a6>
 800c534:	2320      	movs	r3, #32
 800c536:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c53a:	e00a      	b.n	800c552 <UART_SetConfig+0x5a6>
 800c53c:	2340      	movs	r3, #64	; 0x40
 800c53e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c542:	e006      	b.n	800c552 <UART_SetConfig+0x5a6>
 800c544:	2380      	movs	r3, #128	; 0x80
 800c546:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c54a:	e002      	b.n	800c552 <UART_SetConfig+0x5a6>
 800c54c:	2380      	movs	r3, #128	; 0x80
 800c54e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800c552:	697b      	ldr	r3, [r7, #20]
 800c554:	681b      	ldr	r3, [r3, #0]
 800c556:	4a3f      	ldr	r2, [pc, #252]	; (800c654 <UART_SetConfig+0x6a8>)
 800c558:	4293      	cmp	r3, r2
 800c55a:	f040 80f8 	bne.w	800c74e <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800c55e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800c562:	2b20      	cmp	r3, #32
 800c564:	dc46      	bgt.n	800c5f4 <UART_SetConfig+0x648>
 800c566:	2b02      	cmp	r3, #2
 800c568:	f2c0 8082 	blt.w	800c670 <UART_SetConfig+0x6c4>
 800c56c:	3b02      	subs	r3, #2
 800c56e:	2b1e      	cmp	r3, #30
 800c570:	d87e      	bhi.n	800c670 <UART_SetConfig+0x6c4>
 800c572:	a201      	add	r2, pc, #4	; (adr r2, 800c578 <UART_SetConfig+0x5cc>)
 800c574:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c578:	0800c5fb 	.word	0x0800c5fb
 800c57c:	0800c671 	.word	0x0800c671
 800c580:	0800c603 	.word	0x0800c603
 800c584:	0800c671 	.word	0x0800c671
 800c588:	0800c671 	.word	0x0800c671
 800c58c:	0800c671 	.word	0x0800c671
 800c590:	0800c613 	.word	0x0800c613
 800c594:	0800c671 	.word	0x0800c671
 800c598:	0800c671 	.word	0x0800c671
 800c59c:	0800c671 	.word	0x0800c671
 800c5a0:	0800c671 	.word	0x0800c671
 800c5a4:	0800c671 	.word	0x0800c671
 800c5a8:	0800c671 	.word	0x0800c671
 800c5ac:	0800c671 	.word	0x0800c671
 800c5b0:	0800c623 	.word	0x0800c623
 800c5b4:	0800c671 	.word	0x0800c671
 800c5b8:	0800c671 	.word	0x0800c671
 800c5bc:	0800c671 	.word	0x0800c671
 800c5c0:	0800c671 	.word	0x0800c671
 800c5c4:	0800c671 	.word	0x0800c671
 800c5c8:	0800c671 	.word	0x0800c671
 800c5cc:	0800c671 	.word	0x0800c671
 800c5d0:	0800c671 	.word	0x0800c671
 800c5d4:	0800c671 	.word	0x0800c671
 800c5d8:	0800c671 	.word	0x0800c671
 800c5dc:	0800c671 	.word	0x0800c671
 800c5e0:	0800c671 	.word	0x0800c671
 800c5e4:	0800c671 	.word	0x0800c671
 800c5e8:	0800c671 	.word	0x0800c671
 800c5ec:	0800c671 	.word	0x0800c671
 800c5f0:	0800c663 	.word	0x0800c663
 800c5f4:	2b40      	cmp	r3, #64	; 0x40
 800c5f6:	d037      	beq.n	800c668 <UART_SetConfig+0x6bc>
 800c5f8:	e03a      	b.n	800c670 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800c5fa:	f7fc ff79 	bl	80094f0 <HAL_RCCEx_GetD3PCLK1Freq>
 800c5fe:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800c600:	e03c      	b.n	800c67c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c602:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c606:	4618      	mov	r0, r3
 800c608:	f7fc ff88 	bl	800951c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800c60c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c60e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c610:	e034      	b.n	800c67c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c612:	f107 0318 	add.w	r3, r7, #24
 800c616:	4618      	mov	r0, r3
 800c618:	f7fd f8d4 	bl	80097c4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800c61c:	69fb      	ldr	r3, [r7, #28]
 800c61e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c620:	e02c      	b.n	800c67c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c622:	4b09      	ldr	r3, [pc, #36]	; (800c648 <UART_SetConfig+0x69c>)
 800c624:	681b      	ldr	r3, [r3, #0]
 800c626:	f003 0320 	and.w	r3, r3, #32
 800c62a:	2b00      	cmp	r3, #0
 800c62c:	d016      	beq.n	800c65c <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800c62e:	4b06      	ldr	r3, [pc, #24]	; (800c648 <UART_SetConfig+0x69c>)
 800c630:	681b      	ldr	r3, [r3, #0]
 800c632:	08db      	lsrs	r3, r3, #3
 800c634:	f003 0303 	and.w	r3, r3, #3
 800c638:	4a07      	ldr	r2, [pc, #28]	; (800c658 <UART_SetConfig+0x6ac>)
 800c63a:	fa22 f303 	lsr.w	r3, r2, r3
 800c63e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800c640:	e01c      	b.n	800c67c <UART_SetConfig+0x6d0>
 800c642:	bf00      	nop
 800c644:	40011400 	.word	0x40011400
 800c648:	58024400 	.word	0x58024400
 800c64c:	40007800 	.word	0x40007800
 800c650:	40007c00 	.word	0x40007c00
 800c654:	58000c00 	.word	0x58000c00
 800c658:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800c65c:	4b9d      	ldr	r3, [pc, #628]	; (800c8d4 <UART_SetConfig+0x928>)
 800c65e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c660:	e00c      	b.n	800c67c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800c662:	4b9d      	ldr	r3, [pc, #628]	; (800c8d8 <UART_SetConfig+0x92c>)
 800c664:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c666:	e009      	b.n	800c67c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c668:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c66c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c66e:	e005      	b.n	800c67c <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800c670:	2300      	movs	r3, #0
 800c672:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800c674:	2301      	movs	r3, #1
 800c676:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800c67a:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800c67c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c67e:	2b00      	cmp	r3, #0
 800c680:	f000 81de 	beq.w	800ca40 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800c684:	697b      	ldr	r3, [r7, #20]
 800c686:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c688:	4a94      	ldr	r2, [pc, #592]	; (800c8dc <UART_SetConfig+0x930>)
 800c68a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c68e:	461a      	mov	r2, r3
 800c690:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c692:	fbb3 f3f2 	udiv	r3, r3, r2
 800c696:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c698:	697b      	ldr	r3, [r7, #20]
 800c69a:	685a      	ldr	r2, [r3, #4]
 800c69c:	4613      	mov	r3, r2
 800c69e:	005b      	lsls	r3, r3, #1
 800c6a0:	4413      	add	r3, r2
 800c6a2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c6a4:	429a      	cmp	r2, r3
 800c6a6:	d305      	bcc.n	800c6b4 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800c6a8:	697b      	ldr	r3, [r7, #20]
 800c6aa:	685b      	ldr	r3, [r3, #4]
 800c6ac:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c6ae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c6b0:	429a      	cmp	r2, r3
 800c6b2:	d903      	bls.n	800c6bc <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800c6b4:	2301      	movs	r3, #1
 800c6b6:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800c6ba:	e1c1      	b.n	800ca40 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c6bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c6be:	2200      	movs	r2, #0
 800c6c0:	60bb      	str	r3, [r7, #8]
 800c6c2:	60fa      	str	r2, [r7, #12]
 800c6c4:	697b      	ldr	r3, [r7, #20]
 800c6c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c6c8:	4a84      	ldr	r2, [pc, #528]	; (800c8dc <UART_SetConfig+0x930>)
 800c6ca:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c6ce:	b29b      	uxth	r3, r3
 800c6d0:	2200      	movs	r2, #0
 800c6d2:	603b      	str	r3, [r7, #0]
 800c6d4:	607a      	str	r2, [r7, #4]
 800c6d6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c6da:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800c6de:	f7f3 fe4f 	bl	8000380 <__aeabi_uldivmod>
 800c6e2:	4602      	mov	r2, r0
 800c6e4:	460b      	mov	r3, r1
 800c6e6:	4610      	mov	r0, r2
 800c6e8:	4619      	mov	r1, r3
 800c6ea:	f04f 0200 	mov.w	r2, #0
 800c6ee:	f04f 0300 	mov.w	r3, #0
 800c6f2:	020b      	lsls	r3, r1, #8
 800c6f4:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800c6f8:	0202      	lsls	r2, r0, #8
 800c6fa:	6979      	ldr	r1, [r7, #20]
 800c6fc:	6849      	ldr	r1, [r1, #4]
 800c6fe:	0849      	lsrs	r1, r1, #1
 800c700:	2000      	movs	r0, #0
 800c702:	460c      	mov	r4, r1
 800c704:	4605      	mov	r5, r0
 800c706:	eb12 0804 	adds.w	r8, r2, r4
 800c70a:	eb43 0905 	adc.w	r9, r3, r5
 800c70e:	697b      	ldr	r3, [r7, #20]
 800c710:	685b      	ldr	r3, [r3, #4]
 800c712:	2200      	movs	r2, #0
 800c714:	469a      	mov	sl, r3
 800c716:	4693      	mov	fp, r2
 800c718:	4652      	mov	r2, sl
 800c71a:	465b      	mov	r3, fp
 800c71c:	4640      	mov	r0, r8
 800c71e:	4649      	mov	r1, r9
 800c720:	f7f3 fe2e 	bl	8000380 <__aeabi_uldivmod>
 800c724:	4602      	mov	r2, r0
 800c726:	460b      	mov	r3, r1
 800c728:	4613      	mov	r3, r2
 800c72a:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800c72c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c72e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c732:	d308      	bcc.n	800c746 <UART_SetConfig+0x79a>
 800c734:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c736:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c73a:	d204      	bcs.n	800c746 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800c73c:	697b      	ldr	r3, [r7, #20]
 800c73e:	681b      	ldr	r3, [r3, #0]
 800c740:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c742:	60da      	str	r2, [r3, #12]
 800c744:	e17c      	b.n	800ca40 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800c746:	2301      	movs	r3, #1
 800c748:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800c74c:	e178      	b.n	800ca40 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c74e:	697b      	ldr	r3, [r7, #20]
 800c750:	69db      	ldr	r3, [r3, #28]
 800c752:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c756:	f040 80c5 	bne.w	800c8e4 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800c75a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800c75e:	2b20      	cmp	r3, #32
 800c760:	dc48      	bgt.n	800c7f4 <UART_SetConfig+0x848>
 800c762:	2b00      	cmp	r3, #0
 800c764:	db7b      	blt.n	800c85e <UART_SetConfig+0x8b2>
 800c766:	2b20      	cmp	r3, #32
 800c768:	d879      	bhi.n	800c85e <UART_SetConfig+0x8b2>
 800c76a:	a201      	add	r2, pc, #4	; (adr r2, 800c770 <UART_SetConfig+0x7c4>)
 800c76c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c770:	0800c7fb 	.word	0x0800c7fb
 800c774:	0800c803 	.word	0x0800c803
 800c778:	0800c85f 	.word	0x0800c85f
 800c77c:	0800c85f 	.word	0x0800c85f
 800c780:	0800c80b 	.word	0x0800c80b
 800c784:	0800c85f 	.word	0x0800c85f
 800c788:	0800c85f 	.word	0x0800c85f
 800c78c:	0800c85f 	.word	0x0800c85f
 800c790:	0800c81b 	.word	0x0800c81b
 800c794:	0800c85f 	.word	0x0800c85f
 800c798:	0800c85f 	.word	0x0800c85f
 800c79c:	0800c85f 	.word	0x0800c85f
 800c7a0:	0800c85f 	.word	0x0800c85f
 800c7a4:	0800c85f 	.word	0x0800c85f
 800c7a8:	0800c85f 	.word	0x0800c85f
 800c7ac:	0800c85f 	.word	0x0800c85f
 800c7b0:	0800c82b 	.word	0x0800c82b
 800c7b4:	0800c85f 	.word	0x0800c85f
 800c7b8:	0800c85f 	.word	0x0800c85f
 800c7bc:	0800c85f 	.word	0x0800c85f
 800c7c0:	0800c85f 	.word	0x0800c85f
 800c7c4:	0800c85f 	.word	0x0800c85f
 800c7c8:	0800c85f 	.word	0x0800c85f
 800c7cc:	0800c85f 	.word	0x0800c85f
 800c7d0:	0800c85f 	.word	0x0800c85f
 800c7d4:	0800c85f 	.word	0x0800c85f
 800c7d8:	0800c85f 	.word	0x0800c85f
 800c7dc:	0800c85f 	.word	0x0800c85f
 800c7e0:	0800c85f 	.word	0x0800c85f
 800c7e4:	0800c85f 	.word	0x0800c85f
 800c7e8:	0800c85f 	.word	0x0800c85f
 800c7ec:	0800c85f 	.word	0x0800c85f
 800c7f0:	0800c851 	.word	0x0800c851
 800c7f4:	2b40      	cmp	r3, #64	; 0x40
 800c7f6:	d02e      	beq.n	800c856 <UART_SetConfig+0x8aa>
 800c7f8:	e031      	b.n	800c85e <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c7fa:	f7fb f9f3 	bl	8007be4 <HAL_RCC_GetPCLK1Freq>
 800c7fe:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800c800:	e033      	b.n	800c86a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c802:	f7fb fa05 	bl	8007c10 <HAL_RCC_GetPCLK2Freq>
 800c806:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800c808:	e02f      	b.n	800c86a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c80a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c80e:	4618      	mov	r0, r3
 800c810:	f7fc fe84 	bl	800951c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800c814:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c816:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c818:	e027      	b.n	800c86a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c81a:	f107 0318 	add.w	r3, r7, #24
 800c81e:	4618      	mov	r0, r3
 800c820:	f7fc ffd0 	bl	80097c4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800c824:	69fb      	ldr	r3, [r7, #28]
 800c826:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c828:	e01f      	b.n	800c86a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c82a:	4b2d      	ldr	r3, [pc, #180]	; (800c8e0 <UART_SetConfig+0x934>)
 800c82c:	681b      	ldr	r3, [r3, #0]
 800c82e:	f003 0320 	and.w	r3, r3, #32
 800c832:	2b00      	cmp	r3, #0
 800c834:	d009      	beq.n	800c84a <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800c836:	4b2a      	ldr	r3, [pc, #168]	; (800c8e0 <UART_SetConfig+0x934>)
 800c838:	681b      	ldr	r3, [r3, #0]
 800c83a:	08db      	lsrs	r3, r3, #3
 800c83c:	f003 0303 	and.w	r3, r3, #3
 800c840:	4a24      	ldr	r2, [pc, #144]	; (800c8d4 <UART_SetConfig+0x928>)
 800c842:	fa22 f303 	lsr.w	r3, r2, r3
 800c846:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800c848:	e00f      	b.n	800c86a <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800c84a:	4b22      	ldr	r3, [pc, #136]	; (800c8d4 <UART_SetConfig+0x928>)
 800c84c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c84e:	e00c      	b.n	800c86a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800c850:	4b21      	ldr	r3, [pc, #132]	; (800c8d8 <UART_SetConfig+0x92c>)
 800c852:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c854:	e009      	b.n	800c86a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c856:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c85a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c85c:	e005      	b.n	800c86a <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800c85e:	2300      	movs	r3, #0
 800c860:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800c862:	2301      	movs	r3, #1
 800c864:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800c868:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800c86a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c86c:	2b00      	cmp	r3, #0
 800c86e:	f000 80e7 	beq.w	800ca40 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c872:	697b      	ldr	r3, [r7, #20]
 800c874:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c876:	4a19      	ldr	r2, [pc, #100]	; (800c8dc <UART_SetConfig+0x930>)
 800c878:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c87c:	461a      	mov	r2, r3
 800c87e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c880:	fbb3 f3f2 	udiv	r3, r3, r2
 800c884:	005a      	lsls	r2, r3, #1
 800c886:	697b      	ldr	r3, [r7, #20]
 800c888:	685b      	ldr	r3, [r3, #4]
 800c88a:	085b      	lsrs	r3, r3, #1
 800c88c:	441a      	add	r2, r3
 800c88e:	697b      	ldr	r3, [r7, #20]
 800c890:	685b      	ldr	r3, [r3, #4]
 800c892:	fbb2 f3f3 	udiv	r3, r2, r3
 800c896:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c898:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c89a:	2b0f      	cmp	r3, #15
 800c89c:	d916      	bls.n	800c8cc <UART_SetConfig+0x920>
 800c89e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c8a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c8a4:	d212      	bcs.n	800c8cc <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800c8a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c8a8:	b29b      	uxth	r3, r3
 800c8aa:	f023 030f 	bic.w	r3, r3, #15
 800c8ae:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800c8b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c8b2:	085b      	lsrs	r3, r3, #1
 800c8b4:	b29b      	uxth	r3, r3
 800c8b6:	f003 0307 	and.w	r3, r3, #7
 800c8ba:	b29a      	uxth	r2, r3
 800c8bc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800c8be:	4313      	orrs	r3, r2
 800c8c0:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800c8c2:	697b      	ldr	r3, [r7, #20]
 800c8c4:	681b      	ldr	r3, [r3, #0]
 800c8c6:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800c8c8:	60da      	str	r2, [r3, #12]
 800c8ca:	e0b9      	b.n	800ca40 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800c8cc:	2301      	movs	r3, #1
 800c8ce:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800c8d2:	e0b5      	b.n	800ca40 <UART_SetConfig+0xa94>
 800c8d4:	03d09000 	.word	0x03d09000
 800c8d8:	003d0900 	.word	0x003d0900
 800c8dc:	08028f48 	.word	0x08028f48
 800c8e0:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800c8e4:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800c8e8:	2b20      	cmp	r3, #32
 800c8ea:	dc49      	bgt.n	800c980 <UART_SetConfig+0x9d4>
 800c8ec:	2b00      	cmp	r3, #0
 800c8ee:	db7c      	blt.n	800c9ea <UART_SetConfig+0xa3e>
 800c8f0:	2b20      	cmp	r3, #32
 800c8f2:	d87a      	bhi.n	800c9ea <UART_SetConfig+0xa3e>
 800c8f4:	a201      	add	r2, pc, #4	; (adr r2, 800c8fc <UART_SetConfig+0x950>)
 800c8f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c8fa:	bf00      	nop
 800c8fc:	0800c987 	.word	0x0800c987
 800c900:	0800c98f 	.word	0x0800c98f
 800c904:	0800c9eb 	.word	0x0800c9eb
 800c908:	0800c9eb 	.word	0x0800c9eb
 800c90c:	0800c997 	.word	0x0800c997
 800c910:	0800c9eb 	.word	0x0800c9eb
 800c914:	0800c9eb 	.word	0x0800c9eb
 800c918:	0800c9eb 	.word	0x0800c9eb
 800c91c:	0800c9a7 	.word	0x0800c9a7
 800c920:	0800c9eb 	.word	0x0800c9eb
 800c924:	0800c9eb 	.word	0x0800c9eb
 800c928:	0800c9eb 	.word	0x0800c9eb
 800c92c:	0800c9eb 	.word	0x0800c9eb
 800c930:	0800c9eb 	.word	0x0800c9eb
 800c934:	0800c9eb 	.word	0x0800c9eb
 800c938:	0800c9eb 	.word	0x0800c9eb
 800c93c:	0800c9b7 	.word	0x0800c9b7
 800c940:	0800c9eb 	.word	0x0800c9eb
 800c944:	0800c9eb 	.word	0x0800c9eb
 800c948:	0800c9eb 	.word	0x0800c9eb
 800c94c:	0800c9eb 	.word	0x0800c9eb
 800c950:	0800c9eb 	.word	0x0800c9eb
 800c954:	0800c9eb 	.word	0x0800c9eb
 800c958:	0800c9eb 	.word	0x0800c9eb
 800c95c:	0800c9eb 	.word	0x0800c9eb
 800c960:	0800c9eb 	.word	0x0800c9eb
 800c964:	0800c9eb 	.word	0x0800c9eb
 800c968:	0800c9eb 	.word	0x0800c9eb
 800c96c:	0800c9eb 	.word	0x0800c9eb
 800c970:	0800c9eb 	.word	0x0800c9eb
 800c974:	0800c9eb 	.word	0x0800c9eb
 800c978:	0800c9eb 	.word	0x0800c9eb
 800c97c:	0800c9dd 	.word	0x0800c9dd
 800c980:	2b40      	cmp	r3, #64	; 0x40
 800c982:	d02e      	beq.n	800c9e2 <UART_SetConfig+0xa36>
 800c984:	e031      	b.n	800c9ea <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c986:	f7fb f92d 	bl	8007be4 <HAL_RCC_GetPCLK1Freq>
 800c98a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800c98c:	e033      	b.n	800c9f6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c98e:	f7fb f93f 	bl	8007c10 <HAL_RCC_GetPCLK2Freq>
 800c992:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800c994:	e02f      	b.n	800c9f6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c996:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c99a:	4618      	mov	r0, r3
 800c99c:	f7fc fdbe 	bl	800951c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800c9a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c9a2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c9a4:	e027      	b.n	800c9f6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c9a6:	f107 0318 	add.w	r3, r7, #24
 800c9aa:	4618      	mov	r0, r3
 800c9ac:	f7fc ff0a 	bl	80097c4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800c9b0:	69fb      	ldr	r3, [r7, #28]
 800c9b2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c9b4:	e01f      	b.n	800c9f6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c9b6:	4b2d      	ldr	r3, [pc, #180]	; (800ca6c <UART_SetConfig+0xac0>)
 800c9b8:	681b      	ldr	r3, [r3, #0]
 800c9ba:	f003 0320 	and.w	r3, r3, #32
 800c9be:	2b00      	cmp	r3, #0
 800c9c0:	d009      	beq.n	800c9d6 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800c9c2:	4b2a      	ldr	r3, [pc, #168]	; (800ca6c <UART_SetConfig+0xac0>)
 800c9c4:	681b      	ldr	r3, [r3, #0]
 800c9c6:	08db      	lsrs	r3, r3, #3
 800c9c8:	f003 0303 	and.w	r3, r3, #3
 800c9cc:	4a28      	ldr	r2, [pc, #160]	; (800ca70 <UART_SetConfig+0xac4>)
 800c9ce:	fa22 f303 	lsr.w	r3, r2, r3
 800c9d2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800c9d4:	e00f      	b.n	800c9f6 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800c9d6:	4b26      	ldr	r3, [pc, #152]	; (800ca70 <UART_SetConfig+0xac4>)
 800c9d8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c9da:	e00c      	b.n	800c9f6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800c9dc:	4b25      	ldr	r3, [pc, #148]	; (800ca74 <UART_SetConfig+0xac8>)
 800c9de:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c9e0:	e009      	b.n	800c9f6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c9e2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c9e6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c9e8:	e005      	b.n	800c9f6 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800c9ea:	2300      	movs	r3, #0
 800c9ec:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800c9ee:	2301      	movs	r3, #1
 800c9f0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800c9f4:	bf00      	nop
    }

    if (pclk != 0U)
 800c9f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c9f8:	2b00      	cmp	r3, #0
 800c9fa:	d021      	beq.n	800ca40 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c9fc:	697b      	ldr	r3, [r7, #20]
 800c9fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ca00:	4a1d      	ldr	r2, [pc, #116]	; (800ca78 <UART_SetConfig+0xacc>)
 800ca02:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ca06:	461a      	mov	r2, r3
 800ca08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ca0a:	fbb3 f2f2 	udiv	r2, r3, r2
 800ca0e:	697b      	ldr	r3, [r7, #20]
 800ca10:	685b      	ldr	r3, [r3, #4]
 800ca12:	085b      	lsrs	r3, r3, #1
 800ca14:	441a      	add	r2, r3
 800ca16:	697b      	ldr	r3, [r7, #20]
 800ca18:	685b      	ldr	r3, [r3, #4]
 800ca1a:	fbb2 f3f3 	udiv	r3, r2, r3
 800ca1e:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ca20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca22:	2b0f      	cmp	r3, #15
 800ca24:	d909      	bls.n	800ca3a <UART_SetConfig+0xa8e>
 800ca26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca28:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ca2c:	d205      	bcs.n	800ca3a <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800ca2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca30:	b29a      	uxth	r2, r3
 800ca32:	697b      	ldr	r3, [r7, #20]
 800ca34:	681b      	ldr	r3, [r3, #0]
 800ca36:	60da      	str	r2, [r3, #12]
 800ca38:	e002      	b.n	800ca40 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800ca3a:	2301      	movs	r3, #1
 800ca3c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800ca40:	697b      	ldr	r3, [r7, #20]
 800ca42:	2201      	movs	r2, #1
 800ca44:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800ca48:	697b      	ldr	r3, [r7, #20]
 800ca4a:	2201      	movs	r2, #1
 800ca4c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800ca50:	697b      	ldr	r3, [r7, #20]
 800ca52:	2200      	movs	r2, #0
 800ca54:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800ca56:	697b      	ldr	r3, [r7, #20]
 800ca58:	2200      	movs	r2, #0
 800ca5a:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800ca5c:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800ca60:	4618      	mov	r0, r3
 800ca62:	3748      	adds	r7, #72	; 0x48
 800ca64:	46bd      	mov	sp, r7
 800ca66:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800ca6a:	bf00      	nop
 800ca6c:	58024400 	.word	0x58024400
 800ca70:	03d09000 	.word	0x03d09000
 800ca74:	003d0900 	.word	0x003d0900
 800ca78:	08028f48 	.word	0x08028f48

0800ca7c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800ca7c:	b480      	push	{r7}
 800ca7e:	b083      	sub	sp, #12
 800ca80:	af00      	add	r7, sp, #0
 800ca82:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800ca84:	687b      	ldr	r3, [r7, #4]
 800ca86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ca88:	f003 0301 	and.w	r3, r3, #1
 800ca8c:	2b00      	cmp	r3, #0
 800ca8e:	d00a      	beq.n	800caa6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800ca90:	687b      	ldr	r3, [r7, #4]
 800ca92:	681b      	ldr	r3, [r3, #0]
 800ca94:	685b      	ldr	r3, [r3, #4]
 800ca96:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800ca9a:	687b      	ldr	r3, [r7, #4]
 800ca9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ca9e:	687b      	ldr	r3, [r7, #4]
 800caa0:	681b      	ldr	r3, [r3, #0]
 800caa2:	430a      	orrs	r2, r1
 800caa4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800caa6:	687b      	ldr	r3, [r7, #4]
 800caa8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800caaa:	f003 0302 	and.w	r3, r3, #2
 800caae:	2b00      	cmp	r3, #0
 800cab0:	d00a      	beq.n	800cac8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800cab2:	687b      	ldr	r3, [r7, #4]
 800cab4:	681b      	ldr	r3, [r3, #0]
 800cab6:	685b      	ldr	r3, [r3, #4]
 800cab8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800cabc:	687b      	ldr	r3, [r7, #4]
 800cabe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800cac0:	687b      	ldr	r3, [r7, #4]
 800cac2:	681b      	ldr	r3, [r3, #0]
 800cac4:	430a      	orrs	r2, r1
 800cac6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800cac8:	687b      	ldr	r3, [r7, #4]
 800caca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cacc:	f003 0304 	and.w	r3, r3, #4
 800cad0:	2b00      	cmp	r3, #0
 800cad2:	d00a      	beq.n	800caea <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800cad4:	687b      	ldr	r3, [r7, #4]
 800cad6:	681b      	ldr	r3, [r3, #0]
 800cad8:	685b      	ldr	r3, [r3, #4]
 800cada:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800cade:	687b      	ldr	r3, [r7, #4]
 800cae0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800cae2:	687b      	ldr	r3, [r7, #4]
 800cae4:	681b      	ldr	r3, [r3, #0]
 800cae6:	430a      	orrs	r2, r1
 800cae8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800caea:	687b      	ldr	r3, [r7, #4]
 800caec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800caee:	f003 0308 	and.w	r3, r3, #8
 800caf2:	2b00      	cmp	r3, #0
 800caf4:	d00a      	beq.n	800cb0c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800caf6:	687b      	ldr	r3, [r7, #4]
 800caf8:	681b      	ldr	r3, [r3, #0]
 800cafa:	685b      	ldr	r3, [r3, #4]
 800cafc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800cb00:	687b      	ldr	r3, [r7, #4]
 800cb02:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cb04:	687b      	ldr	r3, [r7, #4]
 800cb06:	681b      	ldr	r3, [r3, #0]
 800cb08:	430a      	orrs	r2, r1
 800cb0a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800cb0c:	687b      	ldr	r3, [r7, #4]
 800cb0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cb10:	f003 0310 	and.w	r3, r3, #16
 800cb14:	2b00      	cmp	r3, #0
 800cb16:	d00a      	beq.n	800cb2e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800cb18:	687b      	ldr	r3, [r7, #4]
 800cb1a:	681b      	ldr	r3, [r3, #0]
 800cb1c:	689b      	ldr	r3, [r3, #8]
 800cb1e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800cb22:	687b      	ldr	r3, [r7, #4]
 800cb24:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800cb26:	687b      	ldr	r3, [r7, #4]
 800cb28:	681b      	ldr	r3, [r3, #0]
 800cb2a:	430a      	orrs	r2, r1
 800cb2c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800cb2e:	687b      	ldr	r3, [r7, #4]
 800cb30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cb32:	f003 0320 	and.w	r3, r3, #32
 800cb36:	2b00      	cmp	r3, #0
 800cb38:	d00a      	beq.n	800cb50 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800cb3a:	687b      	ldr	r3, [r7, #4]
 800cb3c:	681b      	ldr	r3, [r3, #0]
 800cb3e:	689b      	ldr	r3, [r3, #8]
 800cb40:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800cb44:	687b      	ldr	r3, [r7, #4]
 800cb46:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800cb48:	687b      	ldr	r3, [r7, #4]
 800cb4a:	681b      	ldr	r3, [r3, #0]
 800cb4c:	430a      	orrs	r2, r1
 800cb4e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800cb50:	687b      	ldr	r3, [r7, #4]
 800cb52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cb54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cb58:	2b00      	cmp	r3, #0
 800cb5a:	d01a      	beq.n	800cb92 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800cb5c:	687b      	ldr	r3, [r7, #4]
 800cb5e:	681b      	ldr	r3, [r3, #0]
 800cb60:	685b      	ldr	r3, [r3, #4]
 800cb62:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800cb66:	687b      	ldr	r3, [r7, #4]
 800cb68:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800cb6a:	687b      	ldr	r3, [r7, #4]
 800cb6c:	681b      	ldr	r3, [r3, #0]
 800cb6e:	430a      	orrs	r2, r1
 800cb70:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800cb72:	687b      	ldr	r3, [r7, #4]
 800cb74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cb76:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800cb7a:	d10a      	bne.n	800cb92 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800cb7c:	687b      	ldr	r3, [r7, #4]
 800cb7e:	681b      	ldr	r3, [r3, #0]
 800cb80:	685b      	ldr	r3, [r3, #4]
 800cb82:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800cb86:	687b      	ldr	r3, [r7, #4]
 800cb88:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800cb8a:	687b      	ldr	r3, [r7, #4]
 800cb8c:	681b      	ldr	r3, [r3, #0]
 800cb8e:	430a      	orrs	r2, r1
 800cb90:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800cb92:	687b      	ldr	r3, [r7, #4]
 800cb94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cb96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cb9a:	2b00      	cmp	r3, #0
 800cb9c:	d00a      	beq.n	800cbb4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800cb9e:	687b      	ldr	r3, [r7, #4]
 800cba0:	681b      	ldr	r3, [r3, #0]
 800cba2:	685b      	ldr	r3, [r3, #4]
 800cba4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800cba8:	687b      	ldr	r3, [r7, #4]
 800cbaa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800cbac:	687b      	ldr	r3, [r7, #4]
 800cbae:	681b      	ldr	r3, [r3, #0]
 800cbb0:	430a      	orrs	r2, r1
 800cbb2:	605a      	str	r2, [r3, #4]
  }
}
 800cbb4:	bf00      	nop
 800cbb6:	370c      	adds	r7, #12
 800cbb8:	46bd      	mov	sp, r7
 800cbba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbbe:	4770      	bx	lr

0800cbc0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800cbc0:	b580      	push	{r7, lr}
 800cbc2:	b086      	sub	sp, #24
 800cbc4:	af02      	add	r7, sp, #8
 800cbc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cbc8:	687b      	ldr	r3, [r7, #4]
 800cbca:	2200      	movs	r2, #0
 800cbcc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800cbd0:	f7f7 fd92 	bl	80046f8 <HAL_GetTick>
 800cbd4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800cbd6:	687b      	ldr	r3, [r7, #4]
 800cbd8:	681b      	ldr	r3, [r3, #0]
 800cbda:	681b      	ldr	r3, [r3, #0]
 800cbdc:	f003 0308 	and.w	r3, r3, #8
 800cbe0:	2b08      	cmp	r3, #8
 800cbe2:	d10e      	bne.n	800cc02 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800cbe4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800cbe8:	9300      	str	r3, [sp, #0]
 800cbea:	68fb      	ldr	r3, [r7, #12]
 800cbec:	2200      	movs	r2, #0
 800cbee:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800cbf2:	6878      	ldr	r0, [r7, #4]
 800cbf4:	f000 f82f 	bl	800cc56 <UART_WaitOnFlagUntilTimeout>
 800cbf8:	4603      	mov	r3, r0
 800cbfa:	2b00      	cmp	r3, #0
 800cbfc:	d001      	beq.n	800cc02 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800cbfe:	2303      	movs	r3, #3
 800cc00:	e025      	b.n	800cc4e <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800cc02:	687b      	ldr	r3, [r7, #4]
 800cc04:	681b      	ldr	r3, [r3, #0]
 800cc06:	681b      	ldr	r3, [r3, #0]
 800cc08:	f003 0304 	and.w	r3, r3, #4
 800cc0c:	2b04      	cmp	r3, #4
 800cc0e:	d10e      	bne.n	800cc2e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800cc10:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800cc14:	9300      	str	r3, [sp, #0]
 800cc16:	68fb      	ldr	r3, [r7, #12]
 800cc18:	2200      	movs	r2, #0
 800cc1a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800cc1e:	6878      	ldr	r0, [r7, #4]
 800cc20:	f000 f819 	bl	800cc56 <UART_WaitOnFlagUntilTimeout>
 800cc24:	4603      	mov	r3, r0
 800cc26:	2b00      	cmp	r3, #0
 800cc28:	d001      	beq.n	800cc2e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800cc2a:	2303      	movs	r3, #3
 800cc2c:	e00f      	b.n	800cc4e <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800cc2e:	687b      	ldr	r3, [r7, #4]
 800cc30:	2220      	movs	r2, #32
 800cc32:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800cc36:	687b      	ldr	r3, [r7, #4]
 800cc38:	2220      	movs	r2, #32
 800cc3a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cc3e:	687b      	ldr	r3, [r7, #4]
 800cc40:	2200      	movs	r2, #0
 800cc42:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800cc44:	687b      	ldr	r3, [r7, #4]
 800cc46:	2200      	movs	r2, #0
 800cc48:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800cc4c:	2300      	movs	r3, #0
}
 800cc4e:	4618      	mov	r0, r3
 800cc50:	3710      	adds	r7, #16
 800cc52:	46bd      	mov	sp, r7
 800cc54:	bd80      	pop	{r7, pc}

0800cc56 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800cc56:	b580      	push	{r7, lr}
 800cc58:	b09c      	sub	sp, #112	; 0x70
 800cc5a:	af00      	add	r7, sp, #0
 800cc5c:	60f8      	str	r0, [r7, #12]
 800cc5e:	60b9      	str	r1, [r7, #8]
 800cc60:	603b      	str	r3, [r7, #0]
 800cc62:	4613      	mov	r3, r2
 800cc64:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800cc66:	e0a9      	b.n	800cdbc <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800cc68:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800cc6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cc6e:	f000 80a5 	beq.w	800cdbc <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800cc72:	f7f7 fd41 	bl	80046f8 <HAL_GetTick>
 800cc76:	4602      	mov	r2, r0
 800cc78:	683b      	ldr	r3, [r7, #0]
 800cc7a:	1ad3      	subs	r3, r2, r3
 800cc7c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800cc7e:	429a      	cmp	r2, r3
 800cc80:	d302      	bcc.n	800cc88 <UART_WaitOnFlagUntilTimeout+0x32>
 800cc82:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800cc84:	2b00      	cmp	r3, #0
 800cc86:	d140      	bne.n	800cd0a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800cc88:	68fb      	ldr	r3, [r7, #12]
 800cc8a:	681b      	ldr	r3, [r3, #0]
 800cc8c:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cc8e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cc90:	e853 3f00 	ldrex	r3, [r3]
 800cc94:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800cc96:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cc98:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800cc9c:	667b      	str	r3, [r7, #100]	; 0x64
 800cc9e:	68fb      	ldr	r3, [r7, #12]
 800cca0:	681b      	ldr	r3, [r3, #0]
 800cca2:	461a      	mov	r2, r3
 800cca4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800cca6:	65fb      	str	r3, [r7, #92]	; 0x5c
 800cca8:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ccaa:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800ccac:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800ccae:	e841 2300 	strex	r3, r2, [r1]
 800ccb2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800ccb4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ccb6:	2b00      	cmp	r3, #0
 800ccb8:	d1e6      	bne.n	800cc88 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ccba:	68fb      	ldr	r3, [r7, #12]
 800ccbc:	681b      	ldr	r3, [r3, #0]
 800ccbe:	3308      	adds	r3, #8
 800ccc0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ccc2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ccc4:	e853 3f00 	ldrex	r3, [r3]
 800ccc8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800ccca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cccc:	f023 0301 	bic.w	r3, r3, #1
 800ccd0:	663b      	str	r3, [r7, #96]	; 0x60
 800ccd2:	68fb      	ldr	r3, [r7, #12]
 800ccd4:	681b      	ldr	r3, [r3, #0]
 800ccd6:	3308      	adds	r3, #8
 800ccd8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800ccda:	64ba      	str	r2, [r7, #72]	; 0x48
 800ccdc:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ccde:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800cce0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800cce2:	e841 2300 	strex	r3, r2, [r1]
 800cce6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800cce8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ccea:	2b00      	cmp	r3, #0
 800ccec:	d1e5      	bne.n	800ccba <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800ccee:	68fb      	ldr	r3, [r7, #12]
 800ccf0:	2220      	movs	r2, #32
 800ccf2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800ccf6:	68fb      	ldr	r3, [r7, #12]
 800ccf8:	2220      	movs	r2, #32
 800ccfa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800ccfe:	68fb      	ldr	r3, [r7, #12]
 800cd00:	2200      	movs	r2, #0
 800cd02:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800cd06:	2303      	movs	r3, #3
 800cd08:	e069      	b.n	800cdde <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800cd0a:	68fb      	ldr	r3, [r7, #12]
 800cd0c:	681b      	ldr	r3, [r3, #0]
 800cd0e:	681b      	ldr	r3, [r3, #0]
 800cd10:	f003 0304 	and.w	r3, r3, #4
 800cd14:	2b00      	cmp	r3, #0
 800cd16:	d051      	beq.n	800cdbc <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800cd18:	68fb      	ldr	r3, [r7, #12]
 800cd1a:	681b      	ldr	r3, [r3, #0]
 800cd1c:	69db      	ldr	r3, [r3, #28]
 800cd1e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800cd22:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800cd26:	d149      	bne.n	800cdbc <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800cd28:	68fb      	ldr	r3, [r7, #12]
 800cd2a:	681b      	ldr	r3, [r3, #0]
 800cd2c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800cd30:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800cd32:	68fb      	ldr	r3, [r7, #12]
 800cd34:	681b      	ldr	r3, [r3, #0]
 800cd36:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cd38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd3a:	e853 3f00 	ldrex	r3, [r3]
 800cd3e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800cd40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd42:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800cd46:	66fb      	str	r3, [r7, #108]	; 0x6c
 800cd48:	68fb      	ldr	r3, [r7, #12]
 800cd4a:	681b      	ldr	r3, [r3, #0]
 800cd4c:	461a      	mov	r2, r3
 800cd4e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cd50:	637b      	str	r3, [r7, #52]	; 0x34
 800cd52:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cd54:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800cd56:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800cd58:	e841 2300 	strex	r3, r2, [r1]
 800cd5c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800cd5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd60:	2b00      	cmp	r3, #0
 800cd62:	d1e6      	bne.n	800cd32 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cd64:	68fb      	ldr	r3, [r7, #12]
 800cd66:	681b      	ldr	r3, [r3, #0]
 800cd68:	3308      	adds	r3, #8
 800cd6a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cd6c:	697b      	ldr	r3, [r7, #20]
 800cd6e:	e853 3f00 	ldrex	r3, [r3]
 800cd72:	613b      	str	r3, [r7, #16]
   return(result);
 800cd74:	693b      	ldr	r3, [r7, #16]
 800cd76:	f023 0301 	bic.w	r3, r3, #1
 800cd7a:	66bb      	str	r3, [r7, #104]	; 0x68
 800cd7c:	68fb      	ldr	r3, [r7, #12]
 800cd7e:	681b      	ldr	r3, [r3, #0]
 800cd80:	3308      	adds	r3, #8
 800cd82:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800cd84:	623a      	str	r2, [r7, #32]
 800cd86:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cd88:	69f9      	ldr	r1, [r7, #28]
 800cd8a:	6a3a      	ldr	r2, [r7, #32]
 800cd8c:	e841 2300 	strex	r3, r2, [r1]
 800cd90:	61bb      	str	r3, [r7, #24]
   return(result);
 800cd92:	69bb      	ldr	r3, [r7, #24]
 800cd94:	2b00      	cmp	r3, #0
 800cd96:	d1e5      	bne.n	800cd64 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800cd98:	68fb      	ldr	r3, [r7, #12]
 800cd9a:	2220      	movs	r2, #32
 800cd9c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800cda0:	68fb      	ldr	r3, [r7, #12]
 800cda2:	2220      	movs	r2, #32
 800cda4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800cda8:	68fb      	ldr	r3, [r7, #12]
 800cdaa:	2220      	movs	r2, #32
 800cdac:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800cdb0:	68fb      	ldr	r3, [r7, #12]
 800cdb2:	2200      	movs	r2, #0
 800cdb4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800cdb8:	2303      	movs	r3, #3
 800cdba:	e010      	b.n	800cdde <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800cdbc:	68fb      	ldr	r3, [r7, #12]
 800cdbe:	681b      	ldr	r3, [r3, #0]
 800cdc0:	69da      	ldr	r2, [r3, #28]
 800cdc2:	68bb      	ldr	r3, [r7, #8]
 800cdc4:	4013      	ands	r3, r2
 800cdc6:	68ba      	ldr	r2, [r7, #8]
 800cdc8:	429a      	cmp	r2, r3
 800cdca:	bf0c      	ite	eq
 800cdcc:	2301      	moveq	r3, #1
 800cdce:	2300      	movne	r3, #0
 800cdd0:	b2db      	uxtb	r3, r3
 800cdd2:	461a      	mov	r2, r3
 800cdd4:	79fb      	ldrb	r3, [r7, #7]
 800cdd6:	429a      	cmp	r2, r3
 800cdd8:	f43f af46 	beq.w	800cc68 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800cddc:	2300      	movs	r3, #0
}
 800cdde:	4618      	mov	r0, r3
 800cde0:	3770      	adds	r7, #112	; 0x70
 800cde2:	46bd      	mov	sp, r7
 800cde4:	bd80      	pop	{r7, pc}

0800cde6 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800cde6:	b480      	push	{r7}
 800cde8:	b085      	sub	sp, #20
 800cdea:	af00      	add	r7, sp, #0
 800cdec:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800cdee:	687b      	ldr	r3, [r7, #4]
 800cdf0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800cdf4:	2b01      	cmp	r3, #1
 800cdf6:	d101      	bne.n	800cdfc <HAL_UARTEx_DisableFifoMode+0x16>
 800cdf8:	2302      	movs	r3, #2
 800cdfa:	e027      	b.n	800ce4c <HAL_UARTEx_DisableFifoMode+0x66>
 800cdfc:	687b      	ldr	r3, [r7, #4]
 800cdfe:	2201      	movs	r2, #1
 800ce00:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800ce04:	687b      	ldr	r3, [r7, #4]
 800ce06:	2224      	movs	r2, #36	; 0x24
 800ce08:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ce0c:	687b      	ldr	r3, [r7, #4]
 800ce0e:	681b      	ldr	r3, [r3, #0]
 800ce10:	681b      	ldr	r3, [r3, #0]
 800ce12:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ce14:	687b      	ldr	r3, [r7, #4]
 800ce16:	681b      	ldr	r3, [r3, #0]
 800ce18:	681a      	ldr	r2, [r3, #0]
 800ce1a:	687b      	ldr	r3, [r7, #4]
 800ce1c:	681b      	ldr	r3, [r3, #0]
 800ce1e:	f022 0201 	bic.w	r2, r2, #1
 800ce22:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800ce24:	68fb      	ldr	r3, [r7, #12]
 800ce26:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800ce2a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800ce2c:	687b      	ldr	r3, [r7, #4]
 800ce2e:	2200      	movs	r2, #0
 800ce30:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ce32:	687b      	ldr	r3, [r7, #4]
 800ce34:	681b      	ldr	r3, [r3, #0]
 800ce36:	68fa      	ldr	r2, [r7, #12]
 800ce38:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ce3a:	687b      	ldr	r3, [r7, #4]
 800ce3c:	2220      	movs	r2, #32
 800ce3e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ce42:	687b      	ldr	r3, [r7, #4]
 800ce44:	2200      	movs	r2, #0
 800ce46:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800ce4a:	2300      	movs	r3, #0
}
 800ce4c:	4618      	mov	r0, r3
 800ce4e:	3714      	adds	r7, #20
 800ce50:	46bd      	mov	sp, r7
 800ce52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce56:	4770      	bx	lr

0800ce58 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800ce58:	b580      	push	{r7, lr}
 800ce5a:	b084      	sub	sp, #16
 800ce5c:	af00      	add	r7, sp, #0
 800ce5e:	6078      	str	r0, [r7, #4]
 800ce60:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ce62:	687b      	ldr	r3, [r7, #4]
 800ce64:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800ce68:	2b01      	cmp	r3, #1
 800ce6a:	d101      	bne.n	800ce70 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800ce6c:	2302      	movs	r3, #2
 800ce6e:	e02d      	b.n	800cecc <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800ce70:	687b      	ldr	r3, [r7, #4]
 800ce72:	2201      	movs	r2, #1
 800ce74:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800ce78:	687b      	ldr	r3, [r7, #4]
 800ce7a:	2224      	movs	r2, #36	; 0x24
 800ce7c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ce80:	687b      	ldr	r3, [r7, #4]
 800ce82:	681b      	ldr	r3, [r3, #0]
 800ce84:	681b      	ldr	r3, [r3, #0]
 800ce86:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ce88:	687b      	ldr	r3, [r7, #4]
 800ce8a:	681b      	ldr	r3, [r3, #0]
 800ce8c:	681a      	ldr	r2, [r3, #0]
 800ce8e:	687b      	ldr	r3, [r7, #4]
 800ce90:	681b      	ldr	r3, [r3, #0]
 800ce92:	f022 0201 	bic.w	r2, r2, #1
 800ce96:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800ce98:	687b      	ldr	r3, [r7, #4]
 800ce9a:	681b      	ldr	r3, [r3, #0]
 800ce9c:	689b      	ldr	r3, [r3, #8]
 800ce9e:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800cea2:	687b      	ldr	r3, [r7, #4]
 800cea4:	681b      	ldr	r3, [r3, #0]
 800cea6:	683a      	ldr	r2, [r7, #0]
 800cea8:	430a      	orrs	r2, r1
 800ceaa:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800ceac:	6878      	ldr	r0, [r7, #4]
 800ceae:	f000 f84f 	bl	800cf50 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ceb2:	687b      	ldr	r3, [r7, #4]
 800ceb4:	681b      	ldr	r3, [r3, #0]
 800ceb6:	68fa      	ldr	r2, [r7, #12]
 800ceb8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ceba:	687b      	ldr	r3, [r7, #4]
 800cebc:	2220      	movs	r2, #32
 800cebe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800cec2:	687b      	ldr	r3, [r7, #4]
 800cec4:	2200      	movs	r2, #0
 800cec6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800ceca:	2300      	movs	r3, #0
}
 800cecc:	4618      	mov	r0, r3
 800cece:	3710      	adds	r7, #16
 800ced0:	46bd      	mov	sp, r7
 800ced2:	bd80      	pop	{r7, pc}

0800ced4 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800ced4:	b580      	push	{r7, lr}
 800ced6:	b084      	sub	sp, #16
 800ced8:	af00      	add	r7, sp, #0
 800ceda:	6078      	str	r0, [r7, #4]
 800cedc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800cede:	687b      	ldr	r3, [r7, #4]
 800cee0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800cee4:	2b01      	cmp	r3, #1
 800cee6:	d101      	bne.n	800ceec <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800cee8:	2302      	movs	r3, #2
 800ceea:	e02d      	b.n	800cf48 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800ceec:	687b      	ldr	r3, [r7, #4]
 800ceee:	2201      	movs	r2, #1
 800cef0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800cef4:	687b      	ldr	r3, [r7, #4]
 800cef6:	2224      	movs	r2, #36	; 0x24
 800cef8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800cefc:	687b      	ldr	r3, [r7, #4]
 800cefe:	681b      	ldr	r3, [r3, #0]
 800cf00:	681b      	ldr	r3, [r3, #0]
 800cf02:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800cf04:	687b      	ldr	r3, [r7, #4]
 800cf06:	681b      	ldr	r3, [r3, #0]
 800cf08:	681a      	ldr	r2, [r3, #0]
 800cf0a:	687b      	ldr	r3, [r7, #4]
 800cf0c:	681b      	ldr	r3, [r3, #0]
 800cf0e:	f022 0201 	bic.w	r2, r2, #1
 800cf12:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800cf14:	687b      	ldr	r3, [r7, #4]
 800cf16:	681b      	ldr	r3, [r3, #0]
 800cf18:	689b      	ldr	r3, [r3, #8]
 800cf1a:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800cf1e:	687b      	ldr	r3, [r7, #4]
 800cf20:	681b      	ldr	r3, [r3, #0]
 800cf22:	683a      	ldr	r2, [r7, #0]
 800cf24:	430a      	orrs	r2, r1
 800cf26:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800cf28:	6878      	ldr	r0, [r7, #4]
 800cf2a:	f000 f811 	bl	800cf50 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800cf2e:	687b      	ldr	r3, [r7, #4]
 800cf30:	681b      	ldr	r3, [r3, #0]
 800cf32:	68fa      	ldr	r2, [r7, #12]
 800cf34:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800cf36:	687b      	ldr	r3, [r7, #4]
 800cf38:	2220      	movs	r2, #32
 800cf3a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800cf3e:	687b      	ldr	r3, [r7, #4]
 800cf40:	2200      	movs	r2, #0
 800cf42:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800cf46:	2300      	movs	r3, #0
}
 800cf48:	4618      	mov	r0, r3
 800cf4a:	3710      	adds	r7, #16
 800cf4c:	46bd      	mov	sp, r7
 800cf4e:	bd80      	pop	{r7, pc}

0800cf50 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800cf50:	b480      	push	{r7}
 800cf52:	b085      	sub	sp, #20
 800cf54:	af00      	add	r7, sp, #0
 800cf56:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800cf58:	687b      	ldr	r3, [r7, #4]
 800cf5a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800cf5c:	2b00      	cmp	r3, #0
 800cf5e:	d108      	bne.n	800cf72 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800cf60:	687b      	ldr	r3, [r7, #4]
 800cf62:	2201      	movs	r2, #1
 800cf64:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800cf68:	687b      	ldr	r3, [r7, #4]
 800cf6a:	2201      	movs	r2, #1
 800cf6c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800cf70:	e031      	b.n	800cfd6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800cf72:	2310      	movs	r3, #16
 800cf74:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800cf76:	2310      	movs	r3, #16
 800cf78:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800cf7a:	687b      	ldr	r3, [r7, #4]
 800cf7c:	681b      	ldr	r3, [r3, #0]
 800cf7e:	689b      	ldr	r3, [r3, #8]
 800cf80:	0e5b      	lsrs	r3, r3, #25
 800cf82:	b2db      	uxtb	r3, r3
 800cf84:	f003 0307 	and.w	r3, r3, #7
 800cf88:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800cf8a:	687b      	ldr	r3, [r7, #4]
 800cf8c:	681b      	ldr	r3, [r3, #0]
 800cf8e:	689b      	ldr	r3, [r3, #8]
 800cf90:	0f5b      	lsrs	r3, r3, #29
 800cf92:	b2db      	uxtb	r3, r3
 800cf94:	f003 0307 	and.w	r3, r3, #7
 800cf98:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800cf9a:	7bbb      	ldrb	r3, [r7, #14]
 800cf9c:	7b3a      	ldrb	r2, [r7, #12]
 800cf9e:	4911      	ldr	r1, [pc, #68]	; (800cfe4 <UARTEx_SetNbDataToProcess+0x94>)
 800cfa0:	5c8a      	ldrb	r2, [r1, r2]
 800cfa2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800cfa6:	7b3a      	ldrb	r2, [r7, #12]
 800cfa8:	490f      	ldr	r1, [pc, #60]	; (800cfe8 <UARTEx_SetNbDataToProcess+0x98>)
 800cfaa:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800cfac:	fb93 f3f2 	sdiv	r3, r3, r2
 800cfb0:	b29a      	uxth	r2, r3
 800cfb2:	687b      	ldr	r3, [r7, #4]
 800cfb4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800cfb8:	7bfb      	ldrb	r3, [r7, #15]
 800cfba:	7b7a      	ldrb	r2, [r7, #13]
 800cfbc:	4909      	ldr	r1, [pc, #36]	; (800cfe4 <UARTEx_SetNbDataToProcess+0x94>)
 800cfbe:	5c8a      	ldrb	r2, [r1, r2]
 800cfc0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800cfc4:	7b7a      	ldrb	r2, [r7, #13]
 800cfc6:	4908      	ldr	r1, [pc, #32]	; (800cfe8 <UARTEx_SetNbDataToProcess+0x98>)
 800cfc8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800cfca:	fb93 f3f2 	sdiv	r3, r3, r2
 800cfce:	b29a      	uxth	r2, r3
 800cfd0:	687b      	ldr	r3, [r7, #4]
 800cfd2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800cfd6:	bf00      	nop
 800cfd8:	3714      	adds	r7, #20
 800cfda:	46bd      	mov	sp, r7
 800cfdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfe0:	4770      	bx	lr
 800cfe2:	bf00      	nop
 800cfe4:	08028f60 	.word	0x08028f60
 800cfe8:	08028f68 	.word	0x08028f68

0800cfec <__NVIC_SetPriority>:
{
 800cfec:	b480      	push	{r7}
 800cfee:	b083      	sub	sp, #12
 800cff0:	af00      	add	r7, sp, #0
 800cff2:	4603      	mov	r3, r0
 800cff4:	6039      	str	r1, [r7, #0]
 800cff6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800cff8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800cffc:	2b00      	cmp	r3, #0
 800cffe:	db0a      	blt.n	800d016 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800d000:	683b      	ldr	r3, [r7, #0]
 800d002:	b2da      	uxtb	r2, r3
 800d004:	490c      	ldr	r1, [pc, #48]	; (800d038 <__NVIC_SetPriority+0x4c>)
 800d006:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800d00a:	0112      	lsls	r2, r2, #4
 800d00c:	b2d2      	uxtb	r2, r2
 800d00e:	440b      	add	r3, r1
 800d010:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800d014:	e00a      	b.n	800d02c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800d016:	683b      	ldr	r3, [r7, #0]
 800d018:	b2da      	uxtb	r2, r3
 800d01a:	4908      	ldr	r1, [pc, #32]	; (800d03c <__NVIC_SetPriority+0x50>)
 800d01c:	88fb      	ldrh	r3, [r7, #6]
 800d01e:	f003 030f 	and.w	r3, r3, #15
 800d022:	3b04      	subs	r3, #4
 800d024:	0112      	lsls	r2, r2, #4
 800d026:	b2d2      	uxtb	r2, r2
 800d028:	440b      	add	r3, r1
 800d02a:	761a      	strb	r2, [r3, #24]
}
 800d02c:	bf00      	nop
 800d02e:	370c      	adds	r7, #12
 800d030:	46bd      	mov	sp, r7
 800d032:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d036:	4770      	bx	lr
 800d038:	e000e100 	.word	0xe000e100
 800d03c:	e000ed00 	.word	0xe000ed00

0800d040 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800d040:	b580      	push	{r7, lr}
 800d042:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800d044:	4b05      	ldr	r3, [pc, #20]	; (800d05c <SysTick_Handler+0x1c>)
 800d046:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800d048:	f002 fa9a 	bl	800f580 <xTaskGetSchedulerState>
 800d04c:	4603      	mov	r3, r0
 800d04e:	2b01      	cmp	r3, #1
 800d050:	d001      	beq.n	800d056 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800d052:	f003 f981 	bl	8010358 <xPortSysTickHandler>
  }
}
 800d056:	bf00      	nop
 800d058:	bd80      	pop	{r7, pc}
 800d05a:	bf00      	nop
 800d05c:	e000e010 	.word	0xe000e010

0800d060 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800d060:	b580      	push	{r7, lr}
 800d062:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800d064:	2100      	movs	r1, #0
 800d066:	f06f 0004 	mvn.w	r0, #4
 800d06a:	f7ff ffbf 	bl	800cfec <__NVIC_SetPriority>
#endif
}
 800d06e:	bf00      	nop
 800d070:	bd80      	pop	{r7, pc}
	...

0800d074 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800d074:	b480      	push	{r7}
 800d076:	b083      	sub	sp, #12
 800d078:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d07a:	f3ef 8305 	mrs	r3, IPSR
 800d07e:	603b      	str	r3, [r7, #0]
  return(result);
 800d080:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800d082:	2b00      	cmp	r3, #0
 800d084:	d003      	beq.n	800d08e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800d086:	f06f 0305 	mvn.w	r3, #5
 800d08a:	607b      	str	r3, [r7, #4]
 800d08c:	e00c      	b.n	800d0a8 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800d08e:	4b0a      	ldr	r3, [pc, #40]	; (800d0b8 <osKernelInitialize+0x44>)
 800d090:	681b      	ldr	r3, [r3, #0]
 800d092:	2b00      	cmp	r3, #0
 800d094:	d105      	bne.n	800d0a2 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800d096:	4b08      	ldr	r3, [pc, #32]	; (800d0b8 <osKernelInitialize+0x44>)
 800d098:	2201      	movs	r2, #1
 800d09a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800d09c:	2300      	movs	r3, #0
 800d09e:	607b      	str	r3, [r7, #4]
 800d0a0:	e002      	b.n	800d0a8 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800d0a2:	f04f 33ff 	mov.w	r3, #4294967295
 800d0a6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800d0a8:	687b      	ldr	r3, [r7, #4]
}
 800d0aa:	4618      	mov	r0, r3
 800d0ac:	370c      	adds	r7, #12
 800d0ae:	46bd      	mov	sp, r7
 800d0b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0b4:	4770      	bx	lr
 800d0b6:	bf00      	nop
 800d0b8:	2000083c 	.word	0x2000083c

0800d0bc <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800d0bc:	b580      	push	{r7, lr}
 800d0be:	b082      	sub	sp, #8
 800d0c0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d0c2:	f3ef 8305 	mrs	r3, IPSR
 800d0c6:	603b      	str	r3, [r7, #0]
  return(result);
 800d0c8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800d0ca:	2b00      	cmp	r3, #0
 800d0cc:	d003      	beq.n	800d0d6 <osKernelStart+0x1a>
    stat = osErrorISR;
 800d0ce:	f06f 0305 	mvn.w	r3, #5
 800d0d2:	607b      	str	r3, [r7, #4]
 800d0d4:	e010      	b.n	800d0f8 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800d0d6:	4b0b      	ldr	r3, [pc, #44]	; (800d104 <osKernelStart+0x48>)
 800d0d8:	681b      	ldr	r3, [r3, #0]
 800d0da:	2b01      	cmp	r3, #1
 800d0dc:	d109      	bne.n	800d0f2 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800d0de:	f7ff ffbf 	bl	800d060 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800d0e2:	4b08      	ldr	r3, [pc, #32]	; (800d104 <osKernelStart+0x48>)
 800d0e4:	2202      	movs	r2, #2
 800d0e6:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800d0e8:	f001 fdee 	bl	800ecc8 <vTaskStartScheduler>
      stat = osOK;
 800d0ec:	2300      	movs	r3, #0
 800d0ee:	607b      	str	r3, [r7, #4]
 800d0f0:	e002      	b.n	800d0f8 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800d0f2:	f04f 33ff 	mov.w	r3, #4294967295
 800d0f6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800d0f8:	687b      	ldr	r3, [r7, #4]
}
 800d0fa:	4618      	mov	r0, r3
 800d0fc:	3708      	adds	r7, #8
 800d0fe:	46bd      	mov	sp, r7
 800d100:	bd80      	pop	{r7, pc}
 800d102:	bf00      	nop
 800d104:	2000083c 	.word	0x2000083c

0800d108 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800d108:	b580      	push	{r7, lr}
 800d10a:	b08e      	sub	sp, #56	; 0x38
 800d10c:	af04      	add	r7, sp, #16
 800d10e:	60f8      	str	r0, [r7, #12]
 800d110:	60b9      	str	r1, [r7, #8]
 800d112:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800d114:	2300      	movs	r3, #0
 800d116:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d118:	f3ef 8305 	mrs	r3, IPSR
 800d11c:	617b      	str	r3, [r7, #20]
  return(result);
 800d11e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800d120:	2b00      	cmp	r3, #0
 800d122:	d17e      	bne.n	800d222 <osThreadNew+0x11a>
 800d124:	68fb      	ldr	r3, [r7, #12]
 800d126:	2b00      	cmp	r3, #0
 800d128:	d07b      	beq.n	800d222 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800d12a:	2380      	movs	r3, #128	; 0x80
 800d12c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800d12e:	2318      	movs	r3, #24
 800d130:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800d132:	2300      	movs	r3, #0
 800d134:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800d136:	f04f 33ff 	mov.w	r3, #4294967295
 800d13a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800d13c:	687b      	ldr	r3, [r7, #4]
 800d13e:	2b00      	cmp	r3, #0
 800d140:	d045      	beq.n	800d1ce <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800d142:	687b      	ldr	r3, [r7, #4]
 800d144:	681b      	ldr	r3, [r3, #0]
 800d146:	2b00      	cmp	r3, #0
 800d148:	d002      	beq.n	800d150 <osThreadNew+0x48>
        name = attr->name;
 800d14a:	687b      	ldr	r3, [r7, #4]
 800d14c:	681b      	ldr	r3, [r3, #0]
 800d14e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800d150:	687b      	ldr	r3, [r7, #4]
 800d152:	699b      	ldr	r3, [r3, #24]
 800d154:	2b00      	cmp	r3, #0
 800d156:	d002      	beq.n	800d15e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800d158:	687b      	ldr	r3, [r7, #4]
 800d15a:	699b      	ldr	r3, [r3, #24]
 800d15c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800d15e:	69fb      	ldr	r3, [r7, #28]
 800d160:	2b00      	cmp	r3, #0
 800d162:	d008      	beq.n	800d176 <osThreadNew+0x6e>
 800d164:	69fb      	ldr	r3, [r7, #28]
 800d166:	2b38      	cmp	r3, #56	; 0x38
 800d168:	d805      	bhi.n	800d176 <osThreadNew+0x6e>
 800d16a:	687b      	ldr	r3, [r7, #4]
 800d16c:	685b      	ldr	r3, [r3, #4]
 800d16e:	f003 0301 	and.w	r3, r3, #1
 800d172:	2b00      	cmp	r3, #0
 800d174:	d001      	beq.n	800d17a <osThreadNew+0x72>
        return (NULL);
 800d176:	2300      	movs	r3, #0
 800d178:	e054      	b.n	800d224 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800d17a:	687b      	ldr	r3, [r7, #4]
 800d17c:	695b      	ldr	r3, [r3, #20]
 800d17e:	2b00      	cmp	r3, #0
 800d180:	d003      	beq.n	800d18a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800d182:	687b      	ldr	r3, [r7, #4]
 800d184:	695b      	ldr	r3, [r3, #20]
 800d186:	089b      	lsrs	r3, r3, #2
 800d188:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800d18a:	687b      	ldr	r3, [r7, #4]
 800d18c:	689b      	ldr	r3, [r3, #8]
 800d18e:	2b00      	cmp	r3, #0
 800d190:	d00e      	beq.n	800d1b0 <osThreadNew+0xa8>
 800d192:	687b      	ldr	r3, [r7, #4]
 800d194:	68db      	ldr	r3, [r3, #12]
 800d196:	2bbb      	cmp	r3, #187	; 0xbb
 800d198:	d90a      	bls.n	800d1b0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800d19a:	687b      	ldr	r3, [r7, #4]
 800d19c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800d19e:	2b00      	cmp	r3, #0
 800d1a0:	d006      	beq.n	800d1b0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800d1a2:	687b      	ldr	r3, [r7, #4]
 800d1a4:	695b      	ldr	r3, [r3, #20]
 800d1a6:	2b00      	cmp	r3, #0
 800d1a8:	d002      	beq.n	800d1b0 <osThreadNew+0xa8>
        mem = 1;
 800d1aa:	2301      	movs	r3, #1
 800d1ac:	61bb      	str	r3, [r7, #24]
 800d1ae:	e010      	b.n	800d1d2 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800d1b0:	687b      	ldr	r3, [r7, #4]
 800d1b2:	689b      	ldr	r3, [r3, #8]
 800d1b4:	2b00      	cmp	r3, #0
 800d1b6:	d10c      	bne.n	800d1d2 <osThreadNew+0xca>
 800d1b8:	687b      	ldr	r3, [r7, #4]
 800d1ba:	68db      	ldr	r3, [r3, #12]
 800d1bc:	2b00      	cmp	r3, #0
 800d1be:	d108      	bne.n	800d1d2 <osThreadNew+0xca>
 800d1c0:	687b      	ldr	r3, [r7, #4]
 800d1c2:	691b      	ldr	r3, [r3, #16]
 800d1c4:	2b00      	cmp	r3, #0
 800d1c6:	d104      	bne.n	800d1d2 <osThreadNew+0xca>
          mem = 0;
 800d1c8:	2300      	movs	r3, #0
 800d1ca:	61bb      	str	r3, [r7, #24]
 800d1cc:	e001      	b.n	800d1d2 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800d1ce:	2300      	movs	r3, #0
 800d1d0:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800d1d2:	69bb      	ldr	r3, [r7, #24]
 800d1d4:	2b01      	cmp	r3, #1
 800d1d6:	d110      	bne.n	800d1fa <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800d1d8:	687b      	ldr	r3, [r7, #4]
 800d1da:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800d1dc:	687a      	ldr	r2, [r7, #4]
 800d1de:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800d1e0:	9202      	str	r2, [sp, #8]
 800d1e2:	9301      	str	r3, [sp, #4]
 800d1e4:	69fb      	ldr	r3, [r7, #28]
 800d1e6:	9300      	str	r3, [sp, #0]
 800d1e8:	68bb      	ldr	r3, [r7, #8]
 800d1ea:	6a3a      	ldr	r2, [r7, #32]
 800d1ec:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d1ee:	68f8      	ldr	r0, [r7, #12]
 800d1f0:	f001 fb7e 	bl	800e8f0 <xTaskCreateStatic>
 800d1f4:	4603      	mov	r3, r0
 800d1f6:	613b      	str	r3, [r7, #16]
 800d1f8:	e013      	b.n	800d222 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800d1fa:	69bb      	ldr	r3, [r7, #24]
 800d1fc:	2b00      	cmp	r3, #0
 800d1fe:	d110      	bne.n	800d222 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800d200:	6a3b      	ldr	r3, [r7, #32]
 800d202:	b29a      	uxth	r2, r3
 800d204:	f107 0310 	add.w	r3, r7, #16
 800d208:	9301      	str	r3, [sp, #4]
 800d20a:	69fb      	ldr	r3, [r7, #28]
 800d20c:	9300      	str	r3, [sp, #0]
 800d20e:	68bb      	ldr	r3, [r7, #8]
 800d210:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d212:	68f8      	ldr	r0, [r7, #12]
 800d214:	f001 fbc9 	bl	800e9aa <xTaskCreate>
 800d218:	4603      	mov	r3, r0
 800d21a:	2b01      	cmp	r3, #1
 800d21c:	d001      	beq.n	800d222 <osThreadNew+0x11a>
            hTask = NULL;
 800d21e:	2300      	movs	r3, #0
 800d220:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800d222:	693b      	ldr	r3, [r7, #16]
}
 800d224:	4618      	mov	r0, r3
 800d226:	3728      	adds	r7, #40	; 0x28
 800d228:	46bd      	mov	sp, r7
 800d22a:	bd80      	pop	{r7, pc}

0800d22c <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800d22c:	b580      	push	{r7, lr}
 800d22e:	b084      	sub	sp, #16
 800d230:	af00      	add	r7, sp, #0
 800d232:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d234:	f3ef 8305 	mrs	r3, IPSR
 800d238:	60bb      	str	r3, [r7, #8]
  return(result);
 800d23a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800d23c:	2b00      	cmp	r3, #0
 800d23e:	d003      	beq.n	800d248 <osDelay+0x1c>
    stat = osErrorISR;
 800d240:	f06f 0305 	mvn.w	r3, #5
 800d244:	60fb      	str	r3, [r7, #12]
 800d246:	e007      	b.n	800d258 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800d248:	2300      	movs	r3, #0
 800d24a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800d24c:	687b      	ldr	r3, [r7, #4]
 800d24e:	2b00      	cmp	r3, #0
 800d250:	d002      	beq.n	800d258 <osDelay+0x2c>
      vTaskDelay(ticks);
 800d252:	6878      	ldr	r0, [r7, #4]
 800d254:	f001 fd04 	bl	800ec60 <vTaskDelay>
    }
  }

  return (stat);
 800d258:	68fb      	ldr	r3, [r7, #12]
}
 800d25a:	4618      	mov	r0, r3
 800d25c:	3710      	adds	r7, #16
 800d25e:	46bd      	mov	sp, r7
 800d260:	bd80      	pop	{r7, pc}

0800d262 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800d262:	b580      	push	{r7, lr}
 800d264:	b08a      	sub	sp, #40	; 0x28
 800d266:	af02      	add	r7, sp, #8
 800d268:	60f8      	str	r0, [r7, #12]
 800d26a:	60b9      	str	r1, [r7, #8]
 800d26c:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 800d26e:	2300      	movs	r3, #0
 800d270:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d272:	f3ef 8305 	mrs	r3, IPSR
 800d276:	613b      	str	r3, [r7, #16]
  return(result);
 800d278:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800d27a:	2b00      	cmp	r3, #0
 800d27c:	d175      	bne.n	800d36a <osSemaphoreNew+0x108>
 800d27e:	68fb      	ldr	r3, [r7, #12]
 800d280:	2b00      	cmp	r3, #0
 800d282:	d072      	beq.n	800d36a <osSemaphoreNew+0x108>
 800d284:	68ba      	ldr	r2, [r7, #8]
 800d286:	68fb      	ldr	r3, [r7, #12]
 800d288:	429a      	cmp	r2, r3
 800d28a:	d86e      	bhi.n	800d36a <osSemaphoreNew+0x108>
    mem = -1;
 800d28c:	f04f 33ff 	mov.w	r3, #4294967295
 800d290:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800d292:	687b      	ldr	r3, [r7, #4]
 800d294:	2b00      	cmp	r3, #0
 800d296:	d015      	beq.n	800d2c4 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800d298:	687b      	ldr	r3, [r7, #4]
 800d29a:	689b      	ldr	r3, [r3, #8]
 800d29c:	2b00      	cmp	r3, #0
 800d29e:	d006      	beq.n	800d2ae <osSemaphoreNew+0x4c>
 800d2a0:	687b      	ldr	r3, [r7, #4]
 800d2a2:	68db      	ldr	r3, [r3, #12]
 800d2a4:	2b4f      	cmp	r3, #79	; 0x4f
 800d2a6:	d902      	bls.n	800d2ae <osSemaphoreNew+0x4c>
        mem = 1;
 800d2a8:	2301      	movs	r3, #1
 800d2aa:	61bb      	str	r3, [r7, #24]
 800d2ac:	e00c      	b.n	800d2c8 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800d2ae:	687b      	ldr	r3, [r7, #4]
 800d2b0:	689b      	ldr	r3, [r3, #8]
 800d2b2:	2b00      	cmp	r3, #0
 800d2b4:	d108      	bne.n	800d2c8 <osSemaphoreNew+0x66>
 800d2b6:	687b      	ldr	r3, [r7, #4]
 800d2b8:	68db      	ldr	r3, [r3, #12]
 800d2ba:	2b00      	cmp	r3, #0
 800d2bc:	d104      	bne.n	800d2c8 <osSemaphoreNew+0x66>
          mem = 0;
 800d2be:	2300      	movs	r3, #0
 800d2c0:	61bb      	str	r3, [r7, #24]
 800d2c2:	e001      	b.n	800d2c8 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 800d2c4:	2300      	movs	r3, #0
 800d2c6:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 800d2c8:	69bb      	ldr	r3, [r7, #24]
 800d2ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d2ce:	d04c      	beq.n	800d36a <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 800d2d0:	68fb      	ldr	r3, [r7, #12]
 800d2d2:	2b01      	cmp	r3, #1
 800d2d4:	d128      	bne.n	800d328 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 800d2d6:	69bb      	ldr	r3, [r7, #24]
 800d2d8:	2b01      	cmp	r3, #1
 800d2da:	d10a      	bne.n	800d2f2 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800d2dc:	687b      	ldr	r3, [r7, #4]
 800d2de:	689b      	ldr	r3, [r3, #8]
 800d2e0:	2203      	movs	r2, #3
 800d2e2:	9200      	str	r2, [sp, #0]
 800d2e4:	2200      	movs	r2, #0
 800d2e6:	2100      	movs	r1, #0
 800d2e8:	2001      	movs	r0, #1
 800d2ea:	f000 fb5b 	bl	800d9a4 <xQueueGenericCreateStatic>
 800d2ee:	61f8      	str	r0, [r7, #28]
 800d2f0:	e005      	b.n	800d2fe <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 800d2f2:	2203      	movs	r2, #3
 800d2f4:	2100      	movs	r1, #0
 800d2f6:	2001      	movs	r0, #1
 800d2f8:	f000 fbcc 	bl	800da94 <xQueueGenericCreate>
 800d2fc:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800d2fe:	69fb      	ldr	r3, [r7, #28]
 800d300:	2b00      	cmp	r3, #0
 800d302:	d022      	beq.n	800d34a <osSemaphoreNew+0xe8>
 800d304:	68bb      	ldr	r3, [r7, #8]
 800d306:	2b00      	cmp	r3, #0
 800d308:	d01f      	beq.n	800d34a <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800d30a:	2300      	movs	r3, #0
 800d30c:	2200      	movs	r2, #0
 800d30e:	2100      	movs	r1, #0
 800d310:	69f8      	ldr	r0, [r7, #28]
 800d312:	f000 fc87 	bl	800dc24 <xQueueGenericSend>
 800d316:	4603      	mov	r3, r0
 800d318:	2b01      	cmp	r3, #1
 800d31a:	d016      	beq.n	800d34a <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 800d31c:	69f8      	ldr	r0, [r7, #28]
 800d31e:	f001 f913 	bl	800e548 <vQueueDelete>
            hSemaphore = NULL;
 800d322:	2300      	movs	r3, #0
 800d324:	61fb      	str	r3, [r7, #28]
 800d326:	e010      	b.n	800d34a <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 800d328:	69bb      	ldr	r3, [r7, #24]
 800d32a:	2b01      	cmp	r3, #1
 800d32c:	d108      	bne.n	800d340 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800d32e:	687b      	ldr	r3, [r7, #4]
 800d330:	689b      	ldr	r3, [r3, #8]
 800d332:	461a      	mov	r2, r3
 800d334:	68b9      	ldr	r1, [r7, #8]
 800d336:	68f8      	ldr	r0, [r7, #12]
 800d338:	f000 fc09 	bl	800db4e <xQueueCreateCountingSemaphoreStatic>
 800d33c:	61f8      	str	r0, [r7, #28]
 800d33e:	e004      	b.n	800d34a <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800d340:	68b9      	ldr	r1, [r7, #8]
 800d342:	68f8      	ldr	r0, [r7, #12]
 800d344:	f000 fc3a 	bl	800dbbc <xQueueCreateCountingSemaphore>
 800d348:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800d34a:	69fb      	ldr	r3, [r7, #28]
 800d34c:	2b00      	cmp	r3, #0
 800d34e:	d00c      	beq.n	800d36a <osSemaphoreNew+0x108>
        if (attr != NULL) {
 800d350:	687b      	ldr	r3, [r7, #4]
 800d352:	2b00      	cmp	r3, #0
 800d354:	d003      	beq.n	800d35e <osSemaphoreNew+0xfc>
          name = attr->name;
 800d356:	687b      	ldr	r3, [r7, #4]
 800d358:	681b      	ldr	r3, [r3, #0]
 800d35a:	617b      	str	r3, [r7, #20]
 800d35c:	e001      	b.n	800d362 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 800d35e:	2300      	movs	r3, #0
 800d360:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800d362:	6979      	ldr	r1, [r7, #20]
 800d364:	69f8      	ldr	r0, [r7, #28]
 800d366:	f001 fa3b 	bl	800e7e0 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800d36a:	69fb      	ldr	r3, [r7, #28]
}
 800d36c:	4618      	mov	r0, r3
 800d36e:	3720      	adds	r7, #32
 800d370:	46bd      	mov	sp, r7
 800d372:	bd80      	pop	{r7, pc}

0800d374 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 800d374:	b580      	push	{r7, lr}
 800d376:	b086      	sub	sp, #24
 800d378:	af00      	add	r7, sp, #0
 800d37a:	6078      	str	r0, [r7, #4]
 800d37c:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800d37e:	687b      	ldr	r3, [r7, #4]
 800d380:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800d382:	2300      	movs	r3, #0
 800d384:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800d386:	693b      	ldr	r3, [r7, #16]
 800d388:	2b00      	cmp	r3, #0
 800d38a:	d103      	bne.n	800d394 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 800d38c:	f06f 0303 	mvn.w	r3, #3
 800d390:	617b      	str	r3, [r7, #20]
 800d392:	e039      	b.n	800d408 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d394:	f3ef 8305 	mrs	r3, IPSR
 800d398:	60fb      	str	r3, [r7, #12]
  return(result);
 800d39a:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800d39c:	2b00      	cmp	r3, #0
 800d39e:	d022      	beq.n	800d3e6 <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 800d3a0:	683b      	ldr	r3, [r7, #0]
 800d3a2:	2b00      	cmp	r3, #0
 800d3a4:	d003      	beq.n	800d3ae <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 800d3a6:	f06f 0303 	mvn.w	r3, #3
 800d3aa:	617b      	str	r3, [r7, #20]
 800d3ac:	e02c      	b.n	800d408 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 800d3ae:	2300      	movs	r3, #0
 800d3b0:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800d3b2:	f107 0308 	add.w	r3, r7, #8
 800d3b6:	461a      	mov	r2, r3
 800d3b8:	2100      	movs	r1, #0
 800d3ba:	6938      	ldr	r0, [r7, #16]
 800d3bc:	f001 f844 	bl	800e448 <xQueueReceiveFromISR>
 800d3c0:	4603      	mov	r3, r0
 800d3c2:	2b01      	cmp	r3, #1
 800d3c4:	d003      	beq.n	800d3ce <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 800d3c6:	f06f 0302 	mvn.w	r3, #2
 800d3ca:	617b      	str	r3, [r7, #20]
 800d3cc:	e01c      	b.n	800d408 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 800d3ce:	68bb      	ldr	r3, [r7, #8]
 800d3d0:	2b00      	cmp	r3, #0
 800d3d2:	d019      	beq.n	800d408 <osSemaphoreAcquire+0x94>
 800d3d4:	4b0f      	ldr	r3, [pc, #60]	; (800d414 <osSemaphoreAcquire+0xa0>)
 800d3d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d3da:	601a      	str	r2, [r3, #0]
 800d3dc:	f3bf 8f4f 	dsb	sy
 800d3e0:	f3bf 8f6f 	isb	sy
 800d3e4:	e010      	b.n	800d408 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800d3e6:	6839      	ldr	r1, [r7, #0]
 800d3e8:	6938      	ldr	r0, [r7, #16]
 800d3ea:	f000 ff21 	bl	800e230 <xQueueSemaphoreTake>
 800d3ee:	4603      	mov	r3, r0
 800d3f0:	2b01      	cmp	r3, #1
 800d3f2:	d009      	beq.n	800d408 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 800d3f4:	683b      	ldr	r3, [r7, #0]
 800d3f6:	2b00      	cmp	r3, #0
 800d3f8:	d003      	beq.n	800d402 <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 800d3fa:	f06f 0301 	mvn.w	r3, #1
 800d3fe:	617b      	str	r3, [r7, #20]
 800d400:	e002      	b.n	800d408 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 800d402:	f06f 0302 	mvn.w	r3, #2
 800d406:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800d408:	697b      	ldr	r3, [r7, #20]
}
 800d40a:	4618      	mov	r0, r3
 800d40c:	3718      	adds	r7, #24
 800d40e:	46bd      	mov	sp, r7
 800d410:	bd80      	pop	{r7, pc}
 800d412:	bf00      	nop
 800d414:	e000ed04 	.word	0xe000ed04

0800d418 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 800d418:	b580      	push	{r7, lr}
 800d41a:	b086      	sub	sp, #24
 800d41c:	af00      	add	r7, sp, #0
 800d41e:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800d420:	687b      	ldr	r3, [r7, #4]
 800d422:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800d424:	2300      	movs	r3, #0
 800d426:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800d428:	693b      	ldr	r3, [r7, #16]
 800d42a:	2b00      	cmp	r3, #0
 800d42c:	d103      	bne.n	800d436 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 800d42e:	f06f 0303 	mvn.w	r3, #3
 800d432:	617b      	str	r3, [r7, #20]
 800d434:	e02c      	b.n	800d490 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d436:	f3ef 8305 	mrs	r3, IPSR
 800d43a:	60fb      	str	r3, [r7, #12]
  return(result);
 800d43c:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800d43e:	2b00      	cmp	r3, #0
 800d440:	d01a      	beq.n	800d478 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 800d442:	2300      	movs	r3, #0
 800d444:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800d446:	f107 0308 	add.w	r3, r7, #8
 800d44a:	4619      	mov	r1, r3
 800d44c:	6938      	ldr	r0, [r7, #16]
 800d44e:	f000 fd82 	bl	800df56 <xQueueGiveFromISR>
 800d452:	4603      	mov	r3, r0
 800d454:	2b01      	cmp	r3, #1
 800d456:	d003      	beq.n	800d460 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 800d458:	f06f 0302 	mvn.w	r3, #2
 800d45c:	617b      	str	r3, [r7, #20]
 800d45e:	e017      	b.n	800d490 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 800d460:	68bb      	ldr	r3, [r7, #8]
 800d462:	2b00      	cmp	r3, #0
 800d464:	d014      	beq.n	800d490 <osSemaphoreRelease+0x78>
 800d466:	4b0d      	ldr	r3, [pc, #52]	; (800d49c <osSemaphoreRelease+0x84>)
 800d468:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d46c:	601a      	str	r2, [r3, #0]
 800d46e:	f3bf 8f4f 	dsb	sy
 800d472:	f3bf 8f6f 	isb	sy
 800d476:	e00b      	b.n	800d490 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800d478:	2300      	movs	r3, #0
 800d47a:	2200      	movs	r2, #0
 800d47c:	2100      	movs	r1, #0
 800d47e:	6938      	ldr	r0, [r7, #16]
 800d480:	f000 fbd0 	bl	800dc24 <xQueueGenericSend>
 800d484:	4603      	mov	r3, r0
 800d486:	2b01      	cmp	r3, #1
 800d488:	d002      	beq.n	800d490 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 800d48a:	f06f 0302 	mvn.w	r3, #2
 800d48e:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 800d490:	697b      	ldr	r3, [r7, #20]
}
 800d492:	4618      	mov	r0, r3
 800d494:	3718      	adds	r7, #24
 800d496:	46bd      	mov	sp, r7
 800d498:	bd80      	pop	{r7, pc}
 800d49a:	bf00      	nop
 800d49c:	e000ed04 	.word	0xe000ed04

0800d4a0 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800d4a0:	b580      	push	{r7, lr}
 800d4a2:	b08a      	sub	sp, #40	; 0x28
 800d4a4:	af02      	add	r7, sp, #8
 800d4a6:	60f8      	str	r0, [r7, #12]
 800d4a8:	60b9      	str	r1, [r7, #8]
 800d4aa:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800d4ac:	2300      	movs	r3, #0
 800d4ae:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d4b0:	f3ef 8305 	mrs	r3, IPSR
 800d4b4:	613b      	str	r3, [r7, #16]
  return(result);
 800d4b6:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800d4b8:	2b00      	cmp	r3, #0
 800d4ba:	d15f      	bne.n	800d57c <osMessageQueueNew+0xdc>
 800d4bc:	68fb      	ldr	r3, [r7, #12]
 800d4be:	2b00      	cmp	r3, #0
 800d4c0:	d05c      	beq.n	800d57c <osMessageQueueNew+0xdc>
 800d4c2:	68bb      	ldr	r3, [r7, #8]
 800d4c4:	2b00      	cmp	r3, #0
 800d4c6:	d059      	beq.n	800d57c <osMessageQueueNew+0xdc>
    mem = -1;
 800d4c8:	f04f 33ff 	mov.w	r3, #4294967295
 800d4cc:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800d4ce:	687b      	ldr	r3, [r7, #4]
 800d4d0:	2b00      	cmp	r3, #0
 800d4d2:	d029      	beq.n	800d528 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800d4d4:	687b      	ldr	r3, [r7, #4]
 800d4d6:	689b      	ldr	r3, [r3, #8]
 800d4d8:	2b00      	cmp	r3, #0
 800d4da:	d012      	beq.n	800d502 <osMessageQueueNew+0x62>
 800d4dc:	687b      	ldr	r3, [r7, #4]
 800d4de:	68db      	ldr	r3, [r3, #12]
 800d4e0:	2b4f      	cmp	r3, #79	; 0x4f
 800d4e2:	d90e      	bls.n	800d502 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800d4e4:	687b      	ldr	r3, [r7, #4]
 800d4e6:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800d4e8:	2b00      	cmp	r3, #0
 800d4ea:	d00a      	beq.n	800d502 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800d4ec:	687b      	ldr	r3, [r7, #4]
 800d4ee:	695a      	ldr	r2, [r3, #20]
 800d4f0:	68fb      	ldr	r3, [r7, #12]
 800d4f2:	68b9      	ldr	r1, [r7, #8]
 800d4f4:	fb01 f303 	mul.w	r3, r1, r3
 800d4f8:	429a      	cmp	r2, r3
 800d4fa:	d302      	bcc.n	800d502 <osMessageQueueNew+0x62>
        mem = 1;
 800d4fc:	2301      	movs	r3, #1
 800d4fe:	61bb      	str	r3, [r7, #24]
 800d500:	e014      	b.n	800d52c <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800d502:	687b      	ldr	r3, [r7, #4]
 800d504:	689b      	ldr	r3, [r3, #8]
 800d506:	2b00      	cmp	r3, #0
 800d508:	d110      	bne.n	800d52c <osMessageQueueNew+0x8c>
 800d50a:	687b      	ldr	r3, [r7, #4]
 800d50c:	68db      	ldr	r3, [r3, #12]
 800d50e:	2b00      	cmp	r3, #0
 800d510:	d10c      	bne.n	800d52c <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800d512:	687b      	ldr	r3, [r7, #4]
 800d514:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800d516:	2b00      	cmp	r3, #0
 800d518:	d108      	bne.n	800d52c <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800d51a:	687b      	ldr	r3, [r7, #4]
 800d51c:	695b      	ldr	r3, [r3, #20]
 800d51e:	2b00      	cmp	r3, #0
 800d520:	d104      	bne.n	800d52c <osMessageQueueNew+0x8c>
          mem = 0;
 800d522:	2300      	movs	r3, #0
 800d524:	61bb      	str	r3, [r7, #24]
 800d526:	e001      	b.n	800d52c <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 800d528:	2300      	movs	r3, #0
 800d52a:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800d52c:	69bb      	ldr	r3, [r7, #24]
 800d52e:	2b01      	cmp	r3, #1
 800d530:	d10b      	bne.n	800d54a <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800d532:	687b      	ldr	r3, [r7, #4]
 800d534:	691a      	ldr	r2, [r3, #16]
 800d536:	687b      	ldr	r3, [r7, #4]
 800d538:	689b      	ldr	r3, [r3, #8]
 800d53a:	2100      	movs	r1, #0
 800d53c:	9100      	str	r1, [sp, #0]
 800d53e:	68b9      	ldr	r1, [r7, #8]
 800d540:	68f8      	ldr	r0, [r7, #12]
 800d542:	f000 fa2f 	bl	800d9a4 <xQueueGenericCreateStatic>
 800d546:	61f8      	str	r0, [r7, #28]
 800d548:	e008      	b.n	800d55c <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 800d54a:	69bb      	ldr	r3, [r7, #24]
 800d54c:	2b00      	cmp	r3, #0
 800d54e:	d105      	bne.n	800d55c <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800d550:	2200      	movs	r2, #0
 800d552:	68b9      	ldr	r1, [r7, #8]
 800d554:	68f8      	ldr	r0, [r7, #12]
 800d556:	f000 fa9d 	bl	800da94 <xQueueGenericCreate>
 800d55a:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800d55c:	69fb      	ldr	r3, [r7, #28]
 800d55e:	2b00      	cmp	r3, #0
 800d560:	d00c      	beq.n	800d57c <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 800d562:	687b      	ldr	r3, [r7, #4]
 800d564:	2b00      	cmp	r3, #0
 800d566:	d003      	beq.n	800d570 <osMessageQueueNew+0xd0>
        name = attr->name;
 800d568:	687b      	ldr	r3, [r7, #4]
 800d56a:	681b      	ldr	r3, [r3, #0]
 800d56c:	617b      	str	r3, [r7, #20]
 800d56e:	e001      	b.n	800d574 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 800d570:	2300      	movs	r3, #0
 800d572:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 800d574:	6979      	ldr	r1, [r7, #20]
 800d576:	69f8      	ldr	r0, [r7, #28]
 800d578:	f001 f932 	bl	800e7e0 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800d57c:	69fb      	ldr	r3, [r7, #28]
}
 800d57e:	4618      	mov	r0, r3
 800d580:	3720      	adds	r7, #32
 800d582:	46bd      	mov	sp, r7
 800d584:	bd80      	pop	{r7, pc}
	...

0800d588 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800d588:	b580      	push	{r7, lr}
 800d58a:	b088      	sub	sp, #32
 800d58c:	af00      	add	r7, sp, #0
 800d58e:	60f8      	str	r0, [r7, #12]
 800d590:	60b9      	str	r1, [r7, #8]
 800d592:	603b      	str	r3, [r7, #0]
 800d594:	4613      	mov	r3, r2
 800d596:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800d598:	68fb      	ldr	r3, [r7, #12]
 800d59a:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800d59c:	2300      	movs	r3, #0
 800d59e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d5a0:	f3ef 8305 	mrs	r3, IPSR
 800d5a4:	617b      	str	r3, [r7, #20]
  return(result);
 800d5a6:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800d5a8:	2b00      	cmp	r3, #0
 800d5aa:	d028      	beq.n	800d5fe <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800d5ac:	69bb      	ldr	r3, [r7, #24]
 800d5ae:	2b00      	cmp	r3, #0
 800d5b0:	d005      	beq.n	800d5be <osMessageQueuePut+0x36>
 800d5b2:	68bb      	ldr	r3, [r7, #8]
 800d5b4:	2b00      	cmp	r3, #0
 800d5b6:	d002      	beq.n	800d5be <osMessageQueuePut+0x36>
 800d5b8:	683b      	ldr	r3, [r7, #0]
 800d5ba:	2b00      	cmp	r3, #0
 800d5bc:	d003      	beq.n	800d5c6 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 800d5be:	f06f 0303 	mvn.w	r3, #3
 800d5c2:	61fb      	str	r3, [r7, #28]
 800d5c4:	e038      	b.n	800d638 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 800d5c6:	2300      	movs	r3, #0
 800d5c8:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800d5ca:	f107 0210 	add.w	r2, r7, #16
 800d5ce:	2300      	movs	r3, #0
 800d5d0:	68b9      	ldr	r1, [r7, #8]
 800d5d2:	69b8      	ldr	r0, [r7, #24]
 800d5d4:	f000 fc24 	bl	800de20 <xQueueGenericSendFromISR>
 800d5d8:	4603      	mov	r3, r0
 800d5da:	2b01      	cmp	r3, #1
 800d5dc:	d003      	beq.n	800d5e6 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 800d5de:	f06f 0302 	mvn.w	r3, #2
 800d5e2:	61fb      	str	r3, [r7, #28]
 800d5e4:	e028      	b.n	800d638 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 800d5e6:	693b      	ldr	r3, [r7, #16]
 800d5e8:	2b00      	cmp	r3, #0
 800d5ea:	d025      	beq.n	800d638 <osMessageQueuePut+0xb0>
 800d5ec:	4b15      	ldr	r3, [pc, #84]	; (800d644 <osMessageQueuePut+0xbc>)
 800d5ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d5f2:	601a      	str	r2, [r3, #0]
 800d5f4:	f3bf 8f4f 	dsb	sy
 800d5f8:	f3bf 8f6f 	isb	sy
 800d5fc:	e01c      	b.n	800d638 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800d5fe:	69bb      	ldr	r3, [r7, #24]
 800d600:	2b00      	cmp	r3, #0
 800d602:	d002      	beq.n	800d60a <osMessageQueuePut+0x82>
 800d604:	68bb      	ldr	r3, [r7, #8]
 800d606:	2b00      	cmp	r3, #0
 800d608:	d103      	bne.n	800d612 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 800d60a:	f06f 0303 	mvn.w	r3, #3
 800d60e:	61fb      	str	r3, [r7, #28]
 800d610:	e012      	b.n	800d638 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800d612:	2300      	movs	r3, #0
 800d614:	683a      	ldr	r2, [r7, #0]
 800d616:	68b9      	ldr	r1, [r7, #8]
 800d618:	69b8      	ldr	r0, [r7, #24]
 800d61a:	f000 fb03 	bl	800dc24 <xQueueGenericSend>
 800d61e:	4603      	mov	r3, r0
 800d620:	2b01      	cmp	r3, #1
 800d622:	d009      	beq.n	800d638 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 800d624:	683b      	ldr	r3, [r7, #0]
 800d626:	2b00      	cmp	r3, #0
 800d628:	d003      	beq.n	800d632 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 800d62a:	f06f 0301 	mvn.w	r3, #1
 800d62e:	61fb      	str	r3, [r7, #28]
 800d630:	e002      	b.n	800d638 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 800d632:	f06f 0302 	mvn.w	r3, #2
 800d636:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800d638:	69fb      	ldr	r3, [r7, #28]
}
 800d63a:	4618      	mov	r0, r3
 800d63c:	3720      	adds	r7, #32
 800d63e:	46bd      	mov	sp, r7
 800d640:	bd80      	pop	{r7, pc}
 800d642:	bf00      	nop
 800d644:	e000ed04 	.word	0xe000ed04

0800d648 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800d648:	b580      	push	{r7, lr}
 800d64a:	b088      	sub	sp, #32
 800d64c:	af00      	add	r7, sp, #0
 800d64e:	60f8      	str	r0, [r7, #12]
 800d650:	60b9      	str	r1, [r7, #8]
 800d652:	607a      	str	r2, [r7, #4]
 800d654:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800d656:	68fb      	ldr	r3, [r7, #12]
 800d658:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800d65a:	2300      	movs	r3, #0
 800d65c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d65e:	f3ef 8305 	mrs	r3, IPSR
 800d662:	617b      	str	r3, [r7, #20]
  return(result);
 800d664:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800d666:	2b00      	cmp	r3, #0
 800d668:	d028      	beq.n	800d6bc <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800d66a:	69bb      	ldr	r3, [r7, #24]
 800d66c:	2b00      	cmp	r3, #0
 800d66e:	d005      	beq.n	800d67c <osMessageQueueGet+0x34>
 800d670:	68bb      	ldr	r3, [r7, #8]
 800d672:	2b00      	cmp	r3, #0
 800d674:	d002      	beq.n	800d67c <osMessageQueueGet+0x34>
 800d676:	683b      	ldr	r3, [r7, #0]
 800d678:	2b00      	cmp	r3, #0
 800d67a:	d003      	beq.n	800d684 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 800d67c:	f06f 0303 	mvn.w	r3, #3
 800d680:	61fb      	str	r3, [r7, #28]
 800d682:	e037      	b.n	800d6f4 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 800d684:	2300      	movs	r3, #0
 800d686:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800d688:	f107 0310 	add.w	r3, r7, #16
 800d68c:	461a      	mov	r2, r3
 800d68e:	68b9      	ldr	r1, [r7, #8]
 800d690:	69b8      	ldr	r0, [r7, #24]
 800d692:	f000 fed9 	bl	800e448 <xQueueReceiveFromISR>
 800d696:	4603      	mov	r3, r0
 800d698:	2b01      	cmp	r3, #1
 800d69a:	d003      	beq.n	800d6a4 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 800d69c:	f06f 0302 	mvn.w	r3, #2
 800d6a0:	61fb      	str	r3, [r7, #28]
 800d6a2:	e027      	b.n	800d6f4 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 800d6a4:	693b      	ldr	r3, [r7, #16]
 800d6a6:	2b00      	cmp	r3, #0
 800d6a8:	d024      	beq.n	800d6f4 <osMessageQueueGet+0xac>
 800d6aa:	4b15      	ldr	r3, [pc, #84]	; (800d700 <osMessageQueueGet+0xb8>)
 800d6ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d6b0:	601a      	str	r2, [r3, #0]
 800d6b2:	f3bf 8f4f 	dsb	sy
 800d6b6:	f3bf 8f6f 	isb	sy
 800d6ba:	e01b      	b.n	800d6f4 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800d6bc:	69bb      	ldr	r3, [r7, #24]
 800d6be:	2b00      	cmp	r3, #0
 800d6c0:	d002      	beq.n	800d6c8 <osMessageQueueGet+0x80>
 800d6c2:	68bb      	ldr	r3, [r7, #8]
 800d6c4:	2b00      	cmp	r3, #0
 800d6c6:	d103      	bne.n	800d6d0 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 800d6c8:	f06f 0303 	mvn.w	r3, #3
 800d6cc:	61fb      	str	r3, [r7, #28]
 800d6ce:	e011      	b.n	800d6f4 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800d6d0:	683a      	ldr	r2, [r7, #0]
 800d6d2:	68b9      	ldr	r1, [r7, #8]
 800d6d4:	69b8      	ldr	r0, [r7, #24]
 800d6d6:	f000 fccb 	bl	800e070 <xQueueReceive>
 800d6da:	4603      	mov	r3, r0
 800d6dc:	2b01      	cmp	r3, #1
 800d6de:	d009      	beq.n	800d6f4 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 800d6e0:	683b      	ldr	r3, [r7, #0]
 800d6e2:	2b00      	cmp	r3, #0
 800d6e4:	d003      	beq.n	800d6ee <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 800d6e6:	f06f 0301 	mvn.w	r3, #1
 800d6ea:	61fb      	str	r3, [r7, #28]
 800d6ec:	e002      	b.n	800d6f4 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 800d6ee:	f06f 0302 	mvn.w	r3, #2
 800d6f2:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800d6f4:	69fb      	ldr	r3, [r7, #28]
}
 800d6f6:	4618      	mov	r0, r3
 800d6f8:	3720      	adds	r7, #32
 800d6fa:	46bd      	mov	sp, r7
 800d6fc:	bd80      	pop	{r7, pc}
 800d6fe:	bf00      	nop
 800d700:	e000ed04 	.word	0xe000ed04

0800d704 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800d704:	b480      	push	{r7}
 800d706:	b085      	sub	sp, #20
 800d708:	af00      	add	r7, sp, #0
 800d70a:	60f8      	str	r0, [r7, #12]
 800d70c:	60b9      	str	r1, [r7, #8]
 800d70e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800d710:	68fb      	ldr	r3, [r7, #12]
 800d712:	4a07      	ldr	r2, [pc, #28]	; (800d730 <vApplicationGetIdleTaskMemory+0x2c>)
 800d714:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800d716:	68bb      	ldr	r3, [r7, #8]
 800d718:	4a06      	ldr	r2, [pc, #24]	; (800d734 <vApplicationGetIdleTaskMemory+0x30>)
 800d71a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800d71c:	687b      	ldr	r3, [r7, #4]
 800d71e:	2280      	movs	r2, #128	; 0x80
 800d720:	601a      	str	r2, [r3, #0]
}
 800d722:	bf00      	nop
 800d724:	3714      	adds	r7, #20
 800d726:	46bd      	mov	sp, r7
 800d728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d72c:	4770      	bx	lr
 800d72e:	bf00      	nop
 800d730:	20000840 	.word	0x20000840
 800d734:	200008fc 	.word	0x200008fc

0800d738 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800d738:	b480      	push	{r7}
 800d73a:	b085      	sub	sp, #20
 800d73c:	af00      	add	r7, sp, #0
 800d73e:	60f8      	str	r0, [r7, #12]
 800d740:	60b9      	str	r1, [r7, #8]
 800d742:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800d744:	68fb      	ldr	r3, [r7, #12]
 800d746:	4a07      	ldr	r2, [pc, #28]	; (800d764 <vApplicationGetTimerTaskMemory+0x2c>)
 800d748:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800d74a:	68bb      	ldr	r3, [r7, #8]
 800d74c:	4a06      	ldr	r2, [pc, #24]	; (800d768 <vApplicationGetTimerTaskMemory+0x30>)
 800d74e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800d750:	687b      	ldr	r3, [r7, #4]
 800d752:	f44f 7280 	mov.w	r2, #256	; 0x100
 800d756:	601a      	str	r2, [r3, #0]
}
 800d758:	bf00      	nop
 800d75a:	3714      	adds	r7, #20
 800d75c:	46bd      	mov	sp, r7
 800d75e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d762:	4770      	bx	lr
 800d764:	20000afc 	.word	0x20000afc
 800d768:	20000bb8 	.word	0x20000bb8

0800d76c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800d76c:	b480      	push	{r7}
 800d76e:	b083      	sub	sp, #12
 800d770:	af00      	add	r7, sp, #0
 800d772:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d774:	687b      	ldr	r3, [r7, #4]
 800d776:	f103 0208 	add.w	r2, r3, #8
 800d77a:	687b      	ldr	r3, [r7, #4]
 800d77c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800d77e:	687b      	ldr	r3, [r7, #4]
 800d780:	f04f 32ff 	mov.w	r2, #4294967295
 800d784:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d786:	687b      	ldr	r3, [r7, #4]
 800d788:	f103 0208 	add.w	r2, r3, #8
 800d78c:	687b      	ldr	r3, [r7, #4]
 800d78e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d790:	687b      	ldr	r3, [r7, #4]
 800d792:	f103 0208 	add.w	r2, r3, #8
 800d796:	687b      	ldr	r3, [r7, #4]
 800d798:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800d79a:	687b      	ldr	r3, [r7, #4]
 800d79c:	2200      	movs	r2, #0
 800d79e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800d7a0:	bf00      	nop
 800d7a2:	370c      	adds	r7, #12
 800d7a4:	46bd      	mov	sp, r7
 800d7a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7aa:	4770      	bx	lr

0800d7ac <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800d7ac:	b480      	push	{r7}
 800d7ae:	b083      	sub	sp, #12
 800d7b0:	af00      	add	r7, sp, #0
 800d7b2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800d7b4:	687b      	ldr	r3, [r7, #4]
 800d7b6:	2200      	movs	r2, #0
 800d7b8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800d7ba:	bf00      	nop
 800d7bc:	370c      	adds	r7, #12
 800d7be:	46bd      	mov	sp, r7
 800d7c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7c4:	4770      	bx	lr

0800d7c6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800d7c6:	b480      	push	{r7}
 800d7c8:	b085      	sub	sp, #20
 800d7ca:	af00      	add	r7, sp, #0
 800d7cc:	6078      	str	r0, [r7, #4]
 800d7ce:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800d7d0:	687b      	ldr	r3, [r7, #4]
 800d7d2:	685b      	ldr	r3, [r3, #4]
 800d7d4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800d7d6:	683b      	ldr	r3, [r7, #0]
 800d7d8:	68fa      	ldr	r2, [r7, #12]
 800d7da:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800d7dc:	68fb      	ldr	r3, [r7, #12]
 800d7de:	689a      	ldr	r2, [r3, #8]
 800d7e0:	683b      	ldr	r3, [r7, #0]
 800d7e2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800d7e4:	68fb      	ldr	r3, [r7, #12]
 800d7e6:	689b      	ldr	r3, [r3, #8]
 800d7e8:	683a      	ldr	r2, [r7, #0]
 800d7ea:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800d7ec:	68fb      	ldr	r3, [r7, #12]
 800d7ee:	683a      	ldr	r2, [r7, #0]
 800d7f0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800d7f2:	683b      	ldr	r3, [r7, #0]
 800d7f4:	687a      	ldr	r2, [r7, #4]
 800d7f6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800d7f8:	687b      	ldr	r3, [r7, #4]
 800d7fa:	681b      	ldr	r3, [r3, #0]
 800d7fc:	1c5a      	adds	r2, r3, #1
 800d7fe:	687b      	ldr	r3, [r7, #4]
 800d800:	601a      	str	r2, [r3, #0]
}
 800d802:	bf00      	nop
 800d804:	3714      	adds	r7, #20
 800d806:	46bd      	mov	sp, r7
 800d808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d80c:	4770      	bx	lr

0800d80e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800d80e:	b480      	push	{r7}
 800d810:	b085      	sub	sp, #20
 800d812:	af00      	add	r7, sp, #0
 800d814:	6078      	str	r0, [r7, #4]
 800d816:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800d818:	683b      	ldr	r3, [r7, #0]
 800d81a:	681b      	ldr	r3, [r3, #0]
 800d81c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800d81e:	68bb      	ldr	r3, [r7, #8]
 800d820:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d824:	d103      	bne.n	800d82e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800d826:	687b      	ldr	r3, [r7, #4]
 800d828:	691b      	ldr	r3, [r3, #16]
 800d82a:	60fb      	str	r3, [r7, #12]
 800d82c:	e00c      	b.n	800d848 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800d82e:	687b      	ldr	r3, [r7, #4]
 800d830:	3308      	adds	r3, #8
 800d832:	60fb      	str	r3, [r7, #12]
 800d834:	e002      	b.n	800d83c <vListInsert+0x2e>
 800d836:	68fb      	ldr	r3, [r7, #12]
 800d838:	685b      	ldr	r3, [r3, #4]
 800d83a:	60fb      	str	r3, [r7, #12]
 800d83c:	68fb      	ldr	r3, [r7, #12]
 800d83e:	685b      	ldr	r3, [r3, #4]
 800d840:	681b      	ldr	r3, [r3, #0]
 800d842:	68ba      	ldr	r2, [r7, #8]
 800d844:	429a      	cmp	r2, r3
 800d846:	d2f6      	bcs.n	800d836 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800d848:	68fb      	ldr	r3, [r7, #12]
 800d84a:	685a      	ldr	r2, [r3, #4]
 800d84c:	683b      	ldr	r3, [r7, #0]
 800d84e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800d850:	683b      	ldr	r3, [r7, #0]
 800d852:	685b      	ldr	r3, [r3, #4]
 800d854:	683a      	ldr	r2, [r7, #0]
 800d856:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800d858:	683b      	ldr	r3, [r7, #0]
 800d85a:	68fa      	ldr	r2, [r7, #12]
 800d85c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800d85e:	68fb      	ldr	r3, [r7, #12]
 800d860:	683a      	ldr	r2, [r7, #0]
 800d862:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800d864:	683b      	ldr	r3, [r7, #0]
 800d866:	687a      	ldr	r2, [r7, #4]
 800d868:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800d86a:	687b      	ldr	r3, [r7, #4]
 800d86c:	681b      	ldr	r3, [r3, #0]
 800d86e:	1c5a      	adds	r2, r3, #1
 800d870:	687b      	ldr	r3, [r7, #4]
 800d872:	601a      	str	r2, [r3, #0]
}
 800d874:	bf00      	nop
 800d876:	3714      	adds	r7, #20
 800d878:	46bd      	mov	sp, r7
 800d87a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d87e:	4770      	bx	lr

0800d880 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800d880:	b480      	push	{r7}
 800d882:	b085      	sub	sp, #20
 800d884:	af00      	add	r7, sp, #0
 800d886:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800d888:	687b      	ldr	r3, [r7, #4]
 800d88a:	691b      	ldr	r3, [r3, #16]
 800d88c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800d88e:	687b      	ldr	r3, [r7, #4]
 800d890:	685b      	ldr	r3, [r3, #4]
 800d892:	687a      	ldr	r2, [r7, #4]
 800d894:	6892      	ldr	r2, [r2, #8]
 800d896:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800d898:	687b      	ldr	r3, [r7, #4]
 800d89a:	689b      	ldr	r3, [r3, #8]
 800d89c:	687a      	ldr	r2, [r7, #4]
 800d89e:	6852      	ldr	r2, [r2, #4]
 800d8a0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800d8a2:	68fb      	ldr	r3, [r7, #12]
 800d8a4:	685b      	ldr	r3, [r3, #4]
 800d8a6:	687a      	ldr	r2, [r7, #4]
 800d8a8:	429a      	cmp	r2, r3
 800d8aa:	d103      	bne.n	800d8b4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800d8ac:	687b      	ldr	r3, [r7, #4]
 800d8ae:	689a      	ldr	r2, [r3, #8]
 800d8b0:	68fb      	ldr	r3, [r7, #12]
 800d8b2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800d8b4:	687b      	ldr	r3, [r7, #4]
 800d8b6:	2200      	movs	r2, #0
 800d8b8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800d8ba:	68fb      	ldr	r3, [r7, #12]
 800d8bc:	681b      	ldr	r3, [r3, #0]
 800d8be:	1e5a      	subs	r2, r3, #1
 800d8c0:	68fb      	ldr	r3, [r7, #12]
 800d8c2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800d8c4:	68fb      	ldr	r3, [r7, #12]
 800d8c6:	681b      	ldr	r3, [r3, #0]
}
 800d8c8:	4618      	mov	r0, r3
 800d8ca:	3714      	adds	r7, #20
 800d8cc:	46bd      	mov	sp, r7
 800d8ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8d2:	4770      	bx	lr

0800d8d4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800d8d4:	b580      	push	{r7, lr}
 800d8d6:	b084      	sub	sp, #16
 800d8d8:	af00      	add	r7, sp, #0
 800d8da:	6078      	str	r0, [r7, #4]
 800d8dc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800d8de:	687b      	ldr	r3, [r7, #4]
 800d8e0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800d8e2:	68fb      	ldr	r3, [r7, #12]
 800d8e4:	2b00      	cmp	r3, #0
 800d8e6:	d10a      	bne.n	800d8fe <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800d8e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d8ec:	f383 8811 	msr	BASEPRI, r3
 800d8f0:	f3bf 8f6f 	isb	sy
 800d8f4:	f3bf 8f4f 	dsb	sy
 800d8f8:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800d8fa:	bf00      	nop
 800d8fc:	e7fe      	b.n	800d8fc <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800d8fe:	f002 fc99 	bl	8010234 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d902:	68fb      	ldr	r3, [r7, #12]
 800d904:	681a      	ldr	r2, [r3, #0]
 800d906:	68fb      	ldr	r3, [r7, #12]
 800d908:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d90a:	68f9      	ldr	r1, [r7, #12]
 800d90c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800d90e:	fb01 f303 	mul.w	r3, r1, r3
 800d912:	441a      	add	r2, r3
 800d914:	68fb      	ldr	r3, [r7, #12]
 800d916:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800d918:	68fb      	ldr	r3, [r7, #12]
 800d91a:	2200      	movs	r2, #0
 800d91c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800d91e:	68fb      	ldr	r3, [r7, #12]
 800d920:	681a      	ldr	r2, [r3, #0]
 800d922:	68fb      	ldr	r3, [r7, #12]
 800d924:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d926:	68fb      	ldr	r3, [r7, #12]
 800d928:	681a      	ldr	r2, [r3, #0]
 800d92a:	68fb      	ldr	r3, [r7, #12]
 800d92c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d92e:	3b01      	subs	r3, #1
 800d930:	68f9      	ldr	r1, [r7, #12]
 800d932:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800d934:	fb01 f303 	mul.w	r3, r1, r3
 800d938:	441a      	add	r2, r3
 800d93a:	68fb      	ldr	r3, [r7, #12]
 800d93c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800d93e:	68fb      	ldr	r3, [r7, #12]
 800d940:	22ff      	movs	r2, #255	; 0xff
 800d942:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800d946:	68fb      	ldr	r3, [r7, #12]
 800d948:	22ff      	movs	r2, #255	; 0xff
 800d94a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800d94e:	683b      	ldr	r3, [r7, #0]
 800d950:	2b00      	cmp	r3, #0
 800d952:	d114      	bne.n	800d97e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d954:	68fb      	ldr	r3, [r7, #12]
 800d956:	691b      	ldr	r3, [r3, #16]
 800d958:	2b00      	cmp	r3, #0
 800d95a:	d01a      	beq.n	800d992 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d95c:	68fb      	ldr	r3, [r7, #12]
 800d95e:	3310      	adds	r3, #16
 800d960:	4618      	mov	r0, r3
 800d962:	f001 fc4b 	bl	800f1fc <xTaskRemoveFromEventList>
 800d966:	4603      	mov	r3, r0
 800d968:	2b00      	cmp	r3, #0
 800d96a:	d012      	beq.n	800d992 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800d96c:	4b0c      	ldr	r3, [pc, #48]	; (800d9a0 <xQueueGenericReset+0xcc>)
 800d96e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d972:	601a      	str	r2, [r3, #0]
 800d974:	f3bf 8f4f 	dsb	sy
 800d978:	f3bf 8f6f 	isb	sy
 800d97c:	e009      	b.n	800d992 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800d97e:	68fb      	ldr	r3, [r7, #12]
 800d980:	3310      	adds	r3, #16
 800d982:	4618      	mov	r0, r3
 800d984:	f7ff fef2 	bl	800d76c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800d988:	68fb      	ldr	r3, [r7, #12]
 800d98a:	3324      	adds	r3, #36	; 0x24
 800d98c:	4618      	mov	r0, r3
 800d98e:	f7ff feed 	bl	800d76c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800d992:	f002 fc7f 	bl	8010294 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800d996:	2301      	movs	r3, #1
}
 800d998:	4618      	mov	r0, r3
 800d99a:	3710      	adds	r7, #16
 800d99c:	46bd      	mov	sp, r7
 800d99e:	bd80      	pop	{r7, pc}
 800d9a0:	e000ed04 	.word	0xe000ed04

0800d9a4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800d9a4:	b580      	push	{r7, lr}
 800d9a6:	b08e      	sub	sp, #56	; 0x38
 800d9a8:	af02      	add	r7, sp, #8
 800d9aa:	60f8      	str	r0, [r7, #12]
 800d9ac:	60b9      	str	r1, [r7, #8]
 800d9ae:	607a      	str	r2, [r7, #4]
 800d9b0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800d9b2:	68fb      	ldr	r3, [r7, #12]
 800d9b4:	2b00      	cmp	r3, #0
 800d9b6:	d10a      	bne.n	800d9ce <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800d9b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d9bc:	f383 8811 	msr	BASEPRI, r3
 800d9c0:	f3bf 8f6f 	isb	sy
 800d9c4:	f3bf 8f4f 	dsb	sy
 800d9c8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800d9ca:	bf00      	nop
 800d9cc:	e7fe      	b.n	800d9cc <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800d9ce:	683b      	ldr	r3, [r7, #0]
 800d9d0:	2b00      	cmp	r3, #0
 800d9d2:	d10a      	bne.n	800d9ea <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800d9d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d9d8:	f383 8811 	msr	BASEPRI, r3
 800d9dc:	f3bf 8f6f 	isb	sy
 800d9e0:	f3bf 8f4f 	dsb	sy
 800d9e4:	627b      	str	r3, [r7, #36]	; 0x24
}
 800d9e6:	bf00      	nop
 800d9e8:	e7fe      	b.n	800d9e8 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800d9ea:	687b      	ldr	r3, [r7, #4]
 800d9ec:	2b00      	cmp	r3, #0
 800d9ee:	d002      	beq.n	800d9f6 <xQueueGenericCreateStatic+0x52>
 800d9f0:	68bb      	ldr	r3, [r7, #8]
 800d9f2:	2b00      	cmp	r3, #0
 800d9f4:	d001      	beq.n	800d9fa <xQueueGenericCreateStatic+0x56>
 800d9f6:	2301      	movs	r3, #1
 800d9f8:	e000      	b.n	800d9fc <xQueueGenericCreateStatic+0x58>
 800d9fa:	2300      	movs	r3, #0
 800d9fc:	2b00      	cmp	r3, #0
 800d9fe:	d10a      	bne.n	800da16 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800da00:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da04:	f383 8811 	msr	BASEPRI, r3
 800da08:	f3bf 8f6f 	isb	sy
 800da0c:	f3bf 8f4f 	dsb	sy
 800da10:	623b      	str	r3, [r7, #32]
}
 800da12:	bf00      	nop
 800da14:	e7fe      	b.n	800da14 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800da16:	687b      	ldr	r3, [r7, #4]
 800da18:	2b00      	cmp	r3, #0
 800da1a:	d102      	bne.n	800da22 <xQueueGenericCreateStatic+0x7e>
 800da1c:	68bb      	ldr	r3, [r7, #8]
 800da1e:	2b00      	cmp	r3, #0
 800da20:	d101      	bne.n	800da26 <xQueueGenericCreateStatic+0x82>
 800da22:	2301      	movs	r3, #1
 800da24:	e000      	b.n	800da28 <xQueueGenericCreateStatic+0x84>
 800da26:	2300      	movs	r3, #0
 800da28:	2b00      	cmp	r3, #0
 800da2a:	d10a      	bne.n	800da42 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800da2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da30:	f383 8811 	msr	BASEPRI, r3
 800da34:	f3bf 8f6f 	isb	sy
 800da38:	f3bf 8f4f 	dsb	sy
 800da3c:	61fb      	str	r3, [r7, #28]
}
 800da3e:	bf00      	nop
 800da40:	e7fe      	b.n	800da40 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800da42:	2350      	movs	r3, #80	; 0x50
 800da44:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800da46:	697b      	ldr	r3, [r7, #20]
 800da48:	2b50      	cmp	r3, #80	; 0x50
 800da4a:	d00a      	beq.n	800da62 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800da4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da50:	f383 8811 	msr	BASEPRI, r3
 800da54:	f3bf 8f6f 	isb	sy
 800da58:	f3bf 8f4f 	dsb	sy
 800da5c:	61bb      	str	r3, [r7, #24]
}
 800da5e:	bf00      	nop
 800da60:	e7fe      	b.n	800da60 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800da62:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800da64:	683b      	ldr	r3, [r7, #0]
 800da66:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800da68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da6a:	2b00      	cmp	r3, #0
 800da6c:	d00d      	beq.n	800da8a <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800da6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da70:	2201      	movs	r2, #1
 800da72:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800da76:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800da7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da7c:	9300      	str	r3, [sp, #0]
 800da7e:	4613      	mov	r3, r2
 800da80:	687a      	ldr	r2, [r7, #4]
 800da82:	68b9      	ldr	r1, [r7, #8]
 800da84:	68f8      	ldr	r0, [r7, #12]
 800da86:	f000 f83f 	bl	800db08 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800da8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800da8c:	4618      	mov	r0, r3
 800da8e:	3730      	adds	r7, #48	; 0x30
 800da90:	46bd      	mov	sp, r7
 800da92:	bd80      	pop	{r7, pc}

0800da94 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800da94:	b580      	push	{r7, lr}
 800da96:	b08a      	sub	sp, #40	; 0x28
 800da98:	af02      	add	r7, sp, #8
 800da9a:	60f8      	str	r0, [r7, #12]
 800da9c:	60b9      	str	r1, [r7, #8]
 800da9e:	4613      	mov	r3, r2
 800daa0:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800daa2:	68fb      	ldr	r3, [r7, #12]
 800daa4:	2b00      	cmp	r3, #0
 800daa6:	d10a      	bne.n	800dabe <xQueueGenericCreate+0x2a>
	__asm volatile
 800daa8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800daac:	f383 8811 	msr	BASEPRI, r3
 800dab0:	f3bf 8f6f 	isb	sy
 800dab4:	f3bf 8f4f 	dsb	sy
 800dab8:	613b      	str	r3, [r7, #16]
}
 800daba:	bf00      	nop
 800dabc:	e7fe      	b.n	800dabc <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800dabe:	68fb      	ldr	r3, [r7, #12]
 800dac0:	68ba      	ldr	r2, [r7, #8]
 800dac2:	fb02 f303 	mul.w	r3, r2, r3
 800dac6:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800dac8:	69fb      	ldr	r3, [r7, #28]
 800daca:	3350      	adds	r3, #80	; 0x50
 800dacc:	4618      	mov	r0, r3
 800dace:	f002 fcd3 	bl	8010478 <pvPortMalloc>
 800dad2:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800dad4:	69bb      	ldr	r3, [r7, #24]
 800dad6:	2b00      	cmp	r3, #0
 800dad8:	d011      	beq.n	800dafe <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800dada:	69bb      	ldr	r3, [r7, #24]
 800dadc:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800dade:	697b      	ldr	r3, [r7, #20]
 800dae0:	3350      	adds	r3, #80	; 0x50
 800dae2:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800dae4:	69bb      	ldr	r3, [r7, #24]
 800dae6:	2200      	movs	r2, #0
 800dae8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800daec:	79fa      	ldrb	r2, [r7, #7]
 800daee:	69bb      	ldr	r3, [r7, #24]
 800daf0:	9300      	str	r3, [sp, #0]
 800daf2:	4613      	mov	r3, r2
 800daf4:	697a      	ldr	r2, [r7, #20]
 800daf6:	68b9      	ldr	r1, [r7, #8]
 800daf8:	68f8      	ldr	r0, [r7, #12]
 800dafa:	f000 f805 	bl	800db08 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800dafe:	69bb      	ldr	r3, [r7, #24]
	}
 800db00:	4618      	mov	r0, r3
 800db02:	3720      	adds	r7, #32
 800db04:	46bd      	mov	sp, r7
 800db06:	bd80      	pop	{r7, pc}

0800db08 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800db08:	b580      	push	{r7, lr}
 800db0a:	b084      	sub	sp, #16
 800db0c:	af00      	add	r7, sp, #0
 800db0e:	60f8      	str	r0, [r7, #12]
 800db10:	60b9      	str	r1, [r7, #8]
 800db12:	607a      	str	r2, [r7, #4]
 800db14:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800db16:	68bb      	ldr	r3, [r7, #8]
 800db18:	2b00      	cmp	r3, #0
 800db1a:	d103      	bne.n	800db24 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800db1c:	69bb      	ldr	r3, [r7, #24]
 800db1e:	69ba      	ldr	r2, [r7, #24]
 800db20:	601a      	str	r2, [r3, #0]
 800db22:	e002      	b.n	800db2a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800db24:	69bb      	ldr	r3, [r7, #24]
 800db26:	687a      	ldr	r2, [r7, #4]
 800db28:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800db2a:	69bb      	ldr	r3, [r7, #24]
 800db2c:	68fa      	ldr	r2, [r7, #12]
 800db2e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800db30:	69bb      	ldr	r3, [r7, #24]
 800db32:	68ba      	ldr	r2, [r7, #8]
 800db34:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800db36:	2101      	movs	r1, #1
 800db38:	69b8      	ldr	r0, [r7, #24]
 800db3a:	f7ff fecb 	bl	800d8d4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800db3e:	69bb      	ldr	r3, [r7, #24]
 800db40:	78fa      	ldrb	r2, [r7, #3]
 800db42:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800db46:	bf00      	nop
 800db48:	3710      	adds	r7, #16
 800db4a:	46bd      	mov	sp, r7
 800db4c:	bd80      	pop	{r7, pc}

0800db4e <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800db4e:	b580      	push	{r7, lr}
 800db50:	b08a      	sub	sp, #40	; 0x28
 800db52:	af02      	add	r7, sp, #8
 800db54:	60f8      	str	r0, [r7, #12]
 800db56:	60b9      	str	r1, [r7, #8]
 800db58:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800db5a:	68fb      	ldr	r3, [r7, #12]
 800db5c:	2b00      	cmp	r3, #0
 800db5e:	d10a      	bne.n	800db76 <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 800db60:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db64:	f383 8811 	msr	BASEPRI, r3
 800db68:	f3bf 8f6f 	isb	sy
 800db6c:	f3bf 8f4f 	dsb	sy
 800db70:	61bb      	str	r3, [r7, #24]
}
 800db72:	bf00      	nop
 800db74:	e7fe      	b.n	800db74 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 800db76:	68ba      	ldr	r2, [r7, #8]
 800db78:	68fb      	ldr	r3, [r7, #12]
 800db7a:	429a      	cmp	r2, r3
 800db7c:	d90a      	bls.n	800db94 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 800db7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db82:	f383 8811 	msr	BASEPRI, r3
 800db86:	f3bf 8f6f 	isb	sy
 800db8a:	f3bf 8f4f 	dsb	sy
 800db8e:	617b      	str	r3, [r7, #20]
}
 800db90:	bf00      	nop
 800db92:	e7fe      	b.n	800db92 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800db94:	2302      	movs	r3, #2
 800db96:	9300      	str	r3, [sp, #0]
 800db98:	687b      	ldr	r3, [r7, #4]
 800db9a:	2200      	movs	r2, #0
 800db9c:	2100      	movs	r1, #0
 800db9e:	68f8      	ldr	r0, [r7, #12]
 800dba0:	f7ff ff00 	bl	800d9a4 <xQueueGenericCreateStatic>
 800dba4:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800dba6:	69fb      	ldr	r3, [r7, #28]
 800dba8:	2b00      	cmp	r3, #0
 800dbaa:	d002      	beq.n	800dbb2 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800dbac:	69fb      	ldr	r3, [r7, #28]
 800dbae:	68ba      	ldr	r2, [r7, #8]
 800dbb0:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800dbb2:	69fb      	ldr	r3, [r7, #28]
	}
 800dbb4:	4618      	mov	r0, r3
 800dbb6:	3720      	adds	r7, #32
 800dbb8:	46bd      	mov	sp, r7
 800dbba:	bd80      	pop	{r7, pc}

0800dbbc <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800dbbc:	b580      	push	{r7, lr}
 800dbbe:	b086      	sub	sp, #24
 800dbc0:	af00      	add	r7, sp, #0
 800dbc2:	6078      	str	r0, [r7, #4]
 800dbc4:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800dbc6:	687b      	ldr	r3, [r7, #4]
 800dbc8:	2b00      	cmp	r3, #0
 800dbca:	d10a      	bne.n	800dbe2 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 800dbcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dbd0:	f383 8811 	msr	BASEPRI, r3
 800dbd4:	f3bf 8f6f 	isb	sy
 800dbd8:	f3bf 8f4f 	dsb	sy
 800dbdc:	613b      	str	r3, [r7, #16]
}
 800dbde:	bf00      	nop
 800dbe0:	e7fe      	b.n	800dbe0 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 800dbe2:	683a      	ldr	r2, [r7, #0]
 800dbe4:	687b      	ldr	r3, [r7, #4]
 800dbe6:	429a      	cmp	r2, r3
 800dbe8:	d90a      	bls.n	800dc00 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 800dbea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dbee:	f383 8811 	msr	BASEPRI, r3
 800dbf2:	f3bf 8f6f 	isb	sy
 800dbf6:	f3bf 8f4f 	dsb	sy
 800dbfa:	60fb      	str	r3, [r7, #12]
}
 800dbfc:	bf00      	nop
 800dbfe:	e7fe      	b.n	800dbfe <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800dc00:	2202      	movs	r2, #2
 800dc02:	2100      	movs	r1, #0
 800dc04:	6878      	ldr	r0, [r7, #4]
 800dc06:	f7ff ff45 	bl	800da94 <xQueueGenericCreate>
 800dc0a:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800dc0c:	697b      	ldr	r3, [r7, #20]
 800dc0e:	2b00      	cmp	r3, #0
 800dc10:	d002      	beq.n	800dc18 <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800dc12:	697b      	ldr	r3, [r7, #20]
 800dc14:	683a      	ldr	r2, [r7, #0]
 800dc16:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800dc18:	697b      	ldr	r3, [r7, #20]
	}
 800dc1a:	4618      	mov	r0, r3
 800dc1c:	3718      	adds	r7, #24
 800dc1e:	46bd      	mov	sp, r7
 800dc20:	bd80      	pop	{r7, pc}
	...

0800dc24 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800dc24:	b580      	push	{r7, lr}
 800dc26:	b08e      	sub	sp, #56	; 0x38
 800dc28:	af00      	add	r7, sp, #0
 800dc2a:	60f8      	str	r0, [r7, #12]
 800dc2c:	60b9      	str	r1, [r7, #8]
 800dc2e:	607a      	str	r2, [r7, #4]
 800dc30:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800dc32:	2300      	movs	r3, #0
 800dc34:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800dc36:	68fb      	ldr	r3, [r7, #12]
 800dc38:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800dc3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc3c:	2b00      	cmp	r3, #0
 800dc3e:	d10a      	bne.n	800dc56 <xQueueGenericSend+0x32>
	__asm volatile
 800dc40:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc44:	f383 8811 	msr	BASEPRI, r3
 800dc48:	f3bf 8f6f 	isb	sy
 800dc4c:	f3bf 8f4f 	dsb	sy
 800dc50:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800dc52:	bf00      	nop
 800dc54:	e7fe      	b.n	800dc54 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800dc56:	68bb      	ldr	r3, [r7, #8]
 800dc58:	2b00      	cmp	r3, #0
 800dc5a:	d103      	bne.n	800dc64 <xQueueGenericSend+0x40>
 800dc5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dc60:	2b00      	cmp	r3, #0
 800dc62:	d101      	bne.n	800dc68 <xQueueGenericSend+0x44>
 800dc64:	2301      	movs	r3, #1
 800dc66:	e000      	b.n	800dc6a <xQueueGenericSend+0x46>
 800dc68:	2300      	movs	r3, #0
 800dc6a:	2b00      	cmp	r3, #0
 800dc6c:	d10a      	bne.n	800dc84 <xQueueGenericSend+0x60>
	__asm volatile
 800dc6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc72:	f383 8811 	msr	BASEPRI, r3
 800dc76:	f3bf 8f6f 	isb	sy
 800dc7a:	f3bf 8f4f 	dsb	sy
 800dc7e:	627b      	str	r3, [r7, #36]	; 0x24
}
 800dc80:	bf00      	nop
 800dc82:	e7fe      	b.n	800dc82 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800dc84:	683b      	ldr	r3, [r7, #0]
 800dc86:	2b02      	cmp	r3, #2
 800dc88:	d103      	bne.n	800dc92 <xQueueGenericSend+0x6e>
 800dc8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dc8e:	2b01      	cmp	r3, #1
 800dc90:	d101      	bne.n	800dc96 <xQueueGenericSend+0x72>
 800dc92:	2301      	movs	r3, #1
 800dc94:	e000      	b.n	800dc98 <xQueueGenericSend+0x74>
 800dc96:	2300      	movs	r3, #0
 800dc98:	2b00      	cmp	r3, #0
 800dc9a:	d10a      	bne.n	800dcb2 <xQueueGenericSend+0x8e>
	__asm volatile
 800dc9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dca0:	f383 8811 	msr	BASEPRI, r3
 800dca4:	f3bf 8f6f 	isb	sy
 800dca8:	f3bf 8f4f 	dsb	sy
 800dcac:	623b      	str	r3, [r7, #32]
}
 800dcae:	bf00      	nop
 800dcb0:	e7fe      	b.n	800dcb0 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800dcb2:	f001 fc65 	bl	800f580 <xTaskGetSchedulerState>
 800dcb6:	4603      	mov	r3, r0
 800dcb8:	2b00      	cmp	r3, #0
 800dcba:	d102      	bne.n	800dcc2 <xQueueGenericSend+0x9e>
 800dcbc:	687b      	ldr	r3, [r7, #4]
 800dcbe:	2b00      	cmp	r3, #0
 800dcc0:	d101      	bne.n	800dcc6 <xQueueGenericSend+0xa2>
 800dcc2:	2301      	movs	r3, #1
 800dcc4:	e000      	b.n	800dcc8 <xQueueGenericSend+0xa4>
 800dcc6:	2300      	movs	r3, #0
 800dcc8:	2b00      	cmp	r3, #0
 800dcca:	d10a      	bne.n	800dce2 <xQueueGenericSend+0xbe>
	__asm volatile
 800dccc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dcd0:	f383 8811 	msr	BASEPRI, r3
 800dcd4:	f3bf 8f6f 	isb	sy
 800dcd8:	f3bf 8f4f 	dsb	sy
 800dcdc:	61fb      	str	r3, [r7, #28]
}
 800dcde:	bf00      	nop
 800dce0:	e7fe      	b.n	800dce0 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800dce2:	f002 faa7 	bl	8010234 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800dce6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dce8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800dcea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dcec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dcee:	429a      	cmp	r2, r3
 800dcf0:	d302      	bcc.n	800dcf8 <xQueueGenericSend+0xd4>
 800dcf2:	683b      	ldr	r3, [r7, #0]
 800dcf4:	2b02      	cmp	r3, #2
 800dcf6:	d129      	bne.n	800dd4c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800dcf8:	683a      	ldr	r2, [r7, #0]
 800dcfa:	68b9      	ldr	r1, [r7, #8]
 800dcfc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800dcfe:	f000 fc5e 	bl	800e5be <prvCopyDataToQueue>
 800dd02:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800dd04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dd08:	2b00      	cmp	r3, #0
 800dd0a:	d010      	beq.n	800dd2e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800dd0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd0e:	3324      	adds	r3, #36	; 0x24
 800dd10:	4618      	mov	r0, r3
 800dd12:	f001 fa73 	bl	800f1fc <xTaskRemoveFromEventList>
 800dd16:	4603      	mov	r3, r0
 800dd18:	2b00      	cmp	r3, #0
 800dd1a:	d013      	beq.n	800dd44 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800dd1c:	4b3f      	ldr	r3, [pc, #252]	; (800de1c <xQueueGenericSend+0x1f8>)
 800dd1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dd22:	601a      	str	r2, [r3, #0]
 800dd24:	f3bf 8f4f 	dsb	sy
 800dd28:	f3bf 8f6f 	isb	sy
 800dd2c:	e00a      	b.n	800dd44 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800dd2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd30:	2b00      	cmp	r3, #0
 800dd32:	d007      	beq.n	800dd44 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800dd34:	4b39      	ldr	r3, [pc, #228]	; (800de1c <xQueueGenericSend+0x1f8>)
 800dd36:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dd3a:	601a      	str	r2, [r3, #0]
 800dd3c:	f3bf 8f4f 	dsb	sy
 800dd40:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800dd44:	f002 faa6 	bl	8010294 <vPortExitCritical>
				return pdPASS;
 800dd48:	2301      	movs	r3, #1
 800dd4a:	e063      	b.n	800de14 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800dd4c:	687b      	ldr	r3, [r7, #4]
 800dd4e:	2b00      	cmp	r3, #0
 800dd50:	d103      	bne.n	800dd5a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800dd52:	f002 fa9f 	bl	8010294 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800dd56:	2300      	movs	r3, #0
 800dd58:	e05c      	b.n	800de14 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800dd5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dd5c:	2b00      	cmp	r3, #0
 800dd5e:	d106      	bne.n	800dd6e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800dd60:	f107 0314 	add.w	r3, r7, #20
 800dd64:	4618      	mov	r0, r3
 800dd66:	f001 faad 	bl	800f2c4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800dd6a:	2301      	movs	r3, #1
 800dd6c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800dd6e:	f002 fa91 	bl	8010294 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800dd72:	f001 f819 	bl	800eda8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800dd76:	f002 fa5d 	bl	8010234 <vPortEnterCritical>
 800dd7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd7c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800dd80:	b25b      	sxtb	r3, r3
 800dd82:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dd86:	d103      	bne.n	800dd90 <xQueueGenericSend+0x16c>
 800dd88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd8a:	2200      	movs	r2, #0
 800dd8c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800dd90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd92:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800dd96:	b25b      	sxtb	r3, r3
 800dd98:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dd9c:	d103      	bne.n	800dda6 <xQueueGenericSend+0x182>
 800dd9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dda0:	2200      	movs	r2, #0
 800dda2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800dda6:	f002 fa75 	bl	8010294 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ddaa:	1d3a      	adds	r2, r7, #4
 800ddac:	f107 0314 	add.w	r3, r7, #20
 800ddb0:	4611      	mov	r1, r2
 800ddb2:	4618      	mov	r0, r3
 800ddb4:	f001 fa9c 	bl	800f2f0 <xTaskCheckForTimeOut>
 800ddb8:	4603      	mov	r3, r0
 800ddba:	2b00      	cmp	r3, #0
 800ddbc:	d124      	bne.n	800de08 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800ddbe:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ddc0:	f000 fcf5 	bl	800e7ae <prvIsQueueFull>
 800ddc4:	4603      	mov	r3, r0
 800ddc6:	2b00      	cmp	r3, #0
 800ddc8:	d018      	beq.n	800ddfc <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800ddca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ddcc:	3310      	adds	r3, #16
 800ddce:	687a      	ldr	r2, [r7, #4]
 800ddd0:	4611      	mov	r1, r2
 800ddd2:	4618      	mov	r0, r3
 800ddd4:	f001 f9c2 	bl	800f15c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800ddd8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ddda:	f000 fc80 	bl	800e6de <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800ddde:	f000 fff1 	bl	800edc4 <xTaskResumeAll>
 800dde2:	4603      	mov	r3, r0
 800dde4:	2b00      	cmp	r3, #0
 800dde6:	f47f af7c 	bne.w	800dce2 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800ddea:	4b0c      	ldr	r3, [pc, #48]	; (800de1c <xQueueGenericSend+0x1f8>)
 800ddec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ddf0:	601a      	str	r2, [r3, #0]
 800ddf2:	f3bf 8f4f 	dsb	sy
 800ddf6:	f3bf 8f6f 	isb	sy
 800ddfa:	e772      	b.n	800dce2 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800ddfc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ddfe:	f000 fc6e 	bl	800e6de <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800de02:	f000 ffdf 	bl	800edc4 <xTaskResumeAll>
 800de06:	e76c      	b.n	800dce2 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800de08:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800de0a:	f000 fc68 	bl	800e6de <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800de0e:	f000 ffd9 	bl	800edc4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800de12:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800de14:	4618      	mov	r0, r3
 800de16:	3738      	adds	r7, #56	; 0x38
 800de18:	46bd      	mov	sp, r7
 800de1a:	bd80      	pop	{r7, pc}
 800de1c:	e000ed04 	.word	0xe000ed04

0800de20 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800de20:	b580      	push	{r7, lr}
 800de22:	b090      	sub	sp, #64	; 0x40
 800de24:	af00      	add	r7, sp, #0
 800de26:	60f8      	str	r0, [r7, #12]
 800de28:	60b9      	str	r1, [r7, #8]
 800de2a:	607a      	str	r2, [r7, #4]
 800de2c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800de2e:	68fb      	ldr	r3, [r7, #12]
 800de30:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800de32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800de34:	2b00      	cmp	r3, #0
 800de36:	d10a      	bne.n	800de4e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800de38:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de3c:	f383 8811 	msr	BASEPRI, r3
 800de40:	f3bf 8f6f 	isb	sy
 800de44:	f3bf 8f4f 	dsb	sy
 800de48:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800de4a:	bf00      	nop
 800de4c:	e7fe      	b.n	800de4c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800de4e:	68bb      	ldr	r3, [r7, #8]
 800de50:	2b00      	cmp	r3, #0
 800de52:	d103      	bne.n	800de5c <xQueueGenericSendFromISR+0x3c>
 800de54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800de56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800de58:	2b00      	cmp	r3, #0
 800de5a:	d101      	bne.n	800de60 <xQueueGenericSendFromISR+0x40>
 800de5c:	2301      	movs	r3, #1
 800de5e:	e000      	b.n	800de62 <xQueueGenericSendFromISR+0x42>
 800de60:	2300      	movs	r3, #0
 800de62:	2b00      	cmp	r3, #0
 800de64:	d10a      	bne.n	800de7c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800de66:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de6a:	f383 8811 	msr	BASEPRI, r3
 800de6e:	f3bf 8f6f 	isb	sy
 800de72:	f3bf 8f4f 	dsb	sy
 800de76:	627b      	str	r3, [r7, #36]	; 0x24
}
 800de78:	bf00      	nop
 800de7a:	e7fe      	b.n	800de7a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800de7c:	683b      	ldr	r3, [r7, #0]
 800de7e:	2b02      	cmp	r3, #2
 800de80:	d103      	bne.n	800de8a <xQueueGenericSendFromISR+0x6a>
 800de82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800de84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800de86:	2b01      	cmp	r3, #1
 800de88:	d101      	bne.n	800de8e <xQueueGenericSendFromISR+0x6e>
 800de8a:	2301      	movs	r3, #1
 800de8c:	e000      	b.n	800de90 <xQueueGenericSendFromISR+0x70>
 800de8e:	2300      	movs	r3, #0
 800de90:	2b00      	cmp	r3, #0
 800de92:	d10a      	bne.n	800deaa <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800de94:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de98:	f383 8811 	msr	BASEPRI, r3
 800de9c:	f3bf 8f6f 	isb	sy
 800dea0:	f3bf 8f4f 	dsb	sy
 800dea4:	623b      	str	r3, [r7, #32]
}
 800dea6:	bf00      	nop
 800dea8:	e7fe      	b.n	800dea8 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800deaa:	f002 faa5 	bl	80103f8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800deae:	f3ef 8211 	mrs	r2, BASEPRI
 800deb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800deb6:	f383 8811 	msr	BASEPRI, r3
 800deba:	f3bf 8f6f 	isb	sy
 800debe:	f3bf 8f4f 	dsb	sy
 800dec2:	61fa      	str	r2, [r7, #28]
 800dec4:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800dec6:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800dec8:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800deca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800decc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800dece:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ded0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ded2:	429a      	cmp	r2, r3
 800ded4:	d302      	bcc.n	800dedc <xQueueGenericSendFromISR+0xbc>
 800ded6:	683b      	ldr	r3, [r7, #0]
 800ded8:	2b02      	cmp	r3, #2
 800deda:	d12f      	bne.n	800df3c <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800dedc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dede:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800dee2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800dee6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dee8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800deea:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800deec:	683a      	ldr	r2, [r7, #0]
 800deee:	68b9      	ldr	r1, [r7, #8]
 800def0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800def2:	f000 fb64 	bl	800e5be <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800def6:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800defa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800defe:	d112      	bne.n	800df26 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800df00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800df04:	2b00      	cmp	r3, #0
 800df06:	d016      	beq.n	800df36 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800df08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df0a:	3324      	adds	r3, #36	; 0x24
 800df0c:	4618      	mov	r0, r3
 800df0e:	f001 f975 	bl	800f1fc <xTaskRemoveFromEventList>
 800df12:	4603      	mov	r3, r0
 800df14:	2b00      	cmp	r3, #0
 800df16:	d00e      	beq.n	800df36 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800df18:	687b      	ldr	r3, [r7, #4]
 800df1a:	2b00      	cmp	r3, #0
 800df1c:	d00b      	beq.n	800df36 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800df1e:	687b      	ldr	r3, [r7, #4]
 800df20:	2201      	movs	r2, #1
 800df22:	601a      	str	r2, [r3, #0]
 800df24:	e007      	b.n	800df36 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800df26:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800df2a:	3301      	adds	r3, #1
 800df2c:	b2db      	uxtb	r3, r3
 800df2e:	b25a      	sxtb	r2, r3
 800df30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df32:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800df36:	2301      	movs	r3, #1
 800df38:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800df3a:	e001      	b.n	800df40 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800df3c:	2300      	movs	r3, #0
 800df3e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800df40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800df42:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800df44:	697b      	ldr	r3, [r7, #20]
 800df46:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800df4a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800df4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800df4e:	4618      	mov	r0, r3
 800df50:	3740      	adds	r7, #64	; 0x40
 800df52:	46bd      	mov	sp, r7
 800df54:	bd80      	pop	{r7, pc}

0800df56 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800df56:	b580      	push	{r7, lr}
 800df58:	b08e      	sub	sp, #56	; 0x38
 800df5a:	af00      	add	r7, sp, #0
 800df5c:	6078      	str	r0, [r7, #4]
 800df5e:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800df60:	687b      	ldr	r3, [r7, #4]
 800df62:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800df64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df66:	2b00      	cmp	r3, #0
 800df68:	d10a      	bne.n	800df80 <xQueueGiveFromISR+0x2a>
	__asm volatile
 800df6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df6e:	f383 8811 	msr	BASEPRI, r3
 800df72:	f3bf 8f6f 	isb	sy
 800df76:	f3bf 8f4f 	dsb	sy
 800df7a:	623b      	str	r3, [r7, #32]
}
 800df7c:	bf00      	nop
 800df7e:	e7fe      	b.n	800df7e <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800df80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800df84:	2b00      	cmp	r3, #0
 800df86:	d00a      	beq.n	800df9e <xQueueGiveFromISR+0x48>
	__asm volatile
 800df88:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df8c:	f383 8811 	msr	BASEPRI, r3
 800df90:	f3bf 8f6f 	isb	sy
 800df94:	f3bf 8f4f 	dsb	sy
 800df98:	61fb      	str	r3, [r7, #28]
}
 800df9a:	bf00      	nop
 800df9c:	e7fe      	b.n	800df9c <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800df9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dfa0:	681b      	ldr	r3, [r3, #0]
 800dfa2:	2b00      	cmp	r3, #0
 800dfa4:	d103      	bne.n	800dfae <xQueueGiveFromISR+0x58>
 800dfa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dfa8:	689b      	ldr	r3, [r3, #8]
 800dfaa:	2b00      	cmp	r3, #0
 800dfac:	d101      	bne.n	800dfb2 <xQueueGiveFromISR+0x5c>
 800dfae:	2301      	movs	r3, #1
 800dfb0:	e000      	b.n	800dfb4 <xQueueGiveFromISR+0x5e>
 800dfb2:	2300      	movs	r3, #0
 800dfb4:	2b00      	cmp	r3, #0
 800dfb6:	d10a      	bne.n	800dfce <xQueueGiveFromISR+0x78>
	__asm volatile
 800dfb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dfbc:	f383 8811 	msr	BASEPRI, r3
 800dfc0:	f3bf 8f6f 	isb	sy
 800dfc4:	f3bf 8f4f 	dsb	sy
 800dfc8:	61bb      	str	r3, [r7, #24]
}
 800dfca:	bf00      	nop
 800dfcc:	e7fe      	b.n	800dfcc <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800dfce:	f002 fa13 	bl	80103f8 <vPortValidateInterruptPriority>
	__asm volatile
 800dfd2:	f3ef 8211 	mrs	r2, BASEPRI
 800dfd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dfda:	f383 8811 	msr	BASEPRI, r3
 800dfde:	f3bf 8f6f 	isb	sy
 800dfe2:	f3bf 8f4f 	dsb	sy
 800dfe6:	617a      	str	r2, [r7, #20]
 800dfe8:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800dfea:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800dfec:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800dfee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dff0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dff2:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800dff4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dff6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dff8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800dffa:	429a      	cmp	r2, r3
 800dffc:	d22b      	bcs.n	800e056 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800dffe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e000:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e004:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800e008:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e00a:	1c5a      	adds	r2, r3, #1
 800e00c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e00e:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800e010:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800e014:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e018:	d112      	bne.n	800e040 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e01a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e01c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e01e:	2b00      	cmp	r3, #0
 800e020:	d016      	beq.n	800e050 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e022:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e024:	3324      	adds	r3, #36	; 0x24
 800e026:	4618      	mov	r0, r3
 800e028:	f001 f8e8 	bl	800f1fc <xTaskRemoveFromEventList>
 800e02c:	4603      	mov	r3, r0
 800e02e:	2b00      	cmp	r3, #0
 800e030:	d00e      	beq.n	800e050 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800e032:	683b      	ldr	r3, [r7, #0]
 800e034:	2b00      	cmp	r3, #0
 800e036:	d00b      	beq.n	800e050 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800e038:	683b      	ldr	r3, [r7, #0]
 800e03a:	2201      	movs	r2, #1
 800e03c:	601a      	str	r2, [r3, #0]
 800e03e:	e007      	b.n	800e050 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800e040:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e044:	3301      	adds	r3, #1
 800e046:	b2db      	uxtb	r3, r3
 800e048:	b25a      	sxtb	r2, r3
 800e04a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e04c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800e050:	2301      	movs	r3, #1
 800e052:	637b      	str	r3, [r7, #52]	; 0x34
 800e054:	e001      	b.n	800e05a <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800e056:	2300      	movs	r3, #0
 800e058:	637b      	str	r3, [r7, #52]	; 0x34
 800e05a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e05c:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800e05e:	68fb      	ldr	r3, [r7, #12]
 800e060:	f383 8811 	msr	BASEPRI, r3
}
 800e064:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800e066:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800e068:	4618      	mov	r0, r3
 800e06a:	3738      	adds	r7, #56	; 0x38
 800e06c:	46bd      	mov	sp, r7
 800e06e:	bd80      	pop	{r7, pc}

0800e070 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800e070:	b580      	push	{r7, lr}
 800e072:	b08c      	sub	sp, #48	; 0x30
 800e074:	af00      	add	r7, sp, #0
 800e076:	60f8      	str	r0, [r7, #12]
 800e078:	60b9      	str	r1, [r7, #8]
 800e07a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800e07c:	2300      	movs	r3, #0
 800e07e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800e080:	68fb      	ldr	r3, [r7, #12]
 800e082:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800e084:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e086:	2b00      	cmp	r3, #0
 800e088:	d10a      	bne.n	800e0a0 <xQueueReceive+0x30>
	__asm volatile
 800e08a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e08e:	f383 8811 	msr	BASEPRI, r3
 800e092:	f3bf 8f6f 	isb	sy
 800e096:	f3bf 8f4f 	dsb	sy
 800e09a:	623b      	str	r3, [r7, #32]
}
 800e09c:	bf00      	nop
 800e09e:	e7fe      	b.n	800e09e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e0a0:	68bb      	ldr	r3, [r7, #8]
 800e0a2:	2b00      	cmp	r3, #0
 800e0a4:	d103      	bne.n	800e0ae <xQueueReceive+0x3e>
 800e0a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e0a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e0aa:	2b00      	cmp	r3, #0
 800e0ac:	d101      	bne.n	800e0b2 <xQueueReceive+0x42>
 800e0ae:	2301      	movs	r3, #1
 800e0b0:	e000      	b.n	800e0b4 <xQueueReceive+0x44>
 800e0b2:	2300      	movs	r3, #0
 800e0b4:	2b00      	cmp	r3, #0
 800e0b6:	d10a      	bne.n	800e0ce <xQueueReceive+0x5e>
	__asm volatile
 800e0b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e0bc:	f383 8811 	msr	BASEPRI, r3
 800e0c0:	f3bf 8f6f 	isb	sy
 800e0c4:	f3bf 8f4f 	dsb	sy
 800e0c8:	61fb      	str	r3, [r7, #28]
}
 800e0ca:	bf00      	nop
 800e0cc:	e7fe      	b.n	800e0cc <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800e0ce:	f001 fa57 	bl	800f580 <xTaskGetSchedulerState>
 800e0d2:	4603      	mov	r3, r0
 800e0d4:	2b00      	cmp	r3, #0
 800e0d6:	d102      	bne.n	800e0de <xQueueReceive+0x6e>
 800e0d8:	687b      	ldr	r3, [r7, #4]
 800e0da:	2b00      	cmp	r3, #0
 800e0dc:	d101      	bne.n	800e0e2 <xQueueReceive+0x72>
 800e0de:	2301      	movs	r3, #1
 800e0e0:	e000      	b.n	800e0e4 <xQueueReceive+0x74>
 800e0e2:	2300      	movs	r3, #0
 800e0e4:	2b00      	cmp	r3, #0
 800e0e6:	d10a      	bne.n	800e0fe <xQueueReceive+0x8e>
	__asm volatile
 800e0e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e0ec:	f383 8811 	msr	BASEPRI, r3
 800e0f0:	f3bf 8f6f 	isb	sy
 800e0f4:	f3bf 8f4f 	dsb	sy
 800e0f8:	61bb      	str	r3, [r7, #24]
}
 800e0fa:	bf00      	nop
 800e0fc:	e7fe      	b.n	800e0fc <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800e0fe:	f002 f899 	bl	8010234 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e102:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e104:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e106:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800e108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e10a:	2b00      	cmp	r3, #0
 800e10c:	d01f      	beq.n	800e14e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800e10e:	68b9      	ldr	r1, [r7, #8]
 800e110:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e112:	f000 fabe 	bl	800e692 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800e116:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e118:	1e5a      	subs	r2, r3, #1
 800e11a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e11c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e11e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e120:	691b      	ldr	r3, [r3, #16]
 800e122:	2b00      	cmp	r3, #0
 800e124:	d00f      	beq.n	800e146 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e126:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e128:	3310      	adds	r3, #16
 800e12a:	4618      	mov	r0, r3
 800e12c:	f001 f866 	bl	800f1fc <xTaskRemoveFromEventList>
 800e130:	4603      	mov	r3, r0
 800e132:	2b00      	cmp	r3, #0
 800e134:	d007      	beq.n	800e146 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800e136:	4b3d      	ldr	r3, [pc, #244]	; (800e22c <xQueueReceive+0x1bc>)
 800e138:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e13c:	601a      	str	r2, [r3, #0]
 800e13e:	f3bf 8f4f 	dsb	sy
 800e142:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800e146:	f002 f8a5 	bl	8010294 <vPortExitCritical>
				return pdPASS;
 800e14a:	2301      	movs	r3, #1
 800e14c:	e069      	b.n	800e222 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800e14e:	687b      	ldr	r3, [r7, #4]
 800e150:	2b00      	cmp	r3, #0
 800e152:	d103      	bne.n	800e15c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800e154:	f002 f89e 	bl	8010294 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800e158:	2300      	movs	r3, #0
 800e15a:	e062      	b.n	800e222 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800e15c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e15e:	2b00      	cmp	r3, #0
 800e160:	d106      	bne.n	800e170 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800e162:	f107 0310 	add.w	r3, r7, #16
 800e166:	4618      	mov	r0, r3
 800e168:	f001 f8ac 	bl	800f2c4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800e16c:	2301      	movs	r3, #1
 800e16e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800e170:	f002 f890 	bl	8010294 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800e174:	f000 fe18 	bl	800eda8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800e178:	f002 f85c 	bl	8010234 <vPortEnterCritical>
 800e17c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e17e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800e182:	b25b      	sxtb	r3, r3
 800e184:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e188:	d103      	bne.n	800e192 <xQueueReceive+0x122>
 800e18a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e18c:	2200      	movs	r2, #0
 800e18e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e192:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e194:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e198:	b25b      	sxtb	r3, r3
 800e19a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e19e:	d103      	bne.n	800e1a8 <xQueueReceive+0x138>
 800e1a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e1a2:	2200      	movs	r2, #0
 800e1a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800e1a8:	f002 f874 	bl	8010294 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800e1ac:	1d3a      	adds	r2, r7, #4
 800e1ae:	f107 0310 	add.w	r3, r7, #16
 800e1b2:	4611      	mov	r1, r2
 800e1b4:	4618      	mov	r0, r3
 800e1b6:	f001 f89b 	bl	800f2f0 <xTaskCheckForTimeOut>
 800e1ba:	4603      	mov	r3, r0
 800e1bc:	2b00      	cmp	r3, #0
 800e1be:	d123      	bne.n	800e208 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800e1c0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e1c2:	f000 fade 	bl	800e782 <prvIsQueueEmpty>
 800e1c6:	4603      	mov	r3, r0
 800e1c8:	2b00      	cmp	r3, #0
 800e1ca:	d017      	beq.n	800e1fc <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800e1cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e1ce:	3324      	adds	r3, #36	; 0x24
 800e1d0:	687a      	ldr	r2, [r7, #4]
 800e1d2:	4611      	mov	r1, r2
 800e1d4:	4618      	mov	r0, r3
 800e1d6:	f000 ffc1 	bl	800f15c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800e1da:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e1dc:	f000 fa7f 	bl	800e6de <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800e1e0:	f000 fdf0 	bl	800edc4 <xTaskResumeAll>
 800e1e4:	4603      	mov	r3, r0
 800e1e6:	2b00      	cmp	r3, #0
 800e1e8:	d189      	bne.n	800e0fe <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800e1ea:	4b10      	ldr	r3, [pc, #64]	; (800e22c <xQueueReceive+0x1bc>)
 800e1ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e1f0:	601a      	str	r2, [r3, #0]
 800e1f2:	f3bf 8f4f 	dsb	sy
 800e1f6:	f3bf 8f6f 	isb	sy
 800e1fa:	e780      	b.n	800e0fe <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800e1fc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e1fe:	f000 fa6e 	bl	800e6de <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800e202:	f000 fddf 	bl	800edc4 <xTaskResumeAll>
 800e206:	e77a      	b.n	800e0fe <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800e208:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e20a:	f000 fa68 	bl	800e6de <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800e20e:	f000 fdd9 	bl	800edc4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800e212:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e214:	f000 fab5 	bl	800e782 <prvIsQueueEmpty>
 800e218:	4603      	mov	r3, r0
 800e21a:	2b00      	cmp	r3, #0
 800e21c:	f43f af6f 	beq.w	800e0fe <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800e220:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800e222:	4618      	mov	r0, r3
 800e224:	3730      	adds	r7, #48	; 0x30
 800e226:	46bd      	mov	sp, r7
 800e228:	bd80      	pop	{r7, pc}
 800e22a:	bf00      	nop
 800e22c:	e000ed04 	.word	0xe000ed04

0800e230 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800e230:	b580      	push	{r7, lr}
 800e232:	b08e      	sub	sp, #56	; 0x38
 800e234:	af00      	add	r7, sp, #0
 800e236:	6078      	str	r0, [r7, #4]
 800e238:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800e23a:	2300      	movs	r3, #0
 800e23c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800e23e:	687b      	ldr	r3, [r7, #4]
 800e240:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800e242:	2300      	movs	r3, #0
 800e244:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800e246:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e248:	2b00      	cmp	r3, #0
 800e24a:	d10a      	bne.n	800e262 <xQueueSemaphoreTake+0x32>
	__asm volatile
 800e24c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e250:	f383 8811 	msr	BASEPRI, r3
 800e254:	f3bf 8f6f 	isb	sy
 800e258:	f3bf 8f4f 	dsb	sy
 800e25c:	623b      	str	r3, [r7, #32]
}
 800e25e:	bf00      	nop
 800e260:	e7fe      	b.n	800e260 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800e262:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e264:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e266:	2b00      	cmp	r3, #0
 800e268:	d00a      	beq.n	800e280 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800e26a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e26e:	f383 8811 	msr	BASEPRI, r3
 800e272:	f3bf 8f6f 	isb	sy
 800e276:	f3bf 8f4f 	dsb	sy
 800e27a:	61fb      	str	r3, [r7, #28]
}
 800e27c:	bf00      	nop
 800e27e:	e7fe      	b.n	800e27e <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800e280:	f001 f97e 	bl	800f580 <xTaskGetSchedulerState>
 800e284:	4603      	mov	r3, r0
 800e286:	2b00      	cmp	r3, #0
 800e288:	d102      	bne.n	800e290 <xQueueSemaphoreTake+0x60>
 800e28a:	683b      	ldr	r3, [r7, #0]
 800e28c:	2b00      	cmp	r3, #0
 800e28e:	d101      	bne.n	800e294 <xQueueSemaphoreTake+0x64>
 800e290:	2301      	movs	r3, #1
 800e292:	e000      	b.n	800e296 <xQueueSemaphoreTake+0x66>
 800e294:	2300      	movs	r3, #0
 800e296:	2b00      	cmp	r3, #0
 800e298:	d10a      	bne.n	800e2b0 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800e29a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e29e:	f383 8811 	msr	BASEPRI, r3
 800e2a2:	f3bf 8f6f 	isb	sy
 800e2a6:	f3bf 8f4f 	dsb	sy
 800e2aa:	61bb      	str	r3, [r7, #24]
}
 800e2ac:	bf00      	nop
 800e2ae:	e7fe      	b.n	800e2ae <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800e2b0:	f001 ffc0 	bl	8010234 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800e2b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e2b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e2b8:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800e2ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e2bc:	2b00      	cmp	r3, #0
 800e2be:	d024      	beq.n	800e30a <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800e2c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e2c2:	1e5a      	subs	r2, r3, #1
 800e2c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e2c6:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800e2c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e2ca:	681b      	ldr	r3, [r3, #0]
 800e2cc:	2b00      	cmp	r3, #0
 800e2ce:	d104      	bne.n	800e2da <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800e2d0:	f001 facc 	bl	800f86c <pvTaskIncrementMutexHeldCount>
 800e2d4:	4602      	mov	r2, r0
 800e2d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e2d8:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e2da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e2dc:	691b      	ldr	r3, [r3, #16]
 800e2de:	2b00      	cmp	r3, #0
 800e2e0:	d00f      	beq.n	800e302 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e2e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e2e4:	3310      	adds	r3, #16
 800e2e6:	4618      	mov	r0, r3
 800e2e8:	f000 ff88 	bl	800f1fc <xTaskRemoveFromEventList>
 800e2ec:	4603      	mov	r3, r0
 800e2ee:	2b00      	cmp	r3, #0
 800e2f0:	d007      	beq.n	800e302 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800e2f2:	4b54      	ldr	r3, [pc, #336]	; (800e444 <xQueueSemaphoreTake+0x214>)
 800e2f4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e2f8:	601a      	str	r2, [r3, #0]
 800e2fa:	f3bf 8f4f 	dsb	sy
 800e2fe:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800e302:	f001 ffc7 	bl	8010294 <vPortExitCritical>
				return pdPASS;
 800e306:	2301      	movs	r3, #1
 800e308:	e097      	b.n	800e43a <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800e30a:	683b      	ldr	r3, [r7, #0]
 800e30c:	2b00      	cmp	r3, #0
 800e30e:	d111      	bne.n	800e334 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800e310:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e312:	2b00      	cmp	r3, #0
 800e314:	d00a      	beq.n	800e32c <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800e316:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e31a:	f383 8811 	msr	BASEPRI, r3
 800e31e:	f3bf 8f6f 	isb	sy
 800e322:	f3bf 8f4f 	dsb	sy
 800e326:	617b      	str	r3, [r7, #20]
}
 800e328:	bf00      	nop
 800e32a:	e7fe      	b.n	800e32a <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800e32c:	f001 ffb2 	bl	8010294 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800e330:	2300      	movs	r3, #0
 800e332:	e082      	b.n	800e43a <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800e334:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e336:	2b00      	cmp	r3, #0
 800e338:	d106      	bne.n	800e348 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800e33a:	f107 030c 	add.w	r3, r7, #12
 800e33e:	4618      	mov	r0, r3
 800e340:	f000 ffc0 	bl	800f2c4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800e344:	2301      	movs	r3, #1
 800e346:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800e348:	f001 ffa4 	bl	8010294 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800e34c:	f000 fd2c 	bl	800eda8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800e350:	f001 ff70 	bl	8010234 <vPortEnterCritical>
 800e354:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e356:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800e35a:	b25b      	sxtb	r3, r3
 800e35c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e360:	d103      	bne.n	800e36a <xQueueSemaphoreTake+0x13a>
 800e362:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e364:	2200      	movs	r2, #0
 800e366:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e36a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e36c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e370:	b25b      	sxtb	r3, r3
 800e372:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e376:	d103      	bne.n	800e380 <xQueueSemaphoreTake+0x150>
 800e378:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e37a:	2200      	movs	r2, #0
 800e37c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800e380:	f001 ff88 	bl	8010294 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800e384:	463a      	mov	r2, r7
 800e386:	f107 030c 	add.w	r3, r7, #12
 800e38a:	4611      	mov	r1, r2
 800e38c:	4618      	mov	r0, r3
 800e38e:	f000 ffaf 	bl	800f2f0 <xTaskCheckForTimeOut>
 800e392:	4603      	mov	r3, r0
 800e394:	2b00      	cmp	r3, #0
 800e396:	d132      	bne.n	800e3fe <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800e398:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e39a:	f000 f9f2 	bl	800e782 <prvIsQueueEmpty>
 800e39e:	4603      	mov	r3, r0
 800e3a0:	2b00      	cmp	r3, #0
 800e3a2:	d026      	beq.n	800e3f2 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800e3a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e3a6:	681b      	ldr	r3, [r3, #0]
 800e3a8:	2b00      	cmp	r3, #0
 800e3aa:	d109      	bne.n	800e3c0 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800e3ac:	f001 ff42 	bl	8010234 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800e3b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e3b2:	689b      	ldr	r3, [r3, #8]
 800e3b4:	4618      	mov	r0, r3
 800e3b6:	f001 f901 	bl	800f5bc <xTaskPriorityInherit>
 800e3ba:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800e3bc:	f001 ff6a 	bl	8010294 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800e3c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e3c2:	3324      	adds	r3, #36	; 0x24
 800e3c4:	683a      	ldr	r2, [r7, #0]
 800e3c6:	4611      	mov	r1, r2
 800e3c8:	4618      	mov	r0, r3
 800e3ca:	f000 fec7 	bl	800f15c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800e3ce:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e3d0:	f000 f985 	bl	800e6de <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800e3d4:	f000 fcf6 	bl	800edc4 <xTaskResumeAll>
 800e3d8:	4603      	mov	r3, r0
 800e3da:	2b00      	cmp	r3, #0
 800e3dc:	f47f af68 	bne.w	800e2b0 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800e3e0:	4b18      	ldr	r3, [pc, #96]	; (800e444 <xQueueSemaphoreTake+0x214>)
 800e3e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e3e6:	601a      	str	r2, [r3, #0]
 800e3e8:	f3bf 8f4f 	dsb	sy
 800e3ec:	f3bf 8f6f 	isb	sy
 800e3f0:	e75e      	b.n	800e2b0 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800e3f2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e3f4:	f000 f973 	bl	800e6de <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800e3f8:	f000 fce4 	bl	800edc4 <xTaskResumeAll>
 800e3fc:	e758      	b.n	800e2b0 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800e3fe:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e400:	f000 f96d 	bl	800e6de <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800e404:	f000 fcde 	bl	800edc4 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800e408:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e40a:	f000 f9ba 	bl	800e782 <prvIsQueueEmpty>
 800e40e:	4603      	mov	r3, r0
 800e410:	2b00      	cmp	r3, #0
 800e412:	f43f af4d 	beq.w	800e2b0 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800e416:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e418:	2b00      	cmp	r3, #0
 800e41a:	d00d      	beq.n	800e438 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800e41c:	f001 ff0a 	bl	8010234 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800e420:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e422:	f000 f8b4 	bl	800e58e <prvGetDisinheritPriorityAfterTimeout>
 800e426:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800e428:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e42a:	689b      	ldr	r3, [r3, #8]
 800e42c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800e42e:	4618      	mov	r0, r3
 800e430:	f001 f99a 	bl	800f768 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800e434:	f001 ff2e 	bl	8010294 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800e438:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800e43a:	4618      	mov	r0, r3
 800e43c:	3738      	adds	r7, #56	; 0x38
 800e43e:	46bd      	mov	sp, r7
 800e440:	bd80      	pop	{r7, pc}
 800e442:	bf00      	nop
 800e444:	e000ed04 	.word	0xe000ed04

0800e448 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800e448:	b580      	push	{r7, lr}
 800e44a:	b08e      	sub	sp, #56	; 0x38
 800e44c:	af00      	add	r7, sp, #0
 800e44e:	60f8      	str	r0, [r7, #12]
 800e450:	60b9      	str	r1, [r7, #8]
 800e452:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800e454:	68fb      	ldr	r3, [r7, #12]
 800e456:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800e458:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e45a:	2b00      	cmp	r3, #0
 800e45c:	d10a      	bne.n	800e474 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800e45e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e462:	f383 8811 	msr	BASEPRI, r3
 800e466:	f3bf 8f6f 	isb	sy
 800e46a:	f3bf 8f4f 	dsb	sy
 800e46e:	623b      	str	r3, [r7, #32]
}
 800e470:	bf00      	nop
 800e472:	e7fe      	b.n	800e472 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e474:	68bb      	ldr	r3, [r7, #8]
 800e476:	2b00      	cmp	r3, #0
 800e478:	d103      	bne.n	800e482 <xQueueReceiveFromISR+0x3a>
 800e47a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e47c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e47e:	2b00      	cmp	r3, #0
 800e480:	d101      	bne.n	800e486 <xQueueReceiveFromISR+0x3e>
 800e482:	2301      	movs	r3, #1
 800e484:	e000      	b.n	800e488 <xQueueReceiveFromISR+0x40>
 800e486:	2300      	movs	r3, #0
 800e488:	2b00      	cmp	r3, #0
 800e48a:	d10a      	bne.n	800e4a2 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800e48c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e490:	f383 8811 	msr	BASEPRI, r3
 800e494:	f3bf 8f6f 	isb	sy
 800e498:	f3bf 8f4f 	dsb	sy
 800e49c:	61fb      	str	r3, [r7, #28]
}
 800e49e:	bf00      	nop
 800e4a0:	e7fe      	b.n	800e4a0 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800e4a2:	f001 ffa9 	bl	80103f8 <vPortValidateInterruptPriority>
	__asm volatile
 800e4a6:	f3ef 8211 	mrs	r2, BASEPRI
 800e4aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e4ae:	f383 8811 	msr	BASEPRI, r3
 800e4b2:	f3bf 8f6f 	isb	sy
 800e4b6:	f3bf 8f4f 	dsb	sy
 800e4ba:	61ba      	str	r2, [r7, #24]
 800e4bc:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800e4be:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800e4c0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e4c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e4c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e4c6:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800e4c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e4ca:	2b00      	cmp	r3, #0
 800e4cc:	d02f      	beq.n	800e52e <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800e4ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e4d0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800e4d4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800e4d8:	68b9      	ldr	r1, [r7, #8]
 800e4da:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e4dc:	f000 f8d9 	bl	800e692 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800e4e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e4e2:	1e5a      	subs	r2, r3, #1
 800e4e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e4e6:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800e4e8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800e4ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e4f0:	d112      	bne.n	800e518 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e4f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e4f4:	691b      	ldr	r3, [r3, #16]
 800e4f6:	2b00      	cmp	r3, #0
 800e4f8:	d016      	beq.n	800e528 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e4fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e4fc:	3310      	adds	r3, #16
 800e4fe:	4618      	mov	r0, r3
 800e500:	f000 fe7c 	bl	800f1fc <xTaskRemoveFromEventList>
 800e504:	4603      	mov	r3, r0
 800e506:	2b00      	cmp	r3, #0
 800e508:	d00e      	beq.n	800e528 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800e50a:	687b      	ldr	r3, [r7, #4]
 800e50c:	2b00      	cmp	r3, #0
 800e50e:	d00b      	beq.n	800e528 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800e510:	687b      	ldr	r3, [r7, #4]
 800e512:	2201      	movs	r2, #1
 800e514:	601a      	str	r2, [r3, #0]
 800e516:	e007      	b.n	800e528 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800e518:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e51c:	3301      	adds	r3, #1
 800e51e:	b2db      	uxtb	r3, r3
 800e520:	b25a      	sxtb	r2, r3
 800e522:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e524:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800e528:	2301      	movs	r3, #1
 800e52a:	637b      	str	r3, [r7, #52]	; 0x34
 800e52c:	e001      	b.n	800e532 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800e52e:	2300      	movs	r3, #0
 800e530:	637b      	str	r3, [r7, #52]	; 0x34
 800e532:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e534:	613b      	str	r3, [r7, #16]
	__asm volatile
 800e536:	693b      	ldr	r3, [r7, #16]
 800e538:	f383 8811 	msr	BASEPRI, r3
}
 800e53c:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800e53e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800e540:	4618      	mov	r0, r3
 800e542:	3738      	adds	r7, #56	; 0x38
 800e544:	46bd      	mov	sp, r7
 800e546:	bd80      	pop	{r7, pc}

0800e548 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800e548:	b580      	push	{r7, lr}
 800e54a:	b084      	sub	sp, #16
 800e54c:	af00      	add	r7, sp, #0
 800e54e:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800e550:	687b      	ldr	r3, [r7, #4]
 800e552:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800e554:	68fb      	ldr	r3, [r7, #12]
 800e556:	2b00      	cmp	r3, #0
 800e558:	d10a      	bne.n	800e570 <vQueueDelete+0x28>
	__asm volatile
 800e55a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e55e:	f383 8811 	msr	BASEPRI, r3
 800e562:	f3bf 8f6f 	isb	sy
 800e566:	f3bf 8f4f 	dsb	sy
 800e56a:	60bb      	str	r3, [r7, #8]
}
 800e56c:	bf00      	nop
 800e56e:	e7fe      	b.n	800e56e <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800e570:	68f8      	ldr	r0, [r7, #12]
 800e572:	f000 f95f 	bl	800e834 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800e576:	68fb      	ldr	r3, [r7, #12]
 800e578:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800e57c:	2b00      	cmp	r3, #0
 800e57e:	d102      	bne.n	800e586 <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 800e580:	68f8      	ldr	r0, [r7, #12]
 800e582:	f002 f845 	bl	8010610 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800e586:	bf00      	nop
 800e588:	3710      	adds	r7, #16
 800e58a:	46bd      	mov	sp, r7
 800e58c:	bd80      	pop	{r7, pc}

0800e58e <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800e58e:	b480      	push	{r7}
 800e590:	b085      	sub	sp, #20
 800e592:	af00      	add	r7, sp, #0
 800e594:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800e596:	687b      	ldr	r3, [r7, #4]
 800e598:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e59a:	2b00      	cmp	r3, #0
 800e59c:	d006      	beq.n	800e5ac <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800e59e:	687b      	ldr	r3, [r7, #4]
 800e5a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e5a2:	681b      	ldr	r3, [r3, #0]
 800e5a4:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800e5a8:	60fb      	str	r3, [r7, #12]
 800e5aa:	e001      	b.n	800e5b0 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800e5ac:	2300      	movs	r3, #0
 800e5ae:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800e5b0:	68fb      	ldr	r3, [r7, #12]
	}
 800e5b2:	4618      	mov	r0, r3
 800e5b4:	3714      	adds	r7, #20
 800e5b6:	46bd      	mov	sp, r7
 800e5b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5bc:	4770      	bx	lr

0800e5be <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800e5be:	b580      	push	{r7, lr}
 800e5c0:	b086      	sub	sp, #24
 800e5c2:	af00      	add	r7, sp, #0
 800e5c4:	60f8      	str	r0, [r7, #12]
 800e5c6:	60b9      	str	r1, [r7, #8]
 800e5c8:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800e5ca:	2300      	movs	r3, #0
 800e5cc:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e5ce:	68fb      	ldr	r3, [r7, #12]
 800e5d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e5d2:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800e5d4:	68fb      	ldr	r3, [r7, #12]
 800e5d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e5d8:	2b00      	cmp	r3, #0
 800e5da:	d10d      	bne.n	800e5f8 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800e5dc:	68fb      	ldr	r3, [r7, #12]
 800e5de:	681b      	ldr	r3, [r3, #0]
 800e5e0:	2b00      	cmp	r3, #0
 800e5e2:	d14d      	bne.n	800e680 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800e5e4:	68fb      	ldr	r3, [r7, #12]
 800e5e6:	689b      	ldr	r3, [r3, #8]
 800e5e8:	4618      	mov	r0, r3
 800e5ea:	f001 f84f 	bl	800f68c <xTaskPriorityDisinherit>
 800e5ee:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800e5f0:	68fb      	ldr	r3, [r7, #12]
 800e5f2:	2200      	movs	r2, #0
 800e5f4:	609a      	str	r2, [r3, #8]
 800e5f6:	e043      	b.n	800e680 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800e5f8:	687b      	ldr	r3, [r7, #4]
 800e5fa:	2b00      	cmp	r3, #0
 800e5fc:	d119      	bne.n	800e632 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800e5fe:	68fb      	ldr	r3, [r7, #12]
 800e600:	6858      	ldr	r0, [r3, #4]
 800e602:	68fb      	ldr	r3, [r7, #12]
 800e604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e606:	461a      	mov	r2, r3
 800e608:	68b9      	ldr	r1, [r7, #8]
 800e60a:	f018 ff05 	bl	8027418 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800e60e:	68fb      	ldr	r3, [r7, #12]
 800e610:	685a      	ldr	r2, [r3, #4]
 800e612:	68fb      	ldr	r3, [r7, #12]
 800e614:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e616:	441a      	add	r2, r3
 800e618:	68fb      	ldr	r3, [r7, #12]
 800e61a:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800e61c:	68fb      	ldr	r3, [r7, #12]
 800e61e:	685a      	ldr	r2, [r3, #4]
 800e620:	68fb      	ldr	r3, [r7, #12]
 800e622:	689b      	ldr	r3, [r3, #8]
 800e624:	429a      	cmp	r2, r3
 800e626:	d32b      	bcc.n	800e680 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800e628:	68fb      	ldr	r3, [r7, #12]
 800e62a:	681a      	ldr	r2, [r3, #0]
 800e62c:	68fb      	ldr	r3, [r7, #12]
 800e62e:	605a      	str	r2, [r3, #4]
 800e630:	e026      	b.n	800e680 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800e632:	68fb      	ldr	r3, [r7, #12]
 800e634:	68d8      	ldr	r0, [r3, #12]
 800e636:	68fb      	ldr	r3, [r7, #12]
 800e638:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e63a:	461a      	mov	r2, r3
 800e63c:	68b9      	ldr	r1, [r7, #8]
 800e63e:	f018 feeb 	bl	8027418 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800e642:	68fb      	ldr	r3, [r7, #12]
 800e644:	68da      	ldr	r2, [r3, #12]
 800e646:	68fb      	ldr	r3, [r7, #12]
 800e648:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e64a:	425b      	negs	r3, r3
 800e64c:	441a      	add	r2, r3
 800e64e:	68fb      	ldr	r3, [r7, #12]
 800e650:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800e652:	68fb      	ldr	r3, [r7, #12]
 800e654:	68da      	ldr	r2, [r3, #12]
 800e656:	68fb      	ldr	r3, [r7, #12]
 800e658:	681b      	ldr	r3, [r3, #0]
 800e65a:	429a      	cmp	r2, r3
 800e65c:	d207      	bcs.n	800e66e <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800e65e:	68fb      	ldr	r3, [r7, #12]
 800e660:	689a      	ldr	r2, [r3, #8]
 800e662:	68fb      	ldr	r3, [r7, #12]
 800e664:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e666:	425b      	negs	r3, r3
 800e668:	441a      	add	r2, r3
 800e66a:	68fb      	ldr	r3, [r7, #12]
 800e66c:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800e66e:	687b      	ldr	r3, [r7, #4]
 800e670:	2b02      	cmp	r3, #2
 800e672:	d105      	bne.n	800e680 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800e674:	693b      	ldr	r3, [r7, #16]
 800e676:	2b00      	cmp	r3, #0
 800e678:	d002      	beq.n	800e680 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800e67a:	693b      	ldr	r3, [r7, #16]
 800e67c:	3b01      	subs	r3, #1
 800e67e:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800e680:	693b      	ldr	r3, [r7, #16]
 800e682:	1c5a      	adds	r2, r3, #1
 800e684:	68fb      	ldr	r3, [r7, #12]
 800e686:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800e688:	697b      	ldr	r3, [r7, #20]
}
 800e68a:	4618      	mov	r0, r3
 800e68c:	3718      	adds	r7, #24
 800e68e:	46bd      	mov	sp, r7
 800e690:	bd80      	pop	{r7, pc}

0800e692 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800e692:	b580      	push	{r7, lr}
 800e694:	b082      	sub	sp, #8
 800e696:	af00      	add	r7, sp, #0
 800e698:	6078      	str	r0, [r7, #4]
 800e69a:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800e69c:	687b      	ldr	r3, [r7, #4]
 800e69e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e6a0:	2b00      	cmp	r3, #0
 800e6a2:	d018      	beq.n	800e6d6 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800e6a4:	687b      	ldr	r3, [r7, #4]
 800e6a6:	68da      	ldr	r2, [r3, #12]
 800e6a8:	687b      	ldr	r3, [r7, #4]
 800e6aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e6ac:	441a      	add	r2, r3
 800e6ae:	687b      	ldr	r3, [r7, #4]
 800e6b0:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800e6b2:	687b      	ldr	r3, [r7, #4]
 800e6b4:	68da      	ldr	r2, [r3, #12]
 800e6b6:	687b      	ldr	r3, [r7, #4]
 800e6b8:	689b      	ldr	r3, [r3, #8]
 800e6ba:	429a      	cmp	r2, r3
 800e6bc:	d303      	bcc.n	800e6c6 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800e6be:	687b      	ldr	r3, [r7, #4]
 800e6c0:	681a      	ldr	r2, [r3, #0]
 800e6c2:	687b      	ldr	r3, [r7, #4]
 800e6c4:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800e6c6:	687b      	ldr	r3, [r7, #4]
 800e6c8:	68d9      	ldr	r1, [r3, #12]
 800e6ca:	687b      	ldr	r3, [r7, #4]
 800e6cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e6ce:	461a      	mov	r2, r3
 800e6d0:	6838      	ldr	r0, [r7, #0]
 800e6d2:	f018 fea1 	bl	8027418 <memcpy>
	}
}
 800e6d6:	bf00      	nop
 800e6d8:	3708      	adds	r7, #8
 800e6da:	46bd      	mov	sp, r7
 800e6dc:	bd80      	pop	{r7, pc}

0800e6de <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800e6de:	b580      	push	{r7, lr}
 800e6e0:	b084      	sub	sp, #16
 800e6e2:	af00      	add	r7, sp, #0
 800e6e4:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800e6e6:	f001 fda5 	bl	8010234 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800e6ea:	687b      	ldr	r3, [r7, #4]
 800e6ec:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e6f0:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800e6f2:	e011      	b.n	800e718 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e6f4:	687b      	ldr	r3, [r7, #4]
 800e6f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e6f8:	2b00      	cmp	r3, #0
 800e6fa:	d012      	beq.n	800e722 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e6fc:	687b      	ldr	r3, [r7, #4]
 800e6fe:	3324      	adds	r3, #36	; 0x24
 800e700:	4618      	mov	r0, r3
 800e702:	f000 fd7b 	bl	800f1fc <xTaskRemoveFromEventList>
 800e706:	4603      	mov	r3, r0
 800e708:	2b00      	cmp	r3, #0
 800e70a:	d001      	beq.n	800e710 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800e70c:	f000 fe52 	bl	800f3b4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800e710:	7bfb      	ldrb	r3, [r7, #15]
 800e712:	3b01      	subs	r3, #1
 800e714:	b2db      	uxtb	r3, r3
 800e716:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800e718:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e71c:	2b00      	cmp	r3, #0
 800e71e:	dce9      	bgt.n	800e6f4 <prvUnlockQueue+0x16>
 800e720:	e000      	b.n	800e724 <prvUnlockQueue+0x46>
					break;
 800e722:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800e724:	687b      	ldr	r3, [r7, #4]
 800e726:	22ff      	movs	r2, #255	; 0xff
 800e728:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800e72c:	f001 fdb2 	bl	8010294 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800e730:	f001 fd80 	bl	8010234 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800e734:	687b      	ldr	r3, [r7, #4]
 800e736:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800e73a:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800e73c:	e011      	b.n	800e762 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e73e:	687b      	ldr	r3, [r7, #4]
 800e740:	691b      	ldr	r3, [r3, #16]
 800e742:	2b00      	cmp	r3, #0
 800e744:	d012      	beq.n	800e76c <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e746:	687b      	ldr	r3, [r7, #4]
 800e748:	3310      	adds	r3, #16
 800e74a:	4618      	mov	r0, r3
 800e74c:	f000 fd56 	bl	800f1fc <xTaskRemoveFromEventList>
 800e750:	4603      	mov	r3, r0
 800e752:	2b00      	cmp	r3, #0
 800e754:	d001      	beq.n	800e75a <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800e756:	f000 fe2d 	bl	800f3b4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800e75a:	7bbb      	ldrb	r3, [r7, #14]
 800e75c:	3b01      	subs	r3, #1
 800e75e:	b2db      	uxtb	r3, r3
 800e760:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800e762:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e766:	2b00      	cmp	r3, #0
 800e768:	dce9      	bgt.n	800e73e <prvUnlockQueue+0x60>
 800e76a:	e000      	b.n	800e76e <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800e76c:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800e76e:	687b      	ldr	r3, [r7, #4]
 800e770:	22ff      	movs	r2, #255	; 0xff
 800e772:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800e776:	f001 fd8d 	bl	8010294 <vPortExitCritical>
}
 800e77a:	bf00      	nop
 800e77c:	3710      	adds	r7, #16
 800e77e:	46bd      	mov	sp, r7
 800e780:	bd80      	pop	{r7, pc}

0800e782 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800e782:	b580      	push	{r7, lr}
 800e784:	b084      	sub	sp, #16
 800e786:	af00      	add	r7, sp, #0
 800e788:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800e78a:	f001 fd53 	bl	8010234 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800e78e:	687b      	ldr	r3, [r7, #4]
 800e790:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e792:	2b00      	cmp	r3, #0
 800e794:	d102      	bne.n	800e79c <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800e796:	2301      	movs	r3, #1
 800e798:	60fb      	str	r3, [r7, #12]
 800e79a:	e001      	b.n	800e7a0 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800e79c:	2300      	movs	r3, #0
 800e79e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800e7a0:	f001 fd78 	bl	8010294 <vPortExitCritical>

	return xReturn;
 800e7a4:	68fb      	ldr	r3, [r7, #12]
}
 800e7a6:	4618      	mov	r0, r3
 800e7a8:	3710      	adds	r7, #16
 800e7aa:	46bd      	mov	sp, r7
 800e7ac:	bd80      	pop	{r7, pc}

0800e7ae <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800e7ae:	b580      	push	{r7, lr}
 800e7b0:	b084      	sub	sp, #16
 800e7b2:	af00      	add	r7, sp, #0
 800e7b4:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800e7b6:	f001 fd3d 	bl	8010234 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800e7ba:	687b      	ldr	r3, [r7, #4]
 800e7bc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e7be:	687b      	ldr	r3, [r7, #4]
 800e7c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e7c2:	429a      	cmp	r2, r3
 800e7c4:	d102      	bne.n	800e7cc <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800e7c6:	2301      	movs	r3, #1
 800e7c8:	60fb      	str	r3, [r7, #12]
 800e7ca:	e001      	b.n	800e7d0 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800e7cc:	2300      	movs	r3, #0
 800e7ce:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800e7d0:	f001 fd60 	bl	8010294 <vPortExitCritical>

	return xReturn;
 800e7d4:	68fb      	ldr	r3, [r7, #12]
}
 800e7d6:	4618      	mov	r0, r3
 800e7d8:	3710      	adds	r7, #16
 800e7da:	46bd      	mov	sp, r7
 800e7dc:	bd80      	pop	{r7, pc}
	...

0800e7e0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800e7e0:	b480      	push	{r7}
 800e7e2:	b085      	sub	sp, #20
 800e7e4:	af00      	add	r7, sp, #0
 800e7e6:	6078      	str	r0, [r7, #4]
 800e7e8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800e7ea:	2300      	movs	r3, #0
 800e7ec:	60fb      	str	r3, [r7, #12]
 800e7ee:	e014      	b.n	800e81a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800e7f0:	4a0f      	ldr	r2, [pc, #60]	; (800e830 <vQueueAddToRegistry+0x50>)
 800e7f2:	68fb      	ldr	r3, [r7, #12]
 800e7f4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800e7f8:	2b00      	cmp	r3, #0
 800e7fa:	d10b      	bne.n	800e814 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800e7fc:	490c      	ldr	r1, [pc, #48]	; (800e830 <vQueueAddToRegistry+0x50>)
 800e7fe:	68fb      	ldr	r3, [r7, #12]
 800e800:	683a      	ldr	r2, [r7, #0]
 800e802:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800e806:	4a0a      	ldr	r2, [pc, #40]	; (800e830 <vQueueAddToRegistry+0x50>)
 800e808:	68fb      	ldr	r3, [r7, #12]
 800e80a:	00db      	lsls	r3, r3, #3
 800e80c:	4413      	add	r3, r2
 800e80e:	687a      	ldr	r2, [r7, #4]
 800e810:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800e812:	e006      	b.n	800e822 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800e814:	68fb      	ldr	r3, [r7, #12]
 800e816:	3301      	adds	r3, #1
 800e818:	60fb      	str	r3, [r7, #12]
 800e81a:	68fb      	ldr	r3, [r7, #12]
 800e81c:	2b07      	cmp	r3, #7
 800e81e:	d9e7      	bls.n	800e7f0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800e820:	bf00      	nop
 800e822:	bf00      	nop
 800e824:	3714      	adds	r7, #20
 800e826:	46bd      	mov	sp, r7
 800e828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e82c:	4770      	bx	lr
 800e82e:	bf00      	nop
 800e830:	20000fb8 	.word	0x20000fb8

0800e834 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800e834:	b480      	push	{r7}
 800e836:	b085      	sub	sp, #20
 800e838:	af00      	add	r7, sp, #0
 800e83a:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800e83c:	2300      	movs	r3, #0
 800e83e:	60fb      	str	r3, [r7, #12]
 800e840:	e016      	b.n	800e870 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800e842:	4a10      	ldr	r2, [pc, #64]	; (800e884 <vQueueUnregisterQueue+0x50>)
 800e844:	68fb      	ldr	r3, [r7, #12]
 800e846:	00db      	lsls	r3, r3, #3
 800e848:	4413      	add	r3, r2
 800e84a:	685b      	ldr	r3, [r3, #4]
 800e84c:	687a      	ldr	r2, [r7, #4]
 800e84e:	429a      	cmp	r2, r3
 800e850:	d10b      	bne.n	800e86a <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800e852:	4a0c      	ldr	r2, [pc, #48]	; (800e884 <vQueueUnregisterQueue+0x50>)
 800e854:	68fb      	ldr	r3, [r7, #12]
 800e856:	2100      	movs	r1, #0
 800e858:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800e85c:	4a09      	ldr	r2, [pc, #36]	; (800e884 <vQueueUnregisterQueue+0x50>)
 800e85e:	68fb      	ldr	r3, [r7, #12]
 800e860:	00db      	lsls	r3, r3, #3
 800e862:	4413      	add	r3, r2
 800e864:	2200      	movs	r2, #0
 800e866:	605a      	str	r2, [r3, #4]
				break;
 800e868:	e006      	b.n	800e878 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800e86a:	68fb      	ldr	r3, [r7, #12]
 800e86c:	3301      	adds	r3, #1
 800e86e:	60fb      	str	r3, [r7, #12]
 800e870:	68fb      	ldr	r3, [r7, #12]
 800e872:	2b07      	cmp	r3, #7
 800e874:	d9e5      	bls.n	800e842 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800e876:	bf00      	nop
 800e878:	bf00      	nop
 800e87a:	3714      	adds	r7, #20
 800e87c:	46bd      	mov	sp, r7
 800e87e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e882:	4770      	bx	lr
 800e884:	20000fb8 	.word	0x20000fb8

0800e888 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800e888:	b580      	push	{r7, lr}
 800e88a:	b086      	sub	sp, #24
 800e88c:	af00      	add	r7, sp, #0
 800e88e:	60f8      	str	r0, [r7, #12]
 800e890:	60b9      	str	r1, [r7, #8]
 800e892:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800e894:	68fb      	ldr	r3, [r7, #12]
 800e896:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800e898:	f001 fccc 	bl	8010234 <vPortEnterCritical>
 800e89c:	697b      	ldr	r3, [r7, #20]
 800e89e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800e8a2:	b25b      	sxtb	r3, r3
 800e8a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e8a8:	d103      	bne.n	800e8b2 <vQueueWaitForMessageRestricted+0x2a>
 800e8aa:	697b      	ldr	r3, [r7, #20]
 800e8ac:	2200      	movs	r2, #0
 800e8ae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e8b2:	697b      	ldr	r3, [r7, #20]
 800e8b4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e8b8:	b25b      	sxtb	r3, r3
 800e8ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e8be:	d103      	bne.n	800e8c8 <vQueueWaitForMessageRestricted+0x40>
 800e8c0:	697b      	ldr	r3, [r7, #20]
 800e8c2:	2200      	movs	r2, #0
 800e8c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800e8c8:	f001 fce4 	bl	8010294 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800e8cc:	697b      	ldr	r3, [r7, #20]
 800e8ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e8d0:	2b00      	cmp	r3, #0
 800e8d2:	d106      	bne.n	800e8e2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800e8d4:	697b      	ldr	r3, [r7, #20]
 800e8d6:	3324      	adds	r3, #36	; 0x24
 800e8d8:	687a      	ldr	r2, [r7, #4]
 800e8da:	68b9      	ldr	r1, [r7, #8]
 800e8dc:	4618      	mov	r0, r3
 800e8de:	f000 fc61 	bl	800f1a4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800e8e2:	6978      	ldr	r0, [r7, #20]
 800e8e4:	f7ff fefb 	bl	800e6de <prvUnlockQueue>
	}
 800e8e8:	bf00      	nop
 800e8ea:	3718      	adds	r7, #24
 800e8ec:	46bd      	mov	sp, r7
 800e8ee:	bd80      	pop	{r7, pc}

0800e8f0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800e8f0:	b580      	push	{r7, lr}
 800e8f2:	b08e      	sub	sp, #56	; 0x38
 800e8f4:	af04      	add	r7, sp, #16
 800e8f6:	60f8      	str	r0, [r7, #12]
 800e8f8:	60b9      	str	r1, [r7, #8]
 800e8fa:	607a      	str	r2, [r7, #4]
 800e8fc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800e8fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e900:	2b00      	cmp	r3, #0
 800e902:	d10a      	bne.n	800e91a <xTaskCreateStatic+0x2a>
	__asm volatile
 800e904:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e908:	f383 8811 	msr	BASEPRI, r3
 800e90c:	f3bf 8f6f 	isb	sy
 800e910:	f3bf 8f4f 	dsb	sy
 800e914:	623b      	str	r3, [r7, #32]
}
 800e916:	bf00      	nop
 800e918:	e7fe      	b.n	800e918 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800e91a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e91c:	2b00      	cmp	r3, #0
 800e91e:	d10a      	bne.n	800e936 <xTaskCreateStatic+0x46>
	__asm volatile
 800e920:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e924:	f383 8811 	msr	BASEPRI, r3
 800e928:	f3bf 8f6f 	isb	sy
 800e92c:	f3bf 8f4f 	dsb	sy
 800e930:	61fb      	str	r3, [r7, #28]
}
 800e932:	bf00      	nop
 800e934:	e7fe      	b.n	800e934 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800e936:	23bc      	movs	r3, #188	; 0xbc
 800e938:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800e93a:	693b      	ldr	r3, [r7, #16]
 800e93c:	2bbc      	cmp	r3, #188	; 0xbc
 800e93e:	d00a      	beq.n	800e956 <xTaskCreateStatic+0x66>
	__asm volatile
 800e940:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e944:	f383 8811 	msr	BASEPRI, r3
 800e948:	f3bf 8f6f 	isb	sy
 800e94c:	f3bf 8f4f 	dsb	sy
 800e950:	61bb      	str	r3, [r7, #24]
}
 800e952:	bf00      	nop
 800e954:	e7fe      	b.n	800e954 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800e956:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800e958:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e95a:	2b00      	cmp	r3, #0
 800e95c:	d01e      	beq.n	800e99c <xTaskCreateStatic+0xac>
 800e95e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e960:	2b00      	cmp	r3, #0
 800e962:	d01b      	beq.n	800e99c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800e964:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e966:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800e968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e96a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e96c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800e96e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e970:	2202      	movs	r2, #2
 800e972:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800e976:	2300      	movs	r3, #0
 800e978:	9303      	str	r3, [sp, #12]
 800e97a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e97c:	9302      	str	r3, [sp, #8]
 800e97e:	f107 0314 	add.w	r3, r7, #20
 800e982:	9301      	str	r3, [sp, #4]
 800e984:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e986:	9300      	str	r3, [sp, #0]
 800e988:	683b      	ldr	r3, [r7, #0]
 800e98a:	687a      	ldr	r2, [r7, #4]
 800e98c:	68b9      	ldr	r1, [r7, #8]
 800e98e:	68f8      	ldr	r0, [r7, #12]
 800e990:	f000 f850 	bl	800ea34 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800e994:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e996:	f000 f8f3 	bl	800eb80 <prvAddNewTaskToReadyList>
 800e99a:	e001      	b.n	800e9a0 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800e99c:	2300      	movs	r3, #0
 800e99e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800e9a0:	697b      	ldr	r3, [r7, #20]
	}
 800e9a2:	4618      	mov	r0, r3
 800e9a4:	3728      	adds	r7, #40	; 0x28
 800e9a6:	46bd      	mov	sp, r7
 800e9a8:	bd80      	pop	{r7, pc}

0800e9aa <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800e9aa:	b580      	push	{r7, lr}
 800e9ac:	b08c      	sub	sp, #48	; 0x30
 800e9ae:	af04      	add	r7, sp, #16
 800e9b0:	60f8      	str	r0, [r7, #12]
 800e9b2:	60b9      	str	r1, [r7, #8]
 800e9b4:	603b      	str	r3, [r7, #0]
 800e9b6:	4613      	mov	r3, r2
 800e9b8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800e9ba:	88fb      	ldrh	r3, [r7, #6]
 800e9bc:	009b      	lsls	r3, r3, #2
 800e9be:	4618      	mov	r0, r3
 800e9c0:	f001 fd5a 	bl	8010478 <pvPortMalloc>
 800e9c4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800e9c6:	697b      	ldr	r3, [r7, #20]
 800e9c8:	2b00      	cmp	r3, #0
 800e9ca:	d00e      	beq.n	800e9ea <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800e9cc:	20bc      	movs	r0, #188	; 0xbc
 800e9ce:	f001 fd53 	bl	8010478 <pvPortMalloc>
 800e9d2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800e9d4:	69fb      	ldr	r3, [r7, #28]
 800e9d6:	2b00      	cmp	r3, #0
 800e9d8:	d003      	beq.n	800e9e2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800e9da:	69fb      	ldr	r3, [r7, #28]
 800e9dc:	697a      	ldr	r2, [r7, #20]
 800e9de:	631a      	str	r2, [r3, #48]	; 0x30
 800e9e0:	e005      	b.n	800e9ee <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800e9e2:	6978      	ldr	r0, [r7, #20]
 800e9e4:	f001 fe14 	bl	8010610 <vPortFree>
 800e9e8:	e001      	b.n	800e9ee <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800e9ea:	2300      	movs	r3, #0
 800e9ec:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800e9ee:	69fb      	ldr	r3, [r7, #28]
 800e9f0:	2b00      	cmp	r3, #0
 800e9f2:	d017      	beq.n	800ea24 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800e9f4:	69fb      	ldr	r3, [r7, #28]
 800e9f6:	2200      	movs	r2, #0
 800e9f8:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800e9fc:	88fa      	ldrh	r2, [r7, #6]
 800e9fe:	2300      	movs	r3, #0
 800ea00:	9303      	str	r3, [sp, #12]
 800ea02:	69fb      	ldr	r3, [r7, #28]
 800ea04:	9302      	str	r3, [sp, #8]
 800ea06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea08:	9301      	str	r3, [sp, #4]
 800ea0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea0c:	9300      	str	r3, [sp, #0]
 800ea0e:	683b      	ldr	r3, [r7, #0]
 800ea10:	68b9      	ldr	r1, [r7, #8]
 800ea12:	68f8      	ldr	r0, [r7, #12]
 800ea14:	f000 f80e 	bl	800ea34 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800ea18:	69f8      	ldr	r0, [r7, #28]
 800ea1a:	f000 f8b1 	bl	800eb80 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800ea1e:	2301      	movs	r3, #1
 800ea20:	61bb      	str	r3, [r7, #24]
 800ea22:	e002      	b.n	800ea2a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800ea24:	f04f 33ff 	mov.w	r3, #4294967295
 800ea28:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800ea2a:	69bb      	ldr	r3, [r7, #24]
	}
 800ea2c:	4618      	mov	r0, r3
 800ea2e:	3720      	adds	r7, #32
 800ea30:	46bd      	mov	sp, r7
 800ea32:	bd80      	pop	{r7, pc}

0800ea34 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800ea34:	b580      	push	{r7, lr}
 800ea36:	b088      	sub	sp, #32
 800ea38:	af00      	add	r7, sp, #0
 800ea3a:	60f8      	str	r0, [r7, #12]
 800ea3c:	60b9      	str	r1, [r7, #8]
 800ea3e:	607a      	str	r2, [r7, #4]
 800ea40:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800ea42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea44:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800ea46:	687b      	ldr	r3, [r7, #4]
 800ea48:	009b      	lsls	r3, r3, #2
 800ea4a:	461a      	mov	r2, r3
 800ea4c:	21a5      	movs	r1, #165	; 0xa5
 800ea4e:	f018 fcf1 	bl	8027434 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800ea52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea54:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ea56:	6879      	ldr	r1, [r7, #4]
 800ea58:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800ea5c:	440b      	add	r3, r1
 800ea5e:	009b      	lsls	r3, r3, #2
 800ea60:	4413      	add	r3, r2
 800ea62:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800ea64:	69bb      	ldr	r3, [r7, #24]
 800ea66:	f023 0307 	bic.w	r3, r3, #7
 800ea6a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800ea6c:	69bb      	ldr	r3, [r7, #24]
 800ea6e:	f003 0307 	and.w	r3, r3, #7
 800ea72:	2b00      	cmp	r3, #0
 800ea74:	d00a      	beq.n	800ea8c <prvInitialiseNewTask+0x58>
	__asm volatile
 800ea76:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ea7a:	f383 8811 	msr	BASEPRI, r3
 800ea7e:	f3bf 8f6f 	isb	sy
 800ea82:	f3bf 8f4f 	dsb	sy
 800ea86:	617b      	str	r3, [r7, #20]
}
 800ea88:	bf00      	nop
 800ea8a:	e7fe      	b.n	800ea8a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800ea8c:	68bb      	ldr	r3, [r7, #8]
 800ea8e:	2b00      	cmp	r3, #0
 800ea90:	d01f      	beq.n	800ead2 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800ea92:	2300      	movs	r3, #0
 800ea94:	61fb      	str	r3, [r7, #28]
 800ea96:	e012      	b.n	800eabe <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800ea98:	68ba      	ldr	r2, [r7, #8]
 800ea9a:	69fb      	ldr	r3, [r7, #28]
 800ea9c:	4413      	add	r3, r2
 800ea9e:	7819      	ldrb	r1, [r3, #0]
 800eaa0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800eaa2:	69fb      	ldr	r3, [r7, #28]
 800eaa4:	4413      	add	r3, r2
 800eaa6:	3334      	adds	r3, #52	; 0x34
 800eaa8:	460a      	mov	r2, r1
 800eaaa:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800eaac:	68ba      	ldr	r2, [r7, #8]
 800eaae:	69fb      	ldr	r3, [r7, #28]
 800eab0:	4413      	add	r3, r2
 800eab2:	781b      	ldrb	r3, [r3, #0]
 800eab4:	2b00      	cmp	r3, #0
 800eab6:	d006      	beq.n	800eac6 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800eab8:	69fb      	ldr	r3, [r7, #28]
 800eaba:	3301      	adds	r3, #1
 800eabc:	61fb      	str	r3, [r7, #28]
 800eabe:	69fb      	ldr	r3, [r7, #28]
 800eac0:	2b0f      	cmp	r3, #15
 800eac2:	d9e9      	bls.n	800ea98 <prvInitialiseNewTask+0x64>
 800eac4:	e000      	b.n	800eac8 <prvInitialiseNewTask+0x94>
			{
				break;
 800eac6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800eac8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eaca:	2200      	movs	r2, #0
 800eacc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800ead0:	e003      	b.n	800eada <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800ead2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ead4:	2200      	movs	r2, #0
 800ead6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800eada:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eadc:	2b37      	cmp	r3, #55	; 0x37
 800eade:	d901      	bls.n	800eae4 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800eae0:	2337      	movs	r3, #55	; 0x37
 800eae2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800eae4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eae6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800eae8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800eaea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eaec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800eaee:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800eaf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eaf2:	2200      	movs	r2, #0
 800eaf4:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800eaf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eaf8:	3304      	adds	r3, #4
 800eafa:	4618      	mov	r0, r3
 800eafc:	f7fe fe56 	bl	800d7ac <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800eb00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb02:	3318      	adds	r3, #24
 800eb04:	4618      	mov	r0, r3
 800eb06:	f7fe fe51 	bl	800d7ac <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800eb0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb0c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800eb0e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800eb10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb12:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800eb16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb18:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800eb1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb1c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800eb1e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800eb20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb22:	2200      	movs	r2, #0
 800eb24:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800eb28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb2a:	2200      	movs	r2, #0
 800eb2c:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800eb30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb32:	3354      	adds	r3, #84	; 0x54
 800eb34:	2260      	movs	r2, #96	; 0x60
 800eb36:	2100      	movs	r1, #0
 800eb38:	4618      	mov	r0, r3
 800eb3a:	f018 fc7b 	bl	8027434 <memset>
 800eb3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb40:	4a0c      	ldr	r2, [pc, #48]	; (800eb74 <prvInitialiseNewTask+0x140>)
 800eb42:	659a      	str	r2, [r3, #88]	; 0x58
 800eb44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb46:	4a0c      	ldr	r2, [pc, #48]	; (800eb78 <prvInitialiseNewTask+0x144>)
 800eb48:	65da      	str	r2, [r3, #92]	; 0x5c
 800eb4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb4c:	4a0b      	ldr	r2, [pc, #44]	; (800eb7c <prvInitialiseNewTask+0x148>)
 800eb4e:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800eb50:	683a      	ldr	r2, [r7, #0]
 800eb52:	68f9      	ldr	r1, [r7, #12]
 800eb54:	69b8      	ldr	r0, [r7, #24]
 800eb56:	f001 fa3f 	bl	800ffd8 <pxPortInitialiseStack>
 800eb5a:	4602      	mov	r2, r0
 800eb5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb5e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800eb60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb62:	2b00      	cmp	r3, #0
 800eb64:	d002      	beq.n	800eb6c <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800eb66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb68:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800eb6a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800eb6c:	bf00      	nop
 800eb6e:	3720      	adds	r7, #32
 800eb70:	46bd      	mov	sp, r7
 800eb72:	bd80      	pop	{r7, pc}
 800eb74:	0802c1fc 	.word	0x0802c1fc
 800eb78:	0802c21c 	.word	0x0802c21c
 800eb7c:	0802c1dc 	.word	0x0802c1dc

0800eb80 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800eb80:	b580      	push	{r7, lr}
 800eb82:	b082      	sub	sp, #8
 800eb84:	af00      	add	r7, sp, #0
 800eb86:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800eb88:	f001 fb54 	bl	8010234 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800eb8c:	4b2d      	ldr	r3, [pc, #180]	; (800ec44 <prvAddNewTaskToReadyList+0xc4>)
 800eb8e:	681b      	ldr	r3, [r3, #0]
 800eb90:	3301      	adds	r3, #1
 800eb92:	4a2c      	ldr	r2, [pc, #176]	; (800ec44 <prvAddNewTaskToReadyList+0xc4>)
 800eb94:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800eb96:	4b2c      	ldr	r3, [pc, #176]	; (800ec48 <prvAddNewTaskToReadyList+0xc8>)
 800eb98:	681b      	ldr	r3, [r3, #0]
 800eb9a:	2b00      	cmp	r3, #0
 800eb9c:	d109      	bne.n	800ebb2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800eb9e:	4a2a      	ldr	r2, [pc, #168]	; (800ec48 <prvAddNewTaskToReadyList+0xc8>)
 800eba0:	687b      	ldr	r3, [r7, #4]
 800eba2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800eba4:	4b27      	ldr	r3, [pc, #156]	; (800ec44 <prvAddNewTaskToReadyList+0xc4>)
 800eba6:	681b      	ldr	r3, [r3, #0]
 800eba8:	2b01      	cmp	r3, #1
 800ebaa:	d110      	bne.n	800ebce <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800ebac:	f000 fc26 	bl	800f3fc <prvInitialiseTaskLists>
 800ebb0:	e00d      	b.n	800ebce <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800ebb2:	4b26      	ldr	r3, [pc, #152]	; (800ec4c <prvAddNewTaskToReadyList+0xcc>)
 800ebb4:	681b      	ldr	r3, [r3, #0]
 800ebb6:	2b00      	cmp	r3, #0
 800ebb8:	d109      	bne.n	800ebce <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800ebba:	4b23      	ldr	r3, [pc, #140]	; (800ec48 <prvAddNewTaskToReadyList+0xc8>)
 800ebbc:	681b      	ldr	r3, [r3, #0]
 800ebbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ebc0:	687b      	ldr	r3, [r7, #4]
 800ebc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ebc4:	429a      	cmp	r2, r3
 800ebc6:	d802      	bhi.n	800ebce <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800ebc8:	4a1f      	ldr	r2, [pc, #124]	; (800ec48 <prvAddNewTaskToReadyList+0xc8>)
 800ebca:	687b      	ldr	r3, [r7, #4]
 800ebcc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800ebce:	4b20      	ldr	r3, [pc, #128]	; (800ec50 <prvAddNewTaskToReadyList+0xd0>)
 800ebd0:	681b      	ldr	r3, [r3, #0]
 800ebd2:	3301      	adds	r3, #1
 800ebd4:	4a1e      	ldr	r2, [pc, #120]	; (800ec50 <prvAddNewTaskToReadyList+0xd0>)
 800ebd6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800ebd8:	4b1d      	ldr	r3, [pc, #116]	; (800ec50 <prvAddNewTaskToReadyList+0xd0>)
 800ebda:	681a      	ldr	r2, [r3, #0]
 800ebdc:	687b      	ldr	r3, [r7, #4]
 800ebde:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800ebe0:	687b      	ldr	r3, [r7, #4]
 800ebe2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ebe4:	4b1b      	ldr	r3, [pc, #108]	; (800ec54 <prvAddNewTaskToReadyList+0xd4>)
 800ebe6:	681b      	ldr	r3, [r3, #0]
 800ebe8:	429a      	cmp	r2, r3
 800ebea:	d903      	bls.n	800ebf4 <prvAddNewTaskToReadyList+0x74>
 800ebec:	687b      	ldr	r3, [r7, #4]
 800ebee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ebf0:	4a18      	ldr	r2, [pc, #96]	; (800ec54 <prvAddNewTaskToReadyList+0xd4>)
 800ebf2:	6013      	str	r3, [r2, #0]
 800ebf4:	687b      	ldr	r3, [r7, #4]
 800ebf6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ebf8:	4613      	mov	r3, r2
 800ebfa:	009b      	lsls	r3, r3, #2
 800ebfc:	4413      	add	r3, r2
 800ebfe:	009b      	lsls	r3, r3, #2
 800ec00:	4a15      	ldr	r2, [pc, #84]	; (800ec58 <prvAddNewTaskToReadyList+0xd8>)
 800ec02:	441a      	add	r2, r3
 800ec04:	687b      	ldr	r3, [r7, #4]
 800ec06:	3304      	adds	r3, #4
 800ec08:	4619      	mov	r1, r3
 800ec0a:	4610      	mov	r0, r2
 800ec0c:	f7fe fddb 	bl	800d7c6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800ec10:	f001 fb40 	bl	8010294 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800ec14:	4b0d      	ldr	r3, [pc, #52]	; (800ec4c <prvAddNewTaskToReadyList+0xcc>)
 800ec16:	681b      	ldr	r3, [r3, #0]
 800ec18:	2b00      	cmp	r3, #0
 800ec1a:	d00e      	beq.n	800ec3a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800ec1c:	4b0a      	ldr	r3, [pc, #40]	; (800ec48 <prvAddNewTaskToReadyList+0xc8>)
 800ec1e:	681b      	ldr	r3, [r3, #0]
 800ec20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ec22:	687b      	ldr	r3, [r7, #4]
 800ec24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ec26:	429a      	cmp	r2, r3
 800ec28:	d207      	bcs.n	800ec3a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800ec2a:	4b0c      	ldr	r3, [pc, #48]	; (800ec5c <prvAddNewTaskToReadyList+0xdc>)
 800ec2c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ec30:	601a      	str	r2, [r3, #0]
 800ec32:	f3bf 8f4f 	dsb	sy
 800ec36:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ec3a:	bf00      	nop
 800ec3c:	3708      	adds	r7, #8
 800ec3e:	46bd      	mov	sp, r7
 800ec40:	bd80      	pop	{r7, pc}
 800ec42:	bf00      	nop
 800ec44:	200014cc 	.word	0x200014cc
 800ec48:	20000ff8 	.word	0x20000ff8
 800ec4c:	200014d8 	.word	0x200014d8
 800ec50:	200014e8 	.word	0x200014e8
 800ec54:	200014d4 	.word	0x200014d4
 800ec58:	20000ffc 	.word	0x20000ffc
 800ec5c:	e000ed04 	.word	0xe000ed04

0800ec60 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800ec60:	b580      	push	{r7, lr}
 800ec62:	b084      	sub	sp, #16
 800ec64:	af00      	add	r7, sp, #0
 800ec66:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800ec68:	2300      	movs	r3, #0
 800ec6a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800ec6c:	687b      	ldr	r3, [r7, #4]
 800ec6e:	2b00      	cmp	r3, #0
 800ec70:	d017      	beq.n	800eca2 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800ec72:	4b13      	ldr	r3, [pc, #76]	; (800ecc0 <vTaskDelay+0x60>)
 800ec74:	681b      	ldr	r3, [r3, #0]
 800ec76:	2b00      	cmp	r3, #0
 800ec78:	d00a      	beq.n	800ec90 <vTaskDelay+0x30>
	__asm volatile
 800ec7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ec7e:	f383 8811 	msr	BASEPRI, r3
 800ec82:	f3bf 8f6f 	isb	sy
 800ec86:	f3bf 8f4f 	dsb	sy
 800ec8a:	60bb      	str	r3, [r7, #8]
}
 800ec8c:	bf00      	nop
 800ec8e:	e7fe      	b.n	800ec8e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800ec90:	f000 f88a 	bl	800eda8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800ec94:	2100      	movs	r1, #0
 800ec96:	6878      	ldr	r0, [r7, #4]
 800ec98:	f000 fdfc 	bl	800f894 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800ec9c:	f000 f892 	bl	800edc4 <xTaskResumeAll>
 800eca0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800eca2:	68fb      	ldr	r3, [r7, #12]
 800eca4:	2b00      	cmp	r3, #0
 800eca6:	d107      	bne.n	800ecb8 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800eca8:	4b06      	ldr	r3, [pc, #24]	; (800ecc4 <vTaskDelay+0x64>)
 800ecaa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ecae:	601a      	str	r2, [r3, #0]
 800ecb0:	f3bf 8f4f 	dsb	sy
 800ecb4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800ecb8:	bf00      	nop
 800ecba:	3710      	adds	r7, #16
 800ecbc:	46bd      	mov	sp, r7
 800ecbe:	bd80      	pop	{r7, pc}
 800ecc0:	200014f4 	.word	0x200014f4
 800ecc4:	e000ed04 	.word	0xe000ed04

0800ecc8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800ecc8:	b580      	push	{r7, lr}
 800ecca:	b08a      	sub	sp, #40	; 0x28
 800eccc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800ecce:	2300      	movs	r3, #0
 800ecd0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800ecd2:	2300      	movs	r3, #0
 800ecd4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800ecd6:	463a      	mov	r2, r7
 800ecd8:	1d39      	adds	r1, r7, #4
 800ecda:	f107 0308 	add.w	r3, r7, #8
 800ecde:	4618      	mov	r0, r3
 800ece0:	f7fe fd10 	bl	800d704 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800ece4:	6839      	ldr	r1, [r7, #0]
 800ece6:	687b      	ldr	r3, [r7, #4]
 800ece8:	68ba      	ldr	r2, [r7, #8]
 800ecea:	9202      	str	r2, [sp, #8]
 800ecec:	9301      	str	r3, [sp, #4]
 800ecee:	2300      	movs	r3, #0
 800ecf0:	9300      	str	r3, [sp, #0]
 800ecf2:	2300      	movs	r3, #0
 800ecf4:	460a      	mov	r2, r1
 800ecf6:	4924      	ldr	r1, [pc, #144]	; (800ed88 <vTaskStartScheduler+0xc0>)
 800ecf8:	4824      	ldr	r0, [pc, #144]	; (800ed8c <vTaskStartScheduler+0xc4>)
 800ecfa:	f7ff fdf9 	bl	800e8f0 <xTaskCreateStatic>
 800ecfe:	4603      	mov	r3, r0
 800ed00:	4a23      	ldr	r2, [pc, #140]	; (800ed90 <vTaskStartScheduler+0xc8>)
 800ed02:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800ed04:	4b22      	ldr	r3, [pc, #136]	; (800ed90 <vTaskStartScheduler+0xc8>)
 800ed06:	681b      	ldr	r3, [r3, #0]
 800ed08:	2b00      	cmp	r3, #0
 800ed0a:	d002      	beq.n	800ed12 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800ed0c:	2301      	movs	r3, #1
 800ed0e:	617b      	str	r3, [r7, #20]
 800ed10:	e001      	b.n	800ed16 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800ed12:	2300      	movs	r3, #0
 800ed14:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800ed16:	697b      	ldr	r3, [r7, #20]
 800ed18:	2b01      	cmp	r3, #1
 800ed1a:	d102      	bne.n	800ed22 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800ed1c:	f000 fe0e 	bl	800f93c <xTimerCreateTimerTask>
 800ed20:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800ed22:	697b      	ldr	r3, [r7, #20]
 800ed24:	2b01      	cmp	r3, #1
 800ed26:	d11b      	bne.n	800ed60 <vTaskStartScheduler+0x98>
	__asm volatile
 800ed28:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ed2c:	f383 8811 	msr	BASEPRI, r3
 800ed30:	f3bf 8f6f 	isb	sy
 800ed34:	f3bf 8f4f 	dsb	sy
 800ed38:	613b      	str	r3, [r7, #16]
}
 800ed3a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800ed3c:	4b15      	ldr	r3, [pc, #84]	; (800ed94 <vTaskStartScheduler+0xcc>)
 800ed3e:	681b      	ldr	r3, [r3, #0]
 800ed40:	3354      	adds	r3, #84	; 0x54
 800ed42:	4a15      	ldr	r2, [pc, #84]	; (800ed98 <vTaskStartScheduler+0xd0>)
 800ed44:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800ed46:	4b15      	ldr	r3, [pc, #84]	; (800ed9c <vTaskStartScheduler+0xd4>)
 800ed48:	f04f 32ff 	mov.w	r2, #4294967295
 800ed4c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800ed4e:	4b14      	ldr	r3, [pc, #80]	; (800eda0 <vTaskStartScheduler+0xd8>)
 800ed50:	2201      	movs	r2, #1
 800ed52:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800ed54:	4b13      	ldr	r3, [pc, #76]	; (800eda4 <vTaskStartScheduler+0xdc>)
 800ed56:	2200      	movs	r2, #0
 800ed58:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800ed5a:	f001 f9c9 	bl	80100f0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800ed5e:	e00e      	b.n	800ed7e <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800ed60:	697b      	ldr	r3, [r7, #20]
 800ed62:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ed66:	d10a      	bne.n	800ed7e <vTaskStartScheduler+0xb6>
	__asm volatile
 800ed68:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ed6c:	f383 8811 	msr	BASEPRI, r3
 800ed70:	f3bf 8f6f 	isb	sy
 800ed74:	f3bf 8f4f 	dsb	sy
 800ed78:	60fb      	str	r3, [r7, #12]
}
 800ed7a:	bf00      	nop
 800ed7c:	e7fe      	b.n	800ed7c <vTaskStartScheduler+0xb4>
}
 800ed7e:	bf00      	nop
 800ed80:	3718      	adds	r7, #24
 800ed82:	46bd      	mov	sp, r7
 800ed84:	bd80      	pop	{r7, pc}
 800ed86:	bf00      	nop
 800ed88:	080283a8 	.word	0x080283a8
 800ed8c:	0800f3cd 	.word	0x0800f3cd
 800ed90:	200014f0 	.word	0x200014f0
 800ed94:	20000ff8 	.word	0x20000ff8
 800ed98:	200001ec 	.word	0x200001ec
 800ed9c:	200014ec 	.word	0x200014ec
 800eda0:	200014d8 	.word	0x200014d8
 800eda4:	200014d0 	.word	0x200014d0

0800eda8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800eda8:	b480      	push	{r7}
 800edaa:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800edac:	4b04      	ldr	r3, [pc, #16]	; (800edc0 <vTaskSuspendAll+0x18>)
 800edae:	681b      	ldr	r3, [r3, #0]
 800edb0:	3301      	adds	r3, #1
 800edb2:	4a03      	ldr	r2, [pc, #12]	; (800edc0 <vTaskSuspendAll+0x18>)
 800edb4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800edb6:	bf00      	nop
 800edb8:	46bd      	mov	sp, r7
 800edba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edbe:	4770      	bx	lr
 800edc0:	200014f4 	.word	0x200014f4

0800edc4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800edc4:	b580      	push	{r7, lr}
 800edc6:	b084      	sub	sp, #16
 800edc8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800edca:	2300      	movs	r3, #0
 800edcc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800edce:	2300      	movs	r3, #0
 800edd0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800edd2:	4b42      	ldr	r3, [pc, #264]	; (800eedc <xTaskResumeAll+0x118>)
 800edd4:	681b      	ldr	r3, [r3, #0]
 800edd6:	2b00      	cmp	r3, #0
 800edd8:	d10a      	bne.n	800edf0 <xTaskResumeAll+0x2c>
	__asm volatile
 800edda:	f04f 0350 	mov.w	r3, #80	; 0x50
 800edde:	f383 8811 	msr	BASEPRI, r3
 800ede2:	f3bf 8f6f 	isb	sy
 800ede6:	f3bf 8f4f 	dsb	sy
 800edea:	603b      	str	r3, [r7, #0]
}
 800edec:	bf00      	nop
 800edee:	e7fe      	b.n	800edee <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800edf0:	f001 fa20 	bl	8010234 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800edf4:	4b39      	ldr	r3, [pc, #228]	; (800eedc <xTaskResumeAll+0x118>)
 800edf6:	681b      	ldr	r3, [r3, #0]
 800edf8:	3b01      	subs	r3, #1
 800edfa:	4a38      	ldr	r2, [pc, #224]	; (800eedc <xTaskResumeAll+0x118>)
 800edfc:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800edfe:	4b37      	ldr	r3, [pc, #220]	; (800eedc <xTaskResumeAll+0x118>)
 800ee00:	681b      	ldr	r3, [r3, #0]
 800ee02:	2b00      	cmp	r3, #0
 800ee04:	d162      	bne.n	800eecc <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800ee06:	4b36      	ldr	r3, [pc, #216]	; (800eee0 <xTaskResumeAll+0x11c>)
 800ee08:	681b      	ldr	r3, [r3, #0]
 800ee0a:	2b00      	cmp	r3, #0
 800ee0c:	d05e      	beq.n	800eecc <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800ee0e:	e02f      	b.n	800ee70 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ee10:	4b34      	ldr	r3, [pc, #208]	; (800eee4 <xTaskResumeAll+0x120>)
 800ee12:	68db      	ldr	r3, [r3, #12]
 800ee14:	68db      	ldr	r3, [r3, #12]
 800ee16:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ee18:	68fb      	ldr	r3, [r7, #12]
 800ee1a:	3318      	adds	r3, #24
 800ee1c:	4618      	mov	r0, r3
 800ee1e:	f7fe fd2f 	bl	800d880 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ee22:	68fb      	ldr	r3, [r7, #12]
 800ee24:	3304      	adds	r3, #4
 800ee26:	4618      	mov	r0, r3
 800ee28:	f7fe fd2a 	bl	800d880 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800ee2c:	68fb      	ldr	r3, [r7, #12]
 800ee2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ee30:	4b2d      	ldr	r3, [pc, #180]	; (800eee8 <xTaskResumeAll+0x124>)
 800ee32:	681b      	ldr	r3, [r3, #0]
 800ee34:	429a      	cmp	r2, r3
 800ee36:	d903      	bls.n	800ee40 <xTaskResumeAll+0x7c>
 800ee38:	68fb      	ldr	r3, [r7, #12]
 800ee3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ee3c:	4a2a      	ldr	r2, [pc, #168]	; (800eee8 <xTaskResumeAll+0x124>)
 800ee3e:	6013      	str	r3, [r2, #0]
 800ee40:	68fb      	ldr	r3, [r7, #12]
 800ee42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ee44:	4613      	mov	r3, r2
 800ee46:	009b      	lsls	r3, r3, #2
 800ee48:	4413      	add	r3, r2
 800ee4a:	009b      	lsls	r3, r3, #2
 800ee4c:	4a27      	ldr	r2, [pc, #156]	; (800eeec <xTaskResumeAll+0x128>)
 800ee4e:	441a      	add	r2, r3
 800ee50:	68fb      	ldr	r3, [r7, #12]
 800ee52:	3304      	adds	r3, #4
 800ee54:	4619      	mov	r1, r3
 800ee56:	4610      	mov	r0, r2
 800ee58:	f7fe fcb5 	bl	800d7c6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800ee5c:	68fb      	ldr	r3, [r7, #12]
 800ee5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ee60:	4b23      	ldr	r3, [pc, #140]	; (800eef0 <xTaskResumeAll+0x12c>)
 800ee62:	681b      	ldr	r3, [r3, #0]
 800ee64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ee66:	429a      	cmp	r2, r3
 800ee68:	d302      	bcc.n	800ee70 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800ee6a:	4b22      	ldr	r3, [pc, #136]	; (800eef4 <xTaskResumeAll+0x130>)
 800ee6c:	2201      	movs	r2, #1
 800ee6e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800ee70:	4b1c      	ldr	r3, [pc, #112]	; (800eee4 <xTaskResumeAll+0x120>)
 800ee72:	681b      	ldr	r3, [r3, #0]
 800ee74:	2b00      	cmp	r3, #0
 800ee76:	d1cb      	bne.n	800ee10 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800ee78:	68fb      	ldr	r3, [r7, #12]
 800ee7a:	2b00      	cmp	r3, #0
 800ee7c:	d001      	beq.n	800ee82 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800ee7e:	f000 fb5f 	bl	800f540 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800ee82:	4b1d      	ldr	r3, [pc, #116]	; (800eef8 <xTaskResumeAll+0x134>)
 800ee84:	681b      	ldr	r3, [r3, #0]
 800ee86:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800ee88:	687b      	ldr	r3, [r7, #4]
 800ee8a:	2b00      	cmp	r3, #0
 800ee8c:	d010      	beq.n	800eeb0 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800ee8e:	f000 f847 	bl	800ef20 <xTaskIncrementTick>
 800ee92:	4603      	mov	r3, r0
 800ee94:	2b00      	cmp	r3, #0
 800ee96:	d002      	beq.n	800ee9e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800ee98:	4b16      	ldr	r3, [pc, #88]	; (800eef4 <xTaskResumeAll+0x130>)
 800ee9a:	2201      	movs	r2, #1
 800ee9c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800ee9e:	687b      	ldr	r3, [r7, #4]
 800eea0:	3b01      	subs	r3, #1
 800eea2:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800eea4:	687b      	ldr	r3, [r7, #4]
 800eea6:	2b00      	cmp	r3, #0
 800eea8:	d1f1      	bne.n	800ee8e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800eeaa:	4b13      	ldr	r3, [pc, #76]	; (800eef8 <xTaskResumeAll+0x134>)
 800eeac:	2200      	movs	r2, #0
 800eeae:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800eeb0:	4b10      	ldr	r3, [pc, #64]	; (800eef4 <xTaskResumeAll+0x130>)
 800eeb2:	681b      	ldr	r3, [r3, #0]
 800eeb4:	2b00      	cmp	r3, #0
 800eeb6:	d009      	beq.n	800eecc <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800eeb8:	2301      	movs	r3, #1
 800eeba:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800eebc:	4b0f      	ldr	r3, [pc, #60]	; (800eefc <xTaskResumeAll+0x138>)
 800eebe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800eec2:	601a      	str	r2, [r3, #0]
 800eec4:	f3bf 8f4f 	dsb	sy
 800eec8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800eecc:	f001 f9e2 	bl	8010294 <vPortExitCritical>

	return xAlreadyYielded;
 800eed0:	68bb      	ldr	r3, [r7, #8]
}
 800eed2:	4618      	mov	r0, r3
 800eed4:	3710      	adds	r7, #16
 800eed6:	46bd      	mov	sp, r7
 800eed8:	bd80      	pop	{r7, pc}
 800eeda:	bf00      	nop
 800eedc:	200014f4 	.word	0x200014f4
 800eee0:	200014cc 	.word	0x200014cc
 800eee4:	2000148c 	.word	0x2000148c
 800eee8:	200014d4 	.word	0x200014d4
 800eeec:	20000ffc 	.word	0x20000ffc
 800eef0:	20000ff8 	.word	0x20000ff8
 800eef4:	200014e0 	.word	0x200014e0
 800eef8:	200014dc 	.word	0x200014dc
 800eefc:	e000ed04 	.word	0xe000ed04

0800ef00 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800ef00:	b480      	push	{r7}
 800ef02:	b083      	sub	sp, #12
 800ef04:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800ef06:	4b05      	ldr	r3, [pc, #20]	; (800ef1c <xTaskGetTickCount+0x1c>)
 800ef08:	681b      	ldr	r3, [r3, #0]
 800ef0a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800ef0c:	687b      	ldr	r3, [r7, #4]
}
 800ef0e:	4618      	mov	r0, r3
 800ef10:	370c      	adds	r7, #12
 800ef12:	46bd      	mov	sp, r7
 800ef14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef18:	4770      	bx	lr
 800ef1a:	bf00      	nop
 800ef1c:	200014d0 	.word	0x200014d0

0800ef20 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800ef20:	b580      	push	{r7, lr}
 800ef22:	b086      	sub	sp, #24
 800ef24:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800ef26:	2300      	movs	r3, #0
 800ef28:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ef2a:	4b4f      	ldr	r3, [pc, #316]	; (800f068 <xTaskIncrementTick+0x148>)
 800ef2c:	681b      	ldr	r3, [r3, #0]
 800ef2e:	2b00      	cmp	r3, #0
 800ef30:	f040 808f 	bne.w	800f052 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800ef34:	4b4d      	ldr	r3, [pc, #308]	; (800f06c <xTaskIncrementTick+0x14c>)
 800ef36:	681b      	ldr	r3, [r3, #0]
 800ef38:	3301      	adds	r3, #1
 800ef3a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800ef3c:	4a4b      	ldr	r2, [pc, #300]	; (800f06c <xTaskIncrementTick+0x14c>)
 800ef3e:	693b      	ldr	r3, [r7, #16]
 800ef40:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800ef42:	693b      	ldr	r3, [r7, #16]
 800ef44:	2b00      	cmp	r3, #0
 800ef46:	d120      	bne.n	800ef8a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800ef48:	4b49      	ldr	r3, [pc, #292]	; (800f070 <xTaskIncrementTick+0x150>)
 800ef4a:	681b      	ldr	r3, [r3, #0]
 800ef4c:	681b      	ldr	r3, [r3, #0]
 800ef4e:	2b00      	cmp	r3, #0
 800ef50:	d00a      	beq.n	800ef68 <xTaskIncrementTick+0x48>
	__asm volatile
 800ef52:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ef56:	f383 8811 	msr	BASEPRI, r3
 800ef5a:	f3bf 8f6f 	isb	sy
 800ef5e:	f3bf 8f4f 	dsb	sy
 800ef62:	603b      	str	r3, [r7, #0]
}
 800ef64:	bf00      	nop
 800ef66:	e7fe      	b.n	800ef66 <xTaskIncrementTick+0x46>
 800ef68:	4b41      	ldr	r3, [pc, #260]	; (800f070 <xTaskIncrementTick+0x150>)
 800ef6a:	681b      	ldr	r3, [r3, #0]
 800ef6c:	60fb      	str	r3, [r7, #12]
 800ef6e:	4b41      	ldr	r3, [pc, #260]	; (800f074 <xTaskIncrementTick+0x154>)
 800ef70:	681b      	ldr	r3, [r3, #0]
 800ef72:	4a3f      	ldr	r2, [pc, #252]	; (800f070 <xTaskIncrementTick+0x150>)
 800ef74:	6013      	str	r3, [r2, #0]
 800ef76:	4a3f      	ldr	r2, [pc, #252]	; (800f074 <xTaskIncrementTick+0x154>)
 800ef78:	68fb      	ldr	r3, [r7, #12]
 800ef7a:	6013      	str	r3, [r2, #0]
 800ef7c:	4b3e      	ldr	r3, [pc, #248]	; (800f078 <xTaskIncrementTick+0x158>)
 800ef7e:	681b      	ldr	r3, [r3, #0]
 800ef80:	3301      	adds	r3, #1
 800ef82:	4a3d      	ldr	r2, [pc, #244]	; (800f078 <xTaskIncrementTick+0x158>)
 800ef84:	6013      	str	r3, [r2, #0]
 800ef86:	f000 fadb 	bl	800f540 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800ef8a:	4b3c      	ldr	r3, [pc, #240]	; (800f07c <xTaskIncrementTick+0x15c>)
 800ef8c:	681b      	ldr	r3, [r3, #0]
 800ef8e:	693a      	ldr	r2, [r7, #16]
 800ef90:	429a      	cmp	r2, r3
 800ef92:	d349      	bcc.n	800f028 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ef94:	4b36      	ldr	r3, [pc, #216]	; (800f070 <xTaskIncrementTick+0x150>)
 800ef96:	681b      	ldr	r3, [r3, #0]
 800ef98:	681b      	ldr	r3, [r3, #0]
 800ef9a:	2b00      	cmp	r3, #0
 800ef9c:	d104      	bne.n	800efa8 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ef9e:	4b37      	ldr	r3, [pc, #220]	; (800f07c <xTaskIncrementTick+0x15c>)
 800efa0:	f04f 32ff 	mov.w	r2, #4294967295
 800efa4:	601a      	str	r2, [r3, #0]
					break;
 800efa6:	e03f      	b.n	800f028 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800efa8:	4b31      	ldr	r3, [pc, #196]	; (800f070 <xTaskIncrementTick+0x150>)
 800efaa:	681b      	ldr	r3, [r3, #0]
 800efac:	68db      	ldr	r3, [r3, #12]
 800efae:	68db      	ldr	r3, [r3, #12]
 800efb0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800efb2:	68bb      	ldr	r3, [r7, #8]
 800efb4:	685b      	ldr	r3, [r3, #4]
 800efb6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800efb8:	693a      	ldr	r2, [r7, #16]
 800efba:	687b      	ldr	r3, [r7, #4]
 800efbc:	429a      	cmp	r2, r3
 800efbe:	d203      	bcs.n	800efc8 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800efc0:	4a2e      	ldr	r2, [pc, #184]	; (800f07c <xTaskIncrementTick+0x15c>)
 800efc2:	687b      	ldr	r3, [r7, #4]
 800efc4:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800efc6:	e02f      	b.n	800f028 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800efc8:	68bb      	ldr	r3, [r7, #8]
 800efca:	3304      	adds	r3, #4
 800efcc:	4618      	mov	r0, r3
 800efce:	f7fe fc57 	bl	800d880 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800efd2:	68bb      	ldr	r3, [r7, #8]
 800efd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800efd6:	2b00      	cmp	r3, #0
 800efd8:	d004      	beq.n	800efe4 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800efda:	68bb      	ldr	r3, [r7, #8]
 800efdc:	3318      	adds	r3, #24
 800efde:	4618      	mov	r0, r3
 800efe0:	f7fe fc4e 	bl	800d880 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800efe4:	68bb      	ldr	r3, [r7, #8]
 800efe6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800efe8:	4b25      	ldr	r3, [pc, #148]	; (800f080 <xTaskIncrementTick+0x160>)
 800efea:	681b      	ldr	r3, [r3, #0]
 800efec:	429a      	cmp	r2, r3
 800efee:	d903      	bls.n	800eff8 <xTaskIncrementTick+0xd8>
 800eff0:	68bb      	ldr	r3, [r7, #8]
 800eff2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eff4:	4a22      	ldr	r2, [pc, #136]	; (800f080 <xTaskIncrementTick+0x160>)
 800eff6:	6013      	str	r3, [r2, #0]
 800eff8:	68bb      	ldr	r3, [r7, #8]
 800effa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800effc:	4613      	mov	r3, r2
 800effe:	009b      	lsls	r3, r3, #2
 800f000:	4413      	add	r3, r2
 800f002:	009b      	lsls	r3, r3, #2
 800f004:	4a1f      	ldr	r2, [pc, #124]	; (800f084 <xTaskIncrementTick+0x164>)
 800f006:	441a      	add	r2, r3
 800f008:	68bb      	ldr	r3, [r7, #8]
 800f00a:	3304      	adds	r3, #4
 800f00c:	4619      	mov	r1, r3
 800f00e:	4610      	mov	r0, r2
 800f010:	f7fe fbd9 	bl	800d7c6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800f014:	68bb      	ldr	r3, [r7, #8]
 800f016:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f018:	4b1b      	ldr	r3, [pc, #108]	; (800f088 <xTaskIncrementTick+0x168>)
 800f01a:	681b      	ldr	r3, [r3, #0]
 800f01c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f01e:	429a      	cmp	r2, r3
 800f020:	d3b8      	bcc.n	800ef94 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800f022:	2301      	movs	r3, #1
 800f024:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800f026:	e7b5      	b.n	800ef94 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800f028:	4b17      	ldr	r3, [pc, #92]	; (800f088 <xTaskIncrementTick+0x168>)
 800f02a:	681b      	ldr	r3, [r3, #0]
 800f02c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f02e:	4915      	ldr	r1, [pc, #84]	; (800f084 <xTaskIncrementTick+0x164>)
 800f030:	4613      	mov	r3, r2
 800f032:	009b      	lsls	r3, r3, #2
 800f034:	4413      	add	r3, r2
 800f036:	009b      	lsls	r3, r3, #2
 800f038:	440b      	add	r3, r1
 800f03a:	681b      	ldr	r3, [r3, #0]
 800f03c:	2b01      	cmp	r3, #1
 800f03e:	d901      	bls.n	800f044 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800f040:	2301      	movs	r3, #1
 800f042:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800f044:	4b11      	ldr	r3, [pc, #68]	; (800f08c <xTaskIncrementTick+0x16c>)
 800f046:	681b      	ldr	r3, [r3, #0]
 800f048:	2b00      	cmp	r3, #0
 800f04a:	d007      	beq.n	800f05c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800f04c:	2301      	movs	r3, #1
 800f04e:	617b      	str	r3, [r7, #20]
 800f050:	e004      	b.n	800f05c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800f052:	4b0f      	ldr	r3, [pc, #60]	; (800f090 <xTaskIncrementTick+0x170>)
 800f054:	681b      	ldr	r3, [r3, #0]
 800f056:	3301      	adds	r3, #1
 800f058:	4a0d      	ldr	r2, [pc, #52]	; (800f090 <xTaskIncrementTick+0x170>)
 800f05a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800f05c:	697b      	ldr	r3, [r7, #20]
}
 800f05e:	4618      	mov	r0, r3
 800f060:	3718      	adds	r7, #24
 800f062:	46bd      	mov	sp, r7
 800f064:	bd80      	pop	{r7, pc}
 800f066:	bf00      	nop
 800f068:	200014f4 	.word	0x200014f4
 800f06c:	200014d0 	.word	0x200014d0
 800f070:	20001484 	.word	0x20001484
 800f074:	20001488 	.word	0x20001488
 800f078:	200014e4 	.word	0x200014e4
 800f07c:	200014ec 	.word	0x200014ec
 800f080:	200014d4 	.word	0x200014d4
 800f084:	20000ffc 	.word	0x20000ffc
 800f088:	20000ff8 	.word	0x20000ff8
 800f08c:	200014e0 	.word	0x200014e0
 800f090:	200014dc 	.word	0x200014dc

0800f094 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800f094:	b480      	push	{r7}
 800f096:	b085      	sub	sp, #20
 800f098:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800f09a:	4b2a      	ldr	r3, [pc, #168]	; (800f144 <vTaskSwitchContext+0xb0>)
 800f09c:	681b      	ldr	r3, [r3, #0]
 800f09e:	2b00      	cmp	r3, #0
 800f0a0:	d003      	beq.n	800f0aa <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800f0a2:	4b29      	ldr	r3, [pc, #164]	; (800f148 <vTaskSwitchContext+0xb4>)
 800f0a4:	2201      	movs	r2, #1
 800f0a6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800f0a8:	e046      	b.n	800f138 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800f0aa:	4b27      	ldr	r3, [pc, #156]	; (800f148 <vTaskSwitchContext+0xb4>)
 800f0ac:	2200      	movs	r2, #0
 800f0ae:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f0b0:	4b26      	ldr	r3, [pc, #152]	; (800f14c <vTaskSwitchContext+0xb8>)
 800f0b2:	681b      	ldr	r3, [r3, #0]
 800f0b4:	60fb      	str	r3, [r7, #12]
 800f0b6:	e010      	b.n	800f0da <vTaskSwitchContext+0x46>
 800f0b8:	68fb      	ldr	r3, [r7, #12]
 800f0ba:	2b00      	cmp	r3, #0
 800f0bc:	d10a      	bne.n	800f0d4 <vTaskSwitchContext+0x40>
	__asm volatile
 800f0be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f0c2:	f383 8811 	msr	BASEPRI, r3
 800f0c6:	f3bf 8f6f 	isb	sy
 800f0ca:	f3bf 8f4f 	dsb	sy
 800f0ce:	607b      	str	r3, [r7, #4]
}
 800f0d0:	bf00      	nop
 800f0d2:	e7fe      	b.n	800f0d2 <vTaskSwitchContext+0x3e>
 800f0d4:	68fb      	ldr	r3, [r7, #12]
 800f0d6:	3b01      	subs	r3, #1
 800f0d8:	60fb      	str	r3, [r7, #12]
 800f0da:	491d      	ldr	r1, [pc, #116]	; (800f150 <vTaskSwitchContext+0xbc>)
 800f0dc:	68fa      	ldr	r2, [r7, #12]
 800f0de:	4613      	mov	r3, r2
 800f0e0:	009b      	lsls	r3, r3, #2
 800f0e2:	4413      	add	r3, r2
 800f0e4:	009b      	lsls	r3, r3, #2
 800f0e6:	440b      	add	r3, r1
 800f0e8:	681b      	ldr	r3, [r3, #0]
 800f0ea:	2b00      	cmp	r3, #0
 800f0ec:	d0e4      	beq.n	800f0b8 <vTaskSwitchContext+0x24>
 800f0ee:	68fa      	ldr	r2, [r7, #12]
 800f0f0:	4613      	mov	r3, r2
 800f0f2:	009b      	lsls	r3, r3, #2
 800f0f4:	4413      	add	r3, r2
 800f0f6:	009b      	lsls	r3, r3, #2
 800f0f8:	4a15      	ldr	r2, [pc, #84]	; (800f150 <vTaskSwitchContext+0xbc>)
 800f0fa:	4413      	add	r3, r2
 800f0fc:	60bb      	str	r3, [r7, #8]
 800f0fe:	68bb      	ldr	r3, [r7, #8]
 800f100:	685b      	ldr	r3, [r3, #4]
 800f102:	685a      	ldr	r2, [r3, #4]
 800f104:	68bb      	ldr	r3, [r7, #8]
 800f106:	605a      	str	r2, [r3, #4]
 800f108:	68bb      	ldr	r3, [r7, #8]
 800f10a:	685a      	ldr	r2, [r3, #4]
 800f10c:	68bb      	ldr	r3, [r7, #8]
 800f10e:	3308      	adds	r3, #8
 800f110:	429a      	cmp	r2, r3
 800f112:	d104      	bne.n	800f11e <vTaskSwitchContext+0x8a>
 800f114:	68bb      	ldr	r3, [r7, #8]
 800f116:	685b      	ldr	r3, [r3, #4]
 800f118:	685a      	ldr	r2, [r3, #4]
 800f11a:	68bb      	ldr	r3, [r7, #8]
 800f11c:	605a      	str	r2, [r3, #4]
 800f11e:	68bb      	ldr	r3, [r7, #8]
 800f120:	685b      	ldr	r3, [r3, #4]
 800f122:	68db      	ldr	r3, [r3, #12]
 800f124:	4a0b      	ldr	r2, [pc, #44]	; (800f154 <vTaskSwitchContext+0xc0>)
 800f126:	6013      	str	r3, [r2, #0]
 800f128:	4a08      	ldr	r2, [pc, #32]	; (800f14c <vTaskSwitchContext+0xb8>)
 800f12a:	68fb      	ldr	r3, [r7, #12]
 800f12c:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800f12e:	4b09      	ldr	r3, [pc, #36]	; (800f154 <vTaskSwitchContext+0xc0>)
 800f130:	681b      	ldr	r3, [r3, #0]
 800f132:	3354      	adds	r3, #84	; 0x54
 800f134:	4a08      	ldr	r2, [pc, #32]	; (800f158 <vTaskSwitchContext+0xc4>)
 800f136:	6013      	str	r3, [r2, #0]
}
 800f138:	bf00      	nop
 800f13a:	3714      	adds	r7, #20
 800f13c:	46bd      	mov	sp, r7
 800f13e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f142:	4770      	bx	lr
 800f144:	200014f4 	.word	0x200014f4
 800f148:	200014e0 	.word	0x200014e0
 800f14c:	200014d4 	.word	0x200014d4
 800f150:	20000ffc 	.word	0x20000ffc
 800f154:	20000ff8 	.word	0x20000ff8
 800f158:	200001ec 	.word	0x200001ec

0800f15c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800f15c:	b580      	push	{r7, lr}
 800f15e:	b084      	sub	sp, #16
 800f160:	af00      	add	r7, sp, #0
 800f162:	6078      	str	r0, [r7, #4]
 800f164:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800f166:	687b      	ldr	r3, [r7, #4]
 800f168:	2b00      	cmp	r3, #0
 800f16a:	d10a      	bne.n	800f182 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800f16c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f170:	f383 8811 	msr	BASEPRI, r3
 800f174:	f3bf 8f6f 	isb	sy
 800f178:	f3bf 8f4f 	dsb	sy
 800f17c:	60fb      	str	r3, [r7, #12]
}
 800f17e:	bf00      	nop
 800f180:	e7fe      	b.n	800f180 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800f182:	4b07      	ldr	r3, [pc, #28]	; (800f1a0 <vTaskPlaceOnEventList+0x44>)
 800f184:	681b      	ldr	r3, [r3, #0]
 800f186:	3318      	adds	r3, #24
 800f188:	4619      	mov	r1, r3
 800f18a:	6878      	ldr	r0, [r7, #4]
 800f18c:	f7fe fb3f 	bl	800d80e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800f190:	2101      	movs	r1, #1
 800f192:	6838      	ldr	r0, [r7, #0]
 800f194:	f000 fb7e 	bl	800f894 <prvAddCurrentTaskToDelayedList>
}
 800f198:	bf00      	nop
 800f19a:	3710      	adds	r7, #16
 800f19c:	46bd      	mov	sp, r7
 800f19e:	bd80      	pop	{r7, pc}
 800f1a0:	20000ff8 	.word	0x20000ff8

0800f1a4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800f1a4:	b580      	push	{r7, lr}
 800f1a6:	b086      	sub	sp, #24
 800f1a8:	af00      	add	r7, sp, #0
 800f1aa:	60f8      	str	r0, [r7, #12]
 800f1ac:	60b9      	str	r1, [r7, #8]
 800f1ae:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800f1b0:	68fb      	ldr	r3, [r7, #12]
 800f1b2:	2b00      	cmp	r3, #0
 800f1b4:	d10a      	bne.n	800f1cc <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800f1b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f1ba:	f383 8811 	msr	BASEPRI, r3
 800f1be:	f3bf 8f6f 	isb	sy
 800f1c2:	f3bf 8f4f 	dsb	sy
 800f1c6:	617b      	str	r3, [r7, #20]
}
 800f1c8:	bf00      	nop
 800f1ca:	e7fe      	b.n	800f1ca <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800f1cc:	4b0a      	ldr	r3, [pc, #40]	; (800f1f8 <vTaskPlaceOnEventListRestricted+0x54>)
 800f1ce:	681b      	ldr	r3, [r3, #0]
 800f1d0:	3318      	adds	r3, #24
 800f1d2:	4619      	mov	r1, r3
 800f1d4:	68f8      	ldr	r0, [r7, #12]
 800f1d6:	f7fe faf6 	bl	800d7c6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800f1da:	687b      	ldr	r3, [r7, #4]
 800f1dc:	2b00      	cmp	r3, #0
 800f1de:	d002      	beq.n	800f1e6 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800f1e0:	f04f 33ff 	mov.w	r3, #4294967295
 800f1e4:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800f1e6:	6879      	ldr	r1, [r7, #4]
 800f1e8:	68b8      	ldr	r0, [r7, #8]
 800f1ea:	f000 fb53 	bl	800f894 <prvAddCurrentTaskToDelayedList>
	}
 800f1ee:	bf00      	nop
 800f1f0:	3718      	adds	r7, #24
 800f1f2:	46bd      	mov	sp, r7
 800f1f4:	bd80      	pop	{r7, pc}
 800f1f6:	bf00      	nop
 800f1f8:	20000ff8 	.word	0x20000ff8

0800f1fc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800f1fc:	b580      	push	{r7, lr}
 800f1fe:	b086      	sub	sp, #24
 800f200:	af00      	add	r7, sp, #0
 800f202:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f204:	687b      	ldr	r3, [r7, #4]
 800f206:	68db      	ldr	r3, [r3, #12]
 800f208:	68db      	ldr	r3, [r3, #12]
 800f20a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800f20c:	693b      	ldr	r3, [r7, #16]
 800f20e:	2b00      	cmp	r3, #0
 800f210:	d10a      	bne.n	800f228 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800f212:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f216:	f383 8811 	msr	BASEPRI, r3
 800f21a:	f3bf 8f6f 	isb	sy
 800f21e:	f3bf 8f4f 	dsb	sy
 800f222:	60fb      	str	r3, [r7, #12]
}
 800f224:	bf00      	nop
 800f226:	e7fe      	b.n	800f226 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800f228:	693b      	ldr	r3, [r7, #16]
 800f22a:	3318      	adds	r3, #24
 800f22c:	4618      	mov	r0, r3
 800f22e:	f7fe fb27 	bl	800d880 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f232:	4b1e      	ldr	r3, [pc, #120]	; (800f2ac <xTaskRemoveFromEventList+0xb0>)
 800f234:	681b      	ldr	r3, [r3, #0]
 800f236:	2b00      	cmp	r3, #0
 800f238:	d11d      	bne.n	800f276 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800f23a:	693b      	ldr	r3, [r7, #16]
 800f23c:	3304      	adds	r3, #4
 800f23e:	4618      	mov	r0, r3
 800f240:	f7fe fb1e 	bl	800d880 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800f244:	693b      	ldr	r3, [r7, #16]
 800f246:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f248:	4b19      	ldr	r3, [pc, #100]	; (800f2b0 <xTaskRemoveFromEventList+0xb4>)
 800f24a:	681b      	ldr	r3, [r3, #0]
 800f24c:	429a      	cmp	r2, r3
 800f24e:	d903      	bls.n	800f258 <xTaskRemoveFromEventList+0x5c>
 800f250:	693b      	ldr	r3, [r7, #16]
 800f252:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f254:	4a16      	ldr	r2, [pc, #88]	; (800f2b0 <xTaskRemoveFromEventList+0xb4>)
 800f256:	6013      	str	r3, [r2, #0]
 800f258:	693b      	ldr	r3, [r7, #16]
 800f25a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f25c:	4613      	mov	r3, r2
 800f25e:	009b      	lsls	r3, r3, #2
 800f260:	4413      	add	r3, r2
 800f262:	009b      	lsls	r3, r3, #2
 800f264:	4a13      	ldr	r2, [pc, #76]	; (800f2b4 <xTaskRemoveFromEventList+0xb8>)
 800f266:	441a      	add	r2, r3
 800f268:	693b      	ldr	r3, [r7, #16]
 800f26a:	3304      	adds	r3, #4
 800f26c:	4619      	mov	r1, r3
 800f26e:	4610      	mov	r0, r2
 800f270:	f7fe faa9 	bl	800d7c6 <vListInsertEnd>
 800f274:	e005      	b.n	800f282 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800f276:	693b      	ldr	r3, [r7, #16]
 800f278:	3318      	adds	r3, #24
 800f27a:	4619      	mov	r1, r3
 800f27c:	480e      	ldr	r0, [pc, #56]	; (800f2b8 <xTaskRemoveFromEventList+0xbc>)
 800f27e:	f7fe faa2 	bl	800d7c6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800f282:	693b      	ldr	r3, [r7, #16]
 800f284:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f286:	4b0d      	ldr	r3, [pc, #52]	; (800f2bc <xTaskRemoveFromEventList+0xc0>)
 800f288:	681b      	ldr	r3, [r3, #0]
 800f28a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f28c:	429a      	cmp	r2, r3
 800f28e:	d905      	bls.n	800f29c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800f290:	2301      	movs	r3, #1
 800f292:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800f294:	4b0a      	ldr	r3, [pc, #40]	; (800f2c0 <xTaskRemoveFromEventList+0xc4>)
 800f296:	2201      	movs	r2, #1
 800f298:	601a      	str	r2, [r3, #0]
 800f29a:	e001      	b.n	800f2a0 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800f29c:	2300      	movs	r3, #0
 800f29e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800f2a0:	697b      	ldr	r3, [r7, #20]
}
 800f2a2:	4618      	mov	r0, r3
 800f2a4:	3718      	adds	r7, #24
 800f2a6:	46bd      	mov	sp, r7
 800f2a8:	bd80      	pop	{r7, pc}
 800f2aa:	bf00      	nop
 800f2ac:	200014f4 	.word	0x200014f4
 800f2b0:	200014d4 	.word	0x200014d4
 800f2b4:	20000ffc 	.word	0x20000ffc
 800f2b8:	2000148c 	.word	0x2000148c
 800f2bc:	20000ff8 	.word	0x20000ff8
 800f2c0:	200014e0 	.word	0x200014e0

0800f2c4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800f2c4:	b480      	push	{r7}
 800f2c6:	b083      	sub	sp, #12
 800f2c8:	af00      	add	r7, sp, #0
 800f2ca:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800f2cc:	4b06      	ldr	r3, [pc, #24]	; (800f2e8 <vTaskInternalSetTimeOutState+0x24>)
 800f2ce:	681a      	ldr	r2, [r3, #0]
 800f2d0:	687b      	ldr	r3, [r7, #4]
 800f2d2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800f2d4:	4b05      	ldr	r3, [pc, #20]	; (800f2ec <vTaskInternalSetTimeOutState+0x28>)
 800f2d6:	681a      	ldr	r2, [r3, #0]
 800f2d8:	687b      	ldr	r3, [r7, #4]
 800f2da:	605a      	str	r2, [r3, #4]
}
 800f2dc:	bf00      	nop
 800f2de:	370c      	adds	r7, #12
 800f2e0:	46bd      	mov	sp, r7
 800f2e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2e6:	4770      	bx	lr
 800f2e8:	200014e4 	.word	0x200014e4
 800f2ec:	200014d0 	.word	0x200014d0

0800f2f0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800f2f0:	b580      	push	{r7, lr}
 800f2f2:	b088      	sub	sp, #32
 800f2f4:	af00      	add	r7, sp, #0
 800f2f6:	6078      	str	r0, [r7, #4]
 800f2f8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800f2fa:	687b      	ldr	r3, [r7, #4]
 800f2fc:	2b00      	cmp	r3, #0
 800f2fe:	d10a      	bne.n	800f316 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800f300:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f304:	f383 8811 	msr	BASEPRI, r3
 800f308:	f3bf 8f6f 	isb	sy
 800f30c:	f3bf 8f4f 	dsb	sy
 800f310:	613b      	str	r3, [r7, #16]
}
 800f312:	bf00      	nop
 800f314:	e7fe      	b.n	800f314 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800f316:	683b      	ldr	r3, [r7, #0]
 800f318:	2b00      	cmp	r3, #0
 800f31a:	d10a      	bne.n	800f332 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800f31c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f320:	f383 8811 	msr	BASEPRI, r3
 800f324:	f3bf 8f6f 	isb	sy
 800f328:	f3bf 8f4f 	dsb	sy
 800f32c:	60fb      	str	r3, [r7, #12]
}
 800f32e:	bf00      	nop
 800f330:	e7fe      	b.n	800f330 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800f332:	f000 ff7f 	bl	8010234 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800f336:	4b1d      	ldr	r3, [pc, #116]	; (800f3ac <xTaskCheckForTimeOut+0xbc>)
 800f338:	681b      	ldr	r3, [r3, #0]
 800f33a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800f33c:	687b      	ldr	r3, [r7, #4]
 800f33e:	685b      	ldr	r3, [r3, #4]
 800f340:	69ba      	ldr	r2, [r7, #24]
 800f342:	1ad3      	subs	r3, r2, r3
 800f344:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800f346:	683b      	ldr	r3, [r7, #0]
 800f348:	681b      	ldr	r3, [r3, #0]
 800f34a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f34e:	d102      	bne.n	800f356 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800f350:	2300      	movs	r3, #0
 800f352:	61fb      	str	r3, [r7, #28]
 800f354:	e023      	b.n	800f39e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800f356:	687b      	ldr	r3, [r7, #4]
 800f358:	681a      	ldr	r2, [r3, #0]
 800f35a:	4b15      	ldr	r3, [pc, #84]	; (800f3b0 <xTaskCheckForTimeOut+0xc0>)
 800f35c:	681b      	ldr	r3, [r3, #0]
 800f35e:	429a      	cmp	r2, r3
 800f360:	d007      	beq.n	800f372 <xTaskCheckForTimeOut+0x82>
 800f362:	687b      	ldr	r3, [r7, #4]
 800f364:	685b      	ldr	r3, [r3, #4]
 800f366:	69ba      	ldr	r2, [r7, #24]
 800f368:	429a      	cmp	r2, r3
 800f36a:	d302      	bcc.n	800f372 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800f36c:	2301      	movs	r3, #1
 800f36e:	61fb      	str	r3, [r7, #28]
 800f370:	e015      	b.n	800f39e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800f372:	683b      	ldr	r3, [r7, #0]
 800f374:	681b      	ldr	r3, [r3, #0]
 800f376:	697a      	ldr	r2, [r7, #20]
 800f378:	429a      	cmp	r2, r3
 800f37a:	d20b      	bcs.n	800f394 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800f37c:	683b      	ldr	r3, [r7, #0]
 800f37e:	681a      	ldr	r2, [r3, #0]
 800f380:	697b      	ldr	r3, [r7, #20]
 800f382:	1ad2      	subs	r2, r2, r3
 800f384:	683b      	ldr	r3, [r7, #0]
 800f386:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800f388:	6878      	ldr	r0, [r7, #4]
 800f38a:	f7ff ff9b 	bl	800f2c4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800f38e:	2300      	movs	r3, #0
 800f390:	61fb      	str	r3, [r7, #28]
 800f392:	e004      	b.n	800f39e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800f394:	683b      	ldr	r3, [r7, #0]
 800f396:	2200      	movs	r2, #0
 800f398:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800f39a:	2301      	movs	r3, #1
 800f39c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800f39e:	f000 ff79 	bl	8010294 <vPortExitCritical>

	return xReturn;
 800f3a2:	69fb      	ldr	r3, [r7, #28]
}
 800f3a4:	4618      	mov	r0, r3
 800f3a6:	3720      	adds	r7, #32
 800f3a8:	46bd      	mov	sp, r7
 800f3aa:	bd80      	pop	{r7, pc}
 800f3ac:	200014d0 	.word	0x200014d0
 800f3b0:	200014e4 	.word	0x200014e4

0800f3b4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800f3b4:	b480      	push	{r7}
 800f3b6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800f3b8:	4b03      	ldr	r3, [pc, #12]	; (800f3c8 <vTaskMissedYield+0x14>)
 800f3ba:	2201      	movs	r2, #1
 800f3bc:	601a      	str	r2, [r3, #0]
}
 800f3be:	bf00      	nop
 800f3c0:	46bd      	mov	sp, r7
 800f3c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3c6:	4770      	bx	lr
 800f3c8:	200014e0 	.word	0x200014e0

0800f3cc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800f3cc:	b580      	push	{r7, lr}
 800f3ce:	b082      	sub	sp, #8
 800f3d0:	af00      	add	r7, sp, #0
 800f3d2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800f3d4:	f000 f852 	bl	800f47c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800f3d8:	4b06      	ldr	r3, [pc, #24]	; (800f3f4 <prvIdleTask+0x28>)
 800f3da:	681b      	ldr	r3, [r3, #0]
 800f3dc:	2b01      	cmp	r3, #1
 800f3de:	d9f9      	bls.n	800f3d4 <prvIdleTask+0x8>
			{
				taskYIELD();
 800f3e0:	4b05      	ldr	r3, [pc, #20]	; (800f3f8 <prvIdleTask+0x2c>)
 800f3e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f3e6:	601a      	str	r2, [r3, #0]
 800f3e8:	f3bf 8f4f 	dsb	sy
 800f3ec:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800f3f0:	e7f0      	b.n	800f3d4 <prvIdleTask+0x8>
 800f3f2:	bf00      	nop
 800f3f4:	20000ffc 	.word	0x20000ffc
 800f3f8:	e000ed04 	.word	0xe000ed04

0800f3fc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800f3fc:	b580      	push	{r7, lr}
 800f3fe:	b082      	sub	sp, #8
 800f400:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800f402:	2300      	movs	r3, #0
 800f404:	607b      	str	r3, [r7, #4]
 800f406:	e00c      	b.n	800f422 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800f408:	687a      	ldr	r2, [r7, #4]
 800f40a:	4613      	mov	r3, r2
 800f40c:	009b      	lsls	r3, r3, #2
 800f40e:	4413      	add	r3, r2
 800f410:	009b      	lsls	r3, r3, #2
 800f412:	4a12      	ldr	r2, [pc, #72]	; (800f45c <prvInitialiseTaskLists+0x60>)
 800f414:	4413      	add	r3, r2
 800f416:	4618      	mov	r0, r3
 800f418:	f7fe f9a8 	bl	800d76c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800f41c:	687b      	ldr	r3, [r7, #4]
 800f41e:	3301      	adds	r3, #1
 800f420:	607b      	str	r3, [r7, #4]
 800f422:	687b      	ldr	r3, [r7, #4]
 800f424:	2b37      	cmp	r3, #55	; 0x37
 800f426:	d9ef      	bls.n	800f408 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800f428:	480d      	ldr	r0, [pc, #52]	; (800f460 <prvInitialiseTaskLists+0x64>)
 800f42a:	f7fe f99f 	bl	800d76c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800f42e:	480d      	ldr	r0, [pc, #52]	; (800f464 <prvInitialiseTaskLists+0x68>)
 800f430:	f7fe f99c 	bl	800d76c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800f434:	480c      	ldr	r0, [pc, #48]	; (800f468 <prvInitialiseTaskLists+0x6c>)
 800f436:	f7fe f999 	bl	800d76c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800f43a:	480c      	ldr	r0, [pc, #48]	; (800f46c <prvInitialiseTaskLists+0x70>)
 800f43c:	f7fe f996 	bl	800d76c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800f440:	480b      	ldr	r0, [pc, #44]	; (800f470 <prvInitialiseTaskLists+0x74>)
 800f442:	f7fe f993 	bl	800d76c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800f446:	4b0b      	ldr	r3, [pc, #44]	; (800f474 <prvInitialiseTaskLists+0x78>)
 800f448:	4a05      	ldr	r2, [pc, #20]	; (800f460 <prvInitialiseTaskLists+0x64>)
 800f44a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800f44c:	4b0a      	ldr	r3, [pc, #40]	; (800f478 <prvInitialiseTaskLists+0x7c>)
 800f44e:	4a05      	ldr	r2, [pc, #20]	; (800f464 <prvInitialiseTaskLists+0x68>)
 800f450:	601a      	str	r2, [r3, #0]
}
 800f452:	bf00      	nop
 800f454:	3708      	adds	r7, #8
 800f456:	46bd      	mov	sp, r7
 800f458:	bd80      	pop	{r7, pc}
 800f45a:	bf00      	nop
 800f45c:	20000ffc 	.word	0x20000ffc
 800f460:	2000145c 	.word	0x2000145c
 800f464:	20001470 	.word	0x20001470
 800f468:	2000148c 	.word	0x2000148c
 800f46c:	200014a0 	.word	0x200014a0
 800f470:	200014b8 	.word	0x200014b8
 800f474:	20001484 	.word	0x20001484
 800f478:	20001488 	.word	0x20001488

0800f47c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800f47c:	b580      	push	{r7, lr}
 800f47e:	b082      	sub	sp, #8
 800f480:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800f482:	e019      	b.n	800f4b8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800f484:	f000 fed6 	bl	8010234 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f488:	4b10      	ldr	r3, [pc, #64]	; (800f4cc <prvCheckTasksWaitingTermination+0x50>)
 800f48a:	68db      	ldr	r3, [r3, #12]
 800f48c:	68db      	ldr	r3, [r3, #12]
 800f48e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800f490:	687b      	ldr	r3, [r7, #4]
 800f492:	3304      	adds	r3, #4
 800f494:	4618      	mov	r0, r3
 800f496:	f7fe f9f3 	bl	800d880 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800f49a:	4b0d      	ldr	r3, [pc, #52]	; (800f4d0 <prvCheckTasksWaitingTermination+0x54>)
 800f49c:	681b      	ldr	r3, [r3, #0]
 800f49e:	3b01      	subs	r3, #1
 800f4a0:	4a0b      	ldr	r2, [pc, #44]	; (800f4d0 <prvCheckTasksWaitingTermination+0x54>)
 800f4a2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800f4a4:	4b0b      	ldr	r3, [pc, #44]	; (800f4d4 <prvCheckTasksWaitingTermination+0x58>)
 800f4a6:	681b      	ldr	r3, [r3, #0]
 800f4a8:	3b01      	subs	r3, #1
 800f4aa:	4a0a      	ldr	r2, [pc, #40]	; (800f4d4 <prvCheckTasksWaitingTermination+0x58>)
 800f4ac:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800f4ae:	f000 fef1 	bl	8010294 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800f4b2:	6878      	ldr	r0, [r7, #4]
 800f4b4:	f000 f810 	bl	800f4d8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800f4b8:	4b06      	ldr	r3, [pc, #24]	; (800f4d4 <prvCheckTasksWaitingTermination+0x58>)
 800f4ba:	681b      	ldr	r3, [r3, #0]
 800f4bc:	2b00      	cmp	r3, #0
 800f4be:	d1e1      	bne.n	800f484 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800f4c0:	bf00      	nop
 800f4c2:	bf00      	nop
 800f4c4:	3708      	adds	r7, #8
 800f4c6:	46bd      	mov	sp, r7
 800f4c8:	bd80      	pop	{r7, pc}
 800f4ca:	bf00      	nop
 800f4cc:	200014a0 	.word	0x200014a0
 800f4d0:	200014cc 	.word	0x200014cc
 800f4d4:	200014b4 	.word	0x200014b4

0800f4d8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800f4d8:	b580      	push	{r7, lr}
 800f4da:	b084      	sub	sp, #16
 800f4dc:	af00      	add	r7, sp, #0
 800f4de:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800f4e0:	687b      	ldr	r3, [r7, #4]
 800f4e2:	3354      	adds	r3, #84	; 0x54
 800f4e4:	4618      	mov	r0, r3
 800f4e6:	f018 fb89 	bl	8027bfc <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800f4ea:	687b      	ldr	r3, [r7, #4]
 800f4ec:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800f4f0:	2b00      	cmp	r3, #0
 800f4f2:	d108      	bne.n	800f506 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800f4f4:	687b      	ldr	r3, [r7, #4]
 800f4f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f4f8:	4618      	mov	r0, r3
 800f4fa:	f001 f889 	bl	8010610 <vPortFree>
				vPortFree( pxTCB );
 800f4fe:	6878      	ldr	r0, [r7, #4]
 800f500:	f001 f886 	bl	8010610 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800f504:	e018      	b.n	800f538 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800f506:	687b      	ldr	r3, [r7, #4]
 800f508:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800f50c:	2b01      	cmp	r3, #1
 800f50e:	d103      	bne.n	800f518 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800f510:	6878      	ldr	r0, [r7, #4]
 800f512:	f001 f87d 	bl	8010610 <vPortFree>
	}
 800f516:	e00f      	b.n	800f538 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800f518:	687b      	ldr	r3, [r7, #4]
 800f51a:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800f51e:	2b02      	cmp	r3, #2
 800f520:	d00a      	beq.n	800f538 <prvDeleteTCB+0x60>
	__asm volatile
 800f522:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f526:	f383 8811 	msr	BASEPRI, r3
 800f52a:	f3bf 8f6f 	isb	sy
 800f52e:	f3bf 8f4f 	dsb	sy
 800f532:	60fb      	str	r3, [r7, #12]
}
 800f534:	bf00      	nop
 800f536:	e7fe      	b.n	800f536 <prvDeleteTCB+0x5e>
	}
 800f538:	bf00      	nop
 800f53a:	3710      	adds	r7, #16
 800f53c:	46bd      	mov	sp, r7
 800f53e:	bd80      	pop	{r7, pc}

0800f540 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800f540:	b480      	push	{r7}
 800f542:	b083      	sub	sp, #12
 800f544:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800f546:	4b0c      	ldr	r3, [pc, #48]	; (800f578 <prvResetNextTaskUnblockTime+0x38>)
 800f548:	681b      	ldr	r3, [r3, #0]
 800f54a:	681b      	ldr	r3, [r3, #0]
 800f54c:	2b00      	cmp	r3, #0
 800f54e:	d104      	bne.n	800f55a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800f550:	4b0a      	ldr	r3, [pc, #40]	; (800f57c <prvResetNextTaskUnblockTime+0x3c>)
 800f552:	f04f 32ff 	mov.w	r2, #4294967295
 800f556:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800f558:	e008      	b.n	800f56c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f55a:	4b07      	ldr	r3, [pc, #28]	; (800f578 <prvResetNextTaskUnblockTime+0x38>)
 800f55c:	681b      	ldr	r3, [r3, #0]
 800f55e:	68db      	ldr	r3, [r3, #12]
 800f560:	68db      	ldr	r3, [r3, #12]
 800f562:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800f564:	687b      	ldr	r3, [r7, #4]
 800f566:	685b      	ldr	r3, [r3, #4]
 800f568:	4a04      	ldr	r2, [pc, #16]	; (800f57c <prvResetNextTaskUnblockTime+0x3c>)
 800f56a:	6013      	str	r3, [r2, #0]
}
 800f56c:	bf00      	nop
 800f56e:	370c      	adds	r7, #12
 800f570:	46bd      	mov	sp, r7
 800f572:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f576:	4770      	bx	lr
 800f578:	20001484 	.word	0x20001484
 800f57c:	200014ec 	.word	0x200014ec

0800f580 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800f580:	b480      	push	{r7}
 800f582:	b083      	sub	sp, #12
 800f584:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800f586:	4b0b      	ldr	r3, [pc, #44]	; (800f5b4 <xTaskGetSchedulerState+0x34>)
 800f588:	681b      	ldr	r3, [r3, #0]
 800f58a:	2b00      	cmp	r3, #0
 800f58c:	d102      	bne.n	800f594 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800f58e:	2301      	movs	r3, #1
 800f590:	607b      	str	r3, [r7, #4]
 800f592:	e008      	b.n	800f5a6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f594:	4b08      	ldr	r3, [pc, #32]	; (800f5b8 <xTaskGetSchedulerState+0x38>)
 800f596:	681b      	ldr	r3, [r3, #0]
 800f598:	2b00      	cmp	r3, #0
 800f59a:	d102      	bne.n	800f5a2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800f59c:	2302      	movs	r3, #2
 800f59e:	607b      	str	r3, [r7, #4]
 800f5a0:	e001      	b.n	800f5a6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800f5a2:	2300      	movs	r3, #0
 800f5a4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800f5a6:	687b      	ldr	r3, [r7, #4]
	}
 800f5a8:	4618      	mov	r0, r3
 800f5aa:	370c      	adds	r7, #12
 800f5ac:	46bd      	mov	sp, r7
 800f5ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5b2:	4770      	bx	lr
 800f5b4:	200014d8 	.word	0x200014d8
 800f5b8:	200014f4 	.word	0x200014f4

0800f5bc <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800f5bc:	b580      	push	{r7, lr}
 800f5be:	b084      	sub	sp, #16
 800f5c0:	af00      	add	r7, sp, #0
 800f5c2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800f5c4:	687b      	ldr	r3, [r7, #4]
 800f5c6:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800f5c8:	2300      	movs	r3, #0
 800f5ca:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800f5cc:	687b      	ldr	r3, [r7, #4]
 800f5ce:	2b00      	cmp	r3, #0
 800f5d0:	d051      	beq.n	800f676 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800f5d2:	68bb      	ldr	r3, [r7, #8]
 800f5d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f5d6:	4b2a      	ldr	r3, [pc, #168]	; (800f680 <xTaskPriorityInherit+0xc4>)
 800f5d8:	681b      	ldr	r3, [r3, #0]
 800f5da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f5dc:	429a      	cmp	r2, r3
 800f5de:	d241      	bcs.n	800f664 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800f5e0:	68bb      	ldr	r3, [r7, #8]
 800f5e2:	699b      	ldr	r3, [r3, #24]
 800f5e4:	2b00      	cmp	r3, #0
 800f5e6:	db06      	blt.n	800f5f6 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f5e8:	4b25      	ldr	r3, [pc, #148]	; (800f680 <xTaskPriorityInherit+0xc4>)
 800f5ea:	681b      	ldr	r3, [r3, #0]
 800f5ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f5ee:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800f5f2:	68bb      	ldr	r3, [r7, #8]
 800f5f4:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800f5f6:	68bb      	ldr	r3, [r7, #8]
 800f5f8:	6959      	ldr	r1, [r3, #20]
 800f5fa:	68bb      	ldr	r3, [r7, #8]
 800f5fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f5fe:	4613      	mov	r3, r2
 800f600:	009b      	lsls	r3, r3, #2
 800f602:	4413      	add	r3, r2
 800f604:	009b      	lsls	r3, r3, #2
 800f606:	4a1f      	ldr	r2, [pc, #124]	; (800f684 <xTaskPriorityInherit+0xc8>)
 800f608:	4413      	add	r3, r2
 800f60a:	4299      	cmp	r1, r3
 800f60c:	d122      	bne.n	800f654 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800f60e:	68bb      	ldr	r3, [r7, #8]
 800f610:	3304      	adds	r3, #4
 800f612:	4618      	mov	r0, r3
 800f614:	f7fe f934 	bl	800d880 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800f618:	4b19      	ldr	r3, [pc, #100]	; (800f680 <xTaskPriorityInherit+0xc4>)
 800f61a:	681b      	ldr	r3, [r3, #0]
 800f61c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f61e:	68bb      	ldr	r3, [r7, #8]
 800f620:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800f622:	68bb      	ldr	r3, [r7, #8]
 800f624:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f626:	4b18      	ldr	r3, [pc, #96]	; (800f688 <xTaskPriorityInherit+0xcc>)
 800f628:	681b      	ldr	r3, [r3, #0]
 800f62a:	429a      	cmp	r2, r3
 800f62c:	d903      	bls.n	800f636 <xTaskPriorityInherit+0x7a>
 800f62e:	68bb      	ldr	r3, [r7, #8]
 800f630:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f632:	4a15      	ldr	r2, [pc, #84]	; (800f688 <xTaskPriorityInherit+0xcc>)
 800f634:	6013      	str	r3, [r2, #0]
 800f636:	68bb      	ldr	r3, [r7, #8]
 800f638:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f63a:	4613      	mov	r3, r2
 800f63c:	009b      	lsls	r3, r3, #2
 800f63e:	4413      	add	r3, r2
 800f640:	009b      	lsls	r3, r3, #2
 800f642:	4a10      	ldr	r2, [pc, #64]	; (800f684 <xTaskPriorityInherit+0xc8>)
 800f644:	441a      	add	r2, r3
 800f646:	68bb      	ldr	r3, [r7, #8]
 800f648:	3304      	adds	r3, #4
 800f64a:	4619      	mov	r1, r3
 800f64c:	4610      	mov	r0, r2
 800f64e:	f7fe f8ba 	bl	800d7c6 <vListInsertEnd>
 800f652:	e004      	b.n	800f65e <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800f654:	4b0a      	ldr	r3, [pc, #40]	; (800f680 <xTaskPriorityInherit+0xc4>)
 800f656:	681b      	ldr	r3, [r3, #0]
 800f658:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f65a:	68bb      	ldr	r3, [r7, #8]
 800f65c:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800f65e:	2301      	movs	r3, #1
 800f660:	60fb      	str	r3, [r7, #12]
 800f662:	e008      	b.n	800f676 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800f664:	68bb      	ldr	r3, [r7, #8]
 800f666:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800f668:	4b05      	ldr	r3, [pc, #20]	; (800f680 <xTaskPriorityInherit+0xc4>)
 800f66a:	681b      	ldr	r3, [r3, #0]
 800f66c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f66e:	429a      	cmp	r2, r3
 800f670:	d201      	bcs.n	800f676 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800f672:	2301      	movs	r3, #1
 800f674:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800f676:	68fb      	ldr	r3, [r7, #12]
	}
 800f678:	4618      	mov	r0, r3
 800f67a:	3710      	adds	r7, #16
 800f67c:	46bd      	mov	sp, r7
 800f67e:	bd80      	pop	{r7, pc}
 800f680:	20000ff8 	.word	0x20000ff8
 800f684:	20000ffc 	.word	0x20000ffc
 800f688:	200014d4 	.word	0x200014d4

0800f68c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800f68c:	b580      	push	{r7, lr}
 800f68e:	b086      	sub	sp, #24
 800f690:	af00      	add	r7, sp, #0
 800f692:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800f694:	687b      	ldr	r3, [r7, #4]
 800f696:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800f698:	2300      	movs	r3, #0
 800f69a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800f69c:	687b      	ldr	r3, [r7, #4]
 800f69e:	2b00      	cmp	r3, #0
 800f6a0:	d056      	beq.n	800f750 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800f6a2:	4b2e      	ldr	r3, [pc, #184]	; (800f75c <xTaskPriorityDisinherit+0xd0>)
 800f6a4:	681b      	ldr	r3, [r3, #0]
 800f6a6:	693a      	ldr	r2, [r7, #16]
 800f6a8:	429a      	cmp	r2, r3
 800f6aa:	d00a      	beq.n	800f6c2 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800f6ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f6b0:	f383 8811 	msr	BASEPRI, r3
 800f6b4:	f3bf 8f6f 	isb	sy
 800f6b8:	f3bf 8f4f 	dsb	sy
 800f6bc:	60fb      	str	r3, [r7, #12]
}
 800f6be:	bf00      	nop
 800f6c0:	e7fe      	b.n	800f6c0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800f6c2:	693b      	ldr	r3, [r7, #16]
 800f6c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f6c6:	2b00      	cmp	r3, #0
 800f6c8:	d10a      	bne.n	800f6e0 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800f6ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f6ce:	f383 8811 	msr	BASEPRI, r3
 800f6d2:	f3bf 8f6f 	isb	sy
 800f6d6:	f3bf 8f4f 	dsb	sy
 800f6da:	60bb      	str	r3, [r7, #8]
}
 800f6dc:	bf00      	nop
 800f6de:	e7fe      	b.n	800f6de <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800f6e0:	693b      	ldr	r3, [r7, #16]
 800f6e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f6e4:	1e5a      	subs	r2, r3, #1
 800f6e6:	693b      	ldr	r3, [r7, #16]
 800f6e8:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800f6ea:	693b      	ldr	r3, [r7, #16]
 800f6ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f6ee:	693b      	ldr	r3, [r7, #16]
 800f6f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f6f2:	429a      	cmp	r2, r3
 800f6f4:	d02c      	beq.n	800f750 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800f6f6:	693b      	ldr	r3, [r7, #16]
 800f6f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f6fa:	2b00      	cmp	r3, #0
 800f6fc:	d128      	bne.n	800f750 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800f6fe:	693b      	ldr	r3, [r7, #16]
 800f700:	3304      	adds	r3, #4
 800f702:	4618      	mov	r0, r3
 800f704:	f7fe f8bc 	bl	800d880 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800f708:	693b      	ldr	r3, [r7, #16]
 800f70a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800f70c:	693b      	ldr	r3, [r7, #16]
 800f70e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f710:	693b      	ldr	r3, [r7, #16]
 800f712:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f714:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800f718:	693b      	ldr	r3, [r7, #16]
 800f71a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800f71c:	693b      	ldr	r3, [r7, #16]
 800f71e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f720:	4b0f      	ldr	r3, [pc, #60]	; (800f760 <xTaskPriorityDisinherit+0xd4>)
 800f722:	681b      	ldr	r3, [r3, #0]
 800f724:	429a      	cmp	r2, r3
 800f726:	d903      	bls.n	800f730 <xTaskPriorityDisinherit+0xa4>
 800f728:	693b      	ldr	r3, [r7, #16]
 800f72a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f72c:	4a0c      	ldr	r2, [pc, #48]	; (800f760 <xTaskPriorityDisinherit+0xd4>)
 800f72e:	6013      	str	r3, [r2, #0]
 800f730:	693b      	ldr	r3, [r7, #16]
 800f732:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f734:	4613      	mov	r3, r2
 800f736:	009b      	lsls	r3, r3, #2
 800f738:	4413      	add	r3, r2
 800f73a:	009b      	lsls	r3, r3, #2
 800f73c:	4a09      	ldr	r2, [pc, #36]	; (800f764 <xTaskPriorityDisinherit+0xd8>)
 800f73e:	441a      	add	r2, r3
 800f740:	693b      	ldr	r3, [r7, #16]
 800f742:	3304      	adds	r3, #4
 800f744:	4619      	mov	r1, r3
 800f746:	4610      	mov	r0, r2
 800f748:	f7fe f83d 	bl	800d7c6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800f74c:	2301      	movs	r3, #1
 800f74e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800f750:	697b      	ldr	r3, [r7, #20]
	}
 800f752:	4618      	mov	r0, r3
 800f754:	3718      	adds	r7, #24
 800f756:	46bd      	mov	sp, r7
 800f758:	bd80      	pop	{r7, pc}
 800f75a:	bf00      	nop
 800f75c:	20000ff8 	.word	0x20000ff8
 800f760:	200014d4 	.word	0x200014d4
 800f764:	20000ffc 	.word	0x20000ffc

0800f768 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800f768:	b580      	push	{r7, lr}
 800f76a:	b088      	sub	sp, #32
 800f76c:	af00      	add	r7, sp, #0
 800f76e:	6078      	str	r0, [r7, #4]
 800f770:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800f772:	687b      	ldr	r3, [r7, #4]
 800f774:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800f776:	2301      	movs	r3, #1
 800f778:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800f77a:	687b      	ldr	r3, [r7, #4]
 800f77c:	2b00      	cmp	r3, #0
 800f77e:	d06a      	beq.n	800f856 <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800f780:	69bb      	ldr	r3, [r7, #24]
 800f782:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f784:	2b00      	cmp	r3, #0
 800f786:	d10a      	bne.n	800f79e <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800f788:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f78c:	f383 8811 	msr	BASEPRI, r3
 800f790:	f3bf 8f6f 	isb	sy
 800f794:	f3bf 8f4f 	dsb	sy
 800f798:	60fb      	str	r3, [r7, #12]
}
 800f79a:	bf00      	nop
 800f79c:	e7fe      	b.n	800f79c <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800f79e:	69bb      	ldr	r3, [r7, #24]
 800f7a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f7a2:	683a      	ldr	r2, [r7, #0]
 800f7a4:	429a      	cmp	r2, r3
 800f7a6:	d902      	bls.n	800f7ae <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800f7a8:	683b      	ldr	r3, [r7, #0]
 800f7aa:	61fb      	str	r3, [r7, #28]
 800f7ac:	e002      	b.n	800f7b4 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800f7ae:	69bb      	ldr	r3, [r7, #24]
 800f7b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f7b2:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800f7b4:	69bb      	ldr	r3, [r7, #24]
 800f7b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f7b8:	69fa      	ldr	r2, [r7, #28]
 800f7ba:	429a      	cmp	r2, r3
 800f7bc:	d04b      	beq.n	800f856 <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800f7be:	69bb      	ldr	r3, [r7, #24]
 800f7c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f7c2:	697a      	ldr	r2, [r7, #20]
 800f7c4:	429a      	cmp	r2, r3
 800f7c6:	d146      	bne.n	800f856 <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800f7c8:	4b25      	ldr	r3, [pc, #148]	; (800f860 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 800f7ca:	681b      	ldr	r3, [r3, #0]
 800f7cc:	69ba      	ldr	r2, [r7, #24]
 800f7ce:	429a      	cmp	r2, r3
 800f7d0:	d10a      	bne.n	800f7e8 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800f7d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f7d6:	f383 8811 	msr	BASEPRI, r3
 800f7da:	f3bf 8f6f 	isb	sy
 800f7de:	f3bf 8f4f 	dsb	sy
 800f7e2:	60bb      	str	r3, [r7, #8]
}
 800f7e4:	bf00      	nop
 800f7e6:	e7fe      	b.n	800f7e6 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800f7e8:	69bb      	ldr	r3, [r7, #24]
 800f7ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f7ec:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800f7ee:	69bb      	ldr	r3, [r7, #24]
 800f7f0:	69fa      	ldr	r2, [r7, #28]
 800f7f2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800f7f4:	69bb      	ldr	r3, [r7, #24]
 800f7f6:	699b      	ldr	r3, [r3, #24]
 800f7f8:	2b00      	cmp	r3, #0
 800f7fa:	db04      	blt.n	800f806 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f7fc:	69fb      	ldr	r3, [r7, #28]
 800f7fe:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800f802:	69bb      	ldr	r3, [r7, #24]
 800f804:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800f806:	69bb      	ldr	r3, [r7, #24]
 800f808:	6959      	ldr	r1, [r3, #20]
 800f80a:	693a      	ldr	r2, [r7, #16]
 800f80c:	4613      	mov	r3, r2
 800f80e:	009b      	lsls	r3, r3, #2
 800f810:	4413      	add	r3, r2
 800f812:	009b      	lsls	r3, r3, #2
 800f814:	4a13      	ldr	r2, [pc, #76]	; (800f864 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800f816:	4413      	add	r3, r2
 800f818:	4299      	cmp	r1, r3
 800f81a:	d11c      	bne.n	800f856 <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800f81c:	69bb      	ldr	r3, [r7, #24]
 800f81e:	3304      	adds	r3, #4
 800f820:	4618      	mov	r0, r3
 800f822:	f7fe f82d 	bl	800d880 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800f826:	69bb      	ldr	r3, [r7, #24]
 800f828:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f82a:	4b0f      	ldr	r3, [pc, #60]	; (800f868 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800f82c:	681b      	ldr	r3, [r3, #0]
 800f82e:	429a      	cmp	r2, r3
 800f830:	d903      	bls.n	800f83a <vTaskPriorityDisinheritAfterTimeout+0xd2>
 800f832:	69bb      	ldr	r3, [r7, #24]
 800f834:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f836:	4a0c      	ldr	r2, [pc, #48]	; (800f868 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800f838:	6013      	str	r3, [r2, #0]
 800f83a:	69bb      	ldr	r3, [r7, #24]
 800f83c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f83e:	4613      	mov	r3, r2
 800f840:	009b      	lsls	r3, r3, #2
 800f842:	4413      	add	r3, r2
 800f844:	009b      	lsls	r3, r3, #2
 800f846:	4a07      	ldr	r2, [pc, #28]	; (800f864 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800f848:	441a      	add	r2, r3
 800f84a:	69bb      	ldr	r3, [r7, #24]
 800f84c:	3304      	adds	r3, #4
 800f84e:	4619      	mov	r1, r3
 800f850:	4610      	mov	r0, r2
 800f852:	f7fd ffb8 	bl	800d7c6 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800f856:	bf00      	nop
 800f858:	3720      	adds	r7, #32
 800f85a:	46bd      	mov	sp, r7
 800f85c:	bd80      	pop	{r7, pc}
 800f85e:	bf00      	nop
 800f860:	20000ff8 	.word	0x20000ff8
 800f864:	20000ffc 	.word	0x20000ffc
 800f868:	200014d4 	.word	0x200014d4

0800f86c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800f86c:	b480      	push	{r7}
 800f86e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800f870:	4b07      	ldr	r3, [pc, #28]	; (800f890 <pvTaskIncrementMutexHeldCount+0x24>)
 800f872:	681b      	ldr	r3, [r3, #0]
 800f874:	2b00      	cmp	r3, #0
 800f876:	d004      	beq.n	800f882 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800f878:	4b05      	ldr	r3, [pc, #20]	; (800f890 <pvTaskIncrementMutexHeldCount+0x24>)
 800f87a:	681b      	ldr	r3, [r3, #0]
 800f87c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800f87e:	3201      	adds	r2, #1
 800f880:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800f882:	4b03      	ldr	r3, [pc, #12]	; (800f890 <pvTaskIncrementMutexHeldCount+0x24>)
 800f884:	681b      	ldr	r3, [r3, #0]
	}
 800f886:	4618      	mov	r0, r3
 800f888:	46bd      	mov	sp, r7
 800f88a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f88e:	4770      	bx	lr
 800f890:	20000ff8 	.word	0x20000ff8

0800f894 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800f894:	b580      	push	{r7, lr}
 800f896:	b084      	sub	sp, #16
 800f898:	af00      	add	r7, sp, #0
 800f89a:	6078      	str	r0, [r7, #4]
 800f89c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800f89e:	4b21      	ldr	r3, [pc, #132]	; (800f924 <prvAddCurrentTaskToDelayedList+0x90>)
 800f8a0:	681b      	ldr	r3, [r3, #0]
 800f8a2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800f8a4:	4b20      	ldr	r3, [pc, #128]	; (800f928 <prvAddCurrentTaskToDelayedList+0x94>)
 800f8a6:	681b      	ldr	r3, [r3, #0]
 800f8a8:	3304      	adds	r3, #4
 800f8aa:	4618      	mov	r0, r3
 800f8ac:	f7fd ffe8 	bl	800d880 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800f8b0:	687b      	ldr	r3, [r7, #4]
 800f8b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f8b6:	d10a      	bne.n	800f8ce <prvAddCurrentTaskToDelayedList+0x3a>
 800f8b8:	683b      	ldr	r3, [r7, #0]
 800f8ba:	2b00      	cmp	r3, #0
 800f8bc:	d007      	beq.n	800f8ce <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f8be:	4b1a      	ldr	r3, [pc, #104]	; (800f928 <prvAddCurrentTaskToDelayedList+0x94>)
 800f8c0:	681b      	ldr	r3, [r3, #0]
 800f8c2:	3304      	adds	r3, #4
 800f8c4:	4619      	mov	r1, r3
 800f8c6:	4819      	ldr	r0, [pc, #100]	; (800f92c <prvAddCurrentTaskToDelayedList+0x98>)
 800f8c8:	f7fd ff7d 	bl	800d7c6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800f8cc:	e026      	b.n	800f91c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800f8ce:	68fa      	ldr	r2, [r7, #12]
 800f8d0:	687b      	ldr	r3, [r7, #4]
 800f8d2:	4413      	add	r3, r2
 800f8d4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800f8d6:	4b14      	ldr	r3, [pc, #80]	; (800f928 <prvAddCurrentTaskToDelayedList+0x94>)
 800f8d8:	681b      	ldr	r3, [r3, #0]
 800f8da:	68ba      	ldr	r2, [r7, #8]
 800f8dc:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800f8de:	68ba      	ldr	r2, [r7, #8]
 800f8e0:	68fb      	ldr	r3, [r7, #12]
 800f8e2:	429a      	cmp	r2, r3
 800f8e4:	d209      	bcs.n	800f8fa <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f8e6:	4b12      	ldr	r3, [pc, #72]	; (800f930 <prvAddCurrentTaskToDelayedList+0x9c>)
 800f8e8:	681a      	ldr	r2, [r3, #0]
 800f8ea:	4b0f      	ldr	r3, [pc, #60]	; (800f928 <prvAddCurrentTaskToDelayedList+0x94>)
 800f8ec:	681b      	ldr	r3, [r3, #0]
 800f8ee:	3304      	adds	r3, #4
 800f8f0:	4619      	mov	r1, r3
 800f8f2:	4610      	mov	r0, r2
 800f8f4:	f7fd ff8b 	bl	800d80e <vListInsert>
}
 800f8f8:	e010      	b.n	800f91c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f8fa:	4b0e      	ldr	r3, [pc, #56]	; (800f934 <prvAddCurrentTaskToDelayedList+0xa0>)
 800f8fc:	681a      	ldr	r2, [r3, #0]
 800f8fe:	4b0a      	ldr	r3, [pc, #40]	; (800f928 <prvAddCurrentTaskToDelayedList+0x94>)
 800f900:	681b      	ldr	r3, [r3, #0]
 800f902:	3304      	adds	r3, #4
 800f904:	4619      	mov	r1, r3
 800f906:	4610      	mov	r0, r2
 800f908:	f7fd ff81 	bl	800d80e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800f90c:	4b0a      	ldr	r3, [pc, #40]	; (800f938 <prvAddCurrentTaskToDelayedList+0xa4>)
 800f90e:	681b      	ldr	r3, [r3, #0]
 800f910:	68ba      	ldr	r2, [r7, #8]
 800f912:	429a      	cmp	r2, r3
 800f914:	d202      	bcs.n	800f91c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800f916:	4a08      	ldr	r2, [pc, #32]	; (800f938 <prvAddCurrentTaskToDelayedList+0xa4>)
 800f918:	68bb      	ldr	r3, [r7, #8]
 800f91a:	6013      	str	r3, [r2, #0]
}
 800f91c:	bf00      	nop
 800f91e:	3710      	adds	r7, #16
 800f920:	46bd      	mov	sp, r7
 800f922:	bd80      	pop	{r7, pc}
 800f924:	200014d0 	.word	0x200014d0
 800f928:	20000ff8 	.word	0x20000ff8
 800f92c:	200014b8 	.word	0x200014b8
 800f930:	20001488 	.word	0x20001488
 800f934:	20001484 	.word	0x20001484
 800f938:	200014ec 	.word	0x200014ec

0800f93c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800f93c:	b580      	push	{r7, lr}
 800f93e:	b08a      	sub	sp, #40	; 0x28
 800f940:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800f942:	2300      	movs	r3, #0
 800f944:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800f946:	f000 fb07 	bl	800ff58 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800f94a:	4b1c      	ldr	r3, [pc, #112]	; (800f9bc <xTimerCreateTimerTask+0x80>)
 800f94c:	681b      	ldr	r3, [r3, #0]
 800f94e:	2b00      	cmp	r3, #0
 800f950:	d021      	beq.n	800f996 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800f952:	2300      	movs	r3, #0
 800f954:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800f956:	2300      	movs	r3, #0
 800f958:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800f95a:	1d3a      	adds	r2, r7, #4
 800f95c:	f107 0108 	add.w	r1, r7, #8
 800f960:	f107 030c 	add.w	r3, r7, #12
 800f964:	4618      	mov	r0, r3
 800f966:	f7fd fee7 	bl	800d738 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800f96a:	6879      	ldr	r1, [r7, #4]
 800f96c:	68bb      	ldr	r3, [r7, #8]
 800f96e:	68fa      	ldr	r2, [r7, #12]
 800f970:	9202      	str	r2, [sp, #8]
 800f972:	9301      	str	r3, [sp, #4]
 800f974:	2302      	movs	r3, #2
 800f976:	9300      	str	r3, [sp, #0]
 800f978:	2300      	movs	r3, #0
 800f97a:	460a      	mov	r2, r1
 800f97c:	4910      	ldr	r1, [pc, #64]	; (800f9c0 <xTimerCreateTimerTask+0x84>)
 800f97e:	4811      	ldr	r0, [pc, #68]	; (800f9c4 <xTimerCreateTimerTask+0x88>)
 800f980:	f7fe ffb6 	bl	800e8f0 <xTaskCreateStatic>
 800f984:	4603      	mov	r3, r0
 800f986:	4a10      	ldr	r2, [pc, #64]	; (800f9c8 <xTimerCreateTimerTask+0x8c>)
 800f988:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800f98a:	4b0f      	ldr	r3, [pc, #60]	; (800f9c8 <xTimerCreateTimerTask+0x8c>)
 800f98c:	681b      	ldr	r3, [r3, #0]
 800f98e:	2b00      	cmp	r3, #0
 800f990:	d001      	beq.n	800f996 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800f992:	2301      	movs	r3, #1
 800f994:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800f996:	697b      	ldr	r3, [r7, #20]
 800f998:	2b00      	cmp	r3, #0
 800f99a:	d10a      	bne.n	800f9b2 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800f99c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f9a0:	f383 8811 	msr	BASEPRI, r3
 800f9a4:	f3bf 8f6f 	isb	sy
 800f9a8:	f3bf 8f4f 	dsb	sy
 800f9ac:	613b      	str	r3, [r7, #16]
}
 800f9ae:	bf00      	nop
 800f9b0:	e7fe      	b.n	800f9b0 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800f9b2:	697b      	ldr	r3, [r7, #20]
}
 800f9b4:	4618      	mov	r0, r3
 800f9b6:	3718      	adds	r7, #24
 800f9b8:	46bd      	mov	sp, r7
 800f9ba:	bd80      	pop	{r7, pc}
 800f9bc:	20001528 	.word	0x20001528
 800f9c0:	080283b0 	.word	0x080283b0
 800f9c4:	0800fb01 	.word	0x0800fb01
 800f9c8:	2000152c 	.word	0x2000152c

0800f9cc <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800f9cc:	b580      	push	{r7, lr}
 800f9ce:	b08a      	sub	sp, #40	; 0x28
 800f9d0:	af00      	add	r7, sp, #0
 800f9d2:	60f8      	str	r0, [r7, #12]
 800f9d4:	60b9      	str	r1, [r7, #8]
 800f9d6:	607a      	str	r2, [r7, #4]
 800f9d8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800f9da:	2300      	movs	r3, #0
 800f9dc:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800f9de:	68fb      	ldr	r3, [r7, #12]
 800f9e0:	2b00      	cmp	r3, #0
 800f9e2:	d10a      	bne.n	800f9fa <xTimerGenericCommand+0x2e>
	__asm volatile
 800f9e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f9e8:	f383 8811 	msr	BASEPRI, r3
 800f9ec:	f3bf 8f6f 	isb	sy
 800f9f0:	f3bf 8f4f 	dsb	sy
 800f9f4:	623b      	str	r3, [r7, #32]
}
 800f9f6:	bf00      	nop
 800f9f8:	e7fe      	b.n	800f9f8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800f9fa:	4b1a      	ldr	r3, [pc, #104]	; (800fa64 <xTimerGenericCommand+0x98>)
 800f9fc:	681b      	ldr	r3, [r3, #0]
 800f9fe:	2b00      	cmp	r3, #0
 800fa00:	d02a      	beq.n	800fa58 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800fa02:	68bb      	ldr	r3, [r7, #8]
 800fa04:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800fa06:	687b      	ldr	r3, [r7, #4]
 800fa08:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800fa0a:	68fb      	ldr	r3, [r7, #12]
 800fa0c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800fa0e:	68bb      	ldr	r3, [r7, #8]
 800fa10:	2b05      	cmp	r3, #5
 800fa12:	dc18      	bgt.n	800fa46 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800fa14:	f7ff fdb4 	bl	800f580 <xTaskGetSchedulerState>
 800fa18:	4603      	mov	r3, r0
 800fa1a:	2b02      	cmp	r3, #2
 800fa1c:	d109      	bne.n	800fa32 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800fa1e:	4b11      	ldr	r3, [pc, #68]	; (800fa64 <xTimerGenericCommand+0x98>)
 800fa20:	6818      	ldr	r0, [r3, #0]
 800fa22:	f107 0110 	add.w	r1, r7, #16
 800fa26:	2300      	movs	r3, #0
 800fa28:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fa2a:	f7fe f8fb 	bl	800dc24 <xQueueGenericSend>
 800fa2e:	6278      	str	r0, [r7, #36]	; 0x24
 800fa30:	e012      	b.n	800fa58 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800fa32:	4b0c      	ldr	r3, [pc, #48]	; (800fa64 <xTimerGenericCommand+0x98>)
 800fa34:	6818      	ldr	r0, [r3, #0]
 800fa36:	f107 0110 	add.w	r1, r7, #16
 800fa3a:	2300      	movs	r3, #0
 800fa3c:	2200      	movs	r2, #0
 800fa3e:	f7fe f8f1 	bl	800dc24 <xQueueGenericSend>
 800fa42:	6278      	str	r0, [r7, #36]	; 0x24
 800fa44:	e008      	b.n	800fa58 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800fa46:	4b07      	ldr	r3, [pc, #28]	; (800fa64 <xTimerGenericCommand+0x98>)
 800fa48:	6818      	ldr	r0, [r3, #0]
 800fa4a:	f107 0110 	add.w	r1, r7, #16
 800fa4e:	2300      	movs	r3, #0
 800fa50:	683a      	ldr	r2, [r7, #0]
 800fa52:	f7fe f9e5 	bl	800de20 <xQueueGenericSendFromISR>
 800fa56:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800fa58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800fa5a:	4618      	mov	r0, r3
 800fa5c:	3728      	adds	r7, #40	; 0x28
 800fa5e:	46bd      	mov	sp, r7
 800fa60:	bd80      	pop	{r7, pc}
 800fa62:	bf00      	nop
 800fa64:	20001528 	.word	0x20001528

0800fa68 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800fa68:	b580      	push	{r7, lr}
 800fa6a:	b088      	sub	sp, #32
 800fa6c:	af02      	add	r7, sp, #8
 800fa6e:	6078      	str	r0, [r7, #4]
 800fa70:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fa72:	4b22      	ldr	r3, [pc, #136]	; (800fafc <prvProcessExpiredTimer+0x94>)
 800fa74:	681b      	ldr	r3, [r3, #0]
 800fa76:	68db      	ldr	r3, [r3, #12]
 800fa78:	68db      	ldr	r3, [r3, #12]
 800fa7a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800fa7c:	697b      	ldr	r3, [r7, #20]
 800fa7e:	3304      	adds	r3, #4
 800fa80:	4618      	mov	r0, r3
 800fa82:	f7fd fefd 	bl	800d880 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800fa86:	697b      	ldr	r3, [r7, #20]
 800fa88:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800fa8c:	f003 0304 	and.w	r3, r3, #4
 800fa90:	2b00      	cmp	r3, #0
 800fa92:	d022      	beq.n	800fada <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800fa94:	697b      	ldr	r3, [r7, #20]
 800fa96:	699a      	ldr	r2, [r3, #24]
 800fa98:	687b      	ldr	r3, [r7, #4]
 800fa9a:	18d1      	adds	r1, r2, r3
 800fa9c:	687b      	ldr	r3, [r7, #4]
 800fa9e:	683a      	ldr	r2, [r7, #0]
 800faa0:	6978      	ldr	r0, [r7, #20]
 800faa2:	f000 f8d1 	bl	800fc48 <prvInsertTimerInActiveList>
 800faa6:	4603      	mov	r3, r0
 800faa8:	2b00      	cmp	r3, #0
 800faaa:	d01f      	beq.n	800faec <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800faac:	2300      	movs	r3, #0
 800faae:	9300      	str	r3, [sp, #0]
 800fab0:	2300      	movs	r3, #0
 800fab2:	687a      	ldr	r2, [r7, #4]
 800fab4:	2100      	movs	r1, #0
 800fab6:	6978      	ldr	r0, [r7, #20]
 800fab8:	f7ff ff88 	bl	800f9cc <xTimerGenericCommand>
 800fabc:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800fabe:	693b      	ldr	r3, [r7, #16]
 800fac0:	2b00      	cmp	r3, #0
 800fac2:	d113      	bne.n	800faec <prvProcessExpiredTimer+0x84>
	__asm volatile
 800fac4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fac8:	f383 8811 	msr	BASEPRI, r3
 800facc:	f3bf 8f6f 	isb	sy
 800fad0:	f3bf 8f4f 	dsb	sy
 800fad4:	60fb      	str	r3, [r7, #12]
}
 800fad6:	bf00      	nop
 800fad8:	e7fe      	b.n	800fad8 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800fada:	697b      	ldr	r3, [r7, #20]
 800fadc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800fae0:	f023 0301 	bic.w	r3, r3, #1
 800fae4:	b2da      	uxtb	r2, r3
 800fae6:	697b      	ldr	r3, [r7, #20]
 800fae8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800faec:	697b      	ldr	r3, [r7, #20]
 800faee:	6a1b      	ldr	r3, [r3, #32]
 800faf0:	6978      	ldr	r0, [r7, #20]
 800faf2:	4798      	blx	r3
}
 800faf4:	bf00      	nop
 800faf6:	3718      	adds	r7, #24
 800faf8:	46bd      	mov	sp, r7
 800fafa:	bd80      	pop	{r7, pc}
 800fafc:	20001520 	.word	0x20001520

0800fb00 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800fb00:	b580      	push	{r7, lr}
 800fb02:	b084      	sub	sp, #16
 800fb04:	af00      	add	r7, sp, #0
 800fb06:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800fb08:	f107 0308 	add.w	r3, r7, #8
 800fb0c:	4618      	mov	r0, r3
 800fb0e:	f000 f857 	bl	800fbc0 <prvGetNextExpireTime>
 800fb12:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800fb14:	68bb      	ldr	r3, [r7, #8]
 800fb16:	4619      	mov	r1, r3
 800fb18:	68f8      	ldr	r0, [r7, #12]
 800fb1a:	f000 f803 	bl	800fb24 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800fb1e:	f000 f8d5 	bl	800fccc <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800fb22:	e7f1      	b.n	800fb08 <prvTimerTask+0x8>

0800fb24 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800fb24:	b580      	push	{r7, lr}
 800fb26:	b084      	sub	sp, #16
 800fb28:	af00      	add	r7, sp, #0
 800fb2a:	6078      	str	r0, [r7, #4]
 800fb2c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800fb2e:	f7ff f93b 	bl	800eda8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800fb32:	f107 0308 	add.w	r3, r7, #8
 800fb36:	4618      	mov	r0, r3
 800fb38:	f000 f866 	bl	800fc08 <prvSampleTimeNow>
 800fb3c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800fb3e:	68bb      	ldr	r3, [r7, #8]
 800fb40:	2b00      	cmp	r3, #0
 800fb42:	d130      	bne.n	800fba6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800fb44:	683b      	ldr	r3, [r7, #0]
 800fb46:	2b00      	cmp	r3, #0
 800fb48:	d10a      	bne.n	800fb60 <prvProcessTimerOrBlockTask+0x3c>
 800fb4a:	687a      	ldr	r2, [r7, #4]
 800fb4c:	68fb      	ldr	r3, [r7, #12]
 800fb4e:	429a      	cmp	r2, r3
 800fb50:	d806      	bhi.n	800fb60 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800fb52:	f7ff f937 	bl	800edc4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800fb56:	68f9      	ldr	r1, [r7, #12]
 800fb58:	6878      	ldr	r0, [r7, #4]
 800fb5a:	f7ff ff85 	bl	800fa68 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800fb5e:	e024      	b.n	800fbaa <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800fb60:	683b      	ldr	r3, [r7, #0]
 800fb62:	2b00      	cmp	r3, #0
 800fb64:	d008      	beq.n	800fb78 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800fb66:	4b13      	ldr	r3, [pc, #76]	; (800fbb4 <prvProcessTimerOrBlockTask+0x90>)
 800fb68:	681b      	ldr	r3, [r3, #0]
 800fb6a:	681b      	ldr	r3, [r3, #0]
 800fb6c:	2b00      	cmp	r3, #0
 800fb6e:	d101      	bne.n	800fb74 <prvProcessTimerOrBlockTask+0x50>
 800fb70:	2301      	movs	r3, #1
 800fb72:	e000      	b.n	800fb76 <prvProcessTimerOrBlockTask+0x52>
 800fb74:	2300      	movs	r3, #0
 800fb76:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800fb78:	4b0f      	ldr	r3, [pc, #60]	; (800fbb8 <prvProcessTimerOrBlockTask+0x94>)
 800fb7a:	6818      	ldr	r0, [r3, #0]
 800fb7c:	687a      	ldr	r2, [r7, #4]
 800fb7e:	68fb      	ldr	r3, [r7, #12]
 800fb80:	1ad3      	subs	r3, r2, r3
 800fb82:	683a      	ldr	r2, [r7, #0]
 800fb84:	4619      	mov	r1, r3
 800fb86:	f7fe fe7f 	bl	800e888 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800fb8a:	f7ff f91b 	bl	800edc4 <xTaskResumeAll>
 800fb8e:	4603      	mov	r3, r0
 800fb90:	2b00      	cmp	r3, #0
 800fb92:	d10a      	bne.n	800fbaa <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800fb94:	4b09      	ldr	r3, [pc, #36]	; (800fbbc <prvProcessTimerOrBlockTask+0x98>)
 800fb96:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fb9a:	601a      	str	r2, [r3, #0]
 800fb9c:	f3bf 8f4f 	dsb	sy
 800fba0:	f3bf 8f6f 	isb	sy
}
 800fba4:	e001      	b.n	800fbaa <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800fba6:	f7ff f90d 	bl	800edc4 <xTaskResumeAll>
}
 800fbaa:	bf00      	nop
 800fbac:	3710      	adds	r7, #16
 800fbae:	46bd      	mov	sp, r7
 800fbb0:	bd80      	pop	{r7, pc}
 800fbb2:	bf00      	nop
 800fbb4:	20001524 	.word	0x20001524
 800fbb8:	20001528 	.word	0x20001528
 800fbbc:	e000ed04 	.word	0xe000ed04

0800fbc0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800fbc0:	b480      	push	{r7}
 800fbc2:	b085      	sub	sp, #20
 800fbc4:	af00      	add	r7, sp, #0
 800fbc6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800fbc8:	4b0e      	ldr	r3, [pc, #56]	; (800fc04 <prvGetNextExpireTime+0x44>)
 800fbca:	681b      	ldr	r3, [r3, #0]
 800fbcc:	681b      	ldr	r3, [r3, #0]
 800fbce:	2b00      	cmp	r3, #0
 800fbd0:	d101      	bne.n	800fbd6 <prvGetNextExpireTime+0x16>
 800fbd2:	2201      	movs	r2, #1
 800fbd4:	e000      	b.n	800fbd8 <prvGetNextExpireTime+0x18>
 800fbd6:	2200      	movs	r2, #0
 800fbd8:	687b      	ldr	r3, [r7, #4]
 800fbda:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800fbdc:	687b      	ldr	r3, [r7, #4]
 800fbde:	681b      	ldr	r3, [r3, #0]
 800fbe0:	2b00      	cmp	r3, #0
 800fbe2:	d105      	bne.n	800fbf0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800fbe4:	4b07      	ldr	r3, [pc, #28]	; (800fc04 <prvGetNextExpireTime+0x44>)
 800fbe6:	681b      	ldr	r3, [r3, #0]
 800fbe8:	68db      	ldr	r3, [r3, #12]
 800fbea:	681b      	ldr	r3, [r3, #0]
 800fbec:	60fb      	str	r3, [r7, #12]
 800fbee:	e001      	b.n	800fbf4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800fbf0:	2300      	movs	r3, #0
 800fbf2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800fbf4:	68fb      	ldr	r3, [r7, #12]
}
 800fbf6:	4618      	mov	r0, r3
 800fbf8:	3714      	adds	r7, #20
 800fbfa:	46bd      	mov	sp, r7
 800fbfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc00:	4770      	bx	lr
 800fc02:	bf00      	nop
 800fc04:	20001520 	.word	0x20001520

0800fc08 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800fc08:	b580      	push	{r7, lr}
 800fc0a:	b084      	sub	sp, #16
 800fc0c:	af00      	add	r7, sp, #0
 800fc0e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800fc10:	f7ff f976 	bl	800ef00 <xTaskGetTickCount>
 800fc14:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800fc16:	4b0b      	ldr	r3, [pc, #44]	; (800fc44 <prvSampleTimeNow+0x3c>)
 800fc18:	681b      	ldr	r3, [r3, #0]
 800fc1a:	68fa      	ldr	r2, [r7, #12]
 800fc1c:	429a      	cmp	r2, r3
 800fc1e:	d205      	bcs.n	800fc2c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800fc20:	f000 f936 	bl	800fe90 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800fc24:	687b      	ldr	r3, [r7, #4]
 800fc26:	2201      	movs	r2, #1
 800fc28:	601a      	str	r2, [r3, #0]
 800fc2a:	e002      	b.n	800fc32 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800fc2c:	687b      	ldr	r3, [r7, #4]
 800fc2e:	2200      	movs	r2, #0
 800fc30:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800fc32:	4a04      	ldr	r2, [pc, #16]	; (800fc44 <prvSampleTimeNow+0x3c>)
 800fc34:	68fb      	ldr	r3, [r7, #12]
 800fc36:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800fc38:	68fb      	ldr	r3, [r7, #12]
}
 800fc3a:	4618      	mov	r0, r3
 800fc3c:	3710      	adds	r7, #16
 800fc3e:	46bd      	mov	sp, r7
 800fc40:	bd80      	pop	{r7, pc}
 800fc42:	bf00      	nop
 800fc44:	20001530 	.word	0x20001530

0800fc48 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800fc48:	b580      	push	{r7, lr}
 800fc4a:	b086      	sub	sp, #24
 800fc4c:	af00      	add	r7, sp, #0
 800fc4e:	60f8      	str	r0, [r7, #12]
 800fc50:	60b9      	str	r1, [r7, #8]
 800fc52:	607a      	str	r2, [r7, #4]
 800fc54:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800fc56:	2300      	movs	r3, #0
 800fc58:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800fc5a:	68fb      	ldr	r3, [r7, #12]
 800fc5c:	68ba      	ldr	r2, [r7, #8]
 800fc5e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800fc60:	68fb      	ldr	r3, [r7, #12]
 800fc62:	68fa      	ldr	r2, [r7, #12]
 800fc64:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800fc66:	68ba      	ldr	r2, [r7, #8]
 800fc68:	687b      	ldr	r3, [r7, #4]
 800fc6a:	429a      	cmp	r2, r3
 800fc6c:	d812      	bhi.n	800fc94 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800fc6e:	687a      	ldr	r2, [r7, #4]
 800fc70:	683b      	ldr	r3, [r7, #0]
 800fc72:	1ad2      	subs	r2, r2, r3
 800fc74:	68fb      	ldr	r3, [r7, #12]
 800fc76:	699b      	ldr	r3, [r3, #24]
 800fc78:	429a      	cmp	r2, r3
 800fc7a:	d302      	bcc.n	800fc82 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800fc7c:	2301      	movs	r3, #1
 800fc7e:	617b      	str	r3, [r7, #20]
 800fc80:	e01b      	b.n	800fcba <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800fc82:	4b10      	ldr	r3, [pc, #64]	; (800fcc4 <prvInsertTimerInActiveList+0x7c>)
 800fc84:	681a      	ldr	r2, [r3, #0]
 800fc86:	68fb      	ldr	r3, [r7, #12]
 800fc88:	3304      	adds	r3, #4
 800fc8a:	4619      	mov	r1, r3
 800fc8c:	4610      	mov	r0, r2
 800fc8e:	f7fd fdbe 	bl	800d80e <vListInsert>
 800fc92:	e012      	b.n	800fcba <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800fc94:	687a      	ldr	r2, [r7, #4]
 800fc96:	683b      	ldr	r3, [r7, #0]
 800fc98:	429a      	cmp	r2, r3
 800fc9a:	d206      	bcs.n	800fcaa <prvInsertTimerInActiveList+0x62>
 800fc9c:	68ba      	ldr	r2, [r7, #8]
 800fc9e:	683b      	ldr	r3, [r7, #0]
 800fca0:	429a      	cmp	r2, r3
 800fca2:	d302      	bcc.n	800fcaa <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800fca4:	2301      	movs	r3, #1
 800fca6:	617b      	str	r3, [r7, #20]
 800fca8:	e007      	b.n	800fcba <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800fcaa:	4b07      	ldr	r3, [pc, #28]	; (800fcc8 <prvInsertTimerInActiveList+0x80>)
 800fcac:	681a      	ldr	r2, [r3, #0]
 800fcae:	68fb      	ldr	r3, [r7, #12]
 800fcb0:	3304      	adds	r3, #4
 800fcb2:	4619      	mov	r1, r3
 800fcb4:	4610      	mov	r0, r2
 800fcb6:	f7fd fdaa 	bl	800d80e <vListInsert>
		}
	}

	return xProcessTimerNow;
 800fcba:	697b      	ldr	r3, [r7, #20]
}
 800fcbc:	4618      	mov	r0, r3
 800fcbe:	3718      	adds	r7, #24
 800fcc0:	46bd      	mov	sp, r7
 800fcc2:	bd80      	pop	{r7, pc}
 800fcc4:	20001524 	.word	0x20001524
 800fcc8:	20001520 	.word	0x20001520

0800fccc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800fccc:	b580      	push	{r7, lr}
 800fcce:	b08e      	sub	sp, #56	; 0x38
 800fcd0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800fcd2:	e0ca      	b.n	800fe6a <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800fcd4:	687b      	ldr	r3, [r7, #4]
 800fcd6:	2b00      	cmp	r3, #0
 800fcd8:	da18      	bge.n	800fd0c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800fcda:	1d3b      	adds	r3, r7, #4
 800fcdc:	3304      	adds	r3, #4
 800fcde:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800fce0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fce2:	2b00      	cmp	r3, #0
 800fce4:	d10a      	bne.n	800fcfc <prvProcessReceivedCommands+0x30>
	__asm volatile
 800fce6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fcea:	f383 8811 	msr	BASEPRI, r3
 800fcee:	f3bf 8f6f 	isb	sy
 800fcf2:	f3bf 8f4f 	dsb	sy
 800fcf6:	61fb      	str	r3, [r7, #28]
}
 800fcf8:	bf00      	nop
 800fcfa:	e7fe      	b.n	800fcfa <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800fcfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fcfe:	681b      	ldr	r3, [r3, #0]
 800fd00:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fd02:	6850      	ldr	r0, [r2, #4]
 800fd04:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fd06:	6892      	ldr	r2, [r2, #8]
 800fd08:	4611      	mov	r1, r2
 800fd0a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800fd0c:	687b      	ldr	r3, [r7, #4]
 800fd0e:	2b00      	cmp	r3, #0
 800fd10:	f2c0 80aa 	blt.w	800fe68 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800fd14:	68fb      	ldr	r3, [r7, #12]
 800fd16:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800fd18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fd1a:	695b      	ldr	r3, [r3, #20]
 800fd1c:	2b00      	cmp	r3, #0
 800fd1e:	d004      	beq.n	800fd2a <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800fd20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fd22:	3304      	adds	r3, #4
 800fd24:	4618      	mov	r0, r3
 800fd26:	f7fd fdab 	bl	800d880 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800fd2a:	463b      	mov	r3, r7
 800fd2c:	4618      	mov	r0, r3
 800fd2e:	f7ff ff6b 	bl	800fc08 <prvSampleTimeNow>
 800fd32:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800fd34:	687b      	ldr	r3, [r7, #4]
 800fd36:	2b09      	cmp	r3, #9
 800fd38:	f200 8097 	bhi.w	800fe6a <prvProcessReceivedCommands+0x19e>
 800fd3c:	a201      	add	r2, pc, #4	; (adr r2, 800fd44 <prvProcessReceivedCommands+0x78>)
 800fd3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fd42:	bf00      	nop
 800fd44:	0800fd6d 	.word	0x0800fd6d
 800fd48:	0800fd6d 	.word	0x0800fd6d
 800fd4c:	0800fd6d 	.word	0x0800fd6d
 800fd50:	0800fde1 	.word	0x0800fde1
 800fd54:	0800fdf5 	.word	0x0800fdf5
 800fd58:	0800fe3f 	.word	0x0800fe3f
 800fd5c:	0800fd6d 	.word	0x0800fd6d
 800fd60:	0800fd6d 	.word	0x0800fd6d
 800fd64:	0800fde1 	.word	0x0800fde1
 800fd68:	0800fdf5 	.word	0x0800fdf5
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800fd6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fd6e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800fd72:	f043 0301 	orr.w	r3, r3, #1
 800fd76:	b2da      	uxtb	r2, r3
 800fd78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fd7a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800fd7e:	68ba      	ldr	r2, [r7, #8]
 800fd80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fd82:	699b      	ldr	r3, [r3, #24]
 800fd84:	18d1      	adds	r1, r2, r3
 800fd86:	68bb      	ldr	r3, [r7, #8]
 800fd88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fd8a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800fd8c:	f7ff ff5c 	bl	800fc48 <prvInsertTimerInActiveList>
 800fd90:	4603      	mov	r3, r0
 800fd92:	2b00      	cmp	r3, #0
 800fd94:	d069      	beq.n	800fe6a <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800fd96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fd98:	6a1b      	ldr	r3, [r3, #32]
 800fd9a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800fd9c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800fd9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fda0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800fda4:	f003 0304 	and.w	r3, r3, #4
 800fda8:	2b00      	cmp	r3, #0
 800fdaa:	d05e      	beq.n	800fe6a <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800fdac:	68ba      	ldr	r2, [r7, #8]
 800fdae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fdb0:	699b      	ldr	r3, [r3, #24]
 800fdb2:	441a      	add	r2, r3
 800fdb4:	2300      	movs	r3, #0
 800fdb6:	9300      	str	r3, [sp, #0]
 800fdb8:	2300      	movs	r3, #0
 800fdba:	2100      	movs	r1, #0
 800fdbc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800fdbe:	f7ff fe05 	bl	800f9cc <xTimerGenericCommand>
 800fdc2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800fdc4:	6a3b      	ldr	r3, [r7, #32]
 800fdc6:	2b00      	cmp	r3, #0
 800fdc8:	d14f      	bne.n	800fe6a <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800fdca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fdce:	f383 8811 	msr	BASEPRI, r3
 800fdd2:	f3bf 8f6f 	isb	sy
 800fdd6:	f3bf 8f4f 	dsb	sy
 800fdda:	61bb      	str	r3, [r7, #24]
}
 800fddc:	bf00      	nop
 800fdde:	e7fe      	b.n	800fdde <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800fde0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fde2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800fde6:	f023 0301 	bic.w	r3, r3, #1
 800fdea:	b2da      	uxtb	r2, r3
 800fdec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fdee:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800fdf2:	e03a      	b.n	800fe6a <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800fdf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fdf6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800fdfa:	f043 0301 	orr.w	r3, r3, #1
 800fdfe:	b2da      	uxtb	r2, r3
 800fe00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fe02:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800fe06:	68ba      	ldr	r2, [r7, #8]
 800fe08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fe0a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800fe0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fe0e:	699b      	ldr	r3, [r3, #24]
 800fe10:	2b00      	cmp	r3, #0
 800fe12:	d10a      	bne.n	800fe2a <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800fe14:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fe18:	f383 8811 	msr	BASEPRI, r3
 800fe1c:	f3bf 8f6f 	isb	sy
 800fe20:	f3bf 8f4f 	dsb	sy
 800fe24:	617b      	str	r3, [r7, #20]
}
 800fe26:	bf00      	nop
 800fe28:	e7fe      	b.n	800fe28 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800fe2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fe2c:	699a      	ldr	r2, [r3, #24]
 800fe2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fe30:	18d1      	adds	r1, r2, r3
 800fe32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fe34:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fe36:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800fe38:	f7ff ff06 	bl	800fc48 <prvInsertTimerInActiveList>
					break;
 800fe3c:	e015      	b.n	800fe6a <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800fe3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fe40:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800fe44:	f003 0302 	and.w	r3, r3, #2
 800fe48:	2b00      	cmp	r3, #0
 800fe4a:	d103      	bne.n	800fe54 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800fe4c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800fe4e:	f000 fbdf 	bl	8010610 <vPortFree>
 800fe52:	e00a      	b.n	800fe6a <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800fe54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fe56:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800fe5a:	f023 0301 	bic.w	r3, r3, #1
 800fe5e:	b2da      	uxtb	r2, r3
 800fe60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fe62:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800fe66:	e000      	b.n	800fe6a <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800fe68:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800fe6a:	4b08      	ldr	r3, [pc, #32]	; (800fe8c <prvProcessReceivedCommands+0x1c0>)
 800fe6c:	681b      	ldr	r3, [r3, #0]
 800fe6e:	1d39      	adds	r1, r7, #4
 800fe70:	2200      	movs	r2, #0
 800fe72:	4618      	mov	r0, r3
 800fe74:	f7fe f8fc 	bl	800e070 <xQueueReceive>
 800fe78:	4603      	mov	r3, r0
 800fe7a:	2b00      	cmp	r3, #0
 800fe7c:	f47f af2a 	bne.w	800fcd4 <prvProcessReceivedCommands+0x8>
	}
}
 800fe80:	bf00      	nop
 800fe82:	bf00      	nop
 800fe84:	3730      	adds	r7, #48	; 0x30
 800fe86:	46bd      	mov	sp, r7
 800fe88:	bd80      	pop	{r7, pc}
 800fe8a:	bf00      	nop
 800fe8c:	20001528 	.word	0x20001528

0800fe90 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800fe90:	b580      	push	{r7, lr}
 800fe92:	b088      	sub	sp, #32
 800fe94:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800fe96:	e048      	b.n	800ff2a <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800fe98:	4b2d      	ldr	r3, [pc, #180]	; (800ff50 <prvSwitchTimerLists+0xc0>)
 800fe9a:	681b      	ldr	r3, [r3, #0]
 800fe9c:	68db      	ldr	r3, [r3, #12]
 800fe9e:	681b      	ldr	r3, [r3, #0]
 800fea0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fea2:	4b2b      	ldr	r3, [pc, #172]	; (800ff50 <prvSwitchTimerLists+0xc0>)
 800fea4:	681b      	ldr	r3, [r3, #0]
 800fea6:	68db      	ldr	r3, [r3, #12]
 800fea8:	68db      	ldr	r3, [r3, #12]
 800feaa:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800feac:	68fb      	ldr	r3, [r7, #12]
 800feae:	3304      	adds	r3, #4
 800feb0:	4618      	mov	r0, r3
 800feb2:	f7fd fce5 	bl	800d880 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800feb6:	68fb      	ldr	r3, [r7, #12]
 800feb8:	6a1b      	ldr	r3, [r3, #32]
 800feba:	68f8      	ldr	r0, [r7, #12]
 800febc:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800febe:	68fb      	ldr	r3, [r7, #12]
 800fec0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800fec4:	f003 0304 	and.w	r3, r3, #4
 800fec8:	2b00      	cmp	r3, #0
 800feca:	d02e      	beq.n	800ff2a <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800fecc:	68fb      	ldr	r3, [r7, #12]
 800fece:	699b      	ldr	r3, [r3, #24]
 800fed0:	693a      	ldr	r2, [r7, #16]
 800fed2:	4413      	add	r3, r2
 800fed4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800fed6:	68ba      	ldr	r2, [r7, #8]
 800fed8:	693b      	ldr	r3, [r7, #16]
 800feda:	429a      	cmp	r2, r3
 800fedc:	d90e      	bls.n	800fefc <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800fede:	68fb      	ldr	r3, [r7, #12]
 800fee0:	68ba      	ldr	r2, [r7, #8]
 800fee2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800fee4:	68fb      	ldr	r3, [r7, #12]
 800fee6:	68fa      	ldr	r2, [r7, #12]
 800fee8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800feea:	4b19      	ldr	r3, [pc, #100]	; (800ff50 <prvSwitchTimerLists+0xc0>)
 800feec:	681a      	ldr	r2, [r3, #0]
 800feee:	68fb      	ldr	r3, [r7, #12]
 800fef0:	3304      	adds	r3, #4
 800fef2:	4619      	mov	r1, r3
 800fef4:	4610      	mov	r0, r2
 800fef6:	f7fd fc8a 	bl	800d80e <vListInsert>
 800fefa:	e016      	b.n	800ff2a <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800fefc:	2300      	movs	r3, #0
 800fefe:	9300      	str	r3, [sp, #0]
 800ff00:	2300      	movs	r3, #0
 800ff02:	693a      	ldr	r2, [r7, #16]
 800ff04:	2100      	movs	r1, #0
 800ff06:	68f8      	ldr	r0, [r7, #12]
 800ff08:	f7ff fd60 	bl	800f9cc <xTimerGenericCommand>
 800ff0c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800ff0e:	687b      	ldr	r3, [r7, #4]
 800ff10:	2b00      	cmp	r3, #0
 800ff12:	d10a      	bne.n	800ff2a <prvSwitchTimerLists+0x9a>
	__asm volatile
 800ff14:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ff18:	f383 8811 	msr	BASEPRI, r3
 800ff1c:	f3bf 8f6f 	isb	sy
 800ff20:	f3bf 8f4f 	dsb	sy
 800ff24:	603b      	str	r3, [r7, #0]
}
 800ff26:	bf00      	nop
 800ff28:	e7fe      	b.n	800ff28 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800ff2a:	4b09      	ldr	r3, [pc, #36]	; (800ff50 <prvSwitchTimerLists+0xc0>)
 800ff2c:	681b      	ldr	r3, [r3, #0]
 800ff2e:	681b      	ldr	r3, [r3, #0]
 800ff30:	2b00      	cmp	r3, #0
 800ff32:	d1b1      	bne.n	800fe98 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800ff34:	4b06      	ldr	r3, [pc, #24]	; (800ff50 <prvSwitchTimerLists+0xc0>)
 800ff36:	681b      	ldr	r3, [r3, #0]
 800ff38:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800ff3a:	4b06      	ldr	r3, [pc, #24]	; (800ff54 <prvSwitchTimerLists+0xc4>)
 800ff3c:	681b      	ldr	r3, [r3, #0]
 800ff3e:	4a04      	ldr	r2, [pc, #16]	; (800ff50 <prvSwitchTimerLists+0xc0>)
 800ff40:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800ff42:	4a04      	ldr	r2, [pc, #16]	; (800ff54 <prvSwitchTimerLists+0xc4>)
 800ff44:	697b      	ldr	r3, [r7, #20]
 800ff46:	6013      	str	r3, [r2, #0]
}
 800ff48:	bf00      	nop
 800ff4a:	3718      	adds	r7, #24
 800ff4c:	46bd      	mov	sp, r7
 800ff4e:	bd80      	pop	{r7, pc}
 800ff50:	20001520 	.word	0x20001520
 800ff54:	20001524 	.word	0x20001524

0800ff58 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800ff58:	b580      	push	{r7, lr}
 800ff5a:	b082      	sub	sp, #8
 800ff5c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800ff5e:	f000 f969 	bl	8010234 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800ff62:	4b15      	ldr	r3, [pc, #84]	; (800ffb8 <prvCheckForValidListAndQueue+0x60>)
 800ff64:	681b      	ldr	r3, [r3, #0]
 800ff66:	2b00      	cmp	r3, #0
 800ff68:	d120      	bne.n	800ffac <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800ff6a:	4814      	ldr	r0, [pc, #80]	; (800ffbc <prvCheckForValidListAndQueue+0x64>)
 800ff6c:	f7fd fbfe 	bl	800d76c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800ff70:	4813      	ldr	r0, [pc, #76]	; (800ffc0 <prvCheckForValidListAndQueue+0x68>)
 800ff72:	f7fd fbfb 	bl	800d76c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800ff76:	4b13      	ldr	r3, [pc, #76]	; (800ffc4 <prvCheckForValidListAndQueue+0x6c>)
 800ff78:	4a10      	ldr	r2, [pc, #64]	; (800ffbc <prvCheckForValidListAndQueue+0x64>)
 800ff7a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800ff7c:	4b12      	ldr	r3, [pc, #72]	; (800ffc8 <prvCheckForValidListAndQueue+0x70>)
 800ff7e:	4a10      	ldr	r2, [pc, #64]	; (800ffc0 <prvCheckForValidListAndQueue+0x68>)
 800ff80:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800ff82:	2300      	movs	r3, #0
 800ff84:	9300      	str	r3, [sp, #0]
 800ff86:	4b11      	ldr	r3, [pc, #68]	; (800ffcc <prvCheckForValidListAndQueue+0x74>)
 800ff88:	4a11      	ldr	r2, [pc, #68]	; (800ffd0 <prvCheckForValidListAndQueue+0x78>)
 800ff8a:	2110      	movs	r1, #16
 800ff8c:	200a      	movs	r0, #10
 800ff8e:	f7fd fd09 	bl	800d9a4 <xQueueGenericCreateStatic>
 800ff92:	4603      	mov	r3, r0
 800ff94:	4a08      	ldr	r2, [pc, #32]	; (800ffb8 <prvCheckForValidListAndQueue+0x60>)
 800ff96:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800ff98:	4b07      	ldr	r3, [pc, #28]	; (800ffb8 <prvCheckForValidListAndQueue+0x60>)
 800ff9a:	681b      	ldr	r3, [r3, #0]
 800ff9c:	2b00      	cmp	r3, #0
 800ff9e:	d005      	beq.n	800ffac <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800ffa0:	4b05      	ldr	r3, [pc, #20]	; (800ffb8 <prvCheckForValidListAndQueue+0x60>)
 800ffa2:	681b      	ldr	r3, [r3, #0]
 800ffa4:	490b      	ldr	r1, [pc, #44]	; (800ffd4 <prvCheckForValidListAndQueue+0x7c>)
 800ffa6:	4618      	mov	r0, r3
 800ffa8:	f7fe fc1a 	bl	800e7e0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800ffac:	f000 f972 	bl	8010294 <vPortExitCritical>
}
 800ffb0:	bf00      	nop
 800ffb2:	46bd      	mov	sp, r7
 800ffb4:	bd80      	pop	{r7, pc}
 800ffb6:	bf00      	nop
 800ffb8:	20001528 	.word	0x20001528
 800ffbc:	200014f8 	.word	0x200014f8
 800ffc0:	2000150c 	.word	0x2000150c
 800ffc4:	20001520 	.word	0x20001520
 800ffc8:	20001524 	.word	0x20001524
 800ffcc:	200015d4 	.word	0x200015d4
 800ffd0:	20001534 	.word	0x20001534
 800ffd4:	080283b8 	.word	0x080283b8

0800ffd8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800ffd8:	b480      	push	{r7}
 800ffda:	b085      	sub	sp, #20
 800ffdc:	af00      	add	r7, sp, #0
 800ffde:	60f8      	str	r0, [r7, #12]
 800ffe0:	60b9      	str	r1, [r7, #8]
 800ffe2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800ffe4:	68fb      	ldr	r3, [r7, #12]
 800ffe6:	3b04      	subs	r3, #4
 800ffe8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800ffea:	68fb      	ldr	r3, [r7, #12]
 800ffec:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800fff0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800fff2:	68fb      	ldr	r3, [r7, #12]
 800fff4:	3b04      	subs	r3, #4
 800fff6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800fff8:	68bb      	ldr	r3, [r7, #8]
 800fffa:	f023 0201 	bic.w	r2, r3, #1
 800fffe:	68fb      	ldr	r3, [r7, #12]
 8010000:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8010002:	68fb      	ldr	r3, [r7, #12]
 8010004:	3b04      	subs	r3, #4
 8010006:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8010008:	4a0c      	ldr	r2, [pc, #48]	; (801003c <pxPortInitialiseStack+0x64>)
 801000a:	68fb      	ldr	r3, [r7, #12]
 801000c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 801000e:	68fb      	ldr	r3, [r7, #12]
 8010010:	3b14      	subs	r3, #20
 8010012:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8010014:	687a      	ldr	r2, [r7, #4]
 8010016:	68fb      	ldr	r3, [r7, #12]
 8010018:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 801001a:	68fb      	ldr	r3, [r7, #12]
 801001c:	3b04      	subs	r3, #4
 801001e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8010020:	68fb      	ldr	r3, [r7, #12]
 8010022:	f06f 0202 	mvn.w	r2, #2
 8010026:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8010028:	68fb      	ldr	r3, [r7, #12]
 801002a:	3b20      	subs	r3, #32
 801002c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 801002e:	68fb      	ldr	r3, [r7, #12]
}
 8010030:	4618      	mov	r0, r3
 8010032:	3714      	adds	r7, #20
 8010034:	46bd      	mov	sp, r7
 8010036:	f85d 7b04 	ldr.w	r7, [sp], #4
 801003a:	4770      	bx	lr
 801003c:	08010041 	.word	0x08010041

08010040 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8010040:	b480      	push	{r7}
 8010042:	b085      	sub	sp, #20
 8010044:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8010046:	2300      	movs	r3, #0
 8010048:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 801004a:	4b12      	ldr	r3, [pc, #72]	; (8010094 <prvTaskExitError+0x54>)
 801004c:	681b      	ldr	r3, [r3, #0]
 801004e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010052:	d00a      	beq.n	801006a <prvTaskExitError+0x2a>
	__asm volatile
 8010054:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010058:	f383 8811 	msr	BASEPRI, r3
 801005c:	f3bf 8f6f 	isb	sy
 8010060:	f3bf 8f4f 	dsb	sy
 8010064:	60fb      	str	r3, [r7, #12]
}
 8010066:	bf00      	nop
 8010068:	e7fe      	b.n	8010068 <prvTaskExitError+0x28>
	__asm volatile
 801006a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801006e:	f383 8811 	msr	BASEPRI, r3
 8010072:	f3bf 8f6f 	isb	sy
 8010076:	f3bf 8f4f 	dsb	sy
 801007a:	60bb      	str	r3, [r7, #8]
}
 801007c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 801007e:	bf00      	nop
 8010080:	687b      	ldr	r3, [r7, #4]
 8010082:	2b00      	cmp	r3, #0
 8010084:	d0fc      	beq.n	8010080 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8010086:	bf00      	nop
 8010088:	bf00      	nop
 801008a:	3714      	adds	r7, #20
 801008c:	46bd      	mov	sp, r7
 801008e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010092:	4770      	bx	lr
 8010094:	20000168 	.word	0x20000168
	...

080100a0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80100a0:	4b07      	ldr	r3, [pc, #28]	; (80100c0 <pxCurrentTCBConst2>)
 80100a2:	6819      	ldr	r1, [r3, #0]
 80100a4:	6808      	ldr	r0, [r1, #0]
 80100a6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80100aa:	f380 8809 	msr	PSP, r0
 80100ae:	f3bf 8f6f 	isb	sy
 80100b2:	f04f 0000 	mov.w	r0, #0
 80100b6:	f380 8811 	msr	BASEPRI, r0
 80100ba:	4770      	bx	lr
 80100bc:	f3af 8000 	nop.w

080100c0 <pxCurrentTCBConst2>:
 80100c0:	20000ff8 	.word	0x20000ff8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80100c4:	bf00      	nop
 80100c6:	bf00      	nop

080100c8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80100c8:	4808      	ldr	r0, [pc, #32]	; (80100ec <prvPortStartFirstTask+0x24>)
 80100ca:	6800      	ldr	r0, [r0, #0]
 80100cc:	6800      	ldr	r0, [r0, #0]
 80100ce:	f380 8808 	msr	MSP, r0
 80100d2:	f04f 0000 	mov.w	r0, #0
 80100d6:	f380 8814 	msr	CONTROL, r0
 80100da:	b662      	cpsie	i
 80100dc:	b661      	cpsie	f
 80100de:	f3bf 8f4f 	dsb	sy
 80100e2:	f3bf 8f6f 	isb	sy
 80100e6:	df00      	svc	0
 80100e8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80100ea:	bf00      	nop
 80100ec:	e000ed08 	.word	0xe000ed08

080100f0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80100f0:	b580      	push	{r7, lr}
 80100f2:	b086      	sub	sp, #24
 80100f4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80100f6:	4b46      	ldr	r3, [pc, #280]	; (8010210 <xPortStartScheduler+0x120>)
 80100f8:	681b      	ldr	r3, [r3, #0]
 80100fa:	4a46      	ldr	r2, [pc, #280]	; (8010214 <xPortStartScheduler+0x124>)
 80100fc:	4293      	cmp	r3, r2
 80100fe:	d10a      	bne.n	8010116 <xPortStartScheduler+0x26>
	__asm volatile
 8010100:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010104:	f383 8811 	msr	BASEPRI, r3
 8010108:	f3bf 8f6f 	isb	sy
 801010c:	f3bf 8f4f 	dsb	sy
 8010110:	613b      	str	r3, [r7, #16]
}
 8010112:	bf00      	nop
 8010114:	e7fe      	b.n	8010114 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8010116:	4b3e      	ldr	r3, [pc, #248]	; (8010210 <xPortStartScheduler+0x120>)
 8010118:	681b      	ldr	r3, [r3, #0]
 801011a:	4a3f      	ldr	r2, [pc, #252]	; (8010218 <xPortStartScheduler+0x128>)
 801011c:	4293      	cmp	r3, r2
 801011e:	d10a      	bne.n	8010136 <xPortStartScheduler+0x46>
	__asm volatile
 8010120:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010124:	f383 8811 	msr	BASEPRI, r3
 8010128:	f3bf 8f6f 	isb	sy
 801012c:	f3bf 8f4f 	dsb	sy
 8010130:	60fb      	str	r3, [r7, #12]
}
 8010132:	bf00      	nop
 8010134:	e7fe      	b.n	8010134 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8010136:	4b39      	ldr	r3, [pc, #228]	; (801021c <xPortStartScheduler+0x12c>)
 8010138:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 801013a:	697b      	ldr	r3, [r7, #20]
 801013c:	781b      	ldrb	r3, [r3, #0]
 801013e:	b2db      	uxtb	r3, r3
 8010140:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8010142:	697b      	ldr	r3, [r7, #20]
 8010144:	22ff      	movs	r2, #255	; 0xff
 8010146:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8010148:	697b      	ldr	r3, [r7, #20]
 801014a:	781b      	ldrb	r3, [r3, #0]
 801014c:	b2db      	uxtb	r3, r3
 801014e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8010150:	78fb      	ldrb	r3, [r7, #3]
 8010152:	b2db      	uxtb	r3, r3
 8010154:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8010158:	b2da      	uxtb	r2, r3
 801015a:	4b31      	ldr	r3, [pc, #196]	; (8010220 <xPortStartScheduler+0x130>)
 801015c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 801015e:	4b31      	ldr	r3, [pc, #196]	; (8010224 <xPortStartScheduler+0x134>)
 8010160:	2207      	movs	r2, #7
 8010162:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8010164:	e009      	b.n	801017a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8010166:	4b2f      	ldr	r3, [pc, #188]	; (8010224 <xPortStartScheduler+0x134>)
 8010168:	681b      	ldr	r3, [r3, #0]
 801016a:	3b01      	subs	r3, #1
 801016c:	4a2d      	ldr	r2, [pc, #180]	; (8010224 <xPortStartScheduler+0x134>)
 801016e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8010170:	78fb      	ldrb	r3, [r7, #3]
 8010172:	b2db      	uxtb	r3, r3
 8010174:	005b      	lsls	r3, r3, #1
 8010176:	b2db      	uxtb	r3, r3
 8010178:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801017a:	78fb      	ldrb	r3, [r7, #3]
 801017c:	b2db      	uxtb	r3, r3
 801017e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010182:	2b80      	cmp	r3, #128	; 0x80
 8010184:	d0ef      	beq.n	8010166 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8010186:	4b27      	ldr	r3, [pc, #156]	; (8010224 <xPortStartScheduler+0x134>)
 8010188:	681b      	ldr	r3, [r3, #0]
 801018a:	f1c3 0307 	rsb	r3, r3, #7
 801018e:	2b04      	cmp	r3, #4
 8010190:	d00a      	beq.n	80101a8 <xPortStartScheduler+0xb8>
	__asm volatile
 8010192:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010196:	f383 8811 	msr	BASEPRI, r3
 801019a:	f3bf 8f6f 	isb	sy
 801019e:	f3bf 8f4f 	dsb	sy
 80101a2:	60bb      	str	r3, [r7, #8]
}
 80101a4:	bf00      	nop
 80101a6:	e7fe      	b.n	80101a6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80101a8:	4b1e      	ldr	r3, [pc, #120]	; (8010224 <xPortStartScheduler+0x134>)
 80101aa:	681b      	ldr	r3, [r3, #0]
 80101ac:	021b      	lsls	r3, r3, #8
 80101ae:	4a1d      	ldr	r2, [pc, #116]	; (8010224 <xPortStartScheduler+0x134>)
 80101b0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80101b2:	4b1c      	ldr	r3, [pc, #112]	; (8010224 <xPortStartScheduler+0x134>)
 80101b4:	681b      	ldr	r3, [r3, #0]
 80101b6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80101ba:	4a1a      	ldr	r2, [pc, #104]	; (8010224 <xPortStartScheduler+0x134>)
 80101bc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80101be:	687b      	ldr	r3, [r7, #4]
 80101c0:	b2da      	uxtb	r2, r3
 80101c2:	697b      	ldr	r3, [r7, #20]
 80101c4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80101c6:	4b18      	ldr	r3, [pc, #96]	; (8010228 <xPortStartScheduler+0x138>)
 80101c8:	681b      	ldr	r3, [r3, #0]
 80101ca:	4a17      	ldr	r2, [pc, #92]	; (8010228 <xPortStartScheduler+0x138>)
 80101cc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80101d0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80101d2:	4b15      	ldr	r3, [pc, #84]	; (8010228 <xPortStartScheduler+0x138>)
 80101d4:	681b      	ldr	r3, [r3, #0]
 80101d6:	4a14      	ldr	r2, [pc, #80]	; (8010228 <xPortStartScheduler+0x138>)
 80101d8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80101dc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80101de:	f000 f8dd 	bl	801039c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80101e2:	4b12      	ldr	r3, [pc, #72]	; (801022c <xPortStartScheduler+0x13c>)
 80101e4:	2200      	movs	r2, #0
 80101e6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80101e8:	f000 f8fc 	bl	80103e4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80101ec:	4b10      	ldr	r3, [pc, #64]	; (8010230 <xPortStartScheduler+0x140>)
 80101ee:	681b      	ldr	r3, [r3, #0]
 80101f0:	4a0f      	ldr	r2, [pc, #60]	; (8010230 <xPortStartScheduler+0x140>)
 80101f2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80101f6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80101f8:	f7ff ff66 	bl	80100c8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80101fc:	f7fe ff4a 	bl	800f094 <vTaskSwitchContext>
	prvTaskExitError();
 8010200:	f7ff ff1e 	bl	8010040 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8010204:	2300      	movs	r3, #0
}
 8010206:	4618      	mov	r0, r3
 8010208:	3718      	adds	r7, #24
 801020a:	46bd      	mov	sp, r7
 801020c:	bd80      	pop	{r7, pc}
 801020e:	bf00      	nop
 8010210:	e000ed00 	.word	0xe000ed00
 8010214:	410fc271 	.word	0x410fc271
 8010218:	410fc270 	.word	0x410fc270
 801021c:	e000e400 	.word	0xe000e400
 8010220:	20001624 	.word	0x20001624
 8010224:	20001628 	.word	0x20001628
 8010228:	e000ed20 	.word	0xe000ed20
 801022c:	20000168 	.word	0x20000168
 8010230:	e000ef34 	.word	0xe000ef34

08010234 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8010234:	b480      	push	{r7}
 8010236:	b083      	sub	sp, #12
 8010238:	af00      	add	r7, sp, #0
	__asm volatile
 801023a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801023e:	f383 8811 	msr	BASEPRI, r3
 8010242:	f3bf 8f6f 	isb	sy
 8010246:	f3bf 8f4f 	dsb	sy
 801024a:	607b      	str	r3, [r7, #4]
}
 801024c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 801024e:	4b0f      	ldr	r3, [pc, #60]	; (801028c <vPortEnterCritical+0x58>)
 8010250:	681b      	ldr	r3, [r3, #0]
 8010252:	3301      	adds	r3, #1
 8010254:	4a0d      	ldr	r2, [pc, #52]	; (801028c <vPortEnterCritical+0x58>)
 8010256:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8010258:	4b0c      	ldr	r3, [pc, #48]	; (801028c <vPortEnterCritical+0x58>)
 801025a:	681b      	ldr	r3, [r3, #0]
 801025c:	2b01      	cmp	r3, #1
 801025e:	d10f      	bne.n	8010280 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8010260:	4b0b      	ldr	r3, [pc, #44]	; (8010290 <vPortEnterCritical+0x5c>)
 8010262:	681b      	ldr	r3, [r3, #0]
 8010264:	b2db      	uxtb	r3, r3
 8010266:	2b00      	cmp	r3, #0
 8010268:	d00a      	beq.n	8010280 <vPortEnterCritical+0x4c>
	__asm volatile
 801026a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801026e:	f383 8811 	msr	BASEPRI, r3
 8010272:	f3bf 8f6f 	isb	sy
 8010276:	f3bf 8f4f 	dsb	sy
 801027a:	603b      	str	r3, [r7, #0]
}
 801027c:	bf00      	nop
 801027e:	e7fe      	b.n	801027e <vPortEnterCritical+0x4a>
	}
}
 8010280:	bf00      	nop
 8010282:	370c      	adds	r7, #12
 8010284:	46bd      	mov	sp, r7
 8010286:	f85d 7b04 	ldr.w	r7, [sp], #4
 801028a:	4770      	bx	lr
 801028c:	20000168 	.word	0x20000168
 8010290:	e000ed04 	.word	0xe000ed04

08010294 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8010294:	b480      	push	{r7}
 8010296:	b083      	sub	sp, #12
 8010298:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 801029a:	4b12      	ldr	r3, [pc, #72]	; (80102e4 <vPortExitCritical+0x50>)
 801029c:	681b      	ldr	r3, [r3, #0]
 801029e:	2b00      	cmp	r3, #0
 80102a0:	d10a      	bne.n	80102b8 <vPortExitCritical+0x24>
	__asm volatile
 80102a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80102a6:	f383 8811 	msr	BASEPRI, r3
 80102aa:	f3bf 8f6f 	isb	sy
 80102ae:	f3bf 8f4f 	dsb	sy
 80102b2:	607b      	str	r3, [r7, #4]
}
 80102b4:	bf00      	nop
 80102b6:	e7fe      	b.n	80102b6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80102b8:	4b0a      	ldr	r3, [pc, #40]	; (80102e4 <vPortExitCritical+0x50>)
 80102ba:	681b      	ldr	r3, [r3, #0]
 80102bc:	3b01      	subs	r3, #1
 80102be:	4a09      	ldr	r2, [pc, #36]	; (80102e4 <vPortExitCritical+0x50>)
 80102c0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80102c2:	4b08      	ldr	r3, [pc, #32]	; (80102e4 <vPortExitCritical+0x50>)
 80102c4:	681b      	ldr	r3, [r3, #0]
 80102c6:	2b00      	cmp	r3, #0
 80102c8:	d105      	bne.n	80102d6 <vPortExitCritical+0x42>
 80102ca:	2300      	movs	r3, #0
 80102cc:	603b      	str	r3, [r7, #0]
	__asm volatile
 80102ce:	683b      	ldr	r3, [r7, #0]
 80102d0:	f383 8811 	msr	BASEPRI, r3
}
 80102d4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80102d6:	bf00      	nop
 80102d8:	370c      	adds	r7, #12
 80102da:	46bd      	mov	sp, r7
 80102dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102e0:	4770      	bx	lr
 80102e2:	bf00      	nop
 80102e4:	20000168 	.word	0x20000168
	...

080102f0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80102f0:	f3ef 8009 	mrs	r0, PSP
 80102f4:	f3bf 8f6f 	isb	sy
 80102f8:	4b15      	ldr	r3, [pc, #84]	; (8010350 <pxCurrentTCBConst>)
 80102fa:	681a      	ldr	r2, [r3, #0]
 80102fc:	f01e 0f10 	tst.w	lr, #16
 8010300:	bf08      	it	eq
 8010302:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8010306:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801030a:	6010      	str	r0, [r2, #0]
 801030c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8010310:	f04f 0050 	mov.w	r0, #80	; 0x50
 8010314:	f380 8811 	msr	BASEPRI, r0
 8010318:	f3bf 8f4f 	dsb	sy
 801031c:	f3bf 8f6f 	isb	sy
 8010320:	f7fe feb8 	bl	800f094 <vTaskSwitchContext>
 8010324:	f04f 0000 	mov.w	r0, #0
 8010328:	f380 8811 	msr	BASEPRI, r0
 801032c:	bc09      	pop	{r0, r3}
 801032e:	6819      	ldr	r1, [r3, #0]
 8010330:	6808      	ldr	r0, [r1, #0]
 8010332:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010336:	f01e 0f10 	tst.w	lr, #16
 801033a:	bf08      	it	eq
 801033c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8010340:	f380 8809 	msr	PSP, r0
 8010344:	f3bf 8f6f 	isb	sy
 8010348:	4770      	bx	lr
 801034a:	bf00      	nop
 801034c:	f3af 8000 	nop.w

08010350 <pxCurrentTCBConst>:
 8010350:	20000ff8 	.word	0x20000ff8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8010354:	bf00      	nop
 8010356:	bf00      	nop

08010358 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8010358:	b580      	push	{r7, lr}
 801035a:	b082      	sub	sp, #8
 801035c:	af00      	add	r7, sp, #0
	__asm volatile
 801035e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010362:	f383 8811 	msr	BASEPRI, r3
 8010366:	f3bf 8f6f 	isb	sy
 801036a:	f3bf 8f4f 	dsb	sy
 801036e:	607b      	str	r3, [r7, #4]
}
 8010370:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8010372:	f7fe fdd5 	bl	800ef20 <xTaskIncrementTick>
 8010376:	4603      	mov	r3, r0
 8010378:	2b00      	cmp	r3, #0
 801037a:	d003      	beq.n	8010384 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801037c:	4b06      	ldr	r3, [pc, #24]	; (8010398 <xPortSysTickHandler+0x40>)
 801037e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010382:	601a      	str	r2, [r3, #0]
 8010384:	2300      	movs	r3, #0
 8010386:	603b      	str	r3, [r7, #0]
	__asm volatile
 8010388:	683b      	ldr	r3, [r7, #0]
 801038a:	f383 8811 	msr	BASEPRI, r3
}
 801038e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8010390:	bf00      	nop
 8010392:	3708      	adds	r7, #8
 8010394:	46bd      	mov	sp, r7
 8010396:	bd80      	pop	{r7, pc}
 8010398:	e000ed04 	.word	0xe000ed04

0801039c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 801039c:	b480      	push	{r7}
 801039e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80103a0:	4b0b      	ldr	r3, [pc, #44]	; (80103d0 <vPortSetupTimerInterrupt+0x34>)
 80103a2:	2200      	movs	r2, #0
 80103a4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80103a6:	4b0b      	ldr	r3, [pc, #44]	; (80103d4 <vPortSetupTimerInterrupt+0x38>)
 80103a8:	2200      	movs	r2, #0
 80103aa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80103ac:	4b0a      	ldr	r3, [pc, #40]	; (80103d8 <vPortSetupTimerInterrupt+0x3c>)
 80103ae:	681b      	ldr	r3, [r3, #0]
 80103b0:	4a0a      	ldr	r2, [pc, #40]	; (80103dc <vPortSetupTimerInterrupt+0x40>)
 80103b2:	fba2 2303 	umull	r2, r3, r2, r3
 80103b6:	099b      	lsrs	r3, r3, #6
 80103b8:	4a09      	ldr	r2, [pc, #36]	; (80103e0 <vPortSetupTimerInterrupt+0x44>)
 80103ba:	3b01      	subs	r3, #1
 80103bc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80103be:	4b04      	ldr	r3, [pc, #16]	; (80103d0 <vPortSetupTimerInterrupt+0x34>)
 80103c0:	2207      	movs	r2, #7
 80103c2:	601a      	str	r2, [r3, #0]
}
 80103c4:	bf00      	nop
 80103c6:	46bd      	mov	sp, r7
 80103c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103cc:	4770      	bx	lr
 80103ce:	bf00      	nop
 80103d0:	e000e010 	.word	0xe000e010
 80103d4:	e000e018 	.word	0xe000e018
 80103d8:	20000158 	.word	0x20000158
 80103dc:	10624dd3 	.word	0x10624dd3
 80103e0:	e000e014 	.word	0xe000e014

080103e4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80103e4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80103f4 <vPortEnableVFP+0x10>
 80103e8:	6801      	ldr	r1, [r0, #0]
 80103ea:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80103ee:	6001      	str	r1, [r0, #0]
 80103f0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80103f2:	bf00      	nop
 80103f4:	e000ed88 	.word	0xe000ed88

080103f8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80103f8:	b480      	push	{r7}
 80103fa:	b085      	sub	sp, #20
 80103fc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80103fe:	f3ef 8305 	mrs	r3, IPSR
 8010402:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8010404:	68fb      	ldr	r3, [r7, #12]
 8010406:	2b0f      	cmp	r3, #15
 8010408:	d914      	bls.n	8010434 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 801040a:	4a17      	ldr	r2, [pc, #92]	; (8010468 <vPortValidateInterruptPriority+0x70>)
 801040c:	68fb      	ldr	r3, [r7, #12]
 801040e:	4413      	add	r3, r2
 8010410:	781b      	ldrb	r3, [r3, #0]
 8010412:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8010414:	4b15      	ldr	r3, [pc, #84]	; (801046c <vPortValidateInterruptPriority+0x74>)
 8010416:	781b      	ldrb	r3, [r3, #0]
 8010418:	7afa      	ldrb	r2, [r7, #11]
 801041a:	429a      	cmp	r2, r3
 801041c:	d20a      	bcs.n	8010434 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 801041e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010422:	f383 8811 	msr	BASEPRI, r3
 8010426:	f3bf 8f6f 	isb	sy
 801042a:	f3bf 8f4f 	dsb	sy
 801042e:	607b      	str	r3, [r7, #4]
}
 8010430:	bf00      	nop
 8010432:	e7fe      	b.n	8010432 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8010434:	4b0e      	ldr	r3, [pc, #56]	; (8010470 <vPortValidateInterruptPriority+0x78>)
 8010436:	681b      	ldr	r3, [r3, #0]
 8010438:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 801043c:	4b0d      	ldr	r3, [pc, #52]	; (8010474 <vPortValidateInterruptPriority+0x7c>)
 801043e:	681b      	ldr	r3, [r3, #0]
 8010440:	429a      	cmp	r2, r3
 8010442:	d90a      	bls.n	801045a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8010444:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010448:	f383 8811 	msr	BASEPRI, r3
 801044c:	f3bf 8f6f 	isb	sy
 8010450:	f3bf 8f4f 	dsb	sy
 8010454:	603b      	str	r3, [r7, #0]
}
 8010456:	bf00      	nop
 8010458:	e7fe      	b.n	8010458 <vPortValidateInterruptPriority+0x60>
	}
 801045a:	bf00      	nop
 801045c:	3714      	adds	r7, #20
 801045e:	46bd      	mov	sp, r7
 8010460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010464:	4770      	bx	lr
 8010466:	bf00      	nop
 8010468:	e000e3f0 	.word	0xe000e3f0
 801046c:	20001624 	.word	0x20001624
 8010470:	e000ed0c 	.word	0xe000ed0c
 8010474:	20001628 	.word	0x20001628

08010478 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8010478:	b580      	push	{r7, lr}
 801047a:	b08a      	sub	sp, #40	; 0x28
 801047c:	af00      	add	r7, sp, #0
 801047e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8010480:	2300      	movs	r3, #0
 8010482:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8010484:	f7fe fc90 	bl	800eda8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8010488:	4b5b      	ldr	r3, [pc, #364]	; (80105f8 <pvPortMalloc+0x180>)
 801048a:	681b      	ldr	r3, [r3, #0]
 801048c:	2b00      	cmp	r3, #0
 801048e:	d101      	bne.n	8010494 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8010490:	f000 f920 	bl	80106d4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8010494:	4b59      	ldr	r3, [pc, #356]	; (80105fc <pvPortMalloc+0x184>)
 8010496:	681a      	ldr	r2, [r3, #0]
 8010498:	687b      	ldr	r3, [r7, #4]
 801049a:	4013      	ands	r3, r2
 801049c:	2b00      	cmp	r3, #0
 801049e:	f040 8093 	bne.w	80105c8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80104a2:	687b      	ldr	r3, [r7, #4]
 80104a4:	2b00      	cmp	r3, #0
 80104a6:	d01d      	beq.n	80104e4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80104a8:	2208      	movs	r2, #8
 80104aa:	687b      	ldr	r3, [r7, #4]
 80104ac:	4413      	add	r3, r2
 80104ae:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80104b0:	687b      	ldr	r3, [r7, #4]
 80104b2:	f003 0307 	and.w	r3, r3, #7
 80104b6:	2b00      	cmp	r3, #0
 80104b8:	d014      	beq.n	80104e4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80104ba:	687b      	ldr	r3, [r7, #4]
 80104bc:	f023 0307 	bic.w	r3, r3, #7
 80104c0:	3308      	adds	r3, #8
 80104c2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80104c4:	687b      	ldr	r3, [r7, #4]
 80104c6:	f003 0307 	and.w	r3, r3, #7
 80104ca:	2b00      	cmp	r3, #0
 80104cc:	d00a      	beq.n	80104e4 <pvPortMalloc+0x6c>
	__asm volatile
 80104ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80104d2:	f383 8811 	msr	BASEPRI, r3
 80104d6:	f3bf 8f6f 	isb	sy
 80104da:	f3bf 8f4f 	dsb	sy
 80104de:	617b      	str	r3, [r7, #20]
}
 80104e0:	bf00      	nop
 80104e2:	e7fe      	b.n	80104e2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80104e4:	687b      	ldr	r3, [r7, #4]
 80104e6:	2b00      	cmp	r3, #0
 80104e8:	d06e      	beq.n	80105c8 <pvPortMalloc+0x150>
 80104ea:	4b45      	ldr	r3, [pc, #276]	; (8010600 <pvPortMalloc+0x188>)
 80104ec:	681b      	ldr	r3, [r3, #0]
 80104ee:	687a      	ldr	r2, [r7, #4]
 80104f0:	429a      	cmp	r2, r3
 80104f2:	d869      	bhi.n	80105c8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80104f4:	4b43      	ldr	r3, [pc, #268]	; (8010604 <pvPortMalloc+0x18c>)
 80104f6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80104f8:	4b42      	ldr	r3, [pc, #264]	; (8010604 <pvPortMalloc+0x18c>)
 80104fa:	681b      	ldr	r3, [r3, #0]
 80104fc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80104fe:	e004      	b.n	801050a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8010500:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010502:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8010504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010506:	681b      	ldr	r3, [r3, #0]
 8010508:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801050a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801050c:	685b      	ldr	r3, [r3, #4]
 801050e:	687a      	ldr	r2, [r7, #4]
 8010510:	429a      	cmp	r2, r3
 8010512:	d903      	bls.n	801051c <pvPortMalloc+0xa4>
 8010514:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010516:	681b      	ldr	r3, [r3, #0]
 8010518:	2b00      	cmp	r3, #0
 801051a:	d1f1      	bne.n	8010500 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 801051c:	4b36      	ldr	r3, [pc, #216]	; (80105f8 <pvPortMalloc+0x180>)
 801051e:	681b      	ldr	r3, [r3, #0]
 8010520:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010522:	429a      	cmp	r2, r3
 8010524:	d050      	beq.n	80105c8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8010526:	6a3b      	ldr	r3, [r7, #32]
 8010528:	681b      	ldr	r3, [r3, #0]
 801052a:	2208      	movs	r2, #8
 801052c:	4413      	add	r3, r2
 801052e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8010530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010532:	681a      	ldr	r2, [r3, #0]
 8010534:	6a3b      	ldr	r3, [r7, #32]
 8010536:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8010538:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801053a:	685a      	ldr	r2, [r3, #4]
 801053c:	687b      	ldr	r3, [r7, #4]
 801053e:	1ad2      	subs	r2, r2, r3
 8010540:	2308      	movs	r3, #8
 8010542:	005b      	lsls	r3, r3, #1
 8010544:	429a      	cmp	r2, r3
 8010546:	d91f      	bls.n	8010588 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8010548:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801054a:	687b      	ldr	r3, [r7, #4]
 801054c:	4413      	add	r3, r2
 801054e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8010550:	69bb      	ldr	r3, [r7, #24]
 8010552:	f003 0307 	and.w	r3, r3, #7
 8010556:	2b00      	cmp	r3, #0
 8010558:	d00a      	beq.n	8010570 <pvPortMalloc+0xf8>
	__asm volatile
 801055a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801055e:	f383 8811 	msr	BASEPRI, r3
 8010562:	f3bf 8f6f 	isb	sy
 8010566:	f3bf 8f4f 	dsb	sy
 801056a:	613b      	str	r3, [r7, #16]
}
 801056c:	bf00      	nop
 801056e:	e7fe      	b.n	801056e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8010570:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010572:	685a      	ldr	r2, [r3, #4]
 8010574:	687b      	ldr	r3, [r7, #4]
 8010576:	1ad2      	subs	r2, r2, r3
 8010578:	69bb      	ldr	r3, [r7, #24]
 801057a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 801057c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801057e:	687a      	ldr	r2, [r7, #4]
 8010580:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8010582:	69b8      	ldr	r0, [r7, #24]
 8010584:	f000 f908 	bl	8010798 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8010588:	4b1d      	ldr	r3, [pc, #116]	; (8010600 <pvPortMalloc+0x188>)
 801058a:	681a      	ldr	r2, [r3, #0]
 801058c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801058e:	685b      	ldr	r3, [r3, #4]
 8010590:	1ad3      	subs	r3, r2, r3
 8010592:	4a1b      	ldr	r2, [pc, #108]	; (8010600 <pvPortMalloc+0x188>)
 8010594:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8010596:	4b1a      	ldr	r3, [pc, #104]	; (8010600 <pvPortMalloc+0x188>)
 8010598:	681a      	ldr	r2, [r3, #0]
 801059a:	4b1b      	ldr	r3, [pc, #108]	; (8010608 <pvPortMalloc+0x190>)
 801059c:	681b      	ldr	r3, [r3, #0]
 801059e:	429a      	cmp	r2, r3
 80105a0:	d203      	bcs.n	80105aa <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80105a2:	4b17      	ldr	r3, [pc, #92]	; (8010600 <pvPortMalloc+0x188>)
 80105a4:	681b      	ldr	r3, [r3, #0]
 80105a6:	4a18      	ldr	r2, [pc, #96]	; (8010608 <pvPortMalloc+0x190>)
 80105a8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80105aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80105ac:	685a      	ldr	r2, [r3, #4]
 80105ae:	4b13      	ldr	r3, [pc, #76]	; (80105fc <pvPortMalloc+0x184>)
 80105b0:	681b      	ldr	r3, [r3, #0]
 80105b2:	431a      	orrs	r2, r3
 80105b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80105b6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80105b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80105ba:	2200      	movs	r2, #0
 80105bc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80105be:	4b13      	ldr	r3, [pc, #76]	; (801060c <pvPortMalloc+0x194>)
 80105c0:	681b      	ldr	r3, [r3, #0]
 80105c2:	3301      	adds	r3, #1
 80105c4:	4a11      	ldr	r2, [pc, #68]	; (801060c <pvPortMalloc+0x194>)
 80105c6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80105c8:	f7fe fbfc 	bl	800edc4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80105cc:	69fb      	ldr	r3, [r7, #28]
 80105ce:	f003 0307 	and.w	r3, r3, #7
 80105d2:	2b00      	cmp	r3, #0
 80105d4:	d00a      	beq.n	80105ec <pvPortMalloc+0x174>
	__asm volatile
 80105d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80105da:	f383 8811 	msr	BASEPRI, r3
 80105de:	f3bf 8f6f 	isb	sy
 80105e2:	f3bf 8f4f 	dsb	sy
 80105e6:	60fb      	str	r3, [r7, #12]
}
 80105e8:	bf00      	nop
 80105ea:	e7fe      	b.n	80105ea <pvPortMalloc+0x172>
	return pvReturn;
 80105ec:	69fb      	ldr	r3, [r7, #28]
}
 80105ee:	4618      	mov	r0, r3
 80105f0:	3728      	adds	r7, #40	; 0x28
 80105f2:	46bd      	mov	sp, r7
 80105f4:	bd80      	pop	{r7, pc}
 80105f6:	bf00      	nop
 80105f8:	20005234 	.word	0x20005234
 80105fc:	20005248 	.word	0x20005248
 8010600:	20005238 	.word	0x20005238
 8010604:	2000522c 	.word	0x2000522c
 8010608:	2000523c 	.word	0x2000523c
 801060c:	20005240 	.word	0x20005240

08010610 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8010610:	b580      	push	{r7, lr}
 8010612:	b086      	sub	sp, #24
 8010614:	af00      	add	r7, sp, #0
 8010616:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8010618:	687b      	ldr	r3, [r7, #4]
 801061a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 801061c:	687b      	ldr	r3, [r7, #4]
 801061e:	2b00      	cmp	r3, #0
 8010620:	d04d      	beq.n	80106be <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8010622:	2308      	movs	r3, #8
 8010624:	425b      	negs	r3, r3
 8010626:	697a      	ldr	r2, [r7, #20]
 8010628:	4413      	add	r3, r2
 801062a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 801062c:	697b      	ldr	r3, [r7, #20]
 801062e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8010630:	693b      	ldr	r3, [r7, #16]
 8010632:	685a      	ldr	r2, [r3, #4]
 8010634:	4b24      	ldr	r3, [pc, #144]	; (80106c8 <vPortFree+0xb8>)
 8010636:	681b      	ldr	r3, [r3, #0]
 8010638:	4013      	ands	r3, r2
 801063a:	2b00      	cmp	r3, #0
 801063c:	d10a      	bne.n	8010654 <vPortFree+0x44>
	__asm volatile
 801063e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010642:	f383 8811 	msr	BASEPRI, r3
 8010646:	f3bf 8f6f 	isb	sy
 801064a:	f3bf 8f4f 	dsb	sy
 801064e:	60fb      	str	r3, [r7, #12]
}
 8010650:	bf00      	nop
 8010652:	e7fe      	b.n	8010652 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8010654:	693b      	ldr	r3, [r7, #16]
 8010656:	681b      	ldr	r3, [r3, #0]
 8010658:	2b00      	cmp	r3, #0
 801065a:	d00a      	beq.n	8010672 <vPortFree+0x62>
	__asm volatile
 801065c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010660:	f383 8811 	msr	BASEPRI, r3
 8010664:	f3bf 8f6f 	isb	sy
 8010668:	f3bf 8f4f 	dsb	sy
 801066c:	60bb      	str	r3, [r7, #8]
}
 801066e:	bf00      	nop
 8010670:	e7fe      	b.n	8010670 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8010672:	693b      	ldr	r3, [r7, #16]
 8010674:	685a      	ldr	r2, [r3, #4]
 8010676:	4b14      	ldr	r3, [pc, #80]	; (80106c8 <vPortFree+0xb8>)
 8010678:	681b      	ldr	r3, [r3, #0]
 801067a:	4013      	ands	r3, r2
 801067c:	2b00      	cmp	r3, #0
 801067e:	d01e      	beq.n	80106be <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8010680:	693b      	ldr	r3, [r7, #16]
 8010682:	681b      	ldr	r3, [r3, #0]
 8010684:	2b00      	cmp	r3, #0
 8010686:	d11a      	bne.n	80106be <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8010688:	693b      	ldr	r3, [r7, #16]
 801068a:	685a      	ldr	r2, [r3, #4]
 801068c:	4b0e      	ldr	r3, [pc, #56]	; (80106c8 <vPortFree+0xb8>)
 801068e:	681b      	ldr	r3, [r3, #0]
 8010690:	43db      	mvns	r3, r3
 8010692:	401a      	ands	r2, r3
 8010694:	693b      	ldr	r3, [r7, #16]
 8010696:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8010698:	f7fe fb86 	bl	800eda8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 801069c:	693b      	ldr	r3, [r7, #16]
 801069e:	685a      	ldr	r2, [r3, #4]
 80106a0:	4b0a      	ldr	r3, [pc, #40]	; (80106cc <vPortFree+0xbc>)
 80106a2:	681b      	ldr	r3, [r3, #0]
 80106a4:	4413      	add	r3, r2
 80106a6:	4a09      	ldr	r2, [pc, #36]	; (80106cc <vPortFree+0xbc>)
 80106a8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80106aa:	6938      	ldr	r0, [r7, #16]
 80106ac:	f000 f874 	bl	8010798 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80106b0:	4b07      	ldr	r3, [pc, #28]	; (80106d0 <vPortFree+0xc0>)
 80106b2:	681b      	ldr	r3, [r3, #0]
 80106b4:	3301      	adds	r3, #1
 80106b6:	4a06      	ldr	r2, [pc, #24]	; (80106d0 <vPortFree+0xc0>)
 80106b8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80106ba:	f7fe fb83 	bl	800edc4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80106be:	bf00      	nop
 80106c0:	3718      	adds	r7, #24
 80106c2:	46bd      	mov	sp, r7
 80106c4:	bd80      	pop	{r7, pc}
 80106c6:	bf00      	nop
 80106c8:	20005248 	.word	0x20005248
 80106cc:	20005238 	.word	0x20005238
 80106d0:	20005244 	.word	0x20005244

080106d4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80106d4:	b480      	push	{r7}
 80106d6:	b085      	sub	sp, #20
 80106d8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80106da:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80106de:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80106e0:	4b27      	ldr	r3, [pc, #156]	; (8010780 <prvHeapInit+0xac>)
 80106e2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80106e4:	68fb      	ldr	r3, [r7, #12]
 80106e6:	f003 0307 	and.w	r3, r3, #7
 80106ea:	2b00      	cmp	r3, #0
 80106ec:	d00c      	beq.n	8010708 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80106ee:	68fb      	ldr	r3, [r7, #12]
 80106f0:	3307      	adds	r3, #7
 80106f2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80106f4:	68fb      	ldr	r3, [r7, #12]
 80106f6:	f023 0307 	bic.w	r3, r3, #7
 80106fa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80106fc:	68ba      	ldr	r2, [r7, #8]
 80106fe:	68fb      	ldr	r3, [r7, #12]
 8010700:	1ad3      	subs	r3, r2, r3
 8010702:	4a1f      	ldr	r2, [pc, #124]	; (8010780 <prvHeapInit+0xac>)
 8010704:	4413      	add	r3, r2
 8010706:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8010708:	68fb      	ldr	r3, [r7, #12]
 801070a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 801070c:	4a1d      	ldr	r2, [pc, #116]	; (8010784 <prvHeapInit+0xb0>)
 801070e:	687b      	ldr	r3, [r7, #4]
 8010710:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8010712:	4b1c      	ldr	r3, [pc, #112]	; (8010784 <prvHeapInit+0xb0>)
 8010714:	2200      	movs	r2, #0
 8010716:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8010718:	687b      	ldr	r3, [r7, #4]
 801071a:	68ba      	ldr	r2, [r7, #8]
 801071c:	4413      	add	r3, r2
 801071e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8010720:	2208      	movs	r2, #8
 8010722:	68fb      	ldr	r3, [r7, #12]
 8010724:	1a9b      	subs	r3, r3, r2
 8010726:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8010728:	68fb      	ldr	r3, [r7, #12]
 801072a:	f023 0307 	bic.w	r3, r3, #7
 801072e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8010730:	68fb      	ldr	r3, [r7, #12]
 8010732:	4a15      	ldr	r2, [pc, #84]	; (8010788 <prvHeapInit+0xb4>)
 8010734:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8010736:	4b14      	ldr	r3, [pc, #80]	; (8010788 <prvHeapInit+0xb4>)
 8010738:	681b      	ldr	r3, [r3, #0]
 801073a:	2200      	movs	r2, #0
 801073c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 801073e:	4b12      	ldr	r3, [pc, #72]	; (8010788 <prvHeapInit+0xb4>)
 8010740:	681b      	ldr	r3, [r3, #0]
 8010742:	2200      	movs	r2, #0
 8010744:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8010746:	687b      	ldr	r3, [r7, #4]
 8010748:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 801074a:	683b      	ldr	r3, [r7, #0]
 801074c:	68fa      	ldr	r2, [r7, #12]
 801074e:	1ad2      	subs	r2, r2, r3
 8010750:	683b      	ldr	r3, [r7, #0]
 8010752:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8010754:	4b0c      	ldr	r3, [pc, #48]	; (8010788 <prvHeapInit+0xb4>)
 8010756:	681a      	ldr	r2, [r3, #0]
 8010758:	683b      	ldr	r3, [r7, #0]
 801075a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801075c:	683b      	ldr	r3, [r7, #0]
 801075e:	685b      	ldr	r3, [r3, #4]
 8010760:	4a0a      	ldr	r2, [pc, #40]	; (801078c <prvHeapInit+0xb8>)
 8010762:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8010764:	683b      	ldr	r3, [r7, #0]
 8010766:	685b      	ldr	r3, [r3, #4]
 8010768:	4a09      	ldr	r2, [pc, #36]	; (8010790 <prvHeapInit+0xbc>)
 801076a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 801076c:	4b09      	ldr	r3, [pc, #36]	; (8010794 <prvHeapInit+0xc0>)
 801076e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8010772:	601a      	str	r2, [r3, #0]
}
 8010774:	bf00      	nop
 8010776:	3714      	adds	r7, #20
 8010778:	46bd      	mov	sp, r7
 801077a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801077e:	4770      	bx	lr
 8010780:	2000162c 	.word	0x2000162c
 8010784:	2000522c 	.word	0x2000522c
 8010788:	20005234 	.word	0x20005234
 801078c:	2000523c 	.word	0x2000523c
 8010790:	20005238 	.word	0x20005238
 8010794:	20005248 	.word	0x20005248

08010798 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8010798:	b480      	push	{r7}
 801079a:	b085      	sub	sp, #20
 801079c:	af00      	add	r7, sp, #0
 801079e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80107a0:	4b28      	ldr	r3, [pc, #160]	; (8010844 <prvInsertBlockIntoFreeList+0xac>)
 80107a2:	60fb      	str	r3, [r7, #12]
 80107a4:	e002      	b.n	80107ac <prvInsertBlockIntoFreeList+0x14>
 80107a6:	68fb      	ldr	r3, [r7, #12]
 80107a8:	681b      	ldr	r3, [r3, #0]
 80107aa:	60fb      	str	r3, [r7, #12]
 80107ac:	68fb      	ldr	r3, [r7, #12]
 80107ae:	681b      	ldr	r3, [r3, #0]
 80107b0:	687a      	ldr	r2, [r7, #4]
 80107b2:	429a      	cmp	r2, r3
 80107b4:	d8f7      	bhi.n	80107a6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80107b6:	68fb      	ldr	r3, [r7, #12]
 80107b8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80107ba:	68fb      	ldr	r3, [r7, #12]
 80107bc:	685b      	ldr	r3, [r3, #4]
 80107be:	68ba      	ldr	r2, [r7, #8]
 80107c0:	4413      	add	r3, r2
 80107c2:	687a      	ldr	r2, [r7, #4]
 80107c4:	429a      	cmp	r2, r3
 80107c6:	d108      	bne.n	80107da <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80107c8:	68fb      	ldr	r3, [r7, #12]
 80107ca:	685a      	ldr	r2, [r3, #4]
 80107cc:	687b      	ldr	r3, [r7, #4]
 80107ce:	685b      	ldr	r3, [r3, #4]
 80107d0:	441a      	add	r2, r3
 80107d2:	68fb      	ldr	r3, [r7, #12]
 80107d4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80107d6:	68fb      	ldr	r3, [r7, #12]
 80107d8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80107da:	687b      	ldr	r3, [r7, #4]
 80107dc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80107de:	687b      	ldr	r3, [r7, #4]
 80107e0:	685b      	ldr	r3, [r3, #4]
 80107e2:	68ba      	ldr	r2, [r7, #8]
 80107e4:	441a      	add	r2, r3
 80107e6:	68fb      	ldr	r3, [r7, #12]
 80107e8:	681b      	ldr	r3, [r3, #0]
 80107ea:	429a      	cmp	r2, r3
 80107ec:	d118      	bne.n	8010820 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80107ee:	68fb      	ldr	r3, [r7, #12]
 80107f0:	681a      	ldr	r2, [r3, #0]
 80107f2:	4b15      	ldr	r3, [pc, #84]	; (8010848 <prvInsertBlockIntoFreeList+0xb0>)
 80107f4:	681b      	ldr	r3, [r3, #0]
 80107f6:	429a      	cmp	r2, r3
 80107f8:	d00d      	beq.n	8010816 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80107fa:	687b      	ldr	r3, [r7, #4]
 80107fc:	685a      	ldr	r2, [r3, #4]
 80107fe:	68fb      	ldr	r3, [r7, #12]
 8010800:	681b      	ldr	r3, [r3, #0]
 8010802:	685b      	ldr	r3, [r3, #4]
 8010804:	441a      	add	r2, r3
 8010806:	687b      	ldr	r3, [r7, #4]
 8010808:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 801080a:	68fb      	ldr	r3, [r7, #12]
 801080c:	681b      	ldr	r3, [r3, #0]
 801080e:	681a      	ldr	r2, [r3, #0]
 8010810:	687b      	ldr	r3, [r7, #4]
 8010812:	601a      	str	r2, [r3, #0]
 8010814:	e008      	b.n	8010828 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8010816:	4b0c      	ldr	r3, [pc, #48]	; (8010848 <prvInsertBlockIntoFreeList+0xb0>)
 8010818:	681a      	ldr	r2, [r3, #0]
 801081a:	687b      	ldr	r3, [r7, #4]
 801081c:	601a      	str	r2, [r3, #0]
 801081e:	e003      	b.n	8010828 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8010820:	68fb      	ldr	r3, [r7, #12]
 8010822:	681a      	ldr	r2, [r3, #0]
 8010824:	687b      	ldr	r3, [r7, #4]
 8010826:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8010828:	68fa      	ldr	r2, [r7, #12]
 801082a:	687b      	ldr	r3, [r7, #4]
 801082c:	429a      	cmp	r2, r3
 801082e:	d002      	beq.n	8010836 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8010830:	68fb      	ldr	r3, [r7, #12]
 8010832:	687a      	ldr	r2, [r7, #4]
 8010834:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8010836:	bf00      	nop
 8010838:	3714      	adds	r7, #20
 801083a:	46bd      	mov	sp, r7
 801083c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010840:	4770      	bx	lr
 8010842:	bf00      	nop
 8010844:	2000522c 	.word	0x2000522c
 8010848:	20005234 	.word	0x20005234

0801084c <MX_TouchGFX_Init>:

/**
 * Initialize TouchGFX application
 */
void MX_TouchGFX_Init(void)
{
 801084c:	b580      	push	{r7, lr}
 801084e:	af00      	add	r7, sp, #0
  // Calling farward to touchgfx_init in C++ domain
  touchgfx_init();
 8010850:	f003 ffa8 	bl	80147a4 <touchgfx_init>
}
 8010854:	bf00      	nop
 8010856:	bd80      	pop	{r7, pc}

08010858 <_ZN8touchgfx12FontProviderD1Ev>:
     * @return The font with a font id of fontId.
     */
    virtual Font* getFont(FontId fontId) = 0;

    /** Finalizes an instance of the FontProvider class. */
    virtual ~FontProvider()
 8010858:	b480      	push	{r7}
 801085a:	b083      	sub	sp, #12
 801085c:	af00      	add	r7, sp, #0
 801085e:	6078      	str	r0, [r7, #4]
    {
 8010860:	4a04      	ldr	r2, [pc, #16]	; (8010874 <_ZN8touchgfx12FontProviderD1Ev+0x1c>)
 8010862:	687b      	ldr	r3, [r7, #4]
 8010864:	601a      	str	r2, [r3, #0]
    }
 8010866:	687b      	ldr	r3, [r7, #4]
 8010868:	4618      	mov	r0, r3
 801086a:	370c      	adds	r7, #12
 801086c:	46bd      	mov	sp, r7
 801086e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010872:	4770      	bx	lr
 8010874:	08028f8c 	.word	0x08028f8c

08010878 <_ZN8touchgfx12FontProviderD0Ev>:
    virtual ~FontProvider()
 8010878:	b580      	push	{r7, lr}
 801087a:	b082      	sub	sp, #8
 801087c:	af00      	add	r7, sp, #0
 801087e:	6078      	str	r0, [r7, #4]
    }
 8010880:	6878      	ldr	r0, [r7, #4]
 8010882:	f7ff ffe9 	bl	8010858 <_ZN8touchgfx12FontProviderD1Ev>
 8010886:	2104      	movs	r1, #4
 8010888:	6878      	ldr	r0, [r7, #4]
 801088a:	f016 fc1e 	bl	80270ca <_ZdlPvj>
 801088e:	687b      	ldr	r3, [r7, #4]
 8010890:	4618      	mov	r0, r3
 8010892:	3708      	adds	r7, #8
 8010894:	46bd      	mov	sp, r7
 8010896:	bd80      	pop	{r7, pc}

08010898 <_ZN23ApplicationFontProvider7getFontEt>:
#include <fonts/ApplicationFontProvider.hpp>
#include <fonts/GeneratedFont.hpp>
#include <texts/TypedTextDatabase.hpp>

touchgfx::Font* ApplicationFontProvider::getFont(touchgfx::FontId typography)
{
 8010898:	b580      	push	{r7, lr}
 801089a:	b082      	sub	sp, #8
 801089c:	af00      	add	r7, sp, #0
 801089e:	6078      	str	r0, [r7, #4]
 80108a0:	460b      	mov	r3, r1
 80108a2:	807b      	strh	r3, [r7, #2]
    switch (typography)
 80108a4:	887b      	ldrh	r3, [r7, #2]
 80108a6:	2b02      	cmp	r3, #2
 80108a8:	d010      	beq.n	80108cc <_ZN23ApplicationFontProvider7getFontEt+0x34>
 80108aa:	2b02      	cmp	r3, #2
 80108ac:	dc13      	bgt.n	80108d6 <_ZN23ApplicationFontProvider7getFontEt+0x3e>
 80108ae:	2b00      	cmp	r3, #0
 80108b0:	d002      	beq.n	80108b8 <_ZN23ApplicationFontProvider7getFontEt+0x20>
 80108b2:	2b01      	cmp	r3, #1
 80108b4:	d005      	beq.n	80108c2 <_ZN23ApplicationFontProvider7getFontEt+0x2a>
 80108b6:	e00e      	b.n	80108d6 <_ZN23ApplicationFontProvider7getFontEt+0x3e>
    {
    case Typography::DEFAULT:
        // verdana_20_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[0]);
 80108b8:	f002 fde6 	bl	8013488 <_ZN17TypedTextDatabase8getFontsEv>
 80108bc:	4603      	mov	r3, r0
 80108be:	681b      	ldr	r3, [r3, #0]
 80108c0:	e00a      	b.n	80108d8 <_ZN23ApplicationFontProvider7getFontEt+0x40>
    case Typography::LARGE:
        // verdana_40_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[1]);
 80108c2:	f002 fde1 	bl	8013488 <_ZN17TypedTextDatabase8getFontsEv>
 80108c6:	4603      	mov	r3, r0
 80108c8:	685b      	ldr	r3, [r3, #4]
 80108ca:	e005      	b.n	80108d8 <_ZN23ApplicationFontProvider7getFontEt+0x40>
    case Typography::SMALL:
        // verdana_10_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[2]);
 80108cc:	f002 fddc 	bl	8013488 <_ZN17TypedTextDatabase8getFontsEv>
 80108d0:	4603      	mov	r3, r0
 80108d2:	689b      	ldr	r3, [r3, #8]
 80108d4:	e000      	b.n	80108d8 <_ZN23ApplicationFontProvider7getFontEt+0x40>
    default:
        return 0;
 80108d6:	2300      	movs	r3, #0
    }
}
 80108d8:	4618      	mov	r0, r3
 80108da:	3708      	adds	r7, #8
 80108dc:	46bd      	mov	sp, r7
 80108de:	bd80      	pop	{r7, pc}

080108e0 <_ZN23ApplicationFontProviderD1Ev>:
    static const touchgfx::FontId LARGE = 1;   // verdana_40_4bpp
    static const touchgfx::FontId SMALL = 2;   // verdana_10_4bpp
    static const uint16_t NUMBER_OF_FONTS = 3;
};

class ApplicationFontProvider : public touchgfx::FontProvider
 80108e0:	b580      	push	{r7, lr}
 80108e2:	b082      	sub	sp, #8
 80108e4:	af00      	add	r7, sp, #0
 80108e6:	6078      	str	r0, [r7, #4]
 80108e8:	4a05      	ldr	r2, [pc, #20]	; (8010900 <_ZN23ApplicationFontProviderD1Ev+0x20>)
 80108ea:	687b      	ldr	r3, [r7, #4]
 80108ec:	601a      	str	r2, [r3, #0]
 80108ee:	687b      	ldr	r3, [r7, #4]
 80108f0:	4618      	mov	r0, r3
 80108f2:	f7ff ffb1 	bl	8010858 <_ZN8touchgfx12FontProviderD1Ev>
 80108f6:	687b      	ldr	r3, [r7, #4]
 80108f8:	4618      	mov	r0, r3
 80108fa:	3708      	adds	r7, #8
 80108fc:	46bd      	mov	sp, r7
 80108fe:	bd80      	pop	{r7, pc}
 8010900:	08028f78 	.word	0x08028f78

08010904 <_ZN23ApplicationFontProviderD0Ev>:
 8010904:	b580      	push	{r7, lr}
 8010906:	b082      	sub	sp, #8
 8010908:	af00      	add	r7, sp, #0
 801090a:	6078      	str	r0, [r7, #4]
 801090c:	6878      	ldr	r0, [r7, #4]
 801090e:	f7ff ffe7 	bl	80108e0 <_ZN23ApplicationFontProviderD1Ev>
 8010912:	2104      	movs	r1, #4
 8010914:	6878      	ldr	r0, [r7, #4]
 8010916:	f016 fbd8 	bl	80270ca <_ZdlPvj>
 801091a:	687b      	ldr	r3, [r7, #4]
 801091c:	4618      	mov	r0, r3
 801091e:	3708      	adds	r7, #8
 8010920:	46bd      	mov	sp, r7
 8010922:	bd80      	pop	{r7, pc}

08010924 <_ZN8touchgfx4FontD1Ev>:
 */
class Font
{
public:
    /** Finalizes an instance of the Font class. */
    virtual ~Font()
 8010924:	b480      	push	{r7}
 8010926:	b083      	sub	sp, #12
 8010928:	af00      	add	r7, sp, #0
 801092a:	6078      	str	r0, [r7, #4]
    {
 801092c:	4a04      	ldr	r2, [pc, #16]	; (8010940 <_ZN8touchgfx4FontD1Ev+0x1c>)
 801092e:	687b      	ldr	r3, [r7, #4]
 8010930:	601a      	str	r2, [r3, #0]
    }
 8010932:	687b      	ldr	r3, [r7, #4]
 8010934:	4618      	mov	r0, r3
 8010936:	370c      	adds	r7, #12
 8010938:	46bd      	mov	sp, r7
 801093a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801093e:	4770      	bx	lr
 8010940:	0802935c 	.word	0x0802935c

08010944 <_ZN8touchgfx4FontD0Ev>:
    virtual ~Font()
 8010944:	b580      	push	{r7, lr}
 8010946:	b082      	sub	sp, #8
 8010948:	af00      	add	r7, sp, #0
 801094a:	6078      	str	r0, [r7, #4]
    }
 801094c:	6878      	ldr	r0, [r7, #4]
 801094e:	f7ff ffe9 	bl	8010924 <_ZN8touchgfx4FontD1Ev>
 8010952:	2110      	movs	r1, #16
 8010954:	6878      	ldr	r0, [r7, #4]
 8010956:	f016 fbb8 	bl	80270ca <_ZdlPvj>
 801095a:	687b      	ldr	r3, [r7, #4]
 801095c:	4618      	mov	r0, r3
 801095e:	3708      	adds	r7, #8
 8010960:	46bd      	mov	sp, r7
 8010962:	bd80      	pop	{r7, pc}

08010964 <_ZNK8touchgfx4Font8getGlyphEt>:
     *
     * @return A pointer to the glyph node or null if the glyph was not found.
     *
     * @see TextProvider::getNextLigature
     */
    virtual const GlyphNode* getGlyph(Unicode::UnicodeChar unicode) const
 8010964:	b590      	push	{r4, r7, lr}
 8010966:	b087      	sub	sp, #28
 8010968:	af00      	add	r7, sp, #0
 801096a:	6078      	str	r0, [r7, #4]
 801096c:	460b      	mov	r3, r1
 801096e:	807b      	strh	r3, [r7, #2]
    {
        if (unicode == 0)
 8010970:	887b      	ldrh	r3, [r7, #2]
 8010972:	2b00      	cmp	r3, #0
 8010974:	d101      	bne.n	801097a <_ZNK8touchgfx4Font8getGlyphEt+0x16>
        {
            return 0;
 8010976:	2300      	movs	r3, #0
 8010978:	e010      	b.n	801099c <_ZNK8touchgfx4Font8getGlyphEt+0x38>
        }
        const uint8_t* dummyPixelDataPointer = 0;
 801097a:	2300      	movs	r3, #0
 801097c:	613b      	str	r3, [r7, #16]
        uint8_t bitsPerPixelDummy = 0;
 801097e:	2300      	movs	r3, #0
 8010980:	73fb      	strb	r3, [r7, #15]
        const GlyphNode* glyph = getGlyph(unicode, dummyPixelDataPointer, bitsPerPixelDummy);
 8010982:	687b      	ldr	r3, [r7, #4]
 8010984:	681b      	ldr	r3, [r3, #0]
 8010986:	3308      	adds	r3, #8
 8010988:	681c      	ldr	r4, [r3, #0]
 801098a:	f107 030f 	add.w	r3, r7, #15
 801098e:	f107 0210 	add.w	r2, r7, #16
 8010992:	8879      	ldrh	r1, [r7, #2]
 8010994:	6878      	ldr	r0, [r7, #4]
 8010996:	47a0      	blx	r4
 8010998:	6178      	str	r0, [r7, #20]
        return glyph;
 801099a:	697b      	ldr	r3, [r7, #20]
    }
 801099c:	4618      	mov	r0, r3
 801099e:	371c      	adds	r7, #28
 80109a0:	46bd      	mov	sp, r7
 80109a2:	bd90      	pop	{r4, r7, pc}

080109a4 <_ZNK8touchgfx4Font15getFallbackCharEv>:
     * used when no glyph is available for some character. If 0 (zero) is returned, there is
     * no default character.
     *
     * @return The default character for the typography in case no glyph is available.
     */
    virtual Unicode::UnicodeChar getFallbackChar() const
 80109a4:	b480      	push	{r7}
 80109a6:	b083      	sub	sp, #12
 80109a8:	af00      	add	r7, sp, #0
 80109aa:	6078      	str	r0, [r7, #4]
    {
        return fallbackCharacter;
 80109ac:	687b      	ldr	r3, [r7, #4]
 80109ae:	895b      	ldrh	r3, [r3, #10]
    }
 80109b0:	4618      	mov	r0, r3
 80109b2:	370c      	adds	r7, #12
 80109b4:	46bd      	mov	sp, r7
 80109b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109ba:	4770      	bx	lr

080109bc <_ZNK8touchgfx4Font15getEllipsisCharEv>:
     *
     * @return The ellipsis character for the typography.
     *
     * @see TextArea::setWideTextAction
     */
    virtual Unicode::UnicodeChar getEllipsisChar() const
 80109bc:	b480      	push	{r7}
 80109be:	b083      	sub	sp, #12
 80109c0:	af00      	add	r7, sp, #0
 80109c2:	6078      	str	r0, [r7, #4]
    {
        return ellipsisCharacter;
 80109c4:	687b      	ldr	r3, [r7, #4]
 80109c6:	899b      	ldrh	r3, [r3, #12]
    }
 80109c8:	4618      	mov	r0, r3
 80109ca:	370c      	adds	r7, #12
 80109cc:	46bd      	mov	sp, r7
 80109ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109d2:	4770      	bx	lr

080109d4 <_ZNK8touchgfx4Font13getFontHeightEv>:
     * @return The height in pixels of this font.
     *
     * @note It is not sufficient to allocate text areas with this height. Use
     *       getMinimumTextHeight for this.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getFontHeight() const
 80109d4:	b480      	push	{r7}
 80109d6:	b083      	sub	sp, #12
 80109d8:	af00      	add	r7, sp, #0
 80109da:	6078      	str	r0, [r7, #4]
    {
        return fontHeight;
 80109dc:	687b      	ldr	r3, [r7, #4]
 80109de:	889b      	ldrh	r3, [r3, #4]
    }
 80109e0:	4618      	mov	r0, r3
 80109e2:	370c      	adds	r7, #12
 80109e4:	46bd      	mov	sp, r7
 80109e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109ea:	4770      	bx	lr

080109ec <_ZNK8touchgfx4Font20getMinimumTextHeightEv>:
     * account that certain characters (eg 'g') have pixels below the baseline, thus making
     * the text height larger than the font height.
     *
     * @return The minimum height needed for a text field that uses this font.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getMinimumTextHeight() const
 80109ec:	b480      	push	{r7}
 80109ee:	b083      	sub	sp, #12
 80109f0:	af00      	add	r7, sp, #0
 80109f2:	6078      	str	r0, [r7, #4]
    {
        return fontHeight + pixelsBelowBaseline;
 80109f4:	687b      	ldr	r3, [r7, #4]
 80109f6:	889a      	ldrh	r2, [r3, #4]
 80109f8:	687b      	ldr	r3, [r7, #4]
 80109fa:	799b      	ldrb	r3, [r3, #6]
 80109fc:	b29b      	uxth	r3, r3
 80109fe:	4413      	add	r3, r2
 8010a00:	b29b      	uxth	r3, r3
    }
 8010a02:	4618      	mov	r0, r3
 8010a04:	370c      	adds	r7, #12
 8010a06:	46bd      	mov	sp, r7
 8010a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a0c:	4770      	bx	lr

08010a0e <_ZNK8touchgfx4Font15getBitsPerPixelEv>:
    /**
     * Gets bits per pixel for this font.
     *
     * @return The number of bits used per pixel in this font.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getBitsPerPixel() const
 8010a0e:	b480      	push	{r7}
 8010a10:	b083      	sub	sp, #12
 8010a12:	af00      	add	r7, sp, #0
 8010a14:	6078      	str	r0, [r7, #4]
    {
        return bPerPixel;
 8010a16:	687b      	ldr	r3, [r7, #4]
 8010a18:	79db      	ldrb	r3, [r3, #7]
 8010a1a:	f3c3 0306 	ubfx	r3, r3, #0, #7
 8010a1e:	b2db      	uxtb	r3, r3
    }
 8010a20:	4618      	mov	r0, r3
 8010a22:	370c      	adds	r7, #12
 8010a24:	46bd      	mov	sp, r7
 8010a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a2a:	4770      	bx	lr

08010a2c <_ZNK8touchgfx4Font15getByteAlignRowEv>:
    /**
     * Are the glyphs saved with each glyph row byte aligned?
     *
     * @return True if each glyph row is stored byte aligned, false otherwise.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getByteAlignRow() const
 8010a2c:	b480      	push	{r7}
 8010a2e:	b083      	sub	sp, #12
 8010a30:	af00      	add	r7, sp, #0
 8010a32:	6078      	str	r0, [r7, #4]
    {
        return bAlignRow;
 8010a34:	687b      	ldr	r3, [r7, #4]
 8010a36:	79db      	ldrb	r3, [r3, #7]
 8010a38:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8010a3c:	b2db      	uxtb	r3, r3
    }
 8010a3e:	4618      	mov	r0, r3
 8010a40:	370c      	adds	r7, #12
 8010a42:	46bd      	mov	sp, r7
 8010a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a48:	4770      	bx	lr
	...

08010a4c <_ZN8touchgfx9ConstFontD1Ev>:
 *
 * @see Font
 *
 * @note Pure virtual class. Create an application-specific implementation of getPixelData().
 */
class ConstFont : public Font
 8010a4c:	b580      	push	{r7, lr}
 8010a4e:	b082      	sub	sp, #8
 8010a50:	af00      	add	r7, sp, #0
 8010a52:	6078      	str	r0, [r7, #4]
 8010a54:	4a05      	ldr	r2, [pc, #20]	; (8010a6c <_ZN8touchgfx9ConstFontD1Ev+0x20>)
 8010a56:	687b      	ldr	r3, [r7, #4]
 8010a58:	601a      	str	r2, [r3, #0]
 8010a5a:	687b      	ldr	r3, [r7, #4]
 8010a5c:	4618      	mov	r0, r3
 8010a5e:	f7ff ff61 	bl	8010924 <_ZN8touchgfx4FontD1Ev>
 8010a62:	687b      	ldr	r3, [r7, #4]
 8010a64:	4618      	mov	r0, r3
 8010a66:	3708      	adds	r7, #8
 8010a68:	46bd      	mov	sp, r7
 8010a6a:	bd80      	pop	{r7, pc}
 8010a6c:	0802ad58 	.word	0x0802ad58

08010a70 <_ZN8touchgfx9ConstFontD0Ev>:
 8010a70:	b580      	push	{r7, lr}
 8010a72:	b082      	sub	sp, #8
 8010a74:	af00      	add	r7, sp, #0
 8010a76:	6078      	str	r0, [r7, #4]
 8010a78:	6878      	ldr	r0, [r7, #4]
 8010a7a:	f7ff ffe7 	bl	8010a4c <_ZN8touchgfx9ConstFontD1Ev>
 8010a7e:	2118      	movs	r1, #24
 8010a80:	6878      	ldr	r0, [r7, #4]
 8010a82:	f016 fb22 	bl	80270ca <_ZdlPvj>
 8010a86:	687b      	ldr	r3, [r7, #4]
 8010a88:	4618      	mov	r0, r3
 8010a8a:	3708      	adds	r7, #8
 8010a8c:	46bd      	mov	sp, r7
 8010a8e:	bd80      	pop	{r7, pc}

08010a90 <_ZN8touchgfx13GeneratedFontD1Ev>:
 * An GeneratedFont has both glyph table and glyph data placed in a flash which
 * supports random access read (i.e. not a NAND flash)
 *
 * @see ConstFont
 */
class GeneratedFont : public ConstFont
 8010a90:	b580      	push	{r7, lr}
 8010a92:	b082      	sub	sp, #8
 8010a94:	af00      	add	r7, sp, #0
 8010a96:	6078      	str	r0, [r7, #4]
 8010a98:	4a05      	ldr	r2, [pc, #20]	; (8010ab0 <_ZN8touchgfx13GeneratedFontD1Ev+0x20>)
 8010a9a:	687b      	ldr	r3, [r7, #4]
 8010a9c:	601a      	str	r2, [r3, #0]
 8010a9e:	687b      	ldr	r3, [r7, #4]
 8010aa0:	4618      	mov	r0, r3
 8010aa2:	f7ff ffd3 	bl	8010a4c <_ZN8touchgfx9ConstFontD1Ev>
 8010aa6:	687b      	ldr	r3, [r7, #4]
 8010aa8:	4618      	mov	r0, r3
 8010aaa:	3708      	adds	r7, #8
 8010aac:	46bd      	mov	sp, r7
 8010aae:	bd80      	pop	{r7, pc}
 8010ab0:	08028fb0 	.word	0x08028fb0

08010ab4 <_ZN8touchgfx13GeneratedFontD0Ev>:
 8010ab4:	b580      	push	{r7, lr}
 8010ab6:	b082      	sub	sp, #8
 8010ab8:	af00      	add	r7, sp, #0
 8010aba:	6078      	str	r0, [r7, #4]
 8010abc:	6878      	ldr	r0, [r7, #4]
 8010abe:	f7ff ffe7 	bl	8010a90 <_ZN8touchgfx13GeneratedFontD1Ev>
 8010ac2:	2124      	movs	r1, #36	; 0x24
 8010ac4:	6878      	ldr	r0, [r7, #4]
 8010ac6:	f016 fb00 	bl	80270ca <_ZdlPvj>
 8010aca:	687b      	ldr	r3, [r7, #4]
 8010acc:	4618      	mov	r0, r3
 8010ace:	3708      	adds	r7, #8
 8010ad0:	46bd      	mov	sp, r7
 8010ad2:	bd80      	pop	{r7, pc}

08010ad4 <_ZN8touchgfx9TypedTextD1Ev>:
        : typedTextId(id)
    {
    }

    /** Finalizes an instance of the TypedText class. */
    virtual ~TypedText()
 8010ad4:	b480      	push	{r7}
 8010ad6:	b083      	sub	sp, #12
 8010ad8:	af00      	add	r7, sp, #0
 8010ada:	6078      	str	r0, [r7, #4]
    {
 8010adc:	4a04      	ldr	r2, [pc, #16]	; (8010af0 <_ZN8touchgfx9TypedTextD1Ev+0x1c>)
 8010ade:	687b      	ldr	r3, [r7, #4]
 8010ae0:	601a      	str	r2, [r3, #0]
    }
 8010ae2:	687b      	ldr	r3, [r7, #4]
 8010ae4:	4618      	mov	r0, r3
 8010ae6:	370c      	adds	r7, #12
 8010ae8:	46bd      	mov	sp, r7
 8010aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010aee:	4770      	bx	lr
 8010af0:	08028fa0 	.word	0x08028fa0

08010af4 <_ZN8touchgfx9TypedTextD0Ev>:
    virtual ~TypedText()
 8010af4:	b580      	push	{r7, lr}
 8010af6:	b082      	sub	sp, #8
 8010af8:	af00      	add	r7, sp, #0
 8010afa:	6078      	str	r0, [r7, #4]
    }
 8010afc:	6878      	ldr	r0, [r7, #4]
 8010afe:	f7ff ffe9 	bl	8010ad4 <_ZN8touchgfx9TypedTextD1Ev>
 8010b02:	2108      	movs	r1, #8
 8010b04:	6878      	ldr	r0, [r7, #4]
 8010b06:	f016 fae0 	bl	80270ca <_ZdlPvj>
 8010b0a:	687b      	ldr	r3, [r7, #4]
 8010b0c:	4618      	mov	r0, r3
 8010b0e:	3708      	adds	r7, #8
 8010b10:	46bd      	mov	sp, r7
 8010b12:	bd80      	pop	{r7, pc}

08010b14 <_ZNK8touchgfx13GeneratedFont12getGSUBTableEv>:
    /**
     * Gets GSUB table.
     *
     * @return The GSUB table or null if font has GSUB no table
     */
    virtual const uint16_t* getGSUBTable() const
 8010b14:	b480      	push	{r7}
 8010b16:	b083      	sub	sp, #12
 8010b18:	af00      	add	r7, sp, #0
 8010b1a:	6078      	str	r0, [r7, #4]
    {
        return gsubTable;
 8010b1c:	687b      	ldr	r3, [r7, #4]
 8010b1e:	6a1b      	ldr	r3, [r3, #32]
    }
 8010b20:	4618      	mov	r0, r3
 8010b22:	370c      	adds	r7, #12
 8010b24:	46bd      	mov	sp, r7
 8010b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b2a:	4770      	bx	lr

08010b2c <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt>:

#include <fonts/GeneratedFont.hpp>

namespace touchgfx
{
GeneratedFont::GeneratedFont(const GlyphNode* list, uint16_t size, uint16_t height, uint8_t pixBelowBase, uint8_t bitsPerPixel, uint8_t byteAlignRow, uint8_t maxLeft, uint8_t maxRight, const uint8_t* const* glyphDataInternalFlash, const KerningNode* kerningList, const Unicode::UnicodeChar fallbackChar, const Unicode::UnicodeChar ellipsisChar, const uint16_t* const gsubData) :
 8010b2c:	b580      	push	{r7, lr}
 8010b2e:	b08c      	sub	sp, #48	; 0x30
 8010b30:	af08      	add	r7, sp, #32
 8010b32:	60f8      	str	r0, [r7, #12]
 8010b34:	60b9      	str	r1, [r7, #8]
 8010b36:	4611      	mov	r1, r2
 8010b38:	461a      	mov	r2, r3
 8010b3a:	460b      	mov	r3, r1
 8010b3c:	80fb      	strh	r3, [r7, #6]
 8010b3e:	4613      	mov	r3, r2
 8010b40:	80bb      	strh	r3, [r7, #4]
    ConstFont(list, size, height, pixBelowBase, bitsPerPixel, byteAlignRow, maxLeft, maxRight, fallbackChar, ellipsisChar),
    glyphData(glyphDataInternalFlash),
    kerningData(kerningList),
    gsubTable(gsubData)
 8010b42:	68f8      	ldr	r0, [r7, #12]
 8010b44:	88b9      	ldrh	r1, [r7, #4]
 8010b46:	88fa      	ldrh	r2, [r7, #6]
 8010b48:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8010b4a:	9306      	str	r3, [sp, #24]
 8010b4c:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8010b4e:	9305      	str	r3, [sp, #20]
 8010b50:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8010b54:	9304      	str	r3, [sp, #16]
 8010b56:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8010b5a:	9303      	str	r3, [sp, #12]
 8010b5c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8010b60:	9302      	str	r3, [sp, #8]
 8010b62:	7f3b      	ldrb	r3, [r7, #28]
 8010b64:	9301      	str	r3, [sp, #4]
 8010b66:	7e3b      	ldrb	r3, [r7, #24]
 8010b68:	9300      	str	r3, [sp, #0]
 8010b6a:	460b      	mov	r3, r1
 8010b6c:	68b9      	ldr	r1, [r7, #8]
 8010b6e:	f009 f815 	bl	8019b9c <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt>
 8010b72:	4a08      	ldr	r2, [pc, #32]	; (8010b94 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt+0x68>)
 8010b74:	68fb      	ldr	r3, [r7, #12]
 8010b76:	601a      	str	r2, [r3, #0]
 8010b78:	68fb      	ldr	r3, [r7, #12]
 8010b7a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010b7c:	619a      	str	r2, [r3, #24]
 8010b7e:	68fb      	ldr	r3, [r7, #12]
 8010b80:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010b82:	61da      	str	r2, [r3, #28]
 8010b84:	68fb      	ldr	r3, [r7, #12]
 8010b86:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8010b88:	621a      	str	r2, [r3, #32]
{
}
 8010b8a:	68fb      	ldr	r3, [r7, #12]
 8010b8c:	4618      	mov	r0, r3
 8010b8e:	3710      	adds	r7, #16
 8010b90:	46bd      	mov	sp, r7
 8010b92:	bd80      	pop	{r7, pc}
 8010b94:	08028fb0 	.word	0x08028fb0

08010b98 <_ZNK8touchgfx13GeneratedFont12getPixelDataEPKNS_9GlyphNodeE>:

const uint8_t* GeneratedFont::getPixelData(const GlyphNode* glyph) const
{
 8010b98:	b480      	push	{r7}
 8010b9a:	b085      	sub	sp, #20
 8010b9c:	af00      	add	r7, sp, #0
 8010b9e:	6078      	str	r0, [r7, #4]
 8010ba0:	6039      	str	r1, [r7, #0]
    const uint8_t* const* table = (const uint8_t* const*)glyphData;
 8010ba2:	687b      	ldr	r3, [r7, #4]
 8010ba4:	699b      	ldr	r3, [r3, #24]
 8010ba6:	60fb      	str	r3, [r7, #12]
    return &(table[glyph->unicode / 2048][glyph->dataOffset]);
 8010ba8:	683b      	ldr	r3, [r7, #0]
 8010baa:	889b      	ldrh	r3, [r3, #4]
 8010bac:	0adb      	lsrs	r3, r3, #11
 8010bae:	b29b      	uxth	r3, r3
 8010bb0:	009b      	lsls	r3, r3, #2
 8010bb2:	68fa      	ldr	r2, [r7, #12]
 8010bb4:	4413      	add	r3, r2
 8010bb6:	681a      	ldr	r2, [r3, #0]
 8010bb8:	683b      	ldr	r3, [r7, #0]
 8010bba:	681b      	ldr	r3, [r3, #0]
 8010bbc:	4413      	add	r3, r2
}
 8010bbe:	4618      	mov	r0, r3
 8010bc0:	3714      	adds	r7, #20
 8010bc2:	46bd      	mov	sp, r7
 8010bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bc8:	4770      	bx	lr

08010bca <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE>:

int8_t GeneratedFont::getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
{
 8010bca:	b480      	push	{r7}
 8010bcc:	b089      	sub	sp, #36	; 0x24
 8010bce:	af00      	add	r7, sp, #0
 8010bd0:	60f8      	str	r0, [r7, #12]
 8010bd2:	460b      	mov	r3, r1
 8010bd4:	607a      	str	r2, [r7, #4]
 8010bd6:	817b      	strh	r3, [r7, #10]
    if (!glyph || glyph->kerningTableSize == 0)
 8010bd8:	687b      	ldr	r3, [r7, #4]
 8010bda:	2b00      	cmp	r3, #0
 8010bdc:	d003      	beq.n	8010be6 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x1c>
 8010bde:	687b      	ldr	r3, [r7, #4]
 8010be0:	7b1b      	ldrb	r3, [r3, #12]
 8010be2:	2b00      	cmp	r3, #0
 8010be4:	d101      	bne.n	8010bea <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x20>
    {
        return 0;
 8010be6:	2300      	movs	r3, #0
 8010be8:	e030      	b.n	8010c4c <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x82>
    }

    const KerningNode* kerndata = kerningData + glyph->kerningTablePos();
 8010bea:	68fb      	ldr	r3, [r7, #12]
 8010bec:	69da      	ldr	r2, [r3, #28]
 8010bee:	687b      	ldr	r3, [r7, #4]
 8010bf0:	617b      	str	r3, [r7, #20]
        return ((flags & GLYPH_DATA_KERNINGTABLEPOS_BIT8_10) << 8) | _kerningTablePos;
 8010bf2:	697b      	ldr	r3, [r7, #20]
 8010bf4:	7b5b      	ldrb	r3, [r3, #13]
 8010bf6:	021b      	lsls	r3, r3, #8
 8010bf8:	b21b      	sxth	r3, r3
 8010bfa:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8010bfe:	b219      	sxth	r1, r3
 8010c00:	697b      	ldr	r3, [r7, #20]
 8010c02:	7adb      	ldrb	r3, [r3, #11]
 8010c04:	b21b      	sxth	r3, r3
 8010c06:	430b      	orrs	r3, r1
 8010c08:	b21b      	sxth	r3, r3
 8010c0a:	b29b      	uxth	r3, r3
 8010c0c:	009b      	lsls	r3, r3, #2
 8010c0e:	4413      	add	r3, r2
 8010c10:	61fb      	str	r3, [r7, #28]
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 8010c12:	687b      	ldr	r3, [r7, #4]
 8010c14:	7b1b      	ldrb	r3, [r3, #12]
 8010c16:	837b      	strh	r3, [r7, #26]
 8010c18:	8b7b      	ldrh	r3, [r7, #26]
 8010c1a:	2b00      	cmp	r3, #0
 8010c1c:	d015      	beq.n	8010c4a <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x80>
    {
        if (prevChar == kerndata->unicodePrevChar)
 8010c1e:	69fb      	ldr	r3, [r7, #28]
 8010c20:	881b      	ldrh	r3, [r3, #0]
 8010c22:	897a      	ldrh	r2, [r7, #10]
 8010c24:	429a      	cmp	r2, r3
 8010c26:	d103      	bne.n	8010c30 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x66>
        {
            return kerndata->distance;
 8010c28:	69fb      	ldr	r3, [r7, #28]
 8010c2a:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8010c2e:	e00d      	b.n	8010c4c <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x82>
        }
        if (prevChar < kerndata->unicodePrevChar)
 8010c30:	69fb      	ldr	r3, [r7, #28]
 8010c32:	881b      	ldrh	r3, [r3, #0]
 8010c34:	897a      	ldrh	r2, [r7, #10]
 8010c36:	429a      	cmp	r2, r3
 8010c38:	d306      	bcc.n	8010c48 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x7e>
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 8010c3a:	8b7b      	ldrh	r3, [r7, #26]
 8010c3c:	3b01      	subs	r3, #1
 8010c3e:	837b      	strh	r3, [r7, #26]
 8010c40:	69fb      	ldr	r3, [r7, #28]
 8010c42:	3304      	adds	r3, #4
 8010c44:	61fb      	str	r3, [r7, #28]
 8010c46:	e7e7      	b.n	8010c18 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x4e>
        {
            break;
 8010c48:	bf00      	nop
        }
    }
    return 0;
 8010c4a:	2300      	movs	r3, #0
}
 8010c4c:	4618      	mov	r0, r3
 8010c4e:	3724      	adds	r7, #36	; 0x24
 8010c50:	46bd      	mov	sp, r7
 8010c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c56:	4770      	bx	lr

08010c58 <__tcf_0>:

touchgfx::GeneratedFont& getFont_verdana_10_4bpp();

touchgfx::GeneratedFont& getFont_verdana_10_4bpp()
{
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0);
 8010c58:	b580      	push	{r7, lr}
 8010c5a:	af00      	add	r7, sp, #0
 8010c5c:	4801      	ldr	r0, [pc, #4]	; (8010c64 <__tcf_0+0xc>)
 8010c5e:	f7ff ff17 	bl	8010a90 <_ZN8touchgfx13GeneratedFontD1Ev>
 8010c62:	bd80      	pop	{r7, pc}
 8010c64:	2000524c 	.word	0x2000524c

08010c68 <_Z23getFont_verdana_10_4bppv>:
{
 8010c68:	b580      	push	{r7, lr}
 8010c6a:	b08a      	sub	sp, #40	; 0x28
 8010c6c:	af0a      	add	r7, sp, #40	; 0x28
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0);
 8010c6e:	4b1e      	ldr	r3, [pc, #120]	; (8010ce8 <_Z23getFont_verdana_10_4bppv+0x80>)
 8010c70:	781b      	ldrb	r3, [r3, #0]
 8010c72:	f3bf 8f5b 	dmb	ish
 8010c76:	b2db      	uxtb	r3, r3
 8010c78:	f003 0301 	and.w	r3, r3, #1
 8010c7c:	2b00      	cmp	r3, #0
 8010c7e:	bf0c      	ite	eq
 8010c80:	2301      	moveq	r3, #1
 8010c82:	2300      	movne	r3, #0
 8010c84:	b2db      	uxtb	r3, r3
 8010c86:	2b00      	cmp	r3, #0
 8010c88:	d02a      	beq.n	8010ce0 <_Z23getFont_verdana_10_4bppv+0x78>
 8010c8a:	4817      	ldr	r0, [pc, #92]	; (8010ce8 <_Z23getFont_verdana_10_4bppv+0x80>)
 8010c8c:	f016 fa1f 	bl	80270ce <__cxa_guard_acquire>
 8010c90:	4603      	mov	r3, r0
 8010c92:	2b00      	cmp	r3, #0
 8010c94:	bf14      	ite	ne
 8010c96:	2301      	movne	r3, #1
 8010c98:	2300      	moveq	r3, #0
 8010c9a:	b2db      	uxtb	r3, r3
 8010c9c:	2b00      	cmp	r3, #0
 8010c9e:	d01f      	beq.n	8010ce0 <_Z23getFont_verdana_10_4bppv+0x78>
 8010ca0:	2300      	movs	r3, #0
 8010ca2:	9309      	str	r3, [sp, #36]	; 0x24
 8010ca4:	2300      	movs	r3, #0
 8010ca6:	9308      	str	r3, [sp, #32]
 8010ca8:	233f      	movs	r3, #63	; 0x3f
 8010caa:	9307      	str	r3, [sp, #28]
 8010cac:	4b0f      	ldr	r3, [pc, #60]	; (8010cec <_Z23getFont_verdana_10_4bppv+0x84>)
 8010cae:	9306      	str	r3, [sp, #24]
 8010cb0:	4b0f      	ldr	r3, [pc, #60]	; (8010cf0 <_Z23getFont_verdana_10_4bppv+0x88>)
 8010cb2:	9305      	str	r3, [sp, #20]
 8010cb4:	2300      	movs	r3, #0
 8010cb6:	9304      	str	r3, [sp, #16]
 8010cb8:	2300      	movs	r3, #0
 8010cba:	9303      	str	r3, [sp, #12]
 8010cbc:	2301      	movs	r3, #1
 8010cbe:	9302      	str	r3, [sp, #8]
 8010cc0:	2304      	movs	r3, #4
 8010cc2:	9301      	str	r3, [sp, #4]
 8010cc4:	2300      	movs	r3, #0
 8010cc6:	9300      	str	r3, [sp, #0]
 8010cc8:	230a      	movs	r3, #10
 8010cca:	2201      	movs	r2, #1
 8010ccc:	4909      	ldr	r1, [pc, #36]	; (8010cf4 <_Z23getFont_verdana_10_4bppv+0x8c>)
 8010cce:	480a      	ldr	r0, [pc, #40]	; (8010cf8 <_Z23getFont_verdana_10_4bppv+0x90>)
 8010cd0:	f7ff ff2c 	bl	8010b2c <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt>
 8010cd4:	4809      	ldr	r0, [pc, #36]	; (8010cfc <_Z23getFont_verdana_10_4bppv+0x94>)
 8010cd6:	f016 fa45 	bl	8027164 <atexit>
 8010cda:	4803      	ldr	r0, [pc, #12]	; (8010ce8 <_Z23getFont_verdana_10_4bppv+0x80>)
 8010cdc:	f016 fa03 	bl	80270e6 <__cxa_guard_release>
    return verdana_10_4bpp;
 8010ce0:	4b05      	ldr	r3, [pc, #20]	; (8010cf8 <_Z23getFont_verdana_10_4bppv+0x90>)
}
 8010ce2:	4618      	mov	r0, r3
 8010ce4:	46bd      	mov	sp, r7
 8010ce6:	bd80      	pop	{r7, pc}
 8010ce8:	20005270 	.word	0x20005270
 8010cec:	0802c710 	.word	0x0802c710
 8010cf0:	08028ffc 	.word	0x08028ffc
 8010cf4:	0802c664 	.word	0x0802c664
 8010cf8:	2000524c 	.word	0x2000524c
 8010cfc:	08010c59 	.word	0x08010c59

08010d00 <__tcf_0>:

touchgfx::GeneratedFont& getFont_verdana_20_4bpp();

touchgfx::GeneratedFont& getFont_verdana_20_4bpp()
{
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 10, 20, 0, 4, 1, 0, 1, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0);
 8010d00:	b580      	push	{r7, lr}
 8010d02:	af00      	add	r7, sp, #0
 8010d04:	4801      	ldr	r0, [pc, #4]	; (8010d0c <__tcf_0+0xc>)
 8010d06:	f7ff fec3 	bl	8010a90 <_ZN8touchgfx13GeneratedFontD1Ev>
 8010d0a:	bd80      	pop	{r7, pc}
 8010d0c:	20005274 	.word	0x20005274

08010d10 <_Z23getFont_verdana_20_4bppv>:
{
 8010d10:	b580      	push	{r7, lr}
 8010d12:	b08a      	sub	sp, #40	; 0x28
 8010d14:	af0a      	add	r7, sp, #40	; 0x28
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 10, 20, 0, 4, 1, 0, 1, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0);
 8010d16:	4b1e      	ldr	r3, [pc, #120]	; (8010d90 <_Z23getFont_verdana_20_4bppv+0x80>)
 8010d18:	781b      	ldrb	r3, [r3, #0]
 8010d1a:	f3bf 8f5b 	dmb	ish
 8010d1e:	b2db      	uxtb	r3, r3
 8010d20:	f003 0301 	and.w	r3, r3, #1
 8010d24:	2b00      	cmp	r3, #0
 8010d26:	bf0c      	ite	eq
 8010d28:	2301      	moveq	r3, #1
 8010d2a:	2300      	movne	r3, #0
 8010d2c:	b2db      	uxtb	r3, r3
 8010d2e:	2b00      	cmp	r3, #0
 8010d30:	d02a      	beq.n	8010d88 <_Z23getFont_verdana_20_4bppv+0x78>
 8010d32:	4817      	ldr	r0, [pc, #92]	; (8010d90 <_Z23getFont_verdana_20_4bppv+0x80>)
 8010d34:	f016 f9cb 	bl	80270ce <__cxa_guard_acquire>
 8010d38:	4603      	mov	r3, r0
 8010d3a:	2b00      	cmp	r3, #0
 8010d3c:	bf14      	ite	ne
 8010d3e:	2301      	movne	r3, #1
 8010d40:	2300      	moveq	r3, #0
 8010d42:	b2db      	uxtb	r3, r3
 8010d44:	2b00      	cmp	r3, #0
 8010d46:	d01f      	beq.n	8010d88 <_Z23getFont_verdana_20_4bppv+0x78>
 8010d48:	2300      	movs	r3, #0
 8010d4a:	9309      	str	r3, [sp, #36]	; 0x24
 8010d4c:	2300      	movs	r3, #0
 8010d4e:	9308      	str	r3, [sp, #32]
 8010d50:	233f      	movs	r3, #63	; 0x3f
 8010d52:	9307      	str	r3, [sp, #28]
 8010d54:	4b0f      	ldr	r3, [pc, #60]	; (8010d94 <_Z23getFont_verdana_20_4bppv+0x84>)
 8010d56:	9306      	str	r3, [sp, #24]
 8010d58:	4b0f      	ldr	r3, [pc, #60]	; (8010d98 <_Z23getFont_verdana_20_4bppv+0x88>)
 8010d5a:	9305      	str	r3, [sp, #20]
 8010d5c:	2301      	movs	r3, #1
 8010d5e:	9304      	str	r3, [sp, #16]
 8010d60:	2300      	movs	r3, #0
 8010d62:	9303      	str	r3, [sp, #12]
 8010d64:	2301      	movs	r3, #1
 8010d66:	9302      	str	r3, [sp, #8]
 8010d68:	2304      	movs	r3, #4
 8010d6a:	9301      	str	r3, [sp, #4]
 8010d6c:	2300      	movs	r3, #0
 8010d6e:	9300      	str	r3, [sp, #0]
 8010d70:	2314      	movs	r3, #20
 8010d72:	220a      	movs	r2, #10
 8010d74:	4909      	ldr	r1, [pc, #36]	; (8010d9c <_Z23getFont_verdana_20_4bppv+0x8c>)
 8010d76:	480a      	ldr	r0, [pc, #40]	; (8010da0 <_Z23getFont_verdana_20_4bppv+0x90>)
 8010d78:	f7ff fed8 	bl	8010b2c <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt>
 8010d7c:	4809      	ldr	r0, [pc, #36]	; (8010da4 <_Z23getFont_verdana_20_4bppv+0x94>)
 8010d7e:	f016 f9f1 	bl	8027164 <atexit>
 8010d82:	4803      	ldr	r0, [pc, #12]	; (8010d90 <_Z23getFont_verdana_20_4bppv+0x80>)
 8010d84:	f016 f9af 	bl	80270e6 <__cxa_guard_release>
    return verdana_20_4bpp;
 8010d88:	4b05      	ldr	r3, [pc, #20]	; (8010da0 <_Z23getFont_verdana_20_4bppv+0x90>)
}
 8010d8a:	4618      	mov	r0, r3
 8010d8c:	46bd      	mov	sp, r7
 8010d8e:	bd80      	pop	{r7, pc}
 8010d90:	20005298 	.word	0x20005298
 8010d94:	0802c714 	.word	0x0802c714
 8010d98:	08029000 	.word	0x08029000
 8010d9c:	0802c674 	.word	0x0802c674
 8010da0:	20005274 	.word	0x20005274
 8010da4:	08010d01 	.word	0x08010d01

08010da8 <__tcf_0>:

touchgfx::GeneratedFont& getFont_verdana_40_4bpp();

touchgfx::GeneratedFont& getFont_verdana_40_4bpp()
{
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0);
 8010da8:	b580      	push	{r7, lr}
 8010daa:	af00      	add	r7, sp, #0
 8010dac:	4801      	ldr	r0, [pc, #4]	; (8010db4 <__tcf_0+0xc>)
 8010dae:	f7ff fe6f 	bl	8010a90 <_ZN8touchgfx13GeneratedFontD1Ev>
 8010db2:	bd80      	pop	{r7, pc}
 8010db4:	2000529c 	.word	0x2000529c

08010db8 <_Z23getFont_verdana_40_4bppv>:
{
 8010db8:	b580      	push	{r7, lr}
 8010dba:	b08a      	sub	sp, #40	; 0x28
 8010dbc:	af0a      	add	r7, sp, #40	; 0x28
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0);
 8010dbe:	4b1e      	ldr	r3, [pc, #120]	; (8010e38 <_Z23getFont_verdana_40_4bppv+0x80>)
 8010dc0:	781b      	ldrb	r3, [r3, #0]
 8010dc2:	f3bf 8f5b 	dmb	ish
 8010dc6:	b2db      	uxtb	r3, r3
 8010dc8:	f003 0301 	and.w	r3, r3, #1
 8010dcc:	2b00      	cmp	r3, #0
 8010dce:	bf0c      	ite	eq
 8010dd0:	2301      	moveq	r3, #1
 8010dd2:	2300      	movne	r3, #0
 8010dd4:	b2db      	uxtb	r3, r3
 8010dd6:	2b00      	cmp	r3, #0
 8010dd8:	d02a      	beq.n	8010e30 <_Z23getFont_verdana_40_4bppv+0x78>
 8010dda:	4817      	ldr	r0, [pc, #92]	; (8010e38 <_Z23getFont_verdana_40_4bppv+0x80>)
 8010ddc:	f016 f977 	bl	80270ce <__cxa_guard_acquire>
 8010de0:	4603      	mov	r3, r0
 8010de2:	2b00      	cmp	r3, #0
 8010de4:	bf14      	ite	ne
 8010de6:	2301      	movne	r3, #1
 8010de8:	2300      	moveq	r3, #0
 8010dea:	b2db      	uxtb	r3, r3
 8010dec:	2b00      	cmp	r3, #0
 8010dee:	d01f      	beq.n	8010e30 <_Z23getFont_verdana_40_4bppv+0x78>
 8010df0:	2300      	movs	r3, #0
 8010df2:	9309      	str	r3, [sp, #36]	; 0x24
 8010df4:	2300      	movs	r3, #0
 8010df6:	9308      	str	r3, [sp, #32]
 8010df8:	233f      	movs	r3, #63	; 0x3f
 8010dfa:	9307      	str	r3, [sp, #28]
 8010dfc:	4b0f      	ldr	r3, [pc, #60]	; (8010e3c <_Z23getFont_verdana_40_4bppv+0x84>)
 8010dfe:	9306      	str	r3, [sp, #24]
 8010e00:	4b0f      	ldr	r3, [pc, #60]	; (8010e40 <_Z23getFont_verdana_40_4bppv+0x88>)
 8010e02:	9305      	str	r3, [sp, #20]
 8010e04:	2300      	movs	r3, #0
 8010e06:	9304      	str	r3, [sp, #16]
 8010e08:	2300      	movs	r3, #0
 8010e0a:	9303      	str	r3, [sp, #12]
 8010e0c:	2301      	movs	r3, #1
 8010e0e:	9302      	str	r3, [sp, #8]
 8010e10:	2304      	movs	r3, #4
 8010e12:	9301      	str	r3, [sp, #4]
 8010e14:	2300      	movs	r3, #0
 8010e16:	9300      	str	r3, [sp, #0]
 8010e18:	2328      	movs	r3, #40	; 0x28
 8010e1a:	2201      	movs	r2, #1
 8010e1c:	4909      	ldr	r1, [pc, #36]	; (8010e44 <_Z23getFont_verdana_40_4bppv+0x8c>)
 8010e1e:	480a      	ldr	r0, [pc, #40]	; (8010e48 <_Z23getFont_verdana_40_4bppv+0x90>)
 8010e20:	f7ff fe84 	bl	8010b2c <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt>
 8010e24:	4809      	ldr	r0, [pc, #36]	; (8010e4c <_Z23getFont_verdana_40_4bppv+0x94>)
 8010e26:	f016 f99d 	bl	8027164 <atexit>
 8010e2a:	4803      	ldr	r0, [pc, #12]	; (8010e38 <_Z23getFont_verdana_40_4bppv+0x80>)
 8010e2c:	f016 f95b 	bl	80270e6 <__cxa_guard_release>
    return verdana_40_4bpp;
 8010e30:	4b05      	ldr	r3, [pc, #20]	; (8010e48 <_Z23getFont_verdana_40_4bppv+0x90>)
}
 8010e32:	4618      	mov	r0, r3
 8010e34:	46bd      	mov	sp, r7
 8010e36:	bd80      	pop	{r7, pc}
 8010e38:	200052c0 	.word	0x200052c0
 8010e3c:	0802c724 	.word	0x0802c724
 8010e40:	08029004 	.word	0x08029004
 8010e44:	0802c700 	.word	0x0802c700
 8010e48:	2000529c 	.word	0x2000529c
 8010e4c:	08010da9 	.word	0x08010da9

08010e50 <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 8010e50:	b480      	push	{r7}
 8010e52:	b083      	sub	sp, #12
 8010e54:	af00      	add	r7, sp, #0
 8010e56:	6078      	str	r0, [r7, #4]
 8010e58:	6039      	str	r1, [r7, #0]
 8010e5a:	683b      	ldr	r3, [r7, #0]
 8010e5c:	4618      	mov	r0, r3
 8010e5e:	370c      	adds	r7, #12
 8010e60:	46bd      	mov	sp, r7
 8010e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e66:	4770      	bx	lr

08010e68 <_ZN8touchgfx15UIEventListener16handleClickEventERKNS_10ClickEventE>:
     * This handler is invoked when a mouse click or display touch event has been detected
     * by the system.
     *
     * @param  event The event data.
     */
    virtual void handleClickEvent(const ClickEvent& event)
 8010e68:	b480      	push	{r7}
 8010e6a:	b083      	sub	sp, #12
 8010e6c:	af00      	add	r7, sp, #0
 8010e6e:	6078      	str	r0, [r7, #4]
 8010e70:	6039      	str	r1, [r7, #0]
    {
    }
 8010e72:	bf00      	nop
 8010e74:	370c      	adds	r7, #12
 8010e76:	46bd      	mov	sp, r7
 8010e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e7c:	4770      	bx	lr

08010e7e <_ZN8touchgfx15UIEventListener15handleDragEventERKNS_9DragEventE>:
    /**
     * This handler is invoked when a drag event has been detected by the system.
     *
     * @param  event The event data.
     */
    virtual void handleDragEvent(const DragEvent& event)
 8010e7e:	b480      	push	{r7}
 8010e80:	b083      	sub	sp, #12
 8010e82:	af00      	add	r7, sp, #0
 8010e84:	6078      	str	r0, [r7, #4]
 8010e86:	6039      	str	r1, [r7, #0]
    {
    }
 8010e88:	bf00      	nop
 8010e8a:	370c      	adds	r7, #12
 8010e8c:	46bd      	mov	sp, r7
 8010e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e92:	4770      	bx	lr

08010e94 <_ZN8touchgfx15UIEventListener18handleGestureEventERKNS_12GestureEventE>:
    /**
     * This handler is invoked when a gesture event has been detected by the system.
     *
     * @param  event The event data.
     */
    virtual void handleGestureEvent(const GestureEvent& event)
 8010e94:	b480      	push	{r7}
 8010e96:	b083      	sub	sp, #12
 8010e98:	af00      	add	r7, sp, #0
 8010e9a:	6078      	str	r0, [r7, #4]
 8010e9c:	6039      	str	r1, [r7, #0]
    {
    }
 8010e9e:	bf00      	nop
 8010ea0:	370c      	adds	r7, #12
 8010ea2:	46bd      	mov	sp, r7
 8010ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ea8:	4770      	bx	lr

08010eaa <_ZN8touchgfx15UIEventListener14handleKeyEventEh>:
    /**
     * This handler is invoked when a key (or button) event has been detected by the system.
     *
     * @param  c The key or button pressed.
     */
    virtual void handleKeyEvent(uint8_t c)
 8010eaa:	b480      	push	{r7}
 8010eac:	b083      	sub	sp, #12
 8010eae:	af00      	add	r7, sp, #0
 8010eb0:	6078      	str	r0, [r7, #4]
 8010eb2:	460b      	mov	r3, r1
 8010eb4:	70fb      	strb	r3, [r7, #3]
    {
    }
 8010eb6:	bf00      	nop
 8010eb8:	370c      	adds	r7, #12
 8010eba:	46bd      	mov	sp, r7
 8010ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ec0:	4770      	bx	lr

08010ec2 <_ZN8touchgfx15UIEventListener15handleTickEventEv>:

    /**
     * This handler is invoked when a system tick event has been generated. The system tick
     * period is configured in the HAL.
     */
    virtual void handleTickEvent()
 8010ec2:	b480      	push	{r7}
 8010ec4:	b083      	sub	sp, #12
 8010ec6:	af00      	add	r7, sp, #0
 8010ec8:	6078      	str	r0, [r7, #4]
    {
    }
 8010eca:	bf00      	nop
 8010ecc:	370c      	adds	r7, #12
 8010ece:	46bd      	mov	sp, r7
 8010ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ed4:	4770      	bx	lr

08010ed6 <_ZN8touchgfx15UIEventListener29handlePendingScreenTransitionEv>:

    /** This handler is invoked when a change screen event is pending. */
    virtual void handlePendingScreenTransition()
 8010ed6:	b480      	push	{r7}
 8010ed8:	b083      	sub	sp, #12
 8010eda:	af00      	add	r7, sp, #0
 8010edc:	6078      	str	r0, [r7, #4]
    {
    }
 8010ede:	bf00      	nop
 8010ee0:	370c      	adds	r7, #12
 8010ee2:	46bd      	mov	sp, r7
 8010ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ee8:	4770      	bx	lr
	...

08010eec <_ZN8touchgfx15UIEventListenerD1Ev>:

    /** Finalizes an instance of the UIEventListener class. */
    virtual ~UIEventListener()
 8010eec:	b480      	push	{r7}
 8010eee:	b083      	sub	sp, #12
 8010ef0:	af00      	add	r7, sp, #0
 8010ef2:	6078      	str	r0, [r7, #4]
    {
 8010ef4:	4a04      	ldr	r2, [pc, #16]	; (8010f08 <_ZN8touchgfx15UIEventListenerD1Ev+0x1c>)
 8010ef6:	687b      	ldr	r3, [r7, #4]
 8010ef8:	601a      	str	r2, [r3, #0]
    }
 8010efa:	687b      	ldr	r3, [r7, #4]
 8010efc:	4618      	mov	r0, r3
 8010efe:	370c      	adds	r7, #12
 8010f00:	46bd      	mov	sp, r7
 8010f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f06:	4770      	bx	lr
 8010f08:	080291d0 	.word	0x080291d0

08010f0c <_ZN8touchgfx15UIEventListenerD0Ev>:
    virtual ~UIEventListener()
 8010f0c:	b580      	push	{r7, lr}
 8010f0e:	b082      	sub	sp, #8
 8010f10:	af00      	add	r7, sp, #0
 8010f12:	6078      	str	r0, [r7, #4]
    }
 8010f14:	6878      	ldr	r0, [r7, #4]
 8010f16:	f7ff ffe9 	bl	8010eec <_ZN8touchgfx15UIEventListenerD1Ev>
 8010f1a:	2104      	movs	r1, #4
 8010f1c:	6878      	ldr	r0, [r7, #4]
 8010f1e:	f016 f8d4 	bl	80270ca <_ZdlPvj>
 8010f22:	687b      	ldr	r3, [r7, #4]
 8010f24:	4618      	mov	r0, r3
 8010f26:	3708      	adds	r7, #8
 8010f28:	46bd      	mov	sp, r7
 8010f2a:	bd80      	pop	{r7, pc}

08010f2c <_ZN8touchgfx11Application15appSwitchScreenEh>:
     * means to switch screen from places that does not have access to a pointer to the new
     * screen. Base implementation is empty.
     *
     * @param screenId An id that maps to the desired screen.
     */
    virtual void appSwitchScreen(uint8_t screenId)
 8010f2c:	b480      	push	{r7}
 8010f2e:	b083      	sub	sp, #12
 8010f30:	af00      	add	r7, sp, #0
 8010f32:	6078      	str	r0, [r7, #4]
 8010f34:	460b      	mov	r3, r1
 8010f36:	70fb      	strb	r3, [r7, #3]
    {
    }
 8010f38:	bf00      	nop
 8010f3a:	370c      	adds	r7, #12
 8010f3c:	46bd      	mov	sp, r7
 8010f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f42:	4770      	bx	lr

08010f44 <_ZN8touchgfx11Application13requestRedrawERNS_4RectE>:
    /**
     * An application specific function for requesting redraw of given Rect.
     *
     * @param [in,out] rect The Rect that must be redrawn.
     */
    virtual void requestRedraw(Rect& rect)
 8010f44:	b480      	push	{r7}
 8010f46:	b083      	sub	sp, #12
 8010f48:	af00      	add	r7, sp, #0
 8010f4a:	6078      	str	r0, [r7, #4]
 8010f4c:	6039      	str	r1, [r7, #0]
    {
        redraw = rect;
 8010f4e:	687b      	ldr	r3, [r7, #4]
 8010f50:	683a      	ldr	r2, [r7, #0]
 8010f52:	f503 7396 	add.w	r3, r3, #300	; 0x12c
 8010f56:	6810      	ldr	r0, [r2, #0]
 8010f58:	6851      	ldr	r1, [r2, #4]
 8010f5a:	c303      	stmia	r3!, {r0, r1}
    };
 8010f5c:	bf00      	nop
 8010f5e:	370c      	adds	r7, #12
 8010f60:	46bd      	mov	sp, r7
 8010f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f66:	4770      	bx	lr

08010f68 <_ZN8touchgfx15GenericCallbackIvvvED1Ev>:
template <>
class GenericCallback<void>
{
public:
    /** Finalizes an instance of the GenericCallback<void> class. */
    virtual ~GenericCallback()
 8010f68:	b480      	push	{r7}
 8010f6a:	b083      	sub	sp, #12
 8010f6c:	af00      	add	r7, sp, #0
 8010f6e:	6078      	str	r0, [r7, #4]
    {
 8010f70:	4a04      	ldr	r2, [pc, #16]	; (8010f84 <_ZN8touchgfx15GenericCallbackIvvvED1Ev+0x1c>)
 8010f72:	687b      	ldr	r3, [r7, #4]
 8010f74:	601a      	str	r2, [r3, #0]
    }
 8010f76:	687b      	ldr	r3, [r7, #4]
 8010f78:	4618      	mov	r0, r3
 8010f7a:	370c      	adds	r7, #12
 8010f7c:	46bd      	mov	sp, r7
 8010f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f82:	4770      	bx	lr
 8010f84:	080291b8 	.word	0x080291b8

08010f88 <_ZN8touchgfx15GenericCallbackIvvvED0Ev>:
    virtual ~GenericCallback()
 8010f88:	b580      	push	{r7, lr}
 8010f8a:	b082      	sub	sp, #8
 8010f8c:	af00      	add	r7, sp, #0
 8010f8e:	6078      	str	r0, [r7, #4]
    }
 8010f90:	6878      	ldr	r0, [r7, #4]
 8010f92:	f7ff ffe9 	bl	8010f68 <_ZN8touchgfx15GenericCallbackIvvvED1Ev>
 8010f96:	2104      	movs	r1, #4
 8010f98:	6878      	ldr	r0, [r7, #4]
 8010f9a:	f016 f896 	bl	80270ca <_ZdlPvj>
 8010f9e:	687b      	ldr	r3, [r7, #4]
 8010fa0:	4618      	mov	r0, r3
 8010fa2:	3708      	adds	r7, #8
 8010fa4:	46bd      	mov	sp, r7
 8010fa6:	bd80      	pop	{r7, pc}

08010fa8 <_ZN8touchgfx8DrawableD1Ev>:
          visible(true)
    {
    }

    /** Finalizes an instance of the Drawable class. */
    virtual ~Drawable()
 8010fa8:	b480      	push	{r7}
 8010faa:	b083      	sub	sp, #12
 8010fac:	af00      	add	r7, sp, #0
 8010fae:	6078      	str	r0, [r7, #4]
    {
 8010fb0:	4a04      	ldr	r2, [pc, #16]	; (8010fc4 <_ZN8touchgfx8DrawableD1Ev+0x1c>)
 8010fb2:	687b      	ldr	r3, [r7, #4]
 8010fb4:	601a      	str	r2, [r3, #0]
    }
 8010fb6:	687b      	ldr	r3, [r7, #4]
 8010fb8:	4618      	mov	r0, r3
 8010fba:	370c      	adds	r7, #12
 8010fbc:	46bd      	mov	sp, r7
 8010fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010fc2:	4770      	bx	lr
 8010fc4:	0802acf4 	.word	0x0802acf4

08010fc8 <_ZN8touchgfx8DrawableD0Ev>:
    virtual ~Drawable()
 8010fc8:	b580      	push	{r7, lr}
 8010fca:	b082      	sub	sp, #8
 8010fcc:	af00      	add	r7, sp, #0
 8010fce:	6078      	str	r0, [r7, #4]
    }
 8010fd0:	6878      	ldr	r0, [r7, #4]
 8010fd2:	f7ff ffe9 	bl	8010fa8 <_ZN8touchgfx8DrawableD1Ev>
 8010fd6:	2128      	movs	r1, #40	; 0x28
 8010fd8:	6878      	ldr	r0, [r7, #4]
 8010fda:	f016 f876 	bl	80270ca <_ZdlPvj>
 8010fde:	687b      	ldr	r3, [r7, #4]
 8010fe0:	4618      	mov	r0, r3
 8010fe2:	3708      	adds	r7, #8
 8010fe4:	46bd      	mov	sp, r7
 8010fe6:	bd80      	pop	{r7, pc}

08010fe8 <_ZN8touchgfx8Drawable13getFirstChildEv>:
     * Function for obtaining the first child of this drawable if any.
     *
     * @return A pointer on the first child drawable if any.
     * @see Container::getFirstChild
     */
    virtual Drawable* getFirstChild()
 8010fe8:	b480      	push	{r7}
 8010fea:	b083      	sub	sp, #12
 8010fec:	af00      	add	r7, sp, #0
 8010fee:	6078      	str	r0, [r7, #4]
    {
        return 0;
 8010ff0:	2300      	movs	r3, #0
    }
 8010ff2:	4618      	mov	r0, r3
 8010ff4:	370c      	adds	r7, #12
 8010ff6:	46bd      	mov	sp, r7
 8010ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ffc:	4770      	bx	lr

08010ffe <_ZN8touchgfx8Drawable11setPositionEssss>:
     * @param  width  The width of this Drawable.
     * @param  height The height of this Drawable.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    void setPosition(int16_t x, int16_t y, int16_t width, int16_t height)
 8010ffe:	b580      	push	{r7, lr}
 8011000:	b084      	sub	sp, #16
 8011002:	af00      	add	r7, sp, #0
 8011004:	60f8      	str	r0, [r7, #12]
 8011006:	4608      	mov	r0, r1
 8011008:	4611      	mov	r1, r2
 801100a:	461a      	mov	r2, r3
 801100c:	4603      	mov	r3, r0
 801100e:	817b      	strh	r3, [r7, #10]
 8011010:	460b      	mov	r3, r1
 8011012:	813b      	strh	r3, [r7, #8]
 8011014:	4613      	mov	r3, r2
 8011016:	80fb      	strh	r3, [r7, #6]
    {
        setXY(x, y);
 8011018:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 801101c:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8011020:	4619      	mov	r1, r3
 8011022:	68f8      	ldr	r0, [r7, #12]
 8011024:	f000 f837 	bl	8011096 <_ZN8touchgfx8Drawable5setXYEss>
        setWidthHeight(width, height);
 8011028:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 801102c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8011030:	4619      	mov	r1, r3
 8011032:	68f8      	ldr	r0, [r7, #12]
 8011034:	f000 f88b 	bl	801114e <_ZN8touchgfx8Drawable14setWidthHeightEss>
    }
 8011038:	bf00      	nop
 801103a:	3710      	adds	r7, #16
 801103c:	46bd      	mov	sp, r7
 801103e:	bd80      	pop	{r7, pc}

08011040 <_ZNK8touchgfx8Drawable4getXEv>:
    /**
     * Gets the x coordinate of this Drawable, relative to its parent.
     *
     * @return The x value, relative to the parent.
     */
    int16_t getX() const
 8011040:	b480      	push	{r7}
 8011042:	b083      	sub	sp, #12
 8011044:	af00      	add	r7, sp, #0
 8011046:	6078      	str	r0, [r7, #4]
    {
        return rect.x;
 8011048:	687b      	ldr	r3, [r7, #4]
 801104a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
    }
 801104e:	4618      	mov	r0, r3
 8011050:	370c      	adds	r7, #12
 8011052:	46bd      	mov	sp, r7
 8011054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011058:	4770      	bx	lr

0801105a <_ZN8touchgfx8Drawable4setXEs>:
     *
     * @param  x The new x value, relative to the parent. A negative value is allowed.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setX(int16_t x)
 801105a:	b480      	push	{r7}
 801105c:	b083      	sub	sp, #12
 801105e:	af00      	add	r7, sp, #0
 8011060:	6078      	str	r0, [r7, #4]
 8011062:	460b      	mov	r3, r1
 8011064:	807b      	strh	r3, [r7, #2]
    {
        rect.x = x;
 8011066:	687b      	ldr	r3, [r7, #4]
 8011068:	887a      	ldrh	r2, [r7, #2]
 801106a:	809a      	strh	r2, [r3, #4]
    }
 801106c:	bf00      	nop
 801106e:	370c      	adds	r7, #12
 8011070:	46bd      	mov	sp, r7
 8011072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011076:	4770      	bx	lr

08011078 <_ZN8touchgfx8Drawable4setYEs>:
     *
     * @param  y The new y value, relative to the parent. A negative value is allowed.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setY(int16_t y)
 8011078:	b480      	push	{r7}
 801107a:	b083      	sub	sp, #12
 801107c:	af00      	add	r7, sp, #0
 801107e:	6078      	str	r0, [r7, #4]
 8011080:	460b      	mov	r3, r1
 8011082:	807b      	strh	r3, [r7, #2]
    {
        rect.y = y;
 8011084:	687b      	ldr	r3, [r7, #4]
 8011086:	887a      	ldrh	r2, [r7, #2]
 8011088:	80da      	strh	r2, [r3, #6]
    }
 801108a:	bf00      	nop
 801108c:	370c      	adds	r7, #12
 801108e:	46bd      	mov	sp, r7
 8011090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011094:	4770      	bx	lr

08011096 <_ZN8touchgfx8Drawable5setXYEss>:
     *
     * @see moveTo
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    void setXY(int16_t x, int16_t y)
 8011096:	b580      	push	{r7, lr}
 8011098:	b082      	sub	sp, #8
 801109a:	af00      	add	r7, sp, #0
 801109c:	6078      	str	r0, [r7, #4]
 801109e:	460b      	mov	r3, r1
 80110a0:	807b      	strh	r3, [r7, #2]
 80110a2:	4613      	mov	r3, r2
 80110a4:	803b      	strh	r3, [r7, #0]
    {
        setX(x);
 80110a6:	687b      	ldr	r3, [r7, #4]
 80110a8:	681b      	ldr	r3, [r3, #0]
 80110aa:	332c      	adds	r3, #44	; 0x2c
 80110ac:	681b      	ldr	r3, [r3, #0]
 80110ae:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80110b2:	4611      	mov	r1, r2
 80110b4:	6878      	ldr	r0, [r7, #4]
 80110b6:	4798      	blx	r3
        setY(y);
 80110b8:	687b      	ldr	r3, [r7, #4]
 80110ba:	681b      	ldr	r3, [r3, #0]
 80110bc:	3330      	adds	r3, #48	; 0x30
 80110be:	681b      	ldr	r3, [r3, #0]
 80110c0:	f9b7 2000 	ldrsh.w	r2, [r7]
 80110c4:	4611      	mov	r1, r2
 80110c6:	6878      	ldr	r0, [r7, #4]
 80110c8:	4798      	blx	r3
    }
 80110ca:	bf00      	nop
 80110cc:	3708      	adds	r7, #8
 80110ce:	46bd      	mov	sp, r7
 80110d0:	bd80      	pop	{r7, pc}

080110d2 <_ZN8touchgfx8Drawable8setWidthEs>:
     *
     * @param  width The new width.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setWidth(int16_t width)
 80110d2:	b480      	push	{r7}
 80110d4:	b083      	sub	sp, #12
 80110d6:	af00      	add	r7, sp, #0
 80110d8:	6078      	str	r0, [r7, #4]
 80110da:	460b      	mov	r3, r1
 80110dc:	807b      	strh	r3, [r7, #2]
    {
        rect.width = width;
 80110de:	687b      	ldr	r3, [r7, #4]
 80110e0:	887a      	ldrh	r2, [r7, #2]
 80110e2:	811a      	strh	r2, [r3, #8]
    }
 80110e4:	bf00      	nop
 80110e6:	370c      	adds	r7, #12
 80110e8:	46bd      	mov	sp, r7
 80110ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110ee:	4770      	bx	lr

080110f0 <_ZN8touchgfx8Drawable9setHeightEs>:
     *
     * @param  height The new height.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setHeight(int16_t height)
 80110f0:	b480      	push	{r7}
 80110f2:	b083      	sub	sp, #12
 80110f4:	af00      	add	r7, sp, #0
 80110f6:	6078      	str	r0, [r7, #4]
 80110f8:	460b      	mov	r3, r1
 80110fa:	807b      	strh	r3, [r7, #2]
    {
        rect.height = height;
 80110fc:	687b      	ldr	r3, [r7, #4]
 80110fe:	887a      	ldrh	r2, [r7, #2]
 8011100:	815a      	strh	r2, [r3, #10]
    }
 8011102:	bf00      	nop
 8011104:	370c      	adds	r7, #12
 8011106:	46bd      	mov	sp, r7
 8011108:	f85d 7b04 	ldr.w	r7, [sp], #4
 801110c:	4770      	bx	lr

0801110e <_ZN8touchgfx8Drawable20childGeometryChangedEv>:
    /**
     * This function can be called on parent nodes to signal that the size or position of
     * one or more of its children has changed. Currently only used in ScrollableContainer
     * to redraw scrollbars when the size of the scrolling contents changes.
     */
    virtual void childGeometryChanged()
 801110e:	b480      	push	{r7}
 8011110:	b083      	sub	sp, #12
 8011112:	af00      	add	r7, sp, #0
 8011114:	6078      	str	r0, [r7, #4]
    {
    }
 8011116:	bf00      	nop
 8011118:	370c      	adds	r7, #12
 801111a:	46bd      	mov	sp, r7
 801111c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011120:	4770      	bx	lr

08011122 <_ZN8touchgfx8Drawable16handleClickEventERKNS_10ClickEventE>:
     * ignores the event. The event is only received if the Drawable is touchable and
     * visible.
     *
     * @param  evt The ClickEvent received from the HAL.
     */
    virtual void handleClickEvent(const ClickEvent& evt)
 8011122:	b480      	push	{r7}
 8011124:	b083      	sub	sp, #12
 8011126:	af00      	add	r7, sp, #0
 8011128:	6078      	str	r0, [r7, #4]
 801112a:	6039      	str	r1, [r7, #0]
    {
    }
 801112c:	bf00      	nop
 801112e:	370c      	adds	r7, #12
 8011130:	46bd      	mov	sp, r7
 8011132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011136:	4770      	bx	lr

08011138 <_ZN8touchgfx8Drawable18handleGestureEventERKNS_12GestureEventE>:
     * ignores the event. The event is only received if the Drawable is touchable and
     * visible.
     *
     * @param  evt The GestureEvent received from the HAL.
     */
    virtual void handleGestureEvent(const GestureEvent& evt)
 8011138:	b480      	push	{r7}
 801113a:	b083      	sub	sp, #12
 801113c:	af00      	add	r7, sp, #0
 801113e:	6078      	str	r0, [r7, #4]
 8011140:	6039      	str	r1, [r7, #0]
    {
    }
 8011142:	bf00      	nop
 8011144:	370c      	adds	r7, #12
 8011146:	46bd      	mov	sp, r7
 8011148:	f85d 7b04 	ldr.w	r7, [sp], #4
 801114c:	4770      	bx	lr

0801114e <_ZN8touchgfx8Drawable14setWidthHeightEss>:
     * coordinates).
     *
     * @param  width  The width.
     * @param  height The height.
     */
    void setWidthHeight(int16_t width, int16_t height)
 801114e:	b580      	push	{r7, lr}
 8011150:	b082      	sub	sp, #8
 8011152:	af00      	add	r7, sp, #0
 8011154:	6078      	str	r0, [r7, #4]
 8011156:	460b      	mov	r3, r1
 8011158:	807b      	strh	r3, [r7, #2]
 801115a:	4613      	mov	r3, r2
 801115c:	803b      	strh	r3, [r7, #0]
    {
        setWidth(width);
 801115e:	687b      	ldr	r3, [r7, #4]
 8011160:	681b      	ldr	r3, [r3, #0]
 8011162:	3334      	adds	r3, #52	; 0x34
 8011164:	681b      	ldr	r3, [r3, #0]
 8011166:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 801116a:	4611      	mov	r1, r2
 801116c:	6878      	ldr	r0, [r7, #4]
 801116e:	4798      	blx	r3
        setHeight(height);
 8011170:	687b      	ldr	r3, [r7, #4]
 8011172:	681b      	ldr	r3, [r3, #0]
 8011174:	3338      	adds	r3, #56	; 0x38
 8011176:	681b      	ldr	r3, [r3, #0]
 8011178:	f9b7 2000 	ldrsh.w	r2, [r7]
 801117c:	4611      	mov	r1, r2
 801117e:	6878      	ldr	r0, [r7, #4]
 8011180:	4798      	blx	r3
    }
 8011182:	bf00      	nop
 8011184:	3708      	adds	r7, #8
 8011186:	46bd      	mov	sp, r7
 8011188:	bd80      	pop	{r7, pc}

0801118a <_ZN8touchgfx8Drawable15handleDragEventERKNS_9DragEventE>:
     * ignores the event. The event is only received if the drawable is touchable and
     * visible.
     *
     * @param  evt The DragEvent received from the HAL.
     */
    virtual void handleDragEvent(const DragEvent& evt)
 801118a:	b480      	push	{r7}
 801118c:	b083      	sub	sp, #12
 801118e:	af00      	add	r7, sp, #0
 8011190:	6078      	str	r0, [r7, #4]
 8011192:	6039      	str	r1, [r7, #0]
    {
    }
 8011194:	bf00      	nop
 8011196:	370c      	adds	r7, #12
 8011198:	46bd      	mov	sp, r7
 801119a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801119e:	4770      	bx	lr

080111a0 <_ZN8touchgfx8Drawable15handleTickEventEv>:
     * Called periodically by the framework if the Drawable instance has subscribed to timer
     * ticks.
     *
     * @see Application::registerTimerWidget
     */
    virtual void handleTickEvent()
 80111a0:	b480      	push	{r7}
 80111a2:	b083      	sub	sp, #12
 80111a4:	af00      	add	r7, sp, #0
 80111a6:	6078      	str	r0, [r7, #4]
    {
    }
 80111a8:	bf00      	nop
 80111aa:	370c      	adds	r7, #12
 80111ac:	46bd      	mov	sp, r7
 80111ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111b2:	4770      	bx	lr

080111b4 <_ZNK8touchgfx8Drawable9isVisibleEv>:
     *
     * @return true if the Drawable is visible.
     *
     * @see setVisible
     */
    bool isVisible() const
 80111b4:	b480      	push	{r7}
 80111b6:	b083      	sub	sp, #12
 80111b8:	af00      	add	r7, sp, #0
 80111ba:	6078      	str	r0, [r7, #4]
    {
        return visible;
 80111bc:	687b      	ldr	r3, [r7, #4]
 80111be:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    }
 80111c2:	4618      	mov	r0, r3
 80111c4:	370c      	adds	r7, #12
 80111c6:	46bd      	mov	sp, r7
 80111c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111cc:	4770      	bx	lr

080111ce <_ZNK8touchgfx8Drawable11isTouchableEv>:
     *
     * @return True if touch events are received.
     *
     * @see setTouchable
     */
    bool isTouchable() const
 80111ce:	b480      	push	{r7}
 80111d0:	b083      	sub	sp, #12
 80111d2:	af00      	add	r7, sp, #0
 80111d4:	6078      	str	r0, [r7, #4]
    {
        return touchable;
 80111d6:	687b      	ldr	r3, [r7, #4]
 80111d8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    }
 80111dc:	4618      	mov	r0, r3
 80111de:	370c      	adds	r7, #12
 80111e0:	46bd      	mov	sp, r7
 80111e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111e6:	4770      	bx	lr

080111e8 <_ZN8touchgfx8Drawable6moveToEss>:
     *
     * @see moveRelative, setXY
     *
     * @note Will redraw the appropriate areas of the screen.
     */
    virtual void moveTo(int16_t x, int16_t y)
 80111e8:	b580      	push	{r7, lr}
 80111ea:	b082      	sub	sp, #8
 80111ec:	af00      	add	r7, sp, #0
 80111ee:	6078      	str	r0, [r7, #4]
 80111f0:	460b      	mov	r3, r1
 80111f2:	807b      	strh	r3, [r7, #2]
 80111f4:	4613      	mov	r3, r2
 80111f6:	803b      	strh	r3, [r7, #0]
    {
        moveRelative(x - rect.x, y - rect.y);
 80111f8:	687b      	ldr	r3, [r7, #4]
 80111fa:	681b      	ldr	r3, [r3, #0]
 80111fc:	3350      	adds	r3, #80	; 0x50
 80111fe:	681b      	ldr	r3, [r3, #0]
 8011200:	8879      	ldrh	r1, [r7, #2]
 8011202:	687a      	ldr	r2, [r7, #4]
 8011204:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 8011208:	b292      	uxth	r2, r2
 801120a:	1a8a      	subs	r2, r1, r2
 801120c:	b292      	uxth	r2, r2
 801120e:	b210      	sxth	r0, r2
 8011210:	8839      	ldrh	r1, [r7, #0]
 8011212:	687a      	ldr	r2, [r7, #4]
 8011214:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 8011218:	b292      	uxth	r2, r2
 801121a:	1a8a      	subs	r2, r1, r2
 801121c:	b292      	uxth	r2, r2
 801121e:	b212      	sxth	r2, r2
 8011220:	4601      	mov	r1, r0
 8011222:	6878      	ldr	r0, [r7, #4]
 8011224:	4798      	blx	r3
    }
 8011226:	bf00      	nop
 8011228:	3708      	adds	r7, #8
 801122a:	46bd      	mov	sp, r7
 801122c:	bd80      	pop	{r7, pc}

0801122e <_ZN8touchgfx8Drawable19resetDrawChainCacheEv>:
     *
     * Reset cached coordinate data.
     *
     * @note For TouchGFX internal use only.
     */
    void resetDrawChainCache()
 801122e:	b480      	push	{r7}
 8011230:	b083      	sub	sp, #12
 8011232:	af00      	add	r7, sp, #0
 8011234:	6078      	str	r0, [r7, #4]
    {
        // Resetting the cached indicators
        cachedVisibleRect.x = UNCACHED_INDICATOR;
 8011236:	687b      	ldr	r3, [r7, #4]
 8011238:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801123c:	819a      	strh	r2, [r3, #12]
        cachedAbsX = UNCACHED_INDICATOR;
 801123e:	687b      	ldr	r3, [r7, #4]
 8011240:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011244:	841a      	strh	r2, [r3, #32]
        cachedAbsY = UNCACHED_INDICATOR;
 8011246:	687b      	ldr	r3, [r7, #4]
 8011248:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801124c:	845a      	strh	r2, [r3, #34]	; 0x22
    }
 801124e:	bf00      	nop
 8011250:	370c      	adds	r7, #12
 8011252:	46bd      	mov	sp, r7
 8011254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011258:	4770      	bx	lr

0801125a <_ZN8touchgfx8Drawable14setupDrawChainERKNS_4RectEPPS0_>:
     * @param          invalidatedArea     Include drawables that intersect with this area only.
     * @param [in,out] nextPreviousElement Modifiable element in linked list.
     *
     * @note For TouchGFX internal use only.
     */
    virtual void setupDrawChain(const Rect& invalidatedArea, Drawable** nextPreviousElement)
 801125a:	b580      	push	{r7, lr}
 801125c:	b084      	sub	sp, #16
 801125e:	af00      	add	r7, sp, #0
 8011260:	60f8      	str	r0, [r7, #12]
 8011262:	60b9      	str	r1, [r7, #8]
 8011264:	607a      	str	r2, [r7, #4]
    {
        resetDrawChainCache();
 8011266:	68f8      	ldr	r0, [r7, #12]
 8011268:	f7ff ffe1 	bl	801122e <_ZN8touchgfx8Drawable19resetDrawChainCacheEv>
        nextDrawChainElement = *nextPreviousElement;
 801126c:	687b      	ldr	r3, [r7, #4]
 801126e:	681a      	ldr	r2, [r3, #0]
 8011270:	68fb      	ldr	r3, [r7, #12]
 8011272:	61da      	str	r2, [r3, #28]
        *nextPreviousElement = this;
 8011274:	687b      	ldr	r3, [r7, #4]
 8011276:	68fa      	ldr	r2, [r7, #12]
 8011278:	601a      	str	r2, [r3, #0]
    }
 801127a:	bf00      	nop
 801127c:	3710      	adds	r7, #16
 801127e:	46bd      	mov	sp, r7
 8011280:	bd80      	pop	{r7, pc}
	...

08011284 <_ZN8touchgfx3HAL11getInstanceEv>:
    /**
     * Gets the HAL instance.
     *
     * @return The HAL instance.
     */
    static HAL* getInstance()
 8011284:	b480      	push	{r7}
 8011286:	af00      	add	r7, sp, #0
    {
        return instance;
 8011288:	4b03      	ldr	r3, [pc, #12]	; (8011298 <_ZN8touchgfx3HAL11getInstanceEv+0x14>)
 801128a:	681b      	ldr	r3, [r3, #0]
    }
 801128c:	4618      	mov	r0, r3
 801128e:	46bd      	mov	sp, r7
 8011290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011294:	4770      	bx	lr
 8011296:	bf00      	nop
 8011298:	2000580c 	.word	0x2000580c

0801129c <_ZN8touchgfx3HAL3lcdEv>:
    /**
     * Gets a reference to the LCD.
     *
     * @return A reference to the LCD.
     */
    static LCD& lcd()
 801129c:	b480      	push	{r7}
 801129e:	af00      	add	r7, sp, #0
    {
        if (instance->useAuxiliaryLCD && instance->auxiliaryLCD)
 80112a0:	4b0b      	ldr	r3, [pc, #44]	; (80112d0 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 80112a2:	681b      	ldr	r3, [r3, #0]
 80112a4:	f893 3076 	ldrb.w	r3, [r3, #118]	; 0x76
 80112a8:	2b00      	cmp	r3, #0
 80112aa:	d008      	beq.n	80112be <_ZN8touchgfx3HAL3lcdEv+0x22>
 80112ac:	4b08      	ldr	r3, [pc, #32]	; (80112d0 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 80112ae:	681b      	ldr	r3, [r3, #0]
 80112b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80112b2:	2b00      	cmp	r3, #0
 80112b4:	d003      	beq.n	80112be <_ZN8touchgfx3HAL3lcdEv+0x22>
        {
            return *instance->auxiliaryLCD;
 80112b6:	4b06      	ldr	r3, [pc, #24]	; (80112d0 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 80112b8:	681b      	ldr	r3, [r3, #0]
 80112ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80112bc:	e002      	b.n	80112c4 <_ZN8touchgfx3HAL3lcdEv+0x28>
        }
        else
        {
            return instance->lcdRef;
 80112be:	4b04      	ldr	r3, [pc, #16]	; (80112d0 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 80112c0:	681b      	ldr	r3, [r3, #0]
 80112c2:	689b      	ldr	r3, [r3, #8]
        }
    }
 80112c4:	4618      	mov	r0, r3
 80112c6:	46bd      	mov	sp, r7
 80112c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112cc:	4770      	bx	lr
 80112ce:	bf00      	nop
 80112d0:	2000580c 	.word	0x2000580c

080112d4 <_ZN8touchgfx10TransitionC1Ev>:
 */
class Transition
{
public:
    /** Initializes a new instance of the Transition class. */
    Transition()
 80112d4:	b480      	push	{r7}
 80112d6:	b083      	sub	sp, #12
 80112d8:	af00      	add	r7, sp, #0
 80112da:	6078      	str	r0, [r7, #4]
        : screenContainer(0), done(false)
 80112dc:	4a07      	ldr	r2, [pc, #28]	; (80112fc <_ZN8touchgfx10TransitionC1Ev+0x28>)
 80112de:	687b      	ldr	r3, [r7, #4]
 80112e0:	601a      	str	r2, [r3, #0]
 80112e2:	687b      	ldr	r3, [r7, #4]
 80112e4:	2200      	movs	r2, #0
 80112e6:	605a      	str	r2, [r3, #4]
 80112e8:	687b      	ldr	r3, [r7, #4]
 80112ea:	2200      	movs	r2, #0
 80112ec:	721a      	strb	r2, [r3, #8]
    {
    }
 80112ee:	687b      	ldr	r3, [r7, #4]
 80112f0:	4618      	mov	r0, r3
 80112f2:	370c      	adds	r7, #12
 80112f4:	46bd      	mov	sp, r7
 80112f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112fa:	4770      	bx	lr
 80112fc:	08029194 	.word	0x08029194

08011300 <_ZN8touchgfx10TransitionD1Ev>:

    /** Finalizes an instance of the Transition class. */
    virtual ~Transition()
 8011300:	b480      	push	{r7}
 8011302:	b083      	sub	sp, #12
 8011304:	af00      	add	r7, sp, #0
 8011306:	6078      	str	r0, [r7, #4]
    {
 8011308:	4a04      	ldr	r2, [pc, #16]	; (801131c <_ZN8touchgfx10TransitionD1Ev+0x1c>)
 801130a:	687b      	ldr	r3, [r7, #4]
 801130c:	601a      	str	r2, [r3, #0]
    }
 801130e:	687b      	ldr	r3, [r7, #4]
 8011310:	4618      	mov	r0, r3
 8011312:	370c      	adds	r7, #12
 8011314:	46bd      	mov	sp, r7
 8011316:	f85d 7b04 	ldr.w	r7, [sp], #4
 801131a:	4770      	bx	lr
 801131c:	08029194 	.word	0x08029194

08011320 <_ZN8touchgfx10TransitionD0Ev>:
    virtual ~Transition()
 8011320:	b580      	push	{r7, lr}
 8011322:	b082      	sub	sp, #8
 8011324:	af00      	add	r7, sp, #0
 8011326:	6078      	str	r0, [r7, #4]
    }
 8011328:	6878      	ldr	r0, [r7, #4]
 801132a:	f7ff ffe9 	bl	8011300 <_ZN8touchgfx10TransitionD1Ev>
 801132e:	210c      	movs	r1, #12
 8011330:	6878      	ldr	r0, [r7, #4]
 8011332:	f015 feca 	bl	80270ca <_ZdlPvj>
 8011336:	687b      	ldr	r3, [r7, #4]
 8011338:	4618      	mov	r0, r3
 801133a:	3708      	adds	r7, #8
 801133c:	46bd      	mov	sp, r7
 801133e:	bd80      	pop	{r7, pc}

08011340 <_ZN8touchgfx10Transition15handleTickEventEv>:

    /** Called for every tick when transitioning. */
    virtual void handleTickEvent()
 8011340:	b480      	push	{r7}
 8011342:	b083      	sub	sp, #12
 8011344:	af00      	add	r7, sp, #0
 8011346:	6078      	str	r0, [r7, #4]
    {
    }
 8011348:	bf00      	nop
 801134a:	370c      	adds	r7, #12
 801134c:	46bd      	mov	sp, r7
 801134e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011352:	4770      	bx	lr

08011354 <_ZN8touchgfx10Transition8tearDownEv>:

    /**
     * Tears down the Animation. Called before the destructor is called, when the
     * application changes the transition.
     */
    virtual void tearDown()
 8011354:	b480      	push	{r7}
 8011356:	b083      	sub	sp, #12
 8011358:	af00      	add	r7, sp, #0
 801135a:	6078      	str	r0, [r7, #4]
    {
    }
 801135c:	bf00      	nop
 801135e:	370c      	adds	r7, #12
 8011360:	46bd      	mov	sp, r7
 8011362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011366:	4770      	bx	lr

08011368 <_ZN8touchgfx10Transition4initEv>:

    /**
     * Initializes the transition. Called after the constructor is called, when the
     * application changes the transition.
     */
    virtual void init()
 8011368:	b480      	push	{r7}
 801136a:	b083      	sub	sp, #12
 801136c:	af00      	add	r7, sp, #0
 801136e:	6078      	str	r0, [r7, #4]
    {
    }
 8011370:	bf00      	nop
 8011372:	370c      	adds	r7, #12
 8011374:	46bd      	mov	sp, r7
 8011376:	f85d 7b04 	ldr.w	r7, [sp], #4
 801137a:	4770      	bx	lr

0801137c <_ZN8touchgfx10Transition10invalidateEv>:
    /**
     * Invalidates the screen when starting the Transition. Default is
     * to invalidate the whole screen. Subclasses can do partial
     * invalidation.
     */
    virtual void invalidate()
 801137c:	b580      	push	{r7, lr}
 801137e:	b082      	sub	sp, #8
 8011380:	af00      	add	r7, sp, #0
 8011382:	6078      	str	r0, [r7, #4]
    {
        Application::getInstance()->draw();
 8011384:	f007 fbec 	bl	8018b60 <_ZN8touchgfx11Application11getInstanceEv>
 8011388:	4603      	mov	r3, r0
 801138a:	681a      	ldr	r2, [r3, #0]
 801138c:	3230      	adds	r2, #48	; 0x30
 801138e:	6812      	ldr	r2, [r2, #0]
 8011390:	4618      	mov	r0, r3
 8011392:	4790      	blx	r2
    }
 8011394:	bf00      	nop
 8011396:	3708      	adds	r7, #8
 8011398:	46bd      	mov	sp, r7
 801139a:	bd80      	pop	{r7, pc}

0801139c <_ZN8touchgfx10Transition18setScreenContainerERNS_9ContainerE>:
     * Sets the Screen Container. Is used by Screen to enable the transition to access the
     * Container.
     *
     * @param [in] cont The Container the transition should have access to.
     */
    virtual void setScreenContainer(Container& cont)
 801139c:	b480      	push	{r7}
 801139e:	b083      	sub	sp, #12
 80113a0:	af00      	add	r7, sp, #0
 80113a2:	6078      	str	r0, [r7, #4]
 80113a4:	6039      	str	r1, [r7, #0]
    {
        screenContainer = &cont;
 80113a6:	687b      	ldr	r3, [r7, #4]
 80113a8:	683a      	ldr	r2, [r7, #0]
 80113aa:	605a      	str	r2, [r3, #4]
    }
 80113ac:	bf00      	nop
 80113ae:	370c      	adds	r7, #12
 80113b0:	46bd      	mov	sp, r7
 80113b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113b6:	4770      	bx	lr

080113b8 <_ZN8touchgfx11ApplicationD1Ev>:
class Application : public UIEventListener
 80113b8:	b580      	push	{r7, lr}
 80113ba:	b082      	sub	sp, #8
 80113bc:	af00      	add	r7, sp, #0
 80113be:	6078      	str	r0, [r7, #4]
 80113c0:	4a05      	ldr	r2, [pc, #20]	; (80113d8 <_ZN8touchgfx11ApplicationD1Ev+0x20>)
 80113c2:	687b      	ldr	r3, [r7, #4]
 80113c4:	601a      	str	r2, [r3, #0]
 80113c6:	687b      	ldr	r3, [r7, #4]
 80113c8:	4618      	mov	r0, r3
 80113ca:	f7ff fd8f 	bl	8010eec <_ZN8touchgfx15UIEventListenerD1Ev>
 80113ce:	687b      	ldr	r3, [r7, #4]
 80113d0:	4618      	mov	r0, r3
 80113d2:	3708      	adds	r7, #8
 80113d4:	46bd      	mov	sp, r7
 80113d6:	bd80      	pop	{r7, pc}
 80113d8:	0802ac04 	.word	0x0802ac04

080113dc <_ZN8touchgfx11ApplicationD0Ev>:
 80113dc:	b580      	push	{r7, lr}
 80113de:	b082      	sub	sp, #8
 80113e0:	af00      	add	r7, sp, #0
 80113e2:	6078      	str	r0, [r7, #4]
 80113e4:	6878      	ldr	r0, [r7, #4]
 80113e6:	f7ff ffe7 	bl	80113b8 <_ZN8touchgfx11ApplicationD1Ev>
 80113ea:	f44f 719c 	mov.w	r1, #312	; 0x138
 80113ee:	6878      	ldr	r0, [r7, #4]
 80113f0:	f015 fe6b 	bl	80270ca <_ZdlPvj>
 80113f4:	687b      	ldr	r3, [r7, #4]
 80113f6:	4618      	mov	r0, r3
 80113f8:	3708      	adds	r7, #8
 80113fa:	46bd      	mov	sp, r7
 80113fc:	bd80      	pop	{r7, pc}
	...

08011400 <_ZN8touchgfx14MVPApplicationC1Ev>:
 */
class MVPApplication : public Application
{
public:
    /** Initializes a new instance of the MVPApplication class. */
    MVPApplication()
 8011400:	b580      	push	{r7, lr}
 8011402:	b082      	sub	sp, #8
 8011404:	af00      	add	r7, sp, #0
 8011406:	6078      	str	r0, [r7, #4]
        : currentPresenter(0),
          pendingScreenTransitionCallback(0)
 8011408:	687b      	ldr	r3, [r7, #4]
 801140a:	4618      	mov	r0, r3
 801140c:	f007 fbca 	bl	8018ba4 <_ZN8touchgfx11ApplicationC1Ev>
 8011410:	4a09      	ldr	r2, [pc, #36]	; (8011438 <_ZN8touchgfx14MVPApplicationC1Ev+0x38>)
 8011412:	687b      	ldr	r3, [r7, #4]
 8011414:	601a      	str	r2, [r3, #0]
 8011416:	687b      	ldr	r3, [r7, #4]
 8011418:	2200      	movs	r2, #0
 801141a:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
 801141e:	687b      	ldr	r3, [r7, #4]
 8011420:	2200      	movs	r2, #0
 8011422:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
    {
        instance = this;
 8011426:	687b      	ldr	r3, [r7, #4]
 8011428:	4a04      	ldr	r2, [pc, #16]	; (801143c <_ZN8touchgfx14MVPApplicationC1Ev+0x3c>)
 801142a:	6013      	str	r3, [r2, #0]
    }
 801142c:	687b      	ldr	r3, [r7, #4]
 801142e:	4618      	mov	r0, r3
 8011430:	3708      	adds	r7, #8
 8011432:	46bd      	mov	sp, r7
 8011434:	bd80      	pop	{r7, pc}
 8011436:	bf00      	nop
 8011438:	08029150 	.word	0x08029150
 801143c:	20005858 	.word	0x20005858

08011440 <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv>:
    /**
     * Handles the pending screen transition.
     *
     * Delegates the work to evaluatePendingScreenTransition()
     */
    virtual void handlePendingScreenTransition()
 8011440:	b580      	push	{r7, lr}
 8011442:	b082      	sub	sp, #8
 8011444:	af00      	add	r7, sp, #0
 8011446:	6078      	str	r0, [r7, #4]
    {
        evaluatePendingScreenTransition();
 8011448:	6878      	ldr	r0, [r7, #4]
 801144a:	f000 f804 	bl	8011456 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv>
    }
 801144e:	bf00      	nop
 8011450:	3708      	adds	r7, #8
 8011452:	46bd      	mov	sp, r7
 8011454:	bd80      	pop	{r7, pc}

08011456 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv>:

    /**
     * Evaluates the pending Callback instances. If a callback is valid, it is executed and
     * a Screen transition is executed.
     */
    void evaluatePendingScreenTransition()
 8011456:	b580      	push	{r7, lr}
 8011458:	b082      	sub	sp, #8
 801145a:	af00      	add	r7, sp, #0
 801145c:	6078      	str	r0, [r7, #4]
    {
        if (pendingScreenTransitionCallback && pendingScreenTransitionCallback->isValid())
 801145e:	687b      	ldr	r3, [r7, #4]
 8011460:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 8011464:	2b00      	cmp	r3, #0
 8011466:	d00f      	beq.n	8011488 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x32>
 8011468:	687b      	ldr	r3, [r7, #4]
 801146a:	f8d3 213c 	ldr.w	r2, [r3, #316]	; 0x13c
 801146e:	687b      	ldr	r3, [r7, #4]
 8011470:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 8011474:	681b      	ldr	r3, [r3, #0]
 8011476:	330c      	adds	r3, #12
 8011478:	681b      	ldr	r3, [r3, #0]
 801147a:	4610      	mov	r0, r2
 801147c:	4798      	blx	r3
 801147e:	4603      	mov	r3, r0
 8011480:	2b00      	cmp	r3, #0
 8011482:	d001      	beq.n	8011488 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x32>
 8011484:	2301      	movs	r3, #1
 8011486:	e000      	b.n	801148a <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x34>
 8011488:	2300      	movs	r3, #0
 801148a:	2b00      	cmp	r3, #0
 801148c:	d00e      	beq.n	80114ac <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x56>
        {
            pendingScreenTransitionCallback->execute();
 801148e:	687b      	ldr	r3, [r7, #4]
 8011490:	f8d3 213c 	ldr.w	r2, [r3, #316]	; 0x13c
 8011494:	687b      	ldr	r3, [r7, #4]
 8011496:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 801149a:	681b      	ldr	r3, [r3, #0]
 801149c:	3308      	adds	r3, #8
 801149e:	681b      	ldr	r3, [r3, #0]
 80114a0:	4610      	mov	r0, r2
 80114a2:	4798      	blx	r3
            pendingScreenTransitionCallback = 0;
 80114a4:	687b      	ldr	r3, [r7, #4]
 80114a6:	2200      	movs	r2, #0
 80114a8:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
        }
    }
 80114ac:	bf00      	nop
 80114ae:	3708      	adds	r7, #8
 80114b0:	46bd      	mov	sp, r7
 80114b2:	bd80      	pop	{r7, pc}

080114b4 <_ZN5Model4bindEP13ModelListener>:
class Model
{
public:
    Model();

    void bind(ModelListener* listener)
 80114b4:	b480      	push	{r7}
 80114b6:	b083      	sub	sp, #12
 80114b8:	af00      	add	r7, sp, #0
 80114ba:	6078      	str	r0, [r7, #4]
 80114bc:	6039      	str	r1, [r7, #0]
    {
        modelListener = listener;
 80114be:	687b      	ldr	r3, [r7, #4]
 80114c0:	683a      	ldr	r2, [r7, #0]
 80114c2:	601a      	str	r2, [r3, #0]
    }
 80114c4:	bf00      	nop
 80114c6:	370c      	adds	r7, #12
 80114c8:	46bd      	mov	sp, r7
 80114ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114ce:	4770      	bx	lr

080114d0 <_ZN8touchgfx14MVPApplicationD1Ev>:
class MVPApplication : public Application
 80114d0:	b580      	push	{r7, lr}
 80114d2:	b082      	sub	sp, #8
 80114d4:	af00      	add	r7, sp, #0
 80114d6:	6078      	str	r0, [r7, #4]
 80114d8:	4a05      	ldr	r2, [pc, #20]	; (80114f0 <_ZN8touchgfx14MVPApplicationD1Ev+0x20>)
 80114da:	687b      	ldr	r3, [r7, #4]
 80114dc:	601a      	str	r2, [r3, #0]
 80114de:	687b      	ldr	r3, [r7, #4]
 80114e0:	4618      	mov	r0, r3
 80114e2:	f7ff ff69 	bl	80113b8 <_ZN8touchgfx11ApplicationD1Ev>
 80114e6:	687b      	ldr	r3, [r7, #4]
 80114e8:	4618      	mov	r0, r3
 80114ea:	3708      	adds	r7, #8
 80114ec:	46bd      	mov	sp, r7
 80114ee:	bd80      	pop	{r7, pc}
 80114f0:	08029150 	.word	0x08029150

080114f4 <_ZN8touchgfx14MVPApplicationD0Ev>:
 80114f4:	b580      	push	{r7, lr}
 80114f6:	b082      	sub	sp, #8
 80114f8:	af00      	add	r7, sp, #0
 80114fa:	6078      	str	r0, [r7, #4]
 80114fc:	6878      	ldr	r0, [r7, #4]
 80114fe:	f7ff ffe7 	bl	80114d0 <_ZN8touchgfx14MVPApplicationD1Ev>
 8011502:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8011506:	6878      	ldr	r0, [r7, #4]
 8011508:	f015 fddf 	bl	80270ca <_ZdlPvj>
 801150c:	687b      	ldr	r3, [r7, #4]
 801150e:	4618      	mov	r0, r3
 8011510:	3708      	adds	r7, #8
 8011512:	46bd      	mov	sp, r7
 8011514:	bd80      	pop	{r7, pc}
	...

08011518 <_ZN23FrontendApplicationBaseD1Ev>:

class FrontendApplicationBase : public touchgfx::MVPApplication
{
public:
    FrontendApplicationBase(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplicationBase() { }
 8011518:	b580      	push	{r7, lr}
 801151a:	b082      	sub	sp, #8
 801151c:	af00      	add	r7, sp, #0
 801151e:	6078      	str	r0, [r7, #4]
 8011520:	4a08      	ldr	r2, [pc, #32]	; (8011544 <_ZN23FrontendApplicationBaseD1Ev+0x2c>)
 8011522:	687b      	ldr	r3, [r7, #4]
 8011524:	601a      	str	r2, [r3, #0]
 8011526:	687b      	ldr	r3, [r7, #4]
 8011528:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 801152c:	4618      	mov	r0, r3
 801152e:	f000 fde9 	bl	8012104 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
 8011532:	687b      	ldr	r3, [r7, #4]
 8011534:	4618      	mov	r0, r3
 8011536:	f7ff ffcb 	bl	80114d0 <_ZN8touchgfx14MVPApplicationD1Ev>
 801153a:	687b      	ldr	r3, [r7, #4]
 801153c:	4618      	mov	r0, r3
 801153e:	3708      	adds	r7, #8
 8011540:	46bd      	mov	sp, r7
 8011542:	bd80      	pop	{r7, pc}
 8011544:	080290f4 	.word	0x080290f4

08011548 <_ZN23FrontendApplicationBaseD0Ev>:
 8011548:	b580      	push	{r7, lr}
 801154a:	b082      	sub	sp, #8
 801154c:	af00      	add	r7, sp, #0
 801154e:	6078      	str	r0, [r7, #4]
 8011550:	6878      	ldr	r0, [r7, #4]
 8011552:	f7ff ffe1 	bl	8011518 <_ZN23FrontendApplicationBaseD1Ev>
 8011556:	f44f 71ac 	mov.w	r1, #344	; 0x158
 801155a:	6878      	ldr	r0, [r7, #4]
 801155c:	f015 fdb5 	bl	80270ca <_ZdlPvj>
 8011560:	687b      	ldr	r3, [r7, #4]
 8011562:	4618      	mov	r0, r3
 8011564:	3708      	adds	r7, #8
 8011566:	46bd      	mov	sp, r7
 8011568:	bd80      	pop	{r7, pc}

0801156a <_ZN8touchgfx12NoTransition15handleTickEventEv>:
 */
class NoTransition : public Transition
{
public:
    /** Indicates that the transition is done after the first tick. */
    virtual void handleTickEvent()
 801156a:	b480      	push	{r7}
 801156c:	b083      	sub	sp, #12
 801156e:	af00      	add	r7, sp, #0
 8011570:	6078      	str	r0, [r7, #4]
    {
        done = true;
 8011572:	687b      	ldr	r3, [r7, #4]
 8011574:	2201      	movs	r2, #1
 8011576:	721a      	strb	r2, [r3, #8]
    }
 8011578:	bf00      	nop
 801157a:	370c      	adds	r7, #12
 801157c:	46bd      	mov	sp, r7
 801157e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011582:	4770      	bx	lr

08011584 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE>:
     *
     * @param       x    Not used since this Widget is the only "child".
     * @param       y    Not used since this Widget is the only "child".
     * @param [out] last Result, the address of the actual instance of the Widget.
     */
    virtual void getLastChild(int16_t x, int16_t y, Drawable** last)
 8011584:	b580      	push	{r7, lr}
 8011586:	b084      	sub	sp, #16
 8011588:	af00      	add	r7, sp, #0
 801158a:	60f8      	str	r0, [r7, #12]
 801158c:	607b      	str	r3, [r7, #4]
 801158e:	460b      	mov	r3, r1
 8011590:	817b      	strh	r3, [r7, #10]
 8011592:	4613      	mov	r3, r2
 8011594:	813b      	strh	r3, [r7, #8]
    {
        (void)x;
        (void)y;
        if (isVisible() && isTouchable())
 8011596:	68fb      	ldr	r3, [r7, #12]
 8011598:	4618      	mov	r0, r3
 801159a:	f7ff fe0b 	bl	80111b4 <_ZNK8touchgfx8Drawable9isVisibleEv>
 801159e:	4603      	mov	r3, r0
 80115a0:	2b00      	cmp	r3, #0
 80115a2:	d008      	beq.n	80115b6 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x32>
 80115a4:	68fb      	ldr	r3, [r7, #12]
 80115a6:	4618      	mov	r0, r3
 80115a8:	f7ff fe11 	bl	80111ce <_ZNK8touchgfx8Drawable11isTouchableEv>
 80115ac:	4603      	mov	r3, r0
 80115ae:	2b00      	cmp	r3, #0
 80115b0:	d001      	beq.n	80115b6 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x32>
 80115b2:	2301      	movs	r3, #1
 80115b4:	e000      	b.n	80115b8 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x34>
 80115b6:	2300      	movs	r3, #0
 80115b8:	2b00      	cmp	r3, #0
 80115ba:	d002      	beq.n	80115c2 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x3e>
        {
            *last = this;
 80115bc:	68fa      	ldr	r2, [r7, #12]
 80115be:	687b      	ldr	r3, [r7, #4]
 80115c0:	601a      	str	r2, [r3, #0]
        }
    }
 80115c2:	bf00      	nop
 80115c4:	3710      	adds	r7, #16
 80115c6:	46bd      	mov	sp, r7
 80115c8:	bd80      	pop	{r7, pc}

080115ca <_ZN13ModelListener4bindEP5Model>:
public:
    ModelListener() : model(0) {}
    
    virtual ~ModelListener() {}

    void bind(Model* m)
 80115ca:	b480      	push	{r7}
 80115cc:	b083      	sub	sp, #12
 80115ce:	af00      	add	r7, sp, #0
 80115d0:	6078      	str	r0, [r7, #4]
 80115d2:	6039      	str	r1, [r7, #0]
    {
        model = m;
 80115d4:	687b      	ldr	r3, [r7, #4]
 80115d6:	683a      	ldr	r2, [r7, #0]
 80115d8:	605a      	str	r2, [r3, #4]
    }
 80115da:	bf00      	nop
 80115dc:	370c      	adds	r7, #12
 80115de:	46bd      	mov	sp, r7
 80115e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115e4:	4770      	bx	lr
	...

080115e8 <_ZN8touchgfx6WidgetD1Ev>:
class Widget : public Drawable
 80115e8:	b580      	push	{r7, lr}
 80115ea:	b082      	sub	sp, #8
 80115ec:	af00      	add	r7, sp, #0
 80115ee:	6078      	str	r0, [r7, #4]
 80115f0:	4a05      	ldr	r2, [pc, #20]	; (8011608 <_ZN8touchgfx6WidgetD1Ev+0x20>)
 80115f2:	687b      	ldr	r3, [r7, #4]
 80115f4:	601a      	str	r2, [r3, #0]
 80115f6:	687b      	ldr	r3, [r7, #4]
 80115f8:	4618      	mov	r0, r3
 80115fa:	f7ff fcd5 	bl	8010fa8 <_ZN8touchgfx8DrawableD1Ev>
 80115fe:	687b      	ldr	r3, [r7, #4]
 8011600:	4618      	mov	r0, r3
 8011602:	3708      	adds	r7, #8
 8011604:	46bd      	mov	sp, r7
 8011606:	bd80      	pop	{r7, pc}
 8011608:	0802906c 	.word	0x0802906c

0801160c <_ZN8touchgfx6WidgetD0Ev>:
 801160c:	b580      	push	{r7, lr}
 801160e:	b082      	sub	sp, #8
 8011610:	af00      	add	r7, sp, #0
 8011612:	6078      	str	r0, [r7, #4]
 8011614:	6878      	ldr	r0, [r7, #4]
 8011616:	f7ff ffe7 	bl	80115e8 <_ZN8touchgfx6WidgetD1Ev>
 801161a:	2128      	movs	r1, #40	; 0x28
 801161c:	6878      	ldr	r0, [r7, #4]
 801161e:	f015 fd54 	bl	80270ca <_ZdlPvj>
 8011622:	687b      	ldr	r3, [r7, #4]
 8011624:	4618      	mov	r0, r3
 8011626:	3708      	adds	r7, #8
 8011628:	46bd      	mov	sp, r7
 801162a:	bd80      	pop	{r7, pc}

0801162c <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>:
#include <gui/screen1_screen/Screen1View.hpp>
#include <gui/screen1_screen/Screen1Presenter.hpp>

using namespace touchgfx;

FrontendApplicationBase::FrontendApplicationBase(Model& m, FrontendHeap& heap)
 801162c:	b580      	push	{r7, lr}
 801162e:	b084      	sub	sp, #16
 8011630:	af00      	add	r7, sp, #0
 8011632:	60f8      	str	r0, [r7, #12]
 8011634:	60b9      	str	r1, [r7, #8]
 8011636:	607a      	str	r2, [r7, #4]
    : touchgfx::MVPApplication(),
      transitionCallback(),
      frontendHeap(heap),
      model(m)
 8011638:	68fb      	ldr	r3, [r7, #12]
 801163a:	4618      	mov	r0, r3
 801163c:	f7ff fee0 	bl	8011400 <_ZN8touchgfx14MVPApplicationC1Ev>
 8011640:	4a13      	ldr	r2, [pc, #76]	; (8011690 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x64>)
 8011642:	68fb      	ldr	r3, [r7, #12]
 8011644:	601a      	str	r2, [r3, #0]
 8011646:	68fb      	ldr	r3, [r7, #12]
 8011648:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 801164c:	4618      	mov	r0, r3
 801164e:	f000 f8e5 	bl	801181c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev>
 8011652:	68fb      	ldr	r3, [r7, #12]
 8011654:	687a      	ldr	r2, [r7, #4]
 8011656:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150
 801165a:	68fb      	ldr	r3, [r7, #12]
 801165c:	68ba      	ldr	r2, [r7, #8]
 801165e:	f8c3 2154 	str.w	r2, [r3, #340]	; 0x154
{
    touchgfx::HAL::getInstance()->setDisplayOrientation(touchgfx::ORIENTATION_LANDSCAPE);
 8011662:	f7ff fe0f 	bl	8011284 <_ZN8touchgfx3HAL11getInstanceEv>
 8011666:	4603      	mov	r3, r0
 8011668:	681a      	ldr	r2, [r3, #0]
 801166a:	3208      	adds	r2, #8
 801166c:	6812      	ldr	r2, [r2, #0]
 801166e:	2100      	movs	r1, #0
 8011670:	4618      	mov	r0, r3
 8011672:	4790      	blx	r2
    touchgfx::Texts::setLanguage(GB);
 8011674:	2000      	movs	r0, #0
 8011676:	f001 fe8f 	bl	8013398 <_ZN8touchgfx5Texts11setLanguageEt>
    reinterpret_cast<touchgfx::LCD16bpp&>(touchgfx::HAL::lcd()).enableTextureMapperAll();
 801167a:	f7ff fe0f 	bl	801129c <_ZN8touchgfx3HAL3lcdEv>
 801167e:	4603      	mov	r3, r0
 8011680:	4618      	mov	r0, r3
 8011682:	f00e fbfa 	bl	801fe7a <_ZN8touchgfx8LCD16bpp22enableTextureMapperAllEv>
}
 8011686:	68fb      	ldr	r3, [r7, #12]
 8011688:	4618      	mov	r0, r3
 801168a:	3710      	adds	r7, #16
 801168c:	46bd      	mov	sp, r7
 801168e:	bd80      	pop	{r7, pc}
 8011690:	080290f4 	.word	0x080290f4

08011694 <_ZN8touchgfx15GenericCallbackIvvvEaSERKS1_>:
class GenericCallback<void>
 8011694:	b480      	push	{r7}
 8011696:	b083      	sub	sp, #12
 8011698:	af00      	add	r7, sp, #0
 801169a:	6078      	str	r0, [r7, #4]
 801169c:	6039      	str	r1, [r7, #0]
 801169e:	687b      	ldr	r3, [r7, #4]
 80116a0:	4618      	mov	r0, r3
 80116a2:	370c      	adds	r7, #12
 80116a4:	46bd      	mov	sp, r7
 80116a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116aa:	4770      	bx	lr

080116ac <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>:
 *
 * @note The member function to call must return void. The function can have zero, one, two or
 *       three arguments of any type.
 */
template <class dest_type>
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 80116ac:	b580      	push	{r7, lr}
 80116ae:	b082      	sub	sp, #8
 80116b0:	af00      	add	r7, sp, #0
 80116b2:	6078      	str	r0, [r7, #4]
 80116b4:	6039      	str	r1, [r7, #0]
 80116b6:	687b      	ldr	r3, [r7, #4]
 80116b8:	683a      	ldr	r2, [r7, #0]
 80116ba:	4611      	mov	r1, r2
 80116bc:	4618      	mov	r0, r3
 80116be:	f7ff ffe9 	bl	8011694 <_ZN8touchgfx15GenericCallbackIvvvEaSERKS1_>
 80116c2:	683b      	ldr	r3, [r7, #0]
 80116c4:	685a      	ldr	r2, [r3, #4]
 80116c6:	687b      	ldr	r3, [r7, #4]
 80116c8:	605a      	str	r2, [r3, #4]
 80116ca:	687b      	ldr	r3, [r7, #4]
 80116cc:	683a      	ldr	r2, [r7, #0]
 80116ce:	3308      	adds	r3, #8
 80116d0:	3208      	adds	r2, #8
 80116d2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80116d6:	e883 0003 	stmia.w	r3, {r0, r1}
 80116da:	687b      	ldr	r3, [r7, #4]
 80116dc:	4618      	mov	r0, r3
 80116de:	3708      	adds	r7, #8
 80116e0:	46bd      	mov	sp, r7
 80116e2:	bd80      	pop	{r7, pc}

080116e4 <_ZN23FrontendApplicationBase28gotoscreenScreenNoTransitionEv>:
 */

// screen

void FrontendApplicationBase::gotoscreenScreenNoTransition()
{
 80116e4:	b590      	push	{r4, r7, lr}
 80116e6:	b089      	sub	sp, #36	; 0x24
 80116e8:	af00      	add	r7, sp, #0
 80116ea:	6078      	str	r0, [r7, #4]
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplication::gotoscreenScreenNoTransitionImpl);
 80116ec:	687b      	ldr	r3, [r7, #4]
 80116ee:	f503 74a0 	add.w	r4, r3, #320	; 0x140
 80116f2:	4b10      	ldr	r3, [pc, #64]	; (8011734 <_ZN23FrontendApplicationBase28gotoscreenScreenNoTransitionEv+0x50>)
 80116f4:	61bb      	str	r3, [r7, #24]
 80116f6:	2300      	movs	r3, #0
 80116f8:	61fb      	str	r3, [r7, #28]
 80116fa:	f107 0008 	add.w	r0, r7, #8
 80116fe:	f107 0318 	add.w	r3, r7, #24
 8011702:	cb0c      	ldmia	r3, {r2, r3}
 8011704:	6879      	ldr	r1, [r7, #4]
 8011706:	f000 f8a5 	bl	8011854 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>
 801170a:	f107 0308 	add.w	r3, r7, #8
 801170e:	4619      	mov	r1, r3
 8011710:	4620      	mov	r0, r4
 8011712:	f7ff ffcb 	bl	80116ac <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>
 8011716:	f107 0308 	add.w	r3, r7, #8
 801171a:	4618      	mov	r0, r3
 801171c:	f000 fcf2 	bl	8012104 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
    pendingScreenTransitionCallback = &transitionCallback;
 8011720:	687b      	ldr	r3, [r7, #4]
 8011722:	f503 72a0 	add.w	r2, r3, #320	; 0x140
 8011726:	687b      	ldr	r3, [r7, #4]
 8011728:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
}
 801172c:	bf00      	nop
 801172e:	3724      	adds	r7, #36	; 0x24
 8011730:	46bd      	mov	sp, r7
 8011732:	bd90      	pop	{r4, r7, pc}
 8011734:	08011739 	.word	0x08011739

08011738 <_ZN23FrontendApplicationBase32gotoscreenScreenNoTransitionImplEv>:

void FrontendApplicationBase::gotoscreenScreenNoTransitionImpl()
{
 8011738:	b580      	push	{r7, lr}
 801173a:	b084      	sub	sp, #16
 801173c:	af02      	add	r7, sp, #8
 801173e:	6078      	str	r0, [r7, #4]
    touchgfx::makeTransition<screenView, screenPresenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 8011740:	687b      	ldr	r3, [r7, #4]
 8011742:	f503 719c 	add.w	r1, r3, #312	; 0x138
 8011746:	687b      	ldr	r3, [r7, #4]
 8011748:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 801174c:	461a      	mov	r2, r3
 801174e:	687b      	ldr	r3, [r7, #4]
 8011750:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8011754:	9300      	str	r3, [sp, #0]
 8011756:	4b04      	ldr	r3, [pc, #16]	; (8011768 <_ZN23FrontendApplicationBase32gotoscreenScreenNoTransitionImplEv+0x30>)
 8011758:	4804      	ldr	r0, [pc, #16]	; (801176c <_ZN23FrontendApplicationBase32gotoscreenScreenNoTransitionImplEv+0x34>)
 801175a:	f000 f8ad 	bl	80118b8 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>
}
 801175e:	bf00      	nop
 8011760:	3708      	adds	r7, #8
 8011762:	46bd      	mov	sp, r7
 8011764:	bd80      	pop	{r7, pc}
 8011766:	bf00      	nop
 8011768:	2000584c 	.word	0x2000584c
 801176c:	20005848 	.word	0x20005848

08011770 <_ZN23FrontendApplicationBase36gotoScreen1ScreenSlideTransitionEastEv>:

// Screen1

void FrontendApplicationBase::gotoScreen1ScreenSlideTransitionEast()
{
 8011770:	b590      	push	{r4, r7, lr}
 8011772:	b089      	sub	sp, #36	; 0x24
 8011774:	af00      	add	r7, sp, #0
 8011776:	6078      	str	r0, [r7, #4]
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplication::gotoScreen1ScreenSlideTransitionEastImpl);
 8011778:	687b      	ldr	r3, [r7, #4]
 801177a:	f503 74a0 	add.w	r4, r3, #320	; 0x140
 801177e:	4b10      	ldr	r3, [pc, #64]	; (80117c0 <_ZN23FrontendApplicationBase36gotoScreen1ScreenSlideTransitionEastEv+0x50>)
 8011780:	61bb      	str	r3, [r7, #24]
 8011782:	2300      	movs	r3, #0
 8011784:	61fb      	str	r3, [r7, #28]
 8011786:	f107 0008 	add.w	r0, r7, #8
 801178a:	f107 0318 	add.w	r3, r7, #24
 801178e:	cb0c      	ldmia	r3, {r2, r3}
 8011790:	6879      	ldr	r1, [r7, #4]
 8011792:	f000 f85f 	bl	8011854 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>
 8011796:	f107 0308 	add.w	r3, r7, #8
 801179a:	4619      	mov	r1, r3
 801179c:	4620      	mov	r0, r4
 801179e:	f7ff ff85 	bl	80116ac <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>
 80117a2:	f107 0308 	add.w	r3, r7, #8
 80117a6:	4618      	mov	r0, r3
 80117a8:	f000 fcac 	bl	8012104 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
    pendingScreenTransitionCallback = &transitionCallback;
 80117ac:	687b      	ldr	r3, [r7, #4]
 80117ae:	f503 72a0 	add.w	r2, r3, #320	; 0x140
 80117b2:	687b      	ldr	r3, [r7, #4]
 80117b4:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
}
 80117b8:	bf00      	nop
 80117ba:	3724      	adds	r7, #36	; 0x24
 80117bc:	46bd      	mov	sp, r7
 80117be:	bd90      	pop	{r4, r7, pc}
 80117c0:	080117c5 	.word	0x080117c5

080117c4 <_ZN23FrontendApplicationBase40gotoScreen1ScreenSlideTransitionEastImplEv>:

void FrontendApplicationBase::gotoScreen1ScreenSlideTransitionEastImpl()
{
 80117c4:	b580      	push	{r7, lr}
 80117c6:	b084      	sub	sp, #16
 80117c8:	af02      	add	r7, sp, #8
 80117ca:	6078      	str	r0, [r7, #4]
    touchgfx::makeTransition<Screen1View, Screen1Presenter, touchgfx::SlideTransition<EAST>, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 80117cc:	687b      	ldr	r3, [r7, #4]
 80117ce:	f503 719c 	add.w	r1, r3, #312	; 0x138
 80117d2:	687b      	ldr	r3, [r7, #4]
 80117d4:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 80117d8:	461a      	mov	r2, r3
 80117da:	687b      	ldr	r3, [r7, #4]
 80117dc:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 80117e0:	9300      	str	r3, [sp, #0]
 80117e2:	4b04      	ldr	r3, [pc, #16]	; (80117f4 <_ZN23FrontendApplicationBase40gotoScreen1ScreenSlideTransitionEastImplEv+0x30>)
 80117e4:	4804      	ldr	r0, [pc, #16]	; (80117f8 <_ZN23FrontendApplicationBase40gotoScreen1ScreenSlideTransitionEastImplEv+0x34>)
 80117e6:	f000 f983 	bl	8011af0 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>
}
 80117ea:	bf00      	nop
 80117ec:	3708      	adds	r7, #8
 80117ee:	46bd      	mov	sp, r7
 80117f0:	bd80      	pop	{r7, pc}
 80117f2:	bf00      	nop
 80117f4:	2000584c 	.word	0x2000584c
 80117f8:	20005848 	.word	0x20005848

080117fc <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>:
class GenericCallback<void>
 80117fc:	b480      	push	{r7}
 80117fe:	b083      	sub	sp, #12
 8011800:	af00      	add	r7, sp, #0
 8011802:	6078      	str	r0, [r7, #4]
 8011804:	4a04      	ldr	r2, [pc, #16]	; (8011818 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev+0x1c>)
 8011806:	687b      	ldr	r3, [r7, #4]
 8011808:	601a      	str	r2, [r3, #0]
 801180a:	687b      	ldr	r3, [r7, #4]
 801180c:	4618      	mov	r0, r3
 801180e:	370c      	adds	r7, #12
 8011810:	46bd      	mov	sp, r7
 8011812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011816:	4770      	bx	lr
 8011818:	080291b8 	.word	0x080291b8

0801181c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev>:
{
    /** Initializes a new instance of the Callback class. */
    Callback()
 801181c:	b580      	push	{r7, lr}
 801181e:	b082      	sub	sp, #8
 8011820:	af00      	add	r7, sp, #0
 8011822:	6078      	str	r0, [r7, #4]
        : pobject(0), pmemfun_0(0)
 8011824:	687b      	ldr	r3, [r7, #4]
 8011826:	4618      	mov	r0, r3
 8011828:	f7ff ffe8 	bl	80117fc <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>
 801182c:	4a08      	ldr	r2, [pc, #32]	; (8011850 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev+0x34>)
 801182e:	687b      	ldr	r3, [r7, #4]
 8011830:	601a      	str	r2, [r3, #0]
 8011832:	687b      	ldr	r3, [r7, #4]
 8011834:	2200      	movs	r2, #0
 8011836:	605a      	str	r2, [r3, #4]
 8011838:	687b      	ldr	r3, [r7, #4]
 801183a:	2200      	movs	r2, #0
 801183c:	609a      	str	r2, [r3, #8]
 801183e:	687b      	ldr	r3, [r7, #4]
 8011840:	2200      	movs	r2, #0
 8011842:	60da      	str	r2, [r3, #12]
    {
    }
 8011844:	687b      	ldr	r3, [r7, #4]
 8011846:	4618      	mov	r0, r3
 8011848:	3708      	adds	r7, #8
 801184a:	46bd      	mov	sp, r7
 801184c:	bd80      	pop	{r7, pc}
 801184e:	bf00      	nop
 8011850:	08029138 	.word	0x08029138

08011854 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>:
     *
     * @param [in] pobject   Pointer to the object on which the function should be called.
     * @param [in] pmemfun_0 Address of member function. This is the version where function takes
     *                       zero arguments.
     */
    Callback(dest_type* pobject, void (dest_type::*pmemfun_0)())
 8011854:	b580      	push	{r7, lr}
 8011856:	b084      	sub	sp, #16
 8011858:	af00      	add	r7, sp, #0
 801185a:	60f8      	str	r0, [r7, #12]
 801185c:	60b9      	str	r1, [r7, #8]
 801185e:	4639      	mov	r1, r7
 8011860:	e881 000c 	stmia.w	r1, {r2, r3}
    {
 8011864:	68fb      	ldr	r3, [r7, #12]
 8011866:	4618      	mov	r0, r3
 8011868:	f7ff ffc8 	bl	80117fc <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>
 801186c:	4a08      	ldr	r2, [pc, #32]	; (8011890 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE+0x3c>)
 801186e:	68fb      	ldr	r3, [r7, #12]
 8011870:	601a      	str	r2, [r3, #0]
        this->pobject = pobject;
 8011872:	68fb      	ldr	r3, [r7, #12]
 8011874:	68ba      	ldr	r2, [r7, #8]
 8011876:	605a      	str	r2, [r3, #4]
        this->pmemfun_0 = pmemfun_0;
 8011878:	68fb      	ldr	r3, [r7, #12]
 801187a:	3308      	adds	r3, #8
 801187c:	463a      	mov	r2, r7
 801187e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011882:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 8011886:	68fb      	ldr	r3, [r7, #12]
 8011888:	4618      	mov	r0, r3
 801188a:	3710      	adds	r7, #16
 801188c:	46bd      	mov	sp, r7
 801188e:	bd80      	pop	{r7, pc}
 8011890:	08029138 	.word	0x08029138

08011894 <_ZN8touchgfx12NoTransitionC1Ev>:
class NoTransition : public Transition
 8011894:	b580      	push	{r7, lr}
 8011896:	b082      	sub	sp, #8
 8011898:	af00      	add	r7, sp, #0
 801189a:	6078      	str	r0, [r7, #4]
 801189c:	687b      	ldr	r3, [r7, #4]
 801189e:	4618      	mov	r0, r3
 80118a0:	f7ff fd18 	bl	80112d4 <_ZN8touchgfx10TransitionC1Ev>
 80118a4:	4a03      	ldr	r2, [pc, #12]	; (80118b4 <_ZN8touchgfx12NoTransitionC1Ev+0x20>)
 80118a6:	687b      	ldr	r3, [r7, #4]
 80118a8:	601a      	str	r2, [r3, #0]
 80118aa:	687b      	ldr	r3, [r7, #4]
 80118ac:	4618      	mov	r0, r3
 80118ae:	3708      	adds	r7, #8
 80118b0:	46bd      	mov	sp, r7
 80118b2:	bd80      	pop	{r7, pc}
 80118b4:	080290d0 	.word	0x080290d0

080118b8 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>:
 *
 * @return Pointer to the new Presenter of the requested type. Incidentally it will be the same
 *         value as the old presenter due to memory reuse.
 */
template <class ScreenType, class PresenterType, class TransType, class ModelType>
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
 80118b8:	b590      	push	{r4, r7, lr}
 80118ba:	b08f      	sub	sp, #60	; 0x3c
 80118bc:	af00      	add	r7, sp, #0
 80118be:	60f8      	str	r0, [r7, #12]
 80118c0:	60b9      	str	r1, [r7, #8]
 80118c2:	607a      	str	r2, [r7, #4]
 80118c4:	603b      	str	r3, [r7, #0]
{
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 80118c6:	687b      	ldr	r3, [r7, #4]
 80118c8:	689a      	ldr	r2, [r3, #8]
 80118ca:	687b      	ldr	r3, [r7, #4]
 80118cc:	689b      	ldr	r3, [r3, #8]
 80118ce:	681b      	ldr	r3, [r3, #0]
 80118d0:	3320      	adds	r3, #32
 80118d2:	681b      	ldr	r3, [r3, #0]
 80118d4:	4610      	mov	r0, r2
 80118d6:	4798      	blx	r3
 80118d8:	4603      	mov	r3, r0
 80118da:	f5b3 7ff4 	cmp.w	r3, #488	; 0x1e8
 80118de:	d205      	bcs.n	80118ec <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x34>
 80118e0:	4b7e      	ldr	r3, [pc, #504]	; (8011adc <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x224>)
 80118e2:	4a7f      	ldr	r2, [pc, #508]	; (8011ae0 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x228>)
 80118e4:	21a7      	movs	r1, #167	; 0xa7
 80118e6:	487f      	ldr	r0, [pc, #508]	; (8011ae4 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x22c>)
 80118e8:	f015 fc1e 	bl	8027128 <__assert_func>
 80118ec:	bf00      	nop
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 80118ee:	687b      	ldr	r3, [r7, #4]
 80118f0:	685a      	ldr	r2, [r3, #4]
 80118f2:	687b      	ldr	r3, [r7, #4]
 80118f4:	685b      	ldr	r3, [r3, #4]
 80118f6:	681b      	ldr	r3, [r3, #0]
 80118f8:	3320      	adds	r3, #32
 80118fa:	681b      	ldr	r3, [r3, #0]
 80118fc:	4610      	mov	r0, r2
 80118fe:	4798      	blx	r3
 8011900:	4603      	mov	r3, r0
 8011902:	2b0f      	cmp	r3, #15
 8011904:	d805      	bhi.n	8011912 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x5a>
 8011906:	4b78      	ldr	r3, [pc, #480]	; (8011ae8 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x230>)
 8011908:	4a75      	ldr	r2, [pc, #468]	; (8011ae0 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x228>)
 801190a:	21a8      	movs	r1, #168	; 0xa8
 801190c:	4875      	ldr	r0, [pc, #468]	; (8011ae4 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x22c>)
 801190e:	f015 fc0b 	bl	8027128 <__assert_func>
 8011912:	bf00      	nop
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 8011914:	687b      	ldr	r3, [r7, #4]
 8011916:	68da      	ldr	r2, [r3, #12]
 8011918:	687b      	ldr	r3, [r7, #4]
 801191a:	68db      	ldr	r3, [r3, #12]
 801191c:	681b      	ldr	r3, [r3, #0]
 801191e:	3320      	adds	r3, #32
 8011920:	681b      	ldr	r3, [r3, #0]
 8011922:	4610      	mov	r0, r2
 8011924:	4798      	blx	r3
 8011926:	4603      	mov	r3, r0
 8011928:	2b0b      	cmp	r3, #11
 801192a:	d805      	bhi.n	8011938 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x80>
 801192c:	4b6f      	ldr	r3, [pc, #444]	; (8011aec <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x234>)
 801192e:	4a6c      	ldr	r2, [pc, #432]	; (8011ae0 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x228>)
 8011930:	21a9      	movs	r1, #169	; 0xa9
 8011932:	486c      	ldr	r0, [pc, #432]	; (8011ae4 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x22c>)
 8011934:	f015 fbf8 	bl	8027128 <__assert_func>
 8011938:	bf00      	nop
 801193a:	68fb      	ldr	r3, [r7, #12]
 801193c:	62bb      	str	r3, [r7, #40]	; 0x28
 801193e:	68bb      	ldr	r3, [r7, #8]
 8011940:	627b      	str	r3, [r7, #36]	; 0x24
 8011942:	683b      	ldr	r3, [r7, #0]
 8011944:	623b      	str	r3, [r7, #32]
    Application::getInstance()->clearAllTimerWidgets();
 8011946:	f007 f90b 	bl	8018b60 <_ZN8touchgfx11Application11getInstanceEv>
 801194a:	4603      	mov	r3, r0
 801194c:	4618      	mov	r0, r3
 801194e:	f007 f90d 	bl	8018b6c <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
    if (*currentTrans)
 8011952:	6a3b      	ldr	r3, [r7, #32]
 8011954:	681b      	ldr	r3, [r3, #0]
 8011956:	2b00      	cmp	r3, #0
 8011958:	d008      	beq.n	801196c <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xb4>
        (*currentTrans)->tearDown();
 801195a:	6a3b      	ldr	r3, [r7, #32]
 801195c:	681a      	ldr	r2, [r3, #0]
 801195e:	6a3b      	ldr	r3, [r7, #32]
 8011960:	681b      	ldr	r3, [r3, #0]
 8011962:	681b      	ldr	r3, [r3, #0]
 8011964:	330c      	adds	r3, #12
 8011966:	681b      	ldr	r3, [r3, #0]
 8011968:	4610      	mov	r0, r2
 801196a:	4798      	blx	r3
    if (*currentTrans)
 801196c:	6a3b      	ldr	r3, [r7, #32]
 801196e:	681b      	ldr	r3, [r3, #0]
 8011970:	2b00      	cmp	r3, #0
 8011972:	d007      	beq.n	8011984 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xcc>
        (*currentTrans)->~Transition();
 8011974:	6a3b      	ldr	r3, [r7, #32]
 8011976:	681a      	ldr	r2, [r3, #0]
 8011978:	6a3b      	ldr	r3, [r7, #32]
 801197a:	681b      	ldr	r3, [r3, #0]
 801197c:	681b      	ldr	r3, [r3, #0]
 801197e:	681b      	ldr	r3, [r3, #0]
 8011980:	4610      	mov	r0, r2
 8011982:	4798      	blx	r3
    if (*currentScreen)
 8011984:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011986:	681b      	ldr	r3, [r3, #0]
 8011988:	2b00      	cmp	r3, #0
 801198a:	d008      	beq.n	801199e <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xe6>
        (*currentScreen)->tearDownScreen();
 801198c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801198e:	681a      	ldr	r2, [r3, #0]
 8011990:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011992:	681b      	ldr	r3, [r3, #0]
 8011994:	681b      	ldr	r3, [r3, #0]
 8011996:	3314      	adds	r3, #20
 8011998:	681b      	ldr	r3, [r3, #0]
 801199a:	4610      	mov	r0, r2
 801199c:	4798      	blx	r3
    if (*currentPresenter)
 801199e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80119a0:	681b      	ldr	r3, [r3, #0]
 80119a2:	2b00      	cmp	r3, #0
 80119a4:	d008      	beq.n	80119b8 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x100>
        (*currentPresenter)->deactivate();
 80119a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80119a8:	681a      	ldr	r2, [r3, #0]
 80119aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80119ac:	681b      	ldr	r3, [r3, #0]
 80119ae:	681b      	ldr	r3, [r3, #0]
 80119b0:	3304      	adds	r3, #4
 80119b2:	681b      	ldr	r3, [r3, #0]
 80119b4:	4610      	mov	r0, r2
 80119b6:	4798      	blx	r3
    if (*currentScreen)
 80119b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80119ba:	681b      	ldr	r3, [r3, #0]
 80119bc:	2b00      	cmp	r3, #0
 80119be:	d007      	beq.n	80119d0 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x118>
        (*currentScreen)->~Screen();
 80119c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80119c2:	681a      	ldr	r2, [r3, #0]
 80119c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80119c6:	681b      	ldr	r3, [r3, #0]
 80119c8:	681b      	ldr	r3, [r3, #0]
 80119ca:	681b      	ldr	r3, [r3, #0]
 80119cc:	4610      	mov	r0, r2
 80119ce:	4798      	blx	r3
    if (*currentPresenter)
 80119d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80119d2:	681b      	ldr	r3, [r3, #0]
 80119d4:	2b00      	cmp	r3, #0
 80119d6:	d008      	beq.n	80119ea <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x132>
        (*currentPresenter)->~Presenter();
 80119d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80119da:	681a      	ldr	r2, [r3, #0]
 80119dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80119de:	681b      	ldr	r3, [r3, #0]
 80119e0:	681b      	ldr	r3, [r3, #0]
 80119e2:	3308      	adds	r3, #8
 80119e4:	681b      	ldr	r3, [r3, #0]
 80119e6:	4610      	mov	r0, r2
 80119e8:	4798      	blx	r3
}
 80119ea:	bf00      	nop

    prepareTransition(currentScreen, currentPresenter, currentTrans);

    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
 80119ec:	687b      	ldr	r3, [r7, #4]
 80119ee:	68db      	ldr	r3, [r3, #12]
 80119f0:	2100      	movs	r1, #0
 80119f2:	4618      	mov	r0, r3
 80119f4:	f000 f998 	bl	8011d28 <_ZN8touchgfx17AbstractPartition2atINS_12NoTransitionEEERT_t>
 80119f8:	4603      	mov	r3, r0
 80119fa:	4619      	mov	r1, r3
 80119fc:	200c      	movs	r0, #12
 80119fe:	f7ff fa27 	bl	8010e50 <_ZnwjPv>
 8011a02:	4604      	mov	r4, r0
 8011a04:	4620      	mov	r0, r4
 8011a06:	f7ff ff45 	bl	8011894 <_ZN8touchgfx12NoTransitionC1Ev>
 8011a0a:	637c      	str	r4, [r7, #52]	; 0x34
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
 8011a0c:	687b      	ldr	r3, [r7, #4]
 8011a0e:	689b      	ldr	r3, [r3, #8]
 8011a10:	2100      	movs	r1, #0
 8011a12:	4618      	mov	r0, r3
 8011a14:	f000 f99b 	bl	8011d4e <_ZN8touchgfx17AbstractPartition2atI10screenViewEERT_t>
 8011a18:	4603      	mov	r3, r0
 8011a1a:	4619      	mov	r1, r3
 8011a1c:	f44f 70f4 	mov.w	r0, #488	; 0x1e8
 8011a20:	f7ff fa16 	bl	8010e50 <_ZnwjPv>
 8011a24:	4604      	mov	r4, r0
 8011a26:	4620      	mov	r0, r4
 8011a28:	f001 ff7e 	bl	8013928 <_ZN10screenViewC1Ev>
 8011a2c:	633c      	str	r4, [r7, #48]	; 0x30
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
 8011a2e:	687b      	ldr	r3, [r7, #4]
 8011a30:	685b      	ldr	r3, [r3, #4]
 8011a32:	2100      	movs	r1, #0
 8011a34:	4618      	mov	r0, r3
 8011a36:	f000 f99d 	bl	8011d74 <_ZN8touchgfx17AbstractPartition2atI15screenPresenterEERT_t>
 8011a3a:	4603      	mov	r3, r0
 8011a3c:	4619      	mov	r1, r3
 8011a3e:	2010      	movs	r0, #16
 8011a40:	f7ff fa06 	bl	8010e50 <_ZnwjPv>
 8011a44:	4604      	mov	r4, r0
 8011a46:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8011a48:	4620      	mov	r0, r4
 8011a4a:	f001 ff15 	bl	8013878 <_ZN15screenPresenterC1ER10screenView>
 8011a4e:	62fc      	str	r4, [r7, #44]	; 0x2c
    *currentTrans = newTransition;
 8011a50:	683b      	ldr	r3, [r7, #0]
 8011a52:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011a54:	601a      	str	r2, [r3, #0]
    *currentPresenter = newPresenter;
 8011a56:	68bb      	ldr	r3, [r7, #8]
 8011a58:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011a5a:	601a      	str	r2, [r3, #0]
    *currentScreen = newScreen;
 8011a5c:	68fb      	ldr	r3, [r7, #12]
 8011a5e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011a60:	601a      	str	r2, [r3, #0]
    model->bind(newPresenter);
 8011a62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011a64:	2b00      	cmp	r3, #0
 8011a66:	d002      	beq.n	8011a6e <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1b6>
 8011a68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011a6a:	3304      	adds	r3, #4
 8011a6c:	e000      	b.n	8011a70 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1b8>
 8011a6e:	2300      	movs	r3, #0
 8011a70:	4619      	mov	r1, r3
 8011a72:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8011a74:	f7ff fd1e 	bl	80114b4 <_ZN5Model4bindEP13ModelListener>
    newPresenter->bind(model);
 8011a78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011a7a:	3304      	adds	r3, #4
 8011a7c:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8011a7e:	4618      	mov	r0, r3
 8011a80:	f7ff fda3 	bl	80115ca <_ZN13ModelListener4bindEP5Model>
    newScreen->bind(*newPresenter);
 8011a84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011a86:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8011a88:	4618      	mov	r0, r3
 8011a8a:	f000 f986 	bl	8011d9a <_ZN8touchgfx4ViewI15screenPresenterE4bindERS1_>
 8011a8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011a90:	61fb      	str	r3, [r7, #28]
 8011a92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011a94:	61bb      	str	r3, [r7, #24]
 8011a96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011a98:	617b      	str	r3, [r7, #20]
    newScreen->setupScreen();
 8011a9a:	69fb      	ldr	r3, [r7, #28]
 8011a9c:	681b      	ldr	r3, [r3, #0]
 8011a9e:	330c      	adds	r3, #12
 8011aa0:	681b      	ldr	r3, [r3, #0]
 8011aa2:	69f8      	ldr	r0, [r7, #28]
 8011aa4:	4798      	blx	r3
    newPresenter->activate();
 8011aa6:	69bb      	ldr	r3, [r7, #24]
 8011aa8:	681b      	ldr	r3, [r3, #0]
 8011aaa:	681b      	ldr	r3, [r3, #0]
 8011aac:	69b8      	ldr	r0, [r7, #24]
 8011aae:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 8011ab0:	6979      	ldr	r1, [r7, #20]
 8011ab2:	69f8      	ldr	r0, [r7, #28]
 8011ab4:	f008 fc67 	bl	801a386 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 8011ab8:	697b      	ldr	r3, [r7, #20]
 8011aba:	681b      	ldr	r3, [r3, #0]
 8011abc:	3310      	adds	r3, #16
 8011abe:	681b      	ldr	r3, [r3, #0]
 8011ac0:	6978      	ldr	r0, [r7, #20]
 8011ac2:	4798      	blx	r3
    newTransition->invalidate();
 8011ac4:	697b      	ldr	r3, [r7, #20]
 8011ac6:	681b      	ldr	r3, [r3, #0]
 8011ac8:	3314      	adds	r3, #20
 8011aca:	681b      	ldr	r3, [r3, #0]
 8011acc:	6978      	ldr	r0, [r7, #20]
 8011ace:	4798      	blx	r3
}
 8011ad0:	bf00      	nop

    finalizeTransition((Screen*)newScreen, (Presenter*)newPresenter, (Transition*)newTransition);

    return newPresenter;
 8011ad2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8011ad4:	4618      	mov	r0, r3
 8011ad6:	373c      	adds	r7, #60	; 0x3c
 8011ad8:	46bd      	mov	sp, r7
 8011ada:	bd90      	pop	{r4, r7, pc}
 8011adc:	080283c0 	.word	0x080283c0
 8011ae0:	08028450 	.word	0x08028450
 8011ae4:	08028554 	.word	0x08028554
 8011ae8:	08028598 	.word	0x08028598
 8011aec:	0802863c 	.word	0x0802863c

08011af0 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>:
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
 8011af0:	b590      	push	{r4, r7, lr}
 8011af2:	b08f      	sub	sp, #60	; 0x3c
 8011af4:	af00      	add	r7, sp, #0
 8011af6:	60f8      	str	r0, [r7, #12]
 8011af8:	60b9      	str	r1, [r7, #8]
 8011afa:	607a      	str	r2, [r7, #4]
 8011afc:	603b      	str	r3, [r7, #0]
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 8011afe:	687b      	ldr	r3, [r7, #4]
 8011b00:	689a      	ldr	r2, [r3, #8]
 8011b02:	687b      	ldr	r3, [r7, #4]
 8011b04:	689b      	ldr	r3, [r3, #8]
 8011b06:	681b      	ldr	r3, [r3, #0]
 8011b08:	3320      	adds	r3, #32
 8011b0a:	681b      	ldr	r3, [r3, #0]
 8011b0c:	4610      	mov	r0, r2
 8011b0e:	4798      	blx	r3
 8011b10:	4603      	mov	r3, r0
 8011b12:	2ba7      	cmp	r3, #167	; 0xa7
 8011b14:	d805      	bhi.n	8011b22 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x32>
 8011b16:	4b7f      	ldr	r3, [pc, #508]	; (8011d14 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x224>)
 8011b18:	4a7f      	ldr	r2, [pc, #508]	; (8011d18 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x228>)
 8011b1a:	21a7      	movs	r1, #167	; 0xa7
 8011b1c:	487f      	ldr	r0, [pc, #508]	; (8011d1c <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x22c>)
 8011b1e:	f015 fb03 	bl	8027128 <__assert_func>
 8011b22:	bf00      	nop
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 8011b24:	687b      	ldr	r3, [r7, #4]
 8011b26:	685a      	ldr	r2, [r3, #4]
 8011b28:	687b      	ldr	r3, [r7, #4]
 8011b2a:	685b      	ldr	r3, [r3, #4]
 8011b2c:	681b      	ldr	r3, [r3, #0]
 8011b2e:	3320      	adds	r3, #32
 8011b30:	681b      	ldr	r3, [r3, #0]
 8011b32:	4610      	mov	r0, r2
 8011b34:	4798      	blx	r3
 8011b36:	4603      	mov	r3, r0
 8011b38:	2b0f      	cmp	r3, #15
 8011b3a:	d805      	bhi.n	8011b48 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x58>
 8011b3c:	4b78      	ldr	r3, [pc, #480]	; (8011d20 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x230>)
 8011b3e:	4a76      	ldr	r2, [pc, #472]	; (8011d18 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x228>)
 8011b40:	21a8      	movs	r1, #168	; 0xa8
 8011b42:	4876      	ldr	r0, [pc, #472]	; (8011d1c <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x22c>)
 8011b44:	f015 faf0 	bl	8027128 <__assert_func>
 8011b48:	bf00      	nop
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 8011b4a:	687b      	ldr	r3, [r7, #4]
 8011b4c:	68da      	ldr	r2, [r3, #12]
 8011b4e:	687b      	ldr	r3, [r7, #4]
 8011b50:	68db      	ldr	r3, [r3, #12]
 8011b52:	681b      	ldr	r3, [r3, #0]
 8011b54:	3320      	adds	r3, #32
 8011b56:	681b      	ldr	r3, [r3, #0]
 8011b58:	4610      	mov	r0, r2
 8011b5a:	4798      	blx	r3
 8011b5c:	4603      	mov	r3, r0
 8011b5e:	2b53      	cmp	r3, #83	; 0x53
 8011b60:	d805      	bhi.n	8011b6e <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x7e>
 8011b62:	4b70      	ldr	r3, [pc, #448]	; (8011d24 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x234>)
 8011b64:	4a6c      	ldr	r2, [pc, #432]	; (8011d18 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x228>)
 8011b66:	21a9      	movs	r1, #169	; 0xa9
 8011b68:	486c      	ldr	r0, [pc, #432]	; (8011d1c <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x22c>)
 8011b6a:	f015 fadd 	bl	8027128 <__assert_func>
 8011b6e:	bf00      	nop
 8011b70:	68fb      	ldr	r3, [r7, #12]
 8011b72:	62bb      	str	r3, [r7, #40]	; 0x28
 8011b74:	68bb      	ldr	r3, [r7, #8]
 8011b76:	627b      	str	r3, [r7, #36]	; 0x24
 8011b78:	683b      	ldr	r3, [r7, #0]
 8011b7a:	623b      	str	r3, [r7, #32]
    Application::getInstance()->clearAllTimerWidgets();
 8011b7c:	f006 fff0 	bl	8018b60 <_ZN8touchgfx11Application11getInstanceEv>
 8011b80:	4603      	mov	r3, r0
 8011b82:	4618      	mov	r0, r3
 8011b84:	f006 fff2 	bl	8018b6c <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
    if (*currentTrans)
 8011b88:	6a3b      	ldr	r3, [r7, #32]
 8011b8a:	681b      	ldr	r3, [r3, #0]
 8011b8c:	2b00      	cmp	r3, #0
 8011b8e:	d008      	beq.n	8011ba2 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xb2>
        (*currentTrans)->tearDown();
 8011b90:	6a3b      	ldr	r3, [r7, #32]
 8011b92:	681a      	ldr	r2, [r3, #0]
 8011b94:	6a3b      	ldr	r3, [r7, #32]
 8011b96:	681b      	ldr	r3, [r3, #0]
 8011b98:	681b      	ldr	r3, [r3, #0]
 8011b9a:	330c      	adds	r3, #12
 8011b9c:	681b      	ldr	r3, [r3, #0]
 8011b9e:	4610      	mov	r0, r2
 8011ba0:	4798      	blx	r3
    if (*currentTrans)
 8011ba2:	6a3b      	ldr	r3, [r7, #32]
 8011ba4:	681b      	ldr	r3, [r3, #0]
 8011ba6:	2b00      	cmp	r3, #0
 8011ba8:	d007      	beq.n	8011bba <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xca>
        (*currentTrans)->~Transition();
 8011baa:	6a3b      	ldr	r3, [r7, #32]
 8011bac:	681a      	ldr	r2, [r3, #0]
 8011bae:	6a3b      	ldr	r3, [r7, #32]
 8011bb0:	681b      	ldr	r3, [r3, #0]
 8011bb2:	681b      	ldr	r3, [r3, #0]
 8011bb4:	681b      	ldr	r3, [r3, #0]
 8011bb6:	4610      	mov	r0, r2
 8011bb8:	4798      	blx	r3
    if (*currentScreen)
 8011bba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011bbc:	681b      	ldr	r3, [r3, #0]
 8011bbe:	2b00      	cmp	r3, #0
 8011bc0:	d008      	beq.n	8011bd4 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xe4>
        (*currentScreen)->tearDownScreen();
 8011bc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011bc4:	681a      	ldr	r2, [r3, #0]
 8011bc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011bc8:	681b      	ldr	r3, [r3, #0]
 8011bca:	681b      	ldr	r3, [r3, #0]
 8011bcc:	3314      	adds	r3, #20
 8011bce:	681b      	ldr	r3, [r3, #0]
 8011bd0:	4610      	mov	r0, r2
 8011bd2:	4798      	blx	r3
    if (*currentPresenter)
 8011bd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011bd6:	681b      	ldr	r3, [r3, #0]
 8011bd8:	2b00      	cmp	r3, #0
 8011bda:	d008      	beq.n	8011bee <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xfe>
        (*currentPresenter)->deactivate();
 8011bdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011bde:	681a      	ldr	r2, [r3, #0]
 8011be0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011be2:	681b      	ldr	r3, [r3, #0]
 8011be4:	681b      	ldr	r3, [r3, #0]
 8011be6:	3304      	adds	r3, #4
 8011be8:	681b      	ldr	r3, [r3, #0]
 8011bea:	4610      	mov	r0, r2
 8011bec:	4798      	blx	r3
    if (*currentScreen)
 8011bee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011bf0:	681b      	ldr	r3, [r3, #0]
 8011bf2:	2b00      	cmp	r3, #0
 8011bf4:	d007      	beq.n	8011c06 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x116>
        (*currentScreen)->~Screen();
 8011bf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011bf8:	681a      	ldr	r2, [r3, #0]
 8011bfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011bfc:	681b      	ldr	r3, [r3, #0]
 8011bfe:	681b      	ldr	r3, [r3, #0]
 8011c00:	681b      	ldr	r3, [r3, #0]
 8011c02:	4610      	mov	r0, r2
 8011c04:	4798      	blx	r3
    if (*currentPresenter)
 8011c06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011c08:	681b      	ldr	r3, [r3, #0]
 8011c0a:	2b00      	cmp	r3, #0
 8011c0c:	d008      	beq.n	8011c20 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x130>
        (*currentPresenter)->~Presenter();
 8011c0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011c10:	681a      	ldr	r2, [r3, #0]
 8011c12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011c14:	681b      	ldr	r3, [r3, #0]
 8011c16:	681b      	ldr	r3, [r3, #0]
 8011c18:	3308      	adds	r3, #8
 8011c1a:	681b      	ldr	r3, [r3, #0]
 8011c1c:	4610      	mov	r0, r2
 8011c1e:	4798      	blx	r3
}
 8011c20:	bf00      	nop
    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
 8011c22:	687b      	ldr	r3, [r7, #4]
 8011c24:	68db      	ldr	r3, [r3, #12]
 8011c26:	2100      	movs	r1, #0
 8011c28:	4618      	mov	r0, r3
 8011c2a:	f000 f8c4 	bl	8011db6 <_ZN8touchgfx17AbstractPartition2atINS_15SlideTransitionILNS_9DirectionE2EEEEERT_t>
 8011c2e:	4603      	mov	r3, r0
 8011c30:	4619      	mov	r1, r3
 8011c32:	2054      	movs	r0, #84	; 0x54
 8011c34:	f7ff f90c 	bl	8010e50 <_ZnwjPv>
 8011c38:	4604      	mov	r4, r0
 8011c3a:	2114      	movs	r1, #20
 8011c3c:	4620      	mov	r0, r4
 8011c3e:	f000 f911 	bl	8011e64 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh>
 8011c42:	637c      	str	r4, [r7, #52]	; 0x34
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
 8011c44:	687b      	ldr	r3, [r7, #4]
 8011c46:	689b      	ldr	r3, [r3, #8]
 8011c48:	2100      	movs	r1, #0
 8011c4a:	4618      	mov	r0, r3
 8011c4c:	f000 f96e 	bl	8011f2c <_ZN8touchgfx17AbstractPartition2atI11Screen1ViewEERT_t>
 8011c50:	4603      	mov	r3, r0
 8011c52:	4619      	mov	r1, r3
 8011c54:	20a8      	movs	r0, #168	; 0xa8
 8011c56:	f7ff f8fb 	bl	8010e50 <_ZnwjPv>
 8011c5a:	4604      	mov	r4, r0
 8011c5c:	4620      	mov	r0, r4
 8011c5e:	f001 fdad 	bl	80137bc <_ZN11Screen1ViewC1Ev>
 8011c62:	633c      	str	r4, [r7, #48]	; 0x30
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
 8011c64:	687b      	ldr	r3, [r7, #4]
 8011c66:	685b      	ldr	r3, [r3, #4]
 8011c68:	2100      	movs	r1, #0
 8011c6a:	4618      	mov	r0, r3
 8011c6c:	f000 f971 	bl	8011f52 <_ZN8touchgfx17AbstractPartition2atI16Screen1PresenterEERT_t>
 8011c70:	4603      	mov	r3, r0
 8011c72:	4619      	mov	r1, r3
 8011c74:	2010      	movs	r0, #16
 8011c76:	f7ff f8eb 	bl	8010e50 <_ZnwjPv>
 8011c7a:	4604      	mov	r4, r0
 8011c7c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8011c7e:	4620      	mov	r0, r4
 8011c80:	f001 fd46 	bl	8013710 <_ZN16Screen1PresenterC1ER11Screen1View>
 8011c84:	62fc      	str	r4, [r7, #44]	; 0x2c
    *currentTrans = newTransition;
 8011c86:	683b      	ldr	r3, [r7, #0]
 8011c88:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011c8a:	601a      	str	r2, [r3, #0]
    *currentPresenter = newPresenter;
 8011c8c:	68bb      	ldr	r3, [r7, #8]
 8011c8e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011c90:	601a      	str	r2, [r3, #0]
    *currentScreen = newScreen;
 8011c92:	68fb      	ldr	r3, [r7, #12]
 8011c94:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011c96:	601a      	str	r2, [r3, #0]
    model->bind(newPresenter);
 8011c98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011c9a:	2b00      	cmp	r3, #0
 8011c9c:	d002      	beq.n	8011ca4 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1b4>
 8011c9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011ca0:	3304      	adds	r3, #4
 8011ca2:	e000      	b.n	8011ca6 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1b6>
 8011ca4:	2300      	movs	r3, #0
 8011ca6:	4619      	mov	r1, r3
 8011ca8:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8011caa:	f7ff fc03 	bl	80114b4 <_ZN5Model4bindEP13ModelListener>
    newPresenter->bind(model);
 8011cae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011cb0:	3304      	adds	r3, #4
 8011cb2:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8011cb4:	4618      	mov	r0, r3
 8011cb6:	f7ff fc88 	bl	80115ca <_ZN13ModelListener4bindEP5Model>
    newScreen->bind(*newPresenter);
 8011cba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011cbc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8011cbe:	4618      	mov	r0, r3
 8011cc0:	f000 f95a 	bl	8011f78 <_ZN8touchgfx4ViewI16Screen1PresenterE4bindERS1_>
 8011cc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011cc6:	61fb      	str	r3, [r7, #28]
 8011cc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011cca:	61bb      	str	r3, [r7, #24]
 8011ccc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011cce:	617b      	str	r3, [r7, #20]
    newScreen->setupScreen();
 8011cd0:	69fb      	ldr	r3, [r7, #28]
 8011cd2:	681b      	ldr	r3, [r3, #0]
 8011cd4:	330c      	adds	r3, #12
 8011cd6:	681b      	ldr	r3, [r3, #0]
 8011cd8:	69f8      	ldr	r0, [r7, #28]
 8011cda:	4798      	blx	r3
    newPresenter->activate();
 8011cdc:	69bb      	ldr	r3, [r7, #24]
 8011cde:	681b      	ldr	r3, [r3, #0]
 8011ce0:	681b      	ldr	r3, [r3, #0]
 8011ce2:	69b8      	ldr	r0, [r7, #24]
 8011ce4:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 8011ce6:	6979      	ldr	r1, [r7, #20]
 8011ce8:	69f8      	ldr	r0, [r7, #28]
 8011cea:	f008 fb4c 	bl	801a386 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 8011cee:	697b      	ldr	r3, [r7, #20]
 8011cf0:	681b      	ldr	r3, [r3, #0]
 8011cf2:	3310      	adds	r3, #16
 8011cf4:	681b      	ldr	r3, [r3, #0]
 8011cf6:	6978      	ldr	r0, [r7, #20]
 8011cf8:	4798      	blx	r3
    newTransition->invalidate();
 8011cfa:	697b      	ldr	r3, [r7, #20]
 8011cfc:	681b      	ldr	r3, [r3, #0]
 8011cfe:	3314      	adds	r3, #20
 8011d00:	681b      	ldr	r3, [r3, #0]
 8011d02:	6978      	ldr	r0, [r7, #20]
 8011d04:	4798      	blx	r3
}
 8011d06:	bf00      	nop
    return newPresenter;
 8011d08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8011d0a:	4618      	mov	r0, r3
 8011d0c:	373c      	adds	r7, #60	; 0x3c
 8011d0e:	46bd      	mov	sp, r7
 8011d10:	bd90      	pop	{r4, r7, pc}
 8011d12:	bf00      	nop
 8011d14:	080283c0 	.word	0x080283c0
 8011d18:	080286e0 	.word	0x080286e0
 8011d1c:	08028554 	.word	0x08028554
 8011d20:	08028598 	.word	0x08028598
 8011d24:	0802863c 	.word	0x0802863c

08011d28 <_ZN8touchgfx17AbstractPartition2atINS_12NoTransitionEEERT_t>:
     * @param  index The index into the Partition storage where the returned object is located.
     *
     * @return A typed reference to the object at the specified index.
     */
    template <typename T>
    T& at(const uint16_t index)
 8011d28:	b580      	push	{r7, lr}
 8011d2a:	b082      	sub	sp, #8
 8011d2c:	af00      	add	r7, sp, #0
 8011d2e:	6078      	str	r0, [r7, #4]
 8011d30:	460b      	mov	r3, r1
 8011d32:	807b      	strh	r3, [r7, #2]
    {
        return *static_cast<T*>(element(index));
 8011d34:	687b      	ldr	r3, [r7, #4]
 8011d36:	681b      	ldr	r3, [r3, #0]
 8011d38:	3324      	adds	r3, #36	; 0x24
 8011d3a:	681b      	ldr	r3, [r3, #0]
 8011d3c:	887a      	ldrh	r2, [r7, #2]
 8011d3e:	4611      	mov	r1, r2
 8011d40:	6878      	ldr	r0, [r7, #4]
 8011d42:	4798      	blx	r3
 8011d44:	4603      	mov	r3, r0
    }
 8011d46:	4618      	mov	r0, r3
 8011d48:	3708      	adds	r7, #8
 8011d4a:	46bd      	mov	sp, r7
 8011d4c:	bd80      	pop	{r7, pc}

08011d4e <_ZN8touchgfx17AbstractPartition2atI10screenViewEERT_t>:
    T& at(const uint16_t index)
 8011d4e:	b580      	push	{r7, lr}
 8011d50:	b082      	sub	sp, #8
 8011d52:	af00      	add	r7, sp, #0
 8011d54:	6078      	str	r0, [r7, #4]
 8011d56:	460b      	mov	r3, r1
 8011d58:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 8011d5a:	687b      	ldr	r3, [r7, #4]
 8011d5c:	681b      	ldr	r3, [r3, #0]
 8011d5e:	3324      	adds	r3, #36	; 0x24
 8011d60:	681b      	ldr	r3, [r3, #0]
 8011d62:	887a      	ldrh	r2, [r7, #2]
 8011d64:	4611      	mov	r1, r2
 8011d66:	6878      	ldr	r0, [r7, #4]
 8011d68:	4798      	blx	r3
 8011d6a:	4603      	mov	r3, r0
    }
 8011d6c:	4618      	mov	r0, r3
 8011d6e:	3708      	adds	r7, #8
 8011d70:	46bd      	mov	sp, r7
 8011d72:	bd80      	pop	{r7, pc}

08011d74 <_ZN8touchgfx17AbstractPartition2atI15screenPresenterEERT_t>:
    T& at(const uint16_t index)
 8011d74:	b580      	push	{r7, lr}
 8011d76:	b082      	sub	sp, #8
 8011d78:	af00      	add	r7, sp, #0
 8011d7a:	6078      	str	r0, [r7, #4]
 8011d7c:	460b      	mov	r3, r1
 8011d7e:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 8011d80:	687b      	ldr	r3, [r7, #4]
 8011d82:	681b      	ldr	r3, [r3, #0]
 8011d84:	3324      	adds	r3, #36	; 0x24
 8011d86:	681b      	ldr	r3, [r3, #0]
 8011d88:	887a      	ldrh	r2, [r7, #2]
 8011d8a:	4611      	mov	r1, r2
 8011d8c:	6878      	ldr	r0, [r7, #4]
 8011d8e:	4798      	blx	r3
 8011d90:	4603      	mov	r3, r0
    }
 8011d92:	4618      	mov	r0, r3
 8011d94:	3708      	adds	r7, #8
 8011d96:	46bd      	mov	sp, r7
 8011d98:	bd80      	pop	{r7, pc}

08011d9a <_ZN8touchgfx4ViewI15screenPresenterE4bindERS1_>:
     * Binds an instance of a specific Presenter type (subclass) to the View instance. This
     * function is called automatically when a new presenter/view pair is activated.
     *
     * @param [in] presenter The specific Presenter to be associated with the View.
     */
    void bind(T& presenter)
 8011d9a:	b480      	push	{r7}
 8011d9c:	b083      	sub	sp, #12
 8011d9e:	af00      	add	r7, sp, #0
 8011da0:	6078      	str	r0, [r7, #4]
 8011da2:	6039      	str	r1, [r7, #0]
    {
        this->presenter = &presenter;
 8011da4:	687b      	ldr	r3, [r7, #4]
 8011da6:	683a      	ldr	r2, [r7, #0]
 8011da8:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 8011daa:	bf00      	nop
 8011dac:	370c      	adds	r7, #12
 8011dae:	46bd      	mov	sp, r7
 8011db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011db4:	4770      	bx	lr

08011db6 <_ZN8touchgfx17AbstractPartition2atINS_15SlideTransitionILNS_9DirectionE2EEEEERT_t>:
    T& at(const uint16_t index)
 8011db6:	b580      	push	{r7, lr}
 8011db8:	b082      	sub	sp, #8
 8011dba:	af00      	add	r7, sp, #0
 8011dbc:	6078      	str	r0, [r7, #4]
 8011dbe:	460b      	mov	r3, r1
 8011dc0:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 8011dc2:	687b      	ldr	r3, [r7, #4]
 8011dc4:	681b      	ldr	r3, [r3, #0]
 8011dc6:	3324      	adds	r3, #36	; 0x24
 8011dc8:	681b      	ldr	r3, [r3, #0]
 8011dca:	887a      	ldrh	r2, [r7, #2]
 8011dcc:	4611      	mov	r1, r2
 8011dce:	6878      	ldr	r0, [r7, #4]
 8011dd0:	4798      	blx	r3
 8011dd2:	4603      	mov	r3, r0
    }
 8011dd4:	4618      	mov	r0, r3
 8011dd6:	3708      	adds	r7, #8
 8011dd8:	46bd      	mov	sp, r7
 8011dda:	bd80      	pop	{r7, pc}

08011ddc <_ZN8touchgfx14SnapshotWidgetD1Ev>:
 * A widget that is able to make a snapshot of the area the SnapshotWidget covers into either a
 * Bitmap or into animation storage (if this available). Once the snapshot has been
 * taken using SnapshowWidget::makeSnapshot(), the SnapshotWidget will show the captured
 * snapshot when it is subsequently drawn.
 */
class SnapshotWidget : public Widget
 8011ddc:	b580      	push	{r7, lr}
 8011dde:	b082      	sub	sp, #8
 8011de0:	af00      	add	r7, sp, #0
 8011de2:	6078      	str	r0, [r7, #4]
 8011de4:	4a05      	ldr	r2, [pc, #20]	; (8011dfc <_ZN8touchgfx14SnapshotWidgetD1Ev+0x20>)
 8011de6:	687b      	ldr	r3, [r7, #4]
 8011de8:	601a      	str	r2, [r3, #0]
 8011dea:	687b      	ldr	r3, [r7, #4]
 8011dec:	4618      	mov	r0, r3
 8011dee:	f7ff fbfb 	bl	80115e8 <_ZN8touchgfx6WidgetD1Ev>
 8011df2:	687b      	ldr	r3, [r7, #4]
 8011df4:	4618      	mov	r0, r3
 8011df6:	3708      	adds	r7, #8
 8011df8:	46bd      	mov	sp, r7
 8011dfa:	bd80      	pop	{r7, pc}
 8011dfc:	0802a77c 	.word	0x0802a77c

08011e00 <_ZN8touchgfx14SnapshotWidgetD0Ev>:
 8011e00:	b580      	push	{r7, lr}
 8011e02:	b082      	sub	sp, #8
 8011e04:	af00      	add	r7, sp, #0
 8011e06:	6078      	str	r0, [r7, #4]
 8011e08:	6878      	ldr	r0, [r7, #4]
 8011e0a:	f7ff ffe7 	bl	8011ddc <_ZN8touchgfx14SnapshotWidgetD1Ev>
 8011e0e:	212c      	movs	r1, #44	; 0x2c
 8011e10:	6878      	ldr	r0, [r7, #4]
 8011e12:	f015 f95a 	bl	80270ca <_ZdlPvj>
 8011e16:	687b      	ldr	r3, [r7, #4]
 8011e18:	4618      	mov	r0, r3
 8011e1a:	3708      	adds	r7, #8
 8011e1c:	46bd      	mov	sp, r7
 8011e1e:	bd80      	pop	{r7, pc}

08011e20 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvED1Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 8011e20:	b580      	push	{r7, lr}
 8011e22:	b082      	sub	sp, #8
 8011e24:	af00      	add	r7, sp, #0
 8011e26:	6078      	str	r0, [r7, #4]
 8011e28:	4a05      	ldr	r2, [pc, #20]	; (8011e40 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvED1Ev+0x20>)
 8011e2a:	687b      	ldr	r3, [r7, #4]
 8011e2c:	601a      	str	r2, [r3, #0]
 8011e2e:	687b      	ldr	r3, [r7, #4]
 8011e30:	4618      	mov	r0, r3
 8011e32:	f000 f8f9 	bl	8012028 <_ZN8touchgfx15GenericCallbackIRNS_8DrawableEvvED1Ev>
 8011e36:	687b      	ldr	r3, [r7, #4]
 8011e38:	4618      	mov	r0, r3
 8011e3a:	3708      	adds	r7, #8
 8011e3c:	46bd      	mov	sp, r7
 8011e3e:	bd80      	pop	{r7, pc}
 8011e40:	0802903c 	.word	0x0802903c

08011e44 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvED0Ev>:
 8011e44:	b580      	push	{r7, lr}
 8011e46:	b082      	sub	sp, #8
 8011e48:	af00      	add	r7, sp, #0
 8011e4a:	6078      	str	r0, [r7, #4]
 8011e4c:	6878      	ldr	r0, [r7, #4]
 8011e4e:	f7ff ffe7 	bl	8011e20 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvED1Ev>
 8011e52:	2110      	movs	r1, #16
 8011e54:	6878      	ldr	r0, [r7, #4]
 8011e56:	f015 f938 	bl	80270ca <_ZdlPvj>
 8011e5a:	687b      	ldr	r3, [r7, #4]
 8011e5c:	4618      	mov	r0, r3
 8011e5e:	3708      	adds	r7, #8
 8011e60:	46bd      	mov	sp, r7
 8011e62:	bd80      	pop	{r7, pc}

08011e64 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh>:
    /**
     * Initializes a new instance of the SlideTransition class.
     *
     * @param  transitionSteps (Optional) Number of steps (ticks) in the transition animation, default is 20.
     */
    SlideTransition(const uint8_t transitionSteps = 20)
 8011e64:	b590      	push	{r4, r7, lr}
 8011e66:	b087      	sub	sp, #28
 8011e68:	af02      	add	r7, sp, #8
 8011e6a:	6078      	str	r0, [r7, #4]
 8011e6c:	460b      	mov	r3, r1
 8011e6e:	70fb      	strb	r3, [r7, #3]
          snapshot(),
          snapshotPtr(&snapshot),
          handleTickCallback(this, &SlideTransition::tickMoveDrawable),
          animationSteps(transitionSteps),
          animationCounter(0),
          calculatedValue(0)
 8011e70:	687b      	ldr	r3, [r7, #4]
 8011e72:	4618      	mov	r0, r3
 8011e74:	f7ff fa2e 	bl	80112d4 <_ZN8touchgfx10TransitionC1Ev>
 8011e78:	4a27      	ldr	r2, [pc, #156]	; (8011f18 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh+0xb4>)
 8011e7a:	687b      	ldr	r3, [r7, #4]
 8011e7c:	601a      	str	r2, [r3, #0]
 8011e7e:	687b      	ldr	r3, [r7, #4]
 8011e80:	330c      	adds	r3, #12
 8011e82:	4618      	mov	r0, r3
 8011e84:	f004 fe9a 	bl	8016bbc <_ZN8touchgfx14SnapshotWidgetC1Ev>
          snapshotPtr(&snapshot),
 8011e88:	687b      	ldr	r3, [r7, #4]
 8011e8a:	f103 020c 	add.w	r2, r3, #12
          calculatedValue(0)
 8011e8e:	687b      	ldr	r3, [r7, #4]
 8011e90:	639a      	str	r2, [r3, #56]	; 0x38
 8011e92:	687b      	ldr	r3, [r7, #4]
 8011e94:	f103 043c 	add.w	r4, r3, #60	; 0x3c
 8011e98:	4a20      	ldr	r2, [pc, #128]	; (8011f1c <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh+0xb8>)
 8011e9a:	f107 0308 	add.w	r3, r7, #8
 8011e9e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011ea2:	e883 0003 	stmia.w	r3, {r0, r1}
 8011ea6:	f107 0308 	add.w	r3, r7, #8
 8011eaa:	cb0c      	ldmia	r3, {r2, r3}
 8011eac:	6879      	ldr	r1, [r7, #4]
 8011eae:	4620      	mov	r0, r4
 8011eb0:	f000 f89a 	bl	8011fe8 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvEC1EPS3_MS3_FvS5_E>
 8011eb4:	687b      	ldr	r3, [r7, #4]
 8011eb6:	78fa      	ldrb	r2, [r7, #3]
 8011eb8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
 8011ebc:	687b      	ldr	r3, [r7, #4]
 8011ebe:	2200      	movs	r2, #0
 8011ec0:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
 8011ec4:	687b      	ldr	r3, [r7, #4]
 8011ec6:	2200      	movs	r2, #0
 8011ec8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    {
        if (HAL::USE_ANIMATION_STORAGE)
 8011ecc:	4b14      	ldr	r3, [pc, #80]	; (8011f20 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh+0xbc>)
 8011ece:	781b      	ldrb	r3, [r3, #0]
 8011ed0:	2b00      	cmp	r3, #0
 8011ed2:	d01c      	beq.n	8011f0e <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh+0xaa>
        {
            snapshot.setPosition(0, 0, HAL::DISPLAY_WIDTH, HAL::DISPLAY_HEIGHT);
 8011ed4:	687b      	ldr	r3, [r7, #4]
 8011ed6:	f103 000c 	add.w	r0, r3, #12
 8011eda:	4b12      	ldr	r3, [pc, #72]	; (8011f24 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh+0xc0>)
 8011edc:	881b      	ldrh	r3, [r3, #0]
 8011ede:	b21a      	sxth	r2, r3
 8011ee0:	4b11      	ldr	r3, [pc, #68]	; (8011f28 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh+0xc4>)
 8011ee2:	881b      	ldrh	r3, [r3, #0]
 8011ee4:	b21b      	sxth	r3, r3
 8011ee6:	9300      	str	r3, [sp, #0]
 8011ee8:	4613      	mov	r3, r2
 8011eea:	2200      	movs	r2, #0
 8011eec:	2100      	movs	r1, #0
 8011eee:	f7ff f886 	bl	8010ffe <_ZN8touchgfx8Drawable11setPositionEssss>
            snapshot.makeSnapshot();
 8011ef2:	687b      	ldr	r3, [r7, #4]
 8011ef4:	330c      	adds	r3, #12
 8011ef6:	4618      	mov	r0, r3
 8011ef8:	f004 fde4 	bl	8016ac4 <_ZN8touchgfx14SnapshotWidget12makeSnapshotEv>

            switch (templateDirection)
            {
            case EAST:
                targetValue = -HAL::DISPLAY_WIDTH;
 8011efc:	4b09      	ldr	r3, [pc, #36]	; (8011f24 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh+0xc0>)
 8011efe:	881b      	ldrh	r3, [r3, #0]
 8011f00:	425b      	negs	r3, r3
 8011f02:	b29b      	uxth	r3, r3
 8011f04:	b21a      	sxth	r2, r3
 8011f06:	687b      	ldr	r3, [r7, #4]
 8011f08:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
                break;
 8011f0c:	bf00      	nop
                done = true;
                // Nothing to do here
                break;
            }
        }
    }
 8011f0e:	687b      	ldr	r3, [r7, #4]
 8011f10:	4618      	mov	r0, r3
 8011f12:	3714      	adds	r7, #20
 8011f14:	46bd      	mov	sp, r7
 8011f16:	bd90      	pop	{r4, r7, pc}
 8011f18:	08029010 	.word	0x08029010
 8011f1c:	080287f8 	.word	0x080287f8
 8011f20:	2000580b 	.word	0x2000580b
 8011f24:	20005800 	.word	0x20005800
 8011f28:	20005802 	.word	0x20005802

08011f2c <_ZN8touchgfx17AbstractPartition2atI11Screen1ViewEERT_t>:
    T& at(const uint16_t index)
 8011f2c:	b580      	push	{r7, lr}
 8011f2e:	b082      	sub	sp, #8
 8011f30:	af00      	add	r7, sp, #0
 8011f32:	6078      	str	r0, [r7, #4]
 8011f34:	460b      	mov	r3, r1
 8011f36:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 8011f38:	687b      	ldr	r3, [r7, #4]
 8011f3a:	681b      	ldr	r3, [r3, #0]
 8011f3c:	3324      	adds	r3, #36	; 0x24
 8011f3e:	681b      	ldr	r3, [r3, #0]
 8011f40:	887a      	ldrh	r2, [r7, #2]
 8011f42:	4611      	mov	r1, r2
 8011f44:	6878      	ldr	r0, [r7, #4]
 8011f46:	4798      	blx	r3
 8011f48:	4603      	mov	r3, r0
    }
 8011f4a:	4618      	mov	r0, r3
 8011f4c:	3708      	adds	r7, #8
 8011f4e:	46bd      	mov	sp, r7
 8011f50:	bd80      	pop	{r7, pc}

08011f52 <_ZN8touchgfx17AbstractPartition2atI16Screen1PresenterEERT_t>:
    T& at(const uint16_t index)
 8011f52:	b580      	push	{r7, lr}
 8011f54:	b082      	sub	sp, #8
 8011f56:	af00      	add	r7, sp, #0
 8011f58:	6078      	str	r0, [r7, #4]
 8011f5a:	460b      	mov	r3, r1
 8011f5c:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 8011f5e:	687b      	ldr	r3, [r7, #4]
 8011f60:	681b      	ldr	r3, [r3, #0]
 8011f62:	3324      	adds	r3, #36	; 0x24
 8011f64:	681b      	ldr	r3, [r3, #0]
 8011f66:	887a      	ldrh	r2, [r7, #2]
 8011f68:	4611      	mov	r1, r2
 8011f6a:	6878      	ldr	r0, [r7, #4]
 8011f6c:	4798      	blx	r3
 8011f6e:	4603      	mov	r3, r0
    }
 8011f70:	4618      	mov	r0, r3
 8011f72:	3708      	adds	r7, #8
 8011f74:	46bd      	mov	sp, r7
 8011f76:	bd80      	pop	{r7, pc}

08011f78 <_ZN8touchgfx4ViewI16Screen1PresenterE4bindERS1_>:
    void bind(T& presenter)
 8011f78:	b480      	push	{r7}
 8011f7a:	b083      	sub	sp, #12
 8011f7c:	af00      	add	r7, sp, #0
 8011f7e:	6078      	str	r0, [r7, #4]
 8011f80:	6039      	str	r1, [r7, #0]
        this->presenter = &presenter;
 8011f82:	687b      	ldr	r3, [r7, #4]
 8011f84:	683a      	ldr	r2, [r7, #0]
 8011f86:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 8011f88:	bf00      	nop
 8011f8a:	370c      	adds	r7, #12
 8011f8c:	46bd      	mov	sp, r7
 8011f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f92:	4770      	bx	lr

08011f94 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE16tickMoveDrawableERNS_8DrawableE>:
    /**
     * Moves the Drawable.
     *
     * @param [in] d The Drawable to move.
     */
    virtual void tickMoveDrawable(Drawable& d)
 8011f94:	b580      	push	{r7, lr}
 8011f96:	b082      	sub	sp, #8
 8011f98:	af00      	add	r7, sp, #0
 8011f9a:	6078      	str	r0, [r7, #4]
 8011f9c:	6039      	str	r1, [r7, #0]
    {
        if (&d == snapshotPtr)
 8011f9e:	687b      	ldr	r3, [r7, #4]
 8011fa0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011fa2:	683a      	ldr	r2, [r7, #0]
 8011fa4:	429a      	cmp	r2, r3
 8011fa6:	d00a      	beq.n	8011fbe <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE16tickMoveDrawableERNS_8DrawableE+0x2a>

        switch (templateDirection)
        {
        case EAST:
        case WEST:
            d.moveRelative(calculatedValue, 0);
 8011fa8:	683b      	ldr	r3, [r7, #0]
 8011faa:	681b      	ldr	r3, [r3, #0]
 8011fac:	3350      	adds	r3, #80	; 0x50
 8011fae:	681b      	ldr	r3, [r3, #0]
 8011fb0:	687a      	ldr	r2, [r7, #4]
 8011fb2:	f9b2 1050 	ldrsh.w	r1, [r2, #80]	; 0x50
 8011fb6:	2200      	movs	r2, #0
 8011fb8:	6838      	ldr	r0, [r7, #0]
 8011fba:	4798      	blx	r3
            break;
 8011fbc:	e000      	b.n	8011fc0 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE16tickMoveDrawableERNS_8DrawableE+0x2c>
            return;
 8011fbe:	bf00      	nop
        default:
            // Special case, do not move. Class NoTransition can be used instead.
            done = true;
            break;
        }
    }
 8011fc0:	3708      	adds	r7, #8
 8011fc2:	46bd      	mov	sp, r7
 8011fc4:	bd80      	pop	{r7, pc}
	...

08011fc8 <_ZN8touchgfx15GenericCallbackIRNS_8DrawableEvvEC1Ev>:
class GenericCallback<T1, void, void>
 8011fc8:	b480      	push	{r7}
 8011fca:	b083      	sub	sp, #12
 8011fcc:	af00      	add	r7, sp, #0
 8011fce:	6078      	str	r0, [r7, #4]
 8011fd0:	4a04      	ldr	r2, [pc, #16]	; (8011fe4 <_ZN8touchgfx15GenericCallbackIRNS_8DrawableEvvEC1Ev+0x1c>)
 8011fd2:	687b      	ldr	r3, [r7, #4]
 8011fd4:	601a      	str	r2, [r3, #0]
 8011fd6:	687b      	ldr	r3, [r7, #4]
 8011fd8:	4618      	mov	r0, r3
 8011fda:	370c      	adds	r7, #12
 8011fdc:	46bd      	mov	sp, r7
 8011fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011fe2:	4770      	bx	lr
 8011fe4:	08029054 	.word	0x08029054

08011fe8 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvEC1EPS3_MS3_FvS5_E>:
    Callback(dest_type* pobject, void (dest_type::*pmemfun_1)(T1))
 8011fe8:	b580      	push	{r7, lr}
 8011fea:	b084      	sub	sp, #16
 8011fec:	af00      	add	r7, sp, #0
 8011fee:	60f8      	str	r0, [r7, #12]
 8011ff0:	60b9      	str	r1, [r7, #8]
 8011ff2:	4639      	mov	r1, r7
 8011ff4:	e881 000c 	stmia.w	r1, {r2, r3}
    {
 8011ff8:	68fb      	ldr	r3, [r7, #12]
 8011ffa:	4618      	mov	r0, r3
 8011ffc:	f7ff ffe4 	bl	8011fc8 <_ZN8touchgfx15GenericCallbackIRNS_8DrawableEvvEC1Ev>
 8012000:	4a08      	ldr	r2, [pc, #32]	; (8012024 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvEC1EPS3_MS3_FvS5_E+0x3c>)
 8012002:	68fb      	ldr	r3, [r7, #12]
 8012004:	601a      	str	r2, [r3, #0]
        this->pobject = pobject;
 8012006:	68fb      	ldr	r3, [r7, #12]
 8012008:	68ba      	ldr	r2, [r7, #8]
 801200a:	605a      	str	r2, [r3, #4]
        this->pmemfun_1 = pmemfun_1;
 801200c:	68fb      	ldr	r3, [r7, #12]
 801200e:	3308      	adds	r3, #8
 8012010:	463a      	mov	r2, r7
 8012012:	e892 0003 	ldmia.w	r2, {r0, r1}
 8012016:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 801201a:	68fb      	ldr	r3, [r7, #12]
 801201c:	4618      	mov	r0, r3
 801201e:	3710      	adds	r7, #16
 8012020:	46bd      	mov	sp, r7
 8012022:	bd80      	pop	{r7, pc}
 8012024:	0802903c 	.word	0x0802903c

08012028 <_ZN8touchgfx15GenericCallbackIRNS_8DrawableEvvED1Ev>:
    virtual ~GenericCallback()
 8012028:	b480      	push	{r7}
 801202a:	b083      	sub	sp, #12
 801202c:	af00      	add	r7, sp, #0
 801202e:	6078      	str	r0, [r7, #4]
    }
 8012030:	4a04      	ldr	r2, [pc, #16]	; (8012044 <_ZN8touchgfx15GenericCallbackIRNS_8DrawableEvvED1Ev+0x1c>)
 8012032:	687b      	ldr	r3, [r7, #4]
 8012034:	601a      	str	r2, [r3, #0]
 8012036:	687b      	ldr	r3, [r7, #4]
 8012038:	4618      	mov	r0, r3
 801203a:	370c      	adds	r7, #12
 801203c:	46bd      	mov	sp, r7
 801203e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012042:	4770      	bx	lr
 8012044:	08029054 	.word	0x08029054

08012048 <_ZN8touchgfx15GenericCallbackIRNS_8DrawableEvvED0Ev>:
    virtual ~GenericCallback()
 8012048:	b580      	push	{r7, lr}
 801204a:	b082      	sub	sp, #8
 801204c:	af00      	add	r7, sp, #0
 801204e:	6078      	str	r0, [r7, #4]
    }
 8012050:	6878      	ldr	r0, [r7, #4]
 8012052:	f7ff ffe9 	bl	8012028 <_ZN8touchgfx15GenericCallbackIRNS_8DrawableEvvED1Ev>
 8012056:	2104      	movs	r1, #4
 8012058:	6878      	ldr	r0, [r7, #4]
 801205a:	f015 f836 	bl	80270ca <_ZdlPvj>
 801205e:	687b      	ldr	r3, [r7, #4]
 8012060:	4618      	mov	r0, r3
 8012062:	3708      	adds	r7, #8
 8012064:	46bd      	mov	sp, r7
 8012066:	bd80      	pop	{r7, pc}

08012068 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EED1Ev>:
class SlideTransition : public Transition
 8012068:	b580      	push	{r7, lr}
 801206a:	b082      	sub	sp, #8
 801206c:	af00      	add	r7, sp, #0
 801206e:	6078      	str	r0, [r7, #4]
 8012070:	4a0a      	ldr	r2, [pc, #40]	; (801209c <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EED1Ev+0x34>)
 8012072:	687b      	ldr	r3, [r7, #4]
 8012074:	601a      	str	r2, [r3, #0]
 8012076:	687b      	ldr	r3, [r7, #4]
 8012078:	333c      	adds	r3, #60	; 0x3c
 801207a:	4618      	mov	r0, r3
 801207c:	f7ff fed0 	bl	8011e20 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvED1Ev>
 8012080:	687b      	ldr	r3, [r7, #4]
 8012082:	330c      	adds	r3, #12
 8012084:	4618      	mov	r0, r3
 8012086:	f7ff fea9 	bl	8011ddc <_ZN8touchgfx14SnapshotWidgetD1Ev>
 801208a:	687b      	ldr	r3, [r7, #4]
 801208c:	4618      	mov	r0, r3
 801208e:	f7ff f937 	bl	8011300 <_ZN8touchgfx10TransitionD1Ev>
 8012092:	687b      	ldr	r3, [r7, #4]
 8012094:	4618      	mov	r0, r3
 8012096:	3708      	adds	r7, #8
 8012098:	46bd      	mov	sp, r7
 801209a:	bd80      	pop	{r7, pc}
 801209c:	08029010 	.word	0x08029010

080120a0 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EED0Ev>:
 80120a0:	b580      	push	{r7, lr}
 80120a2:	b082      	sub	sp, #8
 80120a4:	af00      	add	r7, sp, #0
 80120a6:	6078      	str	r0, [r7, #4]
 80120a8:	6878      	ldr	r0, [r7, #4]
 80120aa:	f7ff ffdd 	bl	8012068 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EED1Ev>
 80120ae:	2154      	movs	r1, #84	; 0x54
 80120b0:	6878      	ldr	r0, [r7, #4]
 80120b2:	f015 f80a 	bl	80270ca <_ZdlPvj>
 80120b6:	687b      	ldr	r3, [r7, #4]
 80120b8:	4618      	mov	r0, r3
 80120ba:	3708      	adds	r7, #8
 80120bc:	46bd      	mov	sp, r7
 80120be:	bd80      	pop	{r7, pc}

080120c0 <_ZN8touchgfx12NoTransitionD1Ev>:
 80120c0:	b580      	push	{r7, lr}
 80120c2:	b082      	sub	sp, #8
 80120c4:	af00      	add	r7, sp, #0
 80120c6:	6078      	str	r0, [r7, #4]
 80120c8:	4a05      	ldr	r2, [pc, #20]	; (80120e0 <_ZN8touchgfx12NoTransitionD1Ev+0x20>)
 80120ca:	687b      	ldr	r3, [r7, #4]
 80120cc:	601a      	str	r2, [r3, #0]
 80120ce:	687b      	ldr	r3, [r7, #4]
 80120d0:	4618      	mov	r0, r3
 80120d2:	f7ff f915 	bl	8011300 <_ZN8touchgfx10TransitionD1Ev>
 80120d6:	687b      	ldr	r3, [r7, #4]
 80120d8:	4618      	mov	r0, r3
 80120da:	3708      	adds	r7, #8
 80120dc:	46bd      	mov	sp, r7
 80120de:	bd80      	pop	{r7, pc}
 80120e0:	080290d0 	.word	0x080290d0

080120e4 <_ZN8touchgfx12NoTransitionD0Ev>:
 80120e4:	b580      	push	{r7, lr}
 80120e6:	b082      	sub	sp, #8
 80120e8:	af00      	add	r7, sp, #0
 80120ea:	6078      	str	r0, [r7, #4]
 80120ec:	6878      	ldr	r0, [r7, #4]
 80120ee:	f7ff ffe7 	bl	80120c0 <_ZN8touchgfx12NoTransitionD1Ev>
 80120f2:	210c      	movs	r1, #12
 80120f4:	6878      	ldr	r0, [r7, #4]
 80120f6:	f014 ffe8 	bl	80270ca <_ZdlPvj>
 80120fa:	687b      	ldr	r3, [r7, #4]
 80120fc:	4618      	mov	r0, r3
 80120fe:	3708      	adds	r7, #8
 8012100:	46bd      	mov	sp, r7
 8012102:	bd80      	pop	{r7, pc}

08012104 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>:
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8012104:	b580      	push	{r7, lr}
 8012106:	b082      	sub	sp, #8
 8012108:	af00      	add	r7, sp, #0
 801210a:	6078      	str	r0, [r7, #4]
 801210c:	4a05      	ldr	r2, [pc, #20]	; (8012124 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev+0x20>)
 801210e:	687b      	ldr	r3, [r7, #4]
 8012110:	601a      	str	r2, [r3, #0]
 8012112:	687b      	ldr	r3, [r7, #4]
 8012114:	4618      	mov	r0, r3
 8012116:	f7fe ff27 	bl	8010f68 <_ZN8touchgfx15GenericCallbackIvvvED1Ev>
 801211a:	687b      	ldr	r3, [r7, #4]
 801211c:	4618      	mov	r0, r3
 801211e:	3708      	adds	r7, #8
 8012120:	46bd      	mov	sp, r7
 8012122:	bd80      	pop	{r7, pc}
 8012124:	08029138 	.word	0x08029138

08012128 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED0Ev>:
 8012128:	b580      	push	{r7, lr}
 801212a:	b082      	sub	sp, #8
 801212c:	af00      	add	r7, sp, #0
 801212e:	6078      	str	r0, [r7, #4]
 8012130:	6878      	ldr	r0, [r7, #4]
 8012132:	f7ff ffe7 	bl	8012104 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
 8012136:	2110      	movs	r1, #16
 8012138:	6878      	ldr	r0, [r7, #4]
 801213a:	f014 ffc6 	bl	80270ca <_ZdlPvj>
 801213e:	687b      	ldr	r3, [r7, #4]
 8012140:	4618      	mov	r0, r3
 8012142:	3708      	adds	r7, #8
 8012144:	46bd      	mov	sp, r7
 8012146:	bd80      	pop	{r7, pc}

08012148 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv>:
    virtual void handleTickEvent()
 8012148:	b580      	push	{r7, lr}
 801214a:	b082      	sub	sp, #8
 801214c:	af00      	add	r7, sp, #0
 801214e:	6078      	str	r0, [r7, #4]
        if (!HAL::USE_ANIMATION_STORAGE)
 8012150:	4b40      	ldr	r3, [pc, #256]	; (8012254 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv+0x10c>)
 8012152:	781b      	ldrb	r3, [r3, #0]
 8012154:	f083 0301 	eor.w	r3, r3, #1
 8012158:	b2db      	uxtb	r3, r3
 801215a:	2b00      	cmp	r3, #0
 801215c:	d003      	beq.n	8012166 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv+0x1e>
            done = true;
 801215e:	687b      	ldr	r3, [r7, #4]
 8012160:	2201      	movs	r2, #1
 8012162:	721a      	strb	r2, [r3, #8]
            return;
 8012164:	e073      	b.n	801224e <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv+0x106>
        Transition::handleTickEvent();
 8012166:	687b      	ldr	r3, [r7, #4]
 8012168:	4618      	mov	r0, r3
 801216a:	f7ff f8e9 	bl	8011340 <_ZN8touchgfx10Transition15handleTickEventEv>
        animationCounter++;
 801216e:	687b      	ldr	r3, [r7, #4]
 8012170:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8012174:	3301      	adds	r3, #1
 8012176:	b2da      	uxtb	r2, r3
 8012178:	687b      	ldr	r3, [r7, #4]
 801217a:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
        if (animationCounter <= animationSteps)
 801217e:	687b      	ldr	r3, [r7, #4]
 8012180:	f893 204d 	ldrb.w	r2, [r3, #77]	; 0x4d
 8012184:	687b      	ldr	r3, [r7, #4]
 8012186:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 801218a:	429a      	cmp	r2, r3
 801218c:	d82f      	bhi.n	80121ee <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv+0xa6>
            calculatedValue = EasingEquations::cubicEaseOut(animationCounter, 0, targetValue, animationSteps);
 801218e:	687b      	ldr	r3, [r7, #4]
 8012190:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8012194:	b298      	uxth	r0, r3
 8012196:	687b      	ldr	r3, [r7, #4]
 8012198:	f9b3 204e 	ldrsh.w	r2, [r3, #78]	; 0x4e
 801219c:	687b      	ldr	r3, [r7, #4]
 801219e:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80121a2:	b29b      	uxth	r3, r3
 80121a4:	2100      	movs	r1, #0
 80121a6:	f008 f8f4 	bl	801a392 <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst>
 80121aa:	4603      	mov	r3, r0
 80121ac:	461a      	mov	r2, r3
 80121ae:	687b      	ldr	r3, [r7, #4]
 80121b0:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
            if (calculatedValue % 2)
 80121b4:	687b      	ldr	r3, [r7, #4]
 80121b6:	f9b3 3050 	ldrsh.w	r3, [r3, #80]	; 0x50
 80121ba:	b29b      	uxth	r3, r3
 80121bc:	f003 0301 	and.w	r3, r3, #1
 80121c0:	b29b      	uxth	r3, r3
 80121c2:	2b00      	cmp	r3, #0
 80121c4:	d01b      	beq.n	80121fe <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv+0xb6>
                calculatedValue += (calculatedValue > 0 ? 1 : -1);
 80121c6:	687b      	ldr	r3, [r7, #4]
 80121c8:	f9b3 3050 	ldrsh.w	r3, [r3, #80]	; 0x50
 80121cc:	b29b      	uxth	r3, r3
 80121ce:	687a      	ldr	r2, [r7, #4]
 80121d0:	f9b2 2050 	ldrsh.w	r2, [r2, #80]	; 0x50
 80121d4:	2a00      	cmp	r2, #0
 80121d6:	dd01      	ble.n	80121dc <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv+0x94>
 80121d8:	2201      	movs	r2, #1
 80121da:	e001      	b.n	80121e0 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv+0x98>
 80121dc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80121e0:	4413      	add	r3, r2
 80121e2:	b29b      	uxth	r3, r3
 80121e4:	b21a      	sxth	r2, r3
 80121e6:	687b      	ldr	r3, [r7, #4]
 80121e8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
 80121ec:	e007      	b.n	80121fe <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv+0xb6>
            done = true;
 80121ee:	687b      	ldr	r3, [r7, #4]
 80121f0:	2201      	movs	r2, #1
 80121f2:	721a      	strb	r2, [r3, #8]
            animationCounter = 0;
 80121f4:	687b      	ldr	r3, [r7, #4]
 80121f6:	2200      	movs	r2, #0
 80121f8:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
            return;
 80121fc:	e027      	b.n	801224e <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv+0x106>
            calculatedValue -= snapshot.getX();
 80121fe:	687b      	ldr	r3, [r7, #4]
 8012200:	330c      	adds	r3, #12
 8012202:	4618      	mov	r0, r3
 8012204:	f7fe ff1c 	bl	8011040 <_ZNK8touchgfx8Drawable4getXEv>
 8012208:	4603      	mov	r3, r0
 801220a:	4619      	mov	r1, r3
 801220c:	687b      	ldr	r3, [r7, #4]
 801220e:	f9b3 3050 	ldrsh.w	r3, [r3, #80]	; 0x50
 8012212:	b29a      	uxth	r2, r3
 8012214:	b28b      	uxth	r3, r1
 8012216:	1ad3      	subs	r3, r2, r3
 8012218:	b29b      	uxth	r3, r3
 801221a:	b21a      	sxth	r2, r3
 801221c:	687b      	ldr	r3, [r7, #4]
 801221e:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
            snapshot.moveRelative(calculatedValue, 0);
 8012222:	687b      	ldr	r3, [r7, #4]
 8012224:	f103 000c 	add.w	r0, r3, #12
 8012228:	687b      	ldr	r3, [r7, #4]
 801222a:	f9b3 3050 	ldrsh.w	r3, [r3, #80]	; 0x50
 801222e:	2200      	movs	r2, #0
 8012230:	4619      	mov	r1, r3
 8012232:	f007 fc23 	bl	8019a7c <_ZN8touchgfx8Drawable12moveRelativeEss>
            break;
 8012236:	bf00      	nop
        screenContainer->forEachChild(&handleTickCallback);
 8012238:	687b      	ldr	r3, [r7, #4]
 801223a:	6858      	ldr	r0, [r3, #4]
 801223c:	687b      	ldr	r3, [r7, #4]
 801223e:	685b      	ldr	r3, [r3, #4]
 8012240:	681b      	ldr	r3, [r3, #0]
 8012242:	3374      	adds	r3, #116	; 0x74
 8012244:	681b      	ldr	r3, [r3, #0]
 8012246:	687a      	ldr	r2, [r7, #4]
 8012248:	323c      	adds	r2, #60	; 0x3c
 801224a:	4611      	mov	r1, r2
 801224c:	4798      	blx	r3
    }
 801224e:	3708      	adds	r7, #8
 8012250:	46bd      	mov	sp, r7
 8012252:	bd80      	pop	{r7, pc}
 8012254:	2000580b 	.word	0x2000580b

08012258 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE8tearDownEv>:
    virtual void tearDown()
 8012258:	b580      	push	{r7, lr}
 801225a:	b082      	sub	sp, #8
 801225c:	af00      	add	r7, sp, #0
 801225e:	6078      	str	r0, [r7, #4]
        if (HAL::USE_ANIMATION_STORAGE && screenContainer)
 8012260:	4b0b      	ldr	r3, [pc, #44]	; (8012290 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE8tearDownEv+0x38>)
 8012262:	781b      	ldrb	r3, [r3, #0]
 8012264:	2b00      	cmp	r3, #0
 8012266:	d00e      	beq.n	8012286 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE8tearDownEv+0x2e>
 8012268:	687b      	ldr	r3, [r7, #4]
 801226a:	685b      	ldr	r3, [r3, #4]
 801226c:	2b00      	cmp	r3, #0
 801226e:	d00a      	beq.n	8012286 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE8tearDownEv+0x2e>
            screenContainer->remove(snapshot);
 8012270:	687b      	ldr	r3, [r7, #4]
 8012272:	6858      	ldr	r0, [r3, #4]
 8012274:	687b      	ldr	r3, [r7, #4]
 8012276:	685b      	ldr	r3, [r3, #4]
 8012278:	681b      	ldr	r3, [r3, #0]
 801227a:	3360      	adds	r3, #96	; 0x60
 801227c:	681b      	ldr	r3, [r3, #0]
 801227e:	687a      	ldr	r2, [r7, #4]
 8012280:	320c      	adds	r2, #12
 8012282:	4611      	mov	r1, r2
 8012284:	4798      	blx	r3
    }
 8012286:	bf00      	nop
 8012288:	3708      	adds	r7, #8
 801228a:	46bd      	mov	sp, r7
 801228c:	bd80      	pop	{r7, pc}
 801228e:	bf00      	nop
 8012290:	2000580b 	.word	0x2000580b

08012294 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE4initEv>:
    virtual void init()
 8012294:	b580      	push	{r7, lr}
 8012296:	b088      	sub	sp, #32
 8012298:	af00      	add	r7, sp, #0
 801229a:	6078      	str	r0, [r7, #4]
        if (HAL::USE_ANIMATION_STORAGE)
 801229c:	4b1a      	ldr	r3, [pc, #104]	; (8012308 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE4initEv+0x74>)
 801229e:	781b      	ldrb	r3, [r3, #0]
 80122a0:	2b00      	cmp	r3, #0
 80122a2:	d02d      	beq.n	8012300 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE4initEv+0x6c>
            Transition::init();
 80122a4:	687b      	ldr	r3, [r7, #4]
 80122a6:	4618      	mov	r0, r3
 80122a8:	f7ff f85e 	bl	8011368 <_ZN8touchgfx10Transition4initEv>
            Callback<SlideTransition, Drawable&> initCallback(this, &SlideTransition::initMoveDrawable);
 80122ac:	4a17      	ldr	r2, [pc, #92]	; (801230c <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE4initEv+0x78>)
 80122ae:	f107 0318 	add.w	r3, r7, #24
 80122b2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80122b6:	e883 0003 	stmia.w	r3, {r0, r1}
 80122ba:	f107 0008 	add.w	r0, r7, #8
 80122be:	f107 0318 	add.w	r3, r7, #24
 80122c2:	cb0c      	ldmia	r3, {r2, r3}
 80122c4:	6879      	ldr	r1, [r7, #4]
 80122c6:	f7ff fe8f 	bl	8011fe8 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvEC1EPS3_MS3_FvS5_E>
            screenContainer->forEachChild(&initCallback);
 80122ca:	687b      	ldr	r3, [r7, #4]
 80122cc:	685a      	ldr	r2, [r3, #4]
 80122ce:	687b      	ldr	r3, [r7, #4]
 80122d0:	685b      	ldr	r3, [r3, #4]
 80122d2:	681b      	ldr	r3, [r3, #0]
 80122d4:	3374      	adds	r3, #116	; 0x74
 80122d6:	681b      	ldr	r3, [r3, #0]
 80122d8:	f107 0108 	add.w	r1, r7, #8
 80122dc:	4610      	mov	r0, r2
 80122de:	4798      	blx	r3
            screenContainer->add(snapshot);
 80122e0:	687b      	ldr	r3, [r7, #4]
 80122e2:	6858      	ldr	r0, [r3, #4]
 80122e4:	687b      	ldr	r3, [r7, #4]
 80122e6:	685b      	ldr	r3, [r3, #4]
 80122e8:	681b      	ldr	r3, [r3, #0]
 80122ea:	335c      	adds	r3, #92	; 0x5c
 80122ec:	681b      	ldr	r3, [r3, #0]
 80122ee:	687a      	ldr	r2, [r7, #4]
 80122f0:	320c      	adds	r2, #12
 80122f2:	4611      	mov	r1, r2
 80122f4:	4798      	blx	r3
            Callback<SlideTransition, Drawable&> initCallback(this, &SlideTransition::initMoveDrawable);
 80122f6:	f107 0308 	add.w	r3, r7, #8
 80122fa:	4618      	mov	r0, r3
 80122fc:	f7ff fd90 	bl	8011e20 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvED1Ev>
    }
 8012300:	bf00      	nop
 8012302:	3720      	adds	r7, #32
 8012304:	46bd      	mov	sp, r7
 8012306:	bd80      	pop	{r7, pc}
 8012308:	2000580b 	.word	0x2000580b
 801230c:	08028800 	.word	0x08028800

08012310 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE16initMoveDrawableERNS_8DrawableE>:
    virtual void initMoveDrawable(Drawable& d)
 8012310:	b580      	push	{r7, lr}
 8012312:	b082      	sub	sp, #8
 8012314:	af00      	add	r7, sp, #0
 8012316:	6078      	str	r0, [r7, #4]
 8012318:	6039      	str	r1, [r7, #0]
            d.moveRelative(HAL::DISPLAY_WIDTH, 0);
 801231a:	683b      	ldr	r3, [r7, #0]
 801231c:	681b      	ldr	r3, [r3, #0]
 801231e:	3350      	adds	r3, #80	; 0x50
 8012320:	681b      	ldr	r3, [r3, #0]
 8012322:	4a05      	ldr	r2, [pc, #20]	; (8012338 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE16initMoveDrawableERNS_8DrawableE+0x28>)
 8012324:	8812      	ldrh	r2, [r2, #0]
 8012326:	b211      	sxth	r1, r2
 8012328:	2200      	movs	r2, #0
 801232a:	6838      	ldr	r0, [r7, #0]
 801232c:	4798      	blx	r3
            break;
 801232e:	bf00      	nop
    }
 8012330:	bf00      	nop
 8012332:	3708      	adds	r7, #8
 8012334:	46bd      	mov	sp, r7
 8012336:	bd80      	pop	{r7, pc}
 8012338:	20005800 	.word	0x20005800

0801233c <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvE7executeES5_>:
    virtual void execute(T1 t1)
 801233c:	b580      	push	{r7, lr}
 801233e:	b082      	sub	sp, #8
 8012340:	af00      	add	r7, sp, #0
 8012342:	6078      	str	r0, [r7, #4]
 8012344:	6039      	str	r1, [r7, #0]
        (pobject->*pmemfun_1)(t1);
 8012346:	687b      	ldr	r3, [r7, #4]
 8012348:	685b      	ldr	r3, [r3, #4]
 801234a:	687a      	ldr	r2, [r7, #4]
 801234c:	68d2      	ldr	r2, [r2, #12]
 801234e:	1052      	asrs	r2, r2, #1
 8012350:	1898      	adds	r0, r3, r2
 8012352:	687b      	ldr	r3, [r7, #4]
 8012354:	68db      	ldr	r3, [r3, #12]
 8012356:	f003 0301 	and.w	r3, r3, #1
 801235a:	2b00      	cmp	r3, #0
 801235c:	d102      	bne.n	8012364 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvE7executeES5_+0x28>
 801235e:	687b      	ldr	r3, [r7, #4]
 8012360:	689b      	ldr	r3, [r3, #8]
 8012362:	e00a      	b.n	801237a <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvE7executeES5_+0x3e>
 8012364:	687b      	ldr	r3, [r7, #4]
 8012366:	685b      	ldr	r3, [r3, #4]
 8012368:	687a      	ldr	r2, [r7, #4]
 801236a:	68d2      	ldr	r2, [r2, #12]
 801236c:	1052      	asrs	r2, r2, #1
 801236e:	4413      	add	r3, r2
 8012370:	681b      	ldr	r3, [r3, #0]
 8012372:	687a      	ldr	r2, [r7, #4]
 8012374:	6892      	ldr	r2, [r2, #8]
 8012376:	4413      	add	r3, r2
 8012378:	681b      	ldr	r3, [r3, #0]
 801237a:	6839      	ldr	r1, [r7, #0]
 801237c:	4798      	blx	r3
    }
 801237e:	bf00      	nop
 8012380:	3708      	adds	r7, #8
 8012382:	46bd      	mov	sp, r7
 8012384:	bd80      	pop	{r7, pc}

08012386 <_ZNK8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvE7isValidEv>:
    virtual bool isValid() const
 8012386:	b480      	push	{r7}
 8012388:	b083      	sub	sp, #12
 801238a:	af00      	add	r7, sp, #0
 801238c:	6078      	str	r0, [r7, #4]
        return (pobject != 0) && (pmemfun_1 != 0);
 801238e:	687b      	ldr	r3, [r7, #4]
 8012390:	685b      	ldr	r3, [r3, #4]
 8012392:	2b00      	cmp	r3, #0
 8012394:	d010      	beq.n	80123b8 <_ZNK8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvE7isValidEv+0x32>
 8012396:	687b      	ldr	r3, [r7, #4]
 8012398:	689b      	ldr	r3, [r3, #8]
 801239a:	2b00      	cmp	r3, #0
 801239c:	d107      	bne.n	80123ae <_ZNK8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvE7isValidEv+0x28>
 801239e:	687b      	ldr	r3, [r7, #4]
 80123a0:	68db      	ldr	r3, [r3, #12]
 80123a2:	f003 0301 	and.w	r3, r3, #1
 80123a6:	2b00      	cmp	r3, #0
 80123a8:	d101      	bne.n	80123ae <_ZNK8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvE7isValidEv+0x28>
 80123aa:	2301      	movs	r3, #1
 80123ac:	e000      	b.n	80123b0 <_ZNK8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvE7isValidEv+0x2a>
 80123ae:	2300      	movs	r3, #0
 80123b0:	2b01      	cmp	r3, #1
 80123b2:	d001      	beq.n	80123b8 <_ZNK8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvE7isValidEv+0x32>
 80123b4:	2301      	movs	r3, #1
 80123b6:	e000      	b.n	80123ba <_ZNK8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvE7isValidEv+0x34>
 80123b8:	2300      	movs	r3, #0
    }
 80123ba:	4618      	mov	r0, r3
 80123bc:	370c      	adds	r7, #12
 80123be:	46bd      	mov	sp, r7
 80123c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80123c4:	4770      	bx	lr

080123c6 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv>:

    /**
     * Calls the member function. Do not call execute unless isValid() returns true (ie. a
     * pointer to the object and the function has been set).
     */
    virtual void execute()
 80123c6:	b580      	push	{r7, lr}
 80123c8:	b082      	sub	sp, #8
 80123ca:	af00      	add	r7, sp, #0
 80123cc:	6078      	str	r0, [r7, #4]
    {
        (pobject->*pmemfun_0)();
 80123ce:	687b      	ldr	r3, [r7, #4]
 80123d0:	685b      	ldr	r3, [r3, #4]
 80123d2:	687a      	ldr	r2, [r7, #4]
 80123d4:	68d2      	ldr	r2, [r2, #12]
 80123d6:	1052      	asrs	r2, r2, #1
 80123d8:	1899      	adds	r1, r3, r2
 80123da:	687b      	ldr	r3, [r7, #4]
 80123dc:	68db      	ldr	r3, [r3, #12]
 80123de:	f003 0301 	and.w	r3, r3, #1
 80123e2:	2b00      	cmp	r3, #0
 80123e4:	d102      	bne.n	80123ec <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv+0x26>
 80123e6:	687b      	ldr	r3, [r7, #4]
 80123e8:	689b      	ldr	r3, [r3, #8]
 80123ea:	e00a      	b.n	8012402 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv+0x3c>
 80123ec:	687b      	ldr	r3, [r7, #4]
 80123ee:	685b      	ldr	r3, [r3, #4]
 80123f0:	687a      	ldr	r2, [r7, #4]
 80123f2:	68d2      	ldr	r2, [r2, #12]
 80123f4:	1052      	asrs	r2, r2, #1
 80123f6:	4413      	add	r3, r2
 80123f8:	681b      	ldr	r3, [r3, #0]
 80123fa:	687a      	ldr	r2, [r7, #4]
 80123fc:	6892      	ldr	r2, [r2, #8]
 80123fe:	4413      	add	r3, r2
 8012400:	681b      	ldr	r3, [r3, #0]
 8012402:	4608      	mov	r0, r1
 8012404:	4798      	blx	r3
    }
 8012406:	bf00      	nop
 8012408:	3708      	adds	r7, #8
 801240a:	46bd      	mov	sp, r7
 801240c:	bd80      	pop	{r7, pc}

0801240e <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv>:
    /**
     * Function to check whether the Callback has been initialized with values.
     *
     * @return true If the callback is valid (i.e. safe to call execute).
     */
    virtual bool isValid() const
 801240e:	b480      	push	{r7}
 8012410:	b083      	sub	sp, #12
 8012412:	af00      	add	r7, sp, #0
 8012414:	6078      	str	r0, [r7, #4]
    {
        return (pobject != 0) && (pmemfun_0 != 0);
 8012416:	687b      	ldr	r3, [r7, #4]
 8012418:	685b      	ldr	r3, [r3, #4]
 801241a:	2b00      	cmp	r3, #0
 801241c:	d010      	beq.n	8012440 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x32>
 801241e:	687b      	ldr	r3, [r7, #4]
 8012420:	689b      	ldr	r3, [r3, #8]
 8012422:	2b00      	cmp	r3, #0
 8012424:	d107      	bne.n	8012436 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x28>
 8012426:	687b      	ldr	r3, [r7, #4]
 8012428:	68db      	ldr	r3, [r3, #12]
 801242a:	f003 0301 	and.w	r3, r3, #1
 801242e:	2b00      	cmp	r3, #0
 8012430:	d101      	bne.n	8012436 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x28>
 8012432:	2301      	movs	r3, #1
 8012434:	e000      	b.n	8012438 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x2a>
 8012436:	2300      	movs	r3, #0
 8012438:	2b01      	cmp	r3, #1
 801243a:	d001      	beq.n	8012440 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x32>
 801243c:	2301      	movs	r3, #1
 801243e:	e000      	b.n	8012442 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x34>
 8012440:	2300      	movs	r3, #0
    }
 8012442:	4618      	mov	r0, r3
 8012444:	370c      	adds	r7, #12
 8012446:	46bd      	mov	sp, r7
 8012448:	f85d 7b04 	ldr.w	r7, [sp], #4
 801244c:	4770      	bx	lr

0801244e <_ZN8touchgfx9colortypeC1Em>:
     *
     * @param  col The color.
     *
     * @see Color::getColorFrom24BitRGB
     */
    colortype(uint32_t col)
 801244e:	b480      	push	{r7}
 8012450:	b083      	sub	sp, #12
 8012452:	af00      	add	r7, sp, #0
 8012454:	6078      	str	r0, [r7, #4]
 8012456:	6039      	str	r1, [r7, #0]
    {
        color = col;
 8012458:	687b      	ldr	r3, [r7, #4]
 801245a:	683a      	ldr	r2, [r7, #0]
 801245c:	601a      	str	r2, [r3, #0]
    }
 801245e:	687b      	ldr	r3, [r7, #4]
 8012460:	4618      	mov	r0, r3
 8012462:	370c      	adds	r7, #12
 8012464:	46bd      	mov	sp, r7
 8012466:	f85d 7b04 	ldr.w	r7, [sp], #4
 801246a:	4770      	bx	lr

0801246c <_ZN8touchgfx4RectC1Ev>:
/** Class representing a Rectangle with a few convenient methods. */
class Rect
{
public:
    /** Default constructor. Resulting in an empty Rect with coordinates 0,0. */
    Rect()
 801246c:	b480      	push	{r7}
 801246e:	b083      	sub	sp, #12
 8012470:	af00      	add	r7, sp, #0
 8012472:	6078      	str	r0, [r7, #4]
    {
        x = 0;
 8012474:	687b      	ldr	r3, [r7, #4]
 8012476:	2200      	movs	r2, #0
 8012478:	801a      	strh	r2, [r3, #0]
        y = 0;
 801247a:	687b      	ldr	r3, [r7, #4]
 801247c:	2200      	movs	r2, #0
 801247e:	805a      	strh	r2, [r3, #2]
        width = 0;
 8012480:	687b      	ldr	r3, [r7, #4]
 8012482:	2200      	movs	r2, #0
 8012484:	809a      	strh	r2, [r3, #4]
        height = 0;
 8012486:	687b      	ldr	r3, [r7, #4]
 8012488:	2200      	movs	r2, #0
 801248a:	80da      	strh	r2, [r3, #6]
    }
 801248c:	687b      	ldr	r3, [r7, #4]
 801248e:	4618      	mov	r0, r3
 8012490:	370c      	adds	r7, #12
 8012492:	46bd      	mov	sp, r7
 8012494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012498:	4770      	bx	lr

0801249a <_ZN8touchgfx4RectC1Essss>:
     * @param  x      The x coordinate.
     * @param  y      The y coordinate.
     * @param  width  The width.
     * @param  height The height.
     */
    Rect(int16_t x, int16_t y, int16_t width, int16_t height)
 801249a:	b480      	push	{r7}
 801249c:	b085      	sub	sp, #20
 801249e:	af00      	add	r7, sp, #0
 80124a0:	60f8      	str	r0, [r7, #12]
 80124a2:	4608      	mov	r0, r1
 80124a4:	4611      	mov	r1, r2
 80124a6:	461a      	mov	r2, r3
 80124a8:	4603      	mov	r3, r0
 80124aa:	817b      	strh	r3, [r7, #10]
 80124ac:	460b      	mov	r3, r1
 80124ae:	813b      	strh	r3, [r7, #8]
 80124b0:	4613      	mov	r3, r2
 80124b2:	80fb      	strh	r3, [r7, #6]
    {
        this->x = x;
 80124b4:	68fb      	ldr	r3, [r7, #12]
 80124b6:	897a      	ldrh	r2, [r7, #10]
 80124b8:	801a      	strh	r2, [r3, #0]
        this->y = y;
 80124ba:	68fb      	ldr	r3, [r7, #12]
 80124bc:	893a      	ldrh	r2, [r7, #8]
 80124be:	805a      	strh	r2, [r3, #2]
        this->width = width;
 80124c0:	68fb      	ldr	r3, [r7, #12]
 80124c2:	88fa      	ldrh	r2, [r7, #6]
 80124c4:	809a      	strh	r2, [r3, #4]
        this->height = height;
 80124c6:	68fb      	ldr	r3, [r7, #12]
 80124c8:	8b3a      	ldrh	r2, [r7, #24]
 80124ca:	80da      	strh	r2, [r3, #6]
    }
 80124cc:	68fb      	ldr	r3, [r7, #12]
 80124ce:	4618      	mov	r0, r3
 80124d0:	3714      	adds	r7, #20
 80124d2:	46bd      	mov	sp, r7
 80124d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124d8:	4770      	bx	lr
	...

080124dc <_ZN8touchgfx8DrawableC1Ev>:
    Drawable()
 80124dc:	b580      	push	{r7, lr}
 80124de:	b084      	sub	sp, #16
 80124e0:	af02      	add	r7, sp, #8
 80124e2:	6078      	str	r0, [r7, #4]
          visible(true)
 80124e4:	4a13      	ldr	r2, [pc, #76]	; (8012534 <_ZN8touchgfx8DrawableC1Ev+0x58>)
 80124e6:	687b      	ldr	r3, [r7, #4]
 80124e8:	601a      	str	r2, [r3, #0]
 80124ea:	687b      	ldr	r3, [r7, #4]
 80124ec:	1d18      	adds	r0, r3, #4
 80124ee:	2300      	movs	r3, #0
 80124f0:	9300      	str	r3, [sp, #0]
 80124f2:	2300      	movs	r3, #0
 80124f4:	2200      	movs	r2, #0
 80124f6:	2100      	movs	r1, #0
 80124f8:	f7ff ffcf 	bl	801249a <_ZN8touchgfx4RectC1Essss>
 80124fc:	687b      	ldr	r3, [r7, #4]
 80124fe:	330c      	adds	r3, #12
 8012500:	4618      	mov	r0, r3
 8012502:	f7ff ffb3 	bl	801246c <_ZN8touchgfx4RectC1Ev>
 8012506:	687b      	ldr	r3, [r7, #4]
 8012508:	2200      	movs	r2, #0
 801250a:	615a      	str	r2, [r3, #20]
 801250c:	687b      	ldr	r3, [r7, #4]
 801250e:	2200      	movs	r2, #0
 8012510:	619a      	str	r2, [r3, #24]
 8012512:	687b      	ldr	r3, [r7, #4]
 8012514:	2200      	movs	r2, #0
 8012516:	61da      	str	r2, [r3, #28]
 8012518:	687b      	ldr	r3, [r7, #4]
 801251a:	2200      	movs	r2, #0
 801251c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8012520:	687b      	ldr	r3, [r7, #4]
 8012522:	2201      	movs	r2, #1
 8012524:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
 8012528:	687b      	ldr	r3, [r7, #4]
 801252a:	4618      	mov	r0, r3
 801252c:	3708      	adds	r7, #8
 801252e:	46bd      	mov	sp, r7
 8012530:	bd80      	pop	{r7, pc}
 8012532:	bf00      	nop
 8012534:	0802acf4 	.word	0x0802acf4

08012538 <_ZN8touchgfx6ScreenD1Ev>:
public:
    /** Initializes a new instance of the Screen class. */
    Screen();

    /** Finalizes an instance of the Screen class. */
    virtual ~Screen()
 8012538:	b580      	push	{r7, lr}
 801253a:	b082      	sub	sp, #8
 801253c:	af00      	add	r7, sp, #0
 801253e:	6078      	str	r0, [r7, #4]
    {
 8012540:	4a06      	ldr	r2, [pc, #24]	; (801255c <_ZN8touchgfx6ScreenD1Ev+0x24>)
 8012542:	687b      	ldr	r3, [r7, #4]
 8012544:	601a      	str	r2, [r3, #0]
 8012546:	687b      	ldr	r3, [r7, #4]
 8012548:	3304      	adds	r3, #4
 801254a:	4618      	mov	r0, r3
 801254c:	f000 f9fe 	bl	801294c <_ZN8touchgfx9ContainerD1Ev>
    }
 8012550:	687b      	ldr	r3, [r7, #4]
 8012552:	4618      	mov	r0, r3
 8012554:	3708      	adds	r7, #8
 8012556:	46bd      	mov	sp, r7
 8012558:	bd80      	pop	{r7, pc}
 801255a:	bf00      	nop
 801255c:	0802ade8 	.word	0x0802ade8

08012560 <_ZN8touchgfx6ScreenD0Ev>:
    virtual ~Screen()
 8012560:	b580      	push	{r7, lr}
 8012562:	b082      	sub	sp, #8
 8012564:	af00      	add	r7, sp, #0
 8012566:	6078      	str	r0, [r7, #4]
    }
 8012568:	6878      	ldr	r0, [r7, #4]
 801256a:	f7ff ffe5 	bl	8012538 <_ZN8touchgfx6ScreenD1Ev>
 801256e:	213c      	movs	r1, #60	; 0x3c
 8012570:	6878      	ldr	r0, [r7, #4]
 8012572:	f014 fdaa 	bl	80270ca <_ZdlPvj>
 8012576:	687b      	ldr	r3, [r7, #4]
 8012578:	4618      	mov	r0, r3
 801257a:	3708      	adds	r7, #8
 801257c:	46bd      	mov	sp, r7
 801257e:	bd80      	pop	{r7, pc}

08012580 <_ZN8touchgfx6Screen11setupScreenEv>:
     * version does nothing, but place any screen specific initialization code in an
     * overridden version.
     *
     * @see Application::switchScreen
     */
    virtual void setupScreen()
 8012580:	b480      	push	{r7}
 8012582:	b083      	sub	sp, #12
 8012584:	af00      	add	r7, sp, #0
 8012586:	6078      	str	r0, [r7, #4]
    {
    }
 8012588:	bf00      	nop
 801258a:	370c      	adds	r7, #12
 801258c:	46bd      	mov	sp, r7
 801258e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012592:	4770      	bx	lr

08012594 <_ZN8touchgfx6Screen15afterTransitionEv>:
     * version does nothing, but override to do screen specific initialization code that has
     * to be done after the transition to the screen.
     *
     * @see Application::handleTickEvent
     */
    virtual void afterTransition()
 8012594:	b480      	push	{r7}
 8012596:	b083      	sub	sp, #12
 8012598:	af00      	add	r7, sp, #0
 801259a:	6078      	str	r0, [r7, #4]
    {
    }
 801259c:	bf00      	nop
 801259e:	370c      	adds	r7, #12
 80125a0:	46bd      	mov	sp, r7
 80125a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125a6:	4770      	bx	lr

080125a8 <_ZN8touchgfx6Screen14tearDownScreenEv>:
     * Base version does nothing, but place any screen specific cleanup code in an
     * overridden version.
     *
     * @see Application::switchScreen
     */
    virtual void tearDownScreen()
 80125a8:	b480      	push	{r7}
 80125aa:	b083      	sub	sp, #12
 80125ac:	af00      	add	r7, sp, #0
 80125ae:	6078      	str	r0, [r7, #4]
    {
    }
 80125b0:	bf00      	nop
 80125b2:	370c      	adds	r7, #12
 80125b4:	46bd      	mov	sp, r7
 80125b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125ba:	4770      	bx	lr

080125bc <_ZN8touchgfx6Screen15handleTickEventEv>:

    /**
     * Called by the Application on the current screen with a frequency of
     * Application::TICK_INTERVAL_MS.
     */
    virtual void handleTickEvent()
 80125bc:	b480      	push	{r7}
 80125be:	b083      	sub	sp, #12
 80125c0:	af00      	add	r7, sp, #0
 80125c2:	6078      	str	r0, [r7, #4]
    {
    }
 80125c4:	bf00      	nop
 80125c6:	370c      	adds	r7, #12
 80125c8:	46bd      	mov	sp, r7
 80125ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125ce:	4770      	bx	lr

080125d0 <_ZN8touchgfx6Screen14handleKeyEventEh>:
     * Called by the Application on the reception of a "key", the meaning of which is
     * platform/application specific. Default implementation does nothing.
     *
     * @param  key The key to handle.
     */
    virtual void handleKeyEvent(uint8_t key)
 80125d0:	b480      	push	{r7}
 80125d2:	b083      	sub	sp, #12
 80125d4:	af00      	add	r7, sp, #0
 80125d6:	6078      	str	r0, [r7, #4]
 80125d8:	460b      	mov	r3, r1
 80125da:	70fb      	strb	r3, [r7, #3]
    {
    }
 80125dc:	bf00      	nop
 80125de:	370c      	adds	r7, #12
 80125e0:	46bd      	mov	sp, r7
 80125e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125e6:	4770      	bx	lr

080125e8 <_ZN8touchgfx6Screen3addERNS_8DrawableE>:
     * @param [in] d The Drawable to add.
     *
     * @note Must not be called with a Drawable that was already added to the screen. If in doubt,
     *       call remove() first.
     */
    void add(Drawable& d)
 80125e8:	b580      	push	{r7, lr}
 80125ea:	b082      	sub	sp, #8
 80125ec:	af00      	add	r7, sp, #0
 80125ee:	6078      	str	r0, [r7, #4]
 80125f0:	6039      	str	r1, [r7, #0]
    {
        container.add(d);
 80125f2:	687b      	ldr	r3, [r7, #4]
 80125f4:	3304      	adds	r3, #4
 80125f6:	6839      	ldr	r1, [r7, #0]
 80125f8:	4618      	mov	r0, r3
 80125fa:	f002 ff03 	bl	8015404 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    }
 80125fe:	bf00      	nop
 8012600:	3708      	adds	r7, #8
 8012602:	46bd      	mov	sp, r7
 8012604:	bd80      	pop	{r7, pc}
	...

08012608 <_ZN8touchgfx6WidgetC1Ev>:
 8012608:	b580      	push	{r7, lr}
 801260a:	b082      	sub	sp, #8
 801260c:	af00      	add	r7, sp, #0
 801260e:	6078      	str	r0, [r7, #4]
 8012610:	687b      	ldr	r3, [r7, #4]
 8012612:	4618      	mov	r0, r3
 8012614:	f7ff ff62 	bl	80124dc <_ZN8touchgfx8DrawableC1Ev>
 8012618:	4a03      	ldr	r2, [pc, #12]	; (8012628 <_ZN8touchgfx6WidgetC1Ev+0x20>)
 801261a:	687b      	ldr	r3, [r7, #4]
 801261c:	601a      	str	r2, [r3, #0]
 801261e:	687b      	ldr	r3, [r7, #4]
 8012620:	4618      	mov	r0, r3
 8012622:	3708      	adds	r7, #8
 8012624:	46bd      	mov	sp, r7
 8012626:	bd80      	pop	{r7, pc}
 8012628:	0802906c 	.word	0x0802906c

0801262c <_ZN8touchgfx3BoxC1Ev>:
 */
class Box : public Widget
{
public:
    /** Construct a new Box with a default alpha value of 255 (solid) */
    Box()
 801262c:	b580      	push	{r7, lr}
 801262e:	b082      	sub	sp, #8
 8012630:	af00      	add	r7, sp, #0
 8012632:	6078      	str	r0, [r7, #4]
        : Widget(), alpha(255), color(0)
 8012634:	687b      	ldr	r3, [r7, #4]
 8012636:	4618      	mov	r0, r3
 8012638:	2326      	movs	r3, #38	; 0x26
 801263a:	461a      	mov	r2, r3
 801263c:	2100      	movs	r1, #0
 801263e:	f014 fef9 	bl	8027434 <memset>
 8012642:	687b      	ldr	r3, [r7, #4]
 8012644:	4618      	mov	r0, r3
 8012646:	f7ff ffdf 	bl	8012608 <_ZN8touchgfx6WidgetC1Ev>
 801264a:	4a09      	ldr	r2, [pc, #36]	; (8012670 <_ZN8touchgfx3BoxC1Ev+0x44>)
 801264c:	687b      	ldr	r3, [r7, #4]
 801264e:	601a      	str	r2, [r3, #0]
 8012650:	687b      	ldr	r3, [r7, #4]
 8012652:	22ff      	movs	r2, #255	; 0xff
 8012654:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
 8012658:	687b      	ldr	r3, [r7, #4]
 801265a:	3328      	adds	r3, #40	; 0x28
 801265c:	2100      	movs	r1, #0
 801265e:	4618      	mov	r0, r3
 8012660:	f7ff fef5 	bl	801244e <_ZN8touchgfx9colortypeC1Em>
    {
    }
 8012664:	687b      	ldr	r3, [r7, #4]
 8012666:	4618      	mov	r0, r3
 8012668:	3708      	adds	r7, #8
 801266a:	46bd      	mov	sp, r7
 801266c:	bd80      	pop	{r7, pc}
 801266e:	bf00      	nop
 8012670:	0802a950 	.word	0x0802a950

08012674 <_ZN8touchgfx3Box8setColorENS_9colortypeE>:
     *
     * @param  color The color of the box.
     *
     * @see getColor, Color::getColorFrom24BitRGB
     */
    void setColor(colortype color)
 8012674:	b480      	push	{r7}
 8012676:	b083      	sub	sp, #12
 8012678:	af00      	add	r7, sp, #0
 801267a:	6078      	str	r0, [r7, #4]
 801267c:	6039      	str	r1, [r7, #0]
    {
        this->color = color;
 801267e:	687b      	ldr	r3, [r7, #4]
 8012680:	683a      	ldr	r2, [r7, #0]
 8012682:	629a      	str	r2, [r3, #40]	; 0x28
    }
 8012684:	bf00      	nop
 8012686:	370c      	adds	r7, #12
 8012688:	46bd      	mov	sp, r7
 801268a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801268e:	4770      	bx	lr

08012690 <_ZN8touchgfx9TypedTextC1Et>:
    explicit TypedText(const TypedTextId id = TYPED_TEXT_INVALID)
 8012690:	b480      	push	{r7}
 8012692:	b083      	sub	sp, #12
 8012694:	af00      	add	r7, sp, #0
 8012696:	6078      	str	r0, [r7, #4]
 8012698:	460b      	mov	r3, r1
 801269a:	807b      	strh	r3, [r7, #2]
        : typedTextId(id)
 801269c:	4a06      	ldr	r2, [pc, #24]	; (80126b8 <_ZN8touchgfx9TypedTextC1Et+0x28>)
 801269e:	687b      	ldr	r3, [r7, #4]
 80126a0:	601a      	str	r2, [r3, #0]
 80126a2:	687b      	ldr	r3, [r7, #4]
 80126a4:	887a      	ldrh	r2, [r7, #2]
 80126a6:	809a      	strh	r2, [r3, #4]
    }
 80126a8:	687b      	ldr	r3, [r7, #4]
 80126aa:	4618      	mov	r0, r3
 80126ac:	370c      	adds	r7, #12
 80126ae:	46bd      	mov	sp, r7
 80126b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126b4:	4770      	bx	lr
 80126b6:	bf00      	nop
 80126b8:	08028fa0 	.word	0x08028fa0

080126bc <_ZN8touchgfx8TextAreaC1Ev>:
 *       the pointer remains valid when drawing.
 */
class TextArea : public Widget
{
public:
    TextArea()
 80126bc:	b580      	push	{r7, lr}
 80126be:	b082      	sub	sp, #8
 80126c0:	af00      	add	r7, sp, #0
 80126c2:	6078      	str	r0, [r7, #4]
        : Widget(), typedText(TYPED_TEXT_INVALID), color(0), linespace(0), alpha(255), indentation(0), rotation(TEXT_ROTATE_0), wideTextAction(WIDE_TEXT_NONE)
 80126c4:	687b      	ldr	r3, [r7, #4]
 80126c6:	4618      	mov	r0, r3
 80126c8:	2326      	movs	r3, #38	; 0x26
 80126ca:	461a      	mov	r2, r3
 80126cc:	2100      	movs	r1, #0
 80126ce:	f014 feb1 	bl	8027434 <memset>
 80126d2:	687b      	ldr	r3, [r7, #4]
 80126d4:	4618      	mov	r0, r3
 80126d6:	f7ff ff97 	bl	8012608 <_ZN8touchgfx6WidgetC1Ev>
 80126da:	4a14      	ldr	r2, [pc, #80]	; (801272c <_ZN8touchgfx8TextAreaC1Ev+0x70>)
 80126dc:	687b      	ldr	r3, [r7, #4]
 80126de:	601a      	str	r2, [r3, #0]
 80126e0:	687b      	ldr	r3, [r7, #4]
 80126e2:	3328      	adds	r3, #40	; 0x28
 80126e4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80126e8:	4618      	mov	r0, r3
 80126ea:	f7ff ffd1 	bl	8012690 <_ZN8touchgfx9TypedTextC1Et>
 80126ee:	687b      	ldr	r3, [r7, #4]
 80126f0:	3330      	adds	r3, #48	; 0x30
 80126f2:	2100      	movs	r1, #0
 80126f4:	4618      	mov	r0, r3
 80126f6:	f7ff feaa 	bl	801244e <_ZN8touchgfx9colortypeC1Em>
 80126fa:	687b      	ldr	r3, [r7, #4]
 80126fc:	2200      	movs	r2, #0
 80126fe:	869a      	strh	r2, [r3, #52]	; 0x34
 8012700:	687b      	ldr	r3, [r7, #4]
 8012702:	22ff      	movs	r2, #255	; 0xff
 8012704:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
 8012708:	687b      	ldr	r3, [r7, #4]
 801270a:	2200      	movs	r2, #0
 801270c:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
 8012710:	687b      	ldr	r3, [r7, #4]
 8012712:	2200      	movs	r2, #0
 8012714:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 8012718:	687b      	ldr	r3, [r7, #4]
 801271a:	2200      	movs	r2, #0
 801271c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    {
    }
 8012720:	687b      	ldr	r3, [r7, #4]
 8012722:	4618      	mov	r0, r3
 8012724:	3708      	adds	r7, #8
 8012726:	46bd      	mov	sp, r7
 8012728:	bd80      	pop	{r7, pc}
 801272a:	bf00      	nop
 801272c:	0802a8a8 	.word	0x0802a8a8

08012730 <_ZN8touchgfx4ViewI16Screen1PresenterED1Ev>:
class View : public Screen
 8012730:	b580      	push	{r7, lr}
 8012732:	b082      	sub	sp, #8
 8012734:	af00      	add	r7, sp, #0
 8012736:	6078      	str	r0, [r7, #4]
 8012738:	4a05      	ldr	r2, [pc, #20]	; (8012750 <_ZN8touchgfx4ViewI16Screen1PresenterED1Ev+0x20>)
 801273a:	687b      	ldr	r3, [r7, #4]
 801273c:	601a      	str	r2, [r3, #0]
 801273e:	687b      	ldr	r3, [r7, #4]
 8012740:	4618      	mov	r0, r3
 8012742:	f7ff fef9 	bl	8012538 <_ZN8touchgfx6ScreenD1Ev>
 8012746:	687b      	ldr	r3, [r7, #4]
 8012748:	4618      	mov	r0, r3
 801274a:	3708      	adds	r7, #8
 801274c:	46bd      	mov	sp, r7
 801274e:	bd80      	pop	{r7, pc}
 8012750:	0802922c 	.word	0x0802922c

08012754 <_ZN8touchgfx4ViewI16Screen1PresenterED0Ev>:
 8012754:	b580      	push	{r7, lr}
 8012756:	b082      	sub	sp, #8
 8012758:	af00      	add	r7, sp, #0
 801275a:	6078      	str	r0, [r7, #4]
 801275c:	6878      	ldr	r0, [r7, #4]
 801275e:	f7ff ffe7 	bl	8012730 <_ZN8touchgfx4ViewI16Screen1PresenterED1Ev>
 8012762:	2140      	movs	r1, #64	; 0x40
 8012764:	6878      	ldr	r0, [r7, #4]
 8012766:	f014 fcb0 	bl	80270ca <_ZdlPvj>
 801276a:	687b      	ldr	r3, [r7, #4]
 801276c:	4618      	mov	r0, r3
 801276e:	3708      	adds	r7, #8
 8012770:	46bd      	mov	sp, r7
 8012772:	bd80      	pop	{r7, pc}

08012774 <_ZN15Screen1ViewBaseD1Ev>:

class Screen1ViewBase : public touchgfx::View<Screen1Presenter>
{
public:
    Screen1ViewBase();
    virtual ~Screen1ViewBase() {}
 8012774:	b580      	push	{r7, lr}
 8012776:	b082      	sub	sp, #8
 8012778:	af00      	add	r7, sp, #0
 801277a:	6078      	str	r0, [r7, #4]
 801277c:	4a0a      	ldr	r2, [pc, #40]	; (80127a8 <_ZN15Screen1ViewBaseD1Ev+0x34>)
 801277e:	687b      	ldr	r3, [r7, #4]
 8012780:	601a      	str	r2, [r3, #0]
 8012782:	687b      	ldr	r3, [r7, #4]
 8012784:	336c      	adds	r3, #108	; 0x6c
 8012786:	4618      	mov	r0, r3
 8012788:	f000 f924 	bl	80129d4 <_ZN8touchgfx8TextAreaD1Ev>
 801278c:	687b      	ldr	r3, [r7, #4]
 801278e:	3340      	adds	r3, #64	; 0x40
 8012790:	4618      	mov	r0, r3
 8012792:	f000 f8fd 	bl	8012990 <_ZN8touchgfx3BoxD1Ev>
 8012796:	687b      	ldr	r3, [r7, #4]
 8012798:	4618      	mov	r0, r3
 801279a:	f7ff ffc9 	bl	8012730 <_ZN8touchgfx4ViewI16Screen1PresenterED1Ev>
 801279e:	687b      	ldr	r3, [r7, #4]
 80127a0:	4618      	mov	r0, r3
 80127a2:	3708      	adds	r7, #8
 80127a4:	46bd      	mov	sp, r7
 80127a6:	bd80      	pop	{r7, pc}
 80127a8:	080291f8 	.word	0x080291f8

080127ac <_ZN15Screen1ViewBaseD0Ev>:
 80127ac:	b580      	push	{r7, lr}
 80127ae:	b082      	sub	sp, #8
 80127b0:	af00      	add	r7, sp, #0
 80127b2:	6078      	str	r0, [r7, #4]
 80127b4:	6878      	ldr	r0, [r7, #4]
 80127b6:	f7ff ffdd 	bl	8012774 <_ZN15Screen1ViewBaseD1Ev>
 80127ba:	21a8      	movs	r1, #168	; 0xa8
 80127bc:	6878      	ldr	r0, [r7, #4]
 80127be:	f014 fc84 	bl	80270ca <_ZdlPvj>
 80127c2:	687b      	ldr	r3, [r7, #4]
 80127c4:	4618      	mov	r0, r3
 80127c6:	3708      	adds	r7, #8
 80127c8:	46bd      	mov	sp, r7
 80127ca:	bd80      	pop	{r7, pc}

080127cc <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>:
     *
     * @note This function is not available to call before the LCD has been setup, because the
     *       color depth is required. Consider using the function getColorFromRGB for a
     *       specific class, e.g. LCD16::getColorFromRGB().
     */
    static colortype getColorFrom24BitRGB(uint8_t red, uint8_t green, uint8_t blue)
 80127cc:	b590      	push	{r4, r7, lr}
 80127ce:	b083      	sub	sp, #12
 80127d0:	af00      	add	r7, sp, #0
 80127d2:	4603      	mov	r3, r0
 80127d4:	71fb      	strb	r3, [r7, #7]
 80127d6:	460b      	mov	r3, r1
 80127d8:	71bb      	strb	r3, [r7, #6]
 80127da:	4613      	mov	r3, r2
 80127dc:	717b      	strb	r3, [r7, #5]
    {
        assert(HAL::getInstance() && "Cannot set color before HAL is initialized");
 80127de:	f7fe fd51 	bl	8011284 <_ZN8touchgfx3HAL11getInstanceEv>
 80127e2:	4603      	mov	r3, r0
 80127e4:	2b00      	cmp	r3, #0
 80127e6:	d105      	bne.n	80127f4 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh+0x28>
 80127e8:	4b0a      	ldr	r3, [pc, #40]	; (8012814 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh+0x48>)
 80127ea:	4a0b      	ldr	r2, [pc, #44]	; (8012818 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh+0x4c>)
 80127ec:	2135      	movs	r1, #53	; 0x35
 80127ee:	480b      	ldr	r0, [pc, #44]	; (801281c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh+0x50>)
 80127f0:	f014 fc9a 	bl	8027128 <__assert_func>
 80127f4:	bf00      	nop
        return HAL::lcd().getColorFrom24BitRGB(red, green, blue);
 80127f6:	f7fe fd51 	bl	801129c <_ZN8touchgfx3HAL3lcdEv>
 80127fa:	6803      	ldr	r3, [r0, #0]
 80127fc:	3328      	adds	r3, #40	; 0x28
 80127fe:	681c      	ldr	r4, [r3, #0]
 8012800:	797b      	ldrb	r3, [r7, #5]
 8012802:	79ba      	ldrb	r2, [r7, #6]
 8012804:	79f9      	ldrb	r1, [r7, #7]
 8012806:	47a0      	blx	r4
 8012808:	4603      	mov	r3, r0
    }
 801280a:	4618      	mov	r0, r3
 801280c:	370c      	adds	r7, #12
 801280e:	46bd      	mov	sp, r7
 8012810:	bd90      	pop	{r4, r7, pc}
 8012812:	bf00      	nop
 8012814:	08028808 	.word	0x08028808
 8012818:	0802884c 	.word	0x0802884c
 801281c:	080288a8 	.word	0x080288a8

08012820 <_ZN15Screen1ViewBaseC1Ev>:
/*********************************************************************************/
#include <gui_generated/screen1_screen/Screen1ViewBase.hpp>
#include <touchgfx/Color.hpp>
#include <texts/TextKeysAndLanguages.hpp>

Screen1ViewBase::Screen1ViewBase()
 8012820:	b590      	push	{r4, r7, lr}
 8012822:	b08b      	sub	sp, #44	; 0x2c
 8012824:	af02      	add	r7, sp, #8
 8012826:	6078      	str	r0, [r7, #4]
 8012828:	687b      	ldr	r3, [r7, #4]
 801282a:	4618      	mov	r0, r3
 801282c:	f000 f878 	bl	8012920 <_ZN8touchgfx4ViewI16Screen1PresenterEC1Ev>
 8012830:	4a35      	ldr	r2, [pc, #212]	; (8012908 <_ZN15Screen1ViewBaseC1Ev+0xe8>)
 8012832:	687b      	ldr	r3, [r7, #4]
 8012834:	601a      	str	r2, [r3, #0]
 8012836:	687b      	ldr	r3, [r7, #4]
 8012838:	3340      	adds	r3, #64	; 0x40
 801283a:	4618      	mov	r0, r3
 801283c:	f7ff fef6 	bl	801262c <_ZN8touchgfx3BoxC1Ev>
 8012840:	687b      	ldr	r3, [r7, #4]
 8012842:	336c      	adds	r3, #108	; 0x6c
 8012844:	4618      	mov	r0, r3
 8012846:	f7ff ff39 	bl	80126bc <_ZN8touchgfx8TextAreaC1Ev>
{

    __background.setPosition(0, 0, 480, 272);
 801284a:	687b      	ldr	r3, [r7, #4]
 801284c:	f103 0040 	add.w	r0, r3, #64	; 0x40
 8012850:	f44f 7388 	mov.w	r3, #272	; 0x110
 8012854:	9300      	str	r3, [sp, #0]
 8012856:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 801285a:	2200      	movs	r2, #0
 801285c:	2100      	movs	r1, #0
 801285e:	f7fe fbce 	bl	8010ffe <_ZN8touchgfx8Drawable11setPositionEssss>
    __background.setColor(touchgfx::Color::getColorFrom24BitRGB(0, 0, 0));
 8012862:	687b      	ldr	r3, [r7, #4]
 8012864:	f103 0440 	add.w	r4, r3, #64	; 0x40
 8012868:	2200      	movs	r2, #0
 801286a:	2100      	movs	r1, #0
 801286c:	2000      	movs	r0, #0
 801286e:	f7ff ffad 	bl	80127cc <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8012872:	4603      	mov	r3, r0
 8012874:	4619      	mov	r1, r3
 8012876:	4620      	mov	r0, r4
 8012878:	f7ff fefc 	bl	8012674 <_ZN8touchgfx3Box8setColorENS_9colortypeE>

    textArea1.setXY(227, 124);
 801287c:	687b      	ldr	r3, [r7, #4]
 801287e:	336c      	adds	r3, #108	; 0x6c
 8012880:	227c      	movs	r2, #124	; 0x7c
 8012882:	21e3      	movs	r1, #227	; 0xe3
 8012884:	4618      	mov	r0, r3
 8012886:	f7fe fc06 	bl	8011096 <_ZN8touchgfx8Drawable5setXYEss>
    textArea1.setColor(touchgfx::Color::getColorFrom24BitRGB(240, 18, 18));
 801288a:	687b      	ldr	r3, [r7, #4]
 801288c:	f103 046c 	add.w	r4, r3, #108	; 0x6c
 8012890:	2212      	movs	r2, #18
 8012892:	2112      	movs	r1, #18
 8012894:	20f0      	movs	r0, #240	; 0xf0
 8012896:	f7ff ff99 	bl	80127cc <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 801289a:	4603      	mov	r3, r0
 801289c:	617c      	str	r4, [r7, #20]
 801289e:	60bb      	str	r3, [r7, #8]
     *
     * @param  color The color to use.
     */
    FORCE_INLINE_FUNCTION void setColor(colortype color)
    {
        this->color = color;
 80128a0:	697b      	ldr	r3, [r7, #20]
 80128a2:	68ba      	ldr	r2, [r7, #8]
 80128a4:	631a      	str	r2, [r3, #48]	; 0x30
    }
 80128a6:	bf00      	nop
    textArea1.setLinespacing(0);
 80128a8:	687b      	ldr	r3, [r7, #4]
 80128aa:	336c      	adds	r3, #108	; 0x6c
 80128ac:	61fb      	str	r3, [r7, #28]
 80128ae:	2300      	movs	r3, #0
 80128b0:	837b      	strh	r3, [r7, #26]
     *
     * @see getLinespacing
     */
    FORCE_INLINE_FUNCTION void setLinespacing(int16_t space)
    {
        linespace = space;
 80128b2:	69fb      	ldr	r3, [r7, #28]
 80128b4:	8b7a      	ldrh	r2, [r7, #26]
 80128b6:	869a      	strh	r2, [r3, #52]	; 0x34
    }
 80128b8:	bf00      	nop
    textArea1.setTypedText(touchgfx::TypedText(T_SINGLEUSEID1));
 80128ba:	687b      	ldr	r3, [r7, #4]
 80128bc:	f103 046c 	add.w	r4, r3, #108	; 0x6c
 80128c0:	f107 030c 	add.w	r3, r7, #12
 80128c4:	2100      	movs	r1, #0
 80128c6:	4618      	mov	r0, r3
 80128c8:	f7ff fee2 	bl	8012690 <_ZN8touchgfx9TypedTextC1Et>
 80128cc:	f107 030c 	add.w	r3, r7, #12
 80128d0:	4619      	mov	r1, r3
 80128d2:	4620      	mov	r0, r4
 80128d4:	f004 fb69 	bl	8016faa <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>
 80128d8:	f107 030c 	add.w	r3, r7, #12
 80128dc:	4618      	mov	r0, r3
 80128de:	f7fe f8f9 	bl	8010ad4 <_ZN8touchgfx9TypedTextD1Ev>

    add(__background);
 80128e2:	687a      	ldr	r2, [r7, #4]
 80128e4:	687b      	ldr	r3, [r7, #4]
 80128e6:	3340      	adds	r3, #64	; 0x40
 80128e8:	4619      	mov	r1, r3
 80128ea:	4610      	mov	r0, r2
 80128ec:	f7ff fe7c 	bl	80125e8 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(textArea1);
 80128f0:	687a      	ldr	r2, [r7, #4]
 80128f2:	687b      	ldr	r3, [r7, #4]
 80128f4:	336c      	adds	r3, #108	; 0x6c
 80128f6:	4619      	mov	r1, r3
 80128f8:	4610      	mov	r0, r2
 80128fa:	f7ff fe75 	bl	80125e8 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
}
 80128fe:	687b      	ldr	r3, [r7, #4]
 8012900:	4618      	mov	r0, r3
 8012902:	3724      	adds	r7, #36	; 0x24
 8012904:	46bd      	mov	sp, r7
 8012906:	bd90      	pop	{r4, r7, pc}
 8012908:	080291f8 	.word	0x080291f8

0801290c <_ZN15Screen1ViewBase11setupScreenEv>:

void Screen1ViewBase::setupScreen()
{
 801290c:	b480      	push	{r7}
 801290e:	b083      	sub	sp, #12
 8012910:	af00      	add	r7, sp, #0
 8012912:	6078      	str	r0, [r7, #4]

}
 8012914:	bf00      	nop
 8012916:	370c      	adds	r7, #12
 8012918:	46bd      	mov	sp, r7
 801291a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801291e:	4770      	bx	lr

08012920 <_ZN8touchgfx4ViewI16Screen1PresenterEC1Ev>:
    View()
 8012920:	b580      	push	{r7, lr}
 8012922:	b082      	sub	sp, #8
 8012924:	af00      	add	r7, sp, #0
 8012926:	6078      	str	r0, [r7, #4]
        : presenter(0)
 8012928:	687b      	ldr	r3, [r7, #4]
 801292a:	4618      	mov	r0, r3
 801292c:	f007 fbb0 	bl	801a090 <_ZN8touchgfx6ScreenC1Ev>
 8012930:	4a05      	ldr	r2, [pc, #20]	; (8012948 <_ZN8touchgfx4ViewI16Screen1PresenterEC1Ev+0x28>)
 8012932:	687b      	ldr	r3, [r7, #4]
 8012934:	601a      	str	r2, [r3, #0]
 8012936:	687b      	ldr	r3, [r7, #4]
 8012938:	2200      	movs	r2, #0
 801293a:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 801293c:	687b      	ldr	r3, [r7, #4]
 801293e:	4618      	mov	r0, r3
 8012940:	3708      	adds	r7, #8
 8012942:	46bd      	mov	sp, r7
 8012944:	bd80      	pop	{r7, pc}
 8012946:	bf00      	nop
 8012948:	0802922c 	.word	0x0802922c

0801294c <_ZN8touchgfx9ContainerD1Ev>:
 * intersect with the geometry of the container will be visible (e.g. setting a
 * container's width to 0 will render all children invisible).
 *
 * @see Drawable
 */
class Container : public Drawable
 801294c:	b580      	push	{r7, lr}
 801294e:	b082      	sub	sp, #8
 8012950:	af00      	add	r7, sp, #0
 8012952:	6078      	str	r0, [r7, #4]
 8012954:	4a05      	ldr	r2, [pc, #20]	; (801296c <_ZN8touchgfx9ContainerD1Ev+0x20>)
 8012956:	687b      	ldr	r3, [r7, #4]
 8012958:	601a      	str	r2, [r3, #0]
 801295a:	687b      	ldr	r3, [r7, #4]
 801295c:	4618      	mov	r0, r3
 801295e:	f7fe fb23 	bl	8010fa8 <_ZN8touchgfx8DrawableD1Ev>
 8012962:	687b      	ldr	r3, [r7, #4]
 8012964:	4618      	mov	r0, r3
 8012966:	3708      	adds	r7, #8
 8012968:	46bd      	mov	sp, r7
 801296a:	bd80      	pop	{r7, pc}
 801296c:	08029a78 	.word	0x08029a78

08012970 <_ZN8touchgfx9ContainerD0Ev>:
 8012970:	b580      	push	{r7, lr}
 8012972:	b082      	sub	sp, #8
 8012974:	af00      	add	r7, sp, #0
 8012976:	6078      	str	r0, [r7, #4]
 8012978:	6878      	ldr	r0, [r7, #4]
 801297a:	f7ff ffe7 	bl	801294c <_ZN8touchgfx9ContainerD1Ev>
 801297e:	212c      	movs	r1, #44	; 0x2c
 8012980:	6878      	ldr	r0, [r7, #4]
 8012982:	f014 fba2 	bl	80270ca <_ZdlPvj>
 8012986:	687b      	ldr	r3, [r7, #4]
 8012988:	4618      	mov	r0, r3
 801298a:	3708      	adds	r7, #8
 801298c:	46bd      	mov	sp, r7
 801298e:	bd80      	pop	{r7, pc}

08012990 <_ZN8touchgfx3BoxD1Ev>:
class Box : public Widget
 8012990:	b580      	push	{r7, lr}
 8012992:	b082      	sub	sp, #8
 8012994:	af00      	add	r7, sp, #0
 8012996:	6078      	str	r0, [r7, #4]
 8012998:	4a05      	ldr	r2, [pc, #20]	; (80129b0 <_ZN8touchgfx3BoxD1Ev+0x20>)
 801299a:	687b      	ldr	r3, [r7, #4]
 801299c:	601a      	str	r2, [r3, #0]
 801299e:	687b      	ldr	r3, [r7, #4]
 80129a0:	4618      	mov	r0, r3
 80129a2:	f7fe fe21 	bl	80115e8 <_ZN8touchgfx6WidgetD1Ev>
 80129a6:	687b      	ldr	r3, [r7, #4]
 80129a8:	4618      	mov	r0, r3
 80129aa:	3708      	adds	r7, #8
 80129ac:	46bd      	mov	sp, r7
 80129ae:	bd80      	pop	{r7, pc}
 80129b0:	0802a950 	.word	0x0802a950

080129b4 <_ZN8touchgfx3BoxD0Ev>:
 80129b4:	b580      	push	{r7, lr}
 80129b6:	b082      	sub	sp, #8
 80129b8:	af00      	add	r7, sp, #0
 80129ba:	6078      	str	r0, [r7, #4]
 80129bc:	6878      	ldr	r0, [r7, #4]
 80129be:	f7ff ffe7 	bl	8012990 <_ZN8touchgfx3BoxD1Ev>
 80129c2:	212c      	movs	r1, #44	; 0x2c
 80129c4:	6878      	ldr	r0, [r7, #4]
 80129c6:	f014 fb80 	bl	80270ca <_ZdlPvj>
 80129ca:	687b      	ldr	r3, [r7, #4]
 80129cc:	4618      	mov	r0, r3
 80129ce:	3708      	adds	r7, #8
 80129d0:	46bd      	mov	sp, r7
 80129d2:	bd80      	pop	{r7, pc}

080129d4 <_ZN8touchgfx8TextAreaD1Ev>:
class TextArea : public Widget
 80129d4:	b580      	push	{r7, lr}
 80129d6:	b082      	sub	sp, #8
 80129d8:	af00      	add	r7, sp, #0
 80129da:	6078      	str	r0, [r7, #4]
 80129dc:	4a08      	ldr	r2, [pc, #32]	; (8012a00 <_ZN8touchgfx8TextAreaD1Ev+0x2c>)
 80129de:	687b      	ldr	r3, [r7, #4]
 80129e0:	601a      	str	r2, [r3, #0]
 80129e2:	687b      	ldr	r3, [r7, #4]
 80129e4:	3328      	adds	r3, #40	; 0x28
 80129e6:	4618      	mov	r0, r3
 80129e8:	f7fe f874 	bl	8010ad4 <_ZN8touchgfx9TypedTextD1Ev>
 80129ec:	687b      	ldr	r3, [r7, #4]
 80129ee:	4618      	mov	r0, r3
 80129f0:	f7fe fdfa 	bl	80115e8 <_ZN8touchgfx6WidgetD1Ev>
 80129f4:	687b      	ldr	r3, [r7, #4]
 80129f6:	4618      	mov	r0, r3
 80129f8:	3708      	adds	r7, #8
 80129fa:	46bd      	mov	sp, r7
 80129fc:	bd80      	pop	{r7, pc}
 80129fe:	bf00      	nop
 8012a00:	0802a8a8 	.word	0x0802a8a8

08012a04 <_ZN8touchgfx8TextAreaD0Ev>:
 8012a04:	b580      	push	{r7, lr}
 8012a06:	b082      	sub	sp, #8
 8012a08:	af00      	add	r7, sp, #0
 8012a0a:	6078      	str	r0, [r7, #4]
 8012a0c:	6878      	ldr	r0, [r7, #4]
 8012a0e:	f7ff ffe1 	bl	80129d4 <_ZN8touchgfx8TextAreaD1Ev>
 8012a12:	213c      	movs	r1, #60	; 0x3c
 8012a14:	6878      	ldr	r0, [r7, #4]
 8012a16:	f014 fb58 	bl	80270ca <_ZdlPvj>
 8012a1a:	687b      	ldr	r3, [r7, #4]
 8012a1c:	4618      	mov	r0, r3
 8012a1e:	3708      	adds	r7, #8
 8012a20:	46bd      	mov	sp, r7
 8012a22:	bd80      	pop	{r7, pc}

08012a24 <_ZN8touchgfx6BitmapC1Et>:
     * Creates and binds a Bitmap instance to the corresponding entry in the BitmapData
     * array.
     *
     * @param  id (Optional) The unique bitmap identifier.
     */
    Bitmap(const BitmapId id = BITMAP_INVALID)
 8012a24:	b480      	push	{r7}
 8012a26:	b083      	sub	sp, #12
 8012a28:	af00      	add	r7, sp, #0
 8012a2a:	6078      	str	r0, [r7, #4]
 8012a2c:	460b      	mov	r3, r1
 8012a2e:	807b      	strh	r3, [r7, #2]
        : bitmapId(id)
 8012a30:	687b      	ldr	r3, [r7, #4]
 8012a32:	887a      	ldrh	r2, [r7, #2]
 8012a34:	801a      	strh	r2, [r3, #0]
    {
    }
 8012a36:	687b      	ldr	r3, [r7, #4]
 8012a38:	4618      	mov	r0, r3
 8012a3a:	370c      	adds	r7, #12
 8012a3c:	46bd      	mov	sp, r7
 8012a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a42:	4770      	bx	lr

08012a44 <_ZN8touchgfx8Drawable12setTouchableEb>:
    void setTouchable(bool touch)
 8012a44:	b480      	push	{r7}
 8012a46:	b083      	sub	sp, #12
 8012a48:	af00      	add	r7, sp, #0
 8012a4a:	6078      	str	r0, [r7, #4]
 8012a4c:	460b      	mov	r3, r1
 8012a4e:	70fb      	strb	r3, [r7, #3]
        touchable = touch;
 8012a50:	687b      	ldr	r3, [r7, #4]
 8012a52:	78fa      	ldrb	r2, [r7, #3]
 8012a54:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    }
 8012a58:	bf00      	nop
 8012a5a:	370c      	adds	r7, #12
 8012a5c:	46bd      	mov	sp, r7
 8012a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a62:	4770      	bx	lr

08012a64 <_ZN8touchgfx14AbstractButtonC1Ev>:
 */
class AbstractButton : public Widget
{
public:
    /** Sets this Widget touchable so the user can interact with buttons. */
    AbstractButton()
 8012a64:	b580      	push	{r7, lr}
 8012a66:	b082      	sub	sp, #8
 8012a68:	af00      	add	r7, sp, #0
 8012a6a:	6078      	str	r0, [r7, #4]
        : Widget(), action(), pressed(false)
 8012a6c:	687b      	ldr	r3, [r7, #4]
 8012a6e:	4618      	mov	r0, r3
 8012a70:	2326      	movs	r3, #38	; 0x26
 8012a72:	461a      	mov	r2, r3
 8012a74:	2100      	movs	r1, #0
 8012a76:	f014 fcdd 	bl	8027434 <memset>
 8012a7a:	687b      	ldr	r3, [r7, #4]
 8012a7c:	4618      	mov	r0, r3
 8012a7e:	f7ff fdc3 	bl	8012608 <_ZN8touchgfx6WidgetC1Ev>
 8012a82:	4a0a      	ldr	r2, [pc, #40]	; (8012aac <_ZN8touchgfx14AbstractButtonC1Ev+0x48>)
 8012a84:	687b      	ldr	r3, [r7, #4]
 8012a86:	601a      	str	r2, [r3, #0]
 8012a88:	687b      	ldr	r3, [r7, #4]
 8012a8a:	2200      	movs	r2, #0
 8012a8c:	629a      	str	r2, [r3, #40]	; 0x28
 8012a8e:	687b      	ldr	r3, [r7, #4]
 8012a90:	2200      	movs	r2, #0
 8012a92:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    {
        setTouchable(true);
 8012a96:	687b      	ldr	r3, [r7, #4]
 8012a98:	2101      	movs	r1, #1
 8012a9a:	4618      	mov	r0, r3
 8012a9c:	f7ff ffd2 	bl	8012a44 <_ZN8touchgfx8Drawable12setTouchableEb>
    }
 8012aa0:	687b      	ldr	r3, [r7, #4]
 8012aa2:	4618      	mov	r0, r3
 8012aa4:	3708      	adds	r7, #8
 8012aa6:	46bd      	mov	sp, r7
 8012aa8:	bd80      	pop	{r7, pc}
 8012aaa:	bf00      	nop
 8012aac:	0802a710 	.word	0x0802a710

08012ab0 <_ZN8touchgfx14AbstractButton9setActionERNS_15GenericCallbackIRKS0_vvEE>:
     * @param  callback The callback to be executed. The callback will be executed with a
     *                  reference to the AbstractButton.
     *
     * @see GenericCallback, handleClickEvent, ClickEvent
     */
    void setAction(GenericCallback<const AbstractButton&>& callback)
 8012ab0:	b480      	push	{r7}
 8012ab2:	b083      	sub	sp, #12
 8012ab4:	af00      	add	r7, sp, #0
 8012ab6:	6078      	str	r0, [r7, #4]
 8012ab8:	6039      	str	r1, [r7, #0]
    {
        action = &callback;
 8012aba:	687b      	ldr	r3, [r7, #4]
 8012abc:	683a      	ldr	r2, [r7, #0]
 8012abe:	629a      	str	r2, [r3, #40]	; 0x28
    }
 8012ac0:	bf00      	nop
 8012ac2:	370c      	adds	r7, #12
 8012ac4:	46bd      	mov	sp, r7
 8012ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012aca:	4770      	bx	lr

08012acc <_ZN8touchgfx14AbstractButtonD1Ev>:
class AbstractButton : public Widget
 8012acc:	b580      	push	{r7, lr}
 8012ace:	b082      	sub	sp, #8
 8012ad0:	af00      	add	r7, sp, #0
 8012ad2:	6078      	str	r0, [r7, #4]
 8012ad4:	4a05      	ldr	r2, [pc, #20]	; (8012aec <_ZN8touchgfx14AbstractButtonD1Ev+0x20>)
 8012ad6:	687b      	ldr	r3, [r7, #4]
 8012ad8:	601a      	str	r2, [r3, #0]
 8012ada:	687b      	ldr	r3, [r7, #4]
 8012adc:	4618      	mov	r0, r3
 8012ade:	f7fe fd83 	bl	80115e8 <_ZN8touchgfx6WidgetD1Ev>
 8012ae2:	687b      	ldr	r3, [r7, #4]
 8012ae4:	4618      	mov	r0, r3
 8012ae6:	3708      	adds	r7, #8
 8012ae8:	46bd      	mov	sp, r7
 8012aea:	bd80      	pop	{r7, pc}
 8012aec:	0802a710 	.word	0x0802a710

08012af0 <_ZN8touchgfx14AbstractButtonD0Ev>:
 8012af0:	b580      	push	{r7, lr}
 8012af2:	b082      	sub	sp, #8
 8012af4:	af00      	add	r7, sp, #0
 8012af6:	6078      	str	r0, [r7, #4]
 8012af8:	6878      	ldr	r0, [r7, #4]
 8012afa:	f7ff ffe7 	bl	8012acc <_ZN8touchgfx14AbstractButtonD1Ev>
 8012afe:	2130      	movs	r1, #48	; 0x30
 8012b00:	6878      	ldr	r0, [r7, #4]
 8012b02:	f014 fae2 	bl	80270ca <_ZdlPvj>
 8012b06:	687b      	ldr	r3, [r7, #4]
 8012b08:	4618      	mov	r0, r3
 8012b0a:	3708      	adds	r7, #8
 8012b0c:	46bd      	mov	sp, r7
 8012b0e:	bd80      	pop	{r7, pc}

08012b10 <_ZN8touchgfx6ButtonC1Ev>:
 * pressed state.
 */
class Button : public AbstractButton
{
public:
    Button()
 8012b10:	b580      	push	{r7, lr}
 8012b12:	b082      	sub	sp, #8
 8012b14:	af00      	add	r7, sp, #0
 8012b16:	6078      	str	r0, [r7, #4]
        : AbstractButton(), up(), down(), alpha(255)
 8012b18:	687b      	ldr	r3, [r7, #4]
 8012b1a:	4618      	mov	r0, r3
 8012b1c:	f7ff ffa2 	bl	8012a64 <_ZN8touchgfx14AbstractButtonC1Ev>
 8012b20:	4a0c      	ldr	r2, [pc, #48]	; (8012b54 <_ZN8touchgfx6ButtonC1Ev+0x44>)
 8012b22:	687b      	ldr	r3, [r7, #4]
 8012b24:	601a      	str	r2, [r3, #0]
 8012b26:	687b      	ldr	r3, [r7, #4]
 8012b28:	332e      	adds	r3, #46	; 0x2e
 8012b2a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8012b2e:	4618      	mov	r0, r3
 8012b30:	f7ff ff78 	bl	8012a24 <_ZN8touchgfx6BitmapC1Et>
 8012b34:	687b      	ldr	r3, [r7, #4]
 8012b36:	3330      	adds	r3, #48	; 0x30
 8012b38:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8012b3c:	4618      	mov	r0, r3
 8012b3e:	f7ff ff71 	bl	8012a24 <_ZN8touchgfx6BitmapC1Et>
 8012b42:	687b      	ldr	r3, [r7, #4]
 8012b44:	22ff      	movs	r2, #255	; 0xff
 8012b46:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
    {
    }
 8012b4a:	687b      	ldr	r3, [r7, #4]
 8012b4c:	4618      	mov	r0, r3
 8012b4e:	3708      	adds	r7, #8
 8012b50:	46bd      	mov	sp, r7
 8012b52:	bd80      	pop	{r7, pc}
 8012b54:	0802aa18 	.word	0x0802aa18

08012b58 <_ZN8touchgfx4ViewI15screenPresenterED1Ev>:
class View : public Screen
 8012b58:	b580      	push	{r7, lr}
 8012b5a:	b082      	sub	sp, #8
 8012b5c:	af00      	add	r7, sp, #0
 8012b5e:	6078      	str	r0, [r7, #4]
 8012b60:	4a05      	ldr	r2, [pc, #20]	; (8012b78 <_ZN8touchgfx4ViewI15screenPresenterED1Ev+0x20>)
 8012b62:	687b      	ldr	r3, [r7, #4]
 8012b64:	601a      	str	r2, [r3, #0]
 8012b66:	687b      	ldr	r3, [r7, #4]
 8012b68:	4618      	mov	r0, r3
 8012b6a:	f7ff fce5 	bl	8012538 <_ZN8touchgfx6ScreenD1Ev>
 8012b6e:	687b      	ldr	r3, [r7, #4]
 8012b70:	4618      	mov	r0, r3
 8012b72:	3708      	adds	r7, #8
 8012b74:	46bd      	mov	sp, r7
 8012b76:	bd80      	pop	{r7, pc}
 8012b78:	080292ac 	.word	0x080292ac

08012b7c <_ZN8touchgfx4ViewI15screenPresenterED0Ev>:
 8012b7c:	b580      	push	{r7, lr}
 8012b7e:	b082      	sub	sp, #8
 8012b80:	af00      	add	r7, sp, #0
 8012b82:	6078      	str	r0, [r7, #4]
 8012b84:	6878      	ldr	r0, [r7, #4]
 8012b86:	f7ff ffe7 	bl	8012b58 <_ZN8touchgfx4ViewI15screenPresenterED1Ev>
 8012b8a:	2140      	movs	r1, #64	; 0x40
 8012b8c:	6878      	ldr	r0, [r7, #4]
 8012b8e:	f014 fa9c 	bl	80270ca <_ZdlPvj>
 8012b92:	687b      	ldr	r3, [r7, #4]
 8012b94:	4618      	mov	r0, r3
 8012b96:	3708      	adds	r7, #8
 8012b98:	46bd      	mov	sp, r7
 8012b9a:	bd80      	pop	{r7, pc}

08012b9c <_ZN14screenViewBaseD1Ev>:

class screenViewBase : public touchgfx::View<screenPresenter>
{
public:
    screenViewBase();
    virtual ~screenViewBase() {}
 8012b9c:	b580      	push	{r7, lr}
 8012b9e:	b082      	sub	sp, #8
 8012ba0:	af00      	add	r7, sp, #0
 8012ba2:	6078      	str	r0, [r7, #4]
 8012ba4:	4a13      	ldr	r2, [pc, #76]	; (8012bf4 <_ZN14screenViewBaseD1Ev+0x58>)
 8012ba6:	687b      	ldr	r3, [r7, #4]
 8012ba8:	601a      	str	r2, [r3, #0]
 8012baa:	687b      	ldr	r3, [r7, #4]
 8012bac:	f503 73ec 	add.w	r3, r3, #472	; 0x1d8
 8012bb0:	4618      	mov	r0, r3
 8012bb2:	f000 f9cb 	bl	8012f4c <_ZN8touchgfx8CallbackI14screenViewBaseRKNS_14AbstractButtonEvvED1Ev>
 8012bb6:	687b      	ldr	r3, [r7, #4]
 8012bb8:	f503 73ce 	add.w	r3, r3, #412	; 0x19c
 8012bbc:	4618      	mov	r0, r3
 8012bbe:	f7ff ff09 	bl	80129d4 <_ZN8touchgfx8TextAreaD1Ev>
 8012bc2:	687b      	ldr	r3, [r7, #4]
 8012bc4:	33a0      	adds	r3, #160	; 0xa0
 8012bc6:	4618      	mov	r0, r3
 8012bc8:	f000 fa26 	bl	8013018 <_ZN8touchgfx6SliderD1Ev>
 8012bcc:	687b      	ldr	r3, [r7, #4]
 8012bce:	336c      	adds	r3, #108	; 0x6c
 8012bd0:	4618      	mov	r0, r3
 8012bd2:	f000 f9dd 	bl	8012f90 <_ZN8touchgfx6ButtonD1Ev>
 8012bd6:	687b      	ldr	r3, [r7, #4]
 8012bd8:	3340      	adds	r3, #64	; 0x40
 8012bda:	4618      	mov	r0, r3
 8012bdc:	f7ff fed8 	bl	8012990 <_ZN8touchgfx3BoxD1Ev>
 8012be0:	687b      	ldr	r3, [r7, #4]
 8012be2:	4618      	mov	r0, r3
 8012be4:	f7ff ffb8 	bl	8012b58 <_ZN8touchgfx4ViewI15screenPresenterED1Ev>
 8012be8:	687b      	ldr	r3, [r7, #4]
 8012bea:	4618      	mov	r0, r3
 8012bec:	3708      	adds	r7, #8
 8012bee:	46bd      	mov	sp, r7
 8012bf0:	bd80      	pop	{r7, pc}
 8012bf2:	bf00      	nop
 8012bf4:	08029260 	.word	0x08029260

08012bf8 <_ZN14screenViewBaseD0Ev>:
 8012bf8:	b580      	push	{r7, lr}
 8012bfa:	b082      	sub	sp, #8
 8012bfc:	af00      	add	r7, sp, #0
 8012bfe:	6078      	str	r0, [r7, #4]
 8012c00:	6878      	ldr	r0, [r7, #4]
 8012c02:	f7ff ffcb 	bl	8012b9c <_ZN14screenViewBaseD1Ev>
 8012c06:	f44f 71f4 	mov.w	r1, #488	; 0x1e8
 8012c0a:	6878      	ldr	r0, [r7, #4]
 8012c0c:	f014 fa5d 	bl	80270ca <_ZdlPvj>
 8012c10:	687b      	ldr	r3, [r7, #4]
 8012c12:	4618      	mov	r0, r3
 8012c14:	3708      	adds	r7, #8
 8012c16:	46bd      	mov	sp, r7
 8012c18:	bd80      	pop	{r7, pc}

08012c1a <_ZN14screenViewBase11applicationEv>:
    virtual void setupScreen();

protected:
    FrontendApplication& application() {
 8012c1a:	b580      	push	{r7, lr}
 8012c1c:	b082      	sub	sp, #8
 8012c1e:	af00      	add	r7, sp, #0
 8012c20:	6078      	str	r0, [r7, #4]
        return *static_cast<FrontendApplication*>(touchgfx::Application::getInstance());
 8012c22:	f005 ff9d 	bl	8018b60 <_ZN8touchgfx11Application11getInstanceEv>
 8012c26:	4603      	mov	r3, r0
    }
 8012c28:	4618      	mov	r0, r3
 8012c2a:	3708      	adds	r7, #8
 8012c2c:	46bd      	mov	sp, r7
 8012c2e:	bd80      	pop	{r7, pc}

08012c30 <_ZN14screenViewBaseC1Ev>:
#include <gui_generated/screen_screen/screenViewBase.hpp>
#include <touchgfx/Color.hpp>
#include "BitmapDatabase.hpp"
#include <texts/TextKeysAndLanguages.hpp>

screenViewBase::screenViewBase() :
 8012c30:	b590      	push	{r4, r7, lr}
 8012c32:	b093      	sub	sp, #76	; 0x4c
 8012c34:	af02      	add	r7, sp, #8
 8012c36:	6078      	str	r0, [r7, #4]
    buttonCallback(this, &screenViewBase::buttonCallbackHandler)
 8012c38:	687b      	ldr	r3, [r7, #4]
 8012c3a:	4618      	mov	r0, r3
 8012c3c:	f000 f920 	bl	8012e80 <_ZN8touchgfx4ViewI15screenPresenterEC1Ev>
 8012c40:	4a7d      	ldr	r2, [pc, #500]	; (8012e38 <_ZN14screenViewBaseC1Ev+0x208>)
 8012c42:	687b      	ldr	r3, [r7, #4]
 8012c44:	601a      	str	r2, [r3, #0]
 8012c46:	687b      	ldr	r3, [r7, #4]
 8012c48:	3340      	adds	r3, #64	; 0x40
 8012c4a:	4618      	mov	r0, r3
 8012c4c:	f7ff fcee 	bl	801262c <_ZN8touchgfx3BoxC1Ev>
 8012c50:	687b      	ldr	r3, [r7, #4]
 8012c52:	336c      	adds	r3, #108	; 0x6c
 8012c54:	4618      	mov	r0, r3
 8012c56:	f7ff ff5b 	bl	8012b10 <_ZN8touchgfx6ButtonC1Ev>
 8012c5a:	687b      	ldr	r3, [r7, #4]
 8012c5c:	33a0      	adds	r3, #160	; 0xa0
 8012c5e:	4618      	mov	r0, r3
 8012c60:	f002 ff76 	bl	8015b50 <_ZN8touchgfx6SliderC1Ev>
 8012c64:	687b      	ldr	r3, [r7, #4]
 8012c66:	f503 73ce 	add.w	r3, r3, #412	; 0x19c
 8012c6a:	4618      	mov	r0, r3
 8012c6c:	f7ff fd26 	bl	80126bc <_ZN8touchgfx8TextAreaC1Ev>
 8012c70:	687b      	ldr	r3, [r7, #4]
 8012c72:	f503 70ec 	add.w	r0, r3, #472	; 0x1d8
 8012c76:	4b71      	ldr	r3, [pc, #452]	; (8012e3c <_ZN14screenViewBaseC1Ev+0x20c>)
 8012c78:	613b      	str	r3, [r7, #16]
 8012c7a:	2300      	movs	r3, #0
 8012c7c:	617b      	str	r3, [r7, #20]
 8012c7e:	f107 0310 	add.w	r3, r7, #16
 8012c82:	cb0c      	ldmia	r3, {r2, r3}
 8012c84:	6879      	ldr	r1, [r7, #4]
 8012c86:	f000 f921 	bl	8012ecc <_ZN8touchgfx8CallbackI14screenViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E>
{

    __background.setPosition(0, 0, 480, 272);
 8012c8a:	687b      	ldr	r3, [r7, #4]
 8012c8c:	f103 0040 	add.w	r0, r3, #64	; 0x40
 8012c90:	f44f 7388 	mov.w	r3, #272	; 0x110
 8012c94:	9300      	str	r3, [sp, #0]
 8012c96:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8012c9a:	2200      	movs	r2, #0
 8012c9c:	2100      	movs	r1, #0
 8012c9e:	f7fe f9ae 	bl	8010ffe <_ZN8touchgfx8Drawable11setPositionEssss>
    __background.setColor(touchgfx::Color::getColorFrom24BitRGB(0, 0, 0));
 8012ca2:	687b      	ldr	r3, [r7, #4]
 8012ca4:	f103 0440 	add.w	r4, r3, #64	; 0x40
 8012ca8:	2200      	movs	r2, #0
 8012caa:	2100      	movs	r1, #0
 8012cac:	2000      	movs	r0, #0
 8012cae:	f7ff fd8d 	bl	80127cc <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8012cb2:	4603      	mov	r3, r0
 8012cb4:	4619      	mov	r1, r3
 8012cb6:	4620      	mov	r0, r4
 8012cb8:	f7ff fcdc 	bl	8012674 <_ZN8touchgfx3Box8setColorENS_9colortypeE>

    button1.setXY(155, 106);
 8012cbc:	687b      	ldr	r3, [r7, #4]
 8012cbe:	336c      	adds	r3, #108	; 0x6c
 8012cc0:	226a      	movs	r2, #106	; 0x6a
 8012cc2:	219b      	movs	r1, #155	; 0x9b
 8012cc4:	4618      	mov	r0, r3
 8012cc6:	f7fe f9e6 	bl	8011096 <_ZN8touchgfx8Drawable5setXYEss>
    button1.setBitmaps(touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_EDGE_SMALL_ID), touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_EDGE_SMALL_PRESSED_ID));
 8012cca:	687b      	ldr	r3, [r7, #4]
 8012ccc:	f103 046c 	add.w	r4, r3, #108	; 0x6c
 8012cd0:	f107 0318 	add.w	r3, r7, #24
 8012cd4:	2100      	movs	r1, #0
 8012cd6:	4618      	mov	r0, r3
 8012cd8:	f7ff fea4 	bl	8012a24 <_ZN8touchgfx6BitmapC1Et>
 8012cdc:	f107 031c 	add.w	r3, r7, #28
 8012ce0:	2101      	movs	r1, #1
 8012ce2:	4618      	mov	r0, r3
 8012ce4:	f7ff fe9e 	bl	8012a24 <_ZN8touchgfx6BitmapC1Et>
 8012ce8:	f107 021c 	add.w	r2, r7, #28
 8012cec:	f107 0318 	add.w	r3, r7, #24
 8012cf0:	4619      	mov	r1, r3
 8012cf2:	4620      	mov	r0, r4
 8012cf4:	f004 f990 	bl	8017018 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
    button1.setAction(buttonCallback);
 8012cf8:	687b      	ldr	r3, [r7, #4]
 8012cfa:	f103 026c 	add.w	r2, r3, #108	; 0x6c
 8012cfe:	687b      	ldr	r3, [r7, #4]
 8012d00:	f503 73ec 	add.w	r3, r3, #472	; 0x1d8
 8012d04:	4619      	mov	r1, r3
 8012d06:	4610      	mov	r0, r2
 8012d08:	f7ff fed2 	bl	8012ab0 <_ZN8touchgfx14AbstractButton9setActionERNS_15GenericCallbackIRKS0_vvEE>

    slider1.setXY(0, 33);
 8012d0c:	687b      	ldr	r3, [r7, #4]
 8012d0e:	33a0      	adds	r3, #160	; 0xa0
 8012d10:	2221      	movs	r2, #33	; 0x21
 8012d12:	2100      	movs	r1, #0
 8012d14:	4618      	mov	r0, r3
 8012d16:	f7fe f9be 	bl	8011096 <_ZN8touchgfx8Drawable5setXYEss>
    slider1.setBitmaps(touchgfx::Bitmap(BITMAP_BLUE_SLIDER_VERTICAL_SMALL_SLIDER3_VERTICAL_ROUND_BACK_ID), touchgfx::Bitmap(BITMAP_BLUE_SLIDER_VERTICAL_SMALL_SLIDER3_VERTICAL_ROUND_FILL_ID), touchgfx::Bitmap(BITMAP_BLUE_SLIDER_VERTICAL_SMALL_INDICATORS_SLIDER3_VERTICAL_ROUND_NOB_ID));
 8012d1a:	687b      	ldr	r3, [r7, #4]
 8012d1c:	f103 04a0 	add.w	r4, r3, #160	; 0xa0
 8012d20:	f107 0320 	add.w	r3, r7, #32
 8012d24:	2103      	movs	r1, #3
 8012d26:	4618      	mov	r0, r3
 8012d28:	f7ff fe7c 	bl	8012a24 <_ZN8touchgfx6BitmapC1Et>
 8012d2c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8012d30:	2104      	movs	r1, #4
 8012d32:	4618      	mov	r0, r3
 8012d34:	f7ff fe76 	bl	8012a24 <_ZN8touchgfx6BitmapC1Et>
 8012d38:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8012d3c:	2102      	movs	r1, #2
 8012d3e:	4618      	mov	r0, r3
 8012d40:	f7ff fe70 	bl	8012a24 <_ZN8touchgfx6BitmapC1Et>
 8012d44:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8012d48:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8012d4c:	f107 0120 	add.w	r1, r7, #32
 8012d50:	4620      	mov	r0, r4
 8012d52:	f002 ff51 	bl	8015bf8 <_ZN8touchgfx6Slider10setBitmapsERKNS_6BitmapES3_S3_>
    slider1.setupVerticalSlider(7, 3, 0, 0, 125);
 8012d56:	687b      	ldr	r3, [r7, #4]
 8012d58:	f103 00a0 	add.w	r0, r3, #160	; 0xa0
 8012d5c:	237d      	movs	r3, #125	; 0x7d
 8012d5e:	9301      	str	r3, [sp, #4]
 8012d60:	2300      	movs	r3, #0
 8012d62:	9300      	str	r3, [sp, #0]
 8012d64:	2300      	movs	r3, #0
 8012d66:	2203      	movs	r2, #3
 8012d68:	2107      	movs	r1, #7
 8012d6a:	f002 fde9 	bl	8015940 <_ZN8touchgfx6Slider19setupVerticalSliderEttttt>
    slider1.setValueRange(0, 100);
 8012d6e:	687b      	ldr	r3, [r7, #4]
 8012d70:	33a0      	adds	r3, #160	; 0xa0
 8012d72:	2264      	movs	r2, #100	; 0x64
 8012d74:	2100      	movs	r1, #0
 8012d76:	4618      	mov	r0, r3
 8012d78:	f002 fcf7 	bl	801576a <_ZN8touchgfx6Slider13setValueRangeEii>
    slider1.setValue(0);
 8012d7c:	687b      	ldr	r3, [r7, #4]
 8012d7e:	33a0      	adds	r3, #160	; 0xa0
 8012d80:	2100      	movs	r1, #0
 8012d82:	4618      	mov	r0, r3
 8012d84:	f002 fc7d 	bl	8015682 <_ZN8touchgfx6Slider8setValueEi>

    textArea1.setXY(52, 33);
 8012d88:	687b      	ldr	r3, [r7, #4]
 8012d8a:	f503 73ce 	add.w	r3, r3, #412	; 0x19c
 8012d8e:	2221      	movs	r2, #33	; 0x21
 8012d90:	2134      	movs	r1, #52	; 0x34
 8012d92:	4618      	mov	r0, r3
 8012d94:	f7fe f97f 	bl	8011096 <_ZN8touchgfx8Drawable5setXYEss>
    textArea1.setColor(touchgfx::Color::getColorFrom24BitRGB(0, 0, 0));
 8012d98:	687b      	ldr	r3, [r7, #4]
 8012d9a:	f503 74ce 	add.w	r4, r3, #412	; 0x19c
 8012d9e:	2200      	movs	r2, #0
 8012da0:	2100      	movs	r1, #0
 8012da2:	2000      	movs	r0, #0
 8012da4:	f7ff fd12 	bl	80127cc <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8012da8:	4603      	mov	r3, r0
 8012daa:	637c      	str	r4, [r7, #52]	; 0x34
 8012dac:	60fb      	str	r3, [r7, #12]
        this->color = color;
 8012dae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012db0:	68fa      	ldr	r2, [r7, #12]
 8012db2:	631a      	str	r2, [r3, #48]	; 0x30
    }
 8012db4:	bf00      	nop
    textArea1.setLinespacing(0);
 8012db6:	687b      	ldr	r3, [r7, #4]
 8012db8:	f503 73ce 	add.w	r3, r3, #412	; 0x19c
 8012dbc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8012dbe:	2300      	movs	r3, #0
 8012dc0:	877b      	strh	r3, [r7, #58]	; 0x3a
        linespace = space;
 8012dc2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012dc4:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8012dc6:	869a      	strh	r2, [r3, #52]	; 0x34
    }
 8012dc8:	bf00      	nop
    textArea1.setTypedText(touchgfx::TypedText(T_SINGLEUSEID2));
 8012dca:	687b      	ldr	r3, [r7, #4]
 8012dcc:	f503 74ce 	add.w	r4, r3, #412	; 0x19c
 8012dd0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8012dd4:	2101      	movs	r1, #1
 8012dd6:	4618      	mov	r0, r3
 8012dd8:	f7ff fc5a 	bl	8012690 <_ZN8touchgfx9TypedTextC1Et>
 8012ddc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8012de0:	4619      	mov	r1, r3
 8012de2:	4620      	mov	r0, r4
 8012de4:	f004 f8e1 	bl	8016faa <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>
 8012de8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8012dec:	4618      	mov	r0, r3
 8012dee:	f7fd fe71 	bl	8010ad4 <_ZN8touchgfx9TypedTextD1Ev>

    add(__background);
 8012df2:	687a      	ldr	r2, [r7, #4]
 8012df4:	687b      	ldr	r3, [r7, #4]
 8012df6:	3340      	adds	r3, #64	; 0x40
 8012df8:	4619      	mov	r1, r3
 8012dfa:	4610      	mov	r0, r2
 8012dfc:	f7ff fbf4 	bl	80125e8 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(button1);
 8012e00:	687a      	ldr	r2, [r7, #4]
 8012e02:	687b      	ldr	r3, [r7, #4]
 8012e04:	336c      	adds	r3, #108	; 0x6c
 8012e06:	4619      	mov	r1, r3
 8012e08:	4610      	mov	r0, r2
 8012e0a:	f7ff fbed 	bl	80125e8 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(slider1);
 8012e0e:	687a      	ldr	r2, [r7, #4]
 8012e10:	687b      	ldr	r3, [r7, #4]
 8012e12:	33a0      	adds	r3, #160	; 0xa0
 8012e14:	4619      	mov	r1, r3
 8012e16:	4610      	mov	r0, r2
 8012e18:	f7ff fbe6 	bl	80125e8 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(textArea1);
 8012e1c:	687a      	ldr	r2, [r7, #4]
 8012e1e:	687b      	ldr	r3, [r7, #4]
 8012e20:	f503 73ce 	add.w	r3, r3, #412	; 0x19c
 8012e24:	4619      	mov	r1, r3
 8012e26:	4610      	mov	r0, r2
 8012e28:	f7ff fbde 	bl	80125e8 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
}
 8012e2c:	687b      	ldr	r3, [r7, #4]
 8012e2e:	4618      	mov	r0, r3
 8012e30:	3744      	adds	r7, #68	; 0x44
 8012e32:	46bd      	mov	sp, r7
 8012e34:	bd90      	pop	{r4, r7, pc}
 8012e36:	bf00      	nop
 8012e38:	08029260 	.word	0x08029260
 8012e3c:	08012e55 	.word	0x08012e55

08012e40 <_ZN14screenViewBase11setupScreenEv>:

void screenViewBase::setupScreen()
{
 8012e40:	b480      	push	{r7}
 8012e42:	b083      	sub	sp, #12
 8012e44:	af00      	add	r7, sp, #0
 8012e46:	6078      	str	r0, [r7, #4]

}
 8012e48:	bf00      	nop
 8012e4a:	370c      	adds	r7, #12
 8012e4c:	46bd      	mov	sp, r7
 8012e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e52:	4770      	bx	lr

08012e54 <_ZN14screenViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE>:

void screenViewBase::buttonCallbackHandler(const touchgfx::AbstractButton& src)
{
 8012e54:	b580      	push	{r7, lr}
 8012e56:	b082      	sub	sp, #8
 8012e58:	af00      	add	r7, sp, #0
 8012e5a:	6078      	str	r0, [r7, #4]
 8012e5c:	6039      	str	r1, [r7, #0]
    if (&src == &button1)
 8012e5e:	687b      	ldr	r3, [r7, #4]
 8012e60:	336c      	adds	r3, #108	; 0x6c
 8012e62:	683a      	ldr	r2, [r7, #0]
 8012e64:	429a      	cmp	r2, r3
 8012e66:	d106      	bne.n	8012e76 <_ZN14screenViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x22>
    {
        //Interaction1
        //When button1 clicked change screen to Screen1
        //Go to Screen1 with screen transition towards East
        application().gotoScreen1ScreenSlideTransitionEast();
 8012e68:	6878      	ldr	r0, [r7, #4]
 8012e6a:	f7ff fed6 	bl	8012c1a <_ZN14screenViewBase11applicationEv>
 8012e6e:	4603      	mov	r3, r0
 8012e70:	4618      	mov	r0, r3
 8012e72:	f7fe fc7d 	bl	8011770 <_ZN23FrontendApplicationBase36gotoScreen1ScreenSlideTransitionEastEv>
    }
}
 8012e76:	bf00      	nop
 8012e78:	3708      	adds	r7, #8
 8012e7a:	46bd      	mov	sp, r7
 8012e7c:	bd80      	pop	{r7, pc}
	...

08012e80 <_ZN8touchgfx4ViewI15screenPresenterEC1Ev>:
    View()
 8012e80:	b580      	push	{r7, lr}
 8012e82:	b082      	sub	sp, #8
 8012e84:	af00      	add	r7, sp, #0
 8012e86:	6078      	str	r0, [r7, #4]
        : presenter(0)
 8012e88:	687b      	ldr	r3, [r7, #4]
 8012e8a:	4618      	mov	r0, r3
 8012e8c:	f007 f900 	bl	801a090 <_ZN8touchgfx6ScreenC1Ev>
 8012e90:	4a05      	ldr	r2, [pc, #20]	; (8012ea8 <_ZN8touchgfx4ViewI15screenPresenterEC1Ev+0x28>)
 8012e92:	687b      	ldr	r3, [r7, #4]
 8012e94:	601a      	str	r2, [r3, #0]
 8012e96:	687b      	ldr	r3, [r7, #4]
 8012e98:	2200      	movs	r2, #0
 8012e9a:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 8012e9c:	687b      	ldr	r3, [r7, #4]
 8012e9e:	4618      	mov	r0, r3
 8012ea0:	3708      	adds	r7, #8
 8012ea2:	46bd      	mov	sp, r7
 8012ea4:	bd80      	pop	{r7, pc}
 8012ea6:	bf00      	nop
 8012ea8:	080292ac 	.word	0x080292ac

08012eac <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvEC1Ev>:
class GenericCallback<T1, void, void>
 8012eac:	b480      	push	{r7}
 8012eae:	b083      	sub	sp, #12
 8012eb0:	af00      	add	r7, sp, #0
 8012eb2:	6078      	str	r0, [r7, #4]
 8012eb4:	4a04      	ldr	r2, [pc, #16]	; (8012ec8 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvEC1Ev+0x1c>)
 8012eb6:	687b      	ldr	r3, [r7, #4]
 8012eb8:	601a      	str	r2, [r3, #0]
 8012eba:	687b      	ldr	r3, [r7, #4]
 8012ebc:	4618      	mov	r0, r3
 8012ebe:	370c      	adds	r7, #12
 8012ec0:	46bd      	mov	sp, r7
 8012ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ec6:	4770      	bx	lr
 8012ec8:	080292e0 	.word	0x080292e0

08012ecc <_ZN8touchgfx8CallbackI14screenViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E>:
    Callback(dest_type* pobject, void (dest_type::*pmemfun_1)(T1))
 8012ecc:	b580      	push	{r7, lr}
 8012ece:	b084      	sub	sp, #16
 8012ed0:	af00      	add	r7, sp, #0
 8012ed2:	60f8      	str	r0, [r7, #12]
 8012ed4:	60b9      	str	r1, [r7, #8]
 8012ed6:	4639      	mov	r1, r7
 8012ed8:	e881 000c 	stmia.w	r1, {r2, r3}
    {
 8012edc:	68fb      	ldr	r3, [r7, #12]
 8012ede:	4618      	mov	r0, r3
 8012ee0:	f7ff ffe4 	bl	8012eac <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvEC1Ev>
 8012ee4:	4a08      	ldr	r2, [pc, #32]	; (8012f08 <_ZN8touchgfx8CallbackI14screenViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E+0x3c>)
 8012ee6:	68fb      	ldr	r3, [r7, #12]
 8012ee8:	601a      	str	r2, [r3, #0]
        this->pobject = pobject;
 8012eea:	68fb      	ldr	r3, [r7, #12]
 8012eec:	68ba      	ldr	r2, [r7, #8]
 8012eee:	605a      	str	r2, [r3, #4]
        this->pmemfun_1 = pmemfun_1;
 8012ef0:	68fb      	ldr	r3, [r7, #12]
 8012ef2:	3308      	adds	r3, #8
 8012ef4:	463a      	mov	r2, r7
 8012ef6:	e892 0003 	ldmia.w	r2, {r0, r1}
 8012efa:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 8012efe:	68fb      	ldr	r3, [r7, #12]
 8012f00:	4618      	mov	r0, r3
 8012f02:	3710      	adds	r7, #16
 8012f04:	46bd      	mov	sp, r7
 8012f06:	bd80      	pop	{r7, pc}
 8012f08:	08029294 	.word	0x08029294

08012f0c <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED1Ev>:
    virtual ~GenericCallback()
 8012f0c:	b480      	push	{r7}
 8012f0e:	b083      	sub	sp, #12
 8012f10:	af00      	add	r7, sp, #0
 8012f12:	6078      	str	r0, [r7, #4]
    }
 8012f14:	4a04      	ldr	r2, [pc, #16]	; (8012f28 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED1Ev+0x1c>)
 8012f16:	687b      	ldr	r3, [r7, #4]
 8012f18:	601a      	str	r2, [r3, #0]
 8012f1a:	687b      	ldr	r3, [r7, #4]
 8012f1c:	4618      	mov	r0, r3
 8012f1e:	370c      	adds	r7, #12
 8012f20:	46bd      	mov	sp, r7
 8012f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f26:	4770      	bx	lr
 8012f28:	080292e0 	.word	0x080292e0

08012f2c <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED0Ev>:
    virtual ~GenericCallback()
 8012f2c:	b580      	push	{r7, lr}
 8012f2e:	b082      	sub	sp, #8
 8012f30:	af00      	add	r7, sp, #0
 8012f32:	6078      	str	r0, [r7, #4]
    }
 8012f34:	6878      	ldr	r0, [r7, #4]
 8012f36:	f7ff ffe9 	bl	8012f0c <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED1Ev>
 8012f3a:	2104      	movs	r1, #4
 8012f3c:	6878      	ldr	r0, [r7, #4]
 8012f3e:	f014 f8c4 	bl	80270ca <_ZdlPvj>
 8012f42:	687b      	ldr	r3, [r7, #4]
 8012f44:	4618      	mov	r0, r3
 8012f46:	3708      	adds	r7, #8
 8012f48:	46bd      	mov	sp, r7
 8012f4a:	bd80      	pop	{r7, pc}

08012f4c <_ZN8touchgfx8CallbackI14screenViewBaseRKNS_14AbstractButtonEvvED1Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 8012f4c:	b580      	push	{r7, lr}
 8012f4e:	b082      	sub	sp, #8
 8012f50:	af00      	add	r7, sp, #0
 8012f52:	6078      	str	r0, [r7, #4]
 8012f54:	4a05      	ldr	r2, [pc, #20]	; (8012f6c <_ZN8touchgfx8CallbackI14screenViewBaseRKNS_14AbstractButtonEvvED1Ev+0x20>)
 8012f56:	687b      	ldr	r3, [r7, #4]
 8012f58:	601a      	str	r2, [r3, #0]
 8012f5a:	687b      	ldr	r3, [r7, #4]
 8012f5c:	4618      	mov	r0, r3
 8012f5e:	f7ff ffd5 	bl	8012f0c <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED1Ev>
 8012f62:	687b      	ldr	r3, [r7, #4]
 8012f64:	4618      	mov	r0, r3
 8012f66:	3708      	adds	r7, #8
 8012f68:	46bd      	mov	sp, r7
 8012f6a:	bd80      	pop	{r7, pc}
 8012f6c:	08029294 	.word	0x08029294

08012f70 <_ZN8touchgfx8CallbackI14screenViewBaseRKNS_14AbstractButtonEvvED0Ev>:
 8012f70:	b580      	push	{r7, lr}
 8012f72:	b082      	sub	sp, #8
 8012f74:	af00      	add	r7, sp, #0
 8012f76:	6078      	str	r0, [r7, #4]
 8012f78:	6878      	ldr	r0, [r7, #4]
 8012f7a:	f7ff ffe7 	bl	8012f4c <_ZN8touchgfx8CallbackI14screenViewBaseRKNS_14AbstractButtonEvvED1Ev>
 8012f7e:	2110      	movs	r1, #16
 8012f80:	6878      	ldr	r0, [r7, #4]
 8012f82:	f014 f8a2 	bl	80270ca <_ZdlPvj>
 8012f86:	687b      	ldr	r3, [r7, #4]
 8012f88:	4618      	mov	r0, r3
 8012f8a:	3708      	adds	r7, #8
 8012f8c:	46bd      	mov	sp, r7
 8012f8e:	bd80      	pop	{r7, pc}

08012f90 <_ZN8touchgfx6ButtonD1Ev>:
class Button : public AbstractButton
 8012f90:	b580      	push	{r7, lr}
 8012f92:	b082      	sub	sp, #8
 8012f94:	af00      	add	r7, sp, #0
 8012f96:	6078      	str	r0, [r7, #4]
 8012f98:	4a05      	ldr	r2, [pc, #20]	; (8012fb0 <_ZN8touchgfx6ButtonD1Ev+0x20>)
 8012f9a:	687b      	ldr	r3, [r7, #4]
 8012f9c:	601a      	str	r2, [r3, #0]
 8012f9e:	687b      	ldr	r3, [r7, #4]
 8012fa0:	4618      	mov	r0, r3
 8012fa2:	f7ff fd93 	bl	8012acc <_ZN8touchgfx14AbstractButtonD1Ev>
 8012fa6:	687b      	ldr	r3, [r7, #4]
 8012fa8:	4618      	mov	r0, r3
 8012faa:	3708      	adds	r7, #8
 8012fac:	46bd      	mov	sp, r7
 8012fae:	bd80      	pop	{r7, pc}
 8012fb0:	0802aa18 	.word	0x0802aa18

08012fb4 <_ZN8touchgfx6ButtonD0Ev>:
 8012fb4:	b580      	push	{r7, lr}
 8012fb6:	b082      	sub	sp, #8
 8012fb8:	af00      	add	r7, sp, #0
 8012fba:	6078      	str	r0, [r7, #4]
 8012fbc:	6878      	ldr	r0, [r7, #4]
 8012fbe:	f7ff ffe7 	bl	8012f90 <_ZN8touchgfx6ButtonD1Ev>
 8012fc2:	2134      	movs	r1, #52	; 0x34
 8012fc4:	6878      	ldr	r0, [r7, #4]
 8012fc6:	f014 f880 	bl	80270ca <_ZdlPvj>
 8012fca:	687b      	ldr	r3, [r7, #4]
 8012fcc:	4618      	mov	r0, r3
 8012fce:	3708      	adds	r7, #8
 8012fd0:	46bd      	mov	sp, r7
 8012fd2:	bd80      	pop	{r7, pc}

08012fd4 <_ZN8touchgfx5ImageD1Ev>:
 * is handled by the Image Converter as part of compiling the project. Each image is
 * assigned a unique BITMAP identifier which.
 *
 * @see Bitmap
 */
class Image : public Widget
 8012fd4:	b580      	push	{r7, lr}
 8012fd6:	b082      	sub	sp, #8
 8012fd8:	af00      	add	r7, sp, #0
 8012fda:	6078      	str	r0, [r7, #4]
 8012fdc:	4a05      	ldr	r2, [pc, #20]	; (8012ff4 <_ZN8touchgfx5ImageD1Ev+0x20>)
 8012fde:	687b      	ldr	r3, [r7, #4]
 8012fe0:	601a      	str	r2, [r3, #0]
 8012fe2:	687b      	ldr	r3, [r7, #4]
 8012fe4:	4618      	mov	r0, r3
 8012fe6:	f7fe faff 	bl	80115e8 <_ZN8touchgfx6WidgetD1Ev>
 8012fea:	687b      	ldr	r3, [r7, #4]
 8012fec:	4618      	mov	r0, r3
 8012fee:	3708      	adds	r7, #8
 8012ff0:	46bd      	mov	sp, r7
 8012ff2:	bd80      	pop	{r7, pc}
 8012ff4:	0802aabc 	.word	0x0802aabc

08012ff8 <_ZN8touchgfx5ImageD0Ev>:
 8012ff8:	b580      	push	{r7, lr}
 8012ffa:	b082      	sub	sp, #8
 8012ffc:	af00      	add	r7, sp, #0
 8012ffe:	6078      	str	r0, [r7, #4]
 8013000:	6878      	ldr	r0, [r7, #4]
 8013002:	f7ff ffe7 	bl	8012fd4 <_ZN8touchgfx5ImageD1Ev>
 8013006:	212c      	movs	r1, #44	; 0x2c
 8013008:	6878      	ldr	r0, [r7, #4]
 801300a:	f014 f85e 	bl	80270ca <_ZdlPvj>
 801300e:	687b      	ldr	r3, [r7, #4]
 8013010:	4618      	mov	r0, r3
 8013012:	3708      	adds	r7, #8
 8013014:	46bd      	mov	sp, r7
 8013016:	bd80      	pop	{r7, pc}

08013018 <_ZN8touchgfx6SliderD1Ev>:
 * indicator. The other is used on the other side. They can be used in indicating the
 * part of the slider value range that is currently selected.
 *
 * The slider operates on an integer value range that can be set by the user.
 */
class Slider : public Container
 8013018:	b580      	push	{r7, lr}
 801301a:	b082      	sub	sp, #8
 801301c:	af00      	add	r7, sp, #0
 801301e:	6078      	str	r0, [r7, #4]
 8013020:	4a0f      	ldr	r2, [pc, #60]	; (8013060 <_ZN8touchgfx6SliderD1Ev+0x48>)
 8013022:	687b      	ldr	r3, [r7, #4]
 8013024:	601a      	str	r2, [r3, #0]
 8013026:	687b      	ldr	r3, [r7, #4]
 8013028:	33c0      	adds	r3, #192	; 0xc0
 801302a:	4618      	mov	r0, r3
 801302c:	f7ff fc8e 	bl	801294c <_ZN8touchgfx9ContainerD1Ev>
 8013030:	687b      	ldr	r3, [r7, #4]
 8013032:	3394      	adds	r3, #148	; 0x94
 8013034:	4618      	mov	r0, r3
 8013036:	f7ff ffcd 	bl	8012fd4 <_ZN8touchgfx5ImageD1Ev>
 801303a:	687b      	ldr	r3, [r7, #4]
 801303c:	3368      	adds	r3, #104	; 0x68
 801303e:	4618      	mov	r0, r3
 8013040:	f7ff ffc8 	bl	8012fd4 <_ZN8touchgfx5ImageD1Ev>
 8013044:	687b      	ldr	r3, [r7, #4]
 8013046:	333c      	adds	r3, #60	; 0x3c
 8013048:	4618      	mov	r0, r3
 801304a:	f7ff ffc3 	bl	8012fd4 <_ZN8touchgfx5ImageD1Ev>
 801304e:	687b      	ldr	r3, [r7, #4]
 8013050:	4618      	mov	r0, r3
 8013052:	f7ff fc7b 	bl	801294c <_ZN8touchgfx9ContainerD1Ev>
 8013056:	687b      	ldr	r3, [r7, #4]
 8013058:	4618      	mov	r0, r3
 801305a:	3708      	adds	r7, #8
 801305c:	46bd      	mov	sp, r7
 801305e:	bd80      	pop	{r7, pc}
 8013060:	08029d88 	.word	0x08029d88

08013064 <_ZN8touchgfx6SliderD0Ev>:
 8013064:	b580      	push	{r7, lr}
 8013066:	b082      	sub	sp, #8
 8013068:	af00      	add	r7, sp, #0
 801306a:	6078      	str	r0, [r7, #4]
 801306c:	6878      	ldr	r0, [r7, #4]
 801306e:	f7ff ffd3 	bl	8013018 <_ZN8touchgfx6SliderD1Ev>
 8013072:	21fc      	movs	r1, #252	; 0xfc
 8013074:	6878      	ldr	r0, [r7, #4]
 8013076:	f014 f828 	bl	80270ca <_ZdlPvj>
 801307a:	687b      	ldr	r3, [r7, #4]
 801307c:	4618      	mov	r0, r3
 801307e:	3708      	adds	r7, #8
 8013080:	46bd      	mov	sp, r7
 8013082:	bd80      	pop	{r7, pc}

08013084 <_ZN8touchgfx8CallbackI14screenViewBaseRKNS_14AbstractButtonEvvE7executeES4_>:
    virtual void execute(T1 t1)
 8013084:	b580      	push	{r7, lr}
 8013086:	b082      	sub	sp, #8
 8013088:	af00      	add	r7, sp, #0
 801308a:	6078      	str	r0, [r7, #4]
 801308c:	6039      	str	r1, [r7, #0]
        (pobject->*pmemfun_1)(t1);
 801308e:	687b      	ldr	r3, [r7, #4]
 8013090:	685b      	ldr	r3, [r3, #4]
 8013092:	687a      	ldr	r2, [r7, #4]
 8013094:	68d2      	ldr	r2, [r2, #12]
 8013096:	1052      	asrs	r2, r2, #1
 8013098:	1898      	adds	r0, r3, r2
 801309a:	687b      	ldr	r3, [r7, #4]
 801309c:	68db      	ldr	r3, [r3, #12]
 801309e:	f003 0301 	and.w	r3, r3, #1
 80130a2:	2b00      	cmp	r3, #0
 80130a4:	d102      	bne.n	80130ac <_ZN8touchgfx8CallbackI14screenViewBaseRKNS_14AbstractButtonEvvE7executeES4_+0x28>
 80130a6:	687b      	ldr	r3, [r7, #4]
 80130a8:	689b      	ldr	r3, [r3, #8]
 80130aa:	e00a      	b.n	80130c2 <_ZN8touchgfx8CallbackI14screenViewBaseRKNS_14AbstractButtonEvvE7executeES4_+0x3e>
 80130ac:	687b      	ldr	r3, [r7, #4]
 80130ae:	685b      	ldr	r3, [r3, #4]
 80130b0:	687a      	ldr	r2, [r7, #4]
 80130b2:	68d2      	ldr	r2, [r2, #12]
 80130b4:	1052      	asrs	r2, r2, #1
 80130b6:	4413      	add	r3, r2
 80130b8:	681b      	ldr	r3, [r3, #0]
 80130ba:	687a      	ldr	r2, [r7, #4]
 80130bc:	6892      	ldr	r2, [r2, #8]
 80130be:	4413      	add	r3, r2
 80130c0:	681b      	ldr	r3, [r3, #0]
 80130c2:	6839      	ldr	r1, [r7, #0]
 80130c4:	4798      	blx	r3
    }
 80130c6:	bf00      	nop
 80130c8:	3708      	adds	r7, #8
 80130ca:	46bd      	mov	sp, r7
 80130cc:	bd80      	pop	{r7, pc}

080130ce <_ZNK8touchgfx8CallbackI14screenViewBaseRKNS_14AbstractButtonEvvE7isValidEv>:
    virtual bool isValid() const
 80130ce:	b480      	push	{r7}
 80130d0:	b083      	sub	sp, #12
 80130d2:	af00      	add	r7, sp, #0
 80130d4:	6078      	str	r0, [r7, #4]
        return (pobject != 0) && (pmemfun_1 != 0);
 80130d6:	687b      	ldr	r3, [r7, #4]
 80130d8:	685b      	ldr	r3, [r3, #4]
 80130da:	2b00      	cmp	r3, #0
 80130dc:	d010      	beq.n	8013100 <_ZNK8touchgfx8CallbackI14screenViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x32>
 80130de:	687b      	ldr	r3, [r7, #4]
 80130e0:	689b      	ldr	r3, [r3, #8]
 80130e2:	2b00      	cmp	r3, #0
 80130e4:	d107      	bne.n	80130f6 <_ZNK8touchgfx8CallbackI14screenViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x28>
 80130e6:	687b      	ldr	r3, [r7, #4]
 80130e8:	68db      	ldr	r3, [r3, #12]
 80130ea:	f003 0301 	and.w	r3, r3, #1
 80130ee:	2b00      	cmp	r3, #0
 80130f0:	d101      	bne.n	80130f6 <_ZNK8touchgfx8CallbackI14screenViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x28>
 80130f2:	2301      	movs	r3, #1
 80130f4:	e000      	b.n	80130f8 <_ZNK8touchgfx8CallbackI14screenViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x2a>
 80130f6:	2300      	movs	r3, #0
 80130f8:	2b01      	cmp	r3, #1
 80130fa:	d001      	beq.n	8013100 <_ZNK8touchgfx8CallbackI14screenViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x32>
 80130fc:	2301      	movs	r3, #1
 80130fe:	e000      	b.n	8013102 <_ZNK8touchgfx8CallbackI14screenViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x34>
 8013100:	2300      	movs	r3, #0
    }
 8013102:	4618      	mov	r0, r3
 8013104:	370c      	adds	r7, #12
 8013106:	46bd      	mov	sp, r7
 8013108:	f85d 7b04 	ldr.w	r7, [sp], #4
 801310c:	4770      	bx	lr
	...

08013110 <_ZN14BitmapDatabase11getInstanceEv>:
};

namespace BitmapDatabase
{
const touchgfx::Bitmap::BitmapData* getInstance()
{
 8013110:	b480      	push	{r7}
 8013112:	af00      	add	r7, sp, #0
    return bitmap_database;
 8013114:	4b02      	ldr	r3, [pc, #8]	; (8013120 <_ZN14BitmapDatabase11getInstanceEv+0x10>)
}
 8013116:	4618      	mov	r0, r3
 8013118:	46bd      	mov	sp, r7
 801311a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801311e:	4770      	bx	lr
 8013120:	080292f0 	.word	0x080292f0

08013124 <_ZN14BitmapDatabase15getInstanceSizeEv>:

uint16_t getInstanceSize()
{
 8013124:	b480      	push	{r7}
 8013126:	af00      	add	r7, sp, #0
    return (uint16_t)(sizeof(bitmap_database) / sizeof(touchgfx::Bitmap::BitmapData));
 8013128:	2305      	movs	r3, #5
}
 801312a:	4618      	mov	r0, r3
 801312c:	46bd      	mov	sp, r7
 801312e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013132:	4770      	bx	lr

08013134 <_ZNK8touchgfx4Font10getKerningEtPKNS_9GlyphNodeE>:
     * @param  prevChar The Unicode value of the previous character.
     * @param  glyph    the glyph object for the current character.
     *
     * @return The kerning distance between prevChar and glyph char.
     */
    virtual int8_t getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
 8013134:	b480      	push	{r7}
 8013136:	b085      	sub	sp, #20
 8013138:	af00      	add	r7, sp, #0
 801313a:	60f8      	str	r0, [r7, #12]
 801313c:	460b      	mov	r3, r1
 801313e:	607a      	str	r2, [r7, #4]
 8013140:	817b      	strh	r3, [r7, #10]
    {
        return 0;
 8013142:	2300      	movs	r3, #0
    }
 8013144:	4618      	mov	r0, r3
 8013146:	3714      	adds	r7, #20
 8013148:	46bd      	mov	sp, r7
 801314a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801314e:	4770      	bx	lr

08013150 <_ZNK8touchgfx4Font12getGSUBTableEv>:
    /**
     * Gets GSUB table. Currently only used for Devanagari fonts.
     *
     * @return The GSUB table or null if font has GSUB no table.
     */
    virtual const uint16_t* getGSUBTable() const
 8013150:	b480      	push	{r7}
 8013152:	b083      	sub	sp, #12
 8013154:	af00      	add	r7, sp, #0
 8013156:	6078      	str	r0, [r7, #4]
    {
        return 0;
 8013158:	2300      	movs	r3, #0
    }
 801315a:	4618      	mov	r0, r3
 801315c:	370c      	adds	r7, #12
 801315e:	46bd      	mov	sp, r7
 8013160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013164:	4770      	bx	lr
	...

08013168 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt>:
     *
     * @param  data A reference to the TypedTextData storage array.
     * @param  f    The fonts associated with the array.
     * @param  n    The number of typed texts in the array.
     */
    static void registerTypedTextDatabase(const TypedTextData* data, const Font* const* f, const uint16_t n)
 8013168:	b480      	push	{r7}
 801316a:	b085      	sub	sp, #20
 801316c:	af00      	add	r7, sp, #0
 801316e:	60f8      	str	r0, [r7, #12]
 8013170:	60b9      	str	r1, [r7, #8]
 8013172:	4613      	mov	r3, r2
 8013174:	80fb      	strh	r3, [r7, #6]
    {
        typedTexts = data;
 8013176:	4a07      	ldr	r2, [pc, #28]	; (8013194 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x2c>)
 8013178:	68fb      	ldr	r3, [r7, #12]
 801317a:	6013      	str	r3, [r2, #0]
        fonts = f;
 801317c:	4a06      	ldr	r2, [pc, #24]	; (8013198 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x30>)
 801317e:	68bb      	ldr	r3, [r7, #8]
 8013180:	6013      	str	r3, [r2, #0]
        numberOfTypedTexts = n;
 8013182:	4a06      	ldr	r2, [pc, #24]	; (801319c <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x34>)
 8013184:	88fb      	ldrh	r3, [r7, #6]
 8013186:	8013      	strh	r3, [r2, #0]
    }
 8013188:	bf00      	nop
 801318a:	3714      	adds	r7, #20
 801318c:	46bd      	mov	sp, r7
 801318e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013192:	4770      	bx	lr
 8013194:	2000585c 	.word	0x2000585c
 8013198:	20005864 	.word	0x20005864
 801319c:	20005860 	.word	0x20005860

080131a0 <_ZNK8touchgfx4Font14getStringWidthEPKtz>:
#include <touchgfx/Unicode.hpp>
#include <touchgfx/hal/HAL.hpp>
#include <touchgfx/lcd/LCD.hpp>

uint16_t touchgfx::Font::getStringWidth(const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 80131a0:	b40e      	push	{r1, r2, r3}
 80131a2:	b580      	push	{r7, lr}
 80131a4:	b085      	sub	sp, #20
 80131a6:	af00      	add	r7, sp, #0
 80131a8:	6078      	str	r0, [r7, #4]
    va_list pArg;
    va_start(pArg, text);
 80131aa:	f107 0320 	add.w	r3, r7, #32
 80131ae:	60bb      	str	r3, [r7, #8]
    uint16_t width = getStringWidthLTR(TEXT_DIRECTION_LTR, text, pArg);
 80131b0:	68bb      	ldr	r3, [r7, #8]
 80131b2:	69fa      	ldr	r2, [r7, #28]
 80131b4:	2100      	movs	r1, #0
 80131b6:	6878      	ldr	r0, [r7, #4]
 80131b8:	f006 fb26 	bl	8019808 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
 80131bc:	4603      	mov	r3, r0
 80131be:	81fb      	strh	r3, [r7, #14]
    va_end(pArg);
    return width;
 80131c0:	89fb      	ldrh	r3, [r7, #14]
}
 80131c2:	4618      	mov	r0, r3
 80131c4:	3714      	adds	r7, #20
 80131c6:	46bd      	mov	sp, r7
 80131c8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80131cc:	b003      	add	sp, #12
 80131ce:	4770      	bx	lr

080131d0 <_ZNK8touchgfx4Font14getStringWidthEhPKtz>:

uint16_t touchgfx::Font::getStringWidth(touchgfx::TextDirection textDirection, const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 80131d0:	b40c      	push	{r2, r3}
 80131d2:	b580      	push	{r7, lr}
 80131d4:	b084      	sub	sp, #16
 80131d6:	af00      	add	r7, sp, #0
 80131d8:	6078      	str	r0, [r7, #4]
 80131da:	460b      	mov	r3, r1
 80131dc:	70fb      	strb	r3, [r7, #3]
    va_list pArg;
    va_start(pArg, text);
 80131de:	f107 031c 	add.w	r3, r7, #28
 80131e2:	60bb      	str	r3, [r7, #8]
    uint16_t width = getStringWidthLTR(textDirection, text, pArg);
 80131e4:	78f9      	ldrb	r1, [r7, #3]
 80131e6:	68bb      	ldr	r3, [r7, #8]
 80131e8:	69ba      	ldr	r2, [r7, #24]
 80131ea:	6878      	ldr	r0, [r7, #4]
 80131ec:	f006 fb0c 	bl	8019808 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
 80131f0:	4603      	mov	r3, r0
 80131f2:	81fb      	strh	r3, [r7, #14]
    va_end(pArg);
    return width;
 80131f4:	89fb      	ldrh	r3, [r7, #14]
}
 80131f6:	4618      	mov	r0, r3
 80131f8:	3710      	adds	r7, #16
 80131fa:	46bd      	mov	sp, r7
 80131fc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8013200:	b002      	add	sp, #8
 8013202:	4770      	bx	lr

08013204 <_ZN8touchgfx12TextProvider15getNextLigatureEh>:

touchgfx::Unicode::UnicodeChar touchgfx::TextProvider::getNextLigature(TextDirection direction)
{
 8013204:	b580      	push	{r7, lr}
 8013206:	b08a      	sub	sp, #40	; 0x28
 8013208:	af00      	add	r7, sp, #0
 801320a:	6078      	str	r0, [r7, #4]
 801320c:	460b      	mov	r3, r1
 801320e:	70fb      	strb	r3, [r7, #3]
    if (fontGsubTable && nextCharacters.peekChar())
 8013210:	687b      	ldr	r3, [r7, #4]
 8013212:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013214:	2b00      	cmp	r3, #0
 8013216:	d016      	beq.n	8013246 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x42>
 8013218:	687b      	ldr	r3, [r7, #4]
 801321a:	331a      	adds	r3, #26
 801321c:	627b      	str	r3, [r7, #36]	; 0x24
        {
            return used == size;
        }
        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar()
        {
            assert(used > 0);
 801321e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013220:	8adb      	ldrh	r3, [r3, #22]
 8013222:	2b00      	cmp	r3, #0
 8013224:	d105      	bne.n	8013232 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x2e>
 8013226:	4b43      	ldr	r3, [pc, #268]	; (8013334 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x130>)
 8013228:	4a43      	ldr	r2, [pc, #268]	; (8013338 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x134>)
 801322a:	21c0      	movs	r1, #192	; 0xc0
 801322c:	4843      	ldr	r0, [pc, #268]	; (801333c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 801322e:	f013 ff7b 	bl	8027128 <__assert_func>
            return buffer[pos];
 8013232:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013234:	8a9b      	ldrh	r3, [r3, #20]
 8013236:	461a      	mov	r2, r3
 8013238:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801323a:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 801323e:	2b00      	cmp	r3, #0
 8013240:	d001      	beq.n	8013246 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x42>
 8013242:	2301      	movs	r3, #1
 8013244:	e000      	b.n	8013248 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x44>
 8013246:	2300      	movs	r3, #0
 8013248:	2b00      	cmp	r3, #0
 801324a:	d06a      	beq.n	8013322 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x11e>
    {
        substituteGlyphs();
 801324c:	6878      	ldr	r0, [r7, #4]
 801324e:	f007 fe29 	bl	801aea4 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>
        if (nextCharacters.peekChar(1) == 0x093F) //Hindi I-matra
 8013252:	687b      	ldr	r3, [r7, #4]
 8013254:	331a      	adds	r3, #26
 8013256:	623b      	str	r3, [r7, #32]
 8013258:	2301      	movs	r3, #1
 801325a:	83fb      	strh	r3, [r7, #30]
        }
        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar(uint16_t offset)
        {
            assert(offset < used);
 801325c:	6a3b      	ldr	r3, [r7, #32]
 801325e:	8adb      	ldrh	r3, [r3, #22]
 8013260:	8bfa      	ldrh	r2, [r7, #30]
 8013262:	429a      	cmp	r2, r3
 8013264:	d305      	bcc.n	8013272 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x6e>
 8013266:	4b36      	ldr	r3, [pc, #216]	; (8013340 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x13c>)
 8013268:	4a36      	ldr	r2, [pc, #216]	; (8013344 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x140>)
 801326a:	21c5      	movs	r1, #197	; 0xc5
 801326c:	4833      	ldr	r0, [pc, #204]	; (801333c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 801326e:	f013 ff5b 	bl	8027128 <__assert_func>
            const uint16_t index = pos + offset;
 8013272:	6a3b      	ldr	r3, [r7, #32]
 8013274:	8a9a      	ldrh	r2, [r3, #20]
 8013276:	8bfb      	ldrh	r3, [r7, #30]
 8013278:	4413      	add	r3, r2
 801327a:	83bb      	strh	r3, [r7, #28]
            return buffer[index < size ? index : index - size];
 801327c:	8bbb      	ldrh	r3, [r7, #28]
 801327e:	2b09      	cmp	r3, #9
 8013280:	d801      	bhi.n	8013286 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x82>
 8013282:	8bbb      	ldrh	r3, [r7, #28]
 8013284:	e001      	b.n	801328a <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x86>
 8013286:	8bbb      	ldrh	r3, [r7, #28]
 8013288:	3b0a      	subs	r3, #10
 801328a:	6a3a      	ldr	r2, [r7, #32]
 801328c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8013290:	f640 123f 	movw	r2, #2367	; 0x93f
 8013294:	4293      	cmp	r3, r2
 8013296:	bf0c      	ite	eq
 8013298:	2301      	moveq	r3, #1
 801329a:	2300      	movne	r3, #0
 801329c:	b2db      	uxtb	r3, r3
 801329e:	2b00      	cmp	r3, #0
 80132a0:	d03f      	beq.n	8013322 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x11e>
        {
            nextCharacters.replaceAt1(nextCharacters.peekChar());
 80132a2:	687b      	ldr	r3, [r7, #4]
 80132a4:	331a      	adds	r3, #26
 80132a6:	687a      	ldr	r2, [r7, #4]
 80132a8:	321a      	adds	r2, #26
 80132aa:	60ba      	str	r2, [r7, #8]
            assert(used > 0);
 80132ac:	68ba      	ldr	r2, [r7, #8]
 80132ae:	8ad2      	ldrh	r2, [r2, #22]
 80132b0:	2a00      	cmp	r2, #0
 80132b2:	d105      	bne.n	80132c0 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xbc>
 80132b4:	4b1f      	ldr	r3, [pc, #124]	; (8013334 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x130>)
 80132b6:	4a20      	ldr	r2, [pc, #128]	; (8013338 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x134>)
 80132b8:	21c0      	movs	r1, #192	; 0xc0
 80132ba:	4820      	ldr	r0, [pc, #128]	; (801333c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 80132bc:	f013 ff34 	bl	8027128 <__assert_func>
            return buffer[pos];
 80132c0:	68ba      	ldr	r2, [r7, #8]
 80132c2:	8a92      	ldrh	r2, [r2, #20]
 80132c4:	4611      	mov	r1, r2
 80132c6:	68ba      	ldr	r2, [r7, #8]
 80132c8:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 80132cc:	613b      	str	r3, [r7, #16]
 80132ce:	4613      	mov	r3, r2
 80132d0:	81fb      	strh	r3, [r7, #14]
        {
            buffer[pos] = newChar;
        }
        FORCE_INLINE_FUNCTION void replaceAt1(Unicode::UnicodeChar newChar)
        {
            assert(used > 1);
 80132d2:	693b      	ldr	r3, [r7, #16]
 80132d4:	8adb      	ldrh	r3, [r3, #22]
 80132d6:	2b01      	cmp	r3, #1
 80132d8:	d806      	bhi.n	80132e8 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xe4>
 80132da:	4b1b      	ldr	r3, [pc, #108]	; (8013348 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x144>)
 80132dc:	4a1b      	ldr	r2, [pc, #108]	; (801334c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x148>)
 80132de:	f240 110d 	movw	r1, #269	; 0x10d
 80132e2:	4816      	ldr	r0, [pc, #88]	; (801333c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 80132e4:	f013 ff20 	bl	8027128 <__assert_func>
            const uint16_t index = pos + 1;
 80132e8:	693b      	ldr	r3, [r7, #16]
 80132ea:	8a9b      	ldrh	r3, [r3, #20]
 80132ec:	3301      	adds	r3, #1
 80132ee:	81bb      	strh	r3, [r7, #12]
            buffer[index < size ? index : 0] = newChar;
 80132f0:	89bb      	ldrh	r3, [r7, #12]
 80132f2:	2b09      	cmp	r3, #9
 80132f4:	d801      	bhi.n	80132fa <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xf6>
 80132f6:	89bb      	ldrh	r3, [r7, #12]
 80132f8:	e000      	b.n	80132fc <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xf8>
 80132fa:	2300      	movs	r3, #0
 80132fc:	693a      	ldr	r2, [r7, #16]
 80132fe:	89f9      	ldrh	r1, [r7, #14]
 8013300:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        }
 8013304:	bf00      	nop
            nextCharacters.replaceAt0(0x093F);
 8013306:	687b      	ldr	r3, [r7, #4]
 8013308:	331a      	adds	r3, #26
 801330a:	61bb      	str	r3, [r7, #24]
 801330c:	f640 133f 	movw	r3, #2367	; 0x93f
 8013310:	82fb      	strh	r3, [r7, #22]
            buffer[pos] = newChar;
 8013312:	69bb      	ldr	r3, [r7, #24]
 8013314:	8a9b      	ldrh	r3, [r3, #20]
 8013316:	4619      	mov	r1, r3
 8013318:	69bb      	ldr	r3, [r7, #24]
 801331a:	8afa      	ldrh	r2, [r7, #22]
 801331c:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
        }
 8013320:	bf00      	nop
        }
    }
    return getNextChar();
 8013322:	6878      	ldr	r0, [r7, #4]
 8013324:	f007 fca2 	bl	801ac6c <_ZN8touchgfx12TextProvider11getNextCharEv>
 8013328:	4603      	mov	r3, r0
}
 801332a:	4618      	mov	r0, r3
 801332c:	3728      	adds	r7, #40	; 0x28
 801332e:	46bd      	mov	sp, r7
 8013330:	bd80      	pop	{r7, pc}
 8013332:	bf00      	nop
 8013334:	080288e8 	.word	0x080288e8
 8013338:	080288f4 	.word	0x080288f4
 801333c:	080289a0 	.word	0x080289a0
 8013340:	080289e8 	.word	0x080289e8
 8013344:	080289f8 	.word	0x080289f8
 8013348:	08028acc 	.word	0x08028acc
 801334c:	08028ad8 	.word	0x08028ad8

08013350 <_ZN8touchgfx12TextProvider18initializeInternalEv>:

void touchgfx::TextProvider::initializeInternal()
{
 8013350:	b580      	push	{r7, lr}
 8013352:	b082      	sub	sp, #8
 8013354:	af00      	add	r7, sp, #0
 8013356:	6078      	str	r0, [r7, #4]
    fillInputBuffer();
 8013358:	6878      	ldr	r0, [r7, #4]
 801335a:	f007 fc41 	bl	801abe0 <_ZN8touchgfx12TextProvider15fillInputBufferEv>
}
 801335e:	bf00      	nop
 8013360:	3708      	adds	r7, #8
 8013362:	46bd      	mov	sp, r7
 8013364:	bd80      	pop	{r7, pc}

08013366 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>:

void touchgfx::LCD::drawString(touchgfx::Rect widgetArea, const touchgfx::Rect& invalidatedArea, const touchgfx::LCD::StringVisuals& stringVisuals, const touchgfx::Unicode::UnicodeChar* format, ...)
{
 8013366:	b580      	push	{r7, lr}
 8013368:	b088      	sub	sp, #32
 801336a:	af02      	add	r7, sp, #8
 801336c:	60f8      	str	r0, [r7, #12]
 801336e:	1d38      	adds	r0, r7, #4
 8013370:	e880 0006 	stmia.w	r0, {r1, r2}
 8013374:	603b      	str	r3, [r7, #0]
    va_list pArg;
    va_start(pArg, format);
 8013376:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801337a:	617b      	str	r3, [r7, #20]
    drawStringLTR(widgetArea, invalidatedArea, stringVisuals, format, pArg);
 801337c:	1d39      	adds	r1, r7, #4
 801337e:	697b      	ldr	r3, [r7, #20]
 8013380:	9301      	str	r3, [sp, #4]
 8013382:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013384:	9300      	str	r3, [sp, #0]
 8013386:	6a3b      	ldr	r3, [r7, #32]
 8013388:	683a      	ldr	r2, [r7, #0]
 801338a:	68f8      	ldr	r0, [r7, #12]
 801338c:	f004 ff82 	bl	8018294 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list>
    va_end(pArg);
}
 8013390:	bf00      	nop
 8013392:	3718      	adds	r7, #24
 8013394:	46bd      	mov	sp, r7
 8013396:	bd80      	pop	{r7, pc}

08013398 <_ZN8touchgfx5Texts11setLanguageEt>:
touchgfx::LanguageId touchgfx::Texts::currentLanguage = static_cast<touchgfx::LanguageId>(0);
static const touchgfx::Unicode::UnicodeChar* currentLanguagePtr = 0;
static const uint32_t* currentLanguageIndices = 0;

void touchgfx::Texts::setLanguage(touchgfx::LanguageId id)
{
 8013398:	b590      	push	{r4, r7, lr}
 801339a:	b085      	sub	sp, #20
 801339c:	af00      	add	r7, sp, #0
 801339e:	4603      	mov	r3, r0
 80133a0:	80fb      	strh	r3, [r7, #6]
    const touchgfx::TypedText::TypedTextData* currentLanguageTypedText = 0;
 80133a2:	2300      	movs	r3, #0
 80133a4:	60fb      	str	r3, [r7, #12]
    if (id < 1)
 80133a6:	88fb      	ldrh	r3, [r7, #6]
 80133a8:	2b00      	cmp	r3, #0
 80133aa:	d127      	bne.n	80133fc <_ZN8touchgfx5Texts11setLanguageEt+0x64>
    {
        if (languagesArray[id] != 0)
 80133ac:	88fb      	ldrh	r3, [r7, #6]
 80133ae:	4a1e      	ldr	r2, [pc, #120]	; (8013428 <_ZN8touchgfx5Texts11setLanguageEt+0x90>)
 80133b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80133b4:	2b00      	cmp	r3, #0
 80133b6:	d016      	beq.n	80133e6 <_ZN8touchgfx5Texts11setLanguageEt+0x4e>
        {
            //dynamic translation is added
            const TranslationHeader* translation = languagesArray[id];
 80133b8:	88fb      	ldrh	r3, [r7, #6]
 80133ba:	4a1b      	ldr	r2, [pc, #108]	; (8013428 <_ZN8touchgfx5Texts11setLanguageEt+0x90>)
 80133bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80133c0:	60bb      	str	r3, [r7, #8]
            currentLanguagePtr = (const touchgfx::Unicode::UnicodeChar*)(((const uint8_t*)translation) + translation->offset_to_texts);
 80133c2:	68bb      	ldr	r3, [r7, #8]
 80133c4:	681b      	ldr	r3, [r3, #0]
 80133c6:	68ba      	ldr	r2, [r7, #8]
 80133c8:	4413      	add	r3, r2
 80133ca:	4a18      	ldr	r2, [pc, #96]	; (801342c <_ZN8touchgfx5Texts11setLanguageEt+0x94>)
 80133cc:	6013      	str	r3, [r2, #0]
            currentLanguageIndices = (const uint32_t*)(((const uint8_t*)translation) + translation->offset_to_indices);
 80133ce:	68bb      	ldr	r3, [r7, #8]
 80133d0:	685b      	ldr	r3, [r3, #4]
 80133d2:	68ba      	ldr	r2, [r7, #8]
 80133d4:	4413      	add	r3, r2
 80133d6:	4a16      	ldr	r2, [pc, #88]	; (8013430 <_ZN8touchgfx5Texts11setLanguageEt+0x98>)
 80133d8:	6013      	str	r3, [r2, #0]
            currentLanguageTypedText = (const touchgfx::TypedText::TypedTextData*)(((const uint8_t*)translation) + translation->offset_to_typedtext);
 80133da:	68bb      	ldr	r3, [r7, #8]
 80133dc:	689b      	ldr	r3, [r3, #8]
 80133de:	68ba      	ldr	r2, [r7, #8]
 80133e0:	4413      	add	r3, r2
 80133e2:	60fb      	str	r3, [r7, #12]
 80133e4:	e00a      	b.n	80133fc <_ZN8touchgfx5Texts11setLanguageEt+0x64>
        }
        else
        {
            //compiled and linked in languages
            currentLanguagePtr = texts_all_languages;
 80133e6:	4b11      	ldr	r3, [pc, #68]	; (801342c <_ZN8touchgfx5Texts11setLanguageEt+0x94>)
 80133e8:	4a12      	ldr	r2, [pc, #72]	; (8013434 <_ZN8touchgfx5Texts11setLanguageEt+0x9c>)
 80133ea:	601a      	str	r2, [r3, #0]
            currentLanguageIndices = staticLanguageIndices[id];
 80133ec:	4a12      	ldr	r2, [pc, #72]	; (8013438 <_ZN8touchgfx5Texts11setLanguageEt+0xa0>)
 80133ee:	4b10      	ldr	r3, [pc, #64]	; (8013430 <_ZN8touchgfx5Texts11setLanguageEt+0x98>)
 80133f0:	601a      	str	r2, [r3, #0]
            currentLanguageTypedText = typedTextDatabaseArray[id];
 80133f2:	88fb      	ldrh	r3, [r7, #6]
 80133f4:	4a11      	ldr	r2, [pc, #68]	; (801343c <_ZN8touchgfx5Texts11setLanguageEt+0xa4>)
 80133f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80133fa:	60fb      	str	r3, [r7, #12]
        }
    }

    if (currentLanguageTypedText)
 80133fc:	68fb      	ldr	r3, [r7, #12]
 80133fe:	2b00      	cmp	r3, #0
 8013400:	d00d      	beq.n	801341e <_ZN8touchgfx5Texts11setLanguageEt+0x86>
    {
        currentLanguage = id;
 8013402:	4a0f      	ldr	r2, [pc, #60]	; (8013440 <_ZN8touchgfx5Texts11setLanguageEt+0xa8>)
 8013404:	88fb      	ldrh	r3, [r7, #6]
 8013406:	8013      	strh	r3, [r2, #0]
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
                                                       TypedTextDatabase::getFonts(), TypedTextDatabase::getInstanceSize());
 8013408:	f000 f83e 	bl	8013488 <_ZN17TypedTextDatabase8getFontsEv>
 801340c:	4604      	mov	r4, r0
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
 801340e:	f000 f833 	bl	8013478 <_ZN17TypedTextDatabase15getInstanceSizeEv>
 8013412:	4603      	mov	r3, r0
 8013414:	461a      	mov	r2, r3
 8013416:	4621      	mov	r1, r4
 8013418:	68f8      	ldr	r0, [r7, #12]
 801341a:	f7ff fea5 	bl	8013168 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt>
    }
}
 801341e:	bf00      	nop
 8013420:	3714      	adds	r7, #20
 8013422:	46bd      	mov	sp, r7
 8013424:	bd90      	pop	{r4, r7, pc}
 8013426:	bf00      	nop
 8013428:	200052c4 	.word	0x200052c4
 801342c:	200052cc 	.word	0x200052cc
 8013430:	200052d0 	.word	0x200052d0
 8013434:	08048e20 	.word	0x08048e20
 8013438:	08048e18 	.word	0x08048e18
 801343c:	08048e3c 	.word	0x08048e3c
 8013440:	200052c8 	.word	0x200052c8

08013444 <_ZNK8touchgfx5Texts7getTextEt>:
{
    languagesArray[id] = (const TranslationHeader*)translation;
}

const touchgfx::Unicode::UnicodeChar* touchgfx::Texts::getText(TypedTextId id) const
{
 8013444:	b480      	push	{r7}
 8013446:	b083      	sub	sp, #12
 8013448:	af00      	add	r7, sp, #0
 801344a:	6078      	str	r0, [r7, #4]
 801344c:	460b      	mov	r3, r1
 801344e:	807b      	strh	r3, [r7, #2]
    return &currentLanguagePtr[currentLanguageIndices[id]];
 8013450:	4b07      	ldr	r3, [pc, #28]	; (8013470 <_ZNK8touchgfx5Texts7getTextEt+0x2c>)
 8013452:	681a      	ldr	r2, [r3, #0]
 8013454:	4b07      	ldr	r3, [pc, #28]	; (8013474 <_ZNK8touchgfx5Texts7getTextEt+0x30>)
 8013456:	6819      	ldr	r1, [r3, #0]
 8013458:	887b      	ldrh	r3, [r7, #2]
 801345a:	009b      	lsls	r3, r3, #2
 801345c:	440b      	add	r3, r1
 801345e:	681b      	ldr	r3, [r3, #0]
 8013460:	005b      	lsls	r3, r3, #1
 8013462:	4413      	add	r3, r2
}
 8013464:	4618      	mov	r0, r3
 8013466:	370c      	adds	r7, #12
 8013468:	46bd      	mov	sp, r7
 801346a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801346e:	4770      	bx	lr
 8013470:	200052cc 	.word	0x200052cc
 8013474:	200052d0 	.word	0x200052d0

08013478 <_ZN17TypedTextDatabase15getInstanceSizeEv>:
{
    return typedTextDatabaseArray[id];
}

uint16_t getInstanceSize()
{
 8013478:	b480      	push	{r7}
 801347a:	af00      	add	r7, sp, #0
    return sizeof(typedText_database_DEFAULT) / sizeof(touchgfx::TypedText::TypedTextData);
 801347c:	2302      	movs	r3, #2
}
 801347e:	4618      	mov	r0, r3
 8013480:	46bd      	mov	sp, r7
 8013482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013486:	4770      	bx	lr

08013488 <_ZN17TypedTextDatabase8getFontsEv>:

const touchgfx::Font** getFonts()
{
 8013488:	b480      	push	{r7}
 801348a:	af00      	add	r7, sp, #0
    return touchgfx_fonts;
 801348c:	4b02      	ldr	r3, [pc, #8]	; (8013498 <_ZN17TypedTextDatabase8getFontsEv+0x10>)
}
 801348e:	4618      	mov	r0, r3
 8013490:	46bd      	mov	sp, r7
 8013492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013496:	4770      	bx	lr
 8013498:	200052d4 	.word	0x200052d4

0801349c <_Z41__static_initialization_and_destruction_0ii>:
    case 2:
        touchgfx_fonts[2] = &(getFont_verdana_10_4bpp());
        break;
    }
}
}  // namespace TypedTextDatabase
 801349c:	b580      	push	{r7, lr}
 801349e:	b082      	sub	sp, #8
 80134a0:	af00      	add	r7, sp, #0
 80134a2:	6078      	str	r0, [r7, #4]
 80134a4:	6039      	str	r1, [r7, #0]
 80134a6:	687b      	ldr	r3, [r7, #4]
 80134a8:	2b01      	cmp	r3, #1
 80134aa:	d113      	bne.n	80134d4 <_Z41__static_initialization_and_destruction_0ii+0x38>
 80134ac:	683b      	ldr	r3, [r7, #0]
 80134ae:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80134b2:	4293      	cmp	r3, r2
 80134b4:	d10e      	bne.n	80134d4 <_Z41__static_initialization_and_destruction_0ii+0x38>
    &(getFont_verdana_20_4bpp()),
 80134b6:	f7fd fc2b 	bl	8010d10 <_Z23getFont_verdana_20_4bppv>
 80134ba:	4603      	mov	r3, r0
};
 80134bc:	4a07      	ldr	r2, [pc, #28]	; (80134dc <_Z41__static_initialization_and_destruction_0ii+0x40>)
 80134be:	6013      	str	r3, [r2, #0]
    &(getFont_verdana_40_4bpp()),
 80134c0:	f7fd fc7a 	bl	8010db8 <_Z23getFont_verdana_40_4bppv>
 80134c4:	4603      	mov	r3, r0
};
 80134c6:	4a05      	ldr	r2, [pc, #20]	; (80134dc <_Z41__static_initialization_and_destruction_0ii+0x40>)
 80134c8:	6053      	str	r3, [r2, #4]
    &(getFont_verdana_10_4bpp())
 80134ca:	f7fd fbcd 	bl	8010c68 <_Z23getFont_verdana_10_4bppv>
 80134ce:	4603      	mov	r3, r0
};
 80134d0:	4a02      	ldr	r2, [pc, #8]	; (80134dc <_Z41__static_initialization_and_destruction_0ii+0x40>)
 80134d2:	6093      	str	r3, [r2, #8]
}  // namespace TypedTextDatabase
 80134d4:	bf00      	nop
 80134d6:	3708      	adds	r7, #8
 80134d8:	46bd      	mov	sp, r7
 80134da:	bd80      	pop	{r7, pc}
 80134dc:	200052d4 	.word	0x200052d4

080134e0 <_GLOBAL__sub_I_touchgfx_fonts>:
 80134e0:	b580      	push	{r7, lr}
 80134e2:	af00      	add	r7, sp, #0
 80134e4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80134e8:	2001      	movs	r0, #1
 80134ea:	f7ff ffd7 	bl	801349c <_Z41__static_initialization_and_destruction_0ii>
 80134ee:	bd80      	pop	{r7, pc}

080134f0 <_ZN19FrontendApplicationD1Ev>:

class FrontendApplication : public FrontendApplicationBase
{
public:
    FrontendApplication(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplication() { }
 80134f0:	b580      	push	{r7, lr}
 80134f2:	b082      	sub	sp, #8
 80134f4:	af00      	add	r7, sp, #0
 80134f6:	6078      	str	r0, [r7, #4]
 80134f8:	4a05      	ldr	r2, [pc, #20]	; (8013510 <_ZN19FrontendApplicationD1Ev+0x20>)
 80134fa:	687b      	ldr	r3, [r7, #4]
 80134fc:	601a      	str	r2, [r3, #0]
 80134fe:	687b      	ldr	r3, [r7, #4]
 8013500:	4618      	mov	r0, r3
 8013502:	f7fe f809 	bl	8011518 <_ZN23FrontendApplicationBaseD1Ev>
 8013506:	687b      	ldr	r3, [r7, #4]
 8013508:	4618      	mov	r0, r3
 801350a:	3708      	adds	r7, #8
 801350c:	46bd      	mov	sp, r7
 801350e:	bd80      	pop	{r7, pc}
 8013510:	080293ac 	.word	0x080293ac

08013514 <_ZN19FrontendApplicationD0Ev>:
 8013514:	b580      	push	{r7, lr}
 8013516:	b082      	sub	sp, #8
 8013518:	af00      	add	r7, sp, #0
 801351a:	6078      	str	r0, [r7, #4]
 801351c:	6878      	ldr	r0, [r7, #4]
 801351e:	f7ff ffe7 	bl	80134f0 <_ZN19FrontendApplicationD1Ev>
 8013522:	f44f 71ac 	mov.w	r1, #344	; 0x158
 8013526:	6878      	ldr	r0, [r7, #4]
 8013528:	f013 fdcf 	bl	80270ca <_ZdlPvj>
 801352c:	687b      	ldr	r3, [r7, #4]
 801352e:	4618      	mov	r0, r3
 8013530:	3708      	adds	r7, #8
 8013532:	46bd      	mov	sp, r7
 8013534:	bd80      	pop	{r7, pc}

08013536 <_ZN19FrontendApplication15handleTickEventEv>:

    virtual void handleTickEvent()
 8013536:	b580      	push	{r7, lr}
 8013538:	b082      	sub	sp, #8
 801353a:	af00      	add	r7, sp, #0
 801353c:	6078      	str	r0, [r7, #4]
    {
        model.tick();
 801353e:	687b      	ldr	r3, [r7, #4]
 8013540:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8013544:	4618      	mov	r0, r3
 8013546:	f000 f82d 	bl	80135a4 <_ZN5Model4tickEv>
        FrontendApplicationBase::handleTickEvent();
 801354a:	687b      	ldr	r3, [r7, #4]
 801354c:	4618      	mov	r0, r3
 801354e:	f005 f9e9 	bl	8018924 <_ZN8touchgfx11Application15handleTickEventEv>
    }
 8013552:	bf00      	nop
 8013554:	3708      	adds	r7, #8
 8013556:	46bd      	mov	sp, r7
 8013558:	bd80      	pop	{r7, pc}
	...

0801355c <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>:
#include <gui/common/FrontendApplication.hpp>

FrontendApplication::FrontendApplication(Model& m, FrontendHeap& heap)
 801355c:	b580      	push	{r7, lr}
 801355e:	b084      	sub	sp, #16
 8013560:	af00      	add	r7, sp, #0
 8013562:	60f8      	str	r0, [r7, #12]
 8013564:	60b9      	str	r1, [r7, #8]
 8013566:	607a      	str	r2, [r7, #4]
    : FrontendApplicationBase(m, heap)
 8013568:	68fb      	ldr	r3, [r7, #12]
 801356a:	687a      	ldr	r2, [r7, #4]
 801356c:	68b9      	ldr	r1, [r7, #8]
 801356e:	4618      	mov	r0, r3
 8013570:	f7fe f85c 	bl	801162c <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>
 8013574:	4a03      	ldr	r2, [pc, #12]	; (8013584 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap+0x28>)
 8013576:	68fb      	ldr	r3, [r7, #12]
 8013578:	601a      	str	r2, [r3, #0]
{

}
 801357a:	68fb      	ldr	r3, [r7, #12]
 801357c:	4618      	mov	r0, r3
 801357e:	3710      	adds	r7, #16
 8013580:	46bd      	mov	sp, r7
 8013582:	bd80      	pop	{r7, pc}
 8013584:	080293ac 	.word	0x080293ac

08013588 <_ZN5ModelC1Ev>:
#include <gui/model/Model.hpp>
#include <gui/model/ModelListener.hpp>

Model::Model() : modelListener(0)
 8013588:	b480      	push	{r7}
 801358a:	b083      	sub	sp, #12
 801358c:	af00      	add	r7, sp, #0
 801358e:	6078      	str	r0, [r7, #4]
 8013590:	687b      	ldr	r3, [r7, #4]
 8013592:	2200      	movs	r2, #0
 8013594:	601a      	str	r2, [r3, #0]
{

}
 8013596:	687b      	ldr	r3, [r7, #4]
 8013598:	4618      	mov	r0, r3
 801359a:	370c      	adds	r7, #12
 801359c:	46bd      	mov	sp, r7
 801359e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80135a2:	4770      	bx	lr

080135a4 <_ZN5Model4tickEv>:

void Model::tick()
{
 80135a4:	b480      	push	{r7}
 80135a6:	b083      	sub	sp, #12
 80135a8:	af00      	add	r7, sp, #0
 80135aa:	6078      	str	r0, [r7, #4]

}
 80135ac:	bf00      	nop
 80135ae:	370c      	adds	r7, #12
 80135b0:	46bd      	mov	sp, r7
 80135b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80135b6:	4770      	bx	lr

080135b8 <_ZN8touchgfx9Presenter8activateEv>:
     * Place initialization code for the Presenter here.
     *
     * The activate function is called automatically when a screen transition causes this
     * Presenter to become active. Place initialization code for the Presenter here.
     */
    virtual void activate()
 80135b8:	b480      	push	{r7}
 80135ba:	b083      	sub	sp, #12
 80135bc:	af00      	add	r7, sp, #0
 80135be:	6078      	str	r0, [r7, #4]
    {
    }
 80135c0:	bf00      	nop
 80135c2:	370c      	adds	r7, #12
 80135c4:	46bd      	mov	sp, r7
 80135c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80135ca:	4770      	bx	lr

080135cc <_ZN8touchgfx9Presenter10deactivateEv>:
     * Place cleanup code for the Presenter here.
     *
     * The deactivate function is called automatically when a screen transition causes this
     * Presenter to become inactive. Place cleanup code for the Presenter here.
     */
    virtual void deactivate()
 80135cc:	b480      	push	{r7}
 80135ce:	b083      	sub	sp, #12
 80135d0:	af00      	add	r7, sp, #0
 80135d2:	6078      	str	r0, [r7, #4]
    {
    }
 80135d4:	bf00      	nop
 80135d6:	370c      	adds	r7, #12
 80135d8:	46bd      	mov	sp, r7
 80135da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80135de:	4770      	bx	lr

080135e0 <_ZN8touchgfx9PresenterD1Ev>:

    /** Finalizes an instance of the Presenter class. */
    virtual ~Presenter()
 80135e0:	b480      	push	{r7}
 80135e2:	b083      	sub	sp, #12
 80135e4:	af00      	add	r7, sp, #0
 80135e6:	6078      	str	r0, [r7, #4]
    {
 80135e8:	4a04      	ldr	r2, [pc, #16]	; (80135fc <_ZN8touchgfx9PresenterD1Ev+0x1c>)
 80135ea:	687b      	ldr	r3, [r7, #4]
 80135ec:	601a      	str	r2, [r3, #0]
    }
 80135ee:	687b      	ldr	r3, [r7, #4]
 80135f0:	4618      	mov	r0, r3
 80135f2:	370c      	adds	r7, #12
 80135f4:	46bd      	mov	sp, r7
 80135f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80135fa:	4770      	bx	lr
 80135fc:	08029428 	.word	0x08029428

08013600 <_ZN8touchgfx9PresenterD0Ev>:
    virtual ~Presenter()
 8013600:	b580      	push	{r7, lr}
 8013602:	b082      	sub	sp, #8
 8013604:	af00      	add	r7, sp, #0
 8013606:	6078      	str	r0, [r7, #4]
    }
 8013608:	6878      	ldr	r0, [r7, #4]
 801360a:	f7ff ffe9 	bl	80135e0 <_ZN8touchgfx9PresenterD1Ev>
 801360e:	2104      	movs	r1, #4
 8013610:	6878      	ldr	r0, [r7, #4]
 8013612:	f013 fd5a 	bl	80270ca <_ZdlPvj>
 8013616:	687b      	ldr	r3, [r7, #4]
 8013618:	4618      	mov	r0, r3
 801361a:	3708      	adds	r7, #8
 801361c:	46bd      	mov	sp, r7
 801361e:	bd80      	pop	{r7, pc}

08013620 <_ZN8touchgfx9PresenterC1Ev>:

protected:
    /** Initializes a new instance of the Presenter class. */
    Presenter()
 8013620:	b480      	push	{r7}
 8013622:	b083      	sub	sp, #12
 8013624:	af00      	add	r7, sp, #0
 8013626:	6078      	str	r0, [r7, #4]
    {
 8013628:	4a04      	ldr	r2, [pc, #16]	; (801363c <_ZN8touchgfx9PresenterC1Ev+0x1c>)
 801362a:	687b      	ldr	r3, [r7, #4]
 801362c:	601a      	str	r2, [r3, #0]
    }
 801362e:	687b      	ldr	r3, [r7, #4]
 8013630:	4618      	mov	r0, r3
 8013632:	370c      	adds	r7, #12
 8013634:	46bd      	mov	sp, r7
 8013636:	f85d 7b04 	ldr.w	r7, [sp], #4
 801363a:	4770      	bx	lr
 801363c:	08029428 	.word	0x08029428

08013640 <_ZN13ModelListenerC1Ev>:
    ModelListener() : model(0) {}
 8013640:	b480      	push	{r7}
 8013642:	b083      	sub	sp, #12
 8013644:	af00      	add	r7, sp, #0
 8013646:	6078      	str	r0, [r7, #4]
 8013648:	4a06      	ldr	r2, [pc, #24]	; (8013664 <_ZN13ModelListenerC1Ev+0x24>)
 801364a:	687b      	ldr	r3, [r7, #4]
 801364c:	601a      	str	r2, [r3, #0]
 801364e:	687b      	ldr	r3, [r7, #4]
 8013650:	2200      	movs	r2, #0
 8013652:	605a      	str	r2, [r3, #4]
 8013654:	687b      	ldr	r3, [r7, #4]
 8013656:	4618      	mov	r0, r3
 8013658:	370c      	adds	r7, #12
 801365a:	46bd      	mov	sp, r7
 801365c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013660:	4770      	bx	lr
 8013662:	bf00      	nop
 8013664:	08029418 	.word	0x08029418

08013668 <_ZN13ModelListenerD1Ev>:
    virtual ~ModelListener() {}
 8013668:	b480      	push	{r7}
 801366a:	b083      	sub	sp, #12
 801366c:	af00      	add	r7, sp, #0
 801366e:	6078      	str	r0, [r7, #4]
 8013670:	4a04      	ldr	r2, [pc, #16]	; (8013684 <_ZN13ModelListenerD1Ev+0x1c>)
 8013672:	687b      	ldr	r3, [r7, #4]
 8013674:	601a      	str	r2, [r3, #0]
 8013676:	687b      	ldr	r3, [r7, #4]
 8013678:	4618      	mov	r0, r3
 801367a:	370c      	adds	r7, #12
 801367c:	46bd      	mov	sp, r7
 801367e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013682:	4770      	bx	lr
 8013684:	08029418 	.word	0x08029418

08013688 <_ZN13ModelListenerD0Ev>:
 8013688:	b580      	push	{r7, lr}
 801368a:	b082      	sub	sp, #8
 801368c:	af00      	add	r7, sp, #0
 801368e:	6078      	str	r0, [r7, #4]
 8013690:	6878      	ldr	r0, [r7, #4]
 8013692:	f7ff ffe9 	bl	8013668 <_ZN13ModelListenerD1Ev>
 8013696:	2108      	movs	r1, #8
 8013698:	6878      	ldr	r0, [r7, #4]
 801369a:	f013 fd16 	bl	80270ca <_ZdlPvj>
 801369e:	687b      	ldr	r3, [r7, #4]
 80136a0:	4618      	mov	r0, r3
 80136a2:	3708      	adds	r7, #8
 80136a4:	46bd      	mov	sp, r7
 80136a6:	bd80      	pop	{r7, pc}

080136a8 <_ZN16Screen1PresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~Screen1Presenter() {};
 80136a8:	b580      	push	{r7, lr}
 80136aa:	b082      	sub	sp, #8
 80136ac:	af00      	add	r7, sp, #0
 80136ae:	6078      	str	r0, [r7, #4]
 80136b0:	4a09      	ldr	r2, [pc, #36]	; (80136d8 <_ZN16Screen1PresenterD1Ev+0x30>)
 80136b2:	687b      	ldr	r3, [r7, #4]
 80136b4:	601a      	str	r2, [r3, #0]
 80136b6:	4a09      	ldr	r2, [pc, #36]	; (80136dc <_ZN16Screen1PresenterD1Ev+0x34>)
 80136b8:	687b      	ldr	r3, [r7, #4]
 80136ba:	605a      	str	r2, [r3, #4]
 80136bc:	687b      	ldr	r3, [r7, #4]
 80136be:	3304      	adds	r3, #4
 80136c0:	4618      	mov	r0, r3
 80136c2:	f7ff ffd1 	bl	8013668 <_ZN13ModelListenerD1Ev>
 80136c6:	687b      	ldr	r3, [r7, #4]
 80136c8:	4618      	mov	r0, r3
 80136ca:	f7ff ff89 	bl	80135e0 <_ZN8touchgfx9PresenterD1Ev>
 80136ce:	687b      	ldr	r3, [r7, #4]
 80136d0:	4618      	mov	r0, r3
 80136d2:	3708      	adds	r7, #8
 80136d4:	46bd      	mov	sp, r7
 80136d6:	bd80      	pop	{r7, pc}
 80136d8:	080293f0 	.word	0x080293f0
 80136dc:	08029408 	.word	0x08029408

080136e0 <_ZThn4_N16Screen1PresenterD1Ev>:
 80136e0:	f1a0 0004 	sub.w	r0, r0, #4
 80136e4:	e7e0      	b.n	80136a8 <_ZN16Screen1PresenterD1Ev>
 80136e6:	bf00      	nop

080136e8 <_ZN16Screen1PresenterD0Ev>:
 80136e8:	b580      	push	{r7, lr}
 80136ea:	b082      	sub	sp, #8
 80136ec:	af00      	add	r7, sp, #0
 80136ee:	6078      	str	r0, [r7, #4]
 80136f0:	6878      	ldr	r0, [r7, #4]
 80136f2:	f7ff ffd9 	bl	80136a8 <_ZN16Screen1PresenterD1Ev>
 80136f6:	2110      	movs	r1, #16
 80136f8:	6878      	ldr	r0, [r7, #4]
 80136fa:	f013 fce6 	bl	80270ca <_ZdlPvj>
 80136fe:	687b      	ldr	r3, [r7, #4]
 8013700:	4618      	mov	r0, r3
 8013702:	3708      	adds	r7, #8
 8013704:	46bd      	mov	sp, r7
 8013706:	bd80      	pop	{r7, pc}

08013708 <_ZThn4_N16Screen1PresenterD0Ev>:
 8013708:	f1a0 0004 	sub.w	r0, r0, #4
 801370c:	e7ec      	b.n	80136e8 <_ZN16Screen1PresenterD0Ev>
	...

08013710 <_ZN16Screen1PresenterC1ER11Screen1View>:
#include <gui/screen1_screen/Screen1View.hpp>
#include <gui/screen1_screen/Screen1Presenter.hpp>

Screen1Presenter::Screen1Presenter(Screen1View& v)
 8013710:	b580      	push	{r7, lr}
 8013712:	b082      	sub	sp, #8
 8013714:	af00      	add	r7, sp, #0
 8013716:	6078      	str	r0, [r7, #4]
 8013718:	6039      	str	r1, [r7, #0]
    : view(v)
 801371a:	687b      	ldr	r3, [r7, #4]
 801371c:	4618      	mov	r0, r3
 801371e:	f7ff ff7f 	bl	8013620 <_ZN8touchgfx9PresenterC1Ev>
 8013722:	687b      	ldr	r3, [r7, #4]
 8013724:	3304      	adds	r3, #4
 8013726:	4618      	mov	r0, r3
 8013728:	f7ff ff8a 	bl	8013640 <_ZN13ModelListenerC1Ev>
 801372c:	4a06      	ldr	r2, [pc, #24]	; (8013748 <_ZN16Screen1PresenterC1ER11Screen1View+0x38>)
 801372e:	687b      	ldr	r3, [r7, #4]
 8013730:	601a      	str	r2, [r3, #0]
 8013732:	4a06      	ldr	r2, [pc, #24]	; (801374c <_ZN16Screen1PresenterC1ER11Screen1View+0x3c>)
 8013734:	687b      	ldr	r3, [r7, #4]
 8013736:	605a      	str	r2, [r3, #4]
 8013738:	687b      	ldr	r3, [r7, #4]
 801373a:	683a      	ldr	r2, [r7, #0]
 801373c:	60da      	str	r2, [r3, #12]
{

}
 801373e:	687b      	ldr	r3, [r7, #4]
 8013740:	4618      	mov	r0, r3
 8013742:	3708      	adds	r7, #8
 8013744:	46bd      	mov	sp, r7
 8013746:	bd80      	pop	{r7, pc}
 8013748:	080293f0 	.word	0x080293f0
 801374c:	08029408 	.word	0x08029408

08013750 <_ZN16Screen1Presenter8activateEv>:

void Screen1Presenter::activate()
{
 8013750:	b480      	push	{r7}
 8013752:	b083      	sub	sp, #12
 8013754:	af00      	add	r7, sp, #0
 8013756:	6078      	str	r0, [r7, #4]

}
 8013758:	bf00      	nop
 801375a:	370c      	adds	r7, #12
 801375c:	46bd      	mov	sp, r7
 801375e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013762:	4770      	bx	lr

08013764 <_ZN16Screen1Presenter10deactivateEv>:

void Screen1Presenter::deactivate()
{
 8013764:	b480      	push	{r7}
 8013766:	b083      	sub	sp, #12
 8013768:	af00      	add	r7, sp, #0
 801376a:	6078      	str	r0, [r7, #4]

}
 801376c:	bf00      	nop
 801376e:	370c      	adds	r7, #12
 8013770:	46bd      	mov	sp, r7
 8013772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013776:	4770      	bx	lr

08013778 <_ZN11Screen1ViewD1Ev>:

class Screen1View : public Screen1ViewBase
{
public:
    Screen1View();
    virtual ~Screen1View() {}
 8013778:	b580      	push	{r7, lr}
 801377a:	b082      	sub	sp, #8
 801377c:	af00      	add	r7, sp, #0
 801377e:	6078      	str	r0, [r7, #4]
 8013780:	4a05      	ldr	r2, [pc, #20]	; (8013798 <_ZN11Screen1ViewD1Ev+0x20>)
 8013782:	687b      	ldr	r3, [r7, #4]
 8013784:	601a      	str	r2, [r3, #0]
 8013786:	687b      	ldr	r3, [r7, #4]
 8013788:	4618      	mov	r0, r3
 801378a:	f7fe fff3 	bl	8012774 <_ZN15Screen1ViewBaseD1Ev>
 801378e:	687b      	ldr	r3, [r7, #4]
 8013790:	4618      	mov	r0, r3
 8013792:	3708      	adds	r7, #8
 8013794:	46bd      	mov	sp, r7
 8013796:	bd80      	pop	{r7, pc}
 8013798:	08029440 	.word	0x08029440

0801379c <_ZN11Screen1ViewD0Ev>:
 801379c:	b580      	push	{r7, lr}
 801379e:	b082      	sub	sp, #8
 80137a0:	af00      	add	r7, sp, #0
 80137a2:	6078      	str	r0, [r7, #4]
 80137a4:	6878      	ldr	r0, [r7, #4]
 80137a6:	f7ff ffe7 	bl	8013778 <_ZN11Screen1ViewD1Ev>
 80137aa:	21a8      	movs	r1, #168	; 0xa8
 80137ac:	6878      	ldr	r0, [r7, #4]
 80137ae:	f013 fc8c 	bl	80270ca <_ZdlPvj>
 80137b2:	687b      	ldr	r3, [r7, #4]
 80137b4:	4618      	mov	r0, r3
 80137b6:	3708      	adds	r7, #8
 80137b8:	46bd      	mov	sp, r7
 80137ba:	bd80      	pop	{r7, pc}

080137bc <_ZN11Screen1ViewC1Ev>:
#include <gui/screen1_screen/Screen1View.hpp>

Screen1View::Screen1View()
 80137bc:	b580      	push	{r7, lr}
 80137be:	b082      	sub	sp, #8
 80137c0:	af00      	add	r7, sp, #0
 80137c2:	6078      	str	r0, [r7, #4]
 80137c4:	687b      	ldr	r3, [r7, #4]
 80137c6:	4618      	mov	r0, r3
 80137c8:	f7ff f82a 	bl	8012820 <_ZN15Screen1ViewBaseC1Ev>
 80137cc:	4a03      	ldr	r2, [pc, #12]	; (80137dc <_ZN11Screen1ViewC1Ev+0x20>)
 80137ce:	687b      	ldr	r3, [r7, #4]
 80137d0:	601a      	str	r2, [r3, #0]
{

}
 80137d2:	687b      	ldr	r3, [r7, #4]
 80137d4:	4618      	mov	r0, r3
 80137d6:	3708      	adds	r7, #8
 80137d8:	46bd      	mov	sp, r7
 80137da:	bd80      	pop	{r7, pc}
 80137dc:	08029440 	.word	0x08029440

080137e0 <_ZN11Screen1View11setupScreenEv>:

void Screen1View::setupScreen()
{
 80137e0:	b580      	push	{r7, lr}
 80137e2:	b082      	sub	sp, #8
 80137e4:	af00      	add	r7, sp, #0
 80137e6:	6078      	str	r0, [r7, #4]
    Screen1ViewBase::setupScreen();
 80137e8:	687b      	ldr	r3, [r7, #4]
 80137ea:	4618      	mov	r0, r3
 80137ec:	f7ff f88e 	bl	801290c <_ZN15Screen1ViewBase11setupScreenEv>
}
 80137f0:	bf00      	nop
 80137f2:	3708      	adds	r7, #8
 80137f4:	46bd      	mov	sp, r7
 80137f6:	bd80      	pop	{r7, pc}

080137f8 <_ZN11Screen1View14tearDownScreenEv>:

void Screen1View::tearDownScreen()
{
 80137f8:	b580      	push	{r7, lr}
 80137fa:	b082      	sub	sp, #8
 80137fc:	af00      	add	r7, sp, #0
 80137fe:	6078      	str	r0, [r7, #4]
    Screen1ViewBase::tearDownScreen();
 8013800:	687b      	ldr	r3, [r7, #4]
 8013802:	4618      	mov	r0, r3
 8013804:	f7fe fed0 	bl	80125a8 <_ZN8touchgfx6Screen14tearDownScreenEv>
}
 8013808:	bf00      	nop
 801380a:	3708      	adds	r7, #8
 801380c:	46bd      	mov	sp, r7
 801380e:	bd80      	pop	{r7, pc}

08013810 <_ZN15screenPresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~screenPresenter() {};
 8013810:	b580      	push	{r7, lr}
 8013812:	b082      	sub	sp, #8
 8013814:	af00      	add	r7, sp, #0
 8013816:	6078      	str	r0, [r7, #4]
 8013818:	4a09      	ldr	r2, [pc, #36]	; (8013840 <_ZN15screenPresenterD1Ev+0x30>)
 801381a:	687b      	ldr	r3, [r7, #4]
 801381c:	601a      	str	r2, [r3, #0]
 801381e:	4a09      	ldr	r2, [pc, #36]	; (8013844 <_ZN15screenPresenterD1Ev+0x34>)
 8013820:	687b      	ldr	r3, [r7, #4]
 8013822:	605a      	str	r2, [r3, #4]
 8013824:	687b      	ldr	r3, [r7, #4]
 8013826:	3304      	adds	r3, #4
 8013828:	4618      	mov	r0, r3
 801382a:	f7ff ff1d 	bl	8013668 <_ZN13ModelListenerD1Ev>
 801382e:	687b      	ldr	r3, [r7, #4]
 8013830:	4618      	mov	r0, r3
 8013832:	f7ff fed5 	bl	80135e0 <_ZN8touchgfx9PresenterD1Ev>
 8013836:	687b      	ldr	r3, [r7, #4]
 8013838:	4618      	mov	r0, r3
 801383a:	3708      	adds	r7, #8
 801383c:	46bd      	mov	sp, r7
 801383e:	bd80      	pop	{r7, pc}
 8013840:	08029474 	.word	0x08029474
 8013844:	0802948c 	.word	0x0802948c

08013848 <_ZThn4_N15screenPresenterD1Ev>:
 8013848:	f1a0 0004 	sub.w	r0, r0, #4
 801384c:	e7e0      	b.n	8013810 <_ZN15screenPresenterD1Ev>
 801384e:	bf00      	nop

08013850 <_ZN15screenPresenterD0Ev>:
 8013850:	b580      	push	{r7, lr}
 8013852:	b082      	sub	sp, #8
 8013854:	af00      	add	r7, sp, #0
 8013856:	6078      	str	r0, [r7, #4]
 8013858:	6878      	ldr	r0, [r7, #4]
 801385a:	f7ff ffd9 	bl	8013810 <_ZN15screenPresenterD1Ev>
 801385e:	2110      	movs	r1, #16
 8013860:	6878      	ldr	r0, [r7, #4]
 8013862:	f013 fc32 	bl	80270ca <_ZdlPvj>
 8013866:	687b      	ldr	r3, [r7, #4]
 8013868:	4618      	mov	r0, r3
 801386a:	3708      	adds	r7, #8
 801386c:	46bd      	mov	sp, r7
 801386e:	bd80      	pop	{r7, pc}

08013870 <_ZThn4_N15screenPresenterD0Ev>:
 8013870:	f1a0 0004 	sub.w	r0, r0, #4
 8013874:	e7ec      	b.n	8013850 <_ZN15screenPresenterD0Ev>
	...

08013878 <_ZN15screenPresenterC1ER10screenView>:
#include <gui/screen_screen/screenView.hpp>
#include <gui/screen_screen/screenPresenter.hpp>

screenPresenter::screenPresenter(screenView& v)
 8013878:	b580      	push	{r7, lr}
 801387a:	b082      	sub	sp, #8
 801387c:	af00      	add	r7, sp, #0
 801387e:	6078      	str	r0, [r7, #4]
 8013880:	6039      	str	r1, [r7, #0]
    : view(v)
 8013882:	687b      	ldr	r3, [r7, #4]
 8013884:	4618      	mov	r0, r3
 8013886:	f7ff fecb 	bl	8013620 <_ZN8touchgfx9PresenterC1Ev>
 801388a:	687b      	ldr	r3, [r7, #4]
 801388c:	3304      	adds	r3, #4
 801388e:	4618      	mov	r0, r3
 8013890:	f7ff fed6 	bl	8013640 <_ZN13ModelListenerC1Ev>
 8013894:	4a06      	ldr	r2, [pc, #24]	; (80138b0 <_ZN15screenPresenterC1ER10screenView+0x38>)
 8013896:	687b      	ldr	r3, [r7, #4]
 8013898:	601a      	str	r2, [r3, #0]
 801389a:	4a06      	ldr	r2, [pc, #24]	; (80138b4 <_ZN15screenPresenterC1ER10screenView+0x3c>)
 801389c:	687b      	ldr	r3, [r7, #4]
 801389e:	605a      	str	r2, [r3, #4]
 80138a0:	687b      	ldr	r3, [r7, #4]
 80138a2:	683a      	ldr	r2, [r7, #0]
 80138a4:	60da      	str	r2, [r3, #12]
{

}
 80138a6:	687b      	ldr	r3, [r7, #4]
 80138a8:	4618      	mov	r0, r3
 80138aa:	3708      	adds	r7, #8
 80138ac:	46bd      	mov	sp, r7
 80138ae:	bd80      	pop	{r7, pc}
 80138b0:	08029474 	.word	0x08029474
 80138b4:	0802948c 	.word	0x0802948c

080138b8 <_ZN15screenPresenter8activateEv>:

void screenPresenter::activate()
{
 80138b8:	b480      	push	{r7}
 80138ba:	b083      	sub	sp, #12
 80138bc:	af00      	add	r7, sp, #0
 80138be:	6078      	str	r0, [r7, #4]

}
 80138c0:	bf00      	nop
 80138c2:	370c      	adds	r7, #12
 80138c4:	46bd      	mov	sp, r7
 80138c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80138ca:	4770      	bx	lr

080138cc <_ZN15screenPresenter10deactivateEv>:

void screenPresenter::deactivate()
{
 80138cc:	b480      	push	{r7}
 80138ce:	b083      	sub	sp, #12
 80138d0:	af00      	add	r7, sp, #0
 80138d2:	6078      	str	r0, [r7, #4]

}
 80138d4:	bf00      	nop
 80138d6:	370c      	adds	r7, #12
 80138d8:	46bd      	mov	sp, r7
 80138da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80138de:	4770      	bx	lr

080138e0 <_ZN10screenViewD1Ev>:

class screenView : public screenViewBase
{
public:
    screenView();
    virtual ~screenView() {}
 80138e0:	b580      	push	{r7, lr}
 80138e2:	b082      	sub	sp, #8
 80138e4:	af00      	add	r7, sp, #0
 80138e6:	6078      	str	r0, [r7, #4]
 80138e8:	4a05      	ldr	r2, [pc, #20]	; (8013900 <_ZN10screenViewD1Ev+0x20>)
 80138ea:	687b      	ldr	r3, [r7, #4]
 80138ec:	601a      	str	r2, [r3, #0]
 80138ee:	687b      	ldr	r3, [r7, #4]
 80138f0:	4618      	mov	r0, r3
 80138f2:	f7ff f953 	bl	8012b9c <_ZN14screenViewBaseD1Ev>
 80138f6:	687b      	ldr	r3, [r7, #4]
 80138f8:	4618      	mov	r0, r3
 80138fa:	3708      	adds	r7, #8
 80138fc:	46bd      	mov	sp, r7
 80138fe:	bd80      	pop	{r7, pc}
 8013900:	0802949c 	.word	0x0802949c

08013904 <_ZN10screenViewD0Ev>:
 8013904:	b580      	push	{r7, lr}
 8013906:	b082      	sub	sp, #8
 8013908:	af00      	add	r7, sp, #0
 801390a:	6078      	str	r0, [r7, #4]
 801390c:	6878      	ldr	r0, [r7, #4]
 801390e:	f7ff ffe7 	bl	80138e0 <_ZN10screenViewD1Ev>
 8013912:	f44f 71f4 	mov.w	r1, #488	; 0x1e8
 8013916:	6878      	ldr	r0, [r7, #4]
 8013918:	f013 fbd7 	bl	80270ca <_ZdlPvj>
 801391c:	687b      	ldr	r3, [r7, #4]
 801391e:	4618      	mov	r0, r3
 8013920:	3708      	adds	r7, #8
 8013922:	46bd      	mov	sp, r7
 8013924:	bd80      	pop	{r7, pc}
	...

08013928 <_ZN10screenViewC1Ev>:
#include <gui/screen_screen/screenView.hpp>

screenView::screenView()
 8013928:	b580      	push	{r7, lr}
 801392a:	b082      	sub	sp, #8
 801392c:	af00      	add	r7, sp, #0
 801392e:	6078      	str	r0, [r7, #4]
 8013930:	687b      	ldr	r3, [r7, #4]
 8013932:	4618      	mov	r0, r3
 8013934:	f7ff f97c 	bl	8012c30 <_ZN14screenViewBaseC1Ev>
 8013938:	4a03      	ldr	r2, [pc, #12]	; (8013948 <_ZN10screenViewC1Ev+0x20>)
 801393a:	687b      	ldr	r3, [r7, #4]
 801393c:	601a      	str	r2, [r3, #0]
{

}
 801393e:	687b      	ldr	r3, [r7, #4]
 8013940:	4618      	mov	r0, r3
 8013942:	3708      	adds	r7, #8
 8013944:	46bd      	mov	sp, r7
 8013946:	bd80      	pop	{r7, pc}
 8013948:	0802949c 	.word	0x0802949c

0801394c <_ZN10screenView11setupScreenEv>:

void screenView::setupScreen()
{
 801394c:	b580      	push	{r7, lr}
 801394e:	b082      	sub	sp, #8
 8013950:	af00      	add	r7, sp, #0
 8013952:	6078      	str	r0, [r7, #4]
    screenViewBase::setupScreen();
 8013954:	687b      	ldr	r3, [r7, #4]
 8013956:	4618      	mov	r0, r3
 8013958:	f7ff fa72 	bl	8012e40 <_ZN14screenViewBase11setupScreenEv>
}
 801395c:	bf00      	nop
 801395e:	3708      	adds	r7, #8
 8013960:	46bd      	mov	sp, r7
 8013962:	bd80      	pop	{r7, pc}

08013964 <_ZN10screenView14tearDownScreenEv>:

void screenView::tearDownScreen()
{
 8013964:	b580      	push	{r7, lr}
 8013966:	b082      	sub	sp, #8
 8013968:	af00      	add	r7, sp, #0
 801396a:	6078      	str	r0, [r7, #4]
    screenViewBase::tearDownScreen();
 801396c:	687b      	ldr	r3, [r7, #4]
 801396e:	4618      	mov	r0, r3
 8013970:	f7fe fe1a 	bl	80125a8 <_ZN8touchgfx6Screen14tearDownScreenEv>
}
 8013974:	bf00      	nop
 8013976:	3708      	adds	r7, #8
 8013978:	46bd      	mov	sp, r7
 801397a:	bd80      	pop	{r7, pc}

0801397c <_ZN8touchgfx15TouchControllerD1Ev>:
/** Basic Touch Controller interface. */
class TouchController
{
public:
    /** Finalizes an instance of the TouchController class. */
    virtual ~TouchController()
 801397c:	b480      	push	{r7}
 801397e:	b083      	sub	sp, #12
 8013980:	af00      	add	r7, sp, #0
 8013982:	6078      	str	r0, [r7, #4]
    {
 8013984:	4a04      	ldr	r2, [pc, #16]	; (8013998 <_ZN8touchgfx15TouchControllerD1Ev+0x1c>)
 8013986:	687b      	ldr	r3, [r7, #4]
 8013988:	601a      	str	r2, [r3, #0]
    }
 801398a:	687b      	ldr	r3, [r7, #4]
 801398c:	4618      	mov	r0, r3
 801398e:	370c      	adds	r7, #12
 8013990:	46bd      	mov	sp, r7
 8013992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013996:	4770      	bx	lr
 8013998:	080294e8 	.word	0x080294e8

0801399c <_ZN8touchgfx15TouchControllerD0Ev>:
    virtual ~TouchController()
 801399c:	b580      	push	{r7, lr}
 801399e:	b082      	sub	sp, #8
 80139a0:	af00      	add	r7, sp, #0
 80139a2:	6078      	str	r0, [r7, #4]
    }
 80139a4:	6878      	ldr	r0, [r7, #4]
 80139a6:	f7ff ffe9 	bl	801397c <_ZN8touchgfx15TouchControllerD1Ev>
 80139aa:	2104      	movs	r1, #4
 80139ac:	6878      	ldr	r0, [r7, #4]
 80139ae:	f013 fb8c 	bl	80270ca <_ZdlPvj>
 80139b2:	687b      	ldr	r3, [r7, #4]
 80139b4:	4618      	mov	r0, r3
 80139b6:	3708      	adds	r7, #8
 80139b8:	46bd      	mov	sp, r7
 80139ba:	bd80      	pop	{r7, pc}

080139bc <_ZN20STM32TouchController4initEv>:
/* USER CODE BEGIN STM32TouchController */

#include <STM32TouchController.hpp>

void STM32TouchController::init()
{
 80139bc:	b480      	push	{r7}
 80139be:	b083      	sub	sp, #12
 80139c0:	af00      	add	r7, sp, #0
 80139c2:	6078      	str	r0, [r7, #4]
    /**
     * Initialize touch controller and driver
     *
     */
}
 80139c4:	bf00      	nop
 80139c6:	370c      	adds	r7, #12
 80139c8:	46bd      	mov	sp, r7
 80139ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80139ce:	4770      	bx	lr

080139d0 <_ZN20STM32TouchController11sampleTouchERlS0_>:

bool STM32TouchController::sampleTouch(int32_t& x, int32_t& y)
{
 80139d0:	b480      	push	{r7}
 80139d2:	b085      	sub	sp, #20
 80139d4:	af00      	add	r7, sp, #0
 80139d6:	60f8      	str	r0, [r7, #12]
 80139d8:	60b9      	str	r1, [r7, #8]
 80139da:	607a      	str	r2, [r7, #4]
     *
     * This function is called by the TouchGFX framework.
     * By default sampleTouch is called every tick, this can be adjusted by HAL::setTouchSampleRate(int8_t);
     *
     */
    return false;
 80139dc:	2300      	movs	r3, #0
}
 80139de:	4618      	mov	r0, r3
 80139e0:	3714      	adds	r7, #20
 80139e2:	46bd      	mov	sp, r7
 80139e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80139e8:	4770      	bx	lr
	...

080139ec <_ZN20STM32TouchControllerD1Ev>:
 * @brief This class specializes TouchController Interface.
 *
 * @sa touchgfx::TouchController
 */

class STM32TouchController : public touchgfx::TouchController
 80139ec:	b580      	push	{r7, lr}
 80139ee:	b082      	sub	sp, #8
 80139f0:	af00      	add	r7, sp, #0
 80139f2:	6078      	str	r0, [r7, #4]
 80139f4:	4a05      	ldr	r2, [pc, #20]	; (8013a0c <_ZN20STM32TouchControllerD1Ev+0x20>)
 80139f6:	687b      	ldr	r3, [r7, #4]
 80139f8:	601a      	str	r2, [r3, #0]
 80139fa:	687b      	ldr	r3, [r7, #4]
 80139fc:	4618      	mov	r0, r3
 80139fe:	f7ff ffbd 	bl	801397c <_ZN8touchgfx15TouchControllerD1Ev>
 8013a02:	687b      	ldr	r3, [r7, #4]
 8013a04:	4618      	mov	r0, r3
 8013a06:	3708      	adds	r7, #8
 8013a08:	46bd      	mov	sp, r7
 8013a0a:	bd80      	pop	{r7, pc}
 8013a0c:	080294d0 	.word	0x080294d0

08013a10 <_ZN20STM32TouchControllerD0Ev>:
 8013a10:	b580      	push	{r7, lr}
 8013a12:	b082      	sub	sp, #8
 8013a14:	af00      	add	r7, sp, #0
 8013a16:	6078      	str	r0, [r7, #4]
 8013a18:	6878      	ldr	r0, [r7, #4]
 8013a1a:	f7ff ffe7 	bl	80139ec <_ZN20STM32TouchControllerD1Ev>
 8013a1e:	2104      	movs	r1, #4
 8013a20:	6878      	ldr	r0, [r7, #4]
 8013a22:	f013 fb52 	bl	80270ca <_ZdlPvj>
 8013a26:	687b      	ldr	r3, [r7, #4]
 8013a28:	4618      	mov	r0, r3
 8013a2a:	3708      	adds	r7, #8
 8013a2c:	46bd      	mov	sp, r7
 8013a2e:	bd80      	pop	{r7, pc}

08013a30 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>:

/*
 * Sets a pin high.
 */
void GPIO::set(GPIO_ID id)
{
 8013a30:	b480      	push	{r7}
 8013a32:	b083      	sub	sp, #12
 8013a34:	af00      	add	r7, sp, #0
 8013a36:	4603      	mov	r3, r0
 8013a38:	71fb      	strb	r3, [r7, #7]

}
 8013a3a:	bf00      	nop
 8013a3c:	370c      	adds	r7, #12
 8013a3e:	46bd      	mov	sp, r7
 8013a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a44:	4770      	bx	lr

08013a46 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>:

/*
 * Sets a pin low.
 */
void GPIO::clear(GPIO_ID id)
{
 8013a46:	b480      	push	{r7}
 8013a48:	b083      	sub	sp, #12
 8013a4a:	af00      	add	r7, sp, #0
 8013a4c:	4603      	mov	r3, r0
 8013a4e:	71fb      	strb	r3, [r7, #7]

}
 8013a50:	bf00      	nop
 8013a52:	370c      	adds	r7, #12
 8013a54:	46bd      	mov	sp, r7
 8013a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a5a:	4770      	bx	lr

08013a5c <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>:

/*
 * Toggles a pin.
 */
void GPIO::toggle(GPIO_ID id)
{
 8013a5c:	b480      	push	{r7}
 8013a5e:	b083      	sub	sp, #12
 8013a60:	af00      	add	r7, sp, #0
 8013a62:	4603      	mov	r3, r0
 8013a64:	71fb      	strb	r3, [r7, #7]

}
 8013a66:	bf00      	nop
 8013a68:	370c      	adds	r7, #12
 8013a6a:	46bd      	mov	sp, r7
 8013a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a70:	4770      	bx	lr
	...

08013a74 <_ZN8touchgfx3HALD1Ev>:
    virtual ~HAL()
 8013a74:	b480      	push	{r7}
 8013a76:	b083      	sub	sp, #12
 8013a78:	af00      	add	r7, sp, #0
 8013a7a:	6078      	str	r0, [r7, #4]
    {
 8013a7c:	4a04      	ldr	r2, [pc, #16]	; (8013a90 <_ZN8touchgfx3HALD1Ev+0x1c>)
 8013a7e:	687b      	ldr	r3, [r7, #4]
 8013a80:	601a      	str	r2, [r3, #0]
    }
 8013a82:	687b      	ldr	r3, [r7, #4]
 8013a84:	4618      	mov	r0, r3
 8013a86:	370c      	adds	r7, #12
 8013a88:	46bd      	mov	sp, r7
 8013a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a8e:	4770      	bx	lr
 8013a90:	0802a1a0 	.word	0x0802a1a0

08013a94 <_ZN8touchgfx3HALD0Ev>:
    virtual ~HAL()
 8013a94:	b580      	push	{r7, lr}
 8013a96:	b082      	sub	sp, #8
 8013a98:	af00      	add	r7, sp, #0
 8013a9a:	6078      	str	r0, [r7, #4]
    }
 8013a9c:	6878      	ldr	r0, [r7, #4]
 8013a9e:	f7ff ffe9 	bl	8013a74 <_ZN8touchgfx3HALD1Ev>
 8013aa2:	217c      	movs	r1, #124	; 0x7c
 8013aa4:	6878      	ldr	r0, [r7, #4]
 8013aa6:	f013 fb10 	bl	80270ca <_ZdlPvj>
 8013aaa:	687b      	ldr	r3, [r7, #4]
 8013aac:	4618      	mov	r0, r3
 8013aae:	3708      	adds	r7, #8
 8013ab0:	46bd      	mov	sp, r7
 8013ab2:	bd80      	pop	{r7, pc}

08013ab4 <_ZN8touchgfx3HAL21setDisplayOrientationENS_18DisplayOrientationE>:
    virtual void setDisplayOrientation(DisplayOrientation orientation)
 8013ab4:	b480      	push	{r7}
 8013ab6:	b083      	sub	sp, #12
 8013ab8:	af00      	add	r7, sp, #0
 8013aba:	6078      	str	r0, [r7, #4]
 8013abc:	460b      	mov	r3, r1
 8013abe:	70fb      	strb	r3, [r7, #3]
        requestedOrientation = orientation;
 8013ac0:	687b      	ldr	r3, [r7, #4]
 8013ac2:	78fa      	ldrb	r2, [r7, #3]
 8013ac4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
        displayOrientationChangeRequested = true;
 8013ac8:	687b      	ldr	r3, [r7, #4]
 8013aca:	2201      	movs	r2, #1
 8013acc:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
    }
 8013ad0:	bf00      	nop
 8013ad2:	370c      	adds	r7, #12
 8013ad4:	46bd      	mov	sp, r7
 8013ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ada:	4770      	bx	lr

08013adc <_ZN8touchgfx3HAL11getBlitCapsEv>:
     *
     * @return a bitmask of the supported blitcaps.
     *
     * @see enableDMAAcceleration
     */
    virtual BlitOperations getBlitCaps()
 8013adc:	b580      	push	{r7, lr}
 8013ade:	b082      	sub	sp, #8
 8013ae0:	af00      	add	r7, sp, #0
 8013ae2:	6078      	str	r0, [r7, #4]
    {
        if (useDMAAcceleration)
 8013ae4:	687b      	ldr	r3, [r7, #4]
 8013ae6:	f893 3077 	ldrb.w	r3, [r3, #119]	; 0x77
 8013aea:	2b00      	cmp	r3, #0
 8013aec:	d009      	beq.n	8013b02 <_ZN8touchgfx3HAL11getBlitCapsEv+0x26>
        {
            return dma.getBlitCaps();
 8013aee:	687b      	ldr	r3, [r7, #4]
 8013af0:	685a      	ldr	r2, [r3, #4]
 8013af2:	687b      	ldr	r3, [r7, #4]
 8013af4:	685b      	ldr	r3, [r3, #4]
 8013af6:	681b      	ldr	r3, [r3, #0]
 8013af8:	681b      	ldr	r3, [r3, #0]
 8013afa:	4610      	mov	r0, r2
 8013afc:	4798      	blx	r3
 8013afe:	4603      	mov	r3, r0
 8013b00:	e000      	b.n	8013b04 <_ZN8touchgfx3HAL11getBlitCapsEv+0x28>
        }
        else
        {
            return static_cast<BlitOperations>(0);
 8013b02:	2300      	movs	r3, #0
        }
    }
 8013b04:	4618      	mov	r0, r3
 8013b06:	3708      	adds	r7, #8
 8013b08:	46bd      	mov	sp, r7
 8013b0a:	bd80      	pop	{r7, pc}

08013b0c <_ZN8touchgfx3HAL15backPorchExitedEv>:
    /**
     * Has to be called from within the LCD IRQ rutine when the Back Porch Exit is reached.
     *
     * Has to be called from within the LCD IRQ rutine when the Back Porch Exit is reached.
     */
    virtual void backPorchExited()
 8013b0c:	b580      	push	{r7, lr}
 8013b0e:	b082      	sub	sp, #8
 8013b10:	af00      	add	r7, sp, #0
 8013b12:	6078      	str	r0, [r7, #4]
    {
        swapFrameBuffers();
 8013b14:	6878      	ldr	r0, [r7, #4]
 8013b16:	f002 fe37 	bl	8016788 <_ZN8touchgfx3HAL16swapFrameBuffersEv>
        tick();
 8013b1a:	687b      	ldr	r3, [r7, #4]
 8013b1c:	681b      	ldr	r3, [r3, #0]
 8013b1e:	3390      	adds	r3, #144	; 0x90
 8013b20:	681b      	ldr	r3, [r3, #0]
 8013b22:	6878      	ldr	r0, [r7, #4]
 8013b24:	4798      	blx	r3
    }
 8013b26:	bf00      	nop
 8013b28:	3708      	adds	r7, #8
 8013b2a:	46bd      	mov	sp, r7
 8013b2c:	bd80      	pop	{r7, pc}

08013b2e <_ZN8touchgfx3HAL9sampleKeyERh>:
     * @param [out] key Output parameter that will be set to the key value if a keypress was
     *                  detected.
     *
     * @return True if a keypress was detected and the "key" parameter is set to a value.
     */
    virtual bool sampleKey(uint8_t& key)
 8013b2e:	b480      	push	{r7}
 8013b30:	b083      	sub	sp, #12
 8013b32:	af00      	add	r7, sp, #0
 8013b34:	6078      	str	r0, [r7, #4]
 8013b36:	6039      	str	r1, [r7, #0]
    {
        return false;
 8013b38:	2300      	movs	r3, #0
    }
 8013b3a:	4618      	mov	r0, r3
 8013b3c:	370c      	adds	r7, #12
 8013b3e:	46bd      	mov	sp, r7
 8013b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b44:	4770      	bx	lr
	...

08013b48 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_>:
     * @param [in] doubleBuffer     If non-null, buffer for double buffer data. If null double
     *                              buffering is disabled.
     * @param [in] animationStorage If non-null, the animation storage. If null animation storage
     *                              is disabled.
     */
    virtual void setFrameBufferStartAddresses(void* frameBuffer, void* doubleBuffer, void* animationStorage)
 8013b48:	b580      	push	{r7, lr}
 8013b4a:	b084      	sub	sp, #16
 8013b4c:	af00      	add	r7, sp, #0
 8013b4e:	60f8      	str	r0, [r7, #12]
 8013b50:	60b9      	str	r1, [r7, #8]
 8013b52:	607a      	str	r2, [r7, #4]
 8013b54:	603b      	str	r3, [r7, #0]
    {
        assert(frameBuffer != 0 && "A framebuffer address must be set");
 8013b56:	68bb      	ldr	r3, [r7, #8]
 8013b58:	2b00      	cmp	r3, #0
 8013b5a:	d106      	bne.n	8013b6a <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x22>
 8013b5c:	4b11      	ldr	r3, [pc, #68]	; (8013ba4 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x5c>)
 8013b5e:	4a12      	ldr	r2, [pc, #72]	; (8013ba8 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x60>)
 8013b60:	f240 216b 	movw	r1, #619	; 0x26b
 8013b64:	4811      	ldr	r0, [pc, #68]	; (8013bac <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x64>)
 8013b66:	f013 fadf 	bl	8027128 <__assert_func>
        frameBuffer0 = reinterpret_cast<uint16_t*>(frameBuffer);
 8013b6a:	68fb      	ldr	r3, [r7, #12]
 8013b6c:	68ba      	ldr	r2, [r7, #8]
 8013b6e:	63da      	str	r2, [r3, #60]	; 0x3c
        frameBuffer1 = reinterpret_cast<uint16_t*>(doubleBuffer);
 8013b70:	68fb      	ldr	r3, [r7, #12]
 8013b72:	687a      	ldr	r2, [r7, #4]
 8013b74:	641a      	str	r2, [r3, #64]	; 0x40
        frameBuffer2 = reinterpret_cast<uint16_t*>(animationStorage);
 8013b76:	68fb      	ldr	r3, [r7, #12]
 8013b78:	683a      	ldr	r2, [r7, #0]
 8013b7a:	645a      	str	r2, [r3, #68]	; 0x44
        USE_DOUBLE_BUFFERING = doubleBuffer != 0;
 8013b7c:	687b      	ldr	r3, [r7, #4]
 8013b7e:	2b00      	cmp	r3, #0
 8013b80:	bf14      	ite	ne
 8013b82:	2301      	movne	r3, #1
 8013b84:	2300      	moveq	r3, #0
 8013b86:	b2da      	uxtb	r2, r3
 8013b88:	4b09      	ldr	r3, [pc, #36]	; (8013bb0 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x68>)
 8013b8a:	701a      	strb	r2, [r3, #0]
        USE_ANIMATION_STORAGE = animationStorage != 0;
 8013b8c:	683b      	ldr	r3, [r7, #0]
 8013b8e:	2b00      	cmp	r3, #0
 8013b90:	bf14      	ite	ne
 8013b92:	2301      	movne	r3, #1
 8013b94:	2300      	moveq	r3, #0
 8013b96:	b2da      	uxtb	r2, r3
 8013b98:	4b06      	ldr	r3, [pc, #24]	; (8013bb4 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x6c>)
 8013b9a:	701a      	strb	r2, [r3, #0]
    }
 8013b9c:	bf00      	nop
 8013b9e:	3710      	adds	r7, #16
 8013ba0:	46bd      	mov	sp, r7
 8013ba2:	bd80      	pop	{r7, pc}
 8013ba4:	08028b8c 	.word	0x08028b8c
 8013ba8:	08028bc4 	.word	0x08028bc4
 8013bac:	08028c14 	.word	0x08028c14
 8013bb0:	2000580a 	.word	0x2000580a
 8013bb4:	2000580b 	.word	0x2000580b

08013bb8 <_ZNK8touchgfx3HAL18getFlashDataReaderEv>:
     * Gets the flash data reader. This method must be implemented in
     * subclasses that uses a FlashDataReader object.
     *
     * @return the FlashDataReader.
     */
    virtual FlashDataReader* getFlashDataReader() const
 8013bb8:	b480      	push	{r7}
 8013bba:	b083      	sub	sp, #12
 8013bbc:	af00      	add	r7, sp, #0
 8013bbe:	6078      	str	r0, [r7, #4]
    {
        return 0;
 8013bc0:	2300      	movs	r3, #0
    }
 8013bc2:	4618      	mov	r0, r3
 8013bc4:	370c      	adds	r7, #12
 8013bc6:	46bd      	mov	sp, r7
 8013bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013bcc:	4770      	bx	lr

08013bce <_ZN8touchgfx3HAL9taskDelayEt>:
     *
     * @param  ms Number of milliseconds to wait.
     *
     * @see registerTaskDelayFunction
     */
    virtual void taskDelay(uint16_t ms)
 8013bce:	b580      	push	{r7, lr}
 8013bd0:	b082      	sub	sp, #8
 8013bd2:	af00      	add	r7, sp, #0
 8013bd4:	6078      	str	r0, [r7, #4]
 8013bd6:	460b      	mov	r3, r1
 8013bd8:	807b      	strh	r3, [r7, #2]
    {
        if (taskDelayFunc)
 8013bda:	687b      	ldr	r3, [r7, #4]
 8013bdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013bde:	2b00      	cmp	r3, #0
 8013be0:	d004      	beq.n	8013bec <_ZN8touchgfx3HAL9taskDelayEt+0x1e>
        {
            taskDelayFunc(ms);
 8013be2:	687b      	ldr	r3, [r7, #4]
 8013be4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013be6:	887a      	ldrh	r2, [r7, #2]
 8013be8:	4610      	mov	r0, r2
 8013bea:	4798      	blx	r3
        }
    }
 8013bec:	bf00      	nop
 8013bee:	3708      	adds	r7, #8
 8013bf0:	46bd      	mov	sp, r7
 8013bf2:	bd80      	pop	{r7, pc}

08013bf4 <_ZN8touchgfx3HAL10getDMATypeEv>:
     * Function for obtaining the DMA type of the concrete DMA implementation. As default,
     * will return DMA_TYPE_GENERIC type value.
     *
     * @return a DMAType value of the concrete DMA implementation.
     */
    virtual DMAType getDMAType()
 8013bf4:	b580      	push	{r7, lr}
 8013bf6:	b082      	sub	sp, #8
 8013bf8:	af00      	add	r7, sp, #0
 8013bfa:	6078      	str	r0, [r7, #4]
    {
        return dma.getDMAType();
 8013bfc:	687b      	ldr	r3, [r7, #4]
 8013bfe:	685a      	ldr	r2, [r3, #4]
 8013c00:	687b      	ldr	r3, [r7, #4]
 8013c02:	685b      	ldr	r3, [r3, #4]
 8013c04:	681b      	ldr	r3, [r3, #0]
 8013c06:	3318      	adds	r3, #24
 8013c08:	681b      	ldr	r3, [r3, #0]
 8013c0a:	4610      	mov	r0, r2
 8013c0c:	4798      	blx	r3
 8013c0e:	4603      	mov	r3, r0
    }
 8013c10:	4618      	mov	r0, r3
 8013c12:	3708      	adds	r7, #8
 8013c14:	46bd      	mov	sp, r7
 8013c16:	bd80      	pop	{r7, pc}

08013c18 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv>:

    /** Called by the touch driver to indicate that no touch is currently detected. */
    virtual void noTouch();

    /** Perform the actual display orientation change. */
    virtual void performDisplayOrientationChange()
 8013c18:	b480      	push	{r7}
 8013c1a:	b083      	sub	sp, #12
 8013c1c:	af00      	add	r7, sp, #0
 8013c1e:	6078      	str	r0, [r7, #4]
    {
        if (requestedOrientation != nativeDisplayOrientation)
 8013c20:	687b      	ldr	r3, [r7, #4]
 8013c22:	f893 2074 	ldrb.w	r2, [r3, #116]	; 0x74
 8013c26:	687b      	ldr	r3, [r7, #4]
 8013c28:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8013c2c:	429a      	cmp	r2, r3
 8013c2e:	d017      	beq.n	8013c60 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x48>
        {
            if (DISPLAY_ROTATION == rotate0)
 8013c30:	4b1a      	ldr	r3, [pc, #104]	; (8013c9c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x84>)
 8013c32:	781b      	ldrb	r3, [r3, #0]
 8013c34:	2b00      	cmp	r3, #0
 8013c36:	d12a      	bne.n	8013c8e <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x76>
            {
                FRAME_BUFFER_WIDTH = DISPLAY_WIDTH;
 8013c38:	4b19      	ldr	r3, [pc, #100]	; (8013ca0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x88>)
 8013c3a:	881a      	ldrh	r2, [r3, #0]
 8013c3c:	4b19      	ldr	r3, [pc, #100]	; (8013ca4 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x8c>)
 8013c3e:	801a      	strh	r2, [r3, #0]
                FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT;
 8013c40:	4b19      	ldr	r3, [pc, #100]	; (8013ca8 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x90>)
 8013c42:	881a      	ldrh	r2, [r3, #0]
 8013c44:	4b19      	ldr	r3, [pc, #100]	; (8013cac <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x94>)
 8013c46:	801a      	strh	r2, [r3, #0]
                DISPLAY_HEIGHT = FRAME_BUFFER_WIDTH;
 8013c48:	4b16      	ldr	r3, [pc, #88]	; (8013ca4 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x8c>)
 8013c4a:	881a      	ldrh	r2, [r3, #0]
 8013c4c:	4b16      	ldr	r3, [pc, #88]	; (8013ca8 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x90>)
 8013c4e:	801a      	strh	r2, [r3, #0]
                DISPLAY_WIDTH = FRAME_BUFFER_HEIGHT;
 8013c50:	4b16      	ldr	r3, [pc, #88]	; (8013cac <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x94>)
 8013c52:	881a      	ldrh	r2, [r3, #0]
 8013c54:	4b12      	ldr	r3, [pc, #72]	; (8013ca0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x88>)
 8013c56:	801a      	strh	r2, [r3, #0]
                DISPLAY_ROTATION = rotate90;
 8013c58:	4b10      	ldr	r3, [pc, #64]	; (8013c9c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x84>)
 8013c5a:	2201      	movs	r2, #1
 8013c5c:	701a      	strb	r2, [r3, #0]
            FRAME_BUFFER_HEIGHT = DISPLAY_WIDTH;
            DISPLAY_HEIGHT = FRAME_BUFFER_HEIGHT;
            DISPLAY_WIDTH = FRAME_BUFFER_WIDTH;
            DISPLAY_ROTATION = rotate0;
        }
    }
 8013c5e:	e016      	b.n	8013c8e <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x76>
        else if (DISPLAY_ROTATION != rotate0)
 8013c60:	4b0e      	ldr	r3, [pc, #56]	; (8013c9c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x84>)
 8013c62:	781b      	ldrb	r3, [r3, #0]
 8013c64:	2b00      	cmp	r3, #0
 8013c66:	d012      	beq.n	8013c8e <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x76>
            FRAME_BUFFER_WIDTH = DISPLAY_HEIGHT;
 8013c68:	4b0f      	ldr	r3, [pc, #60]	; (8013ca8 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x90>)
 8013c6a:	881a      	ldrh	r2, [r3, #0]
 8013c6c:	4b0d      	ldr	r3, [pc, #52]	; (8013ca4 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x8c>)
 8013c6e:	801a      	strh	r2, [r3, #0]
            FRAME_BUFFER_HEIGHT = DISPLAY_WIDTH;
 8013c70:	4b0b      	ldr	r3, [pc, #44]	; (8013ca0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x88>)
 8013c72:	881a      	ldrh	r2, [r3, #0]
 8013c74:	4b0d      	ldr	r3, [pc, #52]	; (8013cac <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x94>)
 8013c76:	801a      	strh	r2, [r3, #0]
            DISPLAY_HEIGHT = FRAME_BUFFER_HEIGHT;
 8013c78:	4b0c      	ldr	r3, [pc, #48]	; (8013cac <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x94>)
 8013c7a:	881a      	ldrh	r2, [r3, #0]
 8013c7c:	4b0a      	ldr	r3, [pc, #40]	; (8013ca8 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x90>)
 8013c7e:	801a      	strh	r2, [r3, #0]
            DISPLAY_WIDTH = FRAME_BUFFER_WIDTH;
 8013c80:	4b08      	ldr	r3, [pc, #32]	; (8013ca4 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x8c>)
 8013c82:	881a      	ldrh	r2, [r3, #0]
 8013c84:	4b06      	ldr	r3, [pc, #24]	; (8013ca0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x88>)
 8013c86:	801a      	strh	r2, [r3, #0]
            DISPLAY_ROTATION = rotate0;
 8013c88:	4b04      	ldr	r3, [pc, #16]	; (8013c9c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x84>)
 8013c8a:	2200      	movs	r2, #0
 8013c8c:	701a      	strb	r2, [r3, #0]
    }
 8013c8e:	bf00      	nop
 8013c90:	370c      	adds	r7, #12
 8013c92:	46bd      	mov	sp, r7
 8013c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c98:	4770      	bx	lr
 8013c9a:	bf00      	nop
 8013c9c:	20005804 	.word	0x20005804
 8013ca0:	20005800 	.word	0x20005800
 8013ca4:	20005806 	.word	0x20005806
 8013ca8:	20005802 	.word	0x20005802
 8013cac:	20005808 	.word	0x20005808

08013cb0 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferEv>:
     *
     * This specialization is only in place to keep compilers happy. Base impl. will call the
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
 8013cb0:	b580      	push	{r7, lr}
 8013cb2:	b082      	sub	sp, #8
 8013cb4:	af00      	add	r7, sp, #0
 8013cb6:	6078      	str	r0, [r7, #4]
    {
        HAL::flushFrameBuffer();
 8013cb8:	687b      	ldr	r3, [r7, #4]
 8013cba:	4618      	mov	r0, r3
 8013cbc:	f001 ffea 	bl	8015c94 <_ZN8touchgfx3HAL16flushFrameBufferEv>
    }
 8013cc0:	bf00      	nop
 8013cc2:	3708      	adds	r7, #8
 8013cc4:	46bd      	mov	sp, r7
 8013cc6:	bd80      	pop	{r7, pc}

08013cc8 <_ZN20TouchGFXGeneratedHALD1Ev>:
class TouchGFXGeneratedHAL : public touchgfx::HAL
 8013cc8:	b580      	push	{r7, lr}
 8013cca:	b082      	sub	sp, #8
 8013ccc:	af00      	add	r7, sp, #0
 8013cce:	6078      	str	r0, [r7, #4]
 8013cd0:	4a05      	ldr	r2, [pc, #20]	; (8013ce8 <_ZN20TouchGFXGeneratedHALD1Ev+0x20>)
 8013cd2:	687b      	ldr	r3, [r7, #4]
 8013cd4:	601a      	str	r2, [r3, #0]
 8013cd6:	687b      	ldr	r3, [r7, #4]
 8013cd8:	4618      	mov	r0, r3
 8013cda:	f7ff fecb 	bl	8013a74 <_ZN8touchgfx3HALD1Ev>
 8013cde:	687b      	ldr	r3, [r7, #4]
 8013ce0:	4618      	mov	r0, r3
 8013ce2:	3708      	adds	r7, #8
 8013ce4:	46bd      	mov	sp, r7
 8013ce6:	bd80      	pop	{r7, pc}
 8013ce8:	08029704 	.word	0x08029704

08013cec <_ZN20TouchGFXGeneratedHALD0Ev>:
 8013cec:	b580      	push	{r7, lr}
 8013cee:	b082      	sub	sp, #8
 8013cf0:	af00      	add	r7, sp, #0
 8013cf2:	6078      	str	r0, [r7, #4]
 8013cf4:	6878      	ldr	r0, [r7, #4]
 8013cf6:	f7ff ffe7 	bl	8013cc8 <_ZN20TouchGFXGeneratedHALD1Ev>
 8013cfa:	217c      	movs	r1, #124	; 0x7c
 8013cfc:	6878      	ldr	r0, [r7, #4]
 8013cfe:	f013 f9e4 	bl	80270ca <_ZdlPvj>
 8013d02:	687b      	ldr	r3, [r7, #4]
 8013d04:	4618      	mov	r0, r3
 8013d06:	3708      	adds	r7, #8
 8013d08:	46bd      	mov	sp, r7
 8013d0a:	bd80      	pop	{r7, pc}

08013d0c <_ZN11TouchGFXHAL16flushFrameBufferEv>:
     *
     * This specialization is only in place to keep compilers happy. Base impl. will call the
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
 8013d0c:	b580      	push	{r7, lr}
 8013d0e:	b082      	sub	sp, #8
 8013d10:	af00      	add	r7, sp, #0
 8013d12:	6078      	str	r0, [r7, #4]
    {
        TouchGFXGeneratedHAL::flushFrameBuffer();
 8013d14:	687b      	ldr	r3, [r7, #4]
 8013d16:	4618      	mov	r0, r3
 8013d18:	f7ff ffca 	bl	8013cb0 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferEv>
    }
 8013d1c:	bf00      	nop
 8013d1e:	3708      	adds	r7, #8
 8013d20:	46bd      	mov	sp, r7
 8013d22:	bd80      	pop	{r7, pc}

08013d24 <_ZN11TouchGFXHAL10initializeEv>:
#include "stm32h7xx.h"

using namespace touchgfx;

void TouchGFXHAL::initialize()
{
 8013d24:	b580      	push	{r7, lr}
 8013d26:	b082      	sub	sp, #8
 8013d28:	af00      	add	r7, sp, #0
 8013d2a:	6078      	str	r0, [r7, #4]
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.
    // Please note, HAL::initialize() must be called to initialize the framework.

    TouchGFXGeneratedHAL::initialize();
 8013d2c:	687b      	ldr	r3, [r7, #4]
 8013d2e:	4618      	mov	r0, r3
 8013d30:	f001 f844 	bl	8014dbc <_ZN20TouchGFXGeneratedHAL10initializeEv>
}
 8013d34:	bf00      	nop
 8013d36:	3708      	adds	r7, #8
 8013d38:	46bd      	mov	sp, r7
 8013d3a:	bd80      	pop	{r7, pc}

08013d3c <_ZNK11TouchGFXHAL17getTFTFrameBufferEv>:
 * Gets the frame buffer address used by the TFT controller.
 *
 * @return The address of the frame buffer currently being displayed on the TFT.
 */
uint16_t* TouchGFXHAL::getTFTFrameBuffer() const
{
 8013d3c:	b580      	push	{r7, lr}
 8013d3e:	b082      	sub	sp, #8
 8013d40:	af00      	add	r7, sp, #0
 8013d42:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of getTFTFrameBuffer().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    return TouchGFXGeneratedHAL::getTFTFrameBuffer();
 8013d44:	687b      	ldr	r3, [r7, #4]
 8013d46:	4618      	mov	r0, r3
 8013d48:	f001 f8ba 	bl	8014ec0 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>
 8013d4c:	4603      	mov	r3, r0
}
 8013d4e:	4618      	mov	r0, r3
 8013d50:	3708      	adds	r7, #8
 8013d52:	46bd      	mov	sp, r7
 8013d54:	bd80      	pop	{r7, pc}

08013d56 <_ZN11TouchGFXHAL17setTFTFrameBufferEPt>:
 * Sets the frame buffer address used by the TFT controller.
 *
 * @param [in] address New frame buffer address.
 */
void TouchGFXHAL::setTFTFrameBuffer(uint16_t* address)
{
 8013d56:	b580      	push	{r7, lr}
 8013d58:	b082      	sub	sp, #8
 8013d5a:	af00      	add	r7, sp, #0
 8013d5c:	6078      	str	r0, [r7, #4]
 8013d5e:	6039      	str	r1, [r7, #0]
    // Calling parent implementation of setTFTFrameBuffer(uint16_t* address).
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::setTFTFrameBuffer(address);
 8013d60:	687b      	ldr	r3, [r7, #4]
 8013d62:	6839      	ldr	r1, [r7, #0]
 8013d64:	4618      	mov	r0, r3
 8013d66:	f001 f8b9 	bl	8014edc <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>
}
 8013d6a:	bf00      	nop
 8013d6c:	3708      	adds	r7, #8
 8013d6e:	46bd      	mov	sp, r7
 8013d70:	bd80      	pop	{r7, pc}

08013d72 <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE>:
 * @param rect The area of the screen that has been drawn, expressed in absolute coordinates.
 *
 * @see flushFrameBuffer().
 */
void TouchGFXHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
 8013d72:	b580      	push	{r7, lr}
 8013d74:	b082      	sub	sp, #8
 8013d76:	af00      	add	r7, sp, #0
 8013d78:	6078      	str	r0, [r7, #4]
 8013d7a:	6039      	str	r1, [r7, #0]
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.
    // Please note, HAL::flushFrameBuffer(const touchgfx::Rect& rect) must
    // be called to notify the touchgfx framework that flush has been performed.

    TouchGFXGeneratedHAL::flushFrameBuffer(rect);
 8013d7c:	687b      	ldr	r3, [r7, #4]
 8013d7e:	6839      	ldr	r1, [r7, #0]
 8013d80:	4618      	mov	r0, r3
 8013d82:	f001 f8c1 	bl	8014f08 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>
}
 8013d86:	bf00      	nop
 8013d88:	3708      	adds	r7, #8
 8013d8a:	46bd      	mov	sp, r7
 8013d8c:	bd80      	pop	{r7, pc}

08013d8e <_ZN11TouchGFXHAL9blockCopyEPvPKvm>:

bool TouchGFXHAL::blockCopy(void* RESTRICT dest, const void* RESTRICT src, uint32_t numBytes)
{
 8013d8e:	b580      	push	{r7, lr}
 8013d90:	b084      	sub	sp, #16
 8013d92:	af00      	add	r7, sp, #0
 8013d94:	60f8      	str	r0, [r7, #12]
 8013d96:	60b9      	str	r1, [r7, #8]
 8013d98:	607a      	str	r2, [r7, #4]
 8013d9a:	603b      	str	r3, [r7, #0]
    return TouchGFXGeneratedHAL::blockCopy(dest, src, numBytes);
 8013d9c:	68f8      	ldr	r0, [r7, #12]
 8013d9e:	683b      	ldr	r3, [r7, #0]
 8013da0:	687a      	ldr	r2, [r7, #4]
 8013da2:	68b9      	ldr	r1, [r7, #8]
 8013da4:	f001 f8fe 	bl	8014fa4 <_ZN20TouchGFXGeneratedHAL9blockCopyEPvPKvm>
 8013da8:	4603      	mov	r3, r0
}
 8013daa:	4618      	mov	r0, r3
 8013dac:	3710      	adds	r7, #16
 8013dae:	46bd      	mov	sp, r7
 8013db0:	bd80      	pop	{r7, pc}

08013db2 <_ZN11TouchGFXHAL19configureInterruptsEv>:
/**
 * Configures the interrupts relevant for TouchGFX. This primarily entails setting
 * the interrupt priorities for the DMA and LCD interrupts.
 */
void TouchGFXHAL::configureInterrupts()
{
 8013db2:	b580      	push	{r7, lr}
 8013db4:	b082      	sub	sp, #8
 8013db6:	af00      	add	r7, sp, #0
 8013db8:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of configureInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::configureInterrupts();
 8013dba:	687b      	ldr	r3, [r7, #4]
 8013dbc:	4618      	mov	r0, r3
 8013dbe:	f001 f82f 	bl	8014e20 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>
}
 8013dc2:	bf00      	nop
 8013dc4:	3708      	adds	r7, #8
 8013dc6:	46bd      	mov	sp, r7
 8013dc8:	bd80      	pop	{r7, pc}

08013dca <_ZN11TouchGFXHAL16enableInterruptsEv>:

/**
 * Used for enabling interrupts set in configureInterrupts()
 */
void TouchGFXHAL::enableInterrupts()
{
 8013dca:	b580      	push	{r7, lr}
 8013dcc:	b082      	sub	sp, #8
 8013dce:	af00      	add	r7, sp, #0
 8013dd0:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of enableInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::enableInterrupts();
 8013dd2:	687b      	ldr	r3, [r7, #4]
 8013dd4:	4618      	mov	r0, r3
 8013dd6:	f001 f82f 	bl	8014e38 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>
}
 8013dda:	bf00      	nop
 8013ddc:	3708      	adds	r7, #8
 8013dde:	46bd      	mov	sp, r7
 8013de0:	bd80      	pop	{r7, pc}

08013de2 <_ZN11TouchGFXHAL17disableInterruptsEv>:

/**
 * Used for disabling interrupts set in configureInterrupts()
 */
void TouchGFXHAL::disableInterrupts()
{
 8013de2:	b580      	push	{r7, lr}
 8013de4:	b082      	sub	sp, #8
 8013de6:	af00      	add	r7, sp, #0
 8013de8:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of disableInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::disableInterrupts();
 8013dea:	687b      	ldr	r3, [r7, #4]
 8013dec:	4618      	mov	r0, r3
 8013dee:	f001 f82e 	bl	8014e4e <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>
}
 8013df2:	bf00      	nop
 8013df4:	3708      	adds	r7, #8
 8013df6:	46bd      	mov	sp, r7
 8013df8:	bd80      	pop	{r7, pc}

08013dfa <_ZN11TouchGFXHAL28enableLCDControllerInterruptEv>:
/**
 * Configure the LCD controller to fire interrupts at VSYNC. Called automatically
 * once TouchGFX initialization has completed.
 */
void TouchGFXHAL::enableLCDControllerInterrupt()
{
 8013dfa:	b580      	push	{r7, lr}
 8013dfc:	b082      	sub	sp, #8
 8013dfe:	af00      	add	r7, sp, #0
 8013e00:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of enableLCDControllerInterrupt().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::enableLCDControllerInterrupt();
 8013e02:	687b      	ldr	r3, [r7, #4]
 8013e04:	4618      	mov	r0, r3
 8013e06:	f001 f82d 	bl	8014e64 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>
}
 8013e0a:	bf00      	nop
 8013e0c:	3708      	adds	r7, #8
 8013e0e:	46bd      	mov	sp, r7
 8013e10:	bd80      	pop	{r7, pc}
	...

08013e14 <_ZN11TouchGFXHALD1Ev>:
class TouchGFXHAL : public TouchGFXGeneratedHAL
 8013e14:	b580      	push	{r7, lr}
 8013e16:	b082      	sub	sp, #8
 8013e18:	af00      	add	r7, sp, #0
 8013e1a:	6078      	str	r0, [r7, #4]
 8013e1c:	4a05      	ldr	r2, [pc, #20]	; (8013e34 <_ZN11TouchGFXHALD1Ev+0x20>)
 8013e1e:	687b      	ldr	r3, [r7, #4]
 8013e20:	601a      	str	r2, [r3, #0]
 8013e22:	687b      	ldr	r3, [r7, #4]
 8013e24:	4618      	mov	r0, r3
 8013e26:	f7ff ff4f 	bl	8013cc8 <_ZN20TouchGFXGeneratedHALD1Ev>
 8013e2a:	687b      	ldr	r3, [r7, #4]
 8013e2c:	4618      	mov	r0, r3
 8013e2e:	3708      	adds	r7, #8
 8013e30:	46bd      	mov	sp, r7
 8013e32:	bd80      	pop	{r7, pc}
 8013e34:	08029500 	.word	0x08029500

08013e38 <_ZN11TouchGFXHALD0Ev>:
 8013e38:	b580      	push	{r7, lr}
 8013e3a:	b082      	sub	sp, #8
 8013e3c:	af00      	add	r7, sp, #0
 8013e3e:	6078      	str	r0, [r7, #4]
 8013e40:	6878      	ldr	r0, [r7, #4]
 8013e42:	f7ff ffe7 	bl	8013e14 <_ZN11TouchGFXHALD1Ev>
 8013e46:	217c      	movs	r1, #124	; 0x7c
 8013e48:	6878      	ldr	r0, [r7, #4]
 8013e4a:	f013 f93e 	bl	80270ca <_ZdlPvj>
 8013e4e:	687b      	ldr	r3, [r7, #4]
 8013e50:	4618      	mov	r0, r3
 8013e52:	3708      	adds	r7, #8
 8013e54:	46bd      	mov	sp, r7
 8013e56:	bd80      	pop	{r7, pc}

08013e58 <_ZN8touchgfx10OSWrappers10initializeEv>:

/*
 * Initialize frame buffer semaphore and queue/mutex for VSYNC signal.
 */
void OSWrappers::initialize()
{
 8013e58:	b580      	push	{r7, lr}
 8013e5a:	af00      	add	r7, sp, #0
    // Create a queue of length 1
    frame_buffer_sem = osSemaphoreNew(1, 1, NULL); // Binary semaphore
 8013e5c:	2200      	movs	r2, #0
 8013e5e:	2101      	movs	r1, #1
 8013e60:	2001      	movs	r0, #1
 8013e62:	f7f9 f9fe 	bl	800d262 <osSemaphoreNew>
 8013e66:	4603      	mov	r3, r0
 8013e68:	4a0f      	ldr	r2, [pc, #60]	; (8013ea8 <_ZN8touchgfx10OSWrappers10initializeEv+0x50>)
 8013e6a:	6013      	str	r3, [r2, #0]
    assert((frame_buffer_sem != NULL) && "Creation of framebuffer semaphore failed");
 8013e6c:	4b0e      	ldr	r3, [pc, #56]	; (8013ea8 <_ZN8touchgfx10OSWrappers10initializeEv+0x50>)
 8013e6e:	681b      	ldr	r3, [r3, #0]
 8013e70:	2b00      	cmp	r3, #0
 8013e72:	d105      	bne.n	8013e80 <_ZN8touchgfx10OSWrappers10initializeEv+0x28>
 8013e74:	4b0d      	ldr	r3, [pc, #52]	; (8013eac <_ZN8touchgfx10OSWrappers10initializeEv+0x54>)
 8013e76:	4a0e      	ldr	r2, [pc, #56]	; (8013eb0 <_ZN8touchgfx10OSWrappers10initializeEv+0x58>)
 8013e78:	2125      	movs	r1, #37	; 0x25
 8013e7a:	480e      	ldr	r0, [pc, #56]	; (8013eb4 <_ZN8touchgfx10OSWrappers10initializeEv+0x5c>)
 8013e7c:	f013 f954 	bl	8027128 <__assert_func>

    // Create a queue of length 1
    vsync_queue = osMessageQueueNew(1, 4, NULL);
 8013e80:	2200      	movs	r2, #0
 8013e82:	2104      	movs	r1, #4
 8013e84:	2001      	movs	r0, #1
 8013e86:	f7f9 fb0b 	bl	800d4a0 <osMessageQueueNew>
 8013e8a:	4603      	mov	r3, r0
 8013e8c:	4a0a      	ldr	r2, [pc, #40]	; (8013eb8 <_ZN8touchgfx10OSWrappers10initializeEv+0x60>)
 8013e8e:	6013      	str	r3, [r2, #0]
    assert((vsync_queue != NULL) && "Creation of vsync message queue failed");
 8013e90:	4b09      	ldr	r3, [pc, #36]	; (8013eb8 <_ZN8touchgfx10OSWrappers10initializeEv+0x60>)
 8013e92:	681b      	ldr	r3, [r3, #0]
 8013e94:	2b00      	cmp	r3, #0
 8013e96:	d105      	bne.n	8013ea4 <_ZN8touchgfx10OSWrappers10initializeEv+0x4c>
 8013e98:	4b08      	ldr	r3, [pc, #32]	; (8013ebc <_ZN8touchgfx10OSWrappers10initializeEv+0x64>)
 8013e9a:	4a05      	ldr	r2, [pc, #20]	; (8013eb0 <_ZN8touchgfx10OSWrappers10initializeEv+0x58>)
 8013e9c:	2129      	movs	r1, #41	; 0x29
 8013e9e:	4805      	ldr	r0, [pc, #20]	; (8013eb4 <_ZN8touchgfx10OSWrappers10initializeEv+0x5c>)
 8013ea0:	f013 f942 	bl	8027128 <__assert_func>
}
 8013ea4:	bf00      	nop
 8013ea6:	bd80      	pop	{r7, pc}
 8013ea8:	200052e0 	.word	0x200052e0
 8013eac:	08028c58 	.word	0x08028c58
 8013eb0:	08028ca4 	.word	0x08028ca4
 8013eb4:	08028cd4 	.word	0x08028cd4
 8013eb8:	200052e4 	.word	0x200052e4
 8013ebc:	08028d00 	.word	0x08028d00

08013ec0 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>:

/*
 * Take the frame buffer semaphore. Blocks until semaphore is available.
 */
void OSWrappers::takeFrameBufferSemaphore()
{
 8013ec0:	b580      	push	{r7, lr}
 8013ec2:	af00      	add	r7, sp, #0
    osSemaphoreAcquire(frame_buffer_sem, osWaitForever);
 8013ec4:	4b04      	ldr	r3, [pc, #16]	; (8013ed8 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv+0x18>)
 8013ec6:	681b      	ldr	r3, [r3, #0]
 8013ec8:	f04f 31ff 	mov.w	r1, #4294967295
 8013ecc:	4618      	mov	r0, r3
 8013ece:	f7f9 fa51 	bl	800d374 <osSemaphoreAcquire>
}
 8013ed2:	bf00      	nop
 8013ed4:	bd80      	pop	{r7, pc}
 8013ed6:	bf00      	nop
 8013ed8:	200052e0 	.word	0x200052e0

08013edc <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>:

/*
 * Release the frame buffer semaphore.
 */
void OSWrappers::giveFrameBufferSemaphore()
{
 8013edc:	b580      	push	{r7, lr}
 8013ede:	af00      	add	r7, sp, #0
    osSemaphoreRelease(frame_buffer_sem);
 8013ee0:	4b03      	ldr	r3, [pc, #12]	; (8013ef0 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv+0x14>)
 8013ee2:	681b      	ldr	r3, [r3, #0]
 8013ee4:	4618      	mov	r0, r3
 8013ee6:	f7f9 fa97 	bl	800d418 <osSemaphoreRelease>
}
 8013eea:	bf00      	nop
 8013eec:	bd80      	pop	{r7, pc}
 8013eee:	bf00      	nop
 8013ef0:	200052e0 	.word	0x200052e0

08013ef4 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>:
 *
 * Note must return immediately! This function does not care who has the taken the semaphore,
 * it only serves to make sure that the semaphore is taken by someone.
 */
void OSWrappers::tryTakeFrameBufferSemaphore()
{
 8013ef4:	b580      	push	{r7, lr}
 8013ef6:	af00      	add	r7, sp, #0
    osSemaphoreAcquire(frame_buffer_sem, 0);
 8013ef8:	4b03      	ldr	r3, [pc, #12]	; (8013f08 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv+0x14>)
 8013efa:	681b      	ldr	r3, [r3, #0]
 8013efc:	2100      	movs	r1, #0
 8013efe:	4618      	mov	r0, r3
 8013f00:	f7f9 fa38 	bl	800d374 <osSemaphoreAcquire>
}
 8013f04:	bf00      	nop
 8013f06:	bd80      	pop	{r7, pc}
 8013f08:	200052e0 	.word	0x200052e0

08013f0c <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>:
 *
 * Release the frame buffer semaphore in a way that is safe in interrupt context.
 * Called from ISR.
 */
void OSWrappers::giveFrameBufferSemaphoreFromISR()
{
 8013f0c:	b580      	push	{r7, lr}
 8013f0e:	af00      	add	r7, sp, #0
    osSemaphoreRelease(frame_buffer_sem);
 8013f10:	4b03      	ldr	r3, [pc, #12]	; (8013f20 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0x14>)
 8013f12:	681b      	ldr	r3, [r3, #0]
 8013f14:	4618      	mov	r0, r3
 8013f16:	f7f9 fa7f 	bl	800d418 <osSemaphoreRelease>
}
 8013f1a:	bf00      	nop
 8013f1c:	bd80      	pop	{r7, pc}
 8013f1e:	bf00      	nop
 8013f20:	200052e0 	.word	0x200052e0

08013f24 <_ZN8touchgfx10OSWrappers11signalVSyncEv>:
 *
 * Note This function is called from an ISR, and should (depending on OS) trigger a
 * scheduling.
 */
void OSWrappers::signalVSync()
{
 8013f24:	b580      	push	{r7, lr}
 8013f26:	af00      	add	r7, sp, #0
    osMessageQueuePut(vsync_queue, &dummy, 0, 0);
 8013f28:	4b04      	ldr	r3, [pc, #16]	; (8013f3c <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x18>)
 8013f2a:	6818      	ldr	r0, [r3, #0]
 8013f2c:	2300      	movs	r3, #0
 8013f2e:	2200      	movs	r2, #0
 8013f30:	4903      	ldr	r1, [pc, #12]	; (8013f40 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x1c>)
 8013f32:	f7f9 fb29 	bl	800d588 <osMessageQueuePut>
}
 8013f36:	bf00      	nop
 8013f38:	bd80      	pop	{r7, pc}
 8013f3a:	bf00      	nop
 8013f3c:	200052e4 	.word	0x200052e4
 8013f40:	2000016c 	.word	0x2000016c

08013f44 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>:
 *
 * Note This function must first clear the mutex/queue and then wait for the next one to
 * occur.
 */
void OSWrappers::waitForVSync()
{
 8013f44:	b580      	push	{r7, lr}
 8013f46:	b082      	sub	sp, #8
 8013f48:	af00      	add	r7, sp, #0
    uint32_t dummyGet;
    // First make sure the queue is empty, by trying to remove an element with 0 timeout.
    osMessageQueueGet(vsync_queue, &dummyGet, 0, 0);
 8013f4a:	4b09      	ldr	r3, [pc, #36]	; (8013f70 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x2c>)
 8013f4c:	6818      	ldr	r0, [r3, #0]
 8013f4e:	1d39      	adds	r1, r7, #4
 8013f50:	2300      	movs	r3, #0
 8013f52:	2200      	movs	r2, #0
 8013f54:	f7f9 fb78 	bl	800d648 <osMessageQueueGet>

    // Then, wait for next VSYNC to occur.
    osMessageQueueGet(vsync_queue, &dummyGet, 0, osWaitForever);
 8013f58:	4b05      	ldr	r3, [pc, #20]	; (8013f70 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x2c>)
 8013f5a:	6818      	ldr	r0, [r3, #0]
 8013f5c:	1d39      	adds	r1, r7, #4
 8013f5e:	f04f 33ff 	mov.w	r3, #4294967295
 8013f62:	2200      	movs	r2, #0
 8013f64:	f7f9 fb70 	bl	800d648 <osMessageQueueGet>
}
 8013f68:	bf00      	nop
 8013f6a:	3708      	adds	r7, #8
 8013f6c:	46bd      	mov	sp, r7
 8013f6e:	bd80      	pop	{r7, pc}
 8013f70:	200052e4 	.word	0x200052e4

08013f74 <_ZN8touchgfx10OSWrappers9taskDelayEt>:
 *
 * see HAL::setFrameRefreshStrategy(FrameRefreshStrategy s)
 * see HAL::registerTaskDelayFunction(void (*delayF)(uint16_t))
 */
void OSWrappers::taskDelay(uint16_t ms)
{
 8013f74:	b580      	push	{r7, lr}
 8013f76:	b082      	sub	sp, #8
 8013f78:	af00      	add	r7, sp, #0
 8013f7a:	4603      	mov	r3, r0
 8013f7c:	80fb      	strh	r3, [r7, #6]
    osDelay(static_cast<uint32_t>(ms));
 8013f7e:	88fb      	ldrh	r3, [r7, #6]
 8013f80:	4618      	mov	r0, r3
 8013f82:	f7f9 f953 	bl	800d22c <osDelay>
}
 8013f86:	bf00      	nop
 8013f88:	3708      	adds	r7, #8
 8013f8a:	46bd      	mov	sp, r7
 8013f8c:	bd80      	pop	{r7, pc}

08013f8e <_ZN8touchgfx9colortypeC1Ev>:
    colortype()
 8013f8e:	b480      	push	{r7}
 8013f90:	b083      	sub	sp, #12
 8013f92:	af00      	add	r7, sp, #0
 8013f94:	6078      	str	r0, [r7, #4]
        : color(0)
 8013f96:	687b      	ldr	r3, [r7, #4]
 8013f98:	2200      	movs	r2, #0
 8013f9a:	601a      	str	r2, [r3, #0]
    }
 8013f9c:	687b      	ldr	r3, [r7, #4]
 8013f9e:	4618      	mov	r0, r3
 8013fa0:	370c      	adds	r7, #12
 8013fa2:	46bd      	mov	sp, r7
 8013fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013fa8:	4770      	bx	lr
	...

08013fac <_ZN8touchgfx9DMA_QueueD1Ev>:
     * @param  op The blitop to add.
     */
    virtual void pushCopyOf(const BlitOp& op) = 0;

    /** Finalizes an instance of the DMA_Queue class. */
    virtual ~DMA_Queue()
 8013fac:	b480      	push	{r7}
 8013fae:	b083      	sub	sp, #12
 8013fb0:	af00      	add	r7, sp, #0
 8013fb2:	6078      	str	r0, [r7, #4]
    {
 8013fb4:	4a04      	ldr	r2, [pc, #16]	; (8013fc8 <_ZN8touchgfx9DMA_QueueD1Ev+0x1c>)
 8013fb6:	687b      	ldr	r3, [r7, #4]
 8013fb8:	601a      	str	r2, [r3, #0]
    }
 8013fba:	687b      	ldr	r3, [r7, #4]
 8013fbc:	4618      	mov	r0, r3
 8013fbe:	370c      	adds	r7, #12
 8013fc0:	46bd      	mov	sp, r7
 8013fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013fc6:	4770      	bx	lr
 8013fc8:	080295bc 	.word	0x080295bc

08013fcc <_ZN8touchgfx9DMA_QueueD0Ev>:
    virtual ~DMA_Queue()
 8013fcc:	b580      	push	{r7, lr}
 8013fce:	b082      	sub	sp, #8
 8013fd0:	af00      	add	r7, sp, #0
 8013fd2:	6078      	str	r0, [r7, #4]
    }
 8013fd4:	6878      	ldr	r0, [r7, #4]
 8013fd6:	f7ff ffe9 	bl	8013fac <_ZN8touchgfx9DMA_QueueD1Ev>
 8013fda:	2104      	movs	r1, #4
 8013fdc:	6878      	ldr	r0, [r7, #4]
 8013fde:	f013 f874 	bl	80270ca <_ZdlPvj>
 8013fe2:	687b      	ldr	r3, [r7, #4]
 8013fe4:	4618      	mov	r0, r3
 8013fe6:	3708      	adds	r7, #8
 8013fe8:	46bd      	mov	sp, r7
 8013fea:	bd80      	pop	{r7, pc}

08013fec <_ZN8touchgfx13DMA_Interface5flushEv>:
     * @param  op The operation to add.
     */
    virtual void addToQueue(const BlitOp& op);

    /** This function blocks until all DMA transfers in the queue have been completed. */
    virtual void flush()
 8013fec:	b580      	push	{r7, lr}
 8013fee:	b082      	sub	sp, #8
 8013ff0:	af00      	add	r7, sp, #0
 8013ff2:	6078      	str	r0, [r7, #4]
    {
        waitForFrameBufferSemaphore();
 8013ff4:	687b      	ldr	r3, [r7, #4]
 8013ff6:	681b      	ldr	r3, [r3, #0]
 8013ff8:	3344      	adds	r3, #68	; 0x44
 8013ffa:	681b      	ldr	r3, [r3, #0]
 8013ffc:	6878      	ldr	r0, [r7, #4]
 8013ffe:	4798      	blx	r3
    }
 8014000:	bf00      	nop
 8014002:	3708      	adds	r7, #8
 8014004:	46bd      	mov	sp, r7
 8014006:	bd80      	pop	{r7, pc}

08014008 <_ZN8touchgfx13DMA_InterfaceD1Ev>:
    {
        return DMA_TYPE_GENERIC;
    }

    /** Finalizes an instance of the DMA_Interface class. */
    virtual ~DMA_Interface()
 8014008:	b480      	push	{r7}
 801400a:	b083      	sub	sp, #12
 801400c:	af00      	add	r7, sp, #0
 801400e:	6078      	str	r0, [r7, #4]
    {
 8014010:	4a04      	ldr	r2, [pc, #16]	; (8014024 <_ZN8touchgfx13DMA_InterfaceD1Ev+0x1c>)
 8014012:	687b      	ldr	r3, [r7, #4]
 8014014:	601a      	str	r2, [r3, #0]
    }
 8014016:	687b      	ldr	r3, [r7, #4]
 8014018:	4618      	mov	r0, r3
 801401a:	370c      	adds	r7, #12
 801401c:	46bd      	mov	sp, r7
 801401e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014022:	4770      	bx	lr
 8014024:	0802a5ec 	.word	0x0802a5ec

08014028 <_ZN8touchgfx13DMA_InterfaceD0Ev>:
    virtual ~DMA_Interface()
 8014028:	b580      	push	{r7, lr}
 801402a:	b082      	sub	sp, #8
 801402c:	af00      	add	r7, sp, #0
 801402e:	6078      	str	r0, [r7, #4]
    }
 8014030:	6878      	ldr	r0, [r7, #4]
 8014032:	f7ff ffe9 	bl	8014008 <_ZN8touchgfx13DMA_InterfaceD1Ev>
 8014036:	210c      	movs	r1, #12
 8014038:	6878      	ldr	r0, [r7, #4]
 801403a:	f013 f846 	bl	80270ca <_ZdlPvj>
 801403e:	687b      	ldr	r3, [r7, #4]
 8014040:	4618      	mov	r0, r3
 8014042:	3708      	adds	r7, #8
 8014044:	46bd      	mov	sp, r7
 8014046:	bd80      	pop	{r7, pc}

08014048 <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE>:
    /**
     * Constructs a DMA Interface object.
     *
     * @param [in] dmaQueue Reference to the queue of DMA operations.
     */
    DMA_Interface(DMA_Queue& dmaQueue)
 8014048:	b480      	push	{r7}
 801404a:	b083      	sub	sp, #12
 801404c:	af00      	add	r7, sp, #0
 801404e:	6078      	str	r0, [r7, #4]
 8014050:	6039      	str	r1, [r7, #0]
        : queue(dmaQueue), isRunning(false), isAllowed(false)
 8014052:	4a09      	ldr	r2, [pc, #36]	; (8014078 <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE+0x30>)
 8014054:	687b      	ldr	r3, [r7, #4]
 8014056:	601a      	str	r2, [r3, #0]
 8014058:	687b      	ldr	r3, [r7, #4]
 801405a:	683a      	ldr	r2, [r7, #0]
 801405c:	605a      	str	r2, [r3, #4]
 801405e:	687b      	ldr	r3, [r7, #4]
 8014060:	2200      	movs	r2, #0
 8014062:	721a      	strb	r2, [r3, #8]
 8014064:	687b      	ldr	r3, [r7, #4]
 8014066:	2200      	movs	r2, #0
 8014068:	725a      	strb	r2, [r3, #9]
    {
    }
 801406a:	687b      	ldr	r3, [r7, #4]
 801406c:	4618      	mov	r0, r3
 801406e:	370c      	adds	r7, #12
 8014070:	46bd      	mov	sp, r7
 8014072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014076:	4770      	bx	lr
 8014078:	0802a5ec 	.word	0x0802a5ec

0801407c <_ZN8touchgfx3HAL18signalDMAInterruptEv>:
    void signalDMAInterrupt()
 801407c:	b580      	push	{r7, lr}
 801407e:	b082      	sub	sp, #8
 8014080:	af00      	add	r7, sp, #0
 8014082:	6078      	str	r0, [r7, #4]
        dma.signalDMAInterrupt();
 8014084:	687b      	ldr	r3, [r7, #4]
 8014086:	685a      	ldr	r2, [r3, #4]
 8014088:	687b      	ldr	r3, [r7, #4]
 801408a:	685b      	ldr	r3, [r3, #4]
 801408c:	681b      	ldr	r3, [r3, #0]
 801408e:	3314      	adds	r3, #20
 8014090:	681b      	ldr	r3, [r3, #0]
 8014092:	4610      	mov	r0, r2
 8014094:	4798      	blx	r3
    }
 8014096:	bf00      	nop
 8014098:	3708      	adds	r7, #8
 801409a:	46bd      	mov	sp, r7
 801409c:	bd80      	pop	{r7, pc}
	...

080140a0 <DMA2D_IRQHandler>:
    const uint16_t size;
    const uint32_t* const data;
} clutData_t;

extern "C" void DMA2D_IRQHandler()
{
 80140a0:	b580      	push	{r7, lr}
 80140a2:	af00      	add	r7, sp, #0
    /* Transfer Complete Interrupt management ************************************/
    if ((READ_REG(DMA2D->ISR) & DMA2D_FLAG_TC) != RESET)
 80140a4:	4b13      	ldr	r3, [pc, #76]	; (80140f4 <DMA2D_IRQHandler+0x54>)
 80140a6:	685b      	ldr	r3, [r3, #4]
 80140a8:	f003 0302 	and.w	r3, r3, #2
 80140ac:	2b00      	cmp	r3, #0
 80140ae:	bf14      	ite	ne
 80140b0:	2301      	movne	r3, #1
 80140b2:	2300      	moveq	r3, #0
 80140b4:	b2db      	uxtb	r3, r3
 80140b6:	2b00      	cmp	r3, #0
 80140b8:	d019      	beq.n	80140ee <DMA2D_IRQHandler+0x4e>
    {
        /* Verify Transfer Complete Interrupt */
        if ((READ_REG(DMA2D->CR) & DMA2D_IT_TC) != RESET)
 80140ba:	4b0e      	ldr	r3, [pc, #56]	; (80140f4 <DMA2D_IRQHandler+0x54>)
 80140bc:	681b      	ldr	r3, [r3, #0]
 80140be:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80140c2:	2b00      	cmp	r3, #0
 80140c4:	bf14      	ite	ne
 80140c6:	2301      	movne	r3, #1
 80140c8:	2300      	moveq	r3, #0
 80140ca:	b2db      	uxtb	r3, r3
 80140cc:	2b00      	cmp	r3, #0
 80140ce:	d00e      	beq.n	80140ee <DMA2D_IRQHandler+0x4e>
        {
            /* Disable the transfer complete interrupt */
            DMA2D->CR &= ~(DMA2D_IT_TC);
 80140d0:	4b08      	ldr	r3, [pc, #32]	; (80140f4 <DMA2D_IRQHandler+0x54>)
 80140d2:	681b      	ldr	r3, [r3, #0]
 80140d4:	4a07      	ldr	r2, [pc, #28]	; (80140f4 <DMA2D_IRQHandler+0x54>)
 80140d6:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80140da:	6013      	str	r3, [r2, #0]

            /* Clear the transfer complete flag */
            DMA2D->IFCR = (DMA2D_FLAG_TC);
 80140dc:	4b05      	ldr	r3, [pc, #20]	; (80140f4 <DMA2D_IRQHandler+0x54>)
 80140de:	2202      	movs	r2, #2
 80140e0:	609a      	str	r2, [r3, #8]

            /* Signal DMA queue of execution complete */
            touchgfx::HAL::getInstance()->signalDMAInterrupt();
 80140e2:	f7fd f8cf 	bl	8011284 <_ZN8touchgfx3HAL11getInstanceEv>
 80140e6:	4603      	mov	r3, r0
 80140e8:	4618      	mov	r0, r3
 80140ea:	f7ff ffc7 	bl	801407c <_ZN8touchgfx3HAL18signalDMAInterruptEv>
        }
    }
}
 80140ee:	bf00      	nop
 80140f0:	bd80      	pop	{r7, pc}
 80140f2:	bf00      	nop
 80140f4:	52001000 	.word	0x52001000

080140f8 <_ZN8touchgfx6BlitOpC1Ev>:

/**
 * BlitOp instances carry the required information for performing operations on the LCD
 * (framebuffer) using DMA.
 */
struct BlitOp
 80140f8:	b580      	push	{r7, lr}
 80140fa:	b082      	sub	sp, #8
 80140fc:	af00      	add	r7, sp, #0
 80140fe:	6078      	str	r0, [r7, #4]
 8014100:	687b      	ldr	r3, [r7, #4]
 8014102:	3318      	adds	r3, #24
 8014104:	4618      	mov	r0, r3
 8014106:	f7ff ff42 	bl	8013f8e <_ZN8touchgfx9colortypeC1Ev>
 801410a:	687b      	ldr	r3, [r7, #4]
 801410c:	4618      	mov	r0, r3
 801410e:	3708      	adds	r7, #8
 8014110:	46bd      	mov	sp, r7
 8014112:	bd80      	pop	{r7, pc}

08014114 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>:
class LockFreeDMA_Queue : public DMA_Queue
 8014114:	b580      	push	{r7, lr}
 8014116:	b082      	sub	sp, #8
 8014118:	af00      	add	r7, sp, #0
 801411a:	6078      	str	r0, [r7, #4]
 801411c:	4a05      	ldr	r2, [pc, #20]	; (8014134 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev+0x20>)
 801411e:	687b      	ldr	r3, [r7, #4]
 8014120:	601a      	str	r2, [r3, #0]
 8014122:	687b      	ldr	r3, [r7, #4]
 8014124:	4618      	mov	r0, r3
 8014126:	f7ff ff41 	bl	8013fac <_ZN8touchgfx9DMA_QueueD1Ev>
 801412a:	687b      	ldr	r3, [r7, #4]
 801412c:	4618      	mov	r0, r3
 801412e:	3708      	adds	r7, #8
 8014130:	46bd      	mov	sp, r7
 8014132:	bd80      	pop	{r7, pc}
 8014134:	0802a63c 	.word	0x0802a63c

08014138 <_ZN8touchgfx17LockFreeDMA_QueueD0Ev>:
 8014138:	b580      	push	{r7, lr}
 801413a:	b082      	sub	sp, #8
 801413c:	af00      	add	r7, sp, #0
 801413e:	6078      	str	r0, [r7, #4]
 8014140:	6878      	ldr	r0, [r7, #4]
 8014142:	f7ff ffe7 	bl	8014114 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>
 8014146:	2114      	movs	r1, #20
 8014148:	6878      	ldr	r0, [r7, #4]
 801414a:	f012 ffbe 	bl	80270ca <_ZdlPvj>
 801414e:	687b      	ldr	r3, [r7, #4]
 8014150:	4618      	mov	r0, r3
 8014152:	3708      	adds	r7, #8
 8014154:	46bd      	mov	sp, r7
 8014156:	bd80      	pop	{r7, pc}

08014158 <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE>:
     * Registers an array of texts. This function is called automatically from
     * touchgfx_generic_init(). Should not be called under normal circumstances.
     *
     * @param  t The array of texts.
     */
    static void registerTexts(const Texts* t)
 8014158:	b480      	push	{r7}
 801415a:	b083      	sub	sp, #12
 801415c:	af00      	add	r7, sp, #0
 801415e:	6078      	str	r0, [r7, #4]
    {
        texts = t;
 8014160:	4a04      	ldr	r2, [pc, #16]	; (8014174 <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE+0x1c>)
 8014162:	687b      	ldr	r3, [r7, #4]
 8014164:	6013      	str	r3, [r2, #0]
    }
 8014166:	bf00      	nop
 8014168:	370c      	adds	r7, #12
 801416a:	46bd      	mov	sp, r7
 801416c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014170:	4770      	bx	lr
 8014172:	bf00      	nop
 8014174:	20005868 	.word	0x20005868

08014178 <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE>:
     * @param [in] scr  A memory partition containing enough memory to hold the largest view.
     * @param [in] tra  A memory partition containing enough memory to hold the largest
     *                  transition.
     * @param [in] app  A reference to the MVPApplication instance.
     */
    MVPHeap(AbstractPartition& pres,
 8014178:	b480      	push	{r7}
 801417a:	b085      	sub	sp, #20
 801417c:	af00      	add	r7, sp, #0
 801417e:	60f8      	str	r0, [r7, #12]
 8014180:	60b9      	str	r1, [r7, #8]
 8014182:	607a      	str	r2, [r7, #4]
 8014184:	603b      	str	r3, [r7, #0]
            AbstractPartition& tra,
            MVPApplication& app)
        : presenterStorage(pres),
          screenStorage(scr),
          transitionStorage(tra),
          frontendApplication(app)
 8014186:	4a0b      	ldr	r2, [pc, #44]	; (80141b4 <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE+0x3c>)
 8014188:	68fb      	ldr	r3, [r7, #12]
 801418a:	601a      	str	r2, [r3, #0]
 801418c:	68fb      	ldr	r3, [r7, #12]
 801418e:	68ba      	ldr	r2, [r7, #8]
 8014190:	605a      	str	r2, [r3, #4]
 8014192:	68fb      	ldr	r3, [r7, #12]
 8014194:	687a      	ldr	r2, [r7, #4]
 8014196:	609a      	str	r2, [r3, #8]
 8014198:	68fb      	ldr	r3, [r7, #12]
 801419a:	683a      	ldr	r2, [r7, #0]
 801419c:	60da      	str	r2, [r3, #12]
 801419e:	68fb      	ldr	r3, [r7, #12]
 80141a0:	69ba      	ldr	r2, [r7, #24]
 80141a2:	611a      	str	r2, [r3, #16]
    {
    }
 80141a4:	68fb      	ldr	r3, [r7, #12]
 80141a6:	4618      	mov	r0, r3
 80141a8:	3714      	adds	r7, #20
 80141aa:	46bd      	mov	sp, r7
 80141ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80141b0:	4770      	bx	lr
 80141b2:	bf00      	nop
 80141b4:	080296f4 	.word	0x080296f4

080141b8 <_ZN8touchgfx7MVPHeapD1Ev>:

    /** Finalizes an instance of the MVPHeap class. */
    virtual ~MVPHeap()
 80141b8:	b480      	push	{r7}
 80141ba:	b083      	sub	sp, #12
 80141bc:	af00      	add	r7, sp, #0
 80141be:	6078      	str	r0, [r7, #4]
    {
 80141c0:	4a04      	ldr	r2, [pc, #16]	; (80141d4 <_ZN8touchgfx7MVPHeapD1Ev+0x1c>)
 80141c2:	687b      	ldr	r3, [r7, #4]
 80141c4:	601a      	str	r2, [r3, #0]
    }
 80141c6:	687b      	ldr	r3, [r7, #4]
 80141c8:	4618      	mov	r0, r3
 80141ca:	370c      	adds	r7, #12
 80141cc:	46bd      	mov	sp, r7
 80141ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80141d2:	4770      	bx	lr
 80141d4:	080296f4 	.word	0x080296f4

080141d8 <_ZN8touchgfx7MVPHeapD0Ev>:
    virtual ~MVPHeap()
 80141d8:	b580      	push	{r7, lr}
 80141da:	b082      	sub	sp, #8
 80141dc:	af00      	add	r7, sp, #0
 80141de:	6078      	str	r0, [r7, #4]
    }
 80141e0:	6878      	ldr	r0, [r7, #4]
 80141e2:	f7ff ffe9 	bl	80141b8 <_ZN8touchgfx7MVPHeapD1Ev>
 80141e6:	2114      	movs	r1, #20
 80141e8:	6878      	ldr	r0, [r7, #4]
 80141ea:	f012 ff6e 	bl	80270ca <_ZdlPvj>
 80141ee:	687b      	ldr	r3, [r7, #4]
 80141f0:	4618      	mov	r0, r3
 80141f2:	3708      	adds	r7, #8
 80141f4:	46bd      	mov	sp, r7
 80141f6:	bd80      	pop	{r7, pc}

080141f8 <_ZN8touchgfx3LCDD1Ev>:
 */
class LCD
{
public:
    /** Finalizes an instance of the LCD class. */
    virtual ~LCD()
 80141f8:	b480      	push	{r7}
 80141fa:	b083      	sub	sp, #12
 80141fc:	af00      	add	r7, sp, #0
 80141fe:	6078      	str	r0, [r7, #4]
    {
 8014200:	4a04      	ldr	r2, [pc, #16]	; (8014214 <_ZN8touchgfx3LCDD1Ev+0x1c>)
 8014202:	687b      	ldr	r3, [r7, #4]
 8014204:	601a      	str	r2, [r3, #0]
    }
 8014206:	687b      	ldr	r3, [r7, #4]
 8014208:	4618      	mov	r0, r3
 801420a:	370c      	adds	r7, #12
 801420c:	46bd      	mov	sp, r7
 801420e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014212:	4770      	bx	lr
 8014214:	0802ab24 	.word	0x0802ab24

08014218 <_ZN8touchgfx3LCDD0Ev>:
    virtual ~LCD()
 8014218:	b580      	push	{r7, lr}
 801421a:	b082      	sub	sp, #8
 801421c:	af00      	add	r7, sp, #0
 801421e:	6078      	str	r0, [r7, #4]
    }
 8014220:	6878      	ldr	r0, [r7, #4]
 8014222:	f7ff ffe9 	bl	80141f8 <_ZN8touchgfx3LCDD1Ev>
 8014226:	2108      	movs	r1, #8
 8014228:	6878      	ldr	r0, [r7, #4]
 801422a:	f012 ff4e 	bl	80270ca <_ZdlPvj>
 801422e:	687b      	ldr	r3, [r7, #4]
 8014230:	4618      	mov	r0, r3
 8014232:	3708      	adds	r7, #8
 8014234:	46bd      	mov	sp, r7
 8014236:	bd80      	pop	{r7, pc}

08014238 <_ZN8touchgfx13DMA_Interface10initializeEv>:
    virtual void initialize()
 8014238:	b480      	push	{r7}
 801423a:	b083      	sub	sp, #12
 801423c:	af00      	add	r7, sp, #0
 801423e:	6078      	str	r0, [r7, #4]
    }
 8014240:	bf00      	nop
 8014242:	370c      	adds	r7, #12
 8014244:	46bd      	mov	sp, r7
 8014246:	f85d 7b04 	ldr.w	r7, [sp], #4
 801424a:	4770      	bx	lr

0801424c <_ZN8touchgfx13DMA_Interface10getDMATypeEv>:
    virtual DMAType getDMAType(void)
 801424c:	b480      	push	{r7}
 801424e:	b083      	sub	sp, #12
 8014250:	af00      	add	r7, sp, #0
 8014252:	6078      	str	r0, [r7, #4]
        return DMA_TYPE_GENERIC;
 8014254:	2300      	movs	r3, #0
    }
 8014256:	4618      	mov	r0, r3
 8014258:	370c      	adds	r7, #12
 801425a:	46bd      	mov	sp, r7
 801425c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014260:	4770      	bx	lr

08014262 <_ZN8touchgfx8Gestures9DragStateC1Ev>:
    static const uint8_t MIN_VELOCITY_AT_RELEASE_BEFORE_SWIPE = 3;

    /** Defines the state of a drag. */
    struct DragState
    {
        DragState()
 8014262:	b480      	push	{r7}
 8014264:	b083      	sub	sp, #12
 8014266:	af00      	add	r7, sp, #0
 8014268:	6078      	str	r0, [r7, #4]
              downX(0),
              downY(0),
              tickCount(0),
              velocityX(0),
              velocityY(0),
              inProgress(false)
 801426a:	687b      	ldr	r3, [r7, #4]
 801426c:	2200      	movs	r2, #0
 801426e:	801a      	strh	r2, [r3, #0]
 8014270:	687b      	ldr	r3, [r7, #4]
 8014272:	2200      	movs	r2, #0
 8014274:	805a      	strh	r2, [r3, #2]
 8014276:	687b      	ldr	r3, [r7, #4]
 8014278:	2200      	movs	r2, #0
 801427a:	809a      	strh	r2, [r3, #4]
 801427c:	687b      	ldr	r3, [r7, #4]
 801427e:	2200      	movs	r2, #0
 8014280:	80da      	strh	r2, [r3, #6]
 8014282:	687b      	ldr	r3, [r7, #4]
 8014284:	2200      	movs	r2, #0
 8014286:	811a      	strh	r2, [r3, #8]
 8014288:	687b      	ldr	r3, [r7, #4]
 801428a:	2200      	movs	r2, #0
 801428c:	815a      	strh	r2, [r3, #10]
 801428e:	687b      	ldr	r3, [r7, #4]
 8014290:	2200      	movs	r2, #0
 8014292:	819a      	strh	r2, [r3, #12]
 8014294:	687b      	ldr	r3, [r7, #4]
 8014296:	2200      	movs	r2, #0
 8014298:	739a      	strb	r2, [r3, #14]
        {
        }
 801429a:	687b      	ldr	r3, [r7, #4]
 801429c:	4618      	mov	r0, r3
 801429e:	370c      	adds	r7, #12
 80142a0:	46bd      	mov	sp, r7
 80142a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80142a6:	4770      	bx	lr

080142a8 <_ZN8touchgfx8GesturesC1Ev>:
        bool inProgress;    ///< Whether a drag is in progress or not
    };

public:
    /** Default constructor. Does nothing. */
    Gestures()
 80142a8:	b580      	push	{r7, lr}
 80142aa:	b082      	sub	sp, #8
 80142ac:	af00      	add	r7, sp, #0
 80142ae:	6078      	str	r0, [r7, #4]
        : listener(0), dragThresholdValue(0)
 80142b0:	687b      	ldr	r3, [r7, #4]
 80142b2:	4618      	mov	r0, r3
 80142b4:	f7ff ffd5 	bl	8014262 <_ZN8touchgfx8Gestures9DragStateC1Ev>
 80142b8:	687b      	ldr	r3, [r7, #4]
 80142ba:	2200      	movs	r2, #0
 80142bc:	611a      	str	r2, [r3, #16]
 80142be:	687b      	ldr	r3, [r7, #4]
 80142c0:	2200      	movs	r2, #0
 80142c2:	829a      	strh	r2, [r3, #20]
    {
    }
 80142c4:	687b      	ldr	r3, [r7, #4]
 80142c6:	4618      	mov	r0, r3
 80142c8:	3708      	adds	r7, #8
 80142ca:	46bd      	mov	sp, r7
 80142cc:	bd80      	pop	{r7, pc}
	...

080142d0 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt>:
    HAL(DMA_Interface& dmaInterface, LCD& display, TouchController& touchCtrl, uint16_t width, uint16_t height)
 80142d0:	b580      	push	{r7, lr}
 80142d2:	b084      	sub	sp, #16
 80142d4:	af00      	add	r7, sp, #0
 80142d6:	60f8      	str	r0, [r7, #12]
 80142d8:	60b9      	str	r1, [r7, #8]
 80142da:	607a      	str	r2, [r7, #4]
 80142dc:	603b      	str	r3, [r7, #0]
          lastRenderVariant(HARDWARE)
 80142de:	4a4a      	ldr	r2, [pc, #296]	; (8014408 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x138>)
 80142e0:	68fb      	ldr	r3, [r7, #12]
 80142e2:	601a      	str	r2, [r3, #0]
 80142e4:	68fb      	ldr	r3, [r7, #12]
 80142e6:	68ba      	ldr	r2, [r7, #8]
 80142e8:	605a      	str	r2, [r3, #4]
 80142ea:	68fb      	ldr	r3, [r7, #12]
 80142ec:	687a      	ldr	r2, [r7, #4]
 80142ee:	609a      	str	r2, [r3, #8]
 80142f0:	68fb      	ldr	r3, [r7, #12]
 80142f2:	683a      	ldr	r2, [r7, #0]
 80142f4:	60da      	str	r2, [r3, #12]
 80142f6:	68fb      	ldr	r3, [r7, #12]
 80142f8:	2200      	movs	r2, #0
 80142fa:	611a      	str	r2, [r3, #16]
 80142fc:	68fb      	ldr	r3, [r7, #12]
 80142fe:	2200      	movs	r2, #0
 8014300:	615a      	str	r2, [r3, #20]
 8014302:	68fb      	ldr	r3, [r7, #12]
 8014304:	2200      	movs	r2, #0
 8014306:	619a      	str	r2, [r3, #24]
 8014308:	68fb      	ldr	r3, [r7, #12]
 801430a:	331c      	adds	r3, #28
 801430c:	4618      	mov	r0, r3
 801430e:	f7ff ffcb 	bl	80142a8 <_ZN8touchgfx8GesturesC1Ev>
 8014312:	68fb      	ldr	r3, [r7, #12]
 8014314:	2200      	movs	r2, #0
 8014316:	639a      	str	r2, [r3, #56]	; 0x38
 8014318:	68fb      	ldr	r3, [r7, #12]
 801431a:	2200      	movs	r2, #0
 801431c:	63da      	str	r2, [r3, #60]	; 0x3c
 801431e:	68fb      	ldr	r3, [r7, #12]
 8014320:	2200      	movs	r2, #0
 8014322:	641a      	str	r2, [r3, #64]	; 0x40
 8014324:	68fb      	ldr	r3, [r7, #12]
 8014326:	2200      	movs	r2, #0
 8014328:	645a      	str	r2, [r3, #68]	; 0x44
 801432a:	68fb      	ldr	r3, [r7, #12]
 801432c:	2200      	movs	r2, #0
 801432e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
 8014332:	68fb      	ldr	r3, [r7, #12]
 8014334:	2201      	movs	r2, #1
 8014336:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
 801433a:	68fb      	ldr	r3, [r7, #12]
 801433c:	2200      	movs	r2, #0
 801433e:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
 8014342:	68fb      	ldr	r3, [r7, #12]
 8014344:	2200      	movs	r2, #0
 8014346:	64da      	str	r2, [r3, #76]	; 0x4c
 8014348:	68fb      	ldr	r3, [r7, #12]
 801434a:	3350      	adds	r3, #80	; 0x50
 801434c:	4618      	mov	r0, r3
 801434e:	f7fe f88d 	bl	801246c <_ZN8touchgfx4RectC1Ev>
 8014352:	68fb      	ldr	r3, [r7, #12]
 8014354:	2201      	movs	r2, #1
 8014356:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
 801435a:	68fb      	ldr	r3, [r7, #12]
 801435c:	2200      	movs	r2, #0
 801435e:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
 8014362:	68fb      	ldr	r3, [r7, #12]
 8014364:	2200      	movs	r2, #0
 8014366:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
 801436a:	68fb      	ldr	r3, [r7, #12]
 801436c:	2201      	movs	r2, #1
 801436e:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
 8014372:	68fb      	ldr	r3, [r7, #12]
 8014374:	2200      	movs	r2, #0
 8014376:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
 801437a:	68fb      	ldr	r3, [r7, #12]
 801437c:	2200      	movs	r2, #0
 801437e:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
 8014382:	68fb      	ldr	r3, [r7, #12]
 8014384:	2200      	movs	r2, #0
 8014386:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
 801438a:	68fb      	ldr	r3, [r7, #12]
 801438c:	2200      	movs	r2, #0
 801438e:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
 8014392:	68fb      	ldr	r3, [r7, #12]
 8014394:	2200      	movs	r2, #0
 8014396:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
 801439a:	68fb      	ldr	r3, [r7, #12]
 801439c:	2200      	movs	r2, #0
 801439e:	671a      	str	r2, [r3, #112]	; 0x70
 80143a0:	68fb      	ldr	r3, [r7, #12]
 80143a2:	2200      	movs	r2, #0
 80143a4:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
 80143a8:	68fb      	ldr	r3, [r7, #12]
 80143aa:	2200      	movs	r2, #0
 80143ac:	f883 2076 	strb.w	r2, [r3, #118]	; 0x76
 80143b0:	68fb      	ldr	r3, [r7, #12]
 80143b2:	2201      	movs	r2, #1
 80143b4:	f883 2077 	strb.w	r2, [r3, #119]	; 0x77
 80143b8:	68fb      	ldr	r3, [r7, #12]
 80143ba:	2201      	movs	r2, #1
 80143bc:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
        instance = this;
 80143c0:	4a12      	ldr	r2, [pc, #72]	; (801440c <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x13c>)
 80143c2:	68fb      	ldr	r3, [r7, #12]
 80143c4:	6013      	str	r3, [r2, #0]
        DISPLAY_WIDTH = width;
 80143c6:	4a12      	ldr	r2, [pc, #72]	; (8014410 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x140>)
 80143c8:	8b3b      	ldrh	r3, [r7, #24]
 80143ca:	8013      	strh	r3, [r2, #0]
        DISPLAY_HEIGHT = height;
 80143cc:	4a11      	ldr	r2, [pc, #68]	; (8014414 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x144>)
 80143ce:	8bbb      	ldrh	r3, [r7, #28]
 80143d0:	8013      	strh	r3, [r2, #0]
        DISPLAY_ROTATION = rotate0;
 80143d2:	4b11      	ldr	r3, [pc, #68]	; (8014418 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x148>)
 80143d4:	2200      	movs	r2, #0
 80143d6:	701a      	strb	r2, [r3, #0]
        FRAME_BUFFER_WIDTH = DISPLAY_WIDTH;
 80143d8:	4b0d      	ldr	r3, [pc, #52]	; (8014410 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x140>)
 80143da:	881a      	ldrh	r2, [r3, #0]
 80143dc:	4b0f      	ldr	r3, [pc, #60]	; (801441c <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x14c>)
 80143de:	801a      	strh	r2, [r3, #0]
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT;
 80143e0:	4b0c      	ldr	r3, [pc, #48]	; (8014414 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x144>)
 80143e2:	881a      	ldrh	r2, [r3, #0]
 80143e4:	4b0e      	ldr	r3, [pc, #56]	; (8014420 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x150>)
 80143e6:	801a      	strh	r2, [r3, #0]
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
 80143e8:	8b3a      	ldrh	r2, [r7, #24]
 80143ea:	8bbb      	ldrh	r3, [r7, #28]
 80143ec:	429a      	cmp	r2, r3
 80143ee:	bf34      	ite	cc
 80143f0:	2301      	movcc	r3, #1
 80143f2:	2300      	movcs	r3, #0
 80143f4:	b2db      	uxtb	r3, r3
 80143f6:	461a      	mov	r2, r3
 80143f8:	68fb      	ldr	r3, [r7, #12]
 80143fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }
 80143fe:	68fb      	ldr	r3, [r7, #12]
 8014400:	4618      	mov	r0, r3
 8014402:	3710      	adds	r7, #16
 8014404:	46bd      	mov	sp, r7
 8014406:	bd80      	pop	{r7, pc}
 8014408:	0802a1a0 	.word	0x0802a1a0
 801440c:	2000580c 	.word	0x2000580c
 8014410:	20005800 	.word	0x20005800
 8014414:	20005802 	.word	0x20005802
 8014418:	20005804 	.word	0x20005804
 801441c:	20005806 	.word	0x20005806
 8014420:	20005808 	.word	0x20005808

08014424 <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>:
    /**
     * Determine (compile time) the Transition type of largest size.
     */
    typedef touchgfx::meta::select_type_maxsize< GeneratedTransitionTypes >::type MaxGeneratedTransitionType;

    virtual void gotoStartScreen(FrontendApplication& app)
 8014424:	b580      	push	{r7, lr}
 8014426:	b082      	sub	sp, #8
 8014428:	af00      	add	r7, sp, #0
 801442a:	6078      	str	r0, [r7, #4]
 801442c:	6039      	str	r1, [r7, #0]
    {
        app.gotoscreenScreenNoTransition();
 801442e:	683b      	ldr	r3, [r7, #0]
 8014430:	4618      	mov	r0, r3
 8014432:	f7fd f957 	bl	80116e4 <_ZN23FrontendApplicationBase28gotoscreenScreenNoTransitionEv>
    }
 8014436:	bf00      	nop
 8014438:	3708      	adds	r7, #8
 801443a:	46bd      	mov	sp, r7
 801443c:	bd80      	pop	{r7, pc}
	...

08014440 <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication>:
protected:
    FrontendHeapBase(touchgfx::AbstractPartition& presenters, touchgfx::AbstractPartition& views, touchgfx::AbstractPartition& transitions, FrontendApplication& app)
 8014440:	b580      	push	{r7, lr}
 8014442:	b086      	sub	sp, #24
 8014444:	af02      	add	r7, sp, #8
 8014446:	60f8      	str	r0, [r7, #12]
 8014448:	60b9      	str	r1, [r7, #8]
 801444a:	607a      	str	r2, [r7, #4]
 801444c:	603b      	str	r3, [r7, #0]
        : MVPHeap(presenters, views, transitions, app)
 801444e:	68f8      	ldr	r0, [r7, #12]
 8014450:	69bb      	ldr	r3, [r7, #24]
 8014452:	9300      	str	r3, [sp, #0]
 8014454:	683b      	ldr	r3, [r7, #0]
 8014456:	687a      	ldr	r2, [r7, #4]
 8014458:	68b9      	ldr	r1, [r7, #8]
 801445a:	f7ff fe8d 	bl	8014178 <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE>
 801445e:	4a04      	ldr	r2, [pc, #16]	; (8014470 <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication+0x30>)
 8014460:	68fb      	ldr	r3, [r7, #12]
 8014462:	601a      	str	r2, [r3, #0]
    {

    }
 8014464:	68fb      	ldr	r3, [r7, #12]
 8014466:	4618      	mov	r0, r3
 8014468:	3710      	adds	r7, #16
 801446a:	46bd      	mov	sp, r7
 801446c:	bd80      	pop	{r7, pc}
 801446e:	bf00      	nop
 8014470:	080296e0 	.word	0x080296e0

08014474 <__tcf_0>:
                            > > CombinedTransitionTypes;
    typedef touchgfx::meta::select_type_maxsize< CombinedTransitionTypes >::type MaxTransitionType;

    static FrontendHeap& getInstance()
    {
        static FrontendHeap instance;
 8014474:	b580      	push	{r7, lr}
 8014476:	af00      	add	r7, sp, #0
 8014478:	4801      	ldr	r0, [pc, #4]	; (8014480 <__tcf_0+0xc>)
 801447a:	f000 f9e5 	bl	8014848 <_ZN12FrontendHeapD1Ev>
 801447e:	bd80      	pop	{r7, pc}
 8014480:	200052e8 	.word	0x200052e8

08014484 <_ZN12FrontendHeap11getInstanceEv>:
    static FrontendHeap& getInstance()
 8014484:	b580      	push	{r7, lr}
 8014486:	af00      	add	r7, sp, #0
        static FrontendHeap instance;
 8014488:	4b12      	ldr	r3, [pc, #72]	; (80144d4 <_ZN12FrontendHeap11getInstanceEv+0x50>)
 801448a:	781b      	ldrb	r3, [r3, #0]
 801448c:	f3bf 8f5b 	dmb	ish
 8014490:	b2db      	uxtb	r3, r3
 8014492:	f003 0301 	and.w	r3, r3, #1
 8014496:	2b00      	cmp	r3, #0
 8014498:	bf0c      	ite	eq
 801449a:	2301      	moveq	r3, #1
 801449c:	2300      	movne	r3, #0
 801449e:	b2db      	uxtb	r3, r3
 80144a0:	2b00      	cmp	r3, #0
 80144a2:	d013      	beq.n	80144cc <_ZN12FrontendHeap11getInstanceEv+0x48>
 80144a4:	480b      	ldr	r0, [pc, #44]	; (80144d4 <_ZN12FrontendHeap11getInstanceEv+0x50>)
 80144a6:	f012 fe12 	bl	80270ce <__cxa_guard_acquire>
 80144aa:	4603      	mov	r3, r0
 80144ac:	2b00      	cmp	r3, #0
 80144ae:	bf14      	ite	ne
 80144b0:	2301      	movne	r3, #1
 80144b2:	2300      	moveq	r3, #0
 80144b4:	b2db      	uxtb	r3, r3
 80144b6:	2b00      	cmp	r3, #0
 80144b8:	d008      	beq.n	80144cc <_ZN12FrontendHeap11getInstanceEv+0x48>
 80144ba:	4807      	ldr	r0, [pc, #28]	; (80144d8 <_ZN12FrontendHeap11getInstanceEv+0x54>)
 80144bc:	f000 f868 	bl	8014590 <_ZN12FrontendHeapC1Ev>
 80144c0:	4806      	ldr	r0, [pc, #24]	; (80144dc <_ZN12FrontendHeap11getInstanceEv+0x58>)
 80144c2:	f012 fe4f 	bl	8027164 <atexit>
 80144c6:	4803      	ldr	r0, [pc, #12]	; (80144d4 <_ZN12FrontendHeap11getInstanceEv+0x50>)
 80144c8:	f012 fe0d 	bl	80270e6 <__cxa_guard_release>
        return instance;
 80144cc:	4b02      	ldr	r3, [pc, #8]	; (80144d8 <_ZN12FrontendHeap11getInstanceEv+0x54>)
    }
 80144ce:	4618      	mov	r0, r3
 80144d0:	bd80      	pop	{r7, pc}
 80144d2:	bf00      	nop
 80144d4:	200056bc 	.word	0x200056bc
 80144d8:	200052e8 	.word	0x200052e8
 80144dc:	08014475 	.word	0x08014475

080144e0 <_ZN16FrontendHeapBaseD1Ev>:
class FrontendHeapBase : public touchgfx::MVPHeap
 80144e0:	b580      	push	{r7, lr}
 80144e2:	b082      	sub	sp, #8
 80144e4:	af00      	add	r7, sp, #0
 80144e6:	6078      	str	r0, [r7, #4]
 80144e8:	4a05      	ldr	r2, [pc, #20]	; (8014500 <_ZN16FrontendHeapBaseD1Ev+0x20>)
 80144ea:	687b      	ldr	r3, [r7, #4]
 80144ec:	601a      	str	r2, [r3, #0]
 80144ee:	687b      	ldr	r3, [r7, #4]
 80144f0:	4618      	mov	r0, r3
 80144f2:	f7ff fe61 	bl	80141b8 <_ZN8touchgfx7MVPHeapD1Ev>
 80144f6:	687b      	ldr	r3, [r7, #4]
 80144f8:	4618      	mov	r0, r3
 80144fa:	3708      	adds	r7, #8
 80144fc:	46bd      	mov	sp, r7
 80144fe:	bd80      	pop	{r7, pc}
 8014500:	080296e0 	.word	0x080296e0

08014504 <_ZN16FrontendHeapBaseD0Ev>:
 8014504:	b580      	push	{r7, lr}
 8014506:	b082      	sub	sp, #8
 8014508:	af00      	add	r7, sp, #0
 801450a:	6078      	str	r0, [r7, #4]
 801450c:	6878      	ldr	r0, [r7, #4]
 801450e:	f7ff ffe7 	bl	80144e0 <_ZN16FrontendHeapBaseD1Ev>
 8014512:	2114      	movs	r1, #20
 8014514:	6878      	ldr	r0, [r7, #4]
 8014516:	f012 fdd8 	bl	80270ca <_ZdlPvj>
 801451a:	687b      	ldr	r3, [r7, #4]
 801451c:	4618      	mov	r0, r3
 801451e:	3708      	adds	r7, #8
 8014520:	46bd      	mov	sp, r7
 8014522:	bd80      	pop	{r7, pc}

08014524 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev>:
 * @tparam NUMBER_OF_ELEMENTS Type of the number of elements.
 *
 * @see AbstractPartition
 */
template <typename ListOfTypes, uint16_t NUMBER_OF_ELEMENTS>
class Partition : public AbstractPartition
 8014524:	b580      	push	{r7, lr}
 8014526:	b082      	sub	sp, #8
 8014528:	af00      	add	r7, sp, #0
 801452a:	6078      	str	r0, [r7, #4]
 801452c:	687b      	ldr	r3, [r7, #4]
 801452e:	4618      	mov	r0, r3
 8014530:	f000 fec6 	bl	80152c0 <_ZN8touchgfx17AbstractPartitionC1Ev>
 8014534:	4a03      	ldr	r2, [pc, #12]	; (8014544 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 8014536:	687b      	ldr	r3, [r7, #4]
 8014538:	601a      	str	r2, [r3, #0]
 801453a:	687b      	ldr	r3, [r7, #4]
 801453c:	4618      	mov	r0, r3
 801453e:	3708      	adds	r7, #8
 8014540:	46bd      	mov	sp, r7
 8014542:	bd80      	pop	{r7, pc}
 8014544:	080296ac 	.word	0x080296ac

08014548 <_ZN8touchgfx9PartitionINS_4meta8TypeListI10screenViewNS2_INS1_3NilES4_EEEELt1EEC1Ev>:
 8014548:	b580      	push	{r7, lr}
 801454a:	b082      	sub	sp, #8
 801454c:	af00      	add	r7, sp, #0
 801454e:	6078      	str	r0, [r7, #4]
 8014550:	687b      	ldr	r3, [r7, #4]
 8014552:	4618      	mov	r0, r3
 8014554:	f000 feb4 	bl	80152c0 <_ZN8touchgfx17AbstractPartitionC1Ev>
 8014558:	4a03      	ldr	r2, [pc, #12]	; (8014568 <_ZN8touchgfx9PartitionINS_4meta8TypeListI10screenViewNS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 801455a:	687b      	ldr	r3, [r7, #4]
 801455c:	601a      	str	r2, [r3, #0]
 801455e:	687b      	ldr	r3, [r7, #4]
 8014560:	4618      	mov	r0, r3
 8014562:	3708      	adds	r7, #8
 8014564:	46bd      	mov	sp, r7
 8014566:	bd80      	pop	{r7, pc}
 8014568:	08029678 	.word	0x08029678

0801456c <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EEC1Ev>:
 801456c:	b580      	push	{r7, lr}
 801456e:	b082      	sub	sp, #8
 8014570:	af00      	add	r7, sp, #0
 8014572:	6078      	str	r0, [r7, #4]
 8014574:	687b      	ldr	r3, [r7, #4]
 8014576:	4618      	mov	r0, r3
 8014578:	f000 fea2 	bl	80152c0 <_ZN8touchgfx17AbstractPartitionC1Ev>
 801457c:	4a03      	ldr	r2, [pc, #12]	; (801458c <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EEC1Ev+0x20>)
 801457e:	687b      	ldr	r3, [r7, #4]
 8014580:	601a      	str	r2, [r3, #0]
 8014582:	687b      	ldr	r3, [r7, #4]
 8014584:	4618      	mov	r0, r3
 8014586:	3708      	adds	r7, #8
 8014588:	46bd      	mov	sp, r7
 801458a:	bd80      	pop	{r7, pc}
 801458c:	08029644 	.word	0x08029644

08014590 <_ZN12FrontendHeapC1Ev>:
    touchgfx::Partition< CombinedTransitionTypes, 1 > transitions;
    Model model;
    FrontendApplication app;

private:
    FrontendHeap() : FrontendHeapBase(presenters, views, transitions, app),
 8014590:	b590      	push	{r4, r7, lr}
 8014592:	b085      	sub	sp, #20
 8014594:	af02      	add	r7, sp, #8
 8014596:	6078      	str	r0, [r7, #4]
                     app(model, *this)
 8014598:	6878      	ldr	r0, [r7, #4]
 801459a:	687b      	ldr	r3, [r7, #4]
 801459c:	f103 0114 	add.w	r1, r3, #20
 80145a0:	687b      	ldr	r3, [r7, #4]
 80145a2:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 80145a6:	687b      	ldr	r3, [r7, #4]
 80145a8:	f503 7407 	add.w	r4, r3, #540	; 0x21c
    FrontendHeap() : FrontendHeapBase(presenters, views, transitions, app),
 80145ac:	687b      	ldr	r3, [r7, #4]
 80145ae:	f503 731f 	add.w	r3, r3, #636	; 0x27c
                     app(model, *this)
 80145b2:	9300      	str	r3, [sp, #0]
 80145b4:	4623      	mov	r3, r4
 80145b6:	f7ff ff43 	bl	8014440 <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication>
 80145ba:	4a18      	ldr	r2, [pc, #96]	; (801461c <_ZN12FrontendHeapC1Ev+0x8c>)
 80145bc:	687b      	ldr	r3, [r7, #4]
 80145be:	601a      	str	r2, [r3, #0]
 80145c0:	687b      	ldr	r3, [r7, #4]
 80145c2:	3314      	adds	r3, #20
 80145c4:	4618      	mov	r0, r3
 80145c6:	f7ff ffad 	bl	8014524 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev>
 80145ca:	687b      	ldr	r3, [r7, #4]
 80145cc:	332c      	adds	r3, #44	; 0x2c
 80145ce:	4618      	mov	r0, r3
 80145d0:	f7ff ffba 	bl	8014548 <_ZN8touchgfx9PartitionINS_4meta8TypeListI10screenViewNS2_INS1_3NilES4_EEEELt1EEC1Ev>
 80145d4:	687b      	ldr	r3, [r7, #4]
 80145d6:	f503 7307 	add.w	r3, r3, #540	; 0x21c
 80145da:	4618      	mov	r0, r3
 80145dc:	f7ff ffc6 	bl	801456c <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EEC1Ev>
 80145e0:	687b      	ldr	r3, [r7, #4]
 80145e2:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80145e6:	4618      	mov	r0, r3
 80145e8:	f7fe ffce 	bl	8013588 <_ZN5ModelC1Ev>
 80145ec:	687b      	ldr	r3, [r7, #4]
 80145ee:	f503 701f 	add.w	r0, r3, #636	; 0x27c
 80145f2:	687b      	ldr	r3, [r7, #4]
 80145f4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80145f8:	687a      	ldr	r2, [r7, #4]
 80145fa:	4619      	mov	r1, r3
 80145fc:	f7fe ffae 	bl	801355c <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>
    {
        gotoStartScreen(app);
 8014600:	687a      	ldr	r2, [r7, #4]
 8014602:	687b      	ldr	r3, [r7, #4]
 8014604:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8014608:	4619      	mov	r1, r3
 801460a:	4610      	mov	r0, r2
 801460c:	f7ff ff0a 	bl	8014424 <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>
    }
 8014610:	687b      	ldr	r3, [r7, #4]
 8014612:	4618      	mov	r0, r3
 8014614:	370c      	adds	r7, #12
 8014616:	46bd      	mov	sp, r7
 8014618:	bd90      	pop	{r4, r7, pc}
 801461a:	bf00      	nop
 801461c:	08029630 	.word	0x08029630

08014620 <_ZN8touchgfx5NoDMAC1Ev>:
 * @see DMA_Interface
 */
class NoDMA : public DMA_Interface
{
public:
    NoDMA()
 8014620:	b580      	push	{r7, lr}
 8014622:	b082      	sub	sp, #8
 8014624:	af00      	add	r7, sp, #0
 8014626:	6078      	str	r0, [r7, #4]
        : DMA_Interface(q), q(&b, 1)
 8014628:	687a      	ldr	r2, [r7, #4]
 801462a:	687b      	ldr	r3, [r7, #4]
 801462c:	330c      	adds	r3, #12
 801462e:	4619      	mov	r1, r3
 8014630:	4610      	mov	r0, r2
 8014632:	f7ff fd09 	bl	8014048 <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE>
 8014636:	4a0b      	ldr	r2, [pc, #44]	; (8014664 <_ZN8touchgfx5NoDMAC1Ev+0x44>)
 8014638:	687b      	ldr	r3, [r7, #4]
 801463a:	601a      	str	r2, [r3, #0]
 801463c:	687b      	ldr	r3, [r7, #4]
 801463e:	f103 000c 	add.w	r0, r3, #12
 8014642:	687b      	ldr	r3, [r7, #4]
 8014644:	3320      	adds	r3, #32
 8014646:	2201      	movs	r2, #1
 8014648:	4619      	mov	r1, r3
 801464a:	f002 f9f9 	bl	8016a40 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>
 801464e:	687b      	ldr	r3, [r7, #4]
 8014650:	3320      	adds	r3, #32
 8014652:	4618      	mov	r0, r3
 8014654:	f7ff fd50 	bl	80140f8 <_ZN8touchgfx6BlitOpC1Ev>
    {
    }
 8014658:	687b      	ldr	r3, [r7, #4]
 801465a:	4618      	mov	r0, r3
 801465c:	3708      	adds	r7, #8
 801465e:	46bd      	mov	sp, r7
 8014660:	bd80      	pop	{r7, pc}
 8014662:	bf00      	nop
 8014664:	080295e0 	.word	0x080295e0

08014668 <_ZN8touchgfx5NoDMA11getBlitCapsEv>:
    /**
     * No blit operations supported by this DMA implementation.
     *
     * @return Zero (no blit ops supported).
     */
    virtual BlitOperations getBlitCaps()
 8014668:	b480      	push	{r7}
 801466a:	b083      	sub	sp, #12
 801466c:	af00      	add	r7, sp, #0
 801466e:	6078      	str	r0, [r7, #4]
    {
        return static_cast<BlitOperations>(0);
 8014670:	2300      	movs	r3, #0
    }
 8014672:	4618      	mov	r0, r3
 8014674:	370c      	adds	r7, #12
 8014676:	46bd      	mov	sp, r7
 8014678:	f85d 7b04 	ldr.w	r7, [sp], #4
 801467c:	4770      	bx	lr
	...

08014680 <_ZN8touchgfx5NoDMA13setupDataCopyERKNS_6BlitOpE>:
    /**
     * Asserts if used.
     *
     * @param  blitOp The blit operation to be performed by this DMA instance.
     */
    virtual void setupDataCopy(const BlitOp& blitOp)
 8014680:	b580      	push	{r7, lr}
 8014682:	b082      	sub	sp, #8
 8014684:	af00      	add	r7, sp, #0
 8014686:	6078      	str	r0, [r7, #4]
 8014688:	6039      	str	r1, [r7, #0]
    {
        assert(0 && "DMA operation not supported");
 801468a:	4b03      	ldr	r3, [pc, #12]	; (8014698 <_ZN8touchgfx5NoDMA13setupDataCopyERKNS_6BlitOpE+0x18>)
 801468c:	4a03      	ldr	r2, [pc, #12]	; (801469c <_ZN8touchgfx5NoDMA13setupDataCopyERKNS_6BlitOpE+0x1c>)
 801468e:	213c      	movs	r1, #60	; 0x3c
 8014690:	4803      	ldr	r0, [pc, #12]	; (80146a0 <_ZN8touchgfx5NoDMA13setupDataCopyERKNS_6BlitOpE+0x20>)
 8014692:	f012 fd49 	bl	8027128 <__assert_func>
 8014696:	bf00      	nop
 8014698:	08028d44 	.word	0x08028d44
 801469c:	08028d68 	.word	0x08028d68
 80146a0:	08028db0 	.word	0x08028db0

080146a4 <_ZN8touchgfx5NoDMA13setupDataFillERKNS_6BlitOpE>:
    /**
     * Asserts if used.
     *
     * @param  blitOp The blit operation to be performed by this DMA instance.
     */
    virtual void setupDataFill(const BlitOp& blitOp)
 80146a4:	b580      	push	{r7, lr}
 80146a6:	b082      	sub	sp, #8
 80146a8:	af00      	add	r7, sp, #0
 80146aa:	6078      	str	r0, [r7, #4]
 80146ac:	6039      	str	r1, [r7, #0]
    {
        assert(0 && "DMA operation not supported");
 80146ae:	4b03      	ldr	r3, [pc, #12]	; (80146bc <_ZN8touchgfx5NoDMA13setupDataFillERKNS_6BlitOpE+0x18>)
 80146b0:	4a03      	ldr	r2, [pc, #12]	; (80146c0 <_ZN8touchgfx5NoDMA13setupDataFillERKNS_6BlitOpE+0x1c>)
 80146b2:	2146      	movs	r1, #70	; 0x46
 80146b4:	4803      	ldr	r0, [pc, #12]	; (80146c4 <_ZN8touchgfx5NoDMA13setupDataFillERKNS_6BlitOpE+0x20>)
 80146b6:	f012 fd37 	bl	8027128 <__assert_func>
 80146ba:	bf00      	nop
 80146bc:	08028d44 	.word	0x08028d44
 80146c0:	08028df4 	.word	0x08028df4
 80146c4:	08028db0 	.word	0x08028db0

080146c8 <_ZN8touchgfx5NoDMA18signalDMAInterruptEv>:
    }

    /** Does nothing. */
    virtual void signalDMAInterrupt()
 80146c8:	b480      	push	{r7}
 80146ca:	b083      	sub	sp, #12
 80146cc:	af00      	add	r7, sp, #0
 80146ce:	6078      	str	r0, [r7, #4]
    {
    }
 80146d0:	bf00      	nop
 80146d2:	370c      	adds	r7, #12
 80146d4:	46bd      	mov	sp, r7
 80146d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80146da:	4770      	bx	lr

080146dc <_ZN8touchgfx5NoDMA5flushEv>:

    /**
     * Block until all DMA transfers are complete. Since this particular DMA does not do
     * anything, return immediately.
     */
    virtual void flush()
 80146dc:	b480      	push	{r7}
 80146de:	b083      	sub	sp, #12
 80146e0:	af00      	add	r7, sp, #0
 80146e2:	6078      	str	r0, [r7, #4]
    {
    }
 80146e4:	bf00      	nop
 80146e6:	370c      	adds	r7, #12
 80146e8:	46bd      	mov	sp, r7
 80146ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80146ee:	4770      	bx	lr

080146f0 <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>:
    TouchGFXGeneratedHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height) :
 80146f0:	b580      	push	{r7, lr}
 80146f2:	b086      	sub	sp, #24
 80146f4:	af02      	add	r7, sp, #8
 80146f6:	60f8      	str	r0, [r7, #12]
 80146f8:	60b9      	str	r1, [r7, #8]
 80146fa:	607a      	str	r2, [r7, #4]
 80146fc:	603b      	str	r3, [r7, #0]
        touchgfx::HAL(dma, display, tc, width, height)
 80146fe:	68f8      	ldr	r0, [r7, #12]
 8014700:	8bbb      	ldrh	r3, [r7, #28]
 8014702:	9301      	str	r3, [sp, #4]
 8014704:	8b3b      	ldrh	r3, [r7, #24]
 8014706:	9300      	str	r3, [sp, #0]
 8014708:	683b      	ldr	r3, [r7, #0]
 801470a:	687a      	ldr	r2, [r7, #4]
 801470c:	68b9      	ldr	r1, [r7, #8]
 801470e:	f7ff fddf 	bl	80142d0 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt>
 8014712:	4a04      	ldr	r2, [pc, #16]	; (8014724 <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x34>)
 8014714:	68fb      	ldr	r3, [r7, #12]
 8014716:	601a      	str	r2, [r3, #0]
    }
 8014718:	68fb      	ldr	r3, [r7, #12]
 801471a:	4618      	mov	r0, r3
 801471c:	3710      	adds	r7, #16
 801471e:	46bd      	mov	sp, r7
 8014720:	bd80      	pop	{r7, pc}
 8014722:	bf00      	nop
 8014724:	08029704 	.word	0x08029704

08014728 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>:
    TouchGFXHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height) : TouchGFXGeneratedHAL(dma, display, tc, width, height)
 8014728:	b580      	push	{r7, lr}
 801472a:	b086      	sub	sp, #24
 801472c:	af02      	add	r7, sp, #8
 801472e:	60f8      	str	r0, [r7, #12]
 8014730:	60b9      	str	r1, [r7, #8]
 8014732:	607a      	str	r2, [r7, #4]
 8014734:	603b      	str	r3, [r7, #0]
 8014736:	68f8      	ldr	r0, [r7, #12]
 8014738:	8bbb      	ldrh	r3, [r7, #28]
 801473a:	9301      	str	r3, [sp, #4]
 801473c:	8b3b      	ldrh	r3, [r7, #24]
 801473e:	9300      	str	r3, [sp, #0]
 8014740:	683b      	ldr	r3, [r7, #0]
 8014742:	687a      	ldr	r2, [r7, #4]
 8014744:	68b9      	ldr	r1, [r7, #8]
 8014746:	f7ff ffd3 	bl	80146f0 <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>
 801474a:	4a04      	ldr	r2, [pc, #16]	; (801475c <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x34>)
 801474c:	68fb      	ldr	r3, [r7, #12]
 801474e:	601a      	str	r2, [r3, #0]
    }
 8014750:	68fb      	ldr	r3, [r7, #12]
 8014752:	4618      	mov	r0, r3
 8014754:	3710      	adds	r7, #16
 8014756:	46bd      	mov	sp, r7
 8014758:	bd80      	pop	{r7, pc}
 801475a:	bf00      	nop
 801475c:	08029500 	.word	0x08029500

08014760 <_ZN8touchgfx15TouchControllerC1Ev>:
class TouchController
 8014760:	b480      	push	{r7}
 8014762:	b083      	sub	sp, #12
 8014764:	af00      	add	r7, sp, #0
 8014766:	6078      	str	r0, [r7, #4]
 8014768:	4a04      	ldr	r2, [pc, #16]	; (801477c <_ZN8touchgfx15TouchControllerC1Ev+0x1c>)
 801476a:	687b      	ldr	r3, [r7, #4]
 801476c:	601a      	str	r2, [r3, #0]
 801476e:	687b      	ldr	r3, [r7, #4]
 8014770:	4618      	mov	r0, r3
 8014772:	370c      	adds	r7, #12
 8014774:	46bd      	mov	sp, r7
 8014776:	f85d 7b04 	ldr.w	r7, [sp], #4
 801477a:	4770      	bx	lr
 801477c:	080294e8 	.word	0x080294e8

08014780 <_ZN20STM32TouchControllerC1Ev>:
{
public:

    STM32TouchController() {}
 8014780:	b580      	push	{r7, lr}
 8014782:	b082      	sub	sp, #8
 8014784:	af00      	add	r7, sp, #0
 8014786:	6078      	str	r0, [r7, #4]
 8014788:	687b      	ldr	r3, [r7, #4]
 801478a:	4618      	mov	r0, r3
 801478c:	f7ff ffe8 	bl	8014760 <_ZN8touchgfx15TouchControllerC1Ev>
 8014790:	4a03      	ldr	r2, [pc, #12]	; (80147a0 <_ZN20STM32TouchControllerC1Ev+0x20>)
 8014792:	687b      	ldr	r3, [r7, #4]
 8014794:	601a      	str	r2, [r3, #0]
 8014796:	687b      	ldr	r3, [r7, #4]
 8014798:	4618      	mov	r0, r3
 801479a:	3708      	adds	r7, #8
 801479c:	46bd      	mov	sp, r7
 801479e:	bd80      	pop	{r7, pc}
 80147a0:	080294d0 	.word	0x080294d0

080147a4 <touchgfx_init>:
static ApplicationFontProvider fontProvider;
static Texts texts;
static TouchGFXHAL hal(dma, display, tc, 480, 272);

void touchgfx_init()
{
 80147a4:	b590      	push	{r4, r7, lr}
 80147a6:	b085      	sub	sp, #20
 80147a8:	af02      	add	r7, sp, #8
  Bitmap::registerBitmapDatabase(BitmapDatabase::getInstance(), BitmapDatabase::getInstanceSize());
 80147aa:	f7fe fcb1 	bl	8013110 <_ZN14BitmapDatabase11getInstanceEv>
 80147ae:	4604      	mov	r4, r0
 80147b0:	f7fe fcb8 	bl	8013124 <_ZN14BitmapDatabase15getInstanceSizeEv>
 80147b4:	4603      	mov	r3, r0
 80147b6:	4619      	mov	r1, r3
 80147b8:	2300      	movs	r3, #0
 80147ba:	9300      	str	r3, [sp, #0]
 80147bc:	2300      	movs	r3, #0
 80147be:	2200      	movs	r2, #0
 80147c0:	4620      	mov	r0, r4
 80147c2:	f006 fe73 	bl	801b4ac <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>
  TypedText::registerTexts(&texts);
 80147c6:	4809      	ldr	r0, [pc, #36]	; (80147ec <touchgfx_init+0x48>)
 80147c8:	f7ff fcc6 	bl	8014158 <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE>
  Texts::setLanguage(0);
 80147cc:	2000      	movs	r0, #0
 80147ce:	f7fe fde3 	bl	8013398 <_ZN8touchgfx5Texts11setLanguageEt>

  FontManager::setFontProvider(&fontProvider);
 80147d2:	4807      	ldr	r0, [pc, #28]	; (80147f0 <touchgfx_init+0x4c>)
 80147d4:	f006 fdac 	bl	801b330 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>

  FrontendHeap& heap = FrontendHeap::getInstance();
 80147d8:	f7ff fe54 	bl	8014484 <_ZN12FrontendHeap11getInstanceEv>
 80147dc:	6078      	str	r0, [r7, #4]
  (void)heap;

  /*
   * Initialize TouchGFX
   */
  hal.initialize();
 80147de:	4805      	ldr	r0, [pc, #20]	; (80147f4 <touchgfx_init+0x50>)
 80147e0:	f7ff faa0 	bl	8013d24 <_ZN11TouchGFXHAL10initializeEv>
}
 80147e4:	bf00      	nop
 80147e6:	370c      	adds	r7, #12
 80147e8:	46bd      	mov	sp, r7
 80147ea:	bd90      	pop	{r4, r7, pc}
 80147ec:	2000577c 	.word	0x2000577c
 80147f0:	20000170 	.word	0x20000170
 80147f4:	20005780 	.word	0x20005780

080147f8 <_ZN8touchgfx5NoDMAD1Ev>:
class NoDMA : public DMA_Interface
 80147f8:	b580      	push	{r7, lr}
 80147fa:	b082      	sub	sp, #8
 80147fc:	af00      	add	r7, sp, #0
 80147fe:	6078      	str	r0, [r7, #4]
 8014800:	4a08      	ldr	r2, [pc, #32]	; (8014824 <_ZN8touchgfx5NoDMAD1Ev+0x2c>)
 8014802:	687b      	ldr	r3, [r7, #4]
 8014804:	601a      	str	r2, [r3, #0]
 8014806:	687b      	ldr	r3, [r7, #4]
 8014808:	330c      	adds	r3, #12
 801480a:	4618      	mov	r0, r3
 801480c:	f7ff fc82 	bl	8014114 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>
 8014810:	687b      	ldr	r3, [r7, #4]
 8014812:	4618      	mov	r0, r3
 8014814:	f7ff fbf8 	bl	8014008 <_ZN8touchgfx13DMA_InterfaceD1Ev>
 8014818:	687b      	ldr	r3, [r7, #4]
 801481a:	4618      	mov	r0, r3
 801481c:	3708      	adds	r7, #8
 801481e:	46bd      	mov	sp, r7
 8014820:	bd80      	pop	{r7, pc}
 8014822:	bf00      	nop
 8014824:	080295e0 	.word	0x080295e0

08014828 <_ZN8touchgfx5NoDMAD0Ev>:
 8014828:	b580      	push	{r7, lr}
 801482a:	b082      	sub	sp, #8
 801482c:	af00      	add	r7, sp, #0
 801482e:	6078      	str	r0, [r7, #4]
 8014830:	6878      	ldr	r0, [r7, #4]
 8014832:	f7ff ffe1 	bl	80147f8 <_ZN8touchgfx5NoDMAD1Ev>
 8014836:	2140      	movs	r1, #64	; 0x40
 8014838:	6878      	ldr	r0, [r7, #4]
 801483a:	f012 fc46 	bl	80270ca <_ZdlPvj>
 801483e:	687b      	ldr	r3, [r7, #4]
 8014840:	4618      	mov	r0, r3
 8014842:	3708      	adds	r7, #8
 8014844:	46bd      	mov	sp, r7
 8014846:	bd80      	pop	{r7, pc}

08014848 <_ZN12FrontendHeapD1Ev>:
class FrontendHeap : public FrontendHeapBase
 8014848:	b580      	push	{r7, lr}
 801484a:	b082      	sub	sp, #8
 801484c:	af00      	add	r7, sp, #0
 801484e:	6078      	str	r0, [r7, #4]
 8014850:	4a10      	ldr	r2, [pc, #64]	; (8014894 <_ZN12FrontendHeapD1Ev+0x4c>)
 8014852:	687b      	ldr	r3, [r7, #4]
 8014854:	601a      	str	r2, [r3, #0]
 8014856:	687b      	ldr	r3, [r7, #4]
 8014858:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 801485c:	4618      	mov	r0, r3
 801485e:	f7fe fe47 	bl	80134f0 <_ZN19FrontendApplicationD1Ev>
 8014862:	687b      	ldr	r3, [r7, #4]
 8014864:	f503 7307 	add.w	r3, r3, #540	; 0x21c
 8014868:	4618      	mov	r0, r3
 801486a:	f000 f827 	bl	80148bc <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EED1Ev>
 801486e:	687b      	ldr	r3, [r7, #4]
 8014870:	332c      	adds	r3, #44	; 0x2c
 8014872:	4618      	mov	r0, r3
 8014874:	f000 f844 	bl	8014900 <_ZN8touchgfx9PartitionINS_4meta8TypeListI10screenViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8014878:	687b      	ldr	r3, [r7, #4]
 801487a:	3314      	adds	r3, #20
 801487c:	4618      	mov	r0, r3
 801487e:	f000 f863 	bl	8014948 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8014882:	687b      	ldr	r3, [r7, #4]
 8014884:	4618      	mov	r0, r3
 8014886:	f7ff fe2b 	bl	80144e0 <_ZN16FrontendHeapBaseD1Ev>
 801488a:	687b      	ldr	r3, [r7, #4]
 801488c:	4618      	mov	r0, r3
 801488e:	3708      	adds	r7, #8
 8014890:	46bd      	mov	sp, r7
 8014892:	bd80      	pop	{r7, pc}
 8014894:	08029630 	.word	0x08029630

08014898 <_ZN12FrontendHeapD0Ev>:
 8014898:	b580      	push	{r7, lr}
 801489a:	b082      	sub	sp, #8
 801489c:	af00      	add	r7, sp, #0
 801489e:	6078      	str	r0, [r7, #4]
 80148a0:	6878      	ldr	r0, [r7, #4]
 80148a2:	f7ff ffd1 	bl	8014848 <_ZN12FrontendHeapD1Ev>
 80148a6:	f44f 7175 	mov.w	r1, #980	; 0x3d4
 80148aa:	6878      	ldr	r0, [r7, #4]
 80148ac:	f012 fc0d 	bl	80270ca <_ZdlPvj>
 80148b0:	687b      	ldr	r3, [r7, #4]
 80148b2:	4618      	mov	r0, r3
 80148b4:	3708      	adds	r7, #8
 80148b6:	46bd      	mov	sp, r7
 80148b8:	bd80      	pop	{r7, pc}
	...

080148bc <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EED1Ev>:
 80148bc:	b580      	push	{r7, lr}
 80148be:	b082      	sub	sp, #8
 80148c0:	af00      	add	r7, sp, #0
 80148c2:	6078      	str	r0, [r7, #4]
 80148c4:	4a05      	ldr	r2, [pc, #20]	; (80148dc <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EED1Ev+0x20>)
 80148c6:	687b      	ldr	r3, [r7, #4]
 80148c8:	601a      	str	r2, [r3, #0]
 80148ca:	687b      	ldr	r3, [r7, #4]
 80148cc:	4618      	mov	r0, r3
 80148ce:	f000 fcf5 	bl	80152bc <_ZN8touchgfx17AbstractPartitionD1Ev>
 80148d2:	687b      	ldr	r3, [r7, #4]
 80148d4:	4618      	mov	r0, r3
 80148d6:	3708      	adds	r7, #8
 80148d8:	46bd      	mov	sp, r7
 80148da:	bd80      	pop	{r7, pc}
 80148dc:	08029644 	.word	0x08029644

080148e0 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EED0Ev>:
 80148e0:	b580      	push	{r7, lr}
 80148e2:	b082      	sub	sp, #8
 80148e4:	af00      	add	r7, sp, #0
 80148e6:	6078      	str	r0, [r7, #4]
 80148e8:	6878      	ldr	r0, [r7, #4]
 80148ea:	f7ff ffe7 	bl	80148bc <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EED1Ev>
 80148ee:	215c      	movs	r1, #92	; 0x5c
 80148f0:	6878      	ldr	r0, [r7, #4]
 80148f2:	f012 fbea 	bl	80270ca <_ZdlPvj>
 80148f6:	687b      	ldr	r3, [r7, #4]
 80148f8:	4618      	mov	r0, r3
 80148fa:	3708      	adds	r7, #8
 80148fc:	46bd      	mov	sp, r7
 80148fe:	bd80      	pop	{r7, pc}

08014900 <_ZN8touchgfx9PartitionINS_4meta8TypeListI10screenViewNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 8014900:	b580      	push	{r7, lr}
 8014902:	b082      	sub	sp, #8
 8014904:	af00      	add	r7, sp, #0
 8014906:	6078      	str	r0, [r7, #4]
 8014908:	4a05      	ldr	r2, [pc, #20]	; (8014920 <_ZN8touchgfx9PartitionINS_4meta8TypeListI10screenViewNS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 801490a:	687b      	ldr	r3, [r7, #4]
 801490c:	601a      	str	r2, [r3, #0]
 801490e:	687b      	ldr	r3, [r7, #4]
 8014910:	4618      	mov	r0, r3
 8014912:	f000 fcd3 	bl	80152bc <_ZN8touchgfx17AbstractPartitionD1Ev>
 8014916:	687b      	ldr	r3, [r7, #4]
 8014918:	4618      	mov	r0, r3
 801491a:	3708      	adds	r7, #8
 801491c:	46bd      	mov	sp, r7
 801491e:	bd80      	pop	{r7, pc}
 8014920:	08029678 	.word	0x08029678

08014924 <_ZN8touchgfx9PartitionINS_4meta8TypeListI10screenViewNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 8014924:	b580      	push	{r7, lr}
 8014926:	b082      	sub	sp, #8
 8014928:	af00      	add	r7, sp, #0
 801492a:	6078      	str	r0, [r7, #4]
 801492c:	6878      	ldr	r0, [r7, #4]
 801492e:	f7ff ffe7 	bl	8014900 <_ZN8touchgfx9PartitionINS_4meta8TypeListI10screenViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8014932:	f44f 71f8 	mov.w	r1, #496	; 0x1f0
 8014936:	6878      	ldr	r0, [r7, #4]
 8014938:	f012 fbc7 	bl	80270ca <_ZdlPvj>
 801493c:	687b      	ldr	r3, [r7, #4]
 801493e:	4618      	mov	r0, r3
 8014940:	3708      	adds	r7, #8
 8014942:	46bd      	mov	sp, r7
 8014944:	bd80      	pop	{r7, pc}
	...

08014948 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 8014948:	b580      	push	{r7, lr}
 801494a:	b082      	sub	sp, #8
 801494c:	af00      	add	r7, sp, #0
 801494e:	6078      	str	r0, [r7, #4]
 8014950:	4a05      	ldr	r2, [pc, #20]	; (8014968 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 8014952:	687b      	ldr	r3, [r7, #4]
 8014954:	601a      	str	r2, [r3, #0]
 8014956:	687b      	ldr	r3, [r7, #4]
 8014958:	4618      	mov	r0, r3
 801495a:	f000 fcaf 	bl	80152bc <_ZN8touchgfx17AbstractPartitionD1Ev>
 801495e:	687b      	ldr	r3, [r7, #4]
 8014960:	4618      	mov	r0, r3
 8014962:	3708      	adds	r7, #8
 8014964:	46bd      	mov	sp, r7
 8014966:	bd80      	pop	{r7, pc}
 8014968:	080296ac 	.word	0x080296ac

0801496c <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 801496c:	b580      	push	{r7, lr}
 801496e:	b082      	sub	sp, #8
 8014970:	af00      	add	r7, sp, #0
 8014972:	6078      	str	r0, [r7, #4]
 8014974:	6878      	ldr	r0, [r7, #4]
 8014976:	f7ff ffe7 	bl	8014948 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 801497a:	2118      	movs	r1, #24
 801497c:	6878      	ldr	r0, [r7, #4]
 801497e:	f012 fba4 	bl	80270ca <_ZdlPvj>
 8014982:	687b      	ldr	r3, [r7, #4]
 8014984:	4618      	mov	r0, r3
 8014986:	3708      	adds	r7, #8
 8014988:	46bd      	mov	sp, r7
 801498a:	bd80      	pop	{r7, pc}

0801498c <_ZN8touchgfx8LCD16bppD1Ev>:
 *
 * @see LCD
 *
 * @note All coordinates are expected to be in absolute coordinates!
 */
class LCD16bpp : public LCD
 801498c:	b580      	push	{r7, lr}
 801498e:	b082      	sub	sp, #8
 8014990:	af00      	add	r7, sp, #0
 8014992:	6078      	str	r0, [r7, #4]
 8014994:	4a05      	ldr	r2, [pc, #20]	; (80149ac <_ZN8touchgfx8LCD16bppD1Ev+0x20>)
 8014996:	687b      	ldr	r3, [r7, #4]
 8014998:	601a      	str	r2, [r3, #0]
 801499a:	687b      	ldr	r3, [r7, #4]
 801499c:	4618      	mov	r0, r3
 801499e:	f7ff fc2b 	bl	80141f8 <_ZN8touchgfx3LCDD1Ev>
 80149a2:	687b      	ldr	r3, [r7, #4]
 80149a4:	4618      	mov	r0, r3
 80149a6:	3708      	adds	r7, #8
 80149a8:	46bd      	mov	sp, r7
 80149aa:	bd80      	pop	{r7, pc}
 80149ac:	0802bc98 	.word	0x0802bc98

080149b0 <_ZN8touchgfx8LCD16bppD0Ev>:
 80149b0:	b580      	push	{r7, lr}
 80149b2:	b082      	sub	sp, #8
 80149b4:	af00      	add	r7, sp, #0
 80149b6:	6078      	str	r0, [r7, #4]
 80149b8:	6878      	ldr	r0, [r7, #4]
 80149ba:	f7ff ffe7 	bl	801498c <_ZN8touchgfx8LCD16bppD1Ev>
 80149be:	2178      	movs	r1, #120	; 0x78
 80149c0:	6878      	ldr	r0, [r7, #4]
 80149c2:	f012 fb82 	bl	80270ca <_ZdlPvj>
 80149c6:	687b      	ldr	r3, [r7, #4]
 80149c8:	4618      	mov	r0, r3
 80149ca:	3708      	adds	r7, #8
 80149cc:	46bd      	mov	sp, r7
 80149ce:	bd80      	pop	{r7, pc}

080149d0 <_Z41__static_initialization_and_destruction_0ii>:
  * this function from your GUI task.
  *
  * Note This function never returns
  */
  hal.taskEntry();
}
 80149d0:	b580      	push	{r7, lr}
 80149d2:	b084      	sub	sp, #16
 80149d4:	af02      	add	r7, sp, #8
 80149d6:	6078      	str	r0, [r7, #4]
 80149d8:	6039      	str	r1, [r7, #0]
 80149da:	687b      	ldr	r3, [r7, #4]
 80149dc:	2b01      	cmp	r3, #1
 80149de:	d119      	bne.n	8014a14 <_Z41__static_initialization_and_destruction_0ii+0x44>
 80149e0:	683b      	ldr	r3, [r7, #0]
 80149e2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80149e6:	4293      	cmp	r3, r2
 80149e8:	d114      	bne.n	8014a14 <_Z41__static_initialization_and_destruction_0ii+0x44>
static STM32TouchController tc;
 80149ea:	4818      	ldr	r0, [pc, #96]	; (8014a4c <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 80149ec:	f7ff fec8 	bl	8014780 <_ZN20STM32TouchControllerC1Ev>
static NoDMA dma;
 80149f0:	4817      	ldr	r0, [pc, #92]	; (8014a50 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 80149f2:	f7ff fe15 	bl	8014620 <_ZN8touchgfx5NoDMAC1Ev>
static LCD16bpp display;
 80149f6:	4817      	ldr	r0, [pc, #92]	; (8014a54 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 80149f8:	f009 fddc 	bl	801e5b4 <_ZN8touchgfx8LCD16bppC1Ev>
static TouchGFXHAL hal(dma, display, tc, 480, 272);
 80149fc:	f44f 7388 	mov.w	r3, #272	; 0x110
 8014a00:	9301      	str	r3, [sp, #4]
 8014a02:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8014a06:	9300      	str	r3, [sp, #0]
 8014a08:	4b10      	ldr	r3, [pc, #64]	; (8014a4c <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 8014a0a:	4a12      	ldr	r2, [pc, #72]	; (8014a54 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 8014a0c:	4910      	ldr	r1, [pc, #64]	; (8014a50 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 8014a0e:	4812      	ldr	r0, [pc, #72]	; (8014a58 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 8014a10:	f7ff fe8a 	bl	8014728 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>
 8014a14:	687b      	ldr	r3, [r7, #4]
 8014a16:	2b00      	cmp	r3, #0
 8014a18:	d113      	bne.n	8014a42 <_Z41__static_initialization_and_destruction_0ii+0x72>
 8014a1a:	683b      	ldr	r3, [r7, #0]
 8014a1c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8014a20:	4293      	cmp	r3, r2
 8014a22:	d10e      	bne.n	8014a42 <_Z41__static_initialization_and_destruction_0ii+0x72>
 8014a24:	480c      	ldr	r0, [pc, #48]	; (8014a58 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 8014a26:	f7ff f9f5 	bl	8013e14 <_ZN11TouchGFXHALD1Ev>
static ApplicationFontProvider fontProvider;
 8014a2a:	480c      	ldr	r0, [pc, #48]	; (8014a5c <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 8014a2c:	f7fb ff58 	bl	80108e0 <_ZN23ApplicationFontProviderD1Ev>
static LCD16bpp display;
 8014a30:	4808      	ldr	r0, [pc, #32]	; (8014a54 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 8014a32:	f7ff ffab 	bl	801498c <_ZN8touchgfx8LCD16bppD1Ev>
static NoDMA dma;
 8014a36:	4806      	ldr	r0, [pc, #24]	; (8014a50 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 8014a38:	f7ff fede 	bl	80147f8 <_ZN8touchgfx5NoDMAD1Ev>
static STM32TouchController tc;
 8014a3c:	4803      	ldr	r0, [pc, #12]	; (8014a4c <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 8014a3e:	f7fe ffd5 	bl	80139ec <_ZN20STM32TouchControllerD1Ev>
}
 8014a42:	bf00      	nop
 8014a44:	3708      	adds	r7, #8
 8014a46:	46bd      	mov	sp, r7
 8014a48:	bd80      	pop	{r7, pc}
 8014a4a:	bf00      	nop
 8014a4c:	200056c0 	.word	0x200056c0
 8014a50:	200056c4 	.word	0x200056c4
 8014a54:	20005704 	.word	0x20005704
 8014a58:	20005780 	.word	0x20005780
 8014a5c:	20000170 	.word	0x20000170

08014a60 <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EE8capacityEv>:
    {
        INTS_PR_ELEMENT = (sizeof(typename meta::select_type_maxsize<SupportedTypesList>::type) + sizeof(int) - 1) / sizeof(int),
        SIZE_OF_ELEMENT = INTS_PR_ELEMENT * sizeof(int)
    };

    virtual uint16_t capacity() const
 8014a60:	b480      	push	{r7}
 8014a62:	b083      	sub	sp, #12
 8014a64:	af00      	add	r7, sp, #0
 8014a66:	6078      	str	r0, [r7, #4]
    {
        return NUMBER_OF_ELEMENTS;
 8014a68:	2301      	movs	r3, #1
    }
 8014a6a:	4618      	mov	r0, r3
 8014a6c:	370c      	adds	r7, #12
 8014a6e:	46bd      	mov	sp, r7
 8014a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a74:	4770      	bx	lr

08014a76 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EE12element_sizeEv>:

    virtual uint32_t element_size()
 8014a76:	b480      	push	{r7}
 8014a78:	b083      	sub	sp, #12
 8014a7a:	af00      	add	r7, sp, #0
 8014a7c:	6078      	str	r0, [r7, #4]
    {
        return sizeof(stBlocks[0]);
 8014a7e:	2354      	movs	r3, #84	; 0x54
    }
 8014a80:	4618      	mov	r0, r3
 8014a82:	370c      	adds	r7, #12
 8014a84:	46bd      	mov	sp, r7
 8014a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a8a:	4770      	bx	lr

08014a8c <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EE7elementEt>:

protected:
    virtual void* element(uint16_t index)
 8014a8c:	b480      	push	{r7}
 8014a8e:	b083      	sub	sp, #12
 8014a90:	af00      	add	r7, sp, #0
 8014a92:	6078      	str	r0, [r7, #4]
 8014a94:	460b      	mov	r3, r1
 8014a96:	807b      	strh	r3, [r7, #2]
    {
        return &stBlocks[index];
 8014a98:	887b      	ldrh	r3, [r7, #2]
 8014a9a:	2254      	movs	r2, #84	; 0x54
 8014a9c:	fb02 f303 	mul.w	r3, r2, r3
 8014aa0:	3308      	adds	r3, #8
 8014aa2:	687a      	ldr	r2, [r7, #4]
 8014aa4:	4413      	add	r3, r2
    }
 8014aa6:	4618      	mov	r0, r3
 8014aa8:	370c      	adds	r7, #12
 8014aaa:	46bd      	mov	sp, r7
 8014aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ab0:	4770      	bx	lr

08014ab2 <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EE7elementEt>:

    virtual const void* element(uint16_t index) const
 8014ab2:	b480      	push	{r7}
 8014ab4:	b083      	sub	sp, #12
 8014ab6:	af00      	add	r7, sp, #0
 8014ab8:	6078      	str	r0, [r7, #4]
 8014aba:	460b      	mov	r3, r1
 8014abc:	807b      	strh	r3, [r7, #2]
    {
        return &stBlocks[index];
 8014abe:	887b      	ldrh	r3, [r7, #2]
 8014ac0:	2254      	movs	r2, #84	; 0x54
 8014ac2:	fb02 f303 	mul.w	r3, r2, r3
 8014ac6:	3308      	adds	r3, #8
 8014ac8:	687a      	ldr	r2, [r7, #4]
 8014aca:	4413      	add	r3, r2
    }
 8014acc:	4618      	mov	r0, r3
 8014ace:	370c      	adds	r7, #12
 8014ad0:	46bd      	mov	sp, r7
 8014ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ad6:	4770      	bx	lr

08014ad8 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI10screenViewNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    virtual uint16_t capacity() const
 8014ad8:	b480      	push	{r7}
 8014ada:	b083      	sub	sp, #12
 8014adc:	af00      	add	r7, sp, #0
 8014ade:	6078      	str	r0, [r7, #4]
        return NUMBER_OF_ELEMENTS;
 8014ae0:	2301      	movs	r3, #1
    }
 8014ae2:	4618      	mov	r0, r3
 8014ae4:	370c      	adds	r7, #12
 8014ae6:	46bd      	mov	sp, r7
 8014ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014aec:	4770      	bx	lr

08014aee <_ZN8touchgfx9PartitionINS_4meta8TypeListI10screenViewNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    virtual uint32_t element_size()
 8014aee:	b480      	push	{r7}
 8014af0:	b083      	sub	sp, #12
 8014af2:	af00      	add	r7, sp, #0
 8014af4:	6078      	str	r0, [r7, #4]
        return sizeof(stBlocks[0]);
 8014af6:	f44f 73f4 	mov.w	r3, #488	; 0x1e8
    }
 8014afa:	4618      	mov	r0, r3
 8014afc:	370c      	adds	r7, #12
 8014afe:	46bd      	mov	sp, r7
 8014b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b04:	4770      	bx	lr

08014b06 <_ZN8touchgfx9PartitionINS_4meta8TypeListI10screenViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual void* element(uint16_t index)
 8014b06:	b480      	push	{r7}
 8014b08:	b083      	sub	sp, #12
 8014b0a:	af00      	add	r7, sp, #0
 8014b0c:	6078      	str	r0, [r7, #4]
 8014b0e:	460b      	mov	r3, r1
 8014b10:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 8014b12:	887b      	ldrh	r3, [r7, #2]
 8014b14:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 8014b18:	fb02 f303 	mul.w	r3, r2, r3
 8014b1c:	3308      	adds	r3, #8
 8014b1e:	687a      	ldr	r2, [r7, #4]
 8014b20:	4413      	add	r3, r2
    }
 8014b22:	4618      	mov	r0, r3
 8014b24:	370c      	adds	r7, #12
 8014b26:	46bd      	mov	sp, r7
 8014b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b2c:	4770      	bx	lr

08014b2e <_ZNK8touchgfx9PartitionINS_4meta8TypeListI10screenViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual const void* element(uint16_t index) const
 8014b2e:	b480      	push	{r7}
 8014b30:	b083      	sub	sp, #12
 8014b32:	af00      	add	r7, sp, #0
 8014b34:	6078      	str	r0, [r7, #4]
 8014b36:	460b      	mov	r3, r1
 8014b38:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 8014b3a:	887b      	ldrh	r3, [r7, #2]
 8014b3c:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 8014b40:	fb02 f303 	mul.w	r3, r2, r3
 8014b44:	3308      	adds	r3, #8
 8014b46:	687a      	ldr	r2, [r7, #4]
 8014b48:	4413      	add	r3, r2
    }
 8014b4a:	4618      	mov	r0, r3
 8014b4c:	370c      	adds	r7, #12
 8014b4e:	46bd      	mov	sp, r7
 8014b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b54:	4770      	bx	lr

08014b56 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    virtual uint16_t capacity() const
 8014b56:	b480      	push	{r7}
 8014b58:	b083      	sub	sp, #12
 8014b5a:	af00      	add	r7, sp, #0
 8014b5c:	6078      	str	r0, [r7, #4]
        return NUMBER_OF_ELEMENTS;
 8014b5e:	2301      	movs	r3, #1
    }
 8014b60:	4618      	mov	r0, r3
 8014b62:	370c      	adds	r7, #12
 8014b64:	46bd      	mov	sp, r7
 8014b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b6a:	4770      	bx	lr

08014b6c <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    virtual uint32_t element_size()
 8014b6c:	b480      	push	{r7}
 8014b6e:	b083      	sub	sp, #12
 8014b70:	af00      	add	r7, sp, #0
 8014b72:	6078      	str	r0, [r7, #4]
        return sizeof(stBlocks[0]);
 8014b74:	2310      	movs	r3, #16
    }
 8014b76:	4618      	mov	r0, r3
 8014b78:	370c      	adds	r7, #12
 8014b7a:	46bd      	mov	sp, r7
 8014b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b80:	4770      	bx	lr

08014b82 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual void* element(uint16_t index)
 8014b82:	b480      	push	{r7}
 8014b84:	b083      	sub	sp, #12
 8014b86:	af00      	add	r7, sp, #0
 8014b88:	6078      	str	r0, [r7, #4]
 8014b8a:	460b      	mov	r3, r1
 8014b8c:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 8014b8e:	887b      	ldrh	r3, [r7, #2]
 8014b90:	011b      	lsls	r3, r3, #4
 8014b92:	3308      	adds	r3, #8
 8014b94:	687a      	ldr	r2, [r7, #4]
 8014b96:	4413      	add	r3, r2
    }
 8014b98:	4618      	mov	r0, r3
 8014b9a:	370c      	adds	r7, #12
 8014b9c:	46bd      	mov	sp, r7
 8014b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ba2:	4770      	bx	lr

08014ba4 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual const void* element(uint16_t index) const
 8014ba4:	b480      	push	{r7}
 8014ba6:	b083      	sub	sp, #12
 8014ba8:	af00      	add	r7, sp, #0
 8014baa:	6078      	str	r0, [r7, #4]
 8014bac:	460b      	mov	r3, r1
 8014bae:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 8014bb0:	887b      	ldrh	r3, [r7, #2]
 8014bb2:	011b      	lsls	r3, r3, #4
 8014bb4:	3308      	adds	r3, #8
 8014bb6:	687a      	ldr	r2, [r7, #4]
 8014bb8:	4413      	add	r3, r2
    }
 8014bba:	4618      	mov	r0, r3
 8014bbc:	370c      	adds	r7, #12
 8014bbe:	46bd      	mov	sp, r7
 8014bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014bc4:	4770      	bx	lr

08014bc6 <_GLOBAL__sub_I_touchgfx_init>:
 8014bc6:	b580      	push	{r7, lr}
 8014bc8:	af00      	add	r7, sp, #0
 8014bca:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8014bce:	2001      	movs	r0, #1
 8014bd0:	f7ff fefe 	bl	80149d0 <_Z41__static_initialization_and_destruction_0ii>
 8014bd4:	bd80      	pop	{r7, pc}

08014bd6 <_GLOBAL__sub_D_touchgfx_init>:
 8014bd6:	b580      	push	{r7, lr}
 8014bd8:	af00      	add	r7, sp, #0
 8014bda:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8014bde:	2000      	movs	r0, #0
 8014be0:	f7ff fef6 	bl	80149d0 <_Z41__static_initialization_and_destruction_0ii>
 8014be4:	bd80      	pop	{r7, pc}

08014be6 <_ZN8touchgfx3HAL17frontPorchEnteredEv>:
    void frontPorchEntered()
 8014be6:	b580      	push	{r7, lr}
 8014be8:	b082      	sub	sp, #8
 8014bea:	af00      	add	r7, sp, #0
 8014bec:	6078      	str	r0, [r7, #4]
        allowDMATransfers();
 8014bee:	687b      	ldr	r3, [r7, #4]
 8014bf0:	681b      	ldr	r3, [r3, #0]
 8014bf2:	3318      	adds	r3, #24
 8014bf4:	681b      	ldr	r3, [r3, #0]
 8014bf6:	6878      	ldr	r0, [r7, #4]
 8014bf8:	4798      	blx	r3
    }
 8014bfa:	bf00      	nop
 8014bfc:	3708      	adds	r7, #8
 8014bfe:	46bd      	mov	sp, r7
 8014c00:	bd80      	pop	{r7, pc}

08014c02 <_ZN8touchgfx3HAL19lockDMAToFrontPorchEb>:
    void lockDMAToFrontPorch(bool enableLock)
 8014c02:	b480      	push	{r7}
 8014c04:	b083      	sub	sp, #12
 8014c06:	af00      	add	r7, sp, #0
 8014c08:	6078      	str	r0, [r7, #4]
 8014c0a:	460b      	mov	r3, r1
 8014c0c:	70fb      	strb	r3, [r7, #3]
        lockDMAToPorch = enableLock;
 8014c0e:	687b      	ldr	r3, [r7, #4]
 8014c10:	78fa      	ldrb	r2, [r7, #3]
 8014c12:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
    }
 8014c16:	bf00      	nop
 8014c18:	370c      	adds	r7, #12
 8014c1a:	46bd      	mov	sp, r7
 8014c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c20:	4770      	bx	lr

08014c22 <_ZN8touchgfx3HAL5vSyncEv>:
    void vSync()
 8014c22:	b480      	push	{r7}
 8014c24:	b083      	sub	sp, #12
 8014c26:	af00      	add	r7, sp, #0
 8014c28:	6078      	str	r0, [r7, #4]
        vSyncCnt++;
 8014c2a:	687b      	ldr	r3, [r7, #4]
 8014c2c:	f893 3066 	ldrb.w	r3, [r3, #102]	; 0x66
 8014c30:	3301      	adds	r3, #1
 8014c32:	b2da      	uxtb	r2, r3
 8014c34:	687b      	ldr	r3, [r7, #4]
 8014c36:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
    }
 8014c3a:	bf00      	nop
 8014c3c:	370c      	adds	r7, #12
 8014c3e:	46bd      	mov	sp, r7
 8014c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c44:	4770      	bx	lr
	...

08014c48 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE>:
    bool setFrameRefreshStrategy(FrameRefreshStrategy s)
 8014c48:	b580      	push	{r7, lr}
 8014c4a:	b082      	sub	sp, #8
 8014c4c:	af00      	add	r7, sp, #0
 8014c4e:	6078      	str	r0, [r7, #4]
 8014c50:	460b      	mov	r3, r1
 8014c52:	70fb      	strb	r3, [r7, #3]
        if (s == REFRESH_STRATEGY_DEFAULT || s == REFRESH_STRATEGY_PARTIAL_FRAMEBUFFER)
 8014c54:	78fb      	ldrb	r3, [r7, #3]
 8014c56:	2b00      	cmp	r3, #0
 8014c58:	d002      	beq.n	8014c60 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x18>
 8014c5a:	78fb      	ldrb	r3, [r7, #3]
 8014c5c:	2b02      	cmp	r3, #2
 8014c5e:	d105      	bne.n	8014c6c <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x24>
            refreshStrategy = s;
 8014c60:	687b      	ldr	r3, [r7, #4]
 8014c62:	78fa      	ldrb	r2, [r7, #3]
 8014c64:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
            return true;
 8014c68:	2301      	movs	r3, #1
 8014c6a:	e027      	b.n	8014cbc <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x74>
        else if (s == REFRESH_STRATEGY_OPTIM_SINGLE_BUFFER_TFT_CTRL)
 8014c6c:	78fb      	ldrb	r3, [r7, #3]
 8014c6e:	2b01      	cmp	r3, #1
 8014c70:	d123      	bne.n	8014cba <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x72>
            if (taskDelayFunc != 0 && getTFTCurrentLine() != 0xFFFF && !USE_DOUBLE_BUFFERING)
 8014c72:	687b      	ldr	r3, [r7, #4]
 8014c74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014c76:	2b00      	cmp	r3, #0
 8014c78:	d014      	beq.n	8014ca4 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x5c>
 8014c7a:	687b      	ldr	r3, [r7, #4]
 8014c7c:	681b      	ldr	r3, [r3, #0]
 8014c7e:	3380      	adds	r3, #128	; 0x80
 8014c80:	681b      	ldr	r3, [r3, #0]
 8014c82:	6878      	ldr	r0, [r7, #4]
 8014c84:	4798      	blx	r3
 8014c86:	4603      	mov	r3, r0
 8014c88:	461a      	mov	r2, r3
 8014c8a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8014c8e:	429a      	cmp	r2, r3
 8014c90:	d008      	beq.n	8014ca4 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x5c>
 8014c92:	4b0c      	ldr	r3, [pc, #48]	; (8014cc4 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x7c>)
 8014c94:	781b      	ldrb	r3, [r3, #0]
 8014c96:	f083 0301 	eor.w	r3, r3, #1
 8014c9a:	b2db      	uxtb	r3, r3
 8014c9c:	2b00      	cmp	r3, #0
 8014c9e:	d001      	beq.n	8014ca4 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x5c>
 8014ca0:	2301      	movs	r3, #1
 8014ca2:	e000      	b.n	8014ca6 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x5e>
 8014ca4:	2300      	movs	r3, #0
 8014ca6:	2b00      	cmp	r3, #0
 8014ca8:	d005      	beq.n	8014cb6 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x6e>
                refreshStrategy = s;
 8014caa:	687b      	ldr	r3, [r7, #4]
 8014cac:	78fa      	ldrb	r2, [r7, #3]
 8014cae:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
                return true;
 8014cb2:	2301      	movs	r3, #1
 8014cb4:	e002      	b.n	8014cbc <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x74>
            return false;
 8014cb6:	2300      	movs	r3, #0
 8014cb8:	e000      	b.n	8014cbc <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x74>
        return false;
 8014cba:	2300      	movs	r3, #0
    }
 8014cbc:	4618      	mov	r0, r3
 8014cbe:	3708      	adds	r7, #8
 8014cc0:	46bd      	mov	sp, r7
 8014cc2:	bd80      	pop	{r7, pc}
 8014cc4:	2000580a 	.word	0x2000580a

08014cc8 <_ZN8touchgfx3HAL25registerTaskDelayFunctionEPFvtE>:
    void registerTaskDelayFunction(void (*delayF)(uint16_t))
 8014cc8:	b480      	push	{r7}
 8014cca:	b083      	sub	sp, #12
 8014ccc:	af00      	add	r7, sp, #0
 8014cce:	6078      	str	r0, [r7, #4]
 8014cd0:	6039      	str	r1, [r7, #0]
        taskDelayFunc = delayF;
 8014cd2:	687b      	ldr	r3, [r7, #4]
 8014cd4:	683a      	ldr	r2, [r7, #0]
 8014cd6:	639a      	str	r2, [r3, #56]	; 0x38
    }
 8014cd8:	bf00      	nop
 8014cda:	370c      	adds	r7, #12
 8014cdc:	46bd      	mov	sp, r7
 8014cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ce2:	4770      	bx	lr

08014ce4 <__NVIC_EnableIRQ>:
{
 8014ce4:	b480      	push	{r7}
 8014ce6:	b083      	sub	sp, #12
 8014ce8:	af00      	add	r7, sp, #0
 8014cea:	4603      	mov	r3, r0
 8014cec:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8014cee:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8014cf2:	2b00      	cmp	r3, #0
 8014cf4:	db0b      	blt.n	8014d0e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8014cf6:	88fb      	ldrh	r3, [r7, #6]
 8014cf8:	f003 021f 	and.w	r2, r3, #31
 8014cfc:	4907      	ldr	r1, [pc, #28]	; (8014d1c <__NVIC_EnableIRQ+0x38>)
 8014cfe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8014d02:	095b      	lsrs	r3, r3, #5
 8014d04:	2001      	movs	r0, #1
 8014d06:	fa00 f202 	lsl.w	r2, r0, r2
 8014d0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8014d0e:	bf00      	nop
 8014d10:	370c      	adds	r7, #12
 8014d12:	46bd      	mov	sp, r7
 8014d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d18:	4770      	bx	lr
 8014d1a:	bf00      	nop
 8014d1c:	e000e100 	.word	0xe000e100

08014d20 <__NVIC_DisableIRQ>:
{
 8014d20:	b480      	push	{r7}
 8014d22:	b083      	sub	sp, #12
 8014d24:	af00      	add	r7, sp, #0
 8014d26:	4603      	mov	r3, r0
 8014d28:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8014d2a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8014d2e:	2b00      	cmp	r3, #0
 8014d30:	db12      	blt.n	8014d58 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8014d32:	88fb      	ldrh	r3, [r7, #6]
 8014d34:	f003 021f 	and.w	r2, r3, #31
 8014d38:	490a      	ldr	r1, [pc, #40]	; (8014d64 <__NVIC_DisableIRQ+0x44>)
 8014d3a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8014d3e:	095b      	lsrs	r3, r3, #5
 8014d40:	2001      	movs	r0, #1
 8014d42:	fa00 f202 	lsl.w	r2, r0, r2
 8014d46:	3320      	adds	r3, #32
 8014d48:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8014d4c:	f3bf 8f4f 	dsb	sy
}
 8014d50:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8014d52:	f3bf 8f6f 	isb	sy
}
 8014d56:	bf00      	nop
}
 8014d58:	bf00      	nop
 8014d5a:	370c      	adds	r7, #12
 8014d5c:	46bd      	mov	sp, r7
 8014d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d62:	4770      	bx	lr
 8014d64:	e000e100 	.word	0xe000e100

08014d68 <__NVIC_SetPriority>:
{
 8014d68:	b480      	push	{r7}
 8014d6a:	b083      	sub	sp, #12
 8014d6c:	af00      	add	r7, sp, #0
 8014d6e:	4603      	mov	r3, r0
 8014d70:	6039      	str	r1, [r7, #0]
 8014d72:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8014d74:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8014d78:	2b00      	cmp	r3, #0
 8014d7a:	db0a      	blt.n	8014d92 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8014d7c:	683b      	ldr	r3, [r7, #0]
 8014d7e:	b2da      	uxtb	r2, r3
 8014d80:	490c      	ldr	r1, [pc, #48]	; (8014db4 <__NVIC_SetPriority+0x4c>)
 8014d82:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8014d86:	0112      	lsls	r2, r2, #4
 8014d88:	b2d2      	uxtb	r2, r2
 8014d8a:	440b      	add	r3, r1
 8014d8c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8014d90:	e00a      	b.n	8014da8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8014d92:	683b      	ldr	r3, [r7, #0]
 8014d94:	b2da      	uxtb	r2, r3
 8014d96:	4908      	ldr	r1, [pc, #32]	; (8014db8 <__NVIC_SetPriority+0x50>)
 8014d98:	88fb      	ldrh	r3, [r7, #6]
 8014d9a:	f003 030f 	and.w	r3, r3, #15
 8014d9e:	3b04      	subs	r3, #4
 8014da0:	0112      	lsls	r2, r2, #4
 8014da2:	b2d2      	uxtb	r2, r2
 8014da4:	440b      	add	r3, r1
 8014da6:	761a      	strb	r2, [r3, #24]
}
 8014da8:	bf00      	nop
 8014daa:	370c      	adds	r7, #12
 8014dac:	46bd      	mov	sp, r7
 8014dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014db2:	4770      	bx	lr
 8014db4:	e000e100 	.word	0xe000e100
 8014db8:	e000ed00 	.word	0xe000ed00

08014dbc <_ZN20TouchGFXGeneratedHAL10initializeEv>:
    static uint16_t lcd_int_active_line;
    static uint16_t lcd_int_porch_line;
}

void TouchGFXGeneratedHAL::initialize()
{
 8014dbc:	b5b0      	push	{r4, r5, r7, lr}
 8014dbe:	b082      	sub	sp, #8
 8014dc0:	af00      	add	r7, sp, #0
 8014dc2:	6078      	str	r0, [r7, #4]
    HAL::initialize();
 8014dc4:	687b      	ldr	r3, [r7, #4]
 8014dc6:	4618      	mov	r0, r3
 8014dc8:	f001 fa56 	bl	8016278 <_ZN8touchgfx3HAL10initializeEv>

    registerEventListener(*(Application::getInstance()));
 8014dcc:	687d      	ldr	r5, [r7, #4]
 8014dce:	687b      	ldr	r3, [r7, #4]
 8014dd0:	681b      	ldr	r3, [r3, #0]
 8014dd2:	334c      	adds	r3, #76	; 0x4c
 8014dd4:	681c      	ldr	r4, [r3, #0]
 8014dd6:	f003 fec3 	bl	8018b60 <_ZN8touchgfx11Application11getInstanceEv>
 8014dda:	4603      	mov	r3, r0
 8014ddc:	4619      	mov	r1, r3
 8014dde:	4628      	mov	r0, r5
 8014de0:	47a0      	blx	r4
    registerTaskDelayFunction(&OSWrappers::taskDelay);
 8014de2:	687b      	ldr	r3, [r7, #4]
 8014de4:	490d      	ldr	r1, [pc, #52]	; (8014e1c <_ZN20TouchGFXGeneratedHAL10initializeEv+0x60>)
 8014de6:	4618      	mov	r0, r3
 8014de8:	f7ff ff6e 	bl	8014cc8 <_ZN8touchgfx3HAL25registerTaskDelayFunctionEPFvtE>
    setFrameRefreshStrategy(HAL::REFRESH_STRATEGY_OPTIM_SINGLE_BUFFER_TFT_CTRL);
 8014dec:	687b      	ldr	r3, [r7, #4]
 8014dee:	2101      	movs	r1, #1
 8014df0:	4618      	mov	r0, r3
 8014df2:	f7ff ff29 	bl	8014c48 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE>
    setFrameBufferStartAddresses((void*)0xD0000000, (void*)0, (void*)0);
 8014df6:	6878      	ldr	r0, [r7, #4]
 8014df8:	687b      	ldr	r3, [r7, #4]
 8014dfa:	681b      	ldr	r3, [r3, #0]
 8014dfc:	3370      	adds	r3, #112	; 0x70
 8014dfe:	681c      	ldr	r4, [r3, #0]
 8014e00:	2300      	movs	r3, #0
 8014e02:	2200      	movs	r2, #0
 8014e04:	f04f 4150 	mov.w	r1, #3489660928	; 0xd0000000
 8014e08:	47a0      	blx	r4
     * Set whether the DMA transfers are locked to the TFT update cycle. If
     * locked, DMA transfer will not begin until the TFT controller has finished
     * updating the display. If not locked, DMA transfers will begin as soon as
     * possible. Default is true (DMA is locked with TFT).
     */
    lockDMAToFrontPorch(true);
 8014e0a:	687b      	ldr	r3, [r7, #4]
 8014e0c:	2101      	movs	r1, #1
 8014e0e:	4618      	mov	r0, r3
 8014e10:	f7ff fef7 	bl	8014c02 <_ZN8touchgfx3HAL19lockDMAToFrontPorchEb>
}
 8014e14:	bf00      	nop
 8014e16:	3708      	adds	r7, #8
 8014e18:	46bd      	mov	sp, r7
 8014e1a:	bdb0      	pop	{r4, r5, r7, pc}
 8014e1c:	08013f75 	.word	0x08013f75

08014e20 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>:

void TouchGFXGeneratedHAL::configureInterrupts()
{
 8014e20:	b580      	push	{r7, lr}
 8014e22:	b082      	sub	sp, #8
 8014e24:	af00      	add	r7, sp, #0
 8014e26:	6078      	str	r0, [r7, #4]
    NVIC_SetPriority(LTDC_IRQn, 9);
 8014e28:	2109      	movs	r1, #9
 8014e2a:	2058      	movs	r0, #88	; 0x58
 8014e2c:	f7ff ff9c 	bl	8014d68 <__NVIC_SetPriority>
}
 8014e30:	bf00      	nop
 8014e32:	3708      	adds	r7, #8
 8014e34:	46bd      	mov	sp, r7
 8014e36:	bd80      	pop	{r7, pc}

08014e38 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>:

void TouchGFXGeneratedHAL::enableInterrupts()
{
 8014e38:	b580      	push	{r7, lr}
 8014e3a:	b082      	sub	sp, #8
 8014e3c:	af00      	add	r7, sp, #0
 8014e3e:	6078      	str	r0, [r7, #4]
    NVIC_EnableIRQ(LTDC_IRQn);
 8014e40:	2058      	movs	r0, #88	; 0x58
 8014e42:	f7ff ff4f 	bl	8014ce4 <__NVIC_EnableIRQ>
}
 8014e46:	bf00      	nop
 8014e48:	3708      	adds	r7, #8
 8014e4a:	46bd      	mov	sp, r7
 8014e4c:	bd80      	pop	{r7, pc}

08014e4e <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>:

void TouchGFXGeneratedHAL::disableInterrupts()
{
 8014e4e:	b580      	push	{r7, lr}
 8014e50:	b082      	sub	sp, #8
 8014e52:	af00      	add	r7, sp, #0
 8014e54:	6078      	str	r0, [r7, #4]
    NVIC_DisableIRQ(LTDC_IRQn);
 8014e56:	2058      	movs	r0, #88	; 0x58
 8014e58:	f7ff ff62 	bl	8014d20 <__NVIC_DisableIRQ>
}
 8014e5c:	bf00      	nop
 8014e5e:	3708      	adds	r7, #8
 8014e60:	46bd      	mov	sp, r7
 8014e62:	bd80      	pop	{r7, pc}

08014e64 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>:

void TouchGFXGeneratedHAL::enableLCDControllerInterrupt()
{
 8014e64:	b480      	push	{r7}
 8014e66:	b083      	sub	sp, #12
 8014e68:	af00      	add	r7, sp, #0
 8014e6a:	6078      	str	r0, [r7, #4]
    lcd_int_active_line = (LTDC->BPCR & 0x7FF) - 1;
 8014e6c:	4b11      	ldr	r3, [pc, #68]	; (8014eb4 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 8014e6e:	68db      	ldr	r3, [r3, #12]
 8014e70:	b29b      	uxth	r3, r3
 8014e72:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8014e76:	b29b      	uxth	r3, r3
 8014e78:	3b01      	subs	r3, #1
 8014e7a:	b29a      	uxth	r2, r3
 8014e7c:	4b0e      	ldr	r3, [pc, #56]	; (8014eb8 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x54>)
 8014e7e:	801a      	strh	r2, [r3, #0]
    lcd_int_porch_line = (LTDC->AWCR & 0x7FF) - 1;
 8014e80:	4b0c      	ldr	r3, [pc, #48]	; (8014eb4 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 8014e82:	691b      	ldr	r3, [r3, #16]
 8014e84:	b29b      	uxth	r3, r3
 8014e86:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8014e8a:	b29b      	uxth	r3, r3
 8014e8c:	3b01      	subs	r3, #1
 8014e8e:	b29a      	uxth	r2, r3
 8014e90:	4b0a      	ldr	r3, [pc, #40]	; (8014ebc <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x58>)
 8014e92:	801a      	strh	r2, [r3, #0]

    /* Sets the Line Interrupt position */
    LTDC->LIPCR = lcd_int_active_line;
 8014e94:	4b08      	ldr	r3, [pc, #32]	; (8014eb8 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x54>)
 8014e96:	881a      	ldrh	r2, [r3, #0]
 8014e98:	4b06      	ldr	r3, [pc, #24]	; (8014eb4 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 8014e9a:	641a      	str	r2, [r3, #64]	; 0x40
    /* Line Interrupt Enable            */
    LTDC->IER |= LTDC_IER_LIE;
 8014e9c:	4b05      	ldr	r3, [pc, #20]	; (8014eb4 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 8014e9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014ea0:	4a04      	ldr	r2, [pc, #16]	; (8014eb4 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 8014ea2:	f043 0301 	orr.w	r3, r3, #1
 8014ea6:	6353      	str	r3, [r2, #52]	; 0x34
}
 8014ea8:	bf00      	nop
 8014eaa:	370c      	adds	r7, #12
 8014eac:	46bd      	mov	sp, r7
 8014eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014eb2:	4770      	bx	lr
 8014eb4:	50001000 	.word	0x50001000
 8014eb8:	200057fc 	.word	0x200057fc
 8014ebc:	200057fe 	.word	0x200057fe

08014ec0 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>:

uint16_t* TouchGFXGeneratedHAL::getTFTFrameBuffer() const
{
 8014ec0:	b480      	push	{r7}
 8014ec2:	b083      	sub	sp, #12
 8014ec4:	af00      	add	r7, sp, #0
 8014ec6:	6078      	str	r0, [r7, #4]
    return (uint16_t*)LTDC_Layer1->CFBAR;
 8014ec8:	4b03      	ldr	r3, [pc, #12]	; (8014ed8 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv+0x18>)
 8014eca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
 8014ecc:	4618      	mov	r0, r3
 8014ece:	370c      	adds	r7, #12
 8014ed0:	46bd      	mov	sp, r7
 8014ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ed6:	4770      	bx	lr
 8014ed8:	50001084 	.word	0x50001084

08014edc <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>:

void TouchGFXGeneratedHAL::setTFTFrameBuffer(uint16_t* adr)
{
 8014edc:	b480      	push	{r7}
 8014ede:	b083      	sub	sp, #12
 8014ee0:	af00      	add	r7, sp, #0
 8014ee2:	6078      	str	r0, [r7, #4]
 8014ee4:	6039      	str	r1, [r7, #0]
    LTDC_Layer1->CFBAR = (uint32_t)adr;
 8014ee6:	4a06      	ldr	r2, [pc, #24]	; (8014f00 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt+0x24>)
 8014ee8:	683b      	ldr	r3, [r7, #0]
 8014eea:	6293      	str	r3, [r2, #40]	; 0x28

    /* Reload immediate */
    LTDC->SRCR = (uint32_t)LTDC_SRCR_IMR;
 8014eec:	4b05      	ldr	r3, [pc, #20]	; (8014f04 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt+0x28>)
 8014eee:	2201      	movs	r2, #1
 8014ef0:	625a      	str	r2, [r3, #36]	; 0x24
}
 8014ef2:	bf00      	nop
 8014ef4:	370c      	adds	r7, #12
 8014ef6:	46bd      	mov	sp, r7
 8014ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014efc:	4770      	bx	lr
 8014efe:	bf00      	nop
 8014f00:	50001084 	.word	0x50001084
 8014f04:	50001000 	.word	0x50001000

08014f08 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>:

void TouchGFXGeneratedHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
 8014f08:	b580      	push	{r7, lr}
 8014f0a:	b086      	sub	sp, #24
 8014f0c:	af00      	add	r7, sp, #0
 8014f0e:	6078      	str	r0, [r7, #4]
 8014f10:	6039      	str	r1, [r7, #0]
  HAL::flushFrameBuffer(rect);
 8014f12:	687b      	ldr	r3, [r7, #4]
 8014f14:	6839      	ldr	r1, [r7, #0]
 8014f16:	4618      	mov	r0, r3
 8014f18:	f000 fec2 	bl	8015ca0 <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8014f1c:	4b20      	ldr	r3, [pc, #128]	; (8014fa0 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE+0x98>)
 8014f1e:	2200      	movs	r2, #0
 8014f20:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8014f24:	f3bf 8f4f 	dsb	sy
}
 8014f28:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8014f2a:	4b1d      	ldr	r3, [pc, #116]	; (8014fa0 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE+0x98>)
 8014f2c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8014f30:	617b      	str	r3, [r7, #20]

                                            /* clean & invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8014f32:	697b      	ldr	r3, [r7, #20]
 8014f34:	0b5b      	lsrs	r3, r3, #13
 8014f36:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8014f3a:	613b      	str	r3, [r7, #16]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8014f3c:	697b      	ldr	r3, [r7, #20]
 8014f3e:	08db      	lsrs	r3, r3, #3
 8014f40:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8014f44:	60fb      	str	r3, [r7, #12]
      do {
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8014f46:	693b      	ldr	r3, [r7, #16]
 8014f48:	015a      	lsls	r2, r3, #5
 8014f4a:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8014f4e:	4013      	ands	r3, r2
                       ((ways << SCB_DCCISW_WAY_Pos) & SCB_DCCISW_WAY_Msk)  );
 8014f50:	68fa      	ldr	r2, [r7, #12]
 8014f52:	0792      	lsls	r2, r2, #30
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8014f54:	4912      	ldr	r1, [pc, #72]	; (8014fa0 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE+0x98>)
 8014f56:	4313      	orrs	r3, r2
 8014f58:	f8c1 3274 	str.w	r3, [r1, #628]	; 0x274
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8014f5c:	68fb      	ldr	r3, [r7, #12]
 8014f5e:	1e5a      	subs	r2, r3, #1
 8014f60:	60fa      	str	r2, [r7, #12]
 8014f62:	2b00      	cmp	r3, #0
 8014f64:	bf14      	ite	ne
 8014f66:	2301      	movne	r3, #1
 8014f68:	2300      	moveq	r3, #0
 8014f6a:	b2db      	uxtb	r3, r3
 8014f6c:	2b00      	cmp	r3, #0
 8014f6e:	d000      	beq.n	8014f72 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE+0x6a>
      do {
 8014f70:	e7e9      	b.n	8014f46 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE+0x3e>
    } while(sets-- != 0U);
 8014f72:	693b      	ldr	r3, [r7, #16]
 8014f74:	1e5a      	subs	r2, r3, #1
 8014f76:	613a      	str	r2, [r7, #16]
 8014f78:	2b00      	cmp	r3, #0
 8014f7a:	bf14      	ite	ne
 8014f7c:	2301      	movne	r3, #1
 8014f7e:	2300      	moveq	r3, #0
 8014f80:	b2db      	uxtb	r3, r3
 8014f82:	2b00      	cmp	r3, #0
 8014f84:	d000      	beq.n	8014f88 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE+0x80>
    do {
 8014f86:	e7d9      	b.n	8014f3c <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE+0x34>
  __ASM volatile ("dsb 0xF":::"memory");
 8014f88:	f3bf 8f4f 	dsb	sy
}
 8014f8c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8014f8e:	f3bf 8f6f 	isb	sy
}
 8014f92:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 8014f94:	bf00      	nop
// If the framebuffer is placed in Write Through cached memory (e.g. SRAM) then we need
// to flush the Dcache prior to letting DMA2D accessing it. That's done
// using SCB_CleanInvalidateDCache().
SCB_CleanInvalidateDCache();
}
 8014f96:	bf00      	nop
 8014f98:	3718      	adds	r7, #24
 8014f9a:	46bd      	mov	sp, r7
 8014f9c:	bd80      	pop	{r7, pc}
 8014f9e:	bf00      	nop
 8014fa0:	e000ed00 	.word	0xe000ed00

08014fa4 <_ZN20TouchGFXGeneratedHAL9blockCopyEPvPKvm>:

bool TouchGFXGeneratedHAL::blockCopy(void* RESTRICT dest, const void* RESTRICT src, uint32_t numBytes)
{
 8014fa4:	b580      	push	{r7, lr}
 8014fa6:	b084      	sub	sp, #16
 8014fa8:	af00      	add	r7, sp, #0
 8014faa:	60f8      	str	r0, [r7, #12]
 8014fac:	60b9      	str	r1, [r7, #8]
 8014fae:	607a      	str	r2, [r7, #4]
 8014fb0:	603b      	str	r3, [r7, #0]
  return HAL::blockCopy(dest, src, numBytes);
 8014fb2:	68f8      	ldr	r0, [r7, #12]
 8014fb4:	683b      	ldr	r3, [r7, #0]
 8014fb6:	687a      	ldr	r2, [r7, #4]
 8014fb8:	68b9      	ldr	r1, [r7, #8]
 8014fba:	f000 ffa6 	bl	8015f0a <_ZN8touchgfx3HAL9blockCopyEPvPKvm>
 8014fbe:	4603      	mov	r3, r0
}
 8014fc0:	4618      	mov	r0, r3
 8014fc2:	3710      	adds	r7, #16
 8014fc4:	46bd      	mov	sp, r7
 8014fc6:	bd80      	pop	{r7, pc}

08014fc8 <_ZN20TouchGFXGeneratedHAL17getTFTCurrentLineEv>:

uint16_t TouchGFXGeneratedHAL::getTFTCurrentLine()
{
 8014fc8:	b480      	push	{r7}
 8014fca:	b085      	sub	sp, #20
 8014fcc:	af00      	add	r7, sp, #0
 8014fce:	6078      	str	r0, [r7, #4]
    // This function only requires an implementation if single buffering
    // on LTDC display is being used (REFRESH_STRATEGY_OPTIM_SINGLE_BUFFER_TFT_CTRL).

    // The CPSR register (bits 15:0) specify current line of TFT controller.
    uint16_t curr = (uint16_t)(LTDC->CPSR & 0xffff);
 8014fd0:	4b0d      	ldr	r3, [pc, #52]	; (8015008 <_ZN20TouchGFXGeneratedHAL17getTFTCurrentLineEv+0x40>)
 8014fd2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014fd4:	81fb      	strh	r3, [r7, #14]
    uint16_t backPorchY = (uint16_t)(LTDC->BPCR & 0x7FF) + 1;
 8014fd6:	4b0c      	ldr	r3, [pc, #48]	; (8015008 <_ZN20TouchGFXGeneratedHAL17getTFTCurrentLineEv+0x40>)
 8014fd8:	68db      	ldr	r3, [r3, #12]
 8014fda:	b29b      	uxth	r3, r3
 8014fdc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8014fe0:	b29b      	uxth	r3, r3
 8014fe2:	3301      	adds	r3, #1
 8014fe4:	81bb      	strh	r3, [r7, #12]

    // The semantics of the getTFTCurrentLine() function is to return a value
    // in the range of 0-totalheight. If we are still in back porch area, return 0.
    return (curr < backPorchY) ? 0 : (curr - backPorchY);
 8014fe6:	89fa      	ldrh	r2, [r7, #14]
 8014fe8:	89bb      	ldrh	r3, [r7, #12]
 8014fea:	429a      	cmp	r2, r3
 8014fec:	d304      	bcc.n	8014ff8 <_ZN20TouchGFXGeneratedHAL17getTFTCurrentLineEv+0x30>
 8014fee:	89fa      	ldrh	r2, [r7, #14]
 8014ff0:	89bb      	ldrh	r3, [r7, #12]
 8014ff2:	1ad3      	subs	r3, r2, r3
 8014ff4:	b29b      	uxth	r3, r3
 8014ff6:	e000      	b.n	8014ffa <_ZN20TouchGFXGeneratedHAL17getTFTCurrentLineEv+0x32>
 8014ff8:	2300      	movs	r3, #0
}
 8014ffa:	4618      	mov	r0, r3
 8014ffc:	3714      	adds	r7, #20
 8014ffe:	46bd      	mov	sp, r7
 8015000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015004:	4770      	bx	lr
 8015006:	bf00      	nop
 8015008:	50001000 	.word	0x50001000

0801500c <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv>:

void TouchGFXGeneratedHAL::InvalidateCache()
{
 801500c:	b480      	push	{r7}
 801500e:	b087      	sub	sp, #28
 8015010:	af00      	add	r7, sp, #0
 8015012:	6078      	str	r0, [r7, #4]
    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8015014:	4b21      	ldr	r3, [pc, #132]	; (801509c <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0x90>)
 8015016:	2200      	movs	r2, #0
 8015018:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 801501c:	f3bf 8f4f 	dsb	sy
}
 8015020:	bf00      	nop
    ccsidr = SCB->CCSIDR;
 8015022:	4b1e      	ldr	r3, [pc, #120]	; (801509c <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0x90>)
 8015024:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8015028:	617b      	str	r3, [r7, #20]
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 801502a:	697b      	ldr	r3, [r7, #20]
 801502c:	0b5b      	lsrs	r3, r3, #13
 801502e:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8015032:	613b      	str	r3, [r7, #16]
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8015034:	697b      	ldr	r3, [r7, #20]
 8015036:	08db      	lsrs	r3, r3, #3
 8015038:	f3c3 0309 	ubfx	r3, r3, #0, #10
 801503c:	60fb      	str	r3, [r7, #12]
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 801503e:	693b      	ldr	r3, [r7, #16]
 8015040:	015a      	lsls	r2, r3, #5
 8015042:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8015046:	4013      	ands	r3, r2
                       ((ways << SCB_DCCISW_WAY_Pos) & SCB_DCCISW_WAY_Msk)  );
 8015048:	68fa      	ldr	r2, [r7, #12]
 801504a:	0792      	lsls	r2, r2, #30
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 801504c:	4913      	ldr	r1, [pc, #76]	; (801509c <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0x90>)
 801504e:	4313      	orrs	r3, r2
 8015050:	f8c1 3274 	str.w	r3, [r1, #628]	; 0x274
      } while (ways-- != 0U);
 8015054:	68fb      	ldr	r3, [r7, #12]
 8015056:	1e5a      	subs	r2, r3, #1
 8015058:	60fa      	str	r2, [r7, #12]
 801505a:	2b00      	cmp	r3, #0
 801505c:	bf14      	ite	ne
 801505e:	2301      	movne	r3, #1
 8015060:	2300      	moveq	r3, #0
 8015062:	b2db      	uxtb	r3, r3
 8015064:	2b00      	cmp	r3, #0
 8015066:	d000      	beq.n	801506a <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0x5e>
      do {
 8015068:	e7e9      	b.n	801503e <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0x32>
    } while(sets-- != 0U);
 801506a:	693b      	ldr	r3, [r7, #16]
 801506c:	1e5a      	subs	r2, r3, #1
 801506e:	613a      	str	r2, [r7, #16]
 8015070:	2b00      	cmp	r3, #0
 8015072:	bf14      	ite	ne
 8015074:	2301      	movne	r3, #1
 8015076:	2300      	moveq	r3, #0
 8015078:	b2db      	uxtb	r3, r3
 801507a:	2b00      	cmp	r3, #0
 801507c:	d000      	beq.n	8015080 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0x74>
    do {
 801507e:	e7d9      	b.n	8015034 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0x28>
  __ASM volatile ("dsb 0xF":::"memory");
 8015080:	f3bf 8f4f 	dsb	sy
}
 8015084:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8015086:	f3bf 8f6f 	isb	sy
}
 801508a:	bf00      	nop
}
 801508c:	bf00      	nop
// If the framebuffer is placed in Write Through cached memory (e.g. SRAM) then we need
// to flush the Dcache prior to letting DMA2D accessing it. That's done
// using SCB_CleanInvalidateDCache().
SCB_CleanInvalidateDCache();
}
 801508e:	bf00      	nop
 8015090:	371c      	adds	r7, #28
 8015092:	46bd      	mov	sp, r7
 8015094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015098:	4770      	bx	lr
 801509a:	bf00      	nop
 801509c:	e000ed00 	.word	0xe000ed00

080150a0 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv>:

void TouchGFXGeneratedHAL::FlushCache()
{
 80150a0:	b480      	push	{r7}
 80150a2:	b087      	sub	sp, #28
 80150a4:	af00      	add	r7, sp, #0
 80150a6:	6078      	str	r0, [r7, #4]
    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 80150a8:	4b21      	ldr	r3, [pc, #132]	; (8015130 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x90>)
 80150aa:	2200      	movs	r2, #0
 80150ac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80150b0:	f3bf 8f4f 	dsb	sy
}
 80150b4:	bf00      	nop
    ccsidr = SCB->CCSIDR;
 80150b6:	4b1e      	ldr	r3, [pc, #120]	; (8015130 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x90>)
 80150b8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80150bc:	617b      	str	r3, [r7, #20]
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80150be:	697b      	ldr	r3, [r7, #20]
 80150c0:	0b5b      	lsrs	r3, r3, #13
 80150c2:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80150c6:	613b      	str	r3, [r7, #16]
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80150c8:	697b      	ldr	r3, [r7, #20]
 80150ca:	08db      	lsrs	r3, r3, #3
 80150cc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80150d0:	60fb      	str	r3, [r7, #12]
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 80150d2:	693b      	ldr	r3, [r7, #16]
 80150d4:	015a      	lsls	r2, r3, #5
 80150d6:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 80150da:	4013      	ands	r3, r2
                       ((ways << SCB_DCCISW_WAY_Pos) & SCB_DCCISW_WAY_Msk)  );
 80150dc:	68fa      	ldr	r2, [r7, #12]
 80150de:	0792      	lsls	r2, r2, #30
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 80150e0:	4913      	ldr	r1, [pc, #76]	; (8015130 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x90>)
 80150e2:	4313      	orrs	r3, r2
 80150e4:	f8c1 3274 	str.w	r3, [r1, #628]	; 0x274
      } while (ways-- != 0U);
 80150e8:	68fb      	ldr	r3, [r7, #12]
 80150ea:	1e5a      	subs	r2, r3, #1
 80150ec:	60fa      	str	r2, [r7, #12]
 80150ee:	2b00      	cmp	r3, #0
 80150f0:	bf14      	ite	ne
 80150f2:	2301      	movne	r3, #1
 80150f4:	2300      	moveq	r3, #0
 80150f6:	b2db      	uxtb	r3, r3
 80150f8:	2b00      	cmp	r3, #0
 80150fa:	d000      	beq.n	80150fe <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x5e>
      do {
 80150fc:	e7e9      	b.n	80150d2 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x32>
    } while(sets-- != 0U);
 80150fe:	693b      	ldr	r3, [r7, #16]
 8015100:	1e5a      	subs	r2, r3, #1
 8015102:	613a      	str	r2, [r7, #16]
 8015104:	2b00      	cmp	r3, #0
 8015106:	bf14      	ite	ne
 8015108:	2301      	movne	r3, #1
 801510a:	2300      	moveq	r3, #0
 801510c:	b2db      	uxtb	r3, r3
 801510e:	2b00      	cmp	r3, #0
 8015110:	d000      	beq.n	8015114 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x74>
    do {
 8015112:	e7d9      	b.n	80150c8 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x28>
  __ASM volatile ("dsb 0xF":::"memory");
 8015114:	f3bf 8f4f 	dsb	sy
}
 8015118:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 801511a:	f3bf 8f6f 	isb	sy
}
 801511e:	bf00      	nop
}
 8015120:	bf00      	nop
// If the framebuffer is placed in Write Through cached memory (e.g. SRAM) then we need
// to flush the Dcache prior to letting DMA2D accessing it. That's done
// using SCB_CleanInvalidateDCache().
SCB_CleanInvalidateDCache();
}
 8015122:	bf00      	nop
 8015124:	371c      	adds	r7, #28
 8015126:	46bd      	mov	sp, r7
 8015128:	f85d 7b04 	ldr.w	r7, [sp], #4
 801512c:	4770      	bx	lr
 801512e:	bf00      	nop
 8015130:	e000ed00 	.word	0xe000ed00

08015134 <HAL_LTDC_LineEventCallback>:

extern "C"
{
    void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
    {
 8015134:	b580      	push	{r7, lr}
 8015136:	b082      	sub	sp, #8
 8015138:	af00      	add	r7, sp, #0
 801513a:	6078      	str	r0, [r7, #4]
        if (LTDC->LIPCR == lcd_int_active_line)
 801513c:	4b1a      	ldr	r3, [pc, #104]	; (80151a8 <HAL_LTDC_LineEventCallback+0x74>)
 801513e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015140:	4a1a      	ldr	r2, [pc, #104]	; (80151ac <HAL_LTDC_LineEventCallback+0x78>)
 8015142:	8812      	ldrh	r2, [r2, #0]
 8015144:	4293      	cmp	r3, r2
 8015146:	bf0c      	ite	eq
 8015148:	2301      	moveq	r3, #1
 801514a:	2300      	movne	r3, #0
 801514c:	b2db      	uxtb	r3, r3
 801514e:	2b00      	cmp	r3, #0
 8015150:	d017      	beq.n	8015182 <HAL_LTDC_LineEventCallback+0x4e>
        {
            //entering active area
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_porch_line);
 8015152:	4b17      	ldr	r3, [pc, #92]	; (80151b0 <HAL_LTDC_LineEventCallback+0x7c>)
 8015154:	881b      	ldrh	r3, [r3, #0]
 8015156:	4619      	mov	r1, r3
 8015158:	6878      	ldr	r0, [r7, #4]
 801515a:	f7f1 fba9 	bl	80068b0 <HAL_LTDC_ProgramLineEvent>
            HAL::getInstance()->vSync();
 801515e:	f7fc f891 	bl	8011284 <_ZN8touchgfx3HAL11getInstanceEv>
 8015162:	4603      	mov	r3, r0
 8015164:	4618      	mov	r0, r3
 8015166:	f7ff fd5c 	bl	8014c22 <_ZN8touchgfx3HAL5vSyncEv>
            OSWrappers::signalVSync();
 801516a:	f7fe fedb 	bl	8013f24 <_ZN8touchgfx10OSWrappers11signalVSyncEv>
            // Swap frame buffers immediately instead of waiting for the task to be scheduled in.
            // Note: task will also swap when it wakes up, but that operation is guarded and will not have
            // any effect if already swapped.
            HAL::getInstance()->swapFrameBuffers();
 801516e:	f7fc f889 	bl	8011284 <_ZN8touchgfx3HAL11getInstanceEv>
 8015172:	4603      	mov	r3, r0
 8015174:	4618      	mov	r0, r3
 8015176:	f001 fb07 	bl	8016788 <_ZN8touchgfx3HAL16swapFrameBuffersEv>
            GPIO::set(GPIO::VSYNC_FREQ);
 801517a:	2000      	movs	r0, #0
 801517c:	f7fe fc58 	bl	8013a30 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
            //exiting active area
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_active_line);
            GPIO::clear(GPIO::VSYNC_FREQ);
            HAL::getInstance()->frontPorchEntered();
        }
    }
 8015180:	e00e      	b.n	80151a0 <HAL_LTDC_LineEventCallback+0x6c>
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_active_line);
 8015182:	4b0a      	ldr	r3, [pc, #40]	; (80151ac <HAL_LTDC_LineEventCallback+0x78>)
 8015184:	881b      	ldrh	r3, [r3, #0]
 8015186:	4619      	mov	r1, r3
 8015188:	6878      	ldr	r0, [r7, #4]
 801518a:	f7f1 fb91 	bl	80068b0 <HAL_LTDC_ProgramLineEvent>
            GPIO::clear(GPIO::VSYNC_FREQ);
 801518e:	2000      	movs	r0, #0
 8015190:	f7fe fc59 	bl	8013a46 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
            HAL::getInstance()->frontPorchEntered();
 8015194:	f7fc f876 	bl	8011284 <_ZN8touchgfx3HAL11getInstanceEv>
 8015198:	4603      	mov	r3, r0
 801519a:	4618      	mov	r0, r3
 801519c:	f7ff fd23 	bl	8014be6 <_ZN8touchgfx3HAL17frontPorchEnteredEv>
    }
 80151a0:	bf00      	nop
 80151a2:	3708      	adds	r7, #8
 80151a4:	46bd      	mov	sp, r7
 80151a6:	bd80      	pop	{r7, pc}
 80151a8:	50001000 	.word	0x50001000
 80151ac:	200057fc 	.word	0x200057fc
 80151b0:	200057fe 	.word	0x200057fe

080151b4 <_ZNK8touchgfx17AbstractPartition18getAllocationCountEv>:
 80151b4:	8880      	ldrh	r0, [r0, #4]
 80151b6:	4770      	bx	lr

080151b8 <_ZN8touchgfx17AbstractPartition5clearEv>:
 80151b8:	2300      	movs	r3, #0
 80151ba:	8083      	strh	r3, [r0, #4]
 80151bc:	4770      	bx	lr
	...

080151c0 <_ZN8touchgfx17AbstractPartition7indexOfEPKv>:
 80151c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80151c2:	6803      	ldr	r3, [r0, #0]
 80151c4:	460e      	mov	r6, r1
 80151c6:	2100      	movs	r1, #0
 80151c8:	4605      	mov	r5, r0
 80151ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80151cc:	4798      	blx	r3
 80151ce:	4604      	mov	r4, r0
 80151d0:	682b      	ldr	r3, [r5, #0]
 80151d2:	4628      	mov	r0, r5
 80151d4:	1b34      	subs	r4, r6, r4
 80151d6:	6a1b      	ldr	r3, [r3, #32]
 80151d8:	b2a4      	uxth	r4, r4
 80151da:	4798      	blx	r3
 80151dc:	88ab      	ldrh	r3, [r5, #4]
 80151de:	fbb4 f4f0 	udiv	r4, r4, r0
 80151e2:	42a3      	cmp	r3, r4
 80151e4:	d805      	bhi.n	80151f2 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x32>
 80151e6:	4b0e      	ldr	r3, [pc, #56]	; (8015220 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x60>)
 80151e8:	2120      	movs	r1, #32
 80151ea:	4a0e      	ldr	r2, [pc, #56]	; (8015224 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x64>)
 80151ec:	480e      	ldr	r0, [pc, #56]	; (8015228 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x68>)
 80151ee:	f011 ff9b 	bl	8027128 <__assert_func>
 80151f2:	682b      	ldr	r3, [r5, #0]
 80151f4:	2100      	movs	r1, #0
 80151f6:	4628      	mov	r0, r5
 80151f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80151fa:	4798      	blx	r3
 80151fc:	682b      	ldr	r3, [r5, #0]
 80151fe:	4607      	mov	r7, r0
 8015200:	4628      	mov	r0, r5
 8015202:	6a1b      	ldr	r3, [r3, #32]
 8015204:	4798      	blx	r3
 8015206:	1bf3      	subs	r3, r6, r7
 8015208:	b29b      	uxth	r3, r3
 801520a:	fbb3 f2f0 	udiv	r2, r3, r0
 801520e:	fb02 3010 	mls	r0, r2, r0, r3
 8015212:	b118      	cbz	r0, 801521c <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x5c>
 8015214:	4b05      	ldr	r3, [pc, #20]	; (801522c <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x6c>)
 8015216:	2121      	movs	r1, #33	; 0x21
 8015218:	4a02      	ldr	r2, [pc, #8]	; (8015224 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x64>)
 801521a:	e7e7      	b.n	80151ec <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x2c>
 801521c:	4620      	mov	r0, r4
 801521e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015220:	080297b8 	.word	0x080297b8
 8015224:	08029926 	.word	0x08029926
 8015228:	080297cd 	.word	0x080297cd
 801522c:	080297fb 	.word	0x080297fb

08015230 <_ZN8touchgfx17AbstractPartition8allocateEt>:
 8015230:	b538      	push	{r3, r4, r5, lr}
 8015232:	6803      	ldr	r3, [r0, #0]
 8015234:	460d      	mov	r5, r1
 8015236:	4604      	mov	r4, r0
 8015238:	6a1b      	ldr	r3, [r3, #32]
 801523a:	4798      	blx	r3
 801523c:	4285      	cmp	r5, r0
 801523e:	d905      	bls.n	801524c <_ZN8touchgfx17AbstractPartition8allocateEt+0x1c>
 8015240:	4b0c      	ldr	r3, [pc, #48]	; (8015274 <_ZN8touchgfx17AbstractPartition8allocateEt+0x44>)
 8015242:	2132      	movs	r1, #50	; 0x32
 8015244:	4a0c      	ldr	r2, [pc, #48]	; (8015278 <_ZN8touchgfx17AbstractPartition8allocateEt+0x48>)
 8015246:	480d      	ldr	r0, [pc, #52]	; (801527c <_ZN8touchgfx17AbstractPartition8allocateEt+0x4c>)
 8015248:	f011 ff6e 	bl	8027128 <__assert_func>
 801524c:	6823      	ldr	r3, [r4, #0]
 801524e:	4620      	mov	r0, r4
 8015250:	88a5      	ldrh	r5, [r4, #4]
 8015252:	69db      	ldr	r3, [r3, #28]
 8015254:	4798      	blx	r3
 8015256:	4285      	cmp	r5, r0
 8015258:	d303      	bcc.n	8015262 <_ZN8touchgfx17AbstractPartition8allocateEt+0x32>
 801525a:	4b09      	ldr	r3, [pc, #36]	; (8015280 <_ZN8touchgfx17AbstractPartition8allocateEt+0x50>)
 801525c:	2133      	movs	r1, #51	; 0x33
 801525e:	4a06      	ldr	r2, [pc, #24]	; (8015278 <_ZN8touchgfx17AbstractPartition8allocateEt+0x48>)
 8015260:	e7f1      	b.n	8015246 <_ZN8touchgfx17AbstractPartition8allocateEt+0x16>
 8015262:	6823      	ldr	r3, [r4, #0]
 8015264:	4620      	mov	r0, r4
 8015266:	88a1      	ldrh	r1, [r4, #4]
 8015268:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801526a:	4798      	blx	r3
 801526c:	88a3      	ldrh	r3, [r4, #4]
 801526e:	3301      	adds	r3, #1
 8015270:	80a3      	strh	r3, [r4, #4]
 8015272:	bd38      	pop	{r3, r4, r5, pc}
 8015274:	08029875 	.word	0x08029875
 8015278:	08029969 	.word	0x08029969
 801527c:	080297cd 	.word	0x080297cd
 8015280:	0802988c 	.word	0x0802988c

08015284 <_ZN8touchgfx17AbstractPartition10allocateAtEtt>:
 8015284:	b570      	push	{r4, r5, r6, lr}
 8015286:	6803      	ldr	r3, [r0, #0]
 8015288:	4616      	mov	r6, r2
 801528a:	4604      	mov	r4, r0
 801528c:	460d      	mov	r5, r1
 801528e:	6a1b      	ldr	r3, [r3, #32]
 8015290:	4798      	blx	r3
 8015292:	4286      	cmp	r6, r0
 8015294:	d905      	bls.n	80152a2 <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x1e>
 8015296:	4b06      	ldr	r3, [pc, #24]	; (80152b0 <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x2c>)
 8015298:	213c      	movs	r1, #60	; 0x3c
 801529a:	4a06      	ldr	r2, [pc, #24]	; (80152b4 <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x30>)
 801529c:	4806      	ldr	r0, [pc, #24]	; (80152b8 <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x34>)
 801529e:	f011 ff43 	bl	8027128 <__assert_func>
 80152a2:	6823      	ldr	r3, [r4, #0]
 80152a4:	4629      	mov	r1, r5
 80152a6:	4620      	mov	r0, r4
 80152a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80152aa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80152ae:	4718      	bx	r3
 80152b0:	08029875 	.word	0x08029875
 80152b4:	080298dc 	.word	0x080298dc
 80152b8:	080297cd 	.word	0x080297cd

080152bc <_ZN8touchgfx17AbstractPartitionD1Ev>:
 80152bc:	4770      	bx	lr
	...

080152c0 <_ZN8touchgfx17AbstractPartitionC1Ev>:
 80152c0:	4a02      	ldr	r2, [pc, #8]	; (80152cc <_ZN8touchgfx17AbstractPartitionC1Ev+0xc>)
 80152c2:	6002      	str	r2, [r0, #0]
 80152c4:	2200      	movs	r2, #0
 80152c6:	8082      	strh	r2, [r0, #4]
 80152c8:	4770      	bx	lr
 80152ca:	bf00      	nop
 80152cc:	080298b0 	.word	0x080298b0

080152d0 <_ZN8touchgfx9Container13getFirstChildEv>:
 80152d0:	6a80      	ldr	r0, [r0, #40]	; 0x28
 80152d2:	4770      	bx	lr

080152d4 <_ZN8touchgfx9Container8containsERKNS_8DrawableE>:
 80152d4:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80152d6:	2000      	movs	r0, #0
 80152d8:	b12b      	cbz	r3, 80152e6 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 80152da:	b920      	cbnz	r0, 80152e6 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 80152dc:	1a5a      	subs	r2, r3, r1
 80152de:	699b      	ldr	r3, [r3, #24]
 80152e0:	4250      	negs	r0, r2
 80152e2:	4150      	adcs	r0, r2
 80152e4:	e7f8      	b.n	80152d8 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x4>
 80152e6:	4770      	bx	lr

080152e8 <_ZN8touchgfx9Container9removeAllEv>:
 80152e8:	2200      	movs	r2, #0
 80152ea:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80152ec:	b123      	cbz	r3, 80152f8 <_ZN8touchgfx9Container9removeAllEv+0x10>
 80152ee:	6999      	ldr	r1, [r3, #24]
 80152f0:	6281      	str	r1, [r0, #40]	; 0x28
 80152f2:	e9c3 2205 	strd	r2, r2, [r3, #20]
 80152f6:	e7f8      	b.n	80152ea <_ZN8touchgfx9Container9removeAllEv+0x2>
 80152f8:	4770      	bx	lr

080152fa <_ZN8touchgfx9Container6unlinkEv>:
 80152fa:	2300      	movs	r3, #0
 80152fc:	6283      	str	r3, [r0, #40]	; 0x28
 80152fe:	4770      	bx	lr

08015300 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>:
 8015300:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015304:	461f      	mov	r7, r3
 8015306:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 801530a:	460d      	mov	r5, r1
 801530c:	4616      	mov	r6, r2
 801530e:	b103      	cbz	r3, 8015312 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x12>
 8015310:	6038      	str	r0, [r7, #0]
 8015312:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8015314:	b314      	cbz	r4, 801535c <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x5c>
 8015316:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 801531a:	b1eb      	cbz	r3, 8015358 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 801531c:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8015320:	428d      	cmp	r5, r1
 8015322:	db19      	blt.n	8015358 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8015324:	b289      	uxth	r1, r1
 8015326:	8923      	ldrh	r3, [r4, #8]
 8015328:	440b      	add	r3, r1
 801532a:	b21b      	sxth	r3, r3
 801532c:	429d      	cmp	r5, r3
 801532e:	da13      	bge.n	8015358 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8015330:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 8015334:	4296      	cmp	r6, r2
 8015336:	db0f      	blt.n	8015358 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8015338:	b292      	uxth	r2, r2
 801533a:	8963      	ldrh	r3, [r4, #10]
 801533c:	4413      	add	r3, r2
 801533e:	b21b      	sxth	r3, r3
 8015340:	429e      	cmp	r6, r3
 8015342:	da09      	bge.n	8015358 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8015344:	6823      	ldr	r3, [r4, #0]
 8015346:	1ab2      	subs	r2, r6, r2
 8015348:	1a69      	subs	r1, r5, r1
 801534a:	4620      	mov	r0, r4
 801534c:	f8d3 8020 	ldr.w	r8, [r3, #32]
 8015350:	b212      	sxth	r2, r2
 8015352:	463b      	mov	r3, r7
 8015354:	b209      	sxth	r1, r1
 8015356:	47c0      	blx	r8
 8015358:	69a4      	ldr	r4, [r4, #24]
 801535a:	e7db      	b.n	8015314 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x14>
 801535c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08015360 <_ZNK8touchgfx9Container12getSolidRectEv>:
 8015360:	2200      	movs	r2, #0
 8015362:	8002      	strh	r2, [r0, #0]
 8015364:	8042      	strh	r2, [r0, #2]
 8015366:	8082      	strh	r2, [r0, #4]
 8015368:	80c2      	strh	r2, [r0, #6]
 801536a:	4770      	bx	lr

0801536c <_ZN8touchgfx9Container20moveChildrenRelativeEss>:
 801536c:	b570      	push	{r4, r5, r6, lr}
 801536e:	460d      	mov	r5, r1
 8015370:	4616      	mov	r6, r2
 8015372:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8015374:	b13c      	cbz	r4, 8015386 <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x1a>
 8015376:	6823      	ldr	r3, [r4, #0]
 8015378:	4620      	mov	r0, r4
 801537a:	4632      	mov	r2, r6
 801537c:	4629      	mov	r1, r5
 801537e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8015380:	4798      	blx	r3
 8015382:	69a4      	ldr	r4, [r4, #24]
 8015384:	e7f6      	b.n	8015374 <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x8>
 8015386:	bd70      	pop	{r4, r5, r6, pc}

08015388 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE>:
 8015388:	b538      	push	{r3, r4, r5, lr}
 801538a:	460d      	mov	r5, r1
 801538c:	6a84      	ldr	r4, [r0, #40]	; 0x28
 801538e:	b134      	cbz	r4, 801539e <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x16>
 8015390:	682b      	ldr	r3, [r5, #0]
 8015392:	4621      	mov	r1, r4
 8015394:	4628      	mov	r0, r5
 8015396:	689b      	ldr	r3, [r3, #8]
 8015398:	4798      	blx	r3
 801539a:	69a4      	ldr	r4, [r4, #24]
 801539c:	e7f7      	b.n	801538e <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x6>
 801539e:	bd38      	pop	{r3, r4, r5, pc}

080153a0 <_ZN8touchgfx9Container6removeERNS_8DrawableE>:
 80153a0:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80153a2:	b19b      	cbz	r3, 80153cc <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 80153a4:	428b      	cmp	r3, r1
 80153a6:	d109      	bne.n	80153bc <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x1c>
 80153a8:	699a      	ldr	r2, [r3, #24]
 80153aa:	2100      	movs	r1, #0
 80153ac:	6159      	str	r1, [r3, #20]
 80153ae:	6282      	str	r2, [r0, #40]	; 0x28
 80153b0:	b902      	cbnz	r2, 80153b4 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x14>
 80153b2:	4770      	bx	lr
 80153b4:	6199      	str	r1, [r3, #24]
 80153b6:	4770      	bx	lr
 80153b8:	4613      	mov	r3, r2
 80153ba:	b13a      	cbz	r2, 80153cc <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 80153bc:	699a      	ldr	r2, [r3, #24]
 80153be:	428a      	cmp	r2, r1
 80153c0:	d1fa      	bne.n	80153b8 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x18>
 80153c2:	698a      	ldr	r2, [r1, #24]
 80153c4:	619a      	str	r2, [r3, #24]
 80153c6:	2300      	movs	r3, #0
 80153c8:	e9c1 3305 	strd	r3, r3, [r1, #20]
 80153cc:	4770      	bx	lr

080153ce <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_>:
 80153ce:	b410      	push	{r4}
 80153d0:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80153d2:	4604      	mov	r4, r0
 80153d4:	b92b      	cbnz	r3, 80153e2 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x14>
 80153d6:	6803      	ldr	r3, [r0, #0]
 80153d8:	4611      	mov	r1, r2
 80153da:	f85d 4b04 	ldr.w	r4, [sp], #4
 80153de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80153e0:	4718      	bx	r3
 80153e2:	b941      	cbnz	r1, 80153f6 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x28>
 80153e4:	6193      	str	r3, [r2, #24]
 80153e6:	6282      	str	r2, [r0, #40]	; 0x28
 80153e8:	6154      	str	r4, [r2, #20]
 80153ea:	f85d 4b04 	ldr.w	r4, [sp], #4
 80153ee:	4770      	bx	lr
 80153f0:	4603      	mov	r3, r0
 80153f2:	2800      	cmp	r0, #0
 80153f4:	d0f9      	beq.n	80153ea <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1c>
 80153f6:	4299      	cmp	r1, r3
 80153f8:	6998      	ldr	r0, [r3, #24]
 80153fa:	d1f9      	bne.n	80153f0 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x22>
 80153fc:	6190      	str	r0, [r2, #24]
 80153fe:	618a      	str	r2, [r1, #24]
 8015400:	e7f2      	b.n	80153e8 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1a>
	...

08015404 <_ZN8touchgfx9Container3addERNS_8DrawableE>:
 8015404:	4288      	cmp	r0, r1
 8015406:	b508      	push	{r3, lr}
 8015408:	d105      	bne.n	8015416 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x12>
 801540a:	4b11      	ldr	r3, [pc, #68]	; (8015450 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x4c>)
 801540c:	2123      	movs	r1, #35	; 0x23
 801540e:	4a11      	ldr	r2, [pc, #68]	; (8015454 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x50>)
 8015410:	4811      	ldr	r0, [pc, #68]	; (8015458 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x54>)
 8015412:	f011 fe89 	bl	8027128 <__assert_func>
 8015416:	694b      	ldr	r3, [r1, #20]
 8015418:	b11b      	cbz	r3, 8015422 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x1e>
 801541a:	4b10      	ldr	r3, [pc, #64]	; (801545c <_ZN8touchgfx9Container3addERNS_8DrawableE+0x58>)
 801541c:	2124      	movs	r1, #36	; 0x24
 801541e:	4a0d      	ldr	r2, [pc, #52]	; (8015454 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x50>)
 8015420:	e7f6      	b.n	8015410 <_ZN8touchgfx9Container3addERNS_8DrawableE+0xc>
 8015422:	e9c1 0305 	strd	r0, r3, [r1, #20]
 8015426:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8015428:	b913      	cbnz	r3, 8015430 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x2c>
 801542a:	6281      	str	r1, [r0, #40]	; 0x28
 801542c:	bd08      	pop	{r3, pc}
 801542e:	4613      	mov	r3, r2
 8015430:	699a      	ldr	r2, [r3, #24]
 8015432:	b12a      	cbz	r2, 8015440 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x3c>
 8015434:	428b      	cmp	r3, r1
 8015436:	d1fa      	bne.n	801542e <_ZN8touchgfx9Container3addERNS_8DrawableE+0x2a>
 8015438:	4b09      	ldr	r3, [pc, #36]	; (8015460 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x5c>)
 801543a:	2135      	movs	r1, #53	; 0x35
 801543c:	4a05      	ldr	r2, [pc, #20]	; (8015454 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x50>)
 801543e:	e7e7      	b.n	8015410 <_ZN8touchgfx9Container3addERNS_8DrawableE+0xc>
 8015440:	428b      	cmp	r3, r1
 8015442:	d103      	bne.n	801544c <_ZN8touchgfx9Container3addERNS_8DrawableE+0x48>
 8015444:	4b06      	ldr	r3, [pc, #24]	; (8015460 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x5c>)
 8015446:	2138      	movs	r1, #56	; 0x38
 8015448:	4a02      	ldr	r2, [pc, #8]	; (8015454 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x50>)
 801544a:	e7e1      	b.n	8015410 <_ZN8touchgfx9Container3addERNS_8DrawableE+0xc>
 801544c:	6199      	str	r1, [r3, #24]
 801544e:	e7ed      	b.n	801542c <_ZN8touchgfx9Container3addERNS_8DrawableE+0x28>
 8015450:	080299a7 	.word	0x080299a7
 8015454:	08029af8 	.word	0x08029af8
 8015458:	080299d3 	.word	0x080299d3
 801545c:	08029a06 	.word	0x08029a06
 8015460:	08029a3c 	.word	0x08029a3c

08015464 <_ZN8touchgfx4RectaNERKS0_>:
 8015464:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015468:	f9b1 7000 	ldrsh.w	r7, [r1]
 801546c:	888c      	ldrh	r4, [r1, #4]
 801546e:	f9b0 9000 	ldrsh.w	r9, [r0]
 8015472:	443c      	add	r4, r7
 8015474:	b2a4      	uxth	r4, r4
 8015476:	fa0f f884 	sxth.w	r8, r4
 801547a:	45c1      	cmp	r9, r8
 801547c:	da2f      	bge.n	80154de <_ZN8touchgfx4RectaNERKS0_+0x7a>
 801547e:	8882      	ldrh	r2, [r0, #4]
 8015480:	444a      	add	r2, r9
 8015482:	b292      	uxth	r2, r2
 8015484:	fa0f fe82 	sxth.w	lr, r2
 8015488:	4577      	cmp	r7, lr
 801548a:	da28      	bge.n	80154de <_ZN8touchgfx4RectaNERKS0_+0x7a>
 801548c:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
 8015490:	88cb      	ldrh	r3, [r1, #6]
 8015492:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 8015496:	442b      	add	r3, r5
 8015498:	b21b      	sxth	r3, r3
 801549a:	429e      	cmp	r6, r3
 801549c:	da1f      	bge.n	80154de <_ZN8touchgfx4RectaNERKS0_+0x7a>
 801549e:	88c3      	ldrh	r3, [r0, #6]
 80154a0:	4433      	add	r3, r6
 80154a2:	b29b      	uxth	r3, r3
 80154a4:	fa0f fc83 	sxth.w	ip, r3
 80154a8:	4565      	cmp	r5, ip
 80154aa:	da18      	bge.n	80154de <_ZN8touchgfx4RectaNERKS0_+0x7a>
 80154ac:	454f      	cmp	r7, r9
 80154ae:	bfb8      	it	lt
 80154b0:	464f      	movlt	r7, r9
 80154b2:	42b5      	cmp	r5, r6
 80154b4:	bfb8      	it	lt
 80154b6:	4635      	movlt	r5, r6
 80154b8:	45f0      	cmp	r8, lr
 80154ba:	bfd8      	it	le
 80154bc:	4622      	movle	r2, r4
 80154be:	1bd2      	subs	r2, r2, r7
 80154c0:	8082      	strh	r2, [r0, #4]
 80154c2:	884a      	ldrh	r2, [r1, #2]
 80154c4:	88c9      	ldrh	r1, [r1, #6]
 80154c6:	8007      	strh	r7, [r0, #0]
 80154c8:	440a      	add	r2, r1
 80154ca:	8045      	strh	r5, [r0, #2]
 80154cc:	b292      	uxth	r2, r2
 80154ce:	b211      	sxth	r1, r2
 80154d0:	458c      	cmp	ip, r1
 80154d2:	bfa8      	it	ge
 80154d4:	4613      	movge	r3, r2
 80154d6:	1b5b      	subs	r3, r3, r5
 80154d8:	80c3      	strh	r3, [r0, #6]
 80154da:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80154de:	2300      	movs	r3, #0
 80154e0:	8003      	strh	r3, [r0, #0]
 80154e2:	8043      	strh	r3, [r0, #2]
 80154e4:	8083      	strh	r3, [r0, #4]
 80154e6:	80c3      	strh	r3, [r0, #6]
 80154e8:	e7f7      	b.n	80154da <_ZN8touchgfx4RectaNERKS0_+0x76>

080154ea <_ZNK8touchgfx4Rect7isEmptyEv>:
 80154ea:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 80154ee:	2b00      	cmp	r3, #0
 80154f0:	dd06      	ble.n	8015500 <_ZNK8touchgfx4Rect7isEmptyEv+0x16>
 80154f2:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 80154f6:	2800      	cmp	r0, #0
 80154f8:	bfcc      	ite	gt
 80154fa:	2000      	movgt	r0, #0
 80154fc:	2001      	movle	r0, #1
 80154fe:	4770      	bx	lr
 8015500:	2001      	movs	r0, #1
 8015502:	4770      	bx	lr

08015504 <_ZNK8touchgfx9Container16getContainedAreaEv>:
 8015504:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015508:	2300      	movs	r3, #0
 801550a:	4604      	mov	r4, r0
 801550c:	6a8d      	ldr	r5, [r1, #40]	; 0x28
 801550e:	8003      	strh	r3, [r0, #0]
 8015510:	8043      	strh	r3, [r0, #2]
 8015512:	8083      	strh	r3, [r0, #4]
 8015514:	80c3      	strh	r3, [r0, #6]
 8015516:	2d00      	cmp	r5, #0
 8015518:	d040      	beq.n	801559c <_ZNK8touchgfx9Container16getContainedAreaEv+0x98>
 801551a:	1d28      	adds	r0, r5, #4
 801551c:	f7ff ffe5 	bl	80154ea <_ZNK8touchgfx4Rect7isEmptyEv>
 8015520:	b988      	cbnz	r0, 8015546 <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 8015522:	4620      	mov	r0, r4
 8015524:	f7ff ffe1 	bl	80154ea <_ZNK8touchgfx4Rect7isEmptyEv>
 8015528:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 801552c:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 8015530:	f9b5 e008 	ldrsh.w	lr, [r5, #8]
 8015534:	f9b5 c00a 	ldrsh.w	ip, [r5, #10]
 8015538:	b138      	cbz	r0, 801554a <_ZNK8touchgfx9Container16getContainedAreaEv+0x46>
 801553a:	8022      	strh	r2, [r4, #0]
 801553c:	8063      	strh	r3, [r4, #2]
 801553e:	f8a4 e004 	strh.w	lr, [r4, #4]
 8015542:	f8a4 c006 	strh.w	ip, [r4, #6]
 8015546:	69ad      	ldr	r5, [r5, #24]
 8015548:	e7e5      	b.n	8015516 <_ZNK8touchgfx9Container16getContainedAreaEv+0x12>
 801554a:	f9b4 0000 	ldrsh.w	r0, [r4]
 801554e:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 8015552:	4290      	cmp	r0, r2
 8015554:	4607      	mov	r7, r0
 8015556:	f8b4 8004 	ldrh.w	r8, [r4, #4]
 801555a:	460e      	mov	r6, r1
 801555c:	bfa8      	it	ge
 801555e:	4617      	movge	r7, r2
 8015560:	4299      	cmp	r1, r3
 8015562:	4472      	add	r2, lr
 8015564:	f8b4 e006 	ldrh.w	lr, [r4, #6]
 8015568:	bfa8      	it	ge
 801556a:	461e      	movge	r6, r3
 801556c:	4440      	add	r0, r8
 801556e:	4471      	add	r1, lr
 8015570:	4463      	add	r3, ip
 8015572:	b200      	sxth	r0, r0
 8015574:	8027      	strh	r7, [r4, #0]
 8015576:	b212      	sxth	r2, r2
 8015578:	8066      	strh	r6, [r4, #2]
 801557a:	b209      	sxth	r1, r1
 801557c:	b21b      	sxth	r3, r3
 801557e:	4290      	cmp	r0, r2
 8015580:	bfac      	ite	ge
 8015582:	ebc7 0200 	rsbge	r2, r7, r0
 8015586:	ebc7 0202 	rsblt	r2, r7, r2
 801558a:	4299      	cmp	r1, r3
 801558c:	bfac      	ite	ge
 801558e:	ebc6 0301 	rsbge	r3, r6, r1
 8015592:	ebc6 0303 	rsblt	r3, r6, r3
 8015596:	80a2      	strh	r2, [r4, #4]
 8015598:	80e3      	strh	r3, [r4, #6]
 801559a:	e7d4      	b.n	8015546 <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 801559c:	4620      	mov	r0, r4
 801559e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080155a2 <_ZNK8touchgfx9Container4drawERKNS_4RectE>:
 80155a2:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80155a6:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 80155aa:	b383      	cbz	r3, 801560e <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 80155ac:	6a84      	ldr	r4, [r0, #40]	; 0x28
 80155ae:	b374      	cbz	r4, 801560e <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 80155b0:	f9b1 5000 	ldrsh.w	r5, [r1]
 80155b4:	f9b1 6002 	ldrsh.w	r6, [r1, #2]
 80155b8:	f9b1 7004 	ldrsh.w	r7, [r1, #4]
 80155bc:	f9b1 8006 	ldrsh.w	r8, [r1, #6]
 80155c0:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 80155c4:	b303      	cbz	r3, 8015608 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 80155c6:	4668      	mov	r0, sp
 80155c8:	1d21      	adds	r1, r4, #4
 80155ca:	f8ad 5000 	strh.w	r5, [sp]
 80155ce:	f8ad 6002 	strh.w	r6, [sp, #2]
 80155d2:	f8ad 7004 	strh.w	r7, [sp, #4]
 80155d6:	f8ad 8006 	strh.w	r8, [sp, #6]
 80155da:	f7ff ff43 	bl	8015464 <_ZN8touchgfx4RectaNERKS0_>
 80155de:	4668      	mov	r0, sp
 80155e0:	f7ff ff83 	bl	80154ea <_ZNK8touchgfx4Rect7isEmptyEv>
 80155e4:	b980      	cbnz	r0, 8015608 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 80155e6:	f8bd 3000 	ldrh.w	r3, [sp]
 80155ea:	4669      	mov	r1, sp
 80155ec:	88a2      	ldrh	r2, [r4, #4]
 80155ee:	4620      	mov	r0, r4
 80155f0:	1a9b      	subs	r3, r3, r2
 80155f2:	88e2      	ldrh	r2, [r4, #6]
 80155f4:	f8ad 3000 	strh.w	r3, [sp]
 80155f8:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 80155fc:	1a9b      	subs	r3, r3, r2
 80155fe:	f8ad 3002 	strh.w	r3, [sp, #2]
 8015602:	6823      	ldr	r3, [r4, #0]
 8015604:	689b      	ldr	r3, [r3, #8]
 8015606:	4798      	blx	r3
 8015608:	69a4      	ldr	r4, [r4, #24]
 801560a:	2c00      	cmp	r4, #0
 801560c:	d1d8      	bne.n	80155c0 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x1e>
 801560e:	b002      	add	sp, #8
 8015610:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08015614 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>:
 8015614:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8015616:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 801561a:	460d      	mov	r5, r1
 801561c:	4616      	mov	r6, r2
 801561e:	b323      	cbz	r3, 801566a <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 8015620:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8015622:	b314      	cbz	r4, 801566a <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 8015624:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 8015628:	b1eb      	cbz	r3, 8015666 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 801562a:	6828      	ldr	r0, [r5, #0]
 801562c:	466b      	mov	r3, sp
 801562e:	6869      	ldr	r1, [r5, #4]
 8015630:	c303      	stmia	r3!, {r0, r1}
 8015632:	4668      	mov	r0, sp
 8015634:	1d21      	adds	r1, r4, #4
 8015636:	f7ff ff15 	bl	8015464 <_ZN8touchgfx4RectaNERKS0_>
 801563a:	4668      	mov	r0, sp
 801563c:	f7ff ff55 	bl	80154ea <_ZNK8touchgfx4Rect7isEmptyEv>
 8015640:	b988      	cbnz	r0, 8015666 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 8015642:	f8bd 3000 	ldrh.w	r3, [sp]
 8015646:	4669      	mov	r1, sp
 8015648:	88a2      	ldrh	r2, [r4, #4]
 801564a:	4620      	mov	r0, r4
 801564c:	1a9b      	subs	r3, r3, r2
 801564e:	88e2      	ldrh	r2, [r4, #6]
 8015650:	f8ad 3000 	strh.w	r3, [sp]
 8015654:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8015658:	1a9b      	subs	r3, r3, r2
 801565a:	4632      	mov	r2, r6
 801565c:	f8ad 3002 	strh.w	r3, [sp, #2]
 8015660:	6823      	ldr	r3, [r4, #0]
 8015662:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8015664:	4798      	blx	r3
 8015666:	69a4      	ldr	r4, [r4, #24]
 8015668:	e7db      	b.n	8015622 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0xe>
 801566a:	b002      	add	sp, #8
 801566c:	bd70      	pop	{r4, r5, r6, pc}

0801566e <_ZNK8touchgfx6Slider15getIndicatorMinEv>:
 801566e:	f8b0 00ec 	ldrh.w	r0, [r0, #236]	; 0xec
 8015672:	4770      	bx	lr

08015674 <_ZNK8touchgfx6Slider15getIndicatorMaxEv>:
 8015674:	f8b0 00ee 	ldrh.w	r0, [r0, #238]	; 0xee
 8015678:	4770      	bx	lr

0801567a <_ZNK8touchgfx6Slider11getMinValueEv>:
 801567a:	8e80      	ldrh	r0, [r0, #52]	; 0x34
 801567c:	4770      	bx	lr

0801567e <_ZNK8touchgfx6Slider11getMaxValueEv>:
 801567e:	8f00      	ldrh	r0, [r0, #56]	; 0x38
 8015680:	4770      	bx	lr

08015682 <_ZN8touchgfx6Slider8setValueEi>:
 8015682:	b570      	push	{r4, r5, r6, lr}
 8015684:	6803      	ldr	r3, [r0, #0]
 8015686:	4604      	mov	r4, r0
 8015688:	e9d3 5329 	ldrd	r5, r3, [r3, #164]	; 0xa4
 801568c:	4798      	blx	r3
 801568e:	4601      	mov	r1, r0
 8015690:	462b      	mov	r3, r5
 8015692:	4620      	mov	r0, r4
 8015694:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015698:	4718      	bx	r3

0801569a <_ZNK8touchgfx6Slider15valueToPositionEi>:
 801569a:	b538      	push	{r3, r4, r5, lr}
 801569c:	e9d0 340d 	ldrd	r3, r4, [r0, #52]	; 0x34
 80156a0:	4605      	mov	r5, r0
 80156a2:	428c      	cmp	r4, r1
 80156a4:	bfa8      	it	ge
 80156a6:	460c      	movge	r4, r1
 80156a8:	429c      	cmp	r4, r3
 80156aa:	bfac      	ite	ge
 80156ac:	ebc3 0404 	rsbge	r4, r3, r4
 80156b0:	ebc3 0403 	rsblt	r4, r3, r3
 80156b4:	6803      	ldr	r3, [r0, #0]
 80156b6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80156ba:	4798      	blx	r3
 80156bc:	682b      	ldr	r3, [r5, #0]
 80156be:	fb00 4404 	mla	r4, r0, r4, r4
 80156c2:	4628      	mov	r0, r5
 80156c4:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80156c8:	4798      	blx	r3
 80156ca:	f895 202c 	ldrb.w	r2, [r5, #44]	; 0x2c
 80156ce:	f9b5 30ec 	ldrsh.w	r3, [r5, #236]	; 0xec
 80156d2:	2a01      	cmp	r2, #1
 80156d4:	fb94 f0f0 	sdiv	r0, r4, r0
 80156d8:	bf08      	it	eq
 80156da:	f9b5 20ee 	ldrsheq.w	r2, [r5, #238]	; 0xee
 80156de:	4418      	add	r0, r3
 80156e0:	bf04      	itt	eq
 80156e2:	1a10      	subeq	r0, r2, r0
 80156e4:	18c0      	addeq	r0, r0, r3
 80156e6:	b200      	sxth	r0, r0
 80156e8:	bd38      	pop	{r3, r4, r5, pc}

080156ea <_ZNK8touchgfx6Slider15positionToValueEs>:
 80156ea:	b570      	push	{r4, r5, r6, lr}
 80156ec:	f9b0 30ec 	ldrsh.w	r3, [r0, #236]	; 0xec
 80156f0:	4605      	mov	r5, r0
 80156f2:	460c      	mov	r4, r1
 80156f4:	428b      	cmp	r3, r1
 80156f6:	d109      	bne.n	801570c <_ZNK8touchgfx6Slider15positionToValueEs+0x22>
 80156f8:	6b40      	ldr	r0, [r0, #52]	; 0x34
 80156fa:	f895 302c 	ldrb.w	r3, [r5, #44]	; 0x2c
 80156fe:	2b01      	cmp	r3, #1
 8015700:	bf01      	itttt	eq
 8015702:	6bab      	ldreq	r3, [r5, #56]	; 0x38
 8015704:	1a18      	subeq	r0, r3, r0
 8015706:	6b6b      	ldreq	r3, [r5, #52]	; 0x34
 8015708:	18c0      	addeq	r0, r0, r3
 801570a:	bd70      	pop	{r4, r5, r6, pc}
 801570c:	f9b0 30ee 	ldrsh.w	r3, [r0, #238]	; 0xee
 8015710:	428b      	cmp	r3, r1
 8015712:	d101      	bne.n	8015718 <_ZNK8touchgfx6Slider15positionToValueEs+0x2e>
 8015714:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8015716:	e7f0      	b.n	80156fa <_ZNK8touchgfx6Slider15positionToValueEs+0x10>
 8015718:	6803      	ldr	r3, [r0, #0]
 801571a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 801571e:	4798      	blx	r3
 8015720:	682b      	ldr	r3, [r5, #0]
 8015722:	f9b5 10ec 	ldrsh.w	r1, [r5, #236]	; 0xec
 8015726:	4606      	mov	r6, r0
 8015728:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 801572c:	4628      	mov	r0, r5
 801572e:	1a64      	subs	r4, r4, r1
 8015730:	4798      	blx	r3
 8015732:	2102      	movs	r1, #2
 8015734:	682b      	ldr	r3, [r5, #0]
 8015736:	fb96 f6f1 	sdiv	r6, r6, r1
 801573a:	fb00 6404 	mla	r4, r0, r4, r6
 801573e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8015742:	4628      	mov	r0, r5
 8015744:	4798      	blx	r3
 8015746:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8015748:	fb94 f0f0 	sdiv	r0, r4, r0
 801574c:	4418      	add	r0, r3
 801574e:	e7d4      	b.n	80156fa <_ZNK8touchgfx6Slider15positionToValueEs+0x10>

08015750 <_ZNK8touchgfx6Slider18getIndicatorRadiusEv>:
 8015750:	f890 202c 	ldrb.w	r2, [r0, #44]	; 0x2c
 8015754:	2302      	movs	r3, #2
 8015756:	b92a      	cbnz	r2, 8015764 <_ZNK8touchgfx6Slider18getIndicatorRadiusEv+0x14>
 8015758:	f9b0 009c 	ldrsh.w	r0, [r0, #156]	; 0x9c
 801575c:	fb90 f0f3 	sdiv	r0, r0, r3
 8015760:	b280      	uxth	r0, r0
 8015762:	4770      	bx	lr
 8015764:	f9b0 009e 	ldrsh.w	r0, [r0, #158]	; 0x9e
 8015768:	e7f8      	b.n	801575c <_ZNK8touchgfx6Slider18getIndicatorRadiusEv+0xc>

0801576a <_ZN8touchgfx6Slider13setValueRangeEii>:
 801576a:	6b03      	ldr	r3, [r0, #48]	; 0x30
 801576c:	428b      	cmp	r3, r1
 801576e:	b410      	push	{r4}
 8015770:	db09      	blt.n	8015786 <_ZN8touchgfx6Slider13setValueRangeEii+0x1c>
 8015772:	4293      	cmp	r3, r2
 8015774:	bfa8      	it	ge
 8015776:	4613      	movge	r3, r2
 8015778:	6804      	ldr	r4, [r0, #0]
 801577a:	f8d4 4090 	ldr.w	r4, [r4, #144]	; 0x90
 801577e:	46a4      	mov	ip, r4
 8015780:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015784:	4760      	bx	ip
 8015786:	460b      	mov	r3, r1
 8015788:	e7f6      	b.n	8015778 <_ZN8touchgfx6Slider13setValueRangeEii+0xe>

0801578a <_ZNK8touchgfx6Slider29getIndicatorPositionRangeSizeEv>:
 801578a:	f9b0 20ee 	ldrsh.w	r2, [r0, #238]	; 0xee
 801578e:	f9b0 00ec 	ldrsh.w	r0, [r0, #236]	; 0xec
 8015792:	1a10      	subs	r0, r2, r0
 8015794:	4770      	bx	lr

08015796 <_ZNK8touchgfx6Slider17getValueRangeSizeEv>:
 8015796:	e9d0 020d 	ldrd	r0, r2, [r0, #52]	; 0x34
 801579a:	1a10      	subs	r0, r2, r0
 801579c:	4770      	bx	lr
	...

080157a0 <_ZN8touchgfx6Slider13setValueRangeEiii>:
 80157a0:	4291      	cmp	r1, r2
 80157a2:	b510      	push	{r4, lr}
 80157a4:	db06      	blt.n	80157b4 <_ZN8touchgfx6Slider13setValueRangeEiii+0x14>
 80157a6:	4b08      	ldr	r3, [pc, #32]	; (80157c8 <_ZN8touchgfx6Slider13setValueRangeEiii+0x28>)
 80157a8:	f44f 7183 	mov.w	r1, #262	; 0x106
 80157ac:	4a07      	ldr	r2, [pc, #28]	; (80157cc <_ZN8touchgfx6Slider13setValueRangeEiii+0x2c>)
 80157ae:	4808      	ldr	r0, [pc, #32]	; (80157d0 <_ZN8touchgfx6Slider13setValueRangeEiii+0x30>)
 80157b0:	f011 fcba 	bl	8027128 <__assert_func>
 80157b4:	e9c0 120d 	strd	r1, r2, [r0, #52]	; 0x34
 80157b8:	6802      	ldr	r2, [r0, #0]
 80157ba:	4619      	mov	r1, r3
 80157bc:	f8d2 20a0 	ldr.w	r2, [r2, #160]	; 0xa0
 80157c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80157c4:	4710      	bx	r2
 80157c6:	bf00      	nop
 80157c8:	08029c12 	.word	0x08029c12
 80157cc:	08029eb1 	.word	0x08029eb1
 80157d0:	08029c6a 	.word	0x08029c6a

080157d4 <_ZN8touchgfx6Slider16handleClickEventERKNS_10ClickEventE>:
 80157d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80157d8:	790b      	ldrb	r3, [r1, #4]
 80157da:	4604      	mov	r4, r0
 80157dc:	460d      	mov	r5, r1
 80157de:	b323      	cbz	r3, 801582a <_ZN8touchgfx6Slider16handleClickEventERKNS_10ClickEventE+0x56>
 80157e0:	2b01      	cmp	r3, #1
 80157e2:	d135      	bne.n	8015850 <_ZN8touchgfx6Slider16handleClickEventERKNS_10ClickEventE+0x7c>
 80157e4:	6823      	ldr	r3, [r4, #0]
 80157e6:	f894 202c 	ldrb.w	r2, [r4, #44]	; 0x2c
 80157ea:	f8d3 70a4 	ldr.w	r7, [r3, #164]	; 0xa4
 80157ee:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80157f2:	2a00      	cmp	r2, #0
 80157f4:	d12a      	bne.n	801584c <_ZN8touchgfx6Slider16handleClickEventERKNS_10ClickEventE+0x78>
 80157f6:	88ee      	ldrh	r6, [r5, #6]
 80157f8:	4620      	mov	r0, r4
 80157fa:	4798      	blx	r3
 80157fc:	1a31      	subs	r1, r6, r0
 80157fe:	4620      	mov	r0, r4
 8015800:	b209      	sxth	r1, r1
 8015802:	47b8      	blx	r7
 8015804:	792b      	ldrb	r3, [r5, #4]
 8015806:	2b01      	cmp	r3, #1
 8015808:	d122      	bne.n	8015850 <_ZN8touchgfx6Slider16handleClickEventERKNS_10ClickEventE+0x7c>
 801580a:	f8d4 00f4 	ldr.w	r0, [r4, #244]	; 0xf4
 801580e:	b1f8      	cbz	r0, 8015850 <_ZN8touchgfx6Slider16handleClickEventERKNS_10ClickEventE+0x7c>
 8015810:	6803      	ldr	r3, [r0, #0]
 8015812:	68db      	ldr	r3, [r3, #12]
 8015814:	4798      	blx	r3
 8015816:	b1d8      	cbz	r0, 8015850 <_ZN8touchgfx6Slider16handleClickEventERKNS_10ClickEventE+0x7c>
 8015818:	f8d4 00f4 	ldr.w	r0, [r4, #244]	; 0xf4
 801581c:	4621      	mov	r1, r4
 801581e:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8015820:	6803      	ldr	r3, [r0, #0]
 8015822:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8015826:	689b      	ldr	r3, [r3, #8]
 8015828:	4718      	bx	r3
 801582a:	f8d0 00f0 	ldr.w	r0, [r0, #240]	; 0xf0
 801582e:	2800      	cmp	r0, #0
 8015830:	d0d8      	beq.n	80157e4 <_ZN8touchgfx6Slider16handleClickEventERKNS_10ClickEventE+0x10>
 8015832:	6803      	ldr	r3, [r0, #0]
 8015834:	68db      	ldr	r3, [r3, #12]
 8015836:	4798      	blx	r3
 8015838:	2800      	cmp	r0, #0
 801583a:	d0d3      	beq.n	80157e4 <_ZN8touchgfx6Slider16handleClickEventERKNS_10ClickEventE+0x10>
 801583c:	f8d4 00f0 	ldr.w	r0, [r4, #240]	; 0xf0
 8015840:	4621      	mov	r1, r4
 8015842:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8015844:	6803      	ldr	r3, [r0, #0]
 8015846:	689b      	ldr	r3, [r3, #8]
 8015848:	4798      	blx	r3
 801584a:	e7cb      	b.n	80157e4 <_ZN8touchgfx6Slider16handleClickEventERKNS_10ClickEventE+0x10>
 801584c:	892e      	ldrh	r6, [r5, #8]
 801584e:	e7d3      	b.n	80157f8 <_ZN8touchgfx6Slider16handleClickEventERKNS_10ClickEventE+0x24>
 8015850:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08015854 <_ZN8touchgfx6Slider15handleDragEventERKNS_9DragEventE>:
 8015854:	b570      	push	{r4, r5, r6, lr}
 8015856:	6803      	ldr	r3, [r0, #0]
 8015858:	4604      	mov	r4, r0
 801585a:	f890 202c 	ldrb.w	r2, [r0, #44]	; 0x2c
 801585e:	f8d3 60a4 	ldr.w	r6, [r3, #164]	; 0xa4
 8015862:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8015866:	b942      	cbnz	r2, 801587a <_ZN8touchgfx6Slider15handleDragEventERKNS_9DragEventE+0x26>
 8015868:	894d      	ldrh	r5, [r1, #10]
 801586a:	4798      	blx	r3
 801586c:	1a29      	subs	r1, r5, r0
 801586e:	4633      	mov	r3, r6
 8015870:	4620      	mov	r0, r4
 8015872:	b209      	sxth	r1, r1
 8015874:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015878:	4718      	bx	r3
 801587a:	898d      	ldrh	r5, [r1, #12]
 801587c:	e7f5      	b.n	801586a <_ZN8touchgfx6Slider15handleDragEventERKNS_9DragEventE+0x16>
	...

08015880 <_ZN8touchgfx6Slider21setupHorizontalSliderEttttt>:
 8015880:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015884:	f8bd 7030 	ldrh.w	r7, [sp, #48]	; 0x30
 8015888:	4604      	mov	r4, r0
 801588a:	f8bd 6034 	ldrh.w	r6, [sp, #52]	; 0x34
 801588e:	4689      	mov	r9, r1
 8015890:	4690      	mov	r8, r2
 8015892:	461d      	mov	r5, r3
 8015894:	42b7      	cmp	r7, r6
 8015896:	d305      	bcc.n	80158a4 <_ZN8touchgfx6Slider21setupHorizontalSliderEttttt+0x24>
 8015898:	4b26      	ldr	r3, [pc, #152]	; (8015934 <_ZN8touchgfx6Slider21setupHorizontalSliderEttttt+0xb4>)
 801589a:	2142      	movs	r1, #66	; 0x42
 801589c:	4a26      	ldr	r2, [pc, #152]	; (8015938 <_ZN8touchgfx6Slider21setupHorizontalSliderEttttt+0xb8>)
 801589e:	4827      	ldr	r0, [pc, #156]	; (801593c <_ZN8touchgfx6Slider21setupHorizontalSliderEttttt+0xbc>)
 80158a0:	f011 fc42 	bl	8027128 <__assert_func>
 80158a4:	f04f 0a00 	mov.w	sl, #0
 80158a8:	b213      	sxth	r3, r2
 80158aa:	fa0f fb81 	sxth.w	fp, r1
 80158ae:	303c      	adds	r0, #60	; 0x3c
 80158b0:	f800 ac10 	strb.w	sl, [r0, #-16]
 80158b4:	461a      	mov	r2, r3
 80158b6:	4659      	mov	r1, fp
 80158b8:	9301      	str	r3, [sp, #4]
 80158ba:	f7fb fbec 	bl	8011096 <_ZN8touchgfx8Drawable5setXYEss>
 80158be:	9b01      	ldr	r3, [sp, #4]
 80158c0:	4659      	mov	r1, fp
 80158c2:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
 80158c6:	461a      	mov	r2, r3
 80158c8:	f7fb fbe5 	bl	8011096 <_ZN8touchgfx8Drawable5setXYEss>
 80158cc:	4652      	mov	r2, sl
 80158ce:	4651      	mov	r1, sl
 80158d0:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80158d4:	f7fb fbdf 	bl	8011096 <_ZN8touchgfx8Drawable5setXYEss>
 80158d8:	f8b4 1044 	ldrh.w	r1, [r4, #68]	; 0x44
 80158dc:	f8b4 2046 	ldrh.w	r2, [r4, #70]	; 0x46
 80158e0:	4620      	mov	r0, r4
 80158e2:	4489      	add	r9, r1
 80158e4:	f8b4 109c 	ldrh.w	r1, [r4, #156]	; 0x9c
 80158e8:	4490      	add	r8, r2
 80158ea:	f8b4 209e 	ldrh.w	r2, [r4, #158]	; 0x9e
 80158ee:	4431      	add	r1, r6
 80158f0:	fa1f f989 	uxth.w	r9, r9
 80158f4:	442a      	add	r2, r5
 80158f6:	fa1f f888 	uxth.w	r8, r8
 80158fa:	b289      	uxth	r1, r1
 80158fc:	f8a4 509a 	strh.w	r5, [r4, #154]	; 0x9a
 8015900:	b292      	uxth	r2, r2
 8015902:	f8a4 70ec 	strh.w	r7, [r4, #236]	; 0xec
 8015906:	4589      	cmp	r9, r1
 8015908:	f8a4 60ee 	strh.w	r6, [r4, #238]	; 0xee
 801590c:	bf8c      	ite	hi
 801590e:	fa0f f189 	sxthhi.w	r1, r9
 8015912:	b209      	sxthls	r1, r1
 8015914:	4590      	cmp	r8, r2
 8015916:	bf8c      	ite	hi
 8015918:	fa0f f288 	sxthhi.w	r2, r8
 801591c:	b212      	sxthls	r2, r2
 801591e:	f7fb fc16 	bl	801114e <_ZN8touchgfx8Drawable14setWidthHeightEss>
 8015922:	6823      	ldr	r3, [r4, #0]
 8015924:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8015926:	4620      	mov	r0, r4
 8015928:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 801592c:	b003      	add	sp, #12
 801592e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015932:	4718      	bx	r3
 8015934:	08029d0c 	.word	0x08029d0c
 8015938:	08029f52 	.word	0x08029f52
 801593c:	08029c6a 	.word	0x08029c6a

08015940 <_ZN8touchgfx6Slider19setupVerticalSliderEttttt>:
 8015940:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015944:	f8bd 7028 	ldrh.w	r7, [sp, #40]	; 0x28
 8015948:	4604      	mov	r4, r0
 801594a:	f8bd 602c 	ldrh.w	r6, [sp, #44]	; 0x2c
 801594e:	4689      	mov	r9, r1
 8015950:	4690      	mov	r8, r2
 8015952:	461d      	mov	r5, r3
 8015954:	42b7      	cmp	r7, r6
 8015956:	d305      	bcc.n	8015964 <_ZN8touchgfx6Slider19setupVerticalSliderEttttt+0x24>
 8015958:	4b22      	ldr	r3, [pc, #136]	; (80159e4 <_ZN8touchgfx6Slider19setupVerticalSliderEttttt+0xa4>)
 801595a:	215d      	movs	r1, #93	; 0x5d
 801595c:	4a22      	ldr	r2, [pc, #136]	; (80159e8 <_ZN8touchgfx6Slider19setupVerticalSliderEttttt+0xa8>)
 801595e:	4823      	ldr	r0, [pc, #140]	; (80159ec <_ZN8touchgfx6Slider19setupVerticalSliderEttttt+0xac>)
 8015960:	f011 fbe2 	bl	8027128 <__assert_func>
 8015964:	2301      	movs	r3, #1
 8015966:	fa0f fa81 	sxth.w	sl, r1
 801596a:	fa0f fb82 	sxth.w	fp, r2
 801596e:	303c      	adds	r0, #60	; 0x3c
 8015970:	f800 3c10 	strb.w	r3, [r0, #-16]
 8015974:	4651      	mov	r1, sl
 8015976:	465a      	mov	r2, fp
 8015978:	f7fb fb8d 	bl	8011096 <_ZN8touchgfx8Drawable5setXYEss>
 801597c:	465a      	mov	r2, fp
 801597e:	4651      	mov	r1, sl
 8015980:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
 8015984:	f7fb fb87 	bl	8011096 <_ZN8touchgfx8Drawable5setXYEss>
 8015988:	f8b4 1044 	ldrh.w	r1, [r4, #68]	; 0x44
 801598c:	f8b4 2046 	ldrh.w	r2, [r4, #70]	; 0x46
 8015990:	4620      	mov	r0, r4
 8015992:	4489      	add	r9, r1
 8015994:	f8b4 109c 	ldrh.w	r1, [r4, #156]	; 0x9c
 8015998:	4490      	add	r8, r2
 801599a:	f8b4 209e 	ldrh.w	r2, [r4, #158]	; 0x9e
 801599e:	4429      	add	r1, r5
 80159a0:	fa1f f989 	uxth.w	r9, r9
 80159a4:	4432      	add	r2, r6
 80159a6:	fa1f f888 	uxth.w	r8, r8
 80159aa:	b289      	uxth	r1, r1
 80159ac:	f8a4 5098 	strh.w	r5, [r4, #152]	; 0x98
 80159b0:	b292      	uxth	r2, r2
 80159b2:	f8a4 70ec 	strh.w	r7, [r4, #236]	; 0xec
 80159b6:	4589      	cmp	r9, r1
 80159b8:	f8a4 60ee 	strh.w	r6, [r4, #238]	; 0xee
 80159bc:	bf8c      	ite	hi
 80159be:	fa0f f189 	sxthhi.w	r1, r9
 80159c2:	b209      	sxthls	r1, r1
 80159c4:	4590      	cmp	r8, r2
 80159c6:	bf8c      	ite	hi
 80159c8:	fa0f f288 	sxthhi.w	r2, r8
 80159cc:	b212      	sxthls	r2, r2
 80159ce:	f7fb fbbe 	bl	801114e <_ZN8touchgfx8Drawable14setWidthHeightEss>
 80159d2:	6823      	ldr	r3, [r4, #0]
 80159d4:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80159d6:	4620      	mov	r0, r4
 80159d8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80159dc:	b001      	add	sp, #4
 80159de:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80159e2:	4718      	bx	r3
 80159e4:	08029c9a 	.word	0x08029c9a
 80159e8:	08029eed 	.word	0x08029eed
 80159ec:	08029c6a 	.word	0x08029c6a

080159f0 <_ZN8touchgfx6Slider23updateIndicatorPositionEs>:
 80159f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80159f4:	f9b0 80ec 	ldrsh.w	r8, [r0, #236]	; 0xec
 80159f8:	4604      	mov	r4, r0
 80159fa:	3094      	adds	r0, #148	; 0x94
 80159fc:	4588      	cmp	r8, r1
 80159fe:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 8015a02:	f104 06c0 	add.w	r6, r4, #192	; 0xc0
 8015a06:	bfb8      	it	lt
 8015a08:	4688      	movlt	r8, r1
 8015a0a:	f9b0 105a 	ldrsh.w	r1, [r0, #90]	; 0x5a
 8015a0e:	4588      	cmp	r8, r1
 8015a10:	bfa8      	it	ge
 8015a12:	4688      	movge	r8, r1
 8015a14:	fa1f f788 	uxth.w	r7, r8
 8015a18:	2b00      	cmp	r3, #0
 8015a1a:	d12f      	bne.n	8015a7c <_ZN8touchgfx6Slider23updateIndicatorPositionEs+0x8c>
 8015a1c:	f9b4 209a 	ldrsh.w	r2, [r4, #154]	; 0x9a
 8015a20:	4641      	mov	r1, r8
 8015a22:	f7fb fbe1 	bl	80111e8 <_ZN8touchgfx8Drawable6moveToEss>
 8015a26:	4630      	mov	r0, r6
 8015a28:	f003 fff8 	bl	8019a1c <_ZNK8touchgfx8Drawable10invalidateEv>
 8015a2c:	f8b4 20c4 	ldrh.w	r2, [r4, #196]	; 0xc4
 8015a30:	6823      	ldr	r3, [r4, #0]
 8015a32:	4620      	mov	r0, r4
 8015a34:	1abf      	subs	r7, r7, r2
 8015a36:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8015a3a:	b2bf      	uxth	r7, r7
 8015a3c:	4798      	blx	r3
 8015a3e:	4407      	add	r7, r0
 8015a40:	f8a4 70c8 	strh.w	r7, [r4, #200]	; 0xc8
 8015a44:	4630      	mov	r0, r6
 8015a46:	f003 ffe9 	bl	8019a1c <_ZNK8touchgfx8Drawable10invalidateEv>
 8015a4a:	6823      	ldr	r3, [r4, #0]
 8015a4c:	4641      	mov	r1, r8
 8015a4e:	4620      	mov	r0, r4
 8015a50:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8015a54:	4798      	blx	r3
 8015a56:	6320      	str	r0, [r4, #48]	; 0x30
 8015a58:	f8d4 00f8 	ldr.w	r0, [r4, #248]	; 0xf8
 8015a5c:	2800      	cmp	r0, #0
 8015a5e:	d03d      	beq.n	8015adc <_ZN8touchgfx6Slider23updateIndicatorPositionEs+0xec>
 8015a60:	6803      	ldr	r3, [r0, #0]
 8015a62:	68db      	ldr	r3, [r3, #12]
 8015a64:	4798      	blx	r3
 8015a66:	2800      	cmp	r0, #0
 8015a68:	d038      	beq.n	8015adc <_ZN8touchgfx6Slider23updateIndicatorPositionEs+0xec>
 8015a6a:	f8d4 00f8 	ldr.w	r0, [r4, #248]	; 0xf8
 8015a6e:	4621      	mov	r1, r4
 8015a70:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8015a72:	6803      	ldr	r3, [r0, #0]
 8015a74:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015a78:	689b      	ldr	r3, [r3, #8]
 8015a7a:	4718      	bx	r3
 8015a7c:	4642      	mov	r2, r8
 8015a7e:	f9b4 1098 	ldrsh.w	r1, [r4, #152]	; 0x98
 8015a82:	f7fb fbb1 	bl	80111e8 <_ZN8touchgfx8Drawable6moveToEss>
 8015a86:	4630      	mov	r0, r6
 8015a88:	f003 ffc8 	bl	8019a1c <_ZNK8touchgfx8Drawable10invalidateEv>
 8015a8c:	f8b4 0042 	ldrh.w	r0, [r4, #66]	; 0x42
 8015a90:	f8b4 5046 	ldrh.w	r5, [r4, #70]	; 0x46
 8015a94:	6823      	ldr	r3, [r4, #0]
 8015a96:	4405      	add	r5, r0
 8015a98:	4620      	mov	r0, r4
 8015a9a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8015a9e:	b2ad      	uxth	r5, r5
 8015aa0:	4798      	blx	r3
 8015aa2:	6823      	ldr	r3, [r4, #0]
 8015aa4:	1bed      	subs	r5, r5, r7
 8015aa6:	f9b4 a0c4 	ldrsh.w	sl, [r4, #196]	; 0xc4
 8015aaa:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8015aae:	1a2d      	subs	r5, r5, r0
 8015ab0:	4620      	mov	r0, r4
 8015ab2:	4798      	blx	r3
 8015ab4:	4438      	add	r0, r7
 8015ab6:	b2ad      	uxth	r5, r5
 8015ab8:	f9b4 90c8 	ldrsh.w	r9, [r4, #200]	; 0xc8
 8015abc:	b202      	sxth	r2, r0
 8015abe:	4651      	mov	r1, sl
 8015ac0:	4630      	mov	r0, r6
 8015ac2:	f7fb fae8 	bl	8011096 <_ZN8touchgfx8Drawable5setXYEss>
 8015ac6:	4630      	mov	r0, r6
 8015ac8:	b22a      	sxth	r2, r5
 8015aca:	4649      	mov	r1, r9
 8015acc:	f7fb fb3f 	bl	801114e <_ZN8touchgfx8Drawable14setWidthHeightEss>
 8015ad0:	f8b4 0072 	ldrh.w	r0, [r4, #114]	; 0x72
 8015ad4:	1a2d      	subs	r5, r5, r0
 8015ad6:	f8a4 506e 	strh.w	r5, [r4, #110]	; 0x6e
 8015ada:	e7b3      	b.n	8015a44 <_ZN8touchgfx6Slider23updateIndicatorPositionEs+0x54>
 8015adc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08015ae0 <_ZN8touchgfx9ContainerC1Ev>:
 8015ae0:	2101      	movs	r1, #1
 8015ae2:	2200      	movs	r2, #0
 8015ae4:	f880 1025 	strb.w	r1, [r0, #37]	; 0x25
 8015ae8:	4908      	ldr	r1, [pc, #32]	; (8015b0c <_ZN8touchgfx9ContainerC1Ev+0x2c>)
 8015aea:	8082      	strh	r2, [r0, #4]
 8015aec:	80c2      	strh	r2, [r0, #6]
 8015aee:	8102      	strh	r2, [r0, #8]
 8015af0:	8142      	strh	r2, [r0, #10]
 8015af2:	8182      	strh	r2, [r0, #12]
 8015af4:	81c2      	strh	r2, [r0, #14]
 8015af6:	8202      	strh	r2, [r0, #16]
 8015af8:	8242      	strh	r2, [r0, #18]
 8015afa:	61c2      	str	r2, [r0, #28]
 8015afc:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
 8015b00:	6001      	str	r1, [r0, #0]
 8015b02:	6282      	str	r2, [r0, #40]	; 0x28
 8015b04:	e9c0 2205 	strd	r2, r2, [r0, #20]
 8015b08:	4770      	bx	lr
 8015b0a:	bf00      	nop
 8015b0c:	08029a78 	.word	0x08029a78

08015b10 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>:
 8015b10:	2300      	movs	r3, #0
 8015b12:	b510      	push	{r4, lr}
 8015b14:	8083      	strh	r3, [r0, #4]
 8015b16:	4604      	mov	r4, r0
 8015b18:	80c3      	strh	r3, [r0, #6]
 8015b1a:	8103      	strh	r3, [r0, #8]
 8015b1c:	8143      	strh	r3, [r0, #10]
 8015b1e:	8183      	strh	r3, [r0, #12]
 8015b20:	81c3      	strh	r3, [r0, #14]
 8015b22:	8203      	strh	r3, [r0, #16]
 8015b24:	8243      	strh	r3, [r0, #18]
 8015b26:	61c3      	str	r3, [r0, #28]
 8015b28:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
 8015b2c:	e9c0 3305 	strd	r3, r3, [r0, #20]
 8015b30:	2301      	movs	r3, #1
 8015b32:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
 8015b36:	4b05      	ldr	r3, [pc, #20]	; (8015b4c <_ZN8touchgfx5ImageC1ERKNS_6BitmapE+0x3c>)
 8015b38:	6003      	str	r3, [r0, #0]
 8015b3a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8015b3e:	84c3      	strh	r3, [r0, #38]	; 0x26
 8015b40:	f880 3028 	strb.w	r3, [r0, #40]	; 0x28
 8015b44:	f001 fb28 	bl	8017198 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 8015b48:	4620      	mov	r0, r4
 8015b4a:	bd10      	pop	{r4, pc}
 8015b4c:	0802aabc 	.word	0x0802aabc

08015b50 <_ZN8touchgfx6SliderC1Ev>:
 8015b50:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015b54:	4604      	mov	r4, r0
 8015b56:	2500      	movs	r5, #0
 8015b58:	f7ff ffc2 	bl	8015ae0 <_ZN8touchgfx9ContainerC1Ev>
 8015b5c:	ae02      	add	r6, sp, #8
 8015b5e:	4b25      	ldr	r3, [pc, #148]	; (8015bf4 <_ZN8touchgfx6SliderC1Ev+0xa4>)
 8015b60:	f64f 77ff 	movw	r7, #65535	; 0xffff
 8015b64:	f04f 0b01 	mov.w	fp, #1
 8015b68:	f104 093c 	add.w	r9, r4, #60	; 0x3c
 8015b6c:	f104 0a68 	add.w	sl, r4, #104	; 0x68
 8015b70:	6023      	str	r3, [r4, #0]
 8015b72:	f826 7d04 	strh.w	r7, [r6, #-4]!
 8015b76:	4648      	mov	r0, r9
 8015b78:	4631      	mov	r1, r6
 8015b7a:	f884 502c 	strb.w	r5, [r4, #44]	; 0x2c
 8015b7e:	f8c4 b038 	str.w	fp, [r4, #56]	; 0x38
 8015b82:	f104 0894 	add.w	r8, r4, #148	; 0x94
 8015b86:	e9c4 550c 	strd	r5, r5, [r4, #48]	; 0x30
 8015b8a:	f7ff ffc1 	bl	8015b10 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 8015b8e:	4631      	mov	r1, r6
 8015b90:	4650      	mov	r0, sl
 8015b92:	f8ad 7004 	strh.w	r7, [sp, #4]
 8015b96:	f7ff ffbb 	bl	8015b10 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 8015b9a:	4631      	mov	r1, r6
 8015b9c:	f104 06c0 	add.w	r6, r4, #192	; 0xc0
 8015ba0:	4640      	mov	r0, r8
 8015ba2:	f8ad 7004 	strh.w	r7, [sp, #4]
 8015ba6:	f7ff ffb3 	bl	8015b10 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 8015baa:	4630      	mov	r0, r6
 8015bac:	f7ff ff98 	bl	8015ae0 <_ZN8touchgfx9ContainerC1Ev>
 8015bb0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8015bb4:	4651      	mov	r1, sl
 8015bb6:	4630      	mov	r0, r6
 8015bb8:	f884 b024 	strb.w	fp, [r4, #36]	; 0x24
 8015bbc:	e9c4 353b 	strd	r3, r5, [r4, #236]	; 0xec
 8015bc0:	e9c4 553d 	strd	r5, r5, [r4, #244]	; 0xf4
 8015bc4:	f7ff fc1e 	bl	8015404 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8015bc8:	4649      	mov	r1, r9
 8015bca:	4620      	mov	r0, r4
 8015bcc:	f7ff fc1a 	bl	8015404 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8015bd0:	4631      	mov	r1, r6
 8015bd2:	4620      	mov	r0, r4
 8015bd4:	f7ff fc16 	bl	8015404 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8015bd8:	4641      	mov	r1, r8
 8015bda:	4620      	mov	r0, r4
 8015bdc:	f7ff fc12 	bl	8015404 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8015be0:	4620      	mov	r0, r4
 8015be2:	2264      	movs	r2, #100	; 0x64
 8015be4:	4629      	mov	r1, r5
 8015be6:	f7ff fdc0 	bl	801576a <_ZN8touchgfx6Slider13setValueRangeEii>
 8015bea:	4620      	mov	r0, r4
 8015bec:	b003      	add	sp, #12
 8015bee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015bf2:	bf00      	nop
 8015bf4:	08029d88 	.word	0x08029d88

08015bf8 <_ZN8touchgfx6Slider10setBitmapsERKNS_6BitmapES3_S3_>:
 8015bf8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015bfc:	4615      	mov	r5, r2
 8015bfe:	4604      	mov	r4, r0
 8015c00:	4608      	mov	r0, r1
 8015c02:	460e      	mov	r6, r1
 8015c04:	461f      	mov	r7, r3
 8015c06:	f005 fc65 	bl	801b4d4 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8015c0a:	4680      	mov	r8, r0
 8015c0c:	4628      	mov	r0, r5
 8015c0e:	f005 fc61 	bl	801b4d4 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8015c12:	4580      	cmp	r8, r0
 8015c14:	d005      	beq.n	8015c22 <_ZN8touchgfx6Slider10setBitmapsERKNS_6BitmapES3_S3_+0x2a>
 8015c16:	4b14      	ldr	r3, [pc, #80]	; (8015c68 <_ZN8touchgfx6Slider10setBitmapsERKNS_6BitmapES3_S3_+0x70>)
 8015c18:	2133      	movs	r1, #51	; 0x33
 8015c1a:	4a14      	ldr	r2, [pc, #80]	; (8015c6c <_ZN8touchgfx6Slider10setBitmapsERKNS_6BitmapES3_S3_+0x74>)
 8015c1c:	4814      	ldr	r0, [pc, #80]	; (8015c70 <_ZN8touchgfx6Slider10setBitmapsERKNS_6BitmapES3_S3_+0x78>)
 8015c1e:	f011 fa83 	bl	8027128 <__assert_func>
 8015c22:	4630      	mov	r0, r6
 8015c24:	f005 fc90 	bl	801b548 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8015c28:	4680      	mov	r8, r0
 8015c2a:	4628      	mov	r0, r5
 8015c2c:	f005 fc8c 	bl	801b548 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8015c30:	4580      	cmp	r8, r0
 8015c32:	d1f0      	bne.n	8015c16 <_ZN8touchgfx6Slider10setBitmapsERKNS_6BitmapES3_S3_+0x1e>
 8015c34:	4631      	mov	r1, r6
 8015c36:	f104 003c 	add.w	r0, r4, #60	; 0x3c
 8015c3a:	f001 faad 	bl	8017198 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 8015c3e:	4629      	mov	r1, r5
 8015c40:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8015c44:	f001 faa8 	bl	8017198 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 8015c48:	4639      	mov	r1, r7
 8015c4a:	f104 0094 	add.w	r0, r4, #148	; 0x94
 8015c4e:	f001 faa3 	bl	8017198 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 8015c52:	f9b4 2072 	ldrsh.w	r2, [r4, #114]	; 0x72
 8015c56:	f9b4 1070 	ldrsh.w	r1, [r4, #112]	; 0x70
 8015c5a:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
 8015c5e:	f7fb fa76 	bl	801114e <_ZN8touchgfx8Drawable14setWidthHeightEss>
 8015c62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015c66:	bf00      	nop
 8015c68:	08029b33 	.word	0x08029b33
 8015c6c:	08029e44 	.word	0x08029e44
 8015c70:	08029c6a 	.word	0x08029c6a

08015c74 <_ZN8touchgfx3HAL17getTFTCurrentLineEv>:
 8015c74:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8015c78:	4770      	bx	lr

08015c7a <_ZN8touchgfx3HAL15InvalidateCacheEv>:
 8015c7a:	4770      	bx	lr

08015c7c <_ZN8touchgfx3HAL10FlushCacheEv>:
 8015c7c:	4770      	bx	lr

08015c7e <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEt>:
 8015c7e:	6803      	ldr	r3, [r0, #0]
 8015c80:	b513      	push	{r0, r1, r4, lr}
 8015c82:	f8d3 408c 	ldr.w	r4, [r3, #140]	; 0x8c
 8015c86:	2300      	movs	r3, #0
 8015c88:	e9cd 3300 	strd	r3, r3, [sp]
 8015c8c:	466b      	mov	r3, sp
 8015c8e:	47a0      	blx	r4
 8015c90:	b002      	add	sp, #8
 8015c92:	bd10      	pop	{r4, pc}

08015c94 <_ZN8touchgfx3HAL16flushFrameBufferEv>:
 8015c94:	2301      	movs	r3, #1
 8015c96:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
 8015c9a:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
 8015c9e:	4770      	bx	lr

08015ca0 <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>:
 8015ca0:	2301      	movs	r3, #1
 8015ca2:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
 8015ca6:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
 8015caa:	4770      	bx	lr

08015cac <_ZN8touchgfx3HAL17allowDMATransfersEv>:
 8015cac:	6843      	ldr	r3, [r0, #4]
 8015cae:	2201      	movs	r2, #1
 8015cb0:	725a      	strb	r2, [r3, #9]
 8015cb2:	6840      	ldr	r0, [r0, #4]
 8015cb4:	6803      	ldr	r3, [r0, #0]
 8015cb6:	691b      	ldr	r3, [r3, #16]
 8015cb8:	4718      	bx	r3

08015cba <_ZN8touchgfx3HAL8flushDMAEv>:
 8015cba:	6840      	ldr	r0, [r0, #4]
 8015cbc:	6803      	ldr	r3, [r0, #0]
 8015cbe:	689b      	ldr	r3, [r3, #8]
 8015cc0:	4718      	bx	r3
	...

08015cc4 <_ZN8touchgfx3HAL10beginFrameEv>:
 8015cc4:	4b04      	ldr	r3, [pc, #16]	; (8015cd8 <_ZN8touchgfx3HAL10beginFrameEv+0x14>)
 8015cc6:	781b      	ldrb	r3, [r3, #0]
 8015cc8:	b123      	cbz	r3, 8015cd4 <_ZN8touchgfx3HAL10beginFrameEv+0x10>
 8015cca:	f890 006a 	ldrb.w	r0, [r0, #106]	; 0x6a
 8015cce:	f080 0001 	eor.w	r0, r0, #1
 8015cd2:	4770      	bx	lr
 8015cd4:	2001      	movs	r0, #1
 8015cd6:	4770      	bx	lr
 8015cd8:	2000580a 	.word	0x2000580a

08015cdc <_ZN8touchgfx3HAL8endFrameEv>:
 8015cdc:	b510      	push	{r4, lr}
 8015cde:	4604      	mov	r4, r0
 8015ce0:	6840      	ldr	r0, [r0, #4]
 8015ce2:	6803      	ldr	r3, [r0, #0]
 8015ce4:	689b      	ldr	r3, [r3, #8]
 8015ce6:	4798      	blx	r3
 8015ce8:	f894 3069 	ldrb.w	r3, [r4, #105]	; 0x69
 8015cec:	b113      	cbz	r3, 8015cf4 <_ZN8touchgfx3HAL8endFrameEv+0x18>
 8015cee:	2301      	movs	r3, #1
 8015cf0:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
 8015cf4:	bd10      	pop	{r4, pc}

08015cf6 <_ZN8touchgfx3HAL9taskEntryEv>:
 8015cf6:	b508      	push	{r3, lr}
 8015cf8:	6803      	ldr	r3, [r0, #0]
 8015cfa:	4604      	mov	r4, r0
 8015cfc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8015cfe:	4798      	blx	r3
 8015d00:	6823      	ldr	r3, [r4, #0]
 8015d02:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8015d04:	4620      	mov	r0, r4
 8015d06:	4798      	blx	r3
 8015d08:	f7fe f91c 	bl	8013f44 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
 8015d0c:	6823      	ldr	r3, [r4, #0]
 8015d0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8015d10:	e7f8      	b.n	8015d04 <_ZN8touchgfx3HAL9taskEntryEv+0xe>
	...

08015d14 <_ZN8touchgfx3HAL4tickEv>:
 8015d14:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8015d16:	6803      	ldr	r3, [r0, #0]
 8015d18:	4604      	mov	r4, r0
 8015d1a:	4d5c      	ldr	r5, [pc, #368]	; (8015e8c <_ZN8touchgfx3HAL4tickEv+0x178>)
 8015d1c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8015d20:	4798      	blx	r3
 8015d22:	2800      	cmp	r0, #0
 8015d24:	f000 8097 	beq.w	8015e56 <_ZN8touchgfx3HAL4tickEv+0x142>
 8015d28:	2001      	movs	r0, #1
 8015d2a:	2600      	movs	r6, #0
 8015d2c:	f7fd fe80 	bl	8013a30 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 8015d30:	f894 3066 	ldrb.w	r3, [r4, #102]	; 0x66
 8015d34:	f884 604b 	strb.w	r6, [r4, #75]	; 0x4b
 8015d38:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
 8015d3c:	f894 3075 	ldrb.w	r3, [r4, #117]	; 0x75
 8015d40:	f884 6066 	strb.w	r6, [r4, #102]	; 0x66
 8015d44:	b133      	cbz	r3, 8015d54 <_ZN8touchgfx3HAL4tickEv+0x40>
 8015d46:	6823      	ldr	r3, [r4, #0]
 8015d48:	4620      	mov	r0, r4
 8015d4a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8015d4e:	4798      	blx	r3
 8015d50:	f884 6075 	strb.w	r6, [r4, #117]	; 0x75
 8015d54:	f894 304a 	ldrb.w	r3, [r4, #74]	; 0x4a
 8015d58:	2601      	movs	r6, #1
 8015d5a:	6862      	ldr	r2, [r4, #4]
 8015d5c:	f083 0301 	eor.w	r3, r3, #1
 8015d60:	702e      	strb	r6, [r5, #0]
 8015d62:	7253      	strb	r3, [r2, #9]
 8015d64:	f002 fefc 	bl	8018b60 <_ZN8touchgfx11Application11getInstanceEv>
 8015d68:	6803      	ldr	r3, [r0, #0]
 8015d6a:	4631      	mov	r1, r6
 8015d6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015d6e:	4798      	blx	r3
 8015d70:	f894 3067 	ldrb.w	r3, [r4, #103]	; 0x67
 8015d74:	b90b      	cbnz	r3, 8015d7a <_ZN8touchgfx3HAL4tickEv+0x66>
 8015d76:	f884 6067 	strb.w	r6, [r4, #103]	; 0x67
 8015d7a:	f002 fef1 	bl	8018b60 <_ZN8touchgfx11Application11getInstanceEv>
 8015d7e:	6803      	ldr	r3, [r0, #0]
 8015d80:	695b      	ldr	r3, [r3, #20]
 8015d82:	4798      	blx	r3
 8015d84:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8015d86:	6803      	ldr	r3, [r0, #0]
 8015d88:	691b      	ldr	r3, [r3, #16]
 8015d8a:	4798      	blx	r3
 8015d8c:	f894 3067 	ldrb.w	r3, [r4, #103]	; 0x67
 8015d90:	f894 2068 	ldrb.w	r2, [r4, #104]	; 0x68
 8015d94:	3b01      	subs	r3, #1
 8015d96:	b2db      	uxtb	r3, r3
 8015d98:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
 8015d9c:	b10a      	cbz	r2, 8015da2 <_ZN8touchgfx3HAL4tickEv+0x8e>
 8015d9e:	2b00      	cmp	r3, #0
 8015da0:	d1eb      	bne.n	8015d7a <_ZN8touchgfx3HAL4tickEv+0x66>
 8015da2:	4a3b      	ldr	r2, [pc, #236]	; (8015e90 <_ZN8touchgfx3HAL4tickEv+0x17c>)
 8015da4:	f994 1064 	ldrsb.w	r1, [r4, #100]	; 0x64
 8015da8:	7813      	ldrb	r3, [r2, #0]
 8015daa:	3301      	adds	r3, #1
 8015dac:	b25b      	sxtb	r3, r3
 8015dae:	4299      	cmp	r1, r3
 8015db0:	7013      	strb	r3, [r2, #0]
 8015db2:	dc10      	bgt.n	8015dd6 <_ZN8touchgfx3HAL4tickEv+0xc2>
 8015db4:	2300      	movs	r3, #0
 8015db6:	68e0      	ldr	r0, [r4, #12]
 8015db8:	a902      	add	r1, sp, #8
 8015dba:	7013      	strb	r3, [r2, #0]
 8015dbc:	aa03      	add	r2, sp, #12
 8015dbe:	6803      	ldr	r3, [r0, #0]
 8015dc0:	68db      	ldr	r3, [r3, #12]
 8015dc2:	4798      	blx	r3
 8015dc4:	6823      	ldr	r3, [r4, #0]
 8015dc6:	2800      	cmp	r0, #0
 8015dc8:	d051      	beq.n	8015e6e <_ZN8touchgfx3HAL4tickEv+0x15a>
 8015dca:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8015dce:	4620      	mov	r0, r4
 8015dd0:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8015dd4:	4798      	blx	r3
 8015dd6:	2300      	movs	r3, #0
 8015dd8:	6960      	ldr	r0, [r4, #20]
 8015dda:	f88d 3007 	strb.w	r3, [sp, #7]
 8015dde:	b158      	cbz	r0, 8015df8 <_ZN8touchgfx3HAL4tickEv+0xe4>
 8015de0:	6803      	ldr	r3, [r0, #0]
 8015de2:	f10d 0107 	add.w	r1, sp, #7
 8015de6:	68db      	ldr	r3, [r3, #12]
 8015de8:	4798      	blx	r3
 8015dea:	b128      	cbz	r0, 8015df8 <_ZN8touchgfx3HAL4tickEv+0xe4>
 8015dec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8015dee:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8015df2:	6803      	ldr	r3, [r0, #0]
 8015df4:	68db      	ldr	r3, [r3, #12]
 8015df6:	4798      	blx	r3
 8015df8:	f104 001c 	add.w	r0, r4, #28
 8015dfc:	f011 f8ac 	bl	8026f58 <_ZN8touchgfx8Gestures4tickEv>
 8015e00:	f894 306c 	ldrb.w	r3, [r4, #108]	; 0x6c
 8015e04:	b30b      	cbz	r3, 8015e4a <_ZN8touchgfx3HAL4tickEv+0x136>
 8015e06:	6920      	ldr	r0, [r4, #16]
 8015e08:	6803      	ldr	r3, [r0, #0]
 8015e0a:	691b      	ldr	r3, [r3, #16]
 8015e0c:	4798      	blx	r3
 8015e0e:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8015e10:	4606      	mov	r6, r0
 8015e12:	b903      	cbnz	r3, 8015e16 <_ZN8touchgfx3HAL4tickEv+0x102>
 8015e14:	6720      	str	r0, [r4, #112]	; 0x70
 8015e16:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8015e18:	4a1e      	ldr	r2, [pc, #120]	; (8015e94 <_ZN8touchgfx3HAL4tickEv+0x180>)
 8015e1a:	1af3      	subs	r3, r6, r3
 8015e1c:	4293      	cmp	r3, r2
 8015e1e:	d914      	bls.n	8015e4a <_ZN8touchgfx3HAL4tickEv+0x136>
 8015e20:	6920      	ldr	r0, [r4, #16]
 8015e22:	6803      	ldr	r3, [r0, #0]
 8015e24:	699b      	ldr	r3, [r3, #24]
 8015e26:	4798      	blx	r3
 8015e28:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8015e2a:	2264      	movs	r2, #100	; 0x64
 8015e2c:	1af3      	subs	r3, r6, r3
 8015e2e:	fbb3 f3f2 	udiv	r3, r3, r2
 8015e32:	fbb0 f0f3 	udiv	r0, r0, r3
 8015e36:	2800      	cmp	r0, #0
 8015e38:	dc1e      	bgt.n	8015e78 <_ZN8touchgfx3HAL4tickEv+0x164>
 8015e3a:	f884 2065 	strb.w	r2, [r4, #101]	; 0x65
 8015e3e:	6920      	ldr	r0, [r4, #16]
 8015e40:	2100      	movs	r1, #0
 8015e42:	6803      	ldr	r3, [r0, #0]
 8015e44:	69db      	ldr	r3, [r3, #28]
 8015e46:	4798      	blx	r3
 8015e48:	6726      	str	r6, [r4, #112]	; 0x70
 8015e4a:	f002 fe89 	bl	8018b60 <_ZN8touchgfx11Application11getInstanceEv>
 8015e4e:	6803      	ldr	r3, [r0, #0]
 8015e50:	2100      	movs	r1, #0
 8015e52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015e54:	4798      	blx	r3
 8015e56:	6823      	ldr	r3, [r4, #0]
 8015e58:	4620      	mov	r0, r4
 8015e5a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8015e5e:	4798      	blx	r3
 8015e60:	2001      	movs	r0, #1
 8015e62:	f7fd fdf0 	bl	8013a46 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 8015e66:	2300      	movs	r3, #0
 8015e68:	702b      	strb	r3, [r5, #0]
 8015e6a:	b004      	add	sp, #16
 8015e6c:	bd70      	pop	{r4, r5, r6, pc}
 8015e6e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8015e72:	4620      	mov	r0, r4
 8015e74:	4798      	blx	r3
 8015e76:	e7ae      	b.n	8015dd6 <_ZN8touchgfx3HAL4tickEv+0xc2>
 8015e78:	2863      	cmp	r0, #99	; 0x63
 8015e7a:	bfcb      	itete	gt
 8015e7c:	2300      	movgt	r3, #0
 8015e7e:	f1c0 0064 	rsble	r0, r0, #100	; 0x64
 8015e82:	f884 3065 	strbgt.w	r3, [r4, #101]	; 0x65
 8015e86:	f884 0065 	strble.w	r0, [r4, #101]	; 0x65
 8015e8a:	e7d8      	b.n	8015e3e <_ZN8touchgfx3HAL4tickEv+0x12a>
 8015e8c:	20005810 	.word	0x20005810
 8015e90:	20005811 	.word	0x20005811
 8015e94:	05f5e100 	.word	0x05f5e100

08015e98 <_ZN8touchgfx3HAL17unlockFrameBufferEv>:
 8015e98:	f7fe b820 	b.w	8013edc <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

08015e9c <_ZN8touchgfx3HAL21registerEventListenerERNS_15UIEventListenerE>:
 8015e9c:	6581      	str	r1, [r0, #88]	; 0x58
 8015e9e:	301c      	adds	r0, #28
 8015ea0:	f011 b858 	b.w	8026f54 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>

08015ea4 <_ZN8touchgfx3HAL5touchEll>:
 8015ea4:	b530      	push	{r4, r5, lr}
 8015ea6:	b087      	sub	sp, #28
 8015ea8:	4604      	mov	r4, r0
 8015eaa:	a804      	add	r0, sp, #16
 8015eac:	e9cd 1204 	strd	r1, r2, [sp, #16]
 8015eb0:	f002 fc20 	bl	80186f4 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>
 8015eb4:	9b04      	ldr	r3, [sp, #16]
 8015eb6:	a906      	add	r1, sp, #24
 8015eb8:	a803      	add	r0, sp, #12
 8015eba:	f8ad 300c 	strh.w	r3, [sp, #12]
 8015ebe:	9b05      	ldr	r3, [sp, #20]
 8015ec0:	f821 3d0a 	strh.w	r3, [r1, #-10]!
 8015ec4:	f002 fc54 	bl	8018770 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>
 8015ec8:	f894 106b 	ldrb.w	r1, [r4, #107]	; 0x6b
 8015ecc:	f104 001c 	add.w	r0, r4, #28
 8015ed0:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 8015ed4:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 8015ed8:	b189      	cbz	r1, 8015efe <_ZN8touchgfx3HAL5touchEll+0x5a>
 8015eda:	f8b4 5060 	ldrh.w	r5, [r4, #96]	; 0x60
 8015ede:	9300      	str	r3, [sp, #0]
 8015ee0:	4613      	mov	r3, r2
 8015ee2:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 8015ee6:	462a      	mov	r2, r5
 8015ee8:	f011 f844 	bl	8026f74 <_ZN8touchgfx8Gestures17registerDragEventEtttt>
 8015eec:	b128      	cbz	r0, 8015efa <_ZN8touchgfx3HAL5touchEll+0x56>
 8015eee:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 8015ef2:	65e3      	str	r3, [r4, #92]	; 0x5c
 8015ef4:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 8015ef8:	6623      	str	r3, [r4, #96]	; 0x60
 8015efa:	b007      	add	sp, #28
 8015efc:	bd30      	pop	{r4, r5, pc}
 8015efe:	f011 f87d 	bl	8026ffc <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 8015f02:	2301      	movs	r3, #1
 8015f04:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
 8015f08:	e7f1      	b.n	8015eee <_ZN8touchgfx3HAL5touchEll+0x4a>

08015f0a <_ZN8touchgfx3HAL9blockCopyEPvPKvm>:
 8015f0a:	b570      	push	{r4, r5, r6, lr}
 8015f0c:	2b00      	cmp	r3, #0
 8015f0e:	d050      	beq.n	8015fb2 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0xa8>
 8015f10:	ea81 0002 	eor.w	r0, r1, r2
 8015f14:	07c6      	lsls	r6, r0, #31
 8015f16:	d508      	bpl.n	8015f2a <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x20>
 8015f18:	3a01      	subs	r2, #1
 8015f1a:	18cc      	adds	r4, r1, r3
 8015f1c:	42a1      	cmp	r1, r4
 8015f1e:	d048      	beq.n	8015fb2 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0xa8>
 8015f20:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 8015f24:	f801 0b01 	strb.w	r0, [r1], #1
 8015f28:	e7f8      	b.n	8015f1c <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x12>
 8015f2a:	07d5      	lsls	r5, r2, #31
 8015f2c:	bf42      	ittt	mi
 8015f2e:	f812 0b01 	ldrbmi.w	r0, [r2], #1
 8015f32:	f103 33ff 	addmi.w	r3, r3, #4294967295
 8015f36:	f801 0b01 	strbmi.w	r0, [r1], #1
 8015f3a:	2b01      	cmp	r3, #1
 8015f3c:	d915      	bls.n	8015f6a <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x60>
 8015f3e:	ea82 0001 	eor.w	r0, r2, r1
 8015f42:	0784      	lsls	r4, r0, #30
 8015f44:	d02d      	beq.n	8015fa2 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x98>
 8015f46:	1e94      	subs	r4, r2, #2
 8015f48:	4608      	mov	r0, r1
 8015f4a:	18ce      	adds	r6, r1, r3
 8015f4c:	f834 5f02 	ldrh.w	r5, [r4, #2]!
 8015f50:	f820 5b02 	strh.w	r5, [r0], #2
 8015f54:	1a35      	subs	r5, r6, r0
 8015f56:	2d01      	cmp	r5, #1
 8015f58:	d8f8      	bhi.n	8015f4c <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x42>
 8015f5a:	1e98      	subs	r0, r3, #2
 8015f5c:	f003 0301 	and.w	r3, r3, #1
 8015f60:	f020 0001 	bic.w	r0, r0, #1
 8015f64:	3002      	adds	r0, #2
 8015f66:	4401      	add	r1, r0
 8015f68:	4402      	add	r2, r0
 8015f6a:	1f14      	subs	r4, r2, #4
 8015f6c:	4608      	mov	r0, r1
 8015f6e:	18ce      	adds	r6, r1, r3
 8015f70:	1a35      	subs	r5, r6, r0
 8015f72:	2d03      	cmp	r5, #3
 8015f74:	d810      	bhi.n	8015f98 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x8e>
 8015f76:	089c      	lsrs	r4, r3, #2
 8015f78:	00a0      	lsls	r0, r4, #2
 8015f7a:	4401      	add	r1, r0
 8015f7c:	3801      	subs	r0, #1
 8015f7e:	4402      	add	r2, r0
 8015f80:	f06f 0003 	mvn.w	r0, #3
 8015f84:	fb00 3404 	mla	r4, r0, r4, r3
 8015f88:	440c      	add	r4, r1
 8015f8a:	42a1      	cmp	r1, r4
 8015f8c:	d011      	beq.n	8015fb2 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0xa8>
 8015f8e:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 8015f92:	f801 3b01 	strb.w	r3, [r1], #1
 8015f96:	e7f8      	b.n	8015f8a <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x80>
 8015f98:	f854 5f04 	ldr.w	r5, [r4, #4]!
 8015f9c:	f840 5b04 	str.w	r5, [r0], #4
 8015fa0:	e7e6      	b.n	8015f70 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x66>
 8015fa2:	0790      	lsls	r0, r2, #30
 8015fa4:	d0e1      	beq.n	8015f6a <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x60>
 8015fa6:	f832 0b02 	ldrh.w	r0, [r2], #2
 8015faa:	3b02      	subs	r3, #2
 8015fac:	f821 0b02 	strh.w	r0, [r1], #2
 8015fb0:	e7db      	b.n	8015f6a <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x60>
 8015fb2:	2001      	movs	r0, #1
 8015fb4:	bd70      	pop	{r4, r5, r6, pc}

08015fb6 <_ZN8touchgfx3HAL7noTouchEv>:
 8015fb6:	b510      	push	{r4, lr}
 8015fb8:	f890 306b 	ldrb.w	r3, [r0, #107]	; 0x6b
 8015fbc:	4604      	mov	r4, r0
 8015fbe:	b153      	cbz	r3, 8015fd6 <_ZN8touchgfx3HAL7noTouchEv+0x20>
 8015fc0:	f8b0 3060 	ldrh.w	r3, [r0, #96]	; 0x60
 8015fc4:	2101      	movs	r1, #1
 8015fc6:	f8b0 205c 	ldrh.w	r2, [r0, #92]	; 0x5c
 8015fca:	301c      	adds	r0, #28
 8015fcc:	f011 f816 	bl	8026ffc <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 8015fd0:	2300      	movs	r3, #0
 8015fd2:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
 8015fd6:	bd10      	pop	{r4, pc}

08015fd8 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt>:
 8015fd8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015fdc:	4604      	mov	r4, r0
 8015fde:	6980      	ldr	r0, [r0, #24]
 8015fe0:	b085      	sub	sp, #20
 8015fe2:	460f      	mov	r7, r1
 8015fe4:	4690      	mov	r8, r2
 8015fe6:	4699      	mov	r9, r3
 8015fe8:	b930      	cbnz	r0, 8015ff8 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x20>
 8015fea:	4b1c      	ldr	r3, [pc, #112]	; (801605c <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x84>)
 8015fec:	f44f 71a1 	mov.w	r1, #322	; 0x142
 8015ff0:	4a1b      	ldr	r2, [pc, #108]	; (8016060 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x88>)
 8015ff2:	481c      	ldr	r0, [pc, #112]	; (8016064 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x8c>)
 8015ff4:	f011 f898 	bl	8027128 <__assert_func>
 8015ff8:	ad04      	add	r5, sp, #16
 8015ffa:	2600      	movs	r6, #0
 8015ffc:	f845 6d04 	str.w	r6, [r5, #-4]!
 8016000:	6806      	ldr	r6, [r0, #0]
 8016002:	9501      	str	r5, [sp, #4]
 8016004:	f8bd 5030 	ldrh.w	r5, [sp, #48]	; 0x30
 8016008:	9500      	str	r5, [sp, #0]
 801600a:	6835      	ldr	r5, [r6, #0]
 801600c:	47a8      	blx	r5
 801600e:	4d16      	ldr	r5, [pc, #88]	; (8016068 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x90>)
 8016010:	4606      	mov	r6, r0
 8016012:	f8a5 9000 	strh.w	r9, [r5]
 8016016:	f7fb f941 	bl	801129c <_ZN8touchgfx3HAL3lcdEv>
 801601a:	6803      	ldr	r3, [r0, #0]
 801601c:	6a1b      	ldr	r3, [r3, #32]
 801601e:	4798      	blx	r3
 8016020:	2801      	cmp	r0, #1
 8016022:	d012      	beq.n	801604a <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x72>
 8016024:	d306      	bcc.n	8016034 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x5c>
 8016026:	280d      	cmp	r0, #13
 8016028:	d80b      	bhi.n	8016042 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x6a>
 801602a:	4b10      	ldr	r3, [pc, #64]	; (801606c <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x94>)
 801602c:	f44f 71b0 	mov.w	r1, #352	; 0x160
 8016030:	4a0b      	ldr	r2, [pc, #44]	; (8016060 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x88>)
 8016032:	e7de      	b.n	8015ff2 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x1a>
 8016034:	882b      	ldrh	r3, [r5, #0]
 8016036:	fb08 7203 	mla	r2, r8, r3, r7
 801603a:	9b03      	ldr	r3, [sp, #12]
 801603c:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
 8016040:	63e3      	str	r3, [r4, #60]	; 0x3c
 8016042:	4630      	mov	r0, r6
 8016044:	b005      	add	sp, #20
 8016046:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801604a:	882a      	ldrh	r2, [r5, #0]
 801604c:	9b03      	ldr	r3, [sp, #12]
 801604e:	fb08 7202 	mla	r2, r8, r2, r7
 8016052:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8016056:	1a9a      	subs	r2, r3, r2
 8016058:	63e2      	str	r2, [r4, #60]	; 0x3c
 801605a:	e7f2      	b.n	8016042 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x6a>
 801605c:	0802a027 	.word	0x0802a027
 8016060:	0802a33e 	.word	0x0802a33e
 8016064:	0802a06c 	.word	0x0802a06c
 8016068:	20005806 	.word	0x20005806
 801606c:	0802a092 	.word	0x0802a092

08016070 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttth>:
 8016070:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8016074:	4698      	mov	r8, r3
 8016076:	6803      	ldr	r3, [r0, #0]
 8016078:	b087      	sub	sp, #28
 801607a:	460e      	mov	r6, r1
 801607c:	6c5d      	ldr	r5, [r3, #68]	; 0x44
 801607e:	4617      	mov	r7, r2
 8016080:	4b0d      	ldr	r3, [pc, #52]	; (80160b8 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttth+0x48>)
 8016082:	4604      	mov	r4, r0
 8016084:	f8b3 9000 	ldrh.w	r9, [r3]
 8016088:	f7fb f908 	bl	801129c <_ZN8touchgfx3HAL3lcdEv>
 801608c:	6803      	ldr	r3, [r0, #0]
 801608e:	6a1b      	ldr	r3, [r3, #32]
 8016090:	4798      	blx	r3
 8016092:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 8016096:	463a      	mov	r2, r7
 8016098:	4631      	mov	r1, r6
 801609a:	9302      	str	r3, [sp, #8]
 801609c:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 80160a0:	9301      	str	r3, [sp, #4]
 80160a2:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 80160a6:	e9cd 9003 	strd	r9, r0, [sp, #12]
 80160aa:	9300      	str	r3, [sp, #0]
 80160ac:	4620      	mov	r0, r4
 80160ae:	4643      	mov	r3, r8
 80160b0:	47a8      	blx	r5
 80160b2:	b007      	add	sp, #28
 80160b4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80160b8:	20005806 	.word	0x20005806

080160bc <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE>:
 80160bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80160c0:	4604      	mov	r4, r0
 80160c2:	b08b      	sub	sp, #44	; 0x2c
 80160c4:	4610      	mov	r0, r2
 80160c6:	460d      	mov	r5, r1
 80160c8:	4691      	mov	r9, r2
 80160ca:	461e      	mov	r6, r3
 80160cc:	f005 f948 	bl	801b360 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 80160d0:	2800      	cmp	r0, #0
 80160d2:	f000 80a0 	beq.w	8016216 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x15a>
 80160d6:	6823      	ldr	r3, [r4, #0]
 80160d8:	4620      	mov	r0, r4
 80160da:	f8df b170 	ldr.w	fp, [pc, #368]	; 801624c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x190>
 80160de:	af0a      	add	r7, sp, #40	; 0x28
 80160e0:	6a1b      	ldr	r3, [r3, #32]
 80160e2:	4798      	blx	r3
 80160e4:	6823      	ldr	r3, [r4, #0]
 80160e6:	4620      	mov	r0, r4
 80160e8:	f8df a164 	ldr.w	sl, [pc, #356]	; 8016250 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x194>
 80160ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80160ee:	4798      	blx	r3
 80160f0:	f8bb 3000 	ldrh.w	r3, [fp]
 80160f4:	f827 9d0c 	strh.w	r9, [r7, #-12]!
 80160f8:	4638      	mov	r0, r7
 80160fa:	9301      	str	r3, [sp, #4]
 80160fc:	f8ba 3000 	ldrh.w	r3, [sl]
 8016100:	9302      	str	r3, [sp, #8]
 8016102:	4b4f      	ldr	r3, [pc, #316]	; (8016240 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x184>)
 8016104:	881a      	ldrh	r2, [r3, #0]
 8016106:	4698      	mov	r8, r3
 8016108:	9203      	str	r2, [sp, #12]
 801610a:	4a4e      	ldr	r2, [pc, #312]	; (8016244 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x188>)
 801610c:	8812      	ldrh	r2, [r2, #0]
 801610e:	9204      	str	r2, [sp, #16]
 8016110:	4a4d      	ldr	r2, [pc, #308]	; (8016248 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x18c>)
 8016112:	7812      	ldrb	r2, [r2, #0]
 8016114:	2a00      	cmp	r2, #0
 8016116:	f040 8081 	bne.w	801621c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x160>
 801611a:	f005 f9db 	bl	801b4d4 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801611e:	f8ab 0000 	strh.w	r0, [fp]
 8016122:	4638      	mov	r0, r7
 8016124:	f005 fa10 	bl	801b548 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8016128:	f8aa 0000 	strh.w	r0, [sl]
 801612c:	4638      	mov	r0, r7
 801612e:	f005 f9d1 	bl	801b4d4 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8016132:	f8a8 0000 	strh.w	r0, [r8]
 8016136:	4638      	mov	r0, r7
 8016138:	f005 fa06 	bl	801b548 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801613c:	4b41      	ldr	r3, [pc, #260]	; (8016244 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x188>)
 801613e:	8018      	strh	r0, [r3, #0]
 8016140:	4648      	mov	r0, r9
 8016142:	e9d4 870f 	ldrd	r8, r7, [r4, #60]	; 0x3c
 8016146:	f005 f90b 	bl	801b360 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 801614a:	2200      	movs	r2, #0
 801614c:	e9c4 000f 	strd	r0, r0, [r4, #60]	; 0x3c
 8016150:	4611      	mov	r1, r2
 8016152:	4628      	mov	r0, r5
 8016154:	f9b5 9004 	ldrsh.w	r9, [r5, #4]
 8016158:	f9b5 a006 	ldrsh.w	sl, [r5, #6]
 801615c:	f7fa ff9b 	bl	8011096 <_ZN8touchgfx8Drawable5setXYEss>
 8016160:	2301      	movs	r3, #1
 8016162:	f895 b025 	ldrb.w	fp, [r5, #37]	; 0x25
 8016166:	f885 3025 	strb.w	r3, [r5, #37]	; 0x25
 801616a:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 801616e:	2b00      	cmp	r3, #0
 8016170:	dd5c      	ble.n	801622c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x170>
 8016172:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 8016176:	2b00      	cmp	r3, #0
 8016178:	dd58      	ble.n	801622c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x170>
 801617a:	462a      	mov	r2, r5
 801617c:	ab08      	add	r3, sp, #32
 801617e:	f852 0f04 	ldr.w	r0, [r2, #4]!
 8016182:	6851      	ldr	r1, [r2, #4]
 8016184:	c303      	stmia	r3!, {r0, r1}
 8016186:	4631      	mov	r1, r6
 8016188:	a808      	add	r0, sp, #32
 801618a:	f7ff f96b 	bl	8015464 <_ZN8touchgfx4RectaNERKS0_>
 801618e:	a807      	add	r0, sp, #28
 8016190:	f005 fb32 	bl	801b7f8 <_ZNK8touchgfx6Bitmap9getFormatEv>
 8016194:	4606      	mov	r6, r0
 8016196:	f7fb f881 	bl	801129c <_ZN8touchgfx3HAL3lcdEv>
 801619a:	6803      	ldr	r3, [r0, #0]
 801619c:	6a1b      	ldr	r3, [r3, #32]
 801619e:	4798      	blx	r3
 80161a0:	4286      	cmp	r6, r0
 80161a2:	d04a      	beq.n	801623a <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x17e>
 80161a4:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 80161a6:	b150      	cbz	r0, 80161be <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x102>
 80161a8:	a807      	add	r0, sp, #28
 80161aa:	f005 fb25 	bl	801b7f8 <_ZNK8touchgfx6Bitmap9getFormatEv>
 80161ae:	4606      	mov	r6, r0
 80161b0:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 80161b2:	6803      	ldr	r3, [r0, #0]
 80161b4:	6a1b      	ldr	r3, [r3, #32]
 80161b6:	4798      	blx	r3
 80161b8:	1a33      	subs	r3, r6, r0
 80161ba:	4258      	negs	r0, r3
 80161bc:	4158      	adcs	r0, r3
 80161be:	f884 0076 	strb.w	r0, [r4, #118]	; 0x76
 80161c2:	2600      	movs	r6, #0
 80161c4:	696b      	ldr	r3, [r5, #20]
 80161c6:	a908      	add	r1, sp, #32
 80161c8:	682a      	ldr	r2, [r5, #0]
 80161ca:	4628      	mov	r0, r5
 80161cc:	9305      	str	r3, [sp, #20]
 80161ce:	616e      	str	r6, [r5, #20]
 80161d0:	6892      	ldr	r2, [r2, #8]
 80161d2:	4790      	blx	r2
 80161d4:	9b05      	ldr	r3, [sp, #20]
 80161d6:	4652      	mov	r2, sl
 80161d8:	4649      	mov	r1, r9
 80161da:	616b      	str	r3, [r5, #20]
 80161dc:	4628      	mov	r0, r5
 80161de:	f884 6076 	strb.w	r6, [r4, #118]	; 0x76
 80161e2:	f885 b025 	strb.w	fp, [r5, #37]	; 0x25
 80161e6:	f7fa ff56 	bl	8011096 <_ZN8touchgfx8Drawable5setXYEss>
 80161ea:	9a01      	ldr	r2, [sp, #4]
 80161ec:	4b17      	ldr	r3, [pc, #92]	; (801624c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x190>)
 80161ee:	4620      	mov	r0, r4
 80161f0:	801a      	strh	r2, [r3, #0]
 80161f2:	9a02      	ldr	r2, [sp, #8]
 80161f4:	4b16      	ldr	r3, [pc, #88]	; (8016250 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x194>)
 80161f6:	801a      	strh	r2, [r3, #0]
 80161f8:	9a03      	ldr	r2, [sp, #12]
 80161fa:	4b11      	ldr	r3, [pc, #68]	; (8016240 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x184>)
 80161fc:	801a      	strh	r2, [r3, #0]
 80161fe:	4b11      	ldr	r3, [pc, #68]	; (8016244 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x188>)
 8016200:	9a04      	ldr	r2, [sp, #16]
 8016202:	801a      	strh	r2, [r3, #0]
 8016204:	6823      	ldr	r3, [r4, #0]
 8016206:	e9c4 870f 	strd	r8, r7, [r4, #60]	; 0x3c
 801620a:	6a1b      	ldr	r3, [r3, #32]
 801620c:	4798      	blx	r3
 801620e:	6823      	ldr	r3, [r4, #0]
 8016210:	4620      	mov	r0, r4
 8016212:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016214:	4798      	blx	r3
 8016216:	b00b      	add	sp, #44	; 0x2c
 8016218:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801621c:	f005 f994 	bl	801b548 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8016220:	f8ab 0000 	strh.w	r0, [fp]
 8016224:	4638      	mov	r0, r7
 8016226:	f005 f955 	bl	801b4d4 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801622a:	e77d      	b.n	8016128 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x6c>
 801622c:	462a      	mov	r2, r5
 801622e:	ab08      	add	r3, sp, #32
 8016230:	f852 0f04 	ldr.w	r0, [r2, #4]!
 8016234:	6851      	ldr	r1, [r2, #4]
 8016236:	c303      	stmia	r3!, {r0, r1}
 8016238:	e7a9      	b.n	801618e <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xd2>
 801623a:	2000      	movs	r0, #0
 801623c:	e7bf      	b.n	80161be <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x102>
 801623e:	bf00      	nop
 8016240:	20005800 	.word	0x20005800
 8016244:	20005802 	.word	0x20005802
 8016248:	20005804 	.word	0x20005804
 801624c:	20005806 	.word	0x20005806
 8016250:	20005808 	.word	0x20005808

08016254 <_ZN8touchgfx3HAL20getClientFrameBufferEv>:
 8016254:	4b07      	ldr	r3, [pc, #28]	; (8016274 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x20>)
 8016256:	b510      	push	{r4, lr}
 8016258:	781b      	ldrb	r3, [r3, #0]
 801625a:	4604      	mov	r4, r0
 801625c:	b13b      	cbz	r3, 801626e <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 801625e:	6803      	ldr	r3, [r0, #0]
 8016260:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016262:	4798      	blx	r3
 8016264:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8016266:	4283      	cmp	r3, r0
 8016268:	d101      	bne.n	801626e <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 801626a:	6c20      	ldr	r0, [r4, #64]	; 0x40
 801626c:	bd10      	pop	{r4, pc}
 801626e:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8016270:	e7fc      	b.n	801626c <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x18>
 8016272:	bf00      	nop
 8016274:	2000580a 	.word	0x2000580a

08016278 <_ZN8touchgfx3HAL10initializeEv>:
 8016278:	b510      	push	{r4, lr}
 801627a:	4604      	mov	r4, r0
 801627c:	f7fd fdec 	bl	8013e58 <_ZN8touchgfx10OSWrappers10initializeEv>
 8016280:	6860      	ldr	r0, [r4, #4]
 8016282:	6803      	ldr	r3, [r0, #0]
 8016284:	68db      	ldr	r3, [r3, #12]
 8016286:	4798      	blx	r3
 8016288:	68e0      	ldr	r0, [r4, #12]
 801628a:	6803      	ldr	r3, [r0, #0]
 801628c:	689b      	ldr	r3, [r3, #8]
 801628e:	4798      	blx	r3
 8016290:	6823      	ldr	r3, [r4, #0]
 8016292:	4620      	mov	r0, r4
 8016294:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8016296:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801629a:	4718      	bx	r3

0801629c <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE>:
 801629c:	b508      	push	{r3, lr}
 801629e:	290d      	cmp	r1, #13
 80162a0:	d817      	bhi.n	80162d2 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x36>
 80162a2:	e8df f001 	tbb	[pc, r1]
 80162a6:	090b      	.short	0x090b
 80162a8:	0d0d0d07 	.word	0x0d0d0d07
 80162ac:	1414140d 	.word	0x1414140d
 80162b0:	0d0d1414 	.word	0x0d0d1414
 80162b4:	2020      	movs	r0, #32
 80162b6:	bd08      	pop	{r3, pc}
 80162b8:	2018      	movs	r0, #24
 80162ba:	e7fc      	b.n	80162b6 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 80162bc:	2010      	movs	r0, #16
 80162be:	e7fa      	b.n	80162b6 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 80162c0:	4b05      	ldr	r3, [pc, #20]	; (80162d8 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x3c>)
 80162c2:	f44f 7111 	mov.w	r1, #580	; 0x244
 80162c6:	4a05      	ldr	r2, [pc, #20]	; (80162dc <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x40>)
 80162c8:	4805      	ldr	r0, [pc, #20]	; (80162e0 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x44>)
 80162ca:	f010 ff2d 	bl	8027128 <__assert_func>
 80162ce:	2008      	movs	r0, #8
 80162d0:	e7f1      	b.n	80162b6 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 80162d2:	2000      	movs	r0, #0
 80162d4:	e7ef      	b.n	80162b6 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 80162d6:	bf00      	nop
 80162d8:	0802a165 	.word	0x0802a165
 80162dc:	0802a500 	.word	0x0802a500
 80162e0:	0802a06c 	.word	0x0802a06c

080162e4 <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>:
 80162e4:	b570      	push	{r4, r5, r6, lr}
 80162e6:	460d      	mov	r5, r1
 80162e8:	f89d 1014 	ldrb.w	r1, [sp, #20]
 80162ec:	4616      	mov	r6, r2
 80162ee:	461c      	mov	r4, r3
 80162f0:	f7ff ffd4 	bl	801629c <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE>
 80162f4:	f8bd 1010 	ldrh.w	r1, [sp, #16]
 80162f8:	10c0      	asrs	r0, r0, #3
 80162fa:	fb06 5101 	mla	r1, r6, r1, r5
 80162fe:	fb00 4001 	mla	r0, r0, r1, r4
 8016302:	bd70      	pop	{r4, r5, r6, pc}

08016304 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>:
 8016304:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016308:	b08a      	sub	sp, #40	; 0x28
 801630a:	f04f 0c00 	mov.w	ip, #0
 801630e:	4604      	mov	r4, r0
 8016310:	469a      	mov	sl, r3
 8016312:	f89d 8064 	ldrb.w	r8, [sp, #100]	; 0x64
 8016316:	f8bd 604c 	ldrh.w	r6, [sp, #76]	; 0x4c
 801631a:	f1b8 0f02 	cmp.w	r8, #2
 801631e:	f8bd 5050 	ldrh.w	r5, [sp, #80]	; 0x50
 8016322:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 8016326:	f89d 005c 	ldrb.w	r0, [sp, #92]	; 0x5c
 801632a:	f8bd 9060 	ldrh.w	r9, [sp, #96]	; 0x60
 801632e:	f89d 7068 	ldrb.w	r7, [sp, #104]	; 0x68
 8016332:	f8cd c020 	str.w	ip, [sp, #32]
 8016336:	d030      	beq.n	801639a <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x96>
 8016338:	2bff      	cmp	r3, #255	; 0xff
 801633a:	d12c      	bne.n	8016396 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x92>
 801633c:	4560      	cmp	r0, ip
 801633e:	bf14      	ite	ne
 8016340:	2004      	movne	r0, #4
 8016342:	2001      	moveq	r0, #1
 8016344:	9204      	str	r2, [sp, #16]
 8016346:	f8bd 2054 	ldrh.w	r2, [sp, #84]	; 0x54
 801634a:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 801634e:	f8ad 201c 	strh.w	r2, [sp, #28]
 8016352:	f8ad 6018 	strh.w	r6, [sp, #24]
 8016356:	f8ad 501a 	strh.w	r5, [sp, #26]
 801635a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801635e:	4620      	mov	r0, r4
 8016360:	f7ff ff78 	bl	8016254 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8016364:	f8bd 2048 	ldrh.w	r2, [sp, #72]	; 0x48
 8016368:	4603      	mov	r3, r0
 801636a:	4651      	mov	r1, sl
 801636c:	4620      	mov	r0, r4
 801636e:	e9cd 9700 	strd	r9, r7, [sp]
 8016372:	f7ff ffb7 	bl	80162e4 <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>
 8016376:	f8ad 901e 	strh.w	r9, [sp, #30]
 801637a:	9005      	str	r0, [sp, #20]
 801637c:	f88d 8025 	strb.w	r8, [sp, #37]	; 0x25
 8016380:	f88d 7026 	strb.w	r7, [sp, #38]	; 0x26
 8016384:	b106      	cbz	r6, 8016388 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x84>
 8016386:	b98d      	cbnz	r5, 80163ac <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xa8>
 8016388:	4b12      	ldr	r3, [pc, #72]	; (80163d4 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xd0>)
 801638a:	f240 11c3 	movw	r1, #451	; 0x1c3
 801638e:	4a12      	ldr	r2, [pc, #72]	; (80163d8 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xd4>)
 8016390:	4812      	ldr	r0, [pc, #72]	; (80163dc <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xd8>)
 8016392:	f010 fec9 	bl	8027128 <__assert_func>
 8016396:	2004      	movs	r0, #4
 8016398:	e7d4      	b.n	8016344 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x40>
 801639a:	2bff      	cmp	r3, #255	; 0xff
 801639c:	d104      	bne.n	80163a8 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xa4>
 801639e:	2800      	cmp	r0, #0
 80163a0:	bf14      	ite	ne
 80163a2:	2040      	movne	r0, #64	; 0x40
 80163a4:	2020      	moveq	r0, #32
 80163a6:	e7cd      	b.n	8016344 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x40>
 80163a8:	2040      	movs	r0, #64	; 0x40
 80163aa:	e7cb      	b.n	8016344 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x40>
 80163ac:	6823      	ldr	r3, [r4, #0]
 80163ae:	4620      	mov	r0, r4
 80163b0:	9d02      	ldr	r5, [sp, #8]
 80163b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80163b4:	4798      	blx	r3
 80163b6:	4228      	tst	r0, r5
 80163b8:	d104      	bne.n	80163c4 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xc0>
 80163ba:	4b09      	ldr	r3, [pc, #36]	; (80163e0 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xdc>)
 80163bc:	f44f 71e2 	mov.w	r1, #452	; 0x1c4
 80163c0:	4a05      	ldr	r2, [pc, #20]	; (80163d8 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xd4>)
 80163c2:	e7e5      	b.n	8016390 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x8c>
 80163c4:	6860      	ldr	r0, [r4, #4]
 80163c6:	a902      	add	r1, sp, #8
 80163c8:	6803      	ldr	r3, [r0, #0]
 80163ca:	685b      	ldr	r3, [r3, #4]
 80163cc:	4798      	blx	r3
 80163ce:	b00a      	add	sp, #40	; 0x28
 80163d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80163d4:	0802a0e8 	.word	0x0802a0e8
 80163d8:	0802a3a2 	.word	0x0802a3a2
 80163dc:	0802a06c 	.word	0x0802a06c
 80163e0:	0802a120 	.word	0x0802a120

080163e4 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbtNS_6Bitmap12BitmapFormatES4_>:
 80163e4:	b510      	push	{r4, lr}
 80163e6:	b08a      	sub	sp, #40	; 0x28
 80163e8:	f89d 404c 	ldrb.w	r4, [sp, #76]	; 0x4c
 80163ec:	9408      	str	r4, [sp, #32]
 80163ee:	f89d 4048 	ldrb.w	r4, [sp, #72]	; 0x48
 80163f2:	9407      	str	r4, [sp, #28]
 80163f4:	f8bd 4044 	ldrh.w	r4, [sp, #68]	; 0x44
 80163f8:	9406      	str	r4, [sp, #24]
 80163fa:	f89d 4040 	ldrb.w	r4, [sp, #64]	; 0x40
 80163fe:	9405      	str	r4, [sp, #20]
 8016400:	f89d 403c 	ldrb.w	r4, [sp, #60]	; 0x3c
 8016404:	9404      	str	r4, [sp, #16]
 8016406:	f8bd 4038 	ldrh.w	r4, [sp, #56]	; 0x38
 801640a:	9403      	str	r4, [sp, #12]
 801640c:	f8bd 4034 	ldrh.w	r4, [sp, #52]	; 0x34
 8016410:	9402      	str	r4, [sp, #8]
 8016412:	f8bd 4030 	ldrh.w	r4, [sp, #48]	; 0x30
 8016416:	e9cd 3400 	strd	r3, r4, [sp]
 801641a:	4613      	mov	r3, r2
 801641c:	2200      	movs	r2, #0
 801641e:	f7ff ff71 	bl	8016304 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>
 8016422:	b00a      	add	sp, #40	; 0x28
 8016424:	bd10      	pop	{r4, pc}
	...

08016428 <_ZN8touchgfx3HAL8blitCopyEPKtttttthb>:
 8016428:	b5f0      	push	{r4, r5, r6, r7, lr}
 801642a:	b08b      	sub	sp, #44	; 0x2c
 801642c:	4616      	mov	r6, r2
 801642e:	460d      	mov	r5, r1
 8016430:	461f      	mov	r7, r3
 8016432:	4604      	mov	r4, r0
 8016434:	f7fa ff32 	bl	801129c <_ZN8touchgfx3HAL3lcdEv>
 8016438:	6803      	ldr	r3, [r0, #0]
 801643a:	6a1b      	ldr	r3, [r3, #32]
 801643c:	4798      	blx	r3
 801643e:	4b0e      	ldr	r3, [pc, #56]	; (8016478 <_ZN8touchgfx3HAL8blitCopyEPKtttttthb+0x50>)
 8016440:	2200      	movs	r2, #0
 8016442:	4629      	mov	r1, r5
 8016444:	e9cd 0007 	strd	r0, r0, [sp, #28]
 8016448:	881b      	ldrh	r3, [r3, #0]
 801644a:	4620      	mov	r0, r4
 801644c:	9306      	str	r3, [sp, #24]
 801644e:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 8016452:	9305      	str	r3, [sp, #20]
 8016454:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
 8016458:	9304      	str	r3, [sp, #16]
 801645a:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 801645e:	9303      	str	r3, [sp, #12]
 8016460:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 8016464:	9302      	str	r3, [sp, #8]
 8016466:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 801646a:	e9cd 7300 	strd	r7, r3, [sp]
 801646e:	4633      	mov	r3, r6
 8016470:	f7ff ff48 	bl	8016304 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>
 8016474:	b00b      	add	sp, #44	; 0x2c
 8016476:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016478:	20005806 	.word	0x20005806

0801647c <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttth>:
 801647c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016480:	461f      	mov	r7, r3
 8016482:	4b14      	ldr	r3, [pc, #80]	; (80164d4 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttth+0x58>)
 8016484:	b08a      	sub	sp, #40	; 0x28
 8016486:	4616      	mov	r6, r2
 8016488:	f8b3 8000 	ldrh.w	r8, [r3]
 801648c:	460d      	mov	r5, r1
 801648e:	4604      	mov	r4, r0
 8016490:	f7fa ff04 	bl	801129c <_ZN8touchgfx3HAL3lcdEv>
 8016494:	6803      	ldr	r3, [r0, #0]
 8016496:	6a1b      	ldr	r3, [r3, #32]
 8016498:	4798      	blx	r3
 801649a:	2302      	movs	r3, #2
 801649c:	9008      	str	r0, [sp, #32]
 801649e:	2200      	movs	r2, #0
 80164a0:	4629      	mov	r1, r5
 80164a2:	4620      	mov	r0, r4
 80164a4:	e9cd 8306 	strd	r8, r3, [sp, #24]
 80164a8:	2301      	movs	r3, #1
 80164aa:	9305      	str	r3, [sp, #20]
 80164ac:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
 80164b0:	9304      	str	r3, [sp, #16]
 80164b2:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 80164b6:	9303      	str	r3, [sp, #12]
 80164b8:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 80164bc:	9302      	str	r3, [sp, #8]
 80164be:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 80164c2:	e9cd 7300 	strd	r7, r3, [sp]
 80164c6:	4633      	mov	r3, r6
 80164c8:	f7ff ff1c 	bl	8016304 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>
 80164cc:	b00a      	add	sp, #40	; 0x28
 80164ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80164d2:	bf00      	nop
 80164d4:	20005806 	.word	0x20005806

080164d8 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatE>:
 80164d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80164dc:	b08b      	sub	sp, #44	; 0x2c
 80164de:	469b      	mov	fp, r3
 80164e0:	4604      	mov	r4, r0
 80164e2:	4692      	mov	sl, r2
 80164e4:	f89d 7058 	ldrb.w	r7, [sp, #88]	; 0x58
 80164e8:	2600      	movs	r6, #0
 80164ea:	f89d 5060 	ldrb.w	r5, [sp, #96]	; 0x60
 80164ee:	4689      	mov	r9, r1
 80164f0:	2fff      	cmp	r7, #255	; 0xff
 80164f2:	f8bd 805c 	ldrh.w	r8, [sp, #92]	; 0x5c
 80164f6:	9608      	str	r6, [sp, #32]
 80164f8:	bf14      	ite	ne
 80164fa:	2308      	movne	r3, #8
 80164fc:	2302      	moveq	r3, #2
 80164fe:	e9cd 3602 	strd	r3, r6, [sp, #8]
 8016502:	f7ff fea7 	bl	8016254 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8016506:	465a      	mov	r2, fp
 8016508:	4603      	mov	r3, r0
 801650a:	4651      	mov	r1, sl
 801650c:	4620      	mov	r0, r4
 801650e:	e9cd 8500 	strd	r8, r5, [sp]
 8016512:	f7ff fee7 	bl	80162e4 <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>
 8016516:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 801651a:	f88d 5025 	strb.w	r5, [sp, #37]	; 0x25
 801651e:	f8ad 3018 	strh.w	r3, [sp, #24]
 8016522:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
 8016526:	f88d 5026 	strb.w	r5, [sp, #38]	; 0x26
 801652a:	f8ad 301a 	strh.w	r3, [sp, #26]
 801652e:	6823      	ldr	r3, [r4, #0]
 8016530:	9d02      	ldr	r5, [sp, #8]
 8016532:	9005      	str	r0, [sp, #20]
 8016534:	4620      	mov	r0, r4
 8016536:	f8ad 601c 	strh.w	r6, [sp, #28]
 801653a:	f8ad 801e 	strh.w	r8, [sp, #30]
 801653e:	f8cd 9020 	str.w	r9, [sp, #32]
 8016542:	f88d 7024 	strb.w	r7, [sp, #36]	; 0x24
 8016546:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016548:	4798      	blx	r3
 801654a:	4228      	tst	r0, r5
 801654c:	d106      	bne.n	801655c <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatE+0x84>
 801654e:	4b07      	ldr	r3, [pc, #28]	; (801656c <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatE+0x94>)
 8016550:	f240 11fb 	movw	r1, #507	; 0x1fb
 8016554:	4a06      	ldr	r2, [pc, #24]	; (8016570 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatE+0x98>)
 8016556:	4807      	ldr	r0, [pc, #28]	; (8016574 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatE+0x9c>)
 8016558:	f010 fde6 	bl	8027128 <__assert_func>
 801655c:	6860      	ldr	r0, [r4, #4]
 801655e:	a902      	add	r1, sp, #8
 8016560:	6803      	ldr	r3, [r0, #0]
 8016562:	685b      	ldr	r3, [r3, #4]
 8016564:	4798      	blx	r3
 8016566:	b00b      	add	sp, #44	; 0x2c
 8016568:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801656c:	0802a120 	.word	0x0802a120
 8016570:	0802a46b 	.word	0x0802a46b
 8016574:	0802a06c 	.word	0x0802a06c

08016578 <_ZNK8touchgfx3HAL13getDstAddressEttPt>:
 8016578:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 801657c:	461f      	mov	r7, r3
 801657e:	4b0b      	ldr	r3, [pc, #44]	; (80165ac <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x34>)
 8016580:	460d      	mov	r5, r1
 8016582:	4616      	mov	r6, r2
 8016584:	f8b3 8000 	ldrh.w	r8, [r3]
 8016588:	4604      	mov	r4, r0
 801658a:	f7fa fe87 	bl	801129c <_ZN8touchgfx3HAL3lcdEv>
 801658e:	6803      	ldr	r3, [r0, #0]
 8016590:	6a1b      	ldr	r3, [r3, #32]
 8016592:	4798      	blx	r3
 8016594:	463b      	mov	r3, r7
 8016596:	4632      	mov	r2, r6
 8016598:	4629      	mov	r1, r5
 801659a:	e9cd 8000 	strd	r8, r0, [sp]
 801659e:	4620      	mov	r0, r4
 80165a0:	f7ff fea0 	bl	80162e4 <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>
 80165a4:	b002      	add	sp, #8
 80165a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80165aa:	bf00      	nop
 80165ac:	20005806 	.word	0x20005806

080165b0 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE>:
 80165b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80165b4:	4698      	mov	r8, r3
 80165b6:	b088      	sub	sp, #32
 80165b8:	2300      	movs	r3, #0
 80165ba:	4617      	mov	r7, r2
 80165bc:	4604      	mov	r4, r0
 80165be:	f8bd 6038 	ldrh.w	r6, [sp, #56]	; 0x38
 80165c2:	9306      	str	r3, [sp, #24]
 80165c4:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 80165c8:	f8bd 503c 	ldrh.w	r5, [sp, #60]	; 0x3c
 80165cc:	f8ad 6010 	strh.w	r6, [sp, #16]
 80165d0:	f8ad 5012 	strh.w	r5, [sp, #18]
 80165d4:	e9cd 3100 	strd	r3, r1, [sp]
 80165d8:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 80165dc:	f8ad 3014 	strh.w	r3, [sp, #20]
 80165e0:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
 80165e4:	f88d 301c 	strb.w	r3, [sp, #28]
 80165e8:	f7ff fe34 	bl	8016254 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 80165ec:	4642      	mov	r2, r8
 80165ee:	4603      	mov	r3, r0
 80165f0:	4639      	mov	r1, r7
 80165f2:	4620      	mov	r0, r4
 80165f4:	f7ff ffc0 	bl	8016578 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 80165f8:	4b16      	ldr	r3, [pc, #88]	; (8016654 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xa4>)
 80165fa:	9003      	str	r0, [sp, #12]
 80165fc:	881b      	ldrh	r3, [r3, #0]
 80165fe:	f8ad 3016 	strh.w	r3, [sp, #22]
 8016602:	f7fa fe4b 	bl	801129c <_ZN8touchgfx3HAL3lcdEv>
 8016606:	6803      	ldr	r3, [r0, #0]
 8016608:	6a1b      	ldr	r3, [r3, #32]
 801660a:	4798      	blx	r3
 801660c:	f88d 001e 	strb.w	r0, [sp, #30]
 8016610:	f88d 001d 	strb.w	r0, [sp, #29]
 8016614:	b106      	cbz	r6, 8016618 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0x68>
 8016616:	b935      	cbnz	r5, 8016626 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0x76>
 8016618:	4b0f      	ldr	r3, [pc, #60]	; (8016658 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xa8>)
 801661a:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 801661e:	4a0f      	ldr	r2, [pc, #60]	; (801665c <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xac>)
 8016620:	480f      	ldr	r0, [pc, #60]	; (8016660 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xb0>)
 8016622:	f010 fd81 	bl	8027128 <__assert_func>
 8016626:	6823      	ldr	r3, [r4, #0]
 8016628:	4620      	mov	r0, r4
 801662a:	9d00      	ldr	r5, [sp, #0]
 801662c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801662e:	4798      	blx	r3
 8016630:	4228      	tst	r0, r5
 8016632:	d104      	bne.n	801663e <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0x8e>
 8016634:	4b0b      	ldr	r3, [pc, #44]	; (8016664 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xb4>)
 8016636:	f240 11e1 	movw	r1, #481	; 0x1e1
 801663a:	4a08      	ldr	r2, [pc, #32]	; (801665c <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xac>)
 801663c:	e7f0      	b.n	8016620 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0x70>
 801663e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8016640:	4669      	mov	r1, sp
 8016642:	6860      	ldr	r0, [r4, #4]
 8016644:	9306      	str	r3, [sp, #24]
 8016646:	6803      	ldr	r3, [r0, #0]
 8016648:	685b      	ldr	r3, [r3, #4]
 801664a:	4798      	blx	r3
 801664c:	b008      	add	sp, #32
 801664e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016652:	bf00      	nop
 8016654:	20005806 	.word	0x20005806
 8016658:	0802a0e8 	.word	0x0802a0e8
 801665c:	0802a254 	.word	0x0802a254
 8016660:	0802a06c 	.word	0x0802a06c
 8016664:	0802a120 	.word	0x0802a120

08016668 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE>:
 8016668:	b570      	push	{r4, r5, r6, lr}
 801666a:	b08a      	sub	sp, #40	; 0x28
 801666c:	4604      	mov	r4, r0
 801666e:	466b      	mov	r3, sp
 8016670:	e883 0006 	stmia.w	r3, {r1, r2}
 8016674:	4b1f      	ldr	r3, [pc, #124]	; (80166f4 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x8c>)
 8016676:	781b      	ldrb	r3, [r3, #0]
 8016678:	b933      	cbnz	r3, 8016688 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x20>
 801667a:	4b1f      	ldr	r3, [pc, #124]	; (80166f8 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x90>)
 801667c:	f44f 7103 	mov.w	r1, #524	; 0x20c
 8016680:	4a1e      	ldr	r2, [pc, #120]	; (80166fc <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x94>)
 8016682:	481f      	ldr	r0, [pc, #124]	; (8016700 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x98>)
 8016684:	f010 fd50 	bl	8027128 <__assert_func>
 8016688:	2300      	movs	r3, #0
 801668a:	f8bd 5000 	ldrh.w	r5, [sp]
 801668e:	f8bd 6002 	ldrh.w	r6, [sp, #2]
 8016692:	9308      	str	r3, [sp, #32]
 8016694:	2301      	movs	r3, #1
 8016696:	9302      	str	r3, [sp, #8]
 8016698:	6803      	ldr	r3, [r0, #0]
 801669a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801669c:	4798      	blx	r3
 801669e:	4632      	mov	r2, r6
 80166a0:	4629      	mov	r1, r5
 80166a2:	4603      	mov	r3, r0
 80166a4:	4620      	mov	r0, r4
 80166a6:	f7ff ff67 	bl	8016578 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 80166aa:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80166ac:	9003      	str	r0, [sp, #12]
 80166ae:	9305      	str	r3, [sp, #20]
 80166b0:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 80166b4:	f8ad 3018 	strh.w	r3, [sp, #24]
 80166b8:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 80166bc:	f8ad 301a 	strh.w	r3, [sp, #26]
 80166c0:	4b10      	ldr	r3, [pc, #64]	; (8016704 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x9c>)
 80166c2:	881b      	ldrh	r3, [r3, #0]
 80166c4:	f8ad 301c 	strh.w	r3, [sp, #28]
 80166c8:	f8ad 301e 	strh.w	r3, [sp, #30]
 80166cc:	f7fa fde6 	bl	801129c <_ZN8touchgfx3HAL3lcdEv>
 80166d0:	6803      	ldr	r3, [r0, #0]
 80166d2:	6a1b      	ldr	r3, [r3, #32]
 80166d4:	4798      	blx	r3
 80166d6:	23ff      	movs	r3, #255	; 0xff
 80166d8:	f88d 0025 	strb.w	r0, [sp, #37]	; 0x25
 80166dc:	a902      	add	r1, sp, #8
 80166de:	f88d 0026 	strb.w	r0, [sp, #38]	; 0x26
 80166e2:	6860      	ldr	r0, [r4, #4]
 80166e4:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 80166e8:	6803      	ldr	r3, [r0, #0]
 80166ea:	685b      	ldr	r3, [r3, #4]
 80166ec:	4798      	blx	r3
 80166ee:	6c60      	ldr	r0, [r4, #68]	; 0x44
 80166f0:	b00a      	add	sp, #40	; 0x28
 80166f2:	bd70      	pop	{r4, r5, r6, pc}
 80166f4:	2000580b 	.word	0x2000580b
 80166f8:	08029fb9 	.word	0x08029fb9
 80166fc:	0802a2f8 	.word	0x0802a2f8
 8016700:	0802a06c 	.word	0x0802a06c
 8016704:	20005806 	.word	0x20005806

08016708 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm>:
 8016708:	b5f0      	push	{r4, r5, r6, r7, lr}
 801670a:	b08b      	sub	sp, #44	; 0x2c
 801670c:	4604      	mov	r4, r0
 801670e:	466d      	mov	r5, sp
 8016710:	e885 0006 	stmia.w	r5, {r1, r2}
 8016714:	461d      	mov	r5, r3
 8016716:	2300      	movs	r3, #0
 8016718:	f8bd 6000 	ldrh.w	r6, [sp]
 801671c:	9308      	str	r3, [sp, #32]
 801671e:	2301      	movs	r3, #1
 8016720:	f8bd 7002 	ldrh.w	r7, [sp, #2]
 8016724:	9302      	str	r3, [sp, #8]
 8016726:	6803      	ldr	r3, [r0, #0]
 8016728:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801672a:	4798      	blx	r3
 801672c:	463a      	mov	r2, r7
 801672e:	4631      	mov	r1, r6
 8016730:	4603      	mov	r3, r0
 8016732:	4620      	mov	r0, r4
 8016734:	f7ff ff20 	bl	8016578 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8016738:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 801673c:	9003      	str	r0, [sp, #12]
 801673e:	f8ad 3018 	strh.w	r3, [sp, #24]
 8016742:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8016746:	9505      	str	r5, [sp, #20]
 8016748:	f8ad 301a 	strh.w	r3, [sp, #26]
 801674c:	4b0d      	ldr	r3, [pc, #52]	; (8016784 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm+0x7c>)
 801674e:	881b      	ldrh	r3, [r3, #0]
 8016750:	f8ad 301c 	strh.w	r3, [sp, #28]
 8016754:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8016756:	f8ad 301e 	strh.w	r3, [sp, #30]
 801675a:	f7fa fd9f 	bl	801129c <_ZN8touchgfx3HAL3lcdEv>
 801675e:	6803      	ldr	r3, [r0, #0]
 8016760:	6a1b      	ldr	r3, [r3, #32]
 8016762:	4798      	blx	r3
 8016764:	23ff      	movs	r3, #255	; 0xff
 8016766:	f88d 0025 	strb.w	r0, [sp, #37]	; 0x25
 801676a:	a902      	add	r1, sp, #8
 801676c:	f88d 0026 	strb.w	r0, [sp, #38]	; 0x26
 8016770:	6860      	ldr	r0, [r4, #4]
 8016772:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 8016776:	6803      	ldr	r3, [r0, #0]
 8016778:	685b      	ldr	r3, [r3, #4]
 801677a:	4798      	blx	r3
 801677c:	4628      	mov	r0, r5
 801677e:	b00b      	add	sp, #44	; 0x2c
 8016780:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016782:	bf00      	nop
 8016784:	20005806 	.word	0x20005806

08016788 <_ZN8touchgfx3HAL16swapFrameBuffersEv>:
 8016788:	b570      	push	{r4, r5, r6, lr}
 801678a:	f890 306a 	ldrb.w	r3, [r0, #106]	; 0x6a
 801678e:	4604      	mov	r4, r0
 8016790:	b19b      	cbz	r3, 80167ba <_ZN8touchgfx3HAL16swapFrameBuffersEv+0x32>
 8016792:	2002      	movs	r0, #2
 8016794:	f7fd f962 	bl	8013a5c <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>
 8016798:	2300      	movs	r3, #0
 801679a:	4620      	mov	r0, r4
 801679c:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
 80167a0:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
 80167a4:	6823      	ldr	r3, [r4, #0]
 80167a6:	f8d3 509c 	ldr.w	r5, [r3, #156]	; 0x9c
 80167aa:	f7ff fd53 	bl	8016254 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 80167ae:	4601      	mov	r1, r0
 80167b0:	4620      	mov	r0, r4
 80167b2:	462b      	mov	r3, r5
 80167b4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80167b8:	4718      	bx	r3
 80167ba:	bd70      	pop	{r4, r5, r6, pc}

080167bc <_ZN8touchgfx3HAL19setRenderingVariantENS0_16RenderingVariantE>:
 80167bc:	b538      	push	{r3, r4, r5, lr}
 80167be:	f890 2078 	ldrb.w	r2, [r0, #120]	; 0x78
 80167c2:	4604      	mov	r4, r0
 80167c4:	460d      	mov	r5, r1
 80167c6:	428a      	cmp	r2, r1
 80167c8:	d008      	beq.n	80167dc <_ZN8touchgfx3HAL19setRenderingVariantENS0_16RenderingVariantE+0x20>
 80167ca:	2a01      	cmp	r2, #1
 80167cc:	6803      	ldr	r3, [r0, #0]
 80167ce:	d106      	bne.n	80167de <_ZN8touchgfx3HAL19setRenderingVariantENS0_16RenderingVariantE+0x22>
 80167d0:	b929      	cbnz	r1, 80167de <_ZN8touchgfx3HAL19setRenderingVariantENS0_16RenderingVariantE+0x22>
 80167d2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80167d6:	4798      	blx	r3
 80167d8:	f884 5078 	strb.w	r5, [r4, #120]	; 0x78
 80167dc:	bd38      	pop	{r3, r4, r5, pc}
 80167de:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80167e2:	4620      	mov	r0, r4
 80167e4:	e7f7      	b.n	80167d6 <_ZN8touchgfx3HAL19setRenderingVariantENS0_16RenderingVariantE+0x1a>
	...

080167e8 <_ZN8touchgfx3HAL15lockFrameBufferEv>:
 80167e8:	4b0d      	ldr	r3, [pc, #52]	; (8016820 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x38>)
 80167ea:	b510      	push	{r4, lr}
 80167ec:	781b      	ldrb	r3, [r3, #0]
 80167ee:	4604      	mov	r4, r0
 80167f0:	b95b      	cbnz	r3, 801680a <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 80167f2:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
 80167f6:	2b02      	cmp	r3, #2
 80167f8:	d007      	beq.n	801680a <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 80167fa:	6840      	ldr	r0, [r0, #4]
 80167fc:	f000 f92c 	bl	8016a58 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>
 8016800:	b118      	cbz	r0, 801680a <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 8016802:	6862      	ldr	r2, [r4, #4]
 8016804:	7a53      	ldrb	r3, [r2, #9]
 8016806:	2b00      	cmp	r3, #0
 8016808:	d0fc      	beq.n	8016804 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x1c>
 801680a:	f7fd fb59 	bl	8013ec0 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 801680e:	4620      	mov	r0, r4
 8016810:	2100      	movs	r1, #0
 8016812:	f7ff ffd3 	bl	80167bc <_ZN8touchgfx3HAL19setRenderingVariantENS0_16RenderingVariantE>
 8016816:	4620      	mov	r0, r4
 8016818:	f7ff fd1c 	bl	8016254 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 801681c:	bd10      	pop	{r4, pc}
 801681e:	bf00      	nop
 8016820:	2000580a 	.word	0x2000580a

08016824 <_ZN8touchgfx17LockFreeDMA_Queue7isEmptyEv>:
 8016824:	e9d0 2003 	ldrd	r2, r0, [r0, #12]
 8016828:	1a13      	subs	r3, r2, r0
 801682a:	4258      	negs	r0, r3
 801682c:	4158      	adcs	r0, r3
 801682e:	4770      	bx	lr

08016830 <_ZN8touchgfx17LockFreeDMA_Queue6isFullEv>:
 8016830:	e9d0 2303 	ldrd	r2, r3, [r0, #12]
 8016834:	1a9b      	subs	r3, r3, r2
 8016836:	2b00      	cmp	r3, #0
 8016838:	bfdc      	itt	le
 801683a:	6882      	ldrle	r2, [r0, #8]
 801683c:	189b      	addle	r3, r3, r2
 801683e:	2b01      	cmp	r3, #1
 8016840:	bfcc      	ite	gt
 8016842:	2000      	movgt	r0, #0
 8016844:	2001      	movle	r0, #1
 8016846:	4770      	bx	lr

08016848 <_ZN8touchgfx17LockFreeDMA_Queue5firstEv>:
 8016848:	6902      	ldr	r2, [r0, #16]
 801684a:	6840      	ldr	r0, [r0, #4]
 801684c:	eb00 1042 	add.w	r0, r0, r2, lsl #5
 8016850:	4770      	bx	lr

08016852 <_ZN8touchgfx13DMA_Interface13seedExecutionEv>:
 8016852:	6803      	ldr	r3, [r0, #0]
 8016854:	691b      	ldr	r3, [r3, #16]
 8016856:	4718      	bx	r3

08016858 <_ZN8touchgfx13DMA_Interface11enableAlphaEh>:
 8016858:	4770      	bx	lr

0801685a <_ZN8touchgfx13DMA_Interface12disableAlphaEv>:
 801685a:	4770      	bx	lr

0801685c <_ZN8touchgfx13DMA_Interface7executeEv>:
 801685c:	2301      	movs	r3, #1
 801685e:	b570      	push	{r4, r5, r6, lr}
 8016860:	7203      	strb	r3, [r0, #8]
 8016862:	4604      	mov	r4, r0
 8016864:	6840      	ldr	r0, [r0, #4]
 8016866:	6803      	ldr	r3, [r0, #0]
 8016868:	699b      	ldr	r3, [r3, #24]
 801686a:	4798      	blx	r3
 801686c:	6803      	ldr	r3, [r0, #0]
 801686e:	4605      	mov	r5, r0
 8016870:	2b08      	cmp	r3, #8
 8016872:	d01e      	beq.n	80168b2 <_ZN8touchgfx13DMA_Interface7executeEv+0x56>
 8016874:	d80b      	bhi.n	801688e <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 8016876:	2b02      	cmp	r3, #2
 8016878:	d027      	beq.n	80168ca <_ZN8touchgfx13DMA_Interface7executeEv+0x6e>
 801687a:	2b04      	cmp	r3, #4
 801687c:	d011      	beq.n	80168a2 <_ZN8touchgfx13DMA_Interface7executeEv+0x46>
 801687e:	2b01      	cmp	r3, #1
 8016880:	d028      	beq.n	80168d4 <_ZN8touchgfx13DMA_Interface7executeEv+0x78>
 8016882:	4b17      	ldr	r3, [pc, #92]	; (80168e0 <_ZN8touchgfx13DMA_Interface7executeEv+0x84>)
 8016884:	218c      	movs	r1, #140	; 0x8c
 8016886:	4a17      	ldr	r2, [pc, #92]	; (80168e4 <_ZN8touchgfx13DMA_Interface7executeEv+0x88>)
 8016888:	4817      	ldr	r0, [pc, #92]	; (80168e8 <_ZN8touchgfx13DMA_Interface7executeEv+0x8c>)
 801688a:	f010 fc4d 	bl	8027128 <__assert_func>
 801688e:	2b40      	cmp	r3, #64	; 0x40
 8016890:	d020      	beq.n	80168d4 <_ZN8touchgfx13DMA_Interface7executeEv+0x78>
 8016892:	d801      	bhi.n	8016898 <_ZN8touchgfx13DMA_Interface7executeEv+0x3c>
 8016894:	2b20      	cmp	r3, #32
 8016896:	e7f3      	b.n	8016880 <_ZN8touchgfx13DMA_Interface7executeEv+0x24>
 8016898:	2b80      	cmp	r3, #128	; 0x80
 801689a:	d01b      	beq.n	80168d4 <_ZN8touchgfx13DMA_Interface7executeEv+0x78>
 801689c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80168a0:	e7ee      	b.n	8016880 <_ZN8touchgfx13DMA_Interface7executeEv+0x24>
 80168a2:	6823      	ldr	r3, [r4, #0]
 80168a4:	7f01      	ldrb	r1, [r0, #28]
 80168a6:	4620      	mov	r0, r4
 80168a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80168aa:	4798      	blx	r3
 80168ac:	6823      	ldr	r3, [r4, #0]
 80168ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80168b0:	e006      	b.n	80168c0 <_ZN8touchgfx13DMA_Interface7executeEv+0x64>
 80168b2:	6823      	ldr	r3, [r4, #0]
 80168b4:	7f01      	ldrb	r1, [r0, #28]
 80168b6:	4620      	mov	r0, r4
 80168b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80168ba:	4798      	blx	r3
 80168bc:	6823      	ldr	r3, [r4, #0]
 80168be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80168c0:	4629      	mov	r1, r5
 80168c2:	4620      	mov	r0, r4
 80168c4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80168c8:	4718      	bx	r3
 80168ca:	6823      	ldr	r3, [r4, #0]
 80168cc:	4620      	mov	r0, r4
 80168ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80168d0:	4798      	blx	r3
 80168d2:	e7f3      	b.n	80168bc <_ZN8touchgfx13DMA_Interface7executeEv+0x60>
 80168d4:	6823      	ldr	r3, [r4, #0]
 80168d6:	4620      	mov	r0, r4
 80168d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80168da:	4798      	blx	r3
 80168dc:	e7e6      	b.n	80168ac <_ZN8touchgfx13DMA_Interface7executeEv+0x50>
 80168de:	bf00      	nop
 80168e0:	0802a549 	.word	0x0802a549
 80168e4:	0802a658 	.word	0x0802a658
 80168e8:	0802a56e 	.word	0x0802a56e

080168ec <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE>:
 80168ec:	b570      	push	{r4, r5, r6, lr}
 80168ee:	4604      	mov	r4, r0
 80168f0:	460e      	mov	r6, r1
 80168f2:	6860      	ldr	r0, [r4, #4]
 80168f4:	6803      	ldr	r3, [r0, #0]
 80168f6:	685b      	ldr	r3, [r3, #4]
 80168f8:	4798      	blx	r3
 80168fa:	2800      	cmp	r0, #0
 80168fc:	d1f9      	bne.n	80168f2 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x6>
 80168fe:	4d0d      	ldr	r5, [pc, #52]	; (8016934 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x48>)
 8016900:	6828      	ldr	r0, [r5, #0]
 8016902:	6803      	ldr	r3, [r0, #0]
 8016904:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8016906:	4798      	blx	r3
 8016908:	f7fd faf4 	bl	8013ef4 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>
 801690c:	6828      	ldr	r0, [r5, #0]
 801690e:	2101      	movs	r1, #1
 8016910:	f7ff ff54 	bl	80167bc <_ZN8touchgfx3HAL19setRenderingVariantENS0_16RenderingVariantE>
 8016914:	6860      	ldr	r0, [r4, #4]
 8016916:	4631      	mov	r1, r6
 8016918:	6803      	ldr	r3, [r0, #0]
 801691a:	689b      	ldr	r3, [r3, #8]
 801691c:	4798      	blx	r3
 801691e:	6823      	ldr	r3, [r4, #0]
 8016920:	4620      	mov	r0, r4
 8016922:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016924:	4798      	blx	r3
 8016926:	6828      	ldr	r0, [r5, #0]
 8016928:	6803      	ldr	r3, [r0, #0]
 801692a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801692e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8016930:	4718      	bx	r3
 8016932:	bf00      	nop
 8016934:	2000580c 	.word	0x2000580c

08016938 <_ZN8touchgfx13DMA_Interface27waitForFrameBufferSemaphoreEv>:
 8016938:	b508      	push	{r3, lr}
 801693a:	f7fd fac1 	bl	8013ec0 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 801693e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8016942:	f7fd bacb 	b.w	8013edc <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

08016946 <_ZN8touchgfx13DMA_Interface5startEv>:
 8016946:	b510      	push	{r4, lr}
 8016948:	4604      	mov	r4, r0
 801694a:	6840      	ldr	r0, [r0, #4]
 801694c:	6803      	ldr	r3, [r0, #0]
 801694e:	681b      	ldr	r3, [r3, #0]
 8016950:	4798      	blx	r3
 8016952:	b948      	cbnz	r0, 8016968 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 8016954:	7a63      	ldrb	r3, [r4, #9]
 8016956:	b13b      	cbz	r3, 8016968 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 8016958:	7a23      	ldrb	r3, [r4, #8]
 801695a:	b92b      	cbnz	r3, 8016968 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 801695c:	6823      	ldr	r3, [r4, #0]
 801695e:	4620      	mov	r0, r4
 8016960:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016962:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016966:	4718      	bx	r3
 8016968:	bd10      	pop	{r4, pc}
	...

0801696c <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE>:
 801696c:	b510      	push	{r4, lr}
 801696e:	e9d0 4203 	ldrd	r4, r2, [r0, #12]
 8016972:	1b12      	subs	r2, r2, r4
 8016974:	2a00      	cmp	r2, #0
 8016976:	bfdc      	itt	le
 8016978:	6883      	ldrle	r3, [r0, #8]
 801697a:	18d2      	addle	r2, r2, r3
 801697c:	2a01      	cmp	r2, #1
 801697e:	dd18      	ble.n	80169b2 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x46>
 8016980:	6843      	ldr	r3, [r0, #4]
 8016982:	f101 021c 	add.w	r2, r1, #28
 8016986:	eb03 1344 	add.w	r3, r3, r4, lsl #5
 801698a:	f851 4b04 	ldr.w	r4, [r1], #4
 801698e:	4291      	cmp	r1, r2
 8016990:	f843 4b04 	str.w	r4, [r3], #4
 8016994:	d1f9      	bne.n	801698a <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x1e>
 8016996:	880a      	ldrh	r2, [r1, #0]
 8016998:	801a      	strh	r2, [r3, #0]
 801699a:	788a      	ldrb	r2, [r1, #2]
 801699c:	709a      	strb	r2, [r3, #2]
 801699e:	68c3      	ldr	r3, [r0, #12]
 80169a0:	6882      	ldr	r2, [r0, #8]
 80169a2:	f3bf 8f5b 	dmb	ish
 80169a6:	3301      	adds	r3, #1
 80169a8:	429a      	cmp	r2, r3
 80169aa:	bfd8      	it	le
 80169ac:	1a9b      	suble	r3, r3, r2
 80169ae:	60c3      	str	r3, [r0, #12]
 80169b0:	bd10      	pop	{r4, pc}
 80169b2:	4b03      	ldr	r3, [pc, #12]	; (80169c0 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x54>)
 80169b4:	2139      	movs	r1, #57	; 0x39
 80169b6:	4a03      	ldr	r2, [pc, #12]	; (80169c4 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x58>)
 80169b8:	4803      	ldr	r0, [pc, #12]	; (80169c8 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x5c>)
 80169ba:	f010 fbb5 	bl	8027128 <__assert_func>
 80169be:	bf00      	nop
 80169c0:	0802a594 	.word	0x0802a594
 80169c4:	0802a688 	.word	0x0802a688
 80169c8:	0802a56e 	.word	0x0802a56e

080169cc <_ZN8touchgfx17LockFreeDMA_Queue3popEv>:
 80169cc:	b510      	push	{r4, lr}
 80169ce:	6803      	ldr	r3, [r0, #0]
 80169d0:	4604      	mov	r4, r0
 80169d2:	681b      	ldr	r3, [r3, #0]
 80169d4:	4798      	blx	r3
 80169d6:	b128      	cbz	r0, 80169e4 <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x18>
 80169d8:	4b07      	ldr	r3, [pc, #28]	; (80169f8 <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x2c>)
 80169da:	213f      	movs	r1, #63	; 0x3f
 80169dc:	4a07      	ldr	r2, [pc, #28]	; (80169fc <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x30>)
 80169de:	4808      	ldr	r0, [pc, #32]	; (8016a00 <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x34>)
 80169e0:	f010 fba2 	bl	8027128 <__assert_func>
 80169e4:	6923      	ldr	r3, [r4, #16]
 80169e6:	68a2      	ldr	r2, [r4, #8]
 80169e8:	f3bf 8f5b 	dmb	ish
 80169ec:	3301      	adds	r3, #1
 80169ee:	429a      	cmp	r2, r3
 80169f0:	bfd8      	it	le
 80169f2:	1a9b      	suble	r3, r3, r2
 80169f4:	6123      	str	r3, [r4, #16]
 80169f6:	bd10      	pop	{r4, pc}
 80169f8:	0802a5b7 	.word	0x0802a5b7
 80169fc:	0802a6d6 	.word	0x0802a6d6
 8016a00:	0802a56e 	.word	0x0802a56e

08016a04 <_ZN8touchgfx13DMA_Interface16executeCompletedEv>:
 8016a04:	b570      	push	{r4, r5, r6, lr}
 8016a06:	4604      	mov	r4, r0
 8016a08:	6840      	ldr	r0, [r0, #4]
 8016a0a:	6803      	ldr	r3, [r0, #0]
 8016a0c:	681b      	ldr	r3, [r3, #0]
 8016a0e:	4798      	blx	r3
 8016a10:	4605      	mov	r5, r0
 8016a12:	b930      	cbnz	r0, 8016a22 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 8016a14:	7a23      	ldrb	r3, [r4, #8]
 8016a16:	b123      	cbz	r3, 8016a22 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 8016a18:	6860      	ldr	r0, [r4, #4]
 8016a1a:	6803      	ldr	r3, [r0, #0]
 8016a1c:	695b      	ldr	r3, [r3, #20]
 8016a1e:	4798      	blx	r3
 8016a20:	7225      	strb	r5, [r4, #8]
 8016a22:	6860      	ldr	r0, [r4, #4]
 8016a24:	6803      	ldr	r3, [r0, #0]
 8016a26:	681b      	ldr	r3, [r3, #0]
 8016a28:	4798      	blx	r3
 8016a2a:	b928      	cbnz	r0, 8016a38 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x34>
 8016a2c:	6823      	ldr	r3, [r4, #0]
 8016a2e:	4620      	mov	r0, r4
 8016a30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016a32:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016a36:	4718      	bx	r3
 8016a38:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016a3c:	f7fd ba66 	b.w	8013f0c <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>

08016a40 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>:
 8016a40:	b510      	push	{r4, lr}
 8016a42:	6082      	str	r2, [r0, #8]
 8016a44:	2200      	movs	r2, #0
 8016a46:	4c03      	ldr	r4, [pc, #12]	; (8016a54 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi+0x14>)
 8016a48:	e9c0 2203 	strd	r2, r2, [r0, #12]
 8016a4c:	e9c0 4100 	strd	r4, r1, [r0]
 8016a50:	bd10      	pop	{r4, pc}
 8016a52:	bf00      	nop
 8016a54:	0802a63c 	.word	0x0802a63c

08016a58 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>:
 8016a58:	6840      	ldr	r0, [r0, #4]
 8016a5a:	6803      	ldr	r3, [r0, #0]
 8016a5c:	681b      	ldr	r3, [r3, #0]
 8016a5e:	4718      	bx	r3

08016a60 <_ZNK8touchgfx14AbstractButton15getPressedStateEv>:
 8016a60:	f890 002c 	ldrb.w	r0, [r0, #44]	; 0x2c
 8016a64:	4770      	bx	lr

08016a66 <_ZN8touchgfx14AbstractButton13executeActionEv>:
 8016a66:	b510      	push	{r4, lr}
 8016a68:	4604      	mov	r4, r0
 8016a6a:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8016a6c:	b150      	cbz	r0, 8016a84 <_ZN8touchgfx14AbstractButton13executeActionEv+0x1e>
 8016a6e:	6803      	ldr	r3, [r0, #0]
 8016a70:	68db      	ldr	r3, [r3, #12]
 8016a72:	4798      	blx	r3
 8016a74:	b130      	cbz	r0, 8016a84 <_ZN8touchgfx14AbstractButton13executeActionEv+0x1e>
 8016a76:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8016a78:	4621      	mov	r1, r4
 8016a7a:	6803      	ldr	r3, [r0, #0]
 8016a7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016a80:	689b      	ldr	r3, [r3, #8]
 8016a82:	4718      	bx	r3
 8016a84:	bd10      	pop	{r4, pc}

08016a86 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE>:
 8016a86:	790b      	ldrb	r3, [r1, #4]
 8016a88:	2b00      	cmp	r3, #0
 8016a8a:	bf0c      	ite	eq
 8016a8c:	2301      	moveq	r3, #1
 8016a8e:	2300      	movne	r3, #0
 8016a90:	b570      	push	{r4, r5, r6, lr}
 8016a92:	4604      	mov	r4, r0
 8016a94:	f890 502c 	ldrb.w	r5, [r0, #44]	; 0x2c
 8016a98:	460e      	mov	r6, r1
 8016a9a:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c
 8016a9e:	d109      	bne.n	8016ab4 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x2e>
 8016aa0:	b14d      	cbz	r5, 8016ab6 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x30>
 8016aa2:	7933      	ldrb	r3, [r6, #4]
 8016aa4:	2b01      	cmp	r3, #1
 8016aa6:	d10c      	bne.n	8016ac2 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x3c>
 8016aa8:	6823      	ldr	r3, [r4, #0]
 8016aaa:	4620      	mov	r0, r4
 8016aac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8016aae:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016ab2:	4718      	bx	r3
 8016ab4:	b12d      	cbz	r5, 8016ac2 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x3c>
 8016ab6:	6823      	ldr	r3, [r4, #0]
 8016ab8:	4620      	mov	r0, r4
 8016aba:	695b      	ldr	r3, [r3, #20]
 8016abc:	4798      	blx	r3
 8016abe:	2d00      	cmp	r5, #0
 8016ac0:	d1ef      	bne.n	8016aa2 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x1c>
 8016ac2:	bd70      	pop	{r4, r5, r6, pc}

08016ac4 <_ZN8touchgfx14SnapshotWidget12makeSnapshotEv>:
 8016ac4:	6803      	ldr	r3, [r0, #0]
 8016ac6:	f64f 71fe 	movw	r1, #65534	; 0xfffe
 8016aca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8016acc:	4718      	bx	r3

08016ace <_ZNK8touchgfx14SnapshotWidget12getSolidRectEv>:
 8016ace:	f891 3028 	ldrb.w	r3, [r1, #40]	; 0x28
 8016ad2:	2bff      	cmp	r3, #255	; 0xff
 8016ad4:	b510      	push	{r4, lr}
 8016ad6:	d104      	bne.n	8016ae2 <_ZNK8touchgfx14SnapshotWidget12getSolidRectEv+0x14>
 8016ad8:	8cca      	ldrh	r2, [r1, #38]	; 0x26
 8016ada:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8016ade:	429a      	cmp	r2, r3
 8016ae0:	d105      	bne.n	8016aee <_ZNK8touchgfx14SnapshotWidget12getSolidRectEv+0x20>
 8016ae2:	2300      	movs	r3, #0
 8016ae4:	8003      	strh	r3, [r0, #0]
 8016ae6:	8043      	strh	r3, [r0, #2]
 8016ae8:	8083      	strh	r3, [r0, #4]
 8016aea:	80c3      	strh	r3, [r0, #6]
 8016aec:	bd10      	pop	{r4, pc}
 8016aee:	2300      	movs	r3, #0
 8016af0:	f9b1 4008 	ldrsh.w	r4, [r1, #8]
 8016af4:	f9b1 200a 	ldrsh.w	r2, [r1, #10]
 8016af8:	8003      	strh	r3, [r0, #0]
 8016afa:	8043      	strh	r3, [r0, #2]
 8016afc:	8084      	strh	r4, [r0, #4]
 8016afe:	80c2      	strh	r2, [r0, #6]
 8016b00:	e7f4      	b.n	8016aec <_ZNK8touchgfx14SnapshotWidget12getSolidRectEv+0x1e>

08016b02 <_ZNK8touchgfx14SnapshotWidget4drawERKNS_4RectE>:
 8016b02:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8016b06:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
 8016b0a:	b087      	sub	sp, #28
 8016b0c:	4604      	mov	r4, r0
 8016b0e:	4689      	mov	r9, r1
 8016b10:	b363      	cbz	r3, 8016b6c <_ZNK8touchgfx14SnapshotWidget4drawERKNS_4RectE+0x6a>
 8016b12:	8cc2      	ldrh	r2, [r0, #38]	; 0x26
 8016b14:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8016b18:	429a      	cmp	r2, r3
 8016b1a:	d027      	beq.n	8016b6c <_ZNK8touchgfx14SnapshotWidget4drawERKNS_4RectE+0x6a>
 8016b1c:	ad06      	add	r5, sp, #24
 8016b1e:	2700      	movs	r7, #0
 8016b20:	f825 2d0c 	strh.w	r2, [r5, #-12]!
 8016b24:	4628      	mov	r0, r5
 8016b26:	f004 fcd5 	bl	801b4d4 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8016b2a:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 8016b2e:	a904      	add	r1, sp, #16
 8016b30:	f8ad 0014 	strh.w	r0, [sp, #20]
 8016b34:	f8ad 3016 	strh.w	r3, [sp, #22]
 8016b38:	4620      	mov	r0, r4
 8016b3a:	6823      	ldr	r3, [r4, #0]
 8016b3c:	9704      	str	r7, [sp, #16]
 8016b3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016b40:	4798      	blx	r3
 8016b42:	f7fa fbab 	bl	801129c <_ZN8touchgfx3HAL3lcdEv>
 8016b46:	6803      	ldr	r3, [r0, #0]
 8016b48:	4606      	mov	r6, r0
 8016b4a:	4628      	mov	r0, r5
 8016b4c:	f8d3 800c 	ldr.w	r8, [r3, #12]
 8016b50:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8016b52:	f8ad 300c 	strh.w	r3, [sp, #12]
 8016b56:	f004 fdc5 	bl	801b6e4 <_ZNK8touchgfx6Bitmap7getDataEv>
 8016b5a:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8016b5e:	4601      	mov	r1, r0
 8016b60:	9701      	str	r7, [sp, #4]
 8016b62:	aa04      	add	r2, sp, #16
 8016b64:	9300      	str	r3, [sp, #0]
 8016b66:	4630      	mov	r0, r6
 8016b68:	464b      	mov	r3, r9
 8016b6a:	47c0      	blx	r8
 8016b6c:	b007      	add	sp, #28
 8016b6e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08016b72 <_ZN8touchgfx14SnapshotWidget12makeSnapshotEt>:
 8016b72:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8016b74:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 8016b78:	460d      	mov	r5, r1
 8016b7a:	f9b0 2008 	ldrsh.w	r2, [r0, #8]
 8016b7e:	2100      	movs	r1, #0
 8016b80:	f8ad 3006 	strh.w	r3, [sp, #6]
 8016b84:	4604      	mov	r4, r0
 8016b86:	6803      	ldr	r3, [r0, #0]
 8016b88:	f8ad 2004 	strh.w	r2, [sp, #4]
 8016b8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016b8e:	9100      	str	r1, [sp, #0]
 8016b90:	4669      	mov	r1, sp
 8016b92:	4798      	blx	r3
 8016b94:	4621      	mov	r1, r4
 8016b96:	a802      	add	r0, sp, #8
 8016b98:	f002 ffee 	bl	8019b78 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8016b9c:	f7fa fb7e 	bl	801129c <_ZN8touchgfx3HAL3lcdEv>
 8016ba0:	6803      	ldr	r3, [r0, #0]
 8016ba2:	aa02      	add	r2, sp, #8
 8016ba4:	4669      	mov	r1, sp
 8016ba6:	695e      	ldr	r6, [r3, #20]
 8016ba8:	462b      	mov	r3, r5
 8016baa:	47b0      	blx	r6
 8016bac:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8016bb0:	2800      	cmp	r0, #0
 8016bb2:	bf08      	it	eq
 8016bb4:	461d      	moveq	r5, r3
 8016bb6:	84e5      	strh	r5, [r4, #38]	; 0x26
 8016bb8:	b004      	add	sp, #16
 8016bba:	bd70      	pop	{r4, r5, r6, pc}

08016bbc <_ZN8touchgfx14SnapshotWidgetC1Ev>:
 8016bbc:	2200      	movs	r2, #0
 8016bbe:	8082      	strh	r2, [r0, #4]
 8016bc0:	80c2      	strh	r2, [r0, #6]
 8016bc2:	8102      	strh	r2, [r0, #8]
 8016bc4:	8142      	strh	r2, [r0, #10]
 8016bc6:	8182      	strh	r2, [r0, #12]
 8016bc8:	81c2      	strh	r2, [r0, #14]
 8016bca:	8202      	strh	r2, [r0, #16]
 8016bcc:	8242      	strh	r2, [r0, #18]
 8016bce:	61c2      	str	r2, [r0, #28]
 8016bd0:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
 8016bd4:	e9c0 2205 	strd	r2, r2, [r0, #20]
 8016bd8:	2201      	movs	r2, #1
 8016bda:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25
 8016bde:	4a04      	ldr	r2, [pc, #16]	; (8016bf0 <_ZN8touchgfx14SnapshotWidgetC1Ev+0x34>)
 8016be0:	6002      	str	r2, [r0, #0]
 8016be2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8016be6:	84c2      	strh	r2, [r0, #38]	; 0x26
 8016be8:	f880 2028 	strb.w	r2, [r0, #40]	; 0x28
 8016bec:	4770      	bx	lr
 8016bee:	bf00      	nop
 8016bf0:	0802a77c 	.word	0x0802a77c

08016bf4 <_ZNK8touchgfx8TextArea12getSolidRectEv>:
 8016bf4:	2200      	movs	r2, #0
 8016bf6:	8002      	strh	r2, [r0, #0]
 8016bf8:	8042      	strh	r2, [r0, #2]
 8016bfa:	8082      	strh	r2, [r0, #4]
 8016bfc:	80c2      	strh	r2, [r0, #6]
 8016bfe:	4770      	bx	lr

08016c00 <_ZN8touchgfx8TextArea13setXBaselineYEss>:
 8016c00:	b570      	push	{r4, r5, r6, lr}
 8016c02:	6803      	ldr	r3, [r0, #0]
 8016c04:	4604      	mov	r4, r0
 8016c06:	4615      	mov	r5, r2
 8016c08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016c0a:	4798      	blx	r3
 8016c0c:	6823      	ldr	r3, [r4, #0]
 8016c0e:	4629      	mov	r1, r5
 8016c10:	4620      	mov	r0, r4
 8016c12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8016c14:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016c18:	4718      	bx	r3
	...

08016c1c <_ZNK8touchgfx8TextArea12getTextWidthEv>:
 8016c1c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8016c1e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8016c22:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 8016c24:	4299      	cmp	r1, r3
 8016c26:	d029      	beq.n	8016c7c <_ZNK8touchgfx8TextArea12getTextWidthEv+0x60>
 8016c28:	4b15      	ldr	r3, [pc, #84]	; (8016c80 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x64>)
 8016c2a:	681b      	ldr	r3, [r3, #0]
 8016c2c:	b92b      	cbnz	r3, 8016c3a <_ZNK8touchgfx8TextArea12getTextWidthEv+0x1e>
 8016c2e:	4b15      	ldr	r3, [pc, #84]	; (8016c84 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x68>)
 8016c30:	21b1      	movs	r1, #177	; 0xb1
 8016c32:	4a15      	ldr	r2, [pc, #84]	; (8016c88 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x6c>)
 8016c34:	4815      	ldr	r0, [pc, #84]	; (8016c8c <_ZNK8touchgfx8TextArea12getTextWidthEv+0x70>)
 8016c36:	f010 fa77 	bl	8027128 <__assert_func>
 8016c3a:	4a15      	ldr	r2, [pc, #84]	; (8016c90 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x74>)
 8016c3c:	8812      	ldrh	r2, [r2, #0]
 8016c3e:	428a      	cmp	r2, r1
 8016c40:	d803      	bhi.n	8016c4a <_ZNK8touchgfx8TextArea12getTextWidthEv+0x2e>
 8016c42:	4b14      	ldr	r3, [pc, #80]	; (8016c94 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x78>)
 8016c44:	21b2      	movs	r1, #178	; 0xb2
 8016c46:	4a10      	ldr	r2, [pc, #64]	; (8016c88 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x6c>)
 8016c48:	e7f4      	b.n	8016c34 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x18>
 8016c4a:	eb03 0241 	add.w	r2, r3, r1, lsl #1
 8016c4e:	f813 0011 	ldrb.w	r0, [r3, r1, lsl #1]
 8016c52:	4b11      	ldr	r3, [pc, #68]	; (8016c98 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x7c>)
 8016c54:	7854      	ldrb	r4, [r2, #1]
 8016c56:	681b      	ldr	r3, [r3, #0]
 8016c58:	f3c4 0481 	ubfx	r4, r4, #2, #2
 8016c5c:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
 8016c60:	682b      	ldr	r3, [r5, #0]
 8016c62:	69de      	ldr	r6, [r3, #28]
 8016c64:	4b0d      	ldr	r3, [pc, #52]	; (8016c9c <_ZNK8touchgfx8TextArea12getTextWidthEv+0x80>)
 8016c66:	6818      	ldr	r0, [r3, #0]
 8016c68:	f7fc fbec 	bl	8013444 <_ZNK8touchgfx5Texts7getTextEt>
 8016c6c:	2300      	movs	r3, #0
 8016c6e:	4602      	mov	r2, r0
 8016c70:	4621      	mov	r1, r4
 8016c72:	9300      	str	r3, [sp, #0]
 8016c74:	4628      	mov	r0, r5
 8016c76:	47b0      	blx	r6
 8016c78:	b002      	add	sp, #8
 8016c7a:	bd70      	pop	{r4, r5, r6, pc}
 8016c7c:	2000      	movs	r0, #0
 8016c7e:	e7fb      	b.n	8016c78 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x5c>
 8016c80:	2000585c 	.word	0x2000585c
 8016c84:	0802a7e0 	.word	0x0802a7e0
 8016c88:	0802a918 	.word	0x0802a918
 8016c8c:	0802a822 	.word	0x0802a822
 8016c90:	20005860 	.word	0x20005860
 8016c94:	0802a84b 	.word	0x0802a84b
 8016c98:	20005864 	.word	0x20005864
 8016c9c:	20005868 	.word	0x20005868

08016ca0 <_ZN8touchgfx8TextArea12setBaselineYEs>:
 8016ca0:	b570      	push	{r4, r5, r6, lr}
 8016ca2:	6803      	ldr	r3, [r0, #0]
 8016ca4:	4604      	mov	r4, r0
 8016ca6:	b28d      	uxth	r5, r1
 8016ca8:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
 8016caa:	6b1e      	ldr	r6, [r3, #48]	; 0x30
 8016cac:	4b10      	ldr	r3, [pc, #64]	; (8016cf0 <_ZN8touchgfx8TextArea12setBaselineYEs+0x50>)
 8016cae:	681b      	ldr	r3, [r3, #0]
 8016cb0:	b92b      	cbnz	r3, 8016cbe <_ZN8touchgfx8TextArea12setBaselineYEs+0x1e>
 8016cb2:	4b10      	ldr	r3, [pc, #64]	; (8016cf4 <_ZN8touchgfx8TextArea12setBaselineYEs+0x54>)
 8016cb4:	21b1      	movs	r1, #177	; 0xb1
 8016cb6:	4a10      	ldr	r2, [pc, #64]	; (8016cf8 <_ZN8touchgfx8TextArea12setBaselineYEs+0x58>)
 8016cb8:	4810      	ldr	r0, [pc, #64]	; (8016cfc <_ZN8touchgfx8TextArea12setBaselineYEs+0x5c>)
 8016cba:	f010 fa35 	bl	8027128 <__assert_func>
 8016cbe:	4910      	ldr	r1, [pc, #64]	; (8016d00 <_ZN8touchgfx8TextArea12setBaselineYEs+0x60>)
 8016cc0:	8809      	ldrh	r1, [r1, #0]
 8016cc2:	4291      	cmp	r1, r2
 8016cc4:	d803      	bhi.n	8016cce <_ZN8touchgfx8TextArea12setBaselineYEs+0x2e>
 8016cc6:	4b0f      	ldr	r3, [pc, #60]	; (8016d04 <_ZN8touchgfx8TextArea12setBaselineYEs+0x64>)
 8016cc8:	21b2      	movs	r1, #178	; 0xb2
 8016cca:	4a0b      	ldr	r2, [pc, #44]	; (8016cf8 <_ZN8touchgfx8TextArea12setBaselineYEs+0x58>)
 8016ccc:	e7f4      	b.n	8016cb8 <_ZN8touchgfx8TextArea12setBaselineYEs+0x18>
 8016cce:	f813 2012 	ldrb.w	r2, [r3, r2, lsl #1]
 8016cd2:	4b0d      	ldr	r3, [pc, #52]	; (8016d08 <_ZN8touchgfx8TextArea12setBaselineYEs+0x68>)
 8016cd4:	681b      	ldr	r3, [r3, #0]
 8016cd6:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8016cda:	6803      	ldr	r3, [r0, #0]
 8016cdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016cde:	4798      	blx	r3
 8016ce0:	1a29      	subs	r1, r5, r0
 8016ce2:	4633      	mov	r3, r6
 8016ce4:	4620      	mov	r0, r4
 8016ce6:	b209      	sxth	r1, r1
 8016ce8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016cec:	4718      	bx	r3
 8016cee:	bf00      	nop
 8016cf0:	2000585c 	.word	0x2000585c
 8016cf4:	0802a7e0 	.word	0x0802a7e0
 8016cf8:	0802a918 	.word	0x0802a918
 8016cfc:	0802a822 	.word	0x0802a822
 8016d00:	20005860 	.word	0x20005860
 8016d04:	0802a84b 	.word	0x0802a84b
 8016d08:	20005864 	.word	0x20005864

08016d0c <_ZNK8touchgfx8TextArea4drawERKNS_4RectE>:
 8016d0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016d10:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8016d14:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
 8016d16:	b08c      	sub	sp, #48	; 0x30
 8016d18:	4604      	mov	r4, r0
 8016d1a:	4293      	cmp	r3, r2
 8016d1c:	4688      	mov	r8, r1
 8016d1e:	d05f      	beq.n	8016de0 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xd4>
 8016d20:	4e31      	ldr	r6, [pc, #196]	; (8016de8 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xdc>)
 8016d22:	6832      	ldr	r2, [r6, #0]
 8016d24:	b92a      	cbnz	r2, 8016d32 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x26>
 8016d26:	4b31      	ldr	r3, [pc, #196]	; (8016dec <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xe0>)
 8016d28:	21b1      	movs	r1, #177	; 0xb1
 8016d2a:	4a31      	ldr	r2, [pc, #196]	; (8016df0 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xe4>)
 8016d2c:	4831      	ldr	r0, [pc, #196]	; (8016df4 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xe8>)
 8016d2e:	f010 f9fb 	bl	8027128 <__assert_func>
 8016d32:	4d31      	ldr	r5, [pc, #196]	; (8016df8 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xec>)
 8016d34:	8829      	ldrh	r1, [r5, #0]
 8016d36:	4299      	cmp	r1, r3
 8016d38:	d803      	bhi.n	8016d42 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x36>
 8016d3a:	4b30      	ldr	r3, [pc, #192]	; (8016dfc <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xf0>)
 8016d3c:	21b2      	movs	r1, #178	; 0xb2
 8016d3e:	4a2c      	ldr	r2, [pc, #176]	; (8016df0 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xe4>)
 8016d40:	e7f4      	b.n	8016d2c <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x20>
 8016d42:	eb02 0143 	add.w	r1, r2, r3, lsl #1
 8016d46:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 8016d4a:	4b2d      	ldr	r3, [pc, #180]	; (8016e00 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xf4>)
 8016d4c:	681b      	ldr	r3, [r3, #0]
 8016d4e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8016d52:	2a00      	cmp	r2, #0
 8016d54:	d044      	beq.n	8016de0 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xd4>
 8016d56:	784b      	ldrb	r3, [r1, #1]
 8016d58:	f890 a036 	ldrb.w	sl, [r0, #54]	; 0x36
 8016d5c:	f3c3 0901 	ubfx	r9, r3, #0, #2
 8016d60:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8016d64:	f9b0 c034 	ldrsh.w	ip, [r0, #52]	; 0x34
 8016d68:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
 8016d6c:	4b25      	ldr	r3, [pc, #148]	; (8016e04 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xf8>)
 8016d6e:	f890 e038 	ldrb.w	lr, [r0, #56]	; 0x38
 8016d72:	681b      	ldr	r3, [r3, #0]
 8016d74:	f890 7037 	ldrb.w	r7, [r0, #55]	; 0x37
 8016d78:	f890 1039 	ldrb.w	r1, [r0, #57]	; 0x39
 8016d7c:	9207      	str	r2, [sp, #28]
 8016d7e:	6b00      	ldr	r0, [r0, #48]	; 0x30
 8016d80:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 8016d84:	9009      	str	r0, [sp, #36]	; 0x24
 8016d86:	f88d a02a 	strb.w	sl, [sp, #42]	; 0x2a
 8016d8a:	f88d 9020 	strb.w	r9, [sp, #32]
 8016d8e:	f88d e022 	strb.w	lr, [sp, #34]	; 0x22
 8016d92:	f8ad c028 	strh.w	ip, [sp, #40]	; 0x28
 8016d96:	f88d 702b 	strb.w	r7, [sp, #43]	; 0x2b
 8016d9a:	f88d 102c 	strb.w	r1, [sp, #44]	; 0x2c
 8016d9e:	b10a      	cbz	r2, 8016da4 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x98>
 8016da0:	6cdf      	ldr	r7, [r3, #76]	; 0x4c
 8016da2:	b907      	cbnz	r7, 8016da6 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x9a>
 8016da4:	689f      	ldr	r7, [r3, #8]
 8016da6:	f10d 0914 	add.w	r9, sp, #20
 8016daa:	4621      	mov	r1, r4
 8016dac:	4648      	mov	r0, r9
 8016dae:	f002 fee3 	bl	8019b78 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8016db2:	6833      	ldr	r3, [r6, #0]
 8016db4:	2b00      	cmp	r3, #0
 8016db6:	d0b6      	beq.n	8016d26 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x1a>
 8016db8:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 8016dba:	882b      	ldrh	r3, [r5, #0]
 8016dbc:	428b      	cmp	r3, r1
 8016dbe:	d9bc      	bls.n	8016d3a <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x2e>
 8016dc0:	4b11      	ldr	r3, [pc, #68]	; (8016e08 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xfc>)
 8016dc2:	6818      	ldr	r0, [r3, #0]
 8016dc4:	f7fc fb3e 	bl	8013444 <_ZNK8touchgfx5Texts7getTextEt>
 8016dc8:	2300      	movs	r3, #0
 8016dca:	9001      	str	r0, [sp, #4]
 8016dcc:	4638      	mov	r0, r7
 8016dce:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8016dd2:	ab07      	add	r3, sp, #28
 8016dd4:	9300      	str	r3, [sp, #0]
 8016dd6:	4643      	mov	r3, r8
 8016dd8:	e899 0006 	ldmia.w	r9, {r1, r2}
 8016ddc:	f7fc fac3 	bl	8013366 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>
 8016de0:	b00c      	add	sp, #48	; 0x30
 8016de2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016de6:	bf00      	nop
 8016de8:	2000585c 	.word	0x2000585c
 8016dec:	0802a7e0 	.word	0x0802a7e0
 8016df0:	0802a918 	.word	0x0802a918
 8016df4:	0802a822 	.word	0x0802a822
 8016df8:	20005860 	.word	0x20005860
 8016dfc:	0802a84b 	.word	0x0802a84b
 8016e00:	20005864 	.word	0x20005864
 8016e04:	2000580c 	.word	0x2000580c
 8016e08:	20005868 	.word	0x20005868

08016e0c <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz>:
 8016e0c:	b40e      	push	{r1, r2, r3}
 8016e0e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8016e12:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016e16:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
 8016e18:	b09b      	sub	sp, #108	; 0x6c
 8016e1a:	4604      	mov	r4, r0
 8016e1c:	4293      	cmp	r3, r2
 8016e1e:	d061      	beq.n	8016ee4 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xd8>
 8016e20:	aa24      	add	r2, sp, #144	; 0x90
 8016e22:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8016ef8 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xec>
 8016e26:	9203      	str	r2, [sp, #12]
 8016e28:	f8da 2000 	ldr.w	r2, [sl]
 8016e2c:	b92a      	cbnz	r2, 8016e3a <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x2e>
 8016e2e:	4b2e      	ldr	r3, [pc, #184]	; (8016ee8 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xdc>)
 8016e30:	21b1      	movs	r1, #177	; 0xb1
 8016e32:	4a2e      	ldr	r2, [pc, #184]	; (8016eec <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xe0>)
 8016e34:	482e      	ldr	r0, [pc, #184]	; (8016ef0 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xe4>)
 8016e36:	f010 f977 	bl	8027128 <__assert_func>
 8016e3a:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 8016efc <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xf0>
 8016e3e:	f8b8 1000 	ldrh.w	r1, [r8]
 8016e42:	4299      	cmp	r1, r3
 8016e44:	d803      	bhi.n	8016e4e <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x42>
 8016e46:	4b2b      	ldr	r3, [pc, #172]	; (8016ef4 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xe8>)
 8016e48:	21b2      	movs	r1, #178	; 0xb2
 8016e4a:	4a28      	ldr	r2, [pc, #160]	; (8016eec <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xe0>)
 8016e4c:	e7f2      	b.n	8016e34 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x28>
 8016e4e:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 8016f00 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xf4>
 8016e52:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 8016e56:	f8d9 3000 	ldr.w	r3, [r9]
 8016e5a:	f853 7022 	ldr.w	r7, [r3, r2, lsl #2]
 8016e5e:	683b      	ldr	r3, [r7, #0]
 8016e60:	4638      	mov	r0, r7
 8016e62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016e64:	4798      	blx	r3
 8016e66:	4606      	mov	r6, r0
 8016e68:	b205      	sxth	r5, r0
 8016e6a:	a804      	add	r0, sp, #16
 8016e6c:	f003 fac6 	bl	801a3fc <_ZN8touchgfx12TextProviderC1Ev>
 8016e70:	683b      	ldr	r3, [r7, #0]
 8016e72:	4638      	mov	r0, r7
 8016e74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8016e76:	4798      	blx	r3
 8016e78:	9923      	ldr	r1, [sp, #140]	; 0x8c
 8016e7a:	4603      	mov	r3, r0
 8016e7c:	9a03      	ldr	r2, [sp, #12]
 8016e7e:	a804      	add	r0, sp, #16
 8016e80:	f003 fb01 	bl	801a486 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 8016e84:	f8da 3000 	ldr.w	r3, [sl]
 8016e88:	f894 1039 	ldrb.w	r1, [r4, #57]	; 0x39
 8016e8c:	2b00      	cmp	r3, #0
 8016e8e:	d0ce      	beq.n	8016e2e <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x22>
 8016e90:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
 8016e92:	f8b8 0000 	ldrh.w	r0, [r8]
 8016e96:	4290      	cmp	r0, r2
 8016e98:	d9d5      	bls.n	8016e46 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x3a>
 8016e9a:	eb03 0742 	add.w	r7, r3, r2, lsl #1
 8016e9e:	f813 0012 	ldrb.w	r0, [r3, r2, lsl #1]
 8016ea2:	f8d9 3000 	ldr.w	r3, [r9]
 8016ea6:	787a      	ldrb	r2, [r7, #1]
 8016ea8:	f9b4 7008 	ldrsh.w	r7, [r4, #8]
 8016eac:	f3c2 0281 	ubfx	r2, r2, #2, #2
 8016eb0:	9700      	str	r7, [sp, #0]
 8016eb2:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8016eb6:	a804      	add	r0, sp, #16
 8016eb8:	f001 f9c7 	bl	801824a <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs>
 8016ebc:	f9b4 2034 	ldrsh.w	r2, [r4, #52]	; 0x34
 8016ec0:	b203      	sxth	r3, r0
 8016ec2:	18a9      	adds	r1, r5, r2
 8016ec4:	2900      	cmp	r1, #0
 8016ec6:	dd0b      	ble.n	8016ee0 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xd4>
 8016ec8:	3b01      	subs	r3, #1
 8016eca:	fb13 f302 	smulbb	r3, r3, r2
 8016ece:	fb16 3300 	smlabb	r3, r6, r0, r3
 8016ed2:	b21d      	sxth	r5, r3
 8016ed4:	4628      	mov	r0, r5
 8016ed6:	b01b      	add	sp, #108	; 0x6c
 8016ed8:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016edc:	b003      	add	sp, #12
 8016ede:	4770      	bx	lr
 8016ee0:	2b00      	cmp	r3, #0
 8016ee2:	dcf7      	bgt.n	8016ed4 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xc8>
 8016ee4:	2500      	movs	r5, #0
 8016ee6:	e7f5      	b.n	8016ed4 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xc8>
 8016ee8:	0802a7e0 	.word	0x0802a7e0
 8016eec:	0802a918 	.word	0x0802a918
 8016ef0:	0802a822 	.word	0x0802a822
 8016ef4:	0802a84b 	.word	0x0802a84b
 8016ef8:	2000585c 	.word	0x2000585c
 8016efc:	20005860 	.word	0x20005860
 8016f00:	20005864 	.word	0x20005864

08016f04 <_ZN8touchgfx8TextArea13getTextHeightEv>:
 8016f04:	b570      	push	{r4, r5, r6, lr}
 8016f06:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8016f0a:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 8016f0c:	4604      	mov	r4, r0
 8016f0e:	4299      	cmp	r1, r3
 8016f10:	d01e      	beq.n	8016f50 <_ZN8touchgfx8TextArea13getTextHeightEv+0x4c>
 8016f12:	6803      	ldr	r3, [r0, #0]
 8016f14:	6edd      	ldr	r5, [r3, #108]	; 0x6c
 8016f16:	4b0f      	ldr	r3, [pc, #60]	; (8016f54 <_ZN8touchgfx8TextArea13getTextHeightEv+0x50>)
 8016f18:	681b      	ldr	r3, [r3, #0]
 8016f1a:	b92b      	cbnz	r3, 8016f28 <_ZN8touchgfx8TextArea13getTextHeightEv+0x24>
 8016f1c:	4b0e      	ldr	r3, [pc, #56]	; (8016f58 <_ZN8touchgfx8TextArea13getTextHeightEv+0x54>)
 8016f1e:	21b1      	movs	r1, #177	; 0xb1
 8016f20:	4a0e      	ldr	r2, [pc, #56]	; (8016f5c <_ZN8touchgfx8TextArea13getTextHeightEv+0x58>)
 8016f22:	480f      	ldr	r0, [pc, #60]	; (8016f60 <_ZN8touchgfx8TextArea13getTextHeightEv+0x5c>)
 8016f24:	f010 f900 	bl	8027128 <__assert_func>
 8016f28:	4b0e      	ldr	r3, [pc, #56]	; (8016f64 <_ZN8touchgfx8TextArea13getTextHeightEv+0x60>)
 8016f2a:	881b      	ldrh	r3, [r3, #0]
 8016f2c:	428b      	cmp	r3, r1
 8016f2e:	d803      	bhi.n	8016f38 <_ZN8touchgfx8TextArea13getTextHeightEv+0x34>
 8016f30:	4b0d      	ldr	r3, [pc, #52]	; (8016f68 <_ZN8touchgfx8TextArea13getTextHeightEv+0x64>)
 8016f32:	21b2      	movs	r1, #178	; 0xb2
 8016f34:	4a09      	ldr	r2, [pc, #36]	; (8016f5c <_ZN8touchgfx8TextArea13getTextHeightEv+0x58>)
 8016f36:	e7f4      	b.n	8016f22 <_ZN8touchgfx8TextArea13getTextHeightEv+0x1e>
 8016f38:	4b0c      	ldr	r3, [pc, #48]	; (8016f6c <_ZN8touchgfx8TextArea13getTextHeightEv+0x68>)
 8016f3a:	6818      	ldr	r0, [r3, #0]
 8016f3c:	f7fc fa82 	bl	8013444 <_ZNK8touchgfx5Texts7getTextEt>
 8016f40:	2300      	movs	r3, #0
 8016f42:	4601      	mov	r1, r0
 8016f44:	46ac      	mov	ip, r5
 8016f46:	4620      	mov	r0, r4
 8016f48:	461a      	mov	r2, r3
 8016f4a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016f4e:	4760      	bx	ip
 8016f50:	2000      	movs	r0, #0
 8016f52:	bd70      	pop	{r4, r5, r6, pc}
 8016f54:	2000585c 	.word	0x2000585c
 8016f58:	0802a7e0 	.word	0x0802a7e0
 8016f5c:	0802a918 	.word	0x0802a918
 8016f60:	0802a822 	.word	0x0802a822
 8016f64:	20005860 	.word	0x20005860
 8016f68:	0802a84b 	.word	0x0802a84b
 8016f6c:	20005868 	.word	0x20005868

08016f70 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>:
 8016f70:	b538      	push	{r3, r4, r5, lr}
 8016f72:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8016f76:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
 8016f78:	4604      	mov	r4, r0
 8016f7a:	429a      	cmp	r2, r3
 8016f7c:	d014      	beq.n	8016fa8 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv+0x38>
 8016f7e:	6803      	ldr	r3, [r0, #0]
 8016f80:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8016f82:	4798      	blx	r3
 8016f84:	6823      	ldr	r3, [r4, #0]
 8016f86:	4605      	mov	r5, r0
 8016f88:	4620      	mov	r0, r4
 8016f8a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8016f8c:	4798      	blx	r3
 8016f8e:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8016f92:	b22d      	sxth	r5, r5
 8016f94:	4601      	mov	r1, r0
 8016f96:	f013 0ffd 	tst.w	r3, #253	; 0xfd
 8016f9a:	bf06      	itte	eq
 8016f9c:	4602      	moveq	r2, r0
 8016f9e:	4629      	moveq	r1, r5
 8016fa0:	462a      	movne	r2, r5
 8016fa2:	4620      	mov	r0, r4
 8016fa4:	f7fa f8d3 	bl	801114e <_ZN8touchgfx8Drawable14setWidthHeightEss>
 8016fa8:	bd38      	pop	{r3, r4, r5, pc}

08016faa <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>:
 8016faa:	888a      	ldrh	r2, [r1, #4]
 8016fac:	8582      	strh	r2, [r0, #44]	; 0x2c
 8016fae:	f9b0 2008 	ldrsh.w	r2, [r0, #8]
 8016fb2:	b922      	cbnz	r2, 8016fbe <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE+0x14>
 8016fb4:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 8016fb8:	b90b      	cbnz	r3, 8016fbe <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE+0x14>
 8016fba:	f7ff bfd9 	b.w	8016f70 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
 8016fbe:	4770      	bx	lr

08016fc0 <_ZNK8touchgfx3Box12getSolidRectEv>:
 8016fc0:	2300      	movs	r3, #0
 8016fc2:	8083      	strh	r3, [r0, #4]
 8016fc4:	80c3      	strh	r3, [r0, #6]
 8016fc6:	8003      	strh	r3, [r0, #0]
 8016fc8:	8043      	strh	r3, [r0, #2]
 8016fca:	f891 3026 	ldrb.w	r3, [r1, #38]	; 0x26
 8016fce:	2bff      	cmp	r3, #255	; 0xff
 8016fd0:	bf01      	itttt	eq
 8016fd2:	890b      	ldrheq	r3, [r1, #8]
 8016fd4:	8083      	strheq	r3, [r0, #4]
 8016fd6:	894b      	ldrheq	r3, [r1, #10]
 8016fd8:	80c3      	strheq	r3, [r0, #6]
 8016fda:	4770      	bx	lr

08016fdc <_ZNK8touchgfx3Box4drawERKNS_4RectE>:
 8016fdc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8016fde:	4604      	mov	r4, r0
 8016fe0:	466b      	mov	r3, sp
 8016fe2:	6808      	ldr	r0, [r1, #0]
 8016fe4:	6849      	ldr	r1, [r1, #4]
 8016fe6:	c303      	stmia	r3!, {r0, r1}
 8016fe8:	6823      	ldr	r3, [r4, #0]
 8016fea:	4669      	mov	r1, sp
 8016fec:	4620      	mov	r0, r4
 8016fee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016ff0:	4798      	blx	r3
 8016ff2:	4b08      	ldr	r3, [pc, #32]	; (8017014 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x38>)
 8016ff4:	681b      	ldr	r3, [r3, #0]
 8016ff6:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 8016ffa:	b10a      	cbz	r2, 8017000 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x24>
 8016ffc:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8016ffe:	b900      	cbnz	r0, 8017002 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x26>
 8017000:	6898      	ldr	r0, [r3, #8]
 8017002:	6803      	ldr	r3, [r0, #0]
 8017004:	4669      	mov	r1, sp
 8017006:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8017008:	699d      	ldr	r5, [r3, #24]
 801700a:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
 801700e:	47a8      	blx	r5
 8017010:	b003      	add	sp, #12
 8017012:	bd30      	pop	{r4, r5, pc}
 8017014:	2000580c 	.word	0x2000580c

08017018 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>:
 8017018:	b570      	push	{r4, r5, r6, lr}
 801701a:	880b      	ldrh	r3, [r1, #0]
 801701c:	4605      	mov	r5, r0
 801701e:	4604      	mov	r4, r0
 8017020:	85c3      	strh	r3, [r0, #46]	; 0x2e
 8017022:	8813      	ldrh	r3, [r2, #0]
 8017024:	f825 3f30 	strh.w	r3, [r5, #48]!
 8017028:	4628      	mov	r0, r5
 801702a:	f004 fa53 	bl	801b4d4 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801702e:	4606      	mov	r6, r0
 8017030:	4628      	mov	r0, r5
 8017032:	f004 fa89 	bl	801b548 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8017036:	6823      	ldr	r3, [r4, #0]
 8017038:	4605      	mov	r5, r0
 801703a:	b231      	sxth	r1, r6
 801703c:	4620      	mov	r0, r4
 801703e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8017040:	4798      	blx	r3
 8017042:	6823      	ldr	r3, [r4, #0]
 8017044:	b229      	sxth	r1, r5
 8017046:	4620      	mov	r0, r4
 8017048:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801704a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801704e:	4718      	bx	r3

08017050 <_ZNK8touchgfx6Button12getSolidRectEv>:
 8017050:	b510      	push	{r4, lr}
 8017052:	f891 3032 	ldrb.w	r3, [r1, #50]	; 0x32
 8017056:	4604      	mov	r4, r0
 8017058:	2bff      	cmp	r3, #255	; 0xff
 801705a:	d006      	beq.n	801706a <_ZNK8touchgfx6Button12getSolidRectEv+0x1a>
 801705c:	2300      	movs	r3, #0
 801705e:	8003      	strh	r3, [r0, #0]
 8017060:	8043      	strh	r3, [r0, #2]
 8017062:	8083      	strh	r3, [r0, #4]
 8017064:	80c3      	strh	r3, [r0, #6]
 8017066:	4620      	mov	r0, r4
 8017068:	bd10      	pop	{r4, pc}
 801706a:	f891 302c 	ldrb.w	r3, [r1, #44]	; 0x2c
 801706e:	b11b      	cbz	r3, 8017078 <_ZNK8touchgfx6Button12getSolidRectEv+0x28>
 8017070:	3130      	adds	r1, #48	; 0x30
 8017072:	f004 faa3 	bl	801b5bc <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 8017076:	e7f6      	b.n	8017066 <_ZNK8touchgfx6Button12getSolidRectEv+0x16>
 8017078:	312e      	adds	r1, #46	; 0x2e
 801707a:	e7fa      	b.n	8017072 <_ZNK8touchgfx6Button12getSolidRectEv+0x22>

0801707c <_ZNK8touchgfx6Button4drawERKNS_4RectE>:
 801707c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017080:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 8017084:	b08a      	sub	sp, #40	; 0x28
 8017086:	4604      	mov	r4, r0
 8017088:	4688      	mov	r8, r1
 801708a:	2b00      	cmp	r3, #0
 801708c:	d044      	beq.n	8017118 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x9c>
 801708e:	8e03      	ldrh	r3, [r0, #48]	; 0x30
 8017090:	a805      	add	r0, sp, #20
 8017092:	f8ad 3014 	strh.w	r3, [sp, #20]
 8017096:	f004 fa1d 	bl	801b4d4 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801709a:	4605      	mov	r5, r0
 801709c:	b206      	sxth	r6, r0
 801709e:	a805      	add	r0, sp, #20
 80170a0:	f004 fa52 	bl	801b548 <_ZNK8touchgfx6Bitmap9getHeightEv>
 80170a4:	f9b8 2000 	ldrsh.w	r2, [r8]
 80170a8:	f8b8 7004 	ldrh.w	r7, [r8, #4]
 80170ac:	2300      	movs	r3, #0
 80170ae:	fa0f fc80 	sxth.w	ip, r0
 80170b2:	4417      	add	r7, r2
 80170b4:	9306      	str	r3, [sp, #24]
 80170b6:	b2bf      	uxth	r7, r7
 80170b8:	fa0f fe87 	sxth.w	lr, r7
 80170bc:	459e      	cmp	lr, r3
 80170be:	dd2d      	ble.n	801711c <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xa0>
 80170c0:	4296      	cmp	r6, r2
 80170c2:	dd2b      	ble.n	801711c <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xa0>
 80170c4:	f9b8 3002 	ldrsh.w	r3, [r8, #2]
 80170c8:	f8b8 1006 	ldrh.w	r1, [r8, #6]
 80170cc:	4419      	add	r1, r3
 80170ce:	b289      	uxth	r1, r1
 80170d0:	fa0f f881 	sxth.w	r8, r1
 80170d4:	f1b8 0f00 	cmp.w	r8, #0
 80170d8:	dd20      	ble.n	801711c <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xa0>
 80170da:	459c      	cmp	ip, r3
 80170dc:	dd1e      	ble.n	801711c <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xa0>
 80170de:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 80170e2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80170e6:	4576      	cmp	r6, lr
 80170e8:	bfa8      	it	ge
 80170ea:	463d      	movge	r5, r7
 80170ec:	45c4      	cmp	ip, r8
 80170ee:	bfa8      	it	ge
 80170f0:	4608      	movge	r0, r1
 80170f2:	f8ad 2018 	strh.w	r2, [sp, #24]
 80170f6:	1aad      	subs	r5, r5, r2
 80170f8:	1ac0      	subs	r0, r0, r3
 80170fa:	f8ad 301a 	strh.w	r3, [sp, #26]
 80170fe:	f8ad 501c 	strh.w	r5, [sp, #28]
 8017102:	f8ad 001e 	strh.w	r0, [sp, #30]
 8017106:	4b1f      	ldr	r3, [pc, #124]	; (8017184 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x108>)
 8017108:	681b      	ldr	r3, [r3, #0]
 801710a:	b953      	cbnz	r3, 8017122 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xa6>
 801710c:	4b1e      	ldr	r3, [pc, #120]	; (8017188 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x10c>)
 801710e:	218b      	movs	r1, #139	; 0x8b
 8017110:	4a1e      	ldr	r2, [pc, #120]	; (801718c <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x110>)
 8017112:	481f      	ldr	r0, [pc, #124]	; (8017190 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x114>)
 8017114:	f010 f808 	bl	8027128 <__assert_func>
 8017118:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 801711a:	e7b9      	b.n	8017090 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x14>
 801711c:	2300      	movs	r3, #0
 801711e:	9307      	str	r3, [sp, #28]
 8017120:	e7f1      	b.n	8017106 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x8a>
 8017122:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 8017126:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801712a:	429a      	cmp	r2, r3
 801712c:	d026      	beq.n	801717c <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x100>
 801712e:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 8017132:	2b00      	cmp	r3, #0
 8017134:	dd22      	ble.n	801717c <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x100>
 8017136:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
 801713a:	2b00      	cmp	r3, #0
 801713c:	dd1e      	ble.n	801717c <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x100>
 801713e:	2300      	movs	r3, #0
 8017140:	a908      	add	r1, sp, #32
 8017142:	4620      	mov	r0, r4
 8017144:	e9cd 3308 	strd	r3, r3, [sp, #32]
 8017148:	6823      	ldr	r3, [r4, #0]
 801714a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801714c:	4798      	blx	r3
 801714e:	4b11      	ldr	r3, [pc, #68]	; (8017194 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x118>)
 8017150:	681b      	ldr	r3, [r3, #0]
 8017152:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 8017156:	b10a      	cbz	r2, 801715c <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe0>
 8017158:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 801715a:	b900      	cbnz	r0, 801715e <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe2>
 801715c:	6898      	ldr	r0, [r3, #8]
 801715e:	2501      	movs	r5, #1
 8017160:	6801      	ldr	r1, [r0, #0]
 8017162:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 8017166:	9502      	str	r5, [sp, #8]
 8017168:	f894 4032 	ldrb.w	r4, [r4, #50]	; 0x32
 801716c:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 8017170:	9401      	str	r4, [sp, #4]
 8017172:	ac06      	add	r4, sp, #24
 8017174:	9400      	str	r4, [sp, #0]
 8017176:	688c      	ldr	r4, [r1, #8]
 8017178:	a905      	add	r1, sp, #20
 801717a:	47a0      	blx	r4
 801717c:	b00a      	add	sp, #40	; 0x28
 801717e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017182:	bf00      	nop
 8017184:	20005894 	.word	0x20005894
 8017188:	0802a9ac 	.word	0x0802a9ac
 801718c:	0802aa80 	.word	0x0802aa80
 8017190:	0802a9e8 	.word	0x0802a9e8
 8017194:	2000580c 	.word	0x2000580c

08017198 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>:
 8017198:	b570      	push	{r4, r5, r6, lr}
 801719a:	880b      	ldrh	r3, [r1, #0]
 801719c:	460d      	mov	r5, r1
 801719e:	4604      	mov	r4, r0
 80171a0:	84c3      	strh	r3, [r0, #38]	; 0x26
 80171a2:	4608      	mov	r0, r1
 80171a4:	f004 f996 	bl	801b4d4 <_ZNK8touchgfx6Bitmap8getWidthEv>
 80171a8:	4606      	mov	r6, r0
 80171aa:	4628      	mov	r0, r5
 80171ac:	f004 f9cc 	bl	801b548 <_ZNK8touchgfx6Bitmap9getHeightEv>
 80171b0:	6823      	ldr	r3, [r4, #0]
 80171b2:	4605      	mov	r5, r0
 80171b4:	b231      	sxth	r1, r6
 80171b6:	4620      	mov	r0, r4
 80171b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80171ba:	4798      	blx	r3
 80171bc:	6823      	ldr	r3, [r4, #0]
 80171be:	b229      	sxth	r1, r5
 80171c0:	4620      	mov	r0, r4
 80171c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80171c4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80171c8:	4718      	bx	r3

080171ca <_ZNK8touchgfx5Image12getSolidRectEv>:
 80171ca:	b510      	push	{r4, lr}
 80171cc:	f891 3028 	ldrb.w	r3, [r1, #40]	; 0x28
 80171d0:	4604      	mov	r4, r0
 80171d2:	2bff      	cmp	r3, #255	; 0xff
 80171d4:	d006      	beq.n	80171e4 <_ZNK8touchgfx5Image12getSolidRectEv+0x1a>
 80171d6:	2300      	movs	r3, #0
 80171d8:	8003      	strh	r3, [r0, #0]
 80171da:	8043      	strh	r3, [r0, #2]
 80171dc:	8083      	strh	r3, [r0, #4]
 80171de:	80c3      	strh	r3, [r0, #6]
 80171e0:	4620      	mov	r0, r4
 80171e2:	bd10      	pop	{r4, pc}
 80171e4:	3126      	adds	r1, #38	; 0x26
 80171e6:	f004 f9e9 	bl	801b5bc <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 80171ea:	e7f9      	b.n	80171e0 <_ZNK8touchgfx5Image12getSolidRectEv+0x16>

080171ec <_ZNK8touchgfx5Image4drawERKNS_4RectE>:
 80171ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80171f0:	4604      	mov	r4, r0
 80171f2:	b088      	sub	sp, #32
 80171f4:	2500      	movs	r5, #0
 80171f6:	460f      	mov	r7, r1
 80171f8:	f854 3b26 	ldr.w	r3, [r4], #38
 80171fc:	a904      	add	r1, sp, #16
 80171fe:	4606      	mov	r6, r0
 8017200:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017202:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8017206:	4798      	blx	r3
 8017208:	4620      	mov	r0, r4
 801720a:	f004 f963 	bl	801b4d4 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801720e:	4680      	mov	r8, r0
 8017210:	4620      	mov	r0, r4
 8017212:	f004 f999 	bl	801b548 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8017216:	9506      	str	r5, [sp, #24]
 8017218:	ad06      	add	r5, sp, #24
 801721a:	f8ad 001e 	strh.w	r0, [sp, #30]
 801721e:	4639      	mov	r1, r7
 8017220:	f8ad 801c 	strh.w	r8, [sp, #28]
 8017224:	4628      	mov	r0, r5
 8017226:	f7fe f91d 	bl	8015464 <_ZN8touchgfx4RectaNERKS0_>
 801722a:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 801722e:	2b00      	cmp	r3, #0
 8017230:	dd19      	ble.n	8017266 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x7a>
 8017232:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
 8017236:	2b00      	cmp	r3, #0
 8017238:	dd15      	ble.n	8017266 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x7a>
 801723a:	4b0c      	ldr	r3, [pc, #48]	; (801726c <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x80>)
 801723c:	681b      	ldr	r3, [r3, #0]
 801723e:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 8017242:	b10a      	cbz	r2, 8017248 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x5c>
 8017244:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8017246:	b900      	cbnz	r0, 801724a <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x5e>
 8017248:	6898      	ldr	r0, [r3, #8]
 801724a:	2701      	movs	r7, #1
 801724c:	6801      	ldr	r1, [r0, #0]
 801724e:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8017252:	9702      	str	r7, [sp, #8]
 8017254:	f896 6028 	ldrb.w	r6, [r6, #40]	; 0x28
 8017258:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 801725c:	e9cd 5600 	strd	r5, r6, [sp]
 8017260:	688d      	ldr	r5, [r1, #8]
 8017262:	4621      	mov	r1, r4
 8017264:	47a8      	blx	r5
 8017266:	b008      	add	sp, #32
 8017268:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801726c:	2000580c 	.word	0x2000580c

08017270 <_ZN8touchgfx3LCD18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 8017270:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017274:	4696      	mov	lr, r2
 8017276:	b097      	sub	sp, #92	; 0x5c
 8017278:	4605      	mov	r5, r0
 801727a:	4614      	mov	r4, r2
 801727c:	460e      	mov	r6, r1
 801727e:	461f      	mov	r7, r3
 8017280:	f10d 0c1c 	add.w	ip, sp, #28
 8017284:	f8bd 8088 	ldrh.w	r8, [sp, #136]	; 0x88
 8017288:	f89d 908c 	ldrb.w	r9, [sp, #140]	; 0x8c
 801728c:	f8bd a090 	ldrh.w	sl, [sp, #144]	; 0x90
 8017290:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8017294:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8017298:	f8de 3000 	ldr.w	r3, [lr]
 801729c:	f104 0e14 	add.w	lr, r4, #20
 80172a0:	f8cc 3000 	str.w	r3, [ip]
 80172a4:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 80172a8:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80172ac:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80172b0:	f8de 3000 	ldr.w	r3, [lr]
 80172b4:	f104 0e28 	add.w	lr, r4, #40	; 0x28
 80172b8:	f8cc 3000 	str.w	r3, [ip]
 80172bc:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
 80172c0:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80172c4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80172c8:	f8de 3000 	ldr.w	r3, [lr]
 80172cc:	4631      	mov	r1, r6
 80172ce:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80172d0:	4628      	mov	r0, r5
 80172d2:	f8cc 3000 	str.w	r3, [ip]
 80172d6:	682b      	ldr	r3, [r5, #0]
 80172d8:	9201      	str	r2, [sp, #4]
 80172da:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80172dc:	f8cd 8008 	str.w	r8, [sp, #8]
 80172e0:	9200      	str	r2, [sp, #0]
 80172e2:	aa07      	add	r2, sp, #28
 80172e4:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 80172e8:	f8d3 b038 	ldr.w	fp, [r3, #56]	; 0x38
 80172ec:	463b      	mov	r3, r7
 80172ee:	47d8      	blx	fp
 80172f0:	46a6      	mov	lr, r4
 80172f2:	f10d 0c1c 	add.w	ip, sp, #28
 80172f6:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80172fa:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80172fe:	f8de 3000 	ldr.w	r3, [lr]
 8017302:	f104 0e28 	add.w	lr, r4, #40	; 0x28
 8017306:	343c      	adds	r4, #60	; 0x3c
 8017308:	f8cc 3000 	str.w	r3, [ip]
 801730c:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 8017310:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8017314:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8017318:	f8de 3000 	ldr.w	r3, [lr]
 801731c:	f8cc 3000 	str.w	r3, [ip]
 8017320:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
 8017324:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8017326:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801732a:	6823      	ldr	r3, [r4, #0]
 801732c:	4631      	mov	r1, r6
 801732e:	4628      	mov	r0, r5
 8017330:	f8cc 3000 	str.w	r3, [ip]
 8017334:	682b      	ldr	r3, [r5, #0]
 8017336:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 801733a:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801733c:	f8cd 8008 	str.w	r8, [sp, #8]
 8017340:	9201      	str	r2, [sp, #4]
 8017342:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8017344:	9200      	str	r2, [sp, #0]
 8017346:	aa07      	add	r2, sp, #28
 8017348:	6b9c      	ldr	r4, [r3, #56]	; 0x38
 801734a:	463b      	mov	r3, r7
 801734c:	47a0      	blx	r4
 801734e:	b017      	add	sp, #92	; 0x5c
 8017350:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08017354 <_ZN8touchgfx3LCD28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 8017354:	2000      	movs	r0, #0
 8017356:	4770      	bx	lr

08017358 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht>:
 8017358:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801735c:	b08d      	sub	sp, #52	; 0x34
 801735e:	4688      	mov	r8, r1
 8017360:	f8d3 c000 	ldr.w	ip, [r3]
 8017364:	9916      	ldr	r1, [sp, #88]	; 0x58
 8017366:	f8bd 4070 	ldrh.w	r4, [sp, #112]	; 0x70
 801736a:	680f      	ldr	r7, [r1, #0]
 801736c:	ed92 4a09 	vldr	s8, [r2, #36]	; 0x24
 8017370:	eba7 070c 	sub.w	r7, r7, ip
 8017374:	edd2 4a0b 	vldr	s9, [r2, #44]	; 0x2c
 8017378:	edd3 6a07 	vldr	s13, [r3, #28]
 801737c:	42bc      	cmp	r4, r7
 801737e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8017380:	f8dd a064 	ldr.w	sl, [sp, #100]	; 0x64
 8017384:	bfa8      	it	ge
 8017386:	463c      	movge	r4, r7
 8017388:	f9b1 9000 	ldrsh.w	r9, [r1]
 801738c:	f9ba 1000 	ldrsh.w	r1, [sl]
 8017390:	ee07 4a90 	vmov	s15, r4
 8017394:	eb09 0e0c 	add.w	lr, r9, ip
 8017398:	edd3 1a0a 	vldr	s3, [r3, #40]	; 0x28
 801739c:	eeb8 5ae7 	vcvt.f32.s32	s10, s15
 80173a0:	edd2 7a0d 	vldr	s15, [r2, #52]	; 0x34
 80173a4:	ed93 2a0d 	vldr	s4, [r3, #52]	; 0x34
 80173a8:	4571      	cmp	r1, lr
 80173aa:	ee25 4a04 	vmul.f32	s8, s10, s8
 80173ae:	ee65 4a24 	vmul.f32	s9, s10, s9
 80173b2:	ee25 5a27 	vmul.f32	s10, s10, s15
 80173b6:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80173ba:	ee71 0aa4 	vadd.f32	s1, s3, s9
 80173be:	ee32 1a05 	vadd.f32	s2, s4, s10
 80173c2:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80173c6:	ee36 0a84 	vadd.f32	s0, s13, s8
 80173ca:	ee61 1a87 	vmul.f32	s3, s3, s14
 80173ce:	ee22 2a07 	vmul.f32	s4, s4, s14
 80173d2:	f340 808c 	ble.w	80174ee <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x196>
 80173d6:	eba1 060e 	sub.w	r6, r1, lr
 80173da:	fb96 f5f4 	sdiv	r5, r6, r4
 80173de:	ee07 5a10 	vmov	s14, r5
 80173e2:	2d00      	cmp	r5, #0
 80173e4:	fb04 6615 	mls	r6, r4, r5, r6
 80173e8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80173ec:	eea7 0a04 	vfma.f32	s0, s14, s8
 80173f0:	eee7 0a24 	vfma.f32	s1, s14, s9
 80173f4:	eea7 1a05 	vfma.f32	s2, s14, s10
 80173f8:	dd12      	ble.n	8017420 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xc8>
 80173fa:	ee70 6a44 	vsub.f32	s13, s0, s8
 80173fe:	ee70 1ae4 	vsub.f32	s3, s1, s9
 8017402:	ee31 2a45 	vsub.f32	s4, s2, s10
 8017406:	eef5 6a40 	vcmp.f32	s13, #0.0
 801740a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801740e:	bf14      	ite	ne
 8017410:	ee87 7aa6 	vdivne.f32	s14, s15, s13
 8017414:	eeb0 7a67 	vmoveq.f32	s14, s15
 8017418:	ee61 1a87 	vmul.f32	s3, s3, s14
 801741c:	ee22 2a07 	vmul.f32	s4, s4, s14
 8017420:	fb05 f204 	mul.w	r2, r5, r4
 8017424:	1abf      	subs	r7, r7, r2
 8017426:	4494      	add	ip, r2
 8017428:	f8ba 2004 	ldrh.w	r2, [sl, #4]
 801742c:	4411      	add	r1, r2
 801742e:	eb09 020c 	add.w	r2, r9, ip
 8017432:	b209      	sxth	r1, r1
 8017434:	443a      	add	r2, r7
 8017436:	428a      	cmp	r2, r1
 8017438:	bfc4      	itt	gt
 801743a:	eba1 0209 	subgt.w	r2, r1, r9
 801743e:	eba2 070c 	subgt.w	r7, r2, ip
 8017442:	2f00      	cmp	r7, #0
 8017444:	dd50      	ble.n	80174e8 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x190>
 8017446:	fb97 f1f4 	sdiv	r1, r7, r4
 801744a:	fb04 7211 	mls	r2, r4, r1, r7
 801744e:	b90a      	cbnz	r2, 8017454 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xfc>
 8017450:	3901      	subs	r1, #1
 8017452:	4622      	mov	r2, r4
 8017454:	eec7 3a80 	vdiv.f32	s7, s15, s0
 8017458:	6840      	ldr	r0, [r0, #4]
 801745a:	f89d b06c 	ldrb.w	fp, [sp, #108]	; 0x6c
 801745e:	44b6      	add	lr, r6
 8017460:	f8d0 a000 	ldr.w	sl, [r0]
 8017464:	2900      	cmp	r1, #0
 8017466:	bfcc      	ite	gt
 8017468:	46a1      	movgt	r9, r4
 801746a:	4691      	movle	r9, r2
 801746c:	900b      	str	r0, [sp, #44]	; 0x2c
 801746e:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8017470:	fb04 e505 	mla	r5, r4, r5, lr
 8017474:	eef0 6a42 	vmov.f32	s13, s4
 8017478:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 801747c:	9008      	str	r0, [sp, #32]
 801747e:	eeb0 7a61 	vmov.f32	s14, s3
 8017482:	9818      	ldr	r0, [sp, #96]	; 0x60
 8017484:	695b      	ldr	r3, [r3, #20]
 8017486:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801748a:	f9b0 b002 	ldrsh.w	fp, [r0, #2]
 801748e:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 8017492:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8017494:	445b      	add	r3, fp
 8017496:	9307      	str	r3, [sp, #28]
 8017498:	ee16 3a90 	vmov	r3, s13
 801749c:	e9cd 8505 	strd	r8, r5, [sp, #20]
 80174a0:	ee60 2aa3 	vmul.f32	s5, s1, s7
 80174a4:	ee21 3a23 	vmul.f32	s6, s2, s7
 80174a8:	ee72 7ae1 	vsub.f32	s15, s5, s3
 80174ac:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 80174b0:	ee17 7a90 	vmov	r7, s15
 80174b4:	ee73 7a42 	vsub.f32	s15, s6, s4
 80174b8:	fb97 f7f4 	sdiv	r7, r7, r4
 80174bc:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 80174c0:	ee17 ca90 	vmov	ip, s15
 80174c4:	fb9c fcf4 	sdiv	ip, ip, r4
 80174c8:	fb0c 3306 	mla	r3, ip, r6, r3
 80174cc:	9302      	str	r3, [sp, #8]
 80174ce:	ee17 3a10 	vmov	r3, s14
 80174d2:	e9cd 7c03 	strd	r7, ip, [sp, #12]
 80174d6:	fb07 3706 	mla	r7, r7, r6, r3
 80174da:	eba9 0306 	sub.w	r3, r9, r6
 80174de:	e9cd 4700 	strd	r4, r7, [sp]
 80174e2:	f8da 4008 	ldr.w	r4, [sl, #8]
 80174e6:	47a0      	blx	r4
 80174e8:	b00d      	add	sp, #52	; 0x34
 80174ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80174ee:	2500      	movs	r5, #0
 80174f0:	462e      	mov	r6, r5
 80174f2:	e799      	b.n	8017428 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xd0>

080174f4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 80174f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80174f8:	b0db      	sub	sp, #364	; 0x16c
 80174fa:	461d      	mov	r5, r3
 80174fc:	4614      	mov	r4, r2
 80174fe:	f8bd 3198 	ldrh.w	r3, [sp, #408]	; 0x198
 8017502:	910f      	str	r1, [sp, #60]	; 0x3c
 8017504:	4629      	mov	r1, r5
 8017506:	930a      	str	r3, [sp, #40]	; 0x28
 8017508:	f89d 319c 	ldrb.w	r3, [sp, #412]	; 0x19c
 801750c:	9009      	str	r0, [sp, #36]	; 0x24
 801750e:	930b      	str	r3, [sp, #44]	; 0x2c
 8017510:	f8bd 31a0 	ldrh.w	r3, [sp, #416]	; 0x1a0
 8017514:	f8dd b194 	ldr.w	fp, [sp, #404]	; 0x194
 8017518:	9310      	str	r3, [sp, #64]	; 0x40
 801751a:	6803      	ldr	r3, [r0, #0]
 801751c:	6c1f      	ldr	r7, [r3, #64]	; 0x40
 801751e:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8017522:	47b8      	blx	r7
 8017524:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017526:	6058      	str	r0, [r3, #4]
 8017528:	2800      	cmp	r0, #0
 801752a:	f000 83a1 	beq.w	8017c70 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801752e:	682b      	ldr	r3, [r5, #0]
 8017530:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 8017534:	ed94 7a02 	vldr	s14, [r4, #8]
 8017538:	9314      	str	r3, [sp, #80]	; 0x50
 801753a:	686b      	ldr	r3, [r5, #4]
 801753c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8017540:	9315      	str	r3, [sp, #84]	; 0x54
 8017542:	4bc1      	ldr	r3, [pc, #772]	; (8017848 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x354>)
 8017544:	7819      	ldrb	r1, [r3, #0]
 8017546:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
 801754a:	2900      	cmp	r1, #0
 801754c:	bf16      	itet	ne
 801754e:	4619      	movne	r1, r3
 8017550:	4611      	moveq	r1, r2
 8017552:	4613      	movne	r3, r2
 8017554:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017558:	9116      	str	r1, [sp, #88]	; 0x58
 801755a:	e9cd 3217 	strd	r3, r2, [sp, #92]	; 0x5c
 801755e:	f240 8387 	bls.w	8017c70 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8017562:	ed94 7a07 	vldr	s14, [r4, #28]
 8017566:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801756a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801756e:	f240 837f 	bls.w	8017c70 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8017572:	ed94 7a0c 	vldr	s14, [r4, #48]	; 0x30
 8017576:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801757a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801757e:	f240 8377 	bls.w	8017c70 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8017582:	6822      	ldr	r2, [r4, #0]
 8017584:	4bb1      	ldr	r3, [pc, #708]	; (801784c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x358>)
 8017586:	429a      	cmp	r2, r3
 8017588:	f2c0 8372 	blt.w	8017c70 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801758c:	49b0      	ldr	r1, [pc, #704]	; (8017850 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x35c>)
 801758e:	6963      	ldr	r3, [r4, #20]
 8017590:	428a      	cmp	r2, r1
 8017592:	f300 836d 	bgt.w	8017c70 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8017596:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
 801759a:	48ae      	ldr	r0, [pc, #696]	; (8017854 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x360>)
 801759c:	33ff      	adds	r3, #255	; 0xff
 801759e:	4283      	cmp	r3, r0
 80175a0:	f200 8366 	bhi.w	8017c70 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 80175a4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80175a6:	4dac      	ldr	r5, [pc, #688]	; (8017858 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x364>)
 80175a8:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
 80175ac:	33ff      	adds	r3, #255	; 0xff
 80175ae:	42ab      	cmp	r3, r5
 80175b0:	f200 835e 	bhi.w	8017c70 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 80175b4:	6862      	ldr	r2, [r4, #4]
 80175b6:	f502 331c 	add.w	r3, r2, #159744	; 0x27000
 80175ba:	33ff      	adds	r3, #255	; 0xff
 80175bc:	4283      	cmp	r3, r0
 80175be:	f200 8357 	bhi.w	8017c70 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 80175c2:	69a1      	ldr	r1, [r4, #24]
 80175c4:	f501 331c 	add.w	r3, r1, #159744	; 0x27000
 80175c8:	33ff      	adds	r3, #255	; 0xff
 80175ca:	4283      	cmp	r3, r0
 80175cc:	f200 8350 	bhi.w	8017c70 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 80175d0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80175d2:	f503 301c 	add.w	r0, r3, #159744	; 0x27000
 80175d6:	30ff      	adds	r0, #255	; 0xff
 80175d8:	42a8      	cmp	r0, r5
 80175da:	f200 8349 	bhi.w	8017c70 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 80175de:	428a      	cmp	r2, r1
 80175e0:	f280 8110 	bge.w	8017804 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x310>
 80175e4:	429a      	cmp	r2, r3
 80175e6:	f300 8119 	bgt.w	801781c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x328>
 80175ea:	4299      	cmp	r1, r3
 80175ec:	f280 811d 	bge.w	801782a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x336>
 80175f0:	2502      	movs	r5, #2
 80175f2:	2701      	movs	r7, #1
 80175f4:	46a9      	mov	r9, r5
 80175f6:	46b8      	mov	r8, r7
 80175f8:	f04f 0a00 	mov.w	sl, #0
 80175fc:	4621      	mov	r1, r4
 80175fe:	a849      	add	r0, sp, #292	; 0x124
 8017600:	f003 fcb6 	bl	801af70 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>
 8017604:	4622      	mov	r2, r4
 8017606:	4653      	mov	r3, sl
 8017608:	a949      	add	r1, sp, #292	; 0x124
 801760a:	f8cd 9000 	str.w	r9, [sp]
 801760e:	a819      	add	r0, sp, #100	; 0x64
 8017610:	f003 fdde 	bl	801b1d0 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 8017614:	4622      	mov	r2, r4
 8017616:	4653      	mov	r3, sl
 8017618:	a949      	add	r1, sp, #292	; 0x124
 801761a:	f8cd 8000 	str.w	r8, [sp]
 801761e:	a829      	add	r0, sp, #164	; 0xa4
 8017620:	f003 fdd6 	bl	801b1d0 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 8017624:	4643      	mov	r3, r8
 8017626:	4622      	mov	r2, r4
 8017628:	a949      	add	r1, sp, #292	; 0x124
 801762a:	f8cd 9000 	str.w	r9, [sp]
 801762e:	a839      	add	r0, sp, #228	; 0xe4
 8017630:	f003 fdce 	bl	801b1d0 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 8017634:	42af      	cmp	r7, r5
 8017636:	af12      	add	r7, sp, #72	; 0x48
 8017638:	bfb7      	itett	lt
 801763a:	2300      	movlt	r3, #0
 801763c:	2301      	movge	r3, #1
 801763e:	ad29      	addlt	r5, sp, #164	; 0xa4
 8017640:	ac19      	addlt	r4, sp, #100	; 0x64
 8017642:	bfb1      	iteee	lt
 8017644:	930e      	strlt	r3, [sp, #56]	; 0x38
 8017646:	ad19      	addge	r5, sp, #100	; 0x64
 8017648:	930e      	strge	r3, [sp, #56]	; 0x38
 801764a:	ac29      	addge	r4, sp, #164	; 0xa4
 801764c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801764e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8017652:	e887 0003 	stmia.w	r7, {r0, r1}
 8017656:	b928      	cbnz	r0, 8017664 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x170>
 8017658:	4b80      	ldr	r3, [pc, #512]	; (801785c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x368>)
 801765a:	6818      	ldr	r0, [r3, #0]
 801765c:	6803      	ldr	r3, [r0, #0]
 801765e:	6a1b      	ldr	r3, [r3, #32]
 8017660:	4798      	blx	r3
 8017662:	6038      	str	r0, [r7, #0]
 8017664:	9b64      	ldr	r3, [sp, #400]	; 0x190
 8017666:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 801766a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801766e:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 8017670:	930c      	str	r3, [sp, #48]	; 0x30
 8017672:	990c      	ldr	r1, [sp, #48]	; 0x30
 8017674:	6963      	ldr	r3, [r4, #20]
 8017676:	440b      	add	r3, r1
 8017678:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 801767c:	4408      	add	r0, r1
 801767e:	b200      	sxth	r0, r0
 8017680:	4283      	cmp	r3, r0
 8017682:	900d      	str	r0, [sp, #52]	; 0x34
 8017684:	f280 80dd 	bge.w	8017842 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x34e>
 8017688:	428b      	cmp	r3, r1
 801768a:	da08      	bge.n	801769e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 801768c:	2a00      	cmp	r2, #0
 801768e:	dd06      	ble.n	801769e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 8017690:	1acb      	subs	r3, r1, r3
 8017692:	429a      	cmp	r2, r3
 8017694:	f2c0 80e4 	blt.w	8017860 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36c>
 8017698:	2b00      	cmp	r3, #0
 801769a:	f300 80e2 	bgt.w	8017862 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36e>
 801769e:	6967      	ldr	r7, [r4, #20]
 80176a0:	f10d 0850 	add.w	r8, sp, #80	; 0x50
 80176a4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80176a6:	443b      	add	r3, r7
 80176a8:	461f      	mov	r7, r3
 80176aa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80176ac:	1bdf      	subs	r7, r3, r7
 80176ae:	4297      	cmp	r7, r2
 80176b0:	bfa8      	it	ge
 80176b2:	4617      	movge	r7, r2
 80176b4:	2f00      	cmp	r7, #0
 80176b6:	f340 8166 	ble.w	8017986 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x492>
 80176ba:	9b64      	ldr	r3, [sp, #400]	; 0x190
 80176bc:	6829      	ldr	r1, [r5, #0]
 80176be:	f9b3 2000 	ldrsh.w	r2, [r3]
 80176c2:	f9bb 3000 	ldrsh.w	r3, [fp]
 80176c6:	4411      	add	r1, r2
 80176c8:	6820      	ldr	r0, [r4, #0]
 80176ca:	4299      	cmp	r1, r3
 80176cc:	dd1a      	ble.n	8017704 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 80176ce:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 80176d2:	4402      	add	r2, r0
 80176d4:	440b      	add	r3, r1
 80176d6:	b21b      	sxth	r3, r3
 80176d8:	429a      	cmp	r2, r3
 80176da:	dc13      	bgt.n	8017704 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 80176dc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80176de:	a912      	add	r1, sp, #72	; 0x48
 80176e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80176e2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80176e4:	681b      	ldr	r3, [r3, #0]
 80176e6:	9206      	str	r2, [sp, #24]
 80176e8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80176ea:	9500      	str	r5, [sp, #0]
 80176ec:	9205      	str	r2, [sp, #20]
 80176ee:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80176f0:	e9cd b203 	strd	fp, r2, [sp, #12]
 80176f4:	9a64      	ldr	r2, [sp, #400]	; 0x190
 80176f6:	e9cd 8201 	strd	r8, r2, [sp, #4]
 80176fa:	aa49      	add	r2, sp, #292	; 0x124
 80176fc:	f8d3 9044 	ldr.w	r9, [r3, #68]	; 0x44
 8017700:	4623      	mov	r3, r4
 8017702:	47c8      	blx	r9
 8017704:	ed94 7a0a 	vldr	s14, [r4, #40]	; 0x28
 8017708:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
 801770c:	edd4 6a0e 	vldr	s13, [r4, #56]	; 0x38
 8017710:	ee37 7a27 	vadd.f32	s14, s14, s15
 8017714:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
 8017718:	68a1      	ldr	r1, [r4, #8]
 801771a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801771e:	ed94 6a08 	vldr	s12, [r4, #32]
 8017722:	edd4 6a07 	vldr	s13, [r4, #28]
 8017726:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 801772a:	ee76 6a86 	vadd.f32	s13, s13, s12
 801772e:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 8017732:	e9d4 2300 	ldrd	r2, r3, [r4]
 8017736:	edc4 6a07 	vstr	s13, [r4, #28]
 801773a:	441a      	add	r2, r3
 801773c:	6963      	ldr	r3, [r4, #20]
 801773e:	3301      	adds	r3, #1
 8017740:	6022      	str	r2, [r4, #0]
 8017742:	6163      	str	r3, [r4, #20]
 8017744:	69a3      	ldr	r3, [r4, #24]
 8017746:	3b01      	subs	r3, #1
 8017748:	61a3      	str	r3, [r4, #24]
 801774a:	6923      	ldr	r3, [r4, #16]
 801774c:	440b      	add	r3, r1
 801774e:	68e1      	ldr	r1, [r4, #12]
 8017750:	428b      	cmp	r3, r1
 8017752:	6123      	str	r3, [r4, #16]
 8017754:	db15      	blt.n	8017782 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x28e>
 8017756:	ed94 6a09 	vldr	s12, [r4, #36]	; 0x24
 801775a:	3201      	adds	r2, #1
 801775c:	1a5b      	subs	r3, r3, r1
 801775e:	ee76 6a26 	vadd.f32	s13, s12, s13
 8017762:	6022      	str	r2, [r4, #0]
 8017764:	6123      	str	r3, [r4, #16]
 8017766:	edc4 6a07 	vstr	s13, [r4, #28]
 801776a:	edd4 6a0c 	vldr	s13, [r4, #48]	; 0x30
 801776e:	ee36 7a87 	vadd.f32	s14, s13, s14
 8017772:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 8017776:	ed94 7a0f 	vldr	s14, [r4, #60]	; 0x3c
 801777a:	ee77 7a27 	vadd.f32	s15, s14, s15
 801777e:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 8017782:	ed95 7a0a 	vldr	s14, [r5, #40]	; 0x28
 8017786:	edd5 7a0b 	vldr	s15, [r5, #44]	; 0x2c
 801778a:	edd5 6a0e 	vldr	s13, [r5, #56]	; 0x38
 801778e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8017792:	edd5 7a0d 	vldr	s15, [r5, #52]	; 0x34
 8017796:	68a9      	ldr	r1, [r5, #8]
 8017798:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801779c:	ed95 6a08 	vldr	s12, [r5, #32]
 80177a0:	edd5 6a07 	vldr	s13, [r5, #28]
 80177a4:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 80177a8:	ee76 6a86 	vadd.f32	s13, s13, s12
 80177ac:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 80177b0:	e9d5 2300 	ldrd	r2, r3, [r5]
 80177b4:	edc5 6a07 	vstr	s13, [r5, #28]
 80177b8:	441a      	add	r2, r3
 80177ba:	696b      	ldr	r3, [r5, #20]
 80177bc:	3301      	adds	r3, #1
 80177be:	602a      	str	r2, [r5, #0]
 80177c0:	616b      	str	r3, [r5, #20]
 80177c2:	69ab      	ldr	r3, [r5, #24]
 80177c4:	3b01      	subs	r3, #1
 80177c6:	61ab      	str	r3, [r5, #24]
 80177c8:	692b      	ldr	r3, [r5, #16]
 80177ca:	440b      	add	r3, r1
 80177cc:	68e9      	ldr	r1, [r5, #12]
 80177ce:	428b      	cmp	r3, r1
 80177d0:	612b      	str	r3, [r5, #16]
 80177d2:	db15      	blt.n	8017800 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x30c>
 80177d4:	ed95 6a09 	vldr	s12, [r5, #36]	; 0x24
 80177d8:	3201      	adds	r2, #1
 80177da:	1a5b      	subs	r3, r3, r1
 80177dc:	ee76 6a26 	vadd.f32	s13, s12, s13
 80177e0:	602a      	str	r2, [r5, #0]
 80177e2:	612b      	str	r3, [r5, #16]
 80177e4:	edc5 6a07 	vstr	s13, [r5, #28]
 80177e8:	edd5 6a0c 	vldr	s13, [r5, #48]	; 0x30
 80177ec:	ee36 7a87 	vadd.f32	s14, s13, s14
 80177f0:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 80177f4:	ed95 7a0f 	vldr	s14, [r5, #60]	; 0x3c
 80177f8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80177fc:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 8017800:	3f01      	subs	r7, #1
 8017802:	e757      	b.n	80176b4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1c0>
 8017804:	4299      	cmp	r1, r3
 8017806:	dc13      	bgt.n	8017830 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x33c>
 8017808:	429a      	cmp	r2, r3
 801780a:	da14      	bge.n	8017836 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x342>
 801780c:	2502      	movs	r5, #2
 801780e:	2703      	movs	r7, #3
 8017810:	f04f 0800 	mov.w	r8, #0
 8017814:	46a9      	mov	r9, r5
 8017816:	f04f 0a01 	mov.w	sl, #1
 801781a:	e6ef      	b.n	80175fc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 801781c:	2501      	movs	r5, #1
 801781e:	2700      	movs	r7, #0
 8017820:	46a9      	mov	r9, r5
 8017822:	46b8      	mov	r8, r7
 8017824:	f04f 0a02 	mov.w	sl, #2
 8017828:	e6e8      	b.n	80175fc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 801782a:	2501      	movs	r5, #1
 801782c:	2702      	movs	r7, #2
 801782e:	e6e1      	b.n	80175f4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x100>
 8017830:	2500      	movs	r5, #0
 8017832:	2701      	movs	r7, #1
 8017834:	e7f4      	b.n	8017820 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x32c>
 8017836:	2702      	movs	r7, #2
 8017838:	2503      	movs	r5, #3
 801783a:	f04f 0900 	mov.w	r9, #0
 801783e:	46b8      	mov	r8, r7
 8017840:	e7e9      	b.n	8017816 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x322>
 8017842:	4613      	mov	r3, r2
 8017844:	e728      	b.n	8017698 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1a4>
 8017846:	bf00      	nop
 8017848:	20005804 	.word	0x20005804
 801784c:	fffd8f01 	.word	0xfffd8f01
 8017850:	00027100 	.word	0x00027100
 8017854:	0004e1ff 	.word	0x0004e1ff
 8017858:	0004e1fe 	.word	0x0004e1fe
 801785c:	2000580c 	.word	0x2000580c
 8017860:	4613      	mov	r3, r2
 8017862:	992b      	ldr	r1, [sp, #172]	; 0xac
 8017864:	469e      	mov	lr, r3
 8017866:	9f2e      	ldr	r7, [sp, #184]	; 0xb8
 8017868:	469c      	mov	ip, r3
 801786a:	9111      	str	r1, [sp, #68]	; 0x44
 801786c:	f04f 0900 	mov.w	r9, #0
 8017870:	eddd 4a34 	vldr	s9, [sp, #208]	; 0xd0
 8017874:	ed9d 7a33 	vldr	s14, [sp, #204]	; 0xcc
 8017878:	ed9d 4a37 	vldr	s8, [sp, #220]	; 0xdc
 801787c:	eddd 7a36 	vldr	s15, [sp, #216]	; 0xd8
 8017880:	eddd 3a31 	vldr	s7, [sp, #196]	; 0xc4
 8017884:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
 8017888:	ed9d 5a32 	vldr	s10, [sp, #200]	; 0xc8
 801788c:	eddd 5a35 	vldr	s11, [sp, #212]	; 0xd4
 8017890:	ed9d 6a38 	vldr	s12, [sp, #224]	; 0xe0
 8017894:	e9dd 0a29 	ldrd	r0, sl, [sp, #164]	; 0xa4
 8017898:	e9dd 812c 	ldrd	r8, r1, [sp, #176]	; 0xb0
 801789c:	f1bc 0f00 	cmp.w	ip, #0
 80178a0:	d147      	bne.n	8017932 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x43e>
 80178a2:	eb03 0c07 	add.w	ip, r3, r7
 80178a6:	1ad7      	subs	r7, r2, r3
 80178a8:	f1b9 0f00 	cmp.w	r9, #0
 80178ac:	d009      	beq.n	80178c2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3ce>
 80178ae:	9029      	str	r0, [sp, #164]	; 0xa4
 80178b0:	ed8d 7a33 	vstr	s14, [sp, #204]	; 0xcc
 80178b4:	edcd 7a36 	vstr	s15, [sp, #216]	; 0xd8
 80178b8:	edcd 6a30 	vstr	s13, [sp, #192]	; 0xc0
 80178bc:	912d      	str	r1, [sp, #180]	; 0xb4
 80178be:	e9cd c72e 	strd	ip, r7, [sp, #184]	; 0xb8
 80178c2:	991b      	ldr	r1, [sp, #108]	; 0x6c
 80178c4:	f04f 0800 	mov.w	r8, #0
 80178c8:	eddd 4a24 	vldr	s9, [sp, #144]	; 0x90
 80178cc:	9111      	str	r1, [sp, #68]	; 0x44
 80178ce:	eddd 6a23 	vldr	s13, [sp, #140]	; 0x8c
 80178d2:	ed9d 4a27 	vldr	s8, [sp, #156]	; 0x9c
 80178d6:	ed9d 7a26 	vldr	s14, [sp, #152]	; 0x98
 80178da:	eddd 3a21 	vldr	s7, [sp, #132]	; 0x84
 80178de:	eddd 7a20 	vldr	s15, [sp, #128]	; 0x80
 80178e2:	ed9d 5a22 	vldr	s10, [sp, #136]	; 0x88
 80178e6:	eddd 5a25 	vldr	s11, [sp, #148]	; 0x94
 80178ea:	ed9d 6a28 	vldr	s12, [sp, #160]	; 0xa0
 80178ee:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	; 0x64
 80178f2:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	; 0x78
 80178f6:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	; 0x70
 80178fa:	f1be 0f00 	cmp.w	lr, #0
 80178fe:	d031      	beq.n	8017964 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x470>
 8017900:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8017902:	4450      	add	r0, sl
 8017904:	ee76 6aa4 	vadd.f32	s13, s13, s9
 8017908:	4431      	add	r1, r6
 801790a:	ee37 7a04 	vadd.f32	s14, s14, s8
 801790e:	ee77 7aa3 	vadd.f32	s15, s15, s7
 8017912:	4549      	cmp	r1, r9
 8017914:	db08      	blt.n	8017928 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x434>
 8017916:	ee77 7a85 	vadd.f32	s15, s15, s10
 801791a:	3001      	adds	r0, #1
 801791c:	ee76 6aa5 	vadd.f32	s13, s13, s11
 8017920:	eba1 0109 	sub.w	r1, r1, r9
 8017924:	ee37 7a06 	vadd.f32	s14, s14, s12
 8017928:	f10e 3eff 	add.w	lr, lr, #4294967295
 801792c:	f04f 0801 	mov.w	r8, #1
 8017930:	e7e3      	b.n	80178fa <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x406>
 8017932:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8017934:	4450      	add	r0, sl
 8017936:	ee37 7a24 	vadd.f32	s14, s14, s9
 801793a:	4431      	add	r1, r6
 801793c:	ee77 7a84 	vadd.f32	s15, s15, s8
 8017940:	ee76 6aa3 	vadd.f32	s13, s13, s7
 8017944:	4541      	cmp	r1, r8
 8017946:	db08      	blt.n	801795a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x466>
 8017948:	ee76 6a85 	vadd.f32	s13, s13, s10
 801794c:	3001      	adds	r0, #1
 801794e:	ee37 7a25 	vadd.f32	s14, s14, s11
 8017952:	eba1 0108 	sub.w	r1, r1, r8
 8017956:	ee77 7a86 	vadd.f32	s15, s15, s12
 801795a:	f10c 3cff 	add.w	ip, ip, #4294967295
 801795e:	f04f 0901 	mov.w	r9, #1
 8017962:	e79b      	b.n	801789c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3a8>
 8017964:	449c      	add	ip, r3
 8017966:	1aff      	subs	r7, r7, r3
 8017968:	f1b8 0f00 	cmp.w	r8, #0
 801796c:	d009      	beq.n	8017982 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x48e>
 801796e:	9019      	str	r0, [sp, #100]	; 0x64
 8017970:	edcd 6a23 	vstr	s13, [sp, #140]	; 0x8c
 8017974:	ed8d 7a26 	vstr	s14, [sp, #152]	; 0x98
 8017978:	edcd 7a20 	vstr	s15, [sp, #128]	; 0x80
 801797c:	911d      	str	r1, [sp, #116]	; 0x74
 801797e:	e9cd c71e 	strd	ip, r7, [sp, #120]	; 0x78
 8017982:	1ad2      	subs	r2, r2, r3
 8017984:	e68b      	b.n	801769e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 8017986:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8017988:	9a3f      	ldr	r2, [sp, #252]	; 0xfc
 801798a:	2b00      	cmp	r3, #0
 801798c:	f000 80d1 	beq.w	8017b32 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63e>
 8017990:	ad19      	add	r5, sp, #100	; 0x64
 8017992:	ac39      	add	r4, sp, #228	; 0xe4
 8017994:	9b64      	ldr	r3, [sp, #400]	; 0x190
 8017996:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 801799a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801799e:	930c      	str	r3, [sp, #48]	; 0x30
 80179a0:	990c      	ldr	r1, [sp, #48]	; 0x30
 80179a2:	6963      	ldr	r3, [r4, #20]
 80179a4:	440b      	add	r3, r1
 80179a6:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 80179aa:	4408      	add	r0, r1
 80179ac:	b200      	sxth	r0, r0
 80179ae:	4283      	cmp	r3, r0
 80179b0:	900d      	str	r0, [sp, #52]	; 0x34
 80179b2:	f280 80c1 	bge.w	8017b38 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x644>
 80179b6:	428b      	cmp	r3, r1
 80179b8:	da08      	bge.n	80179cc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 80179ba:	2a00      	cmp	r2, #0
 80179bc:	dd06      	ble.n	80179cc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 80179be:	1acb      	subs	r3, r1, r3
 80179c0:	429a      	cmp	r2, r3
 80179c2:	f2c0 80bb 	blt.w	8017b3c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x648>
 80179c6:	2b00      	cmp	r3, #0
 80179c8:	f300 80b9 	bgt.w	8017b3e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x64a>
 80179cc:	6967      	ldr	r7, [r4, #20]
 80179ce:	f10d 0850 	add.w	r8, sp, #80	; 0x50
 80179d2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80179d4:	443b      	add	r3, r7
 80179d6:	461f      	mov	r7, r3
 80179d8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80179da:	1bdf      	subs	r7, r3, r7
 80179dc:	4297      	cmp	r7, r2
 80179de:	bfa8      	it	ge
 80179e0:	4617      	movge	r7, r2
 80179e2:	2f00      	cmp	r7, #0
 80179e4:	f340 813c 	ble.w	8017c60 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x76c>
 80179e8:	9b64      	ldr	r3, [sp, #400]	; 0x190
 80179ea:	6829      	ldr	r1, [r5, #0]
 80179ec:	f9b3 2000 	ldrsh.w	r2, [r3]
 80179f0:	f9bb 3000 	ldrsh.w	r3, [fp]
 80179f4:	4411      	add	r1, r2
 80179f6:	6820      	ldr	r0, [r4, #0]
 80179f8:	4299      	cmp	r1, r3
 80179fa:	dd1a      	ble.n	8017a32 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 80179fc:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 8017a00:	4402      	add	r2, r0
 8017a02:	440b      	add	r3, r1
 8017a04:	b21b      	sxth	r3, r3
 8017a06:	429a      	cmp	r2, r3
 8017a08:	dc13      	bgt.n	8017a32 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 8017a0a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8017a0c:	a912      	add	r1, sp, #72	; 0x48
 8017a0e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017a10:	9809      	ldr	r0, [sp, #36]	; 0x24
 8017a12:	681b      	ldr	r3, [r3, #0]
 8017a14:	9206      	str	r2, [sp, #24]
 8017a16:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8017a18:	9500      	str	r5, [sp, #0]
 8017a1a:	9205      	str	r2, [sp, #20]
 8017a1c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8017a1e:	e9cd b203 	strd	fp, r2, [sp, #12]
 8017a22:	9a64      	ldr	r2, [sp, #400]	; 0x190
 8017a24:	e9cd 8201 	strd	r8, r2, [sp, #4]
 8017a28:	aa49      	add	r2, sp, #292	; 0x124
 8017a2a:	f8d3 9044 	ldr.w	r9, [r3, #68]	; 0x44
 8017a2e:	4623      	mov	r3, r4
 8017a30:	47c8      	blx	r9
 8017a32:	ed94 7a0a 	vldr	s14, [r4, #40]	; 0x28
 8017a36:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
 8017a3a:	edd4 6a0e 	vldr	s13, [r4, #56]	; 0x38
 8017a3e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8017a42:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
 8017a46:	68a1      	ldr	r1, [r4, #8]
 8017a48:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8017a4c:	ed94 6a08 	vldr	s12, [r4, #32]
 8017a50:	edd4 6a07 	vldr	s13, [r4, #28]
 8017a54:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 8017a58:	ee76 6a86 	vadd.f32	s13, s13, s12
 8017a5c:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 8017a60:	e9d4 2300 	ldrd	r2, r3, [r4]
 8017a64:	edc4 6a07 	vstr	s13, [r4, #28]
 8017a68:	441a      	add	r2, r3
 8017a6a:	6963      	ldr	r3, [r4, #20]
 8017a6c:	3301      	adds	r3, #1
 8017a6e:	6022      	str	r2, [r4, #0]
 8017a70:	6163      	str	r3, [r4, #20]
 8017a72:	69a3      	ldr	r3, [r4, #24]
 8017a74:	3b01      	subs	r3, #1
 8017a76:	61a3      	str	r3, [r4, #24]
 8017a78:	6923      	ldr	r3, [r4, #16]
 8017a7a:	440b      	add	r3, r1
 8017a7c:	68e1      	ldr	r1, [r4, #12]
 8017a7e:	428b      	cmp	r3, r1
 8017a80:	6123      	str	r3, [r4, #16]
 8017a82:	db15      	blt.n	8017ab0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x5bc>
 8017a84:	ed94 6a09 	vldr	s12, [r4, #36]	; 0x24
 8017a88:	3201      	adds	r2, #1
 8017a8a:	1a5b      	subs	r3, r3, r1
 8017a8c:	ee76 6a26 	vadd.f32	s13, s12, s13
 8017a90:	6022      	str	r2, [r4, #0]
 8017a92:	6123      	str	r3, [r4, #16]
 8017a94:	edc4 6a07 	vstr	s13, [r4, #28]
 8017a98:	edd4 6a0c 	vldr	s13, [r4, #48]	; 0x30
 8017a9c:	ee36 7a87 	vadd.f32	s14, s13, s14
 8017aa0:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 8017aa4:	ed94 7a0f 	vldr	s14, [r4, #60]	; 0x3c
 8017aa8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8017aac:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 8017ab0:	ed95 7a0a 	vldr	s14, [r5, #40]	; 0x28
 8017ab4:	edd5 7a0b 	vldr	s15, [r5, #44]	; 0x2c
 8017ab8:	edd5 6a0e 	vldr	s13, [r5, #56]	; 0x38
 8017abc:	ee37 7a27 	vadd.f32	s14, s14, s15
 8017ac0:	edd5 7a0d 	vldr	s15, [r5, #52]	; 0x34
 8017ac4:	68a9      	ldr	r1, [r5, #8]
 8017ac6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8017aca:	ed95 6a08 	vldr	s12, [r5, #32]
 8017ace:	edd5 6a07 	vldr	s13, [r5, #28]
 8017ad2:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 8017ad6:	ee76 6a86 	vadd.f32	s13, s13, s12
 8017ada:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 8017ade:	e9d5 2300 	ldrd	r2, r3, [r5]
 8017ae2:	edc5 6a07 	vstr	s13, [r5, #28]
 8017ae6:	441a      	add	r2, r3
 8017ae8:	696b      	ldr	r3, [r5, #20]
 8017aea:	3301      	adds	r3, #1
 8017aec:	602a      	str	r2, [r5, #0]
 8017aee:	616b      	str	r3, [r5, #20]
 8017af0:	69ab      	ldr	r3, [r5, #24]
 8017af2:	3b01      	subs	r3, #1
 8017af4:	61ab      	str	r3, [r5, #24]
 8017af6:	692b      	ldr	r3, [r5, #16]
 8017af8:	440b      	add	r3, r1
 8017afa:	68e9      	ldr	r1, [r5, #12]
 8017afc:	428b      	cmp	r3, r1
 8017afe:	612b      	str	r3, [r5, #16]
 8017b00:	db15      	blt.n	8017b2e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63a>
 8017b02:	ed95 6a09 	vldr	s12, [r5, #36]	; 0x24
 8017b06:	3201      	adds	r2, #1
 8017b08:	1a5b      	subs	r3, r3, r1
 8017b0a:	ee76 6a26 	vadd.f32	s13, s12, s13
 8017b0e:	602a      	str	r2, [r5, #0]
 8017b10:	612b      	str	r3, [r5, #16]
 8017b12:	edc5 6a07 	vstr	s13, [r5, #28]
 8017b16:	edd5 6a0c 	vldr	s13, [r5, #48]	; 0x30
 8017b1a:	ee36 7a87 	vadd.f32	s14, s13, s14
 8017b1e:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 8017b22:	ed95 7a0f 	vldr	s14, [r5, #60]	; 0x3c
 8017b26:	ee77 7a27 	vadd.f32	s15, s14, s15
 8017b2a:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 8017b2e:	3f01      	subs	r7, #1
 8017b30:	e757      	b.n	80179e2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4ee>
 8017b32:	ad39      	add	r5, sp, #228	; 0xe4
 8017b34:	ac19      	add	r4, sp, #100	; 0x64
 8017b36:	e72d      	b.n	8017994 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4a0>
 8017b38:	4613      	mov	r3, r2
 8017b3a:	e744      	b.n	80179c6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d2>
 8017b3c:	4613      	mov	r3, r2
 8017b3e:	9e3b      	ldr	r6, [sp, #236]	; 0xec
 8017b40:	469e      	mov	lr, r3
 8017b42:	f8dd c0f8 	ldr.w	ip, [sp, #248]	; 0xf8
 8017b46:	461f      	mov	r7, r3
 8017b48:	ed9d 7a43 	vldr	s14, [sp, #268]	; 0x10c
 8017b4c:	f04f 0900 	mov.w	r9, #0
 8017b50:	eddd 4a44 	vldr	s9, [sp, #272]	; 0x110
 8017b54:	eddd 7a46 	vldr	s15, [sp, #280]	; 0x118
 8017b58:	ed9d 4a47 	vldr	s8, [sp, #284]	; 0x11c
 8017b5c:	eddd 6a40 	vldr	s13, [sp, #256]	; 0x100
 8017b60:	eddd 3a41 	vldr	s7, [sp, #260]	; 0x104
 8017b64:	993d      	ldr	r1, [sp, #244]	; 0xf4
 8017b66:	f8dd 80f0 	ldr.w	r8, [sp, #240]	; 0xf0
 8017b6a:	ed9d 5a42 	vldr	s10, [sp, #264]	; 0x108
 8017b6e:	eddd 5a45 	vldr	s11, [sp, #276]	; 0x114
 8017b72:	ed9d 6a48 	vldr	s12, [sp, #288]	; 0x120
 8017b76:	960e      	str	r6, [sp, #56]	; 0x38
 8017b78:	e9dd 0a39 	ldrd	r0, sl, [sp, #228]	; 0xe4
 8017b7c:	2f00      	cmp	r7, #0
 8017b7e:	d146      	bne.n	8017c0e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x71a>
 8017b80:	449c      	add	ip, r3
 8017b82:	1ad7      	subs	r7, r2, r3
 8017b84:	f1b9 0f00 	cmp.w	r9, #0
 8017b88:	d009      	beq.n	8017b9e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6aa>
 8017b8a:	9039      	str	r0, [sp, #228]	; 0xe4
 8017b8c:	913d      	str	r1, [sp, #244]	; 0xf4
 8017b8e:	edcd 6a40 	vstr	s13, [sp, #256]	; 0x100
 8017b92:	ed8d 7a43 	vstr	s14, [sp, #268]	; 0x10c
 8017b96:	edcd 7a46 	vstr	s15, [sp, #280]	; 0x118
 8017b9a:	e9cd c73e 	strd	ip, r7, [sp, #248]	; 0xf8
 8017b9e:	991b      	ldr	r1, [sp, #108]	; 0x6c
 8017ba0:	f04f 0800 	mov.w	r8, #0
 8017ba4:	eddd 4a24 	vldr	s9, [sp, #144]	; 0x90
 8017ba8:	910e      	str	r1, [sp, #56]	; 0x38
 8017baa:	eddd 6a23 	vldr	s13, [sp, #140]	; 0x8c
 8017bae:	ed9d 4a27 	vldr	s8, [sp, #156]	; 0x9c
 8017bb2:	ed9d 7a26 	vldr	s14, [sp, #152]	; 0x98
 8017bb6:	eddd 3a21 	vldr	s7, [sp, #132]	; 0x84
 8017bba:	eddd 7a20 	vldr	s15, [sp, #128]	; 0x80
 8017bbe:	ed9d 5a22 	vldr	s10, [sp, #136]	; 0x88
 8017bc2:	eddd 5a25 	vldr	s11, [sp, #148]	; 0x94
 8017bc6:	ed9d 6a28 	vldr	s12, [sp, #160]	; 0xa0
 8017bca:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	; 0x64
 8017bce:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	; 0x78
 8017bd2:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	; 0x70
 8017bd6:	f1be 0f00 	cmp.w	lr, #0
 8017bda:	d030      	beq.n	8017c3e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x74a>
 8017bdc:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8017bde:	4450      	add	r0, sl
 8017be0:	ee76 6aa4 	vadd.f32	s13, s13, s9
 8017be4:	4431      	add	r1, r6
 8017be6:	ee37 7a04 	vadd.f32	s14, s14, s8
 8017bea:	ee77 7aa3 	vadd.f32	s15, s15, s7
 8017bee:	4549      	cmp	r1, r9
 8017bf0:	db08      	blt.n	8017c04 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x710>
 8017bf2:	ee77 7a85 	vadd.f32	s15, s15, s10
 8017bf6:	3001      	adds	r0, #1
 8017bf8:	ee76 6aa5 	vadd.f32	s13, s13, s11
 8017bfc:	eba1 0109 	sub.w	r1, r1, r9
 8017c00:	ee37 7a06 	vadd.f32	s14, s14, s12
 8017c04:	f10e 3eff 	add.w	lr, lr, #4294967295
 8017c08:	f04f 0801 	mov.w	r8, #1
 8017c0c:	e7e3      	b.n	8017bd6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6e2>
 8017c0e:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8017c10:	4450      	add	r0, sl
 8017c12:	ee37 7a24 	vadd.f32	s14, s14, s9
 8017c16:	4431      	add	r1, r6
 8017c18:	ee77 7a84 	vadd.f32	s15, s15, s8
 8017c1c:	ee76 6aa3 	vadd.f32	s13, s13, s7
 8017c20:	4541      	cmp	r1, r8
 8017c22:	db08      	blt.n	8017c36 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x742>
 8017c24:	ee76 6a85 	vadd.f32	s13, s13, s10
 8017c28:	3001      	adds	r0, #1
 8017c2a:	ee37 7a25 	vadd.f32	s14, s14, s11
 8017c2e:	eba1 0108 	sub.w	r1, r1, r8
 8017c32:	ee77 7a86 	vadd.f32	s15, s15, s12
 8017c36:	3f01      	subs	r7, #1
 8017c38:	f04f 0901 	mov.w	r9, #1
 8017c3c:	e79e      	b.n	8017b7c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x688>
 8017c3e:	449c      	add	ip, r3
 8017c40:	1aff      	subs	r7, r7, r3
 8017c42:	f1b8 0f00 	cmp.w	r8, #0
 8017c46:	d009      	beq.n	8017c5c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x768>
 8017c48:	9019      	str	r0, [sp, #100]	; 0x64
 8017c4a:	edcd 6a23 	vstr	s13, [sp, #140]	; 0x8c
 8017c4e:	ed8d 7a26 	vstr	s14, [sp, #152]	; 0x98
 8017c52:	edcd 7a20 	vstr	s15, [sp, #128]	; 0x80
 8017c56:	911d      	str	r1, [sp, #116]	; 0x74
 8017c58:	e9cd c71e 	strd	ip, r7, [sp, #120]	; 0x78
 8017c5c:	1ad2      	subs	r2, r2, r3
 8017c5e:	e6b5      	b.n	80179cc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 8017c60:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8017c62:	681b      	ldr	r3, [r3, #0]
 8017c64:	b923      	cbnz	r3, 8017c70 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8017c66:	4b04      	ldr	r3, [pc, #16]	; (8017c78 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x784>)
 8017c68:	6818      	ldr	r0, [r3, #0]
 8017c6a:	6803      	ldr	r3, [r0, #0]
 8017c6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017c6e:	4798      	blx	r3
 8017c70:	b05b      	add	sp, #364	; 0x16c
 8017c72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017c76:	bf00      	nop
 8017c78:	2000580c 	.word	0x2000580c

08017c7c <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE>:
 8017c7c:	b570      	push	{r4, r5, r6, lr}
 8017c7e:	4604      	mov	r4, r0
 8017c80:	2500      	movs	r5, #0
 8017c82:	9804      	ldr	r0, [sp, #16]
 8017c84:	7223      	strb	r3, [r4, #8]
 8017c86:	f89d 3014 	ldrb.w	r3, [sp, #20]
 8017c8a:	8025      	strh	r5, [r4, #0]
 8017c8c:	6061      	str	r1, [r4, #4]
 8017c8e:	7263      	strb	r3, [r4, #9]
 8017c90:	60e0      	str	r0, [r4, #12]
 8017c92:	8222      	strh	r2, [r4, #16]
 8017c94:	8265      	strh	r5, [r4, #18]
 8017c96:	82a5      	strh	r5, [r4, #20]
 8017c98:	82e5      	strh	r5, [r4, #22]
 8017c9a:	8325      	strh	r5, [r4, #24]
 8017c9c:	8365      	strh	r5, [r4, #26]
 8017c9e:	83a5      	strh	r5, [r4, #28]
 8017ca0:	77a5      	strb	r5, [r4, #30]
 8017ca2:	6803      	ldr	r3, [r0, #0]
 8017ca4:	695b      	ldr	r3, [r3, #20]
 8017ca6:	4798      	blx	r3
 8017ca8:	4606      	mov	r6, r0
 8017caa:	b1f8      	cbz	r0, 8017cec <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE+0x70>
 8017cac:	68e0      	ldr	r0, [r4, #12]
 8017cae:	4631      	mov	r1, r6
 8017cb0:	6803      	ldr	r3, [r0, #0]
 8017cb2:	68db      	ldr	r3, [r3, #12]
 8017cb4:	4798      	blx	r3
 8017cb6:	7b43      	ldrb	r3, [r0, #13]
 8017cb8:	7a82      	ldrb	r2, [r0, #10]
 8017cba:	4605      	mov	r5, r0
 8017cbc:	005b      	lsls	r3, r3, #1
 8017cbe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8017cc2:	4313      	orrs	r3, r2
 8017cc4:	83a3      	strh	r3, [r4, #28]
 8017cc6:	7a63      	ldrb	r3, [r4, #9]
 8017cc8:	2b04      	cmp	r3, #4
 8017cca:	d10f      	bne.n	8017cec <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE+0x70>
 8017ccc:	68e0      	ldr	r0, [r4, #12]
 8017cce:	462a      	mov	r2, r5
 8017cd0:	4631      	mov	r1, r6
 8017cd2:	6803      	ldr	r3, [r0, #0]
 8017cd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8017cd6:	4798      	blx	r3
 8017cd8:	7b6b      	ldrb	r3, [r5, #13]
 8017cda:	005b      	lsls	r3, r3, #1
 8017cdc:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8017ce0:	7aab      	ldrb	r3, [r5, #10]
 8017ce2:	4313      	orrs	r3, r2
 8017ce4:	4418      	add	r0, r3
 8017ce6:	8ba3      	ldrh	r3, [r4, #28]
 8017ce8:	4418      	add	r0, r3
 8017cea:	83a0      	strh	r0, [r4, #28]
 8017cec:	4620      	mov	r0, r4
 8017cee:	bd70      	pop	{r4, r5, r6, pc}

08017cf0 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>:
 8017cf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017cf4:	2400      	movs	r4, #0
 8017cf6:	b085      	sub	sp, #20
 8017cf8:	4681      	mov	r9, r0
 8017cfa:	4688      	mov	r8, r1
 8017cfc:	4692      	mov	sl, r2
 8017cfe:	469b      	mov	fp, r3
 8017d00:	4627      	mov	r7, r4
 8017d02:	4625      	mov	r5, r4
 8017d04:	4626      	mov	r6, r4
 8017d06:	4554      	cmp	r4, sl
 8017d08:	da2a      	bge.n	8017d60 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 8017d0a:	2300      	movs	r3, #0
 8017d0c:	9303      	str	r3, [sp, #12]
 8017d0e:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 8017d12:	429d      	cmp	r5, r3
 8017d14:	d004      	beq.n	8017d20 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x30>
 8017d16:	f242 030b 	movw	r3, #8203	; 0x200b
 8017d1a:	429d      	cmp	r5, r3
 8017d1c:	bf18      	it	ne
 8017d1e:	462f      	movne	r7, r5
 8017d20:	ab03      	add	r3, sp, #12
 8017d22:	4642      	mov	r2, r8
 8017d24:	4659      	mov	r1, fp
 8017d26:	4648      	mov	r0, r9
 8017d28:	f002 fea8 	bl	801aa7c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8017d2c:	4605      	mov	r5, r0
 8017d2e:	b1b8      	cbz	r0, 8017d60 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 8017d30:	280a      	cmp	r0, #10
 8017d32:	d015      	beq.n	8017d60 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 8017d34:	9a03      	ldr	r2, [sp, #12]
 8017d36:	b18a      	cbz	r2, 8017d5c <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x6c>
 8017d38:	7b50      	ldrb	r0, [r2, #13]
 8017d3a:	4639      	mov	r1, r7
 8017d3c:	7a93      	ldrb	r3, [r2, #10]
 8017d3e:	0040      	lsls	r0, r0, #1
 8017d40:	8895      	ldrh	r5, [r2, #4]
 8017d42:	f400 7080 	and.w	r0, r0, #256	; 0x100
 8017d46:	4303      	orrs	r3, r0
 8017d48:	4640      	mov	r0, r8
 8017d4a:	9301      	str	r3, [sp, #4]
 8017d4c:	f8d8 3000 	ldr.w	r3, [r8]
 8017d50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8017d52:	4798      	blx	r3
 8017d54:	9b01      	ldr	r3, [sp, #4]
 8017d56:	4418      	add	r0, r3
 8017d58:	4406      	add	r6, r0
 8017d5a:	b2b6      	uxth	r6, r6
 8017d5c:	3401      	adds	r4, #1
 8017d5e:	e7d2      	b.n	8017d06 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x16>
 8017d60:	4630      	mov	r0, r6
 8017d62:	b005      	add	sp, #20
 8017d64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08017d68 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>:
 8017d68:	2a02      	cmp	r2, #2
 8017d6a:	b530      	push	{r4, r5, lr}
 8017d6c:	d011      	beq.n	8017d92 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x2a>
 8017d6e:	2a03      	cmp	r2, #3
 8017d70:	d01c      	beq.n	8017dac <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x44>
 8017d72:	2a01      	cmp	r2, #1
 8017d74:	d10c      	bne.n	8017d90 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
 8017d76:	888b      	ldrh	r3, [r1, #4]
 8017d78:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
 8017d7c:	8801      	ldrh	r1, [r0, #0]
 8017d7e:	1a9b      	subs	r3, r3, r2
 8017d80:	8844      	ldrh	r4, [r0, #2]
 8017d82:	1a5b      	subs	r3, r3, r1
 8017d84:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 8017d88:	8004      	strh	r4, [r0, #0]
 8017d8a:	8043      	strh	r3, [r0, #2]
 8017d8c:	8081      	strh	r1, [r0, #4]
 8017d8e:	80c2      	strh	r2, [r0, #6]
 8017d90:	bd30      	pop	{r4, r5, pc}
 8017d92:	88cb      	ldrh	r3, [r1, #6]
 8017d94:	88c2      	ldrh	r2, [r0, #6]
 8017d96:	1a9b      	subs	r3, r3, r2
 8017d98:	8842      	ldrh	r2, [r0, #2]
 8017d9a:	1a9b      	subs	r3, r3, r2
 8017d9c:	888a      	ldrh	r2, [r1, #4]
 8017d9e:	8881      	ldrh	r1, [r0, #4]
 8017da0:	8043      	strh	r3, [r0, #2]
 8017da2:	1a52      	subs	r2, r2, r1
 8017da4:	8801      	ldrh	r1, [r0, #0]
 8017da6:	1a52      	subs	r2, r2, r1
 8017da8:	8002      	strh	r2, [r0, #0]
 8017daa:	e7f1      	b.n	8017d90 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
 8017dac:	88cb      	ldrh	r3, [r1, #6]
 8017dae:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 8017db2:	8841      	ldrh	r1, [r0, #2]
 8017db4:	1a9b      	subs	r3, r3, r2
 8017db6:	f9b0 5000 	ldrsh.w	r5, [r0]
 8017dba:	f9b0 4004 	ldrsh.w	r4, [r0, #4]
 8017dbe:	1a5b      	subs	r3, r3, r1
 8017dc0:	8045      	strh	r5, [r0, #2]
 8017dc2:	8082      	strh	r2, [r0, #4]
 8017dc4:	8003      	strh	r3, [r0, #0]
 8017dc6:	80c4      	strh	r4, [r0, #6]
 8017dc8:	e7e2      	b.n	8017d90 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>

08017dca <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>:
 8017dca:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017dce:	b09f      	sub	sp, #124	; 0x7c
 8017dd0:	9116      	str	r1, [sp, #88]	; 0x58
 8017dd2:	9317      	str	r3, [sp, #92]	; 0x5c
 8017dd4:	9929      	ldr	r1, [sp, #164]	; 0xa4
 8017dd6:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8017dd8:	8809      	ldrh	r1, [r1, #0]
 8017dda:	889b      	ldrh	r3, [r3, #4]
 8017ddc:	f8dd 80a8 	ldr.w	r8, [sp, #168]	; 0xa8
 8017de0:	440b      	add	r3, r1
 8017de2:	9212      	str	r2, [sp, #72]	; 0x48
 8017de4:	f89d 20b8 	ldrb.w	r2, [sp, #184]	; 0xb8
 8017de8:	b21b      	sxth	r3, r3
 8017dea:	9011      	str	r0, [sp, #68]	; 0x44
 8017dec:	f89d b0ac 	ldrb.w	fp, [sp, #172]	; 0xac
 8017df0:	9310      	str	r3, [sp, #64]	; 0x40
 8017df2:	f8d8 3000 	ldr.w	r3, [r8]
 8017df6:	7a59      	ldrb	r1, [r3, #9]
 8017df8:	7a1b      	ldrb	r3, [r3, #8]
 8017dfa:	9114      	str	r1, [sp, #80]	; 0x50
 8017dfc:	9315      	str	r3, [sp, #84]	; 0x54
 8017dfe:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8017e00:	f9b3 5000 	ldrsh.w	r5, [r3]
 8017e04:	2a00      	cmp	r2, #0
 8017e06:	d067      	beq.n	8017ed8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x10e>
 8017e08:	f898 3010 	ldrb.w	r3, [r8, #16]
 8017e0c:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8017e0e:	2b04      	cmp	r3, #4
 8017e10:	bf14      	ite	ne
 8017e12:	2301      	movne	r3, #1
 8017e14:	2302      	moveq	r3, #2
 8017e16:	4413      	add	r3, r2
 8017e18:	f04f 0900 	mov.w	r9, #0
 8017e1c:	930f      	str	r3, [sp, #60]	; 0x3c
 8017e1e:	464c      	mov	r4, r9
 8017e20:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8017e24:	f8cd 9034 	str.w	r9, [sp, #52]	; 0x34
 8017e28:	e9dd 320e 	ldrd	r3, r2, [sp, #56]	; 0x38
 8017e2c:	4293      	cmp	r3, r2
 8017e2e:	f280 808c 	bge.w	8017f4a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x180>
 8017e32:	2300      	movs	r3, #0
 8017e34:	931c      	str	r3, [sp, #112]	; 0x70
 8017e36:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 8017e3a:	429c      	cmp	r4, r3
 8017e3c:	d006      	beq.n	8017e4c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x82>
 8017e3e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8017e40:	f242 020b 	movw	r2, #8203	; 0x200b
 8017e44:	4294      	cmp	r4, r2
 8017e46:	bf18      	it	ne
 8017e48:	4623      	movne	r3, r4
 8017e4a:	930d      	str	r3, [sp, #52]	; 0x34
 8017e4c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8017e4e:	992d      	ldr	r1, [sp, #180]	; 0xb4
 8017e50:	f8d8 2000 	ldr.w	r2, [r8]
 8017e54:	428b      	cmp	r3, r1
 8017e56:	db41      	blt.n	8017edc <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x112>
 8017e58:	6813      	ldr	r3, [r2, #0]
 8017e5a:	4610      	mov	r0, r2
 8017e5c:	695b      	ldr	r3, [r3, #20]
 8017e5e:	4798      	blx	r3
 8017e60:	4604      	mov	r4, r0
 8017e62:	f8d8 0000 	ldr.w	r0, [r8]
 8017e66:	aa1d      	add	r2, sp, #116	; 0x74
 8017e68:	4621      	mov	r1, r4
 8017e6a:	6803      	ldr	r3, [r0, #0]
 8017e6c:	689e      	ldr	r6, [r3, #8]
 8017e6e:	f10d 036f 	add.w	r3, sp, #111	; 0x6f
 8017e72:	47b0      	blx	r6
 8017e74:	901c      	str	r0, [sp, #112]	; 0x70
 8017e76:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 8017e7a:	429c      	cmp	r4, r3
 8017e7c:	f000 80ea 	beq.w	8018054 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28a>
 8017e80:	f242 030b 	movw	r3, #8203	; 0x200b
 8017e84:	429c      	cmp	r4, r3
 8017e86:	f000 80e5 	beq.w	8018054 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28a>
 8017e8a:	2c00      	cmp	r4, #0
 8017e8c:	f000 80f7 	beq.w	801807e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2b4>
 8017e90:	2c0a      	cmp	r4, #10
 8017e92:	d060      	beq.n	8017f56 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18c>
 8017e94:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8017e96:	b36a      	cbz	r2, 8017ef4 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x12a>
 8017e98:	8894      	ldrh	r4, [r2, #4]
 8017e9a:	f1bb 0f00 	cmp.w	fp, #0
 8017e9e:	d03b      	beq.n	8017f18 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x14e>
 8017ea0:	f892 900d 	ldrb.w	r9, [r2, #13]
 8017ea4:	f1bb 0f01 	cmp.w	fp, #1
 8017ea8:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8017eac:	f409 7380 	and.w	r3, r9, #256	; 0x100
 8017eb0:	f892 900a 	ldrb.w	r9, [r2, #10]
 8017eb4:	ea49 0903 	orr.w	r9, r9, r3
 8017eb8:	d134      	bne.n	8017f24 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x15a>
 8017eba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8017ebc:	eba5 0509 	sub.w	r5, r5, r9
 8017ec0:	2b00      	cmp	r3, #0
 8017ec2:	d14f      	bne.n	8017f64 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x19a>
 8017ec4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8017ec6:	eb09 0305 	add.w	r3, r9, r5
 8017eca:	4413      	add	r3, r2
 8017ecc:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8017ece:	f9b2 2000 	ldrsh.w	r2, [r2]
 8017ed2:	4293      	cmp	r3, r2
 8017ed4:	da51      	bge.n	8017f7a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1b0>
 8017ed6:	e038      	b.n	8017f4a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x180>
 8017ed8:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8017eda:	e79d      	b.n	8017e18 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x4e>
 8017edc:	f10d 036f 	add.w	r3, sp, #111	; 0x6f
 8017ee0:	4659      	mov	r1, fp
 8017ee2:	982c      	ldr	r0, [sp, #176]	; 0xb0
 8017ee4:	9301      	str	r3, [sp, #4]
 8017ee6:	ab1d      	add	r3, sp, #116	; 0x74
 8017ee8:	9300      	str	r3, [sp, #0]
 8017eea:	ab1c      	add	r3, sp, #112	; 0x70
 8017eec:	f002 fe1e 	bl	801ab2c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh>
 8017ef0:	4604      	mov	r4, r0
 8017ef2:	e7c0      	b.n	8017e76 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xac>
 8017ef4:	f8d8 0000 	ldr.w	r0, [r8]
 8017ef8:	6803      	ldr	r3, [r0, #0]
 8017efa:	691b      	ldr	r3, [r3, #16]
 8017efc:	4798      	blx	r3
 8017efe:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 8017f02:	4298      	cmp	r0, r3
 8017f04:	f000 80a6 	beq.w	8018054 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28a>
 8017f08:	f242 030b 	movw	r3, #8203	; 0x200b
 8017f0c:	4298      	cmp	r0, r3
 8017f0e:	f000 80a1 	beq.w	8018054 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28a>
 8017f12:	f1bb 0f00 	cmp.w	fp, #0
 8017f16:	d100      	bne.n	8017f1a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x150>
 8017f18:	444d      	add	r5, r9
 8017f1a:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8017f1c:	2a00      	cmp	r2, #0
 8017f1e:	d1bf      	bne.n	8017ea0 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xd6>
 8017f20:	4691      	mov	r9, r2
 8017f22:	e097      	b.n	8018054 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28a>
 8017f24:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8017f26:	2b00      	cmp	r3, #0
 8017f28:	f000 80ab 	beq.w	8018082 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2b8>
 8017f2c:	f1bb 0f00 	cmp.w	fp, #0
 8017f30:	d118      	bne.n	8017f64 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x19a>
 8017f32:	f8d8 0000 	ldr.w	r0, [r8]
 8017f36:	990d      	ldr	r1, [sp, #52]	; 0x34
 8017f38:	6803      	ldr	r3, [r0, #0]
 8017f3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8017f3c:	4798      	blx	r3
 8017f3e:	4405      	add	r5, r0
 8017f40:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8017f42:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8017f44:	1aeb      	subs	r3, r5, r3
 8017f46:	4293      	cmp	r3, r2
 8017f48:	dd17      	ble.n	8017f7a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1b0>
 8017f4a:	2c00      	cmp	r4, #0
 8017f4c:	f000 8097 	beq.w	801807e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2b4>
 8017f50:	2c0a      	cmp	r4, #10
 8017f52:	f040 8085 	bne.w	8018060 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x296>
 8017f56:	240a      	movs	r4, #10
 8017f58:	fab4 f084 	clz	r0, r4
 8017f5c:	0940      	lsrs	r0, r0, #5
 8017f5e:	b01f      	add	sp, #124	; 0x7c
 8017f60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017f64:	f8d8 0000 	ldr.w	r0, [r8]
 8017f68:	990d      	ldr	r1, [sp, #52]	; 0x34
 8017f6a:	6803      	ldr	r3, [r0, #0]
 8017f6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8017f6e:	4798      	blx	r3
 8017f70:	f1bb 0f01 	cmp.w	fp, #1
 8017f74:	eba5 0500 	sub.w	r5, r5, r0
 8017f78:	d0a4      	beq.n	8017ec4 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xfa>
 8017f7a:	981c      	ldr	r0, [sp, #112]	; 0x70
 8017f7c:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8017f7e:	f990 1009 	ldrsb.w	r1, [r0, #9]
 8017f82:	f9b3 6000 	ldrsh.w	r6, [r3]
 8017f86:	7b43      	ldrb	r3, [r0, #13]
 8017f88:	4429      	add	r1, r5
 8017f8a:	015b      	lsls	r3, r3, #5
 8017f8c:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8017f90:	7983      	ldrb	r3, [r0, #6]
 8017f92:	4313      	orrs	r3, r2
 8017f94:	440b      	add	r3, r1
 8017f96:	42b3      	cmp	r3, r6
 8017f98:	db5c      	blt.n	8018054 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28a>
 8017f9a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8017f9c:	4299      	cmp	r1, r3
 8017f9e:	da59      	bge.n	8018054 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28a>
 8017fa0:	f8d8 0000 	ldr.w	r0, [r8]
 8017fa4:	42ae      	cmp	r6, r5
 8017fa6:	6803      	ldr	r3, [r0, #0]
 8017fa8:	bfcc      	ite	gt
 8017faa:	1b76      	subgt	r6, r6, r5
 8017fac:	2600      	movle	r6, #0
 8017fae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017fb0:	bfc8      	it	gt
 8017fb2:	b2b6      	uxthgt	r6, r6
 8017fb4:	4798      	blx	r3
 8017fb6:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8017fb8:	7b5a      	ldrb	r2, [r3, #13]
 8017fba:	00d1      	lsls	r1, r2, #3
 8017fbc:	f401 7780 	and.w	r7, r1, #256	; 0x100
 8017fc0:	7a19      	ldrb	r1, [r3, #8]
 8017fc2:	4339      	orrs	r1, r7
 8017fc4:	0657      	lsls	r7, r2, #25
 8017fc6:	9f17      	ldr	r7, [sp, #92]	; 0x5c
 8017fc8:	bf48      	it	mi
 8017fca:	f5a1 7100 	submi.w	r1, r1, #512	; 0x200
 8017fce:	4407      	add	r7, r0
 8017fd0:	bf48      	it	mi
 8017fd2:	b209      	sxthmi	r1, r1
 8017fd4:	1a7f      	subs	r7, r7, r1
 8017fd6:	9929      	ldr	r1, [sp, #164]	; 0xa4
 8017fd8:	b2bf      	uxth	r7, r7
 8017fda:	f9b1 1002 	ldrsh.w	r1, [r1, #2]
 8017fde:	fa0f fa87 	sxth.w	sl, r7
 8017fe2:	4551      	cmp	r1, sl
 8017fe4:	dd3a      	ble.n	801805c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x292>
 8017fe6:	0112      	lsls	r2, r2, #4
 8017fe8:	79d8      	ldrb	r0, [r3, #7]
 8017fea:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8017fee:	4302      	orrs	r2, r0
 8017ff0:	4492      	add	sl, r2
 8017ff2:	4551      	cmp	r1, sl
 8017ff4:	dc2e      	bgt.n	8018054 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28a>
 8017ff6:	1bcf      	subs	r7, r1, r7
 8017ff8:	468a      	mov	sl, r1
 8017ffa:	b2bf      	uxth	r7, r7
 8017ffc:	9319      	str	r3, [sp, #100]	; 0x64
 8017ffe:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8018000:	f8d8 0000 	ldr.w	r0, [r8]
 8018004:	681a      	ldr	r2, [r3, #0]
 8018006:	6801      	ldr	r1, [r0, #0]
 8018008:	6c93      	ldr	r3, [r2, #72]	; 0x48
 801800a:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 801800c:	9313      	str	r3, [sp, #76]	; 0x4c
 801800e:	9218      	str	r2, [sp, #96]	; 0x60
 8018010:	6b89      	ldr	r1, [r1, #56]	; 0x38
 8018012:	4788      	blx	r1
 8018014:	f898 1006 	ldrb.w	r1, [r8, #6]
 8018018:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801801a:	910b      	str	r1, [sp, #44]	; 0x2c
 801801c:	f898 100e 	ldrb.w	r1, [r8, #14]
 8018020:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8018022:	910a      	str	r1, [sp, #40]	; 0x28
 8018024:	f89d 106f 	ldrb.w	r1, [sp, #111]	; 0x6f
 8018028:	9109      	str	r1, [sp, #36]	; 0x24
 801802a:	f8d8 1008 	ldr.w	r1, [r8, #8]
 801802e:	9305      	str	r3, [sp, #20]
 8018030:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8018032:	9206      	str	r2, [sp, #24]
 8018034:	e9cd a601 	strd	sl, r6, [sp, #4]
 8018038:	442e      	add	r6, r5
 801803a:	e9cd 7303 	strd	r7, r3, [sp, #12]
 801803e:	b236      	sxth	r6, r6
 8018040:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8018042:	e9cd 0107 	strd	r0, r1, [sp, #28]
 8018046:	9600      	str	r6, [sp, #0]
 8018048:	9916      	ldr	r1, [sp, #88]	; 0x58
 801804a:	681a      	ldr	r2, [r3, #0]
 801804c:	9811      	ldr	r0, [sp, #68]	; 0x44
 801804e:	685b      	ldr	r3, [r3, #4]
 8018050:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 8018052:	47b0      	blx	r6
 8018054:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8018056:	3301      	adds	r3, #1
 8018058:	930e      	str	r3, [sp, #56]	; 0x38
 801805a:	e6e5      	b.n	8017e28 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x5e>
 801805c:	2700      	movs	r7, #0
 801805e:	e7cd      	b.n	8017ffc <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x232>
 8018060:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8018062:	3501      	adds	r5, #1
 8018064:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8018066:	429d      	cmp	r5, r3
 8018068:	f6bf af76 	bge.w	8017f58 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18e>
 801806c:	4659      	mov	r1, fp
 801806e:	982c      	ldr	r0, [sp, #176]	; 0xb0
 8018070:	f7fb f8c8 	bl	8013204 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8018074:	4604      	mov	r4, r0
 8018076:	b110      	cbz	r0, 801807e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2b4>
 8018078:	280a      	cmp	r0, #10
 801807a:	d1f2      	bne.n	8018062 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x298>
 801807c:	e76b      	b.n	8017f56 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18c>
 801807e:	2400      	movs	r4, #0
 8018080:	e76a      	b.n	8017f58 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18e>
 8018082:	f1bb 0f00 	cmp.w	fp, #0
 8018086:	f43f af5b 	beq.w	8017f40 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x176>
 801808a:	e776      	b.n	8017f7a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1b0>

0801808c <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>:
 801808c:	b530      	push	{r4, r5, lr}
 801808e:	8a44      	ldrh	r4, [r0, #18]
 8018090:	8ac5      	ldrh	r5, [r0, #22]
 8018092:	82c3      	strh	r3, [r0, #22]
 8018094:	442c      	add	r4, r5
 8018096:	1ae4      	subs	r4, r4, r3
 8018098:	8b03      	ldrh	r3, [r0, #24]
 801809a:	8244      	strh	r4, [r0, #18]
 801809c:	8a84      	ldrh	r4, [r0, #20]
 801809e:	4422      	add	r2, r4
 80180a0:	440c      	add	r4, r1
 80180a2:	1a59      	subs	r1, r3, r1
 80180a4:	8342      	strh	r2, [r0, #26]
 80180a6:	8284      	strh	r4, [r0, #20]
 80180a8:	8301      	strh	r1, [r0, #24]
 80180aa:	bd30      	pop	{r4, r5, pc}

080180ac <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>:
 80180ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80180b0:	7a43      	ldrb	r3, [r0, #9]
 80180b2:	b087      	sub	sp, #28
 80180b4:	4604      	mov	r4, r0
 80180b6:	460f      	mov	r7, r1
 80180b8:	1eda      	subs	r2, r3, #3
 80180ba:	b2d2      	uxtb	r2, r2
 80180bc:	2900      	cmp	r1, #0
 80180be:	d036      	beq.n	801812e <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x82>
 80180c0:	2a01      	cmp	r2, #1
 80180c2:	d932      	bls.n	801812a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x7e>
 80180c4:	1e58      	subs	r0, r3, #1
 80180c6:	f1d0 0b00 	rsbs	fp, r0, #0
 80180ca:	eb4b 0b00 	adc.w	fp, fp, r0
 80180ce:	1e99      	subs	r1, r3, #2
 80180d0:	424b      	negs	r3, r1
 80180d2:	414b      	adcs	r3, r1
 80180d4:	9303      	str	r3, [sp, #12]
 80180d6:	2300      	movs	r3, #0
 80180d8:	e9cd 3301 	strd	r3, r3, [sp, #4]
 80180dc:	2500      	movs	r5, #0
 80180de:	f242 0a0b 	movw	sl, #8203	; 0x200b
 80180e2:	46a9      	mov	r9, r5
 80180e4:	8265      	strh	r5, [r4, #18]
 80180e6:	82a5      	strh	r5, [r4, #20]
 80180e8:	2300      	movs	r3, #0
 80180ea:	9305      	str	r3, [sp, #20]
 80180ec:	8823      	ldrh	r3, [r4, #0]
 80180ee:	2b20      	cmp	r3, #32
 80180f0:	d02b      	beq.n	801814a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x9e>
 80180f2:	eba3 020a 	sub.w	r2, r3, sl
 80180f6:	4256      	negs	r6, r2
 80180f8:	4156      	adcs	r6, r2
 80180fa:	f64f 62ff 	movw	r2, #65279	; 0xfeff
 80180fe:	4293      	cmp	r3, r2
 8018100:	d004      	beq.n	801810c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x60>
 8018102:	4553      	cmp	r3, sl
 8018104:	bf16      	itet	ne
 8018106:	4699      	movne	r9, r3
 8018108:	2601      	moveq	r6, #1
 801810a:	2600      	movne	r6, #0
 801810c:	ab05      	add	r3, sp, #20
 801810e:	68e2      	ldr	r2, [r4, #12]
 8018110:	7a21      	ldrb	r1, [r4, #8]
 8018112:	6860      	ldr	r0, [r4, #4]
 8018114:	f002 fcb2 	bl	801aa7c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8018118:	8020      	strh	r0, [r4, #0]
 801811a:	b9c8      	cbnz	r0, 8018150 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xa4>
 801811c:	8b22      	ldrh	r2, [r4, #24]
 801811e:	2300      	movs	r3, #0
 8018120:	4611      	mov	r1, r2
 8018122:	4620      	mov	r0, r4
 8018124:	f7ff ffb2 	bl	801808c <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
 8018128:	e066      	b.n	80181f8 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x14c>
 801812a:	468b      	mov	fp, r1
 801812c:	e7cf      	b.n	80180ce <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x22>
 801812e:	3b01      	subs	r3, #1
 8018130:	2a01      	cmp	r2, #1
 8018132:	9103      	str	r1, [sp, #12]
 8018134:	468b      	mov	fp, r1
 8018136:	bf8c      	ite	hi
 8018138:	2200      	movhi	r2, #0
 801813a:	2201      	movls	r2, #1
 801813c:	2b01      	cmp	r3, #1
 801813e:	9202      	str	r2, [sp, #8]
 8018140:	bf8c      	ite	hi
 8018142:	2300      	movhi	r3, #0
 8018144:	2301      	movls	r3, #1
 8018146:	9301      	str	r3, [sp, #4]
 8018148:	e7c8      	b.n	80180dc <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x30>
 801814a:	4699      	mov	r9, r3
 801814c:	2601      	movs	r6, #1
 801814e:	e7dd      	b.n	801810c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x60>
 8018150:	8ae3      	ldrh	r3, [r4, #22]
 8018152:	280a      	cmp	r0, #10
 8018154:	f103 0301 	add.w	r3, r3, #1
 8018158:	82e3      	strh	r3, [r4, #22]
 801815a:	d0df      	beq.n	801811c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x70>
 801815c:	9a05      	ldr	r2, [sp, #20]
 801815e:	bb42      	cbnz	r2, 80181b2 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x106>
 8018160:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 8018164:	4298      	cmp	r0, r3
 8018166:	d001      	beq.n	801816c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xc0>
 8018168:	4550      	cmp	r0, sl
 801816a:	d1bd      	bne.n	80180e8 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 801816c:	8823      	ldrh	r3, [r4, #0]
 801816e:	8b21      	ldrh	r1, [r4, #24]
 8018170:	2b20      	cmp	r3, #32
 8018172:	d001      	beq.n	8018178 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xcc>
 8018174:	4553      	cmp	r3, sl
 8018176:	d131      	bne.n	80181dc <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x130>
 8018178:	2e00      	cmp	r6, #0
 801817a:	bf0a      	itet	eq
 801817c:	460d      	moveq	r5, r1
 801817e:	4630      	movne	r0, r6
 8018180:	2001      	moveq	r0, #1
 8018182:	440a      	add	r2, r1
 8018184:	8aa3      	ldrh	r3, [r4, #20]
 8018186:	f8b4 c010 	ldrh.w	ip, [r4, #16]
 801818a:	b292      	uxth	r2, r2
 801818c:	8322      	strh	r2, [r4, #24]
 801818e:	4413      	add	r3, r2
 8018190:	2f00      	cmp	r7, #0
 8018192:	d03a      	beq.n	801820a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x15e>
 8018194:	f1bb 0f00 	cmp.w	fp, #0
 8018198:	d102      	bne.n	80181a0 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xf4>
 801819a:	9903      	ldr	r1, [sp, #12]
 801819c:	b301      	cbz	r1, 80181e0 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x134>
 801819e:	b1f8      	cbz	r0, 80181e0 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x134>
 80181a0:	8ba1      	ldrh	r1, [r4, #28]
 80181a2:	4419      	add	r1, r3
 80181a4:	458c      	cmp	ip, r1
 80181a6:	da2a      	bge.n	80181fe <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x152>
 80181a8:	8a61      	ldrh	r1, [r4, #18]
 80181aa:	b341      	cbz	r1, 80181fe <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x152>
 80181ac:	4563      	cmp	r3, ip
 80181ae:	dd9b      	ble.n	80180e8 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 80181b0:	e01c      	b.n	80181ec <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x140>
 80181b2:	8893      	ldrh	r3, [r2, #4]
 80181b4:	4649      	mov	r1, r9
 80181b6:	8023      	strh	r3, [r4, #0]
 80181b8:	f892 800d 	ldrb.w	r8, [r2, #13]
 80181bc:	ea4f 0848 	mov.w	r8, r8, lsl #1
 80181c0:	f408 7080 	and.w	r0, r8, #256	; 0x100
 80181c4:	f892 800a 	ldrb.w	r8, [r2, #10]
 80181c8:	ea48 0800 	orr.w	r8, r8, r0
 80181cc:	68e0      	ldr	r0, [r4, #12]
 80181ce:	6803      	ldr	r3, [r0, #0]
 80181d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80181d2:	4798      	blx	r3
 80181d4:	eb08 0200 	add.w	r2, r8, r0
 80181d8:	b292      	uxth	r2, r2
 80181da:	e7c7      	b.n	801816c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xc0>
 80181dc:	2000      	movs	r0, #0
 80181de:	e7d0      	b.n	8018182 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xd6>
 80181e0:	4563      	cmp	r3, ip
 80181e2:	dd81      	ble.n	80180e8 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 80181e4:	8a63      	ldrh	r3, [r4, #18]
 80181e6:	2b00      	cmp	r3, #0
 80181e8:	f43f af7e 	beq.w	80180e8 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 80181ec:	2301      	movs	r3, #1
 80181ee:	8ba2      	ldrh	r2, [r4, #28]
 80181f0:	77a3      	strb	r3, [r4, #30]
 80181f2:	8b63      	ldrh	r3, [r4, #26]
 80181f4:	4413      	add	r3, r2
 80181f6:	8363      	strh	r3, [r4, #26]
 80181f8:	b007      	add	sp, #28
 80181fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80181fe:	2300      	movs	r3, #0
 8018200:	4611      	mov	r1, r2
 8018202:	4620      	mov	r0, r4
 8018204:	f7ff ff42 	bl	801808c <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
 8018208:	e76e      	b.n	80180e8 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 801820a:	4563      	cmp	r3, ip
 801820c:	dd14      	ble.n	8018238 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x18c>
 801820e:	9b02      	ldr	r3, [sp, #8]
 8018210:	b113      	cbz	r3, 8018218 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x16c>
 8018212:	2301      	movs	r3, #1
 8018214:	460a      	mov	r2, r1
 8018216:	e783      	b.n	8018120 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x74>
 8018218:	9b01      	ldr	r3, [sp, #4]
 801821a:	2b00      	cmp	r3, #0
 801821c:	f43f af64 	beq.w	80180e8 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 8018220:	2800      	cmp	r0, #0
 8018222:	f47f af61 	bne.w	80180e8 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 8018226:	b116      	cbz	r6, 801822e <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x182>
 8018228:	2301      	movs	r3, #1
 801822a:	462a      	mov	r2, r5
 801822c:	e779      	b.n	8018122 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x76>
 801822e:	8a63      	ldrh	r3, [r4, #18]
 8018230:	2b00      	cmp	r3, #0
 8018232:	f43f af59 	beq.w	80180e8 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 8018236:	e7df      	b.n	80181f8 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x14c>
 8018238:	2800      	cmp	r0, #0
 801823a:	f47f af55 	bne.w	80180e8 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 801823e:	2e00      	cmp	r6, #0
 8018240:	f43f af52 	beq.w	80180e8 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 8018244:	2301      	movs	r3, #1
 8018246:	462a      	mov	r2, r5
 8018248:	e7db      	b.n	8018202 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x156>

0801824a <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs>:
 801824a:	b530      	push	{r4, r5, lr}
 801824c:	4605      	mov	r5, r0
 801824e:	b08b      	sub	sp, #44	; 0x2c
 8018250:	b191      	cbz	r1, 8018278 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x2e>
 8018252:	2401      	movs	r4, #1
 8018254:	e9cd 3100 	strd	r3, r1, [sp]
 8018258:	4613      	mov	r3, r2
 801825a:	4601      	mov	r1, r0
 801825c:	f8bd 2038 	ldrh.w	r2, [sp, #56]	; 0x38
 8018260:	a802      	add	r0, sp, #8
 8018262:	f7ff fd0b 	bl	8017c7c <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE>
 8018266:	2100      	movs	r1, #0
 8018268:	a802      	add	r0, sp, #8
 801826a:	f7ff ff1f 	bl	80180ac <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>
 801826e:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 8018272:	b163      	cbz	r3, 801828e <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x44>
 8018274:	3401      	adds	r4, #1
 8018276:	e7f6      	b.n	8018266 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x1c>
 8018278:	2401      	movs	r4, #1
 801827a:	f002 fcf7 	bl	801ac6c <_ZN8touchgfx12TextProvider11getNextCharEv>
 801827e:	280a      	cmp	r0, #10
 8018280:	4628      	mov	r0, r5
 8018282:	bf08      	it	eq
 8018284:	3401      	addeq	r4, #1
 8018286:	f002 fcf1 	bl	801ac6c <_ZN8touchgfx12TextProvider11getNextCharEv>
 801828a:	2800      	cmp	r0, #0
 801828c:	d1f7      	bne.n	801827e <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x34>
 801828e:	b2a0      	uxth	r0, r4
 8018290:	b00b      	add	sp, #44	; 0x2c
 8018292:	bd30      	pop	{r4, r5, pc}

08018294 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list>:
 8018294:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018298:	b0db      	sub	sp, #364	; 0x16c
 801829a:	4689      	mov	r9, r1
 801829c:	461c      	mov	r4, r3
 801829e:	f8dd a190 	ldr.w	sl, [sp, #400]	; 0x190
 80182a2:	900a      	str	r0, [sp, #40]	; 0x28
 80182a4:	f1ba 0f00 	cmp.w	sl, #0
 80182a8:	f000 80a5 	beq.w	80183f6 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x162>
 80182ac:	681b      	ldr	r3, [r3, #0]
 80182ae:	2b00      	cmp	r3, #0
 80182b0:	f000 80a1 	beq.w	80183f6 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x162>
 80182b4:	7ba3      	ldrb	r3, [r4, #14]
 80182b6:	2b00      	cmp	r3, #0
 80182b8:	f000 809d 	beq.w	80183f6 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x162>
 80182bc:	f10d 0830 	add.w	r8, sp, #48	; 0x30
 80182c0:	6810      	ldr	r0, [r2, #0]
 80182c2:	6851      	ldr	r1, [r2, #4]
 80182c4:	2500      	movs	r5, #0
 80182c6:	4643      	mov	r3, r8
 80182c8:	f9b9 2004 	ldrsh.w	r2, [r9, #4]
 80182cc:	950e      	str	r5, [sp, #56]	; 0x38
 80182ce:	af18      	add	r7, sp, #96	; 0x60
 80182d0:	f8ad 203c 	strh.w	r2, [sp, #60]	; 0x3c
 80182d4:	79a2      	ldrb	r2, [r4, #6]
 80182d6:	c303      	stmia	r3!, {r0, r1}
 80182d8:	f9b9 3006 	ldrsh.w	r3, [r9, #6]
 80182dc:	a90e      	add	r1, sp, #56	; 0x38
 80182de:	4640      	mov	r0, r8
 80182e0:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 80182e4:	f7ff fd40 	bl	8017d68 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
 80182e8:	a90e      	add	r1, sp, #56	; 0x38
 80182ea:	79a2      	ldrb	r2, [r4, #6]
 80182ec:	4608      	mov	r0, r1
 80182ee:	f7ff fd3b 	bl	8017d68 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
 80182f2:	4638      	mov	r0, r7
 80182f4:	f002 f882 	bl	801a3fc <_ZN8touchgfx12TextProviderC1Ev>
 80182f8:	6820      	ldr	r0, [r4, #0]
 80182fa:	6803      	ldr	r3, [r0, #0]
 80182fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80182fe:	4798      	blx	r3
 8018300:	9a65      	ldr	r2, [sp, #404]	; 0x194
 8018302:	4603      	mov	r3, r0
 8018304:	4651      	mov	r1, sl
 8018306:	4638      	mov	r0, r7
 8018308:	f002 f8bd 	bl	801a486 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 801830c:	7923      	ldrb	r3, [r4, #4]
 801830e:	6820      	ldr	r0, [r4, #0]
 8018310:	9308      	str	r3, [sp, #32]
 8018312:	6803      	ldr	r3, [r0, #0]
 8018314:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018316:	4798      	blx	r3
 8018318:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801831c:	181e      	adds	r6, r3, r0
 801831e:	42ae      	cmp	r6, r5
 8018320:	dd06      	ble.n	8018330 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x9c>
 8018322:	f9b8 2002 	ldrsh.w	r2, [r8, #2]
 8018326:	4282      	cmp	r2, r0
 8018328:	bfa4      	itt	ge
 801832a:	189d      	addge	r5, r3, r2
 801832c:	fb95 f5f6 	sdivge	r5, r5, r6
 8018330:	a82e      	add	r0, sp, #184	; 0xb8
 8018332:	f002 f863 	bl	801a3fc <_ZN8touchgfx12TextProviderC1Ev>
 8018336:	7c23      	ldrb	r3, [r4, #16]
 8018338:	b14b      	cbz	r3, 801834e <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xba>
 801833a:	6820      	ldr	r0, [r4, #0]
 801833c:	6803      	ldr	r3, [r0, #0]
 801833e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8018340:	4798      	blx	r3
 8018342:	9a65      	ldr	r2, [sp, #404]	; 0x194
 8018344:	4603      	mov	r3, r0
 8018346:	4651      	mov	r1, sl
 8018348:	a82e      	add	r0, sp, #184	; 0xb8
 801834a:	f002 f89c 	bl	801a486 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 801834e:	7c21      	ldrb	r1, [r4, #16]
 8018350:	a810      	add	r0, sp, #64	; 0x40
 8018352:	7963      	ldrb	r3, [r4, #5]
 8018354:	9101      	str	r1, [sp, #4]
 8018356:	6821      	ldr	r1, [r4, #0]
 8018358:	f8bd 203c 	ldrh.w	r2, [sp, #60]	; 0x3c
 801835c:	9100      	str	r1, [sp, #0]
 801835e:	a92e      	add	r1, sp, #184	; 0xb8
 8018360:	f7ff fc8c 	bl	8017c7c <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE>
 8018364:	7c23      	ldrb	r3, [r4, #16]
 8018366:	b9bb      	cbnz	r3, 8018398 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x104>
 8018368:	fa1f fa86 	uxth.w	sl, r6
 801836c:	2d00      	cmp	r5, #0
 801836e:	dd45      	ble.n	80183fc <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x168>
 8018370:	4638      	mov	r0, r7
 8018372:	f002 fc7b 	bl	801ac6c <_ZN8touchgfx12TextProvider11getNextCharEv>
 8018376:	2800      	cmp	r0, #0
 8018378:	d03d      	beq.n	80183f6 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x162>
 801837a:	280a      	cmp	r0, #10
 801837c:	d1f6      	bne.n	801836c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xd8>
 801837e:	f8bd 303a 	ldrh.w	r3, [sp, #58]	; 0x3a
 8018382:	3d01      	subs	r5, #1
 8018384:	4453      	add	r3, sl
 8018386:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 801838a:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 801838e:	eba3 030a 	sub.w	r3, r3, sl
 8018392:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 8018396:	e7e9      	b.n	801836c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xd8>
 8018398:	0073      	lsls	r3, r6, #1
 801839a:	f64f 7bff 	movw	fp, #65535	; 0xffff
 801839e:	fa1f fa86 	uxth.w	sl, r6
 80183a2:	9309      	str	r3, [sp, #36]	; 0x24
 80183a4:	2d00      	cmp	r5, #0
 80183a6:	dd29      	ble.n	80183fc <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x168>
 80183a8:	f9bd 103e 	ldrsh.w	r1, [sp, #62]	; 0x3e
 80183ac:	a810      	add	r0, sp, #64	; 0x40
 80183ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80183b0:	428b      	cmp	r3, r1
 80183b2:	bfd4      	ite	le
 80183b4:	2100      	movle	r1, #0
 80183b6:	2101      	movgt	r1, #1
 80183b8:	f7ff fe78 	bl	80180ac <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>
 80183bc:	f8bd 3052 	ldrh.w	r3, [sp, #82]	; 0x52
 80183c0:	3b01      	subs	r3, #1
 80183c2:	b29b      	uxth	r3, r3
 80183c4:	455b      	cmp	r3, fp
 80183c6:	930b      	str	r3, [sp, #44]	; 0x2c
 80183c8:	d005      	beq.n	80183d6 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x142>
 80183ca:	7961      	ldrb	r1, [r4, #5]
 80183cc:	4638      	mov	r0, r7
 80183ce:	f7fa ff19 	bl	8013204 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 80183d2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80183d4:	e7f4      	b.n	80183c0 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x12c>
 80183d6:	f8bd 303a 	ldrh.w	r3, [sp, #58]	; 0x3a
 80183da:	3d01      	subs	r5, #1
 80183dc:	4453      	add	r3, sl
 80183de:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 80183e2:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 80183e6:	eba3 030a 	sub.w	r3, r3, sl
 80183ea:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 80183ee:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 80183f2:	2b00      	cmp	r3, #0
 80183f4:	d1d6      	bne.n	80183a4 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x110>
 80183f6:	b05b      	add	sp, #364	; 0x16c
 80183f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80183fc:	ea4f 0a46 	mov.w	sl, r6, lsl #1
 8018400:	ad44      	add	r5, sp, #272	; 0x110
 8018402:	f04f 0b00 	mov.w	fp, #0
 8018406:	7c23      	ldrb	r3, [r4, #16]
 8018408:	2b00      	cmp	r3, #0
 801840a:	d067      	beq.n	80184dc <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x248>
 801840c:	f9bd 103e 	ldrsh.w	r1, [sp, #62]	; 0x3e
 8018410:	a810      	add	r0, sp, #64	; 0x40
 8018412:	458a      	cmp	sl, r1
 8018414:	bfd4      	ite	le
 8018416:	2100      	movle	r1, #0
 8018418:	2101      	movgt	r1, #1
 801841a:	f7ff fe47 	bl	80180ac <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>
 801841e:	9b08      	ldr	r3, [sp, #32]
 8018420:	2b00      	cmp	r3, #0
 8018422:	d056      	beq.n	80184d2 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x23e>
 8018424:	7c23      	ldrb	r3, [r4, #16]
 8018426:	2258      	movs	r2, #88	; 0x58
 8018428:	4639      	mov	r1, r7
 801842a:	4628      	mov	r0, r5
 801842c:	9309      	str	r3, [sp, #36]	; 0x24
 801842e:	f00e fff3 	bl	8027418 <memcpy>
 8018432:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018434:	2b00      	cmp	r3, #0
 8018436:	d059      	beq.n	80184ec <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x258>
 8018438:	f9bd 305a 	ldrsh.w	r3, [sp, #90]	; 0x5a
 801843c:	7922      	ldrb	r2, [r4, #4]
 801843e:	2a01      	cmp	r2, #1
 8018440:	d13d      	bne.n	80184be <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x22a>
 8018442:	f9bd 003c 	ldrsh.w	r0, [sp, #60]	; 0x3c
 8018446:	1ac0      	subs	r0, r0, r3
 8018448:	2302      	movs	r3, #2
 801844a:	fb90 f0f3 	sdiv	r0, r0, r3
 801844e:	b200      	sxth	r0, r0
 8018450:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 8018454:	4418      	add	r0, r3
 8018456:	7c23      	ldrb	r3, [r4, #16]
 8018458:	f8ad 0110 	strh.w	r0, [sp, #272]	; 0x110
 801845c:	2b00      	cmp	r3, #0
 801845e:	d03a      	beq.n	80184d6 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x242>
 8018460:	f8bd 2052 	ldrh.w	r2, [sp, #82]	; 0x52
 8018464:	f89d 105e 	ldrb.w	r1, [sp, #94]	; 0x5e
 8018468:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 801846c:	9500      	str	r5, [sp, #0]
 801846e:	980a      	ldr	r0, [sp, #40]	; 0x28
 8018470:	e9cd 2105 	strd	r2, r1, [sp, #20]
 8018474:	e9cd b703 	strd	fp, r7, [sp, #12]
 8018478:	e9cd 8401 	strd	r8, r4, [sp, #4]
 801847c:	464a      	mov	r2, r9
 801847e:	2100      	movs	r1, #0
 8018480:	f7ff fca3 	bl	8017dca <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>
 8018484:	2800      	cmp	r0, #0
 8018486:	d1b6      	bne.n	80183f6 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x162>
 8018488:	b2b2      	uxth	r2, r6
 801848a:	f8bd 303a 	ldrh.w	r3, [sp, #58]	; 0x3a
 801848e:	4611      	mov	r1, r2
 8018490:	4413      	add	r3, r2
 8018492:	f8bd 203e 	ldrh.w	r2, [sp, #62]	; 0x3e
 8018496:	b21b      	sxth	r3, r3
 8018498:	1a52      	subs	r2, r2, r1
 801849a:	7c21      	ldrb	r1, [r4, #16]
 801849c:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 80184a0:	b212      	sxth	r2, r2
 80184a2:	f8ad 203e 	strh.w	r2, [sp, #62]	; 0x3e
 80184a6:	b109      	cbz	r1, 80184ac <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x218>
 80184a8:	42b2      	cmp	r2, r6
 80184aa:	dba4      	blt.n	80183f6 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x162>
 80184ac:	f8b8 2006 	ldrh.w	r2, [r8, #6]
 80184b0:	f8b8 1002 	ldrh.w	r1, [r8, #2]
 80184b4:	440a      	add	r2, r1
 80184b6:	b212      	sxth	r2, r2
 80184b8:	4293      	cmp	r3, r2
 80184ba:	dda4      	ble.n	8018406 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x172>
 80184bc:	e79b      	b.n	80183f6 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x162>
 80184be:	2a02      	cmp	r2, #2
 80184c0:	d105      	bne.n	80184ce <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x23a>
 80184c2:	7be2      	ldrb	r2, [r4, #15]
 80184c4:	f8bd 003c 	ldrh.w	r0, [sp, #60]	; 0x3c
 80184c8:	1a80      	subs	r0, r0, r2
 80184ca:	1ac0      	subs	r0, r0, r3
 80184cc:	e7bf      	b.n	801844e <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1ba>
 80184ce:	2000      	movs	r0, #0
 80184d0:	e7be      	b.n	8018450 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1bc>
 80184d2:	7be0      	ldrb	r0, [r4, #15]
 80184d4:	e7bc      	b.n	8018450 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1bc>
 80184d6:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80184da:	e7c3      	b.n	8018464 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1d0>
 80184dc:	9b08      	ldr	r3, [sp, #32]
 80184de:	2b00      	cmp	r3, #0
 80184e0:	d0f7      	beq.n	80184d2 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x23e>
 80184e2:	2258      	movs	r2, #88	; 0x58
 80184e4:	4639      	mov	r1, r7
 80184e6:	4628      	mov	r0, r5
 80184e8:	f00e ff96 	bl	8027418 <memcpy>
 80184ec:	2300      	movs	r3, #0
 80184ee:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80184f2:	6821      	ldr	r1, [r4, #0]
 80184f4:	4628      	mov	r0, r5
 80184f6:	f7ff fbfb 	bl	8017cf0 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>
 80184fa:	b203      	sxth	r3, r0
 80184fc:	e79e      	b.n	801843c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1a8>

080184fe <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>:
 80184fe:	2b02      	cmp	r3, #2
 8018500:	b510      	push	{r4, lr}
 8018502:	f9b0 4000 	ldrsh.w	r4, [r0]
 8018506:	d00b      	beq.n	8018520 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x22>
 8018508:	2b03      	cmp	r3, #3
 801850a:	d00e      	beq.n	801852a <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x2c>
 801850c:	2b01      	cmp	r3, #1
 801850e:	d001      	beq.n	8018514 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x16>
 8018510:	1860      	adds	r0, r4, r1
 8018512:	bd10      	pop	{r4, pc}
 8018514:	8880      	ldrh	r0, [r0, #4]
 8018516:	4420      	add	r0, r4
 8018518:	b200      	sxth	r0, r0
 801851a:	1a80      	subs	r0, r0, r2
 801851c:	3801      	subs	r0, #1
 801851e:	e7f8      	b.n	8018512 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x14>
 8018520:	8880      	ldrh	r0, [r0, #4]
 8018522:	4420      	add	r0, r4
 8018524:	b200      	sxth	r0, r0
 8018526:	1a40      	subs	r0, r0, r1
 8018528:	e7f8      	b.n	801851c <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x1e>
 801852a:	18a0      	adds	r0, r4, r2
 801852c:	e7f1      	b.n	8018512 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x14>

0801852e <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>:
 801852e:	2b02      	cmp	r3, #2
 8018530:	b510      	push	{r4, lr}
 8018532:	f9b0 4002 	ldrsh.w	r4, [r0, #2]
 8018536:	d006      	beq.n	8018546 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x18>
 8018538:	2b03      	cmp	r3, #3
 801853a:	d00a      	beq.n	8018552 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x24>
 801853c:	2b01      	cmp	r3, #1
 801853e:	bf14      	ite	ne
 8018540:	18a0      	addne	r0, r4, r2
 8018542:	1860      	addeq	r0, r4, r1
 8018544:	bd10      	pop	{r4, pc}
 8018546:	88c0      	ldrh	r0, [r0, #6]
 8018548:	4420      	add	r0, r4
 801854a:	b200      	sxth	r0, r0
 801854c:	1a80      	subs	r0, r0, r2
 801854e:	3801      	subs	r0, #1
 8018550:	e7f8      	b.n	8018544 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x16>
 8018552:	88c0      	ldrh	r0, [r0, #6]
 8018554:	4420      	add	r0, r4
 8018556:	b200      	sxth	r0, r0
 8018558:	1a40      	subs	r0, r0, r1
 801855a:	e7f8      	b.n	801854e <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x20>

0801855c <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE>:
 801855c:	4b01      	ldr	r3, [pc, #4]	; (8018564 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE+0x8>)
 801855e:	2200      	movs	r2, #0
 8018560:	601a      	str	r2, [r3, #0]
 8018562:	4770      	bx	lr
 8018564:	20005814 	.word	0x20005814

08018568 <_ZN8touchgfx16TouchCalibration4clzuEm>:
 8018568:	4603      	mov	r3, r0
 801856a:	b1c8      	cbz	r0, 80185a0 <_ZN8touchgfx16TouchCalibration4clzuEm+0x38>
 801856c:	0c02      	lsrs	r2, r0, #16
 801856e:	0412      	lsls	r2, r2, #16
 8018570:	b9a2      	cbnz	r2, 801859c <_ZN8touchgfx16TouchCalibration4clzuEm+0x34>
 8018572:	0403      	lsls	r3, r0, #16
 8018574:	2010      	movs	r0, #16
 8018576:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 801857a:	bf04      	itt	eq
 801857c:	021b      	lsleq	r3, r3, #8
 801857e:	3008      	addeq	r0, #8
 8018580:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8018584:	bf04      	itt	eq
 8018586:	011b      	lsleq	r3, r3, #4
 8018588:	3004      	addeq	r0, #4
 801858a:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 801858e:	bf04      	itt	eq
 8018590:	009b      	lsleq	r3, r3, #2
 8018592:	3002      	addeq	r0, #2
 8018594:	2b00      	cmp	r3, #0
 8018596:	db04      	blt.n	80185a2 <_ZN8touchgfx16TouchCalibration4clzuEm+0x3a>
 8018598:	3001      	adds	r0, #1
 801859a:	4770      	bx	lr
 801859c:	2000      	movs	r0, #0
 801859e:	e7ea      	b.n	8018576 <_ZN8touchgfx16TouchCalibration4clzuEm+0xe>
 80185a0:	2020      	movs	r0, #32
 80185a2:	4770      	bx	lr

080185a4 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>:
 80185a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80185a8:	b087      	sub	sp, #28
 80185aa:	4681      	mov	r9, r0
 80185ac:	4698      	mov	r8, r3
 80185ae:	4610      	mov	r0, r2
 80185b0:	460d      	mov	r5, r1
 80185b2:	e9dd 4710 	ldrd	r4, r7, [sp, #64]	; 0x40
 80185b6:	b981      	cbnz	r1, 80185da <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x36>
 80185b8:	b14b      	cbz	r3, 80185ce <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x2a>
 80185ba:	460b      	mov	r3, r1
 80185bc:	464a      	mov	r2, r9
 80185be:	4641      	mov	r1, r8
 80185c0:	e9cd 4700 	strd	r4, r7, [sp]
 80185c4:	f7ff ffee 	bl	80185a4 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 80185c8:	b007      	add	sp, #28
 80185ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80185ce:	f04f 33ff 	mov.w	r3, #4294967295
 80185d2:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 80185d6:	603b      	str	r3, [r7, #0]
 80185d8:	e7f6      	b.n	80185c8 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>
 80185da:	fa32 fa01 	lsrs.w	sl, r2, r1
 80185de:	d107      	bne.n	80185f0 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x4c>
 80185e0:	fb09 f602 	mul.w	r6, r9, r2
 80185e4:	fbb6 f0f4 	udiv	r0, r6, r4
 80185e8:	fb04 6610 	mls	r6, r4, r0, r6
 80185ec:	603e      	str	r6, [r7, #0]
 80185ee:	e7eb      	b.n	80185c8 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>
 80185f0:	2601      	movs	r6, #1
 80185f2:	fa09 fb01 	lsl.w	fp, r9, r1
 80185f6:	408e      	lsls	r6, r1
 80185f8:	fbbb f3f4 	udiv	r3, fp, r4
 80185fc:	3e01      	subs	r6, #1
 80185fe:	9302      	str	r3, [sp, #8]
 8018600:	fb0a f303 	mul.w	r3, sl, r3
 8018604:	4016      	ands	r6, r2
 8018606:	9303      	str	r3, [sp, #12]
 8018608:	4630      	mov	r0, r6
 801860a:	f7ff ffad 	bl	8018568 <_ZN8touchgfx16TouchCalibration4clzuEm>
 801860e:	464a      	mov	r2, r9
 8018610:	460b      	mov	r3, r1
 8018612:	4601      	mov	r1, r0
 8018614:	4630      	mov	r0, r6
 8018616:	e9cd 4700 	strd	r4, r7, [sp]
 801861a:	f7ff ffc3 	bl	80185a4 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 801861e:	9b02      	ldr	r3, [sp, #8]
 8018620:	4606      	mov	r6, r0
 8018622:	eb05 0108 	add.w	r1, r5, r8
 8018626:	fb04 bb13 	mls	fp, r4, r3, fp
 801862a:	4658      	mov	r0, fp
 801862c:	f7ff ff9c 	bl	8018568 <_ZN8touchgfx16TouchCalibration4clzuEm>
 8018630:	ab05      	add	r3, sp, #20
 8018632:	465a      	mov	r2, fp
 8018634:	e9cd 4300 	strd	r4, r3, [sp]
 8018638:	4603      	mov	r3, r0
 801863a:	4650      	mov	r0, sl
 801863c:	f7ff ffb2 	bl	80185a4 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 8018640:	6839      	ldr	r1, [r7, #0]
 8018642:	9a05      	ldr	r2, [sp, #20]
 8018644:	9b03      	ldr	r3, [sp, #12]
 8018646:	4411      	add	r1, r2
 8018648:	fbb1 f2f4 	udiv	r2, r1, r4
 801864c:	18d3      	adds	r3, r2, r3
 801864e:	fb04 1412 	mls	r4, r4, r2, r1
 8018652:	441e      	add	r6, r3
 8018654:	603c      	str	r4, [r7, #0]
 8018656:	4430      	add	r0, r6
 8018658:	e7b6      	b.n	80185c8 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>

0801865a <_ZN8touchgfx16TouchCalibration6muldivEllllRl>:
 801865a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801865e:	b085      	sub	sp, #20
 8018660:	f1b0 0900 	subs.w	r9, r0, #0
 8018664:	461d      	mov	r5, r3
 8018666:	4617      	mov	r7, r2
 8018668:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801866a:	bfbb      	ittet	lt
 801866c:	f1c9 0900 	rsblt	r9, r9, #0
 8018670:	f04f 36ff 	movlt.w	r6, #4294967295
 8018674:	2601      	movge	r6, #1
 8018676:	6823      	ldrlt	r3, [r4, #0]
 8018678:	bfbc      	itt	lt
 801867a:	425b      	neglt	r3, r3
 801867c:	6023      	strlt	r3, [r4, #0]
 801867e:	2a00      	cmp	r2, #0
 8018680:	da04      	bge.n	801868c <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x32>
 8018682:	6823      	ldr	r3, [r4, #0]
 8018684:	4257      	negs	r7, r2
 8018686:	4276      	negs	r6, r6
 8018688:	425b      	negs	r3, r3
 801868a:	6023      	str	r3, [r4, #0]
 801868c:	2d00      	cmp	r5, #0
 801868e:	4638      	mov	r0, r7
 8018690:	bfba      	itte	lt
 8018692:	426d      	neglt	r5, r5
 8018694:	f04f 38ff 	movlt.w	r8, #4294967295
 8018698:	f04f 0801 	movge.w	r8, #1
 801869c:	f7ff ff64 	bl	8018568 <_ZN8touchgfx16TouchCalibration4clzuEm>
 80186a0:	ab03      	add	r3, sp, #12
 80186a2:	463a      	mov	r2, r7
 80186a4:	e9cd 5300 	strd	r5, r3, [sp]
 80186a8:	4603      	mov	r3, r0
 80186aa:	4648      	mov	r0, r9
 80186ac:	f7ff ff7a 	bl	80185a4 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 80186b0:	6823      	ldr	r3, [r4, #0]
 80186b2:	9a03      	ldr	r2, [sp, #12]
 80186b4:	4546      	cmp	r6, r8
 80186b6:	441a      	add	r2, r3
 80186b8:	fb92 f3f5 	sdiv	r3, r2, r5
 80186bc:	4418      	add	r0, r3
 80186be:	fb05 2313 	mls	r3, r5, r3, r2
 80186c2:	bf18      	it	ne
 80186c4:	4240      	negne	r0, r0
 80186c6:	1c72      	adds	r2, r6, #1
 80186c8:	6023      	str	r3, [r4, #0]
 80186ca:	d105      	bne.n	80186d8 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7e>
 80186cc:	2b00      	cmp	r3, #0
 80186ce:	f1c3 0200 	rsb	r2, r3, #0
 80186d2:	db0b      	blt.n	80186ec <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x92>
 80186d4:	6022      	str	r2, [r4, #0]
 80186d6:	e006      	b.n	80186e6 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 80186d8:	2e01      	cmp	r6, #1
 80186da:	d104      	bne.n	80186e6 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 80186dc:	2b00      	cmp	r3, #0
 80186de:	da02      	bge.n	80186e6 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 80186e0:	442b      	add	r3, r5
 80186e2:	3801      	subs	r0, #1
 80186e4:	6023      	str	r3, [r4, #0]
 80186e6:	b005      	add	sp, #20
 80186e8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80186ec:	3801      	subs	r0, #1
 80186ee:	1b52      	subs	r2, r2, r5
 80186f0:	e7f0      	b.n	80186d4 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7a>
	...

080186f4 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>:
 80186f4:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 80186f8:	4c1c      	ldr	r4, [pc, #112]	; (801876c <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x78>)
 80186fa:	4605      	mov	r5, r0
 80186fc:	6807      	ldr	r7, [r0, #0]
 80186fe:	69a3      	ldr	r3, [r4, #24]
 8018700:	b92b      	cbnz	r3, 801870e <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x1a>
 8018702:	6840      	ldr	r0, [r0, #4]
 8018704:	e9c5 7000 	strd	r7, r0, [r5]
 8018708:	b004      	add	sp, #16
 801870a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801870e:	f04f 0802 	mov.w	r8, #2
 8018712:	68a2      	ldr	r2, [r4, #8]
 8018714:	ae04      	add	r6, sp, #16
 8018716:	6820      	ldr	r0, [r4, #0]
 8018718:	fb93 f1f8 	sdiv	r1, r3, r8
 801871c:	440a      	add	r2, r1
 801871e:	69e1      	ldr	r1, [r4, #28]
 8018720:	f846 2d04 	str.w	r2, [r6, #-4]!
 8018724:	463a      	mov	r2, r7
 8018726:	9600      	str	r6, [sp, #0]
 8018728:	f7ff ff97 	bl	801865a <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 801872c:	69a3      	ldr	r3, [r4, #24]
 801872e:	4607      	mov	r7, r0
 8018730:	686a      	ldr	r2, [r5, #4]
 8018732:	6a21      	ldr	r1, [r4, #32]
 8018734:	9600      	str	r6, [sp, #0]
 8018736:	6860      	ldr	r0, [r4, #4]
 8018738:	f7ff ff8f 	bl	801865a <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 801873c:	69a3      	ldr	r3, [r4, #24]
 801873e:	6962      	ldr	r2, [r4, #20]
 8018740:	4407      	add	r7, r0
 8018742:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8018744:	9600      	str	r6, [sp, #0]
 8018746:	68e0      	ldr	r0, [r4, #12]
 8018748:	fb93 f8f8 	sdiv	r8, r3, r8
 801874c:	4442      	add	r2, r8
 801874e:	9203      	str	r2, [sp, #12]
 8018750:	682a      	ldr	r2, [r5, #0]
 8018752:	f7ff ff82 	bl	801865a <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 8018756:	4680      	mov	r8, r0
 8018758:	9600      	str	r6, [sp, #0]
 801875a:	69a3      	ldr	r3, [r4, #24]
 801875c:	686a      	ldr	r2, [r5, #4]
 801875e:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8018760:	6920      	ldr	r0, [r4, #16]
 8018762:	f7ff ff7a 	bl	801865a <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 8018766:	4440      	add	r0, r8
 8018768:	e7cc      	b.n	8018704 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x10>
 801876a:	bf00      	nop
 801876c:	20005818 	.word	0x20005818

08018770 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>:
 8018770:	4b07      	ldr	r3, [pc, #28]	; (8018790 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x20>)
 8018772:	b510      	push	{r4, lr}
 8018774:	781b      	ldrb	r3, [r3, #0]
 8018776:	2b01      	cmp	r3, #1
 8018778:	d108      	bne.n	801878c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x1c>
 801877a:	4b06      	ldr	r3, [pc, #24]	; (8018794 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x24>)
 801877c:	880c      	ldrh	r4, [r1, #0]
 801877e:	881b      	ldrh	r3, [r3, #0]
 8018780:	f9b0 2000 	ldrsh.w	r2, [r0]
 8018784:	3b01      	subs	r3, #1
 8018786:	1b1b      	subs	r3, r3, r4
 8018788:	8003      	strh	r3, [r0, #0]
 801878a:	800a      	strh	r2, [r1, #0]
 801878c:	bd10      	pop	{r4, pc}
 801878e:	bf00      	nop
 8018790:	20005804 	.word	0x20005804
 8018794:	20005808 	.word	0x20005808

08018798 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>:
 8018798:	4b0a      	ldr	r3, [pc, #40]	; (80187c4 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x2c>)
 801879a:	b510      	push	{r4, lr}
 801879c:	781b      	ldrb	r3, [r3, #0]
 801879e:	2b01      	cmp	r3, #1
 80187a0:	d10e      	bne.n	80187c0 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x28>
 80187a2:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 80187a6:	8843      	ldrh	r3, [r0, #2]
 80187a8:	f9b0 4000 	ldrsh.w	r4, [r0]
 80187ac:	18ca      	adds	r2, r1, r3
 80187ae:	4b06      	ldr	r3, [pc, #24]	; (80187c8 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x30>)
 80187b0:	8044      	strh	r4, [r0, #2]
 80187b2:	881b      	ldrh	r3, [r3, #0]
 80187b4:	1a9b      	subs	r3, r3, r2
 80187b6:	8003      	strh	r3, [r0, #0]
 80187b8:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 80187bc:	8081      	strh	r1, [r0, #4]
 80187be:	80c3      	strh	r3, [r0, #6]
 80187c0:	bd10      	pop	{r4, pc}
 80187c2:	bf00      	nop
 80187c4:	20005804 	.word	0x20005804
 80187c8:	20005800 	.word	0x20005800

080187cc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>:
 80187cc:	4b07      	ldr	r3, [pc, #28]	; (80187ec <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x20>)
 80187ce:	b510      	push	{r4, lr}
 80187d0:	781b      	ldrb	r3, [r3, #0]
 80187d2:	2b01      	cmp	r3, #1
 80187d4:	d108      	bne.n	80187e8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x1c>
 80187d6:	f9b1 3000 	ldrsh.w	r3, [r1]
 80187da:	f9b0 4000 	ldrsh.w	r4, [r0]
 80187de:	8003      	strh	r3, [r0, #0]
 80187e0:	8893      	ldrh	r3, [r2, #4]
 80187e2:	3b01      	subs	r3, #1
 80187e4:	1b1b      	subs	r3, r3, r4
 80187e6:	800b      	strh	r3, [r1, #0]
 80187e8:	bd10      	pop	{r4, pc}
 80187ea:	bf00      	nop
 80187ec:	20005804 	.word	0x20005804

080187f0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>:
 80187f0:	4b08      	ldr	r3, [pc, #32]	; (8018814 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x24>)
 80187f2:	b513      	push	{r0, r1, r4, lr}
 80187f4:	f9b3 2000 	ldrsh.w	r2, [r3]
 80187f8:	2400      	movs	r4, #0
 80187fa:	4b07      	ldr	r3, [pc, #28]	; (8018818 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x28>)
 80187fc:	f8ad 2004 	strh.w	r2, [sp, #4]
 8018800:	466a      	mov	r2, sp
 8018802:	f9b3 3000 	ldrsh.w	r3, [r3]
 8018806:	9400      	str	r4, [sp, #0]
 8018808:	f8ad 3006 	strh.w	r3, [sp, #6]
 801880c:	f7ff ffde 	bl	80187cc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>
 8018810:	b002      	add	sp, #8
 8018812:	bd10      	pop	{r4, pc}
 8018814:	20005800 	.word	0x20005800
 8018818:	20005802 	.word	0x20005802

0801881c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>:
 801881c:	4b0a      	ldr	r3, [pc, #40]	; (8018848 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x2c>)
 801881e:	460a      	mov	r2, r1
 8018820:	b510      	push	{r4, lr}
 8018822:	781b      	ldrb	r3, [r3, #0]
 8018824:	2b01      	cmp	r3, #1
 8018826:	d10d      	bne.n	8018844 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x28>
 8018828:	8881      	ldrh	r1, [r0, #4]
 801882a:	8803      	ldrh	r3, [r0, #0]
 801882c:	440b      	add	r3, r1
 801882e:	4601      	mov	r1, r0
 8018830:	3b01      	subs	r3, #1
 8018832:	f821 3b02 	strh.w	r3, [r1], #2
 8018836:	f7ff ffc9 	bl	80187cc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>
 801883a:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 801883e:	88c2      	ldrh	r2, [r0, #6]
 8018840:	80c3      	strh	r3, [r0, #6]
 8018842:	8082      	strh	r2, [r0, #4]
 8018844:	bd10      	pop	{r4, pc}
 8018846:	bf00      	nop
 8018848:	20005804 	.word	0x20005804

0801884c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>:
 801884c:	4b09      	ldr	r3, [pc, #36]	; (8018874 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x28>)
 801884e:	b507      	push	{r0, r1, r2, lr}
 8018850:	2100      	movs	r1, #0
 8018852:	f9b3 2000 	ldrsh.w	r2, [r3]
 8018856:	4b08      	ldr	r3, [pc, #32]	; (8018878 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x2c>)
 8018858:	9100      	str	r1, [sp, #0]
 801885a:	4669      	mov	r1, sp
 801885c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8018860:	f8ad 2004 	strh.w	r2, [sp, #4]
 8018864:	f8ad 3006 	strh.w	r3, [sp, #6]
 8018868:	f7ff ffd8 	bl	801881c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801886c:	b003      	add	sp, #12
 801886e:	f85d fb04 	ldr.w	pc, [sp], #4
 8018872:	bf00      	nop
 8018874:	20005800 	.word	0x20005800
 8018878:	20005802 	.word	0x20005802

0801887c <_ZN8touchgfx11Application13requestRedrawEv>:
 801887c:	4b06      	ldr	r3, [pc, #24]	; (8018898 <_ZN8touchgfx11Application13requestRedrawEv+0x1c>)
 801887e:	2100      	movs	r1, #0
 8018880:	f9b3 2000 	ldrsh.w	r2, [r3]
 8018884:	4b05      	ldr	r3, [pc, #20]	; (801889c <_ZN8touchgfx11Application13requestRedrawEv+0x20>)
 8018886:	f8c0 112c 	str.w	r1, [r0, #300]	; 0x12c
 801888a:	f9b3 3000 	ldrsh.w	r3, [r3]
 801888e:	f8a0 2130 	strh.w	r2, [r0, #304]	; 0x130
 8018892:	f8a0 3132 	strh.w	r3, [r0, #306]	; 0x132
 8018896:	4770      	bx	lr
 8018898:	20005800 	.word	0x20005800
 801889c:	20005802 	.word	0x20005802

080188a0 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE>:
 80188a0:	4b03      	ldr	r3, [pc, #12]	; (80188b0 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0x10>)
 80188a2:	6818      	ldr	r0, [r3, #0]
 80188a4:	b110      	cbz	r0, 80188ac <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0xc>
 80188a6:	6803      	ldr	r3, [r0, #0]
 80188a8:	699b      	ldr	r3, [r3, #24]
 80188aa:	4718      	bx	r3
 80188ac:	4770      	bx	lr
 80188ae:	bf00      	nop
 80188b0:	20005848 	.word	0x20005848

080188b4 <_ZN8touchgfx11Application29handlePendingScreenTransitionEv>:
 80188b4:	4770      	bx	lr
	...

080188b8 <_ZN8touchgfx11Application4drawEv>:
 80188b8:	4b09      	ldr	r3, [pc, #36]	; (80188e0 <_ZN8touchgfx11Application4drawEv+0x28>)
 80188ba:	b507      	push	{r0, r1, r2, lr}
 80188bc:	f9b3 2000 	ldrsh.w	r2, [r3]
 80188c0:	2100      	movs	r1, #0
 80188c2:	4b08      	ldr	r3, [pc, #32]	; (80188e4 <_ZN8touchgfx11Application4drawEv+0x2c>)
 80188c4:	9100      	str	r1, [sp, #0]
 80188c6:	4669      	mov	r1, sp
 80188c8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80188cc:	f8ad 2004 	strh.w	r2, [sp, #4]
 80188d0:	f8ad 3006 	strh.w	r3, [sp, #6]
 80188d4:	6803      	ldr	r3, [r0, #0]
 80188d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80188d8:	4798      	blx	r3
 80188da:	b003      	add	sp, #12
 80188dc:	f85d fb04 	ldr.w	pc, [sp], #4
 80188e0:	20005800 	.word	0x20005800
 80188e4:	20005802 	.word	0x20005802

080188e8 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE>:
 80188e8:	4b03      	ldr	r3, [pc, #12]	; (80188f8 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0x10>)
 80188ea:	6818      	ldr	r0, [r3, #0]
 80188ec:	b110      	cbz	r0, 80188f4 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0xc>
 80188ee:	6803      	ldr	r3, [r0, #0]
 80188f0:	69db      	ldr	r3, [r3, #28]
 80188f2:	4718      	bx	r3
 80188f4:	4770      	bx	lr
 80188f6:	bf00      	nop
 80188f8:	20005848 	.word	0x20005848

080188fc <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE>:
 80188fc:	4b03      	ldr	r3, [pc, #12]	; (801890c <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0x10>)
 80188fe:	6818      	ldr	r0, [r3, #0]
 8018900:	b110      	cbz	r0, 8018908 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0xc>
 8018902:	6803      	ldr	r3, [r0, #0]
 8018904:	6a1b      	ldr	r3, [r3, #32]
 8018906:	4718      	bx	r3
 8018908:	4770      	bx	lr
 801890a:	bf00      	nop
 801890c:	20005848 	.word	0x20005848

08018910 <_ZN8touchgfx11Application14handleKeyEventEh>:
 8018910:	4b03      	ldr	r3, [pc, #12]	; (8018920 <_ZN8touchgfx11Application14handleKeyEventEh+0x10>)
 8018912:	6818      	ldr	r0, [r3, #0]
 8018914:	b110      	cbz	r0, 801891c <_ZN8touchgfx11Application14handleKeyEventEh+0xc>
 8018916:	6803      	ldr	r3, [r0, #0]
 8018918:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801891a:	4718      	bx	r3
 801891c:	4770      	bx	lr
 801891e:	bf00      	nop
 8018920:	20005848 	.word	0x20005848

08018924 <_ZN8touchgfx11Application15handleTickEventEv>:
 8018924:	b570      	push	{r4, r5, r6, lr}
 8018926:	4d34      	ldr	r5, [pc, #208]	; (80189f8 <_ZN8touchgfx11Application15handleTickEventEv+0xd4>)
 8018928:	4604      	mov	r4, r0
 801892a:	6828      	ldr	r0, [r5, #0]
 801892c:	b140      	cbz	r0, 8018940 <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 801892e:	7a03      	ldrb	r3, [r0, #8]
 8018930:	b933      	cbnz	r3, 8018940 <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 8018932:	f884 3135 	strb.w	r3, [r4, #309]	; 0x135
 8018936:	6803      	ldr	r3, [r0, #0]
 8018938:	689b      	ldr	r3, [r3, #8]
 801893a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801893e:	4718      	bx	r3
 8018940:	f894 3135 	ldrb.w	r3, [r4, #309]	; 0x135
 8018944:	b97b      	cbnz	r3, 8018966 <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 8018946:	b170      	cbz	r0, 8018966 <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 8018948:	7a03      	ldrb	r3, [r0, #8]
 801894a:	b163      	cbz	r3, 8018966 <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 801894c:	4b2b      	ldr	r3, [pc, #172]	; (80189fc <_ZN8touchgfx11Application15handleTickEventEv+0xd8>)
 801894e:	6818      	ldr	r0, [r3, #0]
 8018950:	b110      	cbz	r0, 8018958 <_ZN8touchgfx11Application15handleTickEventEv+0x34>
 8018952:	6803      	ldr	r3, [r0, #0]
 8018954:	691b      	ldr	r3, [r3, #16]
 8018956:	4798      	blx	r3
 8018958:	6828      	ldr	r0, [r5, #0]
 801895a:	6803      	ldr	r3, [r0, #0]
 801895c:	68db      	ldr	r3, [r3, #12]
 801895e:	4798      	blx	r3
 8018960:	2301      	movs	r3, #1
 8018962:	f884 3135 	strb.w	r3, [r4, #309]	; 0x135
 8018966:	2500      	movs	r5, #0
 8018968:	f8b4 0084 	ldrh.w	r0, [r4, #132]	; 0x84
 801896c:	42a8      	cmp	r0, r5
 801896e:	dd0c      	ble.n	801898a <_ZN8touchgfx11Application15handleTickEventEv+0x66>
 8018970:	1963      	adds	r3, r4, r5
 8018972:	f893 2088 	ldrb.w	r2, [r3, #136]	; 0x88
 8018976:	b132      	cbz	r2, 8018986 <_ZN8touchgfx11Application15handleTickEventEv+0x62>
 8018978:	eb05 0245 	add.w	r2, r5, r5, lsl #1
 801897c:	4413      	add	r3, r2
 801897e:	6858      	ldr	r0, [r3, #4]
 8018980:	6803      	ldr	r3, [r0, #0]
 8018982:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8018984:	4798      	blx	r3
 8018986:	3501      	adds	r5, #1
 8018988:	e7ee      	b.n	8018968 <_ZN8touchgfx11Application15handleTickEventEv+0x44>
 801898a:	2300      	movs	r3, #0
 801898c:	461a      	mov	r2, r3
 801898e:	4298      	cmp	r0, r3
 8018990:	d114      	bne.n	80189bc <_ZN8touchgfx11Application15handleTickEventEv+0x98>
 8018992:	1d25      	adds	r5, r4, #4
 8018994:	f8b4 1084 	ldrh.w	r1, [r4, #132]	; 0x84
 8018998:	1e48      	subs	r0, r1, #1
 801899a:	b280      	uxth	r0, r0
 801899c:	4291      	cmp	r1, r2
 801899e:	dd24      	ble.n	80189ea <_ZN8touchgfx11Application15handleTickEventEv+0xc6>
 80189a0:	4288      	cmp	r0, r1
 80189a2:	d2fb      	bcs.n	801899c <_ZN8touchgfx11Application15handleTickEventEv+0x78>
 80189a4:	eb04 0380 	add.w	r3, r4, r0, lsl #2
 80189a8:	eb05 0181 	add.w	r1, r5, r1, lsl #2
 80189ac:	3304      	adds	r3, #4
 80189ae:	428b      	cmp	r3, r1
 80189b0:	d018      	beq.n	80189e4 <_ZN8touchgfx11Application15handleTickEventEv+0xc0>
 80189b2:	f853 6f04 	ldr.w	r6, [r3, #4]!
 80189b6:	f843 6c04 	str.w	r6, [r3, #-4]
 80189ba:	e7f8      	b.n	80189ae <_ZN8touchgfx11Application15handleTickEventEv+0x8a>
 80189bc:	18e1      	adds	r1, r4, r3
 80189be:	f891 5088 	ldrb.w	r5, [r1, #136]	; 0x88
 80189c2:	b16d      	cbz	r5, 80189e0 <_ZN8touchgfx11Application15handleTickEventEv+0xbc>
 80189c4:	429a      	cmp	r2, r3
 80189c6:	d00a      	beq.n	80189de <_ZN8touchgfx11Application15handleTickEventEv+0xba>
 80189c8:	eb03 0643 	add.w	r6, r3, r3, lsl #1
 80189cc:	4431      	add	r1, r6
 80189ce:	684e      	ldr	r6, [r1, #4]
 80189d0:	b291      	uxth	r1, r2
 80189d2:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 80189d6:	604e      	str	r6, [r1, #4]
 80189d8:	18a1      	adds	r1, r4, r2
 80189da:	f881 5088 	strb.w	r5, [r1, #136]	; 0x88
 80189de:	3201      	adds	r2, #1
 80189e0:	3301      	adds	r3, #1
 80189e2:	e7d4      	b.n	801898e <_ZN8touchgfx11Application15handleTickEventEv+0x6a>
 80189e4:	f8a4 0084 	strh.w	r0, [r4, #132]	; 0x84
 80189e8:	e7d4      	b.n	8018994 <_ZN8touchgfx11Application15handleTickEventEv+0x70>
 80189ea:	4b04      	ldr	r3, [pc, #16]	; (80189fc <_ZN8touchgfx11Application15handleTickEventEv+0xd8>)
 80189ec:	6818      	ldr	r0, [r3, #0]
 80189ee:	b110      	cbz	r0, 80189f6 <_ZN8touchgfx11Application15handleTickEventEv+0xd2>
 80189f0:	6803      	ldr	r3, [r0, #0]
 80189f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80189f4:	e7a1      	b.n	801893a <_ZN8touchgfx11Application15handleTickEventEv+0x16>
 80189f6:	bd70      	pop	{r4, r5, r6, pc}
 80189f8:	2000584c 	.word	0x2000584c
 80189fc:	20005848 	.word	0x20005848

08018a00 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE>:
 8018a00:	b570      	push	{r4, r5, r6, lr}
 8018a02:	4606      	mov	r6, r0
 8018a04:	460c      	mov	r4, r1
 8018a06:	b929      	cbnz	r1, 8018a14 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x14>
 8018a08:	4b0c      	ldr	r3, [pc, #48]	; (8018a3c <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x3c>)
 8018a0a:	2164      	movs	r1, #100	; 0x64
 8018a0c:	4a0c      	ldr	r2, [pc, #48]	; (8018a40 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x40>)
 8018a0e:	480d      	ldr	r0, [pc, #52]	; (8018a44 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x44>)
 8018a10:	f00e fb8a 	bl	8027128 <__assert_func>
 8018a14:	2300      	movs	r3, #0
 8018a16:	4d0c      	ldr	r5, [pc, #48]	; (8018a48 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x48>)
 8018a18:	f8a0 3084 	strh.w	r3, [r0, #132]	; 0x84
 8018a1c:	6828      	ldr	r0, [r5, #0]
 8018a1e:	b110      	cbz	r0, 8018a26 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x26>
 8018a20:	6803      	ldr	r3, [r0, #0]
 8018a22:	695b      	ldr	r3, [r3, #20]
 8018a24:	4798      	blx	r3
 8018a26:	602c      	str	r4, [r5, #0]
 8018a28:	4620      	mov	r0, r4
 8018a2a:	6823      	ldr	r3, [r4, #0]
 8018a2c:	68db      	ldr	r3, [r3, #12]
 8018a2e:	4798      	blx	r3
 8018a30:	6833      	ldr	r3, [r6, #0]
 8018a32:	4630      	mov	r0, r6
 8018a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018a36:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8018a3a:	4718      	bx	r3
 8018a3c:	0802ab70 	.word	0x0802ab70
 8018a40:	0802ac40 	.word	0x0802ac40
 8018a44:	0802ab7a 	.word	0x0802ab7a
 8018a48:	20005848 	.word	0x20005848

08018a4c <_ZNK8touchgfx4Rect9intersectERKS0_>:
 8018a4c:	b510      	push	{r4, lr}
 8018a4e:	f9b1 4000 	ldrsh.w	r4, [r1]
 8018a52:	888a      	ldrh	r2, [r1, #4]
 8018a54:	f9b0 3000 	ldrsh.w	r3, [r0]
 8018a58:	4422      	add	r2, r4
 8018a5a:	b212      	sxth	r2, r2
 8018a5c:	4293      	cmp	r3, r2
 8018a5e:	da15      	bge.n	8018a8c <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 8018a60:	8882      	ldrh	r2, [r0, #4]
 8018a62:	4413      	add	r3, r2
 8018a64:	b21b      	sxth	r3, r3
 8018a66:	429c      	cmp	r4, r3
 8018a68:	da10      	bge.n	8018a8c <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 8018a6a:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 8018a6e:	88c9      	ldrh	r1, [r1, #6]
 8018a70:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 8018a74:	4419      	add	r1, r3
 8018a76:	b209      	sxth	r1, r1
 8018a78:	428a      	cmp	r2, r1
 8018a7a:	da07      	bge.n	8018a8c <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 8018a7c:	88c0      	ldrh	r0, [r0, #6]
 8018a7e:	4410      	add	r0, r2
 8018a80:	b200      	sxth	r0, r0
 8018a82:	4283      	cmp	r3, r0
 8018a84:	bfac      	ite	ge
 8018a86:	2000      	movge	r0, #0
 8018a88:	2001      	movlt	r0, #1
 8018a8a:	bd10      	pop	{r4, pc}
 8018a8c:	2000      	movs	r0, #0
 8018a8e:	e7fc      	b.n	8018a8a <_ZNK8touchgfx4Rect9intersectERKS0_+0x3e>

08018a90 <_ZNK8touchgfx4Rect8includesERKS0_>:
 8018a90:	b570      	push	{r4, r5, r6, lr}
 8018a92:	f9b1 4000 	ldrsh.w	r4, [r1]
 8018a96:	f9b0 5000 	ldrsh.w	r5, [r0]
 8018a9a:	42ac      	cmp	r4, r5
 8018a9c:	db18      	blt.n	8018ad0 <_ZNK8touchgfx4Rect8includesERKS0_+0x40>
 8018a9e:	f9b1 2002 	ldrsh.w	r2, [r1, #2]
 8018aa2:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 8018aa6:	429a      	cmp	r2, r3
 8018aa8:	db12      	blt.n	8018ad0 <_ZNK8touchgfx4Rect8includesERKS0_+0x40>
 8018aaa:	8886      	ldrh	r6, [r0, #4]
 8018aac:	4435      	add	r5, r6
 8018aae:	888e      	ldrh	r6, [r1, #4]
 8018ab0:	4434      	add	r4, r6
 8018ab2:	b22d      	sxth	r5, r5
 8018ab4:	b224      	sxth	r4, r4
 8018ab6:	42a5      	cmp	r5, r4
 8018ab8:	db0a      	blt.n	8018ad0 <_ZNK8touchgfx4Rect8includesERKS0_+0x40>
 8018aba:	88c0      	ldrh	r0, [r0, #6]
 8018abc:	4418      	add	r0, r3
 8018abe:	88cb      	ldrh	r3, [r1, #6]
 8018ac0:	441a      	add	r2, r3
 8018ac2:	b200      	sxth	r0, r0
 8018ac4:	b212      	sxth	r2, r2
 8018ac6:	4290      	cmp	r0, r2
 8018ac8:	bfb4      	ite	lt
 8018aca:	2000      	movlt	r0, #0
 8018acc:	2001      	movge	r0, #1
 8018ace:	bd70      	pop	{r4, r5, r6, pc}
 8018ad0:	2000      	movs	r0, #0
 8018ad2:	e7fc      	b.n	8018ace <_ZNK8touchgfx4Rect8includesERKS0_+0x3e>

08018ad4 <_ZN8touchgfx4Rect11expandToFitERKS0_>:
 8018ad4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018ad6:	4604      	mov	r4, r0
 8018ad8:	4608      	mov	r0, r1
 8018ada:	460d      	mov	r5, r1
 8018adc:	f7fc fd05 	bl	80154ea <_ZNK8touchgfx4Rect7isEmptyEv>
 8018ae0:	b978      	cbnz	r0, 8018b02 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
 8018ae2:	4620      	mov	r0, r4
 8018ae4:	f7fc fd01 	bl	80154ea <_ZNK8touchgfx4Rect7isEmptyEv>
 8018ae8:	f9b5 6000 	ldrsh.w	r6, [r5]
 8018aec:	b150      	cbz	r0, 8018b04 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x30>
 8018aee:	8026      	strh	r6, [r4, #0]
 8018af0:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 8018af4:	8063      	strh	r3, [r4, #2]
 8018af6:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 8018afa:	80a3      	strh	r3, [r4, #4]
 8018afc:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 8018b00:	80e3      	strh	r3, [r4, #6]
 8018b02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018b04:	f9b4 1000 	ldrsh.w	r1, [r4]
 8018b08:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 8018b0c:	42b1      	cmp	r1, r6
 8018b0e:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
 8018b12:	f8b5 c004 	ldrh.w	ip, [r5, #4]
 8018b16:	460f      	mov	r7, r1
 8018b18:	88ed      	ldrh	r5, [r5, #6]
 8018b1a:	bfa8      	it	ge
 8018b1c:	4637      	movge	r7, r6
 8018b1e:	4293      	cmp	r3, r2
 8018b20:	4618      	mov	r0, r3
 8018b22:	4466      	add	r6, ip
 8018b24:	f8b4 c004 	ldrh.w	ip, [r4, #4]
 8018b28:	bfa8      	it	ge
 8018b2a:	4610      	movge	r0, r2
 8018b2c:	442a      	add	r2, r5
 8018b2e:	88e5      	ldrh	r5, [r4, #6]
 8018b30:	4461      	add	r1, ip
 8018b32:	b236      	sxth	r6, r6
 8018b34:	8027      	strh	r7, [r4, #0]
 8018b36:	442b      	add	r3, r5
 8018b38:	b209      	sxth	r1, r1
 8018b3a:	b212      	sxth	r2, r2
 8018b3c:	8060      	strh	r0, [r4, #2]
 8018b3e:	b21b      	sxth	r3, r3
 8018b40:	428e      	cmp	r6, r1
 8018b42:	bfac      	ite	ge
 8018b44:	ebc7 0106 	rsbge	r1, r7, r6
 8018b48:	ebc7 0101 	rsblt	r1, r7, r1
 8018b4c:	429a      	cmp	r2, r3
 8018b4e:	bfac      	ite	ge
 8018b50:	ebc0 0202 	rsbge	r2, r0, r2
 8018b54:	ebc0 0203 	rsblt	r2, r0, r3
 8018b58:	80a1      	strh	r1, [r4, #4]
 8018b5a:	80e2      	strh	r2, [r4, #6]
 8018b5c:	e7d1      	b.n	8018b02 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
	...

08018b60 <_ZN8touchgfx11Application11getInstanceEv>:
 8018b60:	4b01      	ldr	r3, [pc, #4]	; (8018b68 <_ZN8touchgfx11Application11getInstanceEv+0x8>)
 8018b62:	6818      	ldr	r0, [r3, #0]
 8018b64:	4770      	bx	lr
 8018b66:	bf00      	nop
 8018b68:	20005858 	.word	0x20005858

08018b6c <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>:
 8018b6c:	2300      	movs	r3, #0
 8018b6e:	f100 0288 	add.w	r2, r0, #136	; 0x88
 8018b72:	30a8      	adds	r0, #168	; 0xa8
 8018b74:	f820 3c24 	strh.w	r3, [r0, #-36]
 8018b78:	f802 3b01 	strb.w	r3, [r2], #1
 8018b7c:	4282      	cmp	r2, r0
 8018b7e:	d1fb      	bne.n	8018b78 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv+0xc>
 8018b80:	4770      	bx	lr

08018b82 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>:
 8018b82:	4603      	mov	r3, r0
 8018b84:	f100 0140 	add.w	r1, r0, #64	; 0x40
 8018b88:	2200      	movs	r2, #0
 8018b8a:	801a      	strh	r2, [r3, #0]
 8018b8c:	3308      	adds	r3, #8
 8018b8e:	f823 2c06 	strh.w	r2, [r3, #-6]
 8018b92:	f823 2c04 	strh.w	r2, [r3, #-4]
 8018b96:	f823 2c02 	strh.w	r2, [r3, #-2]
 8018b9a:	428b      	cmp	r3, r1
 8018b9c:	d1f5      	bne.n	8018b8a <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev+0x8>
 8018b9e:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40
 8018ba2:	4770      	bx	lr

08018ba4 <_ZN8touchgfx11ApplicationC1Ev>:
 8018ba4:	b570      	push	{r4, r5, r6, lr}
 8018ba6:	4b1a      	ldr	r3, [pc, #104]	; (8018c10 <_ZN8touchgfx11ApplicationC1Ev+0x6c>)
 8018ba8:	2500      	movs	r5, #0
 8018baa:	4604      	mov	r4, r0
 8018bac:	30a8      	adds	r0, #168	; 0xa8
 8018bae:	f840 3ca8 	str.w	r3, [r0, #-168]
 8018bb2:	f820 5c24 	strh.w	r5, [r0, #-36]
 8018bb6:	f7ff ffe4 	bl	8018b82 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 8018bba:	f104 00ea 	add.w	r0, r4, #234	; 0xea
 8018bbe:	f7ff ffe0 	bl	8018b82 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 8018bc2:	f8a4 512c 	strh.w	r5, [r4, #300]	; 0x12c
 8018bc6:	f8a4 512e 	strh.w	r5, [r4, #302]	; 0x12e
 8018bca:	f8a4 5130 	strh.w	r5, [r4, #304]	; 0x130
 8018bce:	f8a4 5132 	strh.w	r5, [r4, #306]	; 0x132
 8018bd2:	f884 5134 	strb.w	r5, [r4, #308]	; 0x134
 8018bd6:	f884 5135 	strb.w	r5, [r4, #309]	; 0x135
 8018bda:	490e      	ldr	r1, [pc, #56]	; (8018c14 <_ZN8touchgfx11ApplicationC1Ev+0x70>)
 8018bdc:	480e      	ldr	r0, [pc, #56]	; (8018c18 <_ZN8touchgfx11ApplicationC1Ev+0x74>)
 8018bde:	f00e f96d 	bl	8026ebc <CRC_Lock>
 8018be2:	4e0e      	ldr	r6, [pc, #56]	; (8018c1c <_ZN8touchgfx11ApplicationC1Ev+0x78>)
 8018be4:	4b0e      	ldr	r3, [pc, #56]	; (8018c20 <_ZN8touchgfx11ApplicationC1Ev+0x7c>)
 8018be6:	b158      	cbz	r0, 8018c00 <_ZN8touchgfx11ApplicationC1Ev+0x5c>
 8018be8:	801d      	strh	r5, [r3, #0]
 8018bea:	2300      	movs	r3, #0
 8018bec:	4a0d      	ldr	r2, [pc, #52]	; (8018c24 <_ZN8touchgfx11ApplicationC1Ev+0x80>)
 8018bee:	4620      	mov	r0, r4
 8018bf0:	6013      	str	r3, [r2, #0]
 8018bf2:	4a0d      	ldr	r2, [pc, #52]	; (8018c28 <_ZN8touchgfx11ApplicationC1Ev+0x84>)
 8018bf4:	6033      	str	r3, [r6, #0]
 8018bf6:	6013      	str	r3, [r2, #0]
 8018bf8:	f7ff ffb8 	bl	8018b6c <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
 8018bfc:	4620      	mov	r0, r4
 8018bfe:	bd70      	pop	{r4, r5, r6, pc}
 8018c00:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8018c04:	2002      	movs	r0, #2
 8018c06:	801a      	strh	r2, [r3, #0]
 8018c08:	6030      	str	r0, [r6, #0]
 8018c0a:	f001 fa77 	bl	801a0fc <_ZN8touchgfx6Screen4drawEv>
 8018c0e:	e7ec      	b.n	8018bea <_ZN8touchgfx11ApplicationC1Ev+0x46>
 8018c10:	0802ac04 	.word	0x0802ac04
 8018c14:	b5e8b5cd 	.word	0xb5e8b5cd
 8018c18:	f407a5c2 	.word	0xf407a5c2
 8018c1c:	20005848 	.word	0x20005848
 8018c20:	20000174 	.word	0x20000174
 8018c24:	20005858 	.word	0x20005858
 8018c28:	2000584c 	.word	0x2000584c

08018c2c <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>:
 8018c2c:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 8018c30:	428b      	cmp	r3, r1
 8018c32:	b510      	push	{r4, lr}
 8018c34:	d90e      	bls.n	8018c54 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x28>
 8018c36:	3b01      	subs	r3, #1
 8018c38:	b29b      	uxth	r3, r3
 8018c3a:	428b      	cmp	r3, r1
 8018c3c:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
 8018c40:	d908      	bls.n	8018c54 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x28>
 8018c42:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 8018c46:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
 8018c4a:	681a      	ldr	r2, [r3, #0]
 8018c4c:	f840 2031 	str.w	r2, [r0, r1, lsl #3]
 8018c50:	685a      	ldr	r2, [r3, #4]
 8018c52:	6062      	str	r2, [r4, #4]
 8018c54:	bd10      	pop	{r4, pc}
	...

08018c58 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>:
 8018c58:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8018c5a:	466b      	mov	r3, sp
 8018c5c:	4604      	mov	r4, r0
 8018c5e:	e883 0006 	stmia.w	r3, {r1, r2}
 8018c62:	f8b0 2040 	ldrh.w	r2, [r0, #64]	; 0x40
 8018c66:	2a07      	cmp	r2, #7
 8018c68:	d906      	bls.n	8018c78 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x20>
 8018c6a:	4b09      	ldr	r3, [pc, #36]	; (8018c90 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x38>)
 8018c6c:	f240 118f 	movw	r1, #399	; 0x18f
 8018c70:	4a08      	ldr	r2, [pc, #32]	; (8018c94 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x3c>)
 8018c72:	4809      	ldr	r0, [pc, #36]	; (8018c98 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x40>)
 8018c74:	f00e fa58 	bl	8027128 <__assert_func>
 8018c78:	1c51      	adds	r1, r2, #1
 8018c7a:	eb00 05c2 	add.w	r5, r0, r2, lsl #3
 8018c7e:	f8a0 1040 	strh.w	r1, [r0, #64]	; 0x40
 8018c82:	cb03      	ldmia	r3!, {r0, r1}
 8018c84:	f844 0032 	str.w	r0, [r4, r2, lsl #3]
 8018c88:	6069      	str	r1, [r5, #4]
 8018c8a:	b003      	add	sp, #12
 8018c8c:	bd30      	pop	{r4, r5, pc}
 8018c8e:	bf00      	nop
 8018c90:	0802aba4 	.word	0x0802aba4
 8018c94:	0802ac84 	.word	0x0802ac84
 8018c98:	0802abd3 	.word	0x0802abd3

08018c9c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>:
 8018c9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018ca0:	b08d      	sub	sp, #52	; 0x34
 8018ca2:	4683      	mov	fp, r0
 8018ca4:	ac08      	add	r4, sp, #32
 8018ca6:	4620      	mov	r0, r4
 8018ca8:	e884 0006 	stmia.w	r4, {r1, r2}
 8018cac:	f7fc fc1d 	bl	80154ea <_ZNK8touchgfx4Rect7isEmptyEv>
 8018cb0:	2800      	cmp	r0, #0
 8018cb2:	d16a      	bne.n	8018d8a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xee>
 8018cb4:	9402      	str	r4, [sp, #8]
 8018cb6:	f8bb 50e8 	ldrh.w	r5, [fp, #232]	; 0xe8
 8018cba:	f10b 03a8 	add.w	r3, fp, #168	; 0xa8
 8018cbe:	2400      	movs	r4, #0
 8018cc0:	eb0b 06c5 	add.w	r6, fp, r5, lsl #3
 8018cc4:	9301      	str	r3, [sp, #4]
 8018cc6:	36a0      	adds	r6, #160	; 0xa0
 8018cc8:	42a5      	cmp	r5, r4
 8018cca:	d00d      	beq.n	8018ce8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4c>
 8018ccc:	eba6 01c4 	sub.w	r1, r6, r4, lsl #3
 8018cd0:	9802      	ldr	r0, [sp, #8]
 8018cd2:	f7ff fedd 	bl	8018a90 <_ZNK8touchgfx4Rect8includesERKS0_>
 8018cd6:	b128      	cbz	r0, 8018ce4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x48>
 8018cd8:	1e69      	subs	r1, r5, #1
 8018cda:	9801      	ldr	r0, [sp, #4]
 8018cdc:	1b09      	subs	r1, r1, r4
 8018cde:	b289      	uxth	r1, r1
 8018ce0:	f7ff ffa4 	bl	8018c2c <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8018ce4:	3401      	adds	r4, #1
 8018ce6:	e7ef      	b.n	8018cc8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 8018ce8:	f8bb 70e8 	ldrh.w	r7, [fp, #232]	; 0xe8
 8018cec:	1e7b      	subs	r3, r7, #1
 8018cee:	eb0b 0ac7 	add.w	sl, fp, r7, lsl #3
 8018cf2:	9703      	str	r7, [sp, #12]
 8018cf4:	9300      	str	r3, [sp, #0]
 8018cf6:	2400      	movs	r4, #0
 8018cf8:	4655      	mov	r5, sl
 8018cfa:	9704      	str	r7, [sp, #16]
 8018cfc:	4626      	mov	r6, r4
 8018cfe:	9b04      	ldr	r3, [sp, #16]
 8018d00:	2b00      	cmp	r3, #0
 8018d02:	d078      	beq.n	8018df6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x15a>
 8018d04:	9902      	ldr	r1, [sp, #8]
 8018d06:	f105 00a0 	add.w	r0, r5, #160	; 0xa0
 8018d0a:	f7ff fe9f 	bl	8018a4c <_ZNK8touchgfx4Rect9intersectERKS0_>
 8018d0e:	b360      	cbz	r0, 8018d6a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xce>
 8018d10:	f9bd e020 	ldrsh.w	lr, [sp, #32]
 8018d14:	f9b5 c0a0 	ldrsh.w	ip, [r5, #160]	; 0xa0
 8018d18:	f9bd 9022 	ldrsh.w	r9, [sp, #34]	; 0x22
 8018d1c:	45e6      	cmp	lr, ip
 8018d1e:	f9b5 80a2 	ldrsh.w	r8, [r5, #162]	; 0xa2
 8018d22:	db35      	blt.n	8018d90 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xf4>
 8018d24:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 8018d28:	f8b5 30a4 	ldrh.w	r3, [r5, #164]	; 0xa4
 8018d2c:	4472      	add	r2, lr
 8018d2e:	4463      	add	r3, ip
 8018d30:	b212      	sxth	r2, r2
 8018d32:	b21b      	sxth	r3, r3
 8018d34:	429a      	cmp	r2, r3
 8018d36:	dc2b      	bgt.n	8018d90 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xf4>
 8018d38:	fa1f f288 	uxth.w	r2, r8
 8018d3c:	f8b5 30a6 	ldrh.w	r3, [r5, #166]	; 0xa6
 8018d40:	45c1      	cmp	r9, r8
 8018d42:	f8bd 1026 	ldrh.w	r1, [sp, #38]	; 0x26
 8018d46:	4413      	add	r3, r2
 8018d48:	fa1f fc89 	uxth.w	ip, r9
 8018d4c:	b29b      	uxth	r3, r3
 8018d4e:	fa0f fe83 	sxth.w	lr, r3
 8018d52:	db0f      	blt.n	8018d74 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xd8>
 8018d54:	eba3 030c 	sub.w	r3, r3, ip
 8018d58:	1ac9      	subs	r1, r1, r3
 8018d5a:	b209      	sxth	r1, r1
 8018d5c:	2900      	cmp	r1, #0
 8018d5e:	f8ad 1026 	strh.w	r1, [sp, #38]	; 0x26
 8018d62:	dd12      	ble.n	8018d8a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xee>
 8018d64:	f8ad e022 	strh.w	lr, [sp, #34]	; 0x22
 8018d68:	4604      	mov	r4, r0
 8018d6a:	9b04      	ldr	r3, [sp, #16]
 8018d6c:	3d08      	subs	r5, #8
 8018d6e:	3b01      	subs	r3, #1
 8018d70:	9304      	str	r3, [sp, #16]
 8018d72:	e7c4      	b.n	8018cfe <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x62>
 8018d74:	4461      	add	r1, ip
 8018d76:	b209      	sxth	r1, r1
 8018d78:	4571      	cmp	r1, lr
 8018d7a:	dc3a      	bgt.n	8018df2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x156>
 8018d7c:	eba2 020c 	sub.w	r2, r2, ip
 8018d80:	b212      	sxth	r2, r2
 8018d82:	f8ad 2026 	strh.w	r2, [sp, #38]	; 0x26
 8018d86:	2a00      	cmp	r2, #0
 8018d88:	dcee      	bgt.n	8018d68 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xcc>
 8018d8a:	b00d      	add	sp, #52	; 0x34
 8018d8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018d90:	45c1      	cmp	r9, r8
 8018d92:	db2e      	blt.n	8018df2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x156>
 8018d94:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 8018d98:	4499      	add	r9, r3
 8018d9a:	f8b5 30a6 	ldrh.w	r3, [r5, #166]	; 0xa6
 8018d9e:	4498      	add	r8, r3
 8018da0:	fa0f f989 	sxth.w	r9, r9
 8018da4:	fa0f f888 	sxth.w	r8, r8
 8018da8:	45c1      	cmp	r9, r8
 8018daa:	dc22      	bgt.n	8018df2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x156>
 8018dac:	fa1f f28c 	uxth.w	r2, ip
 8018db0:	f8b5 30a4 	ldrh.w	r3, [r5, #164]	; 0xa4
 8018db4:	45e6      	cmp	lr, ip
 8018db6:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
 8018dba:	4413      	add	r3, r2
 8018dbc:	fa1f f88e 	uxth.w	r8, lr
 8018dc0:	b29b      	uxth	r3, r3
 8018dc2:	fa0f f983 	sxth.w	r9, r3
 8018dc6:	db0a      	blt.n	8018dde <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x142>
 8018dc8:	eba3 0308 	sub.w	r3, r3, r8
 8018dcc:	1ac9      	subs	r1, r1, r3
 8018dce:	b209      	sxth	r1, r1
 8018dd0:	2900      	cmp	r1, #0
 8018dd2:	f8ad 1024 	strh.w	r1, [sp, #36]	; 0x24
 8018dd6:	ddd8      	ble.n	8018d8a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xee>
 8018dd8:	f8ad 9020 	strh.w	r9, [sp, #32]
 8018ddc:	e7c4      	b.n	8018d68 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xcc>
 8018dde:	4441      	add	r1, r8
 8018de0:	b209      	sxth	r1, r1
 8018de2:	4549      	cmp	r1, r9
 8018de4:	dc05      	bgt.n	8018df2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x156>
 8018de6:	eba2 0208 	sub.w	r2, r2, r8
 8018dea:	b212      	sxth	r2, r2
 8018dec:	f8ad 2024 	strh.w	r2, [sp, #36]	; 0x24
 8018df0:	e7c9      	b.n	8018d86 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xea>
 8018df2:	4606      	mov	r6, r0
 8018df4:	e7b9      	b.n	8018d6a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xce>
 8018df6:	2c00      	cmp	r4, #0
 8018df8:	f47f af7d 	bne.w	8018cf6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5a>
 8018dfc:	2e00      	cmp	r6, #0
 8018dfe:	f000 81dc 	beq.w	80191ba <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x51e>
 8018e02:	f9bd 7022 	ldrsh.w	r7, [sp, #34]	; 0x22
 8018e06:	4655      	mov	r5, sl
 8018e08:	f9bd 6020 	ldrsh.w	r6, [sp, #32]
 8018e0c:	b2b9      	uxth	r1, r7
 8018e0e:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 8018e12:	b2b3      	uxth	r3, r6
 8018e14:	9104      	str	r1, [sp, #16]
 8018e16:	9804      	ldr	r0, [sp, #16]
 8018e18:	441a      	add	r2, r3
 8018e1a:	f8bd 1026 	ldrh.w	r1, [sp, #38]	; 0x26
 8018e1e:	b292      	uxth	r2, r2
 8018e20:	4401      	add	r1, r0
 8018e22:	fa0f f882 	sxth.w	r8, r2
 8018e26:	b289      	uxth	r1, r1
 8018e28:	9105      	str	r1, [sp, #20]
 8018e2a:	f9bd 9014 	ldrsh.w	r9, [sp, #20]
 8018e2e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8018e32:	9b03      	ldr	r3, [sp, #12]
 8018e34:	2b00      	cmp	r3, #0
 8018e36:	d054      	beq.n	8018ee2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x246>
 8018e38:	9902      	ldr	r1, [sp, #8]
 8018e3a:	f105 00a0 	add.w	r0, r5, #160	; 0xa0
 8018e3e:	f7ff fe05 	bl	8018a4c <_ZNK8touchgfx4Rect9intersectERKS0_>
 8018e42:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8018e46:	b1d8      	cbz	r0, 8018e80 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e4>
 8018e48:	f9b5 e0a0 	ldrsh.w	lr, [r5, #160]	; 0xa0
 8018e4c:	f9b5 10a2 	ldrsh.w	r1, [r5, #162]	; 0xa2
 8018e50:	4576      	cmp	r6, lr
 8018e52:	dc26      	bgt.n	8018ea2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x206>
 8018e54:	f8b5 c0a4 	ldrh.w	ip, [r5, #164]	; 0xa4
 8018e58:	44f4      	add	ip, lr
 8018e5a:	fa0f fc8c 	sxth.w	ip, ip
 8018e5e:	45e0      	cmp	r8, ip
 8018e60:	db1f      	blt.n	8018ea2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x206>
 8018e62:	428f      	cmp	r7, r1
 8018e64:	fa1f fc81 	uxth.w	ip, r1
 8018e68:	f8b5 10a6 	ldrh.w	r1, [r5, #166]	; 0xa6
 8018e6c:	dc0f      	bgt.n	8018e8e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f2>
 8018e6e:	9805      	ldr	r0, [sp, #20]
 8018e70:	f8a5 90a2 	strh.w	r9, [r5, #162]	; 0xa2
 8018e74:	eba0 0c0c 	sub.w	ip, r0, ip
 8018e78:	eba1 010c 	sub.w	r1, r1, ip
 8018e7c:	f8a5 10a6 	strh.w	r1, [r5, #166]	; 0xa6
 8018e80:	4620      	mov	r0, r4
 8018e82:	9903      	ldr	r1, [sp, #12]
 8018e84:	3d08      	subs	r5, #8
 8018e86:	4604      	mov	r4, r0
 8018e88:	3901      	subs	r1, #1
 8018e8a:	9103      	str	r1, [sp, #12]
 8018e8c:	e7cf      	b.n	8018e2e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x192>
 8018e8e:	4461      	add	r1, ip
 8018e90:	b209      	sxth	r1, r1
 8018e92:	4549      	cmp	r1, r9
 8018e94:	dcf5      	bgt.n	8018e82 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 8018e96:	9904      	ldr	r1, [sp, #16]
 8018e98:	eba1 0c0c 	sub.w	ip, r1, ip
 8018e9c:	f8a5 c0a6 	strh.w	ip, [r5, #166]	; 0xa6
 8018ea0:	e7ee      	b.n	8018e80 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e4>
 8018ea2:	428f      	cmp	r7, r1
 8018ea4:	dced      	bgt.n	8018e82 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 8018ea6:	f8b5 c0a6 	ldrh.w	ip, [r5, #166]	; 0xa6
 8018eaa:	4461      	add	r1, ip
 8018eac:	b209      	sxth	r1, r1
 8018eae:	4589      	cmp	r9, r1
 8018eb0:	dbe7      	blt.n	8018e82 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 8018eb2:	4576      	cmp	r6, lr
 8018eb4:	fa1f fc8e 	uxth.w	ip, lr
 8018eb8:	f8b5 10a4 	ldrh.w	r1, [r5, #164]	; 0xa4
 8018ebc:	dc08      	bgt.n	8018ed0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x234>
 8018ebe:	eba2 0c0c 	sub.w	ip, r2, ip
 8018ec2:	f8a5 80a0 	strh.w	r8, [r5, #160]	; 0xa0
 8018ec6:	eba1 010c 	sub.w	r1, r1, ip
 8018eca:	f8a5 10a4 	strh.w	r1, [r5, #164]	; 0xa4
 8018ece:	e7d7      	b.n	8018e80 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e4>
 8018ed0:	4461      	add	r1, ip
 8018ed2:	b209      	sxth	r1, r1
 8018ed4:	4588      	cmp	r8, r1
 8018ed6:	dbd4      	blt.n	8018e82 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 8018ed8:	eba3 0c0c 	sub.w	ip, r3, ip
 8018edc:	f8a5 c0a4 	strh.w	ip, [r5, #164]	; 0xa4
 8018ee0:	e7ce      	b.n	8018e80 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e4>
 8018ee2:	2c00      	cmp	r4, #0
 8018ee4:	f000 8169 	beq.w	80191ba <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x51e>
 8018ee8:	9b00      	ldr	r3, [sp, #0]
 8018eea:	3301      	adds	r3, #1
 8018eec:	f000 8165 	beq.w	80191ba <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x51e>
 8018ef0:	f10a 04a0 	add.w	r4, sl, #160	; 0xa0
 8018ef4:	9802      	ldr	r0, [sp, #8]
 8018ef6:	4621      	mov	r1, r4
 8018ef8:	f7ff fdca 	bl	8018a90 <_ZNK8touchgfx4Rect8includesERKS0_>
 8018efc:	b120      	cbz	r0, 8018f08 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x26c>
 8018efe:	f8bd 1000 	ldrh.w	r1, [sp]
 8018f02:	9801      	ldr	r0, [sp, #4]
 8018f04:	f7ff fe92 	bl	8018c2c <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8018f08:	9902      	ldr	r1, [sp, #8]
 8018f0a:	4620      	mov	r0, r4
 8018f0c:	f7ff fd9e 	bl	8018a4c <_ZNK8touchgfx4Rect9intersectERKS0_>
 8018f10:	2800      	cmp	r0, #0
 8018f12:	f000 809b 	beq.w	801904c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3b0>
 8018f16:	f9bd 8020 	ldrsh.w	r8, [sp, #32]
 8018f1a:	f8bd 7024 	ldrh.w	r7, [sp, #36]	; 0x24
 8018f1e:	fa1f f288 	uxth.w	r2, r8
 8018f22:	f9ba 40a0 	ldrsh.w	r4, [sl, #160]	; 0xa0
 8018f26:	f8ba 30a4 	ldrh.w	r3, [sl, #164]	; 0xa4
 8018f2a:	19d5      	adds	r5, r2, r7
 8018f2c:	b2a1      	uxth	r1, r4
 8018f2e:	45a0      	cmp	r8, r4
 8018f30:	f9bd c022 	ldrsh.w	ip, [sp, #34]	; 0x22
 8018f34:	fa1f f985 	uxth.w	r9, r5
 8018f38:	440b      	add	r3, r1
 8018f3a:	f9ba 00a2 	ldrsh.w	r0, [sl, #162]	; 0xa2
 8018f3e:	fa0f f589 	sxth.w	r5, r9
 8018f42:	b29b      	uxth	r3, r3
 8018f44:	9503      	str	r5, [sp, #12]
 8018f46:	f8bb 50e8 	ldrh.w	r5, [fp, #232]	; 0xe8
 8018f4a:	9507      	str	r5, [sp, #28]
 8018f4c:	f340 809d 	ble.w	801908a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3ee>
 8018f50:	1a52      	subs	r2, r2, r1
 8018f52:	4584      	cmp	ip, r0
 8018f54:	fa0f fe83 	sxth.w	lr, r3
 8018f58:	b292      	uxth	r2, r2
 8018f5a:	b215      	sxth	r5, r2
 8018f5c:	dd2f      	ble.n	8018fbe <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x322>
 8018f5e:	9e00      	ldr	r6, [sp, #0]
 8018f60:	fa1f fc8c 	uxth.w	ip, ip
 8018f64:	b280      	uxth	r0, r0
 8018f66:	f8bd 1026 	ldrh.w	r1, [sp, #38]	; 0x26
 8018f6a:	eb0b 08c6 	add.w	r8, fp, r6, lsl #3
 8018f6e:	9e03      	ldr	r6, [sp, #12]
 8018f70:	ebac 0300 	sub.w	r3, ip, r0
 8018f74:	448c      	add	ip, r1
 8018f76:	eba6 060e 	sub.w	r6, r6, lr
 8018f7a:	f8b8 e0ae 	ldrh.w	lr, [r8, #174]	; 0xae
 8018f7e:	b29b      	uxth	r3, r3
 8018f80:	4470      	add	r0, lr
 8018f82:	fa0f fc8c 	sxth.w	ip, ip
 8018f86:	b21c      	sxth	r4, r3
 8018f88:	b200      	sxth	r0, r0
 8018f8a:	4366      	muls	r6, r4
 8018f8c:	ebac 0000 	sub.w	r0, ip, r0
 8018f90:	4368      	muls	r0, r5
 8018f92:	4286      	cmp	r6, r0
 8018f94:	db09      	blt.n	8018faa <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x30e>
 8018f96:	f8b8 30a8 	ldrh.w	r3, [r8, #168]	; 0xa8
 8018f9a:	f8a8 40ae 	strh.w	r4, [r8, #174]	; 0xae
 8018f9e:	4417      	add	r7, r2
 8018fa0:	f8ad 3020 	strh.w	r3, [sp, #32]
 8018fa4:	f8ad 7024 	strh.w	r7, [sp, #36]	; 0x24
 8018fa8:	e685      	b.n	8018cb6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 8018faa:	440b      	add	r3, r1
 8018fac:	f8a8 50ac 	strh.w	r5, [r8, #172]	; 0xac
 8018fb0:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 8018fb4:	f8b8 30aa 	ldrh.w	r3, [r8, #170]	; 0xaa
 8018fb8:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 8018fbc:	e67b      	b.n	8018cb6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 8018fbe:	9e03      	ldr	r6, [sp, #12]
 8018fc0:	45b6      	cmp	lr, r6
 8018fc2:	da28      	bge.n	8019016 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x37a>
 8018fc4:	9b00      	ldr	r3, [sp, #0]
 8018fc6:	eba6 060e 	sub.w	r6, r6, lr
 8018fca:	f8bd 4026 	ldrh.w	r4, [sp, #38]	; 0x26
 8018fce:	eb0b 01c3 	add.w	r1, fp, r3, lsl #3
 8018fd2:	eb04 030c 	add.w	r3, r4, ip
 8018fd6:	fa1f f883 	uxth.w	r8, r3
 8018fda:	f8b1 30ae 	ldrh.w	r3, [r1, #174]	; 0xae
 8018fde:	4403      	add	r3, r0
 8018fe0:	fa0f f988 	sxth.w	r9, r8
 8018fe4:	eba0 000c 	sub.w	r0, r0, ip
 8018fe8:	eba3 0308 	sub.w	r3, r3, r8
 8018fec:	4368      	muls	r0, r5
 8018fee:	b29b      	uxth	r3, r3
 8018ff0:	fa0f f883 	sxth.w	r8, r3
 8018ff4:	fb08 f606 	mul.w	r6, r8, r6
 8018ff8:	42b0      	cmp	r0, r6
 8018ffa:	dc06      	bgt.n	801900a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x36e>
 8018ffc:	f8a1 90aa 	strh.w	r9, [r1, #170]	; 0xaa
 8019000:	f8a1 80ae 	strh.w	r8, [r1, #174]	; 0xae
 8019004:	f8b1 30a8 	ldrh.w	r3, [r1, #168]	; 0xa8
 8019008:	e7c9      	b.n	8018f9e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x302>
 801900a:	4423      	add	r3, r4
 801900c:	f8a1 50ac 	strh.w	r5, [r1, #172]	; 0xac
 8019010:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 8019014:	e64f      	b.n	8018cb6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 8019016:	eba3 0309 	sub.w	r3, r3, r9
 801901a:	9807      	ldr	r0, [sp, #28]
 801901c:	b29b      	uxth	r3, r3
 801901e:	2806      	cmp	r0, #6
 8019020:	fa0f fc83 	sxth.w	ip, r3
 8019024:	d818      	bhi.n	8019058 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3bc>
 8019026:	4652      	mov	r2, sl
 8019028:	ab0a      	add	r3, sp, #40	; 0x28
 801902a:	f852 0fa0 	ldr.w	r0, [r2, #160]!
 801902e:	6851      	ldr	r1, [r2, #4]
 8019030:	f8aa c0a4 	strh.w	ip, [sl, #164]	; 0xa4
 8019034:	c303      	stmia	r3!, {r0, r1}
 8019036:	9b03      	ldr	r3, [sp, #12]
 8019038:	f8ad 502c 	strh.w	r5, [sp, #44]	; 0x2c
 801903c:	f8aa 30a0 	strh.w	r3, [sl, #160]	; 0xa0
 8019040:	ab0a      	add	r3, sp, #40	; 0x28
 8019042:	9801      	ldr	r0, [sp, #4]
 8019044:	e893 0006 	ldmia.w	r3, {r1, r2}
 8019048:	f7ff fe06 	bl	8018c58 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>
 801904c:	9b00      	ldr	r3, [sp, #0]
 801904e:	f1aa 0a08 	sub.w	sl, sl, #8
 8019052:	3b01      	subs	r3, #1
 8019054:	9300      	str	r3, [sp, #0]
 8019056:	e747      	b.n	8018ee8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x24c>
 8019058:	9800      	ldr	r0, [sp, #0]
 801905a:	45ac      	cmp	ip, r5
 801905c:	ea4f 00c0 	mov.w	r0, r0, lsl #3
 8019060:	db0c      	blt.n	801907c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3e0>
 8019062:	4417      	add	r7, r2
 8019064:	4458      	add	r0, fp
 8019066:	f8ad 4020 	strh.w	r4, [sp, #32]
 801906a:	b2bf      	uxth	r7, r7
 801906c:	f8a0 c0ac 	strh.w	ip, [r0, #172]	; 0xac
 8019070:	f8ad 7024 	strh.w	r7, [sp, #36]	; 0x24
 8019074:	440f      	add	r7, r1
 8019076:	f8a0 70a8 	strh.w	r7, [r0, #168]	; 0xa8
 801907a:	e61c      	b.n	8018cb6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 801907c:	4458      	add	r0, fp
 801907e:	f8a0 50ac 	strh.w	r5, [r0, #172]	; 0xac
 8019082:	443b      	add	r3, r7
 8019084:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 8019088:	e615      	b.n	8018cb6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 801908a:	fa1f f18c 	uxth.w	r1, ip
 801908e:	f8bd 5026 	ldrh.w	r5, [sp, #38]	; 0x26
 8019092:	b282      	uxth	r2, r0
 8019094:	4584      	cmp	ip, r0
 8019096:	eb01 0e05 	add.w	lr, r1, r5
 801909a:	9204      	str	r2, [sp, #16]
 801909c:	fa1f fe8e 	uxth.w	lr, lr
 80190a0:	9e04      	ldr	r6, [sp, #16]
 80190a2:	fa0f f28e 	sxth.w	r2, lr
 80190a6:	9205      	str	r2, [sp, #20]
 80190a8:	f8ba 20a6 	ldrh.w	r2, [sl, #166]	; 0xa6
 80190ac:	4432      	add	r2, r6
 80190ae:	b292      	uxth	r2, r2
 80190b0:	9206      	str	r2, [sp, #24]
 80190b2:	da26      	bge.n	8019102 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x466>
 80190b4:	eba3 0309 	sub.w	r3, r3, r9
 80190b8:	eba2 020e 	sub.w	r2, r2, lr
 80190bc:	eba0 000c 	sub.w	r0, r0, ip
 80190c0:	eba4 0408 	sub.w	r4, r4, r8
 80190c4:	b29b      	uxth	r3, r3
 80190c6:	b292      	uxth	r2, r2
 80190c8:	fa0f fa83 	sxth.w	sl, r3
 80190cc:	b211      	sxth	r1, r2
 80190ce:	fb0a f000 	mul.w	r0, sl, r0
 80190d2:	434c      	muls	r4, r1
 80190d4:	42a0      	cmp	r0, r4
 80190d6:	9800      	ldr	r0, [sp, #0]
 80190d8:	ea4f 00c0 	mov.w	r0, r0, lsl #3
 80190dc:	dc06      	bgt.n	80190ec <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x450>
 80190de:	4458      	add	r0, fp
 80190e0:	9a05      	ldr	r2, [sp, #20]
 80190e2:	f8a0 10ae 	strh.w	r1, [r0, #174]	; 0xae
 80190e6:	f8a0 20aa 	strh.w	r2, [r0, #170]	; 0xaa
 80190ea:	e7ca      	b.n	8019082 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3e6>
 80190ec:	eb0b 0300 	add.w	r3, fp, r0
 80190f0:	9903      	ldr	r1, [sp, #12]
 80190f2:	f8a3 a0ac 	strh.w	sl, [r3, #172]	; 0xac
 80190f6:	f8a3 10a8 	strh.w	r1, [r3, #168]	; 0xa8
 80190fa:	442a      	add	r2, r5
 80190fc:	f8ad 2026 	strh.w	r2, [sp, #38]	; 0x26
 8019100:	e5d9      	b.n	8018cb6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 8019102:	9e04      	ldr	r6, [sp, #16]
 8019104:	9a03      	ldr	r2, [sp, #12]
 8019106:	1b89      	subs	r1, r1, r6
 8019108:	b21e      	sxth	r6, r3
 801910a:	b289      	uxth	r1, r1
 801910c:	4296      	cmp	r6, r2
 801910e:	fa0f fc81 	sxth.w	ip, r1
 8019112:	dd25      	ble.n	8019160 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4c4>
 8019114:	eba3 0309 	sub.w	r3, r3, r9
 8019118:	f9bd 2018 	ldrsh.w	r2, [sp, #24]
 801911c:	9e05      	ldr	r6, [sp, #20]
 801911e:	eba4 0408 	sub.w	r4, r4, r8
 8019122:	b29b      	uxth	r3, r3
 8019124:	eba6 0902 	sub.w	r9, r6, r2
 8019128:	fb0c f404 	mul.w	r4, ip, r4
 801912c:	b218      	sxth	r0, r3
 801912e:	9a00      	ldr	r2, [sp, #0]
 8019130:	fb00 f909 	mul.w	r9, r0, r9
 8019134:	00d2      	lsls	r2, r2, #3
 8019136:	454c      	cmp	r4, r9
 8019138:	db03      	blt.n	8019142 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4a6>
 801913a:	445a      	add	r2, fp
 801913c:	f8a2 c0ae 	strh.w	ip, [r2, #174]	; 0xae
 8019140:	e79f      	b.n	8019082 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3e6>
 8019142:	eb0b 0302 	add.w	r3, fp, r2
 8019146:	9a03      	ldr	r2, [sp, #12]
 8019148:	4429      	add	r1, r5
 801914a:	f8a3 20a8 	strh.w	r2, [r3, #168]	; 0xa8
 801914e:	f8a3 00ac 	strh.w	r0, [r3, #172]	; 0xac
 8019152:	f8b3 30aa 	ldrh.w	r3, [r3, #170]	; 0xaa
 8019156:	f8ad 1026 	strh.w	r1, [sp, #38]	; 0x26
 801915a:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 801915e:	e5aa      	b.n	8018cb6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 8019160:	9b06      	ldr	r3, [sp, #24]
 8019162:	9c07      	ldr	r4, [sp, #28]
 8019164:	eba3 020e 	sub.w	r2, r3, lr
 8019168:	2c06      	cmp	r4, #6
 801916a:	b292      	uxth	r2, r2
 801916c:	b213      	sxth	r3, r2
 801916e:	d80d      	bhi.n	801918c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4f0>
 8019170:	4651      	mov	r1, sl
 8019172:	aa0a      	add	r2, sp, #40	; 0x28
 8019174:	f851 0fa0 	ldr.w	r0, [r1, #160]!
 8019178:	6849      	ldr	r1, [r1, #4]
 801917a:	f8aa 30a6 	strh.w	r3, [sl, #166]	; 0xa6
 801917e:	9b05      	ldr	r3, [sp, #20]
 8019180:	c203      	stmia	r2!, {r0, r1}
 8019182:	f8aa 30a2 	strh.w	r3, [sl, #162]	; 0xa2
 8019186:	f8ad c02e 	strh.w	ip, [sp, #46]	; 0x2e
 801918a:	e759      	b.n	8019040 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3a4>
 801918c:	9c00      	ldr	r4, [sp, #0]
 801918e:	4563      	cmp	r3, ip
 8019190:	ea4f 04c4 	mov.w	r4, r4, lsl #3
 8019194:	db0d      	blt.n	80191b2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x516>
 8019196:	4429      	add	r1, r5
 8019198:	9a04      	ldr	r2, [sp, #16]
 801919a:	445c      	add	r4, fp
 801919c:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 80191a0:	b289      	uxth	r1, r1
 80191a2:	f8a4 30ae 	strh.w	r3, [r4, #174]	; 0xae
 80191a6:	f8ad 1026 	strh.w	r1, [sp, #38]	; 0x26
 80191aa:	4411      	add	r1, r2
 80191ac:	f8a4 10aa 	strh.w	r1, [r4, #170]	; 0xaa
 80191b0:	e581      	b.n	8018cb6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 80191b2:	445c      	add	r4, fp
 80191b4:	f8a4 c0ae 	strh.w	ip, [r4, #174]	; 0xae
 80191b8:	e79f      	b.n	80190fa <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x45e>
 80191ba:	f8bb 70e8 	ldrh.w	r7, [fp, #232]	; 0xe8
 80191be:	2f07      	cmp	r7, #7
 80191c0:	d806      	bhi.n	80191d0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x534>
 80191c2:	ab08      	add	r3, sp, #32
 80191c4:	9801      	ldr	r0, [sp, #4]
 80191c6:	e893 0006 	ldmia.w	r3, {r1, r2}
 80191ca:	f7ff fd45 	bl	8018c58 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>
 80191ce:	e5dc      	b.n	8018d8a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xee>
 80191d0:	f107 39ff 	add.w	r9, r7, #4294967295
 80191d4:	f10b 03a8 	add.w	r3, fp, #168	; 0xa8
 80191d8:	eb0b 07c7 	add.w	r7, fp, r7, lsl #3
 80191dc:	f06f 4a00 	mvn.w	sl, #2147483648	; 0x80000000
 80191e0:	f04f 35ff 	mov.w	r5, #4294967295
 80191e4:	2400      	movs	r4, #0
 80191e6:	9304      	str	r3, [sp, #16]
 80191e8:	f9b7 30a4 	ldrsh.w	r3, [r7, #164]	; 0xa4
 80191ec:	f109 32ff 	add.w	r2, r9, #4294967295
 80191f0:	9300      	str	r3, [sp, #0]
 80191f2:	4690      	mov	r8, r2
 80191f4:	f9b7 30a6 	ldrsh.w	r3, [r7, #166]	; 0xa6
 80191f8:	9303      	str	r3, [sp, #12]
 80191fa:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80191fe:	f1b8 3fff 	cmp.w	r8, #4294967295
 8019202:	6818      	ldr	r0, [r3, #0]
 8019204:	f10d 0c28 	add.w	ip, sp, #40	; 0x28
 8019208:	9206      	str	r2, [sp, #24]
 801920a:	bf16      	itet	ne
 801920c:	9904      	ldrne	r1, [sp, #16]
 801920e:	f8dd e008 	ldreq.w	lr, [sp, #8]
 8019212:	eb01 0ec8 	addne.w	lr, r1, r8, lsl #3
 8019216:	9305      	str	r3, [sp, #20]
 8019218:	f8be 1006 	ldrh.w	r1, [lr, #6]
 801921c:	f8be 6004 	ldrh.w	r6, [lr, #4]
 8019220:	fb16 f601 	smulbb	r6, r6, r1
 8019224:	6859      	ldr	r1, [r3, #4]
 8019226:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 801922a:	4671      	mov	r1, lr
 801922c:	a80a      	add	r0, sp, #40	; 0x28
 801922e:	f7ff fc51 	bl	8018ad4 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 8019232:	f8bd 002e 	ldrh.w	r0, [sp, #46]	; 0x2e
 8019236:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 801923a:	9b03      	ldr	r3, [sp, #12]
 801923c:	9a00      	ldr	r2, [sp, #0]
 801923e:	fb11 f100 	smulbb	r1, r1, r0
 8019242:	2008      	movs	r0, #8
 8019244:	fb02 6603 	mla	r6, r2, r3, r6
 8019248:	1b8e      	subs	r6, r1, r6
 801924a:	fb91 f1f0 	sdiv	r1, r1, r0
 801924e:	42b1      	cmp	r1, r6
 8019250:	dc21      	bgt.n	8019296 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5fa>
 8019252:	4556      	cmp	r6, sl
 8019254:	e9dd 3205 	ldrd	r3, r2, [sp, #20]
 8019258:	da03      	bge.n	8019262 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5c6>
 801925a:	b1e6      	cbz	r6, 8019296 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5fa>
 801925c:	46b2      	mov	sl, r6
 801925e:	4645      	mov	r5, r8
 8019260:	464c      	mov	r4, r9
 8019262:	f108 38ff 	add.w	r8, r8, #4294967295
 8019266:	f118 0f02 	cmn.w	r8, #2
 801926a:	d1c8      	bne.n	80191fe <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x562>
 801926c:	f1b2 3fff 	cmp.w	r2, #4294967295
 8019270:	f1a7 0708 	sub.w	r7, r7, #8
 8019274:	4691      	mov	r9, r2
 8019276:	d1b7      	bne.n	80191e8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x54c>
 8019278:	9b01      	ldr	r3, [sp, #4]
 801927a:	b2a6      	uxth	r6, r4
 801927c:	00e4      	lsls	r4, r4, #3
 801927e:	1918      	adds	r0, r3, r4
 8019280:	1c6b      	adds	r3, r5, #1
 8019282:	d10b      	bne.n	801929c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x600>
 8019284:	4601      	mov	r1, r0
 8019286:	9802      	ldr	r0, [sp, #8]
 8019288:	f7ff fc24 	bl	8018ad4 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 801928c:	4631      	mov	r1, r6
 801928e:	9801      	ldr	r0, [sp, #4]
 8019290:	f7ff fccc 	bl	8018c2c <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8019294:	e50f      	b.n	8018cb6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 8019296:	4645      	mov	r5, r8
 8019298:	464c      	mov	r4, r9
 801929a:	e7ed      	b.n	8019278 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5dc>
 801929c:	9b01      	ldr	r3, [sp, #4]
 801929e:	00ed      	lsls	r5, r5, #3
 80192a0:	445c      	add	r4, fp
 80192a2:	1959      	adds	r1, r3, r5
 80192a4:	445d      	add	r5, fp
 80192a6:	f7ff fc15 	bl	8018ad4 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 80192aa:	9b02      	ldr	r3, [sp, #8]
 80192ac:	cb03      	ldmia	r3!, {r0, r1}
 80192ae:	9b02      	ldr	r3, [sp, #8]
 80192b0:	f8c5 00a8 	str.w	r0, [r5, #168]	; 0xa8
 80192b4:	f8c5 10ac 	str.w	r1, [r5, #172]	; 0xac
 80192b8:	f854 0fa8 	ldr.w	r0, [r4, #168]!
 80192bc:	6861      	ldr	r1, [r4, #4]
 80192be:	c303      	stmia	r3!, {r0, r1}
 80192c0:	e7e4      	b.n	801928c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5f0>
	...

080192c4 <_ZN8touchgfx11Application4drawERNS_4RectE>:
 80192c4:	4b1d      	ldr	r3, [pc, #116]	; (801933c <_ZN8touchgfx11Application4drawERNS_4RectE+0x78>)
 80192c6:	b530      	push	{r4, r5, lr}
 80192c8:	f9b3 2000 	ldrsh.w	r2, [r3]
 80192cc:	b085      	sub	sp, #20
 80192ce:	4b1c      	ldr	r3, [pc, #112]	; (8019340 <_ZN8touchgfx11Application4drawERNS_4RectE+0x7c>)
 80192d0:	460c      	mov	r4, r1
 80192d2:	2100      	movs	r1, #0
 80192d4:	4605      	mov	r5, r0
 80192d6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80192da:	6820      	ldr	r0, [r4, #0]
 80192dc:	9100      	str	r1, [sp, #0]
 80192de:	f8ad 3006 	strh.w	r3, [sp, #6]
 80192e2:	ab02      	add	r3, sp, #8
 80192e4:	6861      	ldr	r1, [r4, #4]
 80192e6:	f8ad 2004 	strh.w	r2, [sp, #4]
 80192ea:	c303      	stmia	r3!, {r0, r1}
 80192ec:	4669      	mov	r1, sp
 80192ee:	a802      	add	r0, sp, #8
 80192f0:	f7fc f8b8 	bl	8015464 <_ZN8touchgfx4RectaNERKS0_>
 80192f4:	ab02      	add	r3, sp, #8
 80192f6:	cb03      	ldmia	r3!, {r0, r1}
 80192f8:	4b12      	ldr	r3, [pc, #72]	; (8019344 <_ZN8touchgfx11Application4drawERNS_4RectE+0x80>)
 80192fa:	6020      	str	r0, [r4, #0]
 80192fc:	6818      	ldr	r0, [r3, #0]
 80192fe:	6061      	str	r1, [r4, #4]
 8019300:	b138      	cbz	r0, 8019312 <_ZN8touchgfx11Application4drawERNS_4RectE+0x4e>
 8019302:	f895 3134 	ldrb.w	r3, [r5, #308]	; 0x134
 8019306:	b133      	cbz	r3, 8019316 <_ZN8touchgfx11Application4drawERNS_4RectE+0x52>
 8019308:	6821      	ldr	r1, [r4, #0]
 801930a:	4628      	mov	r0, r5
 801930c:	6862      	ldr	r2, [r4, #4]
 801930e:	f7ff fcc5 	bl	8018c9c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 8019312:	b005      	add	sp, #20
 8019314:	bd30      	pop	{r4, r5, pc}
 8019316:	6803      	ldr	r3, [r0, #0]
 8019318:	4621      	mov	r1, r4
 801931a:	689b      	ldr	r3, [r3, #8]
 801931c:	4798      	blx	r3
 801931e:	4b0a      	ldr	r3, [pc, #40]	; (8019348 <_ZN8touchgfx11Application4drawERNS_4RectE+0x84>)
 8019320:	6818      	ldr	r0, [r3, #0]
 8019322:	b118      	cbz	r0, 801932c <_ZN8touchgfx11Application4drawERNS_4RectE+0x68>
 8019324:	6803      	ldr	r3, [r0, #0]
 8019326:	4621      	mov	r1, r4
 8019328:	689b      	ldr	r3, [r3, #8]
 801932a:	4798      	blx	r3
 801932c:	4b07      	ldr	r3, [pc, #28]	; (801934c <_ZN8touchgfx11Application4drawERNS_4RectE+0x88>)
 801932e:	4621      	mov	r1, r4
 8019330:	6818      	ldr	r0, [r3, #0]
 8019332:	6803      	ldr	r3, [r0, #0]
 8019334:	695b      	ldr	r3, [r3, #20]
 8019336:	4798      	blx	r3
 8019338:	e7eb      	b.n	8019312 <_ZN8touchgfx11Application4drawERNS_4RectE+0x4e>
 801933a:	bf00      	nop
 801933c:	20005800 	.word	0x20005800
 8019340:	20005802 	.word	0x20005802
 8019344:	20005848 	.word	0x20005848
 8019348:	20005844 	.word	0x20005844
 801934c:	2000580c 	.word	0x2000580c

08019350 <_ZN8touchgfx11Application19cacheDrawOperationsEb>:
 8019350:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019354:	4604      	mov	r4, r0
 8019356:	b09b      	sub	sp, #108	; 0x6c
 8019358:	f880 1134 	strb.w	r1, [r0, #308]	; 0x134
 801935c:	b129      	cbz	r1, 801936a <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1a>
 801935e:	2300      	movs	r3, #0
 8019360:	f8a0 30e8 	strh.w	r3, [r0, #232]	; 0xe8
 8019364:	b01b      	add	sp, #108	; 0x6c
 8019366:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801936a:	f500 7696 	add.w	r6, r0, #300	; 0x12c
 801936e:	4630      	mov	r0, r6
 8019370:	f7fc f8bb 	bl	80154ea <_ZNK8touchgfx4Rect7isEmptyEv>
 8019374:	4605      	mov	r5, r0
 8019376:	b940      	cbnz	r0, 801938a <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x3a>
 8019378:	4620      	mov	r0, r4
 801937a:	e896 0006 	ldmia.w	r6, {r1, r2}
 801937e:	f7ff fc8d 	bl	8018c9c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 8019382:	f8c4 512c 	str.w	r5, [r4, #300]	; 0x12c
 8019386:	f8c4 5130 	str.w	r5, [r4, #304]	; 0x130
 801938a:	4ba6      	ldr	r3, [pc, #664]	; (8019624 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2d4>)
 801938c:	681b      	ldr	r3, [r3, #0]
 801938e:	b33b      	cbz	r3, 80193e0 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x90>
 8019390:	4da5      	ldr	r5, [pc, #660]	; (8019628 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2d8>)
 8019392:	4628      	mov	r0, r5
 8019394:	f7fc f8a9 	bl	80154ea <_ZNK8touchgfx4Rect7isEmptyEv>
 8019398:	4606      	mov	r6, r0
 801939a:	bb08      	cbnz	r0, 80193e0 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x90>
 801939c:	4628      	mov	r0, r5
 801939e:	f7ff f9fb 	bl	8018798 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 80193a2:	6829      	ldr	r1, [r5, #0]
 80193a4:	686a      	ldr	r2, [r5, #4]
 80193a6:	4620      	mov	r0, r4
 80193a8:	f7ff fc78 	bl	8018c9c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 80193ac:	802e      	strh	r6, [r5, #0]
 80193ae:	806e      	strh	r6, [r5, #2]
 80193b0:	80ae      	strh	r6, [r5, #4]
 80193b2:	80ee      	strh	r6, [r5, #6]
 80193b4:	4f9d      	ldr	r7, [pc, #628]	; (801962c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2dc>)
 80193b6:	a809      	add	r0, sp, #36	; 0x24
 80193b8:	f7ff fbe3 	bl	8018b82 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 80193bc:	883d      	ldrh	r5, [r7, #0]
 80193be:	462e      	mov	r6, r5
 80193c0:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 80193c4:	42b3      	cmp	r3, r6
 80193c6:	d910      	bls.n	80193ea <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x9a>
 80193c8:	eb04 03c6 	add.w	r3, r4, r6, lsl #3
 80193cc:	3601      	adds	r6, #1
 80193ce:	a809      	add	r0, sp, #36	; 0x24
 80193d0:	f8d3 10a8 	ldr.w	r1, [r3, #168]	; 0xa8
 80193d4:	b2b6      	uxth	r6, r6
 80193d6:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 80193da:	f7ff fc3d 	bl	8018c58 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>
 80193de:	e7ef      	b.n	80193c0 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x70>
 80193e0:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 80193e4:	2b00      	cmp	r3, #0
 80193e6:	d1e5      	bne.n	80193b4 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x64>
 80193e8:	e7bc      	b.n	8019364 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14>
 80193ea:	462e      	mov	r6, r5
 80193ec:	f8b4 312a 	ldrh.w	r3, [r4, #298]	; 0x12a
 80193f0:	42b3      	cmp	r3, r6
 80193f2:	d90b      	bls.n	801940c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0xbc>
 80193f4:	eb04 03c6 	add.w	r3, r4, r6, lsl #3
 80193f8:	3601      	adds	r6, #1
 80193fa:	4620      	mov	r0, r4
 80193fc:	f8d3 10ea 	ldr.w	r1, [r3, #234]	; 0xea
 8019400:	b2b6      	uxth	r6, r6
 8019402:	f8d3 20ee 	ldr.w	r2, [r3, #238]	; 0xee
 8019406:	f7ff fc49 	bl	8018c9c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 801940a:	e7ef      	b.n	80193ec <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x9c>
 801940c:	4a88      	ldr	r2, [pc, #544]	; (8019630 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2e0>)
 801940e:	6813      	ldr	r3, [r2, #0]
 8019410:	4690      	mov	r8, r2
 8019412:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8019416:	2b01      	cmp	r3, #1
 8019418:	f040 8093 	bne.w	8019542 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1f2>
 801941c:	eb04 03c5 	add.w	r3, r4, r5, lsl #3
 8019420:	f8b4 00e8 	ldrh.w	r0, [r4, #232]	; 0xe8
 8019424:	f04f 0900 	mov.w	r9, #0
 8019428:	33aa      	adds	r3, #170	; 0xaa
 801942a:	42a8      	cmp	r0, r5
 801942c:	f103 0308 	add.w	r3, r3, #8
 8019430:	dd0a      	ble.n	8019448 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0xf8>
 8019432:	f833 2c08 	ldrh.w	r2, [r3, #-8]
 8019436:	3501      	adds	r5, #1
 8019438:	f833 1c04 	ldrh.w	r1, [r3, #-4]
 801943c:	440a      	add	r2, r1
 801943e:	b212      	sxth	r2, r2
 8019440:	4591      	cmp	r9, r2
 8019442:	bfb8      	it	lt
 8019444:	4691      	movlt	r9, r2
 8019446:	e7f0      	b.n	801942a <_ZN8touchgfx11Application19cacheDrawOperationsEb+0xda>
 8019448:	4b7a      	ldr	r3, [pc, #488]	; (8019634 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2e4>)
 801944a:	4e7b      	ldr	r6, [pc, #492]	; (8019638 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2e8>)
 801944c:	881d      	ldrh	r5, [r3, #0]
 801944e:	2300      	movs	r3, #0
 8019450:	2d0f      	cmp	r5, #15
 8019452:	bf8c      	ite	hi
 8019454:	08ed      	lsrhi	r5, r5, #3
 8019456:	2501      	movls	r5, #1
 8019458:	e9cd 3305 	strd	r3, r3, [sp, #20]
 801945c:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 8019460:	f8bd 101a 	ldrh.w	r1, [sp, #26]
 8019464:	f8d8 0000 	ldr.w	r0, [r8]
 8019468:	440b      	add	r3, r1
 801946a:	6802      	ldr	r2, [r0, #0]
 801946c:	b21b      	sxth	r3, r3
 801946e:	4599      	cmp	r9, r3
 8019470:	dd4a      	ble.n	8019508 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1b8>
 8019472:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
 8019476:	4798      	blx	r3
 8019478:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 801947c:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 8019480:	4413      	add	r3, r2
 8019482:	b21b      	sxth	r3, r3
 8019484:	195a      	adds	r2, r3, r5
 8019486:	4290      	cmp	r0, r2
 8019488:	da07      	bge.n	801949a <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14a>
 801948a:	4581      	cmp	r9, r0
 801948c:	dd05      	ble.n	801949a <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14a>
 801948e:	4298      	cmp	r0, r3
 8019490:	da33      	bge.n	80194fa <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1aa>
 8019492:	2b00      	cmp	r3, #0
 8019494:	dd31      	ble.n	80194fa <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1aa>
 8019496:	4648      	mov	r0, r9
 8019498:	e004      	b.n	80194a4 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x154>
 801949a:	4298      	cmp	r0, r3
 801949c:	dbfb      	blt.n	8019496 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x146>
 801949e:	4548      	cmp	r0, r9
 80194a0:	bfa8      	it	ge
 80194a2:	4648      	movge	r0, r9
 80194a4:	f9b6 2000 	ldrsh.w	r2, [r6]
 80194a8:	2100      	movs	r1, #0
 80194aa:	1ac0      	subs	r0, r0, r3
 80194ac:	f8b7 a000 	ldrh.w	sl, [r7]
 80194b0:	f8ad 1014 	strh.w	r1, [sp, #20]
 80194b4:	f8ad 3016 	strh.w	r3, [sp, #22]
 80194b8:	f8ad 2018 	strh.w	r2, [sp, #24]
 80194bc:	f8ad 001a 	strh.w	r0, [sp, #26]
 80194c0:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 80194c4:	4553      	cmp	r3, sl
 80194c6:	d9c9      	bls.n	801945c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x10c>
 80194c8:	eb04 02ca 	add.w	r2, r4, sl, lsl #3
 80194cc:	ab07      	add	r3, sp, #28
 80194ce:	f852 0fa8 	ldr.w	r0, [r2, #168]!
 80194d2:	6851      	ldr	r1, [r2, #4]
 80194d4:	c303      	stmia	r3!, {r0, r1}
 80194d6:	a807      	add	r0, sp, #28
 80194d8:	a905      	add	r1, sp, #20
 80194da:	f7fb ffc3 	bl	8015464 <_ZN8touchgfx4RectaNERKS0_>
 80194de:	a807      	add	r0, sp, #28
 80194e0:	f7fc f803 	bl	80154ea <_ZNK8touchgfx4Rect7isEmptyEv>
 80194e4:	b920      	cbnz	r0, 80194f0 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1a0>
 80194e6:	6823      	ldr	r3, [r4, #0]
 80194e8:	a907      	add	r1, sp, #28
 80194ea:	4620      	mov	r0, r4
 80194ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80194ee:	4798      	blx	r3
 80194f0:	f10a 0a01 	add.w	sl, sl, #1
 80194f4:	fa1f fa8a 	uxth.w	sl, sl
 80194f8:	e7e2      	b.n	80194c0 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x170>
 80194fa:	f8d8 0000 	ldr.w	r0, [r8]
 80194fe:	2101      	movs	r1, #1
 8019500:	6803      	ldr	r3, [r0, #0]
 8019502:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8019504:	4798      	blx	r3
 8019506:	e7a9      	b.n	801945c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x10c>
 8019508:	69d3      	ldr	r3, [r2, #28]
 801950a:	4798      	blx	r3
 801950c:	4b4b      	ldr	r3, [pc, #300]	; (801963c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2ec>)
 801950e:	781b      	ldrb	r3, [r3, #0]
 8019510:	2b00      	cmp	r3, #0
 8019512:	f43f af27 	beq.w	8019364 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14>
 8019516:	2300      	movs	r3, #0
 8019518:	883d      	ldrh	r5, [r7, #0]
 801951a:	34ea      	adds	r4, #234	; 0xea
 801951c:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
 8019520:	f8bd 3064 	ldrh.w	r3, [sp, #100]	; 0x64
 8019524:	42ab      	cmp	r3, r5
 8019526:	f67f af1d 	bls.w	8019364 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14>
 801952a:	ab1a      	add	r3, sp, #104	; 0x68
 801952c:	4620      	mov	r0, r4
 801952e:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8019532:	3501      	adds	r5, #1
 8019534:	3b44      	subs	r3, #68	; 0x44
 8019536:	b2ad      	uxth	r5, r5
 8019538:	e893 0006 	ldmia.w	r3, {r1, r2}
 801953c:	f7ff fb8c 	bl	8018c58 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>
 8019540:	e7ee      	b.n	8019520 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1d0>
 8019542:	2b02      	cmp	r3, #2
 8019544:	f040 813d 	bne.w	80197c2 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x472>
 8019548:	4b3d      	ldr	r3, [pc, #244]	; (8019640 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2f0>)
 801954a:	781b      	ldrb	r3, [r3, #0]
 801954c:	2b01      	cmp	r3, #1
 801954e:	d02c      	beq.n	80195aa <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x25a>
 8019550:	f104 0ba8 	add.w	fp, r4, #168	; 0xa8
 8019554:	883a      	ldrh	r2, [r7, #0]
 8019556:	f8b4 10e8 	ldrh.w	r1, [r4, #232]	; 0xe8
 801955a:	3201      	adds	r2, #1
 801955c:	b292      	uxth	r2, r2
 801955e:	2900      	cmp	r1, #0
 8019560:	d0d4      	beq.n	801950c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1bc>
 8019562:	f8b4 50aa 	ldrh.w	r5, [r4, #170]	; 0xaa
 8019566:	4610      	mov	r0, r2
 8019568:	f8b4 30ae 	ldrh.w	r3, [r4, #174]	; 0xae
 801956c:	f04f 0a00 	mov.w	sl, #0
 8019570:	441d      	add	r5, r3
 8019572:	b22d      	sxth	r5, r5
 8019574:	b283      	uxth	r3, r0
 8019576:	ea4f 06ca 	mov.w	r6, sl, lsl #3
 801957a:	4299      	cmp	r1, r3
 801957c:	f240 80c4 	bls.w	8019708 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x3b8>
 8019580:	4426      	add	r6, r4
 8019582:	eb04 09c0 	add.w	r9, r4, r0, lsl #3
 8019586:	4684      	mov	ip, r0
 8019588:	f9b6 30aa 	ldrsh.w	r3, [r6, #170]	; 0xaa
 801958c:	f9b9 e0aa 	ldrsh.w	lr, [r9, #170]	; 0xaa
 8019590:	4573      	cmp	r3, lr
 8019592:	f340 80a6 	ble.w	80196e2 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x392>
 8019596:	f8b9 50ae 	ldrh.w	r5, [r9, #174]	; 0xae
 801959a:	4475      	add	r5, lr
 801959c:	b22d      	sxth	r5, r5
 801959e:	429d      	cmp	r5, r3
 80195a0:	bfa8      	it	ge
 80195a2:	461d      	movge	r5, r3
 80195a4:	3001      	adds	r0, #1
 80195a6:	46e2      	mov	sl, ip
 80195a8:	e7e4      	b.n	8019574 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x224>
 80195aa:	f104 09a8 	add.w	r9, r4, #168	; 0xa8
 80195ae:	f8b4 b0e8 	ldrh.w	fp, [r4, #232]	; 0xe8
 80195b2:	f1bb 0f00 	cmp.w	fp, #0
 80195b6:	d0a9      	beq.n	801950c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1bc>
 80195b8:	883b      	ldrh	r3, [r7, #0]
 80195ba:	2600      	movs	r6, #0
 80195bc:	f9b4 20a8 	ldrsh.w	r2, [r4, #168]	; 0xa8
 80195c0:	3301      	adds	r3, #1
 80195c2:	b29b      	uxth	r3, r3
 80195c4:	b299      	uxth	r1, r3
 80195c6:	00f5      	lsls	r5, r6, #3
 80195c8:	458b      	cmp	fp, r1
 80195ca:	d93b      	bls.n	8019644 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2f4>
 80195cc:	4425      	add	r5, r4
 80195ce:	eb04 0ac3 	add.w	sl, r4, r3, lsl #3
 80195d2:	469c      	mov	ip, r3
 80195d4:	f8b5 10ac 	ldrh.w	r1, [r5, #172]	; 0xac
 80195d8:	f8b5 00a8 	ldrh.w	r0, [r5, #168]	; 0xa8
 80195dc:	f9ba e0a8 	ldrsh.w	lr, [sl, #168]	; 0xa8
 80195e0:	4408      	add	r0, r1
 80195e2:	f8ba 10ac 	ldrh.w	r1, [sl, #172]	; 0xac
 80195e6:	4471      	add	r1, lr
 80195e8:	b200      	sxth	r0, r0
 80195ea:	b209      	sxth	r1, r1
 80195ec:	4288      	cmp	r0, r1
 80195ee:	da06      	bge.n	80195fe <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2ae>
 80195f0:	4586      	cmp	lr, r0
 80195f2:	4672      	mov	r2, lr
 80195f4:	bfb8      	it	lt
 80195f6:	4602      	movlt	r2, r0
 80195f8:	3301      	adds	r3, #1
 80195fa:	4666      	mov	r6, ip
 80195fc:	e7e2      	b.n	80195c4 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x274>
 80195fe:	d10b      	bne.n	8019618 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2c8>
 8019600:	f9b5 c0ae 	ldrsh.w	ip, [r5, #174]	; 0xae
 8019604:	f9ba 10ae 	ldrsh.w	r1, [sl, #174]	; 0xae
 8019608:	458c      	cmp	ip, r1
 801960a:	bfb4      	ite	lt
 801960c:	469c      	movlt	ip, r3
 801960e:	46b4      	movge	ip, r6
 8019610:	4572      	cmp	r2, lr
 8019612:	bfb8      	it	lt
 8019614:	4672      	movlt	r2, lr
 8019616:	e7ef      	b.n	80195f8 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2a8>
 8019618:	428a      	cmp	r2, r1
 801961a:	46b4      	mov	ip, r6
 801961c:	bfb8      	it	lt
 801961e:	460a      	movlt	r2, r1
 8019620:	e7ea      	b.n	80195f8 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2a8>
 8019622:	bf00      	nop
 8019624:	20005844 	.word	0x20005844
 8019628:	20005850 	.word	0x20005850
 801962c:	20000174 	.word	0x20000174
 8019630:	2000580c 	.word	0x2000580c
 8019634:	20005802 	.word	0x20005802
 8019638:	20005800 	.word	0x20005800
 801963c:	2000580a 	.word	0x2000580a
 8019640:	20005804 	.word	0x20005804
 8019644:	1961      	adds	r1, r4, r5
 8019646:	ab07      	add	r3, sp, #28
 8019648:	f851 0fa8 	ldr.w	r0, [r1, #168]!
 801964c:	6849      	ldr	r1, [r1, #4]
 801964e:	c303      	stmia	r3!, {r0, r1}
 8019650:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 8019654:	a807      	add	r0, sp, #28
 8019656:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 801965a:	2b13      	cmp	r3, #19
 801965c:	440b      	add	r3, r1
 801965e:	bfd8      	it	le
 8019660:	f9bd 201c 	ldrshle.w	r2, [sp, #28]
 8019664:	1a9b      	subs	r3, r3, r2
 8019666:	f8ad 201c 	strh.w	r2, [sp, #28]
 801966a:	f8ad 3020 	strh.w	r3, [sp, #32]
 801966e:	f7ff f8ed 	bl	801884c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8019672:	a807      	add	r0, sp, #28
 8019674:	f7fb ff39 	bl	80154ea <_ZNK8touchgfx4Rect7isEmptyEv>
 8019678:	2800      	cmp	r0, #0
 801967a:	d198      	bne.n	80195ae <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x25e>
 801967c:	f9bd c022 	ldrsh.w	ip, [sp, #34]	; 0x22
 8019680:	4425      	add	r5, r4
 8019682:	f8d8 0000 	ldr.w	r0, [r8]
 8019686:	f1bc 0f14 	cmp.w	ip, #20
 801968a:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 801968e:	f8d0 e000 	ldr.w	lr, [r0]
 8019692:	bfa8      	it	ge
 8019694:	f04f 0c14 	movge.w	ip, #20
 8019698:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 801969c:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 80196a0:	fa1f fc8c 	uxth.w	ip, ip
 80196a4:	f8cd c000 	str.w	ip, [sp]
 80196a8:	f8de a074 	ldr.w	sl, [lr, #116]	; 0x74
 80196ac:	47d0      	blx	sl
 80196ae:	4682      	mov	sl, r0
 80196b0:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 80196b4:	a807      	add	r0, sp, #28
 80196b6:	f7ff f86f 	bl	8018798 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 80196ba:	6823      	ldr	r3, [r4, #0]
 80196bc:	4620      	mov	r0, r4
 80196be:	a907      	add	r1, sp, #28
 80196c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80196c2:	4798      	blx	r3
 80196c4:	f8b5 00ac 	ldrh.w	r0, [r5, #172]	; 0xac
 80196c8:	eba0 000a 	sub.w	r0, r0, sl
 80196cc:	b200      	sxth	r0, r0
 80196ce:	f8a5 00ac 	strh.w	r0, [r5, #172]	; 0xac
 80196d2:	2800      	cmp	r0, #0
 80196d4:	f47f af6b 	bne.w	80195ae <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x25e>
 80196d8:	b2b1      	uxth	r1, r6
 80196da:	4648      	mov	r0, r9
 80196dc:	f7ff faa6 	bl	8018c2c <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 80196e0:	e765      	b.n	80195ae <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x25e>
 80196e2:	d10c      	bne.n	80196fe <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x3ae>
 80196e4:	f9b6 c0ac 	ldrsh.w	ip, [r6, #172]	; 0xac
 80196e8:	f9b9 60ac 	ldrsh.w	r6, [r9, #172]	; 0xac
 80196ec:	45b4      	cmp	ip, r6
 80196ee:	bfb4      	ite	lt
 80196f0:	4684      	movlt	ip, r0
 80196f2:	46d4      	movge	ip, sl
 80196f4:	f8b9 60ae 	ldrh.w	r6, [r9, #174]	; 0xae
 80196f8:	4433      	add	r3, r6
 80196fa:	b21b      	sxth	r3, r3
 80196fc:	e74f      	b.n	801959e <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x24e>
 80196fe:	4575      	cmp	r5, lr
 8019700:	46d4      	mov	ip, sl
 8019702:	bfa8      	it	ge
 8019704:	4675      	movge	r5, lr
 8019706:	e74d      	b.n	80195a4 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x254>
 8019708:	eb0b 0006 	add.w	r0, fp, r6
 801970c:	4426      	add	r6, r4
 801970e:	f9b6 90ae 	ldrsh.w	r9, [r6, #174]	; 0xae
 8019712:	f1b9 0f13 	cmp.w	r9, #19
 8019716:	bfdc      	itt	le
 8019718:	f8b6 50aa 	ldrhle.w	r5, [r6, #170]	; 0xaa
 801971c:	444d      	addle	r5, r9
 801971e:	e9cd 1202 	strd	r1, r2, [sp, #8]
 8019722:	bfd8      	it	le
 8019724:	b22d      	sxthle	r5, r5
 8019726:	f7fb fee0 	bl	80154ea <_ZNK8touchgfx4Rect7isEmptyEv>
 801972a:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 801972e:	2800      	cmp	r0, #0
 8019730:	f47f af15 	bne.w	801955e <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x20e>
 8019734:	f9b6 c0aa 	ldrsh.w	ip, [r6, #170]	; 0xaa
 8019738:	fa1f f989 	uxth.w	r9, r9
 801973c:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 8019740:	eba5 050c 	sub.w	r5, r5, ip
 8019744:	fa1f f28c 	uxth.w	r2, ip
 8019748:	f9b6 10a8 	ldrsh.w	r1, [r6, #168]	; 0xa8
 801974c:	eb02 0009 	add.w	r0, r2, r9
 8019750:	2d14      	cmp	r5, #20
 8019752:	f9b6 30ac 	ldrsh.w	r3, [r6, #172]	; 0xac
 8019756:	bfa8      	it	ge
 8019758:	2514      	movge	r5, #20
 801975a:	b200      	sxth	r0, r0
 801975c:	f8ad 101c 	strh.w	r1, [sp, #28]
 8019760:	b289      	uxth	r1, r1
 8019762:	fa1f fe85 	uxth.w	lr, r5
 8019766:	eba0 000c 	sub.w	r0, r0, ip
 801976a:	f8ad c01e 	strh.w	ip, [sp, #30]
 801976e:	4586      	cmp	lr, r0
 8019770:	f8d8 0000 	ldr.w	r0, [r8]
 8019774:	f8ad 3020 	strh.w	r3, [sp, #32]
 8019778:	b29b      	uxth	r3, r3
 801977a:	bfb8      	it	lt
 801977c:	46f1      	movlt	r9, lr
 801977e:	6805      	ldr	r5, [r0, #0]
 8019780:	f8cd 9000 	str.w	r9, [sp]
 8019784:	6f6d      	ldr	r5, [r5, #116]	; 0x74
 8019786:	47a8      	blx	r5
 8019788:	6823      	ldr	r3, [r4, #0]
 801978a:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 801978e:	a907      	add	r1, sp, #28
 8019790:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8019792:	4620      	mov	r0, r4
 8019794:	4798      	blx	r3
 8019796:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 801979a:	f8b6 30ae 	ldrh.w	r3, [r6, #174]	; 0xae
 801979e:	f8b6 20aa 	ldrh.w	r2, [r6, #170]	; 0xaa
 80197a2:	1a5b      	subs	r3, r3, r1
 80197a4:	440a      	add	r2, r1
 80197a6:	b21b      	sxth	r3, r3
 80197a8:	f8a6 20aa 	strh.w	r2, [r6, #170]	; 0xaa
 80197ac:	f8a6 30ae 	strh.w	r3, [r6, #174]	; 0xae
 80197b0:	2b00      	cmp	r3, #0
 80197b2:	f47f aecf 	bne.w	8019554 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x204>
 80197b6:	fa1f f18a 	uxth.w	r1, sl
 80197ba:	4658      	mov	r0, fp
 80197bc:	f7ff fa36 	bl	8018c2c <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 80197c0:	e6c8      	b.n	8019554 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x204>
 80197c2:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 80197c6:	42ab      	cmp	r3, r5
 80197c8:	f67f aea0 	bls.w	801950c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1bc>
 80197cc:	eb04 02c5 	add.w	r2, r4, r5, lsl #3
 80197d0:	ab07      	add	r3, sp, #28
 80197d2:	f852 0fa8 	ldr.w	r0, [r2, #168]!
 80197d6:	6851      	ldr	r1, [r2, #4]
 80197d8:	c303      	stmia	r3!, {r0, r1}
 80197da:	a807      	add	r0, sp, #28
 80197dc:	f7fb fe85 	bl	80154ea <_ZNK8touchgfx4Rect7isEmptyEv>
 80197e0:	b920      	cbnz	r0, 80197ec <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x49c>
 80197e2:	6823      	ldr	r3, [r4, #0]
 80197e4:	a907      	add	r1, sp, #28
 80197e6:	4620      	mov	r0, r4
 80197e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80197ea:	4798      	blx	r3
 80197ec:	3501      	adds	r5, #1
 80197ee:	b2ad      	uxth	r5, r5
 80197f0:	e7e7      	b.n	80197c2 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x472>
 80197f2:	bf00      	nop

080197f4 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE>:
 80197f4:	4b03      	ldr	r3, [pc, #12]	; (8019804 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE+0x10>)
 80197f6:	2200      	movs	r2, #0
 80197f8:	801a      	strh	r2, [r3, #0]
 80197fa:	805a      	strh	r2, [r3, #2]
 80197fc:	809a      	strh	r2, [r3, #4]
 80197fe:	80da      	strh	r2, [r3, #6]
 8019800:	4770      	bx	lr
 8019802:	bf00      	nop
 8019804:	20005850 	.word	0x20005850

08019808 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>:
 8019808:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801980c:	b099      	sub	sp, #100	; 0x64
 801980e:	4607      	mov	r7, r0
 8019810:	4614      	mov	r4, r2
 8019812:	461d      	mov	r5, r3
 8019814:	a802      	add	r0, sp, #8
 8019816:	468a      	mov	sl, r1
 8019818:	f000 fdf0 	bl	801a3fc <_ZN8touchgfx12TextProviderC1Ev>
 801981c:	683b      	ldr	r3, [r7, #0]
 801981e:	4638      	mov	r0, r7
 8019820:	f242 0b0b 	movw	fp, #8203	; 0x200b
 8019824:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8019826:	4798      	blx	r3
 8019828:	462a      	mov	r2, r5
 801982a:	2500      	movs	r5, #0
 801982c:	4621      	mov	r1, r4
 801982e:	4603      	mov	r3, r0
 8019830:	a802      	add	r0, sp, #8
 8019832:	462c      	mov	r4, r5
 8019834:	46a9      	mov	r9, r5
 8019836:	46a8      	mov	r8, r5
 8019838:	f000 fe25 	bl	801a486 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 801983c:	2300      	movs	r3, #0
 801983e:	9301      	str	r3, [sp, #4]
 8019840:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 8019844:	429c      	cmp	r4, r3
 8019846:	d002      	beq.n	801984e <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x46>
 8019848:	455c      	cmp	r4, fp
 801984a:	bf18      	it	ne
 801984c:	4625      	movne	r5, r4
 801984e:	ab01      	add	r3, sp, #4
 8019850:	463a      	mov	r2, r7
 8019852:	4651      	mov	r1, sl
 8019854:	a802      	add	r0, sp, #8
 8019856:	f001 f911 	bl	801aa7c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801985a:	4604      	mov	r4, r0
 801985c:	b108      	cbz	r0, 8019862 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x5a>
 801985e:	280a      	cmp	r0, #10
 8019860:	d10a      	bne.n	8019878 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x70>
 8019862:	45c1      	cmp	r9, r8
 8019864:	bf38      	it	cc
 8019866:	46c1      	movcc	r9, r8
 8019868:	f04f 0800 	mov.w	r8, #0
 801986c:	2c00      	cmp	r4, #0
 801986e:	d1e5      	bne.n	801983c <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x34>
 8019870:	4648      	mov	r0, r9
 8019872:	b019      	add	sp, #100	; 0x64
 8019874:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019878:	9a01      	ldr	r2, [sp, #4]
 801987a:	2a00      	cmp	r2, #0
 801987c:	d0de      	beq.n	801983c <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x34>
 801987e:	7b56      	ldrb	r6, [r2, #13]
 8019880:	4629      	mov	r1, r5
 8019882:	683b      	ldr	r3, [r7, #0]
 8019884:	0076      	lsls	r6, r6, #1
 8019886:	8894      	ldrh	r4, [r2, #4]
 8019888:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801988a:	f406 7080 	and.w	r0, r6, #256	; 0x100
 801988e:	7a96      	ldrb	r6, [r2, #10]
 8019890:	4306      	orrs	r6, r0
 8019892:	4638      	mov	r0, r7
 8019894:	4798      	blx	r3
 8019896:	4430      	add	r0, r6
 8019898:	4480      	add	r8, r0
 801989a:	fa1f f888 	uxth.w	r8, r8
 801989e:	e7e5      	b.n	801986c <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x64>

080198a0 <_ZNK8touchgfx4Font12getCharWidthEt>:
 80198a0:	b508      	push	{r3, lr}
 80198a2:	6803      	ldr	r3, [r0, #0]
 80198a4:	68db      	ldr	r3, [r3, #12]
 80198a6:	4798      	blx	r3
 80198a8:	b128      	cbz	r0, 80198b6 <_ZNK8touchgfx4Font12getCharWidthEt+0x16>
 80198aa:	7b43      	ldrb	r3, [r0, #13]
 80198ac:	7a80      	ldrb	r0, [r0, #10]
 80198ae:	005b      	lsls	r3, r3, #1
 80198b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80198b4:	4318      	orrs	r0, r3
 80198b6:	bd08      	pop	{r3, pc}

080198b8 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz>:
 80198b8:	b40e      	push	{r1, r2, r3}
 80198ba:	b5f0      	push	{r4, r5, r6, r7, lr}
 80198bc:	b098      	sub	sp, #96	; 0x60
 80198be:	4605      	mov	r5, r0
 80198c0:	ab1d      	add	r3, sp, #116	; 0x74
 80198c2:	a802      	add	r0, sp, #8
 80198c4:	ae18      	add	r6, sp, #96	; 0x60
 80198c6:	f853 4b04 	ldr.w	r4, [r3], #4
 80198ca:	9300      	str	r3, [sp, #0]
 80198cc:	f000 fd96 	bl	801a3fc <_ZN8touchgfx12TextProviderC1Ev>
 80198d0:	682b      	ldr	r3, [r5, #0]
 80198d2:	4628      	mov	r0, r5
 80198d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80198d6:	4798      	blx	r3
 80198d8:	4621      	mov	r1, r4
 80198da:	2400      	movs	r4, #0
 80198dc:	4603      	mov	r3, r0
 80198de:	9a00      	ldr	r2, [sp, #0]
 80198e0:	a802      	add	r0, sp, #8
 80198e2:	f000 fdd0 	bl	801a486 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 80198e6:	f846 4d5c 	str.w	r4, [r6, #-92]!
 80198ea:	462a      	mov	r2, r5
 80198ec:	4633      	mov	r3, r6
 80198ee:	4621      	mov	r1, r4
 80198f0:	a802      	add	r0, sp, #8
 80198f2:	f001 f8c3 	bl	801aa7c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 80198f6:	b300      	cbz	r0, 801993a <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x82>
 80198f8:	280a      	cmp	r0, #10
 80198fa:	d01a      	beq.n	8019932 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x7a>
 80198fc:	9f01      	ldr	r7, [sp, #4]
 80198fe:	b1c7      	cbz	r7, 8019932 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x7a>
 8019900:	7b78      	ldrb	r0, [r7, #13]
 8019902:	7a3b      	ldrb	r3, [r7, #8]
 8019904:	00c1      	lsls	r1, r0, #3
 8019906:	88aa      	ldrh	r2, [r5, #4]
 8019908:	f401 7180 	and.w	r1, r1, #256	; 0x100
 801990c:	4319      	orrs	r1, r3
 801990e:	0643      	lsls	r3, r0, #25
 8019910:	ea4f 1000 	mov.w	r0, r0, lsl #4
 8019914:	bf48      	it	mi
 8019916:	f5a1 7300 	submi.w	r3, r1, #512	; 0x200
 801991a:	f400 7080 	and.w	r0, r0, #256	; 0x100
 801991e:	bf48      	it	mi
 8019920:	b219      	sxthmi	r1, r3
 8019922:	79fb      	ldrb	r3, [r7, #7]
 8019924:	4303      	orrs	r3, r0
 8019926:	4413      	add	r3, r2
 8019928:	1a5b      	subs	r3, r3, r1
 801992a:	b29b      	uxth	r3, r3
 801992c:	42a3      	cmp	r3, r4
 801992e:	bfc8      	it	gt
 8019930:	b21c      	sxthgt	r4, r3
 8019932:	4633      	mov	r3, r6
 8019934:	462a      	mov	r2, r5
 8019936:	2100      	movs	r1, #0
 8019938:	e7da      	b.n	80198f0 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x38>
 801993a:	b2a0      	uxth	r0, r4
 801993c:	b018      	add	sp, #96	; 0x60
 801993e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8019942:	b003      	add	sp, #12
 8019944:	4770      	bx	lr

08019946 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz>:
 8019946:	b40e      	push	{r1, r2, r3}
 8019948:	b530      	push	{r4, r5, lr}
 801994a:	b098      	sub	sp, #96	; 0x60
 801994c:	4604      	mov	r4, r0
 801994e:	ab1b      	add	r3, sp, #108	; 0x6c
 8019950:	a802      	add	r0, sp, #8
 8019952:	f853 5b04 	ldr.w	r5, [r3], #4
 8019956:	9301      	str	r3, [sp, #4]
 8019958:	f000 fd50 	bl	801a3fc <_ZN8touchgfx12TextProviderC1Ev>
 801995c:	6823      	ldr	r3, [r4, #0]
 801995e:	4620      	mov	r0, r4
 8019960:	2401      	movs	r4, #1
 8019962:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8019964:	4798      	blx	r3
 8019966:	9a01      	ldr	r2, [sp, #4]
 8019968:	4603      	mov	r3, r0
 801996a:	4629      	mov	r1, r5
 801996c:	a802      	add	r0, sp, #8
 801996e:	f000 fd8a 	bl	801a486 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 8019972:	a802      	add	r0, sp, #8
 8019974:	f001 f97a 	bl	801ac6c <_ZN8touchgfx12TextProvider11getNextCharEv>
 8019978:	b2a3      	uxth	r3, r4
 801997a:	b138      	cbz	r0, 801998c <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x46>
 801997c:	280a      	cmp	r0, #10
 801997e:	a802      	add	r0, sp, #8
 8019980:	bf04      	itt	eq
 8019982:	3301      	addeq	r3, #1
 8019984:	b21c      	sxtheq	r4, r3
 8019986:	f001 f971 	bl	801ac6c <_ZN8touchgfx12TextProvider11getNextCharEv>
 801998a:	e7f5      	b.n	8019978 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x32>
 801998c:	4618      	mov	r0, r3
 801998e:	b018      	add	sp, #96	; 0x60
 8019990:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8019994:	b003      	add	sp, #12
 8019996:	4770      	bx	lr

08019998 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz>:
 8019998:	b40e      	push	{r1, r2, r3}
 801999a:	b5f0      	push	{r4, r5, r6, r7, lr}
 801999c:	b098      	sub	sp, #96	; 0x60
 801999e:	4604      	mov	r4, r0
 80199a0:	26ff      	movs	r6, #255	; 0xff
 80199a2:	ab1d      	add	r3, sp, #116	; 0x74
 80199a4:	a802      	add	r0, sp, #8
 80199a6:	f853 5b04 	ldr.w	r5, [r3], #4
 80199aa:	9300      	str	r3, [sp, #0]
 80199ac:	f000 fd26 	bl	801a3fc <_ZN8touchgfx12TextProviderC1Ev>
 80199b0:	6823      	ldr	r3, [r4, #0]
 80199b2:	4620      	mov	r0, r4
 80199b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80199b6:	4798      	blx	r3
 80199b8:	4629      	mov	r1, r5
 80199ba:	4603      	mov	r3, r0
 80199bc:	9a00      	ldr	r2, [sp, #0]
 80199be:	a802      	add	r0, sp, #8
 80199c0:	ad18      	add	r5, sp, #96	; 0x60
 80199c2:	f000 fd60 	bl	801a486 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 80199c6:	2100      	movs	r1, #0
 80199c8:	4622      	mov	r2, r4
 80199ca:	a802      	add	r0, sp, #8
 80199cc:	f845 1d5c 	str.w	r1, [r5, #-92]!
 80199d0:	462b      	mov	r3, r5
 80199d2:	f001 f853 	bl	801aa7c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 80199d6:	b1d8      	cbz	r0, 8019a10 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x78>
 80199d8:	280a      	cmp	r0, #10
 80199da:	d012      	beq.n	8019a02 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x6a>
 80199dc:	9801      	ldr	r0, [sp, #4]
 80199de:	b180      	cbz	r0, 8019a02 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x6a>
 80199e0:	7b47      	ldrb	r7, [r0, #13]
 80199e2:	7922      	ldrb	r2, [r4, #4]
 80199e4:	00fb      	lsls	r3, r7, #3
 80199e6:	f403 7180 	and.w	r1, r3, #256	; 0x100
 80199ea:	7a03      	ldrb	r3, [r0, #8]
 80199ec:	430b      	orrs	r3, r1
 80199ee:	0679      	lsls	r1, r7, #25
 80199f0:	bf44      	itt	mi
 80199f2:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 80199f6:	b21b      	sxthmi	r3, r3
 80199f8:	1ad3      	subs	r3, r2, r3
 80199fa:	b2db      	uxtb	r3, r3
 80199fc:	429e      	cmp	r6, r3
 80199fe:	bf28      	it	cs
 8019a00:	461e      	movcs	r6, r3
 8019a02:	462b      	mov	r3, r5
 8019a04:	4622      	mov	r2, r4
 8019a06:	2100      	movs	r1, #0
 8019a08:	a802      	add	r0, sp, #8
 8019a0a:	f001 f837 	bl	801aa7c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8019a0e:	e7e2      	b.n	80199d6 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x3e>
 8019a10:	4630      	mov	r0, r6
 8019a12:	b018      	add	sp, #96	; 0x60
 8019a14:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8019a18:	b003      	add	sp, #12
 8019a1a:	4770      	bx	lr

08019a1c <_ZNK8touchgfx8Drawable10invalidateEv>:
 8019a1c:	b513      	push	{r0, r1, r4, lr}
 8019a1e:	1d01      	adds	r1, r0, #4
 8019a20:	4603      	mov	r3, r0
 8019a22:	466a      	mov	r2, sp
 8019a24:	c903      	ldmia	r1, {r0, r1}
 8019a26:	e882 0003 	stmia.w	r2, {r0, r1}
 8019a2a:	2100      	movs	r1, #0
 8019a2c:	4618      	mov	r0, r3
 8019a2e:	9100      	str	r1, [sp, #0]
 8019a30:	6819      	ldr	r1, [r3, #0]
 8019a32:	690c      	ldr	r4, [r1, #16]
 8019a34:	4611      	mov	r1, r2
 8019a36:	47a0      	blx	r4
 8019a38:	b002      	add	sp, #8
 8019a3a:	bd10      	pop	{r4, pc}

08019a3c <_ZN8touchgfx8Drawable20getSolidRectAbsoluteEv>:
 8019a3c:	b538      	push	{r3, r4, r5, lr}
 8019a3e:	680b      	ldr	r3, [r1, #0]
 8019a40:	460c      	mov	r4, r1
 8019a42:	4605      	mov	r5, r0
 8019a44:	68db      	ldr	r3, [r3, #12]
 8019a46:	4798      	blx	r3
 8019a48:	6823      	ldr	r3, [r4, #0]
 8019a4a:	4620      	mov	r0, r4
 8019a4c:	4629      	mov	r1, r5
 8019a4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8019a50:	4798      	blx	r3
 8019a52:	4628      	mov	r0, r5
 8019a54:	bd38      	pop	{r3, r4, r5, pc}

08019a56 <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE>:
 8019a56:	b410      	push	{r4}
 8019a58:	880a      	ldrh	r2, [r1, #0]
 8019a5a:	8884      	ldrh	r4, [r0, #4]
 8019a5c:	4422      	add	r2, r4
 8019a5e:	800a      	strh	r2, [r1, #0]
 8019a60:	884a      	ldrh	r2, [r1, #2]
 8019a62:	88c4      	ldrh	r4, [r0, #6]
 8019a64:	4422      	add	r2, r4
 8019a66:	804a      	strh	r2, [r1, #2]
 8019a68:	6940      	ldr	r0, [r0, #20]
 8019a6a:	b120      	cbz	r0, 8019a76 <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE+0x20>
 8019a6c:	6803      	ldr	r3, [r0, #0]
 8019a6e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8019a72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8019a74:	4718      	bx	r3
 8019a76:	f85d 4b04 	ldr.w	r4, [sp], #4
 8019a7a:	4770      	bx	lr

08019a7c <_ZN8touchgfx8Drawable12moveRelativeEss>:
 8019a7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019a7e:	460b      	mov	r3, r1
 8019a80:	b085      	sub	sp, #20
 8019a82:	4604      	mov	r4, r0
 8019a84:	b901      	cbnz	r1, 8019a88 <_ZN8touchgfx8Drawable12moveRelativeEss+0xc>
 8019a86:	b322      	cbz	r2, 8019ad2 <_ZN8touchgfx8Drawable12moveRelativeEss+0x56>
 8019a88:	1d27      	adds	r7, r4, #4
 8019a8a:	466e      	mov	r6, sp
 8019a8c:	88e5      	ldrh	r5, [r4, #6]
 8019a8e:	e897 0003 	ldmia.w	r7, {r0, r1}
 8019a92:	442a      	add	r2, r5
 8019a94:	e886 0003 	stmia.w	r6, {r0, r1}
 8019a98:	88a1      	ldrh	r1, [r4, #4]
 8019a9a:	4620      	mov	r0, r4
 8019a9c:	b215      	sxth	r5, r2
 8019a9e:	4419      	add	r1, r3
 8019aa0:	6823      	ldr	r3, [r4, #0]
 8019aa2:	b209      	sxth	r1, r1
 8019aa4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019aa6:	4798      	blx	r3
 8019aa8:	6823      	ldr	r3, [r4, #0]
 8019aaa:	4629      	mov	r1, r5
 8019aac:	4620      	mov	r0, r4
 8019aae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8019ab0:	ad02      	add	r5, sp, #8
 8019ab2:	4798      	blx	r3
 8019ab4:	e897 0003 	ldmia.w	r7, {r0, r1}
 8019ab8:	e885 0003 	stmia.w	r5, {r0, r1}
 8019abc:	6960      	ldr	r0, [r4, #20]
 8019abe:	b150      	cbz	r0, 8019ad6 <_ZN8touchgfx8Drawable12moveRelativeEss+0x5a>
 8019ac0:	6803      	ldr	r3, [r0, #0]
 8019ac2:	4631      	mov	r1, r6
 8019ac4:	691b      	ldr	r3, [r3, #16]
 8019ac6:	4798      	blx	r3
 8019ac8:	6960      	ldr	r0, [r4, #20]
 8019aca:	6803      	ldr	r3, [r0, #0]
 8019acc:	691b      	ldr	r3, [r3, #16]
 8019ace:	4629      	mov	r1, r5
 8019ad0:	4798      	blx	r3
 8019ad2:	b005      	add	sp, #20
 8019ad4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019ad6:	f7ff f843 	bl	8018b60 <_ZN8touchgfx11Application11getInstanceEv>
 8019ada:	6803      	ldr	r3, [r0, #0]
 8019adc:	4631      	mov	r1, r6
 8019ade:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8019ae0:	4798      	blx	r3
 8019ae2:	f7ff f83d 	bl	8018b60 <_ZN8touchgfx11Application11getInstanceEv>
 8019ae6:	6803      	ldr	r3, [r0, #0]
 8019ae8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8019aea:	e7f0      	b.n	8019ace <_ZN8touchgfx8Drawable12moveRelativeEss+0x52>

08019aec <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE>:
 8019aec:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8019aee:	8882      	ldrh	r2, [r0, #4]
 8019af0:	4605      	mov	r5, r0
 8019af2:	880b      	ldrh	r3, [r1, #0]
 8019af4:	460c      	mov	r4, r1
 8019af6:	4413      	add	r3, r2
 8019af8:	800b      	strh	r3, [r1, #0]
 8019afa:	884b      	ldrh	r3, [r1, #2]
 8019afc:	88c2      	ldrh	r2, [r0, #6]
 8019afe:	4413      	add	r3, r2
 8019b00:	4602      	mov	r2, r0
 8019b02:	804b      	strh	r3, [r1, #2]
 8019b04:	466b      	mov	r3, sp
 8019b06:	f852 0f04 	ldr.w	r0, [r2, #4]!
 8019b0a:	6851      	ldr	r1, [r2, #4]
 8019b0c:	c303      	stmia	r3!, {r0, r1}
 8019b0e:	4621      	mov	r1, r4
 8019b10:	4668      	mov	r0, sp
 8019b12:	f7fb fca7 	bl	8015464 <_ZN8touchgfx4RectaNERKS0_>
 8019b16:	466b      	mov	r3, sp
 8019b18:	cb03      	ldmia	r3!, {r0, r1}
 8019b1a:	6020      	str	r0, [r4, #0]
 8019b1c:	6061      	str	r1, [r4, #4]
 8019b1e:	6968      	ldr	r0, [r5, #20]
 8019b20:	b128      	cbz	r0, 8019b2e <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x42>
 8019b22:	6803      	ldr	r3, [r0, #0]
 8019b24:	691b      	ldr	r3, [r3, #16]
 8019b26:	4621      	mov	r1, r4
 8019b28:	4798      	blx	r3
 8019b2a:	b003      	add	sp, #12
 8019b2c:	bd30      	pop	{r4, r5, pc}
 8019b2e:	f7ff f817 	bl	8018b60 <_ZN8touchgfx11Application11getInstanceEv>
 8019b32:	6803      	ldr	r3, [r0, #0]
 8019b34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8019b36:	e7f6      	b.n	8019b26 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x3a>

08019b38 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE>:
 8019b38:	b570      	push	{r4, r5, r6, lr}
 8019b3a:	8882      	ldrh	r2, [r0, #4]
 8019b3c:	460c      	mov	r4, r1
 8019b3e:	880b      	ldrh	r3, [r1, #0]
 8019b40:	4605      	mov	r5, r0
 8019b42:	4413      	add	r3, r2
 8019b44:	800b      	strh	r3, [r1, #0]
 8019b46:	884b      	ldrh	r3, [r1, #2]
 8019b48:	88c2      	ldrh	r2, [r0, #6]
 8019b4a:	4413      	add	r3, r2
 8019b4c:	804b      	strh	r3, [r1, #2]
 8019b4e:	1d01      	adds	r1, r0, #4
 8019b50:	4620      	mov	r0, r4
 8019b52:	f7fb fc87 	bl	8015464 <_ZN8touchgfx4RectaNERKS0_>
 8019b56:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 8019b5a:	2b00      	cmp	r3, #0
 8019b5c:	dd0b      	ble.n	8019b76 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 8019b5e:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8019b62:	2b00      	cmp	r3, #0
 8019b64:	dd07      	ble.n	8019b76 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 8019b66:	6968      	ldr	r0, [r5, #20]
 8019b68:	b128      	cbz	r0, 8019b76 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 8019b6a:	6803      	ldr	r3, [r0, #0]
 8019b6c:	4621      	mov	r1, r4
 8019b6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019b70:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8019b74:	4718      	bx	r3
 8019b76:	bd70      	pop	{r4, r5, r6, pc}

08019b78 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>:
 8019b78:	b510      	push	{r4, lr}
 8019b7a:	2300      	movs	r3, #0
 8019b7c:	4604      	mov	r4, r0
 8019b7e:	4608      	mov	r0, r1
 8019b80:	f9b1 1008 	ldrsh.w	r1, [r1, #8]
 8019b84:	8023      	strh	r3, [r4, #0]
 8019b86:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 8019b8a:	8063      	strh	r3, [r4, #2]
 8019b8c:	6803      	ldr	r3, [r0, #0]
 8019b8e:	80a1      	strh	r1, [r4, #4]
 8019b90:	4621      	mov	r1, r4
 8019b92:	80e2      	strh	r2, [r4, #6]
 8019b94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8019b96:	4798      	blx	r3
 8019b98:	4620      	mov	r0, r4
 8019b9a:	bd10      	pop	{r4, pc}

08019b9c <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt>:
 8019b9c:	b530      	push	{r4, r5, lr}
 8019b9e:	8083      	strh	r3, [r0, #4]
 8019ba0:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8019ba4:	f89d 5010 	ldrb.w	r5, [sp, #16]
 8019ba8:	7183      	strb	r3, [r0, #6]
 8019baa:	79c3      	ldrb	r3, [r0, #7]
 8019bac:	6101      	str	r1, [r0, #16]
 8019bae:	f365 0306 	bfi	r3, r5, #0, #7
 8019bb2:	f89d 5014 	ldrb.w	r5, [sp, #20]
 8019bb6:	8282      	strh	r2, [r0, #20]
 8019bb8:	f365 13c7 	bfi	r3, r5, #7, #1
 8019bbc:	71c3      	strb	r3, [r0, #7]
 8019bbe:	f89d 3018 	ldrb.w	r3, [sp, #24]
 8019bc2:	7203      	strb	r3, [r0, #8]
 8019bc4:	f89d 301c 	ldrb.w	r3, [sp, #28]
 8019bc8:	7243      	strb	r3, [r0, #9]
 8019bca:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8019bce:	8143      	strh	r3, [r0, #10]
 8019bd0:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
 8019bd4:	8183      	strh	r3, [r0, #12]
 8019bd6:	4b01      	ldr	r3, [pc, #4]	; (8019bdc <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt+0x40>)
 8019bd8:	6003      	str	r3, [r0, #0]
 8019bda:	bd30      	pop	{r4, r5, pc}
 8019bdc:	0802ad58 	.word	0x0802ad58

08019be0 <_ZNK8touchgfx9ConstFont4findEt>:
 8019be0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019be2:	6904      	ldr	r4, [r0, #16]
 8019be4:	b3bc      	cbz	r4, 8019c56 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8019be6:	88a3      	ldrh	r3, [r4, #4]
 8019be8:	8a82      	ldrh	r2, [r0, #20]
 8019bea:	1acb      	subs	r3, r1, r3
 8019bec:	f102 32ff 	add.w	r2, r2, #4294967295
 8019bf0:	d431      	bmi.n	8019c56 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8019bf2:	4293      	cmp	r3, r2
 8019bf4:	dd0c      	ble.n	8019c10 <_ZNK8touchgfx9ConstFont4findEt+0x30>
 8019bf6:	230e      	movs	r3, #14
 8019bf8:	fb03 4302 	mla	r3, r3, r2, r4
 8019bfc:	889b      	ldrh	r3, [r3, #4]
 8019bfe:	1a5b      	subs	r3, r3, r1
 8019c00:	1ad3      	subs	r3, r2, r3
 8019c02:	429a      	cmp	r2, r3
 8019c04:	db27      	blt.n	8019c56 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8019c06:	2b00      	cmp	r3, #0
 8019c08:	bfbc      	itt	lt
 8019c0a:	2302      	movlt	r3, #2
 8019c0c:	fb92 f3f3 	sdivlt	r3, r2, r3
 8019c10:	2500      	movs	r5, #0
 8019c12:	260e      	movs	r6, #14
 8019c14:	4295      	cmp	r5, r2
 8019c16:	dc1e      	bgt.n	8019c56 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8019c18:	fb06 4003 	mla	r0, r6, r3, r4
 8019c1c:	8887      	ldrh	r7, [r0, #4]
 8019c1e:	42b9      	cmp	r1, r7
 8019c20:	d01a      	beq.n	8019c58 <_ZNK8touchgfx9ConstFont4findEt+0x78>
 8019c22:	d20d      	bcs.n	8019c40 <_ZNK8touchgfx9ConstFont4findEt+0x60>
 8019c24:	1e5a      	subs	r2, r3, #1
 8019c26:	4295      	cmp	r5, r2
 8019c28:	dc15      	bgt.n	8019c56 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8019c2a:	f830 3c0a 	ldrh.w	r3, [r0, #-10]
 8019c2e:	1a5b      	subs	r3, r3, r1
 8019c30:	1ad3      	subs	r3, r2, r3
 8019c32:	429a      	cmp	r2, r3
 8019c34:	db0f      	blt.n	8019c56 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8019c36:	429d      	cmp	r5, r3
 8019c38:	ddec      	ble.n	8019c14 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 8019c3a:	1953      	adds	r3, r2, r5
 8019c3c:	105b      	asrs	r3, r3, #1
 8019c3e:	e7e9      	b.n	8019c14 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 8019c40:	1c5d      	adds	r5, r3, #1
 8019c42:	42aa      	cmp	r2, r5
 8019c44:	db07      	blt.n	8019c56 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8019c46:	8a43      	ldrh	r3, [r0, #18]
 8019c48:	1acb      	subs	r3, r1, r3
 8019c4a:	442b      	add	r3, r5
 8019c4c:	429d      	cmp	r5, r3
 8019c4e:	dc02      	bgt.n	8019c56 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8019c50:	429a      	cmp	r2, r3
 8019c52:	dadf      	bge.n	8019c14 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 8019c54:	e7f1      	b.n	8019c3a <_ZNK8touchgfx9ConstFont4findEt+0x5a>
 8019c56:	2000      	movs	r0, #0
 8019c58:	bdf0      	pop	{r4, r5, r6, r7, pc}

08019c5a <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh>:
 8019c5a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019c5c:	4604      	mov	r4, r0
 8019c5e:	4617      	mov	r7, r2
 8019c60:	461e      	mov	r6, r3
 8019c62:	b911      	cbnz	r1, 8019c6a <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x10>
 8019c64:	2500      	movs	r5, #0
 8019c66:	4628      	mov	r0, r5
 8019c68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019c6a:	290a      	cmp	r1, #10
 8019c6c:	d0fa      	beq.n	8019c64 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 8019c6e:	f64f 62ff 	movw	r2, #65279	; 0xfeff
 8019c72:	4291      	cmp	r1, r2
 8019c74:	d0f6      	beq.n	8019c64 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 8019c76:	f242 020b 	movw	r2, #8203	; 0x200b
 8019c7a:	4291      	cmp	r1, r2
 8019c7c:	d0f2      	beq.n	8019c64 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 8019c7e:	f7ff ffaf 	bl	8019be0 <_ZNK8touchgfx9ConstFont4findEt>
 8019c82:	4605      	mov	r5, r0
 8019c84:	b950      	cbnz	r0, 8019c9c <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x42>
 8019c86:	6823      	ldr	r3, [r4, #0]
 8019c88:	4620      	mov	r0, r4
 8019c8a:	691b      	ldr	r3, [r3, #16]
 8019c8c:	4798      	blx	r3
 8019c8e:	4601      	mov	r1, r0
 8019c90:	4620      	mov	r0, r4
 8019c92:	f7ff ffa5 	bl	8019be0 <_ZNK8touchgfx9ConstFont4findEt>
 8019c96:	4605      	mov	r5, r0
 8019c98:	2800      	cmp	r0, #0
 8019c9a:	d0e3      	beq.n	8019c64 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 8019c9c:	6823      	ldr	r3, [r4, #0]
 8019c9e:	4629      	mov	r1, r5
 8019ca0:	4620      	mov	r0, r4
 8019ca2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8019ca4:	4798      	blx	r3
 8019ca6:	6038      	str	r0, [r7, #0]
 8019ca8:	6823      	ldr	r3, [r4, #0]
 8019caa:	4620      	mov	r0, r4
 8019cac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8019cae:	4798      	blx	r3
 8019cb0:	7030      	strb	r0, [r6, #0]
 8019cb2:	e7d8      	b.n	8019c66 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xc>

08019cb4 <_ZN8touchgfx10ClickEvent12getEventTypeEv>:
 8019cb4:	2000      	movs	r0, #0
 8019cb6:	4770      	bx	lr

08019cb8 <_ZN8touchgfx9DragEvent12getEventTypeEv>:
 8019cb8:	2001      	movs	r0, #1
 8019cba:	4770      	bx	lr

08019cbc <_ZN8touchgfx12GestureEvent12getEventTypeEv>:
 8019cbc:	2002      	movs	r0, #2
 8019cbe:	4770      	bx	lr

08019cc0 <_ZN8touchgfx12GestureEventD1Ev>:
 8019cc0:	4770      	bx	lr

08019cc2 <_ZN8touchgfx9DragEventD1Ev>:
 8019cc2:	4770      	bx	lr

08019cc4 <_ZN8touchgfx10ClickEventD1Ev>:
 8019cc4:	4770      	bx	lr

08019cc6 <_ZN8touchgfx10ClickEventD0Ev>:
 8019cc6:	b510      	push	{r4, lr}
 8019cc8:	4604      	mov	r4, r0
 8019cca:	210c      	movs	r1, #12
 8019ccc:	f00d f9fd 	bl	80270ca <_ZdlPvj>
 8019cd0:	4620      	mov	r0, r4
 8019cd2:	bd10      	pop	{r4, pc}

08019cd4 <_ZN8touchgfx9DragEventD0Ev>:
 8019cd4:	b510      	push	{r4, lr}
 8019cd6:	4604      	mov	r4, r0
 8019cd8:	2110      	movs	r1, #16
 8019cda:	f00d f9f6 	bl	80270ca <_ZdlPvj>
 8019cde:	4620      	mov	r0, r4
 8019ce0:	bd10      	pop	{r4, pc}

08019ce2 <_ZN8touchgfx12GestureEventD0Ev>:
 8019ce2:	b510      	push	{r4, lr}
 8019ce4:	4604      	mov	r4, r0
 8019ce6:	210c      	movs	r1, #12
 8019ce8:	f00d f9ef 	bl	80270ca <_ZdlPvj>
 8019cec:	4620      	mov	r0, r4
 8019cee:	bd10      	pop	{r4, pc}

08019cf0 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE>:
 8019cf0:	b530      	push	{r4, r5, lr}
 8019cf2:	460d      	mov	r5, r1
 8019cf4:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8019cf6:	b087      	sub	sp, #28
 8019cf8:	4604      	mov	r4, r0
 8019cfa:	b301      	cbz	r1, 8019d3e <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x4e>
 8019cfc:	a801      	add	r0, sp, #4
 8019cfe:	f7ff ff3b 	bl	8019b78 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8019d02:	892a      	ldrh	r2, [r5, #8]
 8019d04:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8019d08:	7928      	ldrb	r0, [r5, #4]
 8019d0a:	1ad2      	subs	r2, r2, r3
 8019d0c:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 8019d0e:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 8019d12:	441a      	add	r2, r3
 8019d14:	896b      	ldrh	r3, [r5, #10]
 8019d16:	f8bd 5006 	ldrh.w	r5, [sp, #6]
 8019d1a:	f88d 0010 	strb.w	r0, [sp, #16]
 8019d1e:	1b5b      	subs	r3, r3, r5
 8019d20:	8ee5      	ldrh	r5, [r4, #54]	; 0x36
 8019d22:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8019d24:	442b      	add	r3, r5
 8019d26:	4d07      	ldr	r5, [pc, #28]	; (8019d44 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x54>)
 8019d28:	f8ad 1012 	strh.w	r1, [sp, #18]
 8019d2c:	a903      	add	r1, sp, #12
 8019d2e:	9503      	str	r5, [sp, #12]
 8019d30:	f8ad 2014 	strh.w	r2, [sp, #20]
 8019d34:	f8ad 3016 	strh.w	r3, [sp, #22]
 8019d38:	6803      	ldr	r3, [r0, #0]
 8019d3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8019d3c:	4798      	blx	r3
 8019d3e:	b007      	add	sp, #28
 8019d40:	bd30      	pop	{r4, r5, pc}
 8019d42:	bf00      	nop
 8019d44:	0802add4 	.word	0x0802add4

08019d48 <_ZNK8touchgfx4Rect9intersectEss>:
 8019d48:	b510      	push	{r4, lr}
 8019d4a:	f9b0 3000 	ldrsh.w	r3, [r0]
 8019d4e:	428b      	cmp	r3, r1
 8019d50:	dc10      	bgt.n	8019d74 <_ZNK8touchgfx4Rect9intersectEss+0x2c>
 8019d52:	8884      	ldrh	r4, [r0, #4]
 8019d54:	4423      	add	r3, r4
 8019d56:	b21b      	sxth	r3, r3
 8019d58:	4299      	cmp	r1, r3
 8019d5a:	da0b      	bge.n	8019d74 <_ZNK8touchgfx4Rect9intersectEss+0x2c>
 8019d5c:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 8019d60:	4293      	cmp	r3, r2
 8019d62:	dc07      	bgt.n	8019d74 <_ZNK8touchgfx4Rect9intersectEss+0x2c>
 8019d64:	88c0      	ldrh	r0, [r0, #6]
 8019d66:	4418      	add	r0, r3
 8019d68:	b200      	sxth	r0, r0
 8019d6a:	4282      	cmp	r2, r0
 8019d6c:	bfac      	ite	ge
 8019d6e:	2000      	movge	r0, #0
 8019d70:	2001      	movlt	r0, #1
 8019d72:	bd10      	pop	{r4, pc}
 8019d74:	2000      	movs	r0, #0
 8019d76:	e7fc      	b.n	8019d72 <_ZNK8touchgfx4Rect9intersectEss+0x2a>

08019d78 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE>:
 8019d78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019d7a:	460c      	mov	r4, r1
 8019d7c:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8019d7e:	b089      	sub	sp, #36	; 0x24
 8019d80:	4605      	mov	r5, r0
 8019d82:	2900      	cmp	r1, #0
 8019d84:	d054      	beq.n	8019e30 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xb8>
 8019d86:	4668      	mov	r0, sp
 8019d88:	f7ff fef6 	bl	8019b78 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8019d8c:	8eae      	ldrh	r6, [r5, #52]	; 0x34
 8019d8e:	8eef      	ldrh	r7, [r5, #54]	; 0x36
 8019d90:	4668      	mov	r0, sp
 8019d92:	8922      	ldrh	r2, [r4, #8]
 8019d94:	88e1      	ldrh	r1, [r4, #6]
 8019d96:	443a      	add	r2, r7
 8019d98:	4431      	add	r1, r6
 8019d9a:	b212      	sxth	r2, r2
 8019d9c:	b209      	sxth	r1, r1
 8019d9e:	f7ff ffd3 	bl	8019d48 <_ZNK8touchgfx4Rect9intersectEss>
 8019da2:	b1d0      	cbz	r0, 8019dda <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x62>
 8019da4:	89a2      	ldrh	r2, [r4, #12]
 8019da6:	4668      	mov	r0, sp
 8019da8:	8961      	ldrh	r1, [r4, #10]
 8019daa:	443a      	add	r2, r7
 8019dac:	4431      	add	r1, r6
 8019dae:	b212      	sxth	r2, r2
 8019db0:	b209      	sxth	r1, r1
 8019db2:	f7ff ffc9 	bl	8019d48 <_ZNK8touchgfx4Rect9intersectEss>
 8019db6:	4603      	mov	r3, r0
 8019db8:	b978      	cbnz	r0, 8019dda <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x62>
 8019dba:	4a1e      	ldr	r2, [pc, #120]	; (8019e34 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xbc>)
 8019dbc:	a904      	add	r1, sp, #16
 8019dbe:	6b28      	ldr	r0, [r5, #48]	; 0x30
 8019dc0:	9204      	str	r2, [sp, #16]
 8019dc2:	2202      	movs	r2, #2
 8019dc4:	f8ad 3016 	strh.w	r3, [sp, #22]
 8019dc8:	f88d 2014 	strb.w	r2, [sp, #20]
 8019dcc:	f8ad 3018 	strh.w	r3, [sp, #24]
 8019dd0:	f8ad 301a 	strh.w	r3, [sp, #26]
 8019dd4:	6803      	ldr	r3, [r0, #0]
 8019dd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8019dd8:	4798      	blx	r3
 8019dda:	6b29      	ldr	r1, [r5, #48]	; 0x30
 8019ddc:	a802      	add	r0, sp, #8
 8019dde:	f7ff fecb 	bl	8019b78 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8019de2:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 8019de6:	88e0      	ldrh	r0, [r4, #6]
 8019de8:	8961      	ldrh	r1, [r4, #10]
 8019dea:	f8b5 c034 	ldrh.w	ip, [r5, #52]	; 0x34
 8019dee:	1a80      	subs	r0, r0, r2
 8019df0:	f8bd e00a 	ldrh.w	lr, [sp, #10]
 8019df4:	1a89      	subs	r1, r1, r2
 8019df6:	8923      	ldrh	r3, [r4, #8]
 8019df8:	4460      	add	r0, ip
 8019dfa:	89a2      	ldrh	r2, [r4, #12]
 8019dfc:	4461      	add	r1, ip
 8019dfe:	8eee      	ldrh	r6, [r5, #54]	; 0x36
 8019e00:	eba3 030e 	sub.w	r3, r3, lr
 8019e04:	eba2 020e 	sub.w	r2, r2, lr
 8019e08:	f8ad 0016 	strh.w	r0, [sp, #22]
 8019e0c:	7927      	ldrb	r7, [r4, #4]
 8019e0e:	4433      	add	r3, r6
 8019e10:	4432      	add	r2, r6
 8019e12:	4c09      	ldr	r4, [pc, #36]	; (8019e38 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xc0>)
 8019e14:	6b28      	ldr	r0, [r5, #48]	; 0x30
 8019e16:	f8ad 101a 	strh.w	r1, [sp, #26]
 8019e1a:	a904      	add	r1, sp, #16
 8019e1c:	9404      	str	r4, [sp, #16]
 8019e1e:	f88d 7014 	strb.w	r7, [sp, #20]
 8019e22:	f8ad 3018 	strh.w	r3, [sp, #24]
 8019e26:	f8ad 201c 	strh.w	r2, [sp, #28]
 8019e2a:	6803      	ldr	r3, [r0, #0]
 8019e2c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8019e2e:	4798      	blx	r3
 8019e30:	b009      	add	sp, #36	; 0x24
 8019e32:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019e34:	0802adac 	.word	0x0802adac
 8019e38:	0802adc0 	.word	0x0802adc0

08019e3c <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE>:
 8019e3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019e40:	f8d0 9030 	ldr.w	r9, [r0, #48]	; 0x30
 8019e44:	b0a1      	sub	sp, #132	; 0x84
 8019e46:	4604      	mov	r4, r0
 8019e48:	460d      	mov	r5, r1
 8019e4a:	790b      	ldrb	r3, [r1, #4]
 8019e4c:	f1b9 0f00 	cmp.w	r9, #0
 8019e50:	d00f      	beq.n	8019e72 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x36>
 8019e52:	2b00      	cmp	r3, #0
 8019e54:	f040 80a2 	bne.w	8019f9c <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x160>
 8019e58:	b021      	add	sp, #132	; 0x84
 8019e5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019e5e:	f104 0330 	add.w	r3, r4, #48	; 0x30
 8019e62:	f9b5 2008 	ldrsh.w	r2, [r5, #8]
 8019e66:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 8019e6a:	1d20      	adds	r0, r4, #4
 8019e6c:	f7fb fa48 	bl	8015300 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 8019e70:	e094      	b.n	8019f9c <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x160>
 8019e72:	2b00      	cmp	r3, #0
 8019e74:	d1f0      	bne.n	8019e58 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c>
 8019e76:	4b5f      	ldr	r3, [pc, #380]	; (8019ff4 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1b8>)
 8019e78:	681b      	ldr	r3, [r3, #0]
 8019e7a:	f893 a049 	ldrb.w	sl, [r3, #73]	; 0x49
 8019e7e:	f8c4 9034 	str.w	r9, [r4, #52]	; 0x34
 8019e82:	f1ba 0f03 	cmp.w	sl, #3
 8019e86:	ddea      	ble.n	8019e5e <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x22>
 8019e88:	f1ba 0f0c 	cmp.w	sl, #12
 8019e8c:	f04f 0303 	mov.w	r3, #3
 8019e90:	f04f 0600 	mov.w	r6, #0
 8019e94:	4958      	ldr	r1, [pc, #352]	; (8019ff8 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1bc>)
 8019e96:	bfd8      	it	le
 8019e98:	f10a 32ff 	addle.w	r2, sl, #4294967295
 8019e9c:	960a      	str	r6, [sp, #40]	; 0x28
 8019e9e:	bfd8      	it	le
 8019ea0:	fb92 f3f3 	sdivle	r3, r2, r3
 8019ea4:	9301      	str	r3, [sp, #4]
 8019ea6:	4b55      	ldr	r3, [pc, #340]	; (8019ffc <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c0>)
 8019ea8:	f9b3 2000 	ldrsh.w	r2, [r3]
 8019eac:	4b54      	ldr	r3, [pc, #336]	; (801a000 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c4>)
 8019eae:	f8ad 202c 	strh.w	r2, [sp, #44]	; 0x2c
 8019eb2:	2248      	movs	r2, #72	; 0x48
 8019eb4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8019eb8:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 8019ebc:	ab0e      	add	r3, sp, #56	; 0x38
 8019ebe:	4618      	mov	r0, r3
 8019ec0:	f00d faaa 	bl	8027418 <memcpy>
 8019ec4:	f04f 32ff 	mov.w	r2, #4294967295
 8019ec8:	f8cd a008 	str.w	sl, [sp, #8]
 8019ecc:	e9cd 2006 	strd	r2, r0, [sp, #24]
 8019ed0:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8019ed4:	46b3      	mov	fp, r6
 8019ed6:	fb93 f3f2 	sdiv	r3, r3, r2
 8019eda:	b29b      	uxth	r3, r3
 8019edc:	9303      	str	r3, [sp, #12]
 8019ede:	2300      	movs	r3, #0
 8019ee0:	9a03      	ldr	r2, [sp, #12]
 8019ee2:	88ef      	ldrh	r7, [r5, #6]
 8019ee4:	a80a      	add	r0, sp, #40	; 0x28
 8019ee6:	9309      	str	r3, [sp, #36]	; 0x24
 8019ee8:	9b07      	ldr	r3, [sp, #28]
 8019eea:	f8b5 8008 	ldrh.w	r8, [r5, #8]
 8019eee:	f853 303b 	ldr.w	r3, [r3, fp, lsl #3]
 8019ef2:	fb13 f302 	smulbb	r3, r3, r2
 8019ef6:	b29b      	uxth	r3, r3
 8019ef8:	9304      	str	r3, [sp, #16]
 8019efa:	9b07      	ldr	r3, [sp, #28]
 8019efc:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8019f00:	685b      	ldr	r3, [r3, #4]
 8019f02:	fb13 f302 	smulbb	r3, r3, r2
 8019f06:	b29b      	uxth	r3, r3
 8019f08:	9305      	str	r3, [sp, #20]
 8019f0a:	9b04      	ldr	r3, [sp, #16]
 8019f0c:	441f      	add	r7, r3
 8019f0e:	9b05      	ldr	r3, [sp, #20]
 8019f10:	4498      	add	r8, r3
 8019f12:	b23f      	sxth	r7, r7
 8019f14:	fa0f f888 	sxth.w	r8, r8
 8019f18:	4639      	mov	r1, r7
 8019f1a:	4642      	mov	r2, r8
 8019f1c:	f7ff ff14 	bl	8019d48 <_ZNK8touchgfx4Rect9intersectEss>
 8019f20:	b380      	cbz	r0, 8019f84 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x148>
 8019f22:	4639      	mov	r1, r7
 8019f24:	ab09      	add	r3, sp, #36	; 0x24
 8019f26:	4642      	mov	r2, r8
 8019f28:	1d20      	adds	r0, r4, #4
 8019f2a:	f7fb f9e9 	bl	8015300 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 8019f2e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8019f30:	b341      	cbz	r1, 8019f84 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x148>
 8019f32:	4549      	cmp	r1, r9
 8019f34:	d026      	beq.n	8019f84 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x148>
 8019f36:	a80c      	add	r0, sp, #48	; 0x30
 8019f38:	f7ff fe1e 	bl	8019b78 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8019f3c:	2002      	movs	r0, #2
 8019f3e:	f9bd 2034 	ldrsh.w	r2, [sp, #52]	; 0x34
 8019f42:	f9bd 1030 	ldrsh.w	r1, [sp, #48]	; 0x30
 8019f46:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 8019f4a:	fb92 f2f0 	sdiv	r2, r2, r0
 8019f4e:	440a      	add	r2, r1
 8019f50:	1a99      	subs	r1, r3, r2
 8019f52:	f9bd 3036 	ldrsh.w	r3, [sp, #54]	; 0x36
 8019f56:	f9b5 2008 	ldrsh.w	r2, [r5, #8]
 8019f5a:	fb93 f3f0 	sdiv	r3, r3, r0
 8019f5e:	f9bd 0032 	ldrsh.w	r0, [sp, #50]	; 0x32
 8019f62:	4403      	add	r3, r0
 8019f64:	1ad3      	subs	r3, r2, r3
 8019f66:	9a06      	ldr	r2, [sp, #24]
 8019f68:	435b      	muls	r3, r3
 8019f6a:	fb01 3301 	mla	r3, r1, r1, r3
 8019f6e:	4293      	cmp	r3, r2
 8019f70:	d208      	bcs.n	8019f84 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x148>
 8019f72:	9a04      	ldr	r2, [sp, #16]
 8019f74:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8019f78:	86a2      	strh	r2, [r4, #52]	; 0x34
 8019f7a:	9a05      	ldr	r2, [sp, #20]
 8019f7c:	f8c4 9030 	str.w	r9, [r4, #48]	; 0x30
 8019f80:	86e2      	strh	r2, [r4, #54]	; 0x36
 8019f82:	9306      	str	r3, [sp, #24]
 8019f84:	f10b 0b02 	add.w	fp, fp, #2
 8019f88:	f1bb 0f08 	cmp.w	fp, #8
 8019f8c:	dda7      	ble.n	8019ede <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0xa2>
 8019f8e:	9b02      	ldr	r3, [sp, #8]
 8019f90:	3601      	adds	r6, #1
 8019f92:	4453      	add	r3, sl
 8019f94:	9302      	str	r3, [sp, #8]
 8019f96:	9b01      	ldr	r3, [sp, #4]
 8019f98:	42b3      	cmp	r3, r6
 8019f9a:	d199      	bne.n	8019ed0 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x94>
 8019f9c:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8019f9e:	2900      	cmp	r1, #0
 8019fa0:	f43f af5a 	beq.w	8019e58 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c>
 8019fa4:	a80c      	add	r0, sp, #48	; 0x30
 8019fa6:	2600      	movs	r6, #0
 8019fa8:	f7ff fde6 	bl	8019b78 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8019fac:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
 8019fb0:	88ea      	ldrh	r2, [r5, #6]
 8019fb2:	f8bd 0032 	ldrh.w	r0, [sp, #50]	; 0x32
 8019fb6:	1ad2      	subs	r2, r2, r3
 8019fb8:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 8019fba:	7929      	ldrb	r1, [r5, #4]
 8019fbc:	441a      	add	r2, r3
 8019fbe:	892b      	ldrh	r3, [r5, #8]
 8019fc0:	f88d 103c 	strb.w	r1, [sp, #60]	; 0x3c
 8019fc4:	a90e      	add	r1, sp, #56	; 0x38
 8019fc6:	1a1b      	subs	r3, r3, r0
 8019fc8:	8ee0      	ldrh	r0, [r4, #54]	; 0x36
 8019fca:	f8ad 203e 	strh.w	r2, [sp, #62]	; 0x3e
 8019fce:	4403      	add	r3, r0
 8019fd0:	480c      	ldr	r0, [pc, #48]	; (801a004 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c8>)
 8019fd2:	f8ad 6042 	strh.w	r6, [sp, #66]	; 0x42
 8019fd6:	900e      	str	r0, [sp, #56]	; 0x38
 8019fd8:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8019fda:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 8019fde:	6803      	ldr	r3, [r0, #0]
 8019fe0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8019fe2:	4798      	blx	r3
 8019fe4:	792b      	ldrb	r3, [r5, #4]
 8019fe6:	2b00      	cmp	r3, #0
 8019fe8:	f43f af36 	beq.w	8019e58 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c>
 8019fec:	e9c4 660c 	strd	r6, r6, [r4, #48]	; 0x30
 8019ff0:	e732      	b.n	8019e58 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c>
 8019ff2:	bf00      	nop
 8019ff4:	2000580c 	.word	0x2000580c
 8019ff8:	08028e3c 	.word	0x08028e3c
 8019ffc:	20005800 	.word	0x20005800
 801a000:	20005802 	.word	0x20005802
 801a004:	0802adac 	.word	0x0802adac

0801a008 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>:
 801a008:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801a00a:	4604      	mov	r4, r0
 801a00c:	f934 2f0c 	ldrsh.w	r2, [r4, #12]!
 801a010:	3201      	adds	r2, #1
 801a012:	d112      	bne.n	801a03a <_ZN8touchgfx8Drawable20getCachedVisibleRectEv+0x32>
 801a014:	2500      	movs	r5, #0
 801a016:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 801a01a:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 801a01e:	6803      	ldr	r3, [r0, #0]
 801a020:	9500      	str	r5, [sp, #0]
 801a022:	466d      	mov	r5, sp
 801a024:	f8ad 1004 	strh.w	r1, [sp, #4]
 801a028:	f8ad 2006 	strh.w	r2, [sp, #6]
 801a02c:	4629      	mov	r1, r5
 801a02e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a030:	4798      	blx	r3
 801a032:	e895 0003 	ldmia.w	r5, {r0, r1}
 801a036:	e884 0003 	stmia.w	r4, {r0, r1}
 801a03a:	4620      	mov	r0, r4
 801a03c:	b003      	add	sp, #12
 801a03e:	bd30      	pop	{r4, r5, pc}

0801a040 <_ZN8touchgfx8Drawable13getCachedAbsXEv>:
 801a040:	b513      	push	{r0, r1, r4, lr}
 801a042:	f9b0 3020 	ldrsh.w	r3, [r0, #32]
 801a046:	4604      	mov	r4, r0
 801a048:	3301      	adds	r3, #1
 801a04a:	d109      	bne.n	801a060 <_ZN8touchgfx8Drawable13getCachedAbsXEv+0x20>
 801a04c:	4601      	mov	r1, r0
 801a04e:	4668      	mov	r0, sp
 801a050:	f7ff fd92 	bl	8019b78 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801a054:	f8bd 3000 	ldrh.w	r3, [sp]
 801a058:	8423      	strh	r3, [r4, #32]
 801a05a:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801a05e:	8463      	strh	r3, [r4, #34]	; 0x22
 801a060:	f9b4 0020 	ldrsh.w	r0, [r4, #32]
 801a064:	b002      	add	sp, #8
 801a066:	bd10      	pop	{r4, pc}

0801a068 <_ZN8touchgfx8Drawable13getCachedAbsYEv>:
 801a068:	b513      	push	{r0, r1, r4, lr}
 801a06a:	f9b0 3022 	ldrsh.w	r3, [r0, #34]	; 0x22
 801a06e:	4604      	mov	r4, r0
 801a070:	3301      	adds	r3, #1
 801a072:	d109      	bne.n	801a088 <_ZN8touchgfx8Drawable13getCachedAbsYEv+0x20>
 801a074:	4601      	mov	r1, r0
 801a076:	4668      	mov	r0, sp
 801a078:	f7ff fd7e 	bl	8019b78 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801a07c:	f8bd 3000 	ldrh.w	r3, [sp]
 801a080:	8423      	strh	r3, [r4, #32]
 801a082:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801a086:	8463      	strh	r3, [r4, #34]	; 0x22
 801a088:	f9b4 0022 	ldrsh.w	r0, [r4, #34]	; 0x22
 801a08c:	b002      	add	sp, #8
 801a08e:	bd10      	pop	{r4, pc}

0801a090 <_ZN8touchgfx6ScreenC1Ev>:
 801a090:	b570      	push	{r4, r5, r6, lr}
 801a092:	4b16      	ldr	r3, [pc, #88]	; (801a0ec <_ZN8touchgfx6ScreenC1Ev+0x5c>)
 801a094:	4605      	mov	r5, r0
 801a096:	4a16      	ldr	r2, [pc, #88]	; (801a0f0 <_ZN8touchgfx6ScreenC1Ev+0x60>)
 801a098:	2101      	movs	r1, #1
 801a09a:	f845 3b04 	str.w	r3, [r5], #4
 801a09e:	2300      	movs	r3, #0
 801a0a0:	6042      	str	r2, [r0, #4]
 801a0a2:	4604      	mov	r4, r0
 801a0a4:	8103      	strh	r3, [r0, #8]
 801a0a6:	8143      	strh	r3, [r0, #10]
 801a0a8:	8183      	strh	r3, [r0, #12]
 801a0aa:	81c3      	strh	r3, [r0, #14]
 801a0ac:	8203      	strh	r3, [r0, #16]
 801a0ae:	8243      	strh	r3, [r0, #18]
 801a0b0:	8283      	strh	r3, [r0, #20]
 801a0b2:	82c3      	strh	r3, [r0, #22]
 801a0b4:	6203      	str	r3, [r0, #32]
 801a0b6:	f880 3028 	strb.w	r3, [r0, #40]	; 0x28
 801a0ba:	6343      	str	r3, [r0, #52]	; 0x34
 801a0bc:	f880 1029 	strb.w	r1, [r0, #41]	; 0x29
 801a0c0:	f880 1038 	strb.w	r1, [r0, #56]	; 0x38
 801a0c4:	e9c0 3306 	strd	r3, r3, [r0, #24]
 801a0c8:	e9c0 330b 	strd	r3, r3, [r0, #44]	; 0x2c
 801a0cc:	4b09      	ldr	r3, [pc, #36]	; (801a0f4 <_ZN8touchgfx6ScreenC1Ev+0x64>)
 801a0ce:	4628      	mov	r0, r5
 801a0d0:	f9b3 6000 	ldrsh.w	r6, [r3]
 801a0d4:	6b53      	ldr	r3, [r2, #52]	; 0x34
 801a0d6:	4a08      	ldr	r2, [pc, #32]	; (801a0f8 <_ZN8touchgfx6ScreenC1Ev+0x68>)
 801a0d8:	f9b2 1000 	ldrsh.w	r1, [r2]
 801a0dc:	4798      	blx	r3
 801a0de:	6863      	ldr	r3, [r4, #4]
 801a0e0:	4628      	mov	r0, r5
 801a0e2:	4631      	mov	r1, r6
 801a0e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801a0e6:	4798      	blx	r3
 801a0e8:	4620      	mov	r0, r4
 801a0ea:	bd70      	pop	{r4, r5, r6, pc}
 801a0ec:	0802ade8 	.word	0x0802ade8
 801a0f0:	08029a78 	.word	0x08029a78
 801a0f4:	20005802 	.word	0x20005802
 801a0f8:	20005800 	.word	0x20005800

0801a0fc <_ZN8touchgfx6Screen4drawEv>:
 801a0fc:	4b09      	ldr	r3, [pc, #36]	; (801a124 <_ZN8touchgfx6Screen4drawEv+0x28>)
 801a0fe:	b507      	push	{r0, r1, r2, lr}
 801a100:	f9b3 2000 	ldrsh.w	r2, [r3]
 801a104:	2100      	movs	r1, #0
 801a106:	4b08      	ldr	r3, [pc, #32]	; (801a128 <_ZN8touchgfx6Screen4drawEv+0x2c>)
 801a108:	9100      	str	r1, [sp, #0]
 801a10a:	4669      	mov	r1, sp
 801a10c:	f9b3 3000 	ldrsh.w	r3, [r3]
 801a110:	f8ad 2004 	strh.w	r2, [sp, #4]
 801a114:	f8ad 3006 	strh.w	r3, [sp, #6]
 801a118:	6803      	ldr	r3, [r0, #0]
 801a11a:	689b      	ldr	r3, [r3, #8]
 801a11c:	4798      	blx	r3
 801a11e:	b003      	add	sp, #12
 801a120:	f85d fb04 	ldr.w	pc, [sp], #4
 801a124:	20005800 	.word	0x20005800
 801a128:	20005802 	.word	0x20005802

0801a12c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>:
 801a12c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a130:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 801a134:	b089      	sub	sp, #36	; 0x24
 801a136:	4680      	mov	r8, r0
 801a138:	460c      	mov	r4, r1
 801a13a:	2b00      	cmp	r3, #0
 801a13c:	4615      	mov	r5, r2
 801a13e:	dd0e      	ble.n	801a15e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 801a140:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 801a144:	2b00      	cmp	r3, #0
 801a146:	dd0a      	ble.n	801a15e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 801a148:	4628      	mov	r0, r5
 801a14a:	f7ff ff5d 	bl	801a008 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 801a14e:	4621      	mov	r1, r4
 801a150:	f7fe fc7c 	bl	8018a4c <_ZNK8touchgfx4Rect9intersectERKS0_>
 801a154:	69eb      	ldr	r3, [r5, #28]
 801a156:	b928      	cbnz	r0, 801a164 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x38>
 801a158:	461d      	mov	r5, r3
 801a15a:	2b00      	cmp	r3, #0
 801a15c:	d1f4      	bne.n	801a148 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1c>
 801a15e:	b009      	add	sp, #36	; 0x24
 801a160:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a164:	ae04      	add	r6, sp, #16
 801a166:	2b00      	cmp	r3, #0
 801a168:	f000 80b5 	beq.w	801a2d6 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 801a16c:	682b      	ldr	r3, [r5, #0]
 801a16e:	4629      	mov	r1, r5
 801a170:	a802      	add	r0, sp, #8
 801a172:	68db      	ldr	r3, [r3, #12]
 801a174:	4798      	blx	r3
 801a176:	4628      	mov	r0, r5
 801a178:	f7ff ff62 	bl	801a040 <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 801a17c:	f8bd 7008 	ldrh.w	r7, [sp, #8]
 801a180:	4407      	add	r7, r0
 801a182:	4628      	mov	r0, r5
 801a184:	f7ff ff70 	bl	801a068 <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 801a188:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 801a18c:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 801a190:	b23f      	sxth	r7, r7
 801a192:	4418      	add	r0, r3
 801a194:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 801a198:	4621      	mov	r1, r4
 801a19a:	f8ad 2014 	strh.w	r2, [sp, #20]
 801a19e:	f8ad 0012 	strh.w	r0, [sp, #18]
 801a1a2:	4630      	mov	r0, r6
 801a1a4:	f8ad 3016 	strh.w	r3, [sp, #22]
 801a1a8:	f8ad 7010 	strh.w	r7, [sp, #16]
 801a1ac:	f7fb f95a 	bl	8015464 <_ZN8touchgfx4RectaNERKS0_>
 801a1b0:	4628      	mov	r0, r5
 801a1b2:	f7ff ff29 	bl	801a008 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 801a1b6:	ab06      	add	r3, sp, #24
 801a1b8:	4602      	mov	r2, r0
 801a1ba:	e896 0003 	ldmia.w	r6, {r0, r1}
 801a1be:	e883 0003 	stmia.w	r3, {r0, r1}
 801a1c2:	4611      	mov	r1, r2
 801a1c4:	4618      	mov	r0, r3
 801a1c6:	f7fb f94d 	bl	8015464 <_ZN8touchgfx4RectaNERKS0_>
 801a1ca:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 801a1ce:	f9b4 1000 	ldrsh.w	r1, [r4]
 801a1d2:	f9bd a01a 	ldrsh.w	sl, [sp, #26]
 801a1d6:	4299      	cmp	r1, r3
 801a1d8:	f9bd b01c 	ldrsh.w	fp, [sp, #28]
 801a1dc:	f9bd 901e 	ldrsh.w	r9, [sp, #30]
 801a1e0:	d10b      	bne.n	801a1fa <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 801a1e2:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 801a1e6:	4552      	cmp	r2, sl
 801a1e8:	d107      	bne.n	801a1fa <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 801a1ea:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 801a1ee:	455a      	cmp	r2, fp
 801a1f0:	d103      	bne.n	801a1fa <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 801a1f2:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 801a1f6:	454a      	cmp	r2, r9
 801a1f8:	d06d      	beq.n	801a2d6 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 801a1fa:	f1bb 0f00 	cmp.w	fp, #0
 801a1fe:	dd65      	ble.n	801a2cc <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
 801a200:	f1b9 0f00 	cmp.w	r9, #0
 801a204:	dd62      	ble.n	801a2cc <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
 801a206:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 801a20a:	fa1f f08a 	uxth.w	r0, sl
 801a20e:	4552      	cmp	r2, sl
 801a210:	9000      	str	r0, [sp, #0]
 801a212:	da12      	bge.n	801a23a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x10e>
 801a214:	9301      	str	r3, [sp, #4]
 801a216:	9b00      	ldr	r3, [sp, #0]
 801a218:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 801a21c:	f8ad 2012 	strh.w	r2, [sp, #18]
 801a220:	1a9a      	subs	r2, r3, r2
 801a222:	f8ad 1010 	strh.w	r1, [sp, #16]
 801a226:	4631      	mov	r1, r6
 801a228:	f8ad 0014 	strh.w	r0, [sp, #20]
 801a22c:	4640      	mov	r0, r8
 801a22e:	f8ad 2016 	strh.w	r2, [sp, #22]
 801a232:	69ea      	ldr	r2, [r5, #28]
 801a234:	f7ff ff7a 	bl	801a12c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801a238:	9b01      	ldr	r3, [sp, #4]
 801a23a:	f9b4 2000 	ldrsh.w	r2, [r4]
 801a23e:	b29f      	uxth	r7, r3
 801a240:	429a      	cmp	r2, r3
 801a242:	da0d      	bge.n	801a260 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x134>
 801a244:	f8ad 2010 	strh.w	r2, [sp, #16]
 801a248:	1aba      	subs	r2, r7, r2
 801a24a:	f8ad a012 	strh.w	sl, [sp, #18]
 801a24e:	4631      	mov	r1, r6
 801a250:	f8ad 2014 	strh.w	r2, [sp, #20]
 801a254:	4640      	mov	r0, r8
 801a256:	f8ad 9016 	strh.w	r9, [sp, #22]
 801a25a:	69ea      	ldr	r2, [r5, #28]
 801a25c:	f7ff ff66 	bl	801a12c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801a260:	8822      	ldrh	r2, [r4, #0]
 801a262:	445f      	add	r7, fp
 801a264:	88a3      	ldrh	r3, [r4, #4]
 801a266:	b2bf      	uxth	r7, r7
 801a268:	4413      	add	r3, r2
 801a26a:	b23a      	sxth	r2, r7
 801a26c:	b29b      	uxth	r3, r3
 801a26e:	b219      	sxth	r1, r3
 801a270:	4291      	cmp	r1, r2
 801a272:	dd0d      	ble.n	801a290 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x164>
 801a274:	1bdb      	subs	r3, r3, r7
 801a276:	f8ad 2010 	strh.w	r2, [sp, #16]
 801a27a:	f8ad a012 	strh.w	sl, [sp, #18]
 801a27e:	4631      	mov	r1, r6
 801a280:	f8ad 3014 	strh.w	r3, [sp, #20]
 801a284:	4640      	mov	r0, r8
 801a286:	f8ad 9016 	strh.w	r9, [sp, #22]
 801a28a:	69ea      	ldr	r2, [r5, #28]
 801a28c:	f7ff ff4e 	bl	801a12c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801a290:	88e2      	ldrh	r2, [r4, #6]
 801a292:	8863      	ldrh	r3, [r4, #2]
 801a294:	4413      	add	r3, r2
 801a296:	9a00      	ldr	r2, [sp, #0]
 801a298:	444a      	add	r2, r9
 801a29a:	b29b      	uxth	r3, r3
 801a29c:	fa1f f982 	uxth.w	r9, r2
 801a2a0:	b219      	sxth	r1, r3
 801a2a2:	fa0f f289 	sxth.w	r2, r9
 801a2a6:	428a      	cmp	r2, r1
 801a2a8:	da15      	bge.n	801a2d6 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 801a2aa:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 801a2ae:	eba3 0309 	sub.w	r3, r3, r9
 801a2b2:	f9b4 0000 	ldrsh.w	r0, [r4]
 801a2b6:	f8ad 1014 	strh.w	r1, [sp, #20]
 801a2ba:	4631      	mov	r1, r6
 801a2bc:	f8ad 0010 	strh.w	r0, [sp, #16]
 801a2c0:	f8ad 2012 	strh.w	r2, [sp, #18]
 801a2c4:	f8ad 3016 	strh.w	r3, [sp, #22]
 801a2c8:	69ea      	ldr	r2, [r5, #28]
 801a2ca:	e001      	b.n	801a2d0 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a4>
 801a2cc:	69ea      	ldr	r2, [r5, #28]
 801a2ce:	4621      	mov	r1, r4
 801a2d0:	4640      	mov	r0, r8
 801a2d2:	f7ff ff2b 	bl	801a12c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801a2d6:	4628      	mov	r0, r5
 801a2d8:	f7ff fe96 	bl	801a008 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 801a2dc:	6861      	ldr	r1, [r4, #4]
 801a2de:	4602      	mov	r2, r0
 801a2e0:	4633      	mov	r3, r6
 801a2e2:	6820      	ldr	r0, [r4, #0]
 801a2e4:	c303      	stmia	r3!, {r0, r1}
 801a2e6:	4611      	mov	r1, r2
 801a2e8:	4630      	mov	r0, r6
 801a2ea:	f7fb f8bb 	bl	8015464 <_ZN8touchgfx4RectaNERKS0_>
 801a2ee:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 801a2f2:	2b00      	cmp	r3, #0
 801a2f4:	f77f af33 	ble.w	801a15e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 801a2f8:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 801a2fc:	2b00      	cmp	r3, #0
 801a2fe:	f77f af2e 	ble.w	801a15e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 801a302:	4628      	mov	r0, r5
 801a304:	f7ff fe9c 	bl	801a040 <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 801a308:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 801a30c:	1a18      	subs	r0, r3, r0
 801a30e:	f8ad 0010 	strh.w	r0, [sp, #16]
 801a312:	4628      	mov	r0, r5
 801a314:	f7ff fea8 	bl	801a068 <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 801a318:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 801a31c:	4631      	mov	r1, r6
 801a31e:	1a18      	subs	r0, r3, r0
 801a320:	f8ad 0012 	strh.w	r0, [sp, #18]
 801a324:	4628      	mov	r0, r5
 801a326:	682b      	ldr	r3, [r5, #0]
 801a328:	689b      	ldr	r3, [r3, #8]
 801a32a:	4798      	blx	r3
 801a32c:	e717      	b.n	801a15e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>

0801a32e <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>:
 801a32e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801a330:	2300      	movs	r3, #0
 801a332:	aa02      	add	r2, sp, #8
 801a334:	4604      	mov	r4, r0
 801a336:	3004      	adds	r0, #4
 801a338:	f842 3d04 	str.w	r3, [r2, #-4]!
 801a33c:	460d      	mov	r5, r1
 801a33e:	f7fb f969 	bl	8015614 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>
 801a342:	9a01      	ldr	r2, [sp, #4]
 801a344:	b11a      	cbz	r2, 801a34e <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE+0x20>
 801a346:	4629      	mov	r1, r5
 801a348:	4620      	mov	r0, r4
 801a34a:	f7ff feef 	bl	801a12c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801a34e:	b003      	add	sp, #12
 801a350:	bd30      	pop	{r4, r5, pc}

0801a352 <_ZN8touchgfx6Screen4drawERNS_4RectE>:
 801a352:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801a354:	4602      	mov	r2, r0
 801a356:	4604      	mov	r4, r0
 801a358:	460d      	mov	r5, r1
 801a35a:	466b      	mov	r3, sp
 801a35c:	f852 0f08 	ldr.w	r0, [r2, #8]!
 801a360:	6851      	ldr	r1, [r2, #4]
 801a362:	c303      	stmia	r3!, {r0, r1}
 801a364:	4629      	mov	r1, r5
 801a366:	4668      	mov	r0, sp
 801a368:	f7fb f87c 	bl	8015464 <_ZN8touchgfx4RectaNERKS0_>
 801a36c:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 801a370:	4669      	mov	r1, sp
 801a372:	b123      	cbz	r3, 801a37e <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2c>
 801a374:	4620      	mov	r0, r4
 801a376:	f7ff ffda 	bl	801a32e <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>
 801a37a:	b003      	add	sp, #12
 801a37c:	bd30      	pop	{r4, r5, pc}
 801a37e:	1d20      	adds	r0, r4, #4
 801a380:	f7fb f90f 	bl	80155a2 <_ZNK8touchgfx9Container4drawERKNS_4RectE>
 801a384:	e7f9      	b.n	801a37a <_ZN8touchgfx6Screen4drawERNS_4RectE+0x28>

0801a386 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>:
 801a386:	460b      	mov	r3, r1
 801a388:	680a      	ldr	r2, [r1, #0]
 801a38a:	1d01      	adds	r1, r0, #4
 801a38c:	6992      	ldr	r2, [r2, #24]
 801a38e:	4618      	mov	r0, r3
 801a390:	4710      	bx	r2

0801a392 <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst>:
 801a392:	b510      	push	{r4, lr}
 801a394:	4298      	cmp	r0, r3
 801a396:	eb01 0402 	add.w	r4, r1, r2
 801a39a:	b224      	sxth	r4, r4
 801a39c:	d22c      	bcs.n	801a3f8 <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst+0x66>
 801a39e:	b35b      	cbz	r3, 801a3f8 <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst+0x66>
 801a3a0:	ee07 0a90 	vmov	s15, r0
 801a3a4:	eeb8 6a67 	vcvt.f32.u32	s12, s15
 801a3a8:	ee07 3a90 	vmov	s15, r3
 801a3ac:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 801a3b0:	ee07 2a90 	vmov	s15, r2
 801a3b4:	ee86 7a26 	vdiv.f32	s14, s12, s13
 801a3b8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801a3bc:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 801a3c0:	ee07 1a90 	vmov	s15, r1
 801a3c4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801a3c8:	ee37 7a66 	vsub.f32	s14, s14, s13
 801a3cc:	ee67 5a07 	vmul.f32	s11, s14, s14
 801a3d0:	eee5 6a87 	vfma.f32	s13, s11, s14
 801a3d4:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 801a3d8:	eee6 7a26 	vfma.f32	s15, s12, s13
 801a3dc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801a3e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a3e4:	bfcc      	ite	gt
 801a3e6:	ee77 7a87 	vaddgt.f32	s15, s15, s14
 801a3ea:	ee77 7ac7 	vsuble.f32	s15, s15, s14
 801a3ee:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801a3f2:	ee17 3a90 	vmov	r3, s15
 801a3f6:	b21c      	sxth	r4, r3
 801a3f8:	4620      	mov	r0, r4
 801a3fa:	bd10      	pop	{r4, pc}

0801a3fc <_ZN8touchgfx12TextProviderC1Ev>:
 801a3fc:	2300      	movs	r3, #0
 801a3fe:	2201      	movs	r2, #1
 801a400:	b510      	push	{r4, lr}
 801a402:	4604      	mov	r4, r0
 801a404:	60c3      	str	r3, [r0, #12]
 801a406:	7403      	strb	r3, [r0, #16]
 801a408:	82c3      	strh	r3, [r0, #22]
 801a40a:	8303      	strh	r3, [r0, #24]
 801a40c:	85c3      	strh	r3, [r0, #46]	; 0x2e
 801a40e:	8603      	strh	r3, [r0, #48]	; 0x30
 801a410:	86c3      	strh	r3, [r0, #54]	; 0x36
 801a412:	8703      	strh	r3, [r0, #56]	; 0x38
 801a414:	63c3      	str	r3, [r0, #60]	; 0x3c
 801a416:	f8a0 304e 	strh.w	r3, [r0, #78]	; 0x4e
 801a41a:	f8a0 3050 	strh.w	r3, [r0, #80]	; 0x50
 801a41e:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
 801a422:	f880 2054 	strb.w	r2, [r0, #84]	; 0x54
 801a426:	f880 3055 	strb.w	r3, [r0, #85]	; 0x55
 801a42a:	e9c0 3300 	strd	r3, r3, [r0]
 801a42e:	f7f8 ff8f 	bl	8013350 <_ZN8touchgfx12TextProvider18initializeInternalEv>
 801a432:	4620      	mov	r0, r4
 801a434:	bd10      	pop	{r4, pc}

0801a436 <_ZN8touchgfx12TextProvider19getNextCharInternalEv>:
 801a436:	b530      	push	{r4, r5, lr}
 801a438:	2500      	movs	r5, #0
 801a43a:	2401      	movs	r4, #1
 801a43c:	6843      	ldr	r3, [r0, #4]
 801a43e:	b913      	cbnz	r3, 801a446 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x10>
 801a440:	6803      	ldr	r3, [r0, #0]
 801a442:	b1f3      	cbz	r3, 801a482 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x4c>
 801a444:	6043      	str	r3, [r0, #4]
 801a446:	7c03      	ldrb	r3, [r0, #16]
 801a448:	b143      	cbz	r3, 801a45c <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x26>
 801a44a:	68c3      	ldr	r3, [r0, #12]
 801a44c:	b12b      	cbz	r3, 801a45a <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 801a44e:	881a      	ldrh	r2, [r3, #0]
 801a450:	b11a      	cbz	r2, 801a45a <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 801a452:	1c9a      	adds	r2, r3, #2
 801a454:	60c2      	str	r2, [r0, #12]
 801a456:	8818      	ldrh	r0, [r3, #0]
 801a458:	bd30      	pop	{r4, r5, pc}
 801a45a:	7405      	strb	r5, [r0, #16]
 801a45c:	6843      	ldr	r3, [r0, #4]
 801a45e:	8819      	ldrh	r1, [r3, #0]
 801a460:	b179      	cbz	r1, 801a482 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x4c>
 801a462:	1c9a      	adds	r2, r3, #2
 801a464:	2902      	cmp	r1, #2
 801a466:	6042      	str	r2, [r0, #4]
 801a468:	d1f5      	bne.n	801a456 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x20>
 801a46a:	6883      	ldr	r3, [r0, #8]
 801a46c:	1d1a      	adds	r2, r3, #4
 801a46e:	6082      	str	r2, [r0, #8]
 801a470:	681b      	ldr	r3, [r3, #0]
 801a472:	60c3      	str	r3, [r0, #12]
 801a474:	2b00      	cmp	r3, #0
 801a476:	d0e1      	beq.n	801a43c <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801a478:	881b      	ldrh	r3, [r3, #0]
 801a47a:	2b00      	cmp	r3, #0
 801a47c:	d0de      	beq.n	801a43c <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801a47e:	7404      	strb	r4, [r0, #16]
 801a480:	e7dc      	b.n	801a43c <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801a482:	2000      	movs	r0, #0
 801a484:	e7e8      	b.n	801a458 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x22>

0801a486 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>:
 801a486:	63c3      	str	r3, [r0, #60]	; 0x3c
 801a488:	2300      	movs	r3, #0
 801a48a:	6082      	str	r2, [r0, #8]
 801a48c:	6001      	str	r1, [r0, #0]
 801a48e:	6043      	str	r3, [r0, #4]
 801a490:	60c3      	str	r3, [r0, #12]
 801a492:	7403      	strb	r3, [r0, #16]
 801a494:	8603      	strh	r3, [r0, #48]	; 0x30
 801a496:	8303      	strh	r3, [r0, #24]
 801a498:	8703      	strh	r3, [r0, #56]	; 0x38
 801a49a:	b410      	push	{r4}
 801a49c:	f85d 4b04 	ldr.w	r4, [sp], #4
 801a4a0:	f7f8 bf56 	b.w	8013350 <_ZN8touchgfx12TextProvider18initializeInternalEv>

0801a4a4 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>:
 801a4a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a4a6:	4605      	mov	r5, r0
 801a4a8:	4608      	mov	r0, r1
 801a4aa:	b1f1      	cbz	r1, 801a4ea <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x46>
 801a4ac:	f105 0440 	add.w	r4, r5, #64	; 0x40
 801a4b0:	460b      	mov	r3, r1
 801a4b2:	f101 0708 	add.w	r7, r1, #8
 801a4b6:	4622      	mov	r2, r4
 801a4b8:	6818      	ldr	r0, [r3, #0]
 801a4ba:	3308      	adds	r3, #8
 801a4bc:	f853 1c04 	ldr.w	r1, [r3, #-4]
 801a4c0:	4626      	mov	r6, r4
 801a4c2:	42bb      	cmp	r3, r7
 801a4c4:	c603      	stmia	r6!, {r0, r1}
 801a4c6:	4634      	mov	r4, r6
 801a4c8:	d1f6      	bne.n	801a4b8 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x14>
 801a4ca:	6818      	ldr	r0, [r3, #0]
 801a4cc:	6030      	str	r0, [r6, #0]
 801a4ce:	4610      	mov	r0, r2
 801a4d0:	889b      	ldrh	r3, [r3, #4]
 801a4d2:	80b3      	strh	r3, [r6, #4]
 801a4d4:	f895 304d 	ldrb.w	r3, [r5, #77]	; 0x4d
 801a4d8:	015b      	lsls	r3, r3, #5
 801a4da:	f403 7180 	and.w	r1, r3, #256	; 0x100
 801a4de:	f895 3046 	ldrb.w	r3, [r5, #70]	; 0x46
 801a4e2:	430b      	orrs	r3, r1
 801a4e4:	425b      	negs	r3, r3
 801a4e6:	f885 3049 	strb.w	r3, [r5, #73]	; 0x49
 801a4ea:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801a4ec <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>:
 801a4ec:	b538      	push	{r3, r4, r5, lr}
 801a4ee:	460c      	mov	r4, r1
 801a4f0:	6811      	ldr	r1, [r2, #0]
 801a4f2:	4610      	mov	r0, r2
 801a4f4:	68cd      	ldr	r5, [r1, #12]
 801a4f6:	4619      	mov	r1, r3
 801a4f8:	47a8      	blx	r5
 801a4fa:	2800      	cmp	r0, #0
 801a4fc:	bf08      	it	eq
 801a4fe:	4620      	moveq	r0, r4
 801a500:	bd38      	pop	{r3, r4, r5, pc}
	...

0801a504 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>:
 801a504:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a506:	4604      	mov	r4, r0
 801a508:	4615      	mov	r5, r2
 801a50a:	4608      	mov	r0, r1
 801a50c:	b93a      	cbnz	r2, 801a51e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1a>
 801a50e:	f8a4 204e 	strh.w	r2, [r4, #78]	; 0x4e
 801a512:	f8a4 2050 	strh.w	r2, [r4, #80]	; 0x50
 801a516:	f8a4 2052 	strh.w	r2, [r4, #82]	; 0x52
 801a51a:	4628      	mov	r0, r5
 801a51c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a51e:	f892 c00d 	ldrb.w	ip, [r2, #13]
 801a522:	8893      	ldrh	r3, [r2, #4]
 801a524:	ea4f 160c 	mov.w	r6, ip, lsl #4
 801a528:	f406 7280 	and.w	r2, r6, #256	; 0x100
 801a52c:	79ee      	ldrb	r6, [r5, #7]
 801a52e:	4316      	orrs	r6, r2
 801a530:	f46f 6263 	mvn.w	r2, #3632	; 0xe30
 801a534:	189a      	adds	r2, r3, r2
 801a536:	b2b7      	uxth	r7, r6
 801a538:	b291      	uxth	r1, r2
 801a53a:	291d      	cmp	r1, #29
 801a53c:	f200 8084 	bhi.w	801a648 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x144>
 801a540:	2201      	movs	r2, #1
 801a542:	10f6      	asrs	r6, r6, #3
 801a544:	408a      	lsls	r2, r1
 801a546:	4978      	ldr	r1, [pc, #480]	; (801a728 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x224>)
 801a548:	420a      	tst	r2, r1
 801a54a:	d12e      	bne.n	801a5aa <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xa6>
 801a54c:	f412 7f60 	tst.w	r2, #896	; 0x380
 801a550:	d07a      	beq.n	801a648 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x144>
 801a552:	f104 0240 	add.w	r2, r4, #64	; 0x40
 801a556:	462b      	mov	r3, r5
 801a558:	f105 0e08 	add.w	lr, r5, #8
 801a55c:	4615      	mov	r5, r2
 801a55e:	6818      	ldr	r0, [r3, #0]
 801a560:	3308      	adds	r3, #8
 801a562:	f853 1c04 	ldr.w	r1, [r3, #-4]
 801a566:	4694      	mov	ip, r2
 801a568:	4573      	cmp	r3, lr
 801a56a:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 801a56e:	4662      	mov	r2, ip
 801a570:	d1f5      	bne.n	801a55e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x5a>
 801a572:	6818      	ldr	r0, [r3, #0]
 801a574:	f8cc 0000 	str.w	r0, [ip]
 801a578:	889b      	ldrh	r3, [r3, #4]
 801a57a:	f8ac 3004 	strh.w	r3, [ip, #4]
 801a57e:	b2b3      	uxth	r3, r6
 801a580:	f8b4 1050 	ldrh.w	r1, [r4, #80]	; 0x50
 801a584:	f894 004d 	ldrb.w	r0, [r4, #77]	; 0x4d
 801a588:	1aca      	subs	r2, r1, r3
 801a58a:	1bcf      	subs	r7, r1, r7
 801a58c:	f020 0060 	bic.w	r0, r0, #96	; 0x60
 801a590:	b292      	uxth	r2, r2
 801a592:	1afb      	subs	r3, r7, r3
 801a594:	f884 2048 	strb.w	r2, [r4, #72]	; 0x48
 801a598:	10d2      	asrs	r2, r2, #3
 801a59a:	f002 0260 	and.w	r2, r2, #96	; 0x60
 801a59e:	4302      	orrs	r2, r0
 801a5a0:	f884 204d 	strb.w	r2, [r4, #77]	; 0x4d
 801a5a4:	f8a4 3050 	strh.w	r3, [r4, #80]	; 0x50
 801a5a8:	e7b7      	b.n	801a51a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x16>
 801a5aa:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 801a5ac:	b92b      	cbnz	r3, 801a5ba <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xb6>
 801a5ae:	4b5f      	ldr	r3, [pc, #380]	; (801a72c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x228>)
 801a5b0:	21c0      	movs	r1, #192	; 0xc0
 801a5b2:	4a5f      	ldr	r2, [pc, #380]	; (801a730 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x22c>)
 801a5b4:	485f      	ldr	r0, [pc, #380]	; (801a734 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x230>)
 801a5b6:	f00c fdb7 	bl	8027128 <__assert_func>
 801a5ba:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 801a5bc:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801a5c0:	8b59      	ldrh	r1, [r3, #26]
 801a5c2:	f640 6333 	movw	r3, #3635	; 0xe33
 801a5c6:	4299      	cmp	r1, r3
 801a5c8:	d110      	bne.n	801a5ec <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xe8>
 801a5ca:	6803      	ldr	r3, [r0, #0]
 801a5cc:	68db      	ldr	r3, [r3, #12]
 801a5ce:	4798      	blx	r3
 801a5d0:	7b41      	ldrb	r1, [r0, #13]
 801a5d2:	00cb      	lsls	r3, r1, #3
 801a5d4:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801a5d8:	7a03      	ldrb	r3, [r0, #8]
 801a5da:	0648      	lsls	r0, r1, #25
 801a5dc:	ea43 0302 	orr.w	r3, r3, r2
 801a5e0:	bf44      	itt	mi
 801a5e2:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801a5e6:	b21b      	sxthmi	r3, r3
 801a5e8:	f8a4 304e 	strh.w	r3, [r4, #78]	; 0x4e
 801a5ec:	f8b4 304e 	ldrh.w	r3, [r4, #78]	; 0x4e
 801a5f0:	462a      	mov	r2, r5
 801a5f2:	f105 0c08 	add.w	ip, r5, #8
 801a5f6:	443b      	add	r3, r7
 801a5f8:	4433      	add	r3, r6
 801a5fa:	f104 0640 	add.w	r6, r4, #64	; 0x40
 801a5fe:	b29b      	uxth	r3, r3
 801a600:	4635      	mov	r5, r6
 801a602:	f8a4 304e 	strh.w	r3, [r4, #78]	; 0x4e
 801a606:	6810      	ldr	r0, [r2, #0]
 801a608:	3208      	adds	r2, #8
 801a60a:	f852 1c04 	ldr.w	r1, [r2, #-4]
 801a60e:	4637      	mov	r7, r6
 801a610:	4562      	cmp	r2, ip
 801a612:	c703      	stmia	r7!, {r0, r1}
 801a614:	463e      	mov	r6, r7
 801a616:	d1f6      	bne.n	801a606 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x102>
 801a618:	6810      	ldr	r0, [r2, #0]
 801a61a:	6038      	str	r0, [r7, #0]
 801a61c:	8892      	ldrh	r2, [r2, #4]
 801a61e:	80ba      	strh	r2, [r7, #4]
 801a620:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
 801a624:	10db      	asrs	r3, r3, #3
 801a626:	f894 204d 	ldrb.w	r2, [r4, #77]	; 0x4d
 801a62a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801a62e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 801a632:	4313      	orrs	r3, r2
 801a634:	f894 2052 	ldrb.w	r2, [r4, #82]	; 0x52
 801a638:	f884 304d 	strb.w	r3, [r4, #77]	; 0x4d
 801a63c:	f894 3049 	ldrb.w	r3, [r4, #73]	; 0x49
 801a640:	1a9b      	subs	r3, r3, r2
 801a642:	f884 3049 	strb.w	r3, [r4, #73]	; 0x49
 801a646:	e768      	b.n	801a51a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x16>
 801a648:	f023 0204 	bic.w	r2, r3, #4
 801a64c:	f640 611b 	movw	r1, #3611	; 0xe1b
 801a650:	428a      	cmp	r2, r1
 801a652:	d003      	beq.n	801a65c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x158>
 801a654:	f640 621d 	movw	r2, #3613	; 0xe1d
 801a658:	4293      	cmp	r3, r2
 801a65a:	d120      	bne.n	801a69e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x19a>
 801a65c:	3b01      	subs	r3, #1
 801a65e:	4602      	mov	r2, r0
 801a660:	4629      	mov	r1, r5
 801a662:	4620      	mov	r0, r4
 801a664:	b29b      	uxth	r3, r3
 801a666:	f7ff ff41 	bl	801a4ec <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 801a66a:	7b41      	ldrb	r1, [r0, #13]
 801a66c:	00cb      	lsls	r3, r1, #3
 801a66e:	0649      	lsls	r1, r1, #25
 801a670:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801a674:	7a03      	ldrb	r3, [r0, #8]
 801a676:	ea43 0302 	orr.w	r3, r3, r2
 801a67a:	bf44      	itt	mi
 801a67c:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801a680:	b21b      	sxthmi	r3, r3
 801a682:	f8a4 304e 	strh.w	r3, [r4, #78]	; 0x4e
 801a686:	7b6b      	ldrb	r3, [r5, #13]
 801a688:	7aaa      	ldrb	r2, [r5, #10]
 801a68a:	005b      	lsls	r3, r3, #1
 801a68c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801a690:	4313      	orrs	r3, r2
 801a692:	115a      	asrs	r2, r3, #5
 801a694:	eb02 0393 	add.w	r3, r2, r3, lsr #2
 801a698:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
 801a69c:	e035      	b.n	801a70a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x206>
 801a69e:	ea4f 02cc 	mov.w	r2, ip, lsl #3
 801a6a2:	f01c 0f40 	tst.w	ip, #64	; 0x40
 801a6a6:	f402 7180 	and.w	r1, r2, #256	; 0x100
 801a6aa:	7a2a      	ldrb	r2, [r5, #8]
 801a6ac:	ea42 0201 	orr.w	r2, r2, r1
 801a6b0:	f640 6109 	movw	r1, #3593	; 0xe09
 801a6b4:	bf1c      	itt	ne
 801a6b6:	f5a2 7200 	subne.w	r2, r2, #512	; 0x200
 801a6ba:	b212      	sxthne	r2, r2
 801a6bc:	f8a4 204e 	strh.w	r2, [r4, #78]	; 0x4e
 801a6c0:	f023 0210 	bic.w	r2, r3, #16
 801a6c4:	428a      	cmp	r2, r1
 801a6c6:	d003      	beq.n	801a6d0 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1cc>
 801a6c8:	f640 6213 	movw	r2, #3603	; 0xe13
 801a6cc:	4293      	cmp	r3, r2
 801a6ce:	d129      	bne.n	801a724 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x220>
 801a6d0:	7b6e      	ldrb	r6, [r5, #13]
 801a6d2:	4629      	mov	r1, r5
 801a6d4:	0076      	lsls	r6, r6, #1
 801a6d6:	f406 7280 	and.w	r2, r6, #256	; 0x100
 801a6da:	7aae      	ldrb	r6, [r5, #10]
 801a6dc:	4316      	orrs	r6, r2
 801a6de:	f640 6213 	movw	r2, #3603	; 0xe13
 801a6e2:	4293      	cmp	r3, r2
 801a6e4:	4602      	mov	r2, r0
 801a6e6:	4620      	mov	r0, r4
 801a6e8:	bf16      	itet	ne
 801a6ea:	f103 33ff 	addne.w	r3, r3, #4294967295
 801a6ee:	f640 630c 	movweq	r3, #3596	; 0xe0c
 801a6f2:	b29b      	uxthne	r3, r3
 801a6f4:	f7ff fefa 	bl	801a4ec <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 801a6f8:	7b43      	ldrb	r3, [r0, #13]
 801a6fa:	7a82      	ldrb	r2, [r0, #10]
 801a6fc:	005b      	lsls	r3, r3, #1
 801a6fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801a702:	4313      	orrs	r3, r2
 801a704:	1af6      	subs	r6, r6, r3
 801a706:	f8a4 6052 	strh.w	r6, [r4, #82]	; 0x52
 801a70a:	7b69      	ldrb	r1, [r5, #13]
 801a70c:	00cb      	lsls	r3, r1, #3
 801a70e:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801a712:	7a2b      	ldrb	r3, [r5, #8]
 801a714:	4313      	orrs	r3, r2
 801a716:	064a      	lsls	r2, r1, #25
 801a718:	bf44      	itt	mi
 801a71a:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801a71e:	b21b      	sxthmi	r3, r3
 801a720:	1bdb      	subs	r3, r3, r7
 801a722:	e73f      	b.n	801a5a4 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xa0>
 801a724:	2300      	movs	r3, #0
 801a726:	e7b7      	b.n	801a698 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x194>
 801a728:	3fc00079 	.word	0x3fc00079
 801a72c:	0802ae14 	.word	0x0802ae14
 801a730:	0802b086 	.word	0x0802b086
 801a734:	0802ae1d 	.word	0x0802ae1d

0801a738 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>:
 801a738:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801a73c:	4604      	mov	r4, r0
 801a73e:	b942      	cbnz	r2, 801a752 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1a>
 801a740:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801a744:	f8a0 304e 	strh.w	r3, [r0, #78]	; 0x4e
 801a748:	f8a0 3050 	strh.w	r3, [r0, #80]	; 0x50
 801a74c:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
 801a750:	e046      	b.n	801a7e0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xa8>
 801a752:	7b51      	ldrb	r1, [r2, #13]
 801a754:	8893      	ldrh	r3, [r2, #4]
 801a756:	010f      	lsls	r7, r1, #4
 801a758:	f407 7080 	and.w	r0, r7, #256	; 0x100
 801a75c:	79d7      	ldrb	r7, [r2, #7]
 801a75e:	4307      	orrs	r7, r0
 801a760:	2f04      	cmp	r7, #4
 801a762:	b2bd      	uxth	r5, r7
 801a764:	bfcc      	ite	gt
 801a766:	08bf      	lsrgt	r7, r7, #2
 801a768:	2701      	movle	r7, #1
 801a76a:	f5b3 6fdd 	cmp.w	r3, #1768	; 0x6e8
 801a76e:	f200 80ab 	bhi.w	801a8c8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x190>
 801a772:	f240 60e7 	movw	r0, #1767	; 0x6e7
 801a776:	4283      	cmp	r3, r0
 801a778:	d216      	bcs.n	801a7a8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801a77a:	f240 605b 	movw	r0, #1627	; 0x65b
 801a77e:	4283      	cmp	r3, r0
 801a780:	d859      	bhi.n	801a836 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xfe>
 801a782:	f240 6057 	movw	r0, #1623	; 0x657
 801a786:	4283      	cmp	r3, r0
 801a788:	d20e      	bcs.n	801a7a8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801a78a:	f5b3 6fca 	cmp.w	r3, #1616	; 0x650
 801a78e:	d24a      	bcs.n	801a826 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xee>
 801a790:	f240 604e 	movw	r0, #1614	; 0x64e
 801a794:	4283      	cmp	r3, r0
 801a796:	d207      	bcs.n	801a7a8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801a798:	f240 601a 	movw	r0, #1562	; 0x61a
 801a79c:	4283      	cmp	r3, r0
 801a79e:	d02a      	beq.n	801a7f6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801a7a0:	d821      	bhi.n	801a7e6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xae>
 801a7a2:	f5b3 6fc2 	cmp.w	r3, #1552	; 0x610
 801a7a6:	d35b      	bcc.n	801a860 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 801a7a8:	f9b4 304e 	ldrsh.w	r3, [r4, #78]	; 0x4e
 801a7ac:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 801a7b0:	f040 80d0 	bne.w	801a954 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21c>
 801a7b4:	f9b4 0050 	ldrsh.w	r0, [r4, #80]	; 0x50
 801a7b8:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 801a7bc:	f040 80ca 	bne.w	801a954 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21c>
 801a7c0:	00cb      	lsls	r3, r1, #3
 801a7c2:	0649      	lsls	r1, r1, #25
 801a7c4:	f403 7080 	and.w	r0, r3, #256	; 0x100
 801a7c8:	7a13      	ldrb	r3, [r2, #8]
 801a7ca:	ea43 0300 	orr.w	r3, r3, r0
 801a7ce:	bf44      	itt	mi
 801a7d0:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801a7d4:	b21b      	sxthmi	r3, r3
 801a7d6:	f8a4 304e 	strh.w	r3, [r4, #78]	; 0x4e
 801a7da:	1b5d      	subs	r5, r3, r5
 801a7dc:	f8a4 5050 	strh.w	r5, [r4, #80]	; 0x50
 801a7e0:	4610      	mov	r0, r2
 801a7e2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801a7e6:	f240 604b 	movw	r0, #1611	; 0x64b
 801a7ea:	4283      	cmp	r3, r0
 801a7ec:	d338      	bcc.n	801a860 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 801a7ee:	f240 604c 	movw	r0, #1612	; 0x64c
 801a7f2:	4283      	cmp	r3, r0
 801a7f4:	d9d8      	bls.n	801a7a8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801a7f6:	f9b4 004e 	ldrsh.w	r0, [r4, #78]	; 0x4e
 801a7fa:	f9b4 3050 	ldrsh.w	r3, [r4, #80]	; 0x50
 801a7fe:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 801a802:	f040 80f2 	bne.w	801a9ea <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b2>
 801a806:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 801a80a:	f040 80ee 	bne.w	801a9ea <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b2>
 801a80e:	00cb      	lsls	r3, r1, #3
 801a810:	064e      	lsls	r6, r1, #25
 801a812:	f403 7080 	and.w	r0, r3, #256	; 0x100
 801a816:	7a13      	ldrb	r3, [r2, #8]
 801a818:	ea43 0300 	orr.w	r3, r3, r0
 801a81c:	bf44      	itt	mi
 801a81e:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801a822:	b21b      	sxthmi	r3, r3
 801a824:	e7d9      	b.n	801a7da <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xa2>
 801a826:	f240 6054 	movw	r0, #1620	; 0x654
 801a82a:	4283      	cmp	r3, r0
 801a82c:	d8e3      	bhi.n	801a7f6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801a82e:	f5b3 6fca 	cmp.w	r3, #1616	; 0x650
 801a832:	d9e0      	bls.n	801a7f6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801a834:	e7b8      	b.n	801a7a8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801a836:	f240 6074 	movw	r0, #1652	; 0x674
 801a83a:	4283      	cmp	r3, r0
 801a83c:	d0b4      	beq.n	801a7a8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801a83e:	d82d      	bhi.n	801a89c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x164>
 801a840:	f240 605e 	movw	r0, #1630	; 0x65e
 801a844:	4283      	cmp	r3, r0
 801a846:	d804      	bhi.n	801a852 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x11a>
 801a848:	f240 605d 	movw	r0, #1629	; 0x65d
 801a84c:	4283      	cmp	r3, r0
 801a84e:	d3d2      	bcc.n	801a7f6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801a850:	e7aa      	b.n	801a7a8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801a852:	f240 605f 	movw	r0, #1631	; 0x65f
 801a856:	4283      	cmp	r3, r0
 801a858:	d0cd      	beq.n	801a7f6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801a85a:	f5b3 6fce 	cmp.w	r3, #1648	; 0x670
 801a85e:	d0a3      	beq.n	801a7a8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801a860:	00cb      	lsls	r3, r1, #3
 801a862:	0649      	lsls	r1, r1, #25
 801a864:	f403 7080 	and.w	r0, r3, #256	; 0x100
 801a868:	7a13      	ldrb	r3, [r2, #8]
 801a86a:	ea43 0300 	orr.w	r3, r3, r0
 801a86e:	bf44      	itt	mi
 801a870:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801a874:	b21b      	sxthmi	r3, r3
 801a876:	1b5d      	subs	r5, r3, r5
 801a878:	f8a4 304e 	strh.w	r3, [r4, #78]	; 0x4e
 801a87c:	f8a4 5050 	strh.w	r5, [r4, #80]	; 0x50
 801a880:	7b53      	ldrb	r3, [r2, #13]
 801a882:	015b      	lsls	r3, r3, #5
 801a884:	f403 7180 	and.w	r1, r3, #256	; 0x100
 801a888:	7993      	ldrb	r3, [r2, #6]
 801a88a:	430b      	orrs	r3, r1
 801a88c:	2105      	movs	r1, #5
 801a88e:	005b      	lsls	r3, r3, #1
 801a890:	fb93 f3f1 	sdiv	r3, r3, r1
 801a894:	f992 1009 	ldrsb.w	r1, [r2, #9]
 801a898:	440b      	add	r3, r1
 801a89a:	e757      	b.n	801a74c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x14>
 801a89c:	f240 60e2 	movw	r0, #1762	; 0x6e2
 801a8a0:	4283      	cmp	r3, r0
 801a8a2:	d809      	bhi.n	801a8b8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x180>
 801a8a4:	f240 60df 	movw	r0, #1759	; 0x6df
 801a8a8:	4283      	cmp	r3, r0
 801a8aa:	f4bf af7d 	bcs.w	801a7a8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801a8ae:	f2a3 63d6 	subw	r3, r3, #1750	; 0x6d6
 801a8b2:	2b05      	cmp	r3, #5
 801a8b4:	d8d4      	bhi.n	801a860 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 801a8b6:	e777      	b.n	801a7a8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801a8b8:	f240 60e3 	movw	r0, #1763	; 0x6e3
 801a8bc:	4283      	cmp	r3, r0
 801a8be:	d09a      	beq.n	801a7f6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801a8c0:	f240 60e4 	movw	r0, #1764	; 0x6e4
 801a8c4:	4283      	cmp	r3, r0
 801a8c6:	e7ca      	b.n	801a85e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x126>
 801a8c8:	f5b3 6f0f 	cmp.w	r3, #2288	; 0x8f0
 801a8cc:	d22b      	bcs.n	801a926 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1ee>
 801a8ce:	f640 00ed 	movw	r0, #2285	; 0x8ed
 801a8d2:	4283      	cmp	r3, r0
 801a8d4:	d28f      	bcs.n	801a7f6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801a8d6:	f640 00e5 	movw	r0, #2277	; 0x8e5
 801a8da:	4283      	cmp	r3, r0
 801a8dc:	d816      	bhi.n	801a90c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d4>
 801a8de:	f640 00e4 	movw	r0, #2276	; 0x8e4
 801a8e2:	4283      	cmp	r3, r0
 801a8e4:	f4bf af60 	bcs.w	801a7a8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801a8e8:	f240 60ec 	movw	r0, #1772	; 0x6ec
 801a8ec:	4283      	cmp	r3, r0
 801a8ee:	d80a      	bhi.n	801a906 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1ce>
 801a8f0:	f240 60eb 	movw	r0, #1771	; 0x6eb
 801a8f4:	4283      	cmp	r3, r0
 801a8f6:	f4bf af57 	bcs.w	801a7a8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801a8fa:	f240 60ea 	movw	r0, #1770	; 0x6ea
 801a8fe:	4283      	cmp	r3, r0
 801a900:	f43f af79 	beq.w	801a7f6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801a904:	e7ac      	b.n	801a860 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 801a906:	f240 60ed 	movw	r0, #1773	; 0x6ed
 801a90a:	e7f8      	b.n	801a8fe <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1c6>
 801a90c:	f640 00e8 	movw	r0, #2280	; 0x8e8
 801a910:	4283      	cmp	r3, r0
 801a912:	d802      	bhi.n	801a91a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e2>
 801a914:	f640 00e7 	movw	r0, #2279	; 0x8e7
 801a918:	e798      	b.n	801a84c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x114>
 801a91a:	f640 00e9 	movw	r0, #2281	; 0x8e9
 801a91e:	4283      	cmp	r3, r0
 801a920:	f47f af42 	bne.w	801a7a8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801a924:	e767      	b.n	801a7f6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801a926:	f640 00f6 	movw	r0, #2294	; 0x8f6
 801a92a:	4283      	cmp	r3, r0
 801a92c:	f43f af63 	beq.w	801a7f6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801a930:	d802      	bhi.n	801a938 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x200>
 801a932:	f640 00f2 	movw	r0, #2290	; 0x8f2
 801a936:	e7f2      	b.n	801a91e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e6>
 801a938:	f640 00fa 	movw	r0, #2298	; 0x8fa
 801a93c:	4283      	cmp	r3, r0
 801a93e:	d805      	bhi.n	801a94c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x214>
 801a940:	f640 00f9 	movw	r0, #2297	; 0x8f9
 801a944:	4283      	cmp	r3, r0
 801a946:	f4ff af2f 	bcc.w	801a7a8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801a94a:	e754      	b.n	801a7f6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801a94c:	f640 00fe 	movw	r0, #2302	; 0x8fe
 801a950:	4283      	cmp	r3, r0
 801a952:	e7af      	b.n	801a8b4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x17c>
 801a954:	f104 0c40 	add.w	ip, r4, #64	; 0x40
 801a958:	4617      	mov	r7, r2
 801a95a:	f102 0808 	add.w	r8, r2, #8
 801a95e:	4666      	mov	r6, ip
 801a960:	6838      	ldr	r0, [r7, #0]
 801a962:	3708      	adds	r7, #8
 801a964:	f857 1c04 	ldr.w	r1, [r7, #-4]
 801a968:	46e6      	mov	lr, ip
 801a96a:	4547      	cmp	r7, r8
 801a96c:	e8ae 0003 	stmia.w	lr!, {r0, r1}
 801a970:	46f4      	mov	ip, lr
 801a972:	d1f5      	bne.n	801a960 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x228>
 801a974:	6838      	ldr	r0, [r7, #0]
 801a976:	f8ce 0000 	str.w	r0, [lr]
 801a97a:	88b9      	ldrh	r1, [r7, #4]
 801a97c:	f8ae 1004 	strh.w	r1, [lr, #4]
 801a980:	f9b4 0052 	ldrsh.w	r0, [r4, #82]	; 0x52
 801a984:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 801a988:	d009      	beq.n	801a99e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x266>
 801a98a:	7b51      	ldrb	r1, [r2, #13]
 801a98c:	7992      	ldrb	r2, [r2, #6]
 801a98e:	0149      	lsls	r1, r1, #5
 801a990:	f401 7180 	and.w	r1, r1, #256	; 0x100
 801a994:	4311      	orrs	r1, r2
 801a996:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 801a99a:	f884 0049 	strb.w	r0, [r4, #73]	; 0x49
 801a99e:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 801a9a2:	d00d      	beq.n	801a9c0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x288>
 801a9a4:	442b      	add	r3, r5
 801a9a6:	f894 204d 	ldrb.w	r2, [r4, #77]	; 0x4d
 801a9aa:	b29b      	uxth	r3, r3
 801a9ac:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 801a9b0:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
 801a9b4:	10db      	asrs	r3, r3, #3
 801a9b6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801a9ba:	4313      	orrs	r3, r2
 801a9bc:	f884 304d 	strb.w	r3, [r4, #77]	; 0x4d
 801a9c0:	f894 104d 	ldrb.w	r1, [r4, #77]	; 0x4d
 801a9c4:	00cb      	lsls	r3, r1, #3
 801a9c6:	064f      	lsls	r7, r1, #25
 801a9c8:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801a9cc:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 801a9d0:	ea43 0302 	orr.w	r3, r3, r2
 801a9d4:	bf44      	itt	mi
 801a9d6:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801a9da:	b21b      	sxthmi	r3, r3
 801a9dc:	f8a4 304e 	strh.w	r3, [r4, #78]	; 0x4e
 801a9e0:	1b5d      	subs	r5, r3, r5
 801a9e2:	4632      	mov	r2, r6
 801a9e4:	f8a4 5050 	strh.w	r5, [r4, #80]	; 0x50
 801a9e8:	e6fa      	b.n	801a7e0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xa8>
 801a9ea:	f104 0e40 	add.w	lr, r4, #64	; 0x40
 801a9ee:	4694      	mov	ip, r2
 801a9f0:	f102 0908 	add.w	r9, r2, #8
 801a9f4:	4676      	mov	r6, lr
 801a9f6:	f8dc 0000 	ldr.w	r0, [ip]
 801a9fa:	f10c 0c08 	add.w	ip, ip, #8
 801a9fe:	f85c 1c04 	ldr.w	r1, [ip, #-4]
 801aa02:	46f0      	mov	r8, lr
 801aa04:	45cc      	cmp	ip, r9
 801aa06:	e8a8 0003 	stmia.w	r8!, {r0, r1}
 801aa0a:	46c6      	mov	lr, r8
 801aa0c:	d1f3      	bne.n	801a9f6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2be>
 801aa0e:	f8dc 0000 	ldr.w	r0, [ip]
 801aa12:	f8c8 0000 	str.w	r0, [r8]
 801aa16:	f8bc 1004 	ldrh.w	r1, [ip, #4]
 801aa1a:	f8a8 1004 	strh.w	r1, [r8, #4]
 801aa1e:	f9b4 0052 	ldrsh.w	r0, [r4, #82]	; 0x52
 801aa22:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 801aa26:	d009      	beq.n	801aa3c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x304>
 801aa28:	7b51      	ldrb	r1, [r2, #13]
 801aa2a:	7992      	ldrb	r2, [r2, #6]
 801aa2c:	0149      	lsls	r1, r1, #5
 801aa2e:	f401 7180 	and.w	r1, r1, #256	; 0x100
 801aa32:	4311      	orrs	r1, r2
 801aa34:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 801aa38:	f884 0049 	strb.w	r0, [r4, #73]	; 0x49
 801aa3c:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 801aa40:	d00d      	beq.n	801aa5e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x326>
 801aa42:	1bdb      	subs	r3, r3, r7
 801aa44:	f894 204d 	ldrb.w	r2, [r4, #77]	; 0x4d
 801aa48:	b29b      	uxth	r3, r3
 801aa4a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 801aa4e:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
 801aa52:	10db      	asrs	r3, r3, #3
 801aa54:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801aa58:	4313      	orrs	r3, r2
 801aa5a:	f884 304d 	strb.w	r3, [r4, #77]	; 0x4d
 801aa5e:	f894 104d 	ldrb.w	r1, [r4, #77]	; 0x4d
 801aa62:	00cb      	lsls	r3, r1, #3
 801aa64:	0648      	lsls	r0, r1, #25
 801aa66:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801aa6a:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 801aa6e:	ea43 0302 	orr.w	r3, r3, r2
 801aa72:	bf44      	itt	mi
 801aa74:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801aa78:	b21b      	sxthmi	r3, r3
 801aa7a:	e7b1      	b.n	801a9e0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2a8>

0801aa7c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>:
 801aa7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801aa80:	461e      	mov	r6, r3
 801aa82:	8e03      	ldrh	r3, [r0, #48]	; 0x30
 801aa84:	4604      	mov	r4, r0
 801aa86:	4617      	mov	r7, r2
 801aa88:	b92b      	cbnz	r3, 801aa96 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x1a>
 801aa8a:	4b25      	ldr	r3, [pc, #148]	; (801ab20 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0xa4>)
 801aa8c:	21c0      	movs	r1, #192	; 0xc0
 801aa8e:	4a25      	ldr	r2, [pc, #148]	; (801ab24 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0xa8>)
 801aa90:	4825      	ldr	r0, [pc, #148]	; (801ab28 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0xac>)
 801aa92:	f00c fb49 	bl	8027128 <__assert_func>
 801aa96:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 801aa98:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 801aa9c:	f8b3 801a 	ldrh.w	r8, [r3, #26]
 801aaa0:	f7f8 fbb0 	bl	8013204 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801aaa4:	4605      	mov	r5, r0
 801aaa6:	b918      	cbnz	r0, 801aab0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x34>
 801aaa8:	6030      	str	r0, [r6, #0]
 801aaaa:	4628      	mov	r0, r5
 801aaac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801aab0:	683b      	ldr	r3, [r7, #0]
 801aab2:	4601      	mov	r1, r0
 801aab4:	4638      	mov	r0, r7
 801aab6:	68db      	ldr	r3, [r3, #12]
 801aab8:	4798      	blx	r3
 801aaba:	f5a8 63c0 	sub.w	r3, r8, #1536	; 0x600
 801aabe:	4602      	mov	r2, r0
 801aac0:	6030      	str	r0, [r6, #0]
 801aac2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801aac6:	d213      	bcs.n	801aaf0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x74>
 801aac8:	4643      	mov	r3, r8
 801aaca:	4639      	mov	r1, r7
 801aacc:	4620      	mov	r0, r4
 801aace:	f7ff fe33 	bl	801a738 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
 801aad2:	6030      	str	r0, [r6, #0]
 801aad4:	6833      	ldr	r3, [r6, #0]
 801aad6:	b143      	cbz	r3, 801aaea <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x6e>
 801aad8:	7b5a      	ldrb	r2, [r3, #13]
 801aada:	7a9b      	ldrb	r3, [r3, #10]
 801aadc:	0052      	lsls	r2, r2, #1
 801aade:	f402 7280 	and.w	r2, r2, #256	; 0x100
 801aae2:	4313      	orrs	r3, r2
 801aae4:	bf0c      	ite	eq
 801aae6:	2301      	moveq	r3, #1
 801aae8:	2300      	movne	r3, #0
 801aaea:	f884 3055 	strb.w	r3, [r4, #85]	; 0x55
 801aaee:	e7dc      	b.n	801aaaa <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x2e>
 801aaf0:	f5a5 6360 	sub.w	r3, r5, #3584	; 0xe00
 801aaf4:	b29b      	uxth	r3, r3
 801aaf6:	2b7f      	cmp	r3, #127	; 0x7f
 801aaf8:	d804      	bhi.n	801ab04 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x88>
 801aafa:	4639      	mov	r1, r7
 801aafc:	4620      	mov	r0, r4
 801aafe:	f7ff fd01 	bl	801a504 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 801ab02:	e7e6      	b.n	801aad2 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x56>
 801ab04:	f894 3055 	ldrb.w	r3, [r4, #85]	; 0x55
 801ab08:	2b00      	cmp	r3, #0
 801ab0a:	d0e3      	beq.n	801aad4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x58>
 801ab0c:	f640 1302 	movw	r3, #2306	; 0x902
 801ab10:	429d      	cmp	r5, r3
 801ab12:	d1df      	bne.n	801aad4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x58>
 801ab14:	4601      	mov	r1, r0
 801ab16:	4620      	mov	r0, r4
 801ab18:	f7ff fcc4 	bl	801a4a4 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 801ab1c:	e7d9      	b.n	801aad2 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x56>
 801ab1e:	bf00      	nop
 801ab20:	0802ae14 	.word	0x0802ae14
 801ab24:	0802b086 	.word	0x0802b086
 801ab28:	0802ae1d 	.word	0x0802ae1d

0801ab2c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh>:
 801ab2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801ab30:	461e      	mov	r6, r3
 801ab32:	8e03      	ldrh	r3, [r0, #48]	; 0x30
 801ab34:	4604      	mov	r4, r0
 801ab36:	4617      	mov	r7, r2
 801ab38:	b92b      	cbnz	r3, 801ab46 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x1a>
 801ab3a:	4b26      	ldr	r3, [pc, #152]	; (801abd4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0xa8>)
 801ab3c:	21c0      	movs	r1, #192	; 0xc0
 801ab3e:	4a26      	ldr	r2, [pc, #152]	; (801abd8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0xac>)
 801ab40:	4826      	ldr	r0, [pc, #152]	; (801abdc <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0xb0>)
 801ab42:	f00c faf1 	bl	8027128 <__assert_func>
 801ab46:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 801ab48:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 801ab4c:	f8b3 801a 	ldrh.w	r8, [r3, #26]
 801ab50:	f7f8 fb58 	bl	8013204 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801ab54:	4605      	mov	r5, r0
 801ab56:	b918      	cbnz	r0, 801ab60 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x34>
 801ab58:	6030      	str	r0, [r6, #0]
 801ab5a:	4628      	mov	r0, r5
 801ab5c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801ab60:	683b      	ldr	r3, [r7, #0]
 801ab62:	4601      	mov	r1, r0
 801ab64:	4638      	mov	r0, r7
 801ab66:	f8d3 9008 	ldr.w	r9, [r3, #8]
 801ab6a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801ab6e:	47c8      	blx	r9
 801ab70:	f5a8 63c0 	sub.w	r3, r8, #1536	; 0x600
 801ab74:	4602      	mov	r2, r0
 801ab76:	6030      	str	r0, [r6, #0]
 801ab78:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801ab7c:	d213      	bcs.n	801aba6 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x7a>
 801ab7e:	4643      	mov	r3, r8
 801ab80:	4639      	mov	r1, r7
 801ab82:	4620      	mov	r0, r4
 801ab84:	f7ff fdd8 	bl	801a738 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
 801ab88:	6030      	str	r0, [r6, #0]
 801ab8a:	6833      	ldr	r3, [r6, #0]
 801ab8c:	b143      	cbz	r3, 801aba0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x74>
 801ab8e:	7b5a      	ldrb	r2, [r3, #13]
 801ab90:	7a9b      	ldrb	r3, [r3, #10]
 801ab92:	0052      	lsls	r2, r2, #1
 801ab94:	f402 7280 	and.w	r2, r2, #256	; 0x100
 801ab98:	4313      	orrs	r3, r2
 801ab9a:	bf0c      	ite	eq
 801ab9c:	2301      	moveq	r3, #1
 801ab9e:	2300      	movne	r3, #0
 801aba0:	f884 3055 	strb.w	r3, [r4, #85]	; 0x55
 801aba4:	e7d9      	b.n	801ab5a <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x2e>
 801aba6:	f5a5 6360 	sub.w	r3, r5, #3584	; 0xe00
 801abaa:	b29b      	uxth	r3, r3
 801abac:	2b7f      	cmp	r3, #127	; 0x7f
 801abae:	d804      	bhi.n	801abba <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x8e>
 801abb0:	4639      	mov	r1, r7
 801abb2:	4620      	mov	r0, r4
 801abb4:	f7ff fca6 	bl	801a504 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 801abb8:	e7e6      	b.n	801ab88 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x5c>
 801abba:	f894 3055 	ldrb.w	r3, [r4, #85]	; 0x55
 801abbe:	2b00      	cmp	r3, #0
 801abc0:	d0e3      	beq.n	801ab8a <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x5e>
 801abc2:	f640 1302 	movw	r3, #2306	; 0x902
 801abc6:	429d      	cmp	r5, r3
 801abc8:	d1df      	bne.n	801ab8a <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x5e>
 801abca:	4601      	mov	r1, r0
 801abcc:	4620      	mov	r0, r4
 801abce:	f7ff fc69 	bl	801a4a4 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 801abd2:	e7d9      	b.n	801ab88 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x5c>
 801abd4:	0802ae14 	.word	0x0802ae14
 801abd8:	0802b086 	.word	0x0802b086
 801abdc:	0802ae1d 	.word	0x0802ae1d

0801abe0 <_ZN8touchgfx12TextProvider15fillInputBufferEv>:
 801abe0:	b510      	push	{r4, lr}
 801abe2:	4604      	mov	r4, r0
 801abe4:	8f21      	ldrh	r1, [r4, #56]	; 0x38
 801abe6:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 801abe8:	b9d9      	cbnz	r1, 801ac22 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x42>
 801abea:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 801abec:	2b0a      	cmp	r3, #10
 801abee:	d036      	beq.n	801ac5e <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x7e>
 801abf0:	4620      	mov	r0, r4
 801abf2:	f7ff fc20 	bl	801a436 <_ZN8touchgfx12TextProvider19getNextCharInternalEv>
 801abf6:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 801abf8:	2b09      	cmp	r3, #9
 801abfa:	d906      	bls.n	801ac0a <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x2a>
 801abfc:	4b18      	ldr	r3, [pc, #96]	; (801ac60 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x80>)
 801abfe:	f44f 7182 	mov.w	r1, #260	; 0x104
 801ac02:	4a18      	ldr	r2, [pc, #96]	; (801ac64 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x84>)
 801ac04:	4818      	ldr	r0, [pc, #96]	; (801ac68 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x88>)
 801ac06:	f00c fa8f 	bl	8027128 <__assert_func>
 801ac0a:	1c5a      	adds	r2, r3, #1
 801ac0c:	8622      	strh	r2, [r4, #48]	; 0x30
 801ac0e:	8de2      	ldrh	r2, [r4, #46]	; 0x2e
 801ac10:	4413      	add	r3, r2
 801ac12:	b29b      	uxth	r3, r3
 801ac14:	2b09      	cmp	r3, #9
 801ac16:	bf88      	it	hi
 801ac18:	3b0a      	subhi	r3, #10
 801ac1a:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801ac1e:	8358      	strh	r0, [r3, #26]
 801ac20:	e7e3      	b.n	801abea <_ZN8touchgfx12TextProvider15fillInputBufferEv+0xa>
 801ac22:	2b0a      	cmp	r3, #10
 801ac24:	d01b      	beq.n	801ac5e <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x7e>
 801ac26:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 801ac28:	3901      	subs	r1, #1
 801ac2a:	eb04 0042 	add.w	r0, r4, r2, lsl #1
 801ac2e:	8e40      	ldrh	r0, [r0, #50]	; 0x32
 801ac30:	8721      	strh	r1, [r4, #56]	; 0x38
 801ac32:	1c51      	adds	r1, r2, #1
 801ac34:	b289      	uxth	r1, r1
 801ac36:	2901      	cmp	r1, #1
 801ac38:	bf8a      	itet	hi
 801ac3a:	f102 32ff 	addhi.w	r2, r2, #4294967295
 801ac3e:	86e1      	strhls	r1, [r4, #54]	; 0x36
 801ac40:	86e2      	strhhi	r2, [r4, #54]	; 0x36
 801ac42:	2b09      	cmp	r3, #9
 801ac44:	d8da      	bhi.n	801abfc <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x1c>
 801ac46:	1c5a      	adds	r2, r3, #1
 801ac48:	8622      	strh	r2, [r4, #48]	; 0x30
 801ac4a:	8de2      	ldrh	r2, [r4, #46]	; 0x2e
 801ac4c:	4413      	add	r3, r2
 801ac4e:	b29b      	uxth	r3, r3
 801ac50:	2b09      	cmp	r3, #9
 801ac52:	bf88      	it	hi
 801ac54:	3b0a      	subhi	r3, #10
 801ac56:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801ac5a:	8358      	strh	r0, [r3, #26]
 801ac5c:	e7c2      	b.n	801abe4 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x4>
 801ac5e:	bd10      	pop	{r4, pc}
 801ac60:	0802ae49 	.word	0x0802ae49
 801ac64:	0802b1dc 	.word	0x0802b1dc
 801ac68:	0802ae1d 	.word	0x0802ae1d

0801ac6c <_ZN8touchgfx12TextProvider11getNextCharEv>:
 801ac6c:	b538      	push	{r3, r4, r5, lr}
 801ac6e:	8e02      	ldrh	r2, [r0, #48]	; 0x30
 801ac70:	4604      	mov	r4, r0
 801ac72:	b92a      	cbnz	r2, 801ac80 <_ZN8touchgfx12TextProvider11getNextCharEv+0x14>
 801ac74:	4b13      	ldr	r3, [pc, #76]	; (801acc4 <_ZN8touchgfx12TextProvider11getNextCharEv+0x58>)
 801ac76:	21d5      	movs	r1, #213	; 0xd5
 801ac78:	4a13      	ldr	r2, [pc, #76]	; (801acc8 <_ZN8touchgfx12TextProvider11getNextCharEv+0x5c>)
 801ac7a:	4814      	ldr	r0, [pc, #80]	; (801accc <_ZN8touchgfx12TextProvider11getNextCharEv+0x60>)
 801ac7c:	f00c fa54 	bl	8027128 <__assert_func>
 801ac80:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 801ac82:	3a01      	subs	r2, #1
 801ac84:	eb00 0143 	add.w	r1, r0, r3, lsl #1
 801ac88:	8b4d      	ldrh	r5, [r1, #26]
 801ac8a:	8602      	strh	r2, [r0, #48]	; 0x30
 801ac8c:	1c5a      	adds	r2, r3, #1
 801ac8e:	b292      	uxth	r2, r2
 801ac90:	2a09      	cmp	r2, #9
 801ac92:	bf8a      	itet	hi
 801ac94:	3b09      	subhi	r3, #9
 801ac96:	85c2      	strhls	r2, [r0, #46]	; 0x2e
 801ac98:	85c3      	strhhi	r3, [r0, #46]	; 0x2e
 801ac9a:	f7ff ffa1 	bl	801abe0 <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 801ac9e:	8b23      	ldrh	r3, [r4, #24]
 801aca0:	2b01      	cmp	r3, #1
 801aca2:	bf9c      	itt	ls
 801aca4:	3301      	addls	r3, #1
 801aca6:	8323      	strhls	r3, [r4, #24]
 801aca8:	8ae3      	ldrh	r3, [r4, #22]
 801acaa:	b90b      	cbnz	r3, 801acb0 <_ZN8touchgfx12TextProvider11getNextCharEv+0x44>
 801acac:	2302      	movs	r3, #2
 801acae:	82e3      	strh	r3, [r4, #22]
 801acb0:	8ae3      	ldrh	r3, [r4, #22]
 801acb2:	4628      	mov	r0, r5
 801acb4:	3b01      	subs	r3, #1
 801acb6:	b29b      	uxth	r3, r3
 801acb8:	82e3      	strh	r3, [r4, #22]
 801acba:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801acbe:	8265      	strh	r5, [r4, #18]
 801acc0:	bd38      	pop	{r3, r4, r5, pc}
 801acc2:	bf00      	nop
 801acc4:	0802ae14 	.word	0x0802ae14
 801acc8:	0802b131 	.word	0x0802b131
 801accc:	0802ae1d 	.word	0x0802ae1d

0801acd0 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>:
 801acd0:	428a      	cmp	r2, r1
 801acd2:	b538      	push	{r3, r4, r5, lr}
 801acd4:	8e04      	ldrh	r4, [r0, #48]	; 0x30
 801acd6:	d90c      	bls.n	801acf2 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x22>
 801acd8:	b92c      	cbnz	r4, 801ace6 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x16>
 801acda:	4b1c      	ldr	r3, [pc, #112]	; (801ad4c <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x7c>)
 801acdc:	21e1      	movs	r1, #225	; 0xe1
 801acde:	4a1c      	ldr	r2, [pc, #112]	; (801ad50 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x80>)
 801ace0:	481c      	ldr	r0, [pc, #112]	; (801ad54 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x84>)
 801ace2:	f00c fa21 	bl	8027128 <__assert_func>
 801ace6:	3c01      	subs	r4, #1
 801ace8:	4b1b      	ldr	r3, [pc, #108]	; (801ad58 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x88>)
 801acea:	4a1c      	ldr	r2, [pc, #112]	; (801ad5c <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x8c>)
 801acec:	21c5      	movs	r1, #197	; 0xc5
 801acee:	8604      	strh	r4, [r0, #48]	; 0x30
 801acf0:	e7f6      	b.n	801ace0 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x10>
 801acf2:	428c      	cmp	r4, r1
 801acf4:	d203      	bcs.n	801acfe <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x2e>
 801acf6:	4b1a      	ldr	r3, [pc, #104]	; (801ad60 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x90>)
 801acf8:	21cb      	movs	r1, #203	; 0xcb
 801acfa:	4a1a      	ldr	r2, [pc, #104]	; (801ad64 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x94>)
 801acfc:	e7f0      	b.n	801ace0 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x10>
 801acfe:	1a64      	subs	r4, r4, r1
 801ad00:	250a      	movs	r5, #10
 801ad02:	8604      	strh	r4, [r0, #48]	; 0x30
 801ad04:	8dc4      	ldrh	r4, [r0, #46]	; 0x2e
 801ad06:	4421      	add	r1, r4
 801ad08:	b289      	uxth	r1, r1
 801ad0a:	2909      	cmp	r1, #9
 801ad0c:	bf88      	it	hi
 801ad0e:	390a      	subhi	r1, #10
 801ad10:	85c1      	strh	r1, [r0, #46]	; 0x2e
 801ad12:	b1ba      	cbz	r2, 801ad44 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x74>
 801ad14:	3a01      	subs	r2, #1
 801ad16:	8e01      	ldrh	r1, [r0, #48]	; 0x30
 801ad18:	b292      	uxth	r2, r2
 801ad1a:	2909      	cmp	r1, #9
 801ad1c:	f833 4012 	ldrh.w	r4, [r3, r2, lsl #1]
 801ad20:	d903      	bls.n	801ad2a <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x5a>
 801ad22:	4b11      	ldr	r3, [pc, #68]	; (801ad68 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x98>)
 801ad24:	21e6      	movs	r1, #230	; 0xe6
 801ad26:	4a11      	ldr	r2, [pc, #68]	; (801ad6c <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x9c>)
 801ad28:	e7da      	b.n	801ace0 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x10>
 801ad2a:	3101      	adds	r1, #1
 801ad2c:	8601      	strh	r1, [r0, #48]	; 0x30
 801ad2e:	8dc1      	ldrh	r1, [r0, #46]	; 0x2e
 801ad30:	b901      	cbnz	r1, 801ad34 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x64>
 801ad32:	85c5      	strh	r5, [r0, #46]	; 0x2e
 801ad34:	8dc1      	ldrh	r1, [r0, #46]	; 0x2e
 801ad36:	3901      	subs	r1, #1
 801ad38:	b289      	uxth	r1, r1
 801ad3a:	85c1      	strh	r1, [r0, #46]	; 0x2e
 801ad3c:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 801ad40:	834c      	strh	r4, [r1, #26]
 801ad42:	e7e6      	b.n	801ad12 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x42>
 801ad44:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801ad48:	f7ff bf4a 	b.w	801abe0 <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 801ad4c:	0802ae14 	.word	0x0802ae14
 801ad50:	0802af0a 	.word	0x0802af0a
 801ad54:	0802ae1d 	.word	0x0802ae1d
 801ad58:	0802ae55 	.word	0x0802ae55
 801ad5c:	0802afb4 	.word	0x0802afb4
 801ad60:	0802ae63 	.word	0x0802ae63
 801ad64:	0802b28b 	.word	0x0802b28b
 801ad68:	0802ae6f 	.word	0x0802ae6f
 801ad6c:	0802ae82 	.word	0x0802ae82

0801ad70 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>:
 801ad70:	3a01      	subs	r2, #1
 801ad72:	b570      	push	{r4, r5, r6, lr}
 801ad74:	b292      	uxth	r2, r2
 801ad76:	f64f 76ff 	movw	r6, #65535	; 0xffff
 801ad7a:	42b2      	cmp	r2, r6
 801ad7c:	d019      	beq.n	801adb2 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x42>
 801ad7e:	8b04      	ldrh	r4, [r0, #24]
 801ad80:	f831 5b02 	ldrh.w	r5, [r1], #2
 801ad84:	4294      	cmp	r4, r2
 801ad86:	d805      	bhi.n	801ad94 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x24>
 801ad88:	4b19      	ldr	r3, [pc, #100]	; (801adf0 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x80>)
 801ad8a:	4a1a      	ldr	r2, [pc, #104]	; (801adf4 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x84>)
 801ad8c:	21c5      	movs	r1, #197	; 0xc5
 801ad8e:	481a      	ldr	r0, [pc, #104]	; (801adf8 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x88>)
 801ad90:	f00c f9ca 	bl	8027128 <__assert_func>
 801ad94:	8ac4      	ldrh	r4, [r0, #22]
 801ad96:	4414      	add	r4, r2
 801ad98:	3a01      	subs	r2, #1
 801ad9a:	b2a4      	uxth	r4, r4
 801ad9c:	b292      	uxth	r2, r2
 801ad9e:	2c01      	cmp	r4, #1
 801ada0:	bf88      	it	hi
 801ada2:	3c02      	subhi	r4, #2
 801ada4:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 801ada8:	8a64      	ldrh	r4, [r4, #18]
 801adaa:	42ac      	cmp	r4, r5
 801adac:	d0e5      	beq.n	801ad7a <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0xa>
 801adae:	2000      	movs	r0, #0
 801adb0:	bd70      	pop	{r4, r5, r6, pc}
 801adb2:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 801adb6:	2400      	movs	r4, #0
 801adb8:	4413      	add	r3, r2
 801adba:	b2a2      	uxth	r2, r4
 801adbc:	429a      	cmp	r2, r3
 801adbe:	da14      	bge.n	801adea <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x7a>
 801adc0:	8e06      	ldrh	r6, [r0, #48]	; 0x30
 801adc2:	f831 5014 	ldrh.w	r5, [r1, r4, lsl #1]
 801adc6:	4296      	cmp	r6, r2
 801adc8:	d802      	bhi.n	801add0 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x60>
 801adca:	4b09      	ldr	r3, [pc, #36]	; (801adf0 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x80>)
 801adcc:	4a0b      	ldr	r2, [pc, #44]	; (801adfc <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x8c>)
 801adce:	e7dd      	b.n	801ad8c <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x1c>
 801add0:	8dc6      	ldrh	r6, [r0, #46]	; 0x2e
 801add2:	3401      	adds	r4, #1
 801add4:	4432      	add	r2, r6
 801add6:	b292      	uxth	r2, r2
 801add8:	2a09      	cmp	r2, #9
 801adda:	bf88      	it	hi
 801addc:	3a0a      	subhi	r2, #10
 801adde:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 801ade2:	8b52      	ldrh	r2, [r2, #26]
 801ade4:	42aa      	cmp	r2, r5
 801ade6:	d0e8      	beq.n	801adba <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x4a>
 801ade8:	e7e1      	b.n	801adae <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x3e>
 801adea:	2001      	movs	r0, #1
 801adec:	e7e0      	b.n	801adb0 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x40>
 801adee:	bf00      	nop
 801adf0:	0802ae55 	.word	0x0802ae55
 801adf4:	0802b30f 	.word	0x0802b30f
 801adf8:	0802ae1d 	.word	0x0802ae1d
 801adfc:	0802afb4 	.word	0x0802afb4

0801ae00 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>:
 801ae00:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ae04:	4605      	mov	r5, r0
 801ae06:	4616      	mov	r6, r2
 801ae08:	1c8c      	adds	r4, r1, #2
 801ae0a:	8809      	ldrh	r1, [r1, #0]
 801ae0c:	ea4f 3a11 	mov.w	sl, r1, lsr #12
 801ae10:	f834 301a 	ldrh.w	r3, [r4, sl, lsl #1]
 801ae14:	42b3      	cmp	r3, r6
 801ae16:	d124      	bne.n	801ae62 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x62>
 801ae18:	f3c1 2903 	ubfx	r9, r1, #8, #4
 801ae1c:	f3c1 1803 	ubfx	r8, r1, #4, #4
 801ae20:	f001 070f 	and.w	r7, r1, #15
 801ae24:	4652      	mov	r2, sl
 801ae26:	f8cd 8000 	str.w	r8, [sp]
 801ae2a:	464b      	mov	r3, r9
 801ae2c:	4621      	mov	r1, r4
 801ae2e:	4628      	mov	r0, r5
 801ae30:	f7ff ff9e 	bl	801ad70 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>
 801ae34:	4683      	mov	fp, r0
 801ae36:	b168      	cbz	r0, 801ae54 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x54>
 801ae38:	eb0a 0109 	add.w	r1, sl, r9
 801ae3c:	463a      	mov	r2, r7
 801ae3e:	4628      	mov	r0, r5
 801ae40:	4441      	add	r1, r8
 801ae42:	eb04 0341 	add.w	r3, r4, r1, lsl #1
 801ae46:	4649      	mov	r1, r9
 801ae48:	f7ff ff42 	bl	801acd0 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>
 801ae4c:	4658      	mov	r0, fp
 801ae4e:	b003      	add	sp, #12
 801ae50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ae54:	eb07 010a 	add.w	r1, r7, sl
 801ae58:	4449      	add	r1, r9
 801ae5a:	4441      	add	r1, r8
 801ae5c:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 801ae60:	e7d2      	b.n	801ae08 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x8>
 801ae62:	f04f 0b00 	mov.w	fp, #0
 801ae66:	e7f1      	b.n	801ae4c <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x4c>

0801ae68 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>:
 801ae68:	b570      	push	{r4, r5, r6, lr}
 801ae6a:	8810      	ldrh	r0, [r2, #0]
 801ae6c:	4298      	cmp	r0, r3
 801ae6e:	d817      	bhi.n	801aea0 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 801ae70:	1e48      	subs	r0, r1, #1
 801ae72:	f832 0020 	ldrh.w	r0, [r2, r0, lsl #2]
 801ae76:	4298      	cmp	r0, r3
 801ae78:	d312      	bcc.n	801aea0 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 801ae7a:	2400      	movs	r4, #0
 801ae7c:	428c      	cmp	r4, r1
 801ae7e:	d20f      	bcs.n	801aea0 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 801ae80:	1860      	adds	r0, r4, r1
 801ae82:	1040      	asrs	r0, r0, #1
 801ae84:	f832 6020 	ldrh.w	r6, [r2, r0, lsl #2]
 801ae88:	0085      	lsls	r5, r0, #2
 801ae8a:	42b3      	cmp	r3, r6
 801ae8c:	d902      	bls.n	801ae94 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x2c>
 801ae8e:	3001      	adds	r0, #1
 801ae90:	b284      	uxth	r4, r0
 801ae92:	e7f3      	b.n	801ae7c <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 801ae94:	d201      	bcs.n	801ae9a <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x32>
 801ae96:	b281      	uxth	r1, r0
 801ae98:	e7f0      	b.n	801ae7c <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 801ae9a:	442a      	add	r2, r5
 801ae9c:	8850      	ldrh	r0, [r2, #2]
 801ae9e:	bd70      	pop	{r4, r5, r6, pc}
 801aea0:	2000      	movs	r0, #0
 801aea2:	e7fc      	b.n	801ae9e <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x36>

0801aea4 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>:
 801aea4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801aea8:	6bc5      	ldr	r5, [r0, #60]	; 0x3c
 801aeaa:	4604      	mov	r4, r0
 801aeac:	260b      	movs	r6, #11
 801aeae:	886f      	ldrh	r7, [r5, #2]
 801aeb0:	087f      	lsrs	r7, r7, #1
 801aeb2:	3e01      	subs	r6, #1
 801aeb4:	d01b      	beq.n	801aeee <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x4a>
 801aeb6:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 801aeb8:	b92b      	cbnz	r3, 801aec6 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x22>
 801aeba:	4b0e      	ldr	r3, [pc, #56]	; (801aef4 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x50>)
 801aebc:	21c0      	movs	r1, #192	; 0xc0
 801aebe:	4a0e      	ldr	r2, [pc, #56]	; (801aef8 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x54>)
 801aec0:	480e      	ldr	r0, [pc, #56]	; (801aefc <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x58>)
 801aec2:	f00c f931 	bl	8027128 <__assert_func>
 801aec6:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 801aec8:	462a      	mov	r2, r5
 801aeca:	4639      	mov	r1, r7
 801aecc:	4620      	mov	r0, r4
 801aece:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801aed2:	f8b3 801a 	ldrh.w	r8, [r3, #26]
 801aed6:	4643      	mov	r3, r8
 801aed8:	f7ff ffc6 	bl	801ae68 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>
 801aedc:	b138      	cbz	r0, 801aeee <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x4a>
 801aede:	eb05 0140 	add.w	r1, r5, r0, lsl #1
 801aee2:	4642      	mov	r2, r8
 801aee4:	4620      	mov	r0, r4
 801aee6:	f7ff ff8b 	bl	801ae00 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>
 801aeea:	2800      	cmp	r0, #0
 801aeec:	d1e1      	bne.n	801aeb2 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0xe>
 801aeee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801aef2:	bf00      	nop
 801aef4:	0802ae14 	.word	0x0802ae14
 801aef8:	0802b086 	.word	0x0802b086
 801aefc:	0802ae1d 	.word	0x0802ae1d

0801af00 <_ZN8touchgfx8ceil28_4El>:
 801af00:	f110 030f 	adds.w	r3, r0, #15
 801af04:	d401      	bmi.n	801af0a <_ZN8touchgfx8ceil28_4El+0xa>
 801af06:	1118      	asrs	r0, r3, #4
 801af08:	4770      	bx	lr
 801af0a:	2210      	movs	r2, #16
 801af0c:	f1c0 0001 	rsb	r0, r0, #1
 801af10:	fb93 f3f2 	sdiv	r3, r3, r2
 801af14:	f010 000f 	ands.w	r0, r0, #15
 801af18:	bf18      	it	ne
 801af1a:	2001      	movne	r0, #1
 801af1c:	1a18      	subs	r0, r3, r0
 801af1e:	4770      	bx	lr

0801af20 <_ZN8touchgfx11floorDivModEllRlS0_>:
 801af20:	2900      	cmp	r1, #0
 801af22:	b538      	push	{r3, r4, r5, lr}
 801af24:	dc05      	bgt.n	801af32 <_ZN8touchgfx11floorDivModEllRlS0_+0x12>
 801af26:	4b0f      	ldr	r3, [pc, #60]	; (801af64 <_ZN8touchgfx11floorDivModEllRlS0_+0x44>)
 801af28:	21fa      	movs	r1, #250	; 0xfa
 801af2a:	4a0f      	ldr	r2, [pc, #60]	; (801af68 <_ZN8touchgfx11floorDivModEllRlS0_+0x48>)
 801af2c:	480f      	ldr	r0, [pc, #60]	; (801af6c <_ZN8touchgfx11floorDivModEllRlS0_+0x4c>)
 801af2e:	f00c f8fb 	bl	8027128 <__assert_func>
 801af32:	2800      	cmp	r0, #0
 801af34:	db06      	blt.n	801af44 <_ZN8touchgfx11floorDivModEllRlS0_+0x24>
 801af36:	fb90 f4f1 	sdiv	r4, r0, r1
 801af3a:	fb01 0114 	mls	r1, r1, r4, r0
 801af3e:	6014      	str	r4, [r2, #0]
 801af40:	6019      	str	r1, [r3, #0]
 801af42:	bd38      	pop	{r3, r4, r5, pc}
 801af44:	4240      	negs	r0, r0
 801af46:	fb90 f4f1 	sdiv	r4, r0, r1
 801af4a:	4265      	negs	r5, r4
 801af4c:	fb01 0014 	mls	r0, r1, r4, r0
 801af50:	6015      	str	r5, [r2, #0]
 801af52:	6018      	str	r0, [r3, #0]
 801af54:	2800      	cmp	r0, #0
 801af56:	d0f4      	beq.n	801af42 <_ZN8touchgfx11floorDivModEllRlS0_+0x22>
 801af58:	6810      	ldr	r0, [r2, #0]
 801af5a:	3801      	subs	r0, #1
 801af5c:	6010      	str	r0, [r2, #0]
 801af5e:	6818      	ldr	r0, [r3, #0]
 801af60:	1a09      	subs	r1, r1, r0
 801af62:	e7ed      	b.n	801af40 <_ZN8touchgfx11floorDivModEllRlS0_+0x20>
 801af64:	0802b3e0 	.word	0x0802b3e0
 801af68:	0802b41f 	.word	0x0802b41f
 801af6c:	0802b3f0 	.word	0x0802b3f0

0801af70 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>:
 801af70:	b570      	push	{r4, r5, r6, lr}
 801af72:	694a      	ldr	r2, [r1, #20]
 801af74:	6a8d      	ldr	r5, [r1, #40]	; 0x28
 801af76:	684b      	ldr	r3, [r1, #4]
 801af78:	1b54      	subs	r4, r2, r5
 801af7a:	6ace      	ldr	r6, [r1, #44]	; 0x2c
 801af7c:	f000 8106 	beq.w	801b18c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x21c>
 801af80:	1b9b      	subs	r3, r3, r6
 801af82:	d003      	beq.n	801af8c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 801af84:	4363      	muls	r3, r4
 801af86:	2210      	movs	r2, #16
 801af88:	fb93 f3f2 	sdiv	r3, r3, r2
 801af8c:	680c      	ldr	r4, [r1, #0]
 801af8e:	698a      	ldr	r2, [r1, #24]
 801af90:	1b65      	subs	r5, r4, r5
 801af92:	f000 80fd 	beq.w	801b190 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x220>
 801af96:	1b92      	subs	r2, r2, r6
 801af98:	d003      	beq.n	801afa2 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 801af9a:	436a      	muls	r2, r5
 801af9c:	2410      	movs	r4, #16
 801af9e:	fb92 f2f4 	sdiv	r2, r2, r4
 801afa2:	1a9b      	subs	r3, r3, r2
 801afa4:	ed9f 4a89 	vldr	s8, [pc, #548]	; 801b1cc <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x25c>
 801afa8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801afac:	460a      	mov	r2, r1
 801afae:	ee07 3a90 	vmov	s15, r3
 801afb2:	f100 040c 	add.w	r4, r0, #12
 801afb6:	4603      	mov	r3, r0
 801afb8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801afbc:	ee67 7a84 	vmul.f32	s15, s15, s8
 801afc0:	ee87 3a27 	vdiv.f32	s6, s14, s15
 801afc4:	eeb1 6a43 	vneg.f32	s12, s6
 801afc8:	edd2 7a02 	vldr	s15, [r2, #8]
 801afcc:	3214      	adds	r2, #20
 801afce:	eec7 6a27 	vdiv.f32	s13, s14, s15
 801afd2:	ece3 6a01 	vstmia	r3!, {s13}
 801afd6:	429c      	cmp	r4, r3
 801afd8:	ed52 7a02 	vldr	s15, [r2, #-8]
 801afdc:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801afe0:	edc3 7a02 	vstr	s15, [r3, #8]
 801afe4:	ed52 7a01 	vldr	s15, [r2, #-4]
 801afe8:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801afec:	edc3 7a05 	vstr	s15, [r3, #20]
 801aff0:	d1ea      	bne.n	801afc8 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x58>
 801aff2:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 801aff4:	698b      	ldr	r3, [r1, #24]
 801aff6:	edd0 4a02 	vldr	s9, [r0, #8]
 801affa:	1a9b      	subs	r3, r3, r2
 801affc:	edd0 3a00 	vldr	s7, [r0]
 801b000:	edd0 6a01 	vldr	s13, [r0, #4]
 801b004:	ee07 3a90 	vmov	s15, r3
 801b008:	684b      	ldr	r3, [r1, #4]
 801b00a:	ee76 6ae4 	vsub.f32	s13, s13, s9
 801b00e:	ed90 5a05 	vldr	s10, [r0, #20]
 801b012:	1a9b      	subs	r3, r3, r2
 801b014:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801b018:	ee73 4ae4 	vsub.f32	s9, s7, s9
 801b01c:	ed90 2a03 	vldr	s4, [r0, #12]
 801b020:	ee07 3a10 	vmov	s14, r3
 801b024:	edd0 5a04 	vldr	s11, [r0, #16]
 801b028:	ee67 7a84 	vmul.f32	s15, s15, s8
 801b02c:	ed90 1a07 	vldr	s2, [r0, #28]
 801b030:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801b034:	edd0 2a06 	vldr	s5, [r0, #24]
 801b038:	ee75 5ac5 	vsub.f32	s11, s11, s10
 801b03c:	ee64 7ae7 	vnmul.f32	s15, s9, s15
 801b040:	ee27 7a04 	vmul.f32	s14, s14, s8
 801b044:	ee32 5a45 	vsub.f32	s10, s4, s10
 801b048:	eee6 7a87 	vfma.f32	s15, s13, s14
 801b04c:	ee67 7a83 	vmul.f32	s15, s15, s6
 801b050:	edc0 7a09 	vstr	s15, [r0, #36]	; 0x24
 801b054:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 801b056:	694a      	ldr	r2, [r1, #20]
 801b058:	1b13      	subs	r3, r2, r4
 801b05a:	ee07 3a10 	vmov	s14, r3
 801b05e:	680b      	ldr	r3, [r1, #0]
 801b060:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801b064:	1b1b      	subs	r3, r3, r4
 801b066:	ee27 7a04 	vmul.f32	s14, s14, s8
 801b06a:	ee64 4ac7 	vnmul.f32	s9, s9, s14
 801b06e:	ee07 3a10 	vmov	s14, r3
 801b072:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801b076:	ee27 7a04 	vmul.f32	s14, s14, s8
 801b07a:	eee6 4a87 	vfma.f32	s9, s13, s14
 801b07e:	ee64 4a86 	vmul.f32	s9, s9, s12
 801b082:	edc0 4a0a 	vstr	s9, [r0, #40]	; 0x28
 801b086:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 801b088:	698b      	ldr	r3, [r1, #24]
 801b08a:	1a9b      	subs	r3, r3, r2
 801b08c:	ee06 3a90 	vmov	s13, r3
 801b090:	684b      	ldr	r3, [r1, #4]
 801b092:	1a9b      	subs	r3, r3, r2
 801b094:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 801b098:	ee07 3a10 	vmov	s14, r3
 801b09c:	ee66 6a84 	vmul.f32	s13, s13, s8
 801b0a0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801b0a4:	ee65 6a66 	vnmul.f32	s13, s10, s13
 801b0a8:	ee27 7a04 	vmul.f32	s14, s14, s8
 801b0ac:	eee5 6a87 	vfma.f32	s13, s11, s14
 801b0b0:	ee66 6a83 	vmul.f32	s13, s13, s6
 801b0b4:	edc0 6a0b 	vstr	s13, [r0, #44]	; 0x2c
 801b0b8:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 801b0ba:	694a      	ldr	r2, [r1, #20]
 801b0bc:	1b13      	subs	r3, r2, r4
 801b0be:	ee07 3a10 	vmov	s14, r3
 801b0c2:	680b      	ldr	r3, [r1, #0]
 801b0c4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801b0c8:	1b1b      	subs	r3, r3, r4
 801b0ca:	ee27 7a04 	vmul.f32	s14, s14, s8
 801b0ce:	ee25 5a47 	vnmul.f32	s10, s10, s14
 801b0d2:	ee07 3a10 	vmov	s14, r3
 801b0d6:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801b0da:	ee27 7a04 	vmul.f32	s14, s14, s8
 801b0de:	eea5 5a87 	vfma.f32	s10, s11, s14
 801b0e2:	edd0 5a08 	vldr	s11, [r0, #32]
 801b0e6:	ee31 1a65 	vsub.f32	s2, s2, s11
 801b0ea:	ee72 5ae5 	vsub.f32	s11, s5, s11
 801b0ee:	ee25 5a06 	vmul.f32	s10, s10, s12
 801b0f2:	ed80 5a0c 	vstr	s10, [r0, #48]	; 0x30
 801b0f6:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 801b0f8:	698b      	ldr	r3, [r1, #24]
 801b0fa:	1a9b      	subs	r3, r3, r2
 801b0fc:	ee07 3a10 	vmov	s14, r3
 801b100:	684b      	ldr	r3, [r1, #4]
 801b102:	1a9b      	subs	r3, r3, r2
 801b104:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801b108:	ee01 3a90 	vmov	s3, r3
 801b10c:	ee27 7a04 	vmul.f32	s14, s14, s8
 801b110:	eef8 1ae1 	vcvt.f32.s32	s3, s3
 801b114:	ee25 7ac7 	vnmul.f32	s14, s11, s14
 801b118:	ee61 1a84 	vmul.f32	s3, s3, s8
 801b11c:	eea1 7a21 	vfma.f32	s14, s2, s3
 801b120:	ee27 7a03 	vmul.f32	s14, s14, s6
 801b124:	ed80 7a0d 	vstr	s14, [r0, #52]	; 0x34
 801b128:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 801b12a:	694a      	ldr	r2, [r1, #20]
 801b12c:	1b13      	subs	r3, r2, r4
 801b12e:	ee03 3a10 	vmov	s6, r3
 801b132:	680b      	ldr	r3, [r1, #0]
 801b134:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 801b138:	1b1b      	subs	r3, r3, r4
 801b13a:	ee23 3a04 	vmul.f32	s6, s6, s8
 801b13e:	ee65 5ac3 	vnmul.f32	s11, s11, s6
 801b142:	ee03 3a10 	vmov	s6, r3
 801b146:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 801b14a:	ee23 4a04 	vmul.f32	s8, s6, s8
 801b14e:	eee1 5a04 	vfma.f32	s11, s2, s8
 801b152:	ee25 6a86 	vmul.f32	s12, s11, s12
 801b156:	ee62 5a67 	vnmul.f32	s11, s4, s15
 801b15a:	ed80 6a0e 	vstr	s12, [r0, #56]	; 0x38
 801b15e:	eee3 5aa6 	vfma.f32	s11, s7, s13
 801b162:	eef5 5ac0 	vcmpe.f32	s11, #0.0
 801b166:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b16a:	dd13      	ble.n	801b194 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x224>
 801b16c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801b170:	ee62 7ae7 	vnmul.f32	s15, s5, s15
 801b174:	63c3      	str	r3, [r0, #60]	; 0x3c
 801b176:	eee3 7a87 	vfma.f32	s15, s7, s14
 801b17a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801b17e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b182:	dd15      	ble.n	801b1b0 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x240>
 801b184:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801b188:	6403      	str	r3, [r0, #64]	; 0x40
 801b18a:	bd70      	pop	{r4, r5, r6, pc}
 801b18c:	4623      	mov	r3, r4
 801b18e:	e6fd      	b.n	801af8c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 801b190:	462a      	mov	r2, r5
 801b192:	e706      	b.n	801afa2 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 801b194:	d502      	bpl.n	801b19c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x22c>
 801b196:	f647 73ff 	movw	r3, #32767	; 0x7fff
 801b19a:	e7e9      	b.n	801b170 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x200>
 801b19c:	ee22 2a64 	vnmul.f32	s4, s4, s9
 801b1a0:	eea3 2a85 	vfma.f32	s4, s7, s10
 801b1a4:	eeb5 2ac0 	vcmpe.f32	s4, #0.0
 801b1a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b1ac:	dade      	bge.n	801b16c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1fc>
 801b1ae:	e7f2      	b.n	801b196 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x226>
 801b1b0:	d502      	bpl.n	801b1b8 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x248>
 801b1b2:	f647 73ff 	movw	r3, #32767	; 0x7fff
 801b1b6:	e7e7      	b.n	801b188 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x218>
 801b1b8:	ee62 4ae4 	vnmul.f32	s9, s5, s9
 801b1bc:	eee3 4a86 	vfma.f32	s9, s7, s12
 801b1c0:	eef5 4ac0 	vcmpe.f32	s9, #0.0
 801b1c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b1c8:	dadc      	bge.n	801b184 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x214>
 801b1ca:	e7f2      	b.n	801b1b2 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x242>
 801b1cc:	3d800000 	.word	0x3d800000

0801b1d0 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>:
 801b1d0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b1d4:	f04f 0814 	mov.w	r8, #20
 801b1d8:	4604      	mov	r4, r0
 801b1da:	4617      	mov	r7, r2
 801b1dc:	460d      	mov	r5, r1
 801b1de:	fb08 f903 	mul.w	r9, r8, r3
 801b1e2:	461e      	mov	r6, r3
 801b1e4:	eb02 0a09 	add.w	sl, r2, r9
 801b1e8:	f8da 0004 	ldr.w	r0, [sl, #4]
 801b1ec:	f7ff fe88 	bl	801af00 <_ZN8touchgfx8ceil28_4El>
 801b1f0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801b1f2:	6160      	str	r0, [r4, #20]
 801b1f4:	fb08 f803 	mul.w	r8, r8, r3
 801b1f8:	9001      	str	r0, [sp, #4]
 801b1fa:	eb07 0b08 	add.w	fp, r7, r8
 801b1fe:	f8db 0004 	ldr.w	r0, [fp, #4]
 801b202:	f7ff fe7d 	bl	801af00 <_ZN8touchgfx8ceil28_4El>
 801b206:	9a01      	ldr	r2, [sp, #4]
 801b208:	1a80      	subs	r0, r0, r2
 801b20a:	61a0      	str	r0, [r4, #24]
 801b20c:	2800      	cmp	r0, #0
 801b20e:	f000 8088 	beq.w	801b322 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x152>
 801b212:	f857 3009 	ldr.w	r3, [r7, r9]
 801b216:	f857 c008 	ldr.w	ip, [r7, r8]
 801b21a:	f8db 0004 	ldr.w	r0, [fp, #4]
 801b21e:	ebac 0c03 	sub.w	ip, ip, r3
 801b222:	f8da 1004 	ldr.w	r1, [sl, #4]
 801b226:	ea4f 1b0c 	mov.w	fp, ip, lsl #4
 801b22a:	1a40      	subs	r0, r0, r1
 801b22c:	fb0b f202 	mul.w	r2, fp, r2
 801b230:	ea4f 1800 	mov.w	r8, r0, lsl #4
 801b234:	fb0c 2211 	mls	r2, ip, r1, r2
 801b238:	4641      	mov	r1, r8
 801b23a:	fb00 2003 	mla	r0, r0, r3, r2
 801b23e:	f104 0310 	add.w	r3, r4, #16
 801b242:	4622      	mov	r2, r4
 801b244:	3801      	subs	r0, #1
 801b246:	4440      	add	r0, r8
 801b248:	f7ff fe6a 	bl	801af20 <_ZN8touchgfx11floorDivModEllRlS0_>
 801b24c:	f104 0308 	add.w	r3, r4, #8
 801b250:	1d22      	adds	r2, r4, #4
 801b252:	4641      	mov	r1, r8
 801b254:	4658      	mov	r0, fp
 801b256:	f7ff fe63 	bl	801af20 <_ZN8touchgfx11floorDivModEllRlS0_>
 801b25a:	f8c4 800c 	str.w	r8, [r4, #12]
 801b25e:	6962      	ldr	r2, [r4, #20]
 801b260:	f8da 3004 	ldr.w	r3, [sl, #4]
 801b264:	eddf 6a31 	vldr	s13, [pc, #196]	; 801b32c <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x15c>
 801b268:	ebc3 1302 	rsb	r3, r3, r2, lsl #4
 801b26c:	6822      	ldr	r2, [r4, #0]
 801b26e:	ed95 6a0a 	vldr	s12, [r5, #40]	; 0x28
 801b272:	ee07 3a10 	vmov	s14, r3
 801b276:	f857 3009 	ldr.w	r3, [r7, r9]
 801b27a:	ebc3 1302 	rsb	r3, r3, r2, lsl #4
 801b27e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801b282:	ee07 3a90 	vmov	s15, r3
 801b286:	eb05 0386 	add.w	r3, r5, r6, lsl #2
 801b28a:	ee27 7a26 	vmul.f32	s14, s14, s13
 801b28e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801b292:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801b296:	edd3 6a00 	vldr	s13, [r3]
 801b29a:	eee6 6a07 	vfma.f32	s13, s12, s14
 801b29e:	ed95 6a09 	vldr	s12, [r5, #36]	; 0x24
 801b2a2:	eee6 6a27 	vfma.f32	s13, s12, s15
 801b2a6:	edc4 6a07 	vstr	s13, [r4, #28]
 801b2aa:	edd4 6a01 	vldr	s13, [r4, #4]
 801b2ae:	edd5 5a09 	vldr	s11, [r5, #36]	; 0x24
 801b2b2:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 801b2b6:	ed95 6a0a 	vldr	s12, [r5, #40]	; 0x28
 801b2ba:	eea6 6aa5 	vfma.f32	s12, s13, s11
 801b2be:	ed84 6a08 	vstr	s12, [r4, #32]
 801b2c2:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 801b2c4:	6262      	str	r2, [r4, #36]	; 0x24
 801b2c6:	edd5 5a0c 	vldr	s11, [r5, #48]	; 0x30
 801b2ca:	ed93 6a03 	vldr	s12, [r3, #12]
 801b2ce:	eea5 6a87 	vfma.f32	s12, s11, s14
 801b2d2:	edd5 5a0b 	vldr	s11, [r5, #44]	; 0x2c
 801b2d6:	eea5 6aa7 	vfma.f32	s12, s11, s15
 801b2da:	ed84 6a0a 	vstr	s12, [r4, #40]	; 0x28
 801b2de:	edd5 5a0b 	vldr	s11, [r5, #44]	; 0x2c
 801b2e2:	ed95 6a0c 	vldr	s12, [r5, #48]	; 0x30
 801b2e6:	eea6 6aa5 	vfma.f32	s12, s13, s11
 801b2ea:	ed84 6a0b 	vstr	s12, [r4, #44]	; 0x2c
 801b2ee:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 801b2f0:	6322      	str	r2, [r4, #48]	; 0x30
 801b2f2:	ed93 6a06 	vldr	s12, [r3, #24]
 801b2f6:	edd5 5a0e 	vldr	s11, [r5, #56]	; 0x38
 801b2fa:	eea5 6a87 	vfma.f32	s12, s11, s14
 801b2fe:	eeb0 7a46 	vmov.f32	s14, s12
 801b302:	ed95 6a0d 	vldr	s12, [r5, #52]	; 0x34
 801b306:	eea6 7a27 	vfma.f32	s14, s12, s15
 801b30a:	ed84 7a0d 	vstr	s14, [r4, #52]	; 0x34
 801b30e:	ed95 7a0d 	vldr	s14, [r5, #52]	; 0x34
 801b312:	edd5 7a0e 	vldr	s15, [r5, #56]	; 0x38
 801b316:	eee6 7a87 	vfma.f32	s15, s13, s14
 801b31a:	edc4 7a0e 	vstr	s15, [r4, #56]	; 0x38
 801b31e:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 801b320:	63e3      	str	r3, [r4, #60]	; 0x3c
 801b322:	4620      	mov	r0, r4
 801b324:	b003      	add	sp, #12
 801b326:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b32a:	bf00      	nop
 801b32c:	3d800000 	.word	0x3d800000

0801b330 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>:
 801b330:	4b01      	ldr	r3, [pc, #4]	; (801b338 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE+0x8>)
 801b332:	6018      	str	r0, [r3, #0]
 801b334:	4770      	bx	lr
 801b336:	bf00      	nop
 801b338:	2000586c 	.word	0x2000586c

0801b33c <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>:
 801b33c:	4b06      	ldr	r3, [pc, #24]	; (801b358 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x1c>)
 801b33e:	881a      	ldrh	r2, [r3, #0]
 801b340:	4282      	cmp	r2, r0
 801b342:	d807      	bhi.n	801b354 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x18>
 801b344:	4b05      	ldr	r3, [pc, #20]	; (801b35c <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x20>)
 801b346:	881b      	ldrh	r3, [r3, #0]
 801b348:	4413      	add	r3, r2
 801b34a:	4298      	cmp	r0, r3
 801b34c:	bfac      	ite	ge
 801b34e:	2000      	movge	r0, #0
 801b350:	2001      	movlt	r0, #1
 801b352:	4770      	bx	lr
 801b354:	2000      	movs	r0, #0
 801b356:	4770      	bx	lr
 801b358:	2000588c 	.word	0x2000588c
 801b35c:	20005890 	.word	0x20005890

0801b360 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>:
 801b360:	b508      	push	{r3, lr}
 801b362:	4601      	mov	r1, r0
 801b364:	f7ff ffea 	bl	801b33c <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>
 801b368:	b118      	cbz	r0, 801b372 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x12>
 801b36a:	4b02      	ldr	r3, [pc, #8]	; (801b374 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x14>)
 801b36c:	681b      	ldr	r3, [r3, #0]
 801b36e:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 801b372:	bd08      	pop	{r3, pc}
 801b374:	20005870 	.word	0x20005870

0801b378 <_ZN8touchgfx6Bitmap10clearCacheEv>:
 801b378:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b37c:	4d28      	ldr	r5, [pc, #160]	; (801b420 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa8>)
 801b37e:	682b      	ldr	r3, [r5, #0]
 801b380:	2b00      	cmp	r3, #0
 801b382:	d04a      	beq.n	801b41a <_ZN8touchgfx6Bitmap10clearCacheEv+0xa2>
 801b384:	4a27      	ldr	r2, [pc, #156]	; (801b424 <_ZN8touchgfx6Bitmap10clearCacheEv+0xac>)
 801b386:	4e28      	ldr	r6, [pc, #160]	; (801b428 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb0>)
 801b388:	8810      	ldrh	r0, [r2, #0]
 801b38a:	f8b6 8000 	ldrh.w	r8, [r6]
 801b38e:	4c27      	ldr	r4, [pc, #156]	; (801b42c <_ZN8touchgfx6Bitmap10clearCacheEv+0xb4>)
 801b390:	4440      	add	r0, r8
 801b392:	4f27      	ldr	r7, [pc, #156]	; (801b430 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb8>)
 801b394:	1c41      	adds	r1, r0, #1
 801b396:	ea4f 0e80 	mov.w	lr, r0, lsl #2
 801b39a:	f021 0101 	bic.w	r1, r1, #1
 801b39e:	eb03 020e 	add.w	r2, r3, lr
 801b3a2:	0409      	lsls	r1, r1, #16
 801b3a4:	6022      	str	r2, [r4, #0]
 801b3a6:	0c09      	lsrs	r1, r1, #16
 801b3a8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 801b3ac:	eb0e 010c 	add.w	r1, lr, ip
 801b3b0:	185a      	adds	r2, r3, r1
 801b3b2:	603a      	str	r2, [r7, #0]
 801b3b4:	220e      	movs	r2, #14
 801b3b6:	fb02 f208 	mul.w	r2, r2, r8
 801b3ba:	3203      	adds	r2, #3
 801b3bc:	f022 0203 	bic.w	r2, r2, #3
 801b3c0:	4411      	add	r1, r2
 801b3c2:	440b      	add	r3, r1
 801b3c4:	491b      	ldr	r1, [pc, #108]	; (801b434 <_ZN8touchgfx6Bitmap10clearCacheEv+0xbc>)
 801b3c6:	600b      	str	r3, [r1, #0]
 801b3c8:	2300      	movs	r3, #0
 801b3ca:	491b      	ldr	r1, [pc, #108]	; (801b438 <_ZN8touchgfx6Bitmap10clearCacheEv+0xc0>)
 801b3cc:	800b      	strh	r3, [r1, #0]
 801b3ce:	491b      	ldr	r1, [pc, #108]	; (801b43c <_ZN8touchgfx6Bitmap10clearCacheEv+0xc4>)
 801b3d0:	6809      	ldr	r1, [r1, #0]
 801b3d2:	eba1 010e 	sub.w	r1, r1, lr
 801b3d6:	eba1 010c 	sub.w	r1, r1, ip
 801b3da:	469c      	mov	ip, r3
 801b3dc:	1a8a      	subs	r2, r1, r2
 801b3de:	4918      	ldr	r1, [pc, #96]	; (801b440 <_ZN8touchgfx6Bitmap10clearCacheEv+0xc8>)
 801b3e0:	600a      	str	r2, [r1, #0]
 801b3e2:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801b3e6:	4a17      	ldr	r2, [pc, #92]	; (801b444 <_ZN8touchgfx6Bitmap10clearCacheEv+0xcc>)
 801b3e8:	8013      	strh	r3, [r2, #0]
 801b3ea:	4283      	cmp	r3, r0
 801b3ec:	d10d      	bne.n	801b40a <_ZN8touchgfx6Bitmap10clearCacheEv+0x92>
 801b3ee:	8835      	ldrh	r5, [r6, #0]
 801b3f0:	2300      	movs	r3, #0
 801b3f2:	6838      	ldr	r0, [r7, #0]
 801b3f4:	240e      	movs	r4, #14
 801b3f6:	429d      	cmp	r5, r3
 801b3f8:	d90f      	bls.n	801b41a <_ZN8touchgfx6Bitmap10clearCacheEv+0xa2>
 801b3fa:	fb04 0203 	mla	r2, r4, r3, r0
 801b3fe:	3301      	adds	r3, #1
 801b400:	7b11      	ldrb	r1, [r2, #12]
 801b402:	f36f 1145 	bfc	r1, #5, #1
 801b406:	7311      	strb	r1, [r2, #12]
 801b408:	e7f5      	b.n	801b3f6 <_ZN8touchgfx6Bitmap10clearCacheEv+0x7e>
 801b40a:	682a      	ldr	r2, [r5, #0]
 801b40c:	f842 c023 	str.w	ip, [r2, r3, lsl #2]
 801b410:	6822      	ldr	r2, [r4, #0]
 801b412:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 801b416:	3301      	adds	r3, #1
 801b418:	e7e7      	b.n	801b3ea <_ZN8touchgfx6Bitmap10clearCacheEv+0x72>
 801b41a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b41e:	bf00      	nop
 801b420:	20005870 	.word	0x20005870
 801b424:	2000588c 	.word	0x2000588c
 801b428:	20005890 	.word	0x20005890
 801b42c:	20005884 	.word	0x20005884
 801b430:	20005874 	.word	0x20005874
 801b434:	2000587c 	.word	0x2000587c
 801b438:	2000588e 	.word	0x2000588e
 801b43c:	20005878 	.word	0x20005878
 801b440:	20005888 	.word	0x20005888
 801b444:	20005880 	.word	0x20005880

0801b448 <_ZN8touchgfx6Bitmap8setCacheEPtmm>:
 801b448:	4b10      	ldr	r3, [pc, #64]	; (801b48c <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x44>)
 801b44a:	b510      	push	{r4, lr}
 801b44c:	681b      	ldr	r3, [r3, #0]
 801b44e:	b9db      	cbnz	r3, 801b488 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x40>
 801b450:	b1d1      	cbz	r1, 801b488 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x40>
 801b452:	4b0f      	ldr	r3, [pc, #60]	; (801b490 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x48>)
 801b454:	240e      	movs	r4, #14
 801b456:	801a      	strh	r2, [r3, #0]
 801b458:	b292      	uxth	r2, r2
 801b45a:	4b0e      	ldr	r3, [pc, #56]	; (801b494 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x4c>)
 801b45c:	881b      	ldrh	r3, [r3, #0]
 801b45e:	4413      	add	r3, r2
 801b460:	4362      	muls	r2, r4
 801b462:	2406      	movs	r4, #6
 801b464:	fb04 2203 	mla	r2, r4, r3, r2
 801b468:	428a      	cmp	r2, r1
 801b46a:	d305      	bcc.n	801b478 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x30>
 801b46c:	4b0a      	ldr	r3, [pc, #40]	; (801b498 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x50>)
 801b46e:	2137      	movs	r1, #55	; 0x37
 801b470:	4a0a      	ldr	r2, [pc, #40]	; (801b49c <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x54>)
 801b472:	480b      	ldr	r0, [pc, #44]	; (801b4a0 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x58>)
 801b474:	f00b fe58 	bl	8027128 <__assert_func>
 801b478:	4b0a      	ldr	r3, [pc, #40]	; (801b4a4 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x5c>)
 801b47a:	6019      	str	r1, [r3, #0]
 801b47c:	4b0a      	ldr	r3, [pc, #40]	; (801b4a8 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x60>)
 801b47e:	6018      	str	r0, [r3, #0]
 801b480:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b484:	f7ff bf78 	b.w	801b378 <_ZN8touchgfx6Bitmap10clearCacheEv>
 801b488:	bd10      	pop	{r4, pc}
 801b48a:	bf00      	nop
 801b48c:	2000587c 	.word	0x2000587c
 801b490:	20005890 	.word	0x20005890
 801b494:	2000588c 	.word	0x2000588c
 801b498:	0802b4bd 	.word	0x0802b4bd
 801b49c:	0802b516 	.word	0x0802b516
 801b4a0:	0802b498 	.word	0x0802b498
 801b4a4:	20005878 	.word	0x20005878
 801b4a8:	20005870 	.word	0x20005870

0801b4ac <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>:
 801b4ac:	b470      	push	{r4, r5, r6}
 801b4ae:	4c07      	ldr	r4, [pc, #28]	; (801b4cc <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x20>)
 801b4b0:	4605      	mov	r5, r0
 801b4b2:	4610      	mov	r0, r2
 801b4b4:	9a03      	ldr	r2, [sp, #12]
 801b4b6:	6826      	ldr	r6, [r4, #0]
 801b4b8:	b936      	cbnz	r6, 801b4c8 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x1c>
 801b4ba:	6025      	str	r5, [r4, #0]
 801b4bc:	4c04      	ldr	r4, [pc, #16]	; (801b4d0 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x24>)
 801b4be:	8021      	strh	r1, [r4, #0]
 801b4c0:	4619      	mov	r1, r3
 801b4c2:	bc70      	pop	{r4, r5, r6}
 801b4c4:	f7ff bfc0 	b.w	801b448 <_ZN8touchgfx6Bitmap8setCacheEPtmm>
 801b4c8:	bc70      	pop	{r4, r5, r6}
 801b4ca:	4770      	bx	lr
 801b4cc:	20005894 	.word	0x20005894
 801b4d0:	2000588c 	.word	0x2000588c

0801b4d4 <_ZNK8touchgfx6Bitmap8getWidthEv>:
 801b4d4:	b508      	push	{r3, lr}
 801b4d6:	4b14      	ldr	r3, [pc, #80]	; (801b528 <_ZNK8touchgfx6Bitmap8getWidthEv+0x54>)
 801b4d8:	6819      	ldr	r1, [r3, #0]
 801b4da:	b931      	cbnz	r1, 801b4ea <_ZNK8touchgfx6Bitmap8getWidthEv+0x16>
 801b4dc:	4b13      	ldr	r3, [pc, #76]	; (801b52c <_ZNK8touchgfx6Bitmap8getWidthEv+0x58>)
 801b4de:	f240 3187 	movw	r1, #903	; 0x387
 801b4e2:	4a13      	ldr	r2, [pc, #76]	; (801b530 <_ZNK8touchgfx6Bitmap8getWidthEv+0x5c>)
 801b4e4:	4813      	ldr	r0, [pc, #76]	; (801b534 <_ZNK8touchgfx6Bitmap8getWidthEv+0x60>)
 801b4e6:	f00b fe1f 	bl	8027128 <__assert_func>
 801b4ea:	4a13      	ldr	r2, [pc, #76]	; (801b538 <_ZNK8touchgfx6Bitmap8getWidthEv+0x64>)
 801b4ec:	8803      	ldrh	r3, [r0, #0]
 801b4ee:	8812      	ldrh	r2, [r2, #0]
 801b4f0:	4293      	cmp	r3, r2
 801b4f2:	d204      	bcs.n	801b4fe <_ZNK8touchgfx6Bitmap8getWidthEv+0x2a>
 801b4f4:	2214      	movs	r2, #20
 801b4f6:	fb02 1303 	mla	r3, r2, r3, r1
 801b4fa:	8918      	ldrh	r0, [r3, #8]
 801b4fc:	bd08      	pop	{r3, pc}
 801b4fe:	490f      	ldr	r1, [pc, #60]	; (801b53c <_ZNK8touchgfx6Bitmap8getWidthEv+0x68>)
 801b500:	8809      	ldrh	r1, [r1, #0]
 801b502:	4411      	add	r1, r2
 801b504:	428b      	cmp	r3, r1
 801b506:	da06      	bge.n	801b516 <_ZNK8touchgfx6Bitmap8getWidthEv+0x42>
 801b508:	1a9b      	subs	r3, r3, r2
 801b50a:	4a0d      	ldr	r2, [pc, #52]	; (801b540 <_ZNK8touchgfx6Bitmap8getWidthEv+0x6c>)
 801b50c:	210e      	movs	r1, #14
 801b50e:	6812      	ldr	r2, [r2, #0]
 801b510:	fb01 2303 	mla	r3, r1, r3, r2
 801b514:	e7f1      	b.n	801b4fa <_ZNK8touchgfx6Bitmap8getWidthEv+0x26>
 801b516:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801b51a:	4293      	cmp	r3, r2
 801b51c:	bf0a      	itet	eq
 801b51e:	4b09      	ldreq	r3, [pc, #36]	; (801b544 <_ZNK8touchgfx6Bitmap8getWidthEv+0x70>)
 801b520:	2000      	movne	r0, #0
 801b522:	8818      	ldrheq	r0, [r3, #0]
 801b524:	e7ea      	b.n	801b4fc <_ZNK8touchgfx6Bitmap8getWidthEv+0x28>
 801b526:	bf00      	nop
 801b528:	20005894 	.word	0x20005894
 801b52c:	0802a9ac 	.word	0x0802a9ac
 801b530:	0802b5c3 	.word	0x0802b5c3
 801b534:	0802b498 	.word	0x0802b498
 801b538:	2000588c 	.word	0x2000588c
 801b53c:	20005890 	.word	0x20005890
 801b540:	20005874 	.word	0x20005874
 801b544:	20005800 	.word	0x20005800

0801b548 <_ZNK8touchgfx6Bitmap9getHeightEv>:
 801b548:	b508      	push	{r3, lr}
 801b54a:	4b14      	ldr	r3, [pc, #80]	; (801b59c <_ZNK8touchgfx6Bitmap9getHeightEv+0x54>)
 801b54c:	6819      	ldr	r1, [r3, #0]
 801b54e:	b931      	cbnz	r1, 801b55e <_ZNK8touchgfx6Bitmap9getHeightEv+0x16>
 801b550:	4b13      	ldr	r3, [pc, #76]	; (801b5a0 <_ZNK8touchgfx6Bitmap9getHeightEv+0x58>)
 801b552:	f240 319b 	movw	r1, #923	; 0x39b
 801b556:	4a13      	ldr	r2, [pc, #76]	; (801b5a4 <_ZNK8touchgfx6Bitmap9getHeightEv+0x5c>)
 801b558:	4813      	ldr	r0, [pc, #76]	; (801b5a8 <_ZNK8touchgfx6Bitmap9getHeightEv+0x60>)
 801b55a:	f00b fde5 	bl	8027128 <__assert_func>
 801b55e:	4a13      	ldr	r2, [pc, #76]	; (801b5ac <_ZNK8touchgfx6Bitmap9getHeightEv+0x64>)
 801b560:	8803      	ldrh	r3, [r0, #0]
 801b562:	8812      	ldrh	r2, [r2, #0]
 801b564:	4293      	cmp	r3, r2
 801b566:	d204      	bcs.n	801b572 <_ZNK8touchgfx6Bitmap9getHeightEv+0x2a>
 801b568:	2214      	movs	r2, #20
 801b56a:	fb02 1303 	mla	r3, r2, r3, r1
 801b56e:	8958      	ldrh	r0, [r3, #10]
 801b570:	bd08      	pop	{r3, pc}
 801b572:	490f      	ldr	r1, [pc, #60]	; (801b5b0 <_ZNK8touchgfx6Bitmap9getHeightEv+0x68>)
 801b574:	8809      	ldrh	r1, [r1, #0]
 801b576:	4411      	add	r1, r2
 801b578:	428b      	cmp	r3, r1
 801b57a:	da06      	bge.n	801b58a <_ZNK8touchgfx6Bitmap9getHeightEv+0x42>
 801b57c:	1a9b      	subs	r3, r3, r2
 801b57e:	4a0d      	ldr	r2, [pc, #52]	; (801b5b4 <_ZNK8touchgfx6Bitmap9getHeightEv+0x6c>)
 801b580:	210e      	movs	r1, #14
 801b582:	6812      	ldr	r2, [r2, #0]
 801b584:	fb01 2303 	mla	r3, r1, r3, r2
 801b588:	e7f1      	b.n	801b56e <_ZNK8touchgfx6Bitmap9getHeightEv+0x26>
 801b58a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801b58e:	4293      	cmp	r3, r2
 801b590:	bf0a      	itet	eq
 801b592:	4b09      	ldreq	r3, [pc, #36]	; (801b5b8 <_ZNK8touchgfx6Bitmap9getHeightEv+0x70>)
 801b594:	2000      	movne	r0, #0
 801b596:	8818      	ldrheq	r0, [r3, #0]
 801b598:	e7ea      	b.n	801b570 <_ZNK8touchgfx6Bitmap9getHeightEv+0x28>
 801b59a:	bf00      	nop
 801b59c:	20005894 	.word	0x20005894
 801b5a0:	0802a9ac 	.word	0x0802a9ac
 801b5a4:	0802b5ef 	.word	0x0802b5ef
 801b5a8:	0802b498 	.word	0x0802b498
 801b5ac:	2000588c 	.word	0x2000588c
 801b5b0:	20005890 	.word	0x20005890
 801b5b4:	20005874 	.word	0x20005874
 801b5b8:	20005802 	.word	0x20005802

0801b5bc <_ZNK8touchgfx6Bitmap12getSolidRectEv>:
 801b5bc:	4b23      	ldr	r3, [pc, #140]	; (801b64c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x90>)
 801b5be:	b510      	push	{r4, lr}
 801b5c0:	681c      	ldr	r4, [r3, #0]
 801b5c2:	b934      	cbnz	r4, 801b5d2 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x16>
 801b5c4:	4b22      	ldr	r3, [pc, #136]	; (801b650 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x94>)
 801b5c6:	f240 31af 	movw	r1, #943	; 0x3af
 801b5ca:	4a22      	ldr	r2, [pc, #136]	; (801b654 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x98>)
 801b5cc:	4822      	ldr	r0, [pc, #136]	; (801b658 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x9c>)
 801b5ce:	f00b fdab 	bl	8027128 <__assert_func>
 801b5d2:	4a22      	ldr	r2, [pc, #136]	; (801b65c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xa0>)
 801b5d4:	880b      	ldrh	r3, [r1, #0]
 801b5d6:	8812      	ldrh	r2, [r2, #0]
 801b5d8:	4293      	cmp	r3, r2
 801b5da:	d211      	bcs.n	801b600 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x44>
 801b5dc:	2214      	movs	r2, #20
 801b5de:	fb02 4303 	mla	r3, r2, r3, r4
 801b5e2:	f9b3 400c 	ldrsh.w	r4, [r3, #12]
 801b5e6:	f9b3 100e 	ldrsh.w	r1, [r3, #14]
 801b5ea:	8a1a      	ldrh	r2, [r3, #16]
 801b5ec:	8a5b      	ldrh	r3, [r3, #18]
 801b5ee:	f3c2 020c 	ubfx	r2, r2, #0, #13
 801b5f2:	8004      	strh	r4, [r0, #0]
 801b5f4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801b5f8:	8041      	strh	r1, [r0, #2]
 801b5fa:	8082      	strh	r2, [r0, #4]
 801b5fc:	80c3      	strh	r3, [r0, #6]
 801b5fe:	e00e      	b.n	801b61e <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x62>
 801b600:	4917      	ldr	r1, [pc, #92]	; (801b660 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xa4>)
 801b602:	8809      	ldrh	r1, [r1, #0]
 801b604:	4411      	add	r1, r2
 801b606:	428b      	cmp	r3, r1
 801b608:	da0a      	bge.n	801b620 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x64>
 801b60a:	1a9b      	subs	r3, r3, r2
 801b60c:	4a15      	ldr	r2, [pc, #84]	; (801b664 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xa8>)
 801b60e:	210e      	movs	r1, #14
 801b610:	6812      	ldr	r2, [r2, #0]
 801b612:	fb01 2303 	mla	r3, r1, r3, r2
 801b616:	681a      	ldr	r2, [r3, #0]
 801b618:	6002      	str	r2, [r0, #0]
 801b61a:	685a      	ldr	r2, [r3, #4]
 801b61c:	6042      	str	r2, [r0, #4]
 801b61e:	bd10      	pop	{r4, pc}
 801b620:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801b624:	4293      	cmp	r3, r2
 801b626:	d10b      	bne.n	801b640 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x84>
 801b628:	4b0f      	ldr	r3, [pc, #60]	; (801b668 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xac>)
 801b62a:	f9b3 1000 	ldrsh.w	r1, [r3]
 801b62e:	4b0f      	ldr	r3, [pc, #60]	; (801b66c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xb0>)
 801b630:	8081      	strh	r1, [r0, #4]
 801b632:	f9b3 2000 	ldrsh.w	r2, [r3]
 801b636:	2300      	movs	r3, #0
 801b638:	80c2      	strh	r2, [r0, #6]
 801b63a:	8003      	strh	r3, [r0, #0]
 801b63c:	8043      	strh	r3, [r0, #2]
 801b63e:	e7ee      	b.n	801b61e <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x62>
 801b640:	2300      	movs	r3, #0
 801b642:	8003      	strh	r3, [r0, #0]
 801b644:	8043      	strh	r3, [r0, #2]
 801b646:	8083      	strh	r3, [r0, #4]
 801b648:	e7d8      	b.n	801b5fc <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x40>
 801b64a:	bf00      	nop
 801b64c:	20005894 	.word	0x20005894
 801b650:	0802a9ac 	.word	0x0802a9ac
 801b654:	0802b55c 	.word	0x0802b55c
 801b658:	0802b498 	.word	0x0802b498
 801b65c:	2000588c 	.word	0x2000588c
 801b660:	20005890 	.word	0x20005890
 801b664:	20005874 	.word	0x20005874
 801b668:	20005800 	.word	0x20005800
 801b66c:	20005802 	.word	0x20005802

0801b670 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>:
 801b670:	4b18      	ldr	r3, [pc, #96]	; (801b6d4 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x64>)
 801b672:	681b      	ldr	r3, [r3, #0]
 801b674:	b34b      	cbz	r3, 801b6ca <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5a>
 801b676:	4a18      	ldr	r2, [pc, #96]	; (801b6d8 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x68>)
 801b678:	8800      	ldrh	r0, [r0, #0]
 801b67a:	8812      	ldrh	r2, [r2, #0]
 801b67c:	4290      	cmp	r0, r2
 801b67e:	d211      	bcs.n	801b6a4 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x34>
 801b680:	2214      	movs	r2, #20
 801b682:	fb02 3300 	mla	r3, r2, r0, r3
 801b686:	8a1a      	ldrh	r2, [r3, #16]
 801b688:	8919      	ldrh	r1, [r3, #8]
 801b68a:	f3c2 020c 	ubfx	r2, r2, #0, #13
 801b68e:	428a      	cmp	r2, r1
 801b690:	db1d      	blt.n	801b6ce <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5e>
 801b692:	8a58      	ldrh	r0, [r3, #18]
 801b694:	f3c0 000c 	ubfx	r0, r0, #0, #13
 801b698:	895b      	ldrh	r3, [r3, #10]
 801b69a:	4298      	cmp	r0, r3
 801b69c:	bfac      	ite	ge
 801b69e:	2000      	movge	r0, #0
 801b6a0:	2001      	movlt	r0, #1
 801b6a2:	4770      	bx	lr
 801b6a4:	4b0d      	ldr	r3, [pc, #52]	; (801b6dc <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x6c>)
 801b6a6:	881b      	ldrh	r3, [r3, #0]
 801b6a8:	4413      	add	r3, r2
 801b6aa:	4298      	cmp	r0, r3
 801b6ac:	da0d      	bge.n	801b6ca <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5a>
 801b6ae:	4b0c      	ldr	r3, [pc, #48]	; (801b6e0 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x70>)
 801b6b0:	1a80      	subs	r0, r0, r2
 801b6b2:	220e      	movs	r2, #14
 801b6b4:	681b      	ldr	r3, [r3, #0]
 801b6b6:	fb02 3300 	mla	r3, r2, r0, r3
 801b6ba:	f9b3 1004 	ldrsh.w	r1, [r3, #4]
 801b6be:	891a      	ldrh	r2, [r3, #8]
 801b6c0:	4291      	cmp	r1, r2
 801b6c2:	db04      	blt.n	801b6ce <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5e>
 801b6c4:	f9b3 0006 	ldrsh.w	r0, [r3, #6]
 801b6c8:	e7e6      	b.n	801b698 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x28>
 801b6ca:	2000      	movs	r0, #0
 801b6cc:	4770      	bx	lr
 801b6ce:	2001      	movs	r0, #1
 801b6d0:	4770      	bx	lr
 801b6d2:	bf00      	nop
 801b6d4:	20005894 	.word	0x20005894
 801b6d8:	2000588c 	.word	0x2000588c
 801b6dc:	20005890 	.word	0x20005890
 801b6e0:	20005874 	.word	0x20005874

0801b6e4 <_ZNK8touchgfx6Bitmap7getDataEv>:
 801b6e4:	b508      	push	{r3, lr}
 801b6e6:	4b12      	ldr	r3, [pc, #72]	; (801b730 <_ZNK8touchgfx6Bitmap7getDataEv+0x4c>)
 801b6e8:	6819      	ldr	r1, [r3, #0]
 801b6ea:	b931      	cbnz	r1, 801b6fa <_ZNK8touchgfx6Bitmap7getDataEv+0x16>
 801b6ec:	4b11      	ldr	r3, [pc, #68]	; (801b734 <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 801b6ee:	f240 31d3 	movw	r1, #979	; 0x3d3
 801b6f2:	4a11      	ldr	r2, [pc, #68]	; (801b738 <_ZNK8touchgfx6Bitmap7getDataEv+0x54>)
 801b6f4:	4811      	ldr	r0, [pc, #68]	; (801b73c <_ZNK8touchgfx6Bitmap7getDataEv+0x58>)
 801b6f6:	f00b fd17 	bl	8027128 <__assert_func>
 801b6fa:	8803      	ldrh	r3, [r0, #0]
 801b6fc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801b700:	4293      	cmp	r3, r2
 801b702:	d012      	beq.n	801b72a <_ZNK8touchgfx6Bitmap7getDataEv+0x46>
 801b704:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801b708:	4293      	cmp	r3, r2
 801b70a:	d103      	bne.n	801b714 <_ZNK8touchgfx6Bitmap7getDataEv+0x30>
 801b70c:	4b0c      	ldr	r3, [pc, #48]	; (801b740 <_ZNK8touchgfx6Bitmap7getDataEv+0x5c>)
 801b70e:	681b      	ldr	r3, [r3, #0]
 801b710:	6c58      	ldr	r0, [r3, #68]	; 0x44
 801b712:	bd08      	pop	{r3, pc}
 801b714:	4a0b      	ldr	r2, [pc, #44]	; (801b744 <_ZNK8touchgfx6Bitmap7getDataEv+0x60>)
 801b716:	6812      	ldr	r2, [r2, #0]
 801b718:	b11a      	cbz	r2, 801b722 <_ZNK8touchgfx6Bitmap7getDataEv+0x3e>
 801b71a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 801b71e:	2800      	cmp	r0, #0
 801b720:	d1f7      	bne.n	801b712 <_ZNK8touchgfx6Bitmap7getDataEv+0x2e>
 801b722:	2214      	movs	r2, #20
 801b724:	4353      	muls	r3, r2
 801b726:	58c8      	ldr	r0, [r1, r3]
 801b728:	e7f3      	b.n	801b712 <_ZNK8touchgfx6Bitmap7getDataEv+0x2e>
 801b72a:	2000      	movs	r0, #0
 801b72c:	e7f1      	b.n	801b712 <_ZNK8touchgfx6Bitmap7getDataEv+0x2e>
 801b72e:	bf00      	nop
 801b730:	20005894 	.word	0x20005894
 801b734:	0802a9ac 	.word	0x0802a9ac
 801b738:	0802b592 	.word	0x0802b592
 801b73c:	0802b498 	.word	0x0802b498
 801b740:	2000580c 	.word	0x2000580c
 801b744:	20005870 	.word	0x20005870

0801b748 <_ZNK8touchgfx6Bitmap12getExtraDataEv>:
 801b748:	8802      	ldrh	r2, [r0, #0]
 801b74a:	f64f 73fd 	movw	r3, #65533	; 0xfffd
 801b74e:	429a      	cmp	r2, r3
 801b750:	d845      	bhi.n	801b7de <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x96>
 801b752:	4b24      	ldr	r3, [pc, #144]	; (801b7e4 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
 801b754:	8818      	ldrh	r0, [r3, #0]
 801b756:	4282      	cmp	r2, r0
 801b758:	d221      	bcs.n	801b79e <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x56>
 801b75a:	4b23      	ldr	r3, [pc, #140]	; (801b7e8 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa0>)
 801b75c:	6819      	ldr	r1, [r3, #0]
 801b75e:	2314      	movs	r3, #20
 801b760:	fb03 1302 	mla	r3, r3, r2, r1
 801b764:	6858      	ldr	r0, [r3, #4]
 801b766:	2800      	cmp	r0, #0
 801b768:	d03a      	beq.n	801b7e0 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>
 801b76a:	4920      	ldr	r1, [pc, #128]	; (801b7ec <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa4>)
 801b76c:	6809      	ldr	r1, [r1, #0]
 801b76e:	2900      	cmp	r1, #0
 801b770:	d036      	beq.n	801b7e0 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>
 801b772:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801b776:	2900      	cmp	r1, #0
 801b778:	d032      	beq.n	801b7e0 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>
 801b77a:	891a      	ldrh	r2, [r3, #8]
 801b77c:	8958      	ldrh	r0, [r3, #10]
 801b77e:	4350      	muls	r0, r2
 801b780:	7c5a      	ldrb	r2, [r3, #17]
 801b782:	7cdb      	ldrb	r3, [r3, #19]
 801b784:	0952      	lsrs	r2, r2, #5
 801b786:	f3c3 1342 	ubfx	r3, r3, #5, #3
 801b78a:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 801b78e:	2b0b      	cmp	r3, #11
 801b790:	bf18      	it	ne
 801b792:	0040      	lslne	r0, r0, #1
 801b794:	3003      	adds	r0, #3
 801b796:	f020 0003 	bic.w	r0, r0, #3
 801b79a:	4408      	add	r0, r1
 801b79c:	4770      	bx	lr
 801b79e:	4b14      	ldr	r3, [pc, #80]	; (801b7f0 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa8>)
 801b7a0:	881b      	ldrh	r3, [r3, #0]
 801b7a2:	4403      	add	r3, r0
 801b7a4:	429a      	cmp	r2, r3
 801b7a6:	da1a      	bge.n	801b7de <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x96>
 801b7a8:	4b12      	ldr	r3, [pc, #72]	; (801b7f4 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xac>)
 801b7aa:	1a10      	subs	r0, r2, r0
 801b7ac:	210e      	movs	r1, #14
 801b7ae:	681b      	ldr	r3, [r3, #0]
 801b7b0:	fb01 3000 	mla	r0, r1, r0, r3
 801b7b4:	7b03      	ldrb	r3, [r0, #12]
 801b7b6:	f003 031f 	and.w	r3, r3, #31
 801b7ba:	2b0b      	cmp	r3, #11
 801b7bc:	d10b      	bne.n	801b7d6 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 801b7be:	8903      	ldrh	r3, [r0, #8]
 801b7c0:	8940      	ldrh	r0, [r0, #10]
 801b7c2:	4358      	muls	r0, r3
 801b7c4:	4b09      	ldr	r3, [pc, #36]	; (801b7ec <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa4>)
 801b7c6:	3003      	adds	r0, #3
 801b7c8:	6819      	ldr	r1, [r3, #0]
 801b7ca:	f020 0303 	bic.w	r3, r0, #3
 801b7ce:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
 801b7d2:	4418      	add	r0, r3
 801b7d4:	4770      	bx	lr
 801b7d6:	2b0d      	cmp	r3, #13
 801b7d8:	d101      	bne.n	801b7de <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x96>
 801b7da:	300d      	adds	r0, #13
 801b7dc:	4770      	bx	lr
 801b7de:	2000      	movs	r0, #0
 801b7e0:	4770      	bx	lr
 801b7e2:	bf00      	nop
 801b7e4:	2000588c 	.word	0x2000588c
 801b7e8:	20005894 	.word	0x20005894
 801b7ec:	20005870 	.word	0x20005870
 801b7f0:	20005890 	.word	0x20005890
 801b7f4:	20005874 	.word	0x20005874

0801b7f8 <_ZNK8touchgfx6Bitmap9getFormatEv>:
 801b7f8:	4b19      	ldr	r3, [pc, #100]	; (801b860 <_ZNK8touchgfx6Bitmap9getFormatEv+0x68>)
 801b7fa:	6819      	ldr	r1, [r3, #0]
 801b7fc:	8803      	ldrh	r3, [r0, #0]
 801b7fe:	b1e9      	cbz	r1, 801b83c <_ZNK8touchgfx6Bitmap9getFormatEv+0x44>
 801b800:	4a18      	ldr	r2, [pc, #96]	; (801b864 <_ZNK8touchgfx6Bitmap9getFormatEv+0x6c>)
 801b802:	8812      	ldrh	r2, [r2, #0]
 801b804:	429a      	cmp	r2, r3
 801b806:	d90a      	bls.n	801b81e <_ZNK8touchgfx6Bitmap9getFormatEv+0x26>
 801b808:	2214      	movs	r2, #20
 801b80a:	fb02 1303 	mla	r3, r2, r3, r1
 801b80e:	7c58      	ldrb	r0, [r3, #17]
 801b810:	0942      	lsrs	r2, r0, #5
 801b812:	7cd8      	ldrb	r0, [r3, #19]
 801b814:	f3c0 1042 	ubfx	r0, r0, #5, #3
 801b818:	ea40 00c2 	orr.w	r0, r0, r2, lsl #3
 801b81c:	4770      	bx	lr
 801b81e:	4912      	ldr	r1, [pc, #72]	; (801b868 <_ZNK8touchgfx6Bitmap9getFormatEv+0x70>)
 801b820:	8809      	ldrh	r1, [r1, #0]
 801b822:	4411      	add	r1, r2
 801b824:	428b      	cmp	r3, r1
 801b826:	da09      	bge.n	801b83c <_ZNK8touchgfx6Bitmap9getFormatEv+0x44>
 801b828:	1a9b      	subs	r3, r3, r2
 801b82a:	4a10      	ldr	r2, [pc, #64]	; (801b86c <_ZNK8touchgfx6Bitmap9getFormatEv+0x74>)
 801b82c:	210e      	movs	r1, #14
 801b82e:	6812      	ldr	r2, [r2, #0]
 801b830:	fb01 2303 	mla	r3, r1, r3, r2
 801b834:	7b18      	ldrb	r0, [r3, #12]
 801b836:	f000 001f 	and.w	r0, r0, #31
 801b83a:	4770      	bx	lr
 801b83c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801b840:	4293      	cmp	r3, r2
 801b842:	d10a      	bne.n	801b85a <_ZNK8touchgfx6Bitmap9getFormatEv+0x62>
 801b844:	4b0a      	ldr	r3, [pc, #40]	; (801b870 <_ZNK8touchgfx6Bitmap9getFormatEv+0x78>)
 801b846:	681b      	ldr	r3, [r3, #0]
 801b848:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 801b84c:	b10a      	cbz	r2, 801b852 <_ZNK8touchgfx6Bitmap9getFormatEv+0x5a>
 801b84e:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 801b850:	b900      	cbnz	r0, 801b854 <_ZNK8touchgfx6Bitmap9getFormatEv+0x5c>
 801b852:	6898      	ldr	r0, [r3, #8]
 801b854:	6803      	ldr	r3, [r0, #0]
 801b856:	6a1b      	ldr	r3, [r3, #32]
 801b858:	4718      	bx	r3
 801b85a:	2000      	movs	r0, #0
 801b85c:	4770      	bx	lr
 801b85e:	bf00      	nop
 801b860:	20005894 	.word	0x20005894
 801b864:	2000588c 	.word	0x2000588c
 801b868:	20005890 	.word	0x20005890
 801b86c:	20005874 	.word	0x20005874
 801b870:	2000580c 	.word	0x2000580c

0801b874 <_ZNK8touchgfx8LCD16bpp8bitDepthEv>:
 801b874:	2010      	movs	r0, #16
 801b876:	4770      	bx	lr

0801b878 <_ZNK8touchgfx8LCD16bpp17framebufferFormatEv>:
 801b878:	2000      	movs	r0, #0
 801b87a:	4770      	bx	lr

0801b87c <_ZNK8touchgfx8LCD16bpp20getColorFrom24BitRGBEhhh>:
 801b87c:	00d2      	lsls	r2, r2, #3
 801b87e:	0209      	lsls	r1, r1, #8
 801b880:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801b884:	f401 4078 	and.w	r0, r1, #63488	; 0xf800
 801b888:	ea42 02d3 	orr.w	r2, r2, r3, lsr #3
 801b88c:	4310      	orrs	r0, r2
 801b88e:	4770      	bx	lr

0801b890 <_ZNK8touchgfx8LCD16bpp11getRedColorENS_9colortypeE>:
 801b890:	0a09      	lsrs	r1, r1, #8
 801b892:	f001 00f8 	and.w	r0, r1, #248	; 0xf8
 801b896:	4770      	bx	lr

0801b898 <_ZNK8touchgfx8LCD16bpp13getGreenColorENS_9colortypeE>:
 801b898:	08c9      	lsrs	r1, r1, #3
 801b89a:	f001 00fc 	and.w	r0, r1, #252	; 0xfc
 801b89e:	4770      	bx	lr

0801b8a0 <_ZNK8touchgfx8LCD16bpp12getBlueColorENS_9colortypeE>:
 801b8a0:	00c9      	lsls	r1, r1, #3
 801b8a2:	f001 00f8 	and.w	r0, r1, #248	; 0xf8
 801b8a6:	4770      	bx	lr

0801b8a8 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 801b8a8:	2bff      	cmp	r3, #255	; 0xff
 801b8aa:	d050      	beq.n	801b94e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa6>
 801b8ac:	2a0b      	cmp	r2, #11
 801b8ae:	d04a      	beq.n	801b946 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9e>
 801b8b0:	d80e      	bhi.n	801b8d0 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x28>
 801b8b2:	2a03      	cmp	r2, #3
 801b8b4:	d03f      	beq.n	801b936 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x8e>
 801b8b6:	d804      	bhi.n	801b8c2 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801b8b8:	2a01      	cmp	r2, #1
 801b8ba:	d03e      	beq.n	801b93a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x92>
 801b8bc:	d93f      	bls.n	801b93e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x96>
 801b8be:	6b80      	ldr	r0, [r0, #56]	; 0x38
 801b8c0:	4770      	bx	lr
 801b8c2:	2a09      	cmp	r2, #9
 801b8c4:	d03f      	beq.n	801b946 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9e>
 801b8c6:	d83c      	bhi.n	801b942 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9a>
 801b8c8:	2a08      	cmp	r2, #8
 801b8ca:	d03a      	beq.n	801b942 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9a>
 801b8cc:	2000      	movs	r0, #0
 801b8ce:	4770      	bx	lr
 801b8d0:	2a2f      	cmp	r2, #47	; 0x2f
 801b8d2:	d024      	beq.n	801b91e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x76>
 801b8d4:	d80d      	bhi.n	801b8f2 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x4a>
 801b8d6:	2a2d      	cmp	r2, #45	; 0x2d
 801b8d8:	d014      	beq.n	801b904 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x5c>
 801b8da:	d826      	bhi.n	801b92a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x82>
 801b8dc:	2a2c      	cmp	r2, #44	; 0x2c
 801b8de:	d1f5      	bne.n	801b8cc <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801b8e0:	684b      	ldr	r3, [r1, #4]
 801b8e2:	781b      	ldrb	r3, [r3, #0]
 801b8e4:	2b01      	cmp	r3, #1
 801b8e6:	d018      	beq.n	801b91a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x72>
 801b8e8:	d323      	bcc.n	801b932 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x8a>
 801b8ea:	2b02      	cmp	r3, #2
 801b8ec:	d1ee      	bne.n	801b8cc <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801b8ee:	6880      	ldr	r0, [r0, #8]
 801b8f0:	4770      	bx	lr
 801b8f2:	2a31      	cmp	r2, #49	; 0x31
 801b8f4:	d004      	beq.n	801b900 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x58>
 801b8f6:	d328      	bcc.n	801b94a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa2>
 801b8f8:	2a32      	cmp	r2, #50	; 0x32
 801b8fa:	d026      	beq.n	801b94a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa2>
 801b8fc:	2a33      	cmp	r2, #51	; 0x33
 801b8fe:	d1e5      	bne.n	801b8cc <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801b900:	6f00      	ldr	r0, [r0, #112]	; 0x70
 801b902:	4770      	bx	lr
 801b904:	684b      	ldr	r3, [r1, #4]
 801b906:	781b      	ldrb	r3, [r3, #0]
 801b908:	2b01      	cmp	r3, #1
 801b90a:	d004      	beq.n	801b916 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801b90c:	d30b      	bcc.n	801b926 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 801b90e:	2b02      	cmp	r3, #2
 801b910:	d1dc      	bne.n	801b8cc <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801b912:	6900      	ldr	r0, [r0, #16]
 801b914:	4770      	bx	lr
 801b916:	6a00      	ldr	r0, [r0, #32]
 801b918:	4770      	bx	lr
 801b91a:	6980      	ldr	r0, [r0, #24]
 801b91c:	4770      	bx	lr
 801b91e:	684b      	ldr	r3, [r1, #4]
 801b920:	781b      	ldrb	r3, [r3, #0]
 801b922:	2b00      	cmp	r3, #0
 801b924:	d1d2      	bne.n	801b8cc <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801b926:	6b00      	ldr	r0, [r0, #48]	; 0x30
 801b928:	4770      	bx	lr
 801b92a:	684b      	ldr	r3, [r1, #4]
 801b92c:	781b      	ldrb	r3, [r3, #0]
 801b92e:	2b00      	cmp	r3, #0
 801b930:	d1cc      	bne.n	801b8cc <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801b932:	6a80      	ldr	r0, [r0, #40]	; 0x28
 801b934:	4770      	bx	lr
 801b936:	6c80      	ldr	r0, [r0, #72]	; 0x48
 801b938:	4770      	bx	lr
 801b93a:	6d00      	ldr	r0, [r0, #80]	; 0x50
 801b93c:	4770      	bx	lr
 801b93e:	6c00      	ldr	r0, [r0, #64]	; 0x40
 801b940:	4770      	bx	lr
 801b942:	6d80      	ldr	r0, [r0, #88]	; 0x58
 801b944:	4770      	bx	lr
 801b946:	6e00      	ldr	r0, [r0, #96]	; 0x60
 801b948:	4770      	bx	lr
 801b94a:	6e80      	ldr	r0, [r0, #104]	; 0x68
 801b94c:	4770      	bx	lr
 801b94e:	2a0b      	cmp	r2, #11
 801b950:	d049      	beq.n	801b9e6 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13e>
 801b952:	d80e      	bhi.n	801b972 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xca>
 801b954:	2a03      	cmp	r2, #3
 801b956:	d040      	beq.n	801b9da <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x132>
 801b958:	d804      	bhi.n	801b964 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xbc>
 801b95a:	2a01      	cmp	r2, #1
 801b95c:	d03f      	beq.n	801b9de <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x136>
 801b95e:	d940      	bls.n	801b9e2 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13a>
 801b960:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 801b962:	4770      	bx	lr
 801b964:	2a09      	cmp	r2, #9
 801b966:	d03e      	beq.n	801b9e6 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13e>
 801b968:	d801      	bhi.n	801b96e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xc6>
 801b96a:	2a08      	cmp	r2, #8
 801b96c:	d1ae      	bne.n	801b8cc <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801b96e:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
 801b970:	4770      	bx	lr
 801b972:	2a2f      	cmp	r2, #47	; 0x2f
 801b974:	d024      	beq.n	801b9c0 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x118>
 801b976:	d80d      	bhi.n	801b994 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xec>
 801b978:	2a2d      	cmp	r2, #45	; 0x2d
 801b97a:	d014      	beq.n	801b9a6 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xfe>
 801b97c:	d826      	bhi.n	801b9cc <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x124>
 801b97e:	2a2c      	cmp	r2, #44	; 0x2c
 801b980:	d1a4      	bne.n	801b8cc <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801b982:	684b      	ldr	r3, [r1, #4]
 801b984:	781b      	ldrb	r3, [r3, #0]
 801b986:	2b01      	cmp	r3, #1
 801b988:	d018      	beq.n	801b9bc <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x114>
 801b98a:	d324      	bcc.n	801b9d6 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x12e>
 801b98c:	2b02      	cmp	r3, #2
 801b98e:	d19d      	bne.n	801b8cc <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801b990:	68c0      	ldr	r0, [r0, #12]
 801b992:	4770      	bx	lr
 801b994:	2a31      	cmp	r2, #49	; 0x31
 801b996:	d004      	beq.n	801b9a2 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xfa>
 801b998:	d327      	bcc.n	801b9ea <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x142>
 801b99a:	2a32      	cmp	r2, #50	; 0x32
 801b99c:	d025      	beq.n	801b9ea <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x142>
 801b99e:	2a33      	cmp	r2, #51	; 0x33
 801b9a0:	d194      	bne.n	801b8cc <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801b9a2:	6f40      	ldr	r0, [r0, #116]	; 0x74
 801b9a4:	4770      	bx	lr
 801b9a6:	684b      	ldr	r3, [r1, #4]
 801b9a8:	781b      	ldrb	r3, [r3, #0]
 801b9aa:	2b01      	cmp	r3, #1
 801b9ac:	d004      	beq.n	801b9b8 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x110>
 801b9ae:	d30b      	bcc.n	801b9c8 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x120>
 801b9b0:	2b02      	cmp	r3, #2
 801b9b2:	d18b      	bne.n	801b8cc <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801b9b4:	6940      	ldr	r0, [r0, #20]
 801b9b6:	4770      	bx	lr
 801b9b8:	6a40      	ldr	r0, [r0, #36]	; 0x24
 801b9ba:	4770      	bx	lr
 801b9bc:	69c0      	ldr	r0, [r0, #28]
 801b9be:	4770      	bx	lr
 801b9c0:	684b      	ldr	r3, [r1, #4]
 801b9c2:	781b      	ldrb	r3, [r3, #0]
 801b9c4:	2b00      	cmp	r3, #0
 801b9c6:	d181      	bne.n	801b8cc <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801b9c8:	6b40      	ldr	r0, [r0, #52]	; 0x34
 801b9ca:	4770      	bx	lr
 801b9cc:	684b      	ldr	r3, [r1, #4]
 801b9ce:	781b      	ldrb	r3, [r3, #0]
 801b9d0:	2b00      	cmp	r3, #0
 801b9d2:	f47f af7b 	bne.w	801b8cc <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801b9d6:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 801b9d8:	4770      	bx	lr
 801b9da:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 801b9dc:	4770      	bx	lr
 801b9de:	6d40      	ldr	r0, [r0, #84]	; 0x54
 801b9e0:	4770      	bx	lr
 801b9e2:	6c40      	ldr	r0, [r0, #68]	; 0x44
 801b9e4:	4770      	bx	lr
 801b9e6:	6e40      	ldr	r0, [r0, #100]	; 0x64
 801b9e8:	4770      	bx	lr
 801b9ea:	6ec0      	ldr	r0, [r0, #108]	; 0x6c
 801b9ec:	4770      	bx	lr

0801b9ee <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801b9ee:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b9f2:	b087      	sub	sp, #28
 801b9f4:	9815      	ldr	r0, [sp, #84]	; 0x54
 801b9f6:	9205      	str	r2, [sp, #20]
 801b9f8:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 801b9fc:	9101      	str	r1, [sp, #4]
 801b9fe:	9202      	str	r2, [sp, #8]
 801ba00:	6841      	ldr	r1, [r0, #4]
 801ba02:	f8dd e060 	ldr.w	lr, [sp, #96]	; 0x60
 801ba06:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	; 0x58
 801ba0a:	fb01 2404 	mla	r4, r1, r4, r2
 801ba0e:	6802      	ldr	r2, [r0, #0]
 801ba10:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801ba14:	f8de 2000 	ldr.w	r2, [lr]
 801ba18:	9203      	str	r2, [sp, #12]
 801ba1a:	f8de 2004 	ldr.w	r2, [lr, #4]
 801ba1e:	3204      	adds	r2, #4
 801ba20:	9204      	str	r2, [sp, #16]
 801ba22:	9a02      	ldr	r2, [sp, #8]
 801ba24:	43d6      	mvns	r6, r2
 801ba26:	b2f6      	uxtb	r6, r6
 801ba28:	9a01      	ldr	r2, [sp, #4]
 801ba2a:	2a00      	cmp	r2, #0
 801ba2c:	dc03      	bgt.n	801ba36 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 801ba2e:	9a05      	ldr	r2, [sp, #20]
 801ba30:	2a00      	cmp	r2, #0
 801ba32:	f340 8129 	ble.w	801bc88 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 801ba36:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801ba38:	f9be c008 	ldrsh.w	ip, [lr, #8]
 801ba3c:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801ba40:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801ba42:	f9be 700c 	ldrsh.w	r7, [lr, #12]
 801ba46:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801ba4a:	2b00      	cmp	r3, #0
 801ba4c:	dd0e      	ble.n	801ba6c <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801ba4e:	1408      	asrs	r0, r1, #16
 801ba50:	d405      	bmi.n	801ba5e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801ba52:	4560      	cmp	r0, ip
 801ba54:	da03      	bge.n	801ba5e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801ba56:	1410      	asrs	r0, r2, #16
 801ba58:	d401      	bmi.n	801ba5e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801ba5a:	42b8      	cmp	r0, r7
 801ba5c:	db07      	blt.n	801ba6e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 801ba5e:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801ba60:	3b01      	subs	r3, #1
 801ba62:	3402      	adds	r4, #2
 801ba64:	4401      	add	r1, r0
 801ba66:	9814      	ldr	r0, [sp, #80]	; 0x50
 801ba68:	4402      	add	r2, r0
 801ba6a:	e7ee      	b.n	801ba4a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 801ba6c:	d071      	beq.n	801bb52 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801ba6e:	1e58      	subs	r0, r3, #1
 801ba70:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801ba72:	fb05 1500 	mla	r5, r5, r0, r1
 801ba76:	142d      	asrs	r5, r5, #16
 801ba78:	d45f      	bmi.n	801bb3a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 801ba7a:	4565      	cmp	r5, ip
 801ba7c:	da5d      	bge.n	801bb3a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 801ba7e:	9d14      	ldr	r5, [sp, #80]	; 0x50
 801ba80:	fb05 2000 	mla	r0, r5, r0, r2
 801ba84:	1400      	asrs	r0, r0, #16
 801ba86:	d458      	bmi.n	801bb3a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 801ba88:	42b8      	cmp	r0, r7
 801ba8a:	da56      	bge.n	801bb3a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 801ba8c:	4699      	mov	r9, r3
 801ba8e:	46a2      	mov	sl, r4
 801ba90:	f8bd b008 	ldrh.w	fp, [sp, #8]
 801ba94:	f1b9 0f00 	cmp.w	r9, #0
 801ba98:	dd57      	ble.n	801bb4a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15c>
 801ba9a:	ea4f 4c22 	mov.w	ip, r2, asr #16
 801ba9e:	f9be 7008 	ldrsh.w	r7, [lr, #8]
 801baa2:	9803      	ldr	r0, [sp, #12]
 801baa4:	140d      	asrs	r5, r1, #16
 801baa6:	f109 39ff 	add.w	r9, r9, #4294967295
 801baaa:	fb07 000c 	mla	r0, r7, ip, r0
 801baae:	5d40      	ldrb	r0, [r0, r5]
 801bab0:	9d04      	ldr	r5, [sp, #16]
 801bab2:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
 801bab6:	f8ba 5000 	ldrh.w	r5, [sl]
 801baba:	ea4f 2c20 	mov.w	ip, r0, asr #8
 801babe:	122f      	asrs	r7, r5, #8
 801bac0:	ea4f 08e5 	mov.w	r8, r5, asr #3
 801bac4:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801bac8:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801bacc:	00ed      	lsls	r5, r5, #3
 801bace:	f008 08fc 	and.w	r8, r8, #252	; 0xfc
 801bad2:	fb17 f706 	smulbb	r7, r7, r6
 801bad6:	b2ed      	uxtb	r5, r5
 801bad8:	fb18 f806 	smulbb	r8, r8, r6
 801badc:	fb0c 7c0b 	mla	ip, ip, fp, r7
 801bae0:	10c7      	asrs	r7, r0, #3
 801bae2:	fb15 f506 	smulbb	r5, r5, r6
 801bae6:	00c0      	lsls	r0, r0, #3
 801bae8:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801baec:	fa1f fc8c 	uxth.w	ip, ip
 801baf0:	b2c0      	uxtb	r0, r0
 801baf2:	fb07 870b 	mla	r7, r7, fp, r8
 801baf6:	fb00 500b 	mla	r0, r0, fp, r5
 801bafa:	f10c 0501 	add.w	r5, ip, #1
 801bafe:	b2bf      	uxth	r7, r7
 801bb00:	b280      	uxth	r0, r0
 801bb02:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 801bb06:	f107 0801 	add.w	r8, r7, #1
 801bb0a:	1c45      	adds	r5, r0, #1
 801bb0c:	eb08 2817 	add.w	r8, r8, r7, lsr #8
 801bb10:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801bb14:	eb05 2510 	add.w	r5, r5, r0, lsr #8
 801bb18:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801bb1a:	ea4f 1858 	mov.w	r8, r8, lsr #5
 801bb1e:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 801bb22:	4401      	add	r1, r0
 801bb24:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
 801bb28:	9814      	ldr	r0, [sp, #80]	; 0x50
 801bb2a:	ea4c 0c05 	orr.w	ip, ip, r5
 801bb2e:	4402      	add	r2, r0
 801bb30:	ea4c 0c08 	orr.w	ip, ip, r8
 801bb34:	f82a cb02 	strh.w	ip, [sl], #2
 801bb38:	e7ac      	b.n	801ba94 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 801bb3a:	f04f 0800 	mov.w	r8, #0
 801bb3e:	f8bd a008 	ldrh.w	sl, [sp, #8]
 801bb42:	eb03 0008 	add.w	r0, r3, r8
 801bb46:	2800      	cmp	r0, #0
 801bb48:	dc41      	bgt.n	801bbce <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e0>
 801bb4a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801bb4e:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801bb52:	9b01      	ldr	r3, [sp, #4]
 801bb54:	2b00      	cmp	r3, #0
 801bb56:	f340 8097 	ble.w	801bc88 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 801bb5a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801bb5e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801bb60:	ee30 0a04 	vadd.f32	s0, s0, s8
 801bb64:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801bb68:	eef0 6a62 	vmov.f32	s13, s5
 801bb6c:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801bb70:	ee31 1a05 	vadd.f32	s2, s2, s10
 801bb74:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801bb78:	edcd 6a11 	vstr	s13, [sp, #68]	; 0x44
 801bb7c:	eef0 6a43 	vmov.f32	s13, s6
 801bb80:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801bb84:	edcd 6a12 	vstr	s13, [sp, #72]	; 0x48
 801bb88:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801bb8c:	ee61 7a27 	vmul.f32	s15, s2, s15
 801bb90:	ee77 2a62 	vsub.f32	s5, s14, s5
 801bb94:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801bb98:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801bb9c:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801bba0:	ee12 2a90 	vmov	r2, s5
 801bba4:	eef0 2a47 	vmov.f32	s5, s14
 801bba8:	fb92 f3f3 	sdiv	r3, r2, r3
 801bbac:	ee13 2a10 	vmov	r2, s6
 801bbb0:	9313      	str	r3, [sp, #76]	; 0x4c
 801bbb2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801bbb4:	eeb0 3a67 	vmov.f32	s6, s15
 801bbb8:	fb92 f3f3 	sdiv	r3, r2, r3
 801bbbc:	9314      	str	r3, [sp, #80]	; 0x50
 801bbbe:	9b01      	ldr	r3, [sp, #4]
 801bbc0:	9a05      	ldr	r2, [sp, #20]
 801bbc2:	3b01      	subs	r3, #1
 801bbc4:	9301      	str	r3, [sp, #4]
 801bbc6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801bbc8:	bf08      	it	eq
 801bbca:	4613      	moveq	r3, r2
 801bbcc:	e72c      	b.n	801ba28 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 801bbce:	140f      	asrs	r7, r1, #16
 801bbd0:	d453      	bmi.n	801bc7a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 801bbd2:	f8de 5008 	ldr.w	r5, [lr, #8]
 801bbd6:	42bd      	cmp	r5, r7
 801bbd8:	dd4f      	ble.n	801bc7a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 801bbda:	ea5f 4c22 	movs.w	ip, r2, asr #16
 801bbde:	d44c      	bmi.n	801bc7a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 801bbe0:	f8de 000c 	ldr.w	r0, [lr, #12]
 801bbe4:	4560      	cmp	r0, ip
 801bbe6:	dd48      	ble.n	801bc7a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 801bbe8:	9803      	ldr	r0, [sp, #12]
 801bbea:	b22d      	sxth	r5, r5
 801bbec:	fb0c 0505 	mla	r5, ip, r5, r0
 801bbf0:	5de8      	ldrb	r0, [r5, r7]
 801bbf2:	9d04      	ldr	r5, [sp, #16]
 801bbf4:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
 801bbf8:	f06f 0501 	mvn.w	r5, #1
 801bbfc:	fb05 fb08 	mul.w	fp, r5, r8
 801bc00:	ea4f 2c20 	mov.w	ip, r0, asr #8
 801bc04:	f834 500b 	ldrh.w	r5, [r4, fp]
 801bc08:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801bc0c:	122f      	asrs	r7, r5, #8
 801bc0e:	ea4f 09e5 	mov.w	r9, r5, asr #3
 801bc12:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801bc16:	00ed      	lsls	r5, r5, #3
 801bc18:	f009 09fc 	and.w	r9, r9, #252	; 0xfc
 801bc1c:	fb17 f706 	smulbb	r7, r7, r6
 801bc20:	b2ed      	uxtb	r5, r5
 801bc22:	fb19 f906 	smulbb	r9, r9, r6
 801bc26:	fb0c 7c0a 	mla	ip, ip, sl, r7
 801bc2a:	10c7      	asrs	r7, r0, #3
 801bc2c:	fb15 f506 	smulbb	r5, r5, r6
 801bc30:	00c0      	lsls	r0, r0, #3
 801bc32:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801bc36:	fa1f fc8c 	uxth.w	ip, ip
 801bc3a:	b2c0      	uxtb	r0, r0
 801bc3c:	fb07 970a 	mla	r7, r7, sl, r9
 801bc40:	fb00 500a 	mla	r0, r0, sl, r5
 801bc44:	f10c 0501 	add.w	r5, ip, #1
 801bc48:	b2bf      	uxth	r7, r7
 801bc4a:	b280      	uxth	r0, r0
 801bc4c:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 801bc50:	f107 0901 	add.w	r9, r7, #1
 801bc54:	1c45      	adds	r5, r0, #1
 801bc56:	eb09 2917 	add.w	r9, r9, r7, lsr #8
 801bc5a:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801bc5e:	eb05 2510 	add.w	r5, r5, r0, lsr #8
 801bc62:	ea4f 1959 	mov.w	r9, r9, lsr #5
 801bc66:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 801bc6a:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 801bc6e:	ea4c 0c05 	orr.w	ip, ip, r5
 801bc72:	ea4c 0c09 	orr.w	ip, ip, r9
 801bc76:	f824 c00b 	strh.w	ip, [r4, fp]
 801bc7a:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801bc7c:	f108 38ff 	add.w	r8, r8, #4294967295
 801bc80:	4401      	add	r1, r0
 801bc82:	9814      	ldr	r0, [sp, #80]	; 0x50
 801bc84:	4402      	add	r2, r0
 801bc86:	e75c      	b.n	801bb42 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 801bc88:	b007      	add	sp, #28
 801bc8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801bc8e <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801bc8e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bc92:	b085      	sub	sp, #20
 801bc94:	4693      	mov	fp, r2
 801bc96:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801bc9a:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 801bc9c:	9d16      	ldr	r5, [sp, #88]	; 0x58
 801bc9e:	6870      	ldr	r0, [r6, #4]
 801bca0:	9100      	str	r1, [sp, #0]
 801bca2:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 801bca6:	e9dd ec11 	ldrd	lr, ip, [sp, #68]	; 0x44
 801bcaa:	fb00 2404 	mla	r4, r0, r4, r2
 801bcae:	6832      	ldr	r2, [r6, #0]
 801bcb0:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801bcb4:	682a      	ldr	r2, [r5, #0]
 801bcb6:	9201      	str	r2, [sp, #4]
 801bcb8:	686a      	ldr	r2, [r5, #4]
 801bcba:	3204      	adds	r2, #4
 801bcbc:	9202      	str	r2, [sp, #8]
 801bcbe:	9a00      	ldr	r2, [sp, #0]
 801bcc0:	2a00      	cmp	r2, #0
 801bcc2:	dc03      	bgt.n	801bccc <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 801bcc4:	f1bb 0f00 	cmp.w	fp, #0
 801bcc8:	f340 80a0 	ble.w	801be0c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17e>
 801bccc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801bcce:	f9b5 9008 	ldrsh.w	r9, [r5, #8]
 801bcd2:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801bcd6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801bcd8:	f9b5 800c 	ldrsh.w	r8, [r5, #12]
 801bcdc:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801bce0:	2b00      	cmp	r3, #0
 801bce2:	dd0c      	ble.n	801bcfe <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801bce4:	1406      	asrs	r6, r0, #16
 801bce6:	d405      	bmi.n	801bcf4 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801bce8:	454e      	cmp	r6, r9
 801bcea:	da03      	bge.n	801bcf4 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801bcec:	1416      	asrs	r6, r2, #16
 801bcee:	d401      	bmi.n	801bcf4 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801bcf0:	4546      	cmp	r6, r8
 801bcf2:	db05      	blt.n	801bd00 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801bcf4:	4470      	add	r0, lr
 801bcf6:	4462      	add	r2, ip
 801bcf8:	3b01      	subs	r3, #1
 801bcfa:	3402      	adds	r4, #2
 801bcfc:	e7f0      	b.n	801bce0 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 801bcfe:	d00f      	beq.n	801bd20 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 801bd00:	1e5e      	subs	r6, r3, #1
 801bd02:	fb0e 0706 	mla	r7, lr, r6, r0
 801bd06:	143f      	asrs	r7, r7, #16
 801bd08:	d541      	bpl.n	801bd8e <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x100>
 801bd0a:	eb04 0643 	add.w	r6, r4, r3, lsl #1
 801bd0e:	4698      	mov	r8, r3
 801bd10:	9603      	str	r6, [sp, #12]
 801bd12:	f1b8 0f00 	cmp.w	r8, #0
 801bd16:	dc59      	bgt.n	801bdcc <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 801bd18:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801bd1c:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801bd20:	9b00      	ldr	r3, [sp, #0]
 801bd22:	2b00      	cmp	r3, #0
 801bd24:	dd72      	ble.n	801be0c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17e>
 801bd26:	ee30 0a04 	vadd.f32	s0, s0, s8
 801bd2a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801bd2c:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801bd30:	eeb0 6a62 	vmov.f32	s12, s5
 801bd34:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801bd38:	ee31 1a05 	vadd.f32	s2, s2, s10
 801bd3c:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801bd40:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801bd44:	eeb0 6a43 	vmov.f32	s12, s6
 801bd48:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801bd4c:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801bd50:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801bd54:	ee61 7a27 	vmul.f32	s15, s2, s15
 801bd58:	ee77 2a62 	vsub.f32	s5, s14, s5
 801bd5c:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801bd60:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801bd64:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801bd68:	ee12 2a90 	vmov	r2, s5
 801bd6c:	eef0 2a47 	vmov.f32	s5, s14
 801bd70:	fb92 fef3 	sdiv	lr, r2, r3
 801bd74:	ee13 2a10 	vmov	r2, s6
 801bd78:	eeb0 3a67 	vmov.f32	s6, s15
 801bd7c:	fb92 fcf3 	sdiv	ip, r2, r3
 801bd80:	9b00      	ldr	r3, [sp, #0]
 801bd82:	3b01      	subs	r3, #1
 801bd84:	9300      	str	r3, [sp, #0]
 801bd86:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801bd88:	bf08      	it	eq
 801bd8a:	465b      	moveq	r3, fp
 801bd8c:	e797      	b.n	801bcbe <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30>
 801bd8e:	454f      	cmp	r7, r9
 801bd90:	dabb      	bge.n	801bd0a <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801bd92:	fb0c 2606 	mla	r6, ip, r6, r2
 801bd96:	1436      	asrs	r6, r6, #16
 801bd98:	d4b7      	bmi.n	801bd0a <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801bd9a:	4546      	cmp	r6, r8
 801bd9c:	dab5      	bge.n	801bd0a <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801bd9e:	461e      	mov	r6, r3
 801bda0:	46a0      	mov	r8, r4
 801bda2:	2e00      	cmp	r6, #0
 801bda4:	ddb8      	ble.n	801bd18 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 801bda6:	1417      	asrs	r7, r2, #16
 801bda8:	f9b5 a008 	ldrsh.w	sl, [r5, #8]
 801bdac:	9901      	ldr	r1, [sp, #4]
 801bdae:	ea4f 4920 	mov.w	r9, r0, asr #16
 801bdb2:	4462      	add	r2, ip
 801bdb4:	4470      	add	r0, lr
 801bdb6:	fb0a 1707 	mla	r7, sl, r7, r1
 801bdba:	9902      	ldr	r1, [sp, #8]
 801bdbc:	3e01      	subs	r6, #1
 801bdbe:	f817 7009 	ldrb.w	r7, [r7, r9]
 801bdc2:	f831 7017 	ldrh.w	r7, [r1, r7, lsl #1]
 801bdc6:	f828 7b02 	strh.w	r7, [r8], #2
 801bdca:	e7ea      	b.n	801bda2 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x114>
 801bdcc:	ea5f 4920 	movs.w	r9, r0, asr #16
 801bdd0:	d417      	bmi.n	801be02 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x174>
 801bdd2:	68ae      	ldr	r6, [r5, #8]
 801bdd4:	454e      	cmp	r6, r9
 801bdd6:	dd14      	ble.n	801be02 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x174>
 801bdd8:	ea5f 4a22 	movs.w	sl, r2, asr #16
 801bddc:	d411      	bmi.n	801be02 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x174>
 801bdde:	68ef      	ldr	r7, [r5, #12]
 801bde0:	4557      	cmp	r7, sl
 801bde2:	dd0e      	ble.n	801be02 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x174>
 801bde4:	9f01      	ldr	r7, [sp, #4]
 801bde6:	b236      	sxth	r6, r6
 801bde8:	f06f 0101 	mvn.w	r1, #1
 801bdec:	fb0a 7606 	mla	r6, sl, r6, r7
 801bdf0:	9f02      	ldr	r7, [sp, #8]
 801bdf2:	f816 6009 	ldrb.w	r6, [r6, r9]
 801bdf6:	f837 7016 	ldrh.w	r7, [r7, r6, lsl #1]
 801bdfa:	fb01 f608 	mul.w	r6, r1, r8
 801bdfe:	9903      	ldr	r1, [sp, #12]
 801be00:	538f      	strh	r7, [r1, r6]
 801be02:	4470      	add	r0, lr
 801be04:	4462      	add	r2, ip
 801be06:	f108 38ff 	add.w	r8, r8, #4294967295
 801be0a:	e782      	b.n	801bd12 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801be0c:	b005      	add	sp, #20
 801be0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801be12 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801be12:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801be16:	b087      	sub	sp, #28
 801be18:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801be1a:	9205      	str	r2, [sp, #20]
 801be1c:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 801be20:	9102      	str	r1, [sp, #8]
 801be22:	9203      	str	r2, [sp, #12]
 801be24:	6861      	ldr	r1, [r4, #4]
 801be26:	f8dd c060 	ldr.w	ip, [sp, #96]	; 0x60
 801be2a:	e9dd 2016 	ldrd	r2, r0, [sp, #88]	; 0x58
 801be2e:	fb01 2000 	mla	r0, r1, r0, r2
 801be32:	6822      	ldr	r2, [r4, #0]
 801be34:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 801be38:	9200      	str	r2, [sp, #0]
 801be3a:	f8dc 2000 	ldr.w	r2, [ip]
 801be3e:	9204      	str	r2, [sp, #16]
 801be40:	f8dc 2004 	ldr.w	r2, [ip, #4]
 801be44:	3204      	adds	r2, #4
 801be46:	9201      	str	r2, [sp, #4]
 801be48:	9a03      	ldr	r2, [sp, #12]
 801be4a:	43d5      	mvns	r5, r2
 801be4c:	b2ed      	uxtb	r5, r5
 801be4e:	9a02      	ldr	r2, [sp, #8]
 801be50:	2a00      	cmp	r2, #0
 801be52:	dc03      	bgt.n	801be5c <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 801be54:	9a05      	ldr	r2, [sp, #20]
 801be56:	2a00      	cmp	r2, #0
 801be58:	f340 812c 	ble.w	801c0b4 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 801be5c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801be5e:	f9bc e008 	ldrsh.w	lr, [ip, #8]
 801be62:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801be66:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801be68:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 801be6c:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801be70:	2b00      	cmp	r3, #0
 801be72:	dd10      	ble.n	801be96 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801be74:	140c      	asrs	r4, r1, #16
 801be76:	d405      	bmi.n	801be84 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801be78:	4574      	cmp	r4, lr
 801be7a:	da03      	bge.n	801be84 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801be7c:	1414      	asrs	r4, r2, #16
 801be7e:	d401      	bmi.n	801be84 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801be80:	42bc      	cmp	r4, r7
 801be82:	db09      	blt.n	801be98 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 801be84:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801be86:	3b01      	subs	r3, #1
 801be88:	9800      	ldr	r0, [sp, #0]
 801be8a:	4421      	add	r1, r4
 801be8c:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801be8e:	3002      	adds	r0, #2
 801be90:	4422      	add	r2, r4
 801be92:	9000      	str	r0, [sp, #0]
 801be94:	e7ec      	b.n	801be70 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 801be96:	d071      	beq.n	801bf7c <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16a>
 801be98:	1e5c      	subs	r4, r3, #1
 801be9a:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 801be9c:	fb06 1604 	mla	r6, r6, r4, r1
 801bea0:	1436      	asrs	r6, r6, #16
 801bea2:	d45d      	bmi.n	801bf60 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 801bea4:	4576      	cmp	r6, lr
 801bea6:	da5b      	bge.n	801bf60 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 801bea8:	9e14      	ldr	r6, [sp, #80]	; 0x50
 801beaa:	fb06 2404 	mla	r4, r6, r4, r2
 801beae:	1424      	asrs	r4, r4, #16
 801beb0:	d456      	bmi.n	801bf60 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 801beb2:	42bc      	cmp	r4, r7
 801beb4:	da54      	bge.n	801bf60 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 801beb6:	4698      	mov	r8, r3
 801beb8:	f8dd 9000 	ldr.w	r9, [sp]
 801bebc:	f8bd a00c 	ldrh.w	sl, [sp, #12]
 801bec0:	f1b8 0f00 	cmp.w	r8, #0
 801bec4:	dd54      	ble.n	801bf70 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15e>
 801bec6:	f9bc 7008 	ldrsh.w	r7, [ip, #8]
 801beca:	1414      	asrs	r4, r2, #16
 801becc:	9804      	ldr	r0, [sp, #16]
 801bece:	140e      	asrs	r6, r1, #16
 801bed0:	f108 38ff 	add.w	r8, r8, #4294967295
 801bed4:	fb07 0404 	mla	r4, r7, r4, r0
 801bed8:	9801      	ldr	r0, [sp, #4]
 801beda:	f814 e006 	ldrb.w	lr, [r4, r6]
 801bede:	f8b9 4000 	ldrh.w	r4, [r9]
 801bee2:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 801bee6:	1227      	asrs	r7, r4, #8
 801bee8:	eb00 0b0e 	add.w	fp, r0, lr
 801beec:	f810 e00e 	ldrb.w	lr, [r0, lr]
 801bef0:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801bef4:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801bef6:	f89b 6002 	ldrb.w	r6, [fp, #2]
 801befa:	f89b b001 	ldrb.w	fp, [fp, #1]
 801befe:	4401      	add	r1, r0
 801bf00:	fb16 f60a 	smulbb	r6, r6, sl
 801bf04:	9814      	ldr	r0, [sp, #80]	; 0x50
 801bf06:	fb1b fb0a 	smulbb	fp, fp, sl
 801bf0a:	fb07 6705 	mla	r7, r7, r5, r6
 801bf0e:	10e6      	asrs	r6, r4, #3
 801bf10:	00e4      	lsls	r4, r4, #3
 801bf12:	4402      	add	r2, r0
 801bf14:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801bf18:	b2bf      	uxth	r7, r7
 801bf1a:	b2e4      	uxtb	r4, r4
 801bf1c:	fb06 b605 	mla	r6, r6, r5, fp
 801bf20:	fb14 f405 	smulbb	r4, r4, r5
 801bf24:	b2b6      	uxth	r6, r6
 801bf26:	fb0e 4e0a 	mla	lr, lr, sl, r4
 801bf2a:	1c7c      	adds	r4, r7, #1
 801bf2c:	f106 0b01 	add.w	fp, r6, #1
 801bf30:	fa1f fe8e 	uxth.w	lr, lr
 801bf34:	eb04 2717 	add.w	r7, r4, r7, lsr #8
 801bf38:	f10e 0401 	add.w	r4, lr, #1
 801bf3c:	eb0b 2b16 	add.w	fp, fp, r6, lsr #8
 801bf40:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 801bf44:	eb04 241e 	add.w	r4, r4, lr, lsr #8
 801bf48:	ea4f 1b5b 	mov.w	fp, fp, lsr #5
 801bf4c:	f3c4 24c4 	ubfx	r4, r4, #11, #5
 801bf50:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 801bf54:	4327      	orrs	r7, r4
 801bf56:	ea47 070b 	orr.w	r7, r7, fp
 801bf5a:	f829 7b02 	strh.w	r7, [r9], #2
 801bf5e:	e7af      	b.n	801bec0 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xae>
 801bf60:	f04f 0e00 	mov.w	lr, #0
 801bf64:	f8bd 900c 	ldrh.w	r9, [sp, #12]
 801bf68:	eb03 040e 	add.w	r4, r3, lr
 801bf6c:	2c00      	cmp	r4, #0
 801bf6e:	dc43      	bgt.n	801bff8 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 801bf70:	9a00      	ldr	r2, [sp, #0]
 801bf72:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801bf76:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 801bf7a:	9300      	str	r3, [sp, #0]
 801bf7c:	9b02      	ldr	r3, [sp, #8]
 801bf7e:	2b00      	cmp	r3, #0
 801bf80:	f340 8098 	ble.w	801c0b4 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 801bf84:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801bf88:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801bf8a:	ee30 0a04 	vadd.f32	s0, s0, s8
 801bf8e:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801bf92:	eef0 6a62 	vmov.f32	s13, s5
 801bf96:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801bf9a:	ee31 1a05 	vadd.f32	s2, s2, s10
 801bf9e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801bfa2:	edcd 6a11 	vstr	s13, [sp, #68]	; 0x44
 801bfa6:	eef0 6a43 	vmov.f32	s13, s6
 801bfaa:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801bfae:	edcd 6a12 	vstr	s13, [sp, #72]	; 0x48
 801bfb2:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801bfb6:	ee61 7a27 	vmul.f32	s15, s2, s15
 801bfba:	ee77 2a62 	vsub.f32	s5, s14, s5
 801bfbe:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801bfc2:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801bfc6:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801bfca:	ee12 2a90 	vmov	r2, s5
 801bfce:	eef0 2a47 	vmov.f32	s5, s14
 801bfd2:	fb92 f3f3 	sdiv	r3, r2, r3
 801bfd6:	ee13 2a10 	vmov	r2, s6
 801bfda:	9313      	str	r3, [sp, #76]	; 0x4c
 801bfdc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801bfde:	eeb0 3a67 	vmov.f32	s6, s15
 801bfe2:	fb92 f3f3 	sdiv	r3, r2, r3
 801bfe6:	9314      	str	r3, [sp, #80]	; 0x50
 801bfe8:	9b02      	ldr	r3, [sp, #8]
 801bfea:	9a05      	ldr	r2, [sp, #20]
 801bfec:	3b01      	subs	r3, #1
 801bfee:	9302      	str	r3, [sp, #8]
 801bff0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801bff2:	bf08      	it	eq
 801bff4:	4613      	moveq	r3, r2
 801bff6:	e72a      	b.n	801be4e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 801bff8:	140f      	asrs	r7, r1, #16
 801bffa:	d454      	bmi.n	801c0a6 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 801bffc:	f8dc 6008 	ldr.w	r6, [ip, #8]
 801c000:	42be      	cmp	r6, r7
 801c002:	dd50      	ble.n	801c0a6 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 801c004:	ea5f 4822 	movs.w	r8, r2, asr #16
 801c008:	d44d      	bmi.n	801c0a6 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 801c00a:	f8dc 400c 	ldr.w	r4, [ip, #12]
 801c00e:	4544      	cmp	r4, r8
 801c010:	dd49      	ble.n	801c0a6 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 801c012:	9c04      	ldr	r4, [sp, #16]
 801c014:	b236      	sxth	r6, r6
 801c016:	f06f 0001 	mvn.w	r0, #1
 801c01a:	fb08 4606 	mla	r6, r8, r6, r4
 801c01e:	9c01      	ldr	r4, [sp, #4]
 801c020:	fb00 fa0e 	mul.w	sl, r0, lr
 801c024:	9800      	ldr	r0, [sp, #0]
 801c026:	f816 8007 	ldrb.w	r8, [r6, r7]
 801c02a:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 801c02e:	eb04 0b08 	add.w	fp, r4, r8
 801c032:	f830 400a 	ldrh.w	r4, [r0, sl]
 801c036:	9801      	ldr	r0, [sp, #4]
 801c038:	f89b 6002 	ldrb.w	r6, [fp, #2]
 801c03c:	1227      	asrs	r7, r4, #8
 801c03e:	f89b b001 	ldrb.w	fp, [fp, #1]
 801c042:	fb16 f609 	smulbb	r6, r6, r9
 801c046:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801c04a:	f810 8008 	ldrb.w	r8, [r0, r8]
 801c04e:	fb1b fb09 	smulbb	fp, fp, r9
 801c052:	fb07 6705 	mla	r7, r7, r5, r6
 801c056:	10e6      	asrs	r6, r4, #3
 801c058:	00e4      	lsls	r4, r4, #3
 801c05a:	9800      	ldr	r0, [sp, #0]
 801c05c:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801c060:	b2bf      	uxth	r7, r7
 801c062:	b2e4      	uxtb	r4, r4
 801c064:	fb06 b605 	mla	r6, r6, r5, fp
 801c068:	fb14 f405 	smulbb	r4, r4, r5
 801c06c:	b2b6      	uxth	r6, r6
 801c06e:	fb08 4809 	mla	r8, r8, r9, r4
 801c072:	1c7c      	adds	r4, r7, #1
 801c074:	f106 0b01 	add.w	fp, r6, #1
 801c078:	fa1f f888 	uxth.w	r8, r8
 801c07c:	eb04 2717 	add.w	r7, r4, r7, lsr #8
 801c080:	f108 0401 	add.w	r4, r8, #1
 801c084:	eb0b 2b16 	add.w	fp, fp, r6, lsr #8
 801c088:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 801c08c:	eb04 2418 	add.w	r4, r4, r8, lsr #8
 801c090:	ea4f 1b5b 	mov.w	fp, fp, lsr #5
 801c094:	f3c4 24c4 	ubfx	r4, r4, #11, #5
 801c098:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 801c09c:	4327      	orrs	r7, r4
 801c09e:	ea47 070b 	orr.w	r7, r7, fp
 801c0a2:	f820 700a 	strh.w	r7, [r0, sl]
 801c0a6:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801c0a8:	f10e 3eff 	add.w	lr, lr, #4294967295
 801c0ac:	4401      	add	r1, r0
 801c0ae:	9814      	ldr	r0, [sp, #80]	; 0x50
 801c0b0:	4402      	add	r2, r0
 801c0b2:	e759      	b.n	801bf68 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 801c0b4:	b007      	add	sp, #28
 801c0b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0801c0bc <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801c0bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c0c0:	b085      	sub	sp, #20
 801c0c2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801c0c6:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 801c0c8:	9d16      	ldr	r5, [sp, #88]	; 0x58
 801c0ca:	9203      	str	r2, [sp, #12]
 801c0cc:	6870      	ldr	r0, [r6, #4]
 801c0ce:	686f      	ldr	r7, [r5, #4]
 801c0d0:	f8dd c044 	ldr.w	ip, [sp, #68]	; 0x44
 801c0d4:	3704      	adds	r7, #4
 801c0d6:	9101      	str	r1, [sp, #4]
 801c0d8:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 801c0dc:	fb00 2404 	mla	r4, r0, r4, r2
 801c0e0:	6832      	ldr	r2, [r6, #0]
 801c0e2:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801c0e6:	682a      	ldr	r2, [r5, #0]
 801c0e8:	9202      	str	r2, [sp, #8]
 801c0ea:	9a01      	ldr	r2, [sp, #4]
 801c0ec:	2a00      	cmp	r2, #0
 801c0ee:	dc03      	bgt.n	801c0f8 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 801c0f0:	9a03      	ldr	r2, [sp, #12]
 801c0f2:	2a00      	cmp	r2, #0
 801c0f4:	f340 80cc 	ble.w	801c290 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d4>
 801c0f8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801c0fa:	f9b5 9008 	ldrsh.w	r9, [r5, #8]
 801c0fe:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801c102:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801c104:	f9b5 800c 	ldrsh.w	r8, [r5, #12]
 801c108:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801c10c:	2b00      	cmp	r3, #0
 801c10e:	dd0d      	ble.n	801c12c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801c110:	1406      	asrs	r6, r0, #16
 801c112:	d405      	bmi.n	801c120 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 801c114:	454e      	cmp	r6, r9
 801c116:	da03      	bge.n	801c120 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 801c118:	1416      	asrs	r6, r2, #16
 801c11a:	d401      	bmi.n	801c120 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 801c11c:	4546      	cmp	r6, r8
 801c11e:	db06      	blt.n	801c12e <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801c120:	9e12      	ldr	r6, [sp, #72]	; 0x48
 801c122:	4460      	add	r0, ip
 801c124:	3b01      	subs	r3, #1
 801c126:	3402      	adds	r4, #2
 801c128:	4432      	add	r2, r6
 801c12a:	e7ef      	b.n	801c10c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50>
 801c12c:	d00f      	beq.n	801c14e <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 801c12e:	1e5e      	subs	r6, r3, #1
 801c130:	fb0c 0e06 	mla	lr, ip, r6, r0
 801c134:	ea5f 4e2e 	movs.w	lr, lr, asr #16
 801c138:	d543      	bpl.n	801c1c2 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x106>
 801c13a:	4698      	mov	r8, r3
 801c13c:	eb04 0a43 	add.w	sl, r4, r3, lsl #1
 801c140:	f1b8 0f00 	cmp.w	r8, #0
 801c144:	dc71      	bgt.n	801c22a <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16e>
 801c146:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801c14a:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801c14e:	9b01      	ldr	r3, [sp, #4]
 801c150:	2b00      	cmp	r3, #0
 801c152:	f340 809d 	ble.w	801c290 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d4>
 801c156:	ee30 0a04 	vadd.f32	s0, s0, s8
 801c15a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801c15c:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801c160:	eeb0 6a62 	vmov.f32	s12, s5
 801c164:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801c168:	ee31 1a05 	vadd.f32	s2, s2, s10
 801c16c:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801c170:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801c174:	eeb0 6a43 	vmov.f32	s12, s6
 801c178:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801c17c:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801c180:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801c184:	ee61 7a27 	vmul.f32	s15, s2, s15
 801c188:	ee77 2a62 	vsub.f32	s5, s14, s5
 801c18c:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801c190:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801c194:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801c198:	ee12 2a90 	vmov	r2, s5
 801c19c:	eef0 2a47 	vmov.f32	s5, s14
 801c1a0:	fb92 fcf3 	sdiv	ip, r2, r3
 801c1a4:	ee13 2a10 	vmov	r2, s6
 801c1a8:	eeb0 3a67 	vmov.f32	s6, s15
 801c1ac:	fb92 f3f3 	sdiv	r3, r2, r3
 801c1b0:	9312      	str	r3, [sp, #72]	; 0x48
 801c1b2:	9b01      	ldr	r3, [sp, #4]
 801c1b4:	9a03      	ldr	r2, [sp, #12]
 801c1b6:	3b01      	subs	r3, #1
 801c1b8:	9301      	str	r3, [sp, #4]
 801c1ba:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801c1bc:	bf08      	it	eq
 801c1be:	4613      	moveq	r3, r2
 801c1c0:	e793      	b.n	801c0ea <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 801c1c2:	45ce      	cmp	lr, r9
 801c1c4:	dab9      	bge.n	801c13a <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801c1c6:	9912      	ldr	r1, [sp, #72]	; 0x48
 801c1c8:	fb01 2606 	mla	r6, r1, r6, r2
 801c1cc:	1436      	asrs	r6, r6, #16
 801c1ce:	d4b4      	bmi.n	801c13a <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801c1d0:	4546      	cmp	r6, r8
 801c1d2:	dab2      	bge.n	801c13a <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801c1d4:	4698      	mov	r8, r3
 801c1d6:	46a2      	mov	sl, r4
 801c1d8:	f1b8 0f00 	cmp.w	r8, #0
 801c1dc:	ddb3      	ble.n	801c146 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 801c1de:	f9b5 9008 	ldrsh.w	r9, [r5, #8]
 801c1e2:	1416      	asrs	r6, r2, #16
 801c1e4:	9902      	ldr	r1, [sp, #8]
 801c1e6:	ea4f 4e20 	mov.w	lr, r0, asr #16
 801c1ea:	f108 38ff 	add.w	r8, r8, #4294967295
 801c1ee:	4460      	add	r0, ip
 801c1f0:	fb09 1606 	mla	r6, r9, r6, r1
 801c1f4:	4928      	ldr	r1, [pc, #160]	; (801c298 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1dc>)
 801c1f6:	f816 e00e 	ldrb.w	lr, [r6, lr]
 801c1fa:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 801c1fe:	eb07 0b0e 	add.w	fp, r7, lr
 801c202:	f89b 6001 	ldrb.w	r6, [fp, #1]
 801c206:	f89b 9002 	ldrb.w	r9, [fp, #2]
 801c20a:	00f6      	lsls	r6, r6, #3
 801c20c:	ea01 2909 	and.w	r9, r1, r9, lsl #8
 801c210:	9912      	ldr	r1, [sp, #72]	; 0x48
 801c212:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 801c216:	440a      	add	r2, r1
 801c218:	ea49 0606 	orr.w	r6, r9, r6
 801c21c:	f817 900e 	ldrb.w	r9, [r7, lr]
 801c220:	ea46 06d9 	orr.w	r6, r6, r9, lsr #3
 801c224:	f82a 6b02 	strh.w	r6, [sl], #2
 801c228:	e7d6      	b.n	801c1d8 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 801c22a:	ea5f 4920 	movs.w	r9, r0, asr #16
 801c22e:	d429      	bmi.n	801c284 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 801c230:	68ae      	ldr	r6, [r5, #8]
 801c232:	454e      	cmp	r6, r9
 801c234:	dd26      	ble.n	801c284 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 801c236:	ea5f 4b22 	movs.w	fp, r2, asr #16
 801c23a:	d423      	bmi.n	801c284 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 801c23c:	68e9      	ldr	r1, [r5, #12]
 801c23e:	4559      	cmp	r1, fp
 801c240:	dd20      	ble.n	801c284 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 801c242:	fa0f fe86 	sxth.w	lr, r6
 801c246:	9902      	ldr	r1, [sp, #8]
 801c248:	fb0b 1e0e 	mla	lr, fp, lr, r1
 801c24c:	f06f 0101 	mvn.w	r1, #1
 801c250:	f81e e009 	ldrb.w	lr, [lr, r9]
 801c254:	fb01 f908 	mul.w	r9, r1, r8
 801c258:	f2a1 71fe 	subw	r1, r1, #2046	; 0x7fe
 801c25c:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 801c260:	eb07 060e 	add.w	r6, r7, lr
 801c264:	f896 b002 	ldrb.w	fp, [r6, #2]
 801c268:	7876      	ldrb	r6, [r6, #1]
 801c26a:	ea01 2b0b 	and.w	fp, r1, fp, lsl #8
 801c26e:	00f6      	lsls	r6, r6, #3
 801c270:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 801c274:	ea4b 0606 	orr.w	r6, fp, r6
 801c278:	f817 b00e 	ldrb.w	fp, [r7, lr]
 801c27c:	ea46 06db 	orr.w	r6, r6, fp, lsr #3
 801c280:	f82a 6009 	strh.w	r6, [sl, r9]
 801c284:	9912      	ldr	r1, [sp, #72]	; 0x48
 801c286:	4460      	add	r0, ip
 801c288:	f108 38ff 	add.w	r8, r8, #4294967295
 801c28c:	440a      	add	r2, r1
 801c28e:	e757      	b.n	801c140 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801c290:	b005      	add	sp, #20
 801c292:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c296:	bf00      	nop
 801c298:	fffff800 	.word	0xfffff800

0801c29c <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801c29c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c2a0:	b087      	sub	sp, #28
 801c2a2:	468b      	mov	fp, r1
 801c2a4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801c2a8:	9815      	ldr	r0, [sp, #84]	; 0x54
 801c2aa:	9204      	str	r2, [sp, #16]
 801c2ac:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 801c2b0:	6841      	ldr	r1, [r0, #4]
 801c2b2:	9205      	str	r2, [sp, #20]
 801c2b4:	f8dd c060 	ldr.w	ip, [sp, #96]	; 0x60
 801c2b8:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	; 0x58
 801c2bc:	fb01 2404 	mla	r4, r1, r4, r2
 801c2c0:	6802      	ldr	r2, [r0, #0]
 801c2c2:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801c2c6:	f8dc 2000 	ldr.w	r2, [ip]
 801c2ca:	9201      	str	r2, [sp, #4]
 801c2cc:	f8dc 2004 	ldr.w	r2, [ip, #4]
 801c2d0:	3204      	adds	r2, #4
 801c2d2:	9202      	str	r2, [sp, #8]
 801c2d4:	f1bb 0f00 	cmp.w	fp, #0
 801c2d8:	dc03      	bgt.n	801c2e2 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x46>
 801c2da:	9a04      	ldr	r2, [sp, #16]
 801c2dc:	2a00      	cmp	r2, #0
 801c2de:	f340 8138 	ble.w	801c552 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b6>
 801c2e2:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801c2e4:	f9bc 7008 	ldrsh.w	r7, [ip, #8]
 801c2e8:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801c2ec:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801c2ee:	f9bc 600c 	ldrsh.w	r6, [ip, #12]
 801c2f2:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801c2f6:	2b00      	cmp	r3, #0
 801c2f8:	dd0e      	ble.n	801c318 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801c2fa:	1402      	asrs	r2, r0, #16
 801c2fc:	d405      	bmi.n	801c30a <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801c2fe:	42ba      	cmp	r2, r7
 801c300:	da03      	bge.n	801c30a <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801c302:	140a      	asrs	r2, r1, #16
 801c304:	d401      	bmi.n	801c30a <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801c306:	42b2      	cmp	r2, r6
 801c308:	db07      	blt.n	801c31a <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801c30a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801c30c:	3b01      	subs	r3, #1
 801c30e:	3402      	adds	r4, #2
 801c310:	4410      	add	r0, r2
 801c312:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801c314:	4411      	add	r1, r2
 801c316:	e7ee      	b.n	801c2f6 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 801c318:	d019      	beq.n	801c34e <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 801c31a:	1e5a      	subs	r2, r3, #1
 801c31c:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801c31e:	fb05 0502 	mla	r5, r5, r2, r0
 801c322:	142d      	asrs	r5, r5, #16
 801c324:	d409      	bmi.n	801c33a <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801c326:	42bd      	cmp	r5, r7
 801c328:	da07      	bge.n	801c33a <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801c32a:	9d14      	ldr	r5, [sp, #80]	; 0x50
 801c32c:	fb05 1202 	mla	r2, r5, r2, r1
 801c330:	1412      	asrs	r2, r2, #16
 801c332:	d402      	bmi.n	801c33a <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801c334:	42b2      	cmp	r2, r6
 801c336:	f2c0 80ac 	blt.w	801c492 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f6>
 801c33a:	f04f 0e00 	mov.w	lr, #0
 801c33e:	eb03 020e 	add.w	r2, r3, lr
 801c342:	2a00      	cmp	r2, #0
 801c344:	dc3e      	bgt.n	801c3c4 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x128>
 801c346:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801c34a:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801c34e:	f1bb 0f00 	cmp.w	fp, #0
 801c352:	f340 80fe 	ble.w	801c552 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b6>
 801c356:	ee30 0a04 	vadd.f32	s0, s0, s8
 801c35a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801c35c:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801c360:	f1bb 0b01 	subs.w	fp, fp, #1
 801c364:	eeb0 6a62 	vmov.f32	s12, s5
 801c368:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801c36c:	ee31 1a05 	vadd.f32	s2, s2, s10
 801c370:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801c374:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 801c378:	eeb0 6a43 	vmov.f32	s12, s6
 801c37c:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801c380:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 801c384:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801c388:	ee61 7a27 	vmul.f32	s15, s2, s15
 801c38c:	ee77 2a62 	vsub.f32	s5, s14, s5
 801c390:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801c394:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801c398:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801c39c:	ee12 2a90 	vmov	r2, s5
 801c3a0:	eef0 2a47 	vmov.f32	s5, s14
 801c3a4:	fb92 f3f3 	sdiv	r3, r2, r3
 801c3a8:	ee13 2a10 	vmov	r2, s6
 801c3ac:	9313      	str	r3, [sp, #76]	; 0x4c
 801c3ae:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801c3b0:	eeb0 3a67 	vmov.f32	s6, s15
 801c3b4:	fb92 f3f3 	sdiv	r3, r2, r3
 801c3b8:	9a04      	ldr	r2, [sp, #16]
 801c3ba:	9314      	str	r3, [sp, #80]	; 0x50
 801c3bc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801c3be:	bf08      	it	eq
 801c3c0:	4613      	moveq	r3, r2
 801c3c2:	e787      	b.n	801c2d4 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 801c3c4:	1406      	asrs	r6, r0, #16
 801c3c6:	d45d      	bmi.n	801c484 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 801c3c8:	f8dc 5008 	ldr.w	r5, [ip, #8]
 801c3cc:	42b5      	cmp	r5, r6
 801c3ce:	dd59      	ble.n	801c484 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 801c3d0:	140f      	asrs	r7, r1, #16
 801c3d2:	d457      	bmi.n	801c484 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 801c3d4:	f8dc 200c 	ldr.w	r2, [ip, #12]
 801c3d8:	42ba      	cmp	r2, r7
 801c3da:	dd53      	ble.n	801c484 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 801c3dc:	9a01      	ldr	r2, [sp, #4]
 801c3de:	b22d      	sxth	r5, r5
 801c3e0:	fb07 2505 	mla	r5, r7, r5, r2
 801c3e4:	5daa      	ldrb	r2, [r5, r6]
 801c3e6:	9d02      	ldr	r5, [sp, #8]
 801c3e8:	f855 5022 	ldr.w	r5, [r5, r2, lsl #2]
 801c3ec:	0e2e      	lsrs	r6, r5, #24
 801c3ee:	d049      	beq.n	801c484 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 801c3f0:	f06f 0201 	mvn.w	r2, #1
 801c3f4:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 801c3f8:	fb02 f20e 	mul.w	r2, r2, lr
 801c3fc:	f834 8002 	ldrh.w	r8, [r4, r2]
 801c400:	9203      	str	r2, [sp, #12]
 801c402:	9a05      	ldr	r2, [sp, #20]
 801c404:	ea4f 2728 	mov.w	r7, r8, asr #8
 801c408:	4356      	muls	r6, r2
 801c40a:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801c40e:	1c72      	adds	r2, r6, #1
 801c410:	eb02 2226 	add.w	r2, r2, r6, asr #8
 801c414:	f3c5 4607 	ubfx	r6, r5, #16, #8
 801c418:	b2ed      	uxtb	r5, r5
 801c41a:	1212      	asrs	r2, r2, #8
 801c41c:	fa1f f982 	uxth.w	r9, r2
 801c420:	43d2      	mvns	r2, r2
 801c422:	fb16 f609 	smulbb	r6, r6, r9
 801c426:	b2d2      	uxtb	r2, r2
 801c428:	fb15 f509 	smulbb	r5, r5, r9
 801c42c:	fb07 6702 	mla	r7, r7, r2, r6
 801c430:	ea4f 06e8 	mov.w	r6, r8, asr #3
 801c434:	fb1a fa09 	smulbb	sl, sl, r9
 801c438:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 801c43c:	b2bf      	uxth	r7, r7
 801c43e:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801c442:	fa5f f888 	uxtb.w	r8, r8
 801c446:	fb06 a602 	mla	r6, r6, r2, sl
 801c44a:	fb08 5502 	mla	r5, r8, r2, r5
 801c44e:	1c7a      	adds	r2, r7, #1
 801c450:	b2b6      	uxth	r6, r6
 801c452:	b2ad      	uxth	r5, r5
 801c454:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 801c458:	9a03      	ldr	r2, [sp, #12]
 801c45a:	f105 0a01 	add.w	sl, r5, #1
 801c45e:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 801c462:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801c466:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801c46a:	ea47 070a 	orr.w	r7, r7, sl
 801c46e:	f106 0a01 	add.w	sl, r6, #1
 801c472:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801c476:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801c47a:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801c47e:	ea47 070a 	orr.w	r7, r7, sl
 801c482:	52a7      	strh	r7, [r4, r2]
 801c484:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801c486:	f10e 3eff 	add.w	lr, lr, #4294967295
 801c48a:	4410      	add	r0, r2
 801c48c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801c48e:	4411      	add	r1, r2
 801c490:	e755      	b.n	801c33e <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 801c492:	f04f 0800 	mov.w	r8, #0
 801c496:	eba3 0208 	sub.w	r2, r3, r8
 801c49a:	2a00      	cmp	r2, #0
 801c49c:	f77f af53 	ble.w	801c346 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 801c4a0:	f9bc 6008 	ldrsh.w	r6, [ip, #8]
 801c4a4:	140a      	asrs	r2, r1, #16
 801c4a6:	9f01      	ldr	r7, [sp, #4]
 801c4a8:	1405      	asrs	r5, r0, #16
 801c4aa:	fb06 7202 	mla	r2, r6, r2, r7
 801c4ae:	5d52      	ldrb	r2, [r2, r5]
 801c4b0:	9d02      	ldr	r5, [sp, #8]
 801c4b2:	f855 5022 	ldr.w	r5, [r5, r2, lsl #2]
 801c4b6:	0e2e      	lsrs	r6, r5, #24
 801c4b8:	d044      	beq.n	801c544 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a8>
 801c4ba:	9a05      	ldr	r2, [sp, #20]
 801c4bc:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 801c4c0:	f834 e018 	ldrh.w	lr, [r4, r8, lsl #1]
 801c4c4:	4356      	muls	r6, r2
 801c4c6:	ea4f 272e 	mov.w	r7, lr, asr #8
 801c4ca:	1c72      	adds	r2, r6, #1
 801c4cc:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801c4d0:	eb02 2226 	add.w	r2, r2, r6, asr #8
 801c4d4:	f3c5 4607 	ubfx	r6, r5, #16, #8
 801c4d8:	b2ed      	uxtb	r5, r5
 801c4da:	1212      	asrs	r2, r2, #8
 801c4dc:	fa1f f982 	uxth.w	r9, r2
 801c4e0:	43d2      	mvns	r2, r2
 801c4e2:	fb16 f609 	smulbb	r6, r6, r9
 801c4e6:	b2d2      	uxtb	r2, r2
 801c4e8:	fb15 f509 	smulbb	r5, r5, r9
 801c4ec:	fb07 6702 	mla	r7, r7, r2, r6
 801c4f0:	ea4f 06ee 	mov.w	r6, lr, asr #3
 801c4f4:	fb1a fa09 	smulbb	sl, sl, r9
 801c4f8:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801c4fc:	b2bf      	uxth	r7, r7
 801c4fe:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801c502:	fa5f fe8e 	uxtb.w	lr, lr
 801c506:	fb06 a602 	mla	r6, r6, r2, sl
 801c50a:	fb0e 5502 	mla	r5, lr, r2, r5
 801c50e:	1c7a      	adds	r2, r7, #1
 801c510:	b2b6      	uxth	r6, r6
 801c512:	b2ad      	uxth	r5, r5
 801c514:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 801c518:	f105 0a01 	add.w	sl, r5, #1
 801c51c:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 801c520:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801c524:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801c528:	ea47 070a 	orr.w	r7, r7, sl
 801c52c:	f106 0a01 	add.w	sl, r6, #1
 801c530:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801c534:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801c538:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801c53c:	ea47 070a 	orr.w	r7, r7, sl
 801c540:	f824 7018 	strh.w	r7, [r4, r8, lsl #1]
 801c544:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801c546:	f108 0801 	add.w	r8, r8, #1
 801c54a:	4410      	add	r0, r2
 801c54c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801c54e:	4411      	add	r1, r2
 801c550:	e7a1      	b.n	801c496 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 801c552:	b007      	add	sp, #28
 801c554:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801c558 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801c558:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c55c:	b085      	sub	sp, #20
 801c55e:	468b      	mov	fp, r1
 801c560:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801c564:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801c566:	9203      	str	r2, [sp, #12]
 801c568:	6841      	ldr	r1, [r0, #4]
 801c56a:	f8dd e058 	ldr.w	lr, [sp, #88]	; 0x58
 801c56e:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 801c572:	fb01 2404 	mla	r4, r1, r4, r2
 801c576:	6802      	ldr	r2, [r0, #0]
 801c578:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801c57c:	f8de 2000 	ldr.w	r2, [lr]
 801c580:	9200      	str	r2, [sp, #0]
 801c582:	f8de 2004 	ldr.w	r2, [lr, #4]
 801c586:	3204      	adds	r2, #4
 801c588:	9201      	str	r2, [sp, #4]
 801c58a:	f1bb 0f00 	cmp.w	fp, #0
 801c58e:	dc03      	bgt.n	801c598 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40>
 801c590:	9a03      	ldr	r2, [sp, #12]
 801c592:	2a00      	cmp	r2, #0
 801c594:	f340 8153 	ble.w	801c83e <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e6>
 801c598:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801c59a:	f9be 7008 	ldrsh.w	r7, [lr, #8]
 801c59e:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801c5a2:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801c5a4:	f9be 600c 	ldrsh.w	r6, [lr, #12]
 801c5a8:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801c5ac:	2b00      	cmp	r3, #0
 801c5ae:	dd0e      	ble.n	801c5ce <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801c5b0:	1408      	asrs	r0, r1, #16
 801c5b2:	d405      	bmi.n	801c5c0 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801c5b4:	42b8      	cmp	r0, r7
 801c5b6:	da03      	bge.n	801c5c0 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801c5b8:	1410      	asrs	r0, r2, #16
 801c5ba:	d401      	bmi.n	801c5c0 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801c5bc:	42b0      	cmp	r0, r6
 801c5be:	db07      	blt.n	801c5d0 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801c5c0:	9811      	ldr	r0, [sp, #68]	; 0x44
 801c5c2:	3b01      	subs	r3, #1
 801c5c4:	3402      	adds	r4, #2
 801c5c6:	4401      	add	r1, r0
 801c5c8:	9812      	ldr	r0, [sp, #72]	; 0x48
 801c5ca:	4402      	add	r2, r0
 801c5cc:	e7ee      	b.n	801c5ac <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54>
 801c5ce:	d017      	beq.n	801c600 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 801c5d0:	1e58      	subs	r0, r3, #1
 801c5d2:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801c5d4:	fb05 1500 	mla	r5, r5, r0, r1
 801c5d8:	142d      	asrs	r5, r5, #16
 801c5da:	d409      	bmi.n	801c5f0 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801c5dc:	42bd      	cmp	r5, r7
 801c5de:	da07      	bge.n	801c5f0 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801c5e0:	9d12      	ldr	r5, [sp, #72]	; 0x48
 801c5e2:	fb05 2000 	mla	r0, r5, r0, r2
 801c5e6:	1400      	asrs	r0, r0, #16
 801c5e8:	d402      	bmi.n	801c5f0 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801c5ea:	42b0      	cmp	r0, r6
 801c5ec:	f2c0 80bc 	blt.w	801c768 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x210>
 801c5f0:	2600      	movs	r6, #0
 801c5f2:	1998      	adds	r0, r3, r6
 801c5f4:	2800      	cmp	r0, #0
 801c5f6:	dc3e      	bgt.n	801c676 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11e>
 801c5f8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801c5fc:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801c600:	f1bb 0f00 	cmp.w	fp, #0
 801c604:	f340 811b 	ble.w	801c83e <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e6>
 801c608:	ee30 0a04 	vadd.f32	s0, s0, s8
 801c60c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801c60e:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801c612:	f1bb 0b01 	subs.w	fp, fp, #1
 801c616:	eeb0 6a62 	vmov.f32	s12, s5
 801c61a:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801c61e:	ee31 1a05 	vadd.f32	s2, s2, s10
 801c622:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801c626:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801c62a:	eeb0 6a43 	vmov.f32	s12, s6
 801c62e:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801c632:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801c636:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801c63a:	ee61 7a27 	vmul.f32	s15, s2, s15
 801c63e:	ee77 2a62 	vsub.f32	s5, s14, s5
 801c642:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801c646:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801c64a:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801c64e:	ee12 2a90 	vmov	r2, s5
 801c652:	eef0 2a47 	vmov.f32	s5, s14
 801c656:	fb92 f3f3 	sdiv	r3, r2, r3
 801c65a:	ee13 2a10 	vmov	r2, s6
 801c65e:	9311      	str	r3, [sp, #68]	; 0x44
 801c660:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801c662:	eeb0 3a67 	vmov.f32	s6, s15
 801c666:	fb92 f3f3 	sdiv	r3, r2, r3
 801c66a:	9a03      	ldr	r2, [sp, #12]
 801c66c:	9312      	str	r3, [sp, #72]	; 0x48
 801c66e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801c670:	bf08      	it	eq
 801c672:	4613      	moveq	r3, r2
 801c674:	e789      	b.n	801c58a <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32>
 801c676:	140f      	asrs	r7, r1, #16
 801c678:	d45e      	bmi.n	801c738 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e0>
 801c67a:	f8de 5008 	ldr.w	r5, [lr, #8]
 801c67e:	42bd      	cmp	r5, r7
 801c680:	dd5a      	ble.n	801c738 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e0>
 801c682:	ea5f 4c22 	movs.w	ip, r2, asr #16
 801c686:	d457      	bmi.n	801c738 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e0>
 801c688:	f8de 000c 	ldr.w	r0, [lr, #12]
 801c68c:	4560      	cmp	r0, ip
 801c68e:	dd53      	ble.n	801c738 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e0>
 801c690:	9800      	ldr	r0, [sp, #0]
 801c692:	b22d      	sxth	r5, r5
 801c694:	fb0c 0505 	mla	r5, ip, r5, r0
 801c698:	5de8      	ldrb	r0, [r5, r7]
 801c69a:	9d01      	ldr	r5, [sp, #4]
 801c69c:	f855 0020 	ldr.w	r0, [r5, r0, lsl #2]
 801c6a0:	0e07      	lsrs	r7, r0, #24
 801c6a2:	2fff      	cmp	r7, #255	; 0xff
 801c6a4:	d04e      	beq.n	801c744 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ec>
 801c6a6:	b2fd      	uxtb	r5, r7
 801c6a8:	2f00      	cmp	r7, #0
 801c6aa:	d045      	beq.n	801c738 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e0>
 801c6ac:	f06f 0701 	mvn.w	r7, #1
 801c6b0:	fa1f f985 	uxth.w	r9, r5
 801c6b4:	43ed      	mvns	r5, r5
 801c6b6:	f3c0 2a07 	ubfx	sl, r0, #8, #8
 801c6ba:	4377      	muls	r7, r6
 801c6bc:	fb1a fa09 	smulbb	sl, sl, r9
 801c6c0:	b2ed      	uxtb	r5, r5
 801c6c2:	f834 8007 	ldrh.w	r8, [r4, r7]
 801c6c6:	9702      	str	r7, [sp, #8]
 801c6c8:	f3c0 4707 	ubfx	r7, r0, #16, #8
 801c6cc:	ea4f 2c28 	mov.w	ip, r8, asr #8
 801c6d0:	fb17 f709 	smulbb	r7, r7, r9
 801c6d4:	b2c0      	uxtb	r0, r0
 801c6d6:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801c6da:	fb10 f009 	smulbb	r0, r0, r9
 801c6de:	fb0c 7c05 	mla	ip, ip, r5, r7
 801c6e2:	ea4f 07e8 	mov.w	r7, r8, asr #3
 801c6e6:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 801c6ea:	fa1f fc8c 	uxth.w	ip, ip
 801c6ee:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801c6f2:	fa5f f888 	uxtb.w	r8, r8
 801c6f6:	fb07 a705 	mla	r7, r7, r5, sl
 801c6fa:	fb08 0005 	mla	r0, r8, r5, r0
 801c6fe:	f10c 0501 	add.w	r5, ip, #1
 801c702:	b2bf      	uxth	r7, r7
 801c704:	b280      	uxth	r0, r0
 801c706:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 801c70a:	f100 0a01 	add.w	sl, r0, #1
 801c70e:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801c712:	eb0a 2a10 	add.w	sl, sl, r0, lsr #8
 801c716:	9802      	ldr	r0, [sp, #8]
 801c718:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801c71c:	ea4c 0c0a 	orr.w	ip, ip, sl
 801c720:	f107 0a01 	add.w	sl, r7, #1
 801c724:	eb0a 2a17 	add.w	sl, sl, r7, lsr #8
 801c728:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801c72c:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801c730:	ea4c 0c0a 	orr.w	ip, ip, sl
 801c734:	f824 c000 	strh.w	ip, [r4, r0]
 801c738:	9811      	ldr	r0, [sp, #68]	; 0x44
 801c73a:	3e01      	subs	r6, #1
 801c73c:	4401      	add	r1, r0
 801c73e:	9812      	ldr	r0, [sp, #72]	; 0x48
 801c740:	4402      	add	r2, r0
 801c742:	e756      	b.n	801c5f2 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 801c744:	f06f 0501 	mvn.w	r5, #1
 801c748:	fb05 f706 	mul.w	r7, r5, r6
 801c74c:	f2a5 75fe 	subw	r5, r5, #2046	; 0x7fe
 801c750:	ea05 2c10 	and.w	ip, r5, r0, lsr #8
 801c754:	0945      	lsrs	r5, r0, #5
 801c756:	f3c0 00c4 	ubfx	r0, r0, #3, #5
 801c75a:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 801c75e:	ea4c 0505 	orr.w	r5, ip, r5
 801c762:	4305      	orrs	r5, r0
 801c764:	53e5      	strh	r5, [r4, r7]
 801c766:	e7e7      	b.n	801c738 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e0>
 801c768:	f04f 0800 	mov.w	r8, #0
 801c76c:	eba3 0008 	sub.w	r0, r3, r8
 801c770:	2800      	cmp	r0, #0
 801c772:	f77f af41 	ble.w	801c5f8 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 801c776:	f9be 6008 	ldrsh.w	r6, [lr, #8]
 801c77a:	1410      	asrs	r0, r2, #16
 801c77c:	9f00      	ldr	r7, [sp, #0]
 801c77e:	140d      	asrs	r5, r1, #16
 801c780:	fb06 7000 	mla	r0, r6, r0, r7
 801c784:	5d40      	ldrb	r0, [r0, r5]
 801c786:	9d01      	ldr	r5, [sp, #4]
 801c788:	f855 0020 	ldr.w	r0, [r5, r0, lsl #2]
 801c78c:	0e06      	lsrs	r6, r0, #24
 801c78e:	2eff      	cmp	r6, #255	; 0xff
 801c790:	d048      	beq.n	801c824 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2cc>
 801c792:	b2f5      	uxtb	r5, r6
 801c794:	2e00      	cmp	r6, #0
 801c796:	d03e      	beq.n	801c816 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2be>
 801c798:	f834 c018 	ldrh.w	ip, [r4, r8, lsl #1]
 801c79c:	fa1f f985 	uxth.w	r9, r5
 801c7a0:	f3c0 4607 	ubfx	r6, r0, #16, #8
 801c7a4:	43ed      	mvns	r5, r5
 801c7a6:	ea4f 272c 	mov.w	r7, ip, asr #8
 801c7aa:	f3c0 2a07 	ubfx	sl, r0, #8, #8
 801c7ae:	fb16 f609 	smulbb	r6, r6, r9
 801c7b2:	b2ed      	uxtb	r5, r5
 801c7b4:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801c7b8:	b2c0      	uxtb	r0, r0
 801c7ba:	fb1a fa09 	smulbb	sl, sl, r9
 801c7be:	fb07 6705 	mla	r7, r7, r5, r6
 801c7c2:	ea4f 06ec 	mov.w	r6, ip, asr #3
 801c7c6:	fb10 f009 	smulbb	r0, r0, r9
 801c7ca:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 801c7ce:	b2bf      	uxth	r7, r7
 801c7d0:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801c7d4:	fa5f fc8c 	uxtb.w	ip, ip
 801c7d8:	fb06 a605 	mla	r6, r6, r5, sl
 801c7dc:	fb0c 0005 	mla	r0, ip, r5, r0
 801c7e0:	1c7d      	adds	r5, r7, #1
 801c7e2:	b2b6      	uxth	r6, r6
 801c7e4:	b280      	uxth	r0, r0
 801c7e6:	eb05 2717 	add.w	r7, r5, r7, lsr #8
 801c7ea:	f100 0a01 	add.w	sl, r0, #1
 801c7ee:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 801c7f2:	eb0a 2a10 	add.w	sl, sl, r0, lsr #8
 801c7f6:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801c7fa:	ea47 070a 	orr.w	r7, r7, sl
 801c7fe:	f106 0a01 	add.w	sl, r6, #1
 801c802:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801c806:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801c80a:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801c80e:	ea47 070a 	orr.w	r7, r7, sl
 801c812:	f824 7018 	strh.w	r7, [r4, r8, lsl #1]
 801c816:	9811      	ldr	r0, [sp, #68]	; 0x44
 801c818:	f108 0801 	add.w	r8, r8, #1
 801c81c:	4401      	add	r1, r0
 801c81e:	9812      	ldr	r0, [sp, #72]	; 0x48
 801c820:	4402      	add	r2, r0
 801c822:	e7a3      	b.n	801c76c <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 801c824:	4d07      	ldr	r5, [pc, #28]	; (801c844 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ec>)
 801c826:	ea05 2610 	and.w	r6, r5, r0, lsr #8
 801c82a:	0945      	lsrs	r5, r0, #5
 801c82c:	f3c0 00c4 	ubfx	r0, r0, #3, #5
 801c830:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 801c834:	4335      	orrs	r5, r6
 801c836:	4305      	orrs	r5, r0
 801c838:	f824 5018 	strh.w	r5, [r4, r8, lsl #1]
 801c83c:	e7eb      	b.n	801c816 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2be>
 801c83e:	b005      	add	sp, #20
 801c840:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c844:	fffff800 	.word	0xfffff800

0801c848 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801c848:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c84c:	b087      	sub	sp, #28
 801c84e:	468b      	mov	fp, r1
 801c850:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801c854:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801c856:	9204      	str	r2, [sp, #16]
 801c858:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 801c85c:	6861      	ldr	r1, [r4, #4]
 801c85e:	9205      	str	r2, [sp, #20]
 801c860:	f8dd e060 	ldr.w	lr, [sp, #96]	; 0x60
 801c864:	e9dd 2016 	ldrd	r2, r0, [sp, #88]	; 0x58
 801c868:	fb01 2000 	mla	r0, r1, r0, r2
 801c86c:	6822      	ldr	r2, [r4, #0]
 801c86e:	eb02 0040 	add.w	r0, r2, r0, lsl #1
 801c872:	f8de 2000 	ldr.w	r2, [lr]
 801c876:	9201      	str	r2, [sp, #4]
 801c878:	f8de 2004 	ldr.w	r2, [lr, #4]
 801c87c:	9202      	str	r2, [sp, #8]
 801c87e:	f1bb 0f00 	cmp.w	fp, #0
 801c882:	dc03      	bgt.n	801c88c <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44>
 801c884:	9a04      	ldr	r2, [sp, #16]
 801c886:	2a00      	cmp	r2, #0
 801c888:	f340 8142 	ble.w	801cb10 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c8>
 801c88c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801c88e:	f9be 7008 	ldrsh.w	r7, [lr, #8]
 801c892:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801c896:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801c898:	f9be 600c 	ldrsh.w	r6, [lr, #12]
 801c89c:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801c8a0:	2b00      	cmp	r3, #0
 801c8a2:	dd0e      	ble.n	801c8c2 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 801c8a4:	140c      	asrs	r4, r1, #16
 801c8a6:	d405      	bmi.n	801c8b4 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 801c8a8:	42bc      	cmp	r4, r7
 801c8aa:	da03      	bge.n	801c8b4 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 801c8ac:	1414      	asrs	r4, r2, #16
 801c8ae:	d401      	bmi.n	801c8b4 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 801c8b0:	42b4      	cmp	r4, r6
 801c8b2:	db07      	blt.n	801c8c4 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801c8b4:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801c8b6:	3b01      	subs	r3, #1
 801c8b8:	3002      	adds	r0, #2
 801c8ba:	4421      	add	r1, r4
 801c8bc:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801c8be:	4422      	add	r2, r4
 801c8c0:	e7ee      	b.n	801c8a0 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 801c8c2:	d019      	beq.n	801c8f8 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 801c8c4:	1e5c      	subs	r4, r3, #1
 801c8c6:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801c8c8:	fb05 1504 	mla	r5, r5, r4, r1
 801c8cc:	142d      	asrs	r5, r5, #16
 801c8ce:	d409      	bmi.n	801c8e4 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 801c8d0:	42bd      	cmp	r5, r7
 801c8d2:	da07      	bge.n	801c8e4 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 801c8d4:	9d14      	ldr	r5, [sp, #80]	; 0x50
 801c8d6:	fb05 2404 	mla	r4, r5, r4, r2
 801c8da:	1424      	asrs	r4, r4, #16
 801c8dc:	d402      	bmi.n	801c8e4 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 801c8de:	42b4      	cmp	r4, r6
 801c8e0:	f2c0 80b1 	blt.w	801ca46 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fe>
 801c8e4:	f04f 0800 	mov.w	r8, #0
 801c8e8:	eb03 0408 	add.w	r4, r3, r8
 801c8ec:	2c00      	cmp	r4, #0
 801c8ee:	dc3e      	bgt.n	801c96e <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 801c8f0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801c8f4:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801c8f8:	f1bb 0f00 	cmp.w	fp, #0
 801c8fc:	f340 8108 	ble.w	801cb10 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c8>
 801c900:	ee30 0a04 	vadd.f32	s0, s0, s8
 801c904:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801c906:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801c90a:	f1bb 0b01 	subs.w	fp, fp, #1
 801c90e:	eeb0 6a62 	vmov.f32	s12, s5
 801c912:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801c916:	ee31 1a05 	vadd.f32	s2, s2, s10
 801c91a:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801c91e:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 801c922:	eeb0 6a43 	vmov.f32	s12, s6
 801c926:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801c92a:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 801c92e:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801c932:	ee61 7a27 	vmul.f32	s15, s2, s15
 801c936:	ee77 2a62 	vsub.f32	s5, s14, s5
 801c93a:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801c93e:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801c942:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801c946:	ee12 2a90 	vmov	r2, s5
 801c94a:	eef0 2a47 	vmov.f32	s5, s14
 801c94e:	fb92 f3f3 	sdiv	r3, r2, r3
 801c952:	ee13 2a10 	vmov	r2, s6
 801c956:	9313      	str	r3, [sp, #76]	; 0x4c
 801c958:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801c95a:	eeb0 3a67 	vmov.f32	s6, s15
 801c95e:	fb92 f3f3 	sdiv	r3, r2, r3
 801c962:	9a04      	ldr	r2, [sp, #16]
 801c964:	9314      	str	r3, [sp, #80]	; 0x50
 801c966:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801c968:	bf08      	it	eq
 801c96a:	4613      	moveq	r3, r2
 801c96c:	e787      	b.n	801c87e <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36>
 801c96e:	140e      	asrs	r6, r1, #16
 801c970:	d462      	bmi.n	801ca38 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 801c972:	f8de 5008 	ldr.w	r5, [lr, #8]
 801c976:	42b5      	cmp	r5, r6
 801c978:	dd5e      	ble.n	801ca38 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 801c97a:	1417      	asrs	r7, r2, #16
 801c97c:	d45c      	bmi.n	801ca38 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 801c97e:	f8de 400c 	ldr.w	r4, [lr, #12]
 801c982:	42bc      	cmp	r4, r7
 801c984:	dd58      	ble.n	801ca38 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 801c986:	b22d      	sxth	r5, r5
 801c988:	9c02      	ldr	r4, [sp, #8]
 801c98a:	fb07 6505 	mla	r5, r7, r5, r6
 801c98e:	5d66      	ldrb	r6, [r4, r5]
 801c990:	2e00      	cmp	r6, #0
 801c992:	d051      	beq.n	801ca38 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 801c994:	9c01      	ldr	r4, [sp, #4]
 801c996:	f834 9015 	ldrh.w	r9, [r4, r5, lsl #1]
 801c99a:	f06f 0401 	mvn.w	r4, #1
 801c99e:	fb04 f408 	mul.w	r4, r4, r8
 801c9a2:	ea4f 2c29 	mov.w	ip, r9, asr #8
 801c9a6:	5b05      	ldrh	r5, [r0, r4]
 801c9a8:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801c9ac:	9403      	str	r4, [sp, #12]
 801c9ae:	9c05      	ldr	r4, [sp, #20]
 801c9b0:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 801c9b4:	4366      	muls	r6, r4
 801c9b6:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
 801c9ba:	1c74      	adds	r4, r6, #1
 801c9bc:	eb04 2416 	add.w	r4, r4, r6, lsr #8
 801c9c0:	122e      	asrs	r6, r5, #8
 801c9c2:	1224      	asrs	r4, r4, #8
 801c9c4:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 801c9c8:	00ed      	lsls	r5, r5, #3
 801c9ca:	b2a7      	uxth	r7, r4
 801c9cc:	43e4      	mvns	r4, r4
 801c9ce:	b2ed      	uxtb	r5, r5
 801c9d0:	b2e4      	uxtb	r4, r4
 801c9d2:	fb16 f604 	smulbb	r6, r6, r4
 801c9d6:	fb15 f504 	smulbb	r5, r5, r4
 801c9da:	fb0c 6c07 	mla	ip, ip, r7, r6
 801c9de:	ea4f 06e9 	mov.w	r6, r9, asr #3
 801c9e2:	fb1a fa04 	smulbb	sl, sl, r4
 801c9e6:	ea4f 09c9 	mov.w	r9, r9, lsl #3
 801c9ea:	fa1f fc8c 	uxth.w	ip, ip
 801c9ee:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801c9f2:	fa5f f989 	uxtb.w	r9, r9
 801c9f6:	fb06 a607 	mla	r6, r6, r7, sl
 801c9fa:	f10c 0401 	add.w	r4, ip, #1
 801c9fe:	fb09 5507 	mla	r5, r9, r7, r5
 801ca02:	eb04 2c1c 	add.w	ip, r4, ip, lsr #8
 801ca06:	9c03      	ldr	r4, [sp, #12]
 801ca08:	b2ad      	uxth	r5, r5
 801ca0a:	b2b6      	uxth	r6, r6
 801ca0c:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801ca10:	f105 0a01 	add.w	sl, r5, #1
 801ca14:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801ca18:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801ca1c:	ea4c 0c0a 	orr.w	ip, ip, sl
 801ca20:	f106 0a01 	add.w	sl, r6, #1
 801ca24:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801ca28:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801ca2c:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801ca30:	ea4c 0c0a 	orr.w	ip, ip, sl
 801ca34:	f820 c004 	strh.w	ip, [r0, r4]
 801ca38:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801ca3a:	f108 38ff 	add.w	r8, r8, #4294967295
 801ca3e:	4421      	add	r1, r4
 801ca40:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801ca42:	4422      	add	r2, r4
 801ca44:	e750      	b.n	801c8e8 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 801ca46:	f04f 0900 	mov.w	r9, #0
 801ca4a:	eba3 0409 	sub.w	r4, r3, r9
 801ca4e:	2c00      	cmp	r4, #0
 801ca50:	f77f af4e 	ble.w	801c8f0 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 801ca54:	f9be 6008 	ldrsh.w	r6, [lr, #8]
 801ca58:	140d      	asrs	r5, r1, #16
 801ca5a:	1414      	asrs	r4, r2, #16
 801ca5c:	fb06 5404 	mla	r4, r6, r4, r5
 801ca60:	9d02      	ldr	r5, [sp, #8]
 801ca62:	5d2e      	ldrb	r6, [r5, r4]
 801ca64:	2e00      	cmp	r6, #0
 801ca66:	d04c      	beq.n	801cb02 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ba>
 801ca68:	9d01      	ldr	r5, [sp, #4]
 801ca6a:	f835 8014 	ldrh.w	r8, [r5, r4, lsl #1]
 801ca6e:	9c05      	ldr	r4, [sp, #20]
 801ca70:	f830 5019 	ldrh.w	r5, [r0, r9, lsl #1]
 801ca74:	ea4f 2c28 	mov.w	ip, r8, asr #8
 801ca78:	4366      	muls	r6, r4
 801ca7a:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 801ca7e:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801ca82:	1c74      	adds	r4, r6, #1
 801ca84:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
 801ca88:	eb04 2416 	add.w	r4, r4, r6, lsr #8
 801ca8c:	122e      	asrs	r6, r5, #8
 801ca8e:	1224      	asrs	r4, r4, #8
 801ca90:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 801ca94:	00ed      	lsls	r5, r5, #3
 801ca96:	b2a7      	uxth	r7, r4
 801ca98:	43e4      	mvns	r4, r4
 801ca9a:	b2ed      	uxtb	r5, r5
 801ca9c:	b2e4      	uxtb	r4, r4
 801ca9e:	fb16 f604 	smulbb	r6, r6, r4
 801caa2:	fb15 f504 	smulbb	r5, r5, r4
 801caa6:	fb0c 6c07 	mla	ip, ip, r7, r6
 801caaa:	ea4f 06e8 	mov.w	r6, r8, asr #3
 801caae:	fb1a fa04 	smulbb	sl, sl, r4
 801cab2:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 801cab6:	fa1f fc8c 	uxth.w	ip, ip
 801caba:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801cabe:	fa5f f888 	uxtb.w	r8, r8
 801cac2:	fb06 a607 	mla	r6, r6, r7, sl
 801cac6:	f10c 0401 	add.w	r4, ip, #1
 801caca:	fb08 5507 	mla	r5, r8, r7, r5
 801cace:	eb04 2c1c 	add.w	ip, r4, ip, lsr #8
 801cad2:	b2ad      	uxth	r5, r5
 801cad4:	b2b6      	uxth	r6, r6
 801cad6:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801cada:	f105 0a01 	add.w	sl, r5, #1
 801cade:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801cae2:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801cae6:	ea4c 0c0a 	orr.w	ip, ip, sl
 801caea:	f106 0a01 	add.w	sl, r6, #1
 801caee:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801caf2:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801caf6:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801cafa:	ea4c 0c0a 	orr.w	ip, ip, sl
 801cafe:	f820 c019 	strh.w	ip, [r0, r9, lsl #1]
 801cb02:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801cb04:	f109 0901 	add.w	r9, r9, #1
 801cb08:	4421      	add	r1, r4
 801cb0a:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801cb0c:	4422      	add	r2, r4
 801cb0e:	e79c      	b.n	801ca4a <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x202>
 801cb10:	b007      	add	sp, #28
 801cb12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801cb16 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801cb16:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cb1a:	b085      	sub	sp, #20
 801cb1c:	468b      	mov	fp, r1
 801cb1e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801cb22:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801cb24:	9203      	str	r2, [sp, #12]
 801cb26:	6861      	ldr	r1, [r4, #4]
 801cb28:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 801cb2c:	e9dd 2014 	ldrd	r2, r0, [sp, #80]	; 0x50
 801cb30:	fb01 2000 	mla	r0, r1, r0, r2
 801cb34:	6822      	ldr	r2, [r4, #0]
 801cb36:	eb02 0040 	add.w	r0, r2, r0, lsl #1
 801cb3a:	f8d8 2000 	ldr.w	r2, [r8]
 801cb3e:	9200      	str	r2, [sp, #0]
 801cb40:	f8d8 2004 	ldr.w	r2, [r8, #4]
 801cb44:	9201      	str	r2, [sp, #4]
 801cb46:	f1bb 0f00 	cmp.w	fp, #0
 801cb4a:	dc03      	bgt.n	801cb54 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 801cb4c:	9a03      	ldr	r2, [sp, #12]
 801cb4e:	2a00      	cmp	r2, #0
 801cb50:	f340 8146 	ble.w	801cde0 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ca>
 801cb54:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801cb56:	f9b8 7008 	ldrsh.w	r7, [r8, #8]
 801cb5a:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801cb5e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801cb60:	f9b8 600c 	ldrsh.w	r6, [r8, #12]
 801cb64:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801cb68:	2b00      	cmp	r3, #0
 801cb6a:	dd0e      	ble.n	801cb8a <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 801cb6c:	140c      	asrs	r4, r1, #16
 801cb6e:	d405      	bmi.n	801cb7c <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801cb70:	42bc      	cmp	r4, r7
 801cb72:	da03      	bge.n	801cb7c <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801cb74:	1414      	asrs	r4, r2, #16
 801cb76:	d401      	bmi.n	801cb7c <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801cb78:	42b4      	cmp	r4, r6
 801cb7a:	db07      	blt.n	801cb8c <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801cb7c:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801cb7e:	3b01      	subs	r3, #1
 801cb80:	3002      	adds	r0, #2
 801cb82:	4421      	add	r1, r4
 801cb84:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801cb86:	4422      	add	r2, r4
 801cb88:	e7ee      	b.n	801cb68 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 801cb8a:	d017      	beq.n	801cbbc <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 801cb8c:	1e5c      	subs	r4, r3, #1
 801cb8e:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801cb90:	fb05 1504 	mla	r5, r5, r4, r1
 801cb94:	142d      	asrs	r5, r5, #16
 801cb96:	d409      	bmi.n	801cbac <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801cb98:	42bd      	cmp	r5, r7
 801cb9a:	da07      	bge.n	801cbac <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801cb9c:	9d12      	ldr	r5, [sp, #72]	; 0x48
 801cb9e:	fb05 2404 	mla	r4, r5, r4, r2
 801cba2:	1424      	asrs	r4, r4, #16
 801cba4:	d402      	bmi.n	801cbac <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801cba6:	42b4      	cmp	r4, r6
 801cba8:	f2c0 80b3 	blt.w	801cd12 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fc>
 801cbac:	2600      	movs	r6, #0
 801cbae:	199c      	adds	r4, r3, r6
 801cbb0:	2c00      	cmp	r4, #0
 801cbb2:	dc3e      	bgt.n	801cc32 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 801cbb4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801cbb8:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801cbbc:	f1bb 0f00 	cmp.w	fp, #0
 801cbc0:	f340 810e 	ble.w	801cde0 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ca>
 801cbc4:	ee30 0a04 	vadd.f32	s0, s0, s8
 801cbc8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801cbca:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801cbce:	f1bb 0b01 	subs.w	fp, fp, #1
 801cbd2:	eeb0 6a62 	vmov.f32	s12, s5
 801cbd6:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801cbda:	ee31 1a05 	vadd.f32	s2, s2, s10
 801cbde:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801cbe2:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801cbe6:	eeb0 6a43 	vmov.f32	s12, s6
 801cbea:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801cbee:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801cbf2:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801cbf6:	ee61 7a27 	vmul.f32	s15, s2, s15
 801cbfa:	ee77 2a62 	vsub.f32	s5, s14, s5
 801cbfe:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801cc02:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801cc06:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801cc0a:	ee12 2a90 	vmov	r2, s5
 801cc0e:	eef0 2a47 	vmov.f32	s5, s14
 801cc12:	fb92 f3f3 	sdiv	r3, r2, r3
 801cc16:	ee13 2a10 	vmov	r2, s6
 801cc1a:	9311      	str	r3, [sp, #68]	; 0x44
 801cc1c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801cc1e:	eeb0 3a67 	vmov.f32	s6, s15
 801cc22:	fb92 f3f3 	sdiv	r3, r2, r3
 801cc26:	9a03      	ldr	r2, [sp, #12]
 801cc28:	9312      	str	r3, [sp, #72]	; 0x48
 801cc2a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801cc2c:	bf08      	it	eq
 801cc2e:	4613      	moveq	r3, r2
 801cc30:	e789      	b.n	801cb46 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30>
 801cc32:	140f      	asrs	r7, r1, #16
 801cc34:	d45f      	bmi.n	801ccf6 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e0>
 801cc36:	f8d8 5008 	ldr.w	r5, [r8, #8]
 801cc3a:	42bd      	cmp	r5, r7
 801cc3c:	dd5b      	ble.n	801ccf6 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e0>
 801cc3e:	ea5f 4c22 	movs.w	ip, r2, asr #16
 801cc42:	d458      	bmi.n	801ccf6 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e0>
 801cc44:	f8d8 400c 	ldr.w	r4, [r8, #12]
 801cc48:	4564      	cmp	r4, ip
 801cc4a:	dd54      	ble.n	801ccf6 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e0>
 801cc4c:	b22d      	sxth	r5, r5
 801cc4e:	9c01      	ldr	r4, [sp, #4]
 801cc50:	fb0c 7505 	mla	r5, ip, r5, r7
 801cc54:	5d64      	ldrb	r4, [r4, r5]
 801cc56:	2cff      	cmp	r4, #255	; 0xff
 801cc58:	d053      	beq.n	801cd02 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ec>
 801cc5a:	2c00      	cmp	r4, #0
 801cc5c:	d04b      	beq.n	801ccf6 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e0>
 801cc5e:	9f00      	ldr	r7, [sp, #0]
 801cc60:	fa1f fc84 	uxth.w	ip, r4
 801cc64:	43e4      	mvns	r4, r4
 801cc66:	f837 9015 	ldrh.w	r9, [r7, r5, lsl #1]
 801cc6a:	f06f 0501 	mvn.w	r5, #1
 801cc6e:	b2e4      	uxtb	r4, r4
 801cc70:	4375      	muls	r5, r6
 801cc72:	ea4f 2e29 	mov.w	lr, r9, asr #8
 801cc76:	9502      	str	r5, [sp, #8]
 801cc78:	f00e 0ef8 	and.w	lr, lr, #248	; 0xf8
 801cc7c:	5b45      	ldrh	r5, [r0, r5]
 801cc7e:	122f      	asrs	r7, r5, #8
 801cc80:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 801cc84:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801cc88:	00ed      	lsls	r5, r5, #3
 801cc8a:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
 801cc8e:	fb17 f704 	smulbb	r7, r7, r4
 801cc92:	b2ed      	uxtb	r5, r5
 801cc94:	fb1a fa04 	smulbb	sl, sl, r4
 801cc98:	fb0e 7e0c 	mla	lr, lr, ip, r7
 801cc9c:	ea4f 07e9 	mov.w	r7, r9, asr #3
 801cca0:	fb15 f504 	smulbb	r5, r5, r4
 801cca4:	ea4f 09c9 	mov.w	r9, r9, lsl #3
 801cca8:	fa1f fe8e 	uxth.w	lr, lr
 801ccac:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801ccb0:	fa5f f989 	uxtb.w	r9, r9
 801ccb4:	fb07 a70c 	mla	r7, r7, ip, sl
 801ccb8:	f10e 0401 	add.w	r4, lr, #1
 801ccbc:	fb09 550c 	mla	r5, r9, ip, r5
 801ccc0:	eb04 2e1e 	add.w	lr, r4, lr, lsr #8
 801ccc4:	9c02      	ldr	r4, [sp, #8]
 801ccc6:	b2ad      	uxth	r5, r5
 801ccc8:	b2bf      	uxth	r7, r7
 801ccca:	f40e 4e78 	and.w	lr, lr, #63488	; 0xf800
 801ccce:	f105 0a01 	add.w	sl, r5, #1
 801ccd2:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801ccd6:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801ccda:	ea4e 0e0a 	orr.w	lr, lr, sl
 801ccde:	f107 0a01 	add.w	sl, r7, #1
 801cce2:	eb0a 2a17 	add.w	sl, sl, r7, lsr #8
 801cce6:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801ccea:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801ccee:	ea4e 0e0a 	orr.w	lr, lr, sl
 801ccf2:	f820 e004 	strh.w	lr, [r0, r4]
 801ccf6:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801ccf8:	3e01      	subs	r6, #1
 801ccfa:	4421      	add	r1, r4
 801ccfc:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801ccfe:	4422      	add	r2, r4
 801cd00:	e755      	b.n	801cbae <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801cd02:	9c00      	ldr	r4, [sp, #0]
 801cd04:	f834 5015 	ldrh.w	r5, [r4, r5, lsl #1]
 801cd08:	f06f 0401 	mvn.w	r4, #1
 801cd0c:	4374      	muls	r4, r6
 801cd0e:	5305      	strh	r5, [r0, r4]
 801cd10:	e7f1      	b.n	801ccf6 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e0>
 801cd12:	f04f 0900 	mov.w	r9, #0
 801cd16:	eba3 0409 	sub.w	r4, r3, r9
 801cd1a:	2c00      	cmp	r4, #0
 801cd1c:	f77f af4a 	ble.w	801cbb4 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801cd20:	1414      	asrs	r4, r2, #16
 801cd22:	f9b8 6008 	ldrsh.w	r6, [r8, #8]
 801cd26:	140d      	asrs	r5, r1, #16
 801cd28:	fb06 5504 	mla	r5, r6, r4, r5
 801cd2c:	9c01      	ldr	r4, [sp, #4]
 801cd2e:	5d64      	ldrb	r4, [r4, r5]
 801cd30:	2cff      	cmp	r4, #255	; 0xff
 801cd32:	d04f      	beq.n	801cdd4 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2be>
 801cd34:	2c00      	cmp	r4, #0
 801cd36:	d046      	beq.n	801cdc6 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 801cd38:	9e00      	ldr	r6, [sp, #0]
 801cd3a:	b2a7      	uxth	r7, r4
 801cd3c:	43e4      	mvns	r4, r4
 801cd3e:	f836 e015 	ldrh.w	lr, [r6, r5, lsl #1]
 801cd42:	f830 5019 	ldrh.w	r5, [r0, r9, lsl #1]
 801cd46:	b2e4      	uxtb	r4, r4
 801cd48:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 801cd4c:	122e      	asrs	r6, r5, #8
 801cd4e:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 801cd52:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801cd56:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 801cd5a:	00ed      	lsls	r5, r5, #3
 801cd5c:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
 801cd60:	fb16 f604 	smulbb	r6, r6, r4
 801cd64:	b2ed      	uxtb	r5, r5
 801cd66:	fb1a fa04 	smulbb	sl, sl, r4
 801cd6a:	fb0c 6c07 	mla	ip, ip, r7, r6
 801cd6e:	ea4f 06ee 	mov.w	r6, lr, asr #3
 801cd72:	fb15 f504 	smulbb	r5, r5, r4
 801cd76:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801cd7a:	fa1f fc8c 	uxth.w	ip, ip
 801cd7e:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801cd82:	fa5f fe8e 	uxtb.w	lr, lr
 801cd86:	fb06 a607 	mla	r6, r6, r7, sl
 801cd8a:	f10c 0401 	add.w	r4, ip, #1
 801cd8e:	fb0e 5507 	mla	r5, lr, r7, r5
 801cd92:	eb04 2c1c 	add.w	ip, r4, ip, lsr #8
 801cd96:	b2ad      	uxth	r5, r5
 801cd98:	b2b6      	uxth	r6, r6
 801cd9a:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801cd9e:	f105 0a01 	add.w	sl, r5, #1
 801cda2:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801cda6:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801cdaa:	ea4c 0c0a 	orr.w	ip, ip, sl
 801cdae:	f106 0a01 	add.w	sl, r6, #1
 801cdb2:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801cdb6:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801cdba:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801cdbe:	ea4c 0c0a 	orr.w	ip, ip, sl
 801cdc2:	f820 c019 	strh.w	ip, [r0, r9, lsl #1]
 801cdc6:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801cdc8:	f109 0901 	add.w	r9, r9, #1
 801cdcc:	4421      	add	r1, r4
 801cdce:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801cdd0:	4422      	add	r2, r4
 801cdd2:	e7a0      	b.n	801cd16 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 801cdd4:	9c00      	ldr	r4, [sp, #0]
 801cdd6:	f834 4015 	ldrh.w	r4, [r4, r5, lsl #1]
 801cdda:	f820 4019 	strh.w	r4, [r0, r9, lsl #1]
 801cdde:	e7f2      	b.n	801cdc6 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 801cde0:	b005      	add	sp, #20
 801cde2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801cde6 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801cde6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cdea:	b085      	sub	sp, #20
 801cdec:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801cdee:	9203      	str	r2, [sp, #12]
 801cdf0:	f89d 205c 	ldrb.w	r2, [sp, #92]	; 0x5c
 801cdf4:	9100      	str	r1, [sp, #0]
 801cdf6:	9201      	str	r2, [sp, #4]
 801cdf8:	6841      	ldr	r1, [r0, #4]
 801cdfa:	f8dd e058 	ldr.w	lr, [sp, #88]	; 0x58
 801cdfe:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 801ce02:	fb01 2404 	mla	r4, r1, r4, r2
 801ce06:	6802      	ldr	r2, [r0, #0]
 801ce08:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801ce0c:	f8de 2000 	ldr.w	r2, [lr]
 801ce10:	9202      	str	r2, [sp, #8]
 801ce12:	9a01      	ldr	r2, [sp, #4]
 801ce14:	43d6      	mvns	r6, r2
 801ce16:	b2f6      	uxtb	r6, r6
 801ce18:	9a00      	ldr	r2, [sp, #0]
 801ce1a:	2a00      	cmp	r2, #0
 801ce1c:	dc03      	bgt.n	801ce26 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40>
 801ce1e:	9a03      	ldr	r2, [sp, #12]
 801ce20:	2a00      	cmp	r2, #0
 801ce22:	f340 8124 	ble.w	801d06e <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x288>
 801ce26:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801ce28:	f9be c008 	ldrsh.w	ip, [lr, #8]
 801ce2c:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801ce30:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801ce32:	f9be 700c 	ldrsh.w	r7, [lr, #12]
 801ce36:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801ce3a:	2b00      	cmp	r3, #0
 801ce3c:	dd0e      	ble.n	801ce5c <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801ce3e:	1408      	asrs	r0, r1, #16
 801ce40:	d405      	bmi.n	801ce4e <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801ce42:	4560      	cmp	r0, ip
 801ce44:	da03      	bge.n	801ce4e <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801ce46:	1410      	asrs	r0, r2, #16
 801ce48:	d401      	bmi.n	801ce4e <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801ce4a:	42b8      	cmp	r0, r7
 801ce4c:	db07      	blt.n	801ce5e <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801ce4e:	9811      	ldr	r0, [sp, #68]	; 0x44
 801ce50:	3b01      	subs	r3, #1
 801ce52:	3402      	adds	r4, #2
 801ce54:	4401      	add	r1, r0
 801ce56:	9812      	ldr	r0, [sp, #72]	; 0x48
 801ce58:	4402      	add	r2, r0
 801ce5a:	e7ee      	b.n	801ce3a <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54>
 801ce5c:	d06e      	beq.n	801cf3c <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 801ce5e:	1e58      	subs	r0, r3, #1
 801ce60:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801ce62:	fb05 1500 	mla	r5, r5, r0, r1
 801ce66:	142d      	asrs	r5, r5, #16
 801ce68:	d45c      	bmi.n	801cf24 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 801ce6a:	4565      	cmp	r5, ip
 801ce6c:	da5a      	bge.n	801cf24 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 801ce6e:	9d12      	ldr	r5, [sp, #72]	; 0x48
 801ce70:	fb05 2000 	mla	r0, r5, r0, r2
 801ce74:	1400      	asrs	r0, r0, #16
 801ce76:	d455      	bmi.n	801cf24 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 801ce78:	42b8      	cmp	r0, r7
 801ce7a:	da53      	bge.n	801cf24 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 801ce7c:	4699      	mov	r9, r3
 801ce7e:	46a2      	mov	sl, r4
 801ce80:	f8bd b004 	ldrh.w	fp, [sp, #4]
 801ce84:	f1b9 0f00 	cmp.w	r9, #0
 801ce88:	dd54      	ble.n	801cf34 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 801ce8a:	f9be 7008 	ldrsh.w	r7, [lr, #8]
 801ce8e:	140d      	asrs	r5, r1, #16
 801ce90:	1410      	asrs	r0, r2, #16
 801ce92:	f109 39ff 	add.w	r9, r9, #4294967295
 801ce96:	fb07 5000 	mla	r0, r7, r0, r5
 801ce9a:	9d02      	ldr	r5, [sp, #8]
 801ce9c:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
 801cea0:	f8ba 5000 	ldrh.w	r5, [sl]
 801cea4:	ea4f 2c20 	mov.w	ip, r0, asr #8
 801cea8:	122f      	asrs	r7, r5, #8
 801ceaa:	ea4f 08e5 	mov.w	r8, r5, asr #3
 801ceae:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801ceb2:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801ceb6:	00ed      	lsls	r5, r5, #3
 801ceb8:	f008 08fc 	and.w	r8, r8, #252	; 0xfc
 801cebc:	fb17 f706 	smulbb	r7, r7, r6
 801cec0:	b2ed      	uxtb	r5, r5
 801cec2:	fb18 f806 	smulbb	r8, r8, r6
 801cec6:	fb0c 7c0b 	mla	ip, ip, fp, r7
 801ceca:	10c7      	asrs	r7, r0, #3
 801cecc:	fb15 f506 	smulbb	r5, r5, r6
 801ced0:	00c0      	lsls	r0, r0, #3
 801ced2:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801ced6:	fa1f fc8c 	uxth.w	ip, ip
 801ceda:	b2c0      	uxtb	r0, r0
 801cedc:	fb07 870b 	mla	r7, r7, fp, r8
 801cee0:	fb00 500b 	mla	r0, r0, fp, r5
 801cee4:	f10c 0501 	add.w	r5, ip, #1
 801cee8:	b2bf      	uxth	r7, r7
 801ceea:	b280      	uxth	r0, r0
 801ceec:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 801cef0:	f107 0801 	add.w	r8, r7, #1
 801cef4:	1c45      	adds	r5, r0, #1
 801cef6:	eb08 2817 	add.w	r8, r8, r7, lsr #8
 801cefa:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801cefe:	eb05 2510 	add.w	r5, r5, r0, lsr #8
 801cf02:	9811      	ldr	r0, [sp, #68]	; 0x44
 801cf04:	ea4f 1858 	mov.w	r8, r8, lsr #5
 801cf08:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 801cf0c:	4401      	add	r1, r0
 801cf0e:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
 801cf12:	9812      	ldr	r0, [sp, #72]	; 0x48
 801cf14:	ea4c 0c05 	orr.w	ip, ip, r5
 801cf18:	4402      	add	r2, r0
 801cf1a:	ea4c 0c08 	orr.w	ip, ip, r8
 801cf1e:	f82a cb02 	strh.w	ip, [sl], #2
 801cf22:	e7af      	b.n	801ce84 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801cf24:	f04f 0800 	mov.w	r8, #0
 801cf28:	f8bd a004 	ldrh.w	sl, [sp, #4]
 801cf2c:	eb03 0008 	add.w	r0, r3, r8
 801cf30:	2800      	cmp	r0, #0
 801cf32:	dc41      	bgt.n	801cfb8 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d2>
 801cf34:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801cf38:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801cf3c:	9b00      	ldr	r3, [sp, #0]
 801cf3e:	2b00      	cmp	r3, #0
 801cf40:	f340 8095 	ble.w	801d06e <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x288>
 801cf44:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801cf48:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801cf4a:	ee30 0a04 	vadd.f32	s0, s0, s8
 801cf4e:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801cf52:	eef0 6a62 	vmov.f32	s13, s5
 801cf56:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801cf5a:	ee31 1a05 	vadd.f32	s2, s2, s10
 801cf5e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801cf62:	edcd 6a0f 	vstr	s13, [sp, #60]	; 0x3c
 801cf66:	eef0 6a43 	vmov.f32	s13, s6
 801cf6a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801cf6e:	edcd 6a10 	vstr	s13, [sp, #64]	; 0x40
 801cf72:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801cf76:	ee61 7a27 	vmul.f32	s15, s2, s15
 801cf7a:	ee77 2a62 	vsub.f32	s5, s14, s5
 801cf7e:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801cf82:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801cf86:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801cf8a:	ee12 2a90 	vmov	r2, s5
 801cf8e:	eef0 2a47 	vmov.f32	s5, s14
 801cf92:	fb92 f3f3 	sdiv	r3, r2, r3
 801cf96:	ee13 2a10 	vmov	r2, s6
 801cf9a:	9311      	str	r3, [sp, #68]	; 0x44
 801cf9c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801cf9e:	eeb0 3a67 	vmov.f32	s6, s15
 801cfa2:	fb92 f3f3 	sdiv	r3, r2, r3
 801cfa6:	9312      	str	r3, [sp, #72]	; 0x48
 801cfa8:	9b00      	ldr	r3, [sp, #0]
 801cfaa:	9a03      	ldr	r2, [sp, #12]
 801cfac:	3b01      	subs	r3, #1
 801cfae:	9300      	str	r3, [sp, #0]
 801cfb0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801cfb2:	bf08      	it	eq
 801cfb4:	4613      	moveq	r3, r2
 801cfb6:	e72f      	b.n	801ce18 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32>
 801cfb8:	140f      	asrs	r7, r1, #16
 801cfba:	d451      	bmi.n	801d060 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 801cfbc:	f8de 5008 	ldr.w	r5, [lr, #8]
 801cfc0:	42bd      	cmp	r5, r7
 801cfc2:	dd4d      	ble.n	801d060 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 801cfc4:	ea5f 4c22 	movs.w	ip, r2, asr #16
 801cfc8:	d44a      	bmi.n	801d060 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 801cfca:	f8de 000c 	ldr.w	r0, [lr, #12]
 801cfce:	4560      	cmp	r0, ip
 801cfd0:	dd46      	ble.n	801d060 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 801cfd2:	b22d      	sxth	r5, r5
 801cfd4:	9802      	ldr	r0, [sp, #8]
 801cfd6:	fb0c 7505 	mla	r5, ip, r5, r7
 801cfda:	f830 0015 	ldrh.w	r0, [r0, r5, lsl #1]
 801cfde:	f06f 0501 	mvn.w	r5, #1
 801cfe2:	fb05 fb08 	mul.w	fp, r5, r8
 801cfe6:	ea4f 2c20 	mov.w	ip, r0, asr #8
 801cfea:	f834 500b 	ldrh.w	r5, [r4, fp]
 801cfee:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801cff2:	122f      	asrs	r7, r5, #8
 801cff4:	ea4f 09e5 	mov.w	r9, r5, asr #3
 801cff8:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801cffc:	00ed      	lsls	r5, r5, #3
 801cffe:	f009 09fc 	and.w	r9, r9, #252	; 0xfc
 801d002:	fb17 f706 	smulbb	r7, r7, r6
 801d006:	b2ed      	uxtb	r5, r5
 801d008:	fb19 f906 	smulbb	r9, r9, r6
 801d00c:	fb0c 7c0a 	mla	ip, ip, sl, r7
 801d010:	10c7      	asrs	r7, r0, #3
 801d012:	fb15 f506 	smulbb	r5, r5, r6
 801d016:	00c0      	lsls	r0, r0, #3
 801d018:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801d01c:	fa1f fc8c 	uxth.w	ip, ip
 801d020:	b2c0      	uxtb	r0, r0
 801d022:	fb07 970a 	mla	r7, r7, sl, r9
 801d026:	fb00 500a 	mla	r0, r0, sl, r5
 801d02a:	f10c 0501 	add.w	r5, ip, #1
 801d02e:	b2bf      	uxth	r7, r7
 801d030:	b280      	uxth	r0, r0
 801d032:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 801d036:	f107 0901 	add.w	r9, r7, #1
 801d03a:	1c45      	adds	r5, r0, #1
 801d03c:	eb09 2917 	add.w	r9, r9, r7, lsr #8
 801d040:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801d044:	eb05 2510 	add.w	r5, r5, r0, lsr #8
 801d048:	ea4f 1959 	mov.w	r9, r9, lsr #5
 801d04c:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 801d050:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 801d054:	ea4c 0c05 	orr.w	ip, ip, r5
 801d058:	ea4c 0c09 	orr.w	ip, ip, r9
 801d05c:	f824 c00b 	strh.w	ip, [r4, fp]
 801d060:	9811      	ldr	r0, [sp, #68]	; 0x44
 801d062:	f108 38ff 	add.w	r8, r8, #4294967295
 801d066:	4401      	add	r1, r0
 801d068:	9812      	ldr	r0, [sp, #72]	; 0x48
 801d06a:	4402      	add	r2, r0
 801d06c:	e75e      	b.n	801cf2c <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 801d06e:	b005      	add	sp, #20
 801d070:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801d074 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801d074:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d078:	b085      	sub	sp, #20
 801d07a:	4693      	mov	fp, r2
 801d07c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801d080:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 801d082:	9d16      	ldr	r5, [sp, #88]	; 0x58
 801d084:	6870      	ldr	r0, [r6, #4]
 801d086:	9101      	str	r1, [sp, #4]
 801d088:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 801d08c:	e9dd ec11 	ldrd	lr, ip, [sp, #68]	; 0x44
 801d090:	fb00 2404 	mla	r4, r0, r4, r2
 801d094:	6832      	ldr	r2, [r6, #0]
 801d096:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801d09a:	682a      	ldr	r2, [r5, #0]
 801d09c:	9202      	str	r2, [sp, #8]
 801d09e:	9a01      	ldr	r2, [sp, #4]
 801d0a0:	2a00      	cmp	r2, #0
 801d0a2:	dc03      	bgt.n	801d0ac <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 801d0a4:	f1bb 0f00 	cmp.w	fp, #0
 801d0a8:	f340 809a 	ble.w	801d1e0 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16c>
 801d0ac:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801d0ae:	f9b5 9008 	ldrsh.w	r9, [r5, #8]
 801d0b2:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801d0b6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801d0b8:	f9b5 800c 	ldrsh.w	r8, [r5, #12]
 801d0bc:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801d0c0:	2b00      	cmp	r3, #0
 801d0c2:	dd0c      	ble.n	801d0de <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801d0c4:	1406      	asrs	r6, r0, #16
 801d0c6:	d405      	bmi.n	801d0d4 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 801d0c8:	454e      	cmp	r6, r9
 801d0ca:	da03      	bge.n	801d0d4 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 801d0cc:	1416      	asrs	r6, r2, #16
 801d0ce:	d401      	bmi.n	801d0d4 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 801d0d0:	4546      	cmp	r6, r8
 801d0d2:	db05      	blt.n	801d0e0 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 801d0d4:	4470      	add	r0, lr
 801d0d6:	4462      	add	r2, ip
 801d0d8:	3b01      	subs	r3, #1
 801d0da:	3402      	adds	r4, #2
 801d0dc:	e7f0      	b.n	801d0c0 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 801d0de:	d00f      	beq.n	801d100 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 801d0e0:	1e5e      	subs	r6, r3, #1
 801d0e2:	fb0e 0706 	mla	r7, lr, r6, r0
 801d0e6:	143f      	asrs	r7, r7, #16
 801d0e8:	d541      	bpl.n	801d16e <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xfa>
 801d0ea:	eb04 0643 	add.w	r6, r4, r3, lsl #1
 801d0ee:	4698      	mov	r8, r3
 801d0f0:	9603      	str	r6, [sp, #12]
 801d0f2:	f1b8 0f00 	cmp.w	r8, #0
 801d0f6:	dc56      	bgt.n	801d1a6 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x132>
 801d0f8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801d0fc:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801d100:	9b01      	ldr	r3, [sp, #4]
 801d102:	2b00      	cmp	r3, #0
 801d104:	dd6c      	ble.n	801d1e0 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16c>
 801d106:	ee30 0a04 	vadd.f32	s0, s0, s8
 801d10a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801d10c:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801d110:	eeb0 6a62 	vmov.f32	s12, s5
 801d114:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801d118:	ee31 1a05 	vadd.f32	s2, s2, s10
 801d11c:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801d120:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801d124:	eeb0 6a43 	vmov.f32	s12, s6
 801d128:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801d12c:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801d130:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801d134:	ee61 7a27 	vmul.f32	s15, s2, s15
 801d138:	ee77 2a62 	vsub.f32	s5, s14, s5
 801d13c:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801d140:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801d144:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801d148:	ee12 2a90 	vmov	r2, s5
 801d14c:	eef0 2a47 	vmov.f32	s5, s14
 801d150:	fb92 fef3 	sdiv	lr, r2, r3
 801d154:	ee13 2a10 	vmov	r2, s6
 801d158:	eeb0 3a67 	vmov.f32	s6, s15
 801d15c:	fb92 fcf3 	sdiv	ip, r2, r3
 801d160:	9b01      	ldr	r3, [sp, #4]
 801d162:	3b01      	subs	r3, #1
 801d164:	9301      	str	r3, [sp, #4]
 801d166:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801d168:	bf08      	it	eq
 801d16a:	465b      	moveq	r3, fp
 801d16c:	e797      	b.n	801d09e <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a>
 801d16e:	454f      	cmp	r7, r9
 801d170:	dabb      	bge.n	801d0ea <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801d172:	fb0c 2606 	mla	r6, ip, r6, r2
 801d176:	1436      	asrs	r6, r6, #16
 801d178:	d4b7      	bmi.n	801d0ea <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801d17a:	4546      	cmp	r6, r8
 801d17c:	dab5      	bge.n	801d0ea <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801d17e:	461e      	mov	r6, r3
 801d180:	46a0      	mov	r8, r4
 801d182:	2e00      	cmp	r6, #0
 801d184:	ddb8      	ble.n	801d0f8 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801d186:	1417      	asrs	r7, r2, #16
 801d188:	f9b5 a008 	ldrsh.w	sl, [r5, #8]
 801d18c:	ea4f 4920 	mov.w	r9, r0, asr #16
 801d190:	9902      	ldr	r1, [sp, #8]
 801d192:	4470      	add	r0, lr
 801d194:	4462      	add	r2, ip
 801d196:	fb0a 9707 	mla	r7, sl, r7, r9
 801d19a:	3e01      	subs	r6, #1
 801d19c:	f831 7017 	ldrh.w	r7, [r1, r7, lsl #1]
 801d1a0:	f828 7b02 	strh.w	r7, [r8], #2
 801d1a4:	e7ed      	b.n	801d182 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10e>
 801d1a6:	ea5f 4920 	movs.w	r9, r0, asr #16
 801d1aa:	d414      	bmi.n	801d1d6 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x162>
 801d1ac:	68ae      	ldr	r6, [r5, #8]
 801d1ae:	454e      	cmp	r6, r9
 801d1b0:	dd11      	ble.n	801d1d6 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x162>
 801d1b2:	ea5f 4a22 	movs.w	sl, r2, asr #16
 801d1b6:	d40e      	bmi.n	801d1d6 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x162>
 801d1b8:	68ef      	ldr	r7, [r5, #12]
 801d1ba:	4557      	cmp	r7, sl
 801d1bc:	dd0b      	ble.n	801d1d6 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x162>
 801d1be:	b236      	sxth	r6, r6
 801d1c0:	f06f 0101 	mvn.w	r1, #1
 801d1c4:	9f02      	ldr	r7, [sp, #8]
 801d1c6:	fb0a 9606 	mla	r6, sl, r6, r9
 801d1ca:	f837 7016 	ldrh.w	r7, [r7, r6, lsl #1]
 801d1ce:	fb01 f608 	mul.w	r6, r1, r8
 801d1d2:	9903      	ldr	r1, [sp, #12]
 801d1d4:	538f      	strh	r7, [r1, r6]
 801d1d6:	4470      	add	r0, lr
 801d1d8:	4462      	add	r2, ip
 801d1da:	f108 38ff 	add.w	r8, r8, #4294967295
 801d1de:	e788      	b.n	801d0f2 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801d1e0:	b005      	add	sp, #20
 801d1e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801d1e6 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801d1e6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d1ea:	b085      	sub	sp, #20
 801d1ec:	468b      	mov	fp, r1
 801d1ee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801d1f2:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801d1f4:	9202      	str	r2, [sp, #8]
 801d1f6:	f89d 205c 	ldrb.w	r2, [sp, #92]	; 0x5c
 801d1fa:	6841      	ldr	r1, [r0, #4]
 801d1fc:	9203      	str	r2, [sp, #12]
 801d1fe:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 801d202:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 801d206:	fb01 2404 	mla	r4, r1, r4, r2
 801d20a:	6802      	ldr	r2, [r0, #0]
 801d20c:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801d210:	f8d8 2000 	ldr.w	r2, [r8]
 801d214:	9200      	str	r2, [sp, #0]
 801d216:	f1bb 0f00 	cmp.w	fp, #0
 801d21a:	dc03      	bgt.n	801d224 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 801d21c:	9a02      	ldr	r2, [sp, #8]
 801d21e:	2a00      	cmp	r2, #0
 801d220:	f340 8134 	ble.w	801d48c <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a6>
 801d224:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801d226:	f9b8 7008 	ldrsh.w	r7, [r8, #8]
 801d22a:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801d22e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801d230:	f9b8 600c 	ldrsh.w	r6, [r8, #12]
 801d234:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801d238:	2b00      	cmp	r3, #0
 801d23a:	dd0e      	ble.n	801d25a <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 801d23c:	1402      	asrs	r2, r0, #16
 801d23e:	d405      	bmi.n	801d24c <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801d240:	42ba      	cmp	r2, r7
 801d242:	da03      	bge.n	801d24c <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801d244:	140a      	asrs	r2, r1, #16
 801d246:	d401      	bmi.n	801d24c <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801d248:	42b2      	cmp	r2, r6
 801d24a:	db07      	blt.n	801d25c <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801d24c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801d24e:	3b01      	subs	r3, #1
 801d250:	3402      	adds	r4, #2
 801d252:	4410      	add	r0, r2
 801d254:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801d256:	4411      	add	r1, r2
 801d258:	e7ee      	b.n	801d238 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 801d25a:	d019      	beq.n	801d290 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 801d25c:	1e5a      	subs	r2, r3, #1
 801d25e:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801d260:	fb05 0502 	mla	r5, r5, r2, r0
 801d264:	142d      	asrs	r5, r5, #16
 801d266:	d409      	bmi.n	801d27c <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801d268:	42bd      	cmp	r5, r7
 801d26a:	da07      	bge.n	801d27c <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801d26c:	9d12      	ldr	r5, [sp, #72]	; 0x48
 801d26e:	fb05 1202 	mla	r2, r5, r2, r1
 801d272:	1412      	asrs	r2, r2, #16
 801d274:	d402      	bmi.n	801d27c <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801d276:	42b2      	cmp	r2, r6
 801d278:	f2c0 80aa 	blt.w	801d3d0 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 801d27c:	f04f 0c00 	mov.w	ip, #0
 801d280:	eb03 020c 	add.w	r2, r3, ip
 801d284:	2a00      	cmp	r2, #0
 801d286:	dc3e      	bgt.n	801d306 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x120>
 801d288:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801d28c:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801d290:	f1bb 0f00 	cmp.w	fp, #0
 801d294:	f340 80fa 	ble.w	801d48c <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a6>
 801d298:	ee30 0a04 	vadd.f32	s0, s0, s8
 801d29c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801d29e:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801d2a2:	f1bb 0b01 	subs.w	fp, fp, #1
 801d2a6:	eeb0 6a62 	vmov.f32	s12, s5
 801d2aa:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801d2ae:	ee31 1a05 	vadd.f32	s2, s2, s10
 801d2b2:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801d2b6:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801d2ba:	eeb0 6a43 	vmov.f32	s12, s6
 801d2be:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801d2c2:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801d2c6:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801d2ca:	ee61 7a27 	vmul.f32	s15, s2, s15
 801d2ce:	ee77 2a62 	vsub.f32	s5, s14, s5
 801d2d2:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801d2d6:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801d2da:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801d2de:	ee12 2a90 	vmov	r2, s5
 801d2e2:	eef0 2a47 	vmov.f32	s5, s14
 801d2e6:	fb92 f3f3 	sdiv	r3, r2, r3
 801d2ea:	ee13 2a10 	vmov	r2, s6
 801d2ee:	9311      	str	r3, [sp, #68]	; 0x44
 801d2f0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801d2f2:	eeb0 3a67 	vmov.f32	s6, s15
 801d2f6:	fb92 f3f3 	sdiv	r3, r2, r3
 801d2fa:	9a02      	ldr	r2, [sp, #8]
 801d2fc:	9312      	str	r3, [sp, #72]	; 0x48
 801d2fe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801d300:	bf08      	it	eq
 801d302:	4613      	moveq	r3, r2
 801d304:	e787      	b.n	801d216 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30>
 801d306:	1406      	asrs	r6, r0, #16
 801d308:	d45b      	bmi.n	801d3c2 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1dc>
 801d30a:	f8d8 5008 	ldr.w	r5, [r8, #8]
 801d30e:	42b5      	cmp	r5, r6
 801d310:	dd57      	ble.n	801d3c2 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1dc>
 801d312:	140f      	asrs	r7, r1, #16
 801d314:	d455      	bmi.n	801d3c2 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1dc>
 801d316:	f8d8 200c 	ldr.w	r2, [r8, #12]
 801d31a:	42ba      	cmp	r2, r7
 801d31c:	dd51      	ble.n	801d3c2 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1dc>
 801d31e:	b22d      	sxth	r5, r5
 801d320:	9a00      	ldr	r2, [sp, #0]
 801d322:	fb07 6505 	mla	r5, r7, r5, r6
 801d326:	f852 5025 	ldr.w	r5, [r2, r5, lsl #2]
 801d32a:	0e2e      	lsrs	r6, r5, #24
 801d32c:	d049      	beq.n	801d3c2 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1dc>
 801d32e:	f06f 0201 	mvn.w	r2, #1
 801d332:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 801d336:	fb02 f20c 	mul.w	r2, r2, ip
 801d33a:	f834 e002 	ldrh.w	lr, [r4, r2]
 801d33e:	9201      	str	r2, [sp, #4]
 801d340:	9a03      	ldr	r2, [sp, #12]
 801d342:	ea4f 272e 	mov.w	r7, lr, asr #8
 801d346:	4356      	muls	r6, r2
 801d348:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801d34c:	1c72      	adds	r2, r6, #1
 801d34e:	eb02 2226 	add.w	r2, r2, r6, asr #8
 801d352:	f3c5 4607 	ubfx	r6, r5, #16, #8
 801d356:	b2ed      	uxtb	r5, r5
 801d358:	1212      	asrs	r2, r2, #8
 801d35a:	fa1f f982 	uxth.w	r9, r2
 801d35e:	43d2      	mvns	r2, r2
 801d360:	fb16 f609 	smulbb	r6, r6, r9
 801d364:	b2d2      	uxtb	r2, r2
 801d366:	fb15 f509 	smulbb	r5, r5, r9
 801d36a:	fb07 6702 	mla	r7, r7, r2, r6
 801d36e:	ea4f 06ee 	mov.w	r6, lr, asr #3
 801d372:	fb1a fa09 	smulbb	sl, sl, r9
 801d376:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801d37a:	b2bf      	uxth	r7, r7
 801d37c:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801d380:	fa5f fe8e 	uxtb.w	lr, lr
 801d384:	fb06 a602 	mla	r6, r6, r2, sl
 801d388:	fb0e 5502 	mla	r5, lr, r2, r5
 801d38c:	1c7a      	adds	r2, r7, #1
 801d38e:	b2b6      	uxth	r6, r6
 801d390:	b2ad      	uxth	r5, r5
 801d392:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 801d396:	9a01      	ldr	r2, [sp, #4]
 801d398:	f105 0a01 	add.w	sl, r5, #1
 801d39c:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 801d3a0:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801d3a4:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801d3a8:	ea47 070a 	orr.w	r7, r7, sl
 801d3ac:	f106 0a01 	add.w	sl, r6, #1
 801d3b0:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801d3b4:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801d3b8:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801d3bc:	ea47 070a 	orr.w	r7, r7, sl
 801d3c0:	52a7      	strh	r7, [r4, r2]
 801d3c2:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801d3c4:	f10c 3cff 	add.w	ip, ip, #4294967295
 801d3c8:	4410      	add	r0, r2
 801d3ca:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801d3cc:	4411      	add	r1, r2
 801d3ce:	e757      	b.n	801d280 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 801d3d0:	f04f 0e00 	mov.w	lr, #0
 801d3d4:	eba3 020e 	sub.w	r2, r3, lr
 801d3d8:	2a00      	cmp	r2, #0
 801d3da:	f77f af55 	ble.w	801d288 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 801d3de:	f9b8 6008 	ldrsh.w	r6, [r8, #8]
 801d3e2:	1405      	asrs	r5, r0, #16
 801d3e4:	140a      	asrs	r2, r1, #16
 801d3e6:	fb06 5202 	mla	r2, r6, r2, r5
 801d3ea:	9d00      	ldr	r5, [sp, #0]
 801d3ec:	f855 5022 	ldr.w	r5, [r5, r2, lsl #2]
 801d3f0:	0e2e      	lsrs	r6, r5, #24
 801d3f2:	d044      	beq.n	801d47e <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x298>
 801d3f4:	9a03      	ldr	r2, [sp, #12]
 801d3f6:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 801d3fa:	f834 c01e 	ldrh.w	ip, [r4, lr, lsl #1]
 801d3fe:	4356      	muls	r6, r2
 801d400:	ea4f 272c 	mov.w	r7, ip, asr #8
 801d404:	1c72      	adds	r2, r6, #1
 801d406:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801d40a:	eb02 2226 	add.w	r2, r2, r6, asr #8
 801d40e:	f3c5 4607 	ubfx	r6, r5, #16, #8
 801d412:	b2ed      	uxtb	r5, r5
 801d414:	1212      	asrs	r2, r2, #8
 801d416:	fa1f f982 	uxth.w	r9, r2
 801d41a:	43d2      	mvns	r2, r2
 801d41c:	fb16 f609 	smulbb	r6, r6, r9
 801d420:	b2d2      	uxtb	r2, r2
 801d422:	fb15 f509 	smulbb	r5, r5, r9
 801d426:	fb07 6702 	mla	r7, r7, r2, r6
 801d42a:	ea4f 06ec 	mov.w	r6, ip, asr #3
 801d42e:	fb1a fa09 	smulbb	sl, sl, r9
 801d432:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 801d436:	b2bf      	uxth	r7, r7
 801d438:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801d43c:	fa5f fc8c 	uxtb.w	ip, ip
 801d440:	fb06 a602 	mla	r6, r6, r2, sl
 801d444:	fb0c 5502 	mla	r5, ip, r2, r5
 801d448:	1c7a      	adds	r2, r7, #1
 801d44a:	b2b6      	uxth	r6, r6
 801d44c:	b2ad      	uxth	r5, r5
 801d44e:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 801d452:	f105 0a01 	add.w	sl, r5, #1
 801d456:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 801d45a:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801d45e:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801d462:	ea47 070a 	orr.w	r7, r7, sl
 801d466:	f106 0a01 	add.w	sl, r6, #1
 801d46a:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801d46e:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801d472:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801d476:	ea47 070a 	orr.w	r7, r7, sl
 801d47a:	f824 701e 	strh.w	r7, [r4, lr, lsl #1]
 801d47e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801d480:	f10e 0e01 	add.w	lr, lr, #1
 801d484:	4410      	add	r0, r2
 801d486:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801d488:	4411      	add	r1, r2
 801d48a:	e7a3      	b.n	801d3d4 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
 801d48c:	b005      	add	sp, #20
 801d48e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0801d494 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801d494:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d498:	b085      	sub	sp, #20
 801d49a:	468b      	mov	fp, r1
 801d49c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801d4a0:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801d4a2:	9203      	str	r2, [sp, #12]
 801d4a4:	6861      	ldr	r1, [r4, #4]
 801d4a6:	f8dd 9058 	ldr.w	r9, [sp, #88]	; 0x58
 801d4aa:	e9dd 2014 	ldrd	r2, r0, [sp, #80]	; 0x50
 801d4ae:	fb01 2000 	mla	r0, r1, r0, r2
 801d4b2:	6822      	ldr	r2, [r4, #0]
 801d4b4:	eb02 0040 	add.w	r0, r2, r0, lsl #1
 801d4b8:	f8d9 2000 	ldr.w	r2, [r9]
 801d4bc:	9200      	str	r2, [sp, #0]
 801d4be:	f1bb 0f00 	cmp.w	fp, #0
 801d4c2:	dc03      	bgt.n	801d4cc <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 801d4c4:	9a03      	ldr	r2, [sp, #12]
 801d4c6:	2a00      	cmp	r2, #0
 801d4c8:	f340 8154 	ble.w	801d774 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e0>
 801d4cc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801d4ce:	f9b9 7008 	ldrsh.w	r7, [r9, #8]
 801d4d2:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801d4d6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801d4d8:	f9b9 600c 	ldrsh.w	r6, [r9, #12]
 801d4dc:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801d4e0:	2b00      	cmp	r3, #0
 801d4e2:	dd0e      	ble.n	801d502 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801d4e4:	140c      	asrs	r4, r1, #16
 801d4e6:	d405      	bmi.n	801d4f4 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 801d4e8:	42bc      	cmp	r4, r7
 801d4ea:	da03      	bge.n	801d4f4 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 801d4ec:	1414      	asrs	r4, r2, #16
 801d4ee:	d401      	bmi.n	801d4f4 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 801d4f0:	42b4      	cmp	r4, r6
 801d4f2:	db07      	blt.n	801d504 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801d4f4:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801d4f6:	3b01      	subs	r3, #1
 801d4f8:	3002      	adds	r0, #2
 801d4fa:	4421      	add	r1, r4
 801d4fc:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801d4fe:	4422      	add	r2, r4
 801d500:	e7ee      	b.n	801d4e0 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 801d502:	d017      	beq.n	801d534 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 801d504:	1e5c      	subs	r4, r3, #1
 801d506:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801d508:	fb05 1504 	mla	r5, r5, r4, r1
 801d50c:	142d      	asrs	r5, r5, #16
 801d50e:	d409      	bmi.n	801d524 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801d510:	42bd      	cmp	r5, r7
 801d512:	da07      	bge.n	801d524 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801d514:	9d12      	ldr	r5, [sp, #72]	; 0x48
 801d516:	fb05 2404 	mla	r4, r5, r4, r2
 801d51a:	1424      	asrs	r4, r4, #16
 801d51c:	d402      	bmi.n	801d524 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801d51e:	42b4      	cmp	r4, r6
 801d520:	f2c0 80c0 	blt.w	801d6a4 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x210>
 801d524:	2700      	movs	r7, #0
 801d526:	19dc      	adds	r4, r3, r7
 801d528:	2c00      	cmp	r4, #0
 801d52a:	dc3e      	bgt.n	801d5aa <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
 801d52c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801d530:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801d534:	f1bb 0f00 	cmp.w	fp, #0
 801d538:	f340 811c 	ble.w	801d774 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e0>
 801d53c:	ee30 0a04 	vadd.f32	s0, s0, s8
 801d540:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801d542:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801d546:	f1bb 0b01 	subs.w	fp, fp, #1
 801d54a:	eeb0 6a62 	vmov.f32	s12, s5
 801d54e:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801d552:	ee31 1a05 	vadd.f32	s2, s2, s10
 801d556:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801d55a:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801d55e:	eeb0 6a43 	vmov.f32	s12, s6
 801d562:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801d566:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801d56a:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801d56e:	ee61 7a27 	vmul.f32	s15, s2, s15
 801d572:	ee77 2a62 	vsub.f32	s5, s14, s5
 801d576:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801d57a:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801d57e:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801d582:	ee12 2a90 	vmov	r2, s5
 801d586:	eef0 2a47 	vmov.f32	s5, s14
 801d58a:	fb92 f3f3 	sdiv	r3, r2, r3
 801d58e:	ee13 2a10 	vmov	r2, s6
 801d592:	9311      	str	r3, [sp, #68]	; 0x44
 801d594:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801d596:	eeb0 3a67 	vmov.f32	s6, s15
 801d59a:	fb92 f3f3 	sdiv	r3, r2, r3
 801d59e:	9a03      	ldr	r2, [sp, #12]
 801d5a0:	9312      	str	r3, [sp, #72]	; 0x48
 801d5a2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801d5a4:	bf08      	it	eq
 801d5a6:	4613      	moveq	r3, r2
 801d5a8:	e789      	b.n	801d4be <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a>
 801d5aa:	140e      	asrs	r6, r1, #16
 801d5ac:	d461      	bmi.n	801d672 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1de>
 801d5ae:	f8d9 5008 	ldr.w	r5, [r9, #8]
 801d5b2:	42b5      	cmp	r5, r6
 801d5b4:	dd5d      	ble.n	801d672 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1de>
 801d5b6:	ea5f 4c22 	movs.w	ip, r2, asr #16
 801d5ba:	d45a      	bmi.n	801d672 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1de>
 801d5bc:	f8d9 400c 	ldr.w	r4, [r9, #12]
 801d5c0:	4564      	cmp	r4, ip
 801d5c2:	dd56      	ble.n	801d672 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1de>
 801d5c4:	b22d      	sxth	r5, r5
 801d5c6:	9c00      	ldr	r4, [sp, #0]
 801d5c8:	fb0c 6505 	mla	r5, ip, r5, r6
 801d5cc:	f854 4025 	ldr.w	r4, [r4, r5, lsl #2]
 801d5d0:	ea5f 6e14 	movs.w	lr, r4, lsr #24
 801d5d4:	d04d      	beq.n	801d672 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1de>
 801d5d6:	0a26      	lsrs	r6, r4, #8
 801d5d8:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 801d5dc:	fa5f f58e 	uxtb.w	r5, lr
 801d5e0:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 801d5e4:	9601      	str	r6, [sp, #4]
 801d5e6:	d04a      	beq.n	801d67e <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 801d5e8:	f06f 0601 	mvn.w	r6, #1
 801d5ec:	fa1f fa85 	uxth.w	sl, r5
 801d5f0:	fa5f fc8c 	uxtb.w	ip, ip
 801d5f4:	43ed      	mvns	r5, r5
 801d5f6:	437e      	muls	r6, r7
 801d5f8:	b2e4      	uxtb	r4, r4
 801d5fa:	fb1c fc0a 	smulbb	ip, ip, sl
 801d5fe:	b2ed      	uxtb	r5, r5
 801d600:	f830 8006 	ldrh.w	r8, [r0, r6]
 801d604:	fb14 f40a 	smulbb	r4, r4, sl
 801d608:	9602      	str	r6, [sp, #8]
 801d60a:	ea4f 2e28 	mov.w	lr, r8, asr #8
 801d60e:	f89d 6004 	ldrb.w	r6, [sp, #4]
 801d612:	fb16 f60a 	smulbb	r6, r6, sl
 801d616:	f00e 0ef8 	and.w	lr, lr, #248	; 0xf8
 801d61a:	fb0e cc05 	mla	ip, lr, r5, ip
 801d61e:	ea4f 0ee8 	mov.w	lr, r8, asr #3
 801d622:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 801d626:	fa1f fc8c 	uxth.w	ip, ip
 801d62a:	f00e 0efc 	and.w	lr, lr, #252	; 0xfc
 801d62e:	fa5f f888 	uxtb.w	r8, r8
 801d632:	fb0e 6e05 	mla	lr, lr, r5, r6
 801d636:	fb08 4405 	mla	r4, r8, r5, r4
 801d63a:	f10c 0501 	add.w	r5, ip, #1
 801d63e:	fa1f fe8e 	uxth.w	lr, lr
 801d642:	b2a4      	uxth	r4, r4
 801d644:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 801d648:	1c66      	adds	r6, r4, #1
 801d64a:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801d64e:	eb06 2614 	add.w	r6, r6, r4, lsr #8
 801d652:	9c02      	ldr	r4, [sp, #8]
 801d654:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 801d658:	ea4c 0c06 	orr.w	ip, ip, r6
 801d65c:	f10e 0601 	add.w	r6, lr, #1
 801d660:	eb06 261e 	add.w	r6, r6, lr, lsr #8
 801d664:	0976      	lsrs	r6, r6, #5
 801d666:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 801d66a:	ea4c 0c06 	orr.w	ip, ip, r6
 801d66e:	f820 c004 	strh.w	ip, [r0, r4]
 801d672:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801d674:	3f01      	subs	r7, #1
 801d676:	4421      	add	r1, r4
 801d678:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801d67a:	4422      	add	r2, r4
 801d67c:	e753      	b.n	801d526 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 801d67e:	4e3f      	ldr	r6, [pc, #252]	; (801d77c <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e8>)
 801d680:	f3c4 04c4 	ubfx	r4, r4, #3, #5
 801d684:	f06f 0501 	mvn.w	r5, #1
 801d688:	ea06 2c0c 	and.w	ip, r6, ip, lsl #8
 801d68c:	437d      	muls	r5, r7
 801d68e:	ea4c 0c04 	orr.w	ip, ip, r4
 801d692:	9c01      	ldr	r4, [sp, #4]
 801d694:	00e6      	lsls	r6, r4, #3
 801d696:	f406 64fc 	and.w	r4, r6, #2016	; 0x7e0
 801d69a:	ea4c 0c04 	orr.w	ip, ip, r4
 801d69e:	f820 c005 	strh.w	ip, [r0, r5]
 801d6a2:	e7e6      	b.n	801d672 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1de>
 801d6a4:	f04f 0800 	mov.w	r8, #0
 801d6a8:	eba3 0408 	sub.w	r4, r3, r8
 801d6ac:	2c00      	cmp	r4, #0
 801d6ae:	f77f af3d 	ble.w	801d52c <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801d6b2:	140d      	asrs	r5, r1, #16
 801d6b4:	f9b9 6008 	ldrsh.w	r6, [r9, #8]
 801d6b8:	1414      	asrs	r4, r2, #16
 801d6ba:	fb06 5404 	mla	r4, r6, r4, r5
 801d6be:	9d00      	ldr	r5, [sp, #0]
 801d6c0:	f855 4024 	ldr.w	r4, [r5, r4, lsl #2]
 801d6c4:	ea5f 6c14 	movs.w	ip, r4, lsr #24
 801d6c8:	d042      	beq.n	801d750 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2bc>
 801d6ca:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 801d6ce:	fa5f f58c 	uxtb.w	r5, ip
 801d6d2:	ea4f 4714 	mov.w	r7, r4, lsr #16
 801d6d6:	ea4f 2614 	mov.w	r6, r4, lsr #8
 801d6da:	d040      	beq.n	801d75e <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ca>
 801d6dc:	f830 e018 	ldrh.w	lr, [r0, r8, lsl #1]
 801d6e0:	fa1f fa85 	uxth.w	sl, r5
 801d6e4:	b2ff      	uxtb	r7, r7
 801d6e6:	43ed      	mvns	r5, r5
 801d6e8:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 801d6ec:	fb17 f70a 	smulbb	r7, r7, sl
 801d6f0:	b2ed      	uxtb	r5, r5
 801d6f2:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801d6f6:	b2e4      	uxtb	r4, r4
 801d6f8:	b2f6      	uxtb	r6, r6
 801d6fa:	fb0c 7705 	mla	r7, ip, r5, r7
 801d6fe:	ea4f 0cee 	mov.w	ip, lr, asr #3
 801d702:	fb14 f40a 	smulbb	r4, r4, sl
 801d706:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801d70a:	b2bf      	uxth	r7, r7
 801d70c:	f00c 0cfc 	and.w	ip, ip, #252	; 0xfc
 801d710:	fb16 f60a 	smulbb	r6, r6, sl
 801d714:	fa5f fe8e 	uxtb.w	lr, lr
 801d718:	fb0e 4405 	mla	r4, lr, r5, r4
 801d71c:	fb0c 6c05 	mla	ip, ip, r5, r6
 801d720:	1c7d      	adds	r5, r7, #1
 801d722:	b2a4      	uxth	r4, r4
 801d724:	eb05 2717 	add.w	r7, r5, r7, lsr #8
 801d728:	1c66      	adds	r6, r4, #1
 801d72a:	fa1f fc8c 	uxth.w	ip, ip
 801d72e:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 801d732:	eb06 2614 	add.w	r6, r6, r4, lsr #8
 801d736:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 801d73a:	4337      	orrs	r7, r6
 801d73c:	f10c 0601 	add.w	r6, ip, #1
 801d740:	eb06 261c 	add.w	r6, r6, ip, lsr #8
 801d744:	0976      	lsrs	r6, r6, #5
 801d746:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 801d74a:	4337      	orrs	r7, r6
 801d74c:	f820 7018 	strh.w	r7, [r0, r8, lsl #1]
 801d750:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801d752:	f108 0801 	add.w	r8, r8, #1
 801d756:	4421      	add	r1, r4
 801d758:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801d75a:	4422      	add	r2, r4
 801d75c:	e7a4      	b.n	801d6a8 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 801d75e:	4d07      	ldr	r5, [pc, #28]	; (801d77c <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e8>)
 801d760:	f3c4 04c4 	ubfx	r4, r4, #3, #5
 801d764:	00f6      	lsls	r6, r6, #3
 801d766:	ea05 2707 	and.w	r7, r5, r7, lsl #8
 801d76a:	4327      	orrs	r7, r4
 801d76c:	f406 64fc 	and.w	r4, r6, #2016	; 0x7e0
 801d770:	4327      	orrs	r7, r4
 801d772:	e7eb      	b.n	801d74c <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b8>
 801d774:	b005      	add	sp, #20
 801d776:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d77a:	bf00      	nop
 801d77c:	fffff800 	.word	0xfffff800

0801d780 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801d780:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d784:	b087      	sub	sp, #28
 801d786:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801d78a:	9815      	ldr	r0, [sp, #84]	; 0x54
 801d78c:	9204      	str	r2, [sp, #16]
 801d78e:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 801d792:	9101      	str	r1, [sp, #4]
 801d794:	9205      	str	r2, [sp, #20]
 801d796:	6841      	ldr	r1, [r0, #4]
 801d798:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 801d79c:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	; 0x58
 801d7a0:	fb01 2404 	mla	r4, r1, r4, r2
 801d7a4:	6802      	ldr	r2, [r0, #0]
 801d7a6:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801d7aa:	f8d8 2008 	ldr.w	r2, [r8, #8]
 801d7ae:	3201      	adds	r2, #1
 801d7b0:	f022 0201 	bic.w	r2, r2, #1
 801d7b4:	9202      	str	r2, [sp, #8]
 801d7b6:	f8d8 2000 	ldr.w	r2, [r8]
 801d7ba:	9203      	str	r2, [sp, #12]
 801d7bc:	9a01      	ldr	r2, [sp, #4]
 801d7be:	2a00      	cmp	r2, #0
 801d7c0:	dc03      	bgt.n	801d7ca <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 801d7c2:	9a04      	ldr	r2, [sp, #16]
 801d7c4:	2a00      	cmp	r2, #0
 801d7c6:	f340 814d 	ble.w	801da64 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e4>
 801d7ca:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801d7cc:	f9b8 7008 	ldrsh.w	r7, [r8, #8]
 801d7d0:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801d7d4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801d7d6:	f9b8 600c 	ldrsh.w	r6, [r8, #12]
 801d7da:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801d7de:	2b00      	cmp	r3, #0
 801d7e0:	dd0e      	ble.n	801d800 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 801d7e2:	1402      	asrs	r2, r0, #16
 801d7e4:	d405      	bmi.n	801d7f2 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801d7e6:	42ba      	cmp	r2, r7
 801d7e8:	da03      	bge.n	801d7f2 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801d7ea:	140a      	asrs	r2, r1, #16
 801d7ec:	d401      	bmi.n	801d7f2 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801d7ee:	42b2      	cmp	r2, r6
 801d7f0:	db07      	blt.n	801d802 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 801d7f2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801d7f4:	3b01      	subs	r3, #1
 801d7f6:	3402      	adds	r4, #2
 801d7f8:	4410      	add	r0, r2
 801d7fa:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801d7fc:	4411      	add	r1, r2
 801d7fe:	e7ee      	b.n	801d7de <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 801d800:	d019      	beq.n	801d836 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 801d802:	1e5a      	subs	r2, r3, #1
 801d804:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801d806:	fb05 0502 	mla	r5, r5, r2, r0
 801d80a:	142d      	asrs	r5, r5, #16
 801d80c:	d409      	bmi.n	801d822 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 801d80e:	42bd      	cmp	r5, r7
 801d810:	da07      	bge.n	801d822 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 801d812:	9d14      	ldr	r5, [sp, #80]	; 0x50
 801d814:	fb05 1202 	mla	r2, r5, r2, r1
 801d818:	1412      	asrs	r2, r2, #16
 801d81a:	d402      	bmi.n	801d822 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 801d81c:	42b2      	cmp	r2, r6
 801d81e:	f2c0 80b7 	blt.w	801d990 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x210>
 801d822:	f04f 0c00 	mov.w	ip, #0
 801d826:	eb03 020c 	add.w	r2, r3, ip
 801d82a:	2a00      	cmp	r2, #0
 801d82c:	dc3f      	bgt.n	801d8ae <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x12e>
 801d82e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801d832:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801d836:	9b01      	ldr	r3, [sp, #4]
 801d838:	2b00      	cmp	r3, #0
 801d83a:	f340 8113 	ble.w	801da64 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e4>
 801d83e:	ee30 0a04 	vadd.f32	s0, s0, s8
 801d842:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801d844:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801d848:	eeb0 6a62 	vmov.f32	s12, s5
 801d84c:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801d850:	ee31 1a05 	vadd.f32	s2, s2, s10
 801d854:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801d858:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 801d85c:	eeb0 6a43 	vmov.f32	s12, s6
 801d860:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801d864:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 801d868:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801d86c:	ee61 7a27 	vmul.f32	s15, s2, s15
 801d870:	ee77 2a62 	vsub.f32	s5, s14, s5
 801d874:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801d878:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801d87c:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801d880:	ee12 2a90 	vmov	r2, s5
 801d884:	eef0 2a47 	vmov.f32	s5, s14
 801d888:	fb92 f3f3 	sdiv	r3, r2, r3
 801d88c:	ee13 2a10 	vmov	r2, s6
 801d890:	9313      	str	r3, [sp, #76]	; 0x4c
 801d892:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801d894:	eeb0 3a67 	vmov.f32	s6, s15
 801d898:	fb92 f3f3 	sdiv	r3, r2, r3
 801d89c:	9314      	str	r3, [sp, #80]	; 0x50
 801d89e:	9b01      	ldr	r3, [sp, #4]
 801d8a0:	9a04      	ldr	r2, [sp, #16]
 801d8a2:	3b01      	subs	r3, #1
 801d8a4:	9301      	str	r3, [sp, #4]
 801d8a6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801d8a8:	bf08      	it	eq
 801d8aa:	4613      	moveq	r3, r2
 801d8ac:	e786      	b.n	801d7bc <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 801d8ae:	1405      	asrs	r5, r0, #16
 801d8b0:	d467      	bmi.n	801d982 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x202>
 801d8b2:	f8d8 2008 	ldr.w	r2, [r8, #8]
 801d8b6:	42aa      	cmp	r2, r5
 801d8b8:	dd63      	ble.n	801d982 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x202>
 801d8ba:	140e      	asrs	r6, r1, #16
 801d8bc:	d461      	bmi.n	801d982 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x202>
 801d8be:	f8d8 200c 	ldr.w	r2, [r8, #12]
 801d8c2:	42b2      	cmp	r2, r6
 801d8c4:	dd5d      	ble.n	801d982 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x202>
 801d8c6:	9a02      	ldr	r2, [sp, #8]
 801d8c8:	fb06 5502 	mla	r5, r6, r2, r5
 801d8cc:	9e03      	ldr	r6, [sp, #12]
 801d8ce:	086a      	lsrs	r2, r5, #1
 801d8d0:	5cb2      	ldrb	r2, [r6, r2]
 801d8d2:	07ee      	lsls	r6, r5, #31
 801d8d4:	bf54      	ite	pl
 801d8d6:	f002 020f 	andpl.w	r2, r2, #15
 801d8da:	1112      	asrmi	r2, r2, #4
 801d8dc:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801d8e0:	b2d2      	uxtb	r2, r2
 801d8e2:	2a00      	cmp	r2, #0
 801d8e4:	d04d      	beq.n	801d982 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x202>
 801d8e6:	f06f 0601 	mvn.w	r6, #1
 801d8ea:	4d60      	ldr	r5, [pc, #384]	; (801da6c <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ec>)
 801d8ec:	fb06 fb0c 	mul.w	fp, r6, ip
 801d8f0:	9e05      	ldr	r6, [sp, #20]
 801d8f2:	682d      	ldr	r5, [r5, #0]
 801d8f4:	4372      	muls	r2, r6
 801d8f6:	f834 e00b 	ldrh.w	lr, [r4, fp]
 801d8fa:	0a2f      	lsrs	r7, r5, #8
 801d8fc:	1c56      	adds	r6, r2, #1
 801d8fe:	ea4f 09d5 	mov.w	r9, r5, lsr #3
 801d902:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801d906:	00ed      	lsls	r5, r5, #3
 801d908:	eb06 2222 	add.w	r2, r6, r2, asr #8
 801d90c:	f009 09fc 	and.w	r9, r9, #252	; 0xfc
 801d910:	ea4f 262e 	mov.w	r6, lr, asr #8
 801d914:	1212      	asrs	r2, r2, #8
 801d916:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 801d91a:	b2ed      	uxtb	r5, r5
 801d91c:	fa1f fa82 	uxth.w	sl, r2
 801d920:	43d2      	mvns	r2, r2
 801d922:	fb17 f70a 	smulbb	r7, r7, sl
 801d926:	b2d2      	uxtb	r2, r2
 801d928:	fb19 f90a 	smulbb	r9, r9, sl
 801d92c:	fb06 7602 	mla	r6, r6, r2, r7
 801d930:	ea4f 07ee 	mov.w	r7, lr, asr #3
 801d934:	fb15 f50a 	smulbb	r5, r5, sl
 801d938:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801d93c:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801d940:	b2b6      	uxth	r6, r6
 801d942:	fa5f fe8e 	uxtb.w	lr, lr
 801d946:	fb07 9702 	mla	r7, r7, r2, r9
 801d94a:	fb0e 5502 	mla	r5, lr, r2, r5
 801d94e:	b2bf      	uxth	r7, r7
 801d950:	b2ad      	uxth	r5, r5
 801d952:	f107 0901 	add.w	r9, r7, #1
 801d956:	f105 0e01 	add.w	lr, r5, #1
 801d95a:	eb09 2717 	add.w	r7, r9, r7, lsr #8
 801d95e:	f106 0901 	add.w	r9, r6, #1
 801d962:	eb0e 2e15 	add.w	lr, lr, r5, lsr #8
 801d966:	097f      	lsrs	r7, r7, #5
 801d968:	eb09 2616 	add.w	r6, r9, r6, lsr #8
 801d96c:	f3ce 2ec4 	ubfx	lr, lr, #11, #5
 801d970:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 801d974:	f406 4678 	and.w	r6, r6, #63488	; 0xf800
 801d978:	4337      	orrs	r7, r6
 801d97a:	ea47 070e 	orr.w	r7, r7, lr
 801d97e:	f824 700b 	strh.w	r7, [r4, fp]
 801d982:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801d984:	f10c 3cff 	add.w	ip, ip, #4294967295
 801d988:	4410      	add	r0, r2
 801d98a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801d98c:	4411      	add	r1, r2
 801d98e:	e74a      	b.n	801d826 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 801d990:	f04f 0e00 	mov.w	lr, #0
 801d994:	eba3 020e 	sub.w	r2, r3, lr
 801d998:	2a00      	cmp	r2, #0
 801d99a:	f77f af48 	ble.w	801d82e <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xae>
 801d99e:	1402      	asrs	r2, r0, #16
 801d9a0:	9e02      	ldr	r6, [sp, #8]
 801d9a2:	140d      	asrs	r5, r1, #16
 801d9a4:	fb06 2505 	mla	r5, r6, r5, r2
 801d9a8:	9e03      	ldr	r6, [sp, #12]
 801d9aa:	086a      	lsrs	r2, r5, #1
 801d9ac:	07ed      	lsls	r5, r5, #31
 801d9ae:	5cb2      	ldrb	r2, [r6, r2]
 801d9b0:	bf54      	ite	pl
 801d9b2:	f002 020f 	andpl.w	r2, r2, #15
 801d9b6:	1112      	asrmi	r2, r2, #4
 801d9b8:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801d9bc:	b2d2      	uxtb	r2, r2
 801d9be:	2a00      	cmp	r2, #0
 801d9c0:	d049      	beq.n	801da56 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d6>
 801d9c2:	9e05      	ldr	r6, [sp, #20]
 801d9c4:	4d29      	ldr	r5, [pc, #164]	; (801da6c <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ec>)
 801d9c6:	4372      	muls	r2, r6
 801d9c8:	f834 c01e 	ldrh.w	ip, [r4, lr, lsl #1]
 801d9cc:	682d      	ldr	r5, [r5, #0]
 801d9ce:	1c56      	adds	r6, r2, #1
 801d9d0:	0a2f      	lsrs	r7, r5, #8
 801d9d2:	eb06 2222 	add.w	r2, r6, r2, asr #8
 801d9d6:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801d9da:	ea4f 262c 	mov.w	r6, ip, asr #8
 801d9de:	1212      	asrs	r2, r2, #8
 801d9e0:	ea4f 09d5 	mov.w	r9, r5, lsr #3
 801d9e4:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 801d9e8:	fa1f fa82 	uxth.w	sl, r2
 801d9ec:	43d2      	mvns	r2, r2
 801d9ee:	f009 09fc 	and.w	r9, r9, #252	; 0xfc
 801d9f2:	00ed      	lsls	r5, r5, #3
 801d9f4:	fb17 f70a 	smulbb	r7, r7, sl
 801d9f8:	b2d2      	uxtb	r2, r2
 801d9fa:	fb19 f90a 	smulbb	r9, r9, sl
 801d9fe:	b2ed      	uxtb	r5, r5
 801da00:	fb06 7602 	mla	r6, r6, r2, r7
 801da04:	ea4f 07ec 	mov.w	r7, ip, asr #3
 801da08:	fb15 f50a 	smulbb	r5, r5, sl
 801da0c:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 801da10:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801da14:	b2b6      	uxth	r6, r6
 801da16:	fa5f fc8c 	uxtb.w	ip, ip
 801da1a:	fb07 9702 	mla	r7, r7, r2, r9
 801da1e:	f106 0b01 	add.w	fp, r6, #1
 801da22:	fb0c 5502 	mla	r5, ip, r2, r5
 801da26:	b2bf      	uxth	r7, r7
 801da28:	b2ad      	uxth	r5, r5
 801da2a:	f107 0901 	add.w	r9, r7, #1
 801da2e:	eb0b 2616 	add.w	r6, fp, r6, lsr #8
 801da32:	f105 0c01 	add.w	ip, r5, #1
 801da36:	eb09 2717 	add.w	r7, r9, r7, lsr #8
 801da3a:	f406 4678 	and.w	r6, r6, #63488	; 0xf800
 801da3e:	eb0c 2c15 	add.w	ip, ip, r5, lsr #8
 801da42:	097f      	lsrs	r7, r7, #5
 801da44:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 801da48:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 801da4c:	4337      	orrs	r7, r6
 801da4e:	ea47 070c 	orr.w	r7, r7, ip
 801da52:	f824 701e 	strh.w	r7, [r4, lr, lsl #1]
 801da56:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801da58:	f10e 0e01 	add.w	lr, lr, #1
 801da5c:	4410      	add	r0, r2
 801da5e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801da60:	4411      	add	r1, r2
 801da62:	e797      	b.n	801d994 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 801da64:	b007      	add	sp, #28
 801da66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801da6a:	bf00      	nop
 801da6c:	20005814 	.word	0x20005814

0801da70 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801da70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801da74:	b087      	sub	sp, #28
 801da76:	468b      	mov	fp, r1
 801da78:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801da7c:	9815      	ldr	r0, [sp, #84]	; 0x54
 801da7e:	9205      	str	r2, [sp, #20]
 801da80:	6841      	ldr	r1, [r0, #4]
 801da82:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 801da86:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	; 0x58
 801da8a:	fb01 2404 	mla	r4, r1, r4, r2
 801da8e:	6802      	ldr	r2, [r0, #0]
 801da90:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801da94:	f8d8 2008 	ldr.w	r2, [r8, #8]
 801da98:	3201      	adds	r2, #1
 801da9a:	f022 0201 	bic.w	r2, r2, #1
 801da9e:	9201      	str	r2, [sp, #4]
 801daa0:	f8d8 2000 	ldr.w	r2, [r8]
 801daa4:	9202      	str	r2, [sp, #8]
 801daa6:	f1bb 0f00 	cmp.w	fp, #0
 801daaa:	dc03      	bgt.n	801dab4 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44>
 801daac:	9a05      	ldr	r2, [sp, #20]
 801daae:	2a00      	cmp	r2, #0
 801dab0:	f340 8158 	ble.w	801dd64 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 801dab4:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801dab6:	f9b8 7008 	ldrsh.w	r7, [r8, #8]
 801daba:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801dabe:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801dac0:	f9b8 600c 	ldrsh.w	r6, [r8, #12]
 801dac4:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801dac8:	2b00      	cmp	r3, #0
 801daca:	dd0e      	ble.n	801daea <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 801dacc:	1402      	asrs	r2, r0, #16
 801dace:	d405      	bmi.n	801dadc <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 801dad0:	42ba      	cmp	r2, r7
 801dad2:	da03      	bge.n	801dadc <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 801dad4:	140a      	asrs	r2, r1, #16
 801dad6:	d401      	bmi.n	801dadc <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 801dad8:	42b2      	cmp	r2, r6
 801dada:	db07      	blt.n	801daec <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801dadc:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801dade:	3b01      	subs	r3, #1
 801dae0:	3402      	adds	r4, #2
 801dae2:	4410      	add	r0, r2
 801dae4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801dae6:	4411      	add	r1, r2
 801dae8:	e7ee      	b.n	801dac8 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 801daea:	d017      	beq.n	801db1c <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xac>
 801daec:	1e5a      	subs	r2, r3, #1
 801daee:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801daf0:	fb05 0502 	mla	r5, r5, r2, r0
 801daf4:	142d      	asrs	r5, r5, #16
 801daf6:	d409      	bmi.n	801db0c <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 801daf8:	42bd      	cmp	r5, r7
 801dafa:	da07      	bge.n	801db0c <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 801dafc:	9d14      	ldr	r5, [sp, #80]	; 0x50
 801dafe:	fb05 1202 	mla	r2, r5, r2, r1
 801db02:	1412      	asrs	r2, r2, #16
 801db04:	d402      	bmi.n	801db0c <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 801db06:	42b2      	cmp	r2, r6
 801db08:	f2c0 80c0 	blt.w	801dc8c <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x21c>
 801db0c:	2600      	movs	r6, #0
 801db0e:	199a      	adds	r2, r3, r6
 801db10:	2a00      	cmp	r2, #0
 801db12:	dc3e      	bgt.n	801db92 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x122>
 801db14:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801db18:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801db1c:	f1bb 0f00 	cmp.w	fp, #0
 801db20:	f340 8120 	ble.w	801dd64 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 801db24:	ee30 0a04 	vadd.f32	s0, s0, s8
 801db28:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801db2a:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801db2e:	f1bb 0b01 	subs.w	fp, fp, #1
 801db32:	eeb0 6a62 	vmov.f32	s12, s5
 801db36:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801db3a:	ee31 1a05 	vadd.f32	s2, s2, s10
 801db3e:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801db42:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 801db46:	eeb0 6a43 	vmov.f32	s12, s6
 801db4a:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801db4e:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 801db52:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801db56:	ee61 7a27 	vmul.f32	s15, s2, s15
 801db5a:	ee77 2a62 	vsub.f32	s5, s14, s5
 801db5e:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801db62:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801db66:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801db6a:	ee12 2a90 	vmov	r2, s5
 801db6e:	eef0 2a47 	vmov.f32	s5, s14
 801db72:	fb92 f3f3 	sdiv	r3, r2, r3
 801db76:	ee13 2a10 	vmov	r2, s6
 801db7a:	9313      	str	r3, [sp, #76]	; 0x4c
 801db7c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801db7e:	eeb0 3a67 	vmov.f32	s6, s15
 801db82:	fb92 f3f3 	sdiv	r3, r2, r3
 801db86:	9a05      	ldr	r2, [sp, #20]
 801db88:	9314      	str	r3, [sp, #80]	; 0x50
 801db8a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801db8c:	bf08      	it	eq
 801db8e:	4613      	moveq	r3, r2
 801db90:	e789      	b.n	801daa6 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36>
 801db92:	1405      	asrs	r5, r0, #16
 801db94:	d467      	bmi.n	801dc66 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f6>
 801db96:	f8d8 2008 	ldr.w	r2, [r8, #8]
 801db9a:	42aa      	cmp	r2, r5
 801db9c:	dd63      	ble.n	801dc66 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f6>
 801db9e:	140f      	asrs	r7, r1, #16
 801dba0:	d461      	bmi.n	801dc66 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f6>
 801dba2:	f8d8 200c 	ldr.w	r2, [r8, #12]
 801dba6:	42ba      	cmp	r2, r7
 801dba8:	dd5d      	ble.n	801dc66 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f6>
 801dbaa:	9a01      	ldr	r2, [sp, #4]
 801dbac:	fb07 5502 	mla	r5, r7, r2, r5
 801dbb0:	9f02      	ldr	r7, [sp, #8]
 801dbb2:	086a      	lsrs	r2, r5, #1
 801dbb4:	5cba      	ldrb	r2, [r7, r2]
 801dbb6:	07ef      	lsls	r7, r5, #31
 801dbb8:	bf54      	ite	pl
 801dbba:	f002 020f 	andpl.w	r2, r2, #15
 801dbbe:	1112      	asrmi	r2, r2, #4
 801dbc0:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801dbc4:	b2d2      	uxtb	r2, r2
 801dbc6:	2a00      	cmp	r2, #0
 801dbc8:	d04d      	beq.n	801dc66 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f6>
 801dbca:	4d68      	ldr	r5, [pc, #416]	; (801dd6c <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fc>)
 801dbcc:	2aff      	cmp	r2, #255	; 0xff
 801dbce:	682f      	ldr	r7, [r5, #0]
 801dbd0:	ea4f 05d7 	mov.w	r5, r7, lsr #3
 801dbd4:	ea4f 2917 	mov.w	r9, r7, lsr #8
 801dbd8:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 801dbdc:	ea4f 07c7 	mov.w	r7, r7, lsl #3
 801dbe0:	f009 09f8 	and.w	r9, r9, #248	; 0xf8
 801dbe4:	9503      	str	r5, [sp, #12]
 801dbe6:	b2ff      	uxtb	r7, r7
 801dbe8:	d043      	beq.n	801dc72 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x202>
 801dbea:	f06f 0501 	mvn.w	r5, #1
 801dbee:	fa1f fa82 	uxth.w	sl, r2
 801dbf2:	43d2      	mvns	r2, r2
 801dbf4:	fb19 f90a 	smulbb	r9, r9, sl
 801dbf8:	4375      	muls	r5, r6
 801dbfa:	fb17 f70a 	smulbb	r7, r7, sl
 801dbfe:	b2d2      	uxtb	r2, r2
 801dc00:	f834 e005 	ldrh.w	lr, [r4, r5]
 801dc04:	9504      	str	r5, [sp, #16]
 801dc06:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 801dc0a:	9d03      	ldr	r5, [sp, #12]
 801dc0c:	fb15 f50a 	smulbb	r5, r5, sl
 801dc10:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801dc14:	fb0c 9c02 	mla	ip, ip, r2, r9
 801dc18:	ea4f 09ee 	mov.w	r9, lr, asr #3
 801dc1c:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801dc20:	f009 09fc 	and.w	r9, r9, #252	; 0xfc
 801dc24:	fa1f fc8c 	uxth.w	ip, ip
 801dc28:	fa5f fe8e 	uxtb.w	lr, lr
 801dc2c:	fb09 5502 	mla	r5, r9, r2, r5
 801dc30:	fb0e 7702 	mla	r7, lr, r2, r7
 801dc34:	b2ad      	uxth	r5, r5
 801dc36:	b2bf      	uxth	r7, r7
 801dc38:	f105 0901 	add.w	r9, r5, #1
 801dc3c:	1c7a      	adds	r2, r7, #1
 801dc3e:	eb09 2515 	add.w	r5, r9, r5, lsr #8
 801dc42:	f10c 0901 	add.w	r9, ip, #1
 801dc46:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 801dc4a:	9a04      	ldr	r2, [sp, #16]
 801dc4c:	096d      	lsrs	r5, r5, #5
 801dc4e:	eb09 2c1c 	add.w	ip, r9, ip, lsr #8
 801dc52:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 801dc56:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 801dc5a:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801dc5e:	ea45 050c 	orr.w	r5, r5, ip
 801dc62:	433d      	orrs	r5, r7
 801dc64:	52a5      	strh	r5, [r4, r2]
 801dc66:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801dc68:	3e01      	subs	r6, #1
 801dc6a:	4410      	add	r0, r2
 801dc6c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801dc6e:	4411      	add	r1, r2
 801dc70:	e74d      	b.n	801db0e <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801dc72:	f06f 0201 	mvn.w	r2, #1
 801dc76:	fb02 fe06 	mul.w	lr, r2, r6
 801dc7a:	9a03      	ldr	r2, [sp, #12]
 801dc7c:	00d5      	lsls	r5, r2, #3
 801dc7e:	ea45 2509 	orr.w	r5, r5, r9, lsl #8
 801dc82:	ea45 05d7 	orr.w	r5, r5, r7, lsr #3
 801dc86:	f824 500e 	strh.w	r5, [r4, lr]
 801dc8a:	e7ec      	b.n	801dc66 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f6>
 801dc8c:	f04f 0e00 	mov.w	lr, #0
 801dc90:	eba3 020e 	sub.w	r2, r3, lr
 801dc94:	2a00      	cmp	r2, #0
 801dc96:	f77f af3d 	ble.w	801db14 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa4>
 801dc9a:	1402      	asrs	r2, r0, #16
 801dc9c:	9e01      	ldr	r6, [sp, #4]
 801dc9e:	140d      	asrs	r5, r1, #16
 801dca0:	fb06 2505 	mla	r5, r6, r5, r2
 801dca4:	9e02      	ldr	r6, [sp, #8]
 801dca6:	086a      	lsrs	r2, r5, #1
 801dca8:	07ed      	lsls	r5, r5, #31
 801dcaa:	5cb2      	ldrb	r2, [r6, r2]
 801dcac:	bf54      	ite	pl
 801dcae:	f002 020f 	andpl.w	r2, r2, #15
 801dcb2:	1112      	asrmi	r2, r2, #4
 801dcb4:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801dcb8:	b2d2      	uxtb	r2, r2
 801dcba:	2a00      	cmp	r2, #0
 801dcbc:	d045      	beq.n	801dd4a <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2da>
 801dcbe:	4d2b      	ldr	r5, [pc, #172]	; (801dd6c <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fc>)
 801dcc0:	2aff      	cmp	r2, #255	; 0xff
 801dcc2:	682e      	ldr	r6, [r5, #0]
 801dcc4:	ea4f 2916 	mov.w	r9, r6, lsr #8
 801dcc8:	ea4f 05d6 	mov.w	r5, r6, lsr #3
 801dccc:	ea4f 06c6 	mov.w	r6, r6, lsl #3
 801dcd0:	f009 09f8 	and.w	r9, r9, #248	; 0xf8
 801dcd4:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 801dcd8:	b2f6      	uxtb	r6, r6
 801dcda:	d03d      	beq.n	801dd58 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e8>
 801dcdc:	f834 c01e 	ldrh.w	ip, [r4, lr, lsl #1]
 801dce0:	fa1f fa82 	uxth.w	sl, r2
 801dce4:	43d2      	mvns	r2, r2
 801dce6:	fb19 f90a 	smulbb	r9, r9, sl
 801dcea:	ea4f 272c 	mov.w	r7, ip, asr #8
 801dcee:	fb15 f50a 	smulbb	r5, r5, sl
 801dcf2:	b2d2      	uxtb	r2, r2
 801dcf4:	fb16 f60a 	smulbb	r6, r6, sl
 801dcf8:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801dcfc:	fb07 9702 	mla	r7, r7, r2, r9
 801dd00:	ea4f 09ec 	mov.w	r9, ip, asr #3
 801dd04:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 801dd08:	f009 09fc 	and.w	r9, r9, #252	; 0xfc
 801dd0c:	b2bf      	uxth	r7, r7
 801dd0e:	fa5f fc8c 	uxtb.w	ip, ip
 801dd12:	fb09 5502 	mla	r5, r9, r2, r5
 801dd16:	fb0c 6602 	mla	r6, ip, r2, r6
 801dd1a:	b2ad      	uxth	r5, r5
 801dd1c:	b2b6      	uxth	r6, r6
 801dd1e:	f105 0901 	add.w	r9, r5, #1
 801dd22:	1c72      	adds	r2, r6, #1
 801dd24:	eb09 2515 	add.w	r5, r9, r5, lsr #8
 801dd28:	f107 0901 	add.w	r9, r7, #1
 801dd2c:	eb02 2616 	add.w	r6, r2, r6, lsr #8
 801dd30:	096d      	lsrs	r5, r5, #5
 801dd32:	eb09 2717 	add.w	r7, r9, r7, lsr #8
 801dd36:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 801dd3a:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 801dd3e:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 801dd42:	433d      	orrs	r5, r7
 801dd44:	4335      	orrs	r5, r6
 801dd46:	f824 501e 	strh.w	r5, [r4, lr, lsl #1]
 801dd4a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801dd4c:	f10e 0e01 	add.w	lr, lr, #1
 801dd50:	4410      	add	r0, r2
 801dd52:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801dd54:	4411      	add	r1, r2
 801dd56:	e79b      	b.n	801dc90 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x220>
 801dd58:	00ed      	lsls	r5, r5, #3
 801dd5a:	ea45 2509 	orr.w	r5, r5, r9, lsl #8
 801dd5e:	ea45 05d6 	orr.w	r5, r5, r6, lsr #3
 801dd62:	e7f0      	b.n	801dd46 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d6>
 801dd64:	b007      	add	sp, #28
 801dd66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801dd6a:	bf00      	nop
 801dd6c:	20005814 	.word	0x20005814

0801dd70 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGAD1Ev>:
 801dd70:	4770      	bx	lr

0801dd72 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GAD1Ev>:
 801dd72:	4770      	bx	lr

0801dd74 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGAD1Ev>:
 801dd74:	4770      	bx	lr

0801dd76 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GAD1Ev>:
 801dd76:	4770      	bx	lr

0801dd78 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 801dd78:	4770      	bx	lr

0801dd7a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 801dd7a:	4770      	bx	lr

0801dd7c <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 801dd7c:	4770      	bx	lr

0801dd7e <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 801dd7e:	4770      	bx	lr

0801dd80 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGAD1Ev>:
 801dd80:	4770      	bx	lr

0801dd82 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GAD1Ev>:
 801dd82:	4770      	bx	lr

0801dd84 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 801dd84:	4770      	bx	lr

0801dd86 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GAD1Ev>:
 801dd86:	4770      	bx	lr

0801dd88 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGAD1Ev>:
 801dd88:	4770      	bx	lr

0801dd8a <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GAD1Ev>:
 801dd8a:	4770      	bx	lr

0801dd8c <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 801dd8c:	4770      	bx	lr

0801dd8e <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GAD1Ev>:
 801dd8e:	4770      	bx	lr

0801dd90 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 801dd90:	4770      	bx	lr

0801dd92 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 801dd92:	4770      	bx	lr

0801dd94 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 801dd94:	4770      	bx	lr

0801dd96 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 801dd96:	4770      	bx	lr

0801dd98 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD1Ev>:
 801dd98:	4770      	bx	lr

0801dd9a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD1Ev>:
 801dd9a:	4770      	bx	lr

0801dd9c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD1Ev>:
 801dd9c:	4770      	bx	lr

0801dd9e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD1Ev>:
 801dd9e:	4770      	bx	lr

0801dda0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGAD1Ev>:
 801dda0:	4770      	bx	lr

0801dda2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GAD1Ev>:
 801dda2:	4770      	bx	lr

0801dda4 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGAD1Ev>:
 801dda4:	4770      	bx	lr

0801dda6 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GAD1Ev>:
 801dda6:	4770      	bx	lr

0801dda8 <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv>:
 801dda8:	b508      	push	{r3, lr}
 801ddaa:	4b06      	ldr	r3, [pc, #24]	; (801ddc4 <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv+0x1c>)
 801ddac:	8818      	ldrh	r0, [r3, #0]
 801ddae:	b928      	cbnz	r0, 801ddbc <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv+0x14>
 801ddb0:	4b05      	ldr	r3, [pc, #20]	; (801ddc8 <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv+0x20>)
 801ddb2:	2154      	movs	r1, #84	; 0x54
 801ddb4:	4a05      	ldr	r2, [pc, #20]	; (801ddcc <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv+0x24>)
 801ddb6:	4806      	ldr	r0, [pc, #24]	; (801ddd0 <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv+0x28>)
 801ddb8:	f009 f9b6 	bl	8027128 <__assert_func>
 801ddbc:	0040      	lsls	r0, r0, #1
 801ddbe:	b280      	uxth	r0, r0
 801ddc0:	bd08      	pop	{r3, pc}
 801ddc2:	bf00      	nop
 801ddc4:	20005806 	.word	0x20005806
 801ddc8:	0802b9e9 	.word	0x0802b9e9
 801ddcc:	0802bf73 	.word	0x0802bf73
 801ddd0:	0802ba2b 	.word	0x0802ba2b

0801ddd4 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb>:
 801ddd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ddd8:	b08b      	sub	sp, #44	; 0x2c
 801ddda:	460f      	mov	r7, r1
 801dddc:	4616      	mov	r6, r2
 801ddde:	f89d b050 	ldrb.w	fp, [sp, #80]	; 0x50
 801dde2:	f89d 4054 	ldrb.w	r4, [sp, #84]	; 0x54
 801dde6:	f1bb 0f00 	cmp.w	fp, #0
 801ddea:	d046      	beq.n	801de7a <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xa6>
 801ddec:	6810      	ldr	r0, [r2, #0]
 801ddee:	ad06      	add	r5, sp, #24
 801ddf0:	6851      	ldr	r1, [r2, #4]
 801ddf2:	c503      	stmia	r5!, {r0, r1}
 801ddf4:	6818      	ldr	r0, [r3, #0]
 801ddf6:	ad08      	add	r5, sp, #32
 801ddf8:	6859      	ldr	r1, [r3, #4]
 801ddfa:	c503      	stmia	r5!, {r0, r1}
 801ddfc:	a806      	add	r0, sp, #24
 801ddfe:	f7fa fd25 	bl	801884c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801de02:	4631      	mov	r1, r6
 801de04:	a808      	add	r0, sp, #32
 801de06:	f7fa fd09 	bl	801881c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801de0a:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 801de0e:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 801de12:	f8bd 601c 	ldrh.w	r6, [sp, #28]
 801de16:	f9bd 8024 	ldrsh.w	r8, [sp, #36]	; 0x24
 801de1a:	fb16 2103 	smlabb	r1, r6, r3, r2
 801de1e:	f9bd 5026 	ldrsh.w	r5, [sp, #38]	; 0x26
 801de22:	eb07 0641 	add.w	r6, r7, r1, lsl #1
 801de26:	f8bd 1018 	ldrh.w	r1, [sp, #24]
 801de2a:	4f5d      	ldr	r7, [pc, #372]	; (801dfa0 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1cc>)
 801de2c:	440a      	add	r2, r1
 801de2e:	6838      	ldr	r0, [r7, #0]
 801de30:	46b9      	mov	r9, r7
 801de32:	f8ad 2020 	strh.w	r2, [sp, #32]
 801de36:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 801de3a:	4413      	add	r3, r2
 801de3c:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 801de40:	6803      	ldr	r3, [r0, #0]
 801de42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801de44:	4798      	blx	r3
 801de46:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 801de4a:	d019      	beq.n	801de80 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xac>
 801de4c:	f010 0f04 	tst.w	r0, #4
 801de50:	d01a      	beq.n	801de88 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xb4>
 801de52:	f8d9 0000 	ldr.w	r0, [r9]
 801de56:	b2ad      	uxth	r5, r5
 801de58:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 801de5c:	6801      	ldr	r1, [r0, #0]
 801de5e:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 801de62:	9501      	str	r5, [sp, #4]
 801de64:	e9cd b403 	strd	fp, r4, [sp, #12]
 801de68:	f8bd 401c 	ldrh.w	r4, [sp, #28]
 801de6c:	9402      	str	r4, [sp, #8]
 801de6e:	fa1f f488 	uxth.w	r4, r8
 801de72:	9400      	str	r4, [sp, #0]
 801de74:	6b8c      	ldr	r4, [r1, #56]	; 0x38
 801de76:	4631      	mov	r1, r6
 801de78:	47a0      	blx	r4
 801de7a:	b00b      	add	sp, #44	; 0x2c
 801de7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801de80:	b914      	cbnz	r4, 801de88 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xb4>
 801de82:	f010 0f01 	tst.w	r0, #1
 801de86:	e7e3      	b.n	801de50 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x7c>
 801de88:	f8d9 0000 	ldr.w	r0, [r9]
 801de8c:	ea4f 0748 	mov.w	r7, r8, lsl #1
 801de90:	6803      	ldr	r3, [r0, #0]
 801de92:	6a1b      	ldr	r3, [r3, #32]
 801de94:	4798      	blx	r3
 801de96:	4b43      	ldr	r3, [pc, #268]	; (801dfa4 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1d0>)
 801de98:	f9bd 4022 	ldrsh.w	r4, [sp, #34]	; 0x22
 801de9c:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 801dea0:	881a      	ldrh	r2, [r3, #0]
 801dea2:	469a      	mov	sl, r3
 801dea4:	f9bd 1020 	ldrsh.w	r1, [sp, #32]
 801dea8:	fb05 f502 	mul.w	r5, r5, r2
 801deac:	fb02 1404 	mla	r4, r2, r4, r1
 801deb0:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 801deb4:	d058      	beq.n	801df68 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x194>
 801deb6:	f1cb 09ff 	rsb	r9, fp, #255	; 0xff
 801deba:	eb04 0545 	add.w	r5, r4, r5, lsl #1
 801debe:	fa1f f28b 	uxth.w	r2, fp
 801dec2:	469e      	mov	lr, r3
 801dec4:	fa1f f989 	uxth.w	r9, r9
 801dec8:	42ac      	cmp	r4, r5
 801deca:	d263      	bcs.n	801df94 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1c0>
 801decc:	eb04 0a07 	add.w	sl, r4, r7
 801ded0:	4554      	cmp	r4, sl
 801ded2:	d23c      	bcs.n	801df4e <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x17a>
 801ded4:	8821      	ldrh	r1, [r4, #0]
 801ded6:	f836 3b02 	ldrh.w	r3, [r6], #2
 801deda:	1208      	asrs	r0, r1, #8
 801dedc:	ea4f 2c23 	mov.w	ip, r3, asr #8
 801dee0:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 801dee4:	ea4f 0be1 	mov.w	fp, r1, asr #3
 801dee8:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801deec:	00c9      	lsls	r1, r1, #3
 801deee:	fb10 f009 	smulbb	r0, r0, r9
 801def2:	f00b 0bfc 	and.w	fp, fp, #252	; 0xfc
 801def6:	b2c9      	uxtb	r1, r1
 801def8:	fb0c 0c02 	mla	ip, ip, r2, r0
 801defc:	10d8      	asrs	r0, r3, #3
 801defe:	fb11 f109 	smulbb	r1, r1, r9
 801df02:	00db      	lsls	r3, r3, #3
 801df04:	fa1f fc8c 	uxth.w	ip, ip
 801df08:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 801df0c:	fb1b fb09 	smulbb	fp, fp, r9
 801df10:	b2db      	uxtb	r3, r3
 801df12:	fb03 1302 	mla	r3, r3, r2, r1
 801df16:	f10c 0101 	add.w	r1, ip, #1
 801df1a:	fb00 b002 	mla	r0, r0, r2, fp
 801df1e:	b29b      	uxth	r3, r3
 801df20:	eb01 2c1c 	add.w	ip, r1, ip, lsr #8
 801df24:	1c59      	adds	r1, r3, #1
 801df26:	b280      	uxth	r0, r0
 801df28:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801df2c:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 801df30:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 801df34:	ea4c 0c03 	orr.w	ip, ip, r3
 801df38:	1c43      	adds	r3, r0, #1
 801df3a:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 801df3e:	0940      	lsrs	r0, r0, #5
 801df40:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 801df44:	ea4c 0c00 	orr.w	ip, ip, r0
 801df48:	f824 cb02 	strh.w	ip, [r4], #2
 801df4c:	e7c0      	b.n	801ded0 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xfc>
 801df4e:	f8be 3000 	ldrh.w	r3, [lr]
 801df52:	eba3 0308 	sub.w	r3, r3, r8
 801df56:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801df5a:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 801df5e:	eba3 0308 	sub.w	r3, r3, r8
 801df62:	eb06 0643 	add.w	r6, r6, r3, lsl #1
 801df66:	e7af      	b.n	801dec8 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xf4>
 801df68:	eb04 0545 	add.w	r5, r4, r5, lsl #1
 801df6c:	f8d9 0000 	ldr.w	r0, [r9]
 801df70:	42ac      	cmp	r4, r5
 801df72:	6803      	ldr	r3, [r0, #0]
 801df74:	d20e      	bcs.n	801df94 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1c0>
 801df76:	f8d3 802c 	ldr.w	r8, [r3, #44]	; 0x2c
 801df7a:	4632      	mov	r2, r6
 801df7c:	463b      	mov	r3, r7
 801df7e:	4621      	mov	r1, r4
 801df80:	47c0      	blx	r8
 801df82:	f8ba 3000 	ldrh.w	r3, [sl]
 801df86:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801df8a:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 801df8e:	eb06 0643 	add.w	r6, r6, r3, lsl #1
 801df92:	e7eb      	b.n	801df6c <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x198>
 801df94:	4b02      	ldr	r3, [pc, #8]	; (801dfa0 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1cc>)
 801df96:	6818      	ldr	r0, [r3, #0]
 801df98:	6803      	ldr	r3, [r0, #0]
 801df9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801df9c:	4798      	blx	r3
 801df9e:	e76c      	b.n	801de7a <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xa6>
 801dfa0:	2000580c 	.word	0x2000580c
 801dfa4:	20005806 	.word	0x20005806

0801dfa8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGAD0Ev>:
 801dfa8:	b510      	push	{r4, lr}
 801dfaa:	4604      	mov	r4, r0
 801dfac:	2104      	movs	r1, #4
 801dfae:	f009 f88c 	bl	80270ca <_ZdlPvj>
 801dfb2:	4620      	mov	r0, r4
 801dfb4:	bd10      	pop	{r4, pc}

0801dfb6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GAD0Ev>:
 801dfb6:	b510      	push	{r4, lr}
 801dfb8:	4604      	mov	r4, r0
 801dfba:	2104      	movs	r1, #4
 801dfbc:	f009 f885 	bl	80270ca <_ZdlPvj>
 801dfc0:	4620      	mov	r0, r4
 801dfc2:	bd10      	pop	{r4, pc}

0801dfc4 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGAD0Ev>:
 801dfc4:	b510      	push	{r4, lr}
 801dfc6:	4604      	mov	r4, r0
 801dfc8:	2104      	movs	r1, #4
 801dfca:	f009 f87e 	bl	80270ca <_ZdlPvj>
 801dfce:	4620      	mov	r0, r4
 801dfd0:	bd10      	pop	{r4, pc}

0801dfd2 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GAD0Ev>:
 801dfd2:	b510      	push	{r4, lr}
 801dfd4:	4604      	mov	r4, r0
 801dfd6:	2104      	movs	r1, #4
 801dfd8:	f009 f877 	bl	80270ca <_ZdlPvj>
 801dfdc:	4620      	mov	r0, r4
 801dfde:	bd10      	pop	{r4, pc}

0801dfe0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD0Ev>:
 801dfe0:	b510      	push	{r4, lr}
 801dfe2:	4604      	mov	r4, r0
 801dfe4:	2104      	movs	r1, #4
 801dfe6:	f009 f870 	bl	80270ca <_ZdlPvj>
 801dfea:	4620      	mov	r0, r4
 801dfec:	bd10      	pop	{r4, pc}

0801dfee <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD0Ev>:
 801dfee:	b510      	push	{r4, lr}
 801dff0:	4604      	mov	r4, r0
 801dff2:	2104      	movs	r1, #4
 801dff4:	f009 f869 	bl	80270ca <_ZdlPvj>
 801dff8:	4620      	mov	r0, r4
 801dffa:	bd10      	pop	{r4, pc}

0801dffc <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD0Ev>:
 801dffc:	b510      	push	{r4, lr}
 801dffe:	4604      	mov	r4, r0
 801e000:	2104      	movs	r1, #4
 801e002:	f009 f862 	bl	80270ca <_ZdlPvj>
 801e006:	4620      	mov	r0, r4
 801e008:	bd10      	pop	{r4, pc}

0801e00a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD0Ev>:
 801e00a:	b510      	push	{r4, lr}
 801e00c:	4604      	mov	r4, r0
 801e00e:	2104      	movs	r1, #4
 801e010:	f009 f85b 	bl	80270ca <_ZdlPvj>
 801e014:	4620      	mov	r0, r4
 801e016:	bd10      	pop	{r4, pc}

0801e018 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 801e018:	b510      	push	{r4, lr}
 801e01a:	4604      	mov	r4, r0
 801e01c:	2104      	movs	r1, #4
 801e01e:	f009 f854 	bl	80270ca <_ZdlPvj>
 801e022:	4620      	mov	r0, r4
 801e024:	bd10      	pop	{r4, pc}

0801e026 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 801e026:	b510      	push	{r4, lr}
 801e028:	4604      	mov	r4, r0
 801e02a:	2104      	movs	r1, #4
 801e02c:	f009 f84d 	bl	80270ca <_ZdlPvj>
 801e030:	4620      	mov	r0, r4
 801e032:	bd10      	pop	{r4, pc}

0801e034 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 801e034:	b510      	push	{r4, lr}
 801e036:	4604      	mov	r4, r0
 801e038:	2104      	movs	r1, #4
 801e03a:	f009 f846 	bl	80270ca <_ZdlPvj>
 801e03e:	4620      	mov	r0, r4
 801e040:	bd10      	pop	{r4, pc}

0801e042 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 801e042:	b510      	push	{r4, lr}
 801e044:	4604      	mov	r4, r0
 801e046:	2104      	movs	r1, #4
 801e048:	f009 f83f 	bl	80270ca <_ZdlPvj>
 801e04c:	4620      	mov	r0, r4
 801e04e:	bd10      	pop	{r4, pc}

0801e050 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGAD0Ev>:
 801e050:	b510      	push	{r4, lr}
 801e052:	4604      	mov	r4, r0
 801e054:	2104      	movs	r1, #4
 801e056:	f009 f838 	bl	80270ca <_ZdlPvj>
 801e05a:	4620      	mov	r0, r4
 801e05c:	bd10      	pop	{r4, pc}

0801e05e <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GAD0Ev>:
 801e05e:	b510      	push	{r4, lr}
 801e060:	4604      	mov	r4, r0
 801e062:	2104      	movs	r1, #4
 801e064:	f009 f831 	bl	80270ca <_ZdlPvj>
 801e068:	4620      	mov	r0, r4
 801e06a:	bd10      	pop	{r4, pc}

0801e06c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 801e06c:	b510      	push	{r4, lr}
 801e06e:	4604      	mov	r4, r0
 801e070:	2104      	movs	r1, #4
 801e072:	f009 f82a 	bl	80270ca <_ZdlPvj>
 801e076:	4620      	mov	r0, r4
 801e078:	bd10      	pop	{r4, pc}

0801e07a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GAD0Ev>:
 801e07a:	b510      	push	{r4, lr}
 801e07c:	4604      	mov	r4, r0
 801e07e:	2104      	movs	r1, #4
 801e080:	f009 f823 	bl	80270ca <_ZdlPvj>
 801e084:	4620      	mov	r0, r4
 801e086:	bd10      	pop	{r4, pc}

0801e088 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGAD0Ev>:
 801e088:	b510      	push	{r4, lr}
 801e08a:	4604      	mov	r4, r0
 801e08c:	2104      	movs	r1, #4
 801e08e:	f009 f81c 	bl	80270ca <_ZdlPvj>
 801e092:	4620      	mov	r0, r4
 801e094:	bd10      	pop	{r4, pc}

0801e096 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GAD0Ev>:
 801e096:	b510      	push	{r4, lr}
 801e098:	4604      	mov	r4, r0
 801e09a:	2104      	movs	r1, #4
 801e09c:	f009 f815 	bl	80270ca <_ZdlPvj>
 801e0a0:	4620      	mov	r0, r4
 801e0a2:	bd10      	pop	{r4, pc}

0801e0a4 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 801e0a4:	b510      	push	{r4, lr}
 801e0a6:	4604      	mov	r4, r0
 801e0a8:	2104      	movs	r1, #4
 801e0aa:	f009 f80e 	bl	80270ca <_ZdlPvj>
 801e0ae:	4620      	mov	r0, r4
 801e0b0:	bd10      	pop	{r4, pc}

0801e0b2 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GAD0Ev>:
 801e0b2:	b510      	push	{r4, lr}
 801e0b4:	4604      	mov	r4, r0
 801e0b6:	2104      	movs	r1, #4
 801e0b8:	f009 f807 	bl	80270ca <_ZdlPvj>
 801e0bc:	4620      	mov	r0, r4
 801e0be:	bd10      	pop	{r4, pc}

0801e0c0 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 801e0c0:	b510      	push	{r4, lr}
 801e0c2:	4604      	mov	r4, r0
 801e0c4:	2104      	movs	r1, #4
 801e0c6:	f009 f800 	bl	80270ca <_ZdlPvj>
 801e0ca:	4620      	mov	r0, r4
 801e0cc:	bd10      	pop	{r4, pc}

0801e0ce <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 801e0ce:	b510      	push	{r4, lr}
 801e0d0:	4604      	mov	r4, r0
 801e0d2:	2104      	movs	r1, #4
 801e0d4:	f008 fff9 	bl	80270ca <_ZdlPvj>
 801e0d8:	4620      	mov	r0, r4
 801e0da:	bd10      	pop	{r4, pc}

0801e0dc <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 801e0dc:	b510      	push	{r4, lr}
 801e0de:	4604      	mov	r4, r0
 801e0e0:	2104      	movs	r1, #4
 801e0e2:	f008 fff2 	bl	80270ca <_ZdlPvj>
 801e0e6:	4620      	mov	r0, r4
 801e0e8:	bd10      	pop	{r4, pc}

0801e0ea <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 801e0ea:	b510      	push	{r4, lr}
 801e0ec:	4604      	mov	r4, r0
 801e0ee:	2104      	movs	r1, #4
 801e0f0:	f008 ffeb 	bl	80270ca <_ZdlPvj>
 801e0f4:	4620      	mov	r0, r4
 801e0f6:	bd10      	pop	{r4, pc}

0801e0f8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGAD0Ev>:
 801e0f8:	b510      	push	{r4, lr}
 801e0fa:	4604      	mov	r4, r0
 801e0fc:	2104      	movs	r1, #4
 801e0fe:	f008 ffe4 	bl	80270ca <_ZdlPvj>
 801e102:	4620      	mov	r0, r4
 801e104:	bd10      	pop	{r4, pc}

0801e106 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GAD0Ev>:
 801e106:	b510      	push	{r4, lr}
 801e108:	4604      	mov	r4, r0
 801e10a:	2104      	movs	r1, #4
 801e10c:	f008 ffdd 	bl	80270ca <_ZdlPvj>
 801e110:	4620      	mov	r0, r4
 801e112:	bd10      	pop	{r4, pc}

0801e114 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGAD0Ev>:
 801e114:	b510      	push	{r4, lr}
 801e116:	4604      	mov	r4, r0
 801e118:	2104      	movs	r1, #4
 801e11a:	f008 ffd6 	bl	80270ca <_ZdlPvj>
 801e11e:	4620      	mov	r0, r4
 801e120:	bd10      	pop	{r4, pc}

0801e122 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GAD0Ev>:
 801e122:	b510      	push	{r4, lr}
 801e124:	4604      	mov	r4, r0
 801e126:	2104      	movs	r1, #4
 801e128:	f008 ffcf 	bl	80270ca <_ZdlPvj>
 801e12c:	4620      	mov	r0, r4
 801e12e:	bd10      	pop	{r4, pc}

0801e130 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh>:
 801e130:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e134:	460d      	mov	r5, r1
 801e136:	b087      	sub	sp, #28
 801e138:	4614      	mov	r4, r2
 801e13a:	4698      	mov	r8, r3
 801e13c:	b333      	cbz	r3, 801e18c <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 801e13e:	4608      	mov	r0, r1
 801e140:	f7f7 f9d3 	bl	80154ea <_ZNK8touchgfx4Rect7isEmptyEv>
 801e144:	bb10      	cbnz	r0, 801e18c <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 801e146:	6828      	ldr	r0, [r5, #0]
 801e148:	ab04      	add	r3, sp, #16
 801e14a:	6869      	ldr	r1, [r5, #4]
 801e14c:	4e72      	ldr	r6, [pc, #456]	; (801e318 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x1e8>)
 801e14e:	c303      	stmia	r3!, {r0, r1}
 801e150:	a804      	add	r0, sp, #16
 801e152:	f7fa fb7b 	bl	801884c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801e156:	6830      	ldr	r0, [r6, #0]
 801e158:	6803      	ldr	r3, [r0, #0]
 801e15a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801e15c:	4798      	blx	r3
 801e15e:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 801e162:	d016      	beq.n	801e192 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x62>
 801e164:	f010 0f08 	tst.w	r0, #8
 801e168:	d016      	beq.n	801e198 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x68>
 801e16a:	f8bd 5016 	ldrh.w	r5, [sp, #22]
 801e16e:	6830      	ldr	r0, [r6, #0]
 801e170:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 801e174:	6801      	ldr	r1, [r0, #0]
 801e176:	9501      	str	r5, [sp, #4]
 801e178:	f8bd 5014 	ldrh.w	r5, [sp, #20]
 801e17c:	f8cd 8008 	str.w	r8, [sp, #8]
 801e180:	9500      	str	r5, [sp, #0]
 801e182:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 801e186:	6c8d      	ldr	r5, [r1, #72]	; 0x48
 801e188:	4621      	mov	r1, r4
 801e18a:	47a8      	blx	r5
 801e18c:	b007      	add	sp, #28
 801e18e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e192:	f010 0f02 	tst.w	r0, #2
 801e196:	e7e7      	b.n	801e168 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x38>
 801e198:	6830      	ldr	r0, [r6, #0]
 801e19a:	f9bd 7016 	ldrsh.w	r7, [sp, #22]
 801e19e:	6803      	ldr	r3, [r0, #0]
 801e1a0:	f9bd 5014 	ldrsh.w	r5, [sp, #20]
 801e1a4:	6a1b      	ldr	r3, [r3, #32]
 801e1a6:	4798      	blx	r3
 801e1a8:	495c      	ldr	r1, [pc, #368]	; (801e31c <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x1ec>)
 801e1aa:	f9bd 2012 	ldrsh.w	r2, [sp, #18]
 801e1ae:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 801e1b2:	880b      	ldrh	r3, [r1, #0]
 801e1b4:	468e      	mov	lr, r1
 801e1b6:	f9bd c010 	ldrsh.w	ip, [sp, #16]
 801e1ba:	fb03 c202 	mla	r2, r3, r2, ip
 801e1be:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 801e1c2:	fb07 f203 	mul.w	r2, r7, r3
 801e1c6:	d053      	beq.n	801e270 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x140>
 801e1c8:	fa1f f388 	uxth.w	r3, r8
 801e1cc:	f1c8 07ff 	rsb	r7, r8, #255	; 0xff
 801e1d0:	ea4f 09d4 	mov.w	r9, r4, lsr #3
 801e1d4:	ea4f 2814 	mov.w	r8, r4, lsr #8
 801e1d8:	00e4      	lsls	r4, r4, #3
 801e1da:	f009 09fc 	and.w	r9, r9, #252	; 0xfc
 801e1de:	f008 08f8 	and.w	r8, r8, #248	; 0xf8
 801e1e2:	eb00 0142 	add.w	r1, r0, r2, lsl #1
 801e1e6:	b2e4      	uxtb	r4, r4
 801e1e8:	fb09 f903 	mul.w	r9, r9, r3
 801e1ec:	fb08 f803 	mul.w	r8, r8, r3
 801e1f0:	006d      	lsls	r5, r5, #1
 801e1f2:	4363      	muls	r3, r4
 801e1f4:	b2bc      	uxth	r4, r7
 801e1f6:	4288      	cmp	r0, r1
 801e1f8:	f080 8088 	bcs.w	801e30c <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x1dc>
 801e1fc:	eb00 0a05 	add.w	sl, r0, r5
 801e200:	4550      	cmp	r0, sl
 801e202:	d22f      	bcs.n	801e264 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x134>
 801e204:	8802      	ldrh	r2, [r0, #0]
 801e206:	ea4f 2c22 	mov.w	ip, r2, asr #8
 801e20a:	10d7      	asrs	r7, r2, #3
 801e20c:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801e210:	00d2      	lsls	r2, r2, #3
 801e212:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801e216:	fb1c fc04 	smulbb	ip, ip, r4
 801e21a:	b2d2      	uxtb	r2, r2
 801e21c:	fb17 f704 	smulbb	r7, r7, r4
 801e220:	fb12 f204 	smulbb	r2, r2, r4
 801e224:	44c4      	add	ip, r8
 801e226:	444f      	add	r7, r9
 801e228:	fa1f fc8c 	uxth.w	ip, ip
 801e22c:	441a      	add	r2, r3
 801e22e:	b2bf      	uxth	r7, r7
 801e230:	b292      	uxth	r2, r2
 801e232:	f10c 0b01 	add.w	fp, ip, #1
 801e236:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 801e23a:	f102 0b01 	add.w	fp, r2, #1
 801e23e:	eb0b 2212 	add.w	r2, fp, r2, lsr #8
 801e242:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801e246:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 801e24a:	ea4c 0202 	orr.w	r2, ip, r2
 801e24e:	f107 0c01 	add.w	ip, r7, #1
 801e252:	eb0c 2717 	add.w	r7, ip, r7, lsr #8
 801e256:	097f      	lsrs	r7, r7, #5
 801e258:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 801e25c:	433a      	orrs	r2, r7
 801e25e:	f820 2b02 	strh.w	r2, [r0], #2
 801e262:	e7cd      	b.n	801e200 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0xd0>
 801e264:	f8be 2000 	ldrh.w	r2, [lr]
 801e268:	ebc5 0242 	rsb	r2, r5, r2, lsl #1
 801e26c:	4410      	add	r0, r2
 801e26e:	e7c2      	b.n	801e1f6 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0xc6>
 801e270:	07db      	lsls	r3, r3, #31
 801e272:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 801e276:	d50e      	bpl.n	801e296 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x166>
 801e278:	006d      	lsls	r5, r5, #1
 801e27a:	4290      	cmp	r0, r2
 801e27c:	d246      	bcs.n	801e30c <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x1dc>
 801e27e:	1943      	adds	r3, r0, r5
 801e280:	4298      	cmp	r0, r3
 801e282:	d202      	bcs.n	801e28a <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x15a>
 801e284:	f820 4b02 	strh.w	r4, [r0], #2
 801e288:	e7fa      	b.n	801e280 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x150>
 801e28a:	f8be 3000 	ldrh.w	r3, [lr]
 801e28e:	ebc5 0343 	rsb	r3, r5, r3, lsl #1
 801e292:	4418      	add	r0, r3
 801e294:	e7f1      	b.n	801e27a <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x14a>
 801e296:	0787      	lsls	r7, r0, #30
 801e298:	462b      	mov	r3, r5
 801e29a:	d00a      	beq.n	801e2b2 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x182>
 801e29c:	4603      	mov	r3, r0
 801e29e:	4293      	cmp	r3, r2
 801e2a0:	d205      	bcs.n	801e2ae <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x17e>
 801e2a2:	801c      	strh	r4, [r3, #0]
 801e2a4:	f8be 1000 	ldrh.w	r1, [lr]
 801e2a8:	eb03 0341 	add.w	r3, r3, r1, lsl #1
 801e2ac:	e7f7      	b.n	801e29e <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x16e>
 801e2ae:	3002      	adds	r0, #2
 801e2b0:	1e6b      	subs	r3, r5, #1
 801e2b2:	07dd      	lsls	r5, r3, #31
 801e2b4:	d50d      	bpl.n	801e2d2 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x1a2>
 801e2b6:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 801e2ba:	3901      	subs	r1, #1
 801e2bc:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 801e2c0:	4291      	cmp	r1, r2
 801e2c2:	d205      	bcs.n	801e2d0 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x1a0>
 801e2c4:	800c      	strh	r4, [r1, #0]
 801e2c6:	f8be 5000 	ldrh.w	r5, [lr]
 801e2ca:	eb01 0145 	add.w	r1, r1, r5, lsl #1
 801e2ce:	e7f7      	b.n	801e2c0 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x190>
 801e2d0:	3b01      	subs	r3, #1
 801e2d2:	b1db      	cbz	r3, 801e30c <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x1dc>
 801e2d4:	b2a1      	uxth	r1, r4
 801e2d6:	105b      	asrs	r3, r3, #1
 801e2d8:	ea41 4404 	orr.w	r4, r1, r4, lsl #16
 801e2dc:	009b      	lsls	r3, r3, #2
 801e2de:	4290      	cmp	r0, r2
 801e2e0:	d214      	bcs.n	801e30c <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x1dc>
 801e2e2:	0781      	lsls	r1, r0, #30
 801e2e4:	d006      	beq.n	801e2f4 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x1c4>
 801e2e6:	4b0e      	ldr	r3, [pc, #56]	; (801e320 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x1f0>)
 801e2e8:	f44f 7162 	mov.w	r1, #904	; 0x388
 801e2ec:	4a0d      	ldr	r2, [pc, #52]	; (801e324 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x1f4>)
 801e2ee:	480e      	ldr	r0, [pc, #56]	; (801e328 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x1f8>)
 801e2f0:	f008 ff1a 	bl	8027128 <__assert_func>
 801e2f4:	18c5      	adds	r5, r0, r3
 801e2f6:	4601      	mov	r1, r0
 801e2f8:	42a9      	cmp	r1, r5
 801e2fa:	d202      	bcs.n	801e302 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x1d2>
 801e2fc:	f841 4b04 	str.w	r4, [r1], #4
 801e300:	e7fa      	b.n	801e2f8 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x1c8>
 801e302:	f8be 1000 	ldrh.w	r1, [lr]
 801e306:	eb00 0041 	add.w	r0, r0, r1, lsl #1
 801e30a:	e7e8      	b.n	801e2de <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x1ae>
 801e30c:	6830      	ldr	r0, [r6, #0]
 801e30e:	6803      	ldr	r3, [r0, #0]
 801e310:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801e312:	4798      	blx	r3
 801e314:	e73a      	b.n	801e18c <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 801e316:	bf00      	nop
 801e318:	2000580c 	.word	0x2000580c
 801e31c:	20005806 	.word	0x20005806
 801e320:	0802b988 	.word	0x0802b988
 801e324:	0802c140 	.word	0x0802c140
 801e328:	0802b9b7 	.word	0x0802b9b7

0801e32c <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t>:
 801e32c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e330:	4f97      	ldr	r7, [pc, #604]	; (801e590 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x264>)
 801e332:	4616      	mov	r6, r2
 801e334:	b08f      	sub	sp, #60	; 0x3c
 801e336:	4604      	mov	r4, r0
 801e338:	683a      	ldr	r2, [r7, #0]
 801e33a:	4689      	mov	r9, r1
 801e33c:	f892 2048 	ldrb.w	r2, [r2, #72]	; 0x48
 801e340:	2a02      	cmp	r2, #2
 801e342:	d106      	bne.n	801e352 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x26>
 801e344:	4b93      	ldr	r3, [pc, #588]	; (801e594 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x268>)
 801e346:	f44f 7132 	mov.w	r1, #712	; 0x2c8
 801e34a:	4a93      	ldr	r2, [pc, #588]	; (801e598 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x26c>)
 801e34c:	4893      	ldr	r0, [pc, #588]	; (801e59c <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x270>)
 801e34e:	f008 feeb 	bl	8027128 <__assert_func>
 801e352:	ad0e      	add	r5, sp, #56	; 0x38
 801e354:	f825 3d24 	strh.w	r3, [r5, #-36]!
 801e358:	4628      	mov	r0, r5
 801e35a:	f7fd fa4d 	bl	801b7f8 <_ZNK8touchgfx6Bitmap9getFormatEv>
 801e35e:	6823      	ldr	r3, [r4, #0]
 801e360:	4680      	mov	r8, r0
 801e362:	4620      	mov	r0, r4
 801e364:	6a1b      	ldr	r3, [r3, #32]
 801e366:	4798      	blx	r3
 801e368:	4580      	cmp	r8, r0
 801e36a:	d004      	beq.n	801e376 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x4a>
 801e36c:	4b8c      	ldr	r3, [pc, #560]	; (801e5a0 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x274>)
 801e36e:	f240 21ca 	movw	r1, #714	; 0x2ca
 801e372:	4a89      	ldr	r2, [pc, #548]	; (801e598 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x26c>)
 801e374:	e7ea      	b.n	801e34c <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20>
 801e376:	4628      	mov	r0, r5
 801e378:	f7fd f9b4 	bl	801b6e4 <_ZNK8touchgfx6Bitmap7getDataEv>
 801e37c:	4680      	mov	r8, r0
 801e37e:	b920      	cbnz	r0, 801e38a <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x5e>
 801e380:	4b88      	ldr	r3, [pc, #544]	; (801e5a4 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x278>)
 801e382:	f44f 7133 	mov.w	r1, #716	; 0x2cc
 801e386:	4a84      	ldr	r2, [pc, #528]	; (801e598 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x26c>)
 801e388:	e7e0      	b.n	801e34c <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20>
 801e38a:	6830      	ldr	r0, [r6, #0]
 801e38c:	ab06      	add	r3, sp, #24
 801e38e:	6871      	ldr	r1, [r6, #4]
 801e390:	f10d 0b20 	add.w	fp, sp, #32
 801e394:	f9b6 a000 	ldrsh.w	sl, [r6]
 801e398:	c303      	stmia	r3!, {r0, r1}
 801e39a:	f8d9 1004 	ldr.w	r1, [r9, #4]
 801e39e:	ab08      	add	r3, sp, #32
 801e3a0:	f8d9 0000 	ldr.w	r0, [r9]
 801e3a4:	f9b6 9002 	ldrsh.w	r9, [r6, #2]
 801e3a8:	c303      	stmia	r3!, {r0, r1}
 801e3aa:	4628      	mov	r0, r5
 801e3ac:	f7fd f892 	bl	801b4d4 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801e3b0:	4606      	mov	r6, r0
 801e3b2:	4628      	mov	r0, r5
 801e3b4:	4d7c      	ldr	r5, [pc, #496]	; (801e5a8 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x27c>)
 801e3b6:	f7fd f8c7 	bl	801b548 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801e3ba:	f8ad 002e 	strh.w	r0, [sp, #46]	; 0x2e
 801e3be:	a806      	add	r0, sp, #24
 801e3c0:	f8ad a028 	strh.w	sl, [sp, #40]	; 0x28
 801e3c4:	f8ad 902a 	strh.w	r9, [sp, #42]	; 0x2a
 801e3c8:	f8ad 602c 	strh.w	r6, [sp, #44]	; 0x2c
 801e3cc:	f7fa fa3e 	bl	801884c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801e3d0:	4658      	mov	r0, fp
 801e3d2:	f7fa fa3b 	bl	801884c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801e3d6:	a80a      	add	r0, sp, #40	; 0x28
 801e3d8:	f7fa fa38 	bl	801884c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801e3dc:	4b73      	ldr	r3, [pc, #460]	; (801e5ac <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x280>)
 801e3de:	2100      	movs	r1, #0
 801e3e0:	f9b5 2000 	ldrsh.w	r2, [r5]
 801e3e4:	f9b3 3000 	ldrsh.w	r3, [r3]
 801e3e8:	4658      	mov	r0, fp
 801e3ea:	910c      	str	r1, [sp, #48]	; 0x30
 801e3ec:	a90c      	add	r1, sp, #48	; 0x30
 801e3ee:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
 801e3f2:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 801e3f6:	f7f7 f835 	bl	8015464 <_ZN8touchgfx4RectaNERKS0_>
 801e3fa:	4658      	mov	r0, fp
 801e3fc:	f7f7 f875 	bl	80154ea <_ZNK8touchgfx4Rect7isEmptyEv>
 801e400:	2800      	cmp	r0, #0
 801e402:	f040 809a 	bne.w	801e53a <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20e>
 801e406:	f9bd 0020 	ldrsh.w	r0, [sp, #32]
 801e40a:	f9bd 1018 	ldrsh.w	r1, [sp, #24]
 801e40e:	4288      	cmp	r0, r1
 801e410:	db38      	blt.n	801e484 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x158>
 801e412:	f9bd 2022 	ldrsh.w	r2, [sp, #34]	; 0x22
 801e416:	f9bd 301a 	ldrsh.w	r3, [sp, #26]
 801e41a:	429a      	cmp	r2, r3
 801e41c:	db32      	blt.n	801e484 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x158>
 801e41e:	f8bd 6024 	ldrh.w	r6, [sp, #36]	; 0x24
 801e422:	4430      	add	r0, r6
 801e424:	f8bd 601c 	ldrh.w	r6, [sp, #28]
 801e428:	4431      	add	r1, r6
 801e42a:	b200      	sxth	r0, r0
 801e42c:	b209      	sxth	r1, r1
 801e42e:	4288      	cmp	r0, r1
 801e430:	dc28      	bgt.n	801e484 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x158>
 801e432:	f8bd 1026 	ldrh.w	r1, [sp, #38]	; 0x26
 801e436:	440a      	add	r2, r1
 801e438:	f8bd 101e 	ldrh.w	r1, [sp, #30]
 801e43c:	440b      	add	r3, r1
 801e43e:	b212      	sxth	r2, r2
 801e440:	b21b      	sxth	r3, r3
 801e442:	429a      	cmp	r2, r3
 801e444:	dc1e      	bgt.n	801e484 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x158>
 801e446:	6823      	ldr	r3, [r4, #0]
 801e448:	4620      	mov	r0, r4
 801e44a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801e44c:	4798      	blx	r3
 801e44e:	4682      	mov	sl, r0
 801e450:	6838      	ldr	r0, [r7, #0]
 801e452:	6803      	ldr	r3, [r0, #0]
 801e454:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801e456:	4798      	blx	r3
 801e458:	f9bd 1028 	ldrsh.w	r1, [sp, #40]	; 0x28
 801e45c:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 801e460:	f9bd 202c 	ldrsh.w	r2, [sp, #44]	; 0x2c
 801e464:	1a5b      	subs	r3, r3, r1
 801e466:	b29b      	uxth	r3, r3
 801e468:	b21c      	sxth	r4, r3
 801e46a:	2c00      	cmp	r4, #0
 801e46c:	dc0f      	bgt.n	801e48e <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x162>
 801e46e:	bf18      	it	ne
 801e470:	f8ad 1020 	strhne.w	r1, [sp, #32]
 801e474:	4644      	mov	r4, r8
 801e476:	bf1e      	ittt	ne
 801e478:	f8bd 1024 	ldrhne.w	r1, [sp, #36]	; 0x24
 801e47c:	185b      	addne	r3, r3, r1
 801e47e:	f8ad 3024 	strhne.w	r3, [sp, #36]	; 0x24
 801e482:	e009      	b.n	801e498 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x16c>
 801e484:	4b4a      	ldr	r3, [pc, #296]	; (801e5b0 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x284>)
 801e486:	f240 21da 	movw	r1, #730	; 0x2da
 801e48a:	4a43      	ldr	r2, [pc, #268]	; (801e598 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x26c>)
 801e48c:	e75e      	b.n	801e34c <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20>
 801e48e:	1ad3      	subs	r3, r2, r3
 801e490:	eb08 0444 	add.w	r4, r8, r4, lsl #1
 801e494:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
 801e498:	f9bd 602a 	ldrsh.w	r6, [sp, #42]	; 0x2a
 801e49c:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 801e4a0:	1b9b      	subs	r3, r3, r6
 801e4a2:	b29b      	uxth	r3, r3
 801e4a4:	b219      	sxth	r1, r3
 801e4a6:	2900      	cmp	r1, #0
 801e4a8:	dd4b      	ble.n	801e542 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x216>
 801e4aa:	4351      	muls	r1, r2
 801e4ac:	eb04 0441 	add.w	r4, r4, r1, lsl #1
 801e4b0:	f8bd 102e 	ldrh.w	r1, [sp, #46]	; 0x2e
 801e4b4:	1acb      	subs	r3, r1, r3
 801e4b6:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 801e4ba:	f9bd 602c 	ldrsh.w	r6, [sp, #44]	; 0x2c
 801e4be:	2e00      	cmp	r6, #0
 801e4c0:	dd3b      	ble.n	801e53a <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20e>
 801e4c2:	f9bd 302e 	ldrsh.w	r3, [sp, #46]	; 0x2e
 801e4c6:	2b00      	cmp	r3, #0
 801e4c8:	dd37      	ble.n	801e53a <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20e>
 801e4ca:	f9bd c022 	ldrsh.w	ip, [sp, #34]	; 0x22
 801e4ce:	f9bd 1020 	ldrsh.w	r1, [sp, #32]
 801e4d2:	fb0a f90c 	mul.w	r9, sl, ip
 801e4d6:	eb09 0941 	add.w	r9, r9, r1, lsl #1
 801e4da:	4481      	add	r9, r0
 801e4dc:	8828      	ldrh	r0, [r5, #0]
 801e4de:	f9bd 5024 	ldrsh.w	r5, [sp, #36]	; 0x24
 801e4e2:	1a41      	subs	r1, r0, r1
 801e4e4:	42ae      	cmp	r6, r5
 801e4e6:	bfa8      	it	ge
 801e4e8:	462e      	movge	r6, r5
 801e4ea:	f9bd 5026 	ldrsh.w	r5, [sp, #38]	; 0x26
 801e4ee:	428e      	cmp	r6, r1
 801e4f0:	bfa8      	it	ge
 801e4f2:	460e      	movge	r6, r1
 801e4f4:	429d      	cmp	r5, r3
 801e4f6:	bfa8      	it	ge
 801e4f8:	461d      	movge	r5, r3
 801e4fa:	4b2c      	ldr	r3, [pc, #176]	; (801e5ac <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x280>)
 801e4fc:	881b      	ldrh	r3, [r3, #0]
 801e4fe:	eba3 030c 	sub.w	r3, r3, ip
 801e502:	429d      	cmp	r5, r3
 801e504:	bfa8      	it	ge
 801e506:	461d      	movge	r5, r3
 801e508:	42b0      	cmp	r0, r6
 801e50a:	d12c      	bne.n	801e566 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x23a>
 801e50c:	4290      	cmp	r0, r2
 801e50e:	d12a      	bne.n	801e566 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x23a>
 801e510:	6838      	ldr	r0, [r7, #0]
 801e512:	9203      	str	r2, [sp, #12]
 801e514:	6803      	ldr	r3, [r0, #0]
 801e516:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801e518:	4798      	blx	r3
 801e51a:	07c3      	lsls	r3, r0, #31
 801e51c:	d51a      	bpl.n	801e554 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x228>
 801e51e:	9a03      	ldr	r2, [sp, #12]
 801e520:	6838      	ldr	r0, [r7, #0]
 801e522:	f8ad 5026 	strh.w	r5, [sp, #38]	; 0x26
 801e526:	f8ad 2024 	strh.w	r2, [sp, #36]	; 0x24
 801e52a:	6803      	ldr	r3, [r0, #0]
 801e52c:	9200      	str	r2, [sp, #0]
 801e52e:	6d5d      	ldr	r5, [r3, #84]	; 0x54
 801e530:	4623      	mov	r3, r4
 801e532:	e89b 0006 	ldmia.w	fp, {r1, r2}
 801e536:	47a8      	blx	r5
 801e538:	4680      	mov	r8, r0
 801e53a:	4640      	mov	r0, r8
 801e53c:	b00f      	add	sp, #60	; 0x3c
 801e53e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e542:	bf1f      	itttt	ne
 801e544:	f8bd 1026 	ldrhne.w	r1, [sp, #38]	; 0x26
 801e548:	f8ad 6022 	strhne.w	r6, [sp, #34]	; 0x22
 801e54c:	185b      	addne	r3, r3, r1
 801e54e:	f8ad 3026 	strhne.w	r3, [sp, #38]	; 0x26
 801e552:	e7b2      	b.n	801e4ba <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x18e>
 801e554:	6838      	ldr	r0, [r7, #0]
 801e556:	464a      	mov	r2, r9
 801e558:	4621      	mov	r1, r4
 801e55a:	6803      	ldr	r3, [r0, #0]
 801e55c:	6ade      	ldr	r6, [r3, #44]	; 0x2c
 801e55e:	fb05 f30a 	mul.w	r3, r5, sl
 801e562:	47b0      	blx	r6
 801e564:	e7e9      	b.n	801e53a <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20e>
 801e566:	4355      	muls	r5, r2
 801e568:	0076      	lsls	r6, r6, #1
 801e56a:	ea4f 0b42 	mov.w	fp, r2, lsl #1
 801e56e:	eb04 0345 	add.w	r3, r4, r5, lsl #1
 801e572:	9303      	str	r3, [sp, #12]
 801e574:	9b03      	ldr	r3, [sp, #12]
 801e576:	429c      	cmp	r4, r3
 801e578:	d2df      	bcs.n	801e53a <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20e>
 801e57a:	6838      	ldr	r0, [r7, #0]
 801e57c:	464a      	mov	r2, r9
 801e57e:	4621      	mov	r1, r4
 801e580:	44d1      	add	r9, sl
 801e582:	6803      	ldr	r3, [r0, #0]
 801e584:	445c      	add	r4, fp
 801e586:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801e588:	461d      	mov	r5, r3
 801e58a:	4633      	mov	r3, r6
 801e58c:	47a8      	blx	r5
 801e58e:	e7f1      	b.n	801e574 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x248>
 801e590:	2000580c 	.word	0x2000580c
 801e594:	0802b7ae 	.word	0x0802b7ae
 801e598:	0802c023 	.word	0x0802c023
 801e59c:	0802b9b7 	.word	0x0802b9b7
 801e5a0:	0802b860 	.word	0x0802b860
 801e5a4:	0802b8b5 	.word	0x0802b8b5
 801e5a8:	20005806 	.word	0x20005806
 801e5ac:	20005808 	.word	0x20005808
 801e5b0:	0802b8f3 	.word	0x0802b8f3

0801e5b4 <_ZN8touchgfx8LCD16bppC1Ev>:
 801e5b4:	2200      	movs	r2, #0
 801e5b6:	4910      	ldr	r1, [pc, #64]	; (801e5f8 <_ZN8touchgfx8LCD16bppC1Ev+0x44>)
 801e5b8:	6042      	str	r2, [r0, #4]
 801e5ba:	6001      	str	r1, [r0, #0]
 801e5bc:	e9c0 2202 	strd	r2, r2, [r0, #8]
 801e5c0:	e9c0 2204 	strd	r2, r2, [r0, #16]
 801e5c4:	e9c0 2206 	strd	r2, r2, [r0, #24]
 801e5c8:	e9c0 2208 	strd	r2, r2, [r0, #32]
 801e5cc:	e9c0 220a 	strd	r2, r2, [r0, #40]	; 0x28
 801e5d0:	e9c0 220c 	strd	r2, r2, [r0, #48]	; 0x30
 801e5d4:	e9c0 220e 	strd	r2, r2, [r0, #56]	; 0x38
 801e5d8:	e9c0 2210 	strd	r2, r2, [r0, #64]	; 0x40
 801e5dc:	e9c0 2212 	strd	r2, r2, [r0, #72]	; 0x48
 801e5e0:	e9c0 2214 	strd	r2, r2, [r0, #80]	; 0x50
 801e5e4:	e9c0 2216 	strd	r2, r2, [r0, #88]	; 0x58
 801e5e8:	e9c0 2218 	strd	r2, r2, [r0, #96]	; 0x60
 801e5ec:	e9c0 221a 	strd	r2, r2, [r0, #104]	; 0x68
 801e5f0:	e9c0 221c 	strd	r2, r2, [r0, #112]	; 0x70
 801e5f4:	4770      	bx	lr
 801e5f6:	bf00      	nop
 801e5f8:	0802bc98 	.word	0x0802bc98

0801e5fc <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>:
 801e5fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e600:	b08b      	sub	sp, #44	; 0x2c
 801e602:	460d      	mov	r5, r1
 801e604:	4604      	mov	r4, r0
 801e606:	4699      	mov	r9, r3
 801e608:	6808      	ldr	r0, [r1, #0]
 801e60a:	ab06      	add	r3, sp, #24
 801e60c:	6849      	ldr	r1, [r1, #4]
 801e60e:	c303      	stmia	r3!, {r0, r1}
 801e610:	6810      	ldr	r0, [r2, #0]
 801e612:	ab08      	add	r3, sp, #32
 801e614:	6851      	ldr	r1, [r2, #4]
 801e616:	c303      	stmia	r3!, {r0, r1}
 801e618:	a806      	add	r0, sp, #24
 801e61a:	f7fa f917 	bl	801884c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801e61e:	4629      	mov	r1, r5
 801e620:	a808      	add	r0, sp, #32
 801e622:	4d63      	ldr	r5, [pc, #396]	; (801e7b0 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1b4>)
 801e624:	f7fa f8fa 	bl	801881c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801e628:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 801e62c:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 801e630:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 801e634:	6828      	ldr	r0, [r5, #0]
 801e636:	fb11 2103 	smlabb	r1, r1, r3, r2
 801e63a:	f9bd 8024 	ldrsh.w	r8, [sp, #36]	; 0x24
 801e63e:	f9bd 6026 	ldrsh.w	r6, [sp, #38]	; 0x26
 801e642:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 801e646:	f8bd 1018 	ldrh.w	r1, [sp, #24]
 801e64a:	440a      	add	r2, r1
 801e64c:	f8ad 2020 	strh.w	r2, [sp, #32]
 801e650:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 801e654:	4413      	add	r3, r2
 801e656:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 801e65a:	6803      	ldr	r3, [r0, #0]
 801e65c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801e65e:	4798      	blx	r3
 801e660:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 801e664:	d118      	bne.n	801e698 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x9c>
 801e666:	f010 0f20 	tst.w	r0, #32
 801e66a:	6828      	ldr	r0, [r5, #0]
 801e66c:	d017      	beq.n	801e69e <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xa2>
 801e66e:	f8bd 501c 	ldrh.w	r5, [sp, #28]
 801e672:	b2b6      	uxth	r6, r6
 801e674:	6801      	ldr	r1, [r0, #0]
 801e676:	9502      	str	r5, [sp, #8]
 801e678:	fa1f f588 	uxth.w	r5, r8
 801e67c:	f8cd 900c 	str.w	r9, [sp, #12]
 801e680:	9601      	str	r6, [sp, #4]
 801e682:	9500      	str	r5, [sp, #0]
 801e684:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 801e688:	6bcd      	ldr	r5, [r1, #60]	; 0x3c
 801e68a:	4621      	mov	r1, r4
 801e68c:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 801e690:	47a8      	blx	r5
 801e692:	b00b      	add	sp, #44	; 0x2c
 801e694:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e698:	f010 0f40 	tst.w	r0, #64	; 0x40
 801e69c:	e7e5      	b.n	801e66a <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x6e>
 801e69e:	6803      	ldr	r3, [r0, #0]
 801e6a0:	6a1b      	ldr	r3, [r3, #32]
 801e6a2:	4798      	blx	r3
 801e6a4:	4a43      	ldr	r2, [pc, #268]	; (801e7b4 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1b8>)
 801e6a6:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 801e6aa:	f8b2 e000 	ldrh.w	lr, [r2]
 801e6ae:	4692      	mov	sl, r2
 801e6b0:	f9bd 1020 	ldrsh.w	r1, [sp, #32]
 801e6b4:	fb0e 1303 	mla	r3, lr, r3, r1
 801e6b8:	fb0e fe06 	mul.w	lr, lr, r6
 801e6bc:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801e6c0:	ea4f 0348 	mov.w	r3, r8, lsl #1
 801e6c4:	eb00 0e4e 	add.w	lr, r0, lr, lsl #1
 801e6c8:	9305      	str	r3, [sp, #20]
 801e6ca:	4570      	cmp	r0, lr
 801e6cc:	d26a      	bcs.n	801e7a4 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1a8>
 801e6ce:	9b05      	ldr	r3, [sp, #20]
 801e6d0:	4621      	mov	r1, r4
 801e6d2:	eb00 0b03 	add.w	fp, r0, r3
 801e6d6:	4558      	cmp	r0, fp
 801e6d8:	d257      	bcs.n	801e78a <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x18e>
 801e6da:	f851 4b04 	ldr.w	r4, [r1], #4
 801e6de:	0e22      	lsrs	r2, r4, #24
 801e6e0:	d012      	beq.n	801e708 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x10c>
 801e6e2:	2aff      	cmp	r2, #255	; 0xff
 801e6e4:	ea4f 2714 	mov.w	r7, r4, lsr #8
 801e6e8:	d110      	bne.n	801e70c <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x110>
 801e6ea:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 801e6ee:	d10d      	bne.n	801e70c <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x110>
 801e6f0:	0963      	lsrs	r3, r4, #5
 801e6f2:	f427 67ff 	bic.w	r7, r7, #2040	; 0x7f8
 801e6f6:	f3c4 04c4 	ubfx	r4, r4, #3, #5
 801e6fa:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801e6fe:	f027 0707 	bic.w	r7, r7, #7
 801e702:	431f      	orrs	r7, r3
 801e704:	433c      	orrs	r4, r7
 801e706:	8004      	strh	r4, [r0, #0]
 801e708:	3002      	adds	r0, #2
 801e70a:	e7e4      	b.n	801e6d6 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xda>
 801e70c:	fb09 f302 	mul.w	r3, r9, r2
 801e710:	f8b0 c000 	ldrh.w	ip, [r0]
 801e714:	f3c4 4507 	ubfx	r5, r4, #16, #8
 801e718:	b2ff      	uxtb	r7, r7
 801e71a:	1c5a      	adds	r2, r3, #1
 801e71c:	ea4f 262c 	mov.w	r6, ip, asr #8
 801e720:	b2e4      	uxtb	r4, r4
 801e722:	eb02 2223 	add.w	r2, r2, r3, asr #8
 801e726:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 801e72a:	1212      	asrs	r2, r2, #8
 801e72c:	b293      	uxth	r3, r2
 801e72e:	43d2      	mvns	r2, r2
 801e730:	fb15 f503 	smulbb	r5, r5, r3
 801e734:	b2d2      	uxtb	r2, r2
 801e736:	fb17 f703 	smulbb	r7, r7, r3
 801e73a:	fb06 5602 	mla	r6, r6, r2, r5
 801e73e:	ea4f 05ec 	mov.w	r5, ip, asr #3
 801e742:	fb14 f403 	smulbb	r4, r4, r3
 801e746:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 801e74a:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 801e74e:	b2b6      	uxth	r6, r6
 801e750:	fa5f fc8c 	uxtb.w	ip, ip
 801e754:	fb05 7702 	mla	r7, r5, r2, r7
 801e758:	1c73      	adds	r3, r6, #1
 801e75a:	fb0c 4202 	mla	r2, ip, r2, r4
 801e75e:	b2bf      	uxth	r7, r7
 801e760:	b292      	uxth	r2, r2
 801e762:	1c7d      	adds	r5, r7, #1
 801e764:	eb03 2616 	add.w	r6, r3, r6, lsr #8
 801e768:	f102 0c01 	add.w	ip, r2, #1
 801e76c:	eb05 2717 	add.w	r7, r5, r7, lsr #8
 801e770:	f406 4678 	and.w	r6, r6, #63488	; 0xf800
 801e774:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 801e778:	097f      	lsrs	r7, r7, #5
 801e77a:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 801e77e:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 801e782:	4316      	orrs	r6, r2
 801e784:	433e      	orrs	r6, r7
 801e786:	8006      	strh	r6, [r0, #0]
 801e788:	e7be      	b.n	801e708 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x10c>
 801e78a:	f8ba 3000 	ldrh.w	r3, [sl]
 801e78e:	f9bd 401c 	ldrsh.w	r4, [sp, #28]
 801e792:	eba3 0308 	sub.w	r3, r3, r8
 801e796:	eba4 0408 	sub.w	r4, r4, r8
 801e79a:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801e79e:	eb01 0484 	add.w	r4, r1, r4, lsl #2
 801e7a2:	e792      	b.n	801e6ca <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xce>
 801e7a4:	4b02      	ldr	r3, [pc, #8]	; (801e7b0 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1b4>)
 801e7a6:	6818      	ldr	r0, [r3, #0]
 801e7a8:	6803      	ldr	r3, [r0, #0]
 801e7aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801e7ac:	4798      	blx	r3
 801e7ae:	e770      	b.n	801e692 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x96>
 801e7b0:	2000580c 	.word	0x2000580c
 801e7b4:	20005806 	.word	0x20005806

0801e7b8 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb>:
 801e7b8:	b570      	push	{r4, r5, r6, lr}
 801e7ba:	9d04      	ldr	r5, [sp, #16]
 801e7bc:	460c      	mov	r4, r1
 801e7be:	f89d 6018 	ldrb.w	r6, [sp, #24]
 801e7c2:	4619      	mov	r1, r3
 801e7c4:	f89d 3014 	ldrb.w	r3, [sp, #20]
 801e7c8:	2a0d      	cmp	r2, #13
 801e7ca:	d820      	bhi.n	801e80e <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x56>
 801e7cc:	e8df f002 	tbb	[pc, r2]
 801e7d0:	18121807 	.word	0x18121807
 801e7d4:	18181818 	.word	0x18181818
 801e7d8:	18181818 	.word	0x18181818
 801e7dc:	1818      	.short	0x1818
 801e7de:	6802      	ldr	r2, [r0, #0]
 801e7e0:	e9cd 3604 	strd	r3, r6, [sp, #16]
 801e7e4:	68d6      	ldr	r6, [r2, #12]
 801e7e6:	462b      	mov	r3, r5
 801e7e8:	460a      	mov	r2, r1
 801e7ea:	4621      	mov	r1, r4
 801e7ec:	46b4      	mov	ip, r6
 801e7ee:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801e7f2:	4760      	bx	ip
 801e7f4:	462a      	mov	r2, r5
 801e7f6:	4620      	mov	r0, r4
 801e7f8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801e7fc:	f7ff befe 	b.w	801e5fc <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 801e800:	4b03      	ldr	r3, [pc, #12]	; (801e810 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x58>)
 801e802:	f240 21c1 	movw	r1, #705	; 0x2c1
 801e806:	4a03      	ldr	r2, [pc, #12]	; (801e814 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x5c>)
 801e808:	4803      	ldr	r0, [pc, #12]	; (801e818 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x60>)
 801e80a:	f008 fc8d 	bl	8027128 <__assert_func>
 801e80e:	bd70      	pop	{r4, r5, r6, pc}
 801e810:	0802b953 	.word	0x0802b953
 801e814:	0802c0a9 	.word	0x0802c0a9
 801e818:	0802b9b7 	.word	0x0802b9b7

0801e81c <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>:
 801e81c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e820:	b093      	sub	sp, #76	; 0x4c
 801e822:	880f      	ldrh	r7, [r1, #0]
 801e824:	4604      	mov	r4, r0
 801e826:	4688      	mov	r8, r1
 801e828:	4616      	mov	r6, r2
 801e82a:	f89d a070 	ldrb.w	sl, [sp, #112]	; 0x70
 801e82e:	b12f      	cbz	r7, 801e83c <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x20>
 801e830:	4b6f      	ldr	r3, [pc, #444]	; (801e9f0 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1d4>)
 801e832:	21e2      	movs	r1, #226	; 0xe2
 801e834:	4a6f      	ldr	r2, [pc, #444]	; (801e9f4 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1d8>)
 801e836:	4870      	ldr	r0, [pc, #448]	; (801e9f8 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1dc>)
 801e838:	f008 fc76 	bl	8027128 <__assert_func>
 801e83c:	6810      	ldr	r0, [r2, #0]
 801e83e:	ad0e      	add	r5, sp, #56	; 0x38
 801e840:	6851      	ldr	r1, [r2, #4]
 801e842:	f8df b1bc 	ldr.w	fp, [pc, #444]	; 801ea00 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1e4>
 801e846:	c503      	stmia	r5!, {r0, r1}
 801e848:	6818      	ldr	r0, [r3, #0]
 801e84a:	ad10      	add	r5, sp, #64	; 0x40
 801e84c:	6859      	ldr	r1, [r3, #4]
 801e84e:	c503      	stmia	r5!, {r0, r1}
 801e850:	a80e      	add	r0, sp, #56	; 0x38
 801e852:	f7f9 fffb 	bl	801884c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801e856:	4631      	mov	r1, r6
 801e858:	a810      	add	r0, sp, #64	; 0x40
 801e85a:	4e68      	ldr	r6, [pc, #416]	; (801e9fc <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1e0>)
 801e85c:	f7f9 ffde 	bl	801881c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801e860:	f9bd 2040 	ldrsh.w	r2, [sp, #64]	; 0x40
 801e864:	f9bd 3042 	ldrsh.w	r3, [sp, #66]	; 0x42
 801e868:	f8bd 103c 	ldrh.w	r1, [sp, #60]	; 0x3c
 801e86c:	f8db 0000 	ldr.w	r0, [fp]
 801e870:	fb11 2103 	smlabb	r1, r1, r3, r2
 801e874:	f9bd 9044 	ldrsh.w	r9, [sp, #68]	; 0x44
 801e878:	f9bd 5046 	ldrsh.w	r5, [sp, #70]	; 0x46
 801e87c:	440c      	add	r4, r1
 801e87e:	f8bd 1038 	ldrh.w	r1, [sp, #56]	; 0x38
 801e882:	440a      	add	r2, r1
 801e884:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 801e888:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 801e88c:	4413      	add	r3, r2
 801e88e:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 801e892:	6803      	ldr	r3, [r0, #0]
 801e894:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801e898:	4798      	blx	r3
 801e89a:	2801      	cmp	r0, #1
 801e89c:	d11d      	bne.n	801e8da <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xbe>
 801e89e:	220b      	movs	r2, #11
 801e8a0:	9708      	str	r7, [sp, #32]
 801e8a2:	b2ad      	uxth	r5, r5
 801e8a4:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 801e8a8:	9207      	str	r2, [sp, #28]
 801e8aa:	4621      	mov	r1, r4
 801e8ac:	8832      	ldrh	r2, [r6, #0]
 801e8ae:	f8cd a010 	str.w	sl, [sp, #16]
 801e8b2:	9502      	str	r5, [sp, #8]
 801e8b4:	e9cd 0205 	strd	r0, r2, [sp, #20]
 801e8b8:	f8bd 203c 	ldrh.w	r2, [sp, #60]	; 0x3c
 801e8bc:	9203      	str	r2, [sp, #12]
 801e8be:	fa1f f289 	uxth.w	r2, r9
 801e8c2:	9201      	str	r2, [sp, #4]
 801e8c4:	f8bd 2042 	ldrh.w	r2, [sp, #66]	; 0x42
 801e8c8:	9200      	str	r2, [sp, #0]
 801e8ca:	4642      	mov	r2, r8
 801e8cc:	f8db 0000 	ldr.w	r0, [fp]
 801e8d0:	f7f7 fd18 	bl	8016304 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>
 801e8d4:	b013      	add	sp, #76	; 0x4c
 801e8d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e8da:	f8db 0000 	ldr.w	r0, [fp]
 801e8de:	6803      	ldr	r3, [r0, #0]
 801e8e0:	6a1b      	ldr	r3, [r3, #32]
 801e8e2:	4798      	blx	r3
 801e8e4:	8832      	ldrh	r2, [r6, #0]
 801e8e6:	f9bd 3042 	ldrsh.w	r3, [sp, #66]	; 0x42
 801e8ea:	f04f 0e04 	mov.w	lr, #4
 801e8ee:	f9bd 1040 	ldrsh.w	r1, [sp, #64]	; 0x40
 801e8f2:	4355      	muls	r5, r2
 801e8f4:	960d      	str	r6, [sp, #52]	; 0x34
 801e8f6:	fb02 1303 	mla	r3, r2, r3, r1
 801e8fa:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801e8fe:	eb00 0345 	add.w	r3, r0, r5, lsl #1
 801e902:	930c      	str	r3, [sp, #48]	; 0x30
 801e904:	ea4f 0349 	mov.w	r3, r9, lsl #1
 801e908:	930b      	str	r3, [sp, #44]	; 0x2c
 801e90a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801e90c:	4298      	cmp	r0, r3
 801e90e:	d269      	bcs.n	801e9e4 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1c8>
 801e910:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801e912:	4621      	mov	r1, r4
 801e914:	eb00 0b03 	add.w	fp, r0, r3
 801e918:	4558      	cmp	r0, fp
 801e91a:	460b      	mov	r3, r1
 801e91c:	d256      	bcs.n	801e9cc <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1b0>
 801e91e:	781b      	ldrb	r3, [r3, #0]
 801e920:	3101      	adds	r1, #1
 801e922:	fb1e e303 	smlabb	r3, lr, r3, lr
 801e926:	f858 2003 	ldr.w	r2, [r8, r3]
 801e92a:	0e14      	lsrs	r4, r2, #24
 801e92c:	d012      	beq.n	801e954 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x138>
 801e92e:	2cff      	cmp	r4, #255	; 0xff
 801e930:	ea4f 2612 	mov.w	r6, r2, lsr #8
 801e934:	d110      	bne.n	801e958 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x13c>
 801e936:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 801e93a:	d10d      	bne.n	801e958 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x13c>
 801e93c:	0953      	lsrs	r3, r2, #5
 801e93e:	f426 66ff 	bic.w	r6, r6, #2040	; 0x7f8
 801e942:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 801e946:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801e94a:	f026 0607 	bic.w	r6, r6, #7
 801e94e:	431e      	orrs	r6, r3
 801e950:	4332      	orrs	r2, r6
 801e952:	8002      	strh	r2, [r0, #0]
 801e954:	3002      	adds	r0, #2
 801e956:	e7df      	b.n	801e918 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xfc>
 801e958:	fb0a f404 	mul.w	r4, sl, r4
 801e95c:	8807      	ldrh	r7, [r0, #0]
 801e95e:	b2f6      	uxtb	r6, r6
 801e960:	1c63      	adds	r3, r4, #1
 801e962:	123d      	asrs	r5, r7, #8
 801e964:	eb03 2324 	add.w	r3, r3, r4, asr #8
 801e968:	f3c2 4407 	ubfx	r4, r2, #16, #8
 801e96c:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 801e970:	b2d2      	uxtb	r2, r2
 801e972:	121b      	asrs	r3, r3, #8
 801e974:	fa1f fc83 	uxth.w	ip, r3
 801e978:	43db      	mvns	r3, r3
 801e97a:	fb14 f40c 	smulbb	r4, r4, ip
 801e97e:	b2db      	uxtb	r3, r3
 801e980:	fb12 f20c 	smulbb	r2, r2, ip
 801e984:	fb05 4503 	mla	r5, r5, r3, r4
 801e988:	10fc      	asrs	r4, r7, #3
 801e98a:	fb16 f60c 	smulbb	r6, r6, ip
 801e98e:	00ff      	lsls	r7, r7, #3
 801e990:	b2ad      	uxth	r5, r5
 801e992:	f004 04fc 	and.w	r4, r4, #252	; 0xfc
 801e996:	b2ff      	uxtb	r7, r7
 801e998:	fb04 6603 	mla	r6, r4, r3, r6
 801e99c:	fb07 2203 	mla	r2, r7, r3, r2
 801e9a0:	1c6b      	adds	r3, r5, #1
 801e9a2:	b2b6      	uxth	r6, r6
 801e9a4:	b292      	uxth	r2, r2
 801e9a6:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 801e9aa:	1c54      	adds	r4, r2, #1
 801e9ac:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 801e9b0:	eb04 2412 	add.w	r4, r4, r2, lsr #8
 801e9b4:	f3c4 24c4 	ubfx	r4, r4, #11, #5
 801e9b8:	4325      	orrs	r5, r4
 801e9ba:	1c74      	adds	r4, r6, #1
 801e9bc:	eb04 2616 	add.w	r6, r4, r6, lsr #8
 801e9c0:	0976      	lsrs	r6, r6, #5
 801e9c2:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 801e9c6:	4335      	orrs	r5, r6
 801e9c8:	8005      	strh	r5, [r0, #0]
 801e9ca:	e7c3      	b.n	801e954 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x138>
 801e9cc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801e9ce:	f9bd 403c 	ldrsh.w	r4, [sp, #60]	; 0x3c
 801e9d2:	881b      	ldrh	r3, [r3, #0]
 801e9d4:	eba4 0409 	sub.w	r4, r4, r9
 801e9d8:	eba3 0309 	sub.w	r3, r3, r9
 801e9dc:	440c      	add	r4, r1
 801e9de:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801e9e2:	e792      	b.n	801e90a <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xee>
 801e9e4:	4b06      	ldr	r3, [pc, #24]	; (801ea00 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1e4>)
 801e9e6:	6818      	ldr	r0, [r3, #0]
 801e9e8:	6803      	ldr	r3, [r0, #0]
 801e9ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801e9ec:	4798      	blx	r3
 801e9ee:	e771      	b.n	801e8d4 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xb8>
 801e9f0:	0802b75e 	.word	0x0802b75e
 801e9f4:	0802be7a 	.word	0x0802be7a
 801e9f8:	0802b9b7 	.word	0x0802b9b7
 801e9fc:	20005806 	.word	0x20005806
 801ea00:	2000580c 	.word	0x2000580c

0801ea04 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h>:
 801ea04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ea08:	4614      	mov	r4, r2
 801ea0a:	880a      	ldrh	r2, [r1, #0]
 801ea0c:	b091      	sub	sp, #68	; 0x44
 801ea0e:	4607      	mov	r7, r0
 801ea10:	2a02      	cmp	r2, #2
 801ea12:	4689      	mov	r9, r1
 801ea14:	f89d 6068 	ldrb.w	r6, [sp, #104]	; 0x68
 801ea18:	d006      	beq.n	801ea28 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x24>
 801ea1a:	4b77      	ldr	r3, [pc, #476]	; (801ebf8 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x1f4>)
 801ea1c:	f240 113b 	movw	r1, #315	; 0x13b
 801ea20:	4a76      	ldr	r2, [pc, #472]	; (801ebfc <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x1f8>)
 801ea22:	4877      	ldr	r0, [pc, #476]	; (801ec00 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x1fc>)
 801ea24:	f008 fb80 	bl	8027128 <__assert_func>
 801ea28:	2e00      	cmp	r6, #0
 801ea2a:	d04b      	beq.n	801eac4 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0xc0>
 801ea2c:	6820      	ldr	r0, [r4, #0]
 801ea2e:	ad0c      	add	r5, sp, #48	; 0x30
 801ea30:	6861      	ldr	r1, [r4, #4]
 801ea32:	f8df a1d4 	ldr.w	sl, [pc, #468]	; 801ec08 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x204>
 801ea36:	c503      	stmia	r5!, {r0, r1}
 801ea38:	6818      	ldr	r0, [r3, #0]
 801ea3a:	ad0e      	add	r5, sp, #56	; 0x38
 801ea3c:	6859      	ldr	r1, [r3, #4]
 801ea3e:	c503      	stmia	r5!, {r0, r1}
 801ea40:	a80c      	add	r0, sp, #48	; 0x30
 801ea42:	f7f9 ff03 	bl	801884c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801ea46:	4621      	mov	r1, r4
 801ea48:	a80e      	add	r0, sp, #56	; 0x38
 801ea4a:	f7f9 fee7 	bl	801881c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801ea4e:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	; 0x38
 801ea52:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 801ea56:	f8bd 1034 	ldrh.w	r1, [sp, #52]	; 0x34
 801ea5a:	f8da 0000 	ldr.w	r0, [sl]
 801ea5e:	fb11 2103 	smlabb	r1, r1, r3, r2
 801ea62:	f9bd 803c 	ldrsh.w	r8, [sp, #60]	; 0x3c
 801ea66:	f9bd 503e 	ldrsh.w	r5, [sp, #62]	; 0x3e
 801ea6a:	187c      	adds	r4, r7, r1
 801ea6c:	f8bd 1030 	ldrh.w	r1, [sp, #48]	; 0x30
 801ea70:	4f64      	ldr	r7, [pc, #400]	; (801ec04 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x200>)
 801ea72:	440a      	add	r2, r1
 801ea74:	f8ad 2038 	strh.w	r2, [sp, #56]	; 0x38
 801ea78:	f8bd 2032 	ldrh.w	r2, [sp, #50]	; 0x32
 801ea7c:	4413      	add	r3, r2
 801ea7e:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 801ea82:	6803      	ldr	r3, [r0, #0]
 801ea84:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801ea88:	4798      	blx	r3
 801ea8a:	2801      	cmp	r0, #1
 801ea8c:	d11d      	bne.n	801eaca <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0xc6>
 801ea8e:	2200      	movs	r2, #0
 801ea90:	210b      	movs	r1, #11
 801ea92:	b2ad      	uxth	r5, r5
 801ea94:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 801ea98:	e9cd 1207 	strd	r1, r2, [sp, #28]
 801ea9c:	8839      	ldrh	r1, [r7, #0]
 801ea9e:	9604      	str	r6, [sp, #16]
 801eaa0:	9502      	str	r5, [sp, #8]
 801eaa2:	e9cd 2105 	strd	r2, r1, [sp, #20]
 801eaa6:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 801eaaa:	4621      	mov	r1, r4
 801eaac:	9203      	str	r2, [sp, #12]
 801eaae:	fa1f f288 	uxth.w	r2, r8
 801eab2:	9201      	str	r2, [sp, #4]
 801eab4:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 801eab8:	9200      	str	r2, [sp, #0]
 801eaba:	464a      	mov	r2, r9
 801eabc:	f8da 0000 	ldr.w	r0, [sl]
 801eac0:	f7f7 fc20 	bl	8016304 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>
 801eac4:	b011      	add	sp, #68	; 0x44
 801eac6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801eaca:	f8da 0000 	ldr.w	r0, [sl]
 801eace:	ea4f 0b48 	mov.w	fp, r8, lsl #1
 801ead2:	6803      	ldr	r3, [r0, #0]
 801ead4:	6a1b      	ldr	r3, [r3, #32]
 801ead6:	4798      	blx	r3
 801ead8:	8839      	ldrh	r1, [r7, #0]
 801eada:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	; 0x38
 801eade:	2eff      	cmp	r6, #255	; 0xff
 801eae0:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 801eae4:	fb05 f501 	mul.w	r5, r5, r1
 801eae8:	fb01 2303 	mla	r3, r1, r3, r2
 801eaec:	f109 0204 	add.w	r2, r9, #4
 801eaf0:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801eaf4:	d05f      	beq.n	801ebb6 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x1b2>
 801eaf6:	f1c6 09ff 	rsb	r9, r6, #255	; 0xff
 801eafa:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 801eafe:	b2b6      	uxth	r6, r6
 801eb00:	970b      	str	r7, [sp, #44]	; 0x2c
 801eb02:	fa1f f989 	uxth.w	r9, r9
 801eb06:	42a8      	cmp	r0, r5
 801eb08:	d26f      	bcs.n	801ebea <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x1e6>
 801eb0a:	eb00 010b 	add.w	r1, r0, fp
 801eb0e:	4288      	cmp	r0, r1
 801eb10:	4623      	mov	r3, r4
 801eb12:	d244      	bcs.n	801eb9e <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x19a>
 801eb14:	8807      	ldrh	r7, [r0, #0]
 801eb16:	3401      	adds	r4, #1
 801eb18:	781b      	ldrb	r3, [r3, #0]
 801eb1a:	ea4f 2c27 	mov.w	ip, r7, asr #8
 801eb1e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801eb22:	ea4f 0ae7 	mov.w	sl, r7, asr #3
 801eb26:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801eb2a:	00ff      	lsls	r7, r7, #3
 801eb2c:	ea4f 2e23 	mov.w	lr, r3, asr #8
 801eb30:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
 801eb34:	fb1c fc09 	smulbb	ip, ip, r9
 801eb38:	b2ff      	uxtb	r7, r7
 801eb3a:	fb1a fa09 	smulbb	sl, sl, r9
 801eb3e:	f00e 0ef8 	and.w	lr, lr, #248	; 0xf8
 801eb42:	fb17 f709 	smulbb	r7, r7, r9
 801eb46:	fb0e ce06 	mla	lr, lr, r6, ip
 801eb4a:	ea4f 0ce3 	mov.w	ip, r3, asr #3
 801eb4e:	00db      	lsls	r3, r3, #3
 801eb50:	fa1f fe8e 	uxth.w	lr, lr
 801eb54:	f00c 0cfc 	and.w	ip, ip, #252	; 0xfc
 801eb58:	b2db      	uxtb	r3, r3
 801eb5a:	fb0c ac06 	mla	ip, ip, r6, sl
 801eb5e:	f10e 0a01 	add.w	sl, lr, #1
 801eb62:	fb03 7306 	mla	r3, r3, r6, r7
 801eb66:	eb0a 2e1e 	add.w	lr, sl, lr, lsr #8
 801eb6a:	b29b      	uxth	r3, r3
 801eb6c:	f40e 4a78 	and.w	sl, lr, #63488	; 0xf800
 801eb70:	fa1f fc8c 	uxth.w	ip, ip
 801eb74:	f103 0e01 	add.w	lr, r3, #1
 801eb78:	eb0e 2313 	add.w	r3, lr, r3, lsr #8
 801eb7c:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 801eb80:	ea4a 0e03 	orr.w	lr, sl, r3
 801eb84:	f10c 0a01 	add.w	sl, ip, #1
 801eb88:	eb0a 2c1c 	add.w	ip, sl, ip, lsr #8
 801eb8c:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 801eb90:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 801eb94:	ea4e 0e0c 	orr.w	lr, lr, ip
 801eb98:	f820 eb02 	strh.w	lr, [r0], #2
 801eb9c:	e7b7      	b.n	801eb0e <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x10a>
 801eb9e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801eba0:	f9bd 1034 	ldrsh.w	r1, [sp, #52]	; 0x34
 801eba4:	881b      	ldrh	r3, [r3, #0]
 801eba6:	eba1 0108 	sub.w	r1, r1, r8
 801ebaa:	eba3 0308 	sub.w	r3, r3, r8
 801ebae:	440c      	add	r4, r1
 801ebb0:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801ebb4:	e7a7      	b.n	801eb06 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x102>
 801ebb6:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 801ebba:	42a8      	cmp	r0, r5
 801ebbc:	d215      	bcs.n	801ebea <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x1e6>
 801ebbe:	eb00 010b 	add.w	r1, r0, fp
 801ebc2:	4288      	cmp	r0, r1
 801ebc4:	d206      	bcs.n	801ebd4 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x1d0>
 801ebc6:	f814 3b01 	ldrb.w	r3, [r4], #1
 801ebca:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801ebce:	f820 3b02 	strh.w	r3, [r0], #2
 801ebd2:	e7f6      	b.n	801ebc2 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x1be>
 801ebd4:	883b      	ldrh	r3, [r7, #0]
 801ebd6:	eba3 0308 	sub.w	r3, r3, r8
 801ebda:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801ebde:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	; 0x34
 801ebe2:	eba3 0308 	sub.w	r3, r3, r8
 801ebe6:	441c      	add	r4, r3
 801ebe8:	e7e7      	b.n	801ebba <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x1b6>
 801ebea:	4b07      	ldr	r3, [pc, #28]	; (801ec08 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x204>)
 801ebec:	6818      	ldr	r0, [r3, #0]
 801ebee:	6803      	ldr	r3, [r0, #0]
 801ebf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801ebf2:	4798      	blx	r3
 801ebf4:	e766      	b.n	801eac4 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0xc0>
 801ebf6:	bf00      	nop
 801ebf8:	0802b61c 	.word	0x0802b61c
 801ebfc:	0802bce4 	.word	0x0802bce4
 801ec00:	0802b9b7 	.word	0x0802b9b7
 801ec04:	20005806 	.word	0x20005806
 801ec08:	2000580c 	.word	0x2000580c

0801ec0c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>:
 801ec0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ec10:	4614      	mov	r4, r2
 801ec12:	880a      	ldrh	r2, [r1, #0]
 801ec14:	b091      	sub	sp, #68	; 0x44
 801ec16:	4606      	mov	r6, r0
 801ec18:	2a01      	cmp	r2, #1
 801ec1a:	4688      	mov	r8, r1
 801ec1c:	f89d 7068 	ldrb.w	r7, [sp, #104]	; 0x68
 801ec20:	d006      	beq.n	801ec30 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x24>
 801ec22:	4b7c      	ldr	r3, [pc, #496]	; (801ee14 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x208>)
 801ec24:	f240 1197 	movw	r1, #407	; 0x197
 801ec28:	4a7b      	ldr	r2, [pc, #492]	; (801ee18 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x20c>)
 801ec2a:	487c      	ldr	r0, [pc, #496]	; (801ee1c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x210>)
 801ec2c:	f008 fa7c 	bl	8027128 <__assert_func>
 801ec30:	2f00      	cmp	r7, #0
 801ec32:	d04b      	beq.n	801eccc <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xc0>
 801ec34:	6820      	ldr	r0, [r4, #0]
 801ec36:	ad0c      	add	r5, sp, #48	; 0x30
 801ec38:	6861      	ldr	r1, [r4, #4]
 801ec3a:	f8df a1ec 	ldr.w	sl, [pc, #492]	; 801ee28 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x21c>
 801ec3e:	c503      	stmia	r5!, {r0, r1}
 801ec40:	6818      	ldr	r0, [r3, #0]
 801ec42:	ad0e      	add	r5, sp, #56	; 0x38
 801ec44:	6859      	ldr	r1, [r3, #4]
 801ec46:	c503      	stmia	r5!, {r0, r1}
 801ec48:	a80c      	add	r0, sp, #48	; 0x30
 801ec4a:	f7f9 fdff 	bl	801884c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801ec4e:	4621      	mov	r1, r4
 801ec50:	a80e      	add	r0, sp, #56	; 0x38
 801ec52:	f7f9 fde3 	bl	801881c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801ec56:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	; 0x38
 801ec5a:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 801ec5e:	f8bd 1034 	ldrh.w	r1, [sp, #52]	; 0x34
 801ec62:	f8da 0000 	ldr.w	r0, [sl]
 801ec66:	fb11 2103 	smlabb	r1, r1, r3, r2
 801ec6a:	f9bd 503c 	ldrsh.w	r5, [sp, #60]	; 0x3c
 801ec6e:	f9bd 903e 	ldrsh.w	r9, [sp, #62]	; 0x3e
 801ec72:	1874      	adds	r4, r6, r1
 801ec74:	f8bd 1030 	ldrh.w	r1, [sp, #48]	; 0x30
 801ec78:	4e69      	ldr	r6, [pc, #420]	; (801ee20 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x214>)
 801ec7a:	440a      	add	r2, r1
 801ec7c:	f8ad 2038 	strh.w	r2, [sp, #56]	; 0x38
 801ec80:	f8bd 2032 	ldrh.w	r2, [sp, #50]	; 0x32
 801ec84:	4413      	add	r3, r2
 801ec86:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 801ec8a:	6803      	ldr	r3, [r0, #0]
 801ec8c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801ec90:	4798      	blx	r3
 801ec92:	2801      	cmp	r0, #1
 801ec94:	d11d      	bne.n	801ecd2 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xc6>
 801ec96:	220b      	movs	r2, #11
 801ec98:	2100      	movs	r1, #0
 801ec9a:	b2ad      	uxth	r5, r5
 801ec9c:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 801eca0:	e9cd 2107 	strd	r2, r1, [sp, #28]
 801eca4:	8832      	ldrh	r2, [r6, #0]
 801eca6:	4621      	mov	r1, r4
 801eca8:	9704      	str	r7, [sp, #16]
 801ecaa:	9501      	str	r5, [sp, #4]
 801ecac:	e9cd 0205 	strd	r0, r2, [sp, #20]
 801ecb0:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 801ecb4:	9203      	str	r2, [sp, #12]
 801ecb6:	fa1f f289 	uxth.w	r2, r9
 801ecba:	9202      	str	r2, [sp, #8]
 801ecbc:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 801ecc0:	9200      	str	r2, [sp, #0]
 801ecc2:	4642      	mov	r2, r8
 801ecc4:	f8da 0000 	ldr.w	r0, [sl]
 801ecc8:	f7f7 fb1c 	bl	8016304 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>
 801eccc:	b011      	add	sp, #68	; 0x44
 801ecce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ecd2:	f8da 0000 	ldr.w	r0, [sl]
 801ecd6:	6803      	ldr	r3, [r0, #0]
 801ecd8:	6a1b      	ldr	r3, [r3, #32]
 801ecda:	4798      	blx	r3
 801ecdc:	8832      	ldrh	r2, [r6, #0]
 801ecde:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 801ece2:	2fff      	cmp	r7, #255	; 0xff
 801ece4:	f9bd 1038 	ldrsh.w	r1, [sp, #56]	; 0x38
 801ece8:	ea4f 0e45 	mov.w	lr, r5, lsl #1
 801ecec:	fb09 f902 	mul.w	r9, r9, r2
 801ecf0:	fb02 1303 	mla	r3, r2, r3, r1
 801ecf4:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801ecf8:	d056      	beq.n	801eda8 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x19c>
 801ecfa:	ea6f 0c07 	mvn.w	ip, r7
 801ecfe:	eb00 0949 	add.w	r9, r0, r9, lsl #1
 801ed02:	b2bb      	uxth	r3, r7
 801ed04:	960b      	str	r6, [sp, #44]	; 0x2c
 801ed06:	fa5f fc8c 	uxtb.w	ip, ip
 801ed0a:	4548      	cmp	r0, r9
 801ed0c:	d27b      	bcs.n	801ee06 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1fa>
 801ed0e:	eb00 0a0e 	add.w	sl, r0, lr
 801ed12:	4550      	cmp	r0, sl
 801ed14:	4622      	mov	r2, r4
 801ed16:	d23d      	bcs.n	801ed94 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x188>
 801ed18:	7811      	ldrb	r1, [r2, #0]
 801ed1a:	2604      	movs	r6, #4
 801ed1c:	2203      	movs	r2, #3
 801ed1e:	3401      	adds	r4, #1
 801ed20:	fb12 6101 	smlabb	r1, r2, r1, r6
 801ed24:	8802      	ldrh	r2, [r0, #0]
 801ed26:	eb08 0b01 	add.w	fp, r8, r1
 801ed2a:	1217      	asrs	r7, r2, #8
 801ed2c:	f818 1001 	ldrb.w	r1, [r8, r1]
 801ed30:	f89b 6002 	ldrb.w	r6, [fp, #2]
 801ed34:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801ed38:	f89b b001 	ldrb.w	fp, [fp, #1]
 801ed3c:	fb16 f603 	smulbb	r6, r6, r3
 801ed40:	fb1b fb03 	smulbb	fp, fp, r3
 801ed44:	fb07 670c 	mla	r7, r7, ip, r6
 801ed48:	10d6      	asrs	r6, r2, #3
 801ed4a:	00d2      	lsls	r2, r2, #3
 801ed4c:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801ed50:	b2bf      	uxth	r7, r7
 801ed52:	b2d2      	uxtb	r2, r2
 801ed54:	fb06 b60c 	mla	r6, r6, ip, fp
 801ed58:	fb12 f20c 	smulbb	r2, r2, ip
 801ed5c:	b2b6      	uxth	r6, r6
 801ed5e:	fb01 2103 	mla	r1, r1, r3, r2
 801ed62:	1c7a      	adds	r2, r7, #1
 801ed64:	f106 0b01 	add.w	fp, r6, #1
 801ed68:	b289      	uxth	r1, r1
 801ed6a:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 801ed6e:	1c4a      	adds	r2, r1, #1
 801ed70:	eb0b 2b16 	add.w	fp, fp, r6, lsr #8
 801ed74:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 801ed78:	eb02 2211 	add.w	r2, r2, r1, lsr #8
 801ed7c:	ea4f 1b5b 	mov.w	fp, fp, lsr #5
 801ed80:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 801ed84:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 801ed88:	4317      	orrs	r7, r2
 801ed8a:	ea47 070b 	orr.w	r7, r7, fp
 801ed8e:	f820 7b02 	strh.w	r7, [r0], #2
 801ed92:	e7be      	b.n	801ed12 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x106>
 801ed94:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801ed96:	f9bd 1034 	ldrsh.w	r1, [sp, #52]	; 0x34
 801ed9a:	8812      	ldrh	r2, [r2, #0]
 801ed9c:	1b49      	subs	r1, r1, r5
 801ed9e:	1b52      	subs	r2, r2, r5
 801eda0:	440c      	add	r4, r1
 801eda2:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 801eda6:	e7b0      	b.n	801ed0a <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xfe>
 801eda8:	eb00 0949 	add.w	r9, r0, r9, lsl #1
 801edac:	2203      	movs	r2, #3
 801edae:	2704      	movs	r7, #4
 801edb0:	491c      	ldr	r1, [pc, #112]	; (801ee24 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x218>)
 801edb2:	4548      	cmp	r0, r9
 801edb4:	d227      	bcs.n	801ee06 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1fa>
 801edb6:	eb00 0c0e 	add.w	ip, r0, lr
 801edba:	4560      	cmp	r0, ip
 801edbc:	4623      	mov	r3, r4
 801edbe:	d219      	bcs.n	801edf4 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1e8>
 801edc0:	f893 a000 	ldrb.w	sl, [r3]
 801edc4:	3401      	adds	r4, #1
 801edc6:	fb12 7a0a 	smlabb	sl, r2, sl, r7
 801edca:	eb08 0b0a 	add.w	fp, r8, sl
 801edce:	f818 a00a 	ldrb.w	sl, [r8, sl]
 801edd2:	f89b 3002 	ldrb.w	r3, [fp, #2]
 801edd6:	f89b b001 	ldrb.w	fp, [fp, #1]
 801edda:	ea01 2303 	and.w	r3, r1, r3, lsl #8
 801edde:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 801ede2:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 801ede6:	ea43 030b 	orr.w	r3, r3, fp
 801edea:	ea43 03da 	orr.w	r3, r3, sl, lsr #3
 801edee:	f820 3b02 	strh.w	r3, [r0], #2
 801edf2:	e7e2      	b.n	801edba <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1ae>
 801edf4:	8833      	ldrh	r3, [r6, #0]
 801edf6:	1b5b      	subs	r3, r3, r5
 801edf8:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801edfc:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	; 0x34
 801ee00:	1b5b      	subs	r3, r3, r5
 801ee02:	441c      	add	r4, r3
 801ee04:	e7d5      	b.n	801edb2 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1a6>
 801ee06:	4b08      	ldr	r3, [pc, #32]	; (801ee28 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x21c>)
 801ee08:	6818      	ldr	r0, [r3, #0]
 801ee0a:	6803      	ldr	r3, [r0, #0]
 801ee0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801ee0e:	4798      	blx	r3
 801ee10:	e75c      	b.n	801eccc <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xc0>
 801ee12:	bf00      	nop
 801ee14:	0802b66a 	.word	0x0802b66a
 801ee18:	0802bd6d 	.word	0x0802bd6d
 801ee1c:	0802b9b7 	.word	0x0802b9b7
 801ee20:	20005806 	.word	0x20005806
 801ee24:	fffff800 	.word	0xfffff800
 801ee28:	2000580c 	.word	0x2000580c

0801ee2c <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>:
 801ee2c:	b430      	push	{r4, r5}
 801ee2e:	780d      	ldrb	r5, [r1, #0]
 801ee30:	f89d 4008 	ldrb.w	r4, [sp, #8]
 801ee34:	2d01      	cmp	r5, #1
 801ee36:	d00a      	beq.n	801ee4e <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x22>
 801ee38:	d305      	bcc.n	801ee46 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x1a>
 801ee3a:	2d02      	cmp	r5, #2
 801ee3c:	d10b      	bne.n	801ee56 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x2a>
 801ee3e:	9402      	str	r4, [sp, #8]
 801ee40:	bc30      	pop	{r4, r5}
 801ee42:	f7ff bddf 	b.w	801ea04 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h>
 801ee46:	9402      	str	r4, [sp, #8]
 801ee48:	bc30      	pop	{r4, r5}
 801ee4a:	f7ff bce7 	b.w	801e81c <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>
 801ee4e:	9402      	str	r4, [sp, #8]
 801ee50:	bc30      	pop	{r4, r5}
 801ee52:	f7ff bedb 	b.w	801ec0c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>
 801ee56:	bc30      	pop	{r4, r5}
 801ee58:	4770      	bx	lr
	...

0801ee5c <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>:
 801ee5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ee60:	b087      	sub	sp, #28
 801ee62:	4604      	mov	r4, r0
 801ee64:	460e      	mov	r6, r1
 801ee66:	6810      	ldr	r0, [r2, #0]
 801ee68:	6851      	ldr	r1, [r2, #4]
 801ee6a:	ad02      	add	r5, sp, #8
 801ee6c:	4617      	mov	r7, r2
 801ee6e:	f89d a040 	ldrb.w	sl, [sp, #64]	; 0x40
 801ee72:	f8df 9230 	ldr.w	r9, [pc, #560]	; 801f0a4 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x248>
 801ee76:	c503      	stmia	r5!, {r0, r1}
 801ee78:	6818      	ldr	r0, [r3, #0]
 801ee7a:	ad04      	add	r5, sp, #16
 801ee7c:	6859      	ldr	r1, [r3, #4]
 801ee7e:	c503      	stmia	r5!, {r0, r1}
 801ee80:	a802      	add	r0, sp, #8
 801ee82:	f7f9 fce3 	bl	801884c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801ee86:	4639      	mov	r1, r7
 801ee88:	a804      	add	r0, sp, #16
 801ee8a:	f7f9 fcc7 	bl	801881c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801ee8e:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 801ee92:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 801ee96:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 801ee9a:	f9bd 8014 	ldrsh.w	r8, [sp, #20]
 801ee9e:	fb11 2103 	smlabb	r1, r1, r3, r2
 801eea2:	f9bd 5016 	ldrsh.w	r5, [sp, #22]
 801eea6:	eb04 0441 	add.w	r4, r4, r1, lsl #1
 801eeaa:	440e      	add	r6, r1
 801eeac:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 801eeb0:	440a      	add	r2, r1
 801eeb2:	f8ad 2010 	strh.w	r2, [sp, #16]
 801eeb6:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 801eeba:	4413      	add	r3, r2
 801eebc:	f8ad 3012 	strh.w	r3, [sp, #18]
 801eec0:	4b77      	ldr	r3, [pc, #476]	; (801f0a0 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x244>)
 801eec2:	6818      	ldr	r0, [r3, #0]
 801eec4:	6803      	ldr	r3, [r0, #0]
 801eec6:	6a1b      	ldr	r3, [r3, #32]
 801eec8:	4798      	blx	r3
 801eeca:	f8b9 b000 	ldrh.w	fp, [r9]
 801eece:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 801eed2:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 801eed6:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 801eeda:	fb05 f50b 	mul.w	r5, r5, fp
 801eede:	fb0b 2303 	mla	r3, fp, r3, r2
 801eee2:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801eee6:	ea4f 0348 	mov.w	r3, r8, lsl #1
 801eeea:	9300      	str	r3, [sp, #0]
 801eeec:	d068      	beq.n	801efc0 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x164>
 801eeee:	eb00 0b45 	add.w	fp, r0, r5, lsl #1
 801eef2:	4558      	cmp	r0, fp
 801eef4:	f080 80cc 	bcs.w	801f090 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x234>
 801eef8:	9b00      	ldr	r3, [sp, #0]
 801eefa:	4631      	mov	r1, r6
 801eefc:	18c3      	adds	r3, r0, r3
 801eefe:	9301      	str	r3, [sp, #4]
 801ef00:	9b01      	ldr	r3, [sp, #4]
 801ef02:	4298      	cmp	r0, r3
 801ef04:	d24e      	bcs.n	801efa4 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x148>
 801ef06:	f811 2b01 	ldrb.w	r2, [r1], #1
 801ef0a:	2a00      	cmp	r2, #0
 801ef0c:	d047      	beq.n	801ef9e <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x142>
 801ef0e:	fb0a f202 	mul.w	r2, sl, r2
 801ef12:	1c53      	adds	r3, r2, #1
 801ef14:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 801ef18:	121b      	asrs	r3, r3, #8
 801ef1a:	d040      	beq.n	801ef9e <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x142>
 801ef1c:	8802      	ldrh	r2, [r0, #0]
 801ef1e:	b29e      	uxth	r6, r3
 801ef20:	f8b4 c000 	ldrh.w	ip, [r4]
 801ef24:	43db      	mvns	r3, r3
 801ef26:	1215      	asrs	r5, r2, #8
 801ef28:	b2db      	uxtb	r3, r3
 801ef2a:	ea4f 272c 	mov.w	r7, ip, asr #8
 801ef2e:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 801ef32:	ea4f 0ee2 	mov.w	lr, r2, asr #3
 801ef36:	fb15 f503 	smulbb	r5, r5, r3
 801ef3a:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801ef3e:	00d2      	lsls	r2, r2, #3
 801ef40:	f00e 0efc 	and.w	lr, lr, #252	; 0xfc
 801ef44:	fb07 5706 	mla	r7, r7, r6, r5
 801ef48:	ea4f 05ec 	mov.w	r5, ip, asr #3
 801ef4c:	b2d2      	uxtb	r2, r2
 801ef4e:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 801ef52:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 801ef56:	fb1e fe03 	smulbb	lr, lr, r3
 801ef5a:	b2bf      	uxth	r7, r7
 801ef5c:	fb12 f203 	smulbb	r2, r2, r3
 801ef60:	fa5f fc8c 	uxtb.w	ip, ip
 801ef64:	fb05 e506 	mla	r5, r5, r6, lr
 801ef68:	1c7b      	adds	r3, r7, #1
 801ef6a:	fb0c 2c06 	mla	ip, ip, r6, r2
 801ef6e:	b2ad      	uxth	r5, r5
 801ef70:	fa1f fc8c 	uxth.w	ip, ip
 801ef74:	f105 0e01 	add.w	lr, r5, #1
 801ef78:	eb03 2717 	add.w	r7, r3, r7, lsr #8
 801ef7c:	f10c 0601 	add.w	r6, ip, #1
 801ef80:	eb0e 2515 	add.w	r5, lr, r5, lsr #8
 801ef84:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 801ef88:	eb06 2c1c 	add.w	ip, r6, ip, lsr #8
 801ef8c:	096d      	lsrs	r5, r5, #5
 801ef8e:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 801ef92:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 801ef96:	ea47 070c 	orr.w	r7, r7, ip
 801ef9a:	432f      	orrs	r7, r5
 801ef9c:	8007      	strh	r7, [r0, #0]
 801ef9e:	3002      	adds	r0, #2
 801efa0:	3402      	adds	r4, #2
 801efa2:	e7ad      	b.n	801ef00 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0xa4>
 801efa4:	f8b9 3000 	ldrh.w	r3, [r9]
 801efa8:	f9bd 600c 	ldrsh.w	r6, [sp, #12]
 801efac:	eba3 0308 	sub.w	r3, r3, r8
 801efb0:	eba6 0608 	sub.w	r6, r6, r8
 801efb4:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801efb8:	eb04 0446 	add.w	r4, r4, r6, lsl #1
 801efbc:	440e      	add	r6, r1
 801efbe:	e798      	b.n	801eef2 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x96>
 801efc0:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 801efc4:	42a8      	cmp	r0, r5
 801efc6:	d263      	bcs.n	801f090 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x234>
 801efc8:	9b00      	ldr	r3, [sp, #0]
 801efca:	4631      	mov	r1, r6
 801efcc:	eb00 0b03 	add.w	fp, r0, r3
 801efd0:	4558      	cmp	r0, fp
 801efd2:	d24f      	bcs.n	801f074 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x218>
 801efd4:	f811 3b01 	ldrb.w	r3, [r1], #1
 801efd8:	b12b      	cbz	r3, 801efe6 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x18a>
 801efda:	2bff      	cmp	r3, #255	; 0xff
 801efdc:	f8b4 e000 	ldrh.w	lr, [r4]
 801efe0:	d104      	bne.n	801efec <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x190>
 801efe2:	f8a0 e000 	strh.w	lr, [r0]
 801efe6:	3002      	adds	r0, #2
 801efe8:	3402      	adds	r4, #2
 801efea:	e7f1      	b.n	801efd0 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x174>
 801efec:	8802      	ldrh	r2, [r0, #0]
 801efee:	b29f      	uxth	r7, r3
 801eff0:	43db      	mvns	r3, r3
 801eff2:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 801eff6:	1216      	asrs	r6, r2, #8
 801eff8:	b2db      	uxtb	r3, r3
 801effa:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801effe:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 801f002:	ea4f 0ae2 	mov.w	sl, r2, asr #3
 801f006:	00d2      	lsls	r2, r2, #3
 801f008:	fb16 f603 	smulbb	r6, r6, r3
 801f00c:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
 801f010:	b2d2      	uxtb	r2, r2
 801f012:	fb0c 6c07 	mla	ip, ip, r7, r6
 801f016:	ea4f 06ee 	mov.w	r6, lr, asr #3
 801f01a:	fb1a fa03 	smulbb	sl, sl, r3
 801f01e:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801f022:	fb12 f303 	smulbb	r3, r2, r3
 801f026:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801f02a:	fa5f fe8e 	uxtb.w	lr, lr
 801f02e:	fb06 a607 	mla	r6, r6, r7, sl
 801f032:	fa1f fc8c 	uxth.w	ip, ip
 801f036:	fb0e 3e07 	mla	lr, lr, r7, r3
 801f03a:	b2b6      	uxth	r6, r6
 801f03c:	f10c 0201 	add.w	r2, ip, #1
 801f040:	fa1f fe8e 	uxth.w	lr, lr
 801f044:	f106 0a01 	add.w	sl, r6, #1
 801f048:	eb02 2c1c 	add.w	ip, r2, ip, lsr #8
 801f04c:	f10e 0301 	add.w	r3, lr, #1
 801f050:	eb0a 2616 	add.w	r6, sl, r6, lsr #8
 801f054:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801f058:	eb03 2e1e 	add.w	lr, r3, lr, lsr #8
 801f05c:	0976      	lsrs	r6, r6, #5
 801f05e:	f3ce 2ec4 	ubfx	lr, lr, #11, #5
 801f062:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 801f066:	ea4c 0c0e 	orr.w	ip, ip, lr
 801f06a:	ea4c 0c06 	orr.w	ip, ip, r6
 801f06e:	f8a0 c000 	strh.w	ip, [r0]
 801f072:	e7b8      	b.n	801efe6 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x18a>
 801f074:	f8b9 3000 	ldrh.w	r3, [r9]
 801f078:	f9bd 600c 	ldrsh.w	r6, [sp, #12]
 801f07c:	eba3 0308 	sub.w	r3, r3, r8
 801f080:	eba6 0608 	sub.w	r6, r6, r8
 801f084:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801f088:	eb04 0446 	add.w	r4, r4, r6, lsl #1
 801f08c:	440e      	add	r6, r1
 801f08e:	e799      	b.n	801efc4 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x168>
 801f090:	4b03      	ldr	r3, [pc, #12]	; (801f0a0 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x244>)
 801f092:	6818      	ldr	r0, [r3, #0]
 801f094:	6803      	ldr	r3, [r0, #0]
 801f096:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801f098:	4798      	blx	r3
 801f09a:	b007      	add	sp, #28
 801f09c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f0a0:	2000580c 	.word	0x2000580c
 801f0a4:	20005806 	.word	0x20005806

0801f0a8 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb>:
 801f0a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f0ac:	b089      	sub	sp, #36	; 0x24
 801f0ae:	4682      	mov	sl, r0
 801f0b0:	460d      	mov	r5, r1
 801f0b2:	4691      	mov	r9, r2
 801f0b4:	f89d 604c 	ldrb.w	r6, [sp, #76]	; 0x4c
 801f0b8:	4698      	mov	r8, r3
 801f0ba:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801f0bc:	b3ae      	cbz	r6, 801f12a <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x82>
 801f0be:	4608      	mov	r0, r1
 801f0c0:	f7fc fa08 	bl	801b4d4 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801f0c4:	4607      	mov	r7, r0
 801f0c6:	4628      	mov	r0, r5
 801f0c8:	f7fc fa3e 	bl	801b548 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801f0cc:	f8ad 000e 	strh.w	r0, [sp, #14]
 801f0d0:	4628      	mov	r0, r5
 801f0d2:	f8ad 9008 	strh.w	r9, [sp, #8]
 801f0d6:	f8ad 800a 	strh.w	r8, [sp, #10]
 801f0da:	f8ad 700c 	strh.w	r7, [sp, #12]
 801f0de:	f7fc fb8b 	bl	801b7f8 <_ZNK8touchgfx6Bitmap9getFormatEv>
 801f0e2:	b178      	cbz	r0, 801f104 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>
 801f0e4:	4628      	mov	r0, r5
 801f0e6:	f7fc fb87 	bl	801b7f8 <_ZNK8touchgfx6Bitmap9getFormatEv>
 801f0ea:	2802      	cmp	r0, #2
 801f0ec:	d00a      	beq.n	801f104 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>
 801f0ee:	4628      	mov	r0, r5
 801f0f0:	f7fc fb82 	bl	801b7f8 <_ZNK8touchgfx6Bitmap9getFormatEv>
 801f0f4:	280b      	cmp	r0, #11
 801f0f6:	d005      	beq.n	801f104 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>
 801f0f8:	4b69      	ldr	r3, [pc, #420]	; (801f2a0 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x1f8>)
 801f0fa:	214b      	movs	r1, #75	; 0x4b
 801f0fc:	4a69      	ldr	r2, [pc, #420]	; (801f2a4 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x1fc>)
 801f0fe:	486a      	ldr	r0, [pc, #424]	; (801f2a8 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x200>)
 801f100:	f008 f812 	bl	8027128 <__assert_func>
 801f104:	4628      	mov	r0, r5
 801f106:	f7fc faed 	bl	801b6e4 <_ZNK8touchgfx6Bitmap7getDataEv>
 801f10a:	4607      	mov	r7, r0
 801f10c:	4628      	mov	r0, r5
 801f10e:	f7fc fb1b 	bl	801b748 <_ZNK8touchgfx6Bitmap12getExtraDataEv>
 801f112:	4681      	mov	r9, r0
 801f114:	4628      	mov	r0, r5
 801f116:	f7fc fb6f 	bl	801b7f8 <_ZNK8touchgfx6Bitmap9getFormatEv>
 801f11a:	2802      	cmp	r0, #2
 801f11c:	d108      	bne.n	801f130 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x88>
 801f11e:	4633      	mov	r3, r6
 801f120:	4622      	mov	r2, r4
 801f122:	a902      	add	r1, sp, #8
 801f124:	4638      	mov	r0, r7
 801f126:	f7ff fa69 	bl	801e5fc <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 801f12a:	b009      	add	sp, #36	; 0x24
 801f12c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f130:	4628      	mov	r0, r5
 801f132:	f7fc fb61 	bl	801b7f8 <_ZNK8touchgfx6Bitmap9getFormatEv>
 801f136:	280b      	cmp	r0, #11
 801f138:	d107      	bne.n	801f14a <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xa2>
 801f13a:	9600      	str	r6, [sp, #0]
 801f13c:	4623      	mov	r3, r4
 801f13e:	aa02      	add	r2, sp, #8
 801f140:	4649      	mov	r1, r9
 801f142:	4638      	mov	r0, r7
 801f144:	f7ff fe72 	bl	801ee2c <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>
 801f148:	e7ef      	b.n	801f12a <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x82>
 801f14a:	4628      	mov	r0, r5
 801f14c:	f7fc fa90 	bl	801b670 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>
 801f150:	b950      	cbnz	r0, 801f168 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xc0>
 801f152:	f8da 3000 	ldr.w	r3, [sl]
 801f156:	aa02      	add	r2, sp, #8
 801f158:	4639      	mov	r1, r7
 801f15a:	e9cd 6000 	strd	r6, r0, [sp]
 801f15e:	4650      	mov	r0, sl
 801f160:	68dd      	ldr	r5, [r3, #12]
 801f162:	4623      	mov	r3, r4
 801f164:	47a8      	blx	r5
 801f166:	e7e0      	b.n	801f12a <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x82>
 801f168:	f10d 0818 	add.w	r8, sp, #24
 801f16c:	4629      	mov	r1, r5
 801f16e:	ad04      	add	r5, sp, #16
 801f170:	4640      	mov	r0, r8
 801f172:	f7fc fa23 	bl	801b5bc <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 801f176:	e898 0003 	ldmia.w	r8, {r0, r1}
 801f17a:	e885 0003 	stmia.w	r5, {r0, r1}
 801f17e:	4628      	mov	r0, r5
 801f180:	4621      	mov	r1, r4
 801f182:	f7f6 f96f 	bl	8015464 <_ZN8touchgfx4RectaNERKS0_>
 801f186:	4628      	mov	r0, r5
 801f188:	f7f6 f9af 	bl	80154ea <_ZNK8touchgfx4Rect7isEmptyEv>
 801f18c:	b138      	cbz	r0, 801f19e <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xf6>
 801f18e:	4623      	mov	r3, r4
 801f190:	9600      	str	r6, [sp, #0]
 801f192:	aa02      	add	r2, sp, #8
 801f194:	4649      	mov	r1, r9
 801f196:	4638      	mov	r0, r7
 801f198:	f7ff fe60 	bl	801ee5c <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 801f19c:	e7c5      	b.n	801f12a <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x82>
 801f19e:	f8da 3000 	ldr.w	r3, [sl]
 801f1a2:	aa02      	add	r2, sp, #8
 801f1a4:	4639      	mov	r1, r7
 801f1a6:	e9cd 6000 	strd	r6, r0, [sp]
 801f1aa:	4650      	mov	r0, sl
 801f1ac:	f8d3 b00c 	ldr.w	fp, [r3, #12]
 801f1b0:	462b      	mov	r3, r5
 801f1b2:	47d8      	blx	fp
 801f1b4:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 801f1b8:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 801f1bc:	4293      	cmp	r3, r2
 801f1be:	dd13      	ble.n	801f1e8 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x140>
 801f1c0:	f9b4 0000 	ldrsh.w	r0, [r4]
 801f1c4:	1a9b      	subs	r3, r3, r2
 801f1c6:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 801f1ca:	f8ad 0018 	strh.w	r0, [sp, #24]
 801f1ce:	4638      	mov	r0, r7
 801f1d0:	f8ad 201a 	strh.w	r2, [sp, #26]
 801f1d4:	aa02      	add	r2, sp, #8
 801f1d6:	f8ad 101c 	strh.w	r1, [sp, #28]
 801f1da:	4649      	mov	r1, r9
 801f1dc:	f8ad 301e 	strh.w	r3, [sp, #30]
 801f1e0:	4643      	mov	r3, r8
 801f1e2:	9600      	str	r6, [sp, #0]
 801f1e4:	f7ff fe3a 	bl	801ee5c <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 801f1e8:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
 801f1ec:	f9b4 2000 	ldrsh.w	r2, [r4]
 801f1f0:	4293      	cmp	r3, r2
 801f1f2:	dd13      	ble.n	801f21c <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x174>
 801f1f4:	1a9b      	subs	r3, r3, r2
 801f1f6:	f9bd 0012 	ldrsh.w	r0, [sp, #18]
 801f1fa:	f9bd 1016 	ldrsh.w	r1, [sp, #22]
 801f1fe:	f8ad 2018 	strh.w	r2, [sp, #24]
 801f202:	aa02      	add	r2, sp, #8
 801f204:	f8ad 001a 	strh.w	r0, [sp, #26]
 801f208:	4638      	mov	r0, r7
 801f20a:	f8ad 301c 	strh.w	r3, [sp, #28]
 801f20e:	4643      	mov	r3, r8
 801f210:	f8ad 101e 	strh.w	r1, [sp, #30]
 801f214:	4649      	mov	r1, r9
 801f216:	9600      	str	r6, [sp, #0]
 801f218:	f7ff fe20 	bl	801ee5c <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 801f21c:	88a2      	ldrh	r2, [r4, #4]
 801f21e:	8823      	ldrh	r3, [r4, #0]
 801f220:	f8bd 1014 	ldrh.w	r1, [sp, #20]
 801f224:	4413      	add	r3, r2
 801f226:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 801f22a:	440a      	add	r2, r1
 801f22c:	b29b      	uxth	r3, r3
 801f22e:	b292      	uxth	r2, r2
 801f230:	b218      	sxth	r0, r3
 801f232:	b211      	sxth	r1, r2
 801f234:	4288      	cmp	r0, r1
 801f236:	dd13      	ble.n	801f260 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x1b8>
 801f238:	1a9b      	subs	r3, r3, r2
 801f23a:	f9bd 0016 	ldrsh.w	r0, [sp, #22]
 801f23e:	f9bd 5012 	ldrsh.w	r5, [sp, #18]
 801f242:	aa02      	add	r2, sp, #8
 801f244:	f8ad 1018 	strh.w	r1, [sp, #24]
 801f248:	4649      	mov	r1, r9
 801f24a:	f8ad 301c 	strh.w	r3, [sp, #28]
 801f24e:	4643      	mov	r3, r8
 801f250:	f8ad 001e 	strh.w	r0, [sp, #30]
 801f254:	4638      	mov	r0, r7
 801f256:	9600      	str	r6, [sp, #0]
 801f258:	f8ad 501a 	strh.w	r5, [sp, #26]
 801f25c:	f7ff fdfe 	bl	801ee5c <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 801f260:	88e2      	ldrh	r2, [r4, #6]
 801f262:	8863      	ldrh	r3, [r4, #2]
 801f264:	f8bd 1016 	ldrh.w	r1, [sp, #22]
 801f268:	4413      	add	r3, r2
 801f26a:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 801f26e:	440a      	add	r2, r1
 801f270:	b29b      	uxth	r3, r3
 801f272:	b292      	uxth	r2, r2
 801f274:	b218      	sxth	r0, r3
 801f276:	b211      	sxth	r1, r2
 801f278:	4288      	cmp	r0, r1
 801f27a:	f77f af56 	ble.w	801f12a <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x82>
 801f27e:	f9b4 5000 	ldrsh.w	r5, [r4]
 801f282:	1a9b      	subs	r3, r3, r2
 801f284:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 801f288:	f8ad 301e 	strh.w	r3, [sp, #30]
 801f28c:	4643      	mov	r3, r8
 801f28e:	f8ad 5018 	strh.w	r5, [sp, #24]
 801f292:	f8ad 101a 	strh.w	r1, [sp, #26]
 801f296:	f8ad 001c 	strh.w	r0, [sp, #28]
 801f29a:	9600      	str	r6, [sp, #0]
 801f29c:	e779      	b.n	801f192 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xea>
 801f29e:	bf00      	nop
 801f2a0:	0802b6b8 	.word	0x0802b6b8
 801f2a4:	0802bdf6 	.word	0x0802bdf6
 801f2a8:	0802b9b7 	.word	0x0802b9b7

0801f2ac <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE>:
 801f2ac:	b508      	push	{r3, lr}
 801f2ae:	b180      	cbz	r0, 801f2d2 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x26>
 801f2b0:	2902      	cmp	r1, #2
 801f2b2:	d014      	beq.n	801f2de <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x32>
 801f2b4:	2903      	cmp	r1, #3
 801f2b6:	d01d      	beq.n	801f2f4 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x48>
 801f2b8:	2901      	cmp	r1, #1
 801f2ba:	d101      	bne.n	801f2c0 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x14>
 801f2bc:	2001      	movs	r0, #1
 801f2be:	bd08      	pop	{r3, pc}
 801f2c0:	4b0e      	ldr	r3, [pc, #56]	; (801f2fc <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x50>)
 801f2c2:	8818      	ldrh	r0, [r3, #0]
 801f2c4:	b990      	cbnz	r0, 801f2ec <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x40>
 801f2c6:	4b0e      	ldr	r3, [pc, #56]	; (801f300 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x54>)
 801f2c8:	2154      	movs	r1, #84	; 0x54
 801f2ca:	4a0e      	ldr	r2, [pc, #56]	; (801f304 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x58>)
 801f2cc:	480e      	ldr	r0, [pc, #56]	; (801f308 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x5c>)
 801f2ce:	f007 ff2b 	bl	8027128 <__assert_func>
 801f2d2:	2902      	cmp	r1, #2
 801f2d4:	d00e      	beq.n	801f2f4 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x48>
 801f2d6:	2903      	cmp	r1, #3
 801f2d8:	d0f2      	beq.n	801f2c0 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x14>
 801f2da:	2901      	cmp	r1, #1
 801f2dc:	d1ee      	bne.n	801f2bc <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x10>
 801f2de:	4b07      	ldr	r3, [pc, #28]	; (801f2fc <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x50>)
 801f2e0:	8818      	ldrh	r0, [r3, #0]
 801f2e2:	2800      	cmp	r0, #0
 801f2e4:	d0ef      	beq.n	801f2c6 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x1a>
 801f2e6:	f3c0 000e 	ubfx	r0, r0, #0, #15
 801f2ea:	e7e8      	b.n	801f2be <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x12>
 801f2ec:	f3c0 000e 	ubfx	r0, r0, #0, #15
 801f2f0:	4240      	negs	r0, r0
 801f2f2:	e7e4      	b.n	801f2be <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x12>
 801f2f4:	f04f 30ff 	mov.w	r0, #4294967295
 801f2f8:	e7e1      	b.n	801f2be <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x12>
 801f2fa:	bf00      	nop
 801f2fc:	20005806 	.word	0x20005806
 801f300:	0802b9e9 	.word	0x0802b9e9
 801f304:	0802bf73 	.word	0x0802bf73
 801f308:	0802ba2b 	.word	0x0802ba2b

0801f30c <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE>:
 801f30c:	b508      	push	{r3, lr}
 801f30e:	b180      	cbz	r0, 801f332 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x26>
 801f310:	2902      	cmp	r1, #2
 801f312:	d014      	beq.n	801f33e <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x32>
 801f314:	2903      	cmp	r1, #3
 801f316:	d018      	beq.n	801f34a <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x3e>
 801f318:	2901      	cmp	r1, #1
 801f31a:	d001      	beq.n	801f320 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x14>
 801f31c:	2001      	movs	r0, #1
 801f31e:	e013      	b.n	801f348 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x3c>
 801f320:	4b0e      	ldr	r3, [pc, #56]	; (801f35c <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x50>)
 801f322:	8818      	ldrh	r0, [r3, #0]
 801f324:	b970      	cbnz	r0, 801f344 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x38>
 801f326:	4b0e      	ldr	r3, [pc, #56]	; (801f360 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x54>)
 801f328:	2154      	movs	r1, #84	; 0x54
 801f32a:	4a0e      	ldr	r2, [pc, #56]	; (801f364 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x58>)
 801f32c:	480e      	ldr	r0, [pc, #56]	; (801f368 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x5c>)
 801f32e:	f007 fefb 	bl	8027128 <__assert_func>
 801f332:	2902      	cmp	r1, #2
 801f334:	d009      	beq.n	801f34a <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x3e>
 801f336:	2903      	cmp	r1, #3
 801f338:	d0f0      	beq.n	801f31c <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x10>
 801f33a:	2901      	cmp	r1, #1
 801f33c:	d1f0      	bne.n	801f320 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x14>
 801f33e:	f04f 30ff 	mov.w	r0, #4294967295
 801f342:	e001      	b.n	801f348 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x3c>
 801f344:	f3c0 000e 	ubfx	r0, r0, #0, #15
 801f348:	bd08      	pop	{r3, pc}
 801f34a:	4b04      	ldr	r3, [pc, #16]	; (801f35c <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x50>)
 801f34c:	8818      	ldrh	r0, [r3, #0]
 801f34e:	2800      	cmp	r0, #0
 801f350:	d0e9      	beq.n	801f326 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x1a>
 801f352:	f3c0 000e 	ubfx	r0, r0, #0, #15
 801f356:	4240      	negs	r0, r0
 801f358:	e7f6      	b.n	801f348 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x3c>
 801f35a:	bf00      	nop
 801f35c:	20005806 	.word	0x20005806
 801f360:	0802b9e9 	.word	0x0802b9e9
 801f364:	0802bf73 	.word	0x0802bf73
 801f368:	0802ba2b 	.word	0x0802ba2b

0801f36c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE>:
 801f36c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f370:	b099      	sub	sp, #100	; 0x64
 801f372:	910b      	str	r1, [sp, #44]	; 0x2c
 801f374:	a914      	add	r1, sp, #80	; 0x50
 801f376:	f9bd 5088 	ldrsh.w	r5, [sp, #136]	; 0x88
 801f37a:	f8bd 6090 	ldrh.w	r6, [sp, #144]	; 0x90
 801f37e:	f8bd 7094 	ldrh.w	r7, [sp, #148]	; 0x94
 801f382:	f89d 80ac 	ldrb.w	r8, [sp, #172]	; 0xac
 801f386:	f89d a0b4 	ldrb.w	sl, [sp, #180]	; 0xb4
 801f38a:	e881 000c 	stmia.w	r1, {r2, r3}
 801f38e:	f9bd 308c 	ldrsh.w	r3, [sp, #140]	; 0x8c
 801f392:	f89d 10a4 	ldrb.w	r1, [sp, #164]	; 0xa4
 801f396:	9308      	str	r3, [sp, #32]
 801f398:	910c      	str	r1, [sp, #48]	; 0x30
 801f39a:	f89d 10b0 	ldrb.w	r1, [sp, #176]	; 0xb0
 801f39e:	e9dd 2326 	ldrd	r2, r3, [sp, #152]	; 0x98
 801f3a2:	910d      	str	r1, [sp, #52]	; 0x34
 801f3a4:	f893 b00d 	ldrb.w	fp, [r3, #13]
 801f3a8:	7998      	ldrb	r0, [r3, #6]
 801f3aa:	ea4f 114b 	mov.w	r1, fp, lsl #5
 801f3ae:	f401 7180 	and.w	r1, r1, #256	; 0x100
 801f3b2:	4301      	orrs	r1, r0
 801f3b4:	9109      	str	r1, [sp, #36]	; 0x24
 801f3b6:	f000 81e4 	beq.w	801f782 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x416>
 801f3ba:	ea4f 1b0b 	mov.w	fp, fp, lsl #4
 801f3be:	79d9      	ldrb	r1, [r3, #7]
 801f3c0:	f40b 7b80 	and.w	fp, fp, #256	; 0x100
 801f3c4:	ea51 0b0b 	orrs.w	fp, r1, fp
 801f3c8:	f000 81db 	beq.w	801f782 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x416>
 801f3cc:	f993 3009 	ldrsb.w	r3, [r3, #9]
 801f3d0:	b29b      	uxth	r3, r3
 801f3d2:	2e00      	cmp	r6, #0
 801f3d4:	f000 80fd 	beq.w	801f5d2 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x266>
 801f3d8:	1af6      	subs	r6, r6, r3
 801f3da:	b2b6      	uxth	r6, r6
 801f3dc:	0433      	lsls	r3, r6, #16
 801f3de:	d502      	bpl.n	801f3e6 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x7a>
 801f3e0:	1bad      	subs	r5, r5, r6
 801f3e2:	2600      	movs	r6, #0
 801f3e4:	b22d      	sxth	r5, r5
 801f3e6:	f9b2 1000 	ldrsh.w	r1, [r2]
 801f3ea:	a814      	add	r0, sp, #80	; 0x50
 801f3ec:	f8bd 4024 	ldrh.w	r4, [sp, #36]	; 0x24
 801f3f0:	428d      	cmp	r5, r1
 801f3f2:	b28b      	uxth	r3, r1
 801f3f4:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 801f3f8:	bfbf      	itttt	lt
 801f3fa:	18f6      	addlt	r6, r6, r3
 801f3fc:	1b75      	sublt	r5, r6, r5
 801f3fe:	b2ae      	uxthlt	r6, r5
 801f400:	460d      	movlt	r5, r1
 801f402:	8891      	ldrh	r1, [r2, #4]
 801f404:	440b      	add	r3, r1
 801f406:	4629      	mov	r1, r5
 801f408:	b21b      	sxth	r3, r3
 801f40a:	9311      	str	r3, [sp, #68]	; 0x44
 801f40c:	8853      	ldrh	r3, [r2, #2]
 801f40e:	88d2      	ldrh	r2, [r2, #6]
 801f410:	4413      	add	r3, r2
 801f412:	9a08      	ldr	r2, [sp, #32]
 801f414:	b21b      	sxth	r3, r3
 801f416:	9310      	str	r3, [sp, #64]	; 0x40
 801f418:	4bb1      	ldr	r3, [pc, #708]	; (801f6e0 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x374>)
 801f41a:	f893 9000 	ldrb.w	r9, [r3]
 801f41e:	f109 3cff 	add.w	ip, r9, #4294967295
 801f422:	f1dc 0300 	rsbs	r3, ip, #0
 801f426:	eb43 030c 	adc.w	r3, r3, ip
 801f42a:	930f      	str	r3, [sp, #60]	; 0x3c
 801f42c:	4653      	mov	r3, sl
 801f42e:	f7f9 f866 	bl	80184fe <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>
 801f432:	4629      	mov	r1, r5
 801f434:	f8ad 005c 	strh.w	r0, [sp, #92]	; 0x5c
 801f438:	4653      	mov	r3, sl
 801f43a:	9a08      	ldr	r2, [sp, #32]
 801f43c:	a814      	add	r0, sp, #80	; 0x50
 801f43e:	f7f9 f876 	bl	801852e <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>
 801f442:	a918      	add	r1, sp, #96	; 0x60
 801f444:	f821 0d02 	strh.w	r0, [r1, #-2]!
 801f448:	a817      	add	r0, sp, #92	; 0x5c
 801f44a:	f7f9 f9d1 	bl	80187f0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>
 801f44e:	f1ba 0f00 	cmp.w	sl, #0
 801f452:	f040 80c1 	bne.w	801f5d8 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x26c>
 801f456:	f1b9 0f01 	cmp.w	r9, #1
 801f45a:	f040 80c5 	bne.w	801f5e8 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x27c>
 801f45e:	2301      	movs	r3, #1
 801f460:	f1b8 0f01 	cmp.w	r8, #1
 801f464:	fa03 f308 	lsl.w	r3, r3, r8
 801f468:	f103 33ff 	add.w	r3, r3, #4294967295
 801f46c:	b2db      	uxtb	r3, r3
 801f46e:	930a      	str	r3, [sp, #40]	; 0x28
 801f470:	f000 80e5 	beq.w	801f63e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2d2>
 801f474:	f1b8 0f02 	cmp.w	r8, #2
 801f478:	f000 80e4 	beq.w	801f644 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2d8>
 801f47c:	f1b8 0f04 	cmp.w	r8, #4
 801f480:	bf15      	itete	ne
 801f482:	46c1      	movne	r9, r8
 801f484:	f04f 0904 	moveq.w	r9, #4
 801f488:	2301      	movne	r3, #1
 801f48a:	2311      	moveq	r3, #17
 801f48c:	9307      	str	r3, [sp, #28]
 801f48e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801f490:	b153      	cbz	r3, 801f4a8 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x13c>
 801f492:	2408      	movs	r4, #8
 801f494:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801f496:	fb94 f3f9 	sdiv	r3, r4, r9
 801f49a:	1e5c      	subs	r4, r3, #1
 801f49c:	4414      	add	r4, r2
 801f49e:	fb94 f4f3 	sdiv	r4, r4, r3
 801f4a2:	fb14 f403 	smulbb	r4, r4, r3
 801f4a6:	b2a4      	uxth	r4, r4
 801f4a8:	b906      	cbnz	r6, 801f4ac <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x140>
 801f4aa:	b16f      	cbz	r7, 801f4c8 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x15c>
 801f4ac:	fb07 6304 	mla	r3, r7, r4, r6
 801f4b0:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 801f4b2:	4639      	mov	r1, r7
 801f4b4:	fb08 f303 	mul.w	r3, r8, r3
 801f4b8:	f003 0707 	and.w	r7, r3, #7
 801f4bc:	eb02 03d3 	add.w	r3, r2, r3, lsr #3
 801f4c0:	9328      	str	r3, [sp, #160]	; 0xa0
 801f4c2:	ebab 0301 	sub.w	r3, fp, r1
 801f4c6:	930e      	str	r3, [sp, #56]	; 0x38
 801f4c8:	4651      	mov	r1, sl
 801f4ca:	980f      	ldr	r0, [sp, #60]	; 0x3c
 801f4cc:	f7ff feee 	bl	801f2ac <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE>
 801f4d0:	4651      	mov	r1, sl
 801f4d2:	4683      	mov	fp, r0
 801f4d4:	980f      	ldr	r0, [sp, #60]	; 0x3c
 801f4d6:	f7ff ff19 	bl	801f30c <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE>
 801f4da:	9a08      	ldr	r2, [sp, #32]
 801f4dc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801f4de:	4682      	mov	sl, r0
 801f4e0:	1a9b      	subs	r3, r3, r2
 801f4e2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801f4e4:	429a      	cmp	r2, r3
 801f4e6:	bfa8      	it	ge
 801f4e8:	461a      	movge	r2, r3
 801f4ea:	2a00      	cmp	r2, #0
 801f4ec:	9208      	str	r2, [sp, #32]
 801f4ee:	f340 8148 	ble.w	801f782 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x416>
 801f4f2:	1bad      	subs	r5, r5, r6
 801f4f4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801f4f6:	1b5d      	subs	r5, r3, r5
 801f4f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f4fa:	429d      	cmp	r5, r3
 801f4fc:	bfd4      	ite	le
 801f4fe:	ebc6 0605 	rsble	r6, r6, r5
 801f502:	ebc6 0603 	rsbgt	r6, r6, r3
 801f506:	2e00      	cmp	r6, #0
 801f508:	f340 813b 	ble.w	801f782 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x416>
 801f50c:	1ba4      	subs	r4, r4, r6
 801f50e:	fb09 f304 	mul.w	r3, r9, r4
 801f512:	930e      	str	r3, [sp, #56]	; 0x38
 801f514:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801f516:	2b00      	cmp	r3, #0
 801f518:	f040 809d 	bne.w	801f656 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2ea>
 801f51c:	4b71      	ldr	r3, [pc, #452]	; (801f6e4 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x378>)
 801f51e:	6818      	ldr	r0, [r3, #0]
 801f520:	6803      	ldr	r3, [r0, #0]
 801f522:	6a1b      	ldr	r3, [r3, #32]
 801f524:	4798      	blx	r3
 801f526:	4970      	ldr	r1, [pc, #448]	; (801f6e8 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x37c>)
 801f528:	f9bd 305e 	ldrsh.w	r3, [sp, #94]	; 0x5e
 801f52c:	880c      	ldrh	r4, [r1, #0]
 801f52e:	f9bd 105c 	ldrsh.w	r1, [sp, #92]	; 0x5c
 801f532:	fb04 1303 	mla	r3, r4, r3, r1
 801f536:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 801f53a:	9309      	str	r3, [sp, #36]	; 0x24
 801f53c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801f53e:	7819      	ldrb	r1, [r3, #0]
 801f540:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801f542:	4139      	asrs	r1, r7
 801f544:	0a1b      	lsrs	r3, r3, #8
 801f546:	b2c9      	uxtb	r1, r1
 801f548:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 801f54c:	930f      	str	r3, [sp, #60]	; 0x3c
 801f54e:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801f550:	08db      	lsrs	r3, r3, #3
 801f552:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
 801f556:	9310      	str	r3, [sp, #64]	; 0x40
 801f558:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801f55a:	00db      	lsls	r3, r3, #3
 801f55c:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 801f560:	9311      	str	r3, [sp, #68]	; 0x44
 801f562:	ea4f 034b 	mov.w	r3, fp, lsl #1
 801f566:	fb0b ab16 	mls	fp, fp, r6, sl
 801f56a:	fb03 fa06 	mul.w	sl, r3, r6
 801f56e:	930c      	str	r3, [sp, #48]	; 0x30
 801f570:	eb0a 034b 	add.w	r3, sl, fp, lsl #1
 801f574:	9312      	str	r3, [sp, #72]	; 0x48
 801f576:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801f578:	b29b      	uxth	r3, r3
 801f57a:	9313      	str	r3, [sp, #76]	; 0x4c
 801f57c:	9b08      	ldr	r3, [sp, #32]
 801f57e:	3b01      	subs	r3, #1
 801f580:	9308      	str	r3, [sp, #32]
 801f582:	3301      	adds	r3, #1
 801f584:	f000 80c4 	beq.w	801f710 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a4>
 801f588:	46b2      	mov	sl, r6
 801f58a:	f8dd e024 	ldr.w	lr, [sp, #36]	; 0x24
 801f58e:	f11a 3aff 	adds.w	sl, sl, #4294967295
 801f592:	f0c0 80ab 	bcc.w	801f6ec <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x380>
 801f596:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801f598:	400b      	ands	r3, r1
 801f59a:	d00a      	beq.n	801f5b2 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x246>
 801f59c:	9807      	ldr	r0, [sp, #28]
 801f59e:	fb13 f300 	smulbb	r3, r3, r0
 801f5a2:	2bfe      	cmp	r3, #254	; 0xfe
 801f5a4:	dd59      	ble.n	801f65a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2ee>
 801f5a6:	980d      	ldr	r0, [sp, #52]	; 0x34
 801f5a8:	28ff      	cmp	r0, #255	; 0xff
 801f5aa:	d156      	bne.n	801f65a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2ee>
 801f5ac:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801f5ae:	f8ae 4000 	strh.w	r4, [lr]
 801f5b2:	4447      	add	r7, r8
 801f5b4:	b2bf      	uxth	r7, r7
 801f5b6:	2f07      	cmp	r7, #7
 801f5b8:	bf89      	itett	hi
 801f5ba:	9b28      	ldrhi	r3, [sp, #160]	; 0xa0
 801f5bc:	fa41 f109 	asrls.w	r1, r1, r9
 801f5c0:	2700      	movhi	r7, #0
 801f5c2:	7859      	ldrbhi	r1, [r3, #1]
 801f5c4:	bf8a      	itet	hi
 801f5c6:	3301      	addhi	r3, #1
 801f5c8:	b2c9      	uxtbls	r1, r1
 801f5ca:	9328      	strhi	r3, [sp, #160]	; 0xa0
 801f5cc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801f5ce:	449e      	add	lr, r3
 801f5d0:	e7dd      	b.n	801f58e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x222>
 801f5d2:	441d      	add	r5, r3
 801f5d4:	b22d      	sxth	r5, r5
 801f5d6:	e706      	b.n	801f3e6 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x7a>
 801f5d8:	f1ba 0f01 	cmp.w	sl, #1
 801f5dc:	f47f af3f 	bne.w	801f45e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf2>
 801f5e0:	f1b9 0f01 	cmp.w	r9, #1
 801f5e4:	f47f af3b 	bne.w	801f45e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf2>
 801f5e8:	f8df 90f8 	ldr.w	r9, [pc, #248]	; 801f6e4 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x378>
 801f5ec:	f8d9 0000 	ldr.w	r0, [r9]
 801f5f0:	6803      	ldr	r3, [r0, #0]
 801f5f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801f5f4:	4798      	blx	r3
 801f5f6:	f010 0380 	ands.w	r3, r0, #128	; 0x80
 801f5fa:	464a      	mov	r2, r9
 801f5fc:	d006      	beq.n	801f60c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2a0>
 801f5fe:	f1b8 0f04 	cmp.w	r8, #4
 801f602:	d11a      	bne.n	801f63a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2ce>
 801f604:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801f606:	3300      	adds	r3, #0
 801f608:	bf18      	it	ne
 801f60a:	2301      	movne	r3, #1
 801f60c:	05c0      	lsls	r0, r0, #23
 801f60e:	f140 8088 	bpl.w	801f722 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3b6>
 801f612:	f1b8 0f08 	cmp.w	r8, #8
 801f616:	f040 8084 	bne.w	801f722 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3b6>
 801f61a:	2b00      	cmp	r3, #0
 801f61c:	bf14      	ite	ne
 801f61e:	2180      	movne	r1, #128	; 0x80
 801f620:	f44f 7180 	moveq.w	r1, #256	; 0x100
 801f624:	2e00      	cmp	r6, #0
 801f626:	f040 80af 	bne.w	801f788 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x41c>
 801f62a:	2f00      	cmp	r7, #0
 801f62c:	f000 8083 	beq.w	801f736 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3ca>
 801f630:	23ff      	movs	r3, #255	; 0xff
 801f632:	46c1      	mov	r9, r8
 801f634:	930a      	str	r3, [sp, #40]	; 0x28
 801f636:	2301      	movs	r3, #1
 801f638:	e728      	b.n	801f48c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x120>
 801f63a:	2300      	movs	r3, #0
 801f63c:	e7e6      	b.n	801f60c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2a0>
 801f63e:	46c1      	mov	r9, r8
 801f640:	23ff      	movs	r3, #255	; 0xff
 801f642:	e723      	b.n	801f48c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x120>
 801f644:	46c1      	mov	r9, r8
 801f646:	2355      	movs	r3, #85	; 0x55
 801f648:	e720      	b.n	801f48c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x120>
 801f64a:	23ff      	movs	r3, #255	; 0xff
 801f64c:	46c1      	mov	r9, r8
 801f64e:	930a      	str	r3, [sp, #40]	; 0x28
 801f650:	2301      	movs	r3, #1
 801f652:	9307      	str	r3, [sp, #28]
 801f654:	e71d      	b.n	801f492 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x126>
 801f656:	980b      	ldr	r0, [sp, #44]	; 0x2c
 801f658:	e765      	b.n	801f526 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1ba>
 801f65a:	980d      	ldr	r0, [sp, #52]	; 0x34
 801f65c:	f8be 5000 	ldrh.w	r5, [lr]
 801f660:	fb10 f303 	smulbb	r3, r0, r3
 801f664:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801f666:	122c      	asrs	r4, r5, #8
 801f668:	b29b      	uxth	r3, r3
 801f66a:	f004 04f8 	and.w	r4, r4, #248	; 0xf8
 801f66e:	1c58      	adds	r0, r3, #1
 801f670:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 801f674:	980f      	ldr	r0, [sp, #60]	; 0x3c
 801f676:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801f67a:	fa1f fc83 	uxth.w	ip, r3
 801f67e:	43db      	mvns	r3, r3
 801f680:	fb10 f00c 	smulbb	r0, r0, ip
 801f684:	b2db      	uxtb	r3, r3
 801f686:	fb1c fb02 	smulbb	fp, ip, r2
 801f68a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801f68c:	fb04 0403 	mla	r4, r4, r3, r0
 801f690:	10e8      	asrs	r0, r5, #3
 801f692:	fb1c fc02 	smulbb	ip, ip, r2
 801f696:	00ed      	lsls	r5, r5, #3
 801f698:	b2a4      	uxth	r4, r4
 801f69a:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 801f69e:	b2ed      	uxtb	r5, r5
 801f6a0:	fb00 b003 	mla	r0, r0, r3, fp
 801f6a4:	fb05 cc03 	mla	ip, r5, r3, ip
 801f6a8:	1c63      	adds	r3, r4, #1
 801f6aa:	b280      	uxth	r0, r0
 801f6ac:	fa1f fc8c 	uxth.w	ip, ip
 801f6b0:	eb03 2414 	add.w	r4, r3, r4, lsr #8
 801f6b4:	f10c 0b01 	add.w	fp, ip, #1
 801f6b8:	f404 4478 	and.w	r4, r4, #63488	; 0xf800
 801f6bc:	eb0b 2b1c 	add.w	fp, fp, ip, lsr #8
 801f6c0:	f3cb 2bc4 	ubfx	fp, fp, #11, #5
 801f6c4:	ea44 040b 	orr.w	r4, r4, fp
 801f6c8:	f100 0b01 	add.w	fp, r0, #1
 801f6cc:	eb0b 2b10 	add.w	fp, fp, r0, lsr #8
 801f6d0:	ea4f 1b5b 	mov.w	fp, fp, lsr #5
 801f6d4:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 801f6d8:	ea44 040b 	orr.w	r4, r4, fp
 801f6dc:	e767      	b.n	801f5ae <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x242>
 801f6de:	bf00      	nop
 801f6e0:	20005804 	.word	0x20005804
 801f6e4:	2000580c 	.word	0x2000580c
 801f6e8:	20005806 	.word	0x20005806
 801f6ec:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801f6ee:	b153      	cbz	r3, 801f706 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x39a>
 801f6f0:	441f      	add	r7, r3
 801f6f2:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801f6f4:	b2bf      	uxth	r7, r7
 801f6f6:	eb03 03d7 	add.w	r3, r3, r7, lsr #3
 801f6fa:	f007 0707 	and.w	r7, r7, #7
 801f6fe:	7819      	ldrb	r1, [r3, #0]
 801f700:	9328      	str	r3, [sp, #160]	; 0xa0
 801f702:	4139      	asrs	r1, r7
 801f704:	b2c9      	uxtb	r1, r1
 801f706:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801f708:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801f70a:	441a      	add	r2, r3
 801f70c:	9209      	str	r2, [sp, #36]	; 0x24
 801f70e:	e735      	b.n	801f57c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x210>
 801f710:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801f712:	2b00      	cmp	r3, #0
 801f714:	d135      	bne.n	801f782 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x416>
 801f716:	4b21      	ldr	r3, [pc, #132]	; (801f79c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x430>)
 801f718:	6818      	ldr	r0, [r3, #0]
 801f71a:	6803      	ldr	r3, [r0, #0]
 801f71c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801f71e:	4798      	blx	r3
 801f720:	e02f      	b.n	801f782 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x416>
 801f722:	2b00      	cmp	r3, #0
 801f724:	f43f ae9b 	beq.w	801f45e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf2>
 801f728:	2e00      	cmp	r6, #0
 801f72a:	f47f ae98 	bne.w	801f45e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf2>
 801f72e:	2f00      	cmp	r7, #0
 801f730:	f47f ae95 	bne.w	801f45e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf2>
 801f734:	2180      	movs	r1, #128	; 0x80
 801f736:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f738:	9811      	ldr	r0, [sp, #68]	; 0x44
 801f73a:	18eb      	adds	r3, r5, r3
 801f73c:	4283      	cmp	r3, r0
 801f73e:	f73f ae8e 	bgt.w	801f45e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf2>
 801f742:	9b08      	ldr	r3, [sp, #32]
 801f744:	9810      	ldr	r0, [sp, #64]	; 0x40
 801f746:	445b      	add	r3, fp
 801f748:	4283      	cmp	r3, r0
 801f74a:	f73f ae88 	bgt.w	801f45e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf2>
 801f74e:	f1b8 0f08 	cmp.w	r8, #8
 801f752:	6810      	ldr	r0, [r2, #0]
 801f754:	f8bd 305e 	ldrh.w	r3, [sp, #94]	; 0x5e
 801f758:	bf18      	it	ne
 801f75a:	3401      	addne	r4, #1
 801f75c:	6805      	ldr	r5, [r0, #0]
 801f75e:	9105      	str	r1, [sp, #20]
 801f760:	bf18      	it	ne
 801f762:	f024 0401 	bicne.w	r4, r4, #1
 801f766:	990d      	ldr	r1, [sp, #52]	; 0x34
 801f768:	f8bd 205c 	ldrh.w	r2, [sp, #92]	; 0x5c
 801f76c:	bf18      	it	ne
 801f76e:	b2a4      	uxthne	r4, r4
 801f770:	9104      	str	r1, [sp, #16]
 801f772:	992a      	ldr	r1, [sp, #168]	; 0xa8
 801f774:	e9cd 4b00 	strd	r4, fp, [sp]
 801f778:	e9cd 4102 	strd	r4, r1, [sp, #8]
 801f77c:	9928      	ldr	r1, [sp, #160]	; 0xa0
 801f77e:	6c2c      	ldr	r4, [r5, #64]	; 0x40
 801f780:	47a0      	blx	r4
 801f782:	b019      	add	sp, #100	; 0x64
 801f784:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f788:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801f78a:	2b00      	cmp	r3, #0
 801f78c:	f47f af5d 	bne.w	801f64a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2de>
 801f790:	23ff      	movs	r3, #255	; 0xff
 801f792:	46c1      	mov	r9, r8
 801f794:	930a      	str	r3, [sp, #40]	; 0x28
 801f796:	2301      	movs	r3, #1
 801f798:	9307      	str	r3, [sp, #28]
 801f79a:	e687      	b.n	801f4ac <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x140>
 801f79c:	2000580c 	.word	0x2000580c

0801f7a0 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv>:
 801f7a0:	b538      	push	{r3, r4, r5, lr}
 801f7a2:	4c15      	ldr	r4, [pc, #84]	; (801f7f8 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x58>)
 801f7a4:	4605      	mov	r5, r0
 801f7a6:	7823      	ldrb	r3, [r4, #0]
 801f7a8:	f3bf 8f5b 	dmb	ish
 801f7ac:	07da      	lsls	r2, r3, #31
 801f7ae:	d40b      	bmi.n	801f7c8 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x28>
 801f7b0:	4620      	mov	r0, r4
 801f7b2:	f007 fc8c 	bl	80270ce <__cxa_guard_acquire>
 801f7b6:	b138      	cbz	r0, 801f7c8 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x28>
 801f7b8:	4620      	mov	r0, r4
 801f7ba:	f007 fc94 	bl	80270e6 <__cxa_guard_release>
 801f7be:	4a0f      	ldr	r2, [pc, #60]	; (801f7fc <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x5c>)
 801f7c0:	490f      	ldr	r1, [pc, #60]	; (801f800 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x60>)
 801f7c2:	4810      	ldr	r0, [pc, #64]	; (801f804 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x64>)
 801f7c4:	f007 fc7c 	bl	80270c0 <__aeabi_atexit>
 801f7c8:	4c0f      	ldr	r4, [pc, #60]	; (801f808 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x68>)
 801f7ca:	7823      	ldrb	r3, [r4, #0]
 801f7cc:	f3bf 8f5b 	dmb	ish
 801f7d0:	07db      	lsls	r3, r3, #31
 801f7d2:	d40b      	bmi.n	801f7ec <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x4c>
 801f7d4:	4620      	mov	r0, r4
 801f7d6:	f007 fc7a 	bl	80270ce <__cxa_guard_acquire>
 801f7da:	b138      	cbz	r0, 801f7ec <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x4c>
 801f7dc:	4620      	mov	r0, r4
 801f7de:	f007 fc82 	bl	80270e6 <__cxa_guard_release>
 801f7e2:	4a06      	ldr	r2, [pc, #24]	; (801f7fc <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x5c>)
 801f7e4:	4909      	ldr	r1, [pc, #36]	; (801f80c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x6c>)
 801f7e6:	480a      	ldr	r0, [pc, #40]	; (801f810 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x70>)
 801f7e8:	f007 fc6a 	bl	80270c0 <__aeabi_atexit>
 801f7ec:	4b05      	ldr	r3, [pc, #20]	; (801f804 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x64>)
 801f7ee:	612b      	str	r3, [r5, #16]
 801f7f0:	4b07      	ldr	r3, [pc, #28]	; (801f810 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x70>)
 801f7f2:	616b      	str	r3, [r5, #20]
 801f7f4:	bd38      	pop	{r3, r4, r5, pc}
 801f7f6:	bf00      	nop
 801f7f8:	200058d8 	.word	0x200058d8
 801f7fc:	20000000 	.word	0x20000000
 801f800:	0801dda3 	.word	0x0801dda3
 801f804:	200001b8 	.word	0x200001b8
 801f808:	200058dc 	.word	0x200058dc
 801f80c:	0801dda1 	.word	0x0801dda1
 801f810:	200001bc 	.word	0x200001bc

0801f814 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv>:
 801f814:	b538      	push	{r3, r4, r5, lr}
 801f816:	4c15      	ldr	r4, [pc, #84]	; (801f86c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x58>)
 801f818:	4605      	mov	r5, r0
 801f81a:	7823      	ldrb	r3, [r4, #0]
 801f81c:	f3bf 8f5b 	dmb	ish
 801f820:	07da      	lsls	r2, r3, #31
 801f822:	d40b      	bmi.n	801f83c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x28>
 801f824:	4620      	mov	r0, r4
 801f826:	f007 fc52 	bl	80270ce <__cxa_guard_acquire>
 801f82a:	b138      	cbz	r0, 801f83c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x28>
 801f82c:	4620      	mov	r0, r4
 801f82e:	f007 fc5a 	bl	80270e6 <__cxa_guard_release>
 801f832:	4a0f      	ldr	r2, [pc, #60]	; (801f870 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x5c>)
 801f834:	490f      	ldr	r1, [pc, #60]	; (801f874 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x60>)
 801f836:	4810      	ldr	r0, [pc, #64]	; (801f878 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x64>)
 801f838:	f007 fc42 	bl	80270c0 <__aeabi_atexit>
 801f83c:	4c0f      	ldr	r4, [pc, #60]	; (801f87c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x68>)
 801f83e:	7823      	ldrb	r3, [r4, #0]
 801f840:	f3bf 8f5b 	dmb	ish
 801f844:	07db      	lsls	r3, r3, #31
 801f846:	d40b      	bmi.n	801f860 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x4c>
 801f848:	4620      	mov	r0, r4
 801f84a:	f007 fc40 	bl	80270ce <__cxa_guard_acquire>
 801f84e:	b138      	cbz	r0, 801f860 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x4c>
 801f850:	4620      	mov	r0, r4
 801f852:	f007 fc48 	bl	80270e6 <__cxa_guard_release>
 801f856:	4a06      	ldr	r2, [pc, #24]	; (801f870 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x5c>)
 801f858:	4909      	ldr	r1, [pc, #36]	; (801f880 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x6c>)
 801f85a:	480a      	ldr	r0, [pc, #40]	; (801f884 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x70>)
 801f85c:	f007 fc30 	bl	80270c0 <__aeabi_atexit>
 801f860:	4b05      	ldr	r3, [pc, #20]	; (801f878 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x64>)
 801f862:	60ab      	str	r3, [r5, #8]
 801f864:	4b07      	ldr	r3, [pc, #28]	; (801f884 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x70>)
 801f866:	60eb      	str	r3, [r5, #12]
 801f868:	bd38      	pop	{r3, r4, r5, pc}
 801f86a:	bf00      	nop
 801f86c:	200058b0 	.word	0x200058b0
 801f870:	20000000 	.word	0x20000000
 801f874:	0801dda7 	.word	0x0801dda7
 801f878:	20000190 	.word	0x20000190
 801f87c:	200058b4 	.word	0x200058b4
 801f880:	0801dda5 	.word	0x0801dda5
 801f884:	20000194 	.word	0x20000194

0801f888 <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB565Ev>:
 801f888:	b510      	push	{r4, lr}
 801f88a:	4604      	mov	r4, r0
 801f88c:	f7ff ff88 	bl	801f7a0 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv>
 801f890:	4620      	mov	r0, r4
 801f892:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801f896:	f7ff bfbd 	b.w	801f814 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv>
	...

0801f89c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>:
 801f89c:	b538      	push	{r3, r4, r5, lr}
 801f89e:	4c15      	ldr	r4, [pc, #84]	; (801f8f4 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x58>)
 801f8a0:	4605      	mov	r5, r0
 801f8a2:	7823      	ldrb	r3, [r4, #0]
 801f8a4:	f3bf 8f5b 	dmb	ish
 801f8a8:	07da      	lsls	r2, r3, #31
 801f8aa:	d40b      	bmi.n	801f8c4 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 801f8ac:	4620      	mov	r0, r4
 801f8ae:	f007 fc0e 	bl	80270ce <__cxa_guard_acquire>
 801f8b2:	b138      	cbz	r0, 801f8c4 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 801f8b4:	4620      	mov	r0, r4
 801f8b6:	f007 fc16 	bl	80270e6 <__cxa_guard_release>
 801f8ba:	4a0f      	ldr	r2, [pc, #60]	; (801f8f8 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 801f8bc:	490f      	ldr	r1, [pc, #60]	; (801f8fc <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x60>)
 801f8be:	4810      	ldr	r0, [pc, #64]	; (801f900 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 801f8c0:	f007 fbfe 	bl	80270c0 <__aeabi_atexit>
 801f8c4:	4c0f      	ldr	r4, [pc, #60]	; (801f904 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x68>)
 801f8c6:	7823      	ldrb	r3, [r4, #0]
 801f8c8:	f3bf 8f5b 	dmb	ish
 801f8cc:	07db      	lsls	r3, r3, #31
 801f8ce:	d40b      	bmi.n	801f8e8 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 801f8d0:	4620      	mov	r0, r4
 801f8d2:	f007 fbfc 	bl	80270ce <__cxa_guard_acquire>
 801f8d6:	b138      	cbz	r0, 801f8e8 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 801f8d8:	4620      	mov	r0, r4
 801f8da:	f007 fc04 	bl	80270e6 <__cxa_guard_release>
 801f8de:	4a06      	ldr	r2, [pc, #24]	; (801f8f8 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 801f8e0:	4909      	ldr	r1, [pc, #36]	; (801f908 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x6c>)
 801f8e2:	480a      	ldr	r0, [pc, #40]	; (801f90c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 801f8e4:	f007 fbec 	bl	80270c0 <__aeabi_atexit>
 801f8e8:	4b05      	ldr	r3, [pc, #20]	; (801f900 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 801f8ea:	622b      	str	r3, [r5, #32]
 801f8ec:	4b07      	ldr	r3, [pc, #28]	; (801f90c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 801f8ee:	626b      	str	r3, [r5, #36]	; 0x24
 801f8f0:	bd38      	pop	{r3, r4, r5, pc}
 801f8f2:	bf00      	nop
 801f8f4:	200058e0 	.word	0x200058e0
 801f8f8:	20000000 	.word	0x20000000
 801f8fc:	0801dd9b 	.word	0x0801dd9b
 801f900:	200001c0 	.word	0x200001c0
 801f904:	200058e4 	.word	0x200058e4
 801f908:	0801dd99 	.word	0x0801dd99
 801f90c:	200001c4 	.word	0x200001c4

0801f910 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>:
 801f910:	b538      	push	{r3, r4, r5, lr}
 801f912:	4c15      	ldr	r4, [pc, #84]	; (801f968 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x58>)
 801f914:	4605      	mov	r5, r0
 801f916:	7823      	ldrb	r3, [r4, #0]
 801f918:	f3bf 8f5b 	dmb	ish
 801f91c:	07da      	lsls	r2, r3, #31
 801f91e:	d40b      	bmi.n	801f938 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 801f920:	4620      	mov	r0, r4
 801f922:	f007 fbd4 	bl	80270ce <__cxa_guard_acquire>
 801f926:	b138      	cbz	r0, 801f938 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 801f928:	4620      	mov	r0, r4
 801f92a:	f007 fbdc 	bl	80270e6 <__cxa_guard_release>
 801f92e:	4a0f      	ldr	r2, [pc, #60]	; (801f96c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 801f930:	490f      	ldr	r1, [pc, #60]	; (801f970 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x60>)
 801f932:	4810      	ldr	r0, [pc, #64]	; (801f974 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 801f934:	f007 fbc4 	bl	80270c0 <__aeabi_atexit>
 801f938:	4c0f      	ldr	r4, [pc, #60]	; (801f978 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x68>)
 801f93a:	7823      	ldrb	r3, [r4, #0]
 801f93c:	f3bf 8f5b 	dmb	ish
 801f940:	07db      	lsls	r3, r3, #31
 801f942:	d40b      	bmi.n	801f95c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 801f944:	4620      	mov	r0, r4
 801f946:	f007 fbc2 	bl	80270ce <__cxa_guard_acquire>
 801f94a:	b138      	cbz	r0, 801f95c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 801f94c:	4620      	mov	r0, r4
 801f94e:	f007 fbca 	bl	80270e6 <__cxa_guard_release>
 801f952:	4a06      	ldr	r2, [pc, #24]	; (801f96c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 801f954:	4909      	ldr	r1, [pc, #36]	; (801f97c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x6c>)
 801f956:	480a      	ldr	r0, [pc, #40]	; (801f980 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 801f958:	f007 fbb2 	bl	80270c0 <__aeabi_atexit>
 801f95c:	4b05      	ldr	r3, [pc, #20]	; (801f974 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 801f95e:	61ab      	str	r3, [r5, #24]
 801f960:	4b07      	ldr	r3, [pc, #28]	; (801f980 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 801f962:	61eb      	str	r3, [r5, #28]
 801f964:	bd38      	pop	{r3, r4, r5, pc}
 801f966:	bf00      	nop
 801f968:	200058b8 	.word	0x200058b8
 801f96c:	20000000 	.word	0x20000000
 801f970:	0801dd9f 	.word	0x0801dd9f
 801f974:	20000198 	.word	0x20000198
 801f978:	200058bc 	.word	0x200058bc
 801f97c:	0801dd9d 	.word	0x0801dd9d
 801f980:	2000019c 	.word	0x2000019c

0801f984 <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB888Ev>:
 801f984:	b510      	push	{r4, lr}
 801f986:	4604      	mov	r4, r0
 801f988:	f7ff ff88 	bl	801f89c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>
 801f98c:	4620      	mov	r0, r4
 801f98e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801f992:	f7ff bfbd 	b.w	801f910 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>
	...

0801f998 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>:
 801f998:	b538      	push	{r3, r4, r5, lr}
 801f99a:	4c15      	ldr	r4, [pc, #84]	; (801f9f0 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x58>)
 801f99c:	4605      	mov	r5, r0
 801f99e:	7823      	ldrb	r3, [r4, #0]
 801f9a0:	f3bf 8f5b 	dmb	ish
 801f9a4:	07da      	lsls	r2, r3, #31
 801f9a6:	d40b      	bmi.n	801f9c0 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 801f9a8:	4620      	mov	r0, r4
 801f9aa:	f007 fb90 	bl	80270ce <__cxa_guard_acquire>
 801f9ae:	b138      	cbz	r0, 801f9c0 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 801f9b0:	4620      	mov	r0, r4
 801f9b2:	f007 fb98 	bl	80270e6 <__cxa_guard_release>
 801f9b6:	4a0f      	ldr	r2, [pc, #60]	; (801f9f4 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 801f9b8:	490f      	ldr	r1, [pc, #60]	; (801f9f8 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x60>)
 801f9ba:	4810      	ldr	r0, [pc, #64]	; (801f9fc <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 801f9bc:	f007 fb80 	bl	80270c0 <__aeabi_atexit>
 801f9c0:	4c0f      	ldr	r4, [pc, #60]	; (801fa00 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x68>)
 801f9c2:	7823      	ldrb	r3, [r4, #0]
 801f9c4:	f3bf 8f5b 	dmb	ish
 801f9c8:	07db      	lsls	r3, r3, #31
 801f9ca:	d40b      	bmi.n	801f9e4 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
 801f9cc:	4620      	mov	r0, r4
 801f9ce:	f007 fb7e 	bl	80270ce <__cxa_guard_acquire>
 801f9d2:	b138      	cbz	r0, 801f9e4 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
 801f9d4:	4620      	mov	r0, r4
 801f9d6:	f007 fb86 	bl	80270e6 <__cxa_guard_release>
 801f9da:	4a06      	ldr	r2, [pc, #24]	; (801f9f4 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 801f9dc:	4909      	ldr	r1, [pc, #36]	; (801fa04 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x6c>)
 801f9de:	480a      	ldr	r0, [pc, #40]	; (801fa08 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
 801f9e0:	f007 fb6e 	bl	80270c0 <__aeabi_atexit>
 801f9e4:	4b05      	ldr	r3, [pc, #20]	; (801f9fc <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 801f9e6:	632b      	str	r3, [r5, #48]	; 0x30
 801f9e8:	4b07      	ldr	r3, [pc, #28]	; (801fa08 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
 801f9ea:	636b      	str	r3, [r5, #52]	; 0x34
 801f9ec:	bd38      	pop	{r3, r4, r5, pc}
 801f9ee:	bf00      	nop
 801f9f0:	200058f0 	.word	0x200058f0
 801f9f4:	20000000 	.word	0x20000000
 801f9f8:	0801dd93 	.word	0x0801dd93
 801f9fc:	200001d0 	.word	0x200001d0
 801fa00:	200058f4 	.word	0x200058f4
 801fa04:	0801dd91 	.word	0x0801dd91
 801fa08:	200001d4 	.word	0x200001d4

0801fa0c <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>:
 801fa0c:	b538      	push	{r3, r4, r5, lr}
 801fa0e:	4c15      	ldr	r4, [pc, #84]	; (801fa64 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x58>)
 801fa10:	4605      	mov	r5, r0
 801fa12:	7823      	ldrb	r3, [r4, #0]
 801fa14:	f3bf 8f5b 	dmb	ish
 801fa18:	07da      	lsls	r2, r3, #31
 801fa1a:	d40b      	bmi.n	801fa34 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 801fa1c:	4620      	mov	r0, r4
 801fa1e:	f007 fb56 	bl	80270ce <__cxa_guard_acquire>
 801fa22:	b138      	cbz	r0, 801fa34 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 801fa24:	4620      	mov	r0, r4
 801fa26:	f007 fb5e 	bl	80270e6 <__cxa_guard_release>
 801fa2a:	4a0f      	ldr	r2, [pc, #60]	; (801fa68 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 801fa2c:	490f      	ldr	r1, [pc, #60]	; (801fa6c <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x60>)
 801fa2e:	4810      	ldr	r0, [pc, #64]	; (801fa70 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 801fa30:	f007 fb46 	bl	80270c0 <__aeabi_atexit>
 801fa34:	4c0f      	ldr	r4, [pc, #60]	; (801fa74 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x68>)
 801fa36:	7823      	ldrb	r3, [r4, #0]
 801fa38:	f3bf 8f5b 	dmb	ish
 801fa3c:	07db      	lsls	r3, r3, #31
 801fa3e:	d40b      	bmi.n	801fa58 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
 801fa40:	4620      	mov	r0, r4
 801fa42:	f007 fb44 	bl	80270ce <__cxa_guard_acquire>
 801fa46:	b138      	cbz	r0, 801fa58 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
 801fa48:	4620      	mov	r0, r4
 801fa4a:	f007 fb4c 	bl	80270e6 <__cxa_guard_release>
 801fa4e:	4a06      	ldr	r2, [pc, #24]	; (801fa68 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 801fa50:	4909      	ldr	r1, [pc, #36]	; (801fa78 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x6c>)
 801fa52:	480a      	ldr	r0, [pc, #40]	; (801fa7c <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
 801fa54:	f007 fb34 	bl	80270c0 <__aeabi_atexit>
 801fa58:	4b05      	ldr	r3, [pc, #20]	; (801fa70 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 801fa5a:	62ab      	str	r3, [r5, #40]	; 0x28
 801fa5c:	4b07      	ldr	r3, [pc, #28]	; (801fa7c <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
 801fa5e:	62eb      	str	r3, [r5, #44]	; 0x2c
 801fa60:	bd38      	pop	{r3, r4, r5, pc}
 801fa62:	bf00      	nop
 801fa64:	200058c0 	.word	0x200058c0
 801fa68:	20000000 	.word	0x20000000
 801fa6c:	0801dd97 	.word	0x0801dd97
 801fa70:	200001a0 	.word	0x200001a0
 801fa74:	200058c4 	.word	0x200058c4
 801fa78:	0801dd95 	.word	0x0801dd95
 801fa7c:	200001a4 	.word	0x200001a4

0801fa80 <_ZN8touchgfx8LCD16bpp30enableTextureMapperL8_ARGB8888Ev>:
 801fa80:	b510      	push	{r4, lr}
 801fa82:	4604      	mov	r4, r0
 801fa84:	f7ff ff88 	bl	801f998 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>
 801fa88:	4620      	mov	r0, r4
 801fa8a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801fa8e:	f7ff bfbd 	b.w	801fa0c <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>
	...

0801fa94 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv>:
 801fa94:	b538      	push	{r3, r4, r5, lr}
 801fa96:	4c15      	ldr	r4, [pc, #84]	; (801faec <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x58>)
 801fa98:	4605      	mov	r5, r0
 801fa9a:	7823      	ldrb	r3, [r4, #0]
 801fa9c:	f3bf 8f5b 	dmb	ish
 801faa0:	07da      	lsls	r2, r3, #31
 801faa2:	d40b      	bmi.n	801fabc <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x28>
 801faa4:	4620      	mov	r0, r4
 801faa6:	f007 fb12 	bl	80270ce <__cxa_guard_acquire>
 801faaa:	b138      	cbz	r0, 801fabc <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x28>
 801faac:	4620      	mov	r0, r4
 801faae:	f007 fb1a 	bl	80270e6 <__cxa_guard_release>
 801fab2:	4a0f      	ldr	r2, [pc, #60]	; (801faf0 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x5c>)
 801fab4:	490f      	ldr	r1, [pc, #60]	; (801faf4 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x60>)
 801fab6:	4810      	ldr	r0, [pc, #64]	; (801faf8 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x64>)
 801fab8:	f007 fb02 	bl	80270c0 <__aeabi_atexit>
 801fabc:	4c0f      	ldr	r4, [pc, #60]	; (801fafc <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x68>)
 801fabe:	7823      	ldrb	r3, [r4, #0]
 801fac0:	f3bf 8f5b 	dmb	ish
 801fac4:	07db      	lsls	r3, r3, #31
 801fac6:	d40b      	bmi.n	801fae0 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x4c>
 801fac8:	4620      	mov	r0, r4
 801faca:	f007 fb00 	bl	80270ce <__cxa_guard_acquire>
 801face:	b138      	cbz	r0, 801fae0 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x4c>
 801fad0:	4620      	mov	r0, r4
 801fad2:	f007 fb08 	bl	80270e6 <__cxa_guard_release>
 801fad6:	4a06      	ldr	r2, [pc, #24]	; (801faf0 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x5c>)
 801fad8:	4909      	ldr	r1, [pc, #36]	; (801fb00 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x6c>)
 801fada:	480a      	ldr	r0, [pc, #40]	; (801fb04 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x70>)
 801fadc:	f007 faf0 	bl	80270c0 <__aeabi_atexit>
 801fae0:	4b05      	ldr	r3, [pc, #20]	; (801faf8 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x64>)
 801fae2:	652b      	str	r3, [r5, #80]	; 0x50
 801fae4:	4b07      	ldr	r3, [pc, #28]	; (801fb04 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x70>)
 801fae6:	656b      	str	r3, [r5, #84]	; 0x54
 801fae8:	bd38      	pop	{r3, r4, r5, pc}
 801faea:	bf00      	nop
 801faec:	200058f8 	.word	0x200058f8
 801faf0:	20000000 	.word	0x20000000
 801faf4:	0801dd83 	.word	0x0801dd83
 801faf8:	200001d8 	.word	0x200001d8
 801fafc:	200058fc 	.word	0x200058fc
 801fb00:	0801dd81 	.word	0x0801dd81
 801fb04:	200001dc 	.word	0x200001dc

0801fb08 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv>:
 801fb08:	b538      	push	{r3, r4, r5, lr}
 801fb0a:	4c15      	ldr	r4, [pc, #84]	; (801fb60 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x58>)
 801fb0c:	4605      	mov	r5, r0
 801fb0e:	7823      	ldrb	r3, [r4, #0]
 801fb10:	f3bf 8f5b 	dmb	ish
 801fb14:	07da      	lsls	r2, r3, #31
 801fb16:	d40b      	bmi.n	801fb30 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x28>
 801fb18:	4620      	mov	r0, r4
 801fb1a:	f007 fad8 	bl	80270ce <__cxa_guard_acquire>
 801fb1e:	b138      	cbz	r0, 801fb30 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x28>
 801fb20:	4620      	mov	r0, r4
 801fb22:	f007 fae0 	bl	80270e6 <__cxa_guard_release>
 801fb26:	4a0f      	ldr	r2, [pc, #60]	; (801fb64 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x5c>)
 801fb28:	490f      	ldr	r1, [pc, #60]	; (801fb68 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x60>)
 801fb2a:	4810      	ldr	r0, [pc, #64]	; (801fb6c <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x64>)
 801fb2c:	f007 fac8 	bl	80270c0 <__aeabi_atexit>
 801fb30:	4c0f      	ldr	r4, [pc, #60]	; (801fb70 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x68>)
 801fb32:	7823      	ldrb	r3, [r4, #0]
 801fb34:	f3bf 8f5b 	dmb	ish
 801fb38:	07db      	lsls	r3, r3, #31
 801fb3a:	d40b      	bmi.n	801fb54 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x4c>
 801fb3c:	4620      	mov	r0, r4
 801fb3e:	f007 fac6 	bl	80270ce <__cxa_guard_acquire>
 801fb42:	b138      	cbz	r0, 801fb54 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x4c>
 801fb44:	4620      	mov	r0, r4
 801fb46:	f007 face 	bl	80270e6 <__cxa_guard_release>
 801fb4a:	4a06      	ldr	r2, [pc, #24]	; (801fb64 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x5c>)
 801fb4c:	4909      	ldr	r1, [pc, #36]	; (801fb74 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x6c>)
 801fb4e:	480a      	ldr	r0, [pc, #40]	; (801fb78 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x70>)
 801fb50:	f007 fab6 	bl	80270c0 <__aeabi_atexit>
 801fb54:	4b05      	ldr	r3, [pc, #20]	; (801fb6c <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x64>)
 801fb56:	64ab      	str	r3, [r5, #72]	; 0x48
 801fb58:	4b07      	ldr	r3, [pc, #28]	; (801fb78 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x70>)
 801fb5a:	64eb      	str	r3, [r5, #76]	; 0x4c
 801fb5c:	bd38      	pop	{r3, r4, r5, pc}
 801fb5e:	bf00      	nop
 801fb60:	20005900 	.word	0x20005900
 801fb64:	20000000 	.word	0x20000000
 801fb68:	0801dd87 	.word	0x0801dd87
 801fb6c:	200001e0 	.word	0x200001e0
 801fb70:	20005904 	.word	0x20005904
 801fb74:	0801dd85 	.word	0x0801dd85
 801fb78:	200001e4 	.word	0x200001e4

0801fb7c <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv>:
 801fb7c:	b538      	push	{r3, r4, r5, lr}
 801fb7e:	4c15      	ldr	r4, [pc, #84]	; (801fbd4 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x58>)
 801fb80:	4605      	mov	r5, r0
 801fb82:	7823      	ldrb	r3, [r4, #0]
 801fb84:	f3bf 8f5b 	dmb	ish
 801fb88:	07da      	lsls	r2, r3, #31
 801fb8a:	d40b      	bmi.n	801fba4 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x28>
 801fb8c:	4620      	mov	r0, r4
 801fb8e:	f007 fa9e 	bl	80270ce <__cxa_guard_acquire>
 801fb92:	b138      	cbz	r0, 801fba4 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x28>
 801fb94:	4620      	mov	r0, r4
 801fb96:	f007 faa6 	bl	80270e6 <__cxa_guard_release>
 801fb9a:	4a0f      	ldr	r2, [pc, #60]	; (801fbd8 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x5c>)
 801fb9c:	490f      	ldr	r1, [pc, #60]	; (801fbdc <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x60>)
 801fb9e:	4810      	ldr	r0, [pc, #64]	; (801fbe0 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x64>)
 801fba0:	f007 fa8e 	bl	80270c0 <__aeabi_atexit>
 801fba4:	4c0f      	ldr	r4, [pc, #60]	; (801fbe4 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x68>)
 801fba6:	7823      	ldrb	r3, [r4, #0]
 801fba8:	f3bf 8f5b 	dmb	ish
 801fbac:	07db      	lsls	r3, r3, #31
 801fbae:	d40b      	bmi.n	801fbc8 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x4c>
 801fbb0:	4620      	mov	r0, r4
 801fbb2:	f007 fa8c 	bl	80270ce <__cxa_guard_acquire>
 801fbb6:	b138      	cbz	r0, 801fbc8 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x4c>
 801fbb8:	4620      	mov	r0, r4
 801fbba:	f007 fa94 	bl	80270e6 <__cxa_guard_release>
 801fbbe:	4a06      	ldr	r2, [pc, #24]	; (801fbd8 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x5c>)
 801fbc0:	4909      	ldr	r1, [pc, #36]	; (801fbe8 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x6c>)
 801fbc2:	480a      	ldr	r0, [pc, #40]	; (801fbec <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x70>)
 801fbc4:	f007 fa7c 	bl	80270c0 <__aeabi_atexit>
 801fbc8:	4b05      	ldr	r3, [pc, #20]	; (801fbe0 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x64>)
 801fbca:	642b      	str	r3, [r5, #64]	; 0x40
 801fbcc:	4b07      	ldr	r3, [pc, #28]	; (801fbec <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x70>)
 801fbce:	646b      	str	r3, [r5, #68]	; 0x44
 801fbd0:	bd38      	pop	{r3, r4, r5, pc}
 801fbd2:	bf00      	nop
 801fbd4:	200058c8 	.word	0x200058c8
 801fbd8:	20000000 	.word	0x20000000
 801fbdc:	0801dd8b 	.word	0x0801dd8b
 801fbe0:	200001a8 	.word	0x200001a8
 801fbe4:	200058cc 	.word	0x200058cc
 801fbe8:	0801dd89 	.word	0x0801dd89
 801fbec:	200001ac 	.word	0x200001ac

0801fbf0 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv>:
 801fbf0:	b538      	push	{r3, r4, r5, lr}
 801fbf2:	4c15      	ldr	r4, [pc, #84]	; (801fc48 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x58>)
 801fbf4:	4605      	mov	r5, r0
 801fbf6:	7823      	ldrb	r3, [r4, #0]
 801fbf8:	f3bf 8f5b 	dmb	ish
 801fbfc:	07da      	lsls	r2, r3, #31
 801fbfe:	d40b      	bmi.n	801fc18 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x28>
 801fc00:	4620      	mov	r0, r4
 801fc02:	f007 fa64 	bl	80270ce <__cxa_guard_acquire>
 801fc06:	b138      	cbz	r0, 801fc18 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x28>
 801fc08:	4620      	mov	r0, r4
 801fc0a:	f007 fa6c 	bl	80270e6 <__cxa_guard_release>
 801fc0e:	4a0f      	ldr	r2, [pc, #60]	; (801fc4c <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x5c>)
 801fc10:	490f      	ldr	r1, [pc, #60]	; (801fc50 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x60>)
 801fc12:	4810      	ldr	r0, [pc, #64]	; (801fc54 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x64>)
 801fc14:	f007 fa54 	bl	80270c0 <__aeabi_atexit>
 801fc18:	4c0f      	ldr	r4, [pc, #60]	; (801fc58 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x68>)
 801fc1a:	7823      	ldrb	r3, [r4, #0]
 801fc1c:	f3bf 8f5b 	dmb	ish
 801fc20:	07db      	lsls	r3, r3, #31
 801fc22:	d40b      	bmi.n	801fc3c <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x4c>
 801fc24:	4620      	mov	r0, r4
 801fc26:	f007 fa52 	bl	80270ce <__cxa_guard_acquire>
 801fc2a:	b138      	cbz	r0, 801fc3c <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x4c>
 801fc2c:	4620      	mov	r0, r4
 801fc2e:	f007 fa5a 	bl	80270e6 <__cxa_guard_release>
 801fc32:	4a06      	ldr	r2, [pc, #24]	; (801fc4c <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x5c>)
 801fc34:	4909      	ldr	r1, [pc, #36]	; (801fc5c <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x6c>)
 801fc36:	480a      	ldr	r0, [pc, #40]	; (801fc60 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x70>)
 801fc38:	f007 fa42 	bl	80270c0 <__aeabi_atexit>
 801fc3c:	4b05      	ldr	r3, [pc, #20]	; (801fc54 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x64>)
 801fc3e:	63ab      	str	r3, [r5, #56]	; 0x38
 801fc40:	4b07      	ldr	r3, [pc, #28]	; (801fc60 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x70>)
 801fc42:	63eb      	str	r3, [r5, #60]	; 0x3c
 801fc44:	bd38      	pop	{r3, r4, r5, pc}
 801fc46:	bf00      	nop
 801fc48:	200058e8 	.word	0x200058e8
 801fc4c:	20000000 	.word	0x20000000
 801fc50:	0801dd8f 	.word	0x0801dd8f
 801fc54:	200001c8 	.word	0x200001c8
 801fc58:	200058ec 	.word	0x200058ec
 801fc5c:	0801dd8d 	.word	0x0801dd8d
 801fc60:	200001cc 	.word	0x200001cc

0801fc64 <_ZN8touchgfx8LCD16bpp25enableTextureMapperRGB565Ev>:
 801fc64:	b510      	push	{r4, lr}
 801fc66:	4604      	mov	r4, r0
 801fc68:	f7ff ff14 	bl	801fa94 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv>
 801fc6c:	4620      	mov	r0, r4
 801fc6e:	f7ff ff85 	bl	801fb7c <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv>
 801fc72:	4620      	mov	r0, r4
 801fc74:	f7ff ff48 	bl	801fb08 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv>
 801fc78:	4620      	mov	r0, r4
 801fc7a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801fc7e:	f7ff bfb7 	b.w	801fbf0 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv>
	...

0801fc84 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>:
 801fc84:	b538      	push	{r3, r4, r5, lr}
 801fc86:	4c15      	ldr	r4, [pc, #84]	; (801fcdc <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x58>)
 801fc88:	4605      	mov	r5, r0
 801fc8a:	7823      	ldrb	r3, [r4, #0]
 801fc8c:	f3bf 8f5b 	dmb	ish
 801fc90:	07da      	lsls	r2, r3, #31
 801fc92:	d40b      	bmi.n	801fcac <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 801fc94:	4620      	mov	r0, r4
 801fc96:	f007 fa1a 	bl	80270ce <__cxa_guard_acquire>
 801fc9a:	b138      	cbz	r0, 801fcac <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 801fc9c:	4620      	mov	r0, r4
 801fc9e:	f007 fa22 	bl	80270e6 <__cxa_guard_release>
 801fca2:	4a0f      	ldr	r2, [pc, #60]	; (801fce0 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 801fca4:	490f      	ldr	r1, [pc, #60]	; (801fce4 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x60>)
 801fca6:	4810      	ldr	r0, [pc, #64]	; (801fce8 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 801fca8:	f007 fa0a 	bl	80270c0 <__aeabi_atexit>
 801fcac:	4c0f      	ldr	r4, [pc, #60]	; (801fcec <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x68>)
 801fcae:	7823      	ldrb	r3, [r4, #0]
 801fcb0:	f3bf 8f5b 	dmb	ish
 801fcb4:	07db      	lsls	r3, r3, #31
 801fcb6:	d40b      	bmi.n	801fcd0 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
 801fcb8:	4620      	mov	r0, r4
 801fcba:	f007 fa08 	bl	80270ce <__cxa_guard_acquire>
 801fcbe:	b138      	cbz	r0, 801fcd0 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
 801fcc0:	4620      	mov	r0, r4
 801fcc2:	f007 fa10 	bl	80270e6 <__cxa_guard_release>
 801fcc6:	4a06      	ldr	r2, [pc, #24]	; (801fce0 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 801fcc8:	4909      	ldr	r1, [pc, #36]	; (801fcf0 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x6c>)
 801fcca:	480a      	ldr	r0, [pc, #40]	; (801fcf4 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
 801fccc:	f007 f9f8 	bl	80270c0 <__aeabi_atexit>
 801fcd0:	4b05      	ldr	r3, [pc, #20]	; (801fce8 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 801fcd2:	662b      	str	r3, [r5, #96]	; 0x60
 801fcd4:	4b07      	ldr	r3, [pc, #28]	; (801fcf4 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
 801fcd6:	666b      	str	r3, [r5, #100]	; 0x64
 801fcd8:	bd38      	pop	{r3, r4, r5, pc}
 801fcda:	bf00      	nop
 801fcdc:	200058d0 	.word	0x200058d0
 801fce0:	20000000 	.word	0x20000000
 801fce4:	0801dd7b 	.word	0x0801dd7b
 801fce8:	200001b0 	.word	0x200001b0
 801fcec:	200058d4 	.word	0x200058d4
 801fcf0:	0801dd79 	.word	0x0801dd79
 801fcf4:	200001b4 	.word	0x200001b4

0801fcf8 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv>:
 801fcf8:	b538      	push	{r3, r4, r5, lr}
 801fcfa:	4c15      	ldr	r4, [pc, #84]	; (801fd50 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x58>)
 801fcfc:	4605      	mov	r5, r0
 801fcfe:	7823      	ldrb	r3, [r4, #0]
 801fd00:	f3bf 8f5b 	dmb	ish
 801fd04:	07da      	lsls	r2, r3, #31
 801fd06:	d40b      	bmi.n	801fd20 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 801fd08:	4620      	mov	r0, r4
 801fd0a:	f007 f9e0 	bl	80270ce <__cxa_guard_acquire>
 801fd0e:	b138      	cbz	r0, 801fd20 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 801fd10:	4620      	mov	r0, r4
 801fd12:	f007 f9e8 	bl	80270e6 <__cxa_guard_release>
 801fd16:	4a0f      	ldr	r2, [pc, #60]	; (801fd54 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 801fd18:	490f      	ldr	r1, [pc, #60]	; (801fd58 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x60>)
 801fd1a:	4810      	ldr	r0, [pc, #64]	; (801fd5c <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 801fd1c:	f007 f9d0 	bl	80270c0 <__aeabi_atexit>
 801fd20:	4c0f      	ldr	r4, [pc, #60]	; (801fd60 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x68>)
 801fd22:	7823      	ldrb	r3, [r4, #0]
 801fd24:	f3bf 8f5b 	dmb	ish
 801fd28:	07db      	lsls	r3, r3, #31
 801fd2a:	d40b      	bmi.n	801fd44 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
 801fd2c:	4620      	mov	r0, r4
 801fd2e:	f007 f9ce 	bl	80270ce <__cxa_guard_acquire>
 801fd32:	b138      	cbz	r0, 801fd44 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
 801fd34:	4620      	mov	r0, r4
 801fd36:	f007 f9d6 	bl	80270e6 <__cxa_guard_release>
 801fd3a:	4a06      	ldr	r2, [pc, #24]	; (801fd54 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 801fd3c:	4909      	ldr	r1, [pc, #36]	; (801fd64 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x6c>)
 801fd3e:	480a      	ldr	r0, [pc, #40]	; (801fd68 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
 801fd40:	f007 f9be 	bl	80270c0 <__aeabi_atexit>
 801fd44:	4b05      	ldr	r3, [pc, #20]	; (801fd5c <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 801fd46:	65ab      	str	r3, [r5, #88]	; 0x58
 801fd48:	4b07      	ldr	r3, [pc, #28]	; (801fd68 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
 801fd4a:	65eb      	str	r3, [r5, #92]	; 0x5c
 801fd4c:	bd38      	pop	{r3, r4, r5, pc}
 801fd4e:	bf00      	nop
 801fd50:	200058a8 	.word	0x200058a8
 801fd54:	20000000 	.word	0x20000000
 801fd58:	0801dd7f 	.word	0x0801dd7f
 801fd5c:	20000188 	.word	0x20000188
 801fd60:	200058ac 	.word	0x200058ac
 801fd64:	0801dd7d 	.word	0x0801dd7d
 801fd68:	2000018c 	.word	0x2000018c

0801fd6c <_ZN8touchgfx8LCD16bpp27enableTextureMapperARGB8888Ev>:
 801fd6c:	b510      	push	{r4, lr}
 801fd6e:	4604      	mov	r4, r0
 801fd70:	f7ff ff88 	bl	801fc84 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>
 801fd74:	4620      	mov	r0, r4
 801fd76:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801fd7a:	f7ff bfbd 	b.w	801fcf8 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv>
	...

0801fd80 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv>:
 801fd80:	b538      	push	{r3, r4, r5, lr}
 801fd82:	4c15      	ldr	r4, [pc, #84]	; (801fdd8 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x58>)
 801fd84:	4605      	mov	r5, r0
 801fd86:	7823      	ldrb	r3, [r4, #0]
 801fd88:	f3bf 8f5b 	dmb	ish
 801fd8c:	07da      	lsls	r2, r3, #31
 801fd8e:	d40b      	bmi.n	801fda8 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 801fd90:	4620      	mov	r0, r4
 801fd92:	f007 f99c 	bl	80270ce <__cxa_guard_acquire>
 801fd96:	b138      	cbz	r0, 801fda8 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 801fd98:	4620      	mov	r0, r4
 801fd9a:	f007 f9a4 	bl	80270e6 <__cxa_guard_release>
 801fd9e:	4a0f      	ldr	r2, [pc, #60]	; (801fddc <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 801fda0:	490f      	ldr	r1, [pc, #60]	; (801fde0 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x60>)
 801fda2:	4810      	ldr	r0, [pc, #64]	; (801fde4 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 801fda4:	f007 f98c 	bl	80270c0 <__aeabi_atexit>
 801fda8:	4c0f      	ldr	r4, [pc, #60]	; (801fde8 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x68>)
 801fdaa:	7823      	ldrb	r3, [r4, #0]
 801fdac:	f3bf 8f5b 	dmb	ish
 801fdb0:	07db      	lsls	r3, r3, #31
 801fdb2:	d40b      	bmi.n	801fdcc <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 801fdb4:	4620      	mov	r0, r4
 801fdb6:	f007 f98a 	bl	80270ce <__cxa_guard_acquire>
 801fdba:	b138      	cbz	r0, 801fdcc <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 801fdbc:	4620      	mov	r0, r4
 801fdbe:	f007 f992 	bl	80270e6 <__cxa_guard_release>
 801fdc2:	4a06      	ldr	r2, [pc, #24]	; (801fddc <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 801fdc4:	4909      	ldr	r1, [pc, #36]	; (801fdec <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x6c>)
 801fdc6:	480a      	ldr	r0, [pc, #40]	; (801fdf0 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 801fdc8:	f007 f97a 	bl	80270c0 <__aeabi_atexit>
 801fdcc:	4b05      	ldr	r3, [pc, #20]	; (801fde4 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 801fdce:	672b      	str	r3, [r5, #112]	; 0x70
 801fdd0:	4b07      	ldr	r3, [pc, #28]	; (801fdf0 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 801fdd2:	676b      	str	r3, [r5, #116]	; 0x74
 801fdd4:	bd38      	pop	{r3, r4, r5, pc}
 801fdd6:	bf00      	nop
 801fdd8:	200058a0 	.word	0x200058a0
 801fddc:	20000000 	.word	0x20000000
 801fde0:	0801dd73 	.word	0x0801dd73
 801fde4:	20000180 	.word	0x20000180
 801fde8:	200058a4 	.word	0x200058a4
 801fdec:	0801dd71 	.word	0x0801dd71
 801fdf0:	20000184 	.word	0x20000184

0801fdf4 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv>:
 801fdf4:	b538      	push	{r3, r4, r5, lr}
 801fdf6:	4c15      	ldr	r4, [pc, #84]	; (801fe4c <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x58>)
 801fdf8:	4605      	mov	r5, r0
 801fdfa:	7823      	ldrb	r3, [r4, #0]
 801fdfc:	f3bf 8f5b 	dmb	ish
 801fe00:	07da      	lsls	r2, r3, #31
 801fe02:	d40b      	bmi.n	801fe1c <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 801fe04:	4620      	mov	r0, r4
 801fe06:	f007 f962 	bl	80270ce <__cxa_guard_acquire>
 801fe0a:	b138      	cbz	r0, 801fe1c <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 801fe0c:	4620      	mov	r0, r4
 801fe0e:	f007 f96a 	bl	80270e6 <__cxa_guard_release>
 801fe12:	4a0f      	ldr	r2, [pc, #60]	; (801fe50 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 801fe14:	490f      	ldr	r1, [pc, #60]	; (801fe54 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x60>)
 801fe16:	4810      	ldr	r0, [pc, #64]	; (801fe58 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 801fe18:	f007 f952 	bl	80270c0 <__aeabi_atexit>
 801fe1c:	4c0f      	ldr	r4, [pc, #60]	; (801fe5c <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x68>)
 801fe1e:	7823      	ldrb	r3, [r4, #0]
 801fe20:	f3bf 8f5b 	dmb	ish
 801fe24:	07db      	lsls	r3, r3, #31
 801fe26:	d40b      	bmi.n	801fe40 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 801fe28:	4620      	mov	r0, r4
 801fe2a:	f007 f950 	bl	80270ce <__cxa_guard_acquire>
 801fe2e:	b138      	cbz	r0, 801fe40 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 801fe30:	4620      	mov	r0, r4
 801fe32:	f007 f958 	bl	80270e6 <__cxa_guard_release>
 801fe36:	4a06      	ldr	r2, [pc, #24]	; (801fe50 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 801fe38:	4909      	ldr	r1, [pc, #36]	; (801fe60 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x6c>)
 801fe3a:	480a      	ldr	r0, [pc, #40]	; (801fe64 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 801fe3c:	f007 f940 	bl	80270c0 <__aeabi_atexit>
 801fe40:	4b05      	ldr	r3, [pc, #20]	; (801fe58 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 801fe42:	66ab      	str	r3, [r5, #104]	; 0x68
 801fe44:	4b07      	ldr	r3, [pc, #28]	; (801fe64 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 801fe46:	66eb      	str	r3, [r5, #108]	; 0x6c
 801fe48:	bd38      	pop	{r3, r4, r5, pc}
 801fe4a:	bf00      	nop
 801fe4c:	20005898 	.word	0x20005898
 801fe50:	20000000 	.word	0x20000000
 801fe54:	0801dd77 	.word	0x0801dd77
 801fe58:	20000178 	.word	0x20000178
 801fe5c:	2000589c 	.word	0x2000589c
 801fe60:	0801dd75 	.word	0x0801dd75
 801fe64:	2000017c 	.word	0x2000017c

0801fe68 <_ZN8touchgfx8LCD16bpp21enableTextureMapperA4Ev>:
 801fe68:	b510      	push	{r4, lr}
 801fe6a:	4604      	mov	r4, r0
 801fe6c:	f7ff ff88 	bl	801fd80 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv>
 801fe70:	4620      	mov	r0, r4
 801fe72:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801fe76:	f7ff bfbd 	b.w	801fdf4 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv>

0801fe7a <_ZN8touchgfx8LCD16bpp22enableTextureMapperAllEv>:
 801fe7a:	b510      	push	{r4, lr}
 801fe7c:	4604      	mov	r4, r0
 801fe7e:	f7ff fff3 	bl	801fe68 <_ZN8touchgfx8LCD16bpp21enableTextureMapperA4Ev>
 801fe82:	4620      	mov	r0, r4
 801fe84:	f7ff ff72 	bl	801fd6c <_ZN8touchgfx8LCD16bpp27enableTextureMapperARGB8888Ev>
 801fe88:	4620      	mov	r0, r4
 801fe8a:	f7ff fdf9 	bl	801fa80 <_ZN8touchgfx8LCD16bpp30enableTextureMapperL8_ARGB8888Ev>
 801fe8e:	4620      	mov	r0, r4
 801fe90:	f7ff fcfa 	bl	801f888 <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB565Ev>
 801fe94:	4620      	mov	r0, r4
 801fe96:	f7ff fd75 	bl	801f984 <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB888Ev>
 801fe9a:	4620      	mov	r0, r4
 801fe9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801fea0:	f7ff bee0 	b.w	801fc64 <_ZN8touchgfx8LCD16bpp25enableTextureMapperRGB565Ev>

0801fea4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh>:
 801fea4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fea8:	e9dd 4e0c 	ldrd	r4, lr, [sp, #48]	; 0x30
 801feac:	f9bd 8028 	ldrsh.w	r8, [sp, #40]	; 0x28
 801feb0:	f1be 0f00 	cmp.w	lr, #0
 801feb4:	f9bd b02c 	ldrsh.w	fp, [sp, #44]	; 0x2c
 801feb8:	fb0e 4708 	mla	r7, lr, r8, r4
 801febc:	f89d 6038 	ldrb.w	r6, [sp, #56]	; 0x38
 801fec0:	f89d c03c 	ldrb.w	ip, [sp, #60]	; 0x3c
 801fec4:	f89d 5040 	ldrb.w	r5, [sp, #64]	; 0x40
 801fec8:	eb02 0a07 	add.w	sl, r2, r7
 801fecc:	8808      	ldrh	r0, [r1, #0]
 801fece:	db37      	blt.n	801ff40 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x9c>
 801fed0:	45f3      	cmp	fp, lr
 801fed2:	dd35      	ble.n	801ff40 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x9c>
 801fed4:	2c00      	cmp	r4, #0
 801fed6:	db31      	blt.n	801ff3c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x98>
 801fed8:	45a0      	cmp	r8, r4
 801feda:	dd2f      	ble.n	801ff3c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x98>
 801fedc:	5dd2      	ldrb	r2, [r2, r7]
 801fede:	f833 9012 	ldrh.w	r9, [r3, r2, lsl #1]
 801fee2:	1c62      	adds	r2, r4, #1
 801fee4:	d42f      	bmi.n	801ff46 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xa2>
 801fee6:	4590      	cmp	r8, r2
 801fee8:	dd2d      	ble.n	801ff46 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xa2>
 801feea:	b366      	cbz	r6, 801ff46 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xa2>
 801feec:	f89a 2001 	ldrb.w	r2, [sl, #1]
 801fef0:	f833 7012 	ldrh.w	r7, [r3, r2, lsl #1]
 801fef4:	f11e 0e01 	adds.w	lr, lr, #1
 801fef8:	d429      	bmi.n	801ff4e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xaa>
 801fefa:	45f3      	cmp	fp, lr
 801fefc:	dd27      	ble.n	801ff4e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xaa>
 801fefe:	f1bc 0f00 	cmp.w	ip, #0
 801ff02:	f000 80a0 	beq.w	8020046 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x1a2>
 801ff06:	2c00      	cmp	r4, #0
 801ff08:	db1f      	blt.n	801ff4a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xa6>
 801ff0a:	45a0      	cmp	r8, r4
 801ff0c:	dd1d      	ble.n	801ff4a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xa6>
 801ff0e:	f81a 2008 	ldrb.w	r2, [sl, r8]
 801ff12:	f833 e012 	ldrh.w	lr, [r3, r2, lsl #1]
 801ff16:	3401      	adds	r4, #1
 801ff18:	d41c      	bmi.n	801ff54 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xb0>
 801ff1a:	45a0      	cmp	r8, r4
 801ff1c:	dd1a      	ble.n	801ff54 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xb0>
 801ff1e:	b1de      	cbz	r6, 801ff58 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xb4>
 801ff20:	44d0      	add	r8, sl
 801ff22:	f898 2001 	ldrb.w	r2, [r8, #1]
 801ff26:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 801ff2a:	2e0f      	cmp	r6, #15
 801ff2c:	d915      	bls.n	801ff5a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xb6>
 801ff2e:	4b49      	ldr	r3, [pc, #292]	; (8020054 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x1b0>)
 801ff30:	f240 11ef 	movw	r1, #495	; 0x1ef
 801ff34:	4a48      	ldr	r2, [pc, #288]	; (8020058 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x1b4>)
 801ff36:	4849      	ldr	r0, [pc, #292]	; (802005c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x1b8>)
 801ff38:	f007 f8f6 	bl	8027128 <__assert_func>
 801ff3c:	4681      	mov	r9, r0
 801ff3e:	e7d0      	b.n	801fee2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x3e>
 801ff40:	4607      	mov	r7, r0
 801ff42:	4681      	mov	r9, r0
 801ff44:	e7d6      	b.n	801fef4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x50>
 801ff46:	4607      	mov	r7, r0
 801ff48:	e7d4      	b.n	801fef4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x50>
 801ff4a:	4686      	mov	lr, r0
 801ff4c:	e7e3      	b.n	801ff16 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x72>
 801ff4e:	4603      	mov	r3, r0
 801ff50:	4686      	mov	lr, r0
 801ff52:	e7ea      	b.n	801ff2a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x86>
 801ff54:	4603      	mov	r3, r0
 801ff56:	e7e8      	b.n	801ff2a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x86>
 801ff58:	4603      	mov	r3, r0
 801ff5a:	f1bc 0f0f 	cmp.w	ip, #15
 801ff5e:	d8e6      	bhi.n	801ff2e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x8a>
 801ff60:	fb16 f80c 	smulbb	r8, r6, ip
 801ff64:	ea4f 4409 	mov.w	r4, r9, lsl #16
 801ff68:	ea4f 4a07 	mov.w	sl, r7, lsl #16
 801ff6c:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 801ff70:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
 801ff74:	ea4f 08e8 	mov.w	r8, r8, asr #3
 801ff78:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 801ff7c:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
 801ff80:	ea44 0909 	orr.w	r9, r4, r9
 801ff84:	f1cc 0410 	rsb	r4, ip, #16
 801ff88:	041a      	lsls	r2, r3, #16
 801ff8a:	ea4a 0707 	orr.w	r7, sl, r7
 801ff8e:	1ba4      	subs	r4, r4, r6
 801ff90:	ebc8 0646 	rsb	r6, r8, r6, lsl #1
 801ff94:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 801ff98:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 801ff9c:	4377      	muls	r7, r6
 801ff9e:	eb08 0444 	add.w	r4, r8, r4, lsl #1
 801ffa2:	4313      	orrs	r3, r2
 801ffa4:	ea4f 420e 	mov.w	r2, lr, lsl #16
 801ffa8:	fb04 7409 	mla	r4, r4, r9, r7
 801ffac:	ebc8 0c4c 	rsb	ip, r8, ip, lsl #1
 801ffb0:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 801ffb4:	b2af      	uxth	r7, r5
 801ffb6:	fb08 4303 	mla	r3, r8, r3, r4
 801ffba:	f42e 64fc 	bic.w	r4, lr, #2016	; 0x7e0
 801ffbe:	43ed      	mvns	r5, r5
 801ffc0:	10c6      	asrs	r6, r0, #3
 801ffc2:	4322      	orrs	r2, r4
 801ffc4:	b2ed      	uxtb	r5, r5
 801ffc6:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801ffca:	fb0c 3202 	mla	r2, ip, r2, r3
 801ffce:	fb16 f605 	smulbb	r6, r6, r5
 801ffd2:	0d53      	lsrs	r3, r2, #21
 801ffd4:	0952      	lsrs	r2, r2, #5
 801ffd6:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801ffda:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 801ffde:	431a      	orrs	r2, r3
 801ffe0:	b293      	uxth	r3, r2
 801ffe2:	1202      	asrs	r2, r0, #8
 801ffe4:	ea4f 2c23 	mov.w	ip, r3, asr #8
 801ffe8:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 801ffec:	00dc      	lsls	r4, r3, #3
 801ffee:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801fff2:	fb12 f205 	smulbb	r2, r2, r5
 801fff6:	b2e4      	uxtb	r4, r4
 801fff8:	fb0c 2c07 	mla	ip, ip, r7, r2
 801fffc:	10da      	asrs	r2, r3, #3
 801fffe:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 8020002:	fa1f fc8c 	uxth.w	ip, ip
 8020006:	fb02 6207 	mla	r2, r2, r7, r6
 802000a:	f10c 0301 	add.w	r3, ip, #1
 802000e:	b296      	uxth	r6, r2
 8020010:	00c2      	lsls	r2, r0, #3
 8020012:	eb03 231c 	add.w	r3, r3, ip, lsr #8
 8020016:	b2d2      	uxtb	r2, r2
 8020018:	f403 4378 	and.w	r3, r3, #63488	; 0xf800
 802001c:	fb12 f205 	smulbb	r2, r2, r5
 8020020:	fb04 2207 	mla	r2, r4, r7, r2
 8020024:	b292      	uxth	r2, r2
 8020026:	1c50      	adds	r0, r2, #1
 8020028:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 802002c:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 8020030:	4313      	orrs	r3, r2
 8020032:	1c72      	adds	r2, r6, #1
 8020034:	eb02 2216 	add.w	r2, r2, r6, lsr #8
 8020038:	0952      	lsrs	r2, r2, #5
 802003a:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 802003e:	4313      	orrs	r3, r2
 8020040:	800b      	strh	r3, [r1, #0]
 8020042:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020046:	2e0f      	cmp	r6, #15
 8020048:	f63f af71 	bhi.w	801ff2e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x8a>
 802004c:	4603      	mov	r3, r0
 802004e:	4686      	mov	lr, r0
 8020050:	e786      	b.n	801ff60 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xbc>
 8020052:	bf00      	nop
 8020054:	0802b942 	.word	0x0802b942
 8020058:	0802bfae 	.word	0x0802bfae
 802005c:	0802ba2b 	.word	0x0802ba2b

08020060 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8020060:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020064:	ed2d 8b08 	vpush	{d8-d11}
 8020068:	b099      	sub	sp, #100	; 0x64
 802006a:	eeb0 aa40 	vmov.f32	s20, s0
 802006e:	eef0 9a60 	vmov.f32	s19, s1
 8020072:	9215      	str	r2, [sp, #84]	; 0x54
 8020074:	eeb0 9a41 	vmov.f32	s18, s2
 8020078:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 802007a:	eeb0 8a62 	vmov.f32	s16, s5
 802007e:	9309      	str	r3, [sp, #36]	; 0x24
 8020080:	eef0 8a43 	vmov.f32	s17, s6
 8020084:	f89d 30cc 	ldrb.w	r3, [sp, #204]	; 0xcc
 8020088:	eef0 ba44 	vmov.f32	s23, s8
 802008c:	9016      	str	r0, [sp, #88]	; 0x58
 802008e:	eeb0 ba64 	vmov.f32	s22, s9
 8020092:	930d      	str	r3, [sp, #52]	; 0x34
 8020094:	eef0 aa45 	vmov.f32	s21, s10
 8020098:	6850      	ldr	r0, [r2, #4]
 802009a:	910c      	str	r1, [sp, #48]	; 0x30
 802009c:	6812      	ldr	r2, [r2, #0]
 802009e:	e9dd 1330 	ldrd	r1, r3, [sp, #192]	; 0xc0
 80200a2:	e9dd a52b 	ldrd	sl, r5, [sp, #172]	; 0xac
 80200a6:	fb00 1303 	mla	r3, r0, r3, r1
 80200aa:	eb02 0843 	add.w	r8, r2, r3, lsl #1
 80200ae:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 80200b0:	681b      	ldr	r3, [r3, #0]
 80200b2:	930b      	str	r3, [sp, #44]	; 0x2c
 80200b4:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 80200b6:	685e      	ldr	r6, [r3, #4]
 80200b8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80200ba:	3604      	adds	r6, #4
 80200bc:	43db      	mvns	r3, r3
 80200be:	b2db      	uxtb	r3, r3
 80200c0:	930a      	str	r3, [sp, #40]	; 0x28
 80200c2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80200c4:	2b00      	cmp	r3, #0
 80200c6:	dc03      	bgt.n	80200d0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 80200c8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80200ca:	2b00      	cmp	r3, #0
 80200cc:	f340 8226 	ble.w	802051c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4bc>
 80200d0:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 80200d2:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80200d6:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80200da:	1e48      	subs	r0, r1, #1
 80200dc:	1e57      	subs	r7, r2, #1
 80200de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80200e0:	2b00      	cmp	r3, #0
 80200e2:	f340 80e4 	ble.w	80202ae <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x24e>
 80200e6:	ea5f 4c2a 	movs.w	ip, sl, asr #16
 80200ea:	ea4f 4325 	mov.w	r3, r5, asr #16
 80200ee:	d406      	bmi.n	80200fe <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 80200f0:	4584      	cmp	ip, r0
 80200f2:	da04      	bge.n	80200fe <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 80200f4:	2b00      	cmp	r3, #0
 80200f6:	db02      	blt.n	80200fe <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 80200f8:	42bb      	cmp	r3, r7
 80200fa:	f2c0 80d9 	blt.w	80202b0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x250>
 80200fe:	f11c 0c01 	adds.w	ip, ip, #1
 8020102:	f100 80ca 	bmi.w	802029a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x23a>
 8020106:	4561      	cmp	r1, ip
 8020108:	f2c0 80c7 	blt.w	802029a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x23a>
 802010c:	3301      	adds	r3, #1
 802010e:	f100 80c4 	bmi.w	802029a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x23a>
 8020112:	429a      	cmp	r2, r3
 8020114:	f2c0 80c1 	blt.w	802029a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x23a>
 8020118:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 802011c:	4647      	mov	r7, r8
 802011e:	f1bb 0f00 	cmp.w	fp, #0
 8020122:	f340 80e4 	ble.w	80202ee <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28e>
 8020126:	9a32      	ldr	r2, [sp, #200]	; 0xc8
 8020128:	ea4f 4c25 	mov.w	ip, r5, asr #16
 802012c:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 802012e:	f3ca 3003 	ubfx	r0, sl, #12, #4
 8020132:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 8020136:	ea5f 422a 	movs.w	r2, sl, asr #16
 802013a:	f3c5 3103 	ubfx	r1, r5, #12, #4
 802013e:	689b      	ldr	r3, [r3, #8]
 8020140:	f100 8122 	bmi.w	8020388 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x328>
 8020144:	f103 39ff 	add.w	r9, r3, #4294967295
 8020148:	454a      	cmp	r2, r9
 802014a:	f280 811d 	bge.w	8020388 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x328>
 802014e:	f1bc 0f00 	cmp.w	ip, #0
 8020152:	f2c0 8119 	blt.w	8020388 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x328>
 8020156:	f10e 39ff 	add.w	r9, lr, #4294967295
 802015a:	45cc      	cmp	ip, r9
 802015c:	f280 8114 	bge.w	8020388 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x328>
 8020160:	b21b      	sxth	r3, r3
 8020162:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8020164:	fb0c 2203 	mla	r2, ip, r3, r2
 8020168:	eb04 0902 	add.w	r9, r4, r2
 802016c:	5ca2      	ldrb	r2, [r4, r2]
 802016e:	f836 e012 	ldrh.w	lr, [r6, r2, lsl #1]
 8020172:	2800      	cmp	r0, #0
 8020174:	f000 80ff 	beq.w	8020376 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x316>
 8020178:	f899 2001 	ldrb.w	r2, [r9, #1]
 802017c:	f836 2012 	ldrh.w	r2, [r6, r2, lsl #1]
 8020180:	9211      	str	r2, [sp, #68]	; 0x44
 8020182:	b151      	cbz	r1, 802019a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 8020184:	eb09 0203 	add.w	r2, r9, r3
 8020188:	f819 3003 	ldrb.w	r3, [r9, r3]
 802018c:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 8020190:	930f      	str	r3, [sp, #60]	; 0x3c
 8020192:	7853      	ldrb	r3, [r2, #1]
 8020194:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 8020198:	9312      	str	r3, [sp, #72]	; 0x48
 802019a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 802019c:	fb10 f201 	smulbb	r2, r0, r1
 80201a0:	9c12      	ldr	r4, [sp, #72]	; 0x48
 80201a2:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 80201a6:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 80201aa:	f424 64fc 	bic.w	r4, r4, #2016	; 0x7e0
 80201ae:	10d2      	asrs	r2, r2, #3
 80201b0:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 80201b4:	ebc2 0940 	rsb	r9, r2, r0, lsl #1
 80201b8:	ea4c 0c03 	orr.w	ip, ip, r3
 80201bc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80201be:	041b      	lsls	r3, r3, #16
 80201c0:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 80201c4:	4323      	orrs	r3, r4
 80201c6:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80201c8:	4353      	muls	r3, r2
 80201ca:	fb09 330c 	mla	r3, r9, ip, r3
 80201ce:	ea4f 4c0e 	mov.w	ip, lr, lsl #16
 80201d2:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 80201d6:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 80201da:	ea4c 0e0e 	orr.w	lr, ip, lr
 80201de:	f1c1 0c10 	rsb	ip, r1, #16
 80201e2:	ebac 0c00 	sub.w	ip, ip, r0
 80201e6:	eb02 0c4c 	add.w	ip, r2, ip, lsl #1
 80201ea:	ebc2 0241 	rsb	r2, r2, r1, lsl #1
 80201ee:	fb0c 3c0e 	mla	ip, ip, lr, r3
 80201f2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80201f4:	0418      	lsls	r0, r3, #16
 80201f6:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 80201fa:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 80201fe:	4318      	orrs	r0, r3
 8020200:	fb02 c200 	mla	r2, r2, r0, ip
 8020204:	f8b7 c000 	ldrh.w	ip, [r7]
 8020208:	0d53      	lsrs	r3, r2, #21
 802020a:	0952      	lsrs	r2, r2, #5
 802020c:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8020210:	ea4f 212c 	mov.w	r1, ip, asr #8
 8020214:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8020218:	ea4f 0eec 	mov.w	lr, ip, asr #3
 802021c:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 8020220:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8020224:	431a      	orrs	r2, r3
 8020226:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
 802022a:	fb11 f104 	smulbb	r1, r1, r4
 802022e:	fa5f fc8c 	uxtb.w	ip, ip
 8020232:	b292      	uxth	r2, r2
 8020234:	f00e 0efc 	and.w	lr, lr, #252	; 0xfc
 8020238:	fb1c fc04 	smulbb	ip, ip, r4
 802023c:	fb1e fe04 	smulbb	lr, lr, r4
 8020240:	1210      	asrs	r0, r2, #8
 8020242:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8020246:	fb00 1003 	mla	r0, r0, r3, r1
 802024a:	10d1      	asrs	r1, r2, #3
 802024c:	00d2      	lsls	r2, r2, #3
 802024e:	b280      	uxth	r0, r0
 8020250:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 8020254:	b2d2      	uxtb	r2, r2
 8020256:	fb01 e103 	mla	r1, r1, r3, lr
 802025a:	fb02 c203 	mla	r2, r2, r3, ip
 802025e:	1c43      	adds	r3, r0, #1
 8020260:	b289      	uxth	r1, r1
 8020262:	b292      	uxth	r2, r2
 8020264:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 8020268:	f102 0c01 	add.w	ip, r2, #1
 802026c:	f403 4378 	and.w	r3, r3, #63488	; 0xf800
 8020270:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 8020274:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 8020278:	4313      	orrs	r3, r2
 802027a:	1c4a      	adds	r2, r1, #1
 802027c:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 8020280:	0949      	lsrs	r1, r1, #5
 8020282:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8020286:	430b      	orrs	r3, r1
 8020288:	803b      	strh	r3, [r7, #0]
 802028a:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 802028c:	3702      	adds	r7, #2
 802028e:	f10b 3bff 	add.w	fp, fp, #4294967295
 8020292:	449a      	add	sl, r3
 8020294:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8020296:	441d      	add	r5, r3
 8020298:	e741      	b.n	802011e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xbe>
 802029a:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 802029c:	f108 0802 	add.w	r8, r8, #2
 80202a0:	449a      	add	sl, r3
 80202a2:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80202a4:	441d      	add	r5, r3
 80202a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80202a8:	3b01      	subs	r3, #1
 80202aa:	9309      	str	r3, [sp, #36]	; 0x24
 80202ac:	e717      	b.n	80200de <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 80202ae:	d023      	beq.n	80202f8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x298>
 80202b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80202b2:	982d      	ldr	r0, [sp, #180]	; 0xb4
 80202b4:	3b01      	subs	r3, #1
 80202b6:	fb00 a003 	mla	r0, r0, r3, sl
 80202ba:	1400      	asrs	r0, r0, #16
 80202bc:	f53f af2c 	bmi.w	8020118 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb8>
 80202c0:	3901      	subs	r1, #1
 80202c2:	4288      	cmp	r0, r1
 80202c4:	f6bf af28 	bge.w	8020118 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb8>
 80202c8:	992e      	ldr	r1, [sp, #184]	; 0xb8
 80202ca:	fb01 5303 	mla	r3, r1, r3, r5
 80202ce:	141b      	asrs	r3, r3, #16
 80202d0:	f53f af22 	bmi.w	8020118 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb8>
 80202d4:	3a01      	subs	r2, #1
 80202d6:	4293      	cmp	r3, r2
 80202d8:	f6bf af1e 	bge.w	8020118 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb8>
 80202dc:	f8dd e024 	ldr.w	lr, [sp, #36]	; 0x24
 80202e0:	f8bd 9034 	ldrh.w	r9, [sp, #52]	; 0x34
 80202e4:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 80202e8:	f1be 0f00 	cmp.w	lr, #0
 80202ec:	dc6c      	bgt.n	80203c8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x368>
 80202ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80202f0:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 80202f4:	eb08 0844 	add.w	r8, r8, r4, lsl #1
 80202f8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80202fa:	2b00      	cmp	r3, #0
 80202fc:	f340 810e 	ble.w	802051c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4bc>
 8020300:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8020304:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8020306:	ee3a aa2b 	vadd.f32	s20, s20, s23
 802030a:	ee79 9a8b 	vadd.f32	s19, s19, s22
 802030e:	eef0 6a48 	vmov.f32	s13, s16
 8020312:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8020316:	ee39 9a2a 	vadd.f32	s18, s18, s21
 802031a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802031e:	ee16 aa90 	vmov	sl, s13
 8020322:	eef0 6a68 	vmov.f32	s13, s17
 8020326:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802032a:	ee16 5a90 	vmov	r5, s13
 802032e:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8020332:	ee69 7a27 	vmul.f32	s15, s18, s15
 8020336:	ee37 8a48 	vsub.f32	s16, s14, s16
 802033a:	ee77 8ae8 	vsub.f32	s17, s15, s17
 802033e:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8020342:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8020346:	ee18 2a10 	vmov	r2, s16
 802034a:	eeb0 8a47 	vmov.f32	s16, s14
 802034e:	fb92 f3f3 	sdiv	r3, r2, r3
 8020352:	ee18 2a90 	vmov	r2, s17
 8020356:	932d      	str	r3, [sp, #180]	; 0xb4
 8020358:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 802035a:	eef0 8a67 	vmov.f32	s17, s15
 802035e:	fb92 f3f3 	sdiv	r3, r2, r3
 8020362:	932e      	str	r3, [sp, #184]	; 0xb8
 8020364:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8020366:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8020368:	3b01      	subs	r3, #1
 802036a:	930c      	str	r3, [sp, #48]	; 0x30
 802036c:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 802036e:	bf08      	it	eq
 8020370:	4613      	moveq	r3, r2
 8020372:	9309      	str	r3, [sp, #36]	; 0x24
 8020374:	e6a5      	b.n	80200c2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 8020376:	2900      	cmp	r1, #0
 8020378:	f43f af0f 	beq.w	802019a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 802037c:	f819 3003 	ldrb.w	r3, [r9, r3]
 8020380:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 8020384:	930f      	str	r3, [sp, #60]	; 0x3c
 8020386:	e708      	b.n	802019a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 8020388:	f112 0901 	adds.w	r9, r2, #1
 802038c:	f53f af7d 	bmi.w	802028a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22a>
 8020390:	454b      	cmp	r3, r9
 8020392:	f6ff af7a 	blt.w	802028a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22a>
 8020396:	f11c 0901 	adds.w	r9, ip, #1
 802039a:	f53f af76 	bmi.w	802028a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22a>
 802039e:	45ce      	cmp	lr, r9
 80203a0:	f6ff af73 	blt.w	802028a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22a>
 80203a4:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 80203a6:	b21b      	sxth	r3, r3
 80203a8:	9202      	str	r2, [sp, #8]
 80203aa:	fa0f f28e 	sxth.w	r2, lr
 80203ae:	9300      	str	r3, [sp, #0]
 80203b0:	4633      	mov	r3, r6
 80203b2:	9201      	str	r2, [sp, #4]
 80203b4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80203b6:	e9cd 1405 	strd	r1, r4, [sp, #20]
 80203ba:	e9cd c003 	strd	ip, r0, [sp, #12]
 80203be:	4639      	mov	r1, r7
 80203c0:	9816      	ldr	r0, [sp, #88]	; 0x58
 80203c2:	f7ff fd6f 	bl	801fea4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh>
 80203c6:	e760      	b.n	802028a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22a>
 80203c8:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 80203ca:	ea4f 422a 	mov.w	r2, sl, asr #16
 80203ce:	1429      	asrs	r1, r5, #16
 80203d0:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80203d2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80203d6:	f3ca 3c03 	ubfx	ip, sl, #12, #4
 80203da:	f3c5 3003 	ubfx	r0, r5, #12, #4
 80203de:	fb03 2101 	mla	r1, r3, r1, r2
 80203e2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80203e4:	440a      	add	r2, r1
 80203e6:	5c61      	ldrb	r1, [r4, r1]
 80203e8:	f836 1011 	ldrh.w	r1, [r6, r1, lsl #1]
 80203ec:	f1bc 0f00 	cmp.w	ip, #0
 80203f0:	f000 808c 	beq.w	802050c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ac>
 80203f4:	7857      	ldrb	r7, [r2, #1]
 80203f6:	f836 4017 	ldrh.w	r4, [r6, r7, lsl #1]
 80203fa:	9413      	str	r4, [sp, #76]	; 0x4c
 80203fc:	b140      	cbz	r0, 8020410 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3b0>
 80203fe:	18d7      	adds	r7, r2, r3
 8020400:	5cd3      	ldrb	r3, [r2, r3]
 8020402:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 8020406:	9310      	str	r3, [sp, #64]	; 0x40
 8020408:	787b      	ldrb	r3, [r7, #1]
 802040a:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 802040e:	9314      	str	r3, [sp, #80]	; 0x50
 8020410:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8020412:	fb1c f200 	smulbb	r2, ip, r0
 8020416:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8020418:	f10e 3eff 	add.w	lr, lr, #4294967295
 802041c:	041f      	lsls	r7, r3, #16
 802041e:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 8020422:	10d2      	asrs	r2, r2, #3
 8020424:	f424 6bfc 	bic.w	fp, r4, #2016	; 0x7e0
 8020428:	f007 67fc 	and.w	r7, r7, #132120576	; 0x7e00000
 802042c:	431f      	orrs	r7, r3
 802042e:	ebc2 034c 	rsb	r3, r2, ip, lsl #1
 8020432:	9317      	str	r3, [sp, #92]	; 0x5c
 8020434:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8020436:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 8020438:	041b      	lsls	r3, r3, #16
 802043a:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 802043e:	ea43 030b 	orr.w	r3, r3, fp
 8020442:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 8020446:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 802044a:	4353      	muls	r3, r2
 802044c:	fb04 3707 	mla	r7, r4, r7, r3
 8020450:	f00b 63fc 	and.w	r3, fp, #132120576	; 0x7e00000
 8020454:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8020456:	ea43 0b01 	orr.w	fp, r3, r1
 802045a:	f1c0 0110 	rsb	r1, r0, #16
 802045e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8020460:	eba1 0c0c 	sub.w	ip, r1, ip
 8020464:	eb02 0c4c 	add.w	ip, r2, ip, lsl #1
 8020468:	ebc2 0240 	rsb	r2, r2, r0, lsl #1
 802046c:	fb0c 770b 	mla	r7, ip, fp, r7
 8020470:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 8020474:	f423 6bfc 	bic.w	fp, r3, #2016	; 0x7e0
 8020478:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 802047c:	ea4c 0c0b 	orr.w	ip, ip, fp
 8020480:	fb02 770c 	mla	r7, r2, ip, r7
 8020484:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8020486:	0d79      	lsrs	r1, r7, #21
 8020488:	8812      	ldrh	r2, [r2, #0]
 802048a:	097f      	lsrs	r7, r7, #5
 802048c:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8020490:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
 8020494:	430f      	orrs	r7, r1
 8020496:	1211      	asrs	r1, r2, #8
 8020498:	b2bb      	uxth	r3, r7
 802049a:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 802049e:	10d7      	asrs	r7, r2, #3
 80204a0:	fb11 f104 	smulbb	r1, r1, r4
 80204a4:	1218      	asrs	r0, r3, #8
 80204a6:	00d2      	lsls	r2, r2, #3
 80204a8:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 80204ac:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 80204b0:	fb17 f704 	smulbb	r7, r7, r4
 80204b4:	b2d2      	uxtb	r2, r2
 80204b6:	fb00 1009 	mla	r0, r0, r9, r1
 80204ba:	10d9      	asrs	r1, r3, #3
 80204bc:	fb12 f204 	smulbb	r2, r2, r4
 80204c0:	00db      	lsls	r3, r3, #3
 80204c2:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 80204c6:	b280      	uxth	r0, r0
 80204c8:	b2db      	uxtb	r3, r3
 80204ca:	fb01 7109 	mla	r1, r1, r9, r7
 80204ce:	fb03 2309 	mla	r3, r3, r9, r2
 80204d2:	1c42      	adds	r2, r0, #1
 80204d4:	b289      	uxth	r1, r1
 80204d6:	b29b      	uxth	r3, r3
 80204d8:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 80204dc:	1c4f      	adds	r7, r1, #1
 80204de:	1c5a      	adds	r2, r3, #1
 80204e0:	eb07 2111 	add.w	r1, r7, r1, lsr #8
 80204e4:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
 80204e8:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 80204ec:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80204ee:	0949      	lsrs	r1, r1, #5
 80204f0:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 80204f4:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 80204f8:	4310      	orrs	r0, r2
 80204fa:	4308      	orrs	r0, r1
 80204fc:	f823 0b02 	strh.w	r0, [r3], #2
 8020500:	930e      	str	r3, [sp, #56]	; 0x38
 8020502:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8020504:	449a      	add	sl, r3
 8020506:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8020508:	441d      	add	r5, r3
 802050a:	e6ed      	b.n	80202e8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x288>
 802050c:	2800      	cmp	r0, #0
 802050e:	f43f af7f 	beq.w	8020410 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3b0>
 8020512:	5cd3      	ldrb	r3, [r2, r3]
 8020514:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 8020518:	9310      	str	r3, [sp, #64]	; 0x40
 802051a:	e779      	b.n	8020410 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3b0>
 802051c:	b019      	add	sp, #100	; 0x64
 802051e:	ecbd 8b08 	vpop	{d8-d11}
 8020522:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08020528 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>:
 8020528:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802052c:	e9dd 560a 	ldrd	r5, r6, [sp, #40]	; 0x28
 8020530:	f9bd e020 	ldrsh.w	lr, [sp, #32]
 8020534:	2e00      	cmp	r6, #0
 8020536:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	; 0x24
 802053a:	fb06 570e 	mla	r7, r6, lr, r5
 802053e:	f89d 4030 	ldrb.w	r4, [sp, #48]	; 0x30
 8020542:	f89d c034 	ldrb.w	ip, [sp, #52]	; 0x34
 8020546:	eb02 0807 	add.w	r8, r2, r7
 802054a:	8808      	ldrh	r0, [r1, #0]
 802054c:	db38      	blt.n	80205c0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x98>
 802054e:	45b1      	cmp	r9, r6
 8020550:	dd36      	ble.n	80205c0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x98>
 8020552:	2d00      	cmp	r5, #0
 8020554:	db32      	blt.n	80205bc <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x94>
 8020556:	45ae      	cmp	lr, r5
 8020558:	dd30      	ble.n	80205bc <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x94>
 802055a:	5dd2      	ldrb	r2, [r2, r7]
 802055c:	f833 7012 	ldrh.w	r7, [r3, r2, lsl #1]
 8020560:	1c6a      	adds	r2, r5, #1
 8020562:	d430      	bmi.n	80205c6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x9e>
 8020564:	4596      	cmp	lr, r2
 8020566:	dd2e      	ble.n	80205c6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x9e>
 8020568:	b36c      	cbz	r4, 80205c6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x9e>
 802056a:	f898 2001 	ldrb.w	r2, [r8, #1]
 802056e:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8020572:	3601      	adds	r6, #1
 8020574:	d42b      	bmi.n	80205ce <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xa6>
 8020576:	45b1      	cmp	r9, r6
 8020578:	dd29      	ble.n	80205ce <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xa6>
 802057a:	f1bc 0f00 	cmp.w	ip, #0
 802057e:	d028      	beq.n	80205d2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xaa>
 8020580:	2d00      	cmp	r5, #0
 8020582:	db22      	blt.n	80205ca <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xa2>
 8020584:	45ae      	cmp	lr, r5
 8020586:	dd20      	ble.n	80205ca <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xa2>
 8020588:	f818 600e 	ldrb.w	r6, [r8, lr]
 802058c:	f833 6016 	ldrh.w	r6, [r3, r6, lsl #1]
 8020590:	3501      	adds	r5, #1
 8020592:	d407      	bmi.n	80205a4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x7c>
 8020594:	45ae      	cmp	lr, r5
 8020596:	dd05      	ble.n	80205a4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x7c>
 8020598:	b134      	cbz	r4, 80205a8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x80>
 802059a:	44c6      	add	lr, r8
 802059c:	f89e 0001 	ldrb.w	r0, [lr, #1]
 80205a0:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 80205a4:	2c0f      	cmp	r4, #15
 80205a6:	d802      	bhi.n	80205ae <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x86>
 80205a8:	f1bc 0f0f 	cmp.w	ip, #15
 80205ac:	d914      	bls.n	80205d8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xb0>
 80205ae:	4b26      	ldr	r3, [pc, #152]	; (8020648 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x120>)
 80205b0:	f240 11ef 	movw	r1, #495	; 0x1ef
 80205b4:	4a25      	ldr	r2, [pc, #148]	; (802064c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x124>)
 80205b6:	4826      	ldr	r0, [pc, #152]	; (8020650 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x128>)
 80205b8:	f006 fdb6 	bl	8027128 <__assert_func>
 80205bc:	4607      	mov	r7, r0
 80205be:	e7cf      	b.n	8020560 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x38>
 80205c0:	4602      	mov	r2, r0
 80205c2:	4607      	mov	r7, r0
 80205c4:	e7d5      	b.n	8020572 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x4a>
 80205c6:	4602      	mov	r2, r0
 80205c8:	e7d3      	b.n	8020572 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x4a>
 80205ca:	4606      	mov	r6, r0
 80205cc:	e7e0      	b.n	8020590 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x68>
 80205ce:	4606      	mov	r6, r0
 80205d0:	e7e8      	b.n	80205a4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x7c>
 80205d2:	2c0f      	cmp	r4, #15
 80205d4:	d8eb      	bhi.n	80205ae <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x86>
 80205d6:	4606      	mov	r6, r0
 80205d8:	fb14 f30c 	smulbb	r3, r4, ip
 80205dc:	043d      	lsls	r5, r7, #16
 80205de:	ea4f 4e02 	mov.w	lr, r2, lsl #16
 80205e2:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
 80205e6:	f005 65fc 	and.w	r5, r5, #132120576	; 0x7e00000
 80205ea:	10db      	asrs	r3, r3, #3
 80205ec:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
 80205f0:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 80205f4:	432f      	orrs	r7, r5
 80205f6:	f1cc 0510 	rsb	r5, ip, #16
 80205fa:	ea4e 0202 	orr.w	r2, lr, r2
 80205fe:	1b2d      	subs	r5, r5, r4
 8020600:	ebc3 0444 	rsb	r4, r3, r4, lsl #1
 8020604:	eb03 0545 	add.w	r5, r3, r5, lsl #1
 8020608:	4354      	muls	r4, r2
 802060a:	fb05 4507 	mla	r5, r5, r7, r4
 802060e:	0404      	lsls	r4, r0, #16
 8020610:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8020614:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
 8020618:	4320      	orrs	r0, r4
 802061a:	fb03 5400 	mla	r4, r3, r0, r5
 802061e:	0430      	lsls	r0, r6, #16
 8020620:	f426 66fc 	bic.w	r6, r6, #2016	; 0x7e0
 8020624:	ebc3 034c 	rsb	r3, r3, ip, lsl #1
 8020628:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 802062c:	4330      	orrs	r0, r6
 802062e:	fb03 4000 	mla	r0, r3, r0, r4
 8020632:	0d43      	lsrs	r3, r0, #21
 8020634:	0940      	lsrs	r0, r0, #5
 8020636:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 802063a:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 802063e:	4318      	orrs	r0, r3
 8020640:	8008      	strh	r0, [r1, #0]
 8020642:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8020646:	bf00      	nop
 8020648:	0802b942 	.word	0x0802b942
 802064c:	0802bfae 	.word	0x0802bfae
 8020650:	0802ba2b 	.word	0x0802ba2b

08020654 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8020654:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020658:	ed2d 8b0a 	vpush	{d8-d12}
 802065c:	b093      	sub	sp, #76	; 0x4c
 802065e:	eeb0 aa40 	vmov.f32	s20, s0
 8020662:	eef0 9a60 	vmov.f32	s19, s1
 8020666:	920f      	str	r2, [sp, #60]	; 0x3c
 8020668:	eeb0 9a41 	vmov.f32	s18, s2
 802066c:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 802066e:	eeb0 8a62 	vmov.f32	s16, s5
 8020672:	9010      	str	r0, [sp, #64]	; 0x40
 8020674:	eef0 8a43 	vmov.f32	s17, s6
 8020678:	6850      	ldr	r0, [r2, #4]
 802067a:	eeb0 ca44 	vmov.f32	s24, s8
 802067e:	9108      	str	r1, [sp, #32]
 8020680:	eef0 ba64 	vmov.f32	s23, s9
 8020684:	9306      	str	r3, [sp, #24]
 8020686:	eeb0 ba45 	vmov.f32	s22, s10
 802068a:	6812      	ldr	r2, [r2, #0]
 802068c:	eef7 aa00 	vmov.f32	s21, #112	; 0x3f800000  1.0
 8020690:	e9dd 132c 	ldrd	r1, r3, [sp, #176]	; 0xb0
 8020694:	e9dd 4627 	ldrd	r4, r6, [sp, #156]	; 0x9c
 8020698:	fb00 1303 	mla	r3, r0, r3, r1
 802069c:	eb02 0943 	add.w	r9, r2, r3, lsl #1
 80206a0:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80206a2:	681b      	ldr	r3, [r3, #0]
 80206a4:	9307      	str	r3, [sp, #28]
 80206a6:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80206a8:	685f      	ldr	r7, [r3, #4]
 80206aa:	3704      	adds	r7, #4
 80206ac:	9b08      	ldr	r3, [sp, #32]
 80206ae:	2b00      	cmp	r3, #0
 80206b0:	dc03      	bgt.n	80206ba <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 80206b2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80206b4:	2b00      	cmp	r3, #0
 80206b6:	f340 81b2 	ble.w	8020a1e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ca>
 80206ba:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80206bc:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80206c0:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80206c4:	1e48      	subs	r0, r1, #1
 80206c6:	f102 3cff 	add.w	ip, r2, #4294967295
 80206ca:	9b06      	ldr	r3, [sp, #24]
 80206cc:	2b00      	cmp	r3, #0
 80206ce:	f340 80a9 	ble.w	8020824 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d0>
 80206d2:	ea5f 4e24 	movs.w	lr, r4, asr #16
 80206d6:	ea4f 4326 	mov.w	r3, r6, asr #16
 80206da:	d406      	bmi.n	80206ea <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 80206dc:	4586      	cmp	lr, r0
 80206de:	da04      	bge.n	80206ea <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 80206e0:	2b00      	cmp	r3, #0
 80206e2:	db02      	blt.n	80206ea <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 80206e4:	4563      	cmp	r3, ip
 80206e6:	f2c0 809e 	blt.w	8020826 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d2>
 80206ea:	f11e 0e01 	adds.w	lr, lr, #1
 80206ee:	f100 808f 	bmi.w	8020810 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1bc>
 80206f2:	4571      	cmp	r1, lr
 80206f4:	f2c0 808c 	blt.w	8020810 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1bc>
 80206f8:	3301      	adds	r3, #1
 80206fa:	f100 8089 	bmi.w	8020810 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1bc>
 80206fe:	429a      	cmp	r2, r3
 8020700:	f2c0 8086 	blt.w	8020810 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1bc>
 8020704:	f8dd b018 	ldr.w	fp, [sp, #24]
 8020708:	46c8      	mov	r8, r9
 802070a:	f1bb 0f00 	cmp.w	fp, #0
 802070e:	f340 80a6 	ble.w	802085e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20a>
 8020712:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8020714:	ea4f 4c26 	mov.w	ip, r6, asr #16
 8020718:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 802071a:	f3c4 3003 	ubfx	r0, r4, #12, #4
 802071e:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 8020722:	1422      	asrs	r2, r4, #16
 8020724:	f3c6 3103 	ubfx	r1, r6, #12, #4
 8020728:	689b      	ldr	r3, [r3, #8]
 802072a:	f100 80e3 	bmi.w	80208f4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a0>
 802072e:	f103 3aff 	add.w	sl, r3, #4294967295
 8020732:	4552      	cmp	r2, sl
 8020734:	f280 80de 	bge.w	80208f4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a0>
 8020738:	f1bc 0f00 	cmp.w	ip, #0
 802073c:	f2c0 80da 	blt.w	80208f4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a0>
 8020740:	f10e 3aff 	add.w	sl, lr, #4294967295
 8020744:	45d4      	cmp	ip, sl
 8020746:	f280 80d5 	bge.w	80208f4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a0>
 802074a:	b21b      	sxth	r3, r3
 802074c:	9d07      	ldr	r5, [sp, #28]
 802074e:	fb0c 2203 	mla	r2, ip, r3, r2
 8020752:	eb05 0a02 	add.w	sl, r5, r2
 8020756:	5caa      	ldrb	r2, [r5, r2]
 8020758:	f837 e012 	ldrh.w	lr, [r7, r2, lsl #1]
 802075c:	2800      	cmp	r0, #0
 802075e:	f000 80c0 	beq.w	80208e2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28e>
 8020762:	f89a 2001 	ldrb.w	r2, [sl, #1]
 8020766:	f837 2012 	ldrh.w	r2, [r7, r2, lsl #1]
 802076a:	920b      	str	r2, [sp, #44]	; 0x2c
 802076c:	b151      	cbz	r1, 8020784 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x130>
 802076e:	eb0a 0203 	add.w	r2, sl, r3
 8020772:	f81a 3003 	ldrb.w	r3, [sl, r3]
 8020776:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 802077a:	9309      	str	r3, [sp, #36]	; 0x24
 802077c:	7853      	ldrb	r3, [r2, #1]
 802077e:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 8020782:	930c      	str	r3, [sp, #48]	; 0x30
 8020784:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8020786:	fb10 f201 	smulbb	r2, r0, r1
 802078a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 802078c:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 8020790:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 8020794:	f425 65fc 	bic.w	r5, r5, #2016	; 0x7e0
 8020798:	10d2      	asrs	r2, r2, #3
 802079a:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 802079e:	ebc2 0a40 	rsb	sl, r2, r0, lsl #1
 80207a2:	ea4c 0c03 	orr.w	ip, ip, r3
 80207a6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80207a8:	041b      	lsls	r3, r3, #16
 80207aa:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 80207ae:	432b      	orrs	r3, r5
 80207b0:	4353      	muls	r3, r2
 80207b2:	fb0a 330c 	mla	r3, sl, ip, r3
 80207b6:	ea4f 4c0e 	mov.w	ip, lr, lsl #16
 80207ba:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 80207be:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 80207c2:	ea4c 0e0e 	orr.w	lr, ip, lr
 80207c6:	f1c1 0c10 	rsb	ip, r1, #16
 80207ca:	ebac 0c00 	sub.w	ip, ip, r0
 80207ce:	eb02 0c4c 	add.w	ip, r2, ip, lsl #1
 80207d2:	ebc2 0241 	rsb	r2, r2, r1, lsl #1
 80207d6:	fb0c 3c0e 	mla	ip, ip, lr, r3
 80207da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80207dc:	0418      	lsls	r0, r3, #16
 80207de:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 80207e2:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 80207e6:	4318      	orrs	r0, r3
 80207e8:	fb02 c200 	mla	r2, r2, r0, ip
 80207ec:	0d53      	lsrs	r3, r2, #21
 80207ee:	0952      	lsrs	r2, r2, #5
 80207f0:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80207f4:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 80207f8:	431a      	orrs	r2, r3
 80207fa:	f8a8 2000 	strh.w	r2, [r8]
 80207fe:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8020800:	f108 0802 	add.w	r8, r8, #2
 8020804:	f10b 3bff 	add.w	fp, fp, #4294967295
 8020808:	441c      	add	r4, r3
 802080a:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 802080c:	441e      	add	r6, r3
 802080e:	e77c      	b.n	802070a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 8020810:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8020812:	f109 0902 	add.w	r9, r9, #2
 8020816:	441c      	add	r4, r3
 8020818:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 802081a:	441e      	add	r6, r3
 802081c:	9b06      	ldr	r3, [sp, #24]
 802081e:	3b01      	subs	r3, #1
 8020820:	9306      	str	r3, [sp, #24]
 8020822:	e752      	b.n	80206ca <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8020824:	d020      	beq.n	8020868 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 8020826:	9b06      	ldr	r3, [sp, #24]
 8020828:	9829      	ldr	r0, [sp, #164]	; 0xa4
 802082a:	3b01      	subs	r3, #1
 802082c:	fb00 4003 	mla	r0, r0, r3, r4
 8020830:	1400      	asrs	r0, r0, #16
 8020832:	f53f af67 	bmi.w	8020704 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 8020836:	3901      	subs	r1, #1
 8020838:	4288      	cmp	r0, r1
 802083a:	f6bf af63 	bge.w	8020704 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 802083e:	992a      	ldr	r1, [sp, #168]	; 0xa8
 8020840:	fb01 6303 	mla	r3, r1, r3, r6
 8020844:	141b      	asrs	r3, r3, #16
 8020846:	f53f af5d 	bmi.w	8020704 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 802084a:	3a01      	subs	r2, #1
 802084c:	4293      	cmp	r3, r2
 802084e:	f6bf af59 	bge.w	8020704 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 8020852:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8020856:	46ca      	mov	sl, r9
 8020858:	f1b8 0f00 	cmp.w	r8, #0
 802085c:	dc67      	bgt.n	802092e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2da>
 802085e:	9b06      	ldr	r3, [sp, #24]
 8020860:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 8020864:	eb09 0945 	add.w	r9, r9, r5, lsl #1
 8020868:	9b08      	ldr	r3, [sp, #32]
 802086a:	2b00      	cmp	r3, #0
 802086c:	f340 80d7 	ble.w	8020a1e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ca>
 8020870:	ee3a aa0c 	vadd.f32	s20, s20, s24
 8020874:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8020876:	ee79 9aab 	vadd.f32	s19, s19, s23
 802087a:	eef0 6a48 	vmov.f32	s13, s16
 802087e:	eeca 7a8a 	vdiv.f32	s15, s21, s20
 8020882:	ee39 9a0b 	vadd.f32	s18, s18, s22
 8020886:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802088a:	ee16 4a90 	vmov	r4, s13
 802088e:	eef0 6a68 	vmov.f32	s13, s17
 8020892:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8020896:	ee16 6a90 	vmov	r6, s13
 802089a:	ee29 7aa7 	vmul.f32	s14, s19, s15
 802089e:	ee69 7a27 	vmul.f32	s15, s18, s15
 80208a2:	ee37 8a48 	vsub.f32	s16, s14, s16
 80208a6:	ee77 8ae8 	vsub.f32	s17, s15, s17
 80208aa:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 80208ae:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 80208b2:	ee18 2a10 	vmov	r2, s16
 80208b6:	eeb0 8a47 	vmov.f32	s16, s14
 80208ba:	fb92 f3f3 	sdiv	r3, r2, r3
 80208be:	ee18 2a90 	vmov	r2, s17
 80208c2:	9329      	str	r3, [sp, #164]	; 0xa4
 80208c4:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80208c6:	eef0 8a67 	vmov.f32	s17, s15
 80208ca:	fb92 f3f3 	sdiv	r3, r2, r3
 80208ce:	932a      	str	r3, [sp, #168]	; 0xa8
 80208d0:	9b08      	ldr	r3, [sp, #32]
 80208d2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80208d4:	3b01      	subs	r3, #1
 80208d6:	9308      	str	r3, [sp, #32]
 80208d8:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80208da:	bf08      	it	eq
 80208dc:	4613      	moveq	r3, r2
 80208de:	9306      	str	r3, [sp, #24]
 80208e0:	e6e4      	b.n	80206ac <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 80208e2:	2900      	cmp	r1, #0
 80208e4:	f43f af4e 	beq.w	8020784 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x130>
 80208e8:	f81a 3003 	ldrb.w	r3, [sl, r3]
 80208ec:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 80208f0:	9309      	str	r3, [sp, #36]	; 0x24
 80208f2:	e747      	b.n	8020784 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x130>
 80208f4:	f112 0a01 	adds.w	sl, r2, #1
 80208f8:	d481      	bmi.n	80207fe <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1aa>
 80208fa:	4553      	cmp	r3, sl
 80208fc:	f6ff af7f 	blt.w	80207fe <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1aa>
 8020900:	f11c 0a01 	adds.w	sl, ip, #1
 8020904:	f53f af7b 	bmi.w	80207fe <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1aa>
 8020908:	45d6      	cmp	lr, sl
 802090a:	f6ff af78 	blt.w	80207fe <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1aa>
 802090e:	b21b      	sxth	r3, r3
 8020910:	e9cd 2c02 	strd	r2, ip, [sp, #8]
 8020914:	fa0f f28e 	sxth.w	r2, lr
 8020918:	9300      	str	r3, [sp, #0]
 802091a:	463b      	mov	r3, r7
 802091c:	9201      	str	r2, [sp, #4]
 802091e:	9a07      	ldr	r2, [sp, #28]
 8020920:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8020924:	4641      	mov	r1, r8
 8020926:	9810      	ldr	r0, [sp, #64]	; 0x40
 8020928:	f7ff fdfe 	bl	8020528 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>
 802092c:	e767      	b.n	80207fe <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1aa>
 802092e:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8020930:	1422      	asrs	r2, r4, #16
 8020932:	1431      	asrs	r1, r6, #16
 8020934:	9d07      	ldr	r5, [sp, #28]
 8020936:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 802093a:	f3c4 3e03 	ubfx	lr, r4, #12, #4
 802093e:	f3c6 3003 	ubfx	r0, r6, #12, #4
 8020942:	fb03 2101 	mla	r1, r3, r1, r2
 8020946:	9a07      	ldr	r2, [sp, #28]
 8020948:	440a      	add	r2, r1
 802094a:	5c69      	ldrb	r1, [r5, r1]
 802094c:	f837 1011 	ldrh.w	r1, [r7, r1, lsl #1]
 8020950:	f1be 0f00 	cmp.w	lr, #0
 8020954:	d05c      	beq.n	8020a10 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3bc>
 8020956:	f892 c001 	ldrb.w	ip, [r2, #1]
 802095a:	f837 501c 	ldrh.w	r5, [r7, ip, lsl #1]
 802095e:	950d      	str	r5, [sp, #52]	; 0x34
 8020960:	b150      	cbz	r0, 8020978 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x324>
 8020962:	eb02 0c03 	add.w	ip, r2, r3
 8020966:	5cd3      	ldrb	r3, [r2, r3]
 8020968:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 802096c:	930a      	str	r3, [sp, #40]	; 0x28
 802096e:	f89c 3001 	ldrb.w	r3, [ip, #1]
 8020972:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 8020976:	930e      	str	r3, [sp, #56]	; 0x38
 8020978:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 802097a:	fb1e f200 	smulbb	r2, lr, r0
 802097e:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8020980:	f108 38ff 	add.w	r8, r8, #4294967295
 8020984:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 8020988:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 802098c:	10d2      	asrs	r2, r2, #3
 802098e:	f425 6bfc 	bic.w	fp, r5, #2016	; 0x7e0
 8020992:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 8020996:	ea4c 0c03 	orr.w	ip, ip, r3
 802099a:	ebc2 034e 	rsb	r3, r2, lr, lsl #1
 802099e:	9311      	str	r3, [sp, #68]	; 0x44
 80209a0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80209a2:	9d11      	ldr	r5, [sp, #68]	; 0x44
 80209a4:	041b      	lsls	r3, r3, #16
 80209a6:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 80209aa:	ea43 030b 	orr.w	r3, r3, fp
 80209ae:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 80209b2:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 80209b6:	4353      	muls	r3, r2
 80209b8:	fb05 3c0c 	mla	ip, r5, ip, r3
 80209bc:	f00b 63fc 	and.w	r3, fp, #132120576	; 0x7e00000
 80209c0:	ea43 0b01 	orr.w	fp, r3, r1
 80209c4:	f1c0 0110 	rsb	r1, r0, #16
 80209c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80209ca:	eba1 0e0e 	sub.w	lr, r1, lr
 80209ce:	eb02 0e4e 	add.w	lr, r2, lr, lsl #1
 80209d2:	ebc2 0240 	rsb	r2, r2, r0, lsl #1
 80209d6:	fb0e cc0b 	mla	ip, lr, fp, ip
 80209da:	ea4f 4b03 	mov.w	fp, r3, lsl #16
 80209de:	f423 6efc 	bic.w	lr, r3, #2016	; 0x7e0
 80209e2:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 80209e6:	ea4b 0e0e 	orr.w	lr, fp, lr
 80209ea:	fb02 cc0e 	mla	ip, r2, lr, ip
 80209ee:	ea4f 535c 	mov.w	r3, ip, lsr #21
 80209f2:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 80209f6:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80209fa:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 80209fe:	ea43 0c0c 	orr.w	ip, r3, ip
 8020a02:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8020a04:	441c      	add	r4, r3
 8020a06:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8020a08:	f82a cb02 	strh.w	ip, [sl], #2
 8020a0c:	441e      	add	r6, r3
 8020a0e:	e723      	b.n	8020858 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 8020a10:	2800      	cmp	r0, #0
 8020a12:	d0b1      	beq.n	8020978 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x324>
 8020a14:	5cd3      	ldrb	r3, [r2, r3]
 8020a16:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 8020a1a:	930a      	str	r3, [sp, #40]	; 0x28
 8020a1c:	e7ac      	b.n	8020978 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x324>
 8020a1e:	b013      	add	sp, #76	; 0x4c
 8020a20:	ecbd 8b0a 	vpop	{d8-d12}
 8020a24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08020a28 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh>:
 8020a28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020a2c:	468b      	mov	fp, r1
 8020a2e:	8809      	ldrh	r1, [r1, #0]
 8020a30:	b089      	sub	sp, #36	; 0x24
 8020a32:	10cd      	asrs	r5, r1, #3
 8020a34:	ea4f 2921 	mov.w	r9, r1, asr #8
 8020a38:	f9bd e048 	ldrsh.w	lr, [sp, #72]	; 0x48
 8020a3c:	00c9      	lsls	r1, r1, #3
 8020a3e:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 8020a42:	f009 09f8 	and.w	r9, r9, #248	; 0xf8
 8020a46:	9202      	str	r2, [sp, #8]
 8020a48:	b2c9      	uxtb	r1, r1
 8020a4a:	9500      	str	r5, [sp, #0]
 8020a4c:	f9bd a04c 	ldrsh.w	sl, [sp, #76]	; 0x4c
 8020a50:	9101      	str	r1, [sp, #4]
 8020a52:	9900      	ldr	r1, [sp, #0]
 8020a54:	f89d 7058 	ldrb.w	r7, [sp, #88]	; 0x58
 8020a58:	0209      	lsls	r1, r1, #8
 8020a5a:	f89d 005c 	ldrb.w	r0, [sp, #92]	; 0x5c
 8020a5e:	f89d c060 	ldrb.w	ip, [sp, #96]	; 0x60
 8020a62:	ea41 4109 	orr.w	r1, r1, r9, lsl #16
 8020a66:	e9dd 6414 	ldrd	r6, r4, [sp, #80]	; 0x50
 8020a6a:	fb04 650e 	mla	r5, r4, lr, r6
 8020a6e:	2c00      	cmp	r4, #0
 8020a70:	eb02 0805 	add.w	r8, r2, r5
 8020a74:	9a01      	ldr	r2, [sp, #4]
 8020a76:	ea41 0102 	orr.w	r1, r1, r2
 8020a7a:	9107      	str	r1, [sp, #28]
 8020a7c:	db43      	blt.n	8020b06 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xde>
 8020a7e:	45a2      	cmp	sl, r4
 8020a80:	dd41      	ble.n	8020b06 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xde>
 8020a82:	2e00      	cmp	r6, #0
 8020a84:	db3d      	blt.n	8020b02 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xda>
 8020a86:	45b6      	cmp	lr, r6
 8020a88:	dd3b      	ble.n	8020b02 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xda>
 8020a8a:	9a02      	ldr	r2, [sp, #8]
 8020a8c:	5d55      	ldrb	r5, [r2, r5]
 8020a8e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8020a92:	441d      	add	r5, r3
 8020a94:	1c72      	adds	r2, r6, #1
 8020a96:	d439      	bmi.n	8020b0c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xe4>
 8020a98:	4596      	cmp	lr, r2
 8020a9a:	dd37      	ble.n	8020b0c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xe4>
 8020a9c:	2f00      	cmp	r7, #0
 8020a9e:	d035      	beq.n	8020b0c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xe4>
 8020aa0:	f898 1001 	ldrb.w	r1, [r8, #1]
 8020aa4:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8020aa8:	4419      	add	r1, r3
 8020aaa:	3401      	adds	r4, #1
 8020aac:	d432      	bmi.n	8020b14 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xec>
 8020aae:	45a2      	cmp	sl, r4
 8020ab0:	dd30      	ble.n	8020b14 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xec>
 8020ab2:	b378      	cbz	r0, 8020b14 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xec>
 8020ab4:	2e00      	cmp	r6, #0
 8020ab6:	db2b      	blt.n	8020b10 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xe8>
 8020ab8:	45b6      	cmp	lr, r6
 8020aba:	dd29      	ble.n	8020b10 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xe8>
 8020abc:	f818 400e 	ldrb.w	r4, [r8, lr]
 8020ac0:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8020ac4:	441c      	add	r4, r3
 8020ac6:	3601      	adds	r6, #1
 8020ac8:	d427      	bmi.n	8020b1a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xf2>
 8020aca:	45b6      	cmp	lr, r6
 8020acc:	dd25      	ble.n	8020b1a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xf2>
 8020ace:	b327      	cbz	r7, 8020b1a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xf2>
 8020ad0:	44c6      	add	lr, r8
 8020ad2:	f89e 2001 	ldrb.w	r2, [lr, #1]
 8020ad6:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8020ada:	4413      	add	r3, r2
 8020adc:	782a      	ldrb	r2, [r5, #0]
 8020ade:	2f0f      	cmp	r7, #15
 8020ae0:	9202      	str	r2, [sp, #8]
 8020ae2:	780a      	ldrb	r2, [r1, #0]
 8020ae4:	9203      	str	r2, [sp, #12]
 8020ae6:	7822      	ldrb	r2, [r4, #0]
 8020ae8:	9204      	str	r2, [sp, #16]
 8020aea:	781a      	ldrb	r2, [r3, #0]
 8020aec:	9205      	str	r2, [sp, #20]
 8020aee:	d801      	bhi.n	8020af4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xcc>
 8020af0:	280f      	cmp	r0, #15
 8020af2:	d914      	bls.n	8020b1e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xf6>
 8020af4:	4b3f      	ldr	r3, [pc, #252]	; (8020bf4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1cc>)
 8020af6:	f240 210d 	movw	r1, #525	; 0x20d
 8020afa:	4a3f      	ldr	r2, [pc, #252]	; (8020bf8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1d0>)
 8020afc:	483f      	ldr	r0, [pc, #252]	; (8020bfc <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1d4>)
 8020afe:	f006 fb13 	bl	8027128 <__assert_func>
 8020b02:	ad07      	add	r5, sp, #28
 8020b04:	e7c6      	b.n	8020a94 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x6c>
 8020b06:	a907      	add	r1, sp, #28
 8020b08:	460d      	mov	r5, r1
 8020b0a:	e7ce      	b.n	8020aaa <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x82>
 8020b0c:	a907      	add	r1, sp, #28
 8020b0e:	e7cc      	b.n	8020aaa <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x82>
 8020b10:	ac07      	add	r4, sp, #28
 8020b12:	e7d8      	b.n	8020ac6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x9e>
 8020b14:	ab07      	add	r3, sp, #28
 8020b16:	461c      	mov	r4, r3
 8020b18:	e7e0      	b.n	8020adc <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xb4>
 8020b1a:	ab07      	add	r3, sp, #28
 8020b1c:	e7de      	b.n	8020adc <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xb4>
 8020b1e:	b2ba      	uxth	r2, r7
 8020b20:	f891 8002 	ldrb.w	r8, [r1, #2]
 8020b24:	b280      	uxth	r0, r0
 8020b26:	7849      	ldrb	r1, [r1, #1]
 8020b28:	78ae      	ldrb	r6, [r5, #2]
 8020b2a:	fa1f f78c 	uxth.w	r7, ip
 8020b2e:	fb02 fa00 	mul.w	sl, r2, r0
 8020b32:	0112      	lsls	r2, r2, #4
 8020b34:	786d      	ldrb	r5, [r5, #1]
 8020b36:	ea6f 0c0c 	mvn.w	ip, ip
 8020b3a:	ebca 1000 	rsb	r0, sl, r0, lsl #4
 8020b3e:	f5c2 7e80 	rsb	lr, r2, #256	; 0x100
 8020b42:	eba2 020a 	sub.w	r2, r2, sl
 8020b46:	fa5f fc8c 	uxtb.w	ip, ip
 8020b4a:	b280      	uxth	r0, r0
 8020b4c:	fb19 f90c 	smulbb	r9, r9, ip
 8020b50:	b292      	uxth	r2, r2
 8020b52:	ebae 0e00 	sub.w	lr, lr, r0
 8020b56:	4351      	muls	r1, r2
 8020b58:	fa1f fe8e 	uxth.w	lr, lr
 8020b5c:	fb02 f808 	mul.w	r8, r2, r8
 8020b60:	fb0e 1505 	mla	r5, lr, r5, r1
 8020b64:	7861      	ldrb	r1, [r4, #1]
 8020b66:	fb0e 8806 	mla	r8, lr, r6, r8
 8020b6a:	78a6      	ldrb	r6, [r4, #2]
 8020b6c:	fb00 5501 	mla	r5, r0, r1, r5
 8020b70:	7859      	ldrb	r1, [r3, #1]
 8020b72:	fb00 8806 	mla	r8, r0, r6, r8
 8020b76:	789e      	ldrb	r6, [r3, #2]
 8020b78:	9b00      	ldr	r3, [sp, #0]
 8020b7a:	fb0a 5101 	mla	r1, sl, r1, r5
 8020b7e:	fb0a 8606 	mla	r6, sl, r6, r8
 8020b82:	fb13 f50c 	smulbb	r5, r3, ip
 8020b86:	9b03      	ldr	r3, [sp, #12]
 8020b88:	f3c6 2607 	ubfx	r6, r6, #8, #8
 8020b8c:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8020b90:	435a      	muls	r2, r3
 8020b92:	9b02      	ldr	r3, [sp, #8]
 8020b94:	fb06 9607 	mla	r6, r6, r7, r9
 8020b98:	fb0e 2203 	mla	r2, lr, r3, r2
 8020b9c:	9b04      	ldr	r3, [sp, #16]
 8020b9e:	fb01 5107 	mla	r1, r1, r7, r5
 8020ba2:	b2b6      	uxth	r6, r6
 8020ba4:	fb00 2003 	mla	r0, r0, r3, r2
 8020ba8:	9b05      	ldr	r3, [sp, #20]
 8020baa:	b289      	uxth	r1, r1
 8020bac:	f106 0901 	add.w	r9, r6, #1
 8020bb0:	fb0a 0a03 	mla	sl, sl, r3, r0
 8020bb4:	9b01      	ldr	r3, [sp, #4]
 8020bb6:	1c4d      	adds	r5, r1, #1
 8020bb8:	eb09 2616 	add.w	r6, r9, r6, lsr #8
 8020bbc:	fb13 fc0c 	smulbb	ip, r3, ip
 8020bc0:	f3ca 2a07 	ubfx	sl, sl, #8, #8
 8020bc4:	eb05 2111 	add.w	r1, r5, r1, lsr #8
 8020bc8:	f406 4678 	and.w	r6, r6, #63488	; 0xf800
 8020bcc:	fb0a c707 	mla	r7, sl, r7, ip
 8020bd0:	0949      	lsrs	r1, r1, #5
 8020bd2:	b2bf      	uxth	r7, r7
 8020bd4:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8020bd8:	f107 0c01 	add.w	ip, r7, #1
 8020bdc:	eb0c 2717 	add.w	r7, ip, r7, lsr #8
 8020be0:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 8020be4:	433e      	orrs	r6, r7
 8020be6:	430e      	orrs	r6, r1
 8020be8:	f8ab 6000 	strh.w	r6, [fp]
 8020bec:	b009      	add	sp, #36	; 0x24
 8020bee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020bf2:	bf00      	nop
 8020bf4:	0802b942 	.word	0x0802b942
 8020bf8:	0802bf05 	.word	0x0802bf05
 8020bfc:	0802ba2b 	.word	0x0802ba2b

08020c00 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8020c00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020c04:	ed2d 8b08 	vpush	{d8-d11}
 8020c08:	b095      	sub	sp, #84	; 0x54
 8020c0a:	eeb0 aa40 	vmov.f32	s20, s0
 8020c0e:	eef0 9a60 	vmov.f32	s19, s1
 8020c12:	9212      	str	r2, [sp, #72]	; 0x48
 8020c14:	eeb0 9a41 	vmov.f32	s18, s2
 8020c18:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8020c1a:	eeb0 8a62 	vmov.f32	s16, s5
 8020c1e:	9309      	str	r3, [sp, #36]	; 0x24
 8020c20:	eef0 8a43 	vmov.f32	s17, s6
 8020c24:	f89d 30bc 	ldrb.w	r3, [sp, #188]	; 0xbc
 8020c28:	eef0 ba44 	vmov.f32	s23, s8
 8020c2c:	9013      	str	r0, [sp, #76]	; 0x4c
 8020c2e:	eeb0 ba64 	vmov.f32	s22, s9
 8020c32:	930f      	str	r3, [sp, #60]	; 0x3c
 8020c34:	eef0 aa45 	vmov.f32	s21, s10
 8020c38:	6850      	ldr	r0, [r2, #4]
 8020c3a:	910e      	str	r1, [sp, #56]	; 0x38
 8020c3c:	6812      	ldr	r2, [r2, #0]
 8020c3e:	e9dd 132c 	ldrd	r1, r3, [sp, #176]	; 0xb0
 8020c42:	fb00 1303 	mla	r3, r0, r3, r1
 8020c46:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8020c4a:	930a      	str	r3, [sp, #40]	; 0x28
 8020c4c:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8020c4e:	681b      	ldr	r3, [r3, #0]
 8020c50:	930d      	str	r3, [sp, #52]	; 0x34
 8020c52:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8020c54:	685c      	ldr	r4, [r3, #4]
 8020c56:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8020c58:	3404      	adds	r4, #4
 8020c5a:	43db      	mvns	r3, r3
 8020c5c:	b2db      	uxtb	r3, r3
 8020c5e:	930b      	str	r3, [sp, #44]	; 0x2c
 8020c60:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8020c62:	2b00      	cmp	r3, #0
 8020c64:	dc03      	bgt.n	8020c6e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 8020c66:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8020c68:	2b00      	cmp	r3, #0
 8020c6a:	f340 8258 	ble.w	802111e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x51e>
 8020c6e:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8020c70:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8020c74:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8020c78:	1e48      	subs	r0, r1, #1
 8020c7a:	1e55      	subs	r5, r2, #1
 8020c7c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8020c7e:	2b00      	cmp	r3, #0
 8020c80:	f340 80fc 	ble.w	8020e7c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 8020c84:	9e27      	ldr	r6, [sp, #156]	; 0x9c
 8020c86:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8020c88:	1436      	asrs	r6, r6, #16
 8020c8a:	ea4f 4323 	mov.w	r3, r3, asr #16
 8020c8e:	d406      	bmi.n	8020c9e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 8020c90:	4286      	cmp	r6, r0
 8020c92:	da04      	bge.n	8020c9e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 8020c94:	2b00      	cmp	r3, #0
 8020c96:	db02      	blt.n	8020c9e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 8020c98:	42ab      	cmp	r3, r5
 8020c9a:	f2c0 80f0 	blt.w	8020e7e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 8020c9e:	3601      	adds	r6, #1
 8020ca0:	f100 80dd 	bmi.w	8020e5e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 8020ca4:	42b1      	cmp	r1, r6
 8020ca6:	f2c0 80da 	blt.w	8020e5e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 8020caa:	3301      	adds	r3, #1
 8020cac:	f100 80d7 	bmi.w	8020e5e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 8020cb0:	429a      	cmp	r2, r3
 8020cb2:	f2c0 80d4 	blt.w	8020e5e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 8020cb6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8020cb8:	9311      	str	r3, [sp, #68]	; 0x44
 8020cba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8020cbc:	930c      	str	r3, [sp, #48]	; 0x30
 8020cbe:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8020cc0:	2b00      	cmp	r3, #0
 8020cc2:	f340 80fd 	ble.w	8020ec0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c0>
 8020cc6:	982e      	ldr	r0, [sp, #184]	; 0xb8
 8020cc8:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8020cca:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 8020ccc:	68c6      	ldr	r6, [r0, #12]
 8020cce:	141d      	asrs	r5, r3, #16
 8020cd0:	9827      	ldr	r0, [sp, #156]	; 0x9c
 8020cd2:	f3c2 3103 	ubfx	r1, r2, #12, #4
 8020cd6:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8020cd8:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8020cda:	1400      	asrs	r0, r0, #16
 8020cdc:	f3c3 3303 	ubfx	r3, r3, #12, #4
 8020ce0:	6892      	ldr	r2, [r2, #8]
 8020ce2:	f100 8141 	bmi.w	8020f68 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x368>
 8020ce6:	1e57      	subs	r7, r2, #1
 8020ce8:	42b8      	cmp	r0, r7
 8020cea:	f280 813d 	bge.w	8020f68 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x368>
 8020cee:	2d00      	cmp	r5, #0
 8020cf0:	f2c0 813a 	blt.w	8020f68 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x368>
 8020cf4:	1e77      	subs	r7, r6, #1
 8020cf6:	42bd      	cmp	r5, r7
 8020cf8:	f280 8136 	bge.w	8020f68 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x368>
 8020cfc:	b212      	sxth	r2, r2
 8020cfe:	fb05 0002 	mla	r0, r5, r2, r0
 8020d02:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8020d04:	f815 a000 	ldrb.w	sl, [r5, r0]
 8020d08:	182e      	adds	r6, r5, r0
 8020d0a:	eb0a 0a4a 	add.w	sl, sl, sl, lsl #1
 8020d0e:	eb04 050a 	add.w	r5, r4, sl
 8020d12:	2b00      	cmp	r3, #0
 8020d14:	f000 811a 	beq.w	8020f4c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34c>
 8020d18:	f896 c001 	ldrb.w	ip, [r6, #1]
 8020d1c:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 8020d20:	44a4      	add	ip, r4
 8020d22:	2900      	cmp	r1, #0
 8020d24:	f000 811a 	beq.w	8020f5c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35c>
 8020d28:	18b0      	adds	r0, r6, r2
 8020d2a:	5cb2      	ldrb	r2, [r6, r2]
 8020d2c:	7840      	ldrb	r0, [r0, #1]
 8020d2e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8020d32:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8020d36:	4422      	add	r2, r4
 8020d38:	4420      	add	r0, r4
 8020d3a:	b29b      	uxth	r3, r3
 8020d3c:	f89c 7002 	ldrb.w	r7, [ip, #2]
 8020d40:	b289      	uxth	r1, r1
 8020d42:	f895 b002 	ldrb.w	fp, [r5, #2]
 8020d46:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8020d48:	fb03 f901 	mul.w	r9, r3, r1
 8020d4c:	011b      	lsls	r3, r3, #4
 8020d4e:	f8b6 e000 	ldrh.w	lr, [r6]
 8020d52:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 8020d56:	f5c3 7880 	rsb	r8, r3, #256	; 0x100
 8020d5a:	eba3 0309 	sub.w	r3, r3, r9
 8020d5e:	f8bd 603c 	ldrh.w	r6, [sp, #60]	; 0x3c
 8020d62:	b289      	uxth	r1, r1
 8020d64:	f814 a00a 	ldrb.w	sl, [r4, sl]
 8020d68:	b29b      	uxth	r3, r3
 8020d6a:	eba8 0801 	sub.w	r8, r8, r1
 8020d6e:	435f      	muls	r7, r3
 8020d70:	fa1f f888 	uxth.w	r8, r8
 8020d74:	9310      	str	r3, [sp, #64]	; 0x40
 8020d76:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8020d78:	fb08 770b 	mla	r7, r8, fp, r7
 8020d7c:	f892 b002 	ldrb.w	fp, [r2, #2]
 8020d80:	fb01 770b 	mla	r7, r1, fp, r7
 8020d84:	f890 b002 	ldrb.w	fp, [r0, #2]
 8020d88:	fb09 770b 	mla	r7, r9, fp, r7
 8020d8c:	ea4f 2b2e 	mov.w	fp, lr, asr #8
 8020d90:	f00b 0bf8 	and.w	fp, fp, #248	; 0xf8
 8020d94:	f3c7 2707 	ubfx	r7, r7, #8, #8
 8020d98:	fb1b fb03 	smulbb	fp, fp, r3
 8020d9c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8020d9e:	fb07 b706 	mla	r7, r7, r6, fp
 8020da2:	f895 b001 	ldrb.w	fp, [r5, #1]
 8020da6:	f89c 5001 	ldrb.w	r5, [ip, #1]
 8020daa:	f89c c000 	ldrb.w	ip, [ip]
 8020dae:	b2bf      	uxth	r7, r7
 8020db0:	435d      	muls	r5, r3
 8020db2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8020db4:	fb08 550b 	mla	r5, r8, fp, r5
 8020db8:	f892 b001 	ldrb.w	fp, [r2, #1]
 8020dbc:	fb01 550b 	mla	r5, r1, fp, r5
 8020dc0:	f890 b001 	ldrb.w	fp, [r0, #1]
 8020dc4:	fb09 550b 	mla	r5, r9, fp, r5
 8020dc8:	ea4f 0bee 	mov.w	fp, lr, asr #3
 8020dcc:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 8020dd0:	f00b 0bfc 	and.w	fp, fp, #252	; 0xfc
 8020dd4:	f3c5 2507 	ubfx	r5, r5, #8, #8
 8020dd8:	fa5f fe8e 	uxtb.w	lr, lr
 8020ddc:	fb1b fb03 	smulbb	fp, fp, r3
 8020de0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8020de2:	fb03 f30c 	mul.w	r3, r3, ip
 8020de6:	f892 c000 	ldrb.w	ip, [r2]
 8020dea:	fb05 b506 	mla	r5, r5, r6, fp
 8020dee:	1c7a      	adds	r2, r7, #1
 8020df0:	fb08 330a 	mla	r3, r8, sl, r3
 8020df4:	b2ad      	uxth	r5, r5
 8020df6:	fb01 330c 	mla	r3, r1, ip, r3
 8020dfa:	f890 c000 	ldrb.w	ip, [r0]
 8020dfe:	f105 0b01 	add.w	fp, r5, #1
 8020e02:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 8020e06:	fb09 3c0c 	mla	ip, r9, ip, r3
 8020e0a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8020e0c:	eb0b 2515 	add.w	r5, fp, r5, lsr #8
 8020e10:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 8020e14:	fb1e fe03 	smulbb	lr, lr, r3
 8020e18:	f3cc 2c07 	ubfx	ip, ip, #8, #8
 8020e1c:	096d      	lsrs	r5, r5, #5
 8020e1e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8020e20:	fb0c ee06 	mla	lr, ip, r6, lr
 8020e24:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8020e28:	fa1f fe8e 	uxth.w	lr, lr
 8020e2c:	f10e 0c01 	add.w	ip, lr, #1
 8020e30:	eb0c 2e1e 	add.w	lr, ip, lr, lsr #8
 8020e34:	f3ce 2ec4 	ubfx	lr, lr, #11, #5
 8020e38:	ea47 070e 	orr.w	r7, r7, lr
 8020e3c:	433d      	orrs	r5, r7
 8020e3e:	801d      	strh	r5, [r3, #0]
 8020e40:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8020e42:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8020e44:	3302      	adds	r3, #2
 8020e46:	930c      	str	r3, [sp, #48]	; 0x30
 8020e48:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8020e4a:	4413      	add	r3, r2
 8020e4c:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 8020e4e:	9327      	str	r3, [sp, #156]	; 0x9c
 8020e50:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8020e52:	4413      	add	r3, r2
 8020e54:	9328      	str	r3, [sp, #160]	; 0xa0
 8020e56:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8020e58:	3b01      	subs	r3, #1
 8020e5a:	9311      	str	r3, [sp, #68]	; 0x44
 8020e5c:	e72f      	b.n	8020cbe <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xbe>
 8020e5e:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8020e60:	9e29      	ldr	r6, [sp, #164]	; 0xa4
 8020e62:	4433      	add	r3, r6
 8020e64:	9e2a      	ldr	r6, [sp, #168]	; 0xa8
 8020e66:	9327      	str	r3, [sp, #156]	; 0x9c
 8020e68:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8020e6a:	4433      	add	r3, r6
 8020e6c:	9328      	str	r3, [sp, #160]	; 0xa0
 8020e6e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8020e70:	3b01      	subs	r3, #1
 8020e72:	9309      	str	r3, [sp, #36]	; 0x24
 8020e74:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8020e76:	3302      	adds	r3, #2
 8020e78:	930a      	str	r3, [sp, #40]	; 0x28
 8020e7a:	e6ff      	b.n	8020c7c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8020e7c:	d027      	beq.n	8020ece <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ce>
 8020e7e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8020e80:	9829      	ldr	r0, [sp, #164]	; 0xa4
 8020e82:	3b01      	subs	r3, #1
 8020e84:	9d27      	ldr	r5, [sp, #156]	; 0x9c
 8020e86:	fb00 5003 	mla	r0, r0, r3, r5
 8020e8a:	1400      	asrs	r0, r0, #16
 8020e8c:	f53f af13 	bmi.w	8020cb6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 8020e90:	3901      	subs	r1, #1
 8020e92:	4288      	cmp	r0, r1
 8020e94:	f6bf af0f 	bge.w	8020cb6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 8020e98:	992a      	ldr	r1, [sp, #168]	; 0xa8
 8020e9a:	9828      	ldr	r0, [sp, #160]	; 0xa0
 8020e9c:	fb01 0303 	mla	r3, r1, r3, r0
 8020ea0:	141b      	asrs	r3, r3, #16
 8020ea2:	f53f af08 	bmi.w	8020cb6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 8020ea6:	3a01      	subs	r2, #1
 8020ea8:	4293      	cmp	r3, r2
 8020eaa:	f6bf af04 	bge.w	8020cb6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 8020eae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8020eb0:	f8bd a03c 	ldrh.w	sl, [sp, #60]	; 0x3c
 8020eb4:	9311      	str	r3, [sp, #68]	; 0x44
 8020eb6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8020eb8:	930c      	str	r3, [sp, #48]	; 0x30
 8020eba:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8020ebc:	2b00      	cmp	r3, #0
 8020ebe:	dc70      	bgt.n	8020fa2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a2>
 8020ec0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8020ec2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8020ec4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8020ec8:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8020ecc:	930a      	str	r3, [sp, #40]	; 0x28
 8020ece:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8020ed0:	2b00      	cmp	r3, #0
 8020ed2:	f340 8124 	ble.w	802111e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x51e>
 8020ed6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8020eda:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8020edc:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8020ee0:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8020ee4:	eef0 6a48 	vmov.f32	s13, s16
 8020ee8:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8020eec:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8020ef0:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8020ef4:	edcd 6a27 	vstr	s13, [sp, #156]	; 0x9c
 8020ef8:	eef0 6a68 	vmov.f32	s13, s17
 8020efc:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8020f00:	edcd 6a28 	vstr	s13, [sp, #160]	; 0xa0
 8020f04:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8020f08:	ee69 7a27 	vmul.f32	s15, s18, s15
 8020f0c:	ee37 8a48 	vsub.f32	s16, s14, s16
 8020f10:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8020f14:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8020f18:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8020f1c:	ee18 2a10 	vmov	r2, s16
 8020f20:	eeb0 8a47 	vmov.f32	s16, s14
 8020f24:	fb92 f3f3 	sdiv	r3, r2, r3
 8020f28:	ee18 2a90 	vmov	r2, s17
 8020f2c:	9329      	str	r3, [sp, #164]	; 0xa4
 8020f2e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8020f30:	eef0 8a67 	vmov.f32	s17, s15
 8020f34:	fb92 f3f3 	sdiv	r3, r2, r3
 8020f38:	932a      	str	r3, [sp, #168]	; 0xa8
 8020f3a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8020f3c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8020f3e:	3b01      	subs	r3, #1
 8020f40:	930e      	str	r3, [sp, #56]	; 0x38
 8020f42:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8020f44:	bf08      	it	eq
 8020f46:	4613      	moveq	r3, r2
 8020f48:	9309      	str	r3, [sp, #36]	; 0x24
 8020f4a:	e689      	b.n	8020c60 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 8020f4c:	b149      	cbz	r1, 8020f62 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
 8020f4e:	5cb2      	ldrb	r2, [r6, r2]
 8020f50:	4628      	mov	r0, r5
 8020f52:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8020f56:	4422      	add	r2, r4
 8020f58:	46ac      	mov	ip, r5
 8020f5a:	e6ee      	b.n	8020d3a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 8020f5c:	4628      	mov	r0, r5
 8020f5e:	462a      	mov	r2, r5
 8020f60:	e6eb      	b.n	8020d3a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 8020f62:	4628      	mov	r0, r5
 8020f64:	462a      	mov	r2, r5
 8020f66:	e7f7      	b.n	8020f58 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 8020f68:	1c47      	adds	r7, r0, #1
 8020f6a:	f53f af69 	bmi.w	8020e40 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x240>
 8020f6e:	42ba      	cmp	r2, r7
 8020f70:	f6ff af66 	blt.w	8020e40 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x240>
 8020f74:	1c6f      	adds	r7, r5, #1
 8020f76:	f53f af63 	bmi.w	8020e40 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x240>
 8020f7a:	42be      	cmp	r6, r7
 8020f7c:	f6ff af60 	blt.w	8020e40 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x240>
 8020f80:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 8020f82:	b236      	sxth	r6, r6
 8020f84:	b212      	sxth	r2, r2
 8020f86:	9002      	str	r0, [sp, #8]
 8020f88:	9601      	str	r6, [sp, #4]
 8020f8a:	9200      	str	r2, [sp, #0]
 8020f8c:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8020f8e:	e9cd 1705 	strd	r1, r7, [sp, #20]
 8020f92:	e9cd 5303 	strd	r5, r3, [sp, #12]
 8020f96:	e9dd 120c 	ldrd	r1, r2, [sp, #48]	; 0x30
 8020f9a:	4623      	mov	r3, r4
 8020f9c:	f7ff fd44 	bl	8020a28 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh>
 8020fa0:	e74e      	b.n	8020e40 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x240>
 8020fa2:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 8020fa4:	9828      	ldr	r0, [sp, #160]	; 0xa0
 8020fa6:	f3c2 3103 	ubfx	r1, r2, #12, #4
 8020faa:	9d27      	ldr	r5, [sp, #156]	; 0x9c
 8020fac:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8020fae:	1400      	asrs	r0, r0, #16
 8020fb0:	142d      	asrs	r5, r5, #16
 8020fb2:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8020fb4:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 8020fb8:	f3c3 3303 	ubfx	r3, r3, #12, #4
 8020fbc:	fb02 5000 	mla	r0, r2, r0, r5
 8020fc0:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8020fc2:	f815 9000 	ldrb.w	r9, [r5, r0]
 8020fc6:	182e      	adds	r6, r5, r0
 8020fc8:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 8020fcc:	eb04 0509 	add.w	r5, r4, r9
 8020fd0:	2b00      	cmp	r3, #0
 8020fd2:	f000 8096 	beq.w	8021102 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x502>
 8020fd6:	7877      	ldrb	r7, [r6, #1]
 8020fd8:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8020fdc:	4427      	add	r7, r4
 8020fde:	2900      	cmp	r1, #0
 8020fe0:	f000 8097 	beq.w	8021112 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x512>
 8020fe4:	18b0      	adds	r0, r6, r2
 8020fe6:	5cb2      	ldrb	r2, [r6, r2]
 8020fe8:	7840      	ldrb	r0, [r0, #1]
 8020fea:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8020fee:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8020ff2:	4422      	add	r2, r4
 8020ff4:	4420      	add	r0, r4
 8020ff6:	b29b      	uxth	r3, r3
 8020ff8:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8020ffa:	b289      	uxth	r1, r1
 8020ffc:	f895 b002 	ldrb.w	fp, [r5, #2]
 8021000:	f8b6 c000 	ldrh.w	ip, [r6]
 8021004:	fb03 f801 	mul.w	r8, r3, r1
 8021008:	011b      	lsls	r3, r3, #4
 802100a:	78be      	ldrb	r6, [r7, #2]
 802100c:	ebc8 1101 	rsb	r1, r8, r1, lsl #4
 8021010:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 8021014:	eba3 0308 	sub.w	r3, r3, r8
 8021018:	f814 9009 	ldrb.w	r9, [r4, r9]
 802101c:	b289      	uxth	r1, r1
 802101e:	b29b      	uxth	r3, r3
 8021020:	ebae 0e01 	sub.w	lr, lr, r1
 8021024:	435e      	muls	r6, r3
 8021026:	fa1f fe8e 	uxth.w	lr, lr
 802102a:	9310      	str	r3, [sp, #64]	; 0x40
 802102c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802102e:	fb0e 660b 	mla	r6, lr, fp, r6
 8021032:	f892 b002 	ldrb.w	fp, [r2, #2]
 8021036:	fb01 660b 	mla	r6, r1, fp, r6
 802103a:	f890 b002 	ldrb.w	fp, [r0, #2]
 802103e:	fb08 660b 	mla	r6, r8, fp, r6
 8021042:	ea4f 2b2c 	mov.w	fp, ip, asr #8
 8021046:	f00b 0bf8 	and.w	fp, fp, #248	; 0xf8
 802104a:	f3c6 2607 	ubfx	r6, r6, #8, #8
 802104e:	fb1b fb03 	smulbb	fp, fp, r3
 8021052:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8021054:	fb06 b60a 	mla	r6, r6, sl, fp
 8021058:	f895 b001 	ldrb.w	fp, [r5, #1]
 802105c:	787d      	ldrb	r5, [r7, #1]
 802105e:	783f      	ldrb	r7, [r7, #0]
 8021060:	b2b6      	uxth	r6, r6
 8021062:	435d      	muls	r5, r3
 8021064:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8021066:	fb0e 550b 	mla	r5, lr, fp, r5
 802106a:	f892 b001 	ldrb.w	fp, [r2, #1]
 802106e:	fb01 550b 	mla	r5, r1, fp, r5
 8021072:	f890 b001 	ldrb.w	fp, [r0, #1]
 8021076:	fb08 550b 	mla	r5, r8, fp, r5
 802107a:	ea4f 0bec 	mov.w	fp, ip, asr #3
 802107e:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8021082:	f00b 0bfc 	and.w	fp, fp, #252	; 0xfc
 8021086:	f3c5 2507 	ubfx	r5, r5, #8, #8
 802108a:	fa5f fc8c 	uxtb.w	ip, ip
 802108e:	fb1b fb03 	smulbb	fp, fp, r3
 8021092:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8021094:	437b      	muls	r3, r7
 8021096:	7817      	ldrb	r7, [r2, #0]
 8021098:	fb05 b50a 	mla	r5, r5, sl, fp
 802109c:	fb0e 3309 	mla	r3, lr, r9, r3
 80210a0:	b2ad      	uxth	r5, r5
 80210a2:	fb01 3307 	mla	r3, r1, r7, r3
 80210a6:	7807      	ldrb	r7, [r0, #0]
 80210a8:	f105 0b01 	add.w	fp, r5, #1
 80210ac:	fb08 3707 	mla	r7, r8, r7, r3
 80210b0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80210b2:	eb0b 2515 	add.w	r5, fp, r5, lsr #8
 80210b6:	fb1c fc03 	smulbb	ip, ip, r3
 80210ba:	f3c7 2707 	ubfx	r7, r7, #8, #8
 80210be:	1c73      	adds	r3, r6, #1
 80210c0:	096d      	lsrs	r5, r5, #5
 80210c2:	fb07 c70a 	mla	r7, r7, sl, ip
 80210c6:	eb03 2616 	add.w	r6, r3, r6, lsr #8
 80210ca:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 80210ce:	b2bf      	uxth	r7, r7
 80210d0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80210d2:	f406 4678 	and.w	r6, r6, #63488	; 0xf800
 80210d6:	1c7a      	adds	r2, r7, #1
 80210d8:	eb02 2217 	add.w	r2, r2, r7, lsr #8
 80210dc:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 80210e0:	4316      	orrs	r6, r2
 80210e2:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 80210e4:	432e      	orrs	r6, r5
 80210e6:	f823 6b02 	strh.w	r6, [r3], #2
 80210ea:	930c      	str	r3, [sp, #48]	; 0x30
 80210ec:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 80210ee:	4413      	add	r3, r2
 80210f0:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 80210f2:	9327      	str	r3, [sp, #156]	; 0x9c
 80210f4:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80210f6:	4413      	add	r3, r2
 80210f8:	9328      	str	r3, [sp, #160]	; 0xa0
 80210fa:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80210fc:	3b01      	subs	r3, #1
 80210fe:	9311      	str	r3, [sp, #68]	; 0x44
 8021100:	e6db      	b.n	8020eba <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ba>
 8021102:	b149      	cbz	r1, 8021118 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x518>
 8021104:	5cb2      	ldrb	r2, [r6, r2]
 8021106:	4628      	mov	r0, r5
 8021108:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 802110c:	4422      	add	r2, r4
 802110e:	462f      	mov	r7, r5
 8021110:	e771      	b.n	8020ff6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f6>
 8021112:	4628      	mov	r0, r5
 8021114:	462a      	mov	r2, r5
 8021116:	e76e      	b.n	8020ff6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f6>
 8021118:	4628      	mov	r0, r5
 802111a:	462a      	mov	r2, r5
 802111c:	e7f7      	b.n	802110e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50e>
 802111e:	b015      	add	sp, #84	; 0x54
 8021120:	ecbd 8b08 	vpop	{d8-d11}
 8021124:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08021128 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh>:
 8021128:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802112c:	880e      	ldrh	r6, [r1, #0]
 802112e:	b085      	sub	sp, #20
 8021130:	4691      	mov	r9, r2
 8021132:	0230      	lsls	r0, r6, #8
 8021134:	f9bd c038 	ldrsh.w	ip, [sp, #56]	; 0x38
 8021138:	f9bd 803c 	ldrsh.w	r8, [sp, #60]	; 0x3c
 802113c:	f400 0b78 	and.w	fp, r0, #16252928	; 0xf80000
 8021140:	0170      	lsls	r0, r6, #5
 8021142:	00f6      	lsls	r6, r6, #3
 8021144:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
 8021148:	f400 407c 	and.w	r0, r0, #64512	; 0xfc00
 802114c:	f89d 404c 	ldrb.w	r4, [sp, #76]	; 0x4c
 8021150:	b2f6      	uxtb	r6, r6
 8021152:	ea4b 0000 	orr.w	r0, fp, r0
 8021156:	e9dd 7510 	ldrd	r7, r5, [sp, #64]	; 0x40
 802115a:	4306      	orrs	r6, r0
 802115c:	fb05 7a0c 	mla	sl, r5, ip, r7
 8021160:	2d00      	cmp	r5, #0
 8021162:	9603      	str	r6, [sp, #12]
 8021164:	eb09 0e0a 	add.w	lr, r9, sl
 8021168:	db42      	blt.n	80211f0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xc8>
 802116a:	45a8      	cmp	r8, r5
 802116c:	dd40      	ble.n	80211f0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xc8>
 802116e:	2f00      	cmp	r7, #0
 8021170:	db3c      	blt.n	80211ec <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xc4>
 8021172:	45bc      	cmp	ip, r7
 8021174:	dd3a      	ble.n	80211ec <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xc4>
 8021176:	f819 600a 	ldrb.w	r6, [r9, sl]
 802117a:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 802117e:	441e      	add	r6, r3
 8021180:	1c78      	adds	r0, r7, #1
 8021182:	d438      	bmi.n	80211f6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xce>
 8021184:	4584      	cmp	ip, r0
 8021186:	dd36      	ble.n	80211f6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xce>
 8021188:	b3aa      	cbz	r2, 80211f6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xce>
 802118a:	f89e 0001 	ldrb.w	r0, [lr, #1]
 802118e:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8021192:	4418      	add	r0, r3
 8021194:	3501      	adds	r5, #1
 8021196:	d432      	bmi.n	80211fe <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xd6>
 8021198:	45a8      	cmp	r8, r5
 802119a:	dd30      	ble.n	80211fe <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xd6>
 802119c:	b37c      	cbz	r4, 80211fe <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xd6>
 802119e:	2f00      	cmp	r7, #0
 80211a0:	db2b      	blt.n	80211fa <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xd2>
 80211a2:	45bc      	cmp	ip, r7
 80211a4:	dd29      	ble.n	80211fa <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xd2>
 80211a6:	f81e 500c 	ldrb.w	r5, [lr, ip]
 80211aa:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80211ae:	441d      	add	r5, r3
 80211b0:	3701      	adds	r7, #1
 80211b2:	d427      	bmi.n	8021204 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xdc>
 80211b4:	45bc      	cmp	ip, r7
 80211b6:	dd25      	ble.n	8021204 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xdc>
 80211b8:	b322      	cbz	r2, 8021204 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xdc>
 80211ba:	44f4      	add	ip, lr
 80211bc:	f89c 7001 	ldrb.w	r7, [ip, #1]
 80211c0:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 80211c4:	443b      	add	r3, r7
 80211c6:	781f      	ldrb	r7, [r3, #0]
 80211c8:	2a0f      	cmp	r2, #15
 80211ca:	f896 a000 	ldrb.w	sl, [r6]
 80211ce:	f890 b000 	ldrb.w	fp, [r0]
 80211d2:	f895 9000 	ldrb.w	r9, [r5]
 80211d6:	9700      	str	r7, [sp, #0]
 80211d8:	d801      	bhi.n	80211de <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xb6>
 80211da:	2c0f      	cmp	r4, #15
 80211dc:	d914      	bls.n	8021208 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xe0>
 80211de:	4b2c      	ldr	r3, [pc, #176]	; (8021290 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x168>)
 80211e0:	f240 210d 	movw	r1, #525	; 0x20d
 80211e4:	4a2b      	ldr	r2, [pc, #172]	; (8021294 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x16c>)
 80211e6:	482c      	ldr	r0, [pc, #176]	; (8021298 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x170>)
 80211e8:	f005 ff9e 	bl	8027128 <__assert_func>
 80211ec:	ae03      	add	r6, sp, #12
 80211ee:	e7c7      	b.n	8021180 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x58>
 80211f0:	a803      	add	r0, sp, #12
 80211f2:	4606      	mov	r6, r0
 80211f4:	e7ce      	b.n	8021194 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x6c>
 80211f6:	a803      	add	r0, sp, #12
 80211f8:	e7cc      	b.n	8021194 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x6c>
 80211fa:	ad03      	add	r5, sp, #12
 80211fc:	e7d8      	b.n	80211b0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x88>
 80211fe:	ab03      	add	r3, sp, #12
 8021200:	461d      	mov	r5, r3
 8021202:	e7e0      	b.n	80211c6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x9e>
 8021204:	ab03      	add	r3, sp, #12
 8021206:	e7de      	b.n	80211c6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x9e>
 8021208:	b292      	uxth	r2, r2
 802120a:	f890 e002 	ldrb.w	lr, [r0, #2]
 802120e:	b2a4      	uxth	r4, r4
 8021210:	78b7      	ldrb	r7, [r6, #2]
 8021212:	7840      	ldrb	r0, [r0, #1]
 8021214:	fb02 f804 	mul.w	r8, r2, r4
 8021218:	0112      	lsls	r2, r2, #4
 802121a:	7876      	ldrb	r6, [r6, #1]
 802121c:	ebc8 1404 	rsb	r4, r8, r4, lsl #4
 8021220:	f5c2 7c80 	rsb	ip, r2, #256	; 0x100
 8021224:	eba2 0208 	sub.w	r2, r2, r8
 8021228:	b2a4      	uxth	r4, r4
 802122a:	b292      	uxth	r2, r2
 802122c:	ebac 0c04 	sub.w	ip, ip, r4
 8021230:	fb02 fe0e 	mul.w	lr, r2, lr
 8021234:	fa1f fc8c 	uxth.w	ip, ip
 8021238:	fb0c ee07 	mla	lr, ip, r7, lr
 802123c:	78af      	ldrb	r7, [r5, #2]
 802123e:	fb04 ee07 	mla	lr, r4, r7, lr
 8021242:	789f      	ldrb	r7, [r3, #2]
 8021244:	785b      	ldrb	r3, [r3, #1]
 8021246:	fb08 e707 	mla	r7, r8, r7, lr
 802124a:	fb02 fe0b 	mul.w	lr, r2, fp
 802124e:	4342      	muls	r2, r0
 8021250:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 8021254:	7868      	ldrb	r0, [r5, #1]
 8021256:	fb0c ee0a 	mla	lr, ip, sl, lr
 802125a:	fb0c 2206 	mla	r2, ip, r6, r2
 802125e:	9701      	str	r7, [sp, #4]
 8021260:	fb04 ee09 	mla	lr, r4, r9, lr
 8021264:	9f00      	ldr	r7, [sp, #0]
 8021266:	fb04 2400 	mla	r4, r4, r0, r2
 802126a:	fb08 ee07 	mla	lr, r8, r7, lr
 802126e:	9f01      	ldr	r7, [sp, #4]
 8021270:	fb08 4803 	mla	r8, r8, r3, r4
 8021274:	f3ce 2ec4 	ubfx	lr, lr, #11, #5
 8021278:	ea4f 1858 	mov.w	r8, r8, lsr #5
 802127c:	ea47 070e 	orr.w	r7, r7, lr
 8021280:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
 8021284:	ea47 0708 	orr.w	r7, r7, r8
 8021288:	800f      	strh	r7, [r1, #0]
 802128a:	b005      	add	sp, #20
 802128c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021290:	0802b942 	.word	0x0802b942
 8021294:	0802bf05 	.word	0x0802bf05
 8021298:	0802ba2b 	.word	0x0802ba2b

0802129c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 802129c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80212a0:	ed2d 8b08 	vpush	{d8-d11}
 80212a4:	b08f      	sub	sp, #60	; 0x3c
 80212a6:	eeb0 aa40 	vmov.f32	s20, s0
 80212aa:	eef0 9a60 	vmov.f32	s19, s1
 80212ae:	920c      	str	r2, [sp, #48]	; 0x30
 80212b0:	eeb0 9a41 	vmov.f32	s18, s2
 80212b4:	9a25      	ldr	r2, [sp, #148]	; 0x94
 80212b6:	eeb0 8a62 	vmov.f32	s16, s5
 80212ba:	900d      	str	r0, [sp, #52]	; 0x34
 80212bc:	eef0 8a43 	vmov.f32	s17, s6
 80212c0:	6850      	ldr	r0, [r2, #4]
 80212c2:	eef0 ba44 	vmov.f32	s23, s8
 80212c6:	910a      	str	r1, [sp, #40]	; 0x28
 80212c8:	eeb0 ba64 	vmov.f32	s22, s9
 80212cc:	9306      	str	r3, [sp, #24]
 80212ce:	eef0 aa45 	vmov.f32	s21, s10
 80212d2:	6812      	ldr	r2, [r2, #0]
 80212d4:	e9dd 1326 	ldrd	r1, r3, [sp, #152]	; 0x98
 80212d8:	e9dd b521 	ldrd	fp, r5, [sp, #132]	; 0x84
 80212dc:	fb00 1303 	mla	r3, r0, r3, r1
 80212e0:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 80212e4:	9307      	str	r3, [sp, #28]
 80212e6:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80212e8:	681b      	ldr	r3, [r3, #0]
 80212ea:	9308      	str	r3, [sp, #32]
 80212ec:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80212ee:	685c      	ldr	r4, [r3, #4]
 80212f0:	3404      	adds	r4, #4
 80212f2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80212f4:	2b00      	cmp	r3, #0
 80212f6:	dc03      	bgt.n	8021300 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 80212f8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80212fa:	2b00      	cmp	r3, #0
 80212fc:	f340 81d5 	ble.w	80216aa <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40e>
 8021300:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8021302:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8021306:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 802130a:	1e48      	subs	r0, r1, #1
 802130c:	1e56      	subs	r6, r2, #1
 802130e:	9b06      	ldr	r3, [sp, #24]
 8021310:	2b00      	cmp	r3, #0
 8021312:	f340 80b6 	ble.w	8021482 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 8021316:	ea5f 472b 	movs.w	r7, fp, asr #16
 802131a:	ea4f 4325 	mov.w	r3, r5, asr #16
 802131e:	d406      	bmi.n	802132e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8021320:	4287      	cmp	r7, r0
 8021322:	da04      	bge.n	802132e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8021324:	2b00      	cmp	r3, #0
 8021326:	db02      	blt.n	802132e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8021328:	42b3      	cmp	r3, r6
 802132a:	f2c0 80ab 	blt.w	8021484 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 802132e:	3701      	adds	r7, #1
 8021330:	f100 809c 	bmi.w	802146c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d0>
 8021334:	42b9      	cmp	r1, r7
 8021336:	f2c0 8099 	blt.w	802146c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d0>
 802133a:	3301      	adds	r3, #1
 802133c:	f100 8096 	bmi.w	802146c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d0>
 8021340:	429a      	cmp	r2, r3
 8021342:	f2c0 8093 	blt.w	802146c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d0>
 8021346:	9b06      	ldr	r3, [sp, #24]
 8021348:	930b      	str	r3, [sp, #44]	; 0x2c
 802134a:	9b07      	ldr	r3, [sp, #28]
 802134c:	9309      	str	r3, [sp, #36]	; 0x24
 802134e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8021350:	2b00      	cmp	r3, #0
 8021352:	f340 80b4 	ble.w	80214be <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x222>
 8021356:	9828      	ldr	r0, [sp, #160]	; 0xa0
 8021358:	142e      	asrs	r6, r5, #16
 802135a:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 802135c:	f3cb 3303 	ubfx	r3, fp, #12, #4
 8021360:	68c7      	ldr	r7, [r0, #12]
 8021362:	ea5f 402b 	movs.w	r0, fp, asr #16
 8021366:	f3c5 3103 	ubfx	r1, r5, #12, #4
 802136a:	6892      	ldr	r2, [r2, #8]
 802136c:	f100 80fb 	bmi.w	8021566 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ca>
 8021370:	f102 3cff 	add.w	ip, r2, #4294967295
 8021374:	4560      	cmp	r0, ip
 8021376:	f280 80f6 	bge.w	8021566 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ca>
 802137a:	2e00      	cmp	r6, #0
 802137c:	f2c0 80f3 	blt.w	8021566 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ca>
 8021380:	f107 3cff 	add.w	ip, r7, #4294967295
 8021384:	4566      	cmp	r6, ip
 8021386:	f280 80ee 	bge.w	8021566 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ca>
 802138a:	b212      	sxth	r2, r2
 802138c:	fb06 0002 	mla	r0, r6, r2, r0
 8021390:	9e08      	ldr	r6, [sp, #32]
 8021392:	1837      	adds	r7, r6, r0
 8021394:	5c30      	ldrb	r0, [r6, r0]
 8021396:	eb00 0840 	add.w	r8, r0, r0, lsl #1
 802139a:	eb04 0c08 	add.w	ip, r4, r8
 802139e:	2b00      	cmp	r3, #0
 80213a0:	f000 80d3 	beq.w	802154a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ae>
 80213a4:	787e      	ldrb	r6, [r7, #1]
 80213a6:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 80213aa:	4426      	add	r6, r4
 80213ac:	2900      	cmp	r1, #0
 80213ae:	f000 80d4 	beq.w	802155a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2be>
 80213b2:	18b8      	adds	r0, r7, r2
 80213b4:	5cba      	ldrb	r2, [r7, r2]
 80213b6:	7840      	ldrb	r0, [r0, #1]
 80213b8:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80213bc:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80213c0:	4422      	add	r2, r4
 80213c2:	4420      	add	r0, r4
 80213c4:	b29b      	uxth	r3, r3
 80213c6:	78b7      	ldrb	r7, [r6, #2]
 80213c8:	b289      	uxth	r1, r1
 80213ca:	f89c a002 	ldrb.w	sl, [ip, #2]
 80213ce:	f89c c001 	ldrb.w	ip, [ip, #1]
 80213d2:	fb03 f901 	mul.w	r9, r3, r1
 80213d6:	011b      	lsls	r3, r3, #4
 80213d8:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 80213dc:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 80213e0:	eba3 0309 	sub.w	r3, r3, r9
 80213e4:	b289      	uxth	r1, r1
 80213e6:	b29b      	uxth	r3, r3
 80213e8:	ebae 0e01 	sub.w	lr, lr, r1
 80213ec:	435f      	muls	r7, r3
 80213ee:	fa1f fe8e 	uxth.w	lr, lr
 80213f2:	fb0e 770a 	mla	r7, lr, sl, r7
 80213f6:	f892 a002 	ldrb.w	sl, [r2, #2]
 80213fa:	fb01 770a 	mla	r7, r1, sl, r7
 80213fe:	f890 a002 	ldrb.w	sl, [r0, #2]
 8021402:	fb09 7a0a 	mla	sl, r9, sl, r7
 8021406:	f814 7008 	ldrb.w	r7, [r4, r8]
 802140a:	f896 8000 	ldrb.w	r8, [r6]
 802140e:	7876      	ldrb	r6, [r6, #1]
 8021410:	f40a 4a78 	and.w	sl, sl, #63488	; 0xf800
 8021414:	fb03 f808 	mul.w	r8, r3, r8
 8021418:	4373      	muls	r3, r6
 802141a:	fb0e 8807 	mla	r8, lr, r7, r8
 802141e:	7817      	ldrb	r7, [r2, #0]
 8021420:	fb0e 330c 	mla	r3, lr, ip, r3
 8021424:	fb01 8807 	mla	r8, r1, r7, r8
 8021428:	7807      	ldrb	r7, [r0, #0]
 802142a:	fb09 8707 	mla	r7, r9, r7, r8
 802142e:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 8021432:	ea4a 0707 	orr.w	r7, sl, r7
 8021436:	f892 a001 	ldrb.w	sl, [r2, #1]
 802143a:	fb01 310a 	mla	r1, r1, sl, r3
 802143e:	f890 a001 	ldrb.w	sl, [r0, #1]
 8021442:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8021444:	fb09 1a0a 	mla	sl, r9, sl, r1
 8021448:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 802144c:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 8021450:	ea47 070a 	orr.w	r7, r7, sl
 8021454:	801f      	strh	r7, [r3, #0]
 8021456:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8021458:	3302      	adds	r3, #2
 802145a:	9309      	str	r3, [sp, #36]	; 0x24
 802145c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 802145e:	449b      	add	fp, r3
 8021460:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8021462:	441d      	add	r5, r3
 8021464:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8021466:	3b01      	subs	r3, #1
 8021468:	930b      	str	r3, [sp, #44]	; 0x2c
 802146a:	e770      	b.n	802134e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 802146c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 802146e:	449b      	add	fp, r3
 8021470:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8021472:	441d      	add	r5, r3
 8021474:	9b06      	ldr	r3, [sp, #24]
 8021476:	3b01      	subs	r3, #1
 8021478:	9306      	str	r3, [sp, #24]
 802147a:	9b07      	ldr	r3, [sp, #28]
 802147c:	3302      	adds	r3, #2
 802147e:	9307      	str	r3, [sp, #28]
 8021480:	e745      	b.n	802130e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8021482:	d023      	beq.n	80214cc <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x230>
 8021484:	9b06      	ldr	r3, [sp, #24]
 8021486:	9823      	ldr	r0, [sp, #140]	; 0x8c
 8021488:	3b01      	subs	r3, #1
 802148a:	fb00 b003 	mla	r0, r0, r3, fp
 802148e:	1400      	asrs	r0, r0, #16
 8021490:	f53f af59 	bmi.w	8021346 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 8021494:	3901      	subs	r1, #1
 8021496:	4288      	cmp	r0, r1
 8021498:	f6bf af55 	bge.w	8021346 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 802149c:	9924      	ldr	r1, [sp, #144]	; 0x90
 802149e:	fb01 5303 	mla	r3, r1, r3, r5
 80214a2:	141b      	asrs	r3, r3, #16
 80214a4:	f53f af4f 	bmi.w	8021346 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 80214a8:	3a01      	subs	r2, #1
 80214aa:	4293      	cmp	r3, r2
 80214ac:	f6bf af4b 	bge.w	8021346 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 80214b0:	9b06      	ldr	r3, [sp, #24]
 80214b2:	9309      	str	r3, [sp, #36]	; 0x24
 80214b4:	9b07      	ldr	r3, [sp, #28]
 80214b6:	930b      	str	r3, [sp, #44]	; 0x2c
 80214b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80214ba:	2b00      	cmp	r3, #0
 80214bc:	dc70      	bgt.n	80215a0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x304>
 80214be:	9b06      	ldr	r3, [sp, #24]
 80214c0:	9a07      	ldr	r2, [sp, #28]
 80214c2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80214c6:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 80214ca:	9307      	str	r3, [sp, #28]
 80214cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80214ce:	2b00      	cmp	r3, #0
 80214d0:	f340 80eb 	ble.w	80216aa <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40e>
 80214d4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80214d8:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80214da:	ee3a aa2b 	vadd.f32	s20, s20, s23
 80214de:	ee79 9a8b 	vadd.f32	s19, s19, s22
 80214e2:	eef0 6a48 	vmov.f32	s13, s16
 80214e6:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 80214ea:	ee39 9a2a 	vadd.f32	s18, s18, s21
 80214ee:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80214f2:	ee16 ba90 	vmov	fp, s13
 80214f6:	eef0 6a68 	vmov.f32	s13, s17
 80214fa:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80214fe:	ee16 5a90 	vmov	r5, s13
 8021502:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8021506:	ee69 7a27 	vmul.f32	s15, s18, s15
 802150a:	ee37 8a48 	vsub.f32	s16, s14, s16
 802150e:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8021512:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8021516:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 802151a:	ee18 2a10 	vmov	r2, s16
 802151e:	eeb0 8a47 	vmov.f32	s16, s14
 8021522:	fb92 f3f3 	sdiv	r3, r2, r3
 8021526:	ee18 2a90 	vmov	r2, s17
 802152a:	9323      	str	r3, [sp, #140]	; 0x8c
 802152c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 802152e:	eef0 8a67 	vmov.f32	s17, s15
 8021532:	fb92 f3f3 	sdiv	r3, r2, r3
 8021536:	9324      	str	r3, [sp, #144]	; 0x90
 8021538:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802153a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 802153c:	3b01      	subs	r3, #1
 802153e:	930a      	str	r3, [sp, #40]	; 0x28
 8021540:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8021542:	bf08      	it	eq
 8021544:	4613      	moveq	r3, r2
 8021546:	9306      	str	r3, [sp, #24]
 8021548:	e6d3      	b.n	80212f2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56>
 802154a:	b149      	cbz	r1, 8021560 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c4>
 802154c:	5cba      	ldrb	r2, [r7, r2]
 802154e:	4660      	mov	r0, ip
 8021550:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8021554:	4422      	add	r2, r4
 8021556:	4666      	mov	r6, ip
 8021558:	e734      	b.n	80213c4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x128>
 802155a:	4660      	mov	r0, ip
 802155c:	4662      	mov	r2, ip
 802155e:	e731      	b.n	80213c4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x128>
 8021560:	4660      	mov	r0, ip
 8021562:	4662      	mov	r2, ip
 8021564:	e7f7      	b.n	8021556 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ba>
 8021566:	f110 0c01 	adds.w	ip, r0, #1
 802156a:	f53f af74 	bmi.w	8021456 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 802156e:	4562      	cmp	r2, ip
 8021570:	f6ff af71 	blt.w	8021456 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 8021574:	f116 0c01 	adds.w	ip, r6, #1
 8021578:	f53f af6d 	bmi.w	8021456 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 802157c:	4567      	cmp	r7, ip
 802157e:	f6ff af6a 	blt.w	8021456 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 8021582:	b23f      	sxth	r7, r7
 8021584:	b212      	sxth	r2, r2
 8021586:	9701      	str	r7, [sp, #4]
 8021588:	9200      	str	r2, [sp, #0]
 802158a:	e9cd 3104 	strd	r3, r1, [sp, #16]
 802158e:	e9cd 0602 	strd	r0, r6, [sp, #8]
 8021592:	4623      	mov	r3, r4
 8021594:	980d      	ldr	r0, [sp, #52]	; 0x34
 8021596:	e9dd 2108 	ldrd	r2, r1, [sp, #32]
 802159a:	f7ff fdc5 	bl	8021128 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh>
 802159e:	e75a      	b.n	8021456 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 80215a0:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 80215a2:	ea4f 462b 	mov.w	r6, fp, asr #16
 80215a6:	1428      	asrs	r0, r5, #16
 80215a8:	f3cb 3303 	ubfx	r3, fp, #12, #4
 80215ac:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 80215b0:	f3c5 3103 	ubfx	r1, r5, #12, #4
 80215b4:	fb02 6000 	mla	r0, r2, r0, r6
 80215b8:	9e08      	ldr	r6, [sp, #32]
 80215ba:	f816 8000 	ldrb.w	r8, [r6, r0]
 80215be:	1837      	adds	r7, r6, r0
 80215c0:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 80215c4:	eb04 0c08 	add.w	ip, r4, r8
 80215c8:	2b00      	cmp	r3, #0
 80215ca:	d060      	beq.n	802168e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f2>
 80215cc:	787e      	ldrb	r6, [r7, #1]
 80215ce:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 80215d2:	4426      	add	r6, r4
 80215d4:	2900      	cmp	r1, #0
 80215d6:	d062      	beq.n	802169e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x402>
 80215d8:	18b8      	adds	r0, r7, r2
 80215da:	5cba      	ldrb	r2, [r7, r2]
 80215dc:	7840      	ldrb	r0, [r0, #1]
 80215de:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80215e2:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80215e6:	4422      	add	r2, r4
 80215e8:	4420      	add	r0, r4
 80215ea:	b29b      	uxth	r3, r3
 80215ec:	78b7      	ldrb	r7, [r6, #2]
 80215ee:	b289      	uxth	r1, r1
 80215f0:	f89c a002 	ldrb.w	sl, [ip, #2]
 80215f4:	f89c c001 	ldrb.w	ip, [ip, #1]
 80215f8:	fb03 f901 	mul.w	r9, r3, r1
 80215fc:	011b      	lsls	r3, r3, #4
 80215fe:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 8021602:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 8021606:	eba3 0309 	sub.w	r3, r3, r9
 802160a:	b289      	uxth	r1, r1
 802160c:	b29b      	uxth	r3, r3
 802160e:	ebae 0e01 	sub.w	lr, lr, r1
 8021612:	435f      	muls	r7, r3
 8021614:	fa1f fe8e 	uxth.w	lr, lr
 8021618:	fb0e 770a 	mla	r7, lr, sl, r7
 802161c:	f892 a002 	ldrb.w	sl, [r2, #2]
 8021620:	fb01 770a 	mla	r7, r1, sl, r7
 8021624:	f890 a002 	ldrb.w	sl, [r0, #2]
 8021628:	fb09 7a0a 	mla	sl, r9, sl, r7
 802162c:	f814 7008 	ldrb.w	r7, [r4, r8]
 8021630:	f896 8000 	ldrb.w	r8, [r6]
 8021634:	7876      	ldrb	r6, [r6, #1]
 8021636:	f40a 4a78 	and.w	sl, sl, #63488	; 0xf800
 802163a:	fb03 f808 	mul.w	r8, r3, r8
 802163e:	4373      	muls	r3, r6
 8021640:	7856      	ldrb	r6, [r2, #1]
 8021642:	fb0e 8807 	mla	r8, lr, r7, r8
 8021646:	7817      	ldrb	r7, [r2, #0]
 8021648:	fb0e 330c 	mla	r3, lr, ip, r3
 802164c:	fb01 8807 	mla	r8, r1, r7, r8
 8021650:	7807      	ldrb	r7, [r0, #0]
 8021652:	fb01 3306 	mla	r3, r1, r6, r3
 8021656:	fb09 8707 	mla	r7, r9, r7, r8
 802165a:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 802165e:	ea4a 0707 	orr.w	r7, sl, r7
 8021662:	f890 a001 	ldrb.w	sl, [r0, #1]
 8021666:	fb09 3a0a 	mla	sl, r9, sl, r3
 802166a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802166c:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8021670:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 8021674:	ea47 070a 	orr.w	r7, r7, sl
 8021678:	f823 7b02 	strh.w	r7, [r3], #2
 802167c:	930b      	str	r3, [sp, #44]	; 0x2c
 802167e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8021680:	449b      	add	fp, r3
 8021682:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8021684:	441d      	add	r5, r3
 8021686:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8021688:	3b01      	subs	r3, #1
 802168a:	9309      	str	r3, [sp, #36]	; 0x24
 802168c:	e714      	b.n	80214b8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x21c>
 802168e:	b149      	cbz	r1, 80216a4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x408>
 8021690:	5cba      	ldrb	r2, [r7, r2]
 8021692:	4660      	mov	r0, ip
 8021694:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8021698:	4422      	add	r2, r4
 802169a:	4666      	mov	r6, ip
 802169c:	e7a5      	b.n	80215ea <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34e>
 802169e:	4660      	mov	r0, ip
 80216a0:	4662      	mov	r2, ip
 80216a2:	e7a2      	b.n	80215ea <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34e>
 80216a4:	4660      	mov	r0, ip
 80216a6:	4662      	mov	r2, ip
 80216a8:	e7f7      	b.n	802169a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3fe>
 80216aa:	b00f      	add	sp, #60	; 0x3c
 80216ac:	ecbd 8b08 	vpop	{d8-d11}
 80216b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080216b4 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh>:
 80216b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80216b8:	880e      	ldrh	r6, [r1, #0]
 80216ba:	b085      	sub	sp, #20
 80216bc:	4691      	mov	r9, r2
 80216be:	ea4f 2e26 	mov.w	lr, r6, asr #8
 80216c2:	f9bd c038 	ldrsh.w	ip, [sp, #56]	; 0x38
 80216c6:	f9bd 803c 	ldrsh.w	r8, [sp, #60]	; 0x3c
 80216ca:	f00e 02f8 	and.w	r2, lr, #248	; 0xf8
 80216ce:	ea4f 0ee6 	mov.w	lr, r6, asr #3
 80216d2:	00f6      	lsls	r6, r6, #3
 80216d4:	f89d 0048 	ldrb.w	r0, [sp, #72]	; 0x48
 80216d8:	9200      	str	r2, [sp, #0]
 80216da:	f00e 02fc 	and.w	r2, lr, #252	; 0xfc
 80216de:	f89d 704c 	ldrb.w	r7, [sp, #76]	; 0x4c
 80216e2:	9201      	str	r2, [sp, #4]
 80216e4:	b2f2      	uxtb	r2, r6
 80216e6:	e9dd 5410 	ldrd	r5, r4, [sp, #64]	; 0x40
 80216ea:	9202      	str	r2, [sp, #8]
 80216ec:	fb04 560c 	mla	r6, r4, ip, r5
 80216f0:	2c00      	cmp	r4, #0
 80216f2:	eb09 0e06 	add.w	lr, r9, r6
 80216f6:	db3e      	blt.n	8021776 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xc2>
 80216f8:	45a0      	cmp	r8, r4
 80216fa:	dd3c      	ble.n	8021776 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xc2>
 80216fc:	2d00      	cmp	r5, #0
 80216fe:	db38      	blt.n	8021772 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xbe>
 8021700:	45ac      	cmp	ip, r5
 8021702:	dd36      	ble.n	8021772 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xbe>
 8021704:	f819 2006 	ldrb.w	r2, [r9, r6]
 8021708:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 802170c:	1c6e      	adds	r6, r5, #1
 802170e:	d435      	bmi.n	802177c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xc8>
 8021710:	45b4      	cmp	ip, r6
 8021712:	dd33      	ble.n	802177c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xc8>
 8021714:	b3a0      	cbz	r0, 8021780 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xcc>
 8021716:	f89e 6001 	ldrb.w	r6, [lr, #1]
 802171a:	f853 6026 	ldr.w	r6, [r3, r6, lsl #2]
 802171e:	3401      	adds	r4, #1
 8021720:	d432      	bmi.n	8021788 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xd4>
 8021722:	45a0      	cmp	r8, r4
 8021724:	dd30      	ble.n	8021788 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xd4>
 8021726:	b397      	cbz	r7, 802178e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xda>
 8021728:	2d00      	cmp	r5, #0
 802172a:	db2b      	blt.n	8021784 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xd0>
 802172c:	45ac      	cmp	ip, r5
 802172e:	dd29      	ble.n	8021784 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xd0>
 8021730:	f81e 400c 	ldrb.w	r4, [lr, ip]
 8021734:	f853 4024 	ldr.w	r4, [r3, r4, lsl #2]
 8021738:	3501      	adds	r5, #1
 802173a:	d42b      	bmi.n	8021794 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xe0>
 802173c:	45ac      	cmp	ip, r5
 802173e:	dd29      	ble.n	8021794 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xe0>
 8021740:	b350      	cbz	r0, 8021798 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xe4>
 8021742:	44f4      	add	ip, lr
 8021744:	f89c 5001 	ldrb.w	r5, [ip, #1]
 8021748:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 802174c:	280f      	cmp	r0, #15
 802174e:	ea4f 6b12 	mov.w	fp, r2, lsr #24
 8021752:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 8021756:	ea4f 6914 	mov.w	r9, r4, lsr #24
 802175a:	ea4f 6813 	mov.w	r8, r3, lsr #24
 802175e:	d801      	bhi.n	8021764 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xb0>
 8021760:	2f0f      	cmp	r7, #15
 8021762:	d91b      	bls.n	802179c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xe8>
 8021764:	4b85      	ldr	r3, [pc, #532]	; (802197c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x2c8>)
 8021766:	f240 210d 	movw	r1, #525	; 0x20d
 802176a:	4a85      	ldr	r2, [pc, #532]	; (8021980 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x2cc>)
 802176c:	4885      	ldr	r0, [pc, #532]	; (8021984 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x2d0>)
 802176e:	f005 fcdb 	bl	8027128 <__assert_func>
 8021772:	2200      	movs	r2, #0
 8021774:	e7ca      	b.n	802170c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x58>
 8021776:	2600      	movs	r6, #0
 8021778:	4632      	mov	r2, r6
 802177a:	e7d0      	b.n	802171e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x6a>
 802177c:	2600      	movs	r6, #0
 802177e:	e7ce      	b.n	802171e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x6a>
 8021780:	4606      	mov	r6, r0
 8021782:	e7cc      	b.n	802171e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x6a>
 8021784:	2400      	movs	r4, #0
 8021786:	e7d7      	b.n	8021738 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x84>
 8021788:	2300      	movs	r3, #0
 802178a:	461c      	mov	r4, r3
 802178c:	e7de      	b.n	802174c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x98>
 802178e:	463b      	mov	r3, r7
 8021790:	463c      	mov	r4, r7
 8021792:	e7db      	b.n	802174c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x98>
 8021794:	2300      	movs	r3, #0
 8021796:	e7d9      	b.n	802174c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x98>
 8021798:	4603      	mov	r3, r0
 802179a:	e7d7      	b.n	802174c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x98>
 802179c:	b280      	uxth	r0, r0
 802179e:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 80217a2:	b2bf      	uxth	r7, r7
 80217a4:	fb00 fe07 	mul.w	lr, r0, r7
 80217a8:	ea4f 1000 	mov.w	r0, r0, lsl #4
 80217ac:	ebce 1707 	rsb	r7, lr, r7, lsl #4
 80217b0:	eba0 0c0e 	sub.w	ip, r0, lr
 80217b4:	f5c0 7580 	rsb	r5, r0, #256	; 0x100
 80217b8:	b2bf      	uxth	r7, r7
 80217ba:	fa1f fc8c 	uxth.w	ip, ip
 80217be:	eba5 0507 	sub.w	r5, r5, r7
 80217c2:	fb0c f00a 	mul.w	r0, ip, sl
 80217c6:	b2ad      	uxth	r5, r5
 80217c8:	fb05 000b 	mla	r0, r5, fp, r0
 80217cc:	fb07 0009 	mla	r0, r7, r9, r0
 80217d0:	fb0e 0008 	mla	r0, lr, r8, r0
 80217d4:	f3c0 2007 	ubfx	r0, r0, #8, #8
 80217d8:	9003      	str	r0, [sp, #12]
 80217da:	d018      	beq.n	802180e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x15a>
 80217dc:	f002 10ff 	and.w	r0, r2, #16711935	; 0xff00ff
 80217e0:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 80217e4:	fb0b f000 	mul.w	r0, fp, r0
 80217e8:	fb0b fb02 	mul.w	fp, fp, r2
 80217ec:	0a02      	lsrs	r2, r0, #8
 80217ee:	f100 1001 	add.w	r0, r0, #65537	; 0x10001
 80217f2:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 80217f6:	4402      	add	r2, r0
 80217f8:	f50b 7080 	add.w	r0, fp, #256	; 0x100
 80217fc:	eb00 201b 	add.w	r0, r0, fp, lsr #8
 8021800:	0a12      	lsrs	r2, r2, #8
 8021802:	0a00      	lsrs	r0, r0, #8
 8021804:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8021808:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 802180c:	4302      	orrs	r2, r0
 802180e:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 8021812:	d019      	beq.n	8021848 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x194>
 8021814:	f006 1bff 	and.w	fp, r6, #16711935	; 0xff00ff
 8021818:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 802181c:	fb0a fb0b 	mul.w	fp, sl, fp
 8021820:	fb0a fa06 	mul.w	sl, sl, r6
 8021824:	ea4f 261b 	mov.w	r6, fp, lsr #8
 8021828:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 802182c:	f50a 7080 	add.w	r0, sl, #256	; 0x100
 8021830:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8021834:	eb00 201a 	add.w	r0, r0, sl, lsr #8
 8021838:	445e      	add	r6, fp
 802183a:	0a00      	lsrs	r0, r0, #8
 802183c:	0a36      	lsrs	r6, r6, #8
 802183e:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8021842:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8021846:	4306      	orrs	r6, r0
 8021848:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 802184c:	d019      	beq.n	8021882 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x1ce>
 802184e:	f004 1aff 	and.w	sl, r4, #16711935	; 0xff00ff
 8021852:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8021856:	fb09 fa0a 	mul.w	sl, r9, sl
 802185a:	fb09 f904 	mul.w	r9, r9, r4
 802185e:	ea4f 241a 	mov.w	r4, sl, lsr #8
 8021862:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8021866:	f509 7080 	add.w	r0, r9, #256	; 0x100
 802186a:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 802186e:	eb00 2019 	add.w	r0, r0, r9, lsr #8
 8021872:	4454      	add	r4, sl
 8021874:	0a00      	lsrs	r0, r0, #8
 8021876:	0a24      	lsrs	r4, r4, #8
 8021878:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 802187c:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8021880:	4304      	orrs	r4, r0
 8021882:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8021886:	d019      	beq.n	80218bc <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x208>
 8021888:	f003 19ff 	and.w	r9, r3, #16711935	; 0xff00ff
 802188c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8021890:	fb08 f909 	mul.w	r9, r8, r9
 8021894:	fb08 f803 	mul.w	r8, r8, r3
 8021898:	ea4f 2319 	mov.w	r3, r9, lsr #8
 802189c:	f109 1901 	add.w	r9, r9, #65537	; 0x10001
 80218a0:	f508 7080 	add.w	r0, r8, #256	; 0x100
 80218a4:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80218a8:	eb00 2018 	add.w	r0, r0, r8, lsr #8
 80218ac:	444b      	add	r3, r9
 80218ae:	0a00      	lsrs	r0, r0, #8
 80218b0:	0a1b      	lsrs	r3, r3, #8
 80218b2:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 80218b6:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80218ba:	4303      	orrs	r3, r0
 80218bc:	f006 18ff 	and.w	r8, r6, #16711935	; 0xff00ff
 80218c0:	f002 10ff 	and.w	r0, r2, #16711935	; 0xff00ff
 80218c4:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 80218c8:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 80218cc:	fb0c f808 	mul.w	r8, ip, r8
 80218d0:	fb0c f606 	mul.w	r6, ip, r6
 80218d4:	fb05 8800 	mla	r8, r5, r0, r8
 80218d8:	f004 10ff 	and.w	r0, r4, #16711935	; 0xff00ff
 80218dc:	fb05 6202 	mla	r2, r5, r2, r6
 80218e0:	f89d 5050 	ldrb.w	r5, [sp, #80]	; 0x50
 80218e4:	fb07 8800 	mla	r8, r7, r0, r8
 80218e8:	f003 10ff 	and.w	r0, r3, #16711935	; 0xff00ff
 80218ec:	b2ad      	uxth	r5, r5
 80218ee:	fb0e 8000 	mla	r0, lr, r0, r8
 80218f2:	0a00      	lsrs	r0, r0, #8
 80218f4:	f000 18ff 	and.w	r8, r0, #16711935	; 0xff00ff
 80218f8:	f404 407f 	and.w	r0, r4, #65280	; 0xff00
 80218fc:	9c00      	ldr	r4, [sp, #0]
 80218fe:	fb07 2700 	mla	r7, r7, r0, r2
 8021902:	f403 407f 	and.w	r0, r3, #65280	; 0xff00
 8021906:	9b03      	ldr	r3, [sp, #12]
 8021908:	fb0e 7000 	mla	r0, lr, r0, r7
 802190c:	436b      	muls	r3, r5
 802190e:	0a00      	lsrs	r0, r0, #8
 8021910:	1c5a      	adds	r2, r3, #1
 8021912:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8021916:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 802191a:	ea48 0000 	orr.w	r0, r8, r0
 802191e:	ea6f 2212 	mvn.w	r2, r2, lsr #8
 8021922:	0c03      	lsrs	r3, r0, #16
 8021924:	b2d2      	uxtb	r2, r2
 8021926:	fb14 f602 	smulbb	r6, r4, r2
 802192a:	f3c0 2407 	ubfx	r4, r0, #8, #8
 802192e:	b2c0      	uxtb	r0, r0
 8021930:	fb03 6305 	mla	r3, r3, r5, r6
 8021934:	b29e      	uxth	r6, r3
 8021936:	9b01      	ldr	r3, [sp, #4]
 8021938:	fb13 f302 	smulbb	r3, r3, r2
 802193c:	fb04 3405 	mla	r4, r4, r5, r3
 8021940:	9b02      	ldr	r3, [sp, #8]
 8021942:	fb13 f202 	smulbb	r2, r3, r2
 8021946:	b2a4      	uxth	r4, r4
 8021948:	1c73      	adds	r3, r6, #1
 802194a:	fb00 2005 	mla	r0, r0, r5, r2
 802194e:	eb03 2316 	add.w	r3, r3, r6, lsr #8
 8021952:	b280      	uxth	r0, r0
 8021954:	f403 4378 	and.w	r3, r3, #63488	; 0xf800
 8021958:	1c42      	adds	r2, r0, #1
 802195a:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 802195e:	1c62      	adds	r2, r4, #1
 8021960:	eb02 2214 	add.w	r2, r2, r4, lsr #8
 8021964:	f3c0 20c4 	ubfx	r0, r0, #11, #5
 8021968:	0952      	lsrs	r2, r2, #5
 802196a:	4303      	orrs	r3, r0
 802196c:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8021970:	4313      	orrs	r3, r2
 8021972:	800b      	strh	r3, [r1, #0]
 8021974:	b005      	add	sp, #20
 8021976:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802197a:	bf00      	nop
 802197c:	0802b942 	.word	0x0802b942
 8021980:	0802bf05 	.word	0x0802bf05
 8021984:	0802ba2b 	.word	0x0802ba2b

08021988 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8021988:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802198c:	ed2d 8b08 	vpush	{d8-d11}
 8021990:	b09f      	sub	sp, #124	; 0x7c
 8021992:	eeb0 aa40 	vmov.f32	s20, s0
 8021996:	eef0 9a60 	vmov.f32	s19, s1
 802199a:	921b      	str	r2, [sp, #108]	; 0x6c
 802199c:	eeb0 9a41 	vmov.f32	s18, s2
 80219a0:	9a35      	ldr	r2, [sp, #212]	; 0xd4
 80219a2:	eeb0 8a62 	vmov.f32	s16, s5
 80219a6:	9309      	str	r3, [sp, #36]	; 0x24
 80219a8:	eef0 8a43 	vmov.f32	s17, s6
 80219ac:	f89d 30e4 	ldrb.w	r3, [sp, #228]	; 0xe4
 80219b0:	eef0 ba44 	vmov.f32	s23, s8
 80219b4:	901d      	str	r0, [sp, #116]	; 0x74
 80219b6:	eeb0 ba64 	vmov.f32	s22, s9
 80219ba:	931c      	str	r3, [sp, #112]	; 0x70
 80219bc:	eef0 aa45 	vmov.f32	s21, s10
 80219c0:	6850      	ldr	r0, [r2, #4]
 80219c2:	9119      	str	r1, [sp, #100]	; 0x64
 80219c4:	6812      	ldr	r2, [r2, #0]
 80219c6:	9d32      	ldr	r5, [sp, #200]	; 0xc8
 80219c8:	e9dd 1336 	ldrd	r1, r3, [sp, #216]	; 0xd8
 80219cc:	fb00 1303 	mla	r3, r0, r3, r1
 80219d0:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 80219d4:	930c      	str	r3, [sp, #48]	; 0x30
 80219d6:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 80219d8:	681b      	ldr	r3, [r3, #0]
 80219da:	9312      	str	r3, [sp, #72]	; 0x48
 80219dc:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 80219de:	685e      	ldr	r6, [r3, #4]
 80219e0:	f8bd 3070 	ldrh.w	r3, [sp, #112]	; 0x70
 80219e4:	3604      	adds	r6, #4
 80219e6:	930d      	str	r3, [sp, #52]	; 0x34
 80219e8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80219ea:	2b00      	cmp	r3, #0
 80219ec:	dc03      	bgt.n	80219f6 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 80219ee:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80219f0:	2b00      	cmp	r3, #0
 80219f2:	f340 838d 	ble.w	8022110 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x788>
 80219f6:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 80219f8:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80219fc:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8021a00:	1e48      	subs	r0, r1, #1
 8021a02:	1e57      	subs	r7, r2, #1
 8021a04:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8021a06:	2b00      	cmp	r3, #0
 8021a08:	f340 819a 	ble.w	8021d40 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3b8>
 8021a0c:	9c31      	ldr	r4, [sp, #196]	; 0xc4
 8021a0e:	142b      	asrs	r3, r5, #16
 8021a10:	ea5f 4c24 	movs.w	ip, r4, asr #16
 8021a14:	d406      	bmi.n	8021a24 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 8021a16:	4584      	cmp	ip, r0
 8021a18:	da04      	bge.n	8021a24 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 8021a1a:	2b00      	cmp	r3, #0
 8021a1c:	db02      	blt.n	8021a24 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 8021a1e:	42bb      	cmp	r3, r7
 8021a20:	f2c0 818f 	blt.w	8021d42 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ba>
 8021a24:	f11c 0c01 	adds.w	ip, ip, #1
 8021a28:	f100 817d 	bmi.w	8021d26 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x39e>
 8021a2c:	4561      	cmp	r1, ip
 8021a2e:	f2c0 817a 	blt.w	8021d26 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x39e>
 8021a32:	3301      	adds	r3, #1
 8021a34:	f100 8177 	bmi.w	8021d26 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x39e>
 8021a38:	429a      	cmp	r2, r3
 8021a3a:	f2c0 8174 	blt.w	8021d26 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x39e>
 8021a3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8021a40:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8021a42:	931a      	str	r3, [sp, #104]	; 0x68
 8021a44:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8021a46:	2b00      	cmp	r3, #0
 8021a48:	f340 8199 	ble.w	8021d7e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f6>
 8021a4c:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 8021a4e:	ea4f 4c25 	mov.w	ip, r5, asr #16
 8021a52:	f3c5 3103 	ubfx	r1, r5, #12, #4
 8021a56:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8021a5a:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 8021a5c:	e9d3 0e02 	ldrd	r0, lr, [r3, #8]
 8021a60:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 8021a62:	141b      	asrs	r3, r3, #16
 8021a64:	f100 81dc 	bmi.w	8021e20 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x498>
 8021a68:	f100 38ff 	add.w	r8, r0, #4294967295
 8021a6c:	4543      	cmp	r3, r8
 8021a6e:	f280 81d7 	bge.w	8021e20 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x498>
 8021a72:	f1bc 0f00 	cmp.w	ip, #0
 8021a76:	f2c0 81d3 	blt.w	8021e20 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x498>
 8021a7a:	f10e 38ff 	add.w	r8, lr, #4294967295
 8021a7e:	45c4      	cmp	ip, r8
 8021a80:	f280 81ce 	bge.w	8021e20 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x498>
 8021a84:	b200      	sxth	r0, r0
 8021a86:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8021a88:	fb0c 3300 	mla	r3, ip, r0, r3
 8021a8c:	eb04 0803 	add.w	r8, r4, r3
 8021a90:	5ce3      	ldrb	r3, [r4, r3]
 8021a92:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8021a96:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 8021a9a:	2a00      	cmp	r2, #0
 8021a9c:	f000 81b5 	beq.w	8021e0a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x482>
 8021aa0:	f898 c001 	ldrb.w	ip, [r8, #1]
 8021aa4:	f856 402c 	ldr.w	r4, [r6, ip, lsl #2]
 8021aa8:	940e      	str	r4, [sp, #56]	; 0x38
 8021aaa:	0e24      	lsrs	r4, r4, #24
 8021aac:	9415      	str	r4, [sp, #84]	; 0x54
 8021aae:	b179      	cbz	r1, 8021ad0 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 8021ab0:	eb08 0c00 	add.w	ip, r8, r0
 8021ab4:	f818 0000 	ldrb.w	r0, [r8, r0]
 8021ab8:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 8021abc:	900a      	str	r0, [sp, #40]	; 0x28
 8021abe:	0e00      	lsrs	r0, r0, #24
 8021ac0:	9013      	str	r0, [sp, #76]	; 0x4c
 8021ac2:	f89c 0001 	ldrb.w	r0, [ip, #1]
 8021ac6:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 8021aca:	900f      	str	r0, [sp, #60]	; 0x3c
 8021acc:	0e00      	lsrs	r0, r0, #24
 8021ace:	9016      	str	r0, [sp, #88]	; 0x58
 8021ad0:	b292      	uxth	r2, r2
 8021ad2:	9815      	ldr	r0, [sp, #84]	; 0x54
 8021ad4:	b289      	uxth	r1, r1
 8021ad6:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8021ad8:	fb02 f901 	mul.w	r9, r2, r1
 8021adc:	0112      	lsls	r2, r2, #4
 8021ade:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 8021ae2:	eba2 0809 	sub.w	r8, r2, r9
 8021ae6:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 8021aea:	b289      	uxth	r1, r1
 8021aec:	fa1f f888 	uxth.w	r8, r8
 8021af0:	1a52      	subs	r2, r2, r1
 8021af2:	fb08 f000 	mul.w	r0, r8, r0
 8021af6:	b292      	uxth	r2, r2
 8021af8:	fb02 000e 	mla	r0, r2, lr, r0
 8021afc:	fb01 0004 	mla	r0, r1, r4, r0
 8021b00:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8021b02:	fb09 0004 	mla	r0, r9, r4, r0
 8021b06:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8021b0a:	2800      	cmp	r0, #0
 8021b0c:	f000 8100 	beq.w	8021d10 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x388>
 8021b10:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8021b14:	d01b      	beq.n	8021b4e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c6>
 8021b16:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 8021b1a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8021b1e:	fb0e fa0a 	mul.w	sl, lr, sl
 8021b22:	fb0e fe03 	mul.w	lr, lr, r3
 8021b26:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8021b2a:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8021b2e:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 8021b32:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8021b36:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 8021b3a:	4453      	add	r3, sl
 8021b3c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8021b40:	0a1b      	lsrs	r3, r3, #8
 8021b42:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8021b46:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8021b4a:	ea43 030c 	orr.w	r3, r3, ip
 8021b4e:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8021b50:	2cff      	cmp	r4, #255	; 0xff
 8021b52:	d021      	beq.n	8021b98 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x210>
 8021b54:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8021b56:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8021b5a:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8021b5c:	fb04 fb0b 	mul.w	fp, r4, fp
 8021b60:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8021b62:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8021b66:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8021b68:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8021b6c:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8021b70:	fb04 fa0a 	mul.w	sl, r4, sl
 8021b74:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8021b78:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8021b7c:	44de      	add	lr, fp
 8021b7e:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8021b82:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8021b86:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8021b8a:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8021b8e:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8021b92:	ea4e 040a 	orr.w	r4, lr, sl
 8021b96:	940e      	str	r4, [sp, #56]	; 0x38
 8021b98:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8021b9a:	2cff      	cmp	r4, #255	; 0xff
 8021b9c:	d021      	beq.n	8021be2 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25a>
 8021b9e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8021ba0:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8021ba4:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8021ba6:	fb04 fb0b 	mul.w	fp, r4, fp
 8021baa:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8021bac:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8021bb0:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8021bb2:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8021bb6:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8021bba:	fb04 fa0a 	mul.w	sl, r4, sl
 8021bbe:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8021bc2:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8021bc6:	44de      	add	lr, fp
 8021bc8:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8021bcc:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8021bd0:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8021bd4:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8021bd8:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8021bdc:	ea4e 040a 	orr.w	r4, lr, sl
 8021be0:	940a      	str	r4, [sp, #40]	; 0x28
 8021be2:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8021be4:	2cff      	cmp	r4, #255	; 0xff
 8021be6:	d021      	beq.n	8021c2c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a4>
 8021be8:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8021bea:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8021bee:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8021bf0:	fb04 fb0b 	mul.w	fp, r4, fp
 8021bf4:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8021bf6:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8021bfa:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8021bfc:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8021c00:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8021c04:	fb04 fa0a 	mul.w	sl, r4, sl
 8021c08:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8021c0c:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8021c10:	44de      	add	lr, fp
 8021c12:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8021c16:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8021c1a:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8021c1e:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8021c22:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8021c26:	ea4e 040a 	orr.w	r4, lr, sl
 8021c2a:	940f      	str	r4, [sp, #60]	; 0x3c
 8021c2c:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8021c2e:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
 8021c32:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8021c36:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8021c3a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8021c3c:	fb08 fc0c 	mul.w	ip, r8, ip
 8021c40:	fb02 cc0e 	mla	ip, r2, lr, ip
 8021c44:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 8021c48:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8021c4a:	fb01 cc0e 	mla	ip, r1, lr, ip
 8021c4e:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 8021c52:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8021c54:	fb09 cc0e 	mla	ip, r9, lr, ip
 8021c58:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 8021c5c:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8021c5e:	fb08 f80e 	mul.w	r8, r8, lr
 8021c62:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8021c66:	f8b7 e000 	ldrh.w	lr, [r7]
 8021c6a:	fb02 8303 	mla	r3, r2, r3, r8
 8021c6e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8021c70:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8021c74:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 8021c78:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8021c7a:	fb01 330a 	mla	r3, r1, sl, r3
 8021c7e:	f402 417f 	and.w	r1, r2, #65280	; 0xff00
 8021c82:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8021c84:	fb09 3901 	mla	r9, r9, r1, r3
 8021c88:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8021c8a:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8021c8e:	4343      	muls	r3, r0
 8021c90:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 8021c94:	1c58      	adds	r0, r3, #1
 8021c96:	ea4c 0c09 	orr.w	ip, ip, r9
 8021c9a:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 8021c9e:	ea4f 232e 	mov.w	r3, lr, asr #8
 8021ca2:	ea4f 411c 	mov.w	r1, ip, lsr #16
 8021ca6:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 8021caa:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 8021cae:	fb11 f102 	smulbb	r1, r1, r2
 8021cb2:	b2c0      	uxtb	r0, r0
 8021cb4:	ea4f 02ee 	mov.w	r2, lr, asr #3
 8021cb8:	fb03 1300 	mla	r3, r3, r0, r1
 8021cbc:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 8021cc0:	b299      	uxth	r1, r3
 8021cc2:	f3cc 2307 	ubfx	r3, ip, #8, #8
 8021cc6:	fa5f fc8c 	uxtb.w	ip, ip
 8021cca:	fb13 f304 	smulbb	r3, r3, r4
 8021cce:	fb1c fc04 	smulbb	ip, ip, r4
 8021cd2:	fb02 3200 	mla	r2, r2, r0, r3
 8021cd6:	ea4f 03ce 	mov.w	r3, lr, lsl #3
 8021cda:	b2db      	uxtb	r3, r3
 8021cdc:	b292      	uxth	r2, r2
 8021cde:	fb03 cc00 	mla	ip, r3, r0, ip
 8021ce2:	1c4b      	adds	r3, r1, #1
 8021ce4:	fa1f fc8c 	uxth.w	ip, ip
 8021ce8:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 8021cec:	1c51      	adds	r1, r2, #1
 8021cee:	f10c 0001 	add.w	r0, ip, #1
 8021cf2:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 8021cf6:	f403 4378 	and.w	r3, r3, #63488	; 0xf800
 8021cfa:	eb00 2c1c 	add.w	ip, r0, ip, lsr #8
 8021cfe:	0952      	lsrs	r2, r2, #5
 8021d00:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 8021d04:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8021d08:	ea43 030c 	orr.w	r3, r3, ip
 8021d0c:	4313      	orrs	r3, r2
 8021d0e:	803b      	strh	r3, [r7, #0]
 8021d10:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 8021d12:	3702      	adds	r7, #2
 8021d14:	9a31      	ldr	r2, [sp, #196]	; 0xc4
 8021d16:	441a      	add	r2, r3
 8021d18:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8021d1a:	441d      	add	r5, r3
 8021d1c:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8021d1e:	9231      	str	r2, [sp, #196]	; 0xc4
 8021d20:	3b01      	subs	r3, #1
 8021d22:	931a      	str	r3, [sp, #104]	; 0x68
 8021d24:	e68e      	b.n	8021a44 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xbc>
 8021d26:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 8021d28:	9c31      	ldr	r4, [sp, #196]	; 0xc4
 8021d2a:	441c      	add	r4, r3
 8021d2c:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8021d2e:	441d      	add	r5, r3
 8021d30:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8021d32:	9431      	str	r4, [sp, #196]	; 0xc4
 8021d34:	3b01      	subs	r3, #1
 8021d36:	9309      	str	r3, [sp, #36]	; 0x24
 8021d38:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8021d3a:	3302      	adds	r3, #2
 8021d3c:	930c      	str	r3, [sp, #48]	; 0x30
 8021d3e:	e661      	b.n	8021a04 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8021d40:	d024      	beq.n	8021d8c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x404>
 8021d42:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8021d44:	9833      	ldr	r0, [sp, #204]	; 0xcc
 8021d46:	3b01      	subs	r3, #1
 8021d48:	9c31      	ldr	r4, [sp, #196]	; 0xc4
 8021d4a:	fb00 4003 	mla	r0, r0, r3, r4
 8021d4e:	1400      	asrs	r0, r0, #16
 8021d50:	f53f ae75 	bmi.w	8021a3e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 8021d54:	3901      	subs	r1, #1
 8021d56:	4288      	cmp	r0, r1
 8021d58:	f6bf ae71 	bge.w	8021a3e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 8021d5c:	9934      	ldr	r1, [sp, #208]	; 0xd0
 8021d5e:	fb01 5303 	mla	r3, r1, r3, r5
 8021d62:	141b      	asrs	r3, r3, #16
 8021d64:	f53f ae6b 	bmi.w	8021a3e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 8021d68:	3a01      	subs	r2, #1
 8021d6a:	4293      	cmp	r3, r2
 8021d6c:	f6bf ae67 	bge.w	8021a3e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 8021d70:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 8021d74:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
 8021d78:	f1bb 0f00 	cmp.w	fp, #0
 8021d7c:	dc70      	bgt.n	8021e60 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d8>
 8021d7e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8021d80:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8021d84:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8021d86:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 8021d8a:	930c      	str	r3, [sp, #48]	; 0x30
 8021d8c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8021d8e:	2b00      	cmp	r3, #0
 8021d90:	f340 81be 	ble.w	8022110 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x788>
 8021d94:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8021d98:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8021d9a:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8021d9e:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8021da2:	eef0 6a48 	vmov.f32	s13, s16
 8021da6:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8021daa:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8021dae:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8021db2:	edcd 6a31 	vstr	s13, [sp, #196]	; 0xc4
 8021db6:	eef0 6a68 	vmov.f32	s13, s17
 8021dba:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8021dbe:	ee16 5a90 	vmov	r5, s13
 8021dc2:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8021dc6:	ee69 7a27 	vmul.f32	s15, s18, s15
 8021dca:	ee37 8a48 	vsub.f32	s16, s14, s16
 8021dce:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8021dd2:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8021dd6:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8021dda:	ee18 2a10 	vmov	r2, s16
 8021dde:	eeb0 8a47 	vmov.f32	s16, s14
 8021de2:	fb92 f3f3 	sdiv	r3, r2, r3
 8021de6:	ee18 2a90 	vmov	r2, s17
 8021dea:	9333      	str	r3, [sp, #204]	; 0xcc
 8021dec:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8021dee:	eef0 8a67 	vmov.f32	s17, s15
 8021df2:	fb92 f3f3 	sdiv	r3, r2, r3
 8021df6:	9334      	str	r3, [sp, #208]	; 0xd0
 8021df8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8021dfa:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8021dfc:	3b01      	subs	r3, #1
 8021dfe:	9319      	str	r3, [sp, #100]	; 0x64
 8021e00:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8021e02:	bf08      	it	eq
 8021e04:	4613      	moveq	r3, r2
 8021e06:	9309      	str	r3, [sp, #36]	; 0x24
 8021e08:	e5ee      	b.n	80219e8 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 8021e0a:	2900      	cmp	r1, #0
 8021e0c:	f43f ae60 	beq.w	8021ad0 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 8021e10:	f818 0000 	ldrb.w	r0, [r8, r0]
 8021e14:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 8021e18:	900a      	str	r0, [sp, #40]	; 0x28
 8021e1a:	0e00      	lsrs	r0, r0, #24
 8021e1c:	9013      	str	r0, [sp, #76]	; 0x4c
 8021e1e:	e657      	b.n	8021ad0 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 8021e20:	f113 0801 	adds.w	r8, r3, #1
 8021e24:	f53f af74 	bmi.w	8021d10 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x388>
 8021e28:	4540      	cmp	r0, r8
 8021e2a:	f6ff af71 	blt.w	8021d10 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x388>
 8021e2e:	f11c 0801 	adds.w	r8, ip, #1
 8021e32:	f53f af6d 	bmi.w	8021d10 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x388>
 8021e36:	45c6      	cmp	lr, r8
 8021e38:	f6ff af6a 	blt.w	8021d10 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x388>
 8021e3c:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 8021e3e:	b200      	sxth	r0, r0
 8021e40:	9302      	str	r3, [sp, #8]
 8021e42:	fa0f f38e 	sxth.w	r3, lr
 8021e46:	9000      	str	r0, [sp, #0]
 8021e48:	9301      	str	r3, [sp, #4]
 8021e4a:	4633      	mov	r3, r6
 8021e4c:	981d      	ldr	r0, [sp, #116]	; 0x74
 8021e4e:	e9cd 1405 	strd	r1, r4, [sp, #20]
 8021e52:	e9cd c203 	strd	ip, r2, [sp, #12]
 8021e56:	4639      	mov	r1, r7
 8021e58:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8021e5a:	f7ff fc2b 	bl	80216b4 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh>
 8021e5e:	e757      	b.n	8021d10 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x388>
 8021e60:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 8021e62:	f3c5 3003 	ubfx	r0, r5, #12, #4
 8021e66:	9c31      	ldr	r4, [sp, #196]	; 0xc4
 8021e68:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8021e6c:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 8021e6e:	1427      	asrs	r7, r4, #16
 8021e70:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8021e72:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8021e76:	142b      	asrs	r3, r5, #16
 8021e78:	fb01 7303 	mla	r3, r1, r3, r7
 8021e7c:	18e7      	adds	r7, r4, r3
 8021e7e:	5ce3      	ldrb	r3, [r4, r3]
 8021e80:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8021e84:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 8021e88:	2a00      	cmp	r2, #0
 8021e8a:	f000 8137 	beq.w	80220fc <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x774>
 8021e8e:	f897 e001 	ldrb.w	lr, [r7, #1]
 8021e92:	f856 402e 	ldr.w	r4, [r6, lr, lsl #2]
 8021e96:	9410      	str	r4, [sp, #64]	; 0x40
 8021e98:	0e24      	lsrs	r4, r4, #24
 8021e9a:	9417      	str	r4, [sp, #92]	; 0x5c
 8021e9c:	b170      	cbz	r0, 8021ebc <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x534>
 8021e9e:	eb07 0e01 	add.w	lr, r7, r1
 8021ea2:	5c79      	ldrb	r1, [r7, r1]
 8021ea4:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8021ea8:	910b      	str	r1, [sp, #44]	; 0x2c
 8021eaa:	0e09      	lsrs	r1, r1, #24
 8021eac:	9114      	str	r1, [sp, #80]	; 0x50
 8021eae:	f89e 1001 	ldrb.w	r1, [lr, #1]
 8021eb2:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8021eb6:	9111      	str	r1, [sp, #68]	; 0x44
 8021eb8:	0e09      	lsrs	r1, r1, #24
 8021eba:	9118      	str	r1, [sp, #96]	; 0x60
 8021ebc:	b292      	uxth	r2, r2
 8021ebe:	9917      	ldr	r1, [sp, #92]	; 0x5c
 8021ec0:	b280      	uxth	r0, r0
 8021ec2:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8021ec4:	fb02 f800 	mul.w	r8, r2, r0
 8021ec8:	0112      	lsls	r2, r2, #4
 8021eca:	ebc8 1000 	rsb	r0, r8, r0, lsl #4
 8021ece:	eba2 0e08 	sub.w	lr, r2, r8
 8021ed2:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 8021ed6:	b280      	uxth	r0, r0
 8021ed8:	fa1f fe8e 	uxth.w	lr, lr
 8021edc:	1a12      	subs	r2, r2, r0
 8021ede:	fb0e f101 	mul.w	r1, lr, r1
 8021ee2:	b292      	uxth	r2, r2
 8021ee4:	fb02 110c 	mla	r1, r2, ip, r1
 8021ee8:	fb00 1104 	mla	r1, r0, r4, r1
 8021eec:	9c18      	ldr	r4, [sp, #96]	; 0x60
 8021eee:	fb08 1104 	mla	r1, r8, r4, r1
 8021ef2:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8021ef6:	2900      	cmp	r1, #0
 8021ef8:	f000 80f5 	beq.w	80220e6 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x75e>
 8021efc:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 8021f00:	d019      	beq.n	8021f36 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5ae>
 8021f02:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 8021f06:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8021f0a:	fb0c fa0a 	mul.w	sl, ip, sl
 8021f0e:	fb0c fc03 	mul.w	ip, ip, r3
 8021f12:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8021f16:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8021f1a:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 8021f1e:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8021f22:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 8021f26:	4453      	add	r3, sl
 8021f28:	0a3f      	lsrs	r7, r7, #8
 8021f2a:	0a1b      	lsrs	r3, r3, #8
 8021f2c:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8021f30:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8021f34:	433b      	orrs	r3, r7
 8021f36:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 8021f38:	2cff      	cmp	r4, #255	; 0xff
 8021f3a:	d020      	beq.n	8021f7e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5f6>
 8021f3c:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8021f3e:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8021f42:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 8021f44:	4367      	muls	r7, r4
 8021f46:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8021f48:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8021f4c:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8021f50:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 8021f52:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8021f56:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8021f5a:	fb04 fa0a 	mul.w	sl, r4, sl
 8021f5e:	44bc      	add	ip, r7
 8021f60:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8021f64:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8021f68:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8021f6c:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8021f70:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8021f74:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8021f78:	ea4c 040a 	orr.w	r4, ip, sl
 8021f7c:	9410      	str	r4, [sp, #64]	; 0x40
 8021f7e:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8021f80:	2cff      	cmp	r4, #255	; 0xff
 8021f82:	d020      	beq.n	8021fc6 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x63e>
 8021f84:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8021f86:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8021f8a:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8021f8c:	4367      	muls	r7, r4
 8021f8e:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8021f90:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8021f94:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8021f98:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8021f9a:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8021f9e:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8021fa2:	fb04 fa0a 	mul.w	sl, r4, sl
 8021fa6:	44bc      	add	ip, r7
 8021fa8:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8021fac:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8021fb0:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8021fb4:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8021fb8:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8021fbc:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8021fc0:	ea4c 040a 	orr.w	r4, ip, sl
 8021fc4:	940b      	str	r4, [sp, #44]	; 0x2c
 8021fc6:	9c18      	ldr	r4, [sp, #96]	; 0x60
 8021fc8:	2cff      	cmp	r4, #255	; 0xff
 8021fca:	d020      	beq.n	802200e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x686>
 8021fcc:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8021fce:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8021fd2:	9c18      	ldr	r4, [sp, #96]	; 0x60
 8021fd4:	4367      	muls	r7, r4
 8021fd6:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8021fd8:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8021fdc:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8021fe0:	9c18      	ldr	r4, [sp, #96]	; 0x60
 8021fe2:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8021fe6:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8021fea:	fb04 fa0a 	mul.w	sl, r4, sl
 8021fee:	44bc      	add	ip, r7
 8021ff0:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8021ff4:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8021ff8:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8021ffc:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8022000:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8022004:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8022008:	ea4c 040a 	orr.w	r4, ip, sl
 802200c:	9411      	str	r4, [sp, #68]	; 0x44
 802200e:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8022010:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 8022014:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8022018:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 802201c:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 802201e:	fb0e f707 	mul.w	r7, lr, r7
 8022022:	fb02 770c 	mla	r7, r2, ip, r7
 8022026:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 802202a:	9c11      	ldr	r4, [sp, #68]	; 0x44
 802202c:	fb00 770c 	mla	r7, r0, ip, r7
 8022030:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8022034:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8022036:	fb08 770c 	mla	r7, r8, ip, r7
 802203a:	f404 4c7f 	and.w	ip, r4, #65280	; 0xff00
 802203e:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8022040:	fb0e fe0c 	mul.w	lr, lr, ip
 8022044:	0a3f      	lsrs	r7, r7, #8
 8022046:	fb02 e303 	mla	r3, r2, r3, lr
 802204a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 802204c:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8022050:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 8022054:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8022056:	fb00 330a 	mla	r3, r0, sl, r3
 802205a:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 802205e:	f8b9 0000 	ldrh.w	r0, [r9]
 8022062:	fb08 3c0c 	mla	ip, r8, ip, r3
 8022066:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8022068:	1202      	asrs	r2, r0, #8
 802206a:	434b      	muls	r3, r1
 802206c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8022070:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 8022074:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8022078:	1c59      	adds	r1, r3, #1
 802207a:	ea47 070c 	orr.w	r7, r7, ip
 802207e:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 8022082:	0c3b      	lsrs	r3, r7, #16
 8022084:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 8022088:	f3c7 2c07 	ubfx	ip, r7, #8, #8
 802208c:	b2ff      	uxtb	r7, r7
 802208e:	fb13 f304 	smulbb	r3, r3, r4
 8022092:	b2c9      	uxtb	r1, r1
 8022094:	fb1c fc04 	smulbb	ip, ip, r4
 8022098:	fb02 3201 	mla	r2, r2, r1, r3
 802209c:	10c3      	asrs	r3, r0, #3
 802209e:	fb17 f704 	smulbb	r7, r7, r4
 80220a2:	00c0      	lsls	r0, r0, #3
 80220a4:	b292      	uxth	r2, r2
 80220a6:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
 80220aa:	b2c0      	uxtb	r0, r0
 80220ac:	fb03 c301 	mla	r3, r3, r1, ip
 80220b0:	f102 0c01 	add.w	ip, r2, #1
 80220b4:	fb00 7001 	mla	r0, r0, r1, r7
 80220b8:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 80220bc:	b280      	uxth	r0, r0
 80220be:	f402 4c78 	and.w	ip, r2, #63488	; 0xf800
 80220c2:	b29b      	uxth	r3, r3
 80220c4:	1c42      	adds	r2, r0, #1
 80220c6:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 80220ca:	f3c0 20c4 	ubfx	r0, r0, #11, #5
 80220ce:	ea4c 0200 	orr.w	r2, ip, r0
 80220d2:	f103 0c01 	add.w	ip, r3, #1
 80220d6:	eb0c 2313 	add.w	r3, ip, r3, lsr #8
 80220da:	095b      	lsrs	r3, r3, #5
 80220dc:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80220e0:	431a      	orrs	r2, r3
 80220e2:	f8a9 2000 	strh.w	r2, [r9]
 80220e6:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 80220e8:	f109 0902 	add.w	r9, r9, #2
 80220ec:	9a31      	ldr	r2, [sp, #196]	; 0xc4
 80220ee:	f10b 3bff 	add.w	fp, fp, #4294967295
 80220f2:	441a      	add	r2, r3
 80220f4:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 80220f6:	9231      	str	r2, [sp, #196]	; 0xc4
 80220f8:	441d      	add	r5, r3
 80220fa:	e63d      	b.n	8021d78 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f0>
 80220fc:	2800      	cmp	r0, #0
 80220fe:	f43f aedd 	beq.w	8021ebc <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x534>
 8022102:	5c79      	ldrb	r1, [r7, r1]
 8022104:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8022108:	910b      	str	r1, [sp, #44]	; 0x2c
 802210a:	0e09      	lsrs	r1, r1, #24
 802210c:	9114      	str	r1, [sp, #80]	; 0x50
 802210e:	e6d5      	b.n	8021ebc <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x534>
 8022110:	b01f      	add	sp, #124	; 0x7c
 8022112:	ecbd 8b08 	vpop	{d8-d11}
 8022116:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0802211c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh>:
 802211c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022120:	880e      	ldrh	r6, [r1, #0]
 8022122:	b085      	sub	sp, #20
 8022124:	4691      	mov	r9, r2
 8022126:	ea4f 2e26 	mov.w	lr, r6, asr #8
 802212a:	f9bd c038 	ldrsh.w	ip, [sp, #56]	; 0x38
 802212e:	f9bd 803c 	ldrsh.w	r8, [sp, #60]	; 0x3c
 8022132:	f00e 02f8 	and.w	r2, lr, #248	; 0xf8
 8022136:	ea4f 0ee6 	mov.w	lr, r6, asr #3
 802213a:	00f6      	lsls	r6, r6, #3
 802213c:	f89d 0048 	ldrb.w	r0, [sp, #72]	; 0x48
 8022140:	9200      	str	r2, [sp, #0]
 8022142:	f00e 02fc 	and.w	r2, lr, #252	; 0xfc
 8022146:	f89d 704c 	ldrb.w	r7, [sp, #76]	; 0x4c
 802214a:	9201      	str	r2, [sp, #4]
 802214c:	b2f2      	uxtb	r2, r6
 802214e:	e9dd 5410 	ldrd	r5, r4, [sp, #64]	; 0x40
 8022152:	9202      	str	r2, [sp, #8]
 8022154:	fb04 560c 	mla	r6, r4, ip, r5
 8022158:	2c00      	cmp	r4, #0
 802215a:	eb09 0e06 	add.w	lr, r9, r6
 802215e:	db3e      	blt.n	80221de <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xc2>
 8022160:	45a0      	cmp	r8, r4
 8022162:	dd3c      	ble.n	80221de <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xc2>
 8022164:	2d00      	cmp	r5, #0
 8022166:	db38      	blt.n	80221da <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xbe>
 8022168:	45ac      	cmp	ip, r5
 802216a:	dd36      	ble.n	80221da <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xbe>
 802216c:	f819 2006 	ldrb.w	r2, [r9, r6]
 8022170:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8022174:	1c6e      	adds	r6, r5, #1
 8022176:	d435      	bmi.n	80221e4 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xc8>
 8022178:	45b4      	cmp	ip, r6
 802217a:	dd33      	ble.n	80221e4 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xc8>
 802217c:	b3a0      	cbz	r0, 80221e8 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xcc>
 802217e:	f89e 6001 	ldrb.w	r6, [lr, #1]
 8022182:	f853 6026 	ldr.w	r6, [r3, r6, lsl #2]
 8022186:	3401      	adds	r4, #1
 8022188:	d432      	bmi.n	80221f0 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xd4>
 802218a:	45a0      	cmp	r8, r4
 802218c:	dd30      	ble.n	80221f0 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xd4>
 802218e:	b397      	cbz	r7, 80221f6 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xda>
 8022190:	2d00      	cmp	r5, #0
 8022192:	db2b      	blt.n	80221ec <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xd0>
 8022194:	45ac      	cmp	ip, r5
 8022196:	dd29      	ble.n	80221ec <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xd0>
 8022198:	f81e 400c 	ldrb.w	r4, [lr, ip]
 802219c:	f853 4024 	ldr.w	r4, [r3, r4, lsl #2]
 80221a0:	3501      	adds	r5, #1
 80221a2:	d42b      	bmi.n	80221fc <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xe0>
 80221a4:	45ac      	cmp	ip, r5
 80221a6:	dd29      	ble.n	80221fc <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xe0>
 80221a8:	b350      	cbz	r0, 8022200 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xe4>
 80221aa:	44f4      	add	ip, lr
 80221ac:	f89c 5001 	ldrb.w	r5, [ip, #1]
 80221b0:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 80221b4:	280f      	cmp	r0, #15
 80221b6:	ea4f 6b12 	mov.w	fp, r2, lsr #24
 80221ba:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 80221be:	ea4f 6914 	mov.w	r9, r4, lsr #24
 80221c2:	ea4f 6813 	mov.w	r8, r3, lsr #24
 80221c6:	d801      	bhi.n	80221cc <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xb0>
 80221c8:	2f0f      	cmp	r7, #15
 80221ca:	d91b      	bls.n	8022204 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xe8>
 80221cc:	4b7e      	ldr	r3, [pc, #504]	; (80223c8 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x2ac>)
 80221ce:	f240 210d 	movw	r1, #525	; 0x20d
 80221d2:	4a7e      	ldr	r2, [pc, #504]	; (80223cc <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x2b0>)
 80221d4:	487e      	ldr	r0, [pc, #504]	; (80223d0 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x2b4>)
 80221d6:	f004 ffa7 	bl	8027128 <__assert_func>
 80221da:	2200      	movs	r2, #0
 80221dc:	e7ca      	b.n	8022174 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x58>
 80221de:	2600      	movs	r6, #0
 80221e0:	4632      	mov	r2, r6
 80221e2:	e7d0      	b.n	8022186 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x6a>
 80221e4:	2600      	movs	r6, #0
 80221e6:	e7ce      	b.n	8022186 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x6a>
 80221e8:	4606      	mov	r6, r0
 80221ea:	e7cc      	b.n	8022186 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x6a>
 80221ec:	2400      	movs	r4, #0
 80221ee:	e7d7      	b.n	80221a0 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x84>
 80221f0:	2300      	movs	r3, #0
 80221f2:	461c      	mov	r4, r3
 80221f4:	e7de      	b.n	80221b4 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x98>
 80221f6:	463b      	mov	r3, r7
 80221f8:	463c      	mov	r4, r7
 80221fa:	e7db      	b.n	80221b4 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x98>
 80221fc:	2300      	movs	r3, #0
 80221fe:	e7d9      	b.n	80221b4 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x98>
 8022200:	4603      	mov	r3, r0
 8022202:	e7d7      	b.n	80221b4 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x98>
 8022204:	b280      	uxth	r0, r0
 8022206:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 802220a:	b2bf      	uxth	r7, r7
 802220c:	fb00 fe07 	mul.w	lr, r0, r7
 8022210:	ea4f 1000 	mov.w	r0, r0, lsl #4
 8022214:	ebce 1707 	rsb	r7, lr, r7, lsl #4
 8022218:	eba0 0c0e 	sub.w	ip, r0, lr
 802221c:	f5c0 7580 	rsb	r5, r0, #256	; 0x100
 8022220:	b2bf      	uxth	r7, r7
 8022222:	fa1f fc8c 	uxth.w	ip, ip
 8022226:	eba5 0507 	sub.w	r5, r5, r7
 802222a:	fb0c f00a 	mul.w	r0, ip, sl
 802222e:	b2ad      	uxth	r5, r5
 8022230:	fb05 000b 	mla	r0, r5, fp, r0
 8022234:	fb07 0009 	mla	r0, r7, r9, r0
 8022238:	fb0e 0008 	mla	r0, lr, r8, r0
 802223c:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8022240:	9003      	str	r0, [sp, #12]
 8022242:	d018      	beq.n	8022276 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x15a>
 8022244:	f002 10ff 	and.w	r0, r2, #16711935	; 0xff00ff
 8022248:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 802224c:	fb0b f000 	mul.w	r0, fp, r0
 8022250:	fb0b fb02 	mul.w	fp, fp, r2
 8022254:	0a02      	lsrs	r2, r0, #8
 8022256:	f100 1001 	add.w	r0, r0, #65537	; 0x10001
 802225a:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 802225e:	4402      	add	r2, r0
 8022260:	f50b 7080 	add.w	r0, fp, #256	; 0x100
 8022264:	eb00 201b 	add.w	r0, r0, fp, lsr #8
 8022268:	0a12      	lsrs	r2, r2, #8
 802226a:	0a00      	lsrs	r0, r0, #8
 802226c:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8022270:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8022274:	4302      	orrs	r2, r0
 8022276:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 802227a:	d019      	beq.n	80222b0 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x194>
 802227c:	f006 1bff 	and.w	fp, r6, #16711935	; 0xff00ff
 8022280:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8022284:	fb0a fb0b 	mul.w	fp, sl, fp
 8022288:	fb0a fa06 	mul.w	sl, sl, r6
 802228c:	ea4f 261b 	mov.w	r6, fp, lsr #8
 8022290:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8022294:	f50a 7080 	add.w	r0, sl, #256	; 0x100
 8022298:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 802229c:	eb00 201a 	add.w	r0, r0, sl, lsr #8
 80222a0:	445e      	add	r6, fp
 80222a2:	0a00      	lsrs	r0, r0, #8
 80222a4:	0a36      	lsrs	r6, r6, #8
 80222a6:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 80222aa:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 80222ae:	4306      	orrs	r6, r0
 80222b0:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 80222b4:	d019      	beq.n	80222ea <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x1ce>
 80222b6:	f004 1aff 	and.w	sl, r4, #16711935	; 0xff00ff
 80222ba:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 80222be:	fb09 fa0a 	mul.w	sl, r9, sl
 80222c2:	fb09 f904 	mul.w	r9, r9, r4
 80222c6:	ea4f 241a 	mov.w	r4, sl, lsr #8
 80222ca:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 80222ce:	f509 7080 	add.w	r0, r9, #256	; 0x100
 80222d2:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 80222d6:	eb00 2019 	add.w	r0, r0, r9, lsr #8
 80222da:	4454      	add	r4, sl
 80222dc:	0a00      	lsrs	r0, r0, #8
 80222de:	0a24      	lsrs	r4, r4, #8
 80222e0:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 80222e4:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 80222e8:	4304      	orrs	r4, r0
 80222ea:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 80222ee:	d019      	beq.n	8022324 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x208>
 80222f0:	f003 19ff 	and.w	r9, r3, #16711935	; 0xff00ff
 80222f4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80222f8:	fb08 f909 	mul.w	r9, r8, r9
 80222fc:	fb08 f803 	mul.w	r8, r8, r3
 8022300:	ea4f 2319 	mov.w	r3, r9, lsr #8
 8022304:	f109 1901 	add.w	r9, r9, #65537	; 0x10001
 8022308:	f508 7080 	add.w	r0, r8, #256	; 0x100
 802230c:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8022310:	eb00 2018 	add.w	r0, r0, r8, lsr #8
 8022314:	444b      	add	r3, r9
 8022316:	0a00      	lsrs	r0, r0, #8
 8022318:	0a1b      	lsrs	r3, r3, #8
 802231a:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 802231e:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8022322:	4303      	orrs	r3, r0
 8022324:	f006 18ff 	and.w	r8, r6, #16711935	; 0xff00ff
 8022328:	f002 10ff 	and.w	r0, r2, #16711935	; 0xff00ff
 802232c:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8022330:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8022334:	fb0c f808 	mul.w	r8, ip, r8
 8022338:	fb0c f606 	mul.w	r6, ip, r6
 802233c:	fb05 8800 	mla	r8, r5, r0, r8
 8022340:	f004 10ff 	and.w	r0, r4, #16711935	; 0xff00ff
 8022344:	fb05 6202 	mla	r2, r5, r2, r6
 8022348:	9d01      	ldr	r5, [sp, #4]
 802234a:	fb07 8800 	mla	r8, r7, r0, r8
 802234e:	f003 10ff 	and.w	r0, r3, #16711935	; 0xff00ff
 8022352:	fb0e 8000 	mla	r0, lr, r0, r8
 8022356:	0a00      	lsrs	r0, r0, #8
 8022358:	f000 18ff 	and.w	r8, r0, #16711935	; 0xff00ff
 802235c:	f404 407f 	and.w	r0, r4, #65280	; 0xff00
 8022360:	9c02      	ldr	r4, [sp, #8]
 8022362:	fb07 2700 	mla	r7, r7, r0, r2
 8022366:	f403 407f 	and.w	r0, r3, #65280	; 0xff00
 802236a:	9b03      	ldr	r3, [sp, #12]
 802236c:	fb0e 7000 	mla	r0, lr, r0, r7
 8022370:	43da      	mvns	r2, r3
 8022372:	9b00      	ldr	r3, [sp, #0]
 8022374:	0a00      	lsrs	r0, r0, #8
 8022376:	b2d2      	uxtb	r2, r2
 8022378:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 802237c:	4353      	muls	r3, r2
 802237e:	4354      	muls	r4, r2
 8022380:	ea48 0000 	orr.w	r0, r8, r0
 8022384:	4355      	muls	r5, r2
 8022386:	4622      	mov	r2, r4
 8022388:	1c5c      	adds	r4, r3, #1
 802238a:	eb04 2413 	add.w	r4, r4, r3, lsr #8
 802238e:	0c03      	lsrs	r3, r0, #16
 8022390:	eb03 2414 	add.w	r4, r3, r4, lsr #8
 8022394:	4b0f      	ldr	r3, [pc, #60]	; (80223d4 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x2b8>)
 8022396:	ea03 2304 	and.w	r3, r3, r4, lsl #8
 802239a:	1c54      	adds	r4, r2, #1
 802239c:	eb04 2412 	add.w	r4, r4, r2, lsr #8
 80223a0:	b2c2      	uxtb	r2, r0
 80223a2:	f3c0 2007 	ubfx	r0, r0, #8, #8
 80223a6:	eb02 2214 	add.w	r2, r2, r4, lsr #8
 80223aa:	ea43 03d2 	orr.w	r3, r3, r2, lsr #3
 80223ae:	1c6a      	adds	r2, r5, #1
 80223b0:	eb02 2215 	add.w	r2, r2, r5, lsr #8
 80223b4:	eb00 2012 	add.w	r0, r0, r2, lsr #8
 80223b8:	00c0      	lsls	r0, r0, #3
 80223ba:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 80223be:	4318      	orrs	r0, r3
 80223c0:	8008      	strh	r0, [r1, #0]
 80223c2:	b005      	add	sp, #20
 80223c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80223c8:	0802b942 	.word	0x0802b942
 80223cc:	0802bf05 	.word	0x0802bf05
 80223d0:	0802ba2b 	.word	0x0802ba2b
 80223d4:	fffff800 	.word	0xfffff800

080223d8 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80223d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80223dc:	ed2d 8b08 	vpush	{d8-d11}
 80223e0:	b09b      	sub	sp, #108	; 0x6c
 80223e2:	eeb0 aa40 	vmov.f32	s20, s0
 80223e6:	eef0 9a60 	vmov.f32	s19, s1
 80223ea:	9218      	str	r2, [sp, #96]	; 0x60
 80223ec:	eeb0 9a41 	vmov.f32	s18, s2
 80223f0:	9a31      	ldr	r2, [sp, #196]	; 0xc4
 80223f2:	eeb0 8a62 	vmov.f32	s16, s5
 80223f6:	9019      	str	r0, [sp, #100]	; 0x64
 80223f8:	eef0 8a43 	vmov.f32	s17, s6
 80223fc:	6850      	ldr	r0, [r2, #4]
 80223fe:	eef0 ba44 	vmov.f32	s23, s8
 8022402:	9116      	str	r1, [sp, #88]	; 0x58
 8022404:	eeb0 ba64 	vmov.f32	s22, s9
 8022408:	9307      	str	r3, [sp, #28]
 802240a:	eef0 aa45 	vmov.f32	s21, s10
 802240e:	6812      	ldr	r2, [r2, #0]
 8022410:	9d2e      	ldr	r5, [sp, #184]	; 0xb8
 8022412:	e9dd 1332 	ldrd	r1, r3, [sp, #200]	; 0xc8
 8022416:	fb00 1303 	mla	r3, r0, r3, r1
 802241a:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 802241e:	930a      	str	r3, [sp, #40]	; 0x28
 8022420:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8022422:	681b      	ldr	r3, [r3, #0]
 8022424:	930f      	str	r3, [sp, #60]	; 0x3c
 8022426:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8022428:	685e      	ldr	r6, [r3, #4]
 802242a:	3604      	adds	r6, #4
 802242c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 802242e:	2b00      	cmp	r3, #0
 8022430:	dc03      	bgt.n	802243a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 8022432:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8022434:	2b00      	cmp	r3, #0
 8022436:	f340 836f 	ble.w	8022b18 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x740>
 802243a:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 802243c:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8022440:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8022444:	1e48      	subs	r0, r1, #1
 8022446:	1e57      	subs	r7, r2, #1
 8022448:	9b07      	ldr	r3, [sp, #28]
 802244a:	2b00      	cmp	r3, #0
 802244c:	f340 8188 	ble.w	8022760 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x388>
 8022450:	9c2d      	ldr	r4, [sp, #180]	; 0xb4
 8022452:	142b      	asrs	r3, r5, #16
 8022454:	ea5f 4c24 	movs.w	ip, r4, asr #16
 8022458:	d406      	bmi.n	8022468 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 802245a:	4584      	cmp	ip, r0
 802245c:	da04      	bge.n	8022468 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 802245e:	2b00      	cmp	r3, #0
 8022460:	db02      	blt.n	8022468 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8022462:	42bb      	cmp	r3, r7
 8022464:	f2c0 817d 	blt.w	8022762 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 8022468:	f11c 0c01 	adds.w	ip, ip, #1
 802246c:	f100 816b 	bmi.w	8022746 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 8022470:	4561      	cmp	r1, ip
 8022472:	f2c0 8168 	blt.w	8022746 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 8022476:	3301      	adds	r3, #1
 8022478:	f100 8165 	bmi.w	8022746 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 802247c:	429a      	cmp	r2, r3
 802247e:	f2c0 8162 	blt.w	8022746 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 8022482:	9b07      	ldr	r3, [sp, #28]
 8022484:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8022486:	9317      	str	r3, [sp, #92]	; 0x5c
 8022488:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 802248a:	2b00      	cmp	r3, #0
 802248c:	f340 8187 	ble.w	802279e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c6>
 8022490:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8022492:	ea4f 4c25 	mov.w	ip, r5, asr #16
 8022496:	f3c5 3003 	ubfx	r0, r5, #12, #4
 802249a:	f3c3 3203 	ubfx	r2, r3, #12, #4
 802249e:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 80224a0:	e9d3 1e02 	ldrd	r1, lr, [r3, #8]
 80224a4:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80224a6:	141b      	asrs	r3, r3, #16
 80224a8:	f100 81ca 	bmi.w	8022840 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x468>
 80224ac:	f101 38ff 	add.w	r8, r1, #4294967295
 80224b0:	4543      	cmp	r3, r8
 80224b2:	f280 81c5 	bge.w	8022840 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x468>
 80224b6:	f1bc 0f00 	cmp.w	ip, #0
 80224ba:	f2c0 81c1 	blt.w	8022840 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x468>
 80224be:	f10e 38ff 	add.w	r8, lr, #4294967295
 80224c2:	45c4      	cmp	ip, r8
 80224c4:	f280 81bc 	bge.w	8022840 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x468>
 80224c8:	b209      	sxth	r1, r1
 80224ca:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 80224cc:	fb0c 3301 	mla	r3, ip, r1, r3
 80224d0:	eb04 0803 	add.w	r8, r4, r3
 80224d4:	5ce3      	ldrb	r3, [r4, r3]
 80224d6:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 80224da:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 80224de:	2a00      	cmp	r2, #0
 80224e0:	f000 81a3 	beq.w	802282a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 80224e4:	f898 c001 	ldrb.w	ip, [r8, #1]
 80224e8:	f856 402c 	ldr.w	r4, [r6, ip, lsl #2]
 80224ec:	940b      	str	r4, [sp, #44]	; 0x2c
 80224ee:	0e24      	lsrs	r4, r4, #24
 80224f0:	9412      	str	r4, [sp, #72]	; 0x48
 80224f2:	b178      	cbz	r0, 8022514 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13c>
 80224f4:	eb08 0c01 	add.w	ip, r8, r1
 80224f8:	f818 1001 	ldrb.w	r1, [r8, r1]
 80224fc:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8022500:	9108      	str	r1, [sp, #32]
 8022502:	0e09      	lsrs	r1, r1, #24
 8022504:	9110      	str	r1, [sp, #64]	; 0x40
 8022506:	f89c 1001 	ldrb.w	r1, [ip, #1]
 802250a:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 802250e:	910c      	str	r1, [sp, #48]	; 0x30
 8022510:	0e09      	lsrs	r1, r1, #24
 8022512:	9113      	str	r1, [sp, #76]	; 0x4c
 8022514:	b292      	uxth	r2, r2
 8022516:	9912      	ldr	r1, [sp, #72]	; 0x48
 8022518:	b280      	uxth	r0, r0
 802251a:	9c10      	ldr	r4, [sp, #64]	; 0x40
 802251c:	fb02 f900 	mul.w	r9, r2, r0
 8022520:	0112      	lsls	r2, r2, #4
 8022522:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 8022526:	eba2 0809 	sub.w	r8, r2, r9
 802252a:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 802252e:	b280      	uxth	r0, r0
 8022530:	fa1f f888 	uxth.w	r8, r8
 8022534:	1a12      	subs	r2, r2, r0
 8022536:	fb08 f101 	mul.w	r1, r8, r1
 802253a:	b292      	uxth	r2, r2
 802253c:	fb02 110e 	mla	r1, r2, lr, r1
 8022540:	fb00 1104 	mla	r1, r0, r4, r1
 8022544:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8022546:	fb09 1104 	mla	r1, r9, r4, r1
 802254a:	f3c1 2107 	ubfx	r1, r1, #8, #8
 802254e:	2900      	cmp	r1, #0
 8022550:	f000 80ee 	beq.w	8022730 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 8022554:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8022558:	d01b      	beq.n	8022592 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 802255a:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 802255e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8022562:	fb0e fa0a 	mul.w	sl, lr, sl
 8022566:	fb0e fe03 	mul.w	lr, lr, r3
 802256a:	ea4f 231a 	mov.w	r3, sl, lsr #8
 802256e:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8022572:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 8022576:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 802257a:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 802257e:	4453      	add	r3, sl
 8022580:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8022584:	0a1b      	lsrs	r3, r3, #8
 8022586:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 802258a:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 802258e:	ea43 030c 	orr.w	r3, r3, ip
 8022592:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8022594:	2cff      	cmp	r4, #255	; 0xff
 8022596:	d021      	beq.n	80225dc <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 8022598:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 802259a:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 802259e:	9c12      	ldr	r4, [sp, #72]	; 0x48
 80225a0:	fb04 fb0b 	mul.w	fp, r4, fp
 80225a4:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80225a6:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 80225aa:	9c12      	ldr	r4, [sp, #72]	; 0x48
 80225ac:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 80225b0:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 80225b4:	fb04 fa0a 	mul.w	sl, r4, sl
 80225b8:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80225bc:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 80225c0:	44de      	add	lr, fp
 80225c2:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 80225c6:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80225ca:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80225ce:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80225d2:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80225d6:	ea4e 040a 	orr.w	r4, lr, sl
 80225da:	940b      	str	r4, [sp, #44]	; 0x2c
 80225dc:	9c10      	ldr	r4, [sp, #64]	; 0x40
 80225de:	2cff      	cmp	r4, #255	; 0xff
 80225e0:	d021      	beq.n	8022626 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x24e>
 80225e2:	9c08      	ldr	r4, [sp, #32]
 80225e4:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 80225e8:	9c10      	ldr	r4, [sp, #64]	; 0x40
 80225ea:	fb04 fb0b 	mul.w	fp, r4, fp
 80225ee:	9c08      	ldr	r4, [sp, #32]
 80225f0:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 80225f4:	9c10      	ldr	r4, [sp, #64]	; 0x40
 80225f6:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 80225fa:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 80225fe:	fb04 fa0a 	mul.w	sl, r4, sl
 8022602:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8022606:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 802260a:	44de      	add	lr, fp
 802260c:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8022610:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8022614:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8022618:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802261c:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8022620:	ea4e 040a 	orr.w	r4, lr, sl
 8022624:	9408      	str	r4, [sp, #32]
 8022626:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8022628:	2cff      	cmp	r4, #255	; 0xff
 802262a:	d021      	beq.n	8022670 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x298>
 802262c:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 802262e:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8022632:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8022634:	fb04 fb0b 	mul.w	fp, r4, fp
 8022638:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 802263a:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 802263e:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8022640:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8022644:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8022648:	fb04 fa0a 	mul.w	sl, r4, sl
 802264c:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8022650:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8022654:	44de      	add	lr, fp
 8022656:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 802265a:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802265e:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8022662:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8022666:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 802266a:	ea4e 040a 	orr.w	r4, lr, sl
 802266e:	940c      	str	r4, [sp, #48]	; 0x30
 8022670:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8022672:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
 8022676:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 802267a:	43c9      	mvns	r1, r1
 802267c:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8022680:	9c08      	ldr	r4, [sp, #32]
 8022682:	b2c9      	uxtb	r1, r1
 8022684:	fb08 fc0c 	mul.w	ip, r8, ip
 8022688:	fb02 cc0e 	mla	ip, r2, lr, ip
 802268c:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 8022690:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8022692:	fb00 cc0e 	mla	ip, r0, lr, ip
 8022696:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 802269a:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 802269c:	fb09 cc0e 	mla	ip, r9, lr, ip
 80226a0:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 80226a4:	fb08 f80e 	mul.w	r8, r8, lr
 80226a8:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80226ac:	fb02 8303 	mla	r3, r2, r3, r8
 80226b0:	9a08      	ldr	r2, [sp, #32]
 80226b2:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80226b6:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 80226ba:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80226bc:	fb00 330a 	mla	r3, r0, sl, r3
 80226c0:	f402 407f 	and.w	r0, r2, #65280	; 0xff00
 80226c4:	fb09 3900 	mla	r9, r9, r0, r3
 80226c8:	883b      	ldrh	r3, [r7, #0]
 80226ca:	1218      	asrs	r0, r3, #8
 80226cc:	10da      	asrs	r2, r3, #3
 80226ce:	ea4f 2919 	mov.w	r9, r9, lsr #8
 80226d2:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 80226d6:	00db      	lsls	r3, r3, #3
 80226d8:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 80226dc:	4348      	muls	r0, r1
 80226de:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 80226e2:	b2db      	uxtb	r3, r3
 80226e4:	434a      	muls	r2, r1
 80226e6:	ea4c 0c09 	orr.w	ip, ip, r9
 80226ea:	434b      	muls	r3, r1
 80226ec:	1c41      	adds	r1, r0, #1
 80226ee:	eb01 2110 	add.w	r1, r1, r0, lsr #8
 80226f2:	ea4f 401c 	mov.w	r0, ip, lsr #16
 80226f6:	eb00 2011 	add.w	r0, r0, r1, lsr #8
 80226fa:	4960      	ldr	r1, [pc, #384]	; (802287c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a4>)
 80226fc:	ea01 2000 	and.w	r0, r1, r0, lsl #8
 8022700:	1c59      	adds	r1, r3, #1
 8022702:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 8022706:	fa5f f38c 	uxtb.w	r3, ip
 802270a:	f3cc 2c07 	ubfx	ip, ip, #8, #8
 802270e:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 8022712:	1c51      	adds	r1, r2, #1
 8022714:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 8022718:	ea40 03d3 	orr.w	r3, r0, r3, lsr #3
 802271c:	eb0c 2c12 	add.w	ip, ip, r2, lsr #8
 8022720:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8022724:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 8022728:	ea43 0c0c 	orr.w	ip, r3, ip
 802272c:	f8a7 c000 	strh.w	ip, [r7]
 8022730:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 8022732:	3702      	adds	r7, #2
 8022734:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8022736:	441a      	add	r2, r3
 8022738:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 802273a:	441d      	add	r5, r3
 802273c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 802273e:	922d      	str	r2, [sp, #180]	; 0xb4
 8022740:	3b01      	subs	r3, #1
 8022742:	9317      	str	r3, [sp, #92]	; 0x5c
 8022744:	e6a0      	b.n	8022488 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 8022746:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 8022748:	9c2d      	ldr	r4, [sp, #180]	; 0xb4
 802274a:	441c      	add	r4, r3
 802274c:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 802274e:	441d      	add	r5, r3
 8022750:	9b07      	ldr	r3, [sp, #28]
 8022752:	942d      	str	r4, [sp, #180]	; 0xb4
 8022754:	3b01      	subs	r3, #1
 8022756:	9307      	str	r3, [sp, #28]
 8022758:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802275a:	3302      	adds	r3, #2
 802275c:	930a      	str	r3, [sp, #40]	; 0x28
 802275e:	e673      	b.n	8022448 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8022760:	d024      	beq.n	80227ac <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3d4>
 8022762:	9b07      	ldr	r3, [sp, #28]
 8022764:	982f      	ldr	r0, [sp, #188]	; 0xbc
 8022766:	3b01      	subs	r3, #1
 8022768:	9c2d      	ldr	r4, [sp, #180]	; 0xb4
 802276a:	fb00 4003 	mla	r0, r0, r3, r4
 802276e:	1400      	asrs	r0, r0, #16
 8022770:	f53f ae87 	bmi.w	8022482 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 8022774:	3901      	subs	r1, #1
 8022776:	4288      	cmp	r0, r1
 8022778:	f6bf ae83 	bge.w	8022482 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 802277c:	9930      	ldr	r1, [sp, #192]	; 0xc0
 802277e:	fb01 5303 	mla	r3, r1, r3, r5
 8022782:	141b      	asrs	r3, r3, #16
 8022784:	f53f ae7d 	bmi.w	8022482 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 8022788:	3a01      	subs	r2, #1
 802278a:	4293      	cmp	r3, r2
 802278c:	f6bf ae79 	bge.w	8022482 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 8022790:	f8dd b01c 	ldr.w	fp, [sp, #28]
 8022794:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
 8022798:	f1bb 0f00 	cmp.w	fp, #0
 802279c:	dc70      	bgt.n	8022880 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a8>
 802279e:	9b07      	ldr	r3, [sp, #28]
 80227a0:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 80227a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80227a6:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 80227aa:	930a      	str	r3, [sp, #40]	; 0x28
 80227ac:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80227ae:	2b00      	cmp	r3, #0
 80227b0:	f340 81b2 	ble.w	8022b18 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x740>
 80227b4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80227b8:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80227ba:	ee3a aa2b 	vadd.f32	s20, s20, s23
 80227be:	ee79 9a8b 	vadd.f32	s19, s19, s22
 80227c2:	eef0 6a48 	vmov.f32	s13, s16
 80227c6:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 80227ca:	ee39 9a2a 	vadd.f32	s18, s18, s21
 80227ce:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80227d2:	edcd 6a2d 	vstr	s13, [sp, #180]	; 0xb4
 80227d6:	eef0 6a68 	vmov.f32	s13, s17
 80227da:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80227de:	ee16 5a90 	vmov	r5, s13
 80227e2:	ee29 7aa7 	vmul.f32	s14, s19, s15
 80227e6:	ee69 7a27 	vmul.f32	s15, s18, s15
 80227ea:	ee37 8a48 	vsub.f32	s16, s14, s16
 80227ee:	ee77 8ae8 	vsub.f32	s17, s15, s17
 80227f2:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 80227f6:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 80227fa:	ee18 2a10 	vmov	r2, s16
 80227fe:	eeb0 8a47 	vmov.f32	s16, s14
 8022802:	fb92 f3f3 	sdiv	r3, r2, r3
 8022806:	ee18 2a90 	vmov	r2, s17
 802280a:	932f      	str	r3, [sp, #188]	; 0xbc
 802280c:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 802280e:	eef0 8a67 	vmov.f32	s17, s15
 8022812:	fb92 f3f3 	sdiv	r3, r2, r3
 8022816:	9330      	str	r3, [sp, #192]	; 0xc0
 8022818:	9b16      	ldr	r3, [sp, #88]	; 0x58
 802281a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 802281c:	3b01      	subs	r3, #1
 802281e:	9316      	str	r3, [sp, #88]	; 0x58
 8022820:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8022822:	bf08      	it	eq
 8022824:	4613      	moveq	r3, r2
 8022826:	9307      	str	r3, [sp, #28]
 8022828:	e600      	b.n	802242c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54>
 802282a:	2800      	cmp	r0, #0
 802282c:	f43f ae72 	beq.w	8022514 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13c>
 8022830:	f818 1001 	ldrb.w	r1, [r8, r1]
 8022834:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8022838:	9108      	str	r1, [sp, #32]
 802283a:	0e09      	lsrs	r1, r1, #24
 802283c:	9110      	str	r1, [sp, #64]	; 0x40
 802283e:	e669      	b.n	8022514 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13c>
 8022840:	f113 0801 	adds.w	r8, r3, #1
 8022844:	f53f af74 	bmi.w	8022730 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 8022848:	4541      	cmp	r1, r8
 802284a:	f6ff af71 	blt.w	8022730 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 802284e:	f11c 0801 	adds.w	r8, ip, #1
 8022852:	f53f af6d 	bmi.w	8022730 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 8022856:	45c6      	cmp	lr, r8
 8022858:	f6ff af6a 	blt.w	8022730 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 802285c:	b209      	sxth	r1, r1
 802285e:	e9cd 3c02 	strd	r3, ip, [sp, #8]
 8022862:	fa0f f38e 	sxth.w	r3, lr
 8022866:	9100      	str	r1, [sp, #0]
 8022868:	4639      	mov	r1, r7
 802286a:	9301      	str	r3, [sp, #4]
 802286c:	4633      	mov	r3, r6
 802286e:	e9cd 2004 	strd	r2, r0, [sp, #16]
 8022872:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8022874:	9819      	ldr	r0, [sp, #100]	; 0x64
 8022876:	f7ff fc51 	bl	802211c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh>
 802287a:	e759      	b.n	8022730 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 802287c:	fffff800 	.word	0xfffff800
 8022880:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8022882:	f3c5 3003 	ubfx	r0, r5, #12, #4
 8022886:	9c2d      	ldr	r4, [sp, #180]	; 0xb4
 8022888:	f3c3 3203 	ubfx	r2, r3, #12, #4
 802288c:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 802288e:	1427      	asrs	r7, r4, #16
 8022890:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8022892:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8022896:	142b      	asrs	r3, r5, #16
 8022898:	fb01 7303 	mla	r3, r1, r3, r7
 802289c:	18e7      	adds	r7, r4, r3
 802289e:	5ce3      	ldrb	r3, [r4, r3]
 80228a0:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 80228a4:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 80228a8:	2a00      	cmp	r2, #0
 80228aa:	f000 812b 	beq.w	8022b04 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72c>
 80228ae:	f897 e001 	ldrb.w	lr, [r7, #1]
 80228b2:	f856 402e 	ldr.w	r4, [r6, lr, lsl #2]
 80228b6:	940d      	str	r4, [sp, #52]	; 0x34
 80228b8:	0e24      	lsrs	r4, r4, #24
 80228ba:	9414      	str	r4, [sp, #80]	; 0x50
 80228bc:	b170      	cbz	r0, 80228dc <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x504>
 80228be:	eb07 0e01 	add.w	lr, r7, r1
 80228c2:	5c79      	ldrb	r1, [r7, r1]
 80228c4:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 80228c8:	9109      	str	r1, [sp, #36]	; 0x24
 80228ca:	0e09      	lsrs	r1, r1, #24
 80228cc:	9111      	str	r1, [sp, #68]	; 0x44
 80228ce:	f89e 1001 	ldrb.w	r1, [lr, #1]
 80228d2:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 80228d6:	910e      	str	r1, [sp, #56]	; 0x38
 80228d8:	0e09      	lsrs	r1, r1, #24
 80228da:	9115      	str	r1, [sp, #84]	; 0x54
 80228dc:	b292      	uxth	r2, r2
 80228de:	9c11      	ldr	r4, [sp, #68]	; 0x44
 80228e0:	b280      	uxth	r0, r0
 80228e2:	fb02 f800 	mul.w	r8, r2, r0
 80228e6:	0112      	lsls	r2, r2, #4
 80228e8:	ebc8 1000 	rsb	r0, r8, r0, lsl #4
 80228ec:	eba2 0e08 	sub.w	lr, r2, r8
 80228f0:	f5c2 7180 	rsb	r1, r2, #256	; 0x100
 80228f4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80228f6:	b280      	uxth	r0, r0
 80228f8:	fa1f fe8e 	uxth.w	lr, lr
 80228fc:	1a09      	subs	r1, r1, r0
 80228fe:	fb0e f202 	mul.w	r2, lr, r2
 8022902:	b289      	uxth	r1, r1
 8022904:	fb01 220c 	mla	r2, r1, ip, r2
 8022908:	fb00 2204 	mla	r2, r0, r4, r2
 802290c:	9c15      	ldr	r4, [sp, #84]	; 0x54
 802290e:	fb08 2204 	mla	r2, r8, r4, r2
 8022912:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8022916:	2a00      	cmp	r2, #0
 8022918:	f000 80e9 	beq.w	8022aee <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x716>
 802291c:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 8022920:	d019      	beq.n	8022956 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x57e>
 8022922:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 8022926:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 802292a:	fb0c fa0a 	mul.w	sl, ip, sl
 802292e:	fb0c fc03 	mul.w	ip, ip, r3
 8022932:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8022936:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 802293a:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 802293e:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8022942:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 8022946:	4453      	add	r3, sl
 8022948:	0a3f      	lsrs	r7, r7, #8
 802294a:	0a1b      	lsrs	r3, r3, #8
 802294c:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8022950:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8022954:	433b      	orrs	r3, r7
 8022956:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8022958:	2cff      	cmp	r4, #255	; 0xff
 802295a:	d020      	beq.n	802299e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c6>
 802295c:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 802295e:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8022962:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8022964:	4367      	muls	r7, r4
 8022966:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8022968:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 802296c:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8022970:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8022972:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8022976:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802297a:	fb04 fa0a 	mul.w	sl, r4, sl
 802297e:	44bc      	add	ip, r7
 8022980:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8022984:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8022988:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 802298c:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8022990:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8022994:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8022998:	ea4c 040a 	orr.w	r4, ip, sl
 802299c:	940d      	str	r4, [sp, #52]	; 0x34
 802299e:	9c11      	ldr	r4, [sp, #68]	; 0x44
 80229a0:	2cff      	cmp	r4, #255	; 0xff
 80229a2:	d020      	beq.n	80229e6 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60e>
 80229a4:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80229a6:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 80229aa:	9c11      	ldr	r4, [sp, #68]	; 0x44
 80229ac:	4367      	muls	r7, r4
 80229ae:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80229b0:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 80229b4:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 80229b8:	9c11      	ldr	r4, [sp, #68]	; 0x44
 80229ba:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 80229be:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80229c2:	fb04 fa0a 	mul.w	sl, r4, sl
 80229c6:	44bc      	add	ip, r7
 80229c8:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 80229cc:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80229d0:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 80229d4:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80229d8:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80229dc:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80229e0:	ea4c 040a 	orr.w	r4, ip, sl
 80229e4:	9409      	str	r4, [sp, #36]	; 0x24
 80229e6:	9c15      	ldr	r4, [sp, #84]	; 0x54
 80229e8:	2cff      	cmp	r4, #255	; 0xff
 80229ea:	d020      	beq.n	8022a2e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x656>
 80229ec:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 80229ee:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 80229f2:	9c15      	ldr	r4, [sp, #84]	; 0x54
 80229f4:	4367      	muls	r7, r4
 80229f6:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 80229f8:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 80229fc:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8022a00:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8022a02:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8022a06:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8022a0a:	fb04 fa0a 	mul.w	sl, r4, sl
 8022a0e:	44bc      	add	ip, r7
 8022a10:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8022a14:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8022a18:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8022a1c:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8022a20:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8022a24:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8022a28:	ea4c 040a 	orr.w	r4, ip, sl
 8022a2c:	940e      	str	r4, [sp, #56]	; 0x38
 8022a2e:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8022a30:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 8022a34:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8022a38:	43d2      	mvns	r2, r2
 8022a3a:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8022a3e:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8022a40:	b2d2      	uxtb	r2, r2
 8022a42:	fb0e f707 	mul.w	r7, lr, r7
 8022a46:	fb01 770c 	mla	r7, r1, ip, r7
 8022a4a:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8022a4e:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8022a50:	fb00 770c 	mla	r7, r0, ip, r7
 8022a54:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8022a58:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8022a5a:	fb08 770c 	mla	r7, r8, ip, r7
 8022a5e:	f404 4c7f 	and.w	ip, r4, #65280	; 0xff00
 8022a62:	fb0e fe0c 	mul.w	lr, lr, ip
 8022a66:	0a3f      	lsrs	r7, r7, #8
 8022a68:	fb01 e303 	mla	r3, r1, r3, lr
 8022a6c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8022a6e:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8022a72:	f401 4a7f 	and.w	sl, r1, #65280	; 0xff00
 8022a76:	990e      	ldr	r1, [sp, #56]	; 0x38
 8022a78:	fb00 330a 	mla	r3, r0, sl, r3
 8022a7c:	f401 4c7f 	and.w	ip, r1, #65280	; 0xff00
 8022a80:	fb08 3c0c 	mla	ip, r8, ip, r3
 8022a84:	f8b9 3000 	ldrh.w	r3, [r9]
 8022a88:	1218      	asrs	r0, r3, #8
 8022a8a:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8022a8e:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8022a92:	10d9      	asrs	r1, r3, #3
 8022a94:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8022a98:	00db      	lsls	r3, r3, #3
 8022a9a:	4350      	muls	r0, r2
 8022a9c:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 8022aa0:	ea47 070c 	orr.w	r7, r7, ip
 8022aa4:	b2db      	uxtb	r3, r3
 8022aa6:	f100 0c01 	add.w	ip, r0, #1
 8022aaa:	4351      	muls	r1, r2
 8022aac:	4353      	muls	r3, r2
 8022aae:	4a1d      	ldr	r2, [pc, #116]	; (8022b24 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74c>)
 8022ab0:	eb0c 2010 	add.w	r0, ip, r0, lsr #8
 8022ab4:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8022ab8:	eb0c 2010 	add.w	r0, ip, r0, lsr #8
 8022abc:	f103 0c01 	add.w	ip, r3, #1
 8022ac0:	eb0c 2313 	add.w	r3, ip, r3, lsr #8
 8022ac4:	fa5f fc87 	uxtb.w	ip, r7
 8022ac8:	f3c7 2707 	ubfx	r7, r7, #8, #8
 8022acc:	ea02 2000 	and.w	r0, r2, r0, lsl #8
 8022ad0:	eb0c 2313 	add.w	r3, ip, r3, lsr #8
 8022ad4:	ea40 00d3 	orr.w	r0, r0, r3, lsr #3
 8022ad8:	1c4b      	adds	r3, r1, #1
 8022ada:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 8022ade:	eb07 2711 	add.w	r7, r7, r1, lsr #8
 8022ae2:	00ff      	lsls	r7, r7, #3
 8022ae4:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 8022ae8:	4338      	orrs	r0, r7
 8022aea:	f8a9 0000 	strh.w	r0, [r9]
 8022aee:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 8022af0:	f109 0902 	add.w	r9, r9, #2
 8022af4:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8022af6:	f10b 3bff 	add.w	fp, fp, #4294967295
 8022afa:	441a      	add	r2, r3
 8022afc:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8022afe:	922d      	str	r2, [sp, #180]	; 0xb4
 8022b00:	441d      	add	r5, r3
 8022b02:	e649      	b.n	8022798 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c0>
 8022b04:	2800      	cmp	r0, #0
 8022b06:	f43f aee9 	beq.w	80228dc <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x504>
 8022b0a:	5c79      	ldrb	r1, [r7, r1]
 8022b0c:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8022b10:	9109      	str	r1, [sp, #36]	; 0x24
 8022b12:	0e09      	lsrs	r1, r1, #24
 8022b14:	9111      	str	r1, [sp, #68]	; 0x44
 8022b16:	e6e1      	b.n	80228dc <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x504>
 8022b18:	b01b      	add	sp, #108	; 0x6c
 8022b1a:	ecbd 8b08 	vpop	{d8-d11}
 8022b1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022b22:	bf00      	nop
 8022b24:	fffff800 	.word	0xfffff800

08022b28 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh>:
 8022b28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022b2c:	b085      	sub	sp, #20
 8022b2e:	e9dd 7510 	ldrd	r7, r5, [sp, #64]	; 0x40
 8022b32:	f9bd 6038 	ldrsh.w	r6, [sp, #56]	; 0x38
 8022b36:	9103      	str	r1, [sp, #12]
 8022b38:	2d00      	cmp	r5, #0
 8022b3a:	fb05 7106 	mla	r1, r5, r6, r7
 8022b3e:	f9bd 803c 	ldrsh.w	r8, [sp, #60]	; 0x3c
 8022b42:	f89d 0048 	ldrb.w	r0, [sp, #72]	; 0x48
 8022b46:	eb02 0441 	add.w	r4, r2, r1, lsl #1
 8022b4a:	f89d e04c 	ldrb.w	lr, [sp, #76]	; 0x4c
 8022b4e:	eb03 0901 	add.w	r9, r3, r1
 8022b52:	9401      	str	r4, [sp, #4]
 8022b54:	f2c0 80c0 	blt.w	8022cd8 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1b0>
 8022b58:	45a8      	cmp	r8, r5
 8022b5a:	f340 80bd 	ble.w	8022cd8 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1b0>
 8022b5e:	2f00      	cmp	r7, #0
 8022b60:	f2c0 80b6 	blt.w	8022cd0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1a8>
 8022b64:	42be      	cmp	r6, r7
 8022b66:	f340 80b3 	ble.w	8022cd0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1a8>
 8022b6a:	f813 c001 	ldrb.w	ip, [r3, r1]
 8022b6e:	f832 1011 	ldrh.w	r1, [r2, r1, lsl #1]
 8022b72:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 8022b76:	d019      	beq.n	8022bac <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x84>
 8022b78:	f421 63fc 	bic.w	r3, r1, #2016	; 0x7e0
 8022b7c:	ea4f 02ec 	mov.w	r2, ip, asr #3
 8022b80:	435a      	muls	r2, r3
 8022b82:	f401 63fc 	and.w	r3, r1, #2016	; 0x7e0
 8022b86:	f64f 011f 	movw	r1, #63519	; 0xf81f
 8022b8a:	fb0c f403 	mul.w	r4, ip, r3
 8022b8e:	ea01 1352 	and.w	r3, r1, r2, lsr #5
 8022b92:	f602 0201 	addw	r2, r2, #2049	; 0x801
 8022b96:	441a      	add	r2, r3
 8022b98:	f104 0320 	add.w	r3, r4, #32
 8022b9c:	eb03 2314 	add.w	r3, r3, r4, lsr #8
 8022ba0:	ea01 1152 	and.w	r1, r1, r2, lsr #5
 8022ba4:	0a1b      	lsrs	r3, r3, #8
 8022ba6:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8022baa:	4319      	orrs	r1, r3
 8022bac:	b289      	uxth	r1, r1
 8022bae:	1c7b      	adds	r3, r7, #1
 8022bb0:	f100 8097 	bmi.w	8022ce2 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1ba>
 8022bb4:	429e      	cmp	r6, r3
 8022bb6:	f340 8094 	ble.w	8022ce2 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1ba>
 8022bba:	2800      	cmp	r0, #0
 8022bbc:	f000 8094 	beq.w	8022ce8 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1c0>
 8022bc0:	f899 4001 	ldrb.w	r4, [r9, #1]
 8022bc4:	9b01      	ldr	r3, [sp, #4]
 8022bc6:	2cff      	cmp	r4, #255	; 0xff
 8022bc8:	885b      	ldrh	r3, [r3, #2]
 8022bca:	d01b      	beq.n	8022c04 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0xdc>
 8022bcc:	f423 62fc 	bic.w	r2, r3, #2016	; 0x7e0
 8022bd0:	ea4f 0ae4 	mov.w	sl, r4, asr #3
 8022bd4:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8022bd8:	f64f 0b1f 	movw	fp, #63519	; 0xf81f
 8022bdc:	fb0a f202 	mul.w	r2, sl, r2
 8022be0:	fb04 fa03 	mul.w	sl, r4, r3
 8022be4:	ea0b 1352 	and.w	r3, fp, r2, lsr #5
 8022be8:	f602 0201 	addw	r2, r2, #2049	; 0x801
 8022bec:	441a      	add	r2, r3
 8022bee:	f10a 0320 	add.w	r3, sl, #32
 8022bf2:	eb03 231a 	add.w	r3, r3, sl, lsr #8
 8022bf6:	ea0b 1b52 	and.w	fp, fp, r2, lsr #5
 8022bfa:	0a1b      	lsrs	r3, r3, #8
 8022bfc:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8022c00:	ea4b 0303 	orr.w	r3, fp, r3
 8022c04:	b29b      	uxth	r3, r3
 8022c06:	3501      	adds	r5, #1
 8022c08:	d474      	bmi.n	8022cf4 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1cc>
 8022c0a:	45a8      	cmp	r8, r5
 8022c0c:	dd72      	ble.n	8022cf4 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1cc>
 8022c0e:	f1be 0f00 	cmp.w	lr, #0
 8022c12:	f000 8120 	beq.w	8022e56 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x32e>
 8022c16:	2f00      	cmp	r7, #0
 8022c18:	db69      	blt.n	8022cee <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1c6>
 8022c1a:	42be      	cmp	r6, r7
 8022c1c:	dd67      	ble.n	8022cee <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1c6>
 8022c1e:	f819 5006 	ldrb.w	r5, [r9, r6]
 8022c22:	9a01      	ldr	r2, [sp, #4]
 8022c24:	2dff      	cmp	r5, #255	; 0xff
 8022c26:	f832 b016 	ldrh.w	fp, [r2, r6, lsl #1]
 8022c2a:	d01c      	beq.n	8022c66 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x13e>
 8022c2c:	f42b 62fc 	bic.w	r2, fp, #2016	; 0x7e0
 8022c30:	ea4f 08e5 	mov.w	r8, r5, asr #3
 8022c34:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 8022c38:	fb08 f802 	mul.w	r8, r8, r2
 8022c3c:	fb05 fa0b 	mul.w	sl, r5, fp
 8022c40:	f64f 0b1f 	movw	fp, #63519	; 0xf81f
 8022c44:	ea0b 1258 	and.w	r2, fp, r8, lsr #5
 8022c48:	f608 0801 	addw	r8, r8, #2049	; 0x801
 8022c4c:	4490      	add	r8, r2
 8022c4e:	f10a 0220 	add.w	r2, sl, #32
 8022c52:	eb02 2a1a 	add.w	sl, r2, sl, lsr #8
 8022c56:	ea0b 1b58 	and.w	fp, fp, r8, lsr #5
 8022c5a:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8022c5e:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 8022c62:	ea4b 0b0a 	orr.w	fp, fp, sl
 8022c66:	fa1f fb8b 	uxth.w	fp, fp
 8022c6a:	3701      	adds	r7, #1
 8022c6c:	d447      	bmi.n	8022cfe <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1d6>
 8022c6e:	42be      	cmp	r6, r7
 8022c70:	dd45      	ble.n	8022cfe <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1d6>
 8022c72:	2800      	cmp	r0, #0
 8022c74:	d046      	beq.n	8022d04 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1dc>
 8022c76:	3601      	adds	r6, #1
 8022c78:	9a01      	ldr	r2, [sp, #4]
 8022c7a:	f819 7006 	ldrb.w	r7, [r9, r6]
 8022c7e:	f832 2016 	ldrh.w	r2, [r2, r6, lsl #1]
 8022c82:	2fff      	cmp	r7, #255	; 0xff
 8022c84:	d01a      	beq.n	8022cbc <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x194>
 8022c86:	f422 66fc 	bic.w	r6, r2, #2016	; 0x7e0
 8022c8a:	ea4f 08e7 	mov.w	r8, r7, asr #3
 8022c8e:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8022c92:	fb08 f806 	mul.w	r8, r8, r6
 8022c96:	fb07 f902 	mul.w	r9, r7, r2
 8022c9a:	f64f 021f 	movw	r2, #63519	; 0xf81f
 8022c9e:	ea02 1658 	and.w	r6, r2, r8, lsr #5
 8022ca2:	f608 0801 	addw	r8, r8, #2049	; 0x801
 8022ca6:	44b0      	add	r8, r6
 8022ca8:	f109 0620 	add.w	r6, r9, #32
 8022cac:	eb06 2619 	add.w	r6, r6, r9, lsr #8
 8022cb0:	ea02 1258 	and.w	r2, r2, r8, lsr #5
 8022cb4:	0a36      	lsrs	r6, r6, #8
 8022cb6:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 8022cba:	4332      	orrs	r2, r6
 8022cbc:	b292      	uxth	r2, r2
 8022cbe:	280f      	cmp	r0, #15
 8022cc0:	d922      	bls.n	8022d08 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1e0>
 8022cc2:	4b69      	ldr	r3, [pc, #420]	; (8022e68 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x340>)
 8022cc4:	f240 210d 	movw	r1, #525	; 0x20d
 8022cc8:	4a68      	ldr	r2, [pc, #416]	; (8022e6c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x344>)
 8022cca:	4869      	ldr	r0, [pc, #420]	; (8022e70 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x348>)
 8022ccc:	f004 fa2c 	bl	8027128 <__assert_func>
 8022cd0:	f04f 0c00 	mov.w	ip, #0
 8022cd4:	4661      	mov	r1, ip
 8022cd6:	e76a      	b.n	8022bae <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x86>
 8022cd8:	2400      	movs	r4, #0
 8022cda:	46a4      	mov	ip, r4
 8022cdc:	4623      	mov	r3, r4
 8022cde:	4621      	mov	r1, r4
 8022ce0:	e791      	b.n	8022c06 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0xde>
 8022ce2:	2400      	movs	r4, #0
 8022ce4:	4623      	mov	r3, r4
 8022ce6:	e78e      	b.n	8022c06 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0xde>
 8022ce8:	4604      	mov	r4, r0
 8022cea:	4603      	mov	r3, r0
 8022cec:	e78b      	b.n	8022c06 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0xde>
 8022cee:	2500      	movs	r5, #0
 8022cf0:	46ab      	mov	fp, r5
 8022cf2:	e7ba      	b.n	8022c6a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x142>
 8022cf4:	2700      	movs	r7, #0
 8022cf6:	463d      	mov	r5, r7
 8022cf8:	463a      	mov	r2, r7
 8022cfa:	46bb      	mov	fp, r7
 8022cfc:	e7df      	b.n	8022cbe <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x196>
 8022cfe:	2700      	movs	r7, #0
 8022d00:	463a      	mov	r2, r7
 8022d02:	e7dc      	b.n	8022cbe <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x196>
 8022d04:	4607      	mov	r7, r0
 8022d06:	4602      	mov	r2, r0
 8022d08:	f1be 0f0f 	cmp.w	lr, #15
 8022d0c:	d8d9      	bhi.n	8022cc2 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x19a>
 8022d0e:	b286      	uxth	r6, r0
 8022d10:	fa1f f98e 	uxth.w	r9, lr
 8022d14:	ea4f 4a01 	mov.w	sl, r1, lsl #16
 8022d18:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 8022d1c:	fb06 f809 	mul.w	r8, r6, r9
 8022d20:	0136      	lsls	r6, r6, #4
 8022d22:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8022d26:	ebc8 1909 	rsb	r9, r8, r9, lsl #4
 8022d2a:	9601      	str	r6, [sp, #4]
 8022d2c:	ea4a 0101 	orr.w	r1, sl, r1
 8022d30:	ea4f 4a03 	mov.w	sl, r3, lsl #16
 8022d34:	fa1f f689 	uxth.w	r6, r9
 8022d38:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 8022d3c:	fb10 f90e 	smulbb	r9, r0, lr
 8022d40:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8022d44:	9602      	str	r6, [sp, #8]
 8022d46:	460e      	mov	r6, r1
 8022d48:	ea4f 09e9 	mov.w	r9, r9, asr #3
 8022d4c:	f1ce 0110 	rsb	r1, lr, #16
 8022d50:	ea4a 0303 	orr.w	r3, sl, r3
 8022d54:	ea4f 4a02 	mov.w	sl, r2, lsl #16
 8022d58:	1a09      	subs	r1, r1, r0
 8022d5a:	ebc9 0040 	rsb	r0, r9, r0, lsl #1
 8022d5e:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8022d62:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8022d66:	4343      	muls	r3, r0
 8022d68:	eb09 0141 	add.w	r1, r9, r1, lsl #1
 8022d6c:	9801      	ldr	r0, [sp, #4]
 8022d6e:	ea4a 0202 	orr.w	r2, sl, r2
 8022d72:	fb01 3106 	mla	r1, r1, r6, r3
 8022d76:	9e02      	ldr	r6, [sp, #8]
 8022d78:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 8022d7c:	ea4f 4a0b 	mov.w	sl, fp, lsl #16
 8022d80:	fb09 1302 	mla	r3, r9, r2, r1
 8022d84:	f42b 6bfc 	bic.w	fp, fp, #2016	; 0x7e0
 8022d88:	1b80      	subs	r0, r0, r6
 8022d8a:	9e01      	ldr	r6, [sp, #4]
 8022d8c:	9a03      	ldr	r2, [sp, #12]
 8022d8e:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8022d92:	eba6 0608 	sub.w	r6, r6, r8
 8022d96:	b280      	uxth	r0, r0
 8022d98:	8811      	ldrh	r1, [r2, #0]
 8022d9a:	ea4a 0b0b 	orr.w	fp, sl, fp
 8022d9e:	b2b6      	uxth	r6, r6
 8022da0:	f89d 2050 	ldrb.w	r2, [sp, #80]	; 0x50
 8022da4:	ebc9 0e4e 	rsb	lr, r9, lr, lsl #1
 8022da8:	4374      	muls	r4, r6
 8022daa:	b292      	uxth	r2, r2
 8022dac:	fb0e 3e0b 	mla	lr, lr, fp, r3
 8022db0:	fb0c 4400 	mla	r4, ip, r0, r4
 8022db4:	9802      	ldr	r0, [sp, #8]
 8022db6:	ea4f 535e 	mov.w	r3, lr, lsr #21
 8022dba:	fb00 4505 	mla	r5, r0, r5, r4
 8022dbe:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 8022dc2:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8022dc6:	1208      	asrs	r0, r1, #8
 8022dc8:	fb08 5707 	mla	r7, r8, r7, r5
 8022dcc:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 8022dd0:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8022dd4:	10cd      	asrs	r5, r1, #3
 8022dd6:	f3c7 2707 	ubfx	r7, r7, #8, #8
 8022dda:	ea43 0e0e 	orr.w	lr, r3, lr
 8022dde:	00c9      	lsls	r1, r1, #3
 8022de0:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 8022de4:	4357      	muls	r7, r2
 8022de6:	fa1f f38e 	uxth.w	r3, lr
 8022dea:	b2c9      	uxtb	r1, r1
 8022dec:	f107 0801 	add.w	r8, r7, #1
 8022df0:	121c      	asrs	r4, r3, #8
 8022df2:	eb08 2717 	add.w	r7, r8, r7, lsr #8
 8022df6:	f004 04f8 	and.w	r4, r4, #248	; 0xf8
 8022dfa:	ea6f 2717 	mvn.w	r7, r7, lsr #8
 8022dfe:	b2ff      	uxtb	r7, r7
 8022e00:	fb10 f007 	smulbb	r0, r0, r7
 8022e04:	fb11 f107 	smulbb	r1, r1, r7
 8022e08:	fb04 0402 	mla	r4, r4, r2, r0
 8022e0c:	10d8      	asrs	r0, r3, #3
 8022e0e:	fb15 f507 	smulbb	r5, r5, r7
 8022e12:	00db      	lsls	r3, r3, #3
 8022e14:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 8022e18:	b2a4      	uxth	r4, r4
 8022e1a:	b2db      	uxtb	r3, r3
 8022e1c:	fb00 5002 	mla	r0, r0, r2, r5
 8022e20:	fb03 1202 	mla	r2, r3, r2, r1
 8022e24:	1c63      	adds	r3, r4, #1
 8022e26:	b280      	uxth	r0, r0
 8022e28:	b292      	uxth	r2, r2
 8022e2a:	eb03 2314 	add.w	r3, r3, r4, lsr #8
 8022e2e:	1c51      	adds	r1, r2, #1
 8022e30:	f403 4378 	and.w	r3, r3, #63488	; 0xf800
 8022e34:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 8022e38:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 8022e3c:	4313      	orrs	r3, r2
 8022e3e:	1c42      	adds	r2, r0, #1
 8022e40:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8022e44:	9a03      	ldr	r2, [sp, #12]
 8022e46:	0940      	lsrs	r0, r0, #5
 8022e48:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8022e4c:	4303      	orrs	r3, r0
 8022e4e:	8013      	strh	r3, [r2, #0]
 8022e50:	b005      	add	sp, #20
 8022e52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022e56:	280f      	cmp	r0, #15
 8022e58:	f63f af33 	bhi.w	8022cc2 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x19a>
 8022e5c:	4677      	mov	r7, lr
 8022e5e:	4675      	mov	r5, lr
 8022e60:	4672      	mov	r2, lr
 8022e62:	46f3      	mov	fp, lr
 8022e64:	e753      	b.n	8022d0e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1e6>
 8022e66:	bf00      	nop
 8022e68:	0802b942 	.word	0x0802b942
 8022e6c:	0802bf05 	.word	0x0802bf05
 8022e70:	0802ba2b 	.word	0x0802ba2b

08022e74 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8022e74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022e78:	ed2d 8b08 	vpush	{d8-d11}
 8022e7c:	b097      	sub	sp, #92	; 0x5c
 8022e7e:	eeb0 aa40 	vmov.f32	s20, s0
 8022e82:	eef0 9a60 	vmov.f32	s19, s1
 8022e86:	9214      	str	r2, [sp, #80]	; 0x50
 8022e88:	eeb0 9a41 	vmov.f32	s18, s2
 8022e8c:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8022e8e:	eeb0 8a62 	vmov.f32	s16, s5
 8022e92:	9308      	str	r3, [sp, #32]
 8022e94:	eef0 8a43 	vmov.f32	s17, s6
 8022e98:	f89d 30c4 	ldrb.w	r3, [sp, #196]	; 0xc4
 8022e9c:	eef0 ba44 	vmov.f32	s23, s8
 8022ea0:	9015      	str	r0, [sp, #84]	; 0x54
 8022ea2:	eeb0 ba64 	vmov.f32	s22, s9
 8022ea6:	9312      	str	r3, [sp, #72]	; 0x48
 8022ea8:	eef0 aa45 	vmov.f32	s21, s10
 8022eac:	6850      	ldr	r0, [r2, #4]
 8022eae:	9111      	str	r1, [sp, #68]	; 0x44
 8022eb0:	6812      	ldr	r2, [r2, #0]
 8022eb2:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	; 0xb8
 8022eb6:	fb00 1303 	mla	r3, r0, r3, r1
 8022eba:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8022ebe:	9309      	str	r3, [sp, #36]	; 0x24
 8022ec0:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8022ec2:	681b      	ldr	r3, [r3, #0]
 8022ec4:	930b      	str	r3, [sp, #44]	; 0x2c
 8022ec6:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8022ec8:	685b      	ldr	r3, [r3, #4]
 8022eca:	930c      	str	r3, [sp, #48]	; 0x30
 8022ecc:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8022ed0:	930a      	str	r3, [sp, #40]	; 0x28
 8022ed2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8022ed4:	2b00      	cmp	r3, #0
 8022ed6:	dc03      	bgt.n	8022ee0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 8022ed8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8022eda:	2b00      	cmp	r3, #0
 8022edc:	f340 83cd 	ble.w	802367a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x806>
 8022ee0:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8022ee2:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8022ee6:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8022eea:	1e48      	subs	r0, r1, #1
 8022eec:	1e55      	subs	r5, r2, #1
 8022eee:	9b08      	ldr	r3, [sp, #32]
 8022ef0:	2b00      	cmp	r3, #0
 8022ef2:	f340 81a5 	ble.w	8023240 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3cc>
 8022ef6:	9e29      	ldr	r6, [sp, #164]	; 0xa4
 8022ef8:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8022efa:	1436      	asrs	r6, r6, #16
 8022efc:	ea4f 4323 	mov.w	r3, r3, asr #16
 8022f00:	d406      	bmi.n	8022f10 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 8022f02:	4286      	cmp	r6, r0
 8022f04:	da04      	bge.n	8022f10 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 8022f06:	2b00      	cmp	r3, #0
 8022f08:	db02      	blt.n	8022f10 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 8022f0a:	42ab      	cmp	r3, r5
 8022f0c:	f2c0 8199 	blt.w	8023242 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ce>
 8022f10:	3601      	adds	r6, #1
 8022f12:	f100 8186 	bmi.w	8023222 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ae>
 8022f16:	42b1      	cmp	r1, r6
 8022f18:	f2c0 8183 	blt.w	8023222 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ae>
 8022f1c:	3301      	adds	r3, #1
 8022f1e:	f100 8180 	bmi.w	8023222 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ae>
 8022f22:	429a      	cmp	r2, r3
 8022f24:	f2c0 817d 	blt.w	8023222 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ae>
 8022f28:	9b08      	ldr	r3, [sp, #32]
 8022f2a:	f64f 061f 	movw	r6, #63519	; 0xf81f
 8022f2e:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8022f30:	9313      	str	r3, [sp, #76]	; 0x4c
 8022f32:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8022f34:	2b00      	cmp	r3, #0
 8022f36:	f340 81a6 	ble.w	8023286 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x412>
 8022f3a:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8022f3c:	9d29      	ldr	r5, [sp, #164]	; 0xa4
 8022f3e:	1418      	asrs	r0, r3, #16
 8022f40:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8022f42:	142d      	asrs	r5, r5, #16
 8022f44:	f3c3 3103 	ubfx	r1, r3, #12, #4
 8022f48:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8022f4a:	f3c3 3c03 	ubfx	ip, r3, #12, #4
 8022f4e:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8022f50:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8022f54:	f100 81fa 	bmi.w	802334c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d8>
 8022f58:	f102 3eff 	add.w	lr, r2, #4294967295
 8022f5c:	4575      	cmp	r5, lr
 8022f5e:	f280 81f5 	bge.w	802334c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d8>
 8022f62:	2800      	cmp	r0, #0
 8022f64:	f2c0 81f2 	blt.w	802334c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d8>
 8022f68:	f103 3eff 	add.w	lr, r3, #4294967295
 8022f6c:	4570      	cmp	r0, lr
 8022f6e:	f280 81ed 	bge.w	802334c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d8>
 8022f72:	b212      	sxth	r2, r2
 8022f74:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8022f76:	fa1f fe81 	uxth.w	lr, r1
 8022f7a:	fb00 5002 	mla	r0, r0, r2, r5
 8022f7e:	ea4f 150e 	mov.w	r5, lr, lsl #4
 8022f82:	eb03 0a00 	add.w	sl, r3, r0
 8022f86:	f813 9000 	ldrb.w	r9, [r3, r0]
 8022f8a:	f5c5 7380 	rsb	r3, r5, #256	; 0x100
 8022f8e:	f89a 8001 	ldrb.w	r8, [sl, #1]
 8022f92:	b29b      	uxth	r3, r3
 8022f94:	f1bc 0f00 	cmp.w	ip, #0
 8022f98:	f000 81bb 	beq.w	8023312 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49e>
 8022f9c:	f81a 4002 	ldrb.w	r4, [sl, r2]
 8022fa0:	eb0a 0b02 	add.w	fp, sl, r2
 8022fa4:	fa1f fa8c 	uxth.w	sl, ip
 8022fa8:	940d      	str	r4, [sp, #52]	; 0x34
 8022faa:	fb0a fe0e 	mul.w	lr, sl, lr
 8022fae:	f89b 4001 	ldrb.w	r4, [fp, #1]
 8022fb2:	ebce 1a0a 	rsb	sl, lr, sl, lsl #4
 8022fb6:	eba5 050e 	sub.w	r5, r5, lr
 8022fba:	940e      	str	r4, [sp, #56]	; 0x38
 8022fbc:	fa1f fa8a 	uxth.w	sl, sl
 8022fc0:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8022fc2:	b2ad      	uxth	r5, r5
 8022fc4:	eba3 030a 	sub.w	r3, r3, sl
 8022fc8:	fb08 f505 	mul.w	r5, r8, r5
 8022fcc:	b29b      	uxth	r3, r3
 8022fce:	fb09 5303 	mla	r3, r9, r3, r5
 8022fd2:	fb0a 3304 	mla	r3, sl, r4, r3
 8022fd6:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8022fd8:	fb0e 3304 	mla	r3, lr, r4, r3
 8022fdc:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8022fe0:	2b00      	cmp	r3, #0
 8022fe2:	f000 8111 	beq.w	8023208 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x394>
 8022fe6:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8022fe8:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8022fec:	eb04 0540 	add.w	r5, r4, r0, lsl #1
 8022ff0:	f834 0010 	ldrh.w	r0, [r4, r0, lsl #1]
 8022ff4:	f000 8192 	beq.w	802331c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a8>
 8022ff8:	f420 6efc 	bic.w	lr, r0, #2016	; 0x7e0
 8022ffc:	ea4f 0ae9 	mov.w	sl, r9, asr #3
 8023000:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8023004:	fb0a fe0e 	mul.w	lr, sl, lr
 8023008:	fb09 f000 	mul.w	r0, r9, r0
 802300c:	ea06 195e 	and.w	r9, r6, lr, lsr #5
 8023010:	f60e 0e01 	addw	lr, lr, #2049	; 0x801
 8023014:	f100 0b20 	add.w	fp, r0, #32
 8023018:	44ce      	add	lr, r9
 802301a:	eb0b 2910 	add.w	r9, fp, r0, lsr #8
 802301e:	ea06 1e5e 	and.w	lr, r6, lr, lsr #5
 8023022:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8023026:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 802302a:	ea4e 0909 	orr.w	r9, lr, r9
 802302e:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8023032:	8868      	ldrh	r0, [r5, #2]
 8023034:	d019      	beq.n	802306a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f6>
 8023036:	f420 6efc 	bic.w	lr, r0, #2016	; 0x7e0
 802303a:	ea4f 0ae8 	mov.w	sl, r8, asr #3
 802303e:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8023042:	fb0a fe0e 	mul.w	lr, sl, lr
 8023046:	fb08 f800 	mul.w	r8, r8, r0
 802304a:	ea06 105e 	and.w	r0, r6, lr, lsr #5
 802304e:	f60e 0e01 	addw	lr, lr, #2049	; 0x801
 8023052:	f108 0b20 	add.w	fp, r8, #32
 8023056:	4486      	add	lr, r0
 8023058:	eb0b 2018 	add.w	r0, fp, r8, lsr #8
 802305c:	ea06 1e5e 	and.w	lr, r6, lr, lsr #5
 8023060:	0a00      	lsrs	r0, r0, #8
 8023062:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8023066:	ea4e 0000 	orr.w	r0, lr, r0
 802306a:	ea4f 4e09 	mov.w	lr, r9, lsl #16
 802306e:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 8023072:	ea4f 4a00 	mov.w	sl, r0, lsl #16
 8023076:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 802307a:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
 802307e:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8023082:	ea4e 0909 	orr.w	r9, lr, r9
 8023086:	ea4a 0000 	orr.w	r0, sl, r0
 802308a:	f1bc 0f00 	cmp.w	ip, #0
 802308e:	f000 8147 	beq.w	8023320 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ac>
 8023092:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
 8023096:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8023098:	3a01      	subs	r2, #1
 802309a:	2cff      	cmp	r4, #255	; 0xff
 802309c:	ea4f 0242 	mov.w	r2, r2, lsl #1
 80230a0:	f102 0202 	add.w	r2, r2, #2
 80230a4:	eb05 0e02 	add.w	lr, r5, r2
 80230a8:	5aaa      	ldrh	r2, [r5, r2]
 80230aa:	d018      	beq.n	80230de <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 80230ac:	f422 65fc 	bic.w	r5, r2, #2016	; 0x7e0
 80230b0:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 80230b4:	ea4f 08e4 	mov.w	r8, r4, asr #3
 80230b8:	fb04 fa02 	mul.w	sl, r4, r2
 80230bc:	fb08 f805 	mul.w	r8, r8, r5
 80230c0:	f10a 0520 	add.w	r5, sl, #32
 80230c4:	ea06 1258 	and.w	r2, r6, r8, lsr #5
 80230c8:	f608 0801 	addw	r8, r8, #2049	; 0x801
 80230cc:	eb05 251a 	add.w	r5, r5, sl, lsr #8
 80230d0:	4442      	add	r2, r8
 80230d2:	0a2d      	lsrs	r5, r5, #8
 80230d4:	ea06 1252 	and.w	r2, r6, r2, lsr #5
 80230d8:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 80230dc:	432a      	orrs	r2, r5
 80230de:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 80230e0:	f8be 5002 	ldrh.w	r5, [lr, #2]
 80230e4:	2cff      	cmp	r4, #255	; 0xff
 80230e6:	d01a      	beq.n	802311e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2aa>
 80230e8:	f425 6efc 	bic.w	lr, r5, #2016	; 0x7e0
 80230ec:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 80230f0:	ea4f 08e4 	mov.w	r8, r4, asr #3
 80230f4:	fb04 fa05 	mul.w	sl, r4, r5
 80230f8:	fb08 f80e 	mul.w	r8, r8, lr
 80230fc:	f10a 0e20 	add.w	lr, sl, #32
 8023100:	ea06 1558 	and.w	r5, r6, r8, lsr #5
 8023104:	f608 0801 	addw	r8, r8, #2049	; 0x801
 8023108:	eb0e 2e1a 	add.w	lr, lr, sl, lsr #8
 802310c:	4445      	add	r5, r8
 802310e:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8023112:	ea06 1555 	and.w	r5, r6, r5, lsr #5
 8023116:	f40e 6efc 	and.w	lr, lr, #2016	; 0x7e0
 802311a:	ea45 050e 	orr.w	r5, r5, lr
 802311e:	fb1c fe01 	smulbb	lr, ip, r1
 8023122:	f1cc 0810 	rsb	r8, ip, #16
 8023126:	ea4f 4a02 	mov.w	sl, r2, lsl #16
 802312a:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 802312e:	ea4f 0eee 	mov.w	lr, lr, asr #3
 8023132:	eba8 0801 	sub.w	r8, r8, r1
 8023136:	ea4f 4b05 	mov.w	fp, r5, lsl #16
 802313a:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 802313e:	ebce 0141 	rsb	r1, lr, r1, lsl #1
 8023142:	f425 65fc 	bic.w	r5, r5, #2016	; 0x7e0
 8023146:	eb0e 0848 	add.w	r8, lr, r8, lsl #1
 802314a:	ea4a 0202 	orr.w	r2, sl, r2
 802314e:	4341      	muls	r1, r0
 8023150:	ebce 0c4c 	rsb	ip, lr, ip, lsl #1
 8023154:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8023158:	fb09 1108 	mla	r1, r9, r8, r1
 802315c:	ea4b 0505 	orr.w	r5, fp, r5
 8023160:	fb0c 1102 	mla	r1, ip, r2, r1
 8023164:	fb0e 1e05 	mla	lr, lr, r5, r1
 8023168:	ea4f 525e 	mov.w	r2, lr, lsr #21
 802316c:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 8023170:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8023174:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 8023178:	ea42 0e0e 	orr.w	lr, r2, lr
 802317c:	fa1f f28e 	uxth.w	r2, lr
 8023180:	2bff      	cmp	r3, #255	; 0xff
 8023182:	d103      	bne.n	802318c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x318>
 8023184:	9912      	ldr	r1, [sp, #72]	; 0x48
 8023186:	29ff      	cmp	r1, #255	; 0xff
 8023188:	f000 80de 	beq.w	8023348 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d4>
 802318c:	990a      	ldr	r1, [sp, #40]	; 0x28
 802318e:	8838      	ldrh	r0, [r7, #0]
 8023190:	434b      	muls	r3, r1
 8023192:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8023194:	1205      	asrs	r5, r0, #8
 8023196:	f103 0c01 	add.w	ip, r3, #1
 802319a:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 802319e:	eb0c 2323 	add.w	r3, ip, r3, asr #8
 80231a2:	ea6f 2c23 	mvn.w	ip, r3, asr #8
 80231a6:	1213      	asrs	r3, r2, #8
 80231a8:	fa5f fc8c 	uxtb.w	ip, ip
 80231ac:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 80231b0:	fb15 f50c 	smulbb	r5, r5, ip
 80231b4:	fb03 5301 	mla	r3, r3, r1, r5
 80231b8:	10d1      	asrs	r1, r2, #3
 80231ba:	00d2      	lsls	r2, r2, #3
 80231bc:	b29d      	uxth	r5, r3
 80231be:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 80231c2:	10c3      	asrs	r3, r0, #3
 80231c4:	00c0      	lsls	r0, r0, #3
 80231c6:	b2d2      	uxtb	r2, r2
 80231c8:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
 80231cc:	b2c0      	uxtb	r0, r0
 80231ce:	fb13 f30c 	smulbb	r3, r3, ip
 80231d2:	fb10 f00c 	smulbb	r0, r0, ip
 80231d6:	fb01 3104 	mla	r1, r1, r4, r3
 80231da:	1c6b      	adds	r3, r5, #1
 80231dc:	fb02 0204 	mla	r2, r2, r4, r0
 80231e0:	eb03 2315 	add.w	r3, r3, r5, lsr #8
 80231e4:	b292      	uxth	r2, r2
 80231e6:	b289      	uxth	r1, r1
 80231e8:	f403 4378 	and.w	r3, r3, #63488	; 0xf800
 80231ec:	1c50      	adds	r0, r2, #1
 80231ee:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 80231f2:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 80231f6:	4313      	orrs	r3, r2
 80231f8:	1c4a      	adds	r2, r1, #1
 80231fa:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 80231fe:	0949      	lsrs	r1, r1, #5
 8023200:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8023204:	430b      	orrs	r3, r1
 8023206:	803b      	strh	r3, [r7, #0]
 8023208:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 802320a:	3702      	adds	r7, #2
 802320c:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 802320e:	4413      	add	r3, r2
 8023210:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 8023212:	9329      	str	r3, [sp, #164]	; 0xa4
 8023214:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8023216:	441a      	add	r2, r3
 8023218:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 802321a:	3b01      	subs	r3, #1
 802321c:	922a      	str	r2, [sp, #168]	; 0xa8
 802321e:	9313      	str	r3, [sp, #76]	; 0x4c
 8023220:	e687      	b.n	8022f32 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xbe>
 8023222:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8023224:	9e2b      	ldr	r6, [sp, #172]	; 0xac
 8023226:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
 8023228:	4433      	add	r3, r6
 802322a:	9329      	str	r3, [sp, #164]	; 0xa4
 802322c:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 802322e:	441c      	add	r4, r3
 8023230:	9b08      	ldr	r3, [sp, #32]
 8023232:	3b01      	subs	r3, #1
 8023234:	942a      	str	r4, [sp, #168]	; 0xa8
 8023236:	9308      	str	r3, [sp, #32]
 8023238:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802323a:	3302      	adds	r3, #2
 802323c:	9309      	str	r3, [sp, #36]	; 0x24
 802323e:	e656      	b.n	8022eee <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 8023240:	d028      	beq.n	8023294 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x420>
 8023242:	9b08      	ldr	r3, [sp, #32]
 8023244:	982b      	ldr	r0, [sp, #172]	; 0xac
 8023246:	3b01      	subs	r3, #1
 8023248:	9d29      	ldr	r5, [sp, #164]	; 0xa4
 802324a:	fb00 5003 	mla	r0, r0, r3, r5
 802324e:	1400      	asrs	r0, r0, #16
 8023250:	f53f ae6a 	bmi.w	8022f28 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 8023254:	3901      	subs	r1, #1
 8023256:	4288      	cmp	r0, r1
 8023258:	f6bf ae66 	bge.w	8022f28 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 802325c:	992c      	ldr	r1, [sp, #176]	; 0xb0
 802325e:	982a      	ldr	r0, [sp, #168]	; 0xa8
 8023260:	fb01 0303 	mla	r3, r1, r3, r0
 8023264:	141b      	asrs	r3, r3, #16
 8023266:	f53f ae5f 	bmi.w	8022f28 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 802326a:	3a01      	subs	r2, #1
 802326c:	4293      	cmp	r3, r2
 802326e:	f6bf ae5b 	bge.w	8022f28 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 8023272:	9b08      	ldr	r3, [sp, #32]
 8023274:	f64f 061f 	movw	r6, #63519	; 0xf81f
 8023278:	f8dd e024 	ldr.w	lr, [sp, #36]	; 0x24
 802327c:	9313      	str	r3, [sp, #76]	; 0x4c
 802327e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8023280:	2b00      	cmp	r3, #0
 8023282:	f300 8082 	bgt.w	802338a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x516>
 8023286:	9b08      	ldr	r3, [sp, #32]
 8023288:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 802328c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802328e:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 8023292:	9309      	str	r3, [sp, #36]	; 0x24
 8023294:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8023296:	2b00      	cmp	r3, #0
 8023298:	f340 81ef 	ble.w	802367a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x806>
 802329c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80232a0:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80232a2:	ee3a aa2b 	vadd.f32	s20, s20, s23
 80232a6:	ee79 9a8b 	vadd.f32	s19, s19, s22
 80232aa:	eef0 6a48 	vmov.f32	s13, s16
 80232ae:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 80232b2:	ee39 9a2a 	vadd.f32	s18, s18, s21
 80232b6:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80232ba:	edcd 6a29 	vstr	s13, [sp, #164]	; 0xa4
 80232be:	eef0 6a68 	vmov.f32	s13, s17
 80232c2:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80232c6:	edcd 6a2a 	vstr	s13, [sp, #168]	; 0xa8
 80232ca:	ee29 7aa7 	vmul.f32	s14, s19, s15
 80232ce:	ee69 7a27 	vmul.f32	s15, s18, s15
 80232d2:	ee37 8a48 	vsub.f32	s16, s14, s16
 80232d6:	ee77 8ae8 	vsub.f32	s17, s15, s17
 80232da:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 80232de:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 80232e2:	ee18 2a10 	vmov	r2, s16
 80232e6:	eeb0 8a47 	vmov.f32	s16, s14
 80232ea:	fb92 f3f3 	sdiv	r3, r2, r3
 80232ee:	ee18 2a90 	vmov	r2, s17
 80232f2:	932b      	str	r3, [sp, #172]	; 0xac
 80232f4:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80232f6:	eef0 8a67 	vmov.f32	s17, s15
 80232fa:	fb92 f3f3 	sdiv	r3, r2, r3
 80232fe:	932c      	str	r3, [sp, #176]	; 0xb0
 8023300:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8023302:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8023304:	3b01      	subs	r3, #1
 8023306:	9311      	str	r3, [sp, #68]	; 0x44
 8023308:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 802330a:	bf08      	it	eq
 802330c:	4613      	moveq	r3, r2
 802330e:	9308      	str	r3, [sp, #32]
 8023310:	e5df      	b.n	8022ed2 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 8023312:	fb08 f505 	mul.w	r5, r8, r5
 8023316:	fb09 5303 	mla	r3, r9, r3, r5
 802331a:	e65f      	b.n	8022fdc <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x168>
 802331c:	4681      	mov	r9, r0
 802331e:	e686      	b.n	802302e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 8023320:	f1c1 0210 	rsb	r2, r1, #16
 8023324:	4341      	muls	r1, r0
 8023326:	fb09 1902 	mla	r9, r9, r2, r1
 802332a:	ea4f 0949 	mov.w	r9, r9, lsl #1
 802332e:	ea4f 5259 	mov.w	r2, r9, lsr #21
 8023332:	ea4f 1959 	mov.w	r9, r9, lsr #5
 8023336:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 802333a:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 802333e:	ea42 0909 	orr.w	r9, r2, r9
 8023342:	fa1f f289 	uxth.w	r2, r9
 8023346:	e71b      	b.n	8023180 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30c>
 8023348:	803a      	strh	r2, [r7, #0]
 802334a:	e75d      	b.n	8023208 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x394>
 802334c:	f115 0e01 	adds.w	lr, r5, #1
 8023350:	f53f af5a 	bmi.w	8023208 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x394>
 8023354:	4572      	cmp	r2, lr
 8023356:	f6ff af57 	blt.w	8023208 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x394>
 802335a:	f110 0e01 	adds.w	lr, r0, #1
 802335e:	f53f af53 	bmi.w	8023208 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x394>
 8023362:	4573      	cmp	r3, lr
 8023364:	f6ff af50 	blt.w	8023208 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x394>
 8023368:	9c12      	ldr	r4, [sp, #72]	; 0x48
 802336a:	b21b      	sxth	r3, r3
 802336c:	b212      	sxth	r2, r2
 802336e:	9502      	str	r5, [sp, #8]
 8023370:	9301      	str	r3, [sp, #4]
 8023372:	9200      	str	r2, [sp, #0]
 8023374:	e9cd 0103 	strd	r0, r1, [sp, #12]
 8023378:	e9cd c405 	strd	ip, r4, [sp, #20]
 802337c:	e9dd 230b 	ldrd	r2, r3, [sp, #44]	; 0x2c
 8023380:	4639      	mov	r1, r7
 8023382:	9815      	ldr	r0, [sp, #84]	; 0x54
 8023384:	f7ff fbd0 	bl	8022b28 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh>
 8023388:	e73e      	b.n	8023208 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x394>
 802338a:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 802338c:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8023390:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8023392:	f3c3 3503 	ubfx	r5, r3, #12, #4
 8023396:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8023398:	fa1f fc82 	uxth.w	ip, r2
 802339c:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80233a0:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80233a2:	ea4f 100c 	mov.w	r0, ip, lsl #4
 80233a6:	141f      	asrs	r7, r3, #16
 80233a8:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80233aa:	141b      	asrs	r3, r3, #16
 80233ac:	fb01 3707 	mla	r7, r1, r7, r3
 80233b0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80233b2:	eb03 0a07 	add.w	sl, r3, r7
 80233b6:	f813 9007 	ldrb.w	r9, [r3, r7]
 80233ba:	f5c0 7380 	rsb	r3, r0, #256	; 0x100
 80233be:	f89a 8001 	ldrb.w	r8, [sl, #1]
 80233c2:	b29b      	uxth	r3, r3
 80233c4:	2d00      	cmp	r5, #0
 80233c6:	f000 813d 	beq.w	8023644 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7d0>
 80233ca:	f81a 4001 	ldrb.w	r4, [sl, r1]
 80233ce:	eb0a 0b01 	add.w	fp, sl, r1
 80233d2:	fa1f fa85 	uxth.w	sl, r5
 80233d6:	940f      	str	r4, [sp, #60]	; 0x3c
 80233d8:	fb0a fc0c 	mul.w	ip, sl, ip
 80233dc:	f89b 4001 	ldrb.w	r4, [fp, #1]
 80233e0:	ebcc 1a0a 	rsb	sl, ip, sl, lsl #4
 80233e4:	eba0 000c 	sub.w	r0, r0, ip
 80233e8:	9410      	str	r4, [sp, #64]	; 0x40
 80233ea:	fa1f fa8a 	uxth.w	sl, sl
 80233ee:	b280      	uxth	r0, r0
 80233f0:	eba3 030a 	sub.w	r3, r3, sl
 80233f4:	fb08 f000 	mul.w	r0, r8, r0
 80233f8:	b29b      	uxth	r3, r3
 80233fa:	fb09 0303 	mla	r3, r9, r3, r0
 80233fe:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8023400:	fb0a 3300 	mla	r3, sl, r0, r3
 8023404:	fb0c 3304 	mla	r3, ip, r4, r3
 8023408:	f3c3 2307 	ubfx	r3, r3, #8, #8
 802340c:	2b00      	cmp	r3, #0
 802340e:	f000 810b 	beq.w	8023628 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7b4>
 8023412:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8023414:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8023418:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 802341a:	eb00 0047 	add.w	r0, r0, r7, lsl #1
 802341e:	f834 7017 	ldrh.w	r7, [r4, r7, lsl #1]
 8023422:	f000 8114 	beq.w	802364e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7da>
 8023426:	f427 6cfc 	bic.w	ip, r7, #2016	; 0x7e0
 802342a:	ea4f 0ae9 	mov.w	sl, r9, asr #3
 802342e:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 8023432:	fb0a fc0c 	mul.w	ip, sl, ip
 8023436:	fb09 f707 	mul.w	r7, r9, r7
 802343a:	ea06 195c 	and.w	r9, r6, ip, lsr #5
 802343e:	f60c 0c01 	addw	ip, ip, #2049	; 0x801
 8023442:	f107 0b20 	add.w	fp, r7, #32
 8023446:	44cc      	add	ip, r9
 8023448:	eb0b 2917 	add.w	r9, fp, r7, lsr #8
 802344c:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
 8023450:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8023454:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 8023458:	ea4c 0909 	orr.w	r9, ip, r9
 802345c:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8023460:	8847      	ldrh	r7, [r0, #2]
 8023462:	d019      	beq.n	8023498 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x624>
 8023464:	f427 6cfc 	bic.w	ip, r7, #2016	; 0x7e0
 8023468:	ea4f 0ae8 	mov.w	sl, r8, asr #3
 802346c:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 8023470:	fb0a fc0c 	mul.w	ip, sl, ip
 8023474:	fb08 f807 	mul.w	r8, r8, r7
 8023478:	ea06 175c 	and.w	r7, r6, ip, lsr #5
 802347c:	f60c 0c01 	addw	ip, ip, #2049	; 0x801
 8023480:	f108 0b20 	add.w	fp, r8, #32
 8023484:	44bc      	add	ip, r7
 8023486:	eb0b 2718 	add.w	r7, fp, r8, lsr #8
 802348a:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
 802348e:	0a3f      	lsrs	r7, r7, #8
 8023490:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 8023494:	ea4c 0707 	orr.w	r7, ip, r7
 8023498:	ea4f 4c09 	mov.w	ip, r9, lsl #16
 802349c:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 80234a0:	ea4f 4a07 	mov.w	sl, r7, lsl #16
 80234a4:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
 80234a8:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 80234ac:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 80234b0:	ea4c 0909 	orr.w	r9, ip, r9
 80234b4:	ea4a 0707 	orr.w	r7, sl, r7
 80234b8:	2d00      	cmp	r5, #0
 80234ba:	f000 80ca 	beq.w	8023652 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7de>
 80234be:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 80234c2:	3901      	subs	r1, #1
 80234c4:	0049      	lsls	r1, r1, #1
 80234c6:	3102      	adds	r1, #2
 80234c8:	eb00 0c01 	add.w	ip, r0, r1
 80234cc:	5a41      	ldrh	r1, [r0, r1]
 80234ce:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80234d0:	28ff      	cmp	r0, #255	; 0xff
 80234d2:	d019      	beq.n	8023508 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x694>
 80234d4:	f421 60fc 	bic.w	r0, r1, #2016	; 0x7e0
 80234d8:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 80234da:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 80234de:	ea4f 08e4 	mov.w	r8, r4, asr #3
 80234e2:	fb04 fa01 	mul.w	sl, r4, r1
 80234e6:	fb08 f800 	mul.w	r8, r8, r0
 80234ea:	f10a 0020 	add.w	r0, sl, #32
 80234ee:	ea06 1158 	and.w	r1, r6, r8, lsr #5
 80234f2:	f608 0801 	addw	r8, r8, #2049	; 0x801
 80234f6:	eb00 201a 	add.w	r0, r0, sl, lsr #8
 80234fa:	4441      	add	r1, r8
 80234fc:	0a00      	lsrs	r0, r0, #8
 80234fe:	ea06 1151 	and.w	r1, r6, r1, lsr #5
 8023502:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8023506:	4301      	orrs	r1, r0
 8023508:	9c10      	ldr	r4, [sp, #64]	; 0x40
 802350a:	f8bc 0002 	ldrh.w	r0, [ip, #2]
 802350e:	2cff      	cmp	r4, #255	; 0xff
 8023510:	d01a      	beq.n	8023548 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6d4>
 8023512:	f420 6cfc 	bic.w	ip, r0, #2016	; 0x7e0
 8023516:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 802351a:	ea4f 08e4 	mov.w	r8, r4, asr #3
 802351e:	fb04 fa00 	mul.w	sl, r4, r0
 8023522:	fb08 f80c 	mul.w	r8, r8, ip
 8023526:	f10a 0c20 	add.w	ip, sl, #32
 802352a:	ea06 1058 	and.w	r0, r6, r8, lsr #5
 802352e:	f608 0801 	addw	r8, r8, #2049	; 0x801
 8023532:	eb0c 2c1a 	add.w	ip, ip, sl, lsr #8
 8023536:	4440      	add	r0, r8
 8023538:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802353c:	ea06 1050 	and.w	r0, r6, r0, lsr #5
 8023540:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 8023544:	ea40 000c 	orr.w	r0, r0, ip
 8023548:	fb15 fc02 	smulbb	ip, r5, r2
 802354c:	f1c5 0810 	rsb	r8, r5, #16
 8023550:	ea4f 4a01 	mov.w	sl, r1, lsl #16
 8023554:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 8023558:	ea4f 0cec 	mov.w	ip, ip, asr #3
 802355c:	eba8 0802 	sub.w	r8, r8, r2
 8023560:	ea4f 4b00 	mov.w	fp, r0, lsl #16
 8023564:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8023568:	ebcc 0242 	rsb	r2, ip, r2, lsl #1
 802356c:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8023570:	eb0c 0848 	add.w	r8, ip, r8, lsl #1
 8023574:	ea4a 0101 	orr.w	r1, sl, r1
 8023578:	437a      	muls	r2, r7
 802357a:	ebcc 0545 	rsb	r5, ip, r5, lsl #1
 802357e:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8023582:	fb09 2208 	mla	r2, r9, r8, r2
 8023586:	ea4b 0000 	orr.w	r0, fp, r0
 802358a:	fb05 2201 	mla	r2, r5, r1, r2
 802358e:	fb0c 2200 	mla	r2, ip, r0, r2
 8023592:	0d57      	lsrs	r7, r2, #21
 8023594:	0952      	lsrs	r2, r2, #5
 8023596:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 802359a:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 802359e:	433a      	orrs	r2, r7
 80235a0:	2bff      	cmp	r3, #255	; 0xff
 80235a2:	b292      	uxth	r2, r2
 80235a4:	d102      	bne.n	80235ac <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x738>
 80235a6:	9912      	ldr	r1, [sp, #72]	; 0x48
 80235a8:	29ff      	cmp	r1, #255	; 0xff
 80235aa:	d063      	beq.n	8023674 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x800>
 80235ac:	980a      	ldr	r0, [sp, #40]	; 0x28
 80235ae:	1215      	asrs	r5, r2, #8
 80235b0:	f8be 1000 	ldrh.w	r1, [lr]
 80235b4:	4343      	muls	r3, r0
 80235b6:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80235b8:	10cf      	asrs	r7, r1, #3
 80235ba:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 80235be:	1c58      	adds	r0, r3, #1
 80235c0:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 80235c4:	eb00 2323 	add.w	r3, r0, r3, asr #8
 80235c8:	1208      	asrs	r0, r1, #8
 80235ca:	ea6f 2323 	mvn.w	r3, r3, asr #8
 80235ce:	00c9      	lsls	r1, r1, #3
 80235d0:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 80235d4:	b2db      	uxtb	r3, r3
 80235d6:	b2c9      	uxtb	r1, r1
 80235d8:	fb10 f003 	smulbb	r0, r0, r3
 80235dc:	fb11 f103 	smulbb	r1, r1, r3
 80235e0:	fb05 0504 	mla	r5, r5, r4, r0
 80235e4:	10d0      	asrs	r0, r2, #3
 80235e6:	fb17 f703 	smulbb	r7, r7, r3
 80235ea:	00d2      	lsls	r2, r2, #3
 80235ec:	b2ad      	uxth	r5, r5
 80235ee:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 80235f2:	b2d2      	uxtb	r2, r2
 80235f4:	fb00 7004 	mla	r0, r0, r4, r7
 80235f8:	1c6b      	adds	r3, r5, #1
 80235fa:	fb02 1204 	mla	r2, r2, r4, r1
 80235fe:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 8023602:	b292      	uxth	r2, r2
 8023604:	b280      	uxth	r0, r0
 8023606:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 802360a:	1c57      	adds	r7, r2, #1
 802360c:	eb07 2712 	add.w	r7, r7, r2, lsr #8
 8023610:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 8023614:	433d      	orrs	r5, r7
 8023616:	1c47      	adds	r7, r0, #1
 8023618:	eb07 2710 	add.w	r7, r7, r0, lsr #8
 802361c:	097f      	lsrs	r7, r7, #5
 802361e:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 8023622:	433d      	orrs	r5, r7
 8023624:	f8ae 5000 	strh.w	r5, [lr]
 8023628:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 802362a:	f10e 0e02 	add.w	lr, lr, #2
 802362e:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8023630:	4413      	add	r3, r2
 8023632:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 8023634:	9329      	str	r3, [sp, #164]	; 0xa4
 8023636:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8023638:	441a      	add	r2, r3
 802363a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 802363c:	3b01      	subs	r3, #1
 802363e:	922a      	str	r2, [sp, #168]	; 0xa8
 8023640:	9313      	str	r3, [sp, #76]	; 0x4c
 8023642:	e61c      	b.n	802327e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40a>
 8023644:	fb08 f000 	mul.w	r0, r8, r0
 8023648:	fb09 0303 	mla	r3, r9, r3, r0
 802364c:	e6dc      	b.n	8023408 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x594>
 802364e:	46b9      	mov	r9, r7
 8023650:	e704      	b.n	802345c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e8>
 8023652:	f1c2 0110 	rsb	r1, r2, #16
 8023656:	437a      	muls	r2, r7
 8023658:	fb09 2901 	mla	r9, r9, r1, r2
 802365c:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8023660:	ea4f 5059 	mov.w	r0, r9, lsr #21
 8023664:	ea4f 1259 	mov.w	r2, r9, lsr #5
 8023668:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 802366c:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8023670:	4302      	orrs	r2, r0
 8023672:	e795      	b.n	80235a0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72c>
 8023674:	f8ae 2000 	strh.w	r2, [lr]
 8023678:	e7d6      	b.n	8023628 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7b4>
 802367a:	b017      	add	sp, #92	; 0x5c
 802367c:	ecbd 8b08 	vpop	{d8-d11}
 8023680:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08023684 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>:
 8023684:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023688:	b085      	sub	sp, #20
 802368a:	e9dd 7510 	ldrd	r7, r5, [sp, #64]	; 0x40
 802368e:	f9bd 6038 	ldrsh.w	r6, [sp, #56]	; 0x38
 8023692:	9103      	str	r1, [sp, #12]
 8023694:	2d00      	cmp	r5, #0
 8023696:	fb05 7106 	mla	r1, r5, r6, r7
 802369a:	f9bd 803c 	ldrsh.w	r8, [sp, #60]	; 0x3c
 802369e:	f89d 0048 	ldrb.w	r0, [sp, #72]	; 0x48
 80236a2:	eb03 0441 	add.w	r4, r3, r1, lsl #1
 80236a6:	f89d e04c 	ldrb.w	lr, [sp, #76]	; 0x4c
 80236aa:	eb02 0901 	add.w	r9, r2, r1
 80236ae:	9401      	str	r4, [sp, #4]
 80236b0:	f2c0 80c0 	blt.w	8023834 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1b0>
 80236b4:	45a8      	cmp	r8, r5
 80236b6:	f340 80bd 	ble.w	8023834 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1b0>
 80236ba:	2f00      	cmp	r7, #0
 80236bc:	f2c0 80b6 	blt.w	802382c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1a8>
 80236c0:	42be      	cmp	r6, r7
 80236c2:	f340 80b3 	ble.w	802382c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1a8>
 80236c6:	f812 c001 	ldrb.w	ip, [r2, r1]
 80236ca:	f833 1011 	ldrh.w	r1, [r3, r1, lsl #1]
 80236ce:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 80236d2:	d019      	beq.n	8023708 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x84>
 80236d4:	f421 63fc 	bic.w	r3, r1, #2016	; 0x7e0
 80236d8:	ea4f 02ec 	mov.w	r2, ip, asr #3
 80236dc:	435a      	muls	r2, r3
 80236de:	f401 63fc 	and.w	r3, r1, #2016	; 0x7e0
 80236e2:	f64f 011f 	movw	r1, #63519	; 0xf81f
 80236e6:	fb0c f403 	mul.w	r4, ip, r3
 80236ea:	ea01 1352 	and.w	r3, r1, r2, lsr #5
 80236ee:	f602 0201 	addw	r2, r2, #2049	; 0x801
 80236f2:	441a      	add	r2, r3
 80236f4:	f104 0320 	add.w	r3, r4, #32
 80236f8:	eb03 2314 	add.w	r3, r3, r4, lsr #8
 80236fc:	ea01 1152 	and.w	r1, r1, r2, lsr #5
 8023700:	0a1b      	lsrs	r3, r3, #8
 8023702:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8023706:	4319      	orrs	r1, r3
 8023708:	b289      	uxth	r1, r1
 802370a:	1c7b      	adds	r3, r7, #1
 802370c:	f100 8097 	bmi.w	802383e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1ba>
 8023710:	429e      	cmp	r6, r3
 8023712:	f340 8094 	ble.w	802383e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1ba>
 8023716:	2800      	cmp	r0, #0
 8023718:	f000 8094 	beq.w	8023844 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1c0>
 802371c:	f899 4001 	ldrb.w	r4, [r9, #1]
 8023720:	9b01      	ldr	r3, [sp, #4]
 8023722:	2cff      	cmp	r4, #255	; 0xff
 8023724:	885b      	ldrh	r3, [r3, #2]
 8023726:	d01b      	beq.n	8023760 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xdc>
 8023728:	f423 62fc 	bic.w	r2, r3, #2016	; 0x7e0
 802372c:	ea4f 0ae4 	mov.w	sl, r4, asr #3
 8023730:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8023734:	f64f 0b1f 	movw	fp, #63519	; 0xf81f
 8023738:	fb0a f202 	mul.w	r2, sl, r2
 802373c:	fb04 fa03 	mul.w	sl, r4, r3
 8023740:	ea0b 1352 	and.w	r3, fp, r2, lsr #5
 8023744:	f602 0201 	addw	r2, r2, #2049	; 0x801
 8023748:	441a      	add	r2, r3
 802374a:	f10a 0320 	add.w	r3, sl, #32
 802374e:	eb03 231a 	add.w	r3, r3, sl, lsr #8
 8023752:	ea0b 1b52 	and.w	fp, fp, r2, lsr #5
 8023756:	0a1b      	lsrs	r3, r3, #8
 8023758:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 802375c:	ea4b 0303 	orr.w	r3, fp, r3
 8023760:	b29b      	uxth	r3, r3
 8023762:	3501      	adds	r5, #1
 8023764:	d474      	bmi.n	8023850 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1cc>
 8023766:	45a8      	cmp	r8, r5
 8023768:	dd72      	ble.n	8023850 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1cc>
 802376a:	f1be 0f00 	cmp.w	lr, #0
 802376e:	f000 8111 	beq.w	8023994 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x310>
 8023772:	2f00      	cmp	r7, #0
 8023774:	db69      	blt.n	802384a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1c6>
 8023776:	42be      	cmp	r6, r7
 8023778:	dd67      	ble.n	802384a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1c6>
 802377a:	f819 5006 	ldrb.w	r5, [r9, r6]
 802377e:	9a01      	ldr	r2, [sp, #4]
 8023780:	2dff      	cmp	r5, #255	; 0xff
 8023782:	f832 b016 	ldrh.w	fp, [r2, r6, lsl #1]
 8023786:	d01c      	beq.n	80237c2 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x13e>
 8023788:	f42b 62fc 	bic.w	r2, fp, #2016	; 0x7e0
 802378c:	ea4f 08e5 	mov.w	r8, r5, asr #3
 8023790:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 8023794:	fb08 f802 	mul.w	r8, r8, r2
 8023798:	fb05 fa0b 	mul.w	sl, r5, fp
 802379c:	f64f 0b1f 	movw	fp, #63519	; 0xf81f
 80237a0:	ea0b 1258 	and.w	r2, fp, r8, lsr #5
 80237a4:	f608 0801 	addw	r8, r8, #2049	; 0x801
 80237a8:	4490      	add	r8, r2
 80237aa:	f10a 0220 	add.w	r2, sl, #32
 80237ae:	eb02 2a1a 	add.w	sl, r2, sl, lsr #8
 80237b2:	ea0b 1b58 	and.w	fp, fp, r8, lsr #5
 80237b6:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80237ba:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 80237be:	ea4b 0b0a 	orr.w	fp, fp, sl
 80237c2:	fa1f fb8b 	uxth.w	fp, fp
 80237c6:	3701      	adds	r7, #1
 80237c8:	d447      	bmi.n	802385a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1d6>
 80237ca:	42be      	cmp	r6, r7
 80237cc:	dd45      	ble.n	802385a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1d6>
 80237ce:	2800      	cmp	r0, #0
 80237d0:	d046      	beq.n	8023860 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1dc>
 80237d2:	3601      	adds	r6, #1
 80237d4:	9a01      	ldr	r2, [sp, #4]
 80237d6:	f819 7006 	ldrb.w	r7, [r9, r6]
 80237da:	f832 2016 	ldrh.w	r2, [r2, r6, lsl #1]
 80237de:	2fff      	cmp	r7, #255	; 0xff
 80237e0:	d01a      	beq.n	8023818 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x194>
 80237e2:	f422 66fc 	bic.w	r6, r2, #2016	; 0x7e0
 80237e6:	ea4f 08e7 	mov.w	r8, r7, asr #3
 80237ea:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 80237ee:	fb08 f806 	mul.w	r8, r8, r6
 80237f2:	fb07 f902 	mul.w	r9, r7, r2
 80237f6:	f64f 021f 	movw	r2, #63519	; 0xf81f
 80237fa:	ea02 1658 	and.w	r6, r2, r8, lsr #5
 80237fe:	f608 0801 	addw	r8, r8, #2049	; 0x801
 8023802:	44b0      	add	r8, r6
 8023804:	f109 0620 	add.w	r6, r9, #32
 8023808:	eb06 2619 	add.w	r6, r6, r9, lsr #8
 802380c:	ea02 1258 	and.w	r2, r2, r8, lsr #5
 8023810:	0a36      	lsrs	r6, r6, #8
 8023812:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 8023816:	4332      	orrs	r2, r6
 8023818:	b292      	uxth	r2, r2
 802381a:	280f      	cmp	r0, #15
 802381c:	d922      	bls.n	8023864 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1e0>
 802381e:	4b61      	ldr	r3, [pc, #388]	; (80239a4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x320>)
 8023820:	f240 210d 	movw	r1, #525	; 0x20d
 8023824:	4a60      	ldr	r2, [pc, #384]	; (80239a8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x324>)
 8023826:	4861      	ldr	r0, [pc, #388]	; (80239ac <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x328>)
 8023828:	f003 fc7e 	bl	8027128 <__assert_func>
 802382c:	f04f 0c00 	mov.w	ip, #0
 8023830:	4661      	mov	r1, ip
 8023832:	e76a      	b.n	802370a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x86>
 8023834:	2400      	movs	r4, #0
 8023836:	46a4      	mov	ip, r4
 8023838:	4623      	mov	r3, r4
 802383a:	4621      	mov	r1, r4
 802383c:	e791      	b.n	8023762 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xde>
 802383e:	2400      	movs	r4, #0
 8023840:	4623      	mov	r3, r4
 8023842:	e78e      	b.n	8023762 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xde>
 8023844:	4604      	mov	r4, r0
 8023846:	4603      	mov	r3, r0
 8023848:	e78b      	b.n	8023762 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xde>
 802384a:	2500      	movs	r5, #0
 802384c:	46ab      	mov	fp, r5
 802384e:	e7ba      	b.n	80237c6 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x142>
 8023850:	2700      	movs	r7, #0
 8023852:	463d      	mov	r5, r7
 8023854:	463a      	mov	r2, r7
 8023856:	46bb      	mov	fp, r7
 8023858:	e7df      	b.n	802381a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x196>
 802385a:	2700      	movs	r7, #0
 802385c:	463a      	mov	r2, r7
 802385e:	e7dc      	b.n	802381a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x196>
 8023860:	4607      	mov	r7, r0
 8023862:	4602      	mov	r2, r0
 8023864:	f1be 0f0f 	cmp.w	lr, #15
 8023868:	d8d9      	bhi.n	802381e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x19a>
 802386a:	b286      	uxth	r6, r0
 802386c:	fa1f f98e 	uxth.w	r9, lr
 8023870:	ea4f 4a01 	mov.w	sl, r1, lsl #16
 8023874:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 8023878:	fb06 f809 	mul.w	r8, r6, r9
 802387c:	0136      	lsls	r6, r6, #4
 802387e:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8023882:	ebc8 1909 	rsb	r9, r8, r9, lsl #4
 8023886:	9601      	str	r6, [sp, #4]
 8023888:	ea4a 0101 	orr.w	r1, sl, r1
 802388c:	ea4f 4a03 	mov.w	sl, r3, lsl #16
 8023890:	fa1f f689 	uxth.w	r6, r9
 8023894:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 8023898:	fb10 f90e 	smulbb	r9, r0, lr
 802389c:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 80238a0:	9602      	str	r6, [sp, #8]
 80238a2:	460e      	mov	r6, r1
 80238a4:	ea4f 09e9 	mov.w	r9, r9, asr #3
 80238a8:	f1ce 0110 	rsb	r1, lr, #16
 80238ac:	ea4a 0303 	orr.w	r3, sl, r3
 80238b0:	ea4f 4a02 	mov.w	sl, r2, lsl #16
 80238b4:	1a09      	subs	r1, r1, r0
 80238b6:	ebc9 0040 	rsb	r0, r9, r0, lsl #1
 80238ba:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 80238be:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 80238c2:	4343      	muls	r3, r0
 80238c4:	eb09 0141 	add.w	r1, r9, r1, lsl #1
 80238c8:	ea4a 0202 	orr.w	r2, sl, r2
 80238cc:	9802      	ldr	r0, [sp, #8]
 80238ce:	fb01 3106 	mla	r1, r1, r6, r3
 80238d2:	ea4f 4a0b 	mov.w	sl, fp, lsl #16
 80238d6:	f42b 6bfc 	bic.w	fp, fp, #2016	; 0x7e0
 80238da:	ebc9 0e4e 	rsb	lr, r9, lr, lsl #1
 80238de:	fb09 1302 	mla	r3, r9, r2, r1
 80238e2:	9901      	ldr	r1, [sp, #4]
 80238e4:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 80238e8:	9a03      	ldr	r2, [sp, #12]
 80238ea:	f5c1 7180 	rsb	r1, r1, #256	; 0x100
 80238ee:	ea4a 0b0b 	orr.w	fp, sl, fp
 80238f2:	8812      	ldrh	r2, [r2, #0]
 80238f4:	1a09      	subs	r1, r1, r0
 80238f6:	9801      	ldr	r0, [sp, #4]
 80238f8:	fb0e 3e0b 	mla	lr, lr, fp, r3
 80238fc:	eba0 0608 	sub.w	r6, r0, r8
 8023900:	b289      	uxth	r1, r1
 8023902:	ea4f 535e 	mov.w	r3, lr, lsr #21
 8023906:	b2b6      	uxth	r6, r6
 8023908:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 802390c:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8023910:	4374      	muls	r4, r6
 8023912:	10d0      	asrs	r0, r2, #3
 8023914:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 8023918:	fb0c 4401 	mla	r4, ip, r1, r4
 802391c:	9902      	ldr	r1, [sp, #8]
 802391e:	ea43 0e0e 	orr.w	lr, r3, lr
 8023922:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 8023926:	fb01 4505 	mla	r5, r1, r5, r4
 802392a:	1211      	asrs	r1, r2, #8
 802392c:	00d2      	lsls	r2, r2, #3
 802392e:	fb08 5707 	mla	r7, r8, r7, r5
 8023932:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 8023936:	b2d2      	uxtb	r2, r2
 8023938:	ea6f 2727 	mvn.w	r7, r7, asr #8
 802393c:	fa1f f38e 	uxth.w	r3, lr
 8023940:	b2ff      	uxtb	r7, r7
 8023942:	4379      	muls	r1, r7
 8023944:	4378      	muls	r0, r7
 8023946:	4357      	muls	r7, r2
 8023948:	1c4a      	adds	r2, r1, #1
 802394a:	eb02 2211 	add.w	r2, r2, r1, lsr #8
 802394e:	1219      	asrs	r1, r3, #8
 8023950:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 8023954:	eb01 2112 	add.w	r1, r1, r2, lsr #8
 8023958:	4a15      	ldr	r2, [pc, #84]	; (80239b0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x32c>)
 802395a:	ea02 2101 	and.w	r1, r2, r1, lsl #8
 802395e:	1c42      	adds	r2, r0, #1
 8023960:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8023964:	10da      	asrs	r2, r3, #3
 8023966:	00db      	lsls	r3, r3, #3
 8023968:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 802396c:	b2db      	uxtb	r3, r3
 802396e:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 8023972:	00d2      	lsls	r2, r2, #3
 8023974:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8023978:	430a      	orrs	r2, r1
 802397a:	1c79      	adds	r1, r7, #1
 802397c:	eb01 2717 	add.w	r7, r1, r7, lsr #8
 8023980:	eb03 2317 	add.w	r3, r3, r7, lsr #8
 8023984:	f3c3 03c4 	ubfx	r3, r3, #3, #5
 8023988:	4313      	orrs	r3, r2
 802398a:	9a03      	ldr	r2, [sp, #12]
 802398c:	8013      	strh	r3, [r2, #0]
 802398e:	b005      	add	sp, #20
 8023990:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023994:	280f      	cmp	r0, #15
 8023996:	f63f af42 	bhi.w	802381e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x19a>
 802399a:	4677      	mov	r7, lr
 802399c:	4675      	mov	r5, lr
 802399e:	4672      	mov	r2, lr
 80239a0:	46f3      	mov	fp, lr
 80239a2:	e762      	b.n	802386a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1e6>
 80239a4:	0802b942 	.word	0x0802b942
 80239a8:	0802bf05 	.word	0x0802bf05
 80239ac:	0802ba2b 	.word	0x0802ba2b
 80239b0:	fffff800 	.word	0xfffff800

080239b4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80239b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80239b8:	ed2d 8b08 	vpush	{d8-d11}
 80239bc:	b093      	sub	sp, #76	; 0x4c
 80239be:	eeb0 aa40 	vmov.f32	s20, s0
 80239c2:	eef0 9a60 	vmov.f32	s19, s1
 80239c6:	9210      	str	r2, [sp, #64]	; 0x40
 80239c8:	eeb0 9a41 	vmov.f32	s18, s2
 80239cc:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 80239ce:	eeb0 8a62 	vmov.f32	s16, s5
 80239d2:	9011      	str	r0, [sp, #68]	; 0x44
 80239d4:	eef0 8a43 	vmov.f32	s17, s6
 80239d8:	6850      	ldr	r0, [r2, #4]
 80239da:	eef0 ba44 	vmov.f32	s23, s8
 80239de:	910e      	str	r1, [sp, #56]	; 0x38
 80239e0:	eeb0 ba64 	vmov.f32	s22, s9
 80239e4:	9306      	str	r3, [sp, #24]
 80239e6:	eef0 aa45 	vmov.f32	s21, s10
 80239ea:	6812      	ldr	r2, [r2, #0]
 80239ec:	e9dd 132a 	ldrd	r1, r3, [sp, #168]	; 0xa8
 80239f0:	fb00 1303 	mla	r3, r0, r3, r1
 80239f4:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 80239f8:	9307      	str	r3, [sp, #28]
 80239fa:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80239fc:	681b      	ldr	r3, [r3, #0]
 80239fe:	9308      	str	r3, [sp, #32]
 8023a00:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8023a02:	685b      	ldr	r3, [r3, #4]
 8023a04:	9309      	str	r3, [sp, #36]	; 0x24
 8023a06:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8023a08:	2b00      	cmp	r3, #0
 8023a0a:	dc03      	bgt.n	8023a14 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 8023a0c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8023a0e:	2b00      	cmp	r3, #0
 8023a10:	f340 83b8 	ble.w	8024184 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7d0>
 8023a14:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8023a16:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8023a1a:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8023a1e:	1e48      	subs	r0, r1, #1
 8023a20:	1e55      	subs	r5, r2, #1
 8023a22:	9b06      	ldr	r3, [sp, #24]
 8023a24:	2b00      	cmp	r3, #0
 8023a26:	f340 819b 	ble.w	8023d60 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ac>
 8023a2a:	9e25      	ldr	r6, [sp, #148]	; 0x94
 8023a2c:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8023a2e:	1436      	asrs	r6, r6, #16
 8023a30:	ea4f 4323 	mov.w	r3, r3, asr #16
 8023a34:	d406      	bmi.n	8023a44 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8023a36:	4286      	cmp	r6, r0
 8023a38:	da04      	bge.n	8023a44 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8023a3a:	2b00      	cmp	r3, #0
 8023a3c:	db02      	blt.n	8023a44 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8023a3e:	42ab      	cmp	r3, r5
 8023a40:	f2c0 818f 	blt.w	8023d62 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ae>
 8023a44:	3601      	adds	r6, #1
 8023a46:	f100 817c 	bmi.w	8023d42 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38e>
 8023a4a:	42b1      	cmp	r1, r6
 8023a4c:	f2c0 8179 	blt.w	8023d42 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38e>
 8023a50:	3301      	adds	r3, #1
 8023a52:	f100 8176 	bmi.w	8023d42 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38e>
 8023a56:	429a      	cmp	r2, r3
 8023a58:	f2c0 8173 	blt.w	8023d42 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38e>
 8023a5c:	9b06      	ldr	r3, [sp, #24]
 8023a5e:	f64f 061f 	movw	r6, #63519	; 0xf81f
 8023a62:	9f07      	ldr	r7, [sp, #28]
 8023a64:	930f      	str	r3, [sp, #60]	; 0x3c
 8023a66:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8023a68:	2b00      	cmp	r3, #0
 8023a6a:	f340 819c 	ble.w	8023da6 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f2>
 8023a6e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8023a70:	9d25      	ldr	r5, [sp, #148]	; 0x94
 8023a72:	1418      	asrs	r0, r3, #16
 8023a74:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8023a76:	142d      	asrs	r5, r5, #16
 8023a78:	f3c3 3103 	ubfx	r1, r3, #12, #4
 8023a7c:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8023a7e:	f3c3 3c03 	ubfx	ip, r3, #12, #4
 8023a82:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8023a84:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8023a88:	f100 81f0 	bmi.w	8023e6c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b8>
 8023a8c:	f102 3eff 	add.w	lr, r2, #4294967295
 8023a90:	4575      	cmp	r5, lr
 8023a92:	f280 81eb 	bge.w	8023e6c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b8>
 8023a96:	2800      	cmp	r0, #0
 8023a98:	f2c0 81e8 	blt.w	8023e6c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b8>
 8023a9c:	f103 3eff 	add.w	lr, r3, #4294967295
 8023aa0:	4570      	cmp	r0, lr
 8023aa2:	f280 81e3 	bge.w	8023e6c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b8>
 8023aa6:	b212      	sxth	r2, r2
 8023aa8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8023aaa:	fa1f fe81 	uxth.w	lr, r1
 8023aae:	fb00 5002 	mla	r0, r0, r2, r5
 8023ab2:	ea4f 150e 	mov.w	r5, lr, lsl #4
 8023ab6:	eb03 0a00 	add.w	sl, r3, r0
 8023aba:	f813 9000 	ldrb.w	r9, [r3, r0]
 8023abe:	f5c5 7380 	rsb	r3, r5, #256	; 0x100
 8023ac2:	f89a 8001 	ldrb.w	r8, [sl, #1]
 8023ac6:	b29b      	uxth	r3, r3
 8023ac8:	f1bc 0f00 	cmp.w	ip, #0
 8023acc:	f000 81b1 	beq.w	8023e32 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x47e>
 8023ad0:	f81a 4002 	ldrb.w	r4, [sl, r2]
 8023ad4:	eb0a 0b02 	add.w	fp, sl, r2
 8023ad8:	fa1f fa8c 	uxth.w	sl, ip
 8023adc:	940a      	str	r4, [sp, #40]	; 0x28
 8023ade:	fb0a fe0e 	mul.w	lr, sl, lr
 8023ae2:	f89b 4001 	ldrb.w	r4, [fp, #1]
 8023ae6:	ebce 1a0a 	rsb	sl, lr, sl, lsl #4
 8023aea:	eba5 050e 	sub.w	r5, r5, lr
 8023aee:	940b      	str	r4, [sp, #44]	; 0x2c
 8023af0:	fa1f fa8a 	uxth.w	sl, sl
 8023af4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8023af6:	b2ad      	uxth	r5, r5
 8023af8:	eba3 030a 	sub.w	r3, r3, sl
 8023afc:	fb08 f505 	mul.w	r5, r8, r5
 8023b00:	b29b      	uxth	r3, r3
 8023b02:	fb09 5303 	mla	r3, r9, r3, r5
 8023b06:	fb0a 3304 	mla	r3, sl, r4, r3
 8023b0a:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8023b0c:	fb0e 3304 	mla	r3, lr, r4, r3
 8023b10:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8023b14:	2b00      	cmp	r3, #0
 8023b16:	f000 8107 	beq.w	8023d28 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x374>
 8023b1a:	9c08      	ldr	r4, [sp, #32]
 8023b1c:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8023b20:	eb04 0540 	add.w	r5, r4, r0, lsl #1
 8023b24:	f834 0010 	ldrh.w	r0, [r4, r0, lsl #1]
 8023b28:	f000 8188 	beq.w	8023e3c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x488>
 8023b2c:	f420 6efc 	bic.w	lr, r0, #2016	; 0x7e0
 8023b30:	ea4f 0ae9 	mov.w	sl, r9, asr #3
 8023b34:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8023b38:	fb0a fe0e 	mul.w	lr, sl, lr
 8023b3c:	fb09 f000 	mul.w	r0, r9, r0
 8023b40:	ea06 195e 	and.w	r9, r6, lr, lsr #5
 8023b44:	f60e 0e01 	addw	lr, lr, #2049	; 0x801
 8023b48:	f100 0b20 	add.w	fp, r0, #32
 8023b4c:	44ce      	add	lr, r9
 8023b4e:	eb0b 2910 	add.w	r9, fp, r0, lsr #8
 8023b52:	ea06 1e5e 	and.w	lr, r6, lr, lsr #5
 8023b56:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8023b5a:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 8023b5e:	ea4e 0909 	orr.w	r9, lr, r9
 8023b62:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8023b66:	8868      	ldrh	r0, [r5, #2]
 8023b68:	d019      	beq.n	8023b9e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 8023b6a:	f420 6efc 	bic.w	lr, r0, #2016	; 0x7e0
 8023b6e:	ea4f 0ae8 	mov.w	sl, r8, asr #3
 8023b72:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8023b76:	fb0a fe0e 	mul.w	lr, sl, lr
 8023b7a:	fb08 f800 	mul.w	r8, r8, r0
 8023b7e:	ea06 105e 	and.w	r0, r6, lr, lsr #5
 8023b82:	f60e 0e01 	addw	lr, lr, #2049	; 0x801
 8023b86:	f108 0b20 	add.w	fp, r8, #32
 8023b8a:	4486      	add	lr, r0
 8023b8c:	eb0b 2018 	add.w	r0, fp, r8, lsr #8
 8023b90:	ea06 1e5e 	and.w	lr, r6, lr, lsr #5
 8023b94:	0a00      	lsrs	r0, r0, #8
 8023b96:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8023b9a:	ea4e 0000 	orr.w	r0, lr, r0
 8023b9e:	ea4f 4e09 	mov.w	lr, r9, lsl #16
 8023ba2:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 8023ba6:	ea4f 4a00 	mov.w	sl, r0, lsl #16
 8023baa:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8023bae:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
 8023bb2:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8023bb6:	ea4e 0909 	orr.w	r9, lr, r9
 8023bba:	ea4a 0000 	orr.w	r0, sl, r0
 8023bbe:	f1bc 0f00 	cmp.w	ip, #0
 8023bc2:	f000 813d 	beq.w	8023e40 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48c>
 8023bc6:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
 8023bca:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8023bcc:	3a01      	subs	r2, #1
 8023bce:	2cff      	cmp	r4, #255	; 0xff
 8023bd0:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8023bd4:	f102 0202 	add.w	r2, r2, #2
 8023bd8:	eb05 0e02 	add.w	lr, r5, r2
 8023bdc:	5aaa      	ldrh	r2, [r5, r2]
 8023bde:	d018      	beq.n	8023c12 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 8023be0:	f422 65fc 	bic.w	r5, r2, #2016	; 0x7e0
 8023be4:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8023be8:	ea4f 08e4 	mov.w	r8, r4, asr #3
 8023bec:	fb04 fa02 	mul.w	sl, r4, r2
 8023bf0:	fb08 f805 	mul.w	r8, r8, r5
 8023bf4:	f10a 0520 	add.w	r5, sl, #32
 8023bf8:	ea06 1258 	and.w	r2, r6, r8, lsr #5
 8023bfc:	f608 0801 	addw	r8, r8, #2049	; 0x801
 8023c00:	eb05 251a 	add.w	r5, r5, sl, lsr #8
 8023c04:	4442      	add	r2, r8
 8023c06:	0a2d      	lsrs	r5, r5, #8
 8023c08:	ea06 1252 	and.w	r2, r6, r2, lsr #5
 8023c0c:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8023c10:	432a      	orrs	r2, r5
 8023c12:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8023c14:	f8be 5002 	ldrh.w	r5, [lr, #2]
 8023c18:	2cff      	cmp	r4, #255	; 0xff
 8023c1a:	d01a      	beq.n	8023c52 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29e>
 8023c1c:	f425 6efc 	bic.w	lr, r5, #2016	; 0x7e0
 8023c20:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8023c24:	ea4f 08e4 	mov.w	r8, r4, asr #3
 8023c28:	fb04 fa05 	mul.w	sl, r4, r5
 8023c2c:	fb08 f80e 	mul.w	r8, r8, lr
 8023c30:	f10a 0e20 	add.w	lr, sl, #32
 8023c34:	ea06 1558 	and.w	r5, r6, r8, lsr #5
 8023c38:	f608 0801 	addw	r8, r8, #2049	; 0x801
 8023c3c:	eb0e 2e1a 	add.w	lr, lr, sl, lsr #8
 8023c40:	4445      	add	r5, r8
 8023c42:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8023c46:	ea06 1555 	and.w	r5, r6, r5, lsr #5
 8023c4a:	f40e 6efc 	and.w	lr, lr, #2016	; 0x7e0
 8023c4e:	ea45 050e 	orr.w	r5, r5, lr
 8023c52:	fb1c fe01 	smulbb	lr, ip, r1
 8023c56:	f1cc 0810 	rsb	r8, ip, #16
 8023c5a:	ea4f 4a02 	mov.w	sl, r2, lsl #16
 8023c5e:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8023c62:	ea4f 0eee 	mov.w	lr, lr, asr #3
 8023c66:	eba8 0801 	sub.w	r8, r8, r1
 8023c6a:	ea4f 4b05 	mov.w	fp, r5, lsl #16
 8023c6e:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8023c72:	ebce 0141 	rsb	r1, lr, r1, lsl #1
 8023c76:	f425 65fc 	bic.w	r5, r5, #2016	; 0x7e0
 8023c7a:	eb0e 0848 	add.w	r8, lr, r8, lsl #1
 8023c7e:	ea4a 0202 	orr.w	r2, sl, r2
 8023c82:	4341      	muls	r1, r0
 8023c84:	ebce 0c4c 	rsb	ip, lr, ip, lsl #1
 8023c88:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8023c8c:	fb09 1108 	mla	r1, r9, r8, r1
 8023c90:	ea4b 0505 	orr.w	r5, fp, r5
 8023c94:	fb0c 1102 	mla	r1, ip, r2, r1
 8023c98:	fb0e 1e05 	mla	lr, lr, r5, r1
 8023c9c:	ea4f 525e 	mov.w	r2, lr, lsr #21
 8023ca0:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 8023ca4:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8023ca8:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 8023cac:	ea42 0e0e 	orr.w	lr, r2, lr
 8023cb0:	fa1f f28e 	uxth.w	r2, lr
 8023cb4:	2bff      	cmp	r3, #255	; 0xff
 8023cb6:	f000 80d7 	beq.w	8023e68 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b4>
 8023cba:	f8b7 c000 	ldrh.w	ip, [r7]
 8023cbe:	43db      	mvns	r3, r3
 8023cc0:	ea4f 202c 	mov.w	r0, ip, asr #8
 8023cc4:	fa5f fe83 	uxtb.w	lr, r3
 8023cc8:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8023ccc:	ea4f 05ec 	mov.w	r5, ip, asr #3
 8023cd0:	ea4f 03cc 	mov.w	r3, ip, lsl #3
 8023cd4:	fb00 f00e 	mul.w	r0, r0, lr
 8023cd8:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 8023cdc:	b2db      	uxtb	r3, r3
 8023cde:	1c41      	adds	r1, r0, #1
 8023ce0:	fb05 f50e 	mul.w	r5, r5, lr
 8023ce4:	fb03 f30e 	mul.w	r3, r3, lr
 8023ce8:	eb01 2110 	add.w	r1, r1, r0, lsr #8
 8023cec:	1210      	asrs	r0, r2, #8
 8023cee:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8023cf2:	eb00 2011 	add.w	r0, r0, r1, lsr #8
 8023cf6:	496c      	ldr	r1, [pc, #432]	; (8023ea8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f4>)
 8023cf8:	ea01 2000 	and.w	r0, r1, r0, lsl #8
 8023cfc:	1c69      	adds	r1, r5, #1
 8023cfe:	eb01 2515 	add.w	r5, r1, r5, lsr #8
 8023d02:	10d1      	asrs	r1, r2, #3
 8023d04:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 8023d08:	eb01 2115 	add.w	r1, r1, r5, lsr #8
 8023d0c:	00c9      	lsls	r1, r1, #3
 8023d0e:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8023d12:	4301      	orrs	r1, r0
 8023d14:	1c58      	adds	r0, r3, #1
 8023d16:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 8023d1a:	00d3      	lsls	r3, r2, #3
 8023d1c:	b2db      	uxtb	r3, r3
 8023d1e:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 8023d22:	ea41 03d3 	orr.w	r3, r1, r3, lsr #3
 8023d26:	803b      	strh	r3, [r7, #0]
 8023d28:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8023d2a:	3702      	adds	r7, #2
 8023d2c:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 8023d2e:	4413      	add	r3, r2
 8023d30:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8023d32:	9325      	str	r3, [sp, #148]	; 0x94
 8023d34:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8023d36:	441a      	add	r2, r3
 8023d38:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8023d3a:	3b01      	subs	r3, #1
 8023d3c:	9226      	str	r2, [sp, #152]	; 0x98
 8023d3e:	930f      	str	r3, [sp, #60]	; 0x3c
 8023d40:	e691      	b.n	8023a66 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 8023d42:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8023d44:	9e27      	ldr	r6, [sp, #156]	; 0x9c
 8023d46:	9c26      	ldr	r4, [sp, #152]	; 0x98
 8023d48:	4433      	add	r3, r6
 8023d4a:	9325      	str	r3, [sp, #148]	; 0x94
 8023d4c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8023d4e:	441c      	add	r4, r3
 8023d50:	9b06      	ldr	r3, [sp, #24]
 8023d52:	3b01      	subs	r3, #1
 8023d54:	9426      	str	r4, [sp, #152]	; 0x98
 8023d56:	9306      	str	r3, [sp, #24]
 8023d58:	9b07      	ldr	r3, [sp, #28]
 8023d5a:	3302      	adds	r3, #2
 8023d5c:	9307      	str	r3, [sp, #28]
 8023d5e:	e660      	b.n	8023a22 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 8023d60:	d028      	beq.n	8023db4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x400>
 8023d62:	9b06      	ldr	r3, [sp, #24]
 8023d64:	9827      	ldr	r0, [sp, #156]	; 0x9c
 8023d66:	3b01      	subs	r3, #1
 8023d68:	9d25      	ldr	r5, [sp, #148]	; 0x94
 8023d6a:	fb00 5003 	mla	r0, r0, r3, r5
 8023d6e:	1400      	asrs	r0, r0, #16
 8023d70:	f53f ae74 	bmi.w	8023a5c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 8023d74:	3901      	subs	r1, #1
 8023d76:	4288      	cmp	r0, r1
 8023d78:	f6bf ae70 	bge.w	8023a5c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 8023d7c:	9928      	ldr	r1, [sp, #160]	; 0xa0
 8023d7e:	9826      	ldr	r0, [sp, #152]	; 0x98
 8023d80:	fb01 0303 	mla	r3, r1, r3, r0
 8023d84:	141b      	asrs	r3, r3, #16
 8023d86:	f53f ae69 	bmi.w	8023a5c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 8023d8a:	3a01      	subs	r2, #1
 8023d8c:	4293      	cmp	r3, r2
 8023d8e:	f6bf ae65 	bge.w	8023a5c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 8023d92:	9b06      	ldr	r3, [sp, #24]
 8023d94:	f64f 061f 	movw	r6, #63519	; 0xf81f
 8023d98:	f8dd e01c 	ldr.w	lr, [sp, #28]
 8023d9c:	930f      	str	r3, [sp, #60]	; 0x3c
 8023d9e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8023da0:	2b00      	cmp	r3, #0
 8023da2:	f300 8083 	bgt.w	8023eac <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f8>
 8023da6:	9b06      	ldr	r3, [sp, #24]
 8023da8:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8023dac:	9b07      	ldr	r3, [sp, #28]
 8023dae:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 8023db2:	9307      	str	r3, [sp, #28]
 8023db4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8023db6:	2b00      	cmp	r3, #0
 8023db8:	f340 81e4 	ble.w	8024184 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7d0>
 8023dbc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8023dc0:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8023dc2:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8023dc6:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8023dca:	eef0 6a48 	vmov.f32	s13, s16
 8023dce:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8023dd2:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8023dd6:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8023dda:	edcd 6a25 	vstr	s13, [sp, #148]	; 0x94
 8023dde:	eef0 6a68 	vmov.f32	s13, s17
 8023de2:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8023de6:	edcd 6a26 	vstr	s13, [sp, #152]	; 0x98
 8023dea:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8023dee:	ee69 7a27 	vmul.f32	s15, s18, s15
 8023df2:	ee37 8a48 	vsub.f32	s16, s14, s16
 8023df6:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8023dfa:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8023dfe:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8023e02:	ee18 2a10 	vmov	r2, s16
 8023e06:	eeb0 8a47 	vmov.f32	s16, s14
 8023e0a:	fb92 f3f3 	sdiv	r3, r2, r3
 8023e0e:	ee18 2a90 	vmov	r2, s17
 8023e12:	9327      	str	r3, [sp, #156]	; 0x9c
 8023e14:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8023e16:	eef0 8a67 	vmov.f32	s17, s15
 8023e1a:	fb92 f3f3 	sdiv	r3, r2, r3
 8023e1e:	9328      	str	r3, [sp, #160]	; 0xa0
 8023e20:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8023e22:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8023e24:	3b01      	subs	r3, #1
 8023e26:	930e      	str	r3, [sp, #56]	; 0x38
 8023e28:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8023e2a:	bf08      	it	eq
 8023e2c:	4613      	moveq	r3, r2
 8023e2e:	9306      	str	r3, [sp, #24]
 8023e30:	e5e9      	b.n	8023a06 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 8023e32:	fb08 f505 	mul.w	r5, r8, r5
 8023e36:	fb09 5303 	mla	r3, r9, r3, r5
 8023e3a:	e669      	b.n	8023b10 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15c>
 8023e3c:	4681      	mov	r9, r0
 8023e3e:	e690      	b.n	8023b62 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ae>
 8023e40:	f1c1 0210 	rsb	r2, r1, #16
 8023e44:	4341      	muls	r1, r0
 8023e46:	fb09 1902 	mla	r9, r9, r2, r1
 8023e4a:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8023e4e:	ea4f 5259 	mov.w	r2, r9, lsr #21
 8023e52:	ea4f 1959 	mov.w	r9, r9, lsr #5
 8023e56:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8023e5a:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 8023e5e:	ea42 0909 	orr.w	r9, r2, r9
 8023e62:	fa1f f289 	uxth.w	r2, r9
 8023e66:	e725      	b.n	8023cb4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x300>
 8023e68:	803a      	strh	r2, [r7, #0]
 8023e6a:	e75d      	b.n	8023d28 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x374>
 8023e6c:	f115 0e01 	adds.w	lr, r5, #1
 8023e70:	f53f af5a 	bmi.w	8023d28 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x374>
 8023e74:	4572      	cmp	r2, lr
 8023e76:	f6ff af57 	blt.w	8023d28 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x374>
 8023e7a:	f110 0e01 	adds.w	lr, r0, #1
 8023e7e:	f53f af53 	bmi.w	8023d28 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x374>
 8023e82:	4573      	cmp	r3, lr
 8023e84:	f6ff af50 	blt.w	8023d28 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x374>
 8023e88:	b21b      	sxth	r3, r3
 8023e8a:	b212      	sxth	r2, r2
 8023e8c:	9301      	str	r3, [sp, #4]
 8023e8e:	9200      	str	r2, [sp, #0]
 8023e90:	e9cd 1c04 	strd	r1, ip, [sp, #16]
 8023e94:	e9cd 5002 	strd	r5, r0, [sp, #8]
 8023e98:	e9dd 3208 	ldrd	r3, r2, [sp, #32]
 8023e9c:	4639      	mov	r1, r7
 8023e9e:	9811      	ldr	r0, [sp, #68]	; 0x44
 8023ea0:	f7ff fbf0 	bl	8023684 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>
 8023ea4:	e740      	b.n	8023d28 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x374>
 8023ea6:	bf00      	nop
 8023ea8:	fffff800 	.word	0xfffff800
 8023eac:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8023eae:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8023eb2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8023eb4:	f3c3 3503 	ubfx	r5, r3, #12, #4
 8023eb8:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8023eba:	fa1f fc82 	uxth.w	ip, r2
 8023ebe:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8023ec2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8023ec4:	ea4f 100c 	mov.w	r0, ip, lsl #4
 8023ec8:	141f      	asrs	r7, r3, #16
 8023eca:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8023ecc:	141b      	asrs	r3, r3, #16
 8023ece:	fb01 3707 	mla	r7, r1, r7, r3
 8023ed2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8023ed4:	eb03 0a07 	add.w	sl, r3, r7
 8023ed8:	f813 9007 	ldrb.w	r9, [r3, r7]
 8023edc:	f5c0 7380 	rsb	r3, r0, #256	; 0x100
 8023ee0:	f89a 8001 	ldrb.w	r8, [sl, #1]
 8023ee4:	b29b      	uxth	r3, r3
 8023ee6:	2d00      	cmp	r5, #0
 8023ee8:	f000 8131 	beq.w	802414e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x79a>
 8023eec:	f81a 4001 	ldrb.w	r4, [sl, r1]
 8023ef0:	eb0a 0b01 	add.w	fp, sl, r1
 8023ef4:	fa1f fa85 	uxth.w	sl, r5
 8023ef8:	940c      	str	r4, [sp, #48]	; 0x30
 8023efa:	fb0a fc0c 	mul.w	ip, sl, ip
 8023efe:	f89b 4001 	ldrb.w	r4, [fp, #1]
 8023f02:	ebcc 1a0a 	rsb	sl, ip, sl, lsl #4
 8023f06:	eba0 000c 	sub.w	r0, r0, ip
 8023f0a:	940d      	str	r4, [sp, #52]	; 0x34
 8023f0c:	fa1f fa8a 	uxth.w	sl, sl
 8023f10:	b280      	uxth	r0, r0
 8023f12:	eba3 030a 	sub.w	r3, r3, sl
 8023f16:	fb08 f000 	mul.w	r0, r8, r0
 8023f1a:	b29b      	uxth	r3, r3
 8023f1c:	fb09 0303 	mla	r3, r9, r3, r0
 8023f20:	980c      	ldr	r0, [sp, #48]	; 0x30
 8023f22:	fb0a 3300 	mla	r3, sl, r0, r3
 8023f26:	fb0c 3304 	mla	r3, ip, r4, r3
 8023f2a:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8023f2e:	2b00      	cmp	r3, #0
 8023f30:	f000 80ff 	beq.w	8024132 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x77e>
 8023f34:	9808      	ldr	r0, [sp, #32]
 8023f36:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8023f3a:	9c08      	ldr	r4, [sp, #32]
 8023f3c:	eb00 0047 	add.w	r0, r0, r7, lsl #1
 8023f40:	f834 7017 	ldrh.w	r7, [r4, r7, lsl #1]
 8023f44:	f000 8108 	beq.w	8024158 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a4>
 8023f48:	f427 6cfc 	bic.w	ip, r7, #2016	; 0x7e0
 8023f4c:	ea4f 0ae9 	mov.w	sl, r9, asr #3
 8023f50:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 8023f54:	fb0a fc0c 	mul.w	ip, sl, ip
 8023f58:	fb09 f707 	mul.w	r7, r9, r7
 8023f5c:	ea06 195c 	and.w	r9, r6, ip, lsr #5
 8023f60:	f60c 0c01 	addw	ip, ip, #2049	; 0x801
 8023f64:	f107 0b20 	add.w	fp, r7, #32
 8023f68:	44cc      	add	ip, r9
 8023f6a:	eb0b 2917 	add.w	r9, fp, r7, lsr #8
 8023f6e:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
 8023f72:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8023f76:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 8023f7a:	ea4c 0909 	orr.w	r9, ip, r9
 8023f7e:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8023f82:	8847      	ldrh	r7, [r0, #2]
 8023f84:	d019      	beq.n	8023fba <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x606>
 8023f86:	f427 6cfc 	bic.w	ip, r7, #2016	; 0x7e0
 8023f8a:	ea4f 0ae8 	mov.w	sl, r8, asr #3
 8023f8e:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 8023f92:	fb0a fc0c 	mul.w	ip, sl, ip
 8023f96:	fb08 f807 	mul.w	r8, r8, r7
 8023f9a:	ea06 175c 	and.w	r7, r6, ip, lsr #5
 8023f9e:	f60c 0c01 	addw	ip, ip, #2049	; 0x801
 8023fa2:	f108 0b20 	add.w	fp, r8, #32
 8023fa6:	44bc      	add	ip, r7
 8023fa8:	eb0b 2718 	add.w	r7, fp, r8, lsr #8
 8023fac:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
 8023fb0:	0a3f      	lsrs	r7, r7, #8
 8023fb2:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 8023fb6:	ea4c 0707 	orr.w	r7, ip, r7
 8023fba:	ea4f 4c09 	mov.w	ip, r9, lsl #16
 8023fbe:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 8023fc2:	ea4f 4a07 	mov.w	sl, r7, lsl #16
 8023fc6:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
 8023fca:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 8023fce:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8023fd2:	ea4c 0909 	orr.w	r9, ip, r9
 8023fd6:	ea4a 0707 	orr.w	r7, sl, r7
 8023fda:	2d00      	cmp	r5, #0
 8023fdc:	f000 80be 	beq.w	802415c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a8>
 8023fe0:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 8023fe4:	3901      	subs	r1, #1
 8023fe6:	0049      	lsls	r1, r1, #1
 8023fe8:	3102      	adds	r1, #2
 8023fea:	eb00 0c01 	add.w	ip, r0, r1
 8023fee:	5a41      	ldrh	r1, [r0, r1]
 8023ff0:	980c      	ldr	r0, [sp, #48]	; 0x30
 8023ff2:	28ff      	cmp	r0, #255	; 0xff
 8023ff4:	d019      	beq.n	802402a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x676>
 8023ff6:	f421 60fc 	bic.w	r0, r1, #2016	; 0x7e0
 8023ffa:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8023ffc:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8024000:	ea4f 08e4 	mov.w	r8, r4, asr #3
 8024004:	fb04 fa01 	mul.w	sl, r4, r1
 8024008:	fb08 f800 	mul.w	r8, r8, r0
 802400c:	f10a 0020 	add.w	r0, sl, #32
 8024010:	ea06 1158 	and.w	r1, r6, r8, lsr #5
 8024014:	f608 0801 	addw	r8, r8, #2049	; 0x801
 8024018:	eb00 201a 	add.w	r0, r0, sl, lsr #8
 802401c:	4441      	add	r1, r8
 802401e:	0a00      	lsrs	r0, r0, #8
 8024020:	ea06 1151 	and.w	r1, r6, r1, lsr #5
 8024024:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8024028:	4301      	orrs	r1, r0
 802402a:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 802402c:	f8bc 0002 	ldrh.w	r0, [ip, #2]
 8024030:	2cff      	cmp	r4, #255	; 0xff
 8024032:	d01a      	beq.n	802406a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6b6>
 8024034:	f420 6cfc 	bic.w	ip, r0, #2016	; 0x7e0
 8024038:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 802403c:	ea4f 08e4 	mov.w	r8, r4, asr #3
 8024040:	fb04 fa00 	mul.w	sl, r4, r0
 8024044:	fb08 f80c 	mul.w	r8, r8, ip
 8024048:	f10a 0c20 	add.w	ip, sl, #32
 802404c:	ea06 1058 	and.w	r0, r6, r8, lsr #5
 8024050:	f608 0801 	addw	r8, r8, #2049	; 0x801
 8024054:	eb0c 2c1a 	add.w	ip, ip, sl, lsr #8
 8024058:	4440      	add	r0, r8
 802405a:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802405e:	ea06 1050 	and.w	r0, r6, r0, lsr #5
 8024062:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 8024066:	ea40 000c 	orr.w	r0, r0, ip
 802406a:	fb15 fc02 	smulbb	ip, r5, r2
 802406e:	f1c5 0810 	rsb	r8, r5, #16
 8024072:	ea4f 4a01 	mov.w	sl, r1, lsl #16
 8024076:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 802407a:	ea4f 0cec 	mov.w	ip, ip, asr #3
 802407e:	eba8 0802 	sub.w	r8, r8, r2
 8024082:	ea4f 4b00 	mov.w	fp, r0, lsl #16
 8024086:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 802408a:	ebcc 0242 	rsb	r2, ip, r2, lsl #1
 802408e:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8024092:	eb0c 0848 	add.w	r8, ip, r8, lsl #1
 8024096:	ea4a 0101 	orr.w	r1, sl, r1
 802409a:	437a      	muls	r2, r7
 802409c:	ebcc 0545 	rsb	r5, ip, r5, lsl #1
 80240a0:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 80240a4:	fb09 2208 	mla	r2, r9, r8, r2
 80240a8:	ea4b 0000 	orr.w	r0, fp, r0
 80240ac:	fb05 2201 	mla	r2, r5, r1, r2
 80240b0:	fb0c 2200 	mla	r2, ip, r0, r2
 80240b4:	0d57      	lsrs	r7, r2, #21
 80240b6:	0952      	lsrs	r2, r2, #5
 80240b8:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 80240bc:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 80240c0:	433a      	orrs	r2, r7
 80240c2:	2bff      	cmp	r3, #255	; 0xff
 80240c4:	b292      	uxth	r2, r2
 80240c6:	d05a      	beq.n	802417e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7ca>
 80240c8:	f8be 7000 	ldrh.w	r7, [lr]
 80240cc:	43db      	mvns	r3, r3
 80240ce:	4c30      	ldr	r4, [pc, #192]	; (8024190 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7dc>)
 80240d0:	1238      	asrs	r0, r7, #8
 80240d2:	fa5f fc83 	uxtb.w	ip, r3
 80240d6:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 80240da:	10fd      	asrs	r5, r7, #3
 80240dc:	00fb      	lsls	r3, r7, #3
 80240de:	fb00 f00c 	mul.w	r0, r0, ip
 80240e2:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 80240e6:	b2db      	uxtb	r3, r3
 80240e8:	fb05 f10c 	mul.w	r1, r5, ip
 80240ec:	1c45      	adds	r5, r0, #1
 80240ee:	fb03 f30c 	mul.w	r3, r3, ip
 80240f2:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 80240f6:	1215      	asrs	r5, r2, #8
 80240f8:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 80240fc:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 8024100:	1c4d      	adds	r5, r1, #1
 8024102:	eb05 2511 	add.w	r5, r5, r1, lsr #8
 8024106:	10d1      	asrs	r1, r2, #3
 8024108:	ea04 2000 	and.w	r0, r4, r0, lsl #8
 802410c:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 8024110:	00d2      	lsls	r2, r2, #3
 8024112:	eb01 2115 	add.w	r1, r1, r5, lsr #8
 8024116:	00c9      	lsls	r1, r1, #3
 8024118:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 802411c:	4308      	orrs	r0, r1
 802411e:	1c59      	adds	r1, r3, #1
 8024120:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 8024124:	b2d1      	uxtb	r1, r2
 8024126:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 802412a:	ea40 00d3 	orr.w	r0, r0, r3, lsr #3
 802412e:	f8ae 0000 	strh.w	r0, [lr]
 8024132:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8024134:	f10e 0e02 	add.w	lr, lr, #2
 8024138:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 802413a:	4413      	add	r3, r2
 802413c:	9a26      	ldr	r2, [sp, #152]	; 0x98
 802413e:	9325      	str	r3, [sp, #148]	; 0x94
 8024140:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8024142:	441a      	add	r2, r3
 8024144:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8024146:	3b01      	subs	r3, #1
 8024148:	9226      	str	r2, [sp, #152]	; 0x98
 802414a:	930f      	str	r3, [sp, #60]	; 0x3c
 802414c:	e627      	b.n	8023d9e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ea>
 802414e:	fb08 f000 	mul.w	r0, r8, r0
 8024152:	fb09 0303 	mla	r3, r9, r3, r0
 8024156:	e6e8      	b.n	8023f2a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x576>
 8024158:	46b9      	mov	r9, r7
 802415a:	e710      	b.n	8023f7e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5ca>
 802415c:	f1c2 0110 	rsb	r1, r2, #16
 8024160:	437a      	muls	r2, r7
 8024162:	fb09 2901 	mla	r9, r9, r1, r2
 8024166:	ea4f 0949 	mov.w	r9, r9, lsl #1
 802416a:	ea4f 5059 	mov.w	r0, r9, lsr #21
 802416e:	ea4f 1259 	mov.w	r2, r9, lsr #5
 8024172:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8024176:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 802417a:	4302      	orrs	r2, r0
 802417c:	e7a1      	b.n	80240c2 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70e>
 802417e:	f8ae 2000 	strh.w	r2, [lr]
 8024182:	e7d6      	b.n	8024132 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x77e>
 8024184:	b013      	add	sp, #76	; 0x4c
 8024186:	ecbd 8b08 	vpop	{d8-d11}
 802418a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802418e:	bf00      	nop
 8024190:	fffff800 	.word	0xfffff800

08024194 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh>:
 8024194:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8024198:	e9dd 4c09 	ldrd	r4, ip, [sp, #36]	; 0x24
 802419c:	f9bd a020 	ldrsh.w	sl, [sp, #32]
 80241a0:	fb0c 4e03 	mla	lr, ip, r3, r4
 80241a4:	f1bc 0f00 	cmp.w	ip, #0
 80241a8:	f89d 702c 	ldrb.w	r7, [sp, #44]	; 0x2c
 80241ac:	f89d 6030 	ldrb.w	r6, [sp, #48]	; 0x30
 80241b0:	eb02 084e 	add.w	r8, r2, lr, lsl #1
 80241b4:	f89d 5034 	ldrb.w	r5, [sp, #52]	; 0x34
 80241b8:	8808      	ldrh	r0, [r1, #0]
 80241ba:	db2f      	blt.n	802421c <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x88>
 80241bc:	45e2      	cmp	sl, ip
 80241be:	dd2d      	ble.n	802421c <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x88>
 80241c0:	2c00      	cmp	r4, #0
 80241c2:	db29      	blt.n	8024218 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x84>
 80241c4:	42a3      	cmp	r3, r4
 80241c6:	dd27      	ble.n	8024218 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x84>
 80241c8:	f832 901e 	ldrh.w	r9, [r2, lr, lsl #1]
 80241cc:	1c62      	adds	r2, r4, #1
 80241ce:	d428      	bmi.n	8024222 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x8e>
 80241d0:	4293      	cmp	r3, r2
 80241d2:	dd26      	ble.n	8024222 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x8e>
 80241d4:	b32f      	cbz	r7, 8024222 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x8e>
 80241d6:	f8b8 e002 	ldrh.w	lr, [r8, #2]
 80241da:	f11c 0c01 	adds.w	ip, ip, #1
 80241de:	d424      	bmi.n	802422a <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x96>
 80241e0:	45e2      	cmp	sl, ip
 80241e2:	dd22      	ble.n	802422a <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x96>
 80241e4:	2e00      	cmp	r6, #0
 80241e6:	f000 809c 	beq.w	8024322 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x18e>
 80241ea:	2c00      	cmp	r4, #0
 80241ec:	db1b      	blt.n	8024226 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x92>
 80241ee:	42a3      	cmp	r3, r4
 80241f0:	dd19      	ble.n	8024226 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x92>
 80241f2:	f838 c013 	ldrh.w	ip, [r8, r3, lsl #1]
 80241f6:	3401      	adds	r4, #1
 80241f8:	d41a      	bmi.n	8024230 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x9c>
 80241fa:	42a3      	cmp	r3, r4
 80241fc:	dd18      	ble.n	8024230 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x9c>
 80241fe:	b1cf      	cbz	r7, 8024234 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0xa0>
 8024200:	3301      	adds	r3, #1
 8024202:	f838 3013 	ldrh.w	r3, [r8, r3, lsl #1]
 8024206:	2f0f      	cmp	r7, #15
 8024208:	d915      	bls.n	8024236 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0xa2>
 802420a:	4b49      	ldr	r3, [pc, #292]	; (8024330 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x19c>)
 802420c:	f240 11ef 	movw	r1, #495	; 0x1ef
 8024210:	4a48      	ldr	r2, [pc, #288]	; (8024334 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x1a0>)
 8024212:	4849      	ldr	r0, [pc, #292]	; (8024338 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x1a4>)
 8024214:	f002 ff88 	bl	8027128 <__assert_func>
 8024218:	4681      	mov	r9, r0
 802421a:	e7d7      	b.n	80241cc <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x38>
 802421c:	4686      	mov	lr, r0
 802421e:	4681      	mov	r9, r0
 8024220:	e7db      	b.n	80241da <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x46>
 8024222:	4686      	mov	lr, r0
 8024224:	e7d9      	b.n	80241da <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x46>
 8024226:	4684      	mov	ip, r0
 8024228:	e7e5      	b.n	80241f6 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x62>
 802422a:	4603      	mov	r3, r0
 802422c:	4684      	mov	ip, r0
 802422e:	e7ea      	b.n	8024206 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x72>
 8024230:	4603      	mov	r3, r0
 8024232:	e7e8      	b.n	8024206 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x72>
 8024234:	4603      	mov	r3, r0
 8024236:	2e0f      	cmp	r6, #15
 8024238:	d8e7      	bhi.n	802420a <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x76>
 802423a:	fb17 f806 	smulbb	r8, r7, r6
 802423e:	ea4f 4409 	mov.w	r4, r9, lsl #16
 8024242:	ea4f 4a0e 	mov.w	sl, lr, lsl #16
 8024246:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 802424a:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
 802424e:	ea4f 08e8 	mov.w	r8, r8, asr #3
 8024252:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8024256:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 802425a:	ea44 0909 	orr.w	r9, r4, r9
 802425e:	f1c6 0410 	rsb	r4, r6, #16
 8024262:	041a      	lsls	r2, r3, #16
 8024264:	ea4a 0e0e 	orr.w	lr, sl, lr
 8024268:	1be4      	subs	r4, r4, r7
 802426a:	ebc8 0747 	rsb	r7, r8, r7, lsl #1
 802426e:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 8024272:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 8024276:	fb07 fe0e 	mul.w	lr, r7, lr
 802427a:	eb08 0444 	add.w	r4, r8, r4, lsl #1
 802427e:	4313      	orrs	r3, r2
 8024280:	ea4f 420c 	mov.w	r2, ip, lsl #16
 8024284:	fb04 e409 	mla	r4, r4, r9, lr
 8024288:	ebc8 0646 	rsb	r6, r8, r6, lsl #1
 802428c:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 8024290:	b2af      	uxth	r7, r5
 8024292:	fb08 4303 	mla	r3, r8, r3, r4
 8024296:	f42c 64fc 	bic.w	r4, ip, #2016	; 0x7e0
 802429a:	43ed      	mvns	r5, r5
 802429c:	4322      	orrs	r2, r4
 802429e:	b2ed      	uxtb	r5, r5
 80242a0:	fb06 3202 	mla	r2, r6, r2, r3
 80242a4:	10c6      	asrs	r6, r0, #3
 80242a6:	0d53      	lsrs	r3, r2, #21
 80242a8:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 80242ac:	0952      	lsrs	r2, r2, #5
 80242ae:	fb16 f605 	smulbb	r6, r6, r5
 80242b2:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80242b6:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 80242ba:	431a      	orrs	r2, r3
 80242bc:	b293      	uxth	r3, r2
 80242be:	1202      	asrs	r2, r0, #8
 80242c0:	ea4f 2c23 	mov.w	ip, r3, asr #8
 80242c4:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 80242c8:	00dc      	lsls	r4, r3, #3
 80242ca:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 80242ce:	fb12 f205 	smulbb	r2, r2, r5
 80242d2:	b2e4      	uxtb	r4, r4
 80242d4:	fb0c 2c07 	mla	ip, ip, r7, r2
 80242d8:	10da      	asrs	r2, r3, #3
 80242da:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 80242de:	fa1f fc8c 	uxth.w	ip, ip
 80242e2:	fb02 6207 	mla	r2, r2, r7, r6
 80242e6:	f10c 0301 	add.w	r3, ip, #1
 80242ea:	b296      	uxth	r6, r2
 80242ec:	00c2      	lsls	r2, r0, #3
 80242ee:	eb03 231c 	add.w	r3, r3, ip, lsr #8
 80242f2:	b2d2      	uxtb	r2, r2
 80242f4:	f403 4378 	and.w	r3, r3, #63488	; 0xf800
 80242f8:	fb12 f205 	smulbb	r2, r2, r5
 80242fc:	fb04 2207 	mla	r2, r4, r7, r2
 8024300:	b292      	uxth	r2, r2
 8024302:	1c50      	adds	r0, r2, #1
 8024304:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 8024308:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 802430c:	4313      	orrs	r3, r2
 802430e:	1c72      	adds	r2, r6, #1
 8024310:	eb02 2216 	add.w	r2, r2, r6, lsr #8
 8024314:	0952      	lsrs	r2, r2, #5
 8024316:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 802431a:	4313      	orrs	r3, r2
 802431c:	800b      	strh	r3, [r1, #0]
 802431e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8024322:	2f0f      	cmp	r7, #15
 8024324:	f63f af71 	bhi.w	802420a <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x76>
 8024328:	4603      	mov	r3, r0
 802432a:	4684      	mov	ip, r0
 802432c:	e785      	b.n	802423a <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0xa6>
 802432e:	bf00      	nop
 8024330:	0802b942 	.word	0x0802b942
 8024334:	0802bfae 	.word	0x0802bfae
 8024338:	0802ba2b 	.word	0x0802ba2b

0802433c <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 802433c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024340:	ed2d 8b08 	vpush	{d8-d11}
 8024344:	b093      	sub	sp, #76	; 0x4c
 8024346:	461d      	mov	r5, r3
 8024348:	eeb0 aa40 	vmov.f32	s20, s0
 802434c:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 802434e:	eef0 9a60 	vmov.f32	s19, s1
 8024352:	9210      	str	r2, [sp, #64]	; 0x40
 8024354:	eeb0 9a41 	vmov.f32	s18, s2
 8024358:	f89d 20b4 	ldrb.w	r2, [sp, #180]	; 0xb4
 802435c:	eeb0 8a62 	vmov.f32	s16, s5
 8024360:	910a      	str	r1, [sp, #40]	; 0x28
 8024362:	eef0 8a43 	vmov.f32	s17, s6
 8024366:	920b      	str	r2, [sp, #44]	; 0x2c
 8024368:	eef0 ba44 	vmov.f32	s23, s8
 802436c:	6859      	ldr	r1, [r3, #4]
 802436e:	eeb0 ba64 	vmov.f32	s22, s9
 8024372:	681b      	ldr	r3, [r3, #0]
 8024374:	eef0 aa45 	vmov.f32	s21, s10
 8024378:	9011      	str	r0, [sp, #68]	; 0x44
 802437a:	e9dd 272a 	ldrd	r2, r7, [sp, #168]	; 0xa8
 802437e:	e9dd 4625 	ldrd	r4, r6, [sp, #148]	; 0x94
 8024382:	fb01 2707 	mla	r7, r1, r7, r2
 8024386:	eb03 0347 	add.w	r3, r3, r7, lsl #1
 802438a:	9307      	str	r3, [sp, #28]
 802438c:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 802438e:	681b      	ldr	r3, [r3, #0]
 8024390:	9309      	str	r3, [sp, #36]	; 0x24
 8024392:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8024394:	43db      	mvns	r3, r3
 8024396:	b2db      	uxtb	r3, r3
 8024398:	9308      	str	r3, [sp, #32]
 802439a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802439c:	2b00      	cmp	r3, #0
 802439e:	dc03      	bgt.n	80243a8 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 80243a0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80243a2:	2b00      	cmp	r3, #0
 80243a4:	f340 8205 	ble.w	80247b2 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x476>
 80243a8:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80243aa:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80243ae:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80243b2:	1e48      	subs	r0, r1, #1
 80243b4:	f102 3cff 	add.w	ip, r2, #4294967295
 80243b8:	2d00      	cmp	r5, #0
 80243ba:	f340 80da 	ble.w	8024572 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x236>
 80243be:	ea5f 4e24 	movs.w	lr, r4, asr #16
 80243c2:	ea4f 4326 	mov.w	r3, r6, asr #16
 80243c6:	d406      	bmi.n	80243d6 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 80243c8:	4586      	cmp	lr, r0
 80243ca:	da04      	bge.n	80243d6 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 80243cc:	2b00      	cmp	r3, #0
 80243ce:	db02      	blt.n	80243d6 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 80243d0:	4563      	cmp	r3, ip
 80243d2:	f2c0 80cf 	blt.w	8024574 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x238>
 80243d6:	f11e 0e01 	adds.w	lr, lr, #1
 80243da:	f100 80c1 	bmi.w	8024560 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x224>
 80243de:	4571      	cmp	r1, lr
 80243e0:	f2c0 80be 	blt.w	8024560 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x224>
 80243e4:	3301      	adds	r3, #1
 80243e6:	f100 80bb 	bmi.w	8024560 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x224>
 80243ea:	429a      	cmp	r2, r3
 80243ec:	f2c0 80b8 	blt.w	8024560 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x224>
 80243f0:	46a9      	mov	r9, r5
 80243f2:	f8dd 801c 	ldr.w	r8, [sp, #28]
 80243f6:	f1b9 0f00 	cmp.w	r9, #0
 80243fa:	f340 80d8 	ble.w	80245ae <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x272>
 80243fe:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8024400:	1421      	asrs	r1, r4, #16
 8024402:	ea4f 4026 	mov.w	r0, r6, asr #16
 8024406:	f3c4 3203 	ubfx	r2, r4, #12, #4
 802440a:	f3c6 3c03 	ubfx	ip, r6, #12, #4
 802440e:	e9d3 e302 	ldrd	lr, r3, [r3, #8]
 8024412:	f100 8112 	bmi.w	802463a <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 8024416:	f10e 3aff 	add.w	sl, lr, #4294967295
 802441a:	4551      	cmp	r1, sl
 802441c:	f280 810d 	bge.w	802463a <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 8024420:	2800      	cmp	r0, #0
 8024422:	f2c0 810a 	blt.w	802463a <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 8024426:	f103 3aff 	add.w	sl, r3, #4294967295
 802442a:	4550      	cmp	r0, sl
 802442c:	f280 8105 	bge.w	802463a <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 8024430:	fa0f f38e 	sxth.w	r3, lr
 8024434:	fb00 1103 	mla	r1, r0, r3, r1
 8024438:	9809      	ldr	r0, [sp, #36]	; 0x24
 802443a:	eb00 0a41 	add.w	sl, r0, r1, lsl #1
 802443e:	f830 e011 	ldrh.w	lr, [r0, r1, lsl #1]
 8024442:	f8ba 1002 	ldrh.w	r1, [sl, #2]
 8024446:	f1bc 0f00 	cmp.w	ip, #0
 802444a:	d007      	beq.n	802445c <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x120>
 802444c:	005b      	lsls	r3, r3, #1
 802444e:	eb0a 0003 	add.w	r0, sl, r3
 8024452:	f83a 3003 	ldrh.w	r3, [sl, r3]
 8024456:	930c      	str	r3, [sp, #48]	; 0x30
 8024458:	8843      	ldrh	r3, [r0, #2]
 802445a:	930d      	str	r3, [sp, #52]	; 0x34
 802445c:	ea4f 400e 	mov.w	r0, lr, lsl #16
 8024460:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 8024464:	fb12 f30c 	smulbb	r3, r2, ip
 8024468:	ea4f 4a01 	mov.w	sl, r1, lsl #16
 802446c:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 8024470:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 8024474:	10db      	asrs	r3, r3, #3
 8024476:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 802447a:	ea40 000e 	orr.w	r0, r0, lr
 802447e:	f1cc 0e10 	rsb	lr, ip, #16
 8024482:	ea4a 0101 	orr.w	r1, sl, r1
 8024486:	9f08      	ldr	r7, [sp, #32]
 8024488:	ebae 0e02 	sub.w	lr, lr, r2
 802448c:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
 8024490:	eb03 0e4e 	add.w	lr, r3, lr, lsl #1
 8024494:	4351      	muls	r1, r2
 8024496:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8024498:	fb0e 1e00 	mla	lr, lr, r0, r1
 802449c:	990c      	ldr	r1, [sp, #48]	; 0x30
 802449e:	0410      	lsls	r0, r2, #16
 80244a0:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 80244a4:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 80244a8:	4310      	orrs	r0, r2
 80244aa:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80244ac:	0412      	lsls	r2, r2, #16
 80244ae:	fb03 e000 	mla	r0, r3, r0, lr
 80244b2:	f421 6efc 	bic.w	lr, r1, #2016	; 0x7e0
 80244b6:	ebc3 034c 	rsb	r3, r3, ip, lsl #1
 80244ba:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 80244be:	f8b8 c000 	ldrh.w	ip, [r8]
 80244c2:	ea42 020e 	orr.w	r2, r2, lr
 80244c6:	ea4f 212c 	mov.w	r1, ip, asr #8
 80244ca:	ea4f 0eec 	mov.w	lr, ip, asr #3
 80244ce:	fb03 0302 	mla	r3, r3, r2, r0
 80244d2:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 80244d6:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 80244da:	f00e 0efc 	and.w	lr, lr, #252	; 0xfc
 80244de:	fb11 f107 	smulbb	r1, r1, r7
 80244e2:	0d5a      	lsrs	r2, r3, #21
 80244e4:	095b      	lsrs	r3, r3, #5
 80244e6:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 80244ea:	fa5f fc8c 	uxtb.w	ip, ip
 80244ee:	fb1e fe07 	smulbb	lr, lr, r7
 80244f2:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 80244f6:	fb1c fc07 	smulbb	ip, ip, r7
 80244fa:	4313      	orrs	r3, r2
 80244fc:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
 8024500:	b29b      	uxth	r3, r3
 8024502:	1218      	asrs	r0, r3, #8
 8024504:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8024508:	fb00 1002 	mla	r0, r0, r2, r1
 802450c:	10d9      	asrs	r1, r3, #3
 802450e:	00db      	lsls	r3, r3, #3
 8024510:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 8024514:	b280      	uxth	r0, r0
 8024516:	b2db      	uxtb	r3, r3
 8024518:	fb01 e102 	mla	r1, r1, r2, lr
 802451c:	fb03 c202 	mla	r2, r3, r2, ip
 8024520:	1c43      	adds	r3, r0, #1
 8024522:	b289      	uxth	r1, r1
 8024524:	b292      	uxth	r2, r2
 8024526:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 802452a:	f102 0c01 	add.w	ip, r2, #1
 802452e:	f403 4378 	and.w	r3, r3, #63488	; 0xf800
 8024532:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 8024536:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 802453a:	4313      	orrs	r3, r2
 802453c:	1c4a      	adds	r2, r1, #1
 802453e:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 8024542:	0949      	lsrs	r1, r1, #5
 8024544:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8024548:	430b      	orrs	r3, r1
 802454a:	f8a8 3000 	strh.w	r3, [r8]
 802454e:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8024550:	f108 0802 	add.w	r8, r8, #2
 8024554:	f109 39ff 	add.w	r9, r9, #4294967295
 8024558:	441c      	add	r4, r3
 802455a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 802455c:	441e      	add	r6, r3
 802455e:	e74a      	b.n	80243f6 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xba>
 8024560:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8024562:	3d01      	subs	r5, #1
 8024564:	441c      	add	r4, r3
 8024566:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8024568:	441e      	add	r6, r3
 802456a:	9b07      	ldr	r3, [sp, #28]
 802456c:	3302      	adds	r3, #2
 802456e:	9307      	str	r3, [sp, #28]
 8024570:	e722      	b.n	80243b8 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8024572:	d022      	beq.n	80245ba <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 8024574:	1e6b      	subs	r3, r5, #1
 8024576:	9827      	ldr	r0, [sp, #156]	; 0x9c
 8024578:	fb00 4003 	mla	r0, r0, r3, r4
 802457c:	1400      	asrs	r0, r0, #16
 802457e:	f53f af37 	bmi.w	80243f0 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 8024582:	3901      	subs	r1, #1
 8024584:	4288      	cmp	r0, r1
 8024586:	f6bf af33 	bge.w	80243f0 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 802458a:	9928      	ldr	r1, [sp, #160]	; 0xa0
 802458c:	fb01 6303 	mla	r3, r1, r3, r6
 8024590:	141b      	asrs	r3, r3, #16
 8024592:	f53f af2d 	bmi.w	80243f0 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 8024596:	3a01      	subs	r2, #1
 8024598:	4293      	cmp	r3, r2
 802459a:	f6bf af29 	bge.w	80243f0 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 802459e:	46a8      	mov	r8, r5
 80245a0:	f8dd 901c 	ldr.w	r9, [sp, #28]
 80245a4:	f8bd a02c 	ldrh.w	sl, [sp, #44]	; 0x2c
 80245a8:	f1b8 0f00 	cmp.w	r8, #0
 80245ac:	dc60      	bgt.n	8024670 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x334>
 80245ae:	9b07      	ldr	r3, [sp, #28]
 80245b0:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 80245b4:	eb03 0345 	add.w	r3, r3, r5, lsl #1
 80245b8:	9307      	str	r3, [sp, #28]
 80245ba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80245bc:	2b00      	cmp	r3, #0
 80245be:	f340 80f8 	ble.w	80247b2 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x476>
 80245c2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80245c6:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80245c8:	ee3a aa2b 	vadd.f32	s20, s20, s23
 80245cc:	ee79 9a8b 	vadd.f32	s19, s19, s22
 80245d0:	eef0 6a48 	vmov.f32	s13, s16
 80245d4:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 80245d8:	ee39 9a2a 	vadd.f32	s18, s18, s21
 80245dc:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80245e0:	ee16 4a90 	vmov	r4, s13
 80245e4:	eef0 6a68 	vmov.f32	s13, s17
 80245e8:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80245ec:	ee16 6a90 	vmov	r6, s13
 80245f0:	ee29 7aa7 	vmul.f32	s14, s19, s15
 80245f4:	ee69 7a27 	vmul.f32	s15, s18, s15
 80245f8:	ee37 8a48 	vsub.f32	s16, s14, s16
 80245fc:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8024600:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8024604:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8024608:	ee18 2a10 	vmov	r2, s16
 802460c:	eeb0 8a47 	vmov.f32	s16, s14
 8024610:	fb92 f3f3 	sdiv	r3, r2, r3
 8024614:	ee18 2a90 	vmov	r2, s17
 8024618:	9327      	str	r3, [sp, #156]	; 0x9c
 802461a:	9b24      	ldr	r3, [sp, #144]	; 0x90
 802461c:	eef0 8a67 	vmov.f32	s17, s15
 8024620:	fb92 f3f3 	sdiv	r3, r2, r3
 8024624:	9328      	str	r3, [sp, #160]	; 0xa0
 8024626:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8024628:	9a10      	ldr	r2, [sp, #64]	; 0x40
 802462a:	3b01      	subs	r3, #1
 802462c:	930a      	str	r3, [sp, #40]	; 0x28
 802462e:	bf08      	it	eq
 8024630:	4615      	moveq	r5, r2
 8024632:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8024634:	bf18      	it	ne
 8024636:	461d      	movne	r5, r3
 8024638:	e6af      	b.n	802439a <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 802463a:	f111 0a01 	adds.w	sl, r1, #1
 802463e:	d486      	bmi.n	802454e <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x212>
 8024640:	45d6      	cmp	lr, sl
 8024642:	db84      	blt.n	802454e <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x212>
 8024644:	f110 0a01 	adds.w	sl, r0, #1
 8024648:	d481      	bmi.n	802454e <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x212>
 802464a:	4553      	cmp	r3, sl
 802464c:	f6ff af7f 	blt.w	802454e <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x212>
 8024650:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8024652:	b21b      	sxth	r3, r3
 8024654:	9101      	str	r1, [sp, #4]
 8024656:	4641      	mov	r1, r8
 8024658:	9300      	str	r3, [sp, #0]
 802465a:	fa0f f38e 	sxth.w	r3, lr
 802465e:	e9cd 0202 	strd	r0, r2, [sp, #8]
 8024662:	e9cd c704 	strd	ip, r7, [sp, #16]
 8024666:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8024668:	9811      	ldr	r0, [sp, #68]	; 0x44
 802466a:	f7ff fd93 	bl	8024194 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh>
 802466e:	e76e      	b.n	802454e <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x212>
 8024670:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8024672:	1430      	asrs	r0, r6, #16
 8024674:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8024676:	f3c6 3e03 	ubfx	lr, r6, #12, #4
 802467a:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 802467e:	1423      	asrs	r3, r4, #16
 8024680:	f3c4 3203 	ubfx	r2, r4, #12, #4
 8024684:	fb01 3000 	mla	r0, r1, r0, r3
 8024688:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802468a:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 802468e:	f837 c010 	ldrh.w	ip, [r7, r0, lsl #1]
 8024692:	8858      	ldrh	r0, [r3, #2]
 8024694:	f1be 0f00 	cmp.w	lr, #0
 8024698:	d00b      	beq.n	80246b2 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x376>
 802469a:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 802469e:	3901      	subs	r1, #1
 80246a0:	0049      	lsls	r1, r1, #1
 80246a2:	3102      	adds	r1, #2
 80246a4:	eb03 0b01 	add.w	fp, r3, r1
 80246a8:	5a5b      	ldrh	r3, [r3, r1]
 80246aa:	930e      	str	r3, [sp, #56]	; 0x38
 80246ac:	f8bb 3002 	ldrh.w	r3, [fp, #2]
 80246b0:	930f      	str	r3, [sp, #60]	; 0x3c
 80246b2:	ea4f 410c 	mov.w	r1, ip, lsl #16
 80246b6:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 80246ba:	fb12 f30e 	smulbb	r3, r2, lr
 80246be:	ea4f 4b00 	mov.w	fp, r0, lsl #16
 80246c2:	f001 61fc 	and.w	r1, r1, #132120576	; 0x7e00000
 80246c6:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 80246ca:	10db      	asrs	r3, r3, #3
 80246cc:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 80246d0:	ea41 010c 	orr.w	r1, r1, ip
 80246d4:	f1ce 0c10 	rsb	ip, lr, #16
 80246d8:	ea4b 0000 	orr.w	r0, fp, r0
 80246dc:	9f08      	ldr	r7, [sp, #32]
 80246de:	ebac 0c02 	sub.w	ip, ip, r2
 80246e2:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
 80246e6:	f108 38ff 	add.w	r8, r8, #4294967295
 80246ea:	4350      	muls	r0, r2
 80246ec:	eb03 0c4c 	add.w	ip, r3, ip, lsl #1
 80246f0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80246f2:	fb0c 0c01 	mla	ip, ip, r1, r0
 80246f6:	980e      	ldr	r0, [sp, #56]	; 0x38
 80246f8:	ea4f 4b02 	mov.w	fp, r2, lsl #16
 80246fc:	f422 61fc 	bic.w	r1, r2, #2016	; 0x7e0
 8024700:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8024702:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8024706:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 802470a:	0412      	lsls	r2, r2, #16
 802470c:	ea4b 0101 	orr.w	r1, fp, r1
 8024710:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 8024714:	fb03 c101 	mla	r1, r3, r1, ip
 8024718:	ebc3 034e 	rsb	r3, r3, lr, lsl #1
 802471c:	4302      	orrs	r2, r0
 802471e:	fb03 1202 	mla	r2, r3, r2, r1
 8024722:	ea4f 5b52 	mov.w	fp, r2, lsr #21
 8024726:	0952      	lsrs	r2, r2, #5
 8024728:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 802472c:	f422 63fc 	bic.w	r3, r2, #2016	; 0x7e0
 8024730:	f8b9 2000 	ldrh.w	r2, [r9]
 8024734:	ea4b 0303 	orr.w	r3, fp, r3
 8024738:	1211      	asrs	r1, r2, #8
 802473a:	ea4f 0ce2 	mov.w	ip, r2, asr #3
 802473e:	b29b      	uxth	r3, r3
 8024740:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 8024744:	00d2      	lsls	r2, r2, #3
 8024746:	f00c 0cfc 	and.w	ip, ip, #252	; 0xfc
 802474a:	fb11 f107 	smulbb	r1, r1, r7
 802474e:	1218      	asrs	r0, r3, #8
 8024750:	fb1c fc07 	smulbb	ip, ip, r7
 8024754:	b2d2      	uxtb	r2, r2
 8024756:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 802475a:	fb12 f207 	smulbb	r2, r2, r7
 802475e:	fb00 100a 	mla	r0, r0, sl, r1
 8024762:	10d9      	asrs	r1, r3, #3
 8024764:	00db      	lsls	r3, r3, #3
 8024766:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 802476a:	b280      	uxth	r0, r0
 802476c:	b2db      	uxtb	r3, r3
 802476e:	fb01 c10a 	mla	r1, r1, sl, ip
 8024772:	fb03 230a 	mla	r3, r3, sl, r2
 8024776:	1c42      	adds	r2, r0, #1
 8024778:	b289      	uxth	r1, r1
 802477a:	b29b      	uxth	r3, r3
 802477c:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8024780:	f101 0c01 	add.w	ip, r1, #1
 8024784:	1c5a      	adds	r2, r3, #1
 8024786:	eb0c 2c11 	add.w	ip, ip, r1, lsr #8
 802478a:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
 802478e:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8024792:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8024794:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 8024798:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 802479c:	441c      	add	r4, r3
 802479e:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 80247a2:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80247a4:	4310      	orrs	r0, r2
 80247a6:	441e      	add	r6, r3
 80247a8:	ea40 000c 	orr.w	r0, r0, ip
 80247ac:	f829 0b02 	strh.w	r0, [r9], #2
 80247b0:	e6fa      	b.n	80245a8 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26c>
 80247b2:	b013      	add	sp, #76	; 0x4c
 80247b4:	ecbd 8b08 	vpop	{d8-d11}
 80247b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080247bc <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh>:
 80247bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80247c0:	e9dd 5607 	ldrd	r5, r6, [sp, #28]
 80247c4:	f9bd 8018 	ldrsh.w	r8, [sp, #24]
 80247c8:	fb06 5c03 	mla	ip, r6, r3, r5
 80247cc:	2e00      	cmp	r6, #0
 80247ce:	f89d 4024 	ldrb.w	r4, [sp, #36]	; 0x24
 80247d2:	f89d 7028 	ldrb.w	r7, [sp, #40]	; 0x28
 80247d6:	eb02 0e4c 	add.w	lr, r2, ip, lsl #1
 80247da:	8808      	ldrh	r0, [r1, #0]
 80247dc:	db2e      	blt.n	802483c <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x80>
 80247de:	45b0      	cmp	r8, r6
 80247e0:	dd2c      	ble.n	802483c <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x80>
 80247e2:	2d00      	cmp	r5, #0
 80247e4:	db28      	blt.n	8024838 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x7c>
 80247e6:	42ab      	cmp	r3, r5
 80247e8:	dd26      	ble.n	8024838 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x7c>
 80247ea:	f832 c01c 	ldrh.w	ip, [r2, ip, lsl #1]
 80247ee:	1c6a      	adds	r2, r5, #1
 80247f0:	d427      	bmi.n	8024842 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x86>
 80247f2:	4293      	cmp	r3, r2
 80247f4:	dd25      	ble.n	8024842 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x86>
 80247f6:	b324      	cbz	r4, 8024842 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x86>
 80247f8:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80247fc:	3601      	adds	r6, #1
 80247fe:	d424      	bmi.n	802484a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x8e>
 8024800:	45b0      	cmp	r8, r6
 8024802:	dd22      	ble.n	802484a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x8e>
 8024804:	b31f      	cbz	r7, 802484e <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x92>
 8024806:	2d00      	cmp	r5, #0
 8024808:	db1d      	blt.n	8024846 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x8a>
 802480a:	42ab      	cmp	r3, r5
 802480c:	dd1b      	ble.n	8024846 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x8a>
 802480e:	f83e 6013 	ldrh.w	r6, [lr, r3, lsl #1]
 8024812:	3501      	adds	r5, #1
 8024814:	d405      	bmi.n	8024822 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x66>
 8024816:	42ab      	cmp	r3, r5
 8024818:	dd03      	ble.n	8024822 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x66>
 802481a:	b124      	cbz	r4, 8024826 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x6a>
 802481c:	3301      	adds	r3, #1
 802481e:	f83e 0013 	ldrh.w	r0, [lr, r3, lsl #1]
 8024822:	2c0f      	cmp	r4, #15
 8024824:	d801      	bhi.n	802482a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x6e>
 8024826:	2f0f      	cmp	r7, #15
 8024828:	d914      	bls.n	8024854 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x98>
 802482a:	4b27      	ldr	r3, [pc, #156]	; (80248c8 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x10c>)
 802482c:	f240 11ef 	movw	r1, #495	; 0x1ef
 8024830:	4a26      	ldr	r2, [pc, #152]	; (80248cc <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x110>)
 8024832:	4827      	ldr	r0, [pc, #156]	; (80248d0 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x114>)
 8024834:	f002 fc78 	bl	8027128 <__assert_func>
 8024838:	4684      	mov	ip, r0
 802483a:	e7d8      	b.n	80247ee <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x32>
 802483c:	4602      	mov	r2, r0
 802483e:	4684      	mov	ip, r0
 8024840:	e7dc      	b.n	80247fc <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x40>
 8024842:	4602      	mov	r2, r0
 8024844:	e7da      	b.n	80247fc <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x40>
 8024846:	4606      	mov	r6, r0
 8024848:	e7e3      	b.n	8024812 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x56>
 802484a:	4606      	mov	r6, r0
 802484c:	e7e9      	b.n	8024822 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x66>
 802484e:	2c0f      	cmp	r4, #15
 8024850:	d8eb      	bhi.n	802482a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x6e>
 8024852:	4606      	mov	r6, r0
 8024854:	fb14 f307 	smulbb	r3, r4, r7
 8024858:	ea4f 450c 	mov.w	r5, ip, lsl #16
 802485c:	ea4f 4e02 	mov.w	lr, r2, lsl #16
 8024860:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 8024864:	f005 65fc 	and.w	r5, r5, #132120576	; 0x7e00000
 8024868:	10db      	asrs	r3, r3, #3
 802486a:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
 802486e:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8024872:	ea45 0c0c 	orr.w	ip, r5, ip
 8024876:	f1c7 0510 	rsb	r5, r7, #16
 802487a:	ea4e 0202 	orr.w	r2, lr, r2
 802487e:	ebc3 0747 	rsb	r7, r3, r7, lsl #1
 8024882:	1b2d      	subs	r5, r5, r4
 8024884:	ebc3 0444 	rsb	r4, r3, r4, lsl #1
 8024888:	eb03 0545 	add.w	r5, r3, r5, lsl #1
 802488c:	4354      	muls	r4, r2
 802488e:	fb05 450c 	mla	r5, r5, ip, r4
 8024892:	0404      	lsls	r4, r0, #16
 8024894:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8024898:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
 802489c:	4320      	orrs	r0, r4
 802489e:	fb03 5400 	mla	r4, r3, r0, r5
 80248a2:	0430      	lsls	r0, r6, #16
 80248a4:	f426 66fc 	bic.w	r6, r6, #2016	; 0x7e0
 80248a8:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 80248ac:	4330      	orrs	r0, r6
 80248ae:	fb07 4000 	mla	r0, r7, r0, r4
 80248b2:	0d43      	lsrs	r3, r0, #21
 80248b4:	0940      	lsrs	r0, r0, #5
 80248b6:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80248ba:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 80248be:	4318      	orrs	r0, r3
 80248c0:	8008      	strh	r0, [r1, #0]
 80248c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80248c6:	bf00      	nop
 80248c8:	0802b942 	.word	0x0802b942
 80248cc:	0802bfae 	.word	0x0802bfae
 80248d0:	0802ba2b 	.word	0x0802ba2b

080248d4 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80248d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80248d8:	ed2d 8b08 	vpush	{d8-d11}
 80248dc:	b08f      	sub	sp, #60	; 0x3c
 80248de:	461d      	mov	r5, r3
 80248e0:	eeb0 aa40 	vmov.f32	s20, s0
 80248e4:	9b25      	ldr	r3, [sp, #148]	; 0x94
 80248e6:	eef0 9a60 	vmov.f32	s19, s1
 80248ea:	9107      	str	r1, [sp, #28]
 80248ec:	eeb0 9a41 	vmov.f32	s18, s2
 80248f0:	6859      	ldr	r1, [r3, #4]
 80248f2:	eeb0 8a62 	vmov.f32	s16, s5
 80248f6:	920c      	str	r2, [sp, #48]	; 0x30
 80248f8:	eef0 8a43 	vmov.f32	s17, s6
 80248fc:	681b      	ldr	r3, [r3, #0]
 80248fe:	eef0 ba44 	vmov.f32	s23, s8
 8024902:	eeb0 ba64 	vmov.f32	s22, s9
 8024906:	900d      	str	r0, [sp, #52]	; 0x34
 8024908:	eef0 aa45 	vmov.f32	s21, s10
 802490c:	e9dd 2726 	ldrd	r2, r7, [sp, #152]	; 0x98
 8024910:	e9dd 4621 	ldrd	r4, r6, [sp, #132]	; 0x84
 8024914:	fb01 2707 	mla	r7, r1, r7, r2
 8024918:	eb03 0747 	add.w	r7, r3, r7, lsl #1
 802491c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 802491e:	f8d3 8000 	ldr.w	r8, [r3]
 8024922:	9b07      	ldr	r3, [sp, #28]
 8024924:	2b00      	cmp	r3, #0
 8024926:	dc03      	bgt.n	8024930 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 8024928:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 802492a:	2b00      	cmp	r3, #0
 802492c:	f340 8182 	ble.w	8024c34 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x360>
 8024930:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8024932:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8024936:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 802493a:	1e48      	subs	r0, r1, #1
 802493c:	f102 3cff 	add.w	ip, r2, #4294967295
 8024940:	2d00      	cmp	r5, #0
 8024942:	f340 809b 	ble.w	8024a7c <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a8>
 8024946:	ea5f 4e24 	movs.w	lr, r4, asr #16
 802494a:	ea4f 4326 	mov.w	r3, r6, asr #16
 802494e:	d406      	bmi.n	802495e <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 8024950:	4586      	cmp	lr, r0
 8024952:	da04      	bge.n	802495e <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 8024954:	2b00      	cmp	r3, #0
 8024956:	db02      	blt.n	802495e <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 8024958:	4563      	cmp	r3, ip
 802495a:	f2c0 8090 	blt.w	8024a7e <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1aa>
 802495e:	f11e 0e01 	adds.w	lr, lr, #1
 8024962:	f100 8084 	bmi.w	8024a6e <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 8024966:	4571      	cmp	r1, lr
 8024968:	f2c0 8081 	blt.w	8024a6e <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 802496c:	3301      	adds	r3, #1
 802496e:	d47e      	bmi.n	8024a6e <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 8024970:	429a      	cmp	r2, r3
 8024972:	db7c      	blt.n	8024a6e <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 8024974:	46aa      	mov	sl, r5
 8024976:	46b9      	mov	r9, r7
 8024978:	f1ba 0f00 	cmp.w	sl, #0
 802497c:	f340 8099 	ble.w	8024ab2 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1de>
 8024980:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8024982:	1421      	asrs	r1, r4, #16
 8024984:	ea4f 4026 	mov.w	r0, r6, asr #16
 8024988:	f3c4 3203 	ubfx	r2, r4, #12, #4
 802498c:	f3c6 3c03 	ubfx	ip, r6, #12, #4
 8024990:	e9d3 e302 	ldrd	lr, r3, [r3, #8]
 8024994:	f100 80d1 	bmi.w	8024b3a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x266>
 8024998:	f10e 3bff 	add.w	fp, lr, #4294967295
 802499c:	4559      	cmp	r1, fp
 802499e:	f280 80cc 	bge.w	8024b3a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x266>
 80249a2:	2800      	cmp	r0, #0
 80249a4:	f2c0 80c9 	blt.w	8024b3a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x266>
 80249a8:	f103 3bff 	add.w	fp, r3, #4294967295
 80249ac:	4558      	cmp	r0, fp
 80249ae:	f280 80c4 	bge.w	8024b3a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x266>
 80249b2:	fa0f fe8e 	sxth.w	lr, lr
 80249b6:	fb00 110e 	mla	r1, r0, lr, r1
 80249ba:	eb08 0041 	add.w	r0, r8, r1, lsl #1
 80249be:	f838 b011 	ldrh.w	fp, [r8, r1, lsl #1]
 80249c2:	8841      	ldrh	r1, [r0, #2]
 80249c4:	f1bc 0f00 	cmp.w	ip, #0
 80249c8:	d00b      	beq.n	80249e2 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10e>
 80249ca:	f10e 4300 	add.w	r3, lr, #2147483648	; 0x80000000
 80249ce:	3b01      	subs	r3, #1
 80249d0:	005b      	lsls	r3, r3, #1
 80249d2:	3302      	adds	r3, #2
 80249d4:	eb00 0e03 	add.w	lr, r0, r3
 80249d8:	5ac3      	ldrh	r3, [r0, r3]
 80249da:	9308      	str	r3, [sp, #32]
 80249dc:	f8be 3002 	ldrh.w	r3, [lr, #2]
 80249e0:	9309      	str	r3, [sp, #36]	; 0x24
 80249e2:	ea4f 400b 	mov.w	r0, fp, lsl #16
 80249e6:	f42b 6bfc 	bic.w	fp, fp, #2016	; 0x7e0
 80249ea:	fb12 f30c 	smulbb	r3, r2, ip
 80249ee:	f1cc 0e10 	rsb	lr, ip, #16
 80249f2:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 80249f6:	10db      	asrs	r3, r3, #3
 80249f8:	ebae 0e02 	sub.w	lr, lr, r2
 80249fc:	ea40 000b 	orr.w	r0, r0, fp
 8024a00:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 8024a04:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 8024a08:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
 8024a0c:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8024a10:	eb03 0e4e 	add.w	lr, r3, lr, lsl #1
 8024a14:	ea4b 0101 	orr.w	r1, fp, r1
 8024a18:	4351      	muls	r1, r2
 8024a1a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8024a1c:	fb0e 1e00 	mla	lr, lr, r0, r1
 8024a20:	0410      	lsls	r0, r2, #16
 8024a22:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8024a26:	9908      	ldr	r1, [sp, #32]
 8024a28:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 8024a2c:	4310      	orrs	r0, r2
 8024a2e:	9a08      	ldr	r2, [sp, #32]
 8024a30:	0412      	lsls	r2, r2, #16
 8024a32:	fb03 e000 	mla	r0, r3, r0, lr
 8024a36:	f421 6efc 	bic.w	lr, r1, #2016	; 0x7e0
 8024a3a:	ebc3 034c 	rsb	r3, r3, ip, lsl #1
 8024a3e:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 8024a42:	ea42 020e 	orr.w	r2, r2, lr
 8024a46:	fb03 0302 	mla	r3, r3, r2, r0
 8024a4a:	0d5a      	lsrs	r2, r3, #21
 8024a4c:	095b      	lsrs	r3, r3, #5
 8024a4e:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8024a52:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 8024a56:	4313      	orrs	r3, r2
 8024a58:	f8a9 3000 	strh.w	r3, [r9]
 8024a5c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8024a5e:	f109 0902 	add.w	r9, r9, #2
 8024a62:	f10a 3aff 	add.w	sl, sl, #4294967295
 8024a66:	441c      	add	r4, r3
 8024a68:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8024a6a:	441e      	add	r6, r3
 8024a6c:	e784      	b.n	8024978 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa4>
 8024a6e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8024a70:	3d01      	subs	r5, #1
 8024a72:	3702      	adds	r7, #2
 8024a74:	441c      	add	r4, r3
 8024a76:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8024a78:	441e      	add	r6, r3
 8024a7a:	e761      	b.n	8024940 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 8024a7c:	d01d      	beq.n	8024aba <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 8024a7e:	1e6b      	subs	r3, r5, #1
 8024a80:	9823      	ldr	r0, [sp, #140]	; 0x8c
 8024a82:	fb00 4003 	mla	r0, r0, r3, r4
 8024a86:	1400      	asrs	r0, r0, #16
 8024a88:	f53f af74 	bmi.w	8024974 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 8024a8c:	3901      	subs	r1, #1
 8024a8e:	4288      	cmp	r0, r1
 8024a90:	f6bf af70 	bge.w	8024974 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 8024a94:	9924      	ldr	r1, [sp, #144]	; 0x90
 8024a96:	fb01 6303 	mla	r3, r1, r3, r6
 8024a9a:	141b      	asrs	r3, r3, #16
 8024a9c:	f53f af6a 	bmi.w	8024974 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 8024aa0:	3a01      	subs	r2, #1
 8024aa2:	4293      	cmp	r3, r2
 8024aa4:	f6bf af66 	bge.w	8024974 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 8024aa8:	46a9      	mov	r9, r5
 8024aaa:	46ba      	mov	sl, r7
 8024aac:	f1b9 0f00 	cmp.w	r9, #0
 8024ab0:	dc5b      	bgt.n	8024b6a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x296>
 8024ab2:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 8024ab6:	eb07 0745 	add.w	r7, r7, r5, lsl #1
 8024aba:	9b07      	ldr	r3, [sp, #28]
 8024abc:	2b00      	cmp	r3, #0
 8024abe:	f340 80b9 	ble.w	8024c34 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x360>
 8024ac2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8024ac6:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8024ac8:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8024acc:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8024ad0:	eef0 6a48 	vmov.f32	s13, s16
 8024ad4:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8024ad8:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8024adc:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8024ae0:	ee16 4a90 	vmov	r4, s13
 8024ae4:	eef0 6a68 	vmov.f32	s13, s17
 8024ae8:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8024aec:	ee16 6a90 	vmov	r6, s13
 8024af0:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8024af4:	ee69 7a27 	vmul.f32	s15, s18, s15
 8024af8:	ee37 8a48 	vsub.f32	s16, s14, s16
 8024afc:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8024b00:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8024b04:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8024b08:	ee18 2a10 	vmov	r2, s16
 8024b0c:	eeb0 8a47 	vmov.f32	s16, s14
 8024b10:	fb92 f3f3 	sdiv	r3, r2, r3
 8024b14:	ee18 2a90 	vmov	r2, s17
 8024b18:	9323      	str	r3, [sp, #140]	; 0x8c
 8024b1a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8024b1c:	eef0 8a67 	vmov.f32	s17, s15
 8024b20:	fb92 f3f3 	sdiv	r3, r2, r3
 8024b24:	9324      	str	r3, [sp, #144]	; 0x90
 8024b26:	9b07      	ldr	r3, [sp, #28]
 8024b28:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8024b2a:	3b01      	subs	r3, #1
 8024b2c:	9307      	str	r3, [sp, #28]
 8024b2e:	bf08      	it	eq
 8024b30:	4615      	moveq	r5, r2
 8024b32:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8024b34:	bf18      	it	ne
 8024b36:	461d      	movne	r5, r3
 8024b38:	e6f3      	b.n	8024922 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e>
 8024b3a:	f111 0b01 	adds.w	fp, r1, #1
 8024b3e:	d48d      	bmi.n	8024a5c <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x188>
 8024b40:	45de      	cmp	lr, fp
 8024b42:	db8b      	blt.n	8024a5c <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x188>
 8024b44:	f110 0b01 	adds.w	fp, r0, #1
 8024b48:	d488      	bmi.n	8024a5c <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x188>
 8024b4a:	455b      	cmp	r3, fp
 8024b4c:	db86      	blt.n	8024a5c <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x188>
 8024b4e:	b21b      	sxth	r3, r3
 8024b50:	e9cd 1001 	strd	r1, r0, [sp, #4]
 8024b54:	e9cd 2c03 	strd	r2, ip, [sp, #12]
 8024b58:	9300      	str	r3, [sp, #0]
 8024b5a:	4642      	mov	r2, r8
 8024b5c:	fa0f f38e 	sxth.w	r3, lr
 8024b60:	4649      	mov	r1, r9
 8024b62:	980d      	ldr	r0, [sp, #52]	; 0x34
 8024b64:	f7ff fe2a 	bl	80247bc <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh>
 8024b68:	e778      	b.n	8024a5c <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x188>
 8024b6a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8024b6c:	1420      	asrs	r0, r4, #16
 8024b6e:	1431      	asrs	r1, r6, #16
 8024b70:	f3c6 3e03 	ubfx	lr, r6, #12, #4
 8024b74:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8024b78:	f3c4 3203 	ubfx	r2, r4, #12, #4
 8024b7c:	fb03 0101 	mla	r1, r3, r1, r0
 8024b80:	eb08 0041 	add.w	r0, r8, r1, lsl #1
 8024b84:	f838 c011 	ldrh.w	ip, [r8, r1, lsl #1]
 8024b88:	8841      	ldrh	r1, [r0, #2]
 8024b8a:	f1be 0f00 	cmp.w	lr, #0
 8024b8e:	d00b      	beq.n	8024ba8 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d4>
 8024b90:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8024b94:	3b01      	subs	r3, #1
 8024b96:	005b      	lsls	r3, r3, #1
 8024b98:	3302      	adds	r3, #2
 8024b9a:	eb00 0b03 	add.w	fp, r0, r3
 8024b9e:	5ac3      	ldrh	r3, [r0, r3]
 8024ba0:	930a      	str	r3, [sp, #40]	; 0x28
 8024ba2:	f8bb 3002 	ldrh.w	r3, [fp, #2]
 8024ba6:	930b      	str	r3, [sp, #44]	; 0x2c
 8024ba8:	ea4f 400c 	mov.w	r0, ip, lsl #16
 8024bac:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 8024bb0:	fb12 f30e 	smulbb	r3, r2, lr
 8024bb4:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 8024bb8:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 8024bbc:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 8024bc0:	10db      	asrs	r3, r3, #3
 8024bc2:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8024bc6:	ea40 000c 	orr.w	r0, r0, ip
 8024bca:	f1ce 0c10 	rsb	ip, lr, #16
 8024bce:	ea4b 0101 	orr.w	r1, fp, r1
 8024bd2:	f109 39ff 	add.w	r9, r9, #4294967295
 8024bd6:	ebac 0c02 	sub.w	ip, ip, r2
 8024bda:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
 8024bde:	eb03 0c4c 	add.w	ip, r3, ip, lsl #1
 8024be2:	4351      	muls	r1, r2
 8024be4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8024be6:	fb0c 1c00 	mla	ip, ip, r0, r1
 8024bea:	990a      	ldr	r1, [sp, #40]	; 0x28
 8024bec:	ea4f 4b02 	mov.w	fp, r2, lsl #16
 8024bf0:	f422 60fc 	bic.w	r0, r2, #2016	; 0x7e0
 8024bf4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8024bf6:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8024bfa:	0412      	lsls	r2, r2, #16
 8024bfc:	ea4b 0000 	orr.w	r0, fp, r0
 8024c00:	f421 6bfc 	bic.w	fp, r1, #2016	; 0x7e0
 8024c04:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 8024c08:	fb03 c000 	mla	r0, r3, r0, ip
 8024c0c:	ebc3 034e 	rsb	r3, r3, lr, lsl #1
 8024c10:	ea42 0b0b 	orr.w	fp, r2, fp
 8024c14:	fb03 000b 	mla	r0, r3, fp, r0
 8024c18:	0d43      	lsrs	r3, r0, #21
 8024c1a:	0940      	lsrs	r0, r0, #5
 8024c1c:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8024c20:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8024c24:	4318      	orrs	r0, r3
 8024c26:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8024c28:	441c      	add	r4, r3
 8024c2a:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8024c2c:	f82a 0b02 	strh.w	r0, [sl], #2
 8024c30:	441e      	add	r6, r3
 8024c32:	e73b      	b.n	8024aac <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d8>
 8024c34:	b00f      	add	sp, #60	; 0x3c
 8024c36:	ecbd 8b08 	vpop	{d8-d11}
 8024c3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08024c40 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh>:
 8024c40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024c44:	880e      	ldrh	r6, [r1, #0]
 8024c46:	b085      	sub	sp, #20
 8024c48:	4690      	mov	r8, r2
 8024c4a:	ea4f 2c26 	mov.w	ip, r6, asr #8
 8024c4e:	f9bd e038 	ldrsh.w	lr, [sp, #56]	; 0x38
 8024c52:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
 8024c56:	f00c 02f8 	and.w	r2, ip, #248	; 0xf8
 8024c5a:	ea4f 0ce6 	mov.w	ip, r6, asr #3
 8024c5e:	00f6      	lsls	r6, r6, #3
 8024c60:	f89d 7048 	ldrb.w	r7, [sp, #72]	; 0x48
 8024c64:	9200      	str	r2, [sp, #0]
 8024c66:	f00c 02fc 	and.w	r2, ip, #252	; 0xfc
 8024c6a:	e9dd 540f 	ldrd	r5, r4, [sp, #60]	; 0x3c
 8024c6e:	9201      	str	r2, [sp, #4]
 8024c70:	b2f2      	uxtb	r2, r6
 8024c72:	2c00      	cmp	r4, #0
 8024c74:	fb04 5603 	mla	r6, r4, r3, r5
 8024c78:	9202      	str	r2, [sp, #8]
 8024c7a:	eb08 0c86 	add.w	ip, r8, r6, lsl #2
 8024c7e:	db36      	blt.n	8024cee <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xae>
 8024c80:	45a6      	cmp	lr, r4
 8024c82:	dd34      	ble.n	8024cee <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xae>
 8024c84:	2d00      	cmp	r5, #0
 8024c86:	db30      	blt.n	8024cea <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xaa>
 8024c88:	42ab      	cmp	r3, r5
 8024c8a:	dd2e      	ble.n	8024cea <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xaa>
 8024c8c:	f858 2026 	ldr.w	r2, [r8, r6, lsl #2]
 8024c90:	1c6e      	adds	r6, r5, #1
 8024c92:	d42f      	bmi.n	8024cf4 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xb4>
 8024c94:	42b3      	cmp	r3, r6
 8024c96:	dd2d      	ble.n	8024cf4 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xb4>
 8024c98:	b370      	cbz	r0, 8024cf8 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xb8>
 8024c9a:	f8dc 6004 	ldr.w	r6, [ip, #4]
 8024c9e:	3401      	adds	r4, #1
 8024ca0:	d42e      	bmi.n	8024d00 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xc0>
 8024ca2:	45a6      	cmp	lr, r4
 8024ca4:	dd2c      	ble.n	8024d00 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xc0>
 8024ca6:	b377      	cbz	r7, 8024d06 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xc6>
 8024ca8:	2d00      	cmp	r5, #0
 8024caa:	db27      	blt.n	8024cfc <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xbc>
 8024cac:	42ab      	cmp	r3, r5
 8024cae:	dd25      	ble.n	8024cfc <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xbc>
 8024cb0:	f85c 4023 	ldr.w	r4, [ip, r3, lsl #2]
 8024cb4:	3501      	adds	r5, #1
 8024cb6:	d429      	bmi.n	8024d0c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xcc>
 8024cb8:	42ab      	cmp	r3, r5
 8024cba:	dd27      	ble.n	8024d0c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xcc>
 8024cbc:	b340      	cbz	r0, 8024d10 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xd0>
 8024cbe:	3301      	adds	r3, #1
 8024cc0:	f85c 3023 	ldr.w	r3, [ip, r3, lsl #2]
 8024cc4:	280f      	cmp	r0, #15
 8024cc6:	ea4f 6b12 	mov.w	fp, r2, lsr #24
 8024cca:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 8024cce:	ea4f 6914 	mov.w	r9, r4, lsr #24
 8024cd2:	ea4f 6813 	mov.w	r8, r3, lsr #24
 8024cd6:	d801      	bhi.n	8024cdc <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x9c>
 8024cd8:	2f0f      	cmp	r7, #15
 8024cda:	d91b      	bls.n	8024d14 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xd4>
 8024cdc:	4b85      	ldr	r3, [pc, #532]	; (8024ef4 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x2b4>)
 8024cde:	f240 210d 	movw	r1, #525	; 0x20d
 8024ce2:	4a85      	ldr	r2, [pc, #532]	; (8024ef8 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x2b8>)
 8024ce4:	4885      	ldr	r0, [pc, #532]	; (8024efc <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x2bc>)
 8024ce6:	f002 fa1f 	bl	8027128 <__assert_func>
 8024cea:	2200      	movs	r2, #0
 8024cec:	e7d0      	b.n	8024c90 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x50>
 8024cee:	2600      	movs	r6, #0
 8024cf0:	4632      	mov	r2, r6
 8024cf2:	e7d4      	b.n	8024c9e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x5e>
 8024cf4:	2600      	movs	r6, #0
 8024cf6:	e7d2      	b.n	8024c9e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x5e>
 8024cf8:	4606      	mov	r6, r0
 8024cfa:	e7d0      	b.n	8024c9e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x5e>
 8024cfc:	2400      	movs	r4, #0
 8024cfe:	e7d9      	b.n	8024cb4 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x74>
 8024d00:	2300      	movs	r3, #0
 8024d02:	461c      	mov	r4, r3
 8024d04:	e7de      	b.n	8024cc4 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x84>
 8024d06:	463b      	mov	r3, r7
 8024d08:	463c      	mov	r4, r7
 8024d0a:	e7db      	b.n	8024cc4 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x84>
 8024d0c:	2300      	movs	r3, #0
 8024d0e:	e7d9      	b.n	8024cc4 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x84>
 8024d10:	4603      	mov	r3, r0
 8024d12:	e7d7      	b.n	8024cc4 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x84>
 8024d14:	b280      	uxth	r0, r0
 8024d16:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 8024d1a:	b2bf      	uxth	r7, r7
 8024d1c:	fb00 fe07 	mul.w	lr, r0, r7
 8024d20:	ea4f 1000 	mov.w	r0, r0, lsl #4
 8024d24:	ebce 1707 	rsb	r7, lr, r7, lsl #4
 8024d28:	eba0 0c0e 	sub.w	ip, r0, lr
 8024d2c:	f5c0 7580 	rsb	r5, r0, #256	; 0x100
 8024d30:	b2bf      	uxth	r7, r7
 8024d32:	fa1f fc8c 	uxth.w	ip, ip
 8024d36:	eba5 0507 	sub.w	r5, r5, r7
 8024d3a:	fb0c f00a 	mul.w	r0, ip, sl
 8024d3e:	b2ad      	uxth	r5, r5
 8024d40:	fb05 000b 	mla	r0, r5, fp, r0
 8024d44:	fb07 0009 	mla	r0, r7, r9, r0
 8024d48:	fb0e 0008 	mla	r0, lr, r8, r0
 8024d4c:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8024d50:	9003      	str	r0, [sp, #12]
 8024d52:	d018      	beq.n	8024d86 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x146>
 8024d54:	f002 10ff 	and.w	r0, r2, #16711935	; 0xff00ff
 8024d58:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8024d5c:	fb0b f000 	mul.w	r0, fp, r0
 8024d60:	fb0b fb02 	mul.w	fp, fp, r2
 8024d64:	0a02      	lsrs	r2, r0, #8
 8024d66:	f100 1001 	add.w	r0, r0, #65537	; 0x10001
 8024d6a:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8024d6e:	4402      	add	r2, r0
 8024d70:	f50b 7080 	add.w	r0, fp, #256	; 0x100
 8024d74:	eb00 201b 	add.w	r0, r0, fp, lsr #8
 8024d78:	0a12      	lsrs	r2, r2, #8
 8024d7a:	0a00      	lsrs	r0, r0, #8
 8024d7c:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8024d80:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8024d84:	4302      	orrs	r2, r0
 8024d86:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 8024d8a:	d019      	beq.n	8024dc0 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x180>
 8024d8c:	f006 1bff 	and.w	fp, r6, #16711935	; 0xff00ff
 8024d90:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8024d94:	fb0a fb0b 	mul.w	fp, sl, fp
 8024d98:	fb0a fa06 	mul.w	sl, sl, r6
 8024d9c:	ea4f 261b 	mov.w	r6, fp, lsr #8
 8024da0:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8024da4:	f50a 7080 	add.w	r0, sl, #256	; 0x100
 8024da8:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8024dac:	eb00 201a 	add.w	r0, r0, sl, lsr #8
 8024db0:	445e      	add	r6, fp
 8024db2:	0a00      	lsrs	r0, r0, #8
 8024db4:	0a36      	lsrs	r6, r6, #8
 8024db6:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8024dba:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8024dbe:	4306      	orrs	r6, r0
 8024dc0:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8024dc4:	d019      	beq.n	8024dfa <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x1ba>
 8024dc6:	f004 1aff 	and.w	sl, r4, #16711935	; 0xff00ff
 8024dca:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8024dce:	fb09 fa0a 	mul.w	sl, r9, sl
 8024dd2:	fb09 f904 	mul.w	r9, r9, r4
 8024dd6:	ea4f 241a 	mov.w	r4, sl, lsr #8
 8024dda:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8024dde:	f509 7080 	add.w	r0, r9, #256	; 0x100
 8024de2:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8024de6:	eb00 2019 	add.w	r0, r0, r9, lsr #8
 8024dea:	4454      	add	r4, sl
 8024dec:	0a00      	lsrs	r0, r0, #8
 8024dee:	0a24      	lsrs	r4, r4, #8
 8024df0:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8024df4:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8024df8:	4304      	orrs	r4, r0
 8024dfa:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8024dfe:	d019      	beq.n	8024e34 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x1f4>
 8024e00:	f003 19ff 	and.w	r9, r3, #16711935	; 0xff00ff
 8024e04:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8024e08:	fb08 f909 	mul.w	r9, r8, r9
 8024e0c:	fb08 f803 	mul.w	r8, r8, r3
 8024e10:	ea4f 2319 	mov.w	r3, r9, lsr #8
 8024e14:	f109 1901 	add.w	r9, r9, #65537	; 0x10001
 8024e18:	f508 7080 	add.w	r0, r8, #256	; 0x100
 8024e1c:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8024e20:	eb00 2018 	add.w	r0, r0, r8, lsr #8
 8024e24:	444b      	add	r3, r9
 8024e26:	0a00      	lsrs	r0, r0, #8
 8024e28:	0a1b      	lsrs	r3, r3, #8
 8024e2a:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8024e2e:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8024e32:	4303      	orrs	r3, r0
 8024e34:	f006 18ff 	and.w	r8, r6, #16711935	; 0xff00ff
 8024e38:	f002 10ff 	and.w	r0, r2, #16711935	; 0xff00ff
 8024e3c:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8024e40:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8024e44:	fb0c f808 	mul.w	r8, ip, r8
 8024e48:	fb0c f606 	mul.w	r6, ip, r6
 8024e4c:	fb05 8800 	mla	r8, r5, r0, r8
 8024e50:	f004 10ff 	and.w	r0, r4, #16711935	; 0xff00ff
 8024e54:	fb05 6202 	mla	r2, r5, r2, r6
 8024e58:	f89d 504c 	ldrb.w	r5, [sp, #76]	; 0x4c
 8024e5c:	fb07 8800 	mla	r8, r7, r0, r8
 8024e60:	f003 10ff 	and.w	r0, r3, #16711935	; 0xff00ff
 8024e64:	b2ad      	uxth	r5, r5
 8024e66:	fb0e 8000 	mla	r0, lr, r0, r8
 8024e6a:	0a00      	lsrs	r0, r0, #8
 8024e6c:	f000 18ff 	and.w	r8, r0, #16711935	; 0xff00ff
 8024e70:	f404 407f 	and.w	r0, r4, #65280	; 0xff00
 8024e74:	9c00      	ldr	r4, [sp, #0]
 8024e76:	fb07 2700 	mla	r7, r7, r0, r2
 8024e7a:	f403 407f 	and.w	r0, r3, #65280	; 0xff00
 8024e7e:	9b03      	ldr	r3, [sp, #12]
 8024e80:	fb0e 7000 	mla	r0, lr, r0, r7
 8024e84:	436b      	muls	r3, r5
 8024e86:	0a00      	lsrs	r0, r0, #8
 8024e88:	1c5a      	adds	r2, r3, #1
 8024e8a:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8024e8e:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8024e92:	ea48 0000 	orr.w	r0, r8, r0
 8024e96:	ea6f 2212 	mvn.w	r2, r2, lsr #8
 8024e9a:	0c03      	lsrs	r3, r0, #16
 8024e9c:	b2d2      	uxtb	r2, r2
 8024e9e:	fb14 f602 	smulbb	r6, r4, r2
 8024ea2:	f3c0 2407 	ubfx	r4, r0, #8, #8
 8024ea6:	b2c0      	uxtb	r0, r0
 8024ea8:	fb03 6305 	mla	r3, r3, r5, r6
 8024eac:	b29e      	uxth	r6, r3
 8024eae:	9b01      	ldr	r3, [sp, #4]
 8024eb0:	fb13 f302 	smulbb	r3, r3, r2
 8024eb4:	fb04 3405 	mla	r4, r4, r5, r3
 8024eb8:	9b02      	ldr	r3, [sp, #8]
 8024eba:	fb13 f202 	smulbb	r2, r3, r2
 8024ebe:	b2a4      	uxth	r4, r4
 8024ec0:	1c73      	adds	r3, r6, #1
 8024ec2:	fb00 2005 	mla	r0, r0, r5, r2
 8024ec6:	eb03 2316 	add.w	r3, r3, r6, lsr #8
 8024eca:	b280      	uxth	r0, r0
 8024ecc:	f403 4378 	and.w	r3, r3, #63488	; 0xf800
 8024ed0:	1c42      	adds	r2, r0, #1
 8024ed2:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8024ed6:	1c62      	adds	r2, r4, #1
 8024ed8:	eb02 2214 	add.w	r2, r2, r4, lsr #8
 8024edc:	f3c0 20c4 	ubfx	r0, r0, #11, #5
 8024ee0:	0952      	lsrs	r2, r2, #5
 8024ee2:	4303      	orrs	r3, r0
 8024ee4:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8024ee8:	4313      	orrs	r3, r2
 8024eea:	800b      	strh	r3, [r1, #0]
 8024eec:	b005      	add	sp, #20
 8024eee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8024ef2:	bf00      	nop
 8024ef4:	0802b942 	.word	0x0802b942
 8024ef8:	0802bf05 	.word	0x0802bf05
 8024efc:	0802ba2b 	.word	0x0802ba2b

08024f00 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8024f00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024f04:	ed2d 8b08 	vpush	{d8-d11}
 8024f08:	b09d      	sub	sp, #116	; 0x74
 8024f0a:	eeb0 aa40 	vmov.f32	s20, s0
 8024f0e:	eef0 9a60 	vmov.f32	s19, s1
 8024f12:	9219      	str	r2, [sp, #100]	; 0x64
 8024f14:	eeb0 9a41 	vmov.f32	s18, s2
 8024f18:	9a33      	ldr	r2, [sp, #204]	; 0xcc
 8024f1a:	eeb0 8a62 	vmov.f32	s16, s5
 8024f1e:	9307      	str	r3, [sp, #28]
 8024f20:	eef0 8a43 	vmov.f32	s17, s6
 8024f24:	f89d 30dc 	ldrb.w	r3, [sp, #220]	; 0xdc
 8024f28:	eef0 ba44 	vmov.f32	s23, s8
 8024f2c:	901b      	str	r0, [sp, #108]	; 0x6c
 8024f2e:	eeb0 ba64 	vmov.f32	s22, s9
 8024f32:	931a      	str	r3, [sp, #104]	; 0x68
 8024f34:	eef0 aa45 	vmov.f32	s21, s10
 8024f38:	6850      	ldr	r0, [r2, #4]
 8024f3a:	9117      	str	r1, [sp, #92]	; 0x5c
 8024f3c:	6812      	ldr	r2, [r2, #0]
 8024f3e:	e9dd 1334 	ldrd	r1, r3, [sp, #208]	; 0xd0
 8024f42:	e9dd 462f 	ldrd	r4, r6, [sp, #188]	; 0xbc
 8024f46:	fb00 1303 	mla	r3, r0, r3, r1
 8024f4a:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8024f4e:	930a      	str	r3, [sp, #40]	; 0x28
 8024f50:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 8024f52:	681b      	ldr	r3, [r3, #0]
 8024f54:	9310      	str	r3, [sp, #64]	; 0x40
 8024f56:	f8bd 3068 	ldrh.w	r3, [sp, #104]	; 0x68
 8024f5a:	930b      	str	r3, [sp, #44]	; 0x2c
 8024f5c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8024f5e:	2b00      	cmp	r3, #0
 8024f60:	dc03      	bgt.n	8024f6a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 8024f62:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8024f64:	2b00      	cmp	r3, #0
 8024f66:	f340 837b 	ble.w	8025660 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x760>
 8024f6a:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 8024f6c:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8024f70:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8024f74:	1e48      	subs	r0, r1, #1
 8024f76:	1e57      	subs	r7, r2, #1
 8024f78:	9b07      	ldr	r3, [sp, #28]
 8024f7a:	2b00      	cmp	r3, #0
 8024f7c:	f340 8194 	ble.w	80252a8 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a8>
 8024f80:	ea5f 4c24 	movs.w	ip, r4, asr #16
 8024f84:	ea4f 4326 	mov.w	r3, r6, asr #16
 8024f88:	d406      	bmi.n	8024f98 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 8024f8a:	4584      	cmp	ip, r0
 8024f8c:	da04      	bge.n	8024f98 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 8024f8e:	2b00      	cmp	r3, #0
 8024f90:	db02      	blt.n	8024f98 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 8024f92:	42bb      	cmp	r3, r7
 8024f94:	f2c0 8189 	blt.w	80252aa <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3aa>
 8024f98:	f11c 0c01 	adds.w	ip, ip, #1
 8024f9c:	f100 8179 	bmi.w	8025292 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x392>
 8024fa0:	4561      	cmp	r1, ip
 8024fa2:	f2c0 8176 	blt.w	8025292 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x392>
 8024fa6:	3301      	adds	r3, #1
 8024fa8:	f100 8173 	bmi.w	8025292 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x392>
 8024fac:	429a      	cmp	r2, r3
 8024fae:	f2c0 8170 	blt.w	8025292 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x392>
 8024fb2:	9b07      	ldr	r3, [sp, #28]
 8024fb4:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8024fb6:	9318      	str	r3, [sp, #96]	; 0x60
 8024fb8:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8024fba:	2b00      	cmp	r3, #0
 8024fbc:	f340 8192 	ble.w	80252e4 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e4>
 8024fc0:	9a36      	ldr	r2, [sp, #216]	; 0xd8
 8024fc2:	ea4f 4c26 	mov.w	ip, r6, asr #16
 8024fc6:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 8024fc8:	f3c4 3003 	ubfx	r0, r4, #12, #4
 8024fcc:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 8024fd0:	1422      	asrs	r2, r4, #16
 8024fd2:	f3c6 3103 	ubfx	r1, r6, #12, #4
 8024fd6:	689b      	ldr	r3, [r3, #8]
 8024fd8:	f100 81d3 	bmi.w	8025382 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x482>
 8024fdc:	f103 38ff 	add.w	r8, r3, #4294967295
 8024fe0:	4542      	cmp	r2, r8
 8024fe2:	f280 81ce 	bge.w	8025382 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x482>
 8024fe6:	f1bc 0f00 	cmp.w	ip, #0
 8024fea:	f2c0 81ca 	blt.w	8025382 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x482>
 8024fee:	f10e 38ff 	add.w	r8, lr, #4294967295
 8024ff2:	45c4      	cmp	ip, r8
 8024ff4:	f280 81c5 	bge.w	8025382 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x482>
 8024ff8:	b21b      	sxth	r3, r3
 8024ffa:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8024ffc:	fb0c 2203 	mla	r2, ip, r3, r2
 8025000:	eb05 0882 	add.w	r8, r5, r2, lsl #2
 8025004:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 8025008:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 802500c:	2800      	cmp	r0, #0
 802500e:	f000 81af 	beq.w	8025370 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x470>
 8025012:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8025016:	950c      	str	r5, [sp, #48]	; 0x30
 8025018:	0e2d      	lsrs	r5, r5, #24
 802501a:	9513      	str	r5, [sp, #76]	; 0x4c
 802501c:	b181      	cbz	r1, 8025040 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x140>
 802501e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8025022:	3b01      	subs	r3, #1
 8025024:	009b      	lsls	r3, r3, #2
 8025026:	3304      	adds	r3, #4
 8025028:	eb08 0c03 	add.w	ip, r8, r3
 802502c:	f858 3003 	ldr.w	r3, [r8, r3]
 8025030:	9308      	str	r3, [sp, #32]
 8025032:	0e1b      	lsrs	r3, r3, #24
 8025034:	9311      	str	r3, [sp, #68]	; 0x44
 8025036:	f8dc 3004 	ldr.w	r3, [ip, #4]
 802503a:	930d      	str	r3, [sp, #52]	; 0x34
 802503c:	0e1b      	lsrs	r3, r3, #24
 802503e:	9314      	str	r3, [sp, #80]	; 0x50
 8025040:	b280      	uxth	r0, r0
 8025042:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8025044:	b289      	uxth	r1, r1
 8025046:	fb00 f901 	mul.w	r9, r0, r1
 802504a:	0100      	lsls	r0, r0, #4
 802504c:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 8025050:	eba0 0809 	sub.w	r8, r0, r9
 8025054:	f5c0 7380 	rsb	r3, r0, #256	; 0x100
 8025058:	9813      	ldr	r0, [sp, #76]	; 0x4c
 802505a:	b289      	uxth	r1, r1
 802505c:	fa1f f888 	uxth.w	r8, r8
 8025060:	1a5b      	subs	r3, r3, r1
 8025062:	fb08 f000 	mul.w	r0, r8, r0
 8025066:	b29b      	uxth	r3, r3
 8025068:	fb03 000e 	mla	r0, r3, lr, r0
 802506c:	fb01 0005 	mla	r0, r1, r5, r0
 8025070:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8025072:	fb09 0005 	mla	r0, r9, r5, r0
 8025076:	f3c0 2007 	ubfx	r0, r0, #8, #8
 802507a:	2800      	cmp	r0, #0
 802507c:	f000 8100 	beq.w	8025280 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x380>
 8025080:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8025084:	d01b      	beq.n	80250be <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1be>
 8025086:	f002 1aff 	and.w	sl, r2, #16711935	; 0xff00ff
 802508a:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 802508e:	fb0e fa0a 	mul.w	sl, lr, sl
 8025092:	fb0e fe02 	mul.w	lr, lr, r2
 8025096:	ea4f 221a 	mov.w	r2, sl, lsr #8
 802509a:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 802509e:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 80250a2:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 80250a6:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 80250aa:	4452      	add	r2, sl
 80250ac:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80250b0:	0a12      	lsrs	r2, r2, #8
 80250b2:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 80250b6:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 80250ba:	ea42 020c 	orr.w	r2, r2, ip
 80250be:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 80250c0:	2dff      	cmp	r5, #255	; 0xff
 80250c2:	d021      	beq.n	8025108 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 80250c4:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80250c6:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 80250ca:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 80250cc:	fb05 fb0b 	mul.w	fp, r5, fp
 80250d0:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80250d2:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 80250d6:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 80250d8:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 80250dc:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 80250e0:	fb05 fa0a 	mul.w	sl, r5, sl
 80250e4:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80250e8:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 80250ec:	44de      	add	lr, fp
 80250ee:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 80250f2:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80250f6:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80250fa:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80250fe:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8025102:	ea4e 050a 	orr.w	r5, lr, sl
 8025106:	950c      	str	r5, [sp, #48]	; 0x30
 8025108:	9d11      	ldr	r5, [sp, #68]	; 0x44
 802510a:	2dff      	cmp	r5, #255	; 0xff
 802510c:	d021      	beq.n	8025152 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x252>
 802510e:	9d08      	ldr	r5, [sp, #32]
 8025110:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 8025114:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8025116:	fb05 fb0b 	mul.w	fp, r5, fp
 802511a:	9d08      	ldr	r5, [sp, #32]
 802511c:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 8025120:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8025122:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8025126:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 802512a:	fb05 fa0a 	mul.w	sl, r5, sl
 802512e:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8025132:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8025136:	44de      	add	lr, fp
 8025138:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 802513c:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8025140:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8025144:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8025148:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 802514c:	ea4e 050a 	orr.w	r5, lr, sl
 8025150:	9508      	str	r5, [sp, #32]
 8025152:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8025154:	2dff      	cmp	r5, #255	; 0xff
 8025156:	d021      	beq.n	802519c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29c>
 8025158:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 802515a:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 802515e:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8025160:	fb05 fb0b 	mul.w	fp, r5, fp
 8025164:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8025166:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 802516a:	9d14      	ldr	r5, [sp, #80]	; 0x50
 802516c:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8025170:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8025174:	fb05 fa0a 	mul.w	sl, r5, sl
 8025178:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802517c:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8025180:	44de      	add	lr, fp
 8025182:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8025186:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802518a:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802518e:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8025192:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8025196:	ea4e 050a 	orr.w	r5, lr, sl
 802519a:	950d      	str	r5, [sp, #52]	; 0x34
 802519c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 802519e:	f002 1eff 	and.w	lr, r2, #16711935	; 0xff00ff
 80251a2:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 80251a6:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 80251aa:	9d08      	ldr	r5, [sp, #32]
 80251ac:	fb08 fc0c 	mul.w	ip, r8, ip
 80251b0:	fb03 cc0e 	mla	ip, r3, lr, ip
 80251b4:	f005 1eff 	and.w	lr, r5, #16711935	; 0xff00ff
 80251b8:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80251ba:	fb01 cc0e 	mla	ip, r1, lr, ip
 80251be:	f005 1eff 	and.w	lr, r5, #16711935	; 0xff00ff
 80251c2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80251c4:	fb09 cc0e 	mla	ip, r9, lr, ip
 80251c8:	f405 4e7f 	and.w	lr, r5, #65280	; 0xff00
 80251cc:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80251ce:	fb08 f80e 	mul.w	r8, r8, lr
 80251d2:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80251d6:	f8b7 e000 	ldrh.w	lr, [r7]
 80251da:	fb03 8202 	mla	r2, r3, r2, r8
 80251de:	9b08      	ldr	r3, [sp, #32]
 80251e0:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80251e4:	f403 4a7f 	and.w	sl, r3, #65280	; 0xff00
 80251e8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80251ea:	fb01 220a 	mla	r2, r1, sl, r2
 80251ee:	f403 417f 	and.w	r1, r3, #65280	; 0xff00
 80251f2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80251f4:	fb09 2901 	mla	r9, r9, r1, r2
 80251f8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80251fa:	4343      	muls	r3, r0
 80251fc:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8025200:	1c58      	adds	r0, r3, #1
 8025202:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 8025206:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 802520a:	ea4c 0c09 	orr.w	ip, ip, r9
 802520e:	ea4f 232e 	mov.w	r3, lr, asr #8
 8025212:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 8025216:	ea4f 411c 	mov.w	r1, ip, lsr #16
 802521a:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 802521e:	b2c0      	uxtb	r0, r0
 8025220:	fb11 f102 	smulbb	r1, r1, r2
 8025224:	ea4f 02ee 	mov.w	r2, lr, asr #3
 8025228:	fb03 1300 	mla	r3, r3, r0, r1
 802522c:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 8025230:	b299      	uxth	r1, r3
 8025232:	f3cc 2307 	ubfx	r3, ip, #8, #8
 8025236:	fa5f fc8c 	uxtb.w	ip, ip
 802523a:	fb13 f305 	smulbb	r3, r3, r5
 802523e:	fb1c fc05 	smulbb	ip, ip, r5
 8025242:	fb02 3200 	mla	r2, r2, r0, r3
 8025246:	ea4f 03ce 	mov.w	r3, lr, lsl #3
 802524a:	b2db      	uxtb	r3, r3
 802524c:	b292      	uxth	r2, r2
 802524e:	fb03 cc00 	mla	ip, r3, r0, ip
 8025252:	1c4b      	adds	r3, r1, #1
 8025254:	fa1f fc8c 	uxth.w	ip, ip
 8025258:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 802525c:	1c51      	adds	r1, r2, #1
 802525e:	f10c 0001 	add.w	r0, ip, #1
 8025262:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 8025266:	f403 4378 	and.w	r3, r3, #63488	; 0xf800
 802526a:	eb00 2c1c 	add.w	ip, r0, ip, lsr #8
 802526e:	0952      	lsrs	r2, r2, #5
 8025270:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 8025274:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8025278:	ea43 030c 	orr.w	r3, r3, ip
 802527c:	4313      	orrs	r3, r2
 802527e:	803b      	strh	r3, [r7, #0]
 8025280:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 8025282:	3702      	adds	r7, #2
 8025284:	441c      	add	r4, r3
 8025286:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 8025288:	441e      	add	r6, r3
 802528a:	9b18      	ldr	r3, [sp, #96]	; 0x60
 802528c:	3b01      	subs	r3, #1
 802528e:	9318      	str	r3, [sp, #96]	; 0x60
 8025290:	e692      	b.n	8024fb8 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb8>
 8025292:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 8025294:	441c      	add	r4, r3
 8025296:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 8025298:	441e      	add	r6, r3
 802529a:	9b07      	ldr	r3, [sp, #28]
 802529c:	3b01      	subs	r3, #1
 802529e:	9307      	str	r3, [sp, #28]
 80252a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80252a2:	3302      	adds	r3, #2
 80252a4:	930a      	str	r3, [sp, #40]	; 0x28
 80252a6:	e667      	b.n	8024f78 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 80252a8:	d023      	beq.n	80252f2 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f2>
 80252aa:	9b07      	ldr	r3, [sp, #28]
 80252ac:	9831      	ldr	r0, [sp, #196]	; 0xc4
 80252ae:	3b01      	subs	r3, #1
 80252b0:	fb00 4003 	mla	r0, r0, r3, r4
 80252b4:	1400      	asrs	r0, r0, #16
 80252b6:	f53f ae7c 	bmi.w	8024fb2 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 80252ba:	3901      	subs	r1, #1
 80252bc:	4288      	cmp	r0, r1
 80252be:	f6bf ae78 	bge.w	8024fb2 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 80252c2:	9932      	ldr	r1, [sp, #200]	; 0xc8
 80252c4:	fb01 6303 	mla	r3, r1, r3, r6
 80252c8:	141b      	asrs	r3, r3, #16
 80252ca:	f53f ae72 	bmi.w	8024fb2 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 80252ce:	3a01      	subs	r2, #1
 80252d0:	4293      	cmp	r3, r2
 80252d2:	f6bf ae6e 	bge.w	8024fb2 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 80252d6:	f8dd b01c 	ldr.w	fp, [sp, #28]
 80252da:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
 80252de:	f1bb 0f00 	cmp.w	fp, #0
 80252e2:	dc6c      	bgt.n	80253be <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4be>
 80252e4:	9b07      	ldr	r3, [sp, #28]
 80252e6:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 80252ea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80252ec:	eb03 0345 	add.w	r3, r3, r5, lsl #1
 80252f0:	930a      	str	r3, [sp, #40]	; 0x28
 80252f2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80252f4:	2b00      	cmp	r3, #0
 80252f6:	f340 81b3 	ble.w	8025660 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x760>
 80252fa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80252fe:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8025300:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8025304:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8025308:	eef0 6a48 	vmov.f32	s13, s16
 802530c:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8025310:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8025314:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8025318:	ee16 4a90 	vmov	r4, s13
 802531c:	eef0 6a68 	vmov.f32	s13, s17
 8025320:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8025324:	ee16 6a90 	vmov	r6, s13
 8025328:	ee29 7aa7 	vmul.f32	s14, s19, s15
 802532c:	ee69 7a27 	vmul.f32	s15, s18, s15
 8025330:	ee37 8a48 	vsub.f32	s16, s14, s16
 8025334:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8025338:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 802533c:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8025340:	ee18 2a10 	vmov	r2, s16
 8025344:	eeb0 8a47 	vmov.f32	s16, s14
 8025348:	fb92 f3f3 	sdiv	r3, r2, r3
 802534c:	ee18 2a90 	vmov	r2, s17
 8025350:	9331      	str	r3, [sp, #196]	; 0xc4
 8025352:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8025354:	eef0 8a67 	vmov.f32	s17, s15
 8025358:	fb92 f3f3 	sdiv	r3, r2, r3
 802535c:	9332      	str	r3, [sp, #200]	; 0xc8
 802535e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8025360:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8025362:	3b01      	subs	r3, #1
 8025364:	9317      	str	r3, [sp, #92]	; 0x5c
 8025366:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8025368:	bf08      	it	eq
 802536a:	4613      	moveq	r3, r2
 802536c:	9307      	str	r3, [sp, #28]
 802536e:	e5f5      	b.n	8024f5c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 8025370:	2900      	cmp	r1, #0
 8025372:	f43f ae65 	beq.w	8025040 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x140>
 8025376:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
 802537a:	9308      	str	r3, [sp, #32]
 802537c:	0e1b      	lsrs	r3, r3, #24
 802537e:	9311      	str	r3, [sp, #68]	; 0x44
 8025380:	e65e      	b.n	8025040 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x140>
 8025382:	f112 0801 	adds.w	r8, r2, #1
 8025386:	f53f af7b 	bmi.w	8025280 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x380>
 802538a:	4543      	cmp	r3, r8
 802538c:	f6ff af78 	blt.w	8025280 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x380>
 8025390:	f11c 0801 	adds.w	r8, ip, #1
 8025394:	f53f af74 	bmi.w	8025280 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x380>
 8025398:	45c6      	cmp	lr, r8
 802539a:	f6ff af71 	blt.w	8025280 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x380>
 802539e:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 80253a0:	b21b      	sxth	r3, r3
 80253a2:	9201      	str	r2, [sp, #4]
 80253a4:	fa0f f28e 	sxth.w	r2, lr
 80253a8:	e9cd 1504 	strd	r1, r5, [sp, #16]
 80253ac:	e9cd c002 	strd	ip, r0, [sp, #8]
 80253b0:	9200      	str	r2, [sp, #0]
 80253b2:	4639      	mov	r1, r7
 80253b4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80253b6:	981b      	ldr	r0, [sp, #108]	; 0x6c
 80253b8:	f7ff fc42 	bl	8024c40 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh>
 80253bc:	e760      	b.n	8025280 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x380>
 80253be:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 80253c0:	1427      	asrs	r7, r4, #16
 80253c2:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80253c4:	f3c4 3203 	ubfx	r2, r4, #12, #4
 80253c8:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80253cc:	1433      	asrs	r3, r6, #16
 80253ce:	f3c6 3003 	ubfx	r0, r6, #12, #4
 80253d2:	fb01 7303 	mla	r3, r1, r3, r7
 80253d6:	eb05 0783 	add.w	r7, r5, r3, lsl #2
 80253da:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 80253de:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 80253e2:	2a00      	cmp	r2, #0
 80253e4:	f000 8133 	beq.w	802564e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74e>
 80253e8:	687d      	ldr	r5, [r7, #4]
 80253ea:	950e      	str	r5, [sp, #56]	; 0x38
 80253ec:	0e2d      	lsrs	r5, r5, #24
 80253ee:	9515      	str	r5, [sp, #84]	; 0x54
 80253f0:	b178      	cbz	r0, 8025412 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x512>
 80253f2:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 80253f6:	3901      	subs	r1, #1
 80253f8:	0089      	lsls	r1, r1, #2
 80253fa:	3104      	adds	r1, #4
 80253fc:	eb07 0e01 	add.w	lr, r7, r1
 8025400:	5879      	ldr	r1, [r7, r1]
 8025402:	9109      	str	r1, [sp, #36]	; 0x24
 8025404:	0e09      	lsrs	r1, r1, #24
 8025406:	9112      	str	r1, [sp, #72]	; 0x48
 8025408:	f8de 1004 	ldr.w	r1, [lr, #4]
 802540c:	910f      	str	r1, [sp, #60]	; 0x3c
 802540e:	0e09      	lsrs	r1, r1, #24
 8025410:	9116      	str	r1, [sp, #88]	; 0x58
 8025412:	b292      	uxth	r2, r2
 8025414:	9915      	ldr	r1, [sp, #84]	; 0x54
 8025416:	b280      	uxth	r0, r0
 8025418:	9d12      	ldr	r5, [sp, #72]	; 0x48
 802541a:	fb02 f800 	mul.w	r8, r2, r0
 802541e:	0112      	lsls	r2, r2, #4
 8025420:	ebc8 1000 	rsb	r0, r8, r0, lsl #4
 8025424:	eba2 0e08 	sub.w	lr, r2, r8
 8025428:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 802542c:	b280      	uxth	r0, r0
 802542e:	fa1f fe8e 	uxth.w	lr, lr
 8025432:	1a12      	subs	r2, r2, r0
 8025434:	fb0e f101 	mul.w	r1, lr, r1
 8025438:	b292      	uxth	r2, r2
 802543a:	fb02 110c 	mla	r1, r2, ip, r1
 802543e:	fb00 1105 	mla	r1, r0, r5, r1
 8025442:	9d16      	ldr	r5, [sp, #88]	; 0x58
 8025444:	fb08 1105 	mla	r1, r8, r5, r1
 8025448:	f3c1 2107 	ubfx	r1, r1, #8, #8
 802544c:	2900      	cmp	r1, #0
 802544e:	f000 80f5 	beq.w	802563c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x73c>
 8025452:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 8025456:	d019      	beq.n	802548c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58c>
 8025458:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 802545c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8025460:	fb0c fa0a 	mul.w	sl, ip, sl
 8025464:	fb0c fc03 	mul.w	ip, ip, r3
 8025468:	ea4f 231a 	mov.w	r3, sl, lsr #8
 802546c:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8025470:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 8025474:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8025478:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 802547c:	4453      	add	r3, sl
 802547e:	0a3f      	lsrs	r7, r7, #8
 8025480:	0a1b      	lsrs	r3, r3, #8
 8025482:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8025486:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 802548a:	433b      	orrs	r3, r7
 802548c:	9d15      	ldr	r5, [sp, #84]	; 0x54
 802548e:	2dff      	cmp	r5, #255	; 0xff
 8025490:	d020      	beq.n	80254d4 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5d4>
 8025492:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8025494:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 8025498:	9d15      	ldr	r5, [sp, #84]	; 0x54
 802549a:	436f      	muls	r7, r5
 802549c:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 802549e:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 80254a2:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 80254a6:	9d15      	ldr	r5, [sp, #84]	; 0x54
 80254a8:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 80254ac:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80254b0:	fb05 fa0a 	mul.w	sl, r5, sl
 80254b4:	44bc      	add	ip, r7
 80254b6:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 80254ba:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80254be:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 80254c2:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80254c6:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80254ca:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80254ce:	ea4c 050a 	orr.w	r5, ip, sl
 80254d2:	950e      	str	r5, [sp, #56]	; 0x38
 80254d4:	9d12      	ldr	r5, [sp, #72]	; 0x48
 80254d6:	2dff      	cmp	r5, #255	; 0xff
 80254d8:	d020      	beq.n	802551c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x61c>
 80254da:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80254dc:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 80254e0:	9d12      	ldr	r5, [sp, #72]	; 0x48
 80254e2:	436f      	muls	r7, r5
 80254e4:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80254e6:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 80254ea:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 80254ee:	9d12      	ldr	r5, [sp, #72]	; 0x48
 80254f0:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 80254f4:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80254f8:	fb05 fa0a 	mul.w	sl, r5, sl
 80254fc:	44bc      	add	ip, r7
 80254fe:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8025502:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8025506:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 802550a:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802550e:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8025512:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8025516:	ea4c 050a 	orr.w	r5, ip, sl
 802551a:	9509      	str	r5, [sp, #36]	; 0x24
 802551c:	9d16      	ldr	r5, [sp, #88]	; 0x58
 802551e:	2dff      	cmp	r5, #255	; 0xff
 8025520:	d020      	beq.n	8025564 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x664>
 8025522:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8025524:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 8025528:	9d16      	ldr	r5, [sp, #88]	; 0x58
 802552a:	436f      	muls	r7, r5
 802552c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 802552e:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8025532:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 8025536:	9d16      	ldr	r5, [sp, #88]	; 0x58
 8025538:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 802553c:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8025540:	fb05 fa0a 	mul.w	sl, r5, sl
 8025544:	44bc      	add	ip, r7
 8025546:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 802554a:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802554e:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8025552:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8025556:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802555a:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 802555e:	ea4c 050a 	orr.w	r5, ip, sl
 8025562:	950f      	str	r5, [sp, #60]	; 0x3c
 8025564:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8025566:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 802556a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 802556e:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 8025572:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8025574:	fb0e f707 	mul.w	r7, lr, r7
 8025578:	fb02 770c 	mla	r7, r2, ip, r7
 802557c:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 8025580:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8025582:	fb00 770c 	mla	r7, r0, ip, r7
 8025586:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 802558a:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 802558c:	fb08 770c 	mla	r7, r8, ip, r7
 8025590:	f405 4c7f 	and.w	ip, r5, #65280	; 0xff00
 8025594:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8025596:	fb0e fe0c 	mul.w	lr, lr, ip
 802559a:	0a3f      	lsrs	r7, r7, #8
 802559c:	fb02 e303 	mla	r3, r2, r3, lr
 80255a0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80255a2:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 80255a6:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 80255aa:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80255ac:	fb00 330a 	mla	r3, r0, sl, r3
 80255b0:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 80255b4:	f8b9 0000 	ldrh.w	r0, [r9]
 80255b8:	fb08 3c0c 	mla	ip, r8, ip, r3
 80255bc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80255be:	1202      	asrs	r2, r0, #8
 80255c0:	4359      	muls	r1, r3
 80255c2:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80255c6:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 80255ca:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 80255ce:	1c4b      	adds	r3, r1, #1
 80255d0:	ea47 070c 	orr.w	r7, r7, ip
 80255d4:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 80255d8:	0c3b      	lsrs	r3, r7, #16
 80255da:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 80255de:	f3c7 2c07 	ubfx	ip, r7, #8, #8
 80255e2:	b2ff      	uxtb	r7, r7
 80255e4:	fb13 f305 	smulbb	r3, r3, r5
 80255e8:	b2c9      	uxtb	r1, r1
 80255ea:	fb17 f705 	smulbb	r7, r7, r5
 80255ee:	fb02 3201 	mla	r2, r2, r1, r3
 80255f2:	10c3      	asrs	r3, r0, #3
 80255f4:	fb1c fc05 	smulbb	ip, ip, r5
 80255f8:	00c0      	lsls	r0, r0, #3
 80255fa:	b292      	uxth	r2, r2
 80255fc:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
 8025600:	b2c0      	uxtb	r0, r0
 8025602:	fb03 c301 	mla	r3, r3, r1, ip
 8025606:	fb00 7001 	mla	r0, r0, r1, r7
 802560a:	1c51      	adds	r1, r2, #1
 802560c:	b29b      	uxth	r3, r3
 802560e:	b280      	uxth	r0, r0
 8025610:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 8025614:	f100 0c01 	add.w	ip, r0, #1
 8025618:	f402 4278 	and.w	r2, r2, #63488	; 0xf800
 802561c:	eb0c 2c10 	add.w	ip, ip, r0, lsr #8
 8025620:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 8025624:	ea42 020c 	orr.w	r2, r2, ip
 8025628:	f103 0c01 	add.w	ip, r3, #1
 802562c:	eb0c 2313 	add.w	r3, ip, r3, lsr #8
 8025630:	095b      	lsrs	r3, r3, #5
 8025632:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8025636:	431a      	orrs	r2, r3
 8025638:	f8a9 2000 	strh.w	r2, [r9]
 802563c:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 802563e:	f109 0902 	add.w	r9, r9, #2
 8025642:	f10b 3bff 	add.w	fp, fp, #4294967295
 8025646:	441c      	add	r4, r3
 8025648:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 802564a:	441e      	add	r6, r3
 802564c:	e647      	b.n	80252de <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3de>
 802564e:	2800      	cmp	r0, #0
 8025650:	f43f aedf 	beq.w	8025412 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x512>
 8025654:	f857 1021 	ldr.w	r1, [r7, r1, lsl #2]
 8025658:	9109      	str	r1, [sp, #36]	; 0x24
 802565a:	0e09      	lsrs	r1, r1, #24
 802565c:	9112      	str	r1, [sp, #72]	; 0x48
 802565e:	e6d8      	b.n	8025412 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x512>
 8025660:	b01d      	add	sp, #116	; 0x74
 8025662:	ecbd 8b08 	vpop	{d8-d11}
 8025666:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0802566c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh>:
 802566c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025670:	880e      	ldrh	r6, [r1, #0]
 8025672:	b085      	sub	sp, #20
 8025674:	4690      	mov	r8, r2
 8025676:	ea4f 2c26 	mov.w	ip, r6, asr #8
 802567a:	f9bd e038 	ldrsh.w	lr, [sp, #56]	; 0x38
 802567e:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
 8025682:	f00c 02f8 	and.w	r2, ip, #248	; 0xf8
 8025686:	ea4f 0ce6 	mov.w	ip, r6, asr #3
 802568a:	00f6      	lsls	r6, r6, #3
 802568c:	f89d 7048 	ldrb.w	r7, [sp, #72]	; 0x48
 8025690:	9200      	str	r2, [sp, #0]
 8025692:	f00c 02fc 	and.w	r2, ip, #252	; 0xfc
 8025696:	e9dd 540f 	ldrd	r5, r4, [sp, #60]	; 0x3c
 802569a:	9201      	str	r2, [sp, #4]
 802569c:	b2f2      	uxtb	r2, r6
 802569e:	2c00      	cmp	r4, #0
 80256a0:	fb04 5603 	mla	r6, r4, r3, r5
 80256a4:	9202      	str	r2, [sp, #8]
 80256a6:	eb08 0c86 	add.w	ip, r8, r6, lsl #2
 80256aa:	db36      	blt.n	802571a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xae>
 80256ac:	45a6      	cmp	lr, r4
 80256ae:	dd34      	ble.n	802571a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xae>
 80256b0:	2d00      	cmp	r5, #0
 80256b2:	db30      	blt.n	8025716 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xaa>
 80256b4:	42ab      	cmp	r3, r5
 80256b6:	dd2e      	ble.n	8025716 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xaa>
 80256b8:	f858 2026 	ldr.w	r2, [r8, r6, lsl #2]
 80256bc:	1c6e      	adds	r6, r5, #1
 80256be:	d42f      	bmi.n	8025720 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xb4>
 80256c0:	42b3      	cmp	r3, r6
 80256c2:	dd2d      	ble.n	8025720 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xb4>
 80256c4:	b370      	cbz	r0, 8025724 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xb8>
 80256c6:	f8dc 6004 	ldr.w	r6, [ip, #4]
 80256ca:	3401      	adds	r4, #1
 80256cc:	d42e      	bmi.n	802572c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xc0>
 80256ce:	45a6      	cmp	lr, r4
 80256d0:	dd2c      	ble.n	802572c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xc0>
 80256d2:	b377      	cbz	r7, 8025732 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xc6>
 80256d4:	2d00      	cmp	r5, #0
 80256d6:	db27      	blt.n	8025728 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xbc>
 80256d8:	42ab      	cmp	r3, r5
 80256da:	dd25      	ble.n	8025728 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xbc>
 80256dc:	f85c 4023 	ldr.w	r4, [ip, r3, lsl #2]
 80256e0:	3501      	adds	r5, #1
 80256e2:	d429      	bmi.n	8025738 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xcc>
 80256e4:	42ab      	cmp	r3, r5
 80256e6:	dd27      	ble.n	8025738 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xcc>
 80256e8:	b340      	cbz	r0, 802573c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xd0>
 80256ea:	3301      	adds	r3, #1
 80256ec:	f85c 3023 	ldr.w	r3, [ip, r3, lsl #2]
 80256f0:	280f      	cmp	r0, #15
 80256f2:	ea4f 6b12 	mov.w	fp, r2, lsr #24
 80256f6:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 80256fa:	ea4f 6914 	mov.w	r9, r4, lsr #24
 80256fe:	ea4f 6813 	mov.w	r8, r3, lsr #24
 8025702:	d801      	bhi.n	8025708 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x9c>
 8025704:	2f0f      	cmp	r7, #15
 8025706:	d91b      	bls.n	8025740 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xd4>
 8025708:	4b7e      	ldr	r3, [pc, #504]	; (8025904 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x298>)
 802570a:	f240 210d 	movw	r1, #525	; 0x20d
 802570e:	4a7e      	ldr	r2, [pc, #504]	; (8025908 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x29c>)
 8025710:	487e      	ldr	r0, [pc, #504]	; (802590c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x2a0>)
 8025712:	f001 fd09 	bl	8027128 <__assert_func>
 8025716:	2200      	movs	r2, #0
 8025718:	e7d0      	b.n	80256bc <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x50>
 802571a:	2600      	movs	r6, #0
 802571c:	4632      	mov	r2, r6
 802571e:	e7d4      	b.n	80256ca <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x5e>
 8025720:	2600      	movs	r6, #0
 8025722:	e7d2      	b.n	80256ca <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x5e>
 8025724:	4606      	mov	r6, r0
 8025726:	e7d0      	b.n	80256ca <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x5e>
 8025728:	2400      	movs	r4, #0
 802572a:	e7d9      	b.n	80256e0 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x74>
 802572c:	2300      	movs	r3, #0
 802572e:	461c      	mov	r4, r3
 8025730:	e7de      	b.n	80256f0 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x84>
 8025732:	463b      	mov	r3, r7
 8025734:	463c      	mov	r4, r7
 8025736:	e7db      	b.n	80256f0 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x84>
 8025738:	2300      	movs	r3, #0
 802573a:	e7d9      	b.n	80256f0 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x84>
 802573c:	4603      	mov	r3, r0
 802573e:	e7d7      	b.n	80256f0 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x84>
 8025740:	b280      	uxth	r0, r0
 8025742:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 8025746:	b2bf      	uxth	r7, r7
 8025748:	fb00 fe07 	mul.w	lr, r0, r7
 802574c:	ea4f 1000 	mov.w	r0, r0, lsl #4
 8025750:	ebce 1707 	rsb	r7, lr, r7, lsl #4
 8025754:	eba0 0c0e 	sub.w	ip, r0, lr
 8025758:	f5c0 7580 	rsb	r5, r0, #256	; 0x100
 802575c:	b2bf      	uxth	r7, r7
 802575e:	fa1f fc8c 	uxth.w	ip, ip
 8025762:	eba5 0507 	sub.w	r5, r5, r7
 8025766:	fb0c f00a 	mul.w	r0, ip, sl
 802576a:	b2ad      	uxth	r5, r5
 802576c:	fb05 000b 	mla	r0, r5, fp, r0
 8025770:	fb07 0009 	mla	r0, r7, r9, r0
 8025774:	fb0e 0008 	mla	r0, lr, r8, r0
 8025778:	f3c0 2007 	ubfx	r0, r0, #8, #8
 802577c:	9003      	str	r0, [sp, #12]
 802577e:	d018      	beq.n	80257b2 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x146>
 8025780:	f002 10ff 	and.w	r0, r2, #16711935	; 0xff00ff
 8025784:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8025788:	fb0b f000 	mul.w	r0, fp, r0
 802578c:	fb0b fb02 	mul.w	fp, fp, r2
 8025790:	0a02      	lsrs	r2, r0, #8
 8025792:	f100 1001 	add.w	r0, r0, #65537	; 0x10001
 8025796:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 802579a:	4402      	add	r2, r0
 802579c:	f50b 7080 	add.w	r0, fp, #256	; 0x100
 80257a0:	eb00 201b 	add.w	r0, r0, fp, lsr #8
 80257a4:	0a12      	lsrs	r2, r2, #8
 80257a6:	0a00      	lsrs	r0, r0, #8
 80257a8:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 80257ac:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 80257b0:	4302      	orrs	r2, r0
 80257b2:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 80257b6:	d019      	beq.n	80257ec <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x180>
 80257b8:	f006 1bff 	and.w	fp, r6, #16711935	; 0xff00ff
 80257bc:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 80257c0:	fb0a fb0b 	mul.w	fp, sl, fp
 80257c4:	fb0a fa06 	mul.w	sl, sl, r6
 80257c8:	ea4f 261b 	mov.w	r6, fp, lsr #8
 80257cc:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 80257d0:	f50a 7080 	add.w	r0, sl, #256	; 0x100
 80257d4:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 80257d8:	eb00 201a 	add.w	r0, r0, sl, lsr #8
 80257dc:	445e      	add	r6, fp
 80257de:	0a00      	lsrs	r0, r0, #8
 80257e0:	0a36      	lsrs	r6, r6, #8
 80257e2:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 80257e6:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 80257ea:	4306      	orrs	r6, r0
 80257ec:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 80257f0:	d019      	beq.n	8025826 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x1ba>
 80257f2:	f004 1aff 	and.w	sl, r4, #16711935	; 0xff00ff
 80257f6:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 80257fa:	fb09 fa0a 	mul.w	sl, r9, sl
 80257fe:	fb09 f904 	mul.w	r9, r9, r4
 8025802:	ea4f 241a 	mov.w	r4, sl, lsr #8
 8025806:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 802580a:	f509 7080 	add.w	r0, r9, #256	; 0x100
 802580e:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8025812:	eb00 2019 	add.w	r0, r0, r9, lsr #8
 8025816:	4454      	add	r4, sl
 8025818:	0a00      	lsrs	r0, r0, #8
 802581a:	0a24      	lsrs	r4, r4, #8
 802581c:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8025820:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8025824:	4304      	orrs	r4, r0
 8025826:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 802582a:	d019      	beq.n	8025860 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x1f4>
 802582c:	f003 19ff 	and.w	r9, r3, #16711935	; 0xff00ff
 8025830:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8025834:	fb08 f909 	mul.w	r9, r8, r9
 8025838:	fb08 f803 	mul.w	r8, r8, r3
 802583c:	ea4f 2319 	mov.w	r3, r9, lsr #8
 8025840:	f109 1901 	add.w	r9, r9, #65537	; 0x10001
 8025844:	f508 7080 	add.w	r0, r8, #256	; 0x100
 8025848:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 802584c:	eb00 2018 	add.w	r0, r0, r8, lsr #8
 8025850:	444b      	add	r3, r9
 8025852:	0a00      	lsrs	r0, r0, #8
 8025854:	0a1b      	lsrs	r3, r3, #8
 8025856:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 802585a:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 802585e:	4303      	orrs	r3, r0
 8025860:	f006 18ff 	and.w	r8, r6, #16711935	; 0xff00ff
 8025864:	f002 10ff 	and.w	r0, r2, #16711935	; 0xff00ff
 8025868:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 802586c:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8025870:	fb0c f808 	mul.w	r8, ip, r8
 8025874:	fb0c f606 	mul.w	r6, ip, r6
 8025878:	fb05 8800 	mla	r8, r5, r0, r8
 802587c:	f004 10ff 	and.w	r0, r4, #16711935	; 0xff00ff
 8025880:	fb05 6202 	mla	r2, r5, r2, r6
 8025884:	9d01      	ldr	r5, [sp, #4]
 8025886:	fb07 8800 	mla	r8, r7, r0, r8
 802588a:	f003 10ff 	and.w	r0, r3, #16711935	; 0xff00ff
 802588e:	fb0e 8000 	mla	r0, lr, r0, r8
 8025892:	0a00      	lsrs	r0, r0, #8
 8025894:	f000 18ff 	and.w	r8, r0, #16711935	; 0xff00ff
 8025898:	f404 407f 	and.w	r0, r4, #65280	; 0xff00
 802589c:	9c02      	ldr	r4, [sp, #8]
 802589e:	fb07 2700 	mla	r7, r7, r0, r2
 80258a2:	f403 407f 	and.w	r0, r3, #65280	; 0xff00
 80258a6:	9b03      	ldr	r3, [sp, #12]
 80258a8:	fb0e 7000 	mla	r0, lr, r0, r7
 80258ac:	43da      	mvns	r2, r3
 80258ae:	9b00      	ldr	r3, [sp, #0]
 80258b0:	0a00      	lsrs	r0, r0, #8
 80258b2:	b2d2      	uxtb	r2, r2
 80258b4:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 80258b8:	4353      	muls	r3, r2
 80258ba:	4354      	muls	r4, r2
 80258bc:	ea48 0000 	orr.w	r0, r8, r0
 80258c0:	4355      	muls	r5, r2
 80258c2:	4622      	mov	r2, r4
 80258c4:	1c5c      	adds	r4, r3, #1
 80258c6:	eb04 2413 	add.w	r4, r4, r3, lsr #8
 80258ca:	0c03      	lsrs	r3, r0, #16
 80258cc:	eb03 2414 	add.w	r4, r3, r4, lsr #8
 80258d0:	4b0f      	ldr	r3, [pc, #60]	; (8025910 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x2a4>)
 80258d2:	ea03 2304 	and.w	r3, r3, r4, lsl #8
 80258d6:	1c54      	adds	r4, r2, #1
 80258d8:	eb04 2412 	add.w	r4, r4, r2, lsr #8
 80258dc:	b2c2      	uxtb	r2, r0
 80258de:	f3c0 2007 	ubfx	r0, r0, #8, #8
 80258e2:	eb02 2214 	add.w	r2, r2, r4, lsr #8
 80258e6:	ea43 03d2 	orr.w	r3, r3, r2, lsr #3
 80258ea:	1c6a      	adds	r2, r5, #1
 80258ec:	eb02 2215 	add.w	r2, r2, r5, lsr #8
 80258f0:	eb00 2012 	add.w	r0, r0, r2, lsr #8
 80258f4:	00c0      	lsls	r0, r0, #3
 80258f6:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 80258fa:	4318      	orrs	r0, r3
 80258fc:	8008      	strh	r0, [r1, #0]
 80258fe:	b005      	add	sp, #20
 8025900:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8025904:	0802b942 	.word	0x0802b942
 8025908:	0802bf05 	.word	0x0802bf05
 802590c:	0802ba2b 	.word	0x0802ba2b
 8025910:	fffff800 	.word	0xfffff800

08025914 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8025914:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025918:	ed2d 8b08 	vpush	{d8-d11}
 802591c:	b09b      	sub	sp, #108	; 0x6c
 802591e:	eeb0 aa40 	vmov.f32	s20, s0
 8025922:	eef0 9a60 	vmov.f32	s19, s1
 8025926:	9218      	str	r2, [sp, #96]	; 0x60
 8025928:	eeb0 9a41 	vmov.f32	s18, s2
 802592c:	9a31      	ldr	r2, [sp, #196]	; 0xc4
 802592e:	eeb0 8a62 	vmov.f32	s16, s5
 8025932:	9019      	str	r0, [sp, #100]	; 0x64
 8025934:	eef0 8a43 	vmov.f32	s17, s6
 8025938:	6850      	ldr	r0, [r2, #4]
 802593a:	eef0 ba44 	vmov.f32	s23, s8
 802593e:	9116      	str	r1, [sp, #88]	; 0x58
 8025940:	eeb0 ba64 	vmov.f32	s22, s9
 8025944:	9307      	str	r3, [sp, #28]
 8025946:	eef0 aa45 	vmov.f32	s21, s10
 802594a:	6812      	ldr	r2, [r2, #0]
 802594c:	e9dd 1332 	ldrd	r1, r3, [sp, #200]	; 0xc8
 8025950:	e9dd 462d 	ldrd	r4, r6, [sp, #180]	; 0xb4
 8025954:	fb00 1303 	mla	r3, r0, r3, r1
 8025958:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 802595c:	930a      	str	r3, [sp, #40]	; 0x28
 802595e:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8025960:	681b      	ldr	r3, [r3, #0]
 8025962:	930f      	str	r3, [sp, #60]	; 0x3c
 8025964:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8025966:	2b00      	cmp	r3, #0
 8025968:	dc03      	bgt.n	8025972 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 802596a:	9b18      	ldr	r3, [sp, #96]	; 0x60
 802596c:	2b00      	cmp	r3, #0
 802596e:	f340 838b 	ble.w	8026088 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x774>
 8025972:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8025974:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8025978:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 802597c:	1e48      	subs	r0, r1, #1
 802597e:	1e57      	subs	r7, r2, #1
 8025980:	9b07      	ldr	r3, [sp, #28]
 8025982:	2b00      	cmp	r3, #0
 8025984:	f340 818b 	ble.w	8025c9e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 8025988:	ea5f 4c24 	movs.w	ip, r4, asr #16
 802598c:	ea4f 4326 	mov.w	r3, r6, asr #16
 8025990:	d406      	bmi.n	80259a0 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 8025992:	4584      	cmp	ip, r0
 8025994:	da04      	bge.n	80259a0 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 8025996:	2b00      	cmp	r3, #0
 8025998:	db02      	blt.n	80259a0 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 802599a:	42bb      	cmp	r3, r7
 802599c:	f2c0 8180 	blt.w	8025ca0 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38c>
 80259a0:	f11c 0c01 	adds.w	ip, ip, #1
 80259a4:	f100 8170 	bmi.w	8025c88 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x374>
 80259a8:	4561      	cmp	r1, ip
 80259aa:	f2c0 816d 	blt.w	8025c88 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x374>
 80259ae:	3301      	adds	r3, #1
 80259b0:	f100 816a 	bmi.w	8025c88 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x374>
 80259b4:	429a      	cmp	r2, r3
 80259b6:	f2c0 8167 	blt.w	8025c88 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x374>
 80259ba:	9b07      	ldr	r3, [sp, #28]
 80259bc:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 80259be:	9317      	str	r3, [sp, #92]	; 0x5c
 80259c0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80259c2:	2b00      	cmp	r3, #0
 80259c4:	f340 8189 	ble.w	8025cda <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c6>
 80259c8:	9a34      	ldr	r2, [sp, #208]	; 0xd0
 80259ca:	ea4f 4c26 	mov.w	ip, r6, asr #16
 80259ce:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 80259d0:	f3c4 3103 	ubfx	r1, r4, #12, #4
 80259d4:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 80259d8:	1422      	asrs	r2, r4, #16
 80259da:	f3c6 3003 	ubfx	r0, r6, #12, #4
 80259de:	689b      	ldr	r3, [r3, #8]
 80259e0:	f100 81d8 	bmi.w	8025d94 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x480>
 80259e4:	f103 38ff 	add.w	r8, r3, #4294967295
 80259e8:	4542      	cmp	r2, r8
 80259ea:	f280 81d3 	bge.w	8025d94 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x480>
 80259ee:	f1bc 0f00 	cmp.w	ip, #0
 80259f2:	f2c0 81cf 	blt.w	8025d94 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x480>
 80259f6:	f10e 38ff 	add.w	r8, lr, #4294967295
 80259fa:	45c4      	cmp	ip, r8
 80259fc:	f280 81ca 	bge.w	8025d94 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x480>
 8025a00:	b21b      	sxth	r3, r3
 8025a02:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8025a04:	fb0c 2203 	mla	r2, ip, r3, r2
 8025a08:	eb05 0882 	add.w	r8, r5, r2, lsl #2
 8025a0c:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 8025a10:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 8025a14:	2900      	cmp	r1, #0
 8025a16:	f000 81a6 	beq.w	8025d66 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 8025a1a:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8025a1e:	950b      	str	r5, [sp, #44]	; 0x2c
 8025a20:	0e2d      	lsrs	r5, r5, #24
 8025a22:	9512      	str	r5, [sp, #72]	; 0x48
 8025a24:	b180      	cbz	r0, 8025a48 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x134>
 8025a26:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8025a2a:	3b01      	subs	r3, #1
 8025a2c:	009b      	lsls	r3, r3, #2
 8025a2e:	3304      	adds	r3, #4
 8025a30:	eb08 0c03 	add.w	ip, r8, r3
 8025a34:	f858 3003 	ldr.w	r3, [r8, r3]
 8025a38:	9308      	str	r3, [sp, #32]
 8025a3a:	0e1b      	lsrs	r3, r3, #24
 8025a3c:	9310      	str	r3, [sp, #64]	; 0x40
 8025a3e:	f8dc 3004 	ldr.w	r3, [ip, #4]
 8025a42:	930c      	str	r3, [sp, #48]	; 0x30
 8025a44:	0e1b      	lsrs	r3, r3, #24
 8025a46:	9313      	str	r3, [sp, #76]	; 0x4c
 8025a48:	b289      	uxth	r1, r1
 8025a4a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8025a4c:	b280      	uxth	r0, r0
 8025a4e:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8025a50:	fb01 f900 	mul.w	r9, r1, r0
 8025a54:	0109      	lsls	r1, r1, #4
 8025a56:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 8025a5a:	eba1 0809 	sub.w	r8, r1, r9
 8025a5e:	f5c1 7180 	rsb	r1, r1, #256	; 0x100
 8025a62:	b280      	uxth	r0, r0
 8025a64:	fa1f f888 	uxth.w	r8, r8
 8025a68:	1a09      	subs	r1, r1, r0
 8025a6a:	fb08 f303 	mul.w	r3, r8, r3
 8025a6e:	b289      	uxth	r1, r1
 8025a70:	fb01 330e 	mla	r3, r1, lr, r3
 8025a74:	fb00 3305 	mla	r3, r0, r5, r3
 8025a78:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8025a7a:	fb09 3305 	mla	r3, r9, r5, r3
 8025a7e:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8025a82:	2b00      	cmp	r3, #0
 8025a84:	f000 80f7 	beq.w	8025c76 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
 8025a88:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8025a8c:	d01b      	beq.n	8025ac6 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b2>
 8025a8e:	f002 1aff 	and.w	sl, r2, #16711935	; 0xff00ff
 8025a92:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8025a96:	fb0e fa0a 	mul.w	sl, lr, sl
 8025a9a:	fb0e fe02 	mul.w	lr, lr, r2
 8025a9e:	ea4f 221a 	mov.w	r2, sl, lsr #8
 8025aa2:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8025aa6:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 8025aaa:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8025aae:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 8025ab2:	4452      	add	r2, sl
 8025ab4:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8025ab8:	0a12      	lsrs	r2, r2, #8
 8025aba:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8025abe:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8025ac2:	ea42 020c 	orr.w	r2, r2, ip
 8025ac6:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8025ac8:	2dff      	cmp	r5, #255	; 0xff
 8025aca:	d021      	beq.n	8025b10 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fc>
 8025acc:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8025ace:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 8025ad2:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8025ad4:	fb05 fb0b 	mul.w	fp, r5, fp
 8025ad8:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8025ada:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 8025ade:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8025ae0:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8025ae4:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8025ae8:	fb05 fa0a 	mul.w	sl, r5, sl
 8025aec:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8025af0:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8025af4:	44de      	add	lr, fp
 8025af6:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8025afa:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8025afe:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8025b02:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8025b06:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8025b0a:	ea4e 050a 	orr.w	r5, lr, sl
 8025b0e:	950b      	str	r5, [sp, #44]	; 0x2c
 8025b10:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8025b12:	2dff      	cmp	r5, #255	; 0xff
 8025b14:	d021      	beq.n	8025b5a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x246>
 8025b16:	9d08      	ldr	r5, [sp, #32]
 8025b18:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 8025b1c:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8025b1e:	fb05 fb0b 	mul.w	fp, r5, fp
 8025b22:	9d08      	ldr	r5, [sp, #32]
 8025b24:	f405 4e7f 	and.w	lr, r5, #65280	; 0xff00
 8025b28:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8025b2a:	fb05 fa0e 	mul.w	sl, r5, lr
 8025b2e:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8025b32:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8025b36:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8025b3a:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8025b3e:	44de      	add	lr, fp
 8025b40:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8025b44:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8025b48:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8025b4c:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8025b50:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8025b54:	ea4e 050a 	orr.w	r5, lr, sl
 8025b58:	9508      	str	r5, [sp, #32]
 8025b5a:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8025b5c:	2dff      	cmp	r5, #255	; 0xff
 8025b5e:	d021      	beq.n	8025ba4 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x290>
 8025b60:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8025b62:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 8025b66:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8025b68:	fb05 fb0b 	mul.w	fp, r5, fp
 8025b6c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8025b6e:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 8025b72:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8025b74:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8025b78:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8025b7c:	fb05 fa0a 	mul.w	sl, r5, sl
 8025b80:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8025b84:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8025b88:	44de      	add	lr, fp
 8025b8a:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8025b8e:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8025b92:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8025b96:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8025b9a:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8025b9e:	ea4e 050a 	orr.w	r5, lr, sl
 8025ba2:	950c      	str	r5, [sp, #48]	; 0x30
 8025ba4:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8025ba6:	f002 1eff 	and.w	lr, r2, #16711935	; 0xff00ff
 8025baa:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8025bae:	2bff      	cmp	r3, #255	; 0xff
 8025bb0:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 8025bb4:	9d08      	ldr	r5, [sp, #32]
 8025bb6:	fb08 fc0c 	mul.w	ip, r8, ip
 8025bba:	fb01 cc0e 	mla	ip, r1, lr, ip
 8025bbe:	f005 1eff 	and.w	lr, r5, #16711935	; 0xff00ff
 8025bc2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8025bc4:	fb00 cc0e 	mla	ip, r0, lr, ip
 8025bc8:	f005 1eff 	and.w	lr, r5, #16711935	; 0xff00ff
 8025bcc:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8025bce:	fb09 cc0e 	mla	ip, r9, lr, ip
 8025bd2:	f405 4e7f 	and.w	lr, r5, #65280	; 0xff00
 8025bd6:	fb08 f80e 	mul.w	r8, r8, lr
 8025bda:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8025bde:	fb01 8202 	mla	r2, r1, r2, r8
 8025be2:	9908      	ldr	r1, [sp, #32]
 8025be4:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8025be8:	f401 4a7f 	and.w	sl, r1, #65280	; 0xff00
 8025bec:	990c      	ldr	r1, [sp, #48]	; 0x30
 8025bee:	fb00 220a 	mla	r2, r0, sl, r2
 8025bf2:	f401 407f 	and.w	r0, r1, #65280	; 0xff00
 8025bf6:	fb09 2900 	mla	r9, r9, r0, r2
 8025bfa:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8025bfe:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 8025c02:	ea4c 0c09 	orr.w	ip, ip, r9
 8025c06:	ea4f 221c 	mov.w	r2, ip, lsr #8
 8025c0a:	f000 80b5 	beq.w	8025d78 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x464>
 8025c0e:	8839      	ldrh	r1, [r7, #0]
 8025c10:	43db      	mvns	r3, r3
 8025c12:	ea4f 2e21 	mov.w	lr, r1, asr #8
 8025c16:	fa5f f883 	uxtb.w	r8, r3
 8025c1a:	f00e 0ef8 	and.w	lr, lr, #248	; 0xf8
 8025c1e:	10c8      	asrs	r0, r1, #3
 8025c20:	00cb      	lsls	r3, r1, #3
 8025c22:	fb0e fe08 	mul.w	lr, lr, r8
 8025c26:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 8025c2a:	b2db      	uxtb	r3, r3
 8025c2c:	f10e 0101 	add.w	r1, lr, #1
 8025c30:	fb00 f008 	mul.w	r0, r0, r8
 8025c34:	fb03 f308 	mul.w	r3, r3, r8
 8025c38:	eb01 211e 	add.w	r1, r1, lr, lsr #8
 8025c3c:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8025c40:	fa5f fc8c 	uxtb.w	ip, ip
 8025c44:	eb0e 2e11 	add.w	lr, lr, r1, lsr #8
 8025c48:	4960      	ldr	r1, [pc, #384]	; (8025dcc <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b8>)
 8025c4a:	ea01 2e0e 	and.w	lr, r1, lr, lsl #8
 8025c4e:	1c59      	adds	r1, r3, #1
 8025c50:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 8025c54:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 8025c58:	1c43      	adds	r3, r0, #1
 8025c5a:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 8025c5e:	b2d3      	uxtb	r3, r2
 8025c60:	ea4e 0cdc 	orr.w	ip, lr, ip, lsr #3
 8025c64:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 8025c68:	00db      	lsls	r3, r3, #3
 8025c6a:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8025c6e:	ea4c 0c03 	orr.w	ip, ip, r3
 8025c72:	f8a7 c000 	strh.w	ip, [r7]
 8025c76:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 8025c78:	3702      	adds	r7, #2
 8025c7a:	441c      	add	r4, r3
 8025c7c:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8025c7e:	441e      	add	r6, r3
 8025c80:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8025c82:	3b01      	subs	r3, #1
 8025c84:	9317      	str	r3, [sp, #92]	; 0x5c
 8025c86:	e69b      	b.n	80259c0 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xac>
 8025c88:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 8025c8a:	441c      	add	r4, r3
 8025c8c:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8025c8e:	441e      	add	r6, r3
 8025c90:	9b07      	ldr	r3, [sp, #28]
 8025c92:	3b01      	subs	r3, #1
 8025c94:	9307      	str	r3, [sp, #28]
 8025c96:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8025c98:	3302      	adds	r3, #2
 8025c9a:	930a      	str	r3, [sp, #40]	; 0x28
 8025c9c:	e670      	b.n	8025980 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 8025c9e:	d023      	beq.n	8025ce8 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3d4>
 8025ca0:	9b07      	ldr	r3, [sp, #28]
 8025ca2:	982f      	ldr	r0, [sp, #188]	; 0xbc
 8025ca4:	3b01      	subs	r3, #1
 8025ca6:	fb00 4003 	mla	r0, r0, r3, r4
 8025caa:	1400      	asrs	r0, r0, #16
 8025cac:	f53f ae85 	bmi.w	80259ba <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 8025cb0:	3901      	subs	r1, #1
 8025cb2:	4288      	cmp	r0, r1
 8025cb4:	f6bf ae81 	bge.w	80259ba <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 8025cb8:	9930      	ldr	r1, [sp, #192]	; 0xc0
 8025cba:	fb01 6303 	mla	r3, r1, r3, r6
 8025cbe:	141b      	asrs	r3, r3, #16
 8025cc0:	f53f ae7b 	bmi.w	80259ba <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 8025cc4:	3a01      	subs	r2, #1
 8025cc6:	4293      	cmp	r3, r2
 8025cc8:	f6bf ae77 	bge.w	80259ba <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 8025ccc:	f8dd b01c 	ldr.w	fp, [sp, #28]
 8025cd0:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
 8025cd4:	f1bb 0f00 	cmp.w	fp, #0
 8025cd8:	dc7a      	bgt.n	8025dd0 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4bc>
 8025cda:	9b07      	ldr	r3, [sp, #28]
 8025cdc:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 8025ce0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8025ce2:	eb03 0345 	add.w	r3, r3, r5, lsl #1
 8025ce6:	930a      	str	r3, [sp, #40]	; 0x28
 8025ce8:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8025cea:	2b00      	cmp	r3, #0
 8025cec:	f340 81cc 	ble.w	8026088 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x774>
 8025cf0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8025cf4:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8025cf6:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8025cfa:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8025cfe:	eef0 6a48 	vmov.f32	s13, s16
 8025d02:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8025d06:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8025d0a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8025d0e:	ee16 4a90 	vmov	r4, s13
 8025d12:	eef0 6a68 	vmov.f32	s13, s17
 8025d16:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8025d1a:	ee16 6a90 	vmov	r6, s13
 8025d1e:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8025d22:	ee69 7a27 	vmul.f32	s15, s18, s15
 8025d26:	ee37 8a48 	vsub.f32	s16, s14, s16
 8025d2a:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8025d2e:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8025d32:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8025d36:	ee18 2a10 	vmov	r2, s16
 8025d3a:	eeb0 8a47 	vmov.f32	s16, s14
 8025d3e:	fb92 f3f3 	sdiv	r3, r2, r3
 8025d42:	ee18 2a90 	vmov	r2, s17
 8025d46:	932f      	str	r3, [sp, #188]	; 0xbc
 8025d48:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8025d4a:	eef0 8a67 	vmov.f32	s17, s15
 8025d4e:	fb92 f3f3 	sdiv	r3, r2, r3
 8025d52:	9330      	str	r3, [sp, #192]	; 0xc0
 8025d54:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8025d56:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8025d58:	3b01      	subs	r3, #1
 8025d5a:	9316      	str	r3, [sp, #88]	; 0x58
 8025d5c:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8025d5e:	bf08      	it	eq
 8025d60:	4613      	moveq	r3, r2
 8025d62:	9307      	str	r3, [sp, #28]
 8025d64:	e5fe      	b.n	8025964 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50>
 8025d66:	2800      	cmp	r0, #0
 8025d68:	f43f ae6e 	beq.w	8025a48 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x134>
 8025d6c:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
 8025d70:	9308      	str	r3, [sp, #32]
 8025d72:	0e1b      	lsrs	r3, r3, #24
 8025d74:	9310      	str	r3, [sp, #64]	; 0x40
 8025d76:	e667      	b.n	8025a48 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x134>
 8025d78:	ea4f 135c 	mov.w	r3, ip, lsr #5
 8025d7c:	f422 62ff 	bic.w	r2, r2, #2040	; 0x7f8
 8025d80:	f3cc 0cc4 	ubfx	ip, ip, #3, #5
 8025d84:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8025d88:	f022 0207 	bic.w	r2, r2, #7
 8025d8c:	431a      	orrs	r2, r3
 8025d8e:	ea42 0c0c 	orr.w	ip, r2, ip
 8025d92:	e76e      	b.n	8025c72 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35e>
 8025d94:	f112 0801 	adds.w	r8, r2, #1
 8025d98:	f53f af6d 	bmi.w	8025c76 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
 8025d9c:	4543      	cmp	r3, r8
 8025d9e:	f6ff af6a 	blt.w	8025c76 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
 8025da2:	f11c 0801 	adds.w	r8, ip, #1
 8025da6:	f53f af66 	bmi.w	8025c76 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
 8025daa:	45c6      	cmp	lr, r8
 8025dac:	f6ff af63 	blt.w	8025c76 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
 8025db0:	b21b      	sxth	r3, r3
 8025db2:	e9cd 2c01 	strd	r2, ip, [sp, #4]
 8025db6:	fa0f f28e 	sxth.w	r2, lr
 8025dba:	e9cd 1003 	strd	r1, r0, [sp, #12]
 8025dbe:	9200      	str	r2, [sp, #0]
 8025dc0:	4639      	mov	r1, r7
 8025dc2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8025dc4:	9819      	ldr	r0, [sp, #100]	; 0x64
 8025dc6:	f7ff fc51 	bl	802566c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh>
 8025dca:	e754      	b.n	8025c76 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
 8025dcc:	fffff800 	.word	0xfffff800
 8025dd0:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8025dd2:	1421      	asrs	r1, r4, #16
 8025dd4:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8025dd6:	f3c4 3203 	ubfx	r2, r4, #12, #4
 8025dda:	f9b3 7008 	ldrsh.w	r7, [r3, #8]
 8025dde:	1433      	asrs	r3, r6, #16
 8025de0:	f3c6 3003 	ubfx	r0, r6, #12, #4
 8025de4:	fb07 1303 	mla	r3, r7, r3, r1
 8025de8:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8025dea:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8025dee:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 8025df2:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 8025df6:	2a00      	cmp	r2, #0
 8025df8:	f000 812f 	beq.w	802605a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x746>
 8025dfc:	684d      	ldr	r5, [r1, #4]
 8025dfe:	950d      	str	r5, [sp, #52]	; 0x34
 8025e00:	0e2d      	lsrs	r5, r5, #24
 8025e02:	9514      	str	r5, [sp, #80]	; 0x50
 8025e04:	b178      	cbz	r0, 8025e26 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x512>
 8025e06:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8025e0a:	3f01      	subs	r7, #1
 8025e0c:	00bf      	lsls	r7, r7, #2
 8025e0e:	3704      	adds	r7, #4
 8025e10:	eb01 0e07 	add.w	lr, r1, r7
 8025e14:	59c9      	ldr	r1, [r1, r7]
 8025e16:	9109      	str	r1, [sp, #36]	; 0x24
 8025e18:	0e09      	lsrs	r1, r1, #24
 8025e1a:	9111      	str	r1, [sp, #68]	; 0x44
 8025e1c:	f8de 1004 	ldr.w	r1, [lr, #4]
 8025e20:	910e      	str	r1, [sp, #56]	; 0x38
 8025e22:	0e09      	lsrs	r1, r1, #24
 8025e24:	9115      	str	r1, [sp, #84]	; 0x54
 8025e26:	b292      	uxth	r2, r2
 8025e28:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8025e2a:	b280      	uxth	r0, r0
 8025e2c:	fb02 f900 	mul.w	r9, r2, r0
 8025e30:	0112      	lsls	r2, r2, #4
 8025e32:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 8025e36:	eba2 0e09 	sub.w	lr, r2, r9
 8025e3a:	f5c2 7180 	rsb	r1, r2, #256	; 0x100
 8025e3e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8025e40:	b280      	uxth	r0, r0
 8025e42:	fa1f fe8e 	uxth.w	lr, lr
 8025e46:	1a09      	subs	r1, r1, r0
 8025e48:	fb0e f202 	mul.w	r2, lr, r2
 8025e4c:	b289      	uxth	r1, r1
 8025e4e:	fb01 220c 	mla	r2, r1, ip, r2
 8025e52:	fb00 2205 	mla	r2, r0, r5, r2
 8025e56:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8025e58:	fb09 2205 	mla	r2, r9, r5, r2
 8025e5c:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8025e60:	2a00      	cmp	r2, #0
 8025e62:	f000 80f1 	beq.w	8026048 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x734>
 8025e66:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 8025e6a:	d019      	beq.n	8025ea0 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58c>
 8025e6c:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 8025e70:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8025e74:	fb0c fa0a 	mul.w	sl, ip, sl
 8025e78:	fb0c fc03 	mul.w	ip, ip, r3
 8025e7c:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8025e80:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8025e84:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 8025e88:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8025e8c:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 8025e90:	4453      	add	r3, sl
 8025e92:	0a3f      	lsrs	r7, r7, #8
 8025e94:	0a1b      	lsrs	r3, r3, #8
 8025e96:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8025e9a:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8025e9e:	433b      	orrs	r3, r7
 8025ea0:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8025ea2:	2dff      	cmp	r5, #255	; 0xff
 8025ea4:	d020      	beq.n	8025ee8 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5d4>
 8025ea6:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8025ea8:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 8025eac:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8025eae:	436f      	muls	r7, r5
 8025eb0:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8025eb2:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8025eb6:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 8025eba:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8025ebc:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8025ec0:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8025ec4:	fb05 fa0a 	mul.w	sl, r5, sl
 8025ec8:	44bc      	add	ip, r7
 8025eca:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8025ece:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8025ed2:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8025ed6:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8025eda:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8025ede:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8025ee2:	ea4c 050a 	orr.w	r5, ip, sl
 8025ee6:	950d      	str	r5, [sp, #52]	; 0x34
 8025ee8:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8025eea:	2dff      	cmp	r5, #255	; 0xff
 8025eec:	d020      	beq.n	8025f30 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x61c>
 8025eee:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8025ef0:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 8025ef4:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8025ef6:	436f      	muls	r7, r5
 8025ef8:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8025efa:	f405 4c7f 	and.w	ip, r5, #65280	; 0xff00
 8025efe:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8025f00:	fb05 fa0c 	mul.w	sl, r5, ip
 8025f04:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8025f08:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8025f0c:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8025f10:	44bc      	add	ip, r7
 8025f12:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8025f16:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8025f1a:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8025f1e:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8025f22:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8025f26:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8025f2a:	ea4c 050a 	orr.w	r5, ip, sl
 8025f2e:	9509      	str	r5, [sp, #36]	; 0x24
 8025f30:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8025f32:	2dff      	cmp	r5, #255	; 0xff
 8025f34:	d020      	beq.n	8025f78 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x664>
 8025f36:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8025f38:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 8025f3c:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8025f3e:	436f      	muls	r7, r5
 8025f40:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8025f42:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8025f46:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 8025f4a:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8025f4c:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8025f50:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8025f54:	fb05 fa0a 	mul.w	sl, r5, sl
 8025f58:	44bc      	add	ip, r7
 8025f5a:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8025f5e:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8025f62:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8025f66:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8025f6a:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8025f6e:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8025f72:	ea4c 050a 	orr.w	r5, ip, sl
 8025f76:	950e      	str	r5, [sp, #56]	; 0x38
 8025f78:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8025f7a:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 8025f7e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8025f82:	2aff      	cmp	r2, #255	; 0xff
 8025f84:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 8025f88:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8025f8a:	fb0e f707 	mul.w	r7, lr, r7
 8025f8e:	fb01 770c 	mla	r7, r1, ip, r7
 8025f92:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 8025f96:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8025f98:	fb00 770c 	mla	r7, r0, ip, r7
 8025f9c:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 8025fa0:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8025fa2:	fb09 770c 	mla	r7, r9, ip, r7
 8025fa6:	f405 4c7f 	and.w	ip, r5, #65280	; 0xff00
 8025faa:	fb0e fe0c 	mul.w	lr, lr, ip
 8025fae:	ea4f 2717 	mov.w	r7, r7, lsr #8
 8025fb2:	fb01 e303 	mla	r3, r1, r3, lr
 8025fb6:	9909      	ldr	r1, [sp, #36]	; 0x24
 8025fb8:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8025fbc:	f401 4a7f 	and.w	sl, r1, #65280	; 0xff00
 8025fc0:	990e      	ldr	r1, [sp, #56]	; 0x38
 8025fc2:	fb00 330a 	mla	r3, r0, sl, r3
 8025fc6:	f401 4c7f 	and.w	ip, r1, #65280	; 0xff00
 8025fca:	fb09 3c0c 	mla	ip, r9, ip, r3
 8025fce:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8025fd2:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8025fd6:	ea47 070c 	orr.w	r7, r7, ip
 8025fda:	ea4f 2317 	mov.w	r3, r7, lsr #8
 8025fde:	d045      	beq.n	802606c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x758>
 8025fe0:	f8b8 1000 	ldrh.w	r1, [r8]
 8025fe4:	43d2      	mvns	r2, r2
 8025fe6:	ea4f 2c21 	mov.w	ip, r1, asr #8
 8025fea:	fa5f fe82 	uxtb.w	lr, r2
 8025fee:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8025ff2:	10c8      	asrs	r0, r1, #3
 8025ff4:	00ca      	lsls	r2, r1, #3
 8025ff6:	fb0c fc0e 	mul.w	ip, ip, lr
 8025ffa:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 8025ffe:	b2d2      	uxtb	r2, r2
 8026000:	f10c 0101 	add.w	r1, ip, #1
 8026004:	fb00 f00e 	mul.w	r0, r0, lr
 8026008:	fb02 f20e 	mul.w	r2, r2, lr
 802600c:	eb01 211c 	add.w	r1, r1, ip, lsr #8
 8026010:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8026014:	b2ff      	uxtb	r7, r7
 8026016:	eb0c 2c11 	add.w	ip, ip, r1, lsr #8
 802601a:	491e      	ldr	r1, [pc, #120]	; (8026094 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x780>)
 802601c:	ea01 2c0c 	and.w	ip, r1, ip, lsl #8
 8026020:	1c51      	adds	r1, r2, #1
 8026022:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 8026026:	eb07 2712 	add.w	r7, r7, r2, lsr #8
 802602a:	1c42      	adds	r2, r0, #1
 802602c:	ea4c 0cd7 	orr.w	ip, ip, r7, lsr #3
 8026030:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8026034:	b2df      	uxtb	r7, r3
 8026036:	eb07 2710 	add.w	r7, r7, r0, lsr #8
 802603a:	00ff      	lsls	r7, r7, #3
 802603c:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 8026040:	ea4c 0c07 	orr.w	ip, ip, r7
 8026044:	f8a8 c000 	strh.w	ip, [r8]
 8026048:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 802604a:	f108 0802 	add.w	r8, r8, #2
 802604e:	f10b 3bff 	add.w	fp, fp, #4294967295
 8026052:	441c      	add	r4, r3
 8026054:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8026056:	441e      	add	r6, r3
 8026058:	e63c      	b.n	8025cd4 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c0>
 802605a:	2800      	cmp	r0, #0
 802605c:	f43f aee3 	beq.w	8025e26 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x512>
 8026060:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 8026064:	9109      	str	r1, [sp, #36]	; 0x24
 8026066:	0e09      	lsrs	r1, r1, #24
 8026068:	9111      	str	r1, [sp, #68]	; 0x44
 802606a:	e6dc      	b.n	8025e26 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x512>
 802606c:	097a      	lsrs	r2, r7, #5
 802606e:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8026072:	f3c7 07c4 	ubfx	r7, r7, #3, #5
 8026076:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 802607a:	f023 0307 	bic.w	r3, r3, #7
 802607e:	4313      	orrs	r3, r2
 8026080:	431f      	orrs	r7, r3
 8026082:	f8a8 7000 	strh.w	r7, [r8]
 8026086:	e7df      	b.n	8026048 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x734>
 8026088:	b01b      	add	sp, #108	; 0x6c
 802608a:	ecbd 8b08 	vpop	{d8-d11}
 802608e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8026092:	bf00      	nop
 8026094:	fffff800 	.word	0xfffff800

08026098 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh>:
 8026098:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802609c:	e9dd c40a 	ldrd	ip, r4, [sp, #40]	; 0x28
 80260a0:	f9bd 8020 	ldrsh.w	r8, [sp, #32]
 80260a4:	2c00      	cmp	r4, #0
 80260a6:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	; 0x24
 80260aa:	f89d 5030 	ldrb.w	r5, [sp, #48]	; 0x30
 80260ae:	fb04 ce03 	mla	lr, r4, r3, ip
 80260b2:	f89d 7034 	ldrb.w	r7, [sp, #52]	; 0x34
 80260b6:	db60      	blt.n	802617a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xe2>
 80260b8:	45a1      	cmp	r9, r4
 80260ba:	dd5e      	ble.n	802617a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xe2>
 80260bc:	f1bc 0f00 	cmp.w	ip, #0
 80260c0:	db59      	blt.n	8026176 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xde>
 80260c2:	45e0      	cmp	r8, ip
 80260c4:	dd57      	ble.n	8026176 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xde>
 80260c6:	ea4f 005e 	mov.w	r0, lr, lsr #1
 80260ca:	f01e 0f01 	tst.w	lr, #1
 80260ce:	5c16      	ldrb	r6, [r2, r0]
 80260d0:	bf0c      	ite	eq
 80260d2:	f006 060f 	andeq.w	r6, r6, #15
 80260d6:	1136      	asrne	r6, r6, #4
 80260d8:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 80260dc:	b2f6      	uxtb	r6, r6
 80260de:	f11c 0001 	adds.w	r0, ip, #1
 80260e2:	d44d      	bmi.n	8026180 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xe8>
 80260e4:	4580      	cmp	r8, r0
 80260e6:	dd4b      	ble.n	8026180 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xe8>
 80260e8:	2d00      	cmp	r5, #0
 80260ea:	d04b      	beq.n	8026184 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xec>
 80260ec:	f10e 0a01 	add.w	sl, lr, #1
 80260f0:	ea4f 005a 	mov.w	r0, sl, lsr #1
 80260f4:	f01a 0f01 	tst.w	sl, #1
 80260f8:	5c10      	ldrb	r0, [r2, r0]
 80260fa:	bf0c      	ite	eq
 80260fc:	f000 000f 	andeq.w	r0, r0, #15
 8026100:	1100      	asrne	r0, r0, #4
 8026102:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8026106:	b2c0      	uxtb	r0, r0
 8026108:	3401      	adds	r4, #1
 802610a:	d43f      	bmi.n	802618c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xf4>
 802610c:	45a1      	cmp	r9, r4
 802610e:	dd3d      	ble.n	802618c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xf4>
 8026110:	2f00      	cmp	r7, #0
 8026112:	f000 809e 	beq.w	8026252 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x1ba>
 8026116:	f1bc 0f00 	cmp.w	ip, #0
 802611a:	db35      	blt.n	8026188 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xf0>
 802611c:	45e0      	cmp	r8, ip
 802611e:	dd33      	ble.n	8026188 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xf0>
 8026120:	eb03 090e 	add.w	r9, r3, lr
 8026124:	ea4f 0459 	mov.w	r4, r9, lsr #1
 8026128:	f019 0f01 	tst.w	r9, #1
 802612c:	5d14      	ldrb	r4, [r2, r4]
 802612e:	bf0c      	ite	eq
 8026130:	f004 040f 	andeq.w	r4, r4, #15
 8026134:	1124      	asrne	r4, r4, #4
 8026136:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 802613a:	b2e4      	uxtb	r4, r4
 802613c:	f11c 0c01 	adds.w	ip, ip, #1
 8026140:	d427      	bmi.n	8026192 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xfa>
 8026142:	45e0      	cmp	r8, ip
 8026144:	dd25      	ble.n	8026192 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xfa>
 8026146:	b335      	cbz	r5, 8026196 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xfe>
 8026148:	3301      	adds	r3, #1
 802614a:	449e      	add	lr, r3
 802614c:	ea4f 035e 	mov.w	r3, lr, lsr #1
 8026150:	f01e 0f01 	tst.w	lr, #1
 8026154:	5cd2      	ldrb	r2, [r2, r3]
 8026156:	bf0c      	ite	eq
 8026158:	f002 020f 	andeq.w	r2, r2, #15
 802615c:	1112      	asrne	r2, r2, #4
 802615e:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8026162:	b2d3      	uxtb	r3, r2
 8026164:	2d0f      	cmp	r5, #15
 8026166:	d917      	bls.n	8026198 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x100>
 8026168:	4b3c      	ldr	r3, [pc, #240]	; (802625c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x1c4>)
 802616a:	f240 210d 	movw	r1, #525	; 0x20d
 802616e:	4a3c      	ldr	r2, [pc, #240]	; (8026260 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x1c8>)
 8026170:	483c      	ldr	r0, [pc, #240]	; (8026264 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x1cc>)
 8026172:	f000 ffd9 	bl	8027128 <__assert_func>
 8026176:	2600      	movs	r6, #0
 8026178:	e7b1      	b.n	80260de <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x46>
 802617a:	2000      	movs	r0, #0
 802617c:	4606      	mov	r6, r0
 802617e:	e7c3      	b.n	8026108 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x70>
 8026180:	2000      	movs	r0, #0
 8026182:	e7c1      	b.n	8026108 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x70>
 8026184:	4628      	mov	r0, r5
 8026186:	e7bf      	b.n	8026108 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x70>
 8026188:	2400      	movs	r4, #0
 802618a:	e7d7      	b.n	802613c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xa4>
 802618c:	2300      	movs	r3, #0
 802618e:	461c      	mov	r4, r3
 8026190:	e7e8      	b.n	8026164 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xcc>
 8026192:	2300      	movs	r3, #0
 8026194:	e7e6      	b.n	8026164 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xcc>
 8026196:	462b      	mov	r3, r5
 8026198:	2f0f      	cmp	r7, #15
 802619a:	d8e5      	bhi.n	8026168 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xd0>
 802619c:	b2ad      	uxth	r5, r5
 802619e:	b2bf      	uxth	r7, r7
 80261a0:	fb05 fc07 	mul.w	ip, r5, r7
 80261a4:	012d      	lsls	r5, r5, #4
 80261a6:	ebcc 1707 	rsb	r7, ip, r7, lsl #4
 80261aa:	f5c5 7280 	rsb	r2, r5, #256	; 0x100
 80261ae:	eba5 050c 	sub.w	r5, r5, ip
 80261b2:	b2bf      	uxth	r7, r7
 80261b4:	b2ad      	uxth	r5, r5
 80261b6:	1bd2      	subs	r2, r2, r7
 80261b8:	4368      	muls	r0, r5
 80261ba:	b292      	uxth	r2, r2
 80261bc:	fb06 0002 	mla	r0, r6, r2, r0
 80261c0:	fb07 0404 	mla	r4, r7, r4, r0
 80261c4:	fb0c 4303 	mla	r3, ip, r3, r4
 80261c8:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80261cc:	2b00      	cmp	r3, #0
 80261ce:	d03e      	beq.n	802624e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x1b6>
 80261d0:	f89d 0038 	ldrb.w	r0, [sp, #56]	; 0x38
 80261d4:	4a24      	ldr	r2, [pc, #144]	; (8026268 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x1d0>)
 80261d6:	4343      	muls	r3, r0
 80261d8:	6816      	ldr	r6, [r2, #0]
 80261da:	1c58      	adds	r0, r3, #1
 80261dc:	880a      	ldrh	r2, [r1, #0]
 80261de:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 80261e2:	1215      	asrs	r5, r2, #8
 80261e4:	1200      	asrs	r0, r0, #8
 80261e6:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 80261ea:	10d7      	asrs	r7, r2, #3
 80261ec:	b284      	uxth	r4, r0
 80261ee:	43c0      	mvns	r0, r0
 80261f0:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 80261f4:	00d2      	lsls	r2, r2, #3
 80261f6:	b2c3      	uxtb	r3, r0
 80261f8:	0a30      	lsrs	r0, r6, #8
 80261fa:	fb15 f503 	smulbb	r5, r5, r3
 80261fe:	b2d2      	uxtb	r2, r2
 8026200:	fb17 f703 	smulbb	r7, r7, r3
 8026204:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8026208:	fb12 f303 	smulbb	r3, r2, r3
 802620c:	fb00 5004 	mla	r0, r0, r4, r5
 8026210:	08f5      	lsrs	r5, r6, #3
 8026212:	00f6      	lsls	r6, r6, #3
 8026214:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 8026218:	b280      	uxth	r0, r0
 802621a:	b2f6      	uxtb	r6, r6
 802621c:	fb05 7504 	mla	r5, r5, r4, r7
 8026220:	fb06 3304 	mla	r3, r6, r4, r3
 8026224:	1c44      	adds	r4, r0, #1
 8026226:	b2ad      	uxth	r5, r5
 8026228:	b29a      	uxth	r2, r3
 802622a:	1c6b      	adds	r3, r5, #1
 802622c:	eb04 2010 	add.w	r0, r4, r0, lsr #8
 8026230:	eb03 2315 	add.w	r3, r3, r5, lsr #8
 8026234:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
 8026238:	095b      	lsrs	r3, r3, #5
 802623a:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 802623e:	4303      	orrs	r3, r0
 8026240:	1c50      	adds	r0, r2, #1
 8026242:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 8026246:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 802624a:	4313      	orrs	r3, r2
 802624c:	800b      	strh	r3, [r1, #0]
 802624e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8026252:	2d0f      	cmp	r5, #15
 8026254:	d888      	bhi.n	8026168 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xd0>
 8026256:	463b      	mov	r3, r7
 8026258:	463c      	mov	r4, r7
 802625a:	e79f      	b.n	802619c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x104>
 802625c:	0802b942 	.word	0x0802b942
 8026260:	0802bf05 	.word	0x0802bf05
 8026264:	0802ba2b 	.word	0x0802ba2b
 8026268:	20005814 	.word	0x20005814

0802626c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 802626c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026270:	ed2d 8b08 	vpush	{d8-d11}
 8026274:	b097      	sub	sp, #92	; 0x5c
 8026276:	eeb0 aa40 	vmov.f32	s20, s0
 802627a:	eef0 9a60 	vmov.f32	s19, s1
 802627e:	9214      	str	r2, [sp, #80]	; 0x50
 8026280:	eeb0 9a41 	vmov.f32	s18, s2
 8026284:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8026286:	eeb0 8a62 	vmov.f32	s16, s5
 802628a:	9309      	str	r3, [sp, #36]	; 0x24
 802628c:	eef0 8a43 	vmov.f32	s17, s6
 8026290:	f89d 30c4 	ldrb.w	r3, [sp, #196]	; 0xc4
 8026294:	eef0 ba44 	vmov.f32	s23, s8
 8026298:	9015      	str	r0, [sp, #84]	; 0x54
 802629a:	eeb0 ba64 	vmov.f32	s22, s9
 802629e:	6850      	ldr	r0, [r2, #4]
 80262a0:	eef0 aa45 	vmov.f32	s21, s10
 80262a4:	910d      	str	r1, [sp, #52]	; 0x34
 80262a6:	930e      	str	r3, [sp, #56]	; 0x38
 80262a8:	6812      	ldr	r2, [r2, #0]
 80262aa:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	; 0xb8
 80262ae:	e9dd 4629 	ldrd	r4, r6, [sp, #164]	; 0xa4
 80262b2:	fb00 1303 	mla	r3, r0, r3, r1
 80262b6:	eb02 0a43 	add.w	sl, r2, r3, lsl #1
 80262ba:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 80262bc:	689b      	ldr	r3, [r3, #8]
 80262be:	3301      	adds	r3, #1
 80262c0:	f023 0301 	bic.w	r3, r3, #1
 80262c4:	930a      	str	r3, [sp, #40]	; 0x28
 80262c6:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 80262c8:	681f      	ldr	r7, [r3, #0]
 80262ca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80262cc:	2b00      	cmp	r3, #0
 80262ce:	dc03      	bgt.n	80262d8 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 80262d0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80262d2:	2b00      	cmp	r3, #0
 80262d4:	f340 826b 	ble.w	80267ae <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x542>
 80262d8:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 80262da:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80262de:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80262e2:	1e48      	subs	r0, r1, #1
 80262e4:	f102 3cff 	add.w	ip, r2, #4294967295
 80262e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80262ea:	2b00      	cmp	r3, #0
 80262ec:	f340 80f4 	ble.w	80264d8 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26c>
 80262f0:	ea5f 4e24 	movs.w	lr, r4, asr #16
 80262f4:	ea4f 4326 	mov.w	r3, r6, asr #16
 80262f8:	d406      	bmi.n	8026308 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 80262fa:	4586      	cmp	lr, r0
 80262fc:	da04      	bge.n	8026308 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 80262fe:	2b00      	cmp	r3, #0
 8026300:	db02      	blt.n	8026308 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 8026302:	4563      	cmp	r3, ip
 8026304:	f2c0 80e9 	blt.w	80264da <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26e>
 8026308:	f11e 0e01 	adds.w	lr, lr, #1
 802630c:	f100 80da 	bmi.w	80264c4 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x258>
 8026310:	4571      	cmp	r1, lr
 8026312:	f2c0 80d7 	blt.w	80264c4 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x258>
 8026316:	3301      	adds	r3, #1
 8026318:	f100 80d4 	bmi.w	80264c4 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x258>
 802631c:	429a      	cmp	r2, r3
 802631e:	f2c0 80d1 	blt.w	80264c4 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x258>
 8026322:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
 8026326:	46d0      	mov	r8, sl
 8026328:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 802632c:	930f      	str	r3, [sp, #60]	; 0x3c
 802632e:	f1b9 0f00 	cmp.w	r9, #0
 8026332:	f340 80f1 	ble.w	8026518 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ac>
 8026336:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8026338:	1430      	asrs	r0, r6, #16
 802633a:	f3c4 3203 	ubfx	r2, r4, #12, #4
 802633e:	f3c6 3103 	ubfx	r1, r6, #12, #4
 8026342:	e9d3 ce02 	ldrd	ip, lr, [r3, #8]
 8026346:	1423      	asrs	r3, r4, #16
 8026348:	f100 813b 	bmi.w	80265c2 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 802634c:	f10c 3bff 	add.w	fp, ip, #4294967295
 8026350:	455b      	cmp	r3, fp
 8026352:	f280 8136 	bge.w	80265c2 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 8026356:	2800      	cmp	r0, #0
 8026358:	f2c0 8133 	blt.w	80265c2 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 802635c:	f10e 3bff 	add.w	fp, lr, #4294967295
 8026360:	4558      	cmp	r0, fp
 8026362:	f280 812e 	bge.w	80265c2 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 8026366:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8026368:	fb00 3305 	mla	r3, r0, r5, r3
 802636c:	0858      	lsrs	r0, r3, #1
 802636e:	07dd      	lsls	r5, r3, #31
 8026370:	f817 c000 	ldrb.w	ip, [r7, r0]
 8026374:	bf54      	ite	pl
 8026376:	f00c 0c0f 	andpl.w	ip, ip, #15
 802637a:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 802637e:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8026382:	fa5f fc8c 	uxtb.w	ip, ip
 8026386:	2a00      	cmp	r2, #0
 8026388:	f000 810a 	beq.w	80265a0 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x334>
 802638c:	1c58      	adds	r0, r3, #1
 802638e:	ea4f 0e50 	mov.w	lr, r0, lsr #1
 8026392:	07c0      	lsls	r0, r0, #31
 8026394:	f817 e00e 	ldrb.w	lr, [r7, lr]
 8026398:	bf54      	ite	pl
 802639a:	f00e 0e0f 	andpl.w	lr, lr, #15
 802639e:	ea4f 1e2e 	movmi.w	lr, lr, asr #4
 80263a2:	eb0e 1e0e 	add.w	lr, lr, lr, lsl #4
 80263a6:	fa5f f08e 	uxtb.w	r0, lr
 80263aa:	9010      	str	r0, [sp, #64]	; 0x40
 80263ac:	b1e1      	cbz	r1, 80263e8 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 80263ae:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80263b0:	4403      	add	r3, r0
 80263b2:	0858      	lsrs	r0, r3, #1
 80263b4:	07dd      	lsls	r5, r3, #31
 80263b6:	f103 0301 	add.w	r3, r3, #1
 80263ba:	5c38      	ldrb	r0, [r7, r0]
 80263bc:	bf54      	ite	pl
 80263be:	f000 000f 	andpl.w	r0, r0, #15
 80263c2:	1100      	asrmi	r0, r0, #4
 80263c4:	07dd      	lsls	r5, r3, #31
 80263c6:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 80263ca:	b2c0      	uxtb	r0, r0
 80263cc:	900b      	str	r0, [sp, #44]	; 0x2c
 80263ce:	ea4f 0053 	mov.w	r0, r3, lsr #1
 80263d2:	f817 e000 	ldrb.w	lr, [r7, r0]
 80263d6:	bf54      	ite	pl
 80263d8:	f00e 030f 	andpl.w	r3, lr, #15
 80263dc:	ea4f 132e 	movmi.w	r3, lr, asr #4
 80263e0:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 80263e4:	b2db      	uxtb	r3, r3
 80263e6:	9311      	str	r3, [sp, #68]	; 0x44
 80263e8:	b292      	uxth	r2, r2
 80263ea:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80263ec:	b289      	uxth	r1, r1
 80263ee:	fb02 f301 	mul.w	r3, r2, r1
 80263f2:	0112      	lsls	r2, r2, #4
 80263f4:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 80263f8:	f5c2 7080 	rsb	r0, r2, #256	; 0x100
 80263fc:	1ad2      	subs	r2, r2, r3
 80263fe:	b289      	uxth	r1, r1
 8026400:	b292      	uxth	r2, r2
 8026402:	1a40      	subs	r0, r0, r1
 8026404:	436a      	muls	r2, r5
 8026406:	b280      	uxth	r0, r0
 8026408:	fb0c 2c00 	mla	ip, ip, r0, r2
 802640c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 802640e:	fb01 c102 	mla	r1, r1, r2, ip
 8026412:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8026414:	fb03 1302 	mla	r3, r3, r2, r1
 8026418:	f3c3 2307 	ubfx	r3, r3, #8, #8
 802641c:	2b00      	cmp	r3, #0
 802641e:	d048      	beq.n	80264b2 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x246>
 8026420:	990e      	ldr	r1, [sp, #56]	; 0x38
 8026422:	4a78      	ldr	r2, [pc, #480]	; (8026604 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x398>)
 8026424:	434b      	muls	r3, r1
 8026426:	f8d2 e000 	ldr.w	lr, [r2]
 802642a:	1c59      	adds	r1, r3, #1
 802642c:	f8b8 2000 	ldrh.w	r2, [r8]
 8026430:	ea4f 201e 	mov.w	r0, lr, lsr #8
 8026434:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 8026438:	ea4f 2c22 	mov.w	ip, r2, asr #8
 802643c:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8026440:	121b      	asrs	r3, r3, #8
 8026442:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8026446:	ea4f 0be2 	mov.w	fp, r2, asr #3
 802644a:	b299      	uxth	r1, r3
 802644c:	43db      	mvns	r3, r3
 802644e:	f00b 0bfc 	and.w	fp, fp, #252	; 0xfc
 8026452:	00d2      	lsls	r2, r2, #3
 8026454:	b2db      	uxtb	r3, r3
 8026456:	b2d2      	uxtb	r2, r2
 8026458:	fb1c fc03 	smulbb	ip, ip, r3
 802645c:	fb1b fb03 	smulbb	fp, fp, r3
 8026460:	fb00 c001 	mla	r0, r0, r1, ip
 8026464:	ea4f 0cde 	mov.w	ip, lr, lsr #3
 8026468:	fb12 f303 	smulbb	r3, r2, r3
 802646c:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 8026470:	f00c 0cfc 	and.w	ip, ip, #252	; 0xfc
 8026474:	b280      	uxth	r0, r0
 8026476:	fa5f fe8e 	uxtb.w	lr, lr
 802647a:	fb0c bc01 	mla	ip, ip, r1, fp
 802647e:	fb0e 3101 	mla	r1, lr, r1, r3
 8026482:	1c43      	adds	r3, r0, #1
 8026484:	fa1f fc8c 	uxth.w	ip, ip
 8026488:	b289      	uxth	r1, r1
 802648a:	f10c 0201 	add.w	r2, ip, #1
 802648e:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 8026492:	1c4b      	adds	r3, r1, #1
 8026494:	eb02 221c 	add.w	r2, r2, ip, lsr #8
 8026498:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
 802649c:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 80264a0:	0952      	lsrs	r2, r2, #5
 80264a2:	f3c1 21c4 	ubfx	r1, r1, #11, #5
 80264a6:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 80264aa:	4310      	orrs	r0, r2
 80264ac:	4308      	orrs	r0, r1
 80264ae:	f8a8 0000 	strh.w	r0, [r8]
 80264b2:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 80264b4:	f108 0802 	add.w	r8, r8, #2
 80264b8:	f109 39ff 	add.w	r9, r9, #4294967295
 80264bc:	441c      	add	r4, r3
 80264be:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80264c0:	441e      	add	r6, r3
 80264c2:	e734      	b.n	802632e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc2>
 80264c4:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 80264c6:	f10a 0a02 	add.w	sl, sl, #2
 80264ca:	441c      	add	r4, r3
 80264cc:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80264ce:	441e      	add	r6, r3
 80264d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80264d2:	3b01      	subs	r3, #1
 80264d4:	9309      	str	r3, [sp, #36]	; 0x24
 80264d6:	e707      	b.n	80262e8 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 80264d8:	d023      	beq.n	8026522 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b6>
 80264da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80264dc:	982b      	ldr	r0, [sp, #172]	; 0xac
 80264de:	3b01      	subs	r3, #1
 80264e0:	fb00 4003 	mla	r0, r0, r3, r4
 80264e4:	1400      	asrs	r0, r0, #16
 80264e6:	f53f af1c 	bmi.w	8026322 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 80264ea:	3901      	subs	r1, #1
 80264ec:	4288      	cmp	r0, r1
 80264ee:	f6bf af18 	bge.w	8026322 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 80264f2:	992c      	ldr	r1, [sp, #176]	; 0xb0
 80264f4:	fb01 6303 	mla	r3, r1, r3, r6
 80264f8:	141b      	asrs	r3, r3, #16
 80264fa:	f53f af12 	bmi.w	8026322 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 80264fe:	3a01      	subs	r2, #1
 8026500:	4293      	cmp	r3, r2
 8026502:	f6bf af0e 	bge.w	8026322 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 8026506:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
 802650a:	46d1      	mov	r9, sl
 802650c:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 8026510:	930f      	str	r3, [sp, #60]	; 0x3c
 8026512:	f1bb 0f00 	cmp.w	fp, #0
 8026516:	dc77      	bgt.n	8026608 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x39c>
 8026518:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802651a:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 802651e:	eb0a 0a45 	add.w	sl, sl, r5, lsl #1
 8026522:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8026524:	2b00      	cmp	r3, #0
 8026526:	f340 8142 	ble.w	80267ae <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x542>
 802652a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 802652e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8026530:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8026534:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8026538:	eef0 6a48 	vmov.f32	s13, s16
 802653c:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8026540:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8026544:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8026548:	ee16 4a90 	vmov	r4, s13
 802654c:	eef0 6a68 	vmov.f32	s13, s17
 8026550:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8026554:	ee16 6a90 	vmov	r6, s13
 8026558:	ee29 7aa7 	vmul.f32	s14, s19, s15
 802655c:	ee69 7a27 	vmul.f32	s15, s18, s15
 8026560:	ee37 8a48 	vsub.f32	s16, s14, s16
 8026564:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8026568:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 802656c:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8026570:	ee18 2a10 	vmov	r2, s16
 8026574:	eeb0 8a47 	vmov.f32	s16, s14
 8026578:	fb92 f3f3 	sdiv	r3, r2, r3
 802657c:	ee18 2a90 	vmov	r2, s17
 8026580:	932b      	str	r3, [sp, #172]	; 0xac
 8026582:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8026584:	eef0 8a67 	vmov.f32	s17, s15
 8026588:	fb92 f3f3 	sdiv	r3, r2, r3
 802658c:	932c      	str	r3, [sp, #176]	; 0xb0
 802658e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8026590:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8026592:	3b01      	subs	r3, #1
 8026594:	930d      	str	r3, [sp, #52]	; 0x34
 8026596:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8026598:	bf08      	it	eq
 802659a:	4613      	moveq	r3, r2
 802659c:	9309      	str	r3, [sp, #36]	; 0x24
 802659e:	e694      	b.n	80262ca <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 80265a0:	2900      	cmp	r1, #0
 80265a2:	f43f af21 	beq.w	80263e8 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 80265a6:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80265a8:	4418      	add	r0, r3
 80265aa:	0843      	lsrs	r3, r0, #1
 80265ac:	07c0      	lsls	r0, r0, #31
 80265ae:	5cfb      	ldrb	r3, [r7, r3]
 80265b0:	bf54      	ite	pl
 80265b2:	f003 030f 	andpl.w	r3, r3, #15
 80265b6:	111b      	asrmi	r3, r3, #4
 80265b8:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 80265bc:	b2db      	uxtb	r3, r3
 80265be:	930b      	str	r3, [sp, #44]	; 0x2c
 80265c0:	e712      	b.n	80263e8 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 80265c2:	f113 0b01 	adds.w	fp, r3, #1
 80265c6:	f53f af74 	bmi.w	80264b2 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x246>
 80265ca:	45dc      	cmp	ip, fp
 80265cc:	f6ff af71 	blt.w	80264b2 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x246>
 80265d0:	f110 0b01 	adds.w	fp, r0, #1
 80265d4:	f53f af6d 	bmi.w	80264b2 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x246>
 80265d8:	45de      	cmp	lr, fp
 80265da:	f6ff af6a 	blt.w	80264b2 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x246>
 80265de:	9302      	str	r3, [sp, #8]
 80265e0:	fa0f f38e 	sxth.w	r3, lr
 80265e4:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 80265e6:	9301      	str	r3, [sp, #4]
 80265e8:	fa0f f38c 	sxth.w	r3, ip
 80265ec:	e9cd 0203 	strd	r0, r2, [sp, #12]
 80265f0:	e9cd 1505 	strd	r1, r5, [sp, #20]
 80265f4:	9300      	str	r3, [sp, #0]
 80265f6:	463a      	mov	r2, r7
 80265f8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80265fa:	4641      	mov	r1, r8
 80265fc:	9815      	ldr	r0, [sp, #84]	; 0x54
 80265fe:	f7ff fd4b 	bl	8026098 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh>
 8026602:	e756      	b.n	80264b2 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x246>
 8026604:	20005814 	.word	0x20005814
 8026608:	1422      	asrs	r2, r4, #16
 802660a:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 802660c:	1433      	asrs	r3, r6, #16
 802660e:	f3c4 3103 	ubfx	r1, r4, #12, #4
 8026612:	f3c6 3003 	ubfx	r0, r6, #12, #4
 8026616:	fb05 2303 	mla	r3, r5, r3, r2
 802661a:	085a      	lsrs	r2, r3, #1
 802661c:	07dd      	lsls	r5, r3, #31
 802661e:	5cba      	ldrb	r2, [r7, r2]
 8026620:	bf54      	ite	pl
 8026622:	f002 020f 	andpl.w	r2, r2, #15
 8026626:	1112      	asrmi	r2, r2, #4
 8026628:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 802662c:	b2d2      	uxtb	r2, r2
 802662e:	2900      	cmp	r1, #0
 8026630:	f000 80a9 	beq.w	8026786 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x51a>
 8026634:	f103 0e01 	add.w	lr, r3, #1
 8026638:	ea4f 0c5e 	mov.w	ip, lr, lsr #1
 802663c:	f01e 0f01 	tst.w	lr, #1
 8026640:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8026644:	bf0c      	ite	eq
 8026646:	f00c 0c0f 	andeq.w	ip, ip, #15
 802664a:	ea4f 1c2c 	movne.w	ip, ip, asr #4
 802664e:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8026652:	fa5f f58c 	uxtb.w	r5, ip
 8026656:	9512      	str	r5, [sp, #72]	; 0x48
 8026658:	b308      	cbz	r0, 802669e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x432>
 802665a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 802665c:	442b      	add	r3, r5
 802665e:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8026662:	07dd      	lsls	r5, r3, #31
 8026664:	f103 0301 	add.w	r3, r3, #1
 8026668:	f817 c00c 	ldrb.w	ip, [r7, ip]
 802666c:	bf54      	ite	pl
 802666e:	f00c 0c0f 	andpl.w	ip, ip, #15
 8026672:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8026676:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 802667a:	fa5f f58c 	uxtb.w	r5, ip
 802667e:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8026682:	950c      	str	r5, [sp, #48]	; 0x30
 8026684:	07dd      	lsls	r5, r3, #31
 8026686:	f817 c00c 	ldrb.w	ip, [r7, ip]
 802668a:	bf54      	ite	pl
 802668c:	f00c 0c0f 	andpl.w	ip, ip, #15
 8026690:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8026694:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8026698:	fa5f f38c 	uxtb.w	r3, ip
 802669c:	9313      	str	r3, [sp, #76]	; 0x4c
 802669e:	b289      	uxth	r1, r1
 80266a0:	9d12      	ldr	r5, [sp, #72]	; 0x48
 80266a2:	b280      	uxth	r0, r0
 80266a4:	fb01 f300 	mul.w	r3, r1, r0
 80266a8:	0109      	lsls	r1, r1, #4
 80266aa:	ebc3 1000 	rsb	r0, r3, r0, lsl #4
 80266ae:	f5c1 7c80 	rsb	ip, r1, #256	; 0x100
 80266b2:	1ac9      	subs	r1, r1, r3
 80266b4:	b280      	uxth	r0, r0
 80266b6:	b289      	uxth	r1, r1
 80266b8:	ebac 0c00 	sub.w	ip, ip, r0
 80266bc:	4369      	muls	r1, r5
 80266be:	fa1f fc8c 	uxth.w	ip, ip
 80266c2:	fb02 120c 	mla	r2, r2, ip, r1
 80266c6:	990c      	ldr	r1, [sp, #48]	; 0x30
 80266c8:	fb00 2001 	mla	r0, r0, r1, r2
 80266cc:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80266ce:	fb03 0302 	mla	r3, r3, r2, r0
 80266d2:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80266d6:	2b00      	cmp	r3, #0
 80266d8:	d04c      	beq.n	8026774 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x508>
 80266da:	990e      	ldr	r1, [sp, #56]	; 0x38
 80266dc:	4a36      	ldr	r2, [pc, #216]	; (80267b8 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54c>)
 80266de:	434b      	muls	r3, r1
 80266e0:	f8d2 e000 	ldr.w	lr, [r2]
 80266e4:	1c59      	adds	r1, r3, #1
 80266e6:	f8b9 2000 	ldrh.w	r2, [r9]
 80266ea:	ea4f 201e 	mov.w	r0, lr, lsr #8
 80266ee:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 80266f2:	ea4f 2c22 	mov.w	ip, r2, asr #8
 80266f6:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 80266fa:	121b      	asrs	r3, r3, #8
 80266fc:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8026700:	ea4f 08e2 	mov.w	r8, r2, asr #3
 8026704:	b299      	uxth	r1, r3
 8026706:	43db      	mvns	r3, r3
 8026708:	f008 08fc 	and.w	r8, r8, #252	; 0xfc
 802670c:	00d2      	lsls	r2, r2, #3
 802670e:	b2db      	uxtb	r3, r3
 8026710:	b2d2      	uxtb	r2, r2
 8026712:	fb1c fc03 	smulbb	ip, ip, r3
 8026716:	fb18 f803 	smulbb	r8, r8, r3
 802671a:	fb00 c001 	mla	r0, r0, r1, ip
 802671e:	ea4f 0cde 	mov.w	ip, lr, lsr #3
 8026722:	fb12 f203 	smulbb	r2, r2, r3
 8026726:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 802672a:	f00c 0cfc 	and.w	ip, ip, #252	; 0xfc
 802672e:	b280      	uxth	r0, r0
 8026730:	fa5f fe8e 	uxtb.w	lr, lr
 8026734:	fb0c 8c01 	mla	ip, ip, r1, r8
 8026738:	fb0e 2201 	mla	r2, lr, r1, r2
 802673c:	fa1f fc8c 	uxth.w	ip, ip
 8026740:	b292      	uxth	r2, r2
 8026742:	f10c 0801 	add.w	r8, ip, #1
 8026746:	1c51      	adds	r1, r2, #1
 8026748:	eb08 2c1c 	add.w	ip, r8, ip, lsr #8
 802674c:	f100 0801 	add.w	r8, r0, #1
 8026750:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 8026754:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 8026758:	eb08 2010 	add.w	r0, r8, r0, lsr #8
 802675c:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 8026760:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 8026764:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
 8026768:	ea4c 0c00 	orr.w	ip, ip, r0
 802676c:	ea4c 0c02 	orr.w	ip, ip, r2
 8026770:	f8a9 c000 	strh.w	ip, [r9]
 8026774:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8026776:	f109 0902 	add.w	r9, r9, #2
 802677a:	f10b 3bff 	add.w	fp, fp, #4294967295
 802677e:	441c      	add	r4, r3
 8026780:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8026782:	441e      	add	r6, r3
 8026784:	e6c5      	b.n	8026512 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a6>
 8026786:	2800      	cmp	r0, #0
 8026788:	d089      	beq.n	802669e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x432>
 802678a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 802678c:	442b      	add	r3, r5
 802678e:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8026792:	07db      	lsls	r3, r3, #31
 8026794:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8026798:	bf54      	ite	pl
 802679a:	f00c 0c0f 	andpl.w	ip, ip, #15
 802679e:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 80267a2:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 80267a6:	fa5f f38c 	uxtb.w	r3, ip
 80267aa:	930c      	str	r3, [sp, #48]	; 0x30
 80267ac:	e777      	b.n	802669e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x432>
 80267ae:	b017      	add	sp, #92	; 0x5c
 80267b0:	ecbd 8b08 	vpop	{d8-d11}
 80267b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80267b8:	20005814 	.word	0x20005814

080267bc <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh>:
 80267bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80267c0:	e9dd c40a 	ldrd	ip, r4, [sp, #40]	; 0x28
 80267c4:	f9bd 8020 	ldrsh.w	r8, [sp, #32]
 80267c8:	2c00      	cmp	r4, #0
 80267ca:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	; 0x24
 80267ce:	f89d 5030 	ldrb.w	r5, [sp, #48]	; 0x30
 80267d2:	fb04 ce03 	mla	lr, r4, r3, ip
 80267d6:	f89d 7034 	ldrb.w	r7, [sp, #52]	; 0x34
 80267da:	db60      	blt.n	802689e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xe2>
 80267dc:	45a1      	cmp	r9, r4
 80267de:	dd5e      	ble.n	802689e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xe2>
 80267e0:	f1bc 0f00 	cmp.w	ip, #0
 80267e4:	db59      	blt.n	802689a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xde>
 80267e6:	45e0      	cmp	r8, ip
 80267e8:	dd57      	ble.n	802689a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xde>
 80267ea:	ea4f 005e 	mov.w	r0, lr, lsr #1
 80267ee:	f01e 0f01 	tst.w	lr, #1
 80267f2:	5c16      	ldrb	r6, [r2, r0]
 80267f4:	bf0c      	ite	eq
 80267f6:	f006 060f 	andeq.w	r6, r6, #15
 80267fa:	1136      	asrne	r6, r6, #4
 80267fc:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 8026800:	b2f6      	uxtb	r6, r6
 8026802:	f11c 0001 	adds.w	r0, ip, #1
 8026806:	d44d      	bmi.n	80268a4 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xe8>
 8026808:	4580      	cmp	r8, r0
 802680a:	dd4b      	ble.n	80268a4 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xe8>
 802680c:	2d00      	cmp	r5, #0
 802680e:	d04b      	beq.n	80268a8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xec>
 8026810:	f10e 0a01 	add.w	sl, lr, #1
 8026814:	ea4f 005a 	mov.w	r0, sl, lsr #1
 8026818:	f01a 0f01 	tst.w	sl, #1
 802681c:	5c10      	ldrb	r0, [r2, r0]
 802681e:	bf0c      	ite	eq
 8026820:	f000 000f 	andeq.w	r0, r0, #15
 8026824:	1100      	asrne	r0, r0, #4
 8026826:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 802682a:	b2c0      	uxtb	r0, r0
 802682c:	3401      	adds	r4, #1
 802682e:	d43f      	bmi.n	80268b0 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xf4>
 8026830:	45a1      	cmp	r9, r4
 8026832:	dd3d      	ble.n	80268b0 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xf4>
 8026834:	2f00      	cmp	r7, #0
 8026836:	f000 8097 	beq.w	8026968 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1ac>
 802683a:	f1bc 0f00 	cmp.w	ip, #0
 802683e:	db35      	blt.n	80268ac <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xf0>
 8026840:	45e0      	cmp	r8, ip
 8026842:	dd33      	ble.n	80268ac <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xf0>
 8026844:	eb03 090e 	add.w	r9, r3, lr
 8026848:	ea4f 0459 	mov.w	r4, r9, lsr #1
 802684c:	f019 0f01 	tst.w	r9, #1
 8026850:	5d14      	ldrb	r4, [r2, r4]
 8026852:	bf0c      	ite	eq
 8026854:	f004 040f 	andeq.w	r4, r4, #15
 8026858:	1124      	asrne	r4, r4, #4
 802685a:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 802685e:	b2e4      	uxtb	r4, r4
 8026860:	f11c 0c01 	adds.w	ip, ip, #1
 8026864:	d427      	bmi.n	80268b6 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xfa>
 8026866:	45e0      	cmp	r8, ip
 8026868:	dd25      	ble.n	80268b6 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xfa>
 802686a:	b335      	cbz	r5, 80268ba <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xfe>
 802686c:	3301      	adds	r3, #1
 802686e:	449e      	add	lr, r3
 8026870:	ea4f 035e 	mov.w	r3, lr, lsr #1
 8026874:	f01e 0f01 	tst.w	lr, #1
 8026878:	5cd2      	ldrb	r2, [r2, r3]
 802687a:	bf0c      	ite	eq
 802687c:	f002 020f 	andeq.w	r2, r2, #15
 8026880:	1112      	asrne	r2, r2, #4
 8026882:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8026886:	b2d3      	uxtb	r3, r2
 8026888:	2d0f      	cmp	r5, #15
 802688a:	d917      	bls.n	80268bc <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x100>
 802688c:	4b39      	ldr	r3, [pc, #228]	; (8026974 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1b8>)
 802688e:	f240 210d 	movw	r1, #525	; 0x20d
 8026892:	4a39      	ldr	r2, [pc, #228]	; (8026978 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1bc>)
 8026894:	4839      	ldr	r0, [pc, #228]	; (802697c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1c0>)
 8026896:	f000 fc47 	bl	8027128 <__assert_func>
 802689a:	2600      	movs	r6, #0
 802689c:	e7b1      	b.n	8026802 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x46>
 802689e:	2000      	movs	r0, #0
 80268a0:	4606      	mov	r6, r0
 80268a2:	e7c3      	b.n	802682c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x70>
 80268a4:	2000      	movs	r0, #0
 80268a6:	e7c1      	b.n	802682c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x70>
 80268a8:	4628      	mov	r0, r5
 80268aa:	e7bf      	b.n	802682c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x70>
 80268ac:	2400      	movs	r4, #0
 80268ae:	e7d7      	b.n	8026860 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xa4>
 80268b0:	2300      	movs	r3, #0
 80268b2:	461c      	mov	r4, r3
 80268b4:	e7e8      	b.n	8026888 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xcc>
 80268b6:	2300      	movs	r3, #0
 80268b8:	e7e6      	b.n	8026888 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xcc>
 80268ba:	462b      	mov	r3, r5
 80268bc:	2f0f      	cmp	r7, #15
 80268be:	d8e5      	bhi.n	802688c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xd0>
 80268c0:	b2ad      	uxth	r5, r5
 80268c2:	b2bf      	uxth	r7, r7
 80268c4:	fb05 fc07 	mul.w	ip, r5, r7
 80268c8:	012d      	lsls	r5, r5, #4
 80268ca:	ebcc 1707 	rsb	r7, ip, r7, lsl #4
 80268ce:	f5c5 7280 	rsb	r2, r5, #256	; 0x100
 80268d2:	eba5 050c 	sub.w	r5, r5, ip
 80268d6:	b2bf      	uxth	r7, r7
 80268d8:	b2ad      	uxth	r5, r5
 80268da:	1bd2      	subs	r2, r2, r7
 80268dc:	4368      	muls	r0, r5
 80268de:	b292      	uxth	r2, r2
 80268e0:	fb06 0002 	mla	r0, r6, r2, r0
 80268e4:	fb07 0404 	mla	r4, r7, r4, r0
 80268e8:	fb0c 4303 	mla	r3, ip, r3, r4
 80268ec:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80268f0:	2b00      	cmp	r3, #0
 80268f2:	d037      	beq.n	8026964 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1a8>
 80268f4:	4a22      	ldr	r2, [pc, #136]	; (8026980 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1c4>)
 80268f6:	b298      	uxth	r0, r3
 80268f8:	43db      	mvns	r3, r3
 80268fa:	6816      	ldr	r6, [r2, #0]
 80268fc:	880a      	ldrh	r2, [r1, #0]
 80268fe:	b2db      	uxtb	r3, r3
 8026900:	0a34      	lsrs	r4, r6, #8
 8026902:	1215      	asrs	r5, r2, #8
 8026904:	10d7      	asrs	r7, r2, #3
 8026906:	f004 04f8 	and.w	r4, r4, #248	; 0xf8
 802690a:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 802690e:	00d2      	lsls	r2, r2, #3
 8026910:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 8026914:	fb15 f503 	smulbb	r5, r5, r3
 8026918:	b2d2      	uxtb	r2, r2
 802691a:	fb17 f703 	smulbb	r7, r7, r3
 802691e:	fb04 5400 	mla	r4, r4, r0, r5
 8026922:	08f5      	lsrs	r5, r6, #3
 8026924:	fb12 f303 	smulbb	r3, r2, r3
 8026928:	00f6      	lsls	r6, r6, #3
 802692a:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 802692e:	b2a4      	uxth	r4, r4
 8026930:	b2f6      	uxtb	r6, r6
 8026932:	fb05 7500 	mla	r5, r5, r0, r7
 8026936:	1c62      	adds	r2, r4, #1
 8026938:	fb06 3000 	mla	r0, r6, r0, r3
 802693c:	b2ad      	uxth	r5, r5
 802693e:	b280      	uxth	r0, r0
 8026940:	1c6b      	adds	r3, r5, #1
 8026942:	eb02 2414 	add.w	r4, r2, r4, lsr #8
 8026946:	1c42      	adds	r2, r0, #1
 8026948:	eb03 2315 	add.w	r3, r3, r5, lsr #8
 802694c:	f404 4478 	and.w	r4, r4, #63488	; 0xf800
 8026950:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8026954:	095b      	lsrs	r3, r3, #5
 8026956:	f3c0 20c4 	ubfx	r0, r0, #11, #5
 802695a:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 802695e:	4323      	orrs	r3, r4
 8026960:	4303      	orrs	r3, r0
 8026962:	800b      	strh	r3, [r1, #0]
 8026964:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8026968:	2d0f      	cmp	r5, #15
 802696a:	d88f      	bhi.n	802688c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xd0>
 802696c:	463b      	mov	r3, r7
 802696e:	463c      	mov	r4, r7
 8026970:	e7a6      	b.n	80268c0 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x104>
 8026972:	bf00      	nop
 8026974:	0802b942 	.word	0x0802b942
 8026978:	0802bf05 	.word	0x0802bf05
 802697c:	0802ba2b 	.word	0x0802ba2b
 8026980:	20005814 	.word	0x20005814

08026984 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8026984:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026988:	ed2d 8b08 	vpush	{d8-d11}
 802698c:	b093      	sub	sp, #76	; 0x4c
 802698e:	461d      	mov	r5, r3
 8026990:	eeb0 aa40 	vmov.f32	s20, s0
 8026994:	920c      	str	r2, [sp, #48]	; 0x30
 8026996:	eef0 9a60 	vmov.f32	s19, s1
 802699a:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 802699c:	eeb0 9a41 	vmov.f32	s18, s2
 80269a0:	9011      	str	r0, [sp, #68]	; 0x44
 80269a2:	eeb0 8a62 	vmov.f32	s16, s5
 80269a6:	6850      	ldr	r0, [r2, #4]
 80269a8:	eef0 8a43 	vmov.f32	s17, s6
 80269ac:	9107      	str	r1, [sp, #28]
 80269ae:	eef0 ba44 	vmov.f32	s23, s8
 80269b2:	6812      	ldr	r2, [r2, #0]
 80269b4:	eeb0 ba64 	vmov.f32	s22, s9
 80269b8:	eef0 aa45 	vmov.f32	s21, s10
 80269bc:	e9dd 132a 	ldrd	r1, r3, [sp, #168]	; 0xa8
 80269c0:	e9dd 4625 	ldrd	r4, r6, [sp, #148]	; 0x94
 80269c4:	fb00 1303 	mla	r3, r0, r3, r1
 80269c8:	eb02 0943 	add.w	r9, r2, r3, lsl #1
 80269cc:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80269ce:	689b      	ldr	r3, [r3, #8]
 80269d0:	3301      	adds	r3, #1
 80269d2:	f023 0301 	bic.w	r3, r3, #1
 80269d6:	9306      	str	r3, [sp, #24]
 80269d8:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80269da:	681f      	ldr	r7, [r3, #0]
 80269dc:	9b07      	ldr	r3, [sp, #28]
 80269de:	2b00      	cmp	r3, #0
 80269e0:	dc03      	bgt.n	80269ea <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 80269e2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80269e4:	2b00      	cmp	r3, #0
 80269e6:	f340 8262 	ble.w	8026eae <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52a>
 80269ea:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80269ec:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80269f0:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80269f4:	1e48      	subs	r0, r1, #1
 80269f6:	f102 3cff 	add.w	ip, r2, #4294967295
 80269fa:	2d00      	cmp	r5, #0
 80269fc:	f340 80ee 	ble.w	8026bdc <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x258>
 8026a00:	ea5f 4e24 	movs.w	lr, r4, asr #16
 8026a04:	ea4f 4326 	mov.w	r3, r6, asr #16
 8026a08:	d406      	bmi.n	8026a18 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 8026a0a:	4586      	cmp	lr, r0
 8026a0c:	da04      	bge.n	8026a18 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 8026a0e:	2b00      	cmp	r3, #0
 8026a10:	db02      	blt.n	8026a18 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 8026a12:	4563      	cmp	r3, ip
 8026a14:	f2c0 80e3 	blt.w	8026bde <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25a>
 8026a18:	f11e 0e01 	adds.w	lr, lr, #1
 8026a1c:	f100 80d6 	bmi.w	8026bcc <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 8026a20:	4571      	cmp	r1, lr
 8026a22:	f2c0 80d3 	blt.w	8026bcc <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 8026a26:	3301      	adds	r3, #1
 8026a28:	f100 80d0 	bmi.w	8026bcc <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 8026a2c:	429a      	cmp	r2, r3
 8026a2e:	f2c0 80cd 	blt.w	8026bcc <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 8026a32:	46c8      	mov	r8, r9
 8026a34:	f9bd a018 	ldrsh.w	sl, [sp, #24]
 8026a38:	9509      	str	r5, [sp, #36]	; 0x24
 8026a3a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8026a3c:	2b00      	cmp	r3, #0
 8026a3e:	f340 80eb 	ble.w	8026c18 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 8026a42:	f3c4 3303 	ubfx	r3, r4, #12, #4
 8026a46:	1430      	asrs	r0, r6, #16
 8026a48:	f3c6 3103 	ubfx	r1, r6, #12, #4
 8026a4c:	9308      	str	r3, [sp, #32]
 8026a4e:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8026a50:	e9d3 ce02 	ldrd	ip, lr, [r3, #8]
 8026a54:	1423      	asrs	r3, r4, #16
 8026a56:	f100 813c 	bmi.w	8026cd2 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34e>
 8026a5a:	f10c 3bff 	add.w	fp, ip, #4294967295
 8026a5e:	455b      	cmp	r3, fp
 8026a60:	f280 8137 	bge.w	8026cd2 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34e>
 8026a64:	2800      	cmp	r0, #0
 8026a66:	f2c0 8134 	blt.w	8026cd2 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34e>
 8026a6a:	f10e 3bff 	add.w	fp, lr, #4294967295
 8026a6e:	4558      	cmp	r0, fp
 8026a70:	f280 812f 	bge.w	8026cd2 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34e>
 8026a74:	9a06      	ldr	r2, [sp, #24]
 8026a76:	fb00 3302 	mla	r3, r0, r2, r3
 8026a7a:	0858      	lsrs	r0, r3, #1
 8026a7c:	07da      	lsls	r2, r3, #31
 8026a7e:	9a08      	ldr	r2, [sp, #32]
 8026a80:	f817 c000 	ldrb.w	ip, [r7, r0]
 8026a84:	bf54      	ite	pl
 8026a86:	f00c 0c0f 	andpl.w	ip, ip, #15
 8026a8a:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8026a8e:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8026a92:	fa5f fc8c 	uxtb.w	ip, ip
 8026a96:	2a00      	cmp	r2, #0
 8026a98:	f000 8102 	beq.w	8026ca0 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31c>
 8026a9c:	1c58      	adds	r0, r3, #1
 8026a9e:	ea4f 0e50 	mov.w	lr, r0, lsr #1
 8026aa2:	07c0      	lsls	r0, r0, #31
 8026aa4:	f817 e00e 	ldrb.w	lr, [r7, lr]
 8026aa8:	bf54      	ite	pl
 8026aaa:	f00e 0e0f 	andpl.w	lr, lr, #15
 8026aae:	ea4f 1e2e 	movmi.w	lr, lr, asr #4
 8026ab2:	eb0e 1e0e 	add.w	lr, lr, lr, lsl #4
 8026ab6:	fa5f fe8e 	uxtb.w	lr, lr
 8026aba:	f8cd e034 	str.w	lr, [sp, #52]	; 0x34
 8026abe:	b1b9      	cbz	r1, 8026af0 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16c>
 8026ac0:	4453      	add	r3, sl
 8026ac2:	0858      	lsrs	r0, r3, #1
 8026ac4:	07da      	lsls	r2, r3, #31
 8026ac6:	5c38      	ldrb	r0, [r7, r0]
 8026ac8:	bf54      	ite	pl
 8026aca:	f000 000f 	andpl.w	r0, r0, #15
 8026ace:	1100      	asrmi	r0, r0, #4
 8026ad0:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8026ad4:	b2c0      	uxtb	r0, r0
 8026ad6:	900a      	str	r0, [sp, #40]	; 0x28
 8026ad8:	1c58      	adds	r0, r3, #1
 8026ada:	0843      	lsrs	r3, r0, #1
 8026adc:	07c2      	lsls	r2, r0, #31
 8026ade:	5cfb      	ldrb	r3, [r7, r3]
 8026ae0:	bf54      	ite	pl
 8026ae2:	f003 030f 	andpl.w	r3, r3, #15
 8026ae6:	111b      	asrmi	r3, r3, #4
 8026ae8:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8026aec:	b2db      	uxtb	r3, r3
 8026aee:	930e      	str	r3, [sp, #56]	; 0x38
 8026af0:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 8026af4:	b289      	uxth	r1, r1
 8026af6:	fb02 f301 	mul.w	r3, r2, r1
 8026afa:	0112      	lsls	r2, r2, #4
 8026afc:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 8026b00:	f5c2 7080 	rsb	r0, r2, #256	; 0x100
 8026b04:	1ad2      	subs	r2, r2, r3
 8026b06:	b289      	uxth	r1, r1
 8026b08:	b292      	uxth	r2, r2
 8026b0a:	1a40      	subs	r0, r0, r1
 8026b0c:	fa1f fe80 	uxth.w	lr, r0
 8026b10:	980d      	ldr	r0, [sp, #52]	; 0x34
 8026b12:	4342      	muls	r2, r0
 8026b14:	fb0c 2c0e 	mla	ip, ip, lr, r2
 8026b18:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8026b1a:	fb01 c102 	mla	r1, r1, r2, ip
 8026b1e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8026b20:	fb03 1302 	mla	r3, r3, r2, r1
 8026b24:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8026b28:	2b00      	cmp	r3, #0
 8026b2a:	d045      	beq.n	8026bb8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x234>
 8026b2c:	4a79      	ldr	r2, [pc, #484]	; (8026d14 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x390>)
 8026b2e:	2bff      	cmp	r3, #255	; 0xff
 8026b30:	6811      	ldr	r1, [r2, #0]
 8026b32:	ea4f 2e11 	mov.w	lr, r1, lsr #8
 8026b36:	ea4f 02d1 	mov.w	r2, r1, lsr #3
 8026b3a:	ea4f 01c1 	mov.w	r1, r1, lsl #3
 8026b3e:	f00e 0ef8 	and.w	lr, lr, #248	; 0xf8
 8026b42:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 8026b46:	b2c9      	uxtb	r1, r1
 8026b48:	f000 80bb 	beq.w	8026cc2 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 8026b4c:	f8b8 c000 	ldrh.w	ip, [r8]
 8026b50:	fa1f fb83 	uxth.w	fp, r3
 8026b54:	43db      	mvns	r3, r3
 8026b56:	fb1e fe0b 	smulbb	lr, lr, fp
 8026b5a:	ea4f 202c 	mov.w	r0, ip, asr #8
 8026b5e:	fb12 f20b 	smulbb	r2, r2, fp
 8026b62:	b2db      	uxtb	r3, r3
 8026b64:	fb11 f10b 	smulbb	r1, r1, fp
 8026b68:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8026b6c:	fb00 e003 	mla	r0, r0, r3, lr
 8026b70:	ea4f 0eec 	mov.w	lr, ip, asr #3
 8026b74:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8026b78:	f00e 0efc 	and.w	lr, lr, #252	; 0xfc
 8026b7c:	b280      	uxth	r0, r0
 8026b7e:	fa5f fc8c 	uxtb.w	ip, ip
 8026b82:	fb0e 2203 	mla	r2, lr, r3, r2
 8026b86:	fb0c 1303 	mla	r3, ip, r3, r1
 8026b8a:	1c41      	adds	r1, r0, #1
 8026b8c:	b292      	uxth	r2, r2
 8026b8e:	b29b      	uxth	r3, r3
 8026b90:	f102 0e01 	add.w	lr, r2, #1
 8026b94:	eb01 2010 	add.w	r0, r1, r0, lsr #8
 8026b98:	1c59      	adds	r1, r3, #1
 8026b9a:	eb0e 2212 	add.w	r2, lr, r2, lsr #8
 8026b9e:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
 8026ba2:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 8026ba6:	0952      	lsrs	r2, r2, #5
 8026ba8:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8026bac:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8026bb0:	4310      	orrs	r0, r2
 8026bb2:	4318      	orrs	r0, r3
 8026bb4:	f8a8 0000 	strh.w	r0, [r8]
 8026bb8:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8026bba:	f108 0802 	add.w	r8, r8, #2
 8026bbe:	441c      	add	r4, r3
 8026bc0:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8026bc2:	441e      	add	r6, r3
 8026bc4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8026bc6:	3b01      	subs	r3, #1
 8026bc8:	9309      	str	r3, [sp, #36]	; 0x24
 8026bca:	e736      	b.n	8026a3a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 8026bcc:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8026bce:	3d01      	subs	r5, #1
 8026bd0:	f109 0902 	add.w	r9, r9, #2
 8026bd4:	441c      	add	r4, r3
 8026bd6:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8026bd8:	441e      	add	r6, r3
 8026bda:	e70e      	b.n	80269fa <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8026bdc:	d020      	beq.n	8026c20 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29c>
 8026bde:	1e6b      	subs	r3, r5, #1
 8026be0:	9827      	ldr	r0, [sp, #156]	; 0x9c
 8026be2:	fb00 4003 	mla	r0, r0, r3, r4
 8026be6:	1400      	asrs	r0, r0, #16
 8026be8:	f53f af23 	bmi.w	8026a32 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xae>
 8026bec:	3901      	subs	r1, #1
 8026bee:	4288      	cmp	r0, r1
 8026bf0:	f6bf af1f 	bge.w	8026a32 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xae>
 8026bf4:	9928      	ldr	r1, [sp, #160]	; 0xa0
 8026bf6:	fb01 6303 	mla	r3, r1, r3, r6
 8026bfa:	141b      	asrs	r3, r3, #16
 8026bfc:	f53f af19 	bmi.w	8026a32 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xae>
 8026c00:	3a01      	subs	r2, #1
 8026c02:	4293      	cmp	r3, r2
 8026c04:	f6bf af15 	bge.w	8026a32 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xae>
 8026c08:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 8026c0c:	46aa      	mov	sl, r5
 8026c0e:	46c8      	mov	r8, r9
 8026c10:	9308      	str	r3, [sp, #32]
 8026c12:	f1ba 0f00 	cmp.w	sl, #0
 8026c16:	dc7f      	bgt.n	8026d18 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x394>
 8026c18:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 8026c1c:	eb09 0945 	add.w	r9, r9, r5, lsl #1
 8026c20:	9b07      	ldr	r3, [sp, #28]
 8026c22:	2b00      	cmp	r3, #0
 8026c24:	f340 8143 	ble.w	8026eae <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52a>
 8026c28:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8026c2c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8026c2e:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8026c32:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8026c36:	eef0 6a48 	vmov.f32	s13, s16
 8026c3a:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8026c3e:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8026c42:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8026c46:	ee16 4a90 	vmov	r4, s13
 8026c4a:	eef0 6a68 	vmov.f32	s13, s17
 8026c4e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8026c52:	ee16 6a90 	vmov	r6, s13
 8026c56:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8026c5a:	ee69 7a27 	vmul.f32	s15, s18, s15
 8026c5e:	ee37 8a48 	vsub.f32	s16, s14, s16
 8026c62:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8026c66:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8026c6a:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8026c6e:	ee18 2a10 	vmov	r2, s16
 8026c72:	eeb0 8a47 	vmov.f32	s16, s14
 8026c76:	fb92 f3f3 	sdiv	r3, r2, r3
 8026c7a:	ee18 2a90 	vmov	r2, s17
 8026c7e:	9327      	str	r3, [sp, #156]	; 0x9c
 8026c80:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8026c82:	eef0 8a67 	vmov.f32	s17, s15
 8026c86:	fb92 f3f3 	sdiv	r3, r2, r3
 8026c8a:	9328      	str	r3, [sp, #160]	; 0xa0
 8026c8c:	9b07      	ldr	r3, [sp, #28]
 8026c8e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8026c90:	3b01      	subs	r3, #1
 8026c92:	9307      	str	r3, [sp, #28]
 8026c94:	bf08      	it	eq
 8026c96:	4615      	moveq	r5, r2
 8026c98:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8026c9a:	bf18      	it	ne
 8026c9c:	461d      	movne	r5, r3
 8026c9e:	e69d      	b.n	80269dc <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 8026ca0:	2900      	cmp	r1, #0
 8026ca2:	f43f af25 	beq.w	8026af0 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16c>
 8026ca6:	eb0a 0003 	add.w	r0, sl, r3
 8026caa:	0843      	lsrs	r3, r0, #1
 8026cac:	07c0      	lsls	r0, r0, #31
 8026cae:	5cfb      	ldrb	r3, [r7, r3]
 8026cb0:	bf54      	ite	pl
 8026cb2:	f003 030f 	andpl.w	r3, r3, #15
 8026cb6:	111b      	asrmi	r3, r3, #4
 8026cb8:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8026cbc:	b2db      	uxtb	r3, r3
 8026cbe:	930a      	str	r3, [sp, #40]	; 0x28
 8026cc0:	e716      	b.n	8026af0 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16c>
 8026cc2:	00d2      	lsls	r2, r2, #3
 8026cc4:	ea42 2e0e 	orr.w	lr, r2, lr, lsl #8
 8026cc8:	ea4e 01d1 	orr.w	r1, lr, r1, lsr #3
 8026ccc:	f8a8 1000 	strh.w	r1, [r8]
 8026cd0:	e772      	b.n	8026bb8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x234>
 8026cd2:	f113 0b01 	adds.w	fp, r3, #1
 8026cd6:	f53f af6f 	bmi.w	8026bb8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x234>
 8026cda:	45dc      	cmp	ip, fp
 8026cdc:	f6ff af6c 	blt.w	8026bb8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x234>
 8026ce0:	f110 0b01 	adds.w	fp, r0, #1
 8026ce4:	f53f af68 	bmi.w	8026bb8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x234>
 8026ce8:	45de      	cmp	lr, fp
 8026cea:	f6ff af65 	blt.w	8026bb8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x234>
 8026cee:	9302      	str	r3, [sp, #8]
 8026cf0:	fa0f f38e 	sxth.w	r3, lr
 8026cf4:	9a08      	ldr	r2, [sp, #32]
 8026cf6:	9301      	str	r3, [sp, #4]
 8026cf8:	fa0f f38c 	sxth.w	r3, ip
 8026cfc:	9105      	str	r1, [sp, #20]
 8026cfe:	4641      	mov	r1, r8
 8026d00:	9300      	str	r3, [sp, #0]
 8026d02:	4653      	mov	r3, sl
 8026d04:	e9cd 0203 	strd	r0, r2, [sp, #12]
 8026d08:	463a      	mov	r2, r7
 8026d0a:	9811      	ldr	r0, [sp, #68]	; 0x44
 8026d0c:	f7ff fd56 	bl	80267bc <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh>
 8026d10:	e752      	b.n	8026bb8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x234>
 8026d12:	bf00      	nop
 8026d14:	20005814 	.word	0x20005814
 8026d18:	1422      	asrs	r2, r4, #16
 8026d1a:	9906      	ldr	r1, [sp, #24]
 8026d1c:	1433      	asrs	r3, r6, #16
 8026d1e:	f3c4 3003 	ubfx	r0, r4, #12, #4
 8026d22:	f3c6 3c03 	ubfx	ip, r6, #12, #4
 8026d26:	fb01 2303 	mla	r3, r1, r3, r2
 8026d2a:	085a      	lsrs	r2, r3, #1
 8026d2c:	07d9      	lsls	r1, r3, #31
 8026d2e:	5cba      	ldrb	r2, [r7, r2]
 8026d30:	bf54      	ite	pl
 8026d32:	f002 020f 	andpl.w	r2, r2, #15
 8026d36:	1112      	asrmi	r2, r2, #4
 8026d38:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8026d3c:	b2d2      	uxtb	r2, r2
 8026d3e:	2800      	cmp	r0, #0
 8026d40:	f000 809c 	beq.w	8026e7c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f8>
 8026d44:	f103 0e01 	add.w	lr, r3, #1
 8026d48:	ea4f 015e 	mov.w	r1, lr, lsr #1
 8026d4c:	f01e 0f01 	tst.w	lr, #1
 8026d50:	5c79      	ldrb	r1, [r7, r1]
 8026d52:	bf0c      	ite	eq
 8026d54:	f001 010f 	andeq.w	r1, r1, #15
 8026d58:	1109      	asrne	r1, r1, #4
 8026d5a:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8026d5e:	b2c9      	uxtb	r1, r1
 8026d60:	910f      	str	r1, [sp, #60]	; 0x3c
 8026d62:	f1bc 0f00 	cmp.w	ip, #0
 8026d66:	d01a      	beq.n	8026d9e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x41a>
 8026d68:	9908      	ldr	r1, [sp, #32]
 8026d6a:	440b      	add	r3, r1
 8026d6c:	0859      	lsrs	r1, r3, #1
 8026d6e:	f013 0f01 	tst.w	r3, #1
 8026d72:	f103 0301 	add.w	r3, r3, #1
 8026d76:	5c79      	ldrb	r1, [r7, r1]
 8026d78:	bf0c      	ite	eq
 8026d7a:	f001 010f 	andeq.w	r1, r1, #15
 8026d7e:	1109      	asrne	r1, r1, #4
 8026d80:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8026d84:	b2c9      	uxtb	r1, r1
 8026d86:	910b      	str	r1, [sp, #44]	; 0x2c
 8026d88:	0859      	lsrs	r1, r3, #1
 8026d8a:	07db      	lsls	r3, r3, #31
 8026d8c:	5c79      	ldrb	r1, [r7, r1]
 8026d8e:	bf54      	ite	pl
 8026d90:	f001 010f 	andpl.w	r1, r1, #15
 8026d94:	1109      	asrmi	r1, r1, #4
 8026d96:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8026d9a:	b2c9      	uxtb	r1, r1
 8026d9c:	9110      	str	r1, [sp, #64]	; 0x40
 8026d9e:	b280      	uxth	r0, r0
 8026da0:	fa1f fc8c 	uxth.w	ip, ip
 8026da4:	fb00 f30c 	mul.w	r3, r0, ip
 8026da8:	0100      	lsls	r0, r0, #4
 8026daa:	ebc3 1c0c 	rsb	ip, r3, ip, lsl #4
 8026dae:	f5c0 7180 	rsb	r1, r0, #256	; 0x100
 8026db2:	1ac0      	subs	r0, r0, r3
 8026db4:	fa1f fc8c 	uxth.w	ip, ip
 8026db8:	b280      	uxth	r0, r0
 8026dba:	eba1 010c 	sub.w	r1, r1, ip
 8026dbe:	fa1f fe81 	uxth.w	lr, r1
 8026dc2:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8026dc4:	4348      	muls	r0, r1
 8026dc6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8026dc8:	fb02 020e 	mla	r2, r2, lr, r0
 8026dcc:	fb0c 2c01 	mla	ip, ip, r1, r2
 8026dd0:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8026dd2:	fb03 c302 	mla	r3, r3, r2, ip
 8026dd6:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8026dda:	2b00      	cmp	r3, #0
 8026ddc:	d045      	beq.n	8026e6a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e6>
 8026dde:	4a36      	ldr	r2, [pc, #216]	; (8026eb8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x534>)
 8026de0:	2bff      	cmp	r3, #255	; 0xff
 8026de2:	6811      	ldr	r1, [r2, #0]
 8026de4:	ea4f 2e11 	mov.w	lr, r1, lsr #8
 8026de8:	ea4f 02d1 	mov.w	r2, r1, lsr #3
 8026dec:	ea4f 01c1 	mov.w	r1, r1, lsl #3
 8026df0:	f00e 0ef8 	and.w	lr, lr, #248	; 0xf8
 8026df4:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 8026df8:	b2c9      	uxtb	r1, r1
 8026dfa:	d050      	beq.n	8026e9e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x51a>
 8026dfc:	f8b8 c000 	ldrh.w	ip, [r8]
 8026e00:	fa1f fb83 	uxth.w	fp, r3
 8026e04:	43db      	mvns	r3, r3
 8026e06:	fb1e fe0b 	smulbb	lr, lr, fp
 8026e0a:	ea4f 202c 	mov.w	r0, ip, asr #8
 8026e0e:	fb12 f20b 	smulbb	r2, r2, fp
 8026e12:	b2db      	uxtb	r3, r3
 8026e14:	fb11 f10b 	smulbb	r1, r1, fp
 8026e18:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8026e1c:	fb00 e003 	mla	r0, r0, r3, lr
 8026e20:	ea4f 0eec 	mov.w	lr, ip, asr #3
 8026e24:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8026e28:	f00e 0efc 	and.w	lr, lr, #252	; 0xfc
 8026e2c:	b280      	uxth	r0, r0
 8026e2e:	fa5f fc8c 	uxtb.w	ip, ip
 8026e32:	fb0e 2203 	mla	r2, lr, r3, r2
 8026e36:	fb0c 1103 	mla	r1, ip, r3, r1
 8026e3a:	b292      	uxth	r2, r2
 8026e3c:	b289      	uxth	r1, r1
 8026e3e:	f102 0e01 	add.w	lr, r2, #1
 8026e42:	1c4b      	adds	r3, r1, #1
 8026e44:	eb0e 2212 	add.w	r2, lr, r2, lsr #8
 8026e48:	f100 0e01 	add.w	lr, r0, #1
 8026e4c:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 8026e50:	0952      	lsrs	r2, r2, #5
 8026e52:	eb0e 2010 	add.w	r0, lr, r0, lsr #8
 8026e56:	f3c1 21c4 	ubfx	r1, r1, #11, #5
 8026e5a:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8026e5e:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
 8026e62:	4302      	orrs	r2, r0
 8026e64:	430a      	orrs	r2, r1
 8026e66:	f8a8 2000 	strh.w	r2, [r8]
 8026e6a:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8026e6c:	f108 0802 	add.w	r8, r8, #2
 8026e70:	f10a 3aff 	add.w	sl, sl, #4294967295
 8026e74:	441c      	add	r4, r3
 8026e76:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8026e78:	441e      	add	r6, r3
 8026e7a:	e6ca      	b.n	8026c12 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28e>
 8026e7c:	f1bc 0f00 	cmp.w	ip, #0
 8026e80:	d08d      	beq.n	8026d9e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x41a>
 8026e82:	9908      	ldr	r1, [sp, #32]
 8026e84:	440b      	add	r3, r1
 8026e86:	0859      	lsrs	r1, r3, #1
 8026e88:	07db      	lsls	r3, r3, #31
 8026e8a:	5c79      	ldrb	r1, [r7, r1]
 8026e8c:	bf54      	ite	pl
 8026e8e:	f001 010f 	andpl.w	r1, r1, #15
 8026e92:	1109      	asrmi	r1, r1, #4
 8026e94:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8026e98:	b2c9      	uxtb	r1, r1
 8026e9a:	910b      	str	r1, [sp, #44]	; 0x2c
 8026e9c:	e77f      	b.n	8026d9e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x41a>
 8026e9e:	00d2      	lsls	r2, r2, #3
 8026ea0:	ea42 2e0e 	orr.w	lr, r2, lr, lsl #8
 8026ea4:	ea4e 01d1 	orr.w	r1, lr, r1, lsr #3
 8026ea8:	f8a8 1000 	strh.w	r1, [r8]
 8026eac:	e7dd      	b.n	8026e6a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e6>
 8026eae:	b013      	add	sp, #76	; 0x4c
 8026eb0:	ecbd 8b08 	vpop	{d8-d11}
 8026eb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8026eb8:	20005814 	.word	0x20005814

08026ebc <CRC_Lock>:
 8026ebc:	4a1d      	ldr	r2, [pc, #116]	; (8026f34 <CRC_Lock+0x78>)
 8026ebe:	b530      	push	{r4, r5, lr}
 8026ec0:	6813      	ldr	r3, [r2, #0]
 8026ec2:	f64f 74f0 	movw	r4, #65520	; 0xfff0
 8026ec6:	f24c 2540 	movw	r5, #49728	; 0xc240
 8026eca:	f023 0301 	bic.w	r3, r3, #1
 8026ece:	6013      	str	r3, [r2, #0]
 8026ed0:	4b19      	ldr	r3, [pc, #100]	; (8026f38 <CRC_Lock+0x7c>)
 8026ed2:	681a      	ldr	r2, [r3, #0]
 8026ed4:	4022      	ands	r2, r4
 8026ed6:	42aa      	cmp	r2, r5
 8026ed8:	d005      	beq.n	8026ee6 <CRC_Lock+0x2a>
 8026eda:	681b      	ldr	r3, [r3, #0]
 8026edc:	f24c 2270 	movw	r2, #49776	; 0xc270
 8026ee0:	4023      	ands	r3, r4
 8026ee2:	4293      	cmp	r3, r2
 8026ee4:	d11d      	bne.n	8026f22 <CRC_Lock+0x66>
 8026ee6:	4b15      	ldr	r3, [pc, #84]	; (8026f3c <CRC_Lock+0x80>)
 8026ee8:	681b      	ldr	r3, [r3, #0]
 8026eea:	b9d3      	cbnz	r3, 8026f22 <CRC_Lock+0x66>
 8026eec:	4a14      	ldr	r2, [pc, #80]	; (8026f40 <CRC_Lock+0x84>)
 8026eee:	6813      	ldr	r3, [r2, #0]
 8026ef0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8026ef4:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8026ef8:	d006      	beq.n	8026f08 <CRC_Lock+0x4c>
 8026efa:	6813      	ldr	r3, [r2, #0]
 8026efc:	f240 4283 	movw	r2, #1155	; 0x483
 8026f00:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8026f04:	4293      	cmp	r3, r2
 8026f06:	d10c      	bne.n	8026f22 <CRC_Lock+0x66>
 8026f08:	4b0e      	ldr	r3, [pc, #56]	; (8026f44 <CRC_Lock+0x88>)
 8026f0a:	2201      	movs	r2, #1
 8026f0c:	601a      	str	r2, [r3, #0]
 8026f0e:	681a      	ldr	r2, [r3, #0]
 8026f10:	2a00      	cmp	r2, #0
 8026f12:	d1fc      	bne.n	8026f0e <CRC_Lock+0x52>
 8026f14:	4b0c      	ldr	r3, [pc, #48]	; (8026f48 <CRC_Lock+0x8c>)
 8026f16:	6018      	str	r0, [r3, #0]
 8026f18:	6818      	ldr	r0, [r3, #0]
 8026f1a:	1a43      	subs	r3, r0, r1
 8026f1c:	4258      	negs	r0, r3
 8026f1e:	4158      	adcs	r0, r3
 8026f20:	bd30      	pop	{r4, r5, pc}
 8026f22:	4b0a      	ldr	r3, [pc, #40]	; (8026f4c <CRC_Lock+0x90>)
 8026f24:	2201      	movs	r2, #1
 8026f26:	601a      	str	r2, [r3, #0]
 8026f28:	681a      	ldr	r2, [r3, #0]
 8026f2a:	2a00      	cmp	r2, #0
 8026f2c:	d1fc      	bne.n	8026f28 <CRC_Lock+0x6c>
 8026f2e:	4b08      	ldr	r3, [pc, #32]	; (8026f50 <CRC_Lock+0x94>)
 8026f30:	e7f1      	b.n	8026f16 <CRC_Lock+0x5a>
 8026f32:	bf00      	nop
 8026f34:	e0002000 	.word	0xe0002000
 8026f38:	e000ed00 	.word	0xe000ed00
 8026f3c:	e0042000 	.word	0xe0042000
 8026f40:	5c001000 	.word	0x5c001000
 8026f44:	58024c08 	.word	0x58024c08
 8026f48:	58024c00 	.word	0x58024c00
 8026f4c:	40023008 	.word	0x40023008
 8026f50:	40023000 	.word	0x40023000

08026f54 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>:
 8026f54:	6101      	str	r1, [r0, #16]
 8026f56:	4770      	bx	lr

08026f58 <_ZN8touchgfx8Gestures4tickEv>:
 8026f58:	7b83      	ldrb	r3, [r0, #14]
 8026f5a:	b14b      	cbz	r3, 8026f70 <_ZN8touchgfx8Gestures4tickEv+0x18>
 8026f5c:	8903      	ldrh	r3, [r0, #8]
 8026f5e:	3301      	adds	r3, #1
 8026f60:	b29b      	uxth	r3, r3
 8026f62:	2b07      	cmp	r3, #7
 8026f64:	8103      	strh	r3, [r0, #8]
 8026f66:	bf81      	itttt	hi
 8026f68:	2300      	movhi	r3, #0
 8026f6a:	8143      	strhhi	r3, [r0, #10]
 8026f6c:	8183      	strhhi	r3, [r0, #12]
 8026f6e:	7383      	strbhi	r3, [r0, #14]
 8026f70:	4770      	bx	lr
	...

08026f74 <_ZN8touchgfx8Gestures17registerDragEventEtttt>:
 8026f74:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8026f78:	4604      	mov	r4, r0
 8026f7a:	4698      	mov	r8, r3
 8026f7c:	8880      	ldrh	r0, [r0, #4]
 8026f7e:	4617      	mov	r7, r2
 8026f80:	4b1d      	ldr	r3, [pc, #116]	; (8026ff8 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x84>)
 8026f82:	460e      	mov	r6, r1
 8026f84:	f8ad 0006 	strh.w	r0, [sp, #6]
 8026f88:	eba8 0000 	sub.w	r0, r8, r0
 8026f8c:	9300      	str	r3, [sp, #0]
 8026f8e:	2300      	movs	r3, #0
 8026f90:	b280      	uxth	r0, r0
 8026f92:	8aa2      	ldrh	r2, [r4, #20]
 8026f94:	f88d 3004 	strb.w	r3, [sp, #4]
 8026f98:	b203      	sxth	r3, r0
 8026f9a:	f8bd 5028 	ldrh.w	r5, [sp, #40]	; 0x28
 8026f9e:	88e1      	ldrh	r1, [r4, #6]
 8026fa0:	2b00      	cmp	r3, #0
 8026fa2:	f8ad 800a 	strh.w	r8, [sp, #10]
 8026fa6:	f8ad 1008 	strh.w	r1, [sp, #8]
 8026faa:	bfb8      	it	lt
 8026fac:	4240      	neglt	r0, r0
 8026fae:	f8ad 500c 	strh.w	r5, [sp, #12]
 8026fb2:	bfb8      	it	lt
 8026fb4:	b203      	sxthlt	r3, r0
 8026fb6:	4293      	cmp	r3, r2
 8026fb8:	dc08      	bgt.n	8026fcc <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x58>
 8026fba:	1a69      	subs	r1, r5, r1
 8026fbc:	b289      	uxth	r1, r1
 8026fbe:	b20b      	sxth	r3, r1
 8026fc0:	2b00      	cmp	r3, #0
 8026fc2:	bfbc      	itt	lt
 8026fc4:	4249      	neglt	r1, r1
 8026fc6:	b20b      	sxthlt	r3, r1
 8026fc8:	429a      	cmp	r2, r3
 8026fca:	da13      	bge.n	8026ff4 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x80>
 8026fcc:	6920      	ldr	r0, [r4, #16]
 8026fce:	4669      	mov	r1, sp
 8026fd0:	eba8 0606 	sub.w	r6, r8, r6
 8026fd4:	1bef      	subs	r7, r5, r7
 8026fd6:	6803      	ldr	r3, [r0, #0]
 8026fd8:	685b      	ldr	r3, [r3, #4]
 8026fda:	4798      	blx	r3
 8026fdc:	2300      	movs	r3, #0
 8026fde:	2001      	movs	r0, #1
 8026fe0:	8166      	strh	r6, [r4, #10]
 8026fe2:	8123      	strh	r3, [r4, #8]
 8026fe4:	81a7      	strh	r7, [r4, #12]
 8026fe6:	f8a4 8004 	strh.w	r8, [r4, #4]
 8026fea:	80e5      	strh	r5, [r4, #6]
 8026fec:	73a0      	strb	r0, [r4, #14]
 8026fee:	b004      	add	sp, #16
 8026ff0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8026ff4:	2000      	movs	r0, #0
 8026ff6:	e7fa      	b.n	8026fee <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x7a>
 8026ff8:	0802adc0 	.word	0x0802adc0

08026ffc <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>:
 8026ffc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8026ffe:	461e      	mov	r6, r3
 8027000:	1e4b      	subs	r3, r1, #1
 8027002:	b085      	sub	sp, #20
 8027004:	4604      	mov	r4, r0
 8027006:	2b01      	cmp	r3, #1
 8027008:	460d      	mov	r5, r1
 802700a:	4617      	mov	r7, r2
 802700c:	d84b      	bhi.n	80270a6 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xaa>
 802700e:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 8027012:	1cd3      	adds	r3, r2, #3
 8027014:	b29b      	uxth	r3, r3
 8027016:	2b06      	cmp	r3, #6
 8027018:	d916      	bls.n	8027048 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x4c>
 802701a:	f8df c0a0 	ldr.w	ip, [pc, #160]	; 80270bc <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 802701e:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8027022:	f8cd c004 	str.w	ip, [sp, #4]
 8027026:	f04f 0c00 	mov.w	ip, #0
 802702a:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 802702e:	6900      	ldr	r0, [r0, #16]
 8027030:	f8ad 100c 	strh.w	r1, [sp, #12]
 8027034:	a901      	add	r1, sp, #4
 8027036:	f88d c008 	strb.w	ip, [sp, #8]
 802703a:	f8ad 200a 	strh.w	r2, [sp, #10]
 802703e:	f8ad 300e 	strh.w	r3, [sp, #14]
 8027042:	6803      	ldr	r3, [r0, #0]
 8027044:	689b      	ldr	r3, [r3, #8]
 8027046:	4798      	blx	r3
 8027048:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 802704c:	1cd3      	adds	r3, r2, #3
 802704e:	b29b      	uxth	r3, r3
 8027050:	2b06      	cmp	r3, #6
 8027052:	d916      	bls.n	8027082 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 8027054:	f8df c064 	ldr.w	ip, [pc, #100]	; 80270bc <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 8027058:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 802705c:	f8cd c004 	str.w	ip, [sp, #4]
 8027060:	f04f 0c01 	mov.w	ip, #1
 8027064:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8027068:	6920      	ldr	r0, [r4, #16]
 802706a:	f8ad 100c 	strh.w	r1, [sp, #12]
 802706e:	a901      	add	r1, sp, #4
 8027070:	f88d c008 	strb.w	ip, [sp, #8]
 8027074:	f8ad 200a 	strh.w	r2, [sp, #10]
 8027078:	f8ad 300e 	strh.w	r3, [sp, #14]
 802707c:	6803      	ldr	r3, [r0, #0]
 802707e:	689b      	ldr	r3, [r3, #8]
 8027080:	4798      	blx	r3
 8027082:	4b0d      	ldr	r3, [pc, #52]	; (80270b8 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xbc>)
 8027084:	a901      	add	r1, sp, #4
 8027086:	6920      	ldr	r0, [r4, #16]
 8027088:	9301      	str	r3, [sp, #4]
 802708a:	2300      	movs	r3, #0
 802708c:	f88d 5008 	strb.w	r5, [sp, #8]
 8027090:	f8ad 700a 	strh.w	r7, [sp, #10]
 8027094:	f8ad 600c 	strh.w	r6, [sp, #12]
 8027098:	f8ad 300e 	strh.w	r3, [sp, #14]
 802709c:	6803      	ldr	r3, [r0, #0]
 802709e:	681b      	ldr	r3, [r3, #0]
 80270a0:	4798      	blx	r3
 80270a2:	b005      	add	sp, #20
 80270a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80270a6:	2900      	cmp	r1, #0
 80270a8:	d1eb      	bne.n	8027082 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 80270aa:	80a2      	strh	r2, [r4, #4]
 80270ac:	80c6      	strh	r6, [r0, #6]
 80270ae:	60a1      	str	r1, [r4, #8]
 80270b0:	81a1      	strh	r1, [r4, #12]
 80270b2:	73a1      	strb	r1, [r4, #14]
 80270b4:	e7e5      	b.n	8027082 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 80270b6:	bf00      	nop
 80270b8:	0802adac 	.word	0x0802adac
 80270bc:	0802add4 	.word	0x0802add4

080270c0 <__aeabi_atexit>:
 80270c0:	460b      	mov	r3, r1
 80270c2:	4601      	mov	r1, r0
 80270c4:	4618      	mov	r0, r3
 80270c6:	f000 b853 	b.w	8027170 <__cxa_atexit>

080270ca <_ZdlPvj>:
 80270ca:	f000 b812 	b.w	80270f2 <_ZdlPv>

080270ce <__cxa_guard_acquire>:
 80270ce:	6803      	ldr	r3, [r0, #0]
 80270d0:	07db      	lsls	r3, r3, #31
 80270d2:	d406      	bmi.n	80270e2 <__cxa_guard_acquire+0x14>
 80270d4:	7843      	ldrb	r3, [r0, #1]
 80270d6:	b103      	cbz	r3, 80270da <__cxa_guard_acquire+0xc>
 80270d8:	deff      	udf	#255	; 0xff
 80270da:	2301      	movs	r3, #1
 80270dc:	7043      	strb	r3, [r0, #1]
 80270de:	4618      	mov	r0, r3
 80270e0:	4770      	bx	lr
 80270e2:	2000      	movs	r0, #0
 80270e4:	4770      	bx	lr

080270e6 <__cxa_guard_release>:
 80270e6:	2301      	movs	r3, #1
 80270e8:	6003      	str	r3, [r0, #0]
 80270ea:	4770      	bx	lr

080270ec <__cxa_pure_virtual>:
 80270ec:	b508      	push	{r3, lr}
 80270ee:	f000 f80f 	bl	8027110 <_ZSt9terminatev>

080270f2 <_ZdlPv>:
 80270f2:	f000 b989 	b.w	8027408 <free>

080270f6 <_ZN10__cxxabiv111__terminateEPFvvE>:
 80270f6:	b508      	push	{r3, lr}
 80270f8:	4780      	blx	r0
 80270fa:	f000 f80e 	bl	802711a <abort>
	...

08027100 <_ZSt13get_terminatev>:
 8027100:	4b02      	ldr	r3, [pc, #8]	; (802710c <_ZSt13get_terminatev+0xc>)
 8027102:	6818      	ldr	r0, [r3, #0]
 8027104:	f3bf 8f5b 	dmb	ish
 8027108:	4770      	bx	lr
 802710a:	bf00      	nop
 802710c:	200001e8 	.word	0x200001e8

08027110 <_ZSt9terminatev>:
 8027110:	b508      	push	{r3, lr}
 8027112:	f7ff fff5 	bl	8027100 <_ZSt13get_terminatev>
 8027116:	f7ff ffee 	bl	80270f6 <_ZN10__cxxabiv111__terminateEPFvvE>

0802711a <abort>:
 802711a:	b508      	push	{r3, lr}
 802711c:	2006      	movs	r0, #6
 802711e:	f000 fe01 	bl	8027d24 <raise>
 8027122:	2001      	movs	r0, #1
 8027124:	f7dc fd1a 	bl	8003b5c <_exit>

08027128 <__assert_func>:
 8027128:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 802712a:	4614      	mov	r4, r2
 802712c:	461a      	mov	r2, r3
 802712e:	4b09      	ldr	r3, [pc, #36]	; (8027154 <__assert_func+0x2c>)
 8027130:	681b      	ldr	r3, [r3, #0]
 8027132:	4605      	mov	r5, r0
 8027134:	68d8      	ldr	r0, [r3, #12]
 8027136:	b14c      	cbz	r4, 802714c <__assert_func+0x24>
 8027138:	4b07      	ldr	r3, [pc, #28]	; (8027158 <__assert_func+0x30>)
 802713a:	9100      	str	r1, [sp, #0]
 802713c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8027140:	4906      	ldr	r1, [pc, #24]	; (802715c <__assert_func+0x34>)
 8027142:	462b      	mov	r3, r5
 8027144:	f000 f8fe 	bl	8027344 <fiprintf>
 8027148:	f7ff ffe7 	bl	802711a <abort>
 802714c:	4b04      	ldr	r3, [pc, #16]	; (8027160 <__assert_func+0x38>)
 802714e:	461c      	mov	r4, r3
 8027150:	e7f3      	b.n	802713a <__assert_func+0x12>
 8027152:	bf00      	nop
 8027154:	200001ec 	.word	0x200001ec
 8027158:	0802c19f 	.word	0x0802c19f
 802715c:	0802c1ac 	.word	0x0802c1ac
 8027160:	0802c1da 	.word	0x0802c1da

08027164 <atexit>:
 8027164:	2300      	movs	r3, #0
 8027166:	4601      	mov	r1, r0
 8027168:	461a      	mov	r2, r3
 802716a:	4618      	mov	r0, r3
 802716c:	f000 bf0c 	b.w	8027f88 <__register_exitproc>

08027170 <__cxa_atexit>:
 8027170:	b510      	push	{r4, lr}
 8027172:	4c05      	ldr	r4, [pc, #20]	; (8027188 <__cxa_atexit+0x18>)
 8027174:	4613      	mov	r3, r2
 8027176:	b12c      	cbz	r4, 8027184 <__cxa_atexit+0x14>
 8027178:	460a      	mov	r2, r1
 802717a:	4601      	mov	r1, r0
 802717c:	2002      	movs	r0, #2
 802717e:	f000 ff03 	bl	8027f88 <__register_exitproc>
 8027182:	bd10      	pop	{r4, pc}
 8027184:	4620      	mov	r0, r4
 8027186:	e7fc      	b.n	8027182 <__cxa_atexit+0x12>
 8027188:	08027f89 	.word	0x08027f89

0802718c <__errno>:
 802718c:	4b01      	ldr	r3, [pc, #4]	; (8027194 <__errno+0x8>)
 802718e:	6818      	ldr	r0, [r3, #0]
 8027190:	4770      	bx	lr
 8027192:	bf00      	nop
 8027194:	200001ec 	.word	0x200001ec

08027198 <std>:
 8027198:	2300      	movs	r3, #0
 802719a:	b510      	push	{r4, lr}
 802719c:	4604      	mov	r4, r0
 802719e:	e9c0 3300 	strd	r3, r3, [r0]
 80271a2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80271a6:	6083      	str	r3, [r0, #8]
 80271a8:	8181      	strh	r1, [r0, #12]
 80271aa:	6643      	str	r3, [r0, #100]	; 0x64
 80271ac:	81c2      	strh	r2, [r0, #14]
 80271ae:	6183      	str	r3, [r0, #24]
 80271b0:	4619      	mov	r1, r3
 80271b2:	2208      	movs	r2, #8
 80271b4:	305c      	adds	r0, #92	; 0x5c
 80271b6:	f000 f93d 	bl	8027434 <memset>
 80271ba:	4b05      	ldr	r3, [pc, #20]	; (80271d0 <std+0x38>)
 80271bc:	6263      	str	r3, [r4, #36]	; 0x24
 80271be:	4b05      	ldr	r3, [pc, #20]	; (80271d4 <std+0x3c>)
 80271c0:	62a3      	str	r3, [r4, #40]	; 0x28
 80271c2:	4b05      	ldr	r3, [pc, #20]	; (80271d8 <std+0x40>)
 80271c4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80271c6:	4b05      	ldr	r3, [pc, #20]	; (80271dc <std+0x44>)
 80271c8:	6224      	str	r4, [r4, #32]
 80271ca:	6323      	str	r3, [r4, #48]	; 0x30
 80271cc:	bd10      	pop	{r4, pc}
 80271ce:	bf00      	nop
 80271d0:	08027d5d 	.word	0x08027d5d
 80271d4:	08027d7f 	.word	0x08027d7f
 80271d8:	08027db7 	.word	0x08027db7
 80271dc:	08027ddb 	.word	0x08027ddb

080271e0 <_cleanup_r>:
 80271e0:	4901      	ldr	r1, [pc, #4]	; (80271e8 <_cleanup_r+0x8>)
 80271e2:	f000 b8c1 	b.w	8027368 <_fwalk_reent>
 80271e6:	bf00      	nop
 80271e8:	08028179 	.word	0x08028179

080271ec <__sfmoreglue>:
 80271ec:	b570      	push	{r4, r5, r6, lr}
 80271ee:	2268      	movs	r2, #104	; 0x68
 80271f0:	1e4d      	subs	r5, r1, #1
 80271f2:	4355      	muls	r5, r2
 80271f4:	460e      	mov	r6, r1
 80271f6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80271fa:	f000 f98f 	bl	802751c <_malloc_r>
 80271fe:	4604      	mov	r4, r0
 8027200:	b140      	cbz	r0, 8027214 <__sfmoreglue+0x28>
 8027202:	2100      	movs	r1, #0
 8027204:	e9c0 1600 	strd	r1, r6, [r0]
 8027208:	300c      	adds	r0, #12
 802720a:	60a0      	str	r0, [r4, #8]
 802720c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8027210:	f000 f910 	bl	8027434 <memset>
 8027214:	4620      	mov	r0, r4
 8027216:	bd70      	pop	{r4, r5, r6, pc}

08027218 <__sfp_lock_acquire>:
 8027218:	4801      	ldr	r0, [pc, #4]	; (8027220 <__sfp_lock_acquire+0x8>)
 802721a:	f000 b8ea 	b.w	80273f2 <__retarget_lock_acquire_recursive>
 802721e:	bf00      	nop
 8027220:	2000590a 	.word	0x2000590a

08027224 <__sfp_lock_release>:
 8027224:	4801      	ldr	r0, [pc, #4]	; (802722c <__sfp_lock_release+0x8>)
 8027226:	f000 b8e6 	b.w	80273f6 <__retarget_lock_release_recursive>
 802722a:	bf00      	nop
 802722c:	2000590a 	.word	0x2000590a

08027230 <__sinit_lock_acquire>:
 8027230:	4801      	ldr	r0, [pc, #4]	; (8027238 <__sinit_lock_acquire+0x8>)
 8027232:	f000 b8de 	b.w	80273f2 <__retarget_lock_acquire_recursive>
 8027236:	bf00      	nop
 8027238:	2000590b 	.word	0x2000590b

0802723c <__sinit_lock_release>:
 802723c:	4801      	ldr	r0, [pc, #4]	; (8027244 <__sinit_lock_release+0x8>)
 802723e:	f000 b8da 	b.w	80273f6 <__retarget_lock_release_recursive>
 8027242:	bf00      	nop
 8027244:	2000590b 	.word	0x2000590b

08027248 <__sinit>:
 8027248:	b510      	push	{r4, lr}
 802724a:	4604      	mov	r4, r0
 802724c:	f7ff fff0 	bl	8027230 <__sinit_lock_acquire>
 8027250:	69a3      	ldr	r3, [r4, #24]
 8027252:	b11b      	cbz	r3, 802725c <__sinit+0x14>
 8027254:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8027258:	f7ff bff0 	b.w	802723c <__sinit_lock_release>
 802725c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8027260:	6523      	str	r3, [r4, #80]	; 0x50
 8027262:	4b13      	ldr	r3, [pc, #76]	; (80272b0 <__sinit+0x68>)
 8027264:	4a13      	ldr	r2, [pc, #76]	; (80272b4 <__sinit+0x6c>)
 8027266:	681b      	ldr	r3, [r3, #0]
 8027268:	62a2      	str	r2, [r4, #40]	; 0x28
 802726a:	42a3      	cmp	r3, r4
 802726c:	bf04      	itt	eq
 802726e:	2301      	moveq	r3, #1
 8027270:	61a3      	streq	r3, [r4, #24]
 8027272:	4620      	mov	r0, r4
 8027274:	f000 f820 	bl	80272b8 <__sfp>
 8027278:	6060      	str	r0, [r4, #4]
 802727a:	4620      	mov	r0, r4
 802727c:	f000 f81c 	bl	80272b8 <__sfp>
 8027280:	60a0      	str	r0, [r4, #8]
 8027282:	4620      	mov	r0, r4
 8027284:	f000 f818 	bl	80272b8 <__sfp>
 8027288:	2200      	movs	r2, #0
 802728a:	60e0      	str	r0, [r4, #12]
 802728c:	2104      	movs	r1, #4
 802728e:	6860      	ldr	r0, [r4, #4]
 8027290:	f7ff ff82 	bl	8027198 <std>
 8027294:	68a0      	ldr	r0, [r4, #8]
 8027296:	2201      	movs	r2, #1
 8027298:	2109      	movs	r1, #9
 802729a:	f7ff ff7d 	bl	8027198 <std>
 802729e:	68e0      	ldr	r0, [r4, #12]
 80272a0:	2202      	movs	r2, #2
 80272a2:	2112      	movs	r1, #18
 80272a4:	f7ff ff78 	bl	8027198 <std>
 80272a8:	2301      	movs	r3, #1
 80272aa:	61a3      	str	r3, [r4, #24]
 80272ac:	e7d2      	b.n	8027254 <__sinit+0xc>
 80272ae:	bf00      	nop
 80272b0:	0802c23c 	.word	0x0802c23c
 80272b4:	080271e1 	.word	0x080271e1

080272b8 <__sfp>:
 80272b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80272ba:	4607      	mov	r7, r0
 80272bc:	f7ff ffac 	bl	8027218 <__sfp_lock_acquire>
 80272c0:	4b1e      	ldr	r3, [pc, #120]	; (802733c <__sfp+0x84>)
 80272c2:	681e      	ldr	r6, [r3, #0]
 80272c4:	69b3      	ldr	r3, [r6, #24]
 80272c6:	b913      	cbnz	r3, 80272ce <__sfp+0x16>
 80272c8:	4630      	mov	r0, r6
 80272ca:	f7ff ffbd 	bl	8027248 <__sinit>
 80272ce:	3648      	adds	r6, #72	; 0x48
 80272d0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80272d4:	3b01      	subs	r3, #1
 80272d6:	d503      	bpl.n	80272e0 <__sfp+0x28>
 80272d8:	6833      	ldr	r3, [r6, #0]
 80272da:	b30b      	cbz	r3, 8027320 <__sfp+0x68>
 80272dc:	6836      	ldr	r6, [r6, #0]
 80272de:	e7f7      	b.n	80272d0 <__sfp+0x18>
 80272e0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80272e4:	b9d5      	cbnz	r5, 802731c <__sfp+0x64>
 80272e6:	4b16      	ldr	r3, [pc, #88]	; (8027340 <__sfp+0x88>)
 80272e8:	60e3      	str	r3, [r4, #12]
 80272ea:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80272ee:	6665      	str	r5, [r4, #100]	; 0x64
 80272f0:	f000 f87e 	bl	80273f0 <__retarget_lock_init_recursive>
 80272f4:	f7ff ff96 	bl	8027224 <__sfp_lock_release>
 80272f8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80272fc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8027300:	6025      	str	r5, [r4, #0]
 8027302:	61a5      	str	r5, [r4, #24]
 8027304:	2208      	movs	r2, #8
 8027306:	4629      	mov	r1, r5
 8027308:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 802730c:	f000 f892 	bl	8027434 <memset>
 8027310:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8027314:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8027318:	4620      	mov	r0, r4
 802731a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802731c:	3468      	adds	r4, #104	; 0x68
 802731e:	e7d9      	b.n	80272d4 <__sfp+0x1c>
 8027320:	2104      	movs	r1, #4
 8027322:	4638      	mov	r0, r7
 8027324:	f7ff ff62 	bl	80271ec <__sfmoreglue>
 8027328:	4604      	mov	r4, r0
 802732a:	6030      	str	r0, [r6, #0]
 802732c:	2800      	cmp	r0, #0
 802732e:	d1d5      	bne.n	80272dc <__sfp+0x24>
 8027330:	f7ff ff78 	bl	8027224 <__sfp_lock_release>
 8027334:	230c      	movs	r3, #12
 8027336:	603b      	str	r3, [r7, #0]
 8027338:	e7ee      	b.n	8027318 <__sfp+0x60>
 802733a:	bf00      	nop
 802733c:	0802c23c 	.word	0x0802c23c
 8027340:	ffff0001 	.word	0xffff0001

08027344 <fiprintf>:
 8027344:	b40e      	push	{r1, r2, r3}
 8027346:	b503      	push	{r0, r1, lr}
 8027348:	4601      	mov	r1, r0
 802734a:	ab03      	add	r3, sp, #12
 802734c:	4805      	ldr	r0, [pc, #20]	; (8027364 <fiprintf+0x20>)
 802734e:	f853 2b04 	ldr.w	r2, [r3], #4
 8027352:	6800      	ldr	r0, [r0, #0]
 8027354:	9301      	str	r3, [sp, #4]
 8027356:	f000 f97f 	bl	8027658 <_vfiprintf_r>
 802735a:	b002      	add	sp, #8
 802735c:	f85d eb04 	ldr.w	lr, [sp], #4
 8027360:	b003      	add	sp, #12
 8027362:	4770      	bx	lr
 8027364:	200001ec 	.word	0x200001ec

08027368 <_fwalk_reent>:
 8027368:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802736c:	4606      	mov	r6, r0
 802736e:	4688      	mov	r8, r1
 8027370:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8027374:	2700      	movs	r7, #0
 8027376:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 802737a:	f1b9 0901 	subs.w	r9, r9, #1
 802737e:	d505      	bpl.n	802738c <_fwalk_reent+0x24>
 8027380:	6824      	ldr	r4, [r4, #0]
 8027382:	2c00      	cmp	r4, #0
 8027384:	d1f7      	bne.n	8027376 <_fwalk_reent+0xe>
 8027386:	4638      	mov	r0, r7
 8027388:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802738c:	89ab      	ldrh	r3, [r5, #12]
 802738e:	2b01      	cmp	r3, #1
 8027390:	d907      	bls.n	80273a2 <_fwalk_reent+0x3a>
 8027392:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8027396:	3301      	adds	r3, #1
 8027398:	d003      	beq.n	80273a2 <_fwalk_reent+0x3a>
 802739a:	4629      	mov	r1, r5
 802739c:	4630      	mov	r0, r6
 802739e:	47c0      	blx	r8
 80273a0:	4307      	orrs	r7, r0
 80273a2:	3568      	adds	r5, #104	; 0x68
 80273a4:	e7e9      	b.n	802737a <_fwalk_reent+0x12>
	...

080273a8 <__libc_init_array>:
 80273a8:	b570      	push	{r4, r5, r6, lr}
 80273aa:	4d0d      	ldr	r5, [pc, #52]	; (80273e0 <__libc_init_array+0x38>)
 80273ac:	4c0d      	ldr	r4, [pc, #52]	; (80273e4 <__libc_init_array+0x3c>)
 80273ae:	1b64      	subs	r4, r4, r5
 80273b0:	10a4      	asrs	r4, r4, #2
 80273b2:	2600      	movs	r6, #0
 80273b4:	42a6      	cmp	r6, r4
 80273b6:	d109      	bne.n	80273cc <__libc_init_array+0x24>
 80273b8:	4d0b      	ldr	r5, [pc, #44]	; (80273e8 <__libc_init_array+0x40>)
 80273ba:	4c0c      	ldr	r4, [pc, #48]	; (80273ec <__libc_init_array+0x44>)
 80273bc:	f000 ffd0 	bl	8028360 <_init>
 80273c0:	1b64      	subs	r4, r4, r5
 80273c2:	10a4      	asrs	r4, r4, #2
 80273c4:	2600      	movs	r6, #0
 80273c6:	42a6      	cmp	r6, r4
 80273c8:	d105      	bne.n	80273d6 <__libc_init_array+0x2e>
 80273ca:	bd70      	pop	{r4, r5, r6, pc}
 80273cc:	f855 3b04 	ldr.w	r3, [r5], #4
 80273d0:	4798      	blx	r3
 80273d2:	3601      	adds	r6, #1
 80273d4:	e7ee      	b.n	80273b4 <__libc_init_array+0xc>
 80273d6:	f855 3b04 	ldr.w	r3, [r5], #4
 80273da:	4798      	blx	r3
 80273dc:	3601      	adds	r6, #1
 80273de:	e7f2      	b.n	80273c6 <__libc_init_array+0x1e>
 80273e0:	08048e48 	.word	0x08048e48
 80273e4:	08048e48 	.word	0x08048e48
 80273e8:	08048e48 	.word	0x08048e48
 80273ec:	08048e5c 	.word	0x08048e5c

080273f0 <__retarget_lock_init_recursive>:
 80273f0:	4770      	bx	lr

080273f2 <__retarget_lock_acquire_recursive>:
 80273f2:	4770      	bx	lr

080273f4 <__retarget_lock_release>:
 80273f4:	4770      	bx	lr

080273f6 <__retarget_lock_release_recursive>:
 80273f6:	4770      	bx	lr

080273f8 <malloc>:
 80273f8:	4b02      	ldr	r3, [pc, #8]	; (8027404 <malloc+0xc>)
 80273fa:	4601      	mov	r1, r0
 80273fc:	6818      	ldr	r0, [r3, #0]
 80273fe:	f000 b88d 	b.w	802751c <_malloc_r>
 8027402:	bf00      	nop
 8027404:	200001ec 	.word	0x200001ec

08027408 <free>:
 8027408:	4b02      	ldr	r3, [pc, #8]	; (8027414 <free+0xc>)
 802740a:	4601      	mov	r1, r0
 802740c:	6818      	ldr	r0, [r3, #0]
 802740e:	f000 b819 	b.w	8027444 <_free_r>
 8027412:	bf00      	nop
 8027414:	200001ec 	.word	0x200001ec

08027418 <memcpy>:
 8027418:	440a      	add	r2, r1
 802741a:	4291      	cmp	r1, r2
 802741c:	f100 33ff 	add.w	r3, r0, #4294967295
 8027420:	d100      	bne.n	8027424 <memcpy+0xc>
 8027422:	4770      	bx	lr
 8027424:	b510      	push	{r4, lr}
 8027426:	f811 4b01 	ldrb.w	r4, [r1], #1
 802742a:	f803 4f01 	strb.w	r4, [r3, #1]!
 802742e:	4291      	cmp	r1, r2
 8027430:	d1f9      	bne.n	8027426 <memcpy+0xe>
 8027432:	bd10      	pop	{r4, pc}

08027434 <memset>:
 8027434:	4402      	add	r2, r0
 8027436:	4603      	mov	r3, r0
 8027438:	4293      	cmp	r3, r2
 802743a:	d100      	bne.n	802743e <memset+0xa>
 802743c:	4770      	bx	lr
 802743e:	f803 1b01 	strb.w	r1, [r3], #1
 8027442:	e7f9      	b.n	8027438 <memset+0x4>

08027444 <_free_r>:
 8027444:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8027446:	2900      	cmp	r1, #0
 8027448:	d044      	beq.n	80274d4 <_free_r+0x90>
 802744a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 802744e:	9001      	str	r0, [sp, #4]
 8027450:	2b00      	cmp	r3, #0
 8027452:	f1a1 0404 	sub.w	r4, r1, #4
 8027456:	bfb8      	it	lt
 8027458:	18e4      	addlt	r4, r4, r3
 802745a:	f000 ff41 	bl	80282e0 <__malloc_lock>
 802745e:	4a1e      	ldr	r2, [pc, #120]	; (80274d8 <_free_r+0x94>)
 8027460:	9801      	ldr	r0, [sp, #4]
 8027462:	6813      	ldr	r3, [r2, #0]
 8027464:	b933      	cbnz	r3, 8027474 <_free_r+0x30>
 8027466:	6063      	str	r3, [r4, #4]
 8027468:	6014      	str	r4, [r2, #0]
 802746a:	b003      	add	sp, #12
 802746c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8027470:	f000 bf3c 	b.w	80282ec <__malloc_unlock>
 8027474:	42a3      	cmp	r3, r4
 8027476:	d908      	bls.n	802748a <_free_r+0x46>
 8027478:	6825      	ldr	r5, [r4, #0]
 802747a:	1961      	adds	r1, r4, r5
 802747c:	428b      	cmp	r3, r1
 802747e:	bf01      	itttt	eq
 8027480:	6819      	ldreq	r1, [r3, #0]
 8027482:	685b      	ldreq	r3, [r3, #4]
 8027484:	1949      	addeq	r1, r1, r5
 8027486:	6021      	streq	r1, [r4, #0]
 8027488:	e7ed      	b.n	8027466 <_free_r+0x22>
 802748a:	461a      	mov	r2, r3
 802748c:	685b      	ldr	r3, [r3, #4]
 802748e:	b10b      	cbz	r3, 8027494 <_free_r+0x50>
 8027490:	42a3      	cmp	r3, r4
 8027492:	d9fa      	bls.n	802748a <_free_r+0x46>
 8027494:	6811      	ldr	r1, [r2, #0]
 8027496:	1855      	adds	r5, r2, r1
 8027498:	42a5      	cmp	r5, r4
 802749a:	d10b      	bne.n	80274b4 <_free_r+0x70>
 802749c:	6824      	ldr	r4, [r4, #0]
 802749e:	4421      	add	r1, r4
 80274a0:	1854      	adds	r4, r2, r1
 80274a2:	42a3      	cmp	r3, r4
 80274a4:	6011      	str	r1, [r2, #0]
 80274a6:	d1e0      	bne.n	802746a <_free_r+0x26>
 80274a8:	681c      	ldr	r4, [r3, #0]
 80274aa:	685b      	ldr	r3, [r3, #4]
 80274ac:	6053      	str	r3, [r2, #4]
 80274ae:	4421      	add	r1, r4
 80274b0:	6011      	str	r1, [r2, #0]
 80274b2:	e7da      	b.n	802746a <_free_r+0x26>
 80274b4:	d902      	bls.n	80274bc <_free_r+0x78>
 80274b6:	230c      	movs	r3, #12
 80274b8:	6003      	str	r3, [r0, #0]
 80274ba:	e7d6      	b.n	802746a <_free_r+0x26>
 80274bc:	6825      	ldr	r5, [r4, #0]
 80274be:	1961      	adds	r1, r4, r5
 80274c0:	428b      	cmp	r3, r1
 80274c2:	bf04      	itt	eq
 80274c4:	6819      	ldreq	r1, [r3, #0]
 80274c6:	685b      	ldreq	r3, [r3, #4]
 80274c8:	6063      	str	r3, [r4, #4]
 80274ca:	bf04      	itt	eq
 80274cc:	1949      	addeq	r1, r1, r5
 80274ce:	6021      	streq	r1, [r4, #0]
 80274d0:	6054      	str	r4, [r2, #4]
 80274d2:	e7ca      	b.n	802746a <_free_r+0x26>
 80274d4:	b003      	add	sp, #12
 80274d6:	bd30      	pop	{r4, r5, pc}
 80274d8:	2000590c 	.word	0x2000590c

080274dc <sbrk_aligned>:
 80274dc:	b570      	push	{r4, r5, r6, lr}
 80274de:	4e0e      	ldr	r6, [pc, #56]	; (8027518 <sbrk_aligned+0x3c>)
 80274e0:	460c      	mov	r4, r1
 80274e2:	6831      	ldr	r1, [r6, #0]
 80274e4:	4605      	mov	r5, r0
 80274e6:	b911      	cbnz	r1, 80274ee <sbrk_aligned+0x12>
 80274e8:	f000 fbe4 	bl	8027cb4 <_sbrk_r>
 80274ec:	6030      	str	r0, [r6, #0]
 80274ee:	4621      	mov	r1, r4
 80274f0:	4628      	mov	r0, r5
 80274f2:	f000 fbdf 	bl	8027cb4 <_sbrk_r>
 80274f6:	1c43      	adds	r3, r0, #1
 80274f8:	d00a      	beq.n	8027510 <sbrk_aligned+0x34>
 80274fa:	1cc4      	adds	r4, r0, #3
 80274fc:	f024 0403 	bic.w	r4, r4, #3
 8027500:	42a0      	cmp	r0, r4
 8027502:	d007      	beq.n	8027514 <sbrk_aligned+0x38>
 8027504:	1a21      	subs	r1, r4, r0
 8027506:	4628      	mov	r0, r5
 8027508:	f000 fbd4 	bl	8027cb4 <_sbrk_r>
 802750c:	3001      	adds	r0, #1
 802750e:	d101      	bne.n	8027514 <sbrk_aligned+0x38>
 8027510:	f04f 34ff 	mov.w	r4, #4294967295
 8027514:	4620      	mov	r0, r4
 8027516:	bd70      	pop	{r4, r5, r6, pc}
 8027518:	20005910 	.word	0x20005910

0802751c <_malloc_r>:
 802751c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8027520:	1ccd      	adds	r5, r1, #3
 8027522:	f025 0503 	bic.w	r5, r5, #3
 8027526:	3508      	adds	r5, #8
 8027528:	2d0c      	cmp	r5, #12
 802752a:	bf38      	it	cc
 802752c:	250c      	movcc	r5, #12
 802752e:	2d00      	cmp	r5, #0
 8027530:	4607      	mov	r7, r0
 8027532:	db01      	blt.n	8027538 <_malloc_r+0x1c>
 8027534:	42a9      	cmp	r1, r5
 8027536:	d905      	bls.n	8027544 <_malloc_r+0x28>
 8027538:	230c      	movs	r3, #12
 802753a:	603b      	str	r3, [r7, #0]
 802753c:	2600      	movs	r6, #0
 802753e:	4630      	mov	r0, r6
 8027540:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8027544:	4e2e      	ldr	r6, [pc, #184]	; (8027600 <_malloc_r+0xe4>)
 8027546:	f000 fecb 	bl	80282e0 <__malloc_lock>
 802754a:	6833      	ldr	r3, [r6, #0]
 802754c:	461c      	mov	r4, r3
 802754e:	bb34      	cbnz	r4, 802759e <_malloc_r+0x82>
 8027550:	4629      	mov	r1, r5
 8027552:	4638      	mov	r0, r7
 8027554:	f7ff ffc2 	bl	80274dc <sbrk_aligned>
 8027558:	1c43      	adds	r3, r0, #1
 802755a:	4604      	mov	r4, r0
 802755c:	d14d      	bne.n	80275fa <_malloc_r+0xde>
 802755e:	6834      	ldr	r4, [r6, #0]
 8027560:	4626      	mov	r6, r4
 8027562:	2e00      	cmp	r6, #0
 8027564:	d140      	bne.n	80275e8 <_malloc_r+0xcc>
 8027566:	6823      	ldr	r3, [r4, #0]
 8027568:	4631      	mov	r1, r6
 802756a:	4638      	mov	r0, r7
 802756c:	eb04 0803 	add.w	r8, r4, r3
 8027570:	f000 fba0 	bl	8027cb4 <_sbrk_r>
 8027574:	4580      	cmp	r8, r0
 8027576:	d13a      	bne.n	80275ee <_malloc_r+0xd2>
 8027578:	6821      	ldr	r1, [r4, #0]
 802757a:	3503      	adds	r5, #3
 802757c:	1a6d      	subs	r5, r5, r1
 802757e:	f025 0503 	bic.w	r5, r5, #3
 8027582:	3508      	adds	r5, #8
 8027584:	2d0c      	cmp	r5, #12
 8027586:	bf38      	it	cc
 8027588:	250c      	movcc	r5, #12
 802758a:	4629      	mov	r1, r5
 802758c:	4638      	mov	r0, r7
 802758e:	f7ff ffa5 	bl	80274dc <sbrk_aligned>
 8027592:	3001      	adds	r0, #1
 8027594:	d02b      	beq.n	80275ee <_malloc_r+0xd2>
 8027596:	6823      	ldr	r3, [r4, #0]
 8027598:	442b      	add	r3, r5
 802759a:	6023      	str	r3, [r4, #0]
 802759c:	e00e      	b.n	80275bc <_malloc_r+0xa0>
 802759e:	6822      	ldr	r2, [r4, #0]
 80275a0:	1b52      	subs	r2, r2, r5
 80275a2:	d41e      	bmi.n	80275e2 <_malloc_r+0xc6>
 80275a4:	2a0b      	cmp	r2, #11
 80275a6:	d916      	bls.n	80275d6 <_malloc_r+0xba>
 80275a8:	1961      	adds	r1, r4, r5
 80275aa:	42a3      	cmp	r3, r4
 80275ac:	6025      	str	r5, [r4, #0]
 80275ae:	bf18      	it	ne
 80275b0:	6059      	strne	r1, [r3, #4]
 80275b2:	6863      	ldr	r3, [r4, #4]
 80275b4:	bf08      	it	eq
 80275b6:	6031      	streq	r1, [r6, #0]
 80275b8:	5162      	str	r2, [r4, r5]
 80275ba:	604b      	str	r3, [r1, #4]
 80275bc:	4638      	mov	r0, r7
 80275be:	f104 060b 	add.w	r6, r4, #11
 80275c2:	f000 fe93 	bl	80282ec <__malloc_unlock>
 80275c6:	f026 0607 	bic.w	r6, r6, #7
 80275ca:	1d23      	adds	r3, r4, #4
 80275cc:	1af2      	subs	r2, r6, r3
 80275ce:	d0b6      	beq.n	802753e <_malloc_r+0x22>
 80275d0:	1b9b      	subs	r3, r3, r6
 80275d2:	50a3      	str	r3, [r4, r2]
 80275d4:	e7b3      	b.n	802753e <_malloc_r+0x22>
 80275d6:	6862      	ldr	r2, [r4, #4]
 80275d8:	42a3      	cmp	r3, r4
 80275da:	bf0c      	ite	eq
 80275dc:	6032      	streq	r2, [r6, #0]
 80275de:	605a      	strne	r2, [r3, #4]
 80275e0:	e7ec      	b.n	80275bc <_malloc_r+0xa0>
 80275e2:	4623      	mov	r3, r4
 80275e4:	6864      	ldr	r4, [r4, #4]
 80275e6:	e7b2      	b.n	802754e <_malloc_r+0x32>
 80275e8:	4634      	mov	r4, r6
 80275ea:	6876      	ldr	r6, [r6, #4]
 80275ec:	e7b9      	b.n	8027562 <_malloc_r+0x46>
 80275ee:	230c      	movs	r3, #12
 80275f0:	603b      	str	r3, [r7, #0]
 80275f2:	4638      	mov	r0, r7
 80275f4:	f000 fe7a 	bl	80282ec <__malloc_unlock>
 80275f8:	e7a1      	b.n	802753e <_malloc_r+0x22>
 80275fa:	6025      	str	r5, [r4, #0]
 80275fc:	e7de      	b.n	80275bc <_malloc_r+0xa0>
 80275fe:	bf00      	nop
 8027600:	2000590c 	.word	0x2000590c

08027604 <__sfputc_r>:
 8027604:	6893      	ldr	r3, [r2, #8]
 8027606:	3b01      	subs	r3, #1
 8027608:	2b00      	cmp	r3, #0
 802760a:	b410      	push	{r4}
 802760c:	6093      	str	r3, [r2, #8]
 802760e:	da08      	bge.n	8027622 <__sfputc_r+0x1e>
 8027610:	6994      	ldr	r4, [r2, #24]
 8027612:	42a3      	cmp	r3, r4
 8027614:	db01      	blt.n	802761a <__sfputc_r+0x16>
 8027616:	290a      	cmp	r1, #10
 8027618:	d103      	bne.n	8027622 <__sfputc_r+0x1e>
 802761a:	f85d 4b04 	ldr.w	r4, [sp], #4
 802761e:	f000 bbe1 	b.w	8027de4 <__swbuf_r>
 8027622:	6813      	ldr	r3, [r2, #0]
 8027624:	1c58      	adds	r0, r3, #1
 8027626:	6010      	str	r0, [r2, #0]
 8027628:	7019      	strb	r1, [r3, #0]
 802762a:	4608      	mov	r0, r1
 802762c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8027630:	4770      	bx	lr

08027632 <__sfputs_r>:
 8027632:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8027634:	4606      	mov	r6, r0
 8027636:	460f      	mov	r7, r1
 8027638:	4614      	mov	r4, r2
 802763a:	18d5      	adds	r5, r2, r3
 802763c:	42ac      	cmp	r4, r5
 802763e:	d101      	bne.n	8027644 <__sfputs_r+0x12>
 8027640:	2000      	movs	r0, #0
 8027642:	e007      	b.n	8027654 <__sfputs_r+0x22>
 8027644:	f814 1b01 	ldrb.w	r1, [r4], #1
 8027648:	463a      	mov	r2, r7
 802764a:	4630      	mov	r0, r6
 802764c:	f7ff ffda 	bl	8027604 <__sfputc_r>
 8027650:	1c43      	adds	r3, r0, #1
 8027652:	d1f3      	bne.n	802763c <__sfputs_r+0xa>
 8027654:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08027658 <_vfiprintf_r>:
 8027658:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802765c:	460d      	mov	r5, r1
 802765e:	b09d      	sub	sp, #116	; 0x74
 8027660:	4614      	mov	r4, r2
 8027662:	4698      	mov	r8, r3
 8027664:	4606      	mov	r6, r0
 8027666:	b118      	cbz	r0, 8027670 <_vfiprintf_r+0x18>
 8027668:	6983      	ldr	r3, [r0, #24]
 802766a:	b90b      	cbnz	r3, 8027670 <_vfiprintf_r+0x18>
 802766c:	f7ff fdec 	bl	8027248 <__sinit>
 8027670:	4b89      	ldr	r3, [pc, #548]	; (8027898 <_vfiprintf_r+0x240>)
 8027672:	429d      	cmp	r5, r3
 8027674:	d11b      	bne.n	80276ae <_vfiprintf_r+0x56>
 8027676:	6875      	ldr	r5, [r6, #4]
 8027678:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 802767a:	07d9      	lsls	r1, r3, #31
 802767c:	d405      	bmi.n	802768a <_vfiprintf_r+0x32>
 802767e:	89ab      	ldrh	r3, [r5, #12]
 8027680:	059a      	lsls	r2, r3, #22
 8027682:	d402      	bmi.n	802768a <_vfiprintf_r+0x32>
 8027684:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8027686:	f7ff feb4 	bl	80273f2 <__retarget_lock_acquire_recursive>
 802768a:	89ab      	ldrh	r3, [r5, #12]
 802768c:	071b      	lsls	r3, r3, #28
 802768e:	d501      	bpl.n	8027694 <_vfiprintf_r+0x3c>
 8027690:	692b      	ldr	r3, [r5, #16]
 8027692:	b9eb      	cbnz	r3, 80276d0 <_vfiprintf_r+0x78>
 8027694:	4629      	mov	r1, r5
 8027696:	4630      	mov	r0, r6
 8027698:	f000 fc08 	bl	8027eac <__swsetup_r>
 802769c:	b1c0      	cbz	r0, 80276d0 <_vfiprintf_r+0x78>
 802769e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80276a0:	07dc      	lsls	r4, r3, #31
 80276a2:	d50e      	bpl.n	80276c2 <_vfiprintf_r+0x6a>
 80276a4:	f04f 30ff 	mov.w	r0, #4294967295
 80276a8:	b01d      	add	sp, #116	; 0x74
 80276aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80276ae:	4b7b      	ldr	r3, [pc, #492]	; (802789c <_vfiprintf_r+0x244>)
 80276b0:	429d      	cmp	r5, r3
 80276b2:	d101      	bne.n	80276b8 <_vfiprintf_r+0x60>
 80276b4:	68b5      	ldr	r5, [r6, #8]
 80276b6:	e7df      	b.n	8027678 <_vfiprintf_r+0x20>
 80276b8:	4b79      	ldr	r3, [pc, #484]	; (80278a0 <_vfiprintf_r+0x248>)
 80276ba:	429d      	cmp	r5, r3
 80276bc:	bf08      	it	eq
 80276be:	68f5      	ldreq	r5, [r6, #12]
 80276c0:	e7da      	b.n	8027678 <_vfiprintf_r+0x20>
 80276c2:	89ab      	ldrh	r3, [r5, #12]
 80276c4:	0598      	lsls	r0, r3, #22
 80276c6:	d4ed      	bmi.n	80276a4 <_vfiprintf_r+0x4c>
 80276c8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80276ca:	f7ff fe94 	bl	80273f6 <__retarget_lock_release_recursive>
 80276ce:	e7e9      	b.n	80276a4 <_vfiprintf_r+0x4c>
 80276d0:	2300      	movs	r3, #0
 80276d2:	9309      	str	r3, [sp, #36]	; 0x24
 80276d4:	2320      	movs	r3, #32
 80276d6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80276da:	f8cd 800c 	str.w	r8, [sp, #12]
 80276de:	2330      	movs	r3, #48	; 0x30
 80276e0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80278a4 <_vfiprintf_r+0x24c>
 80276e4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80276e8:	f04f 0901 	mov.w	r9, #1
 80276ec:	4623      	mov	r3, r4
 80276ee:	469a      	mov	sl, r3
 80276f0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80276f4:	b10a      	cbz	r2, 80276fa <_vfiprintf_r+0xa2>
 80276f6:	2a25      	cmp	r2, #37	; 0x25
 80276f8:	d1f9      	bne.n	80276ee <_vfiprintf_r+0x96>
 80276fa:	ebba 0b04 	subs.w	fp, sl, r4
 80276fe:	d00b      	beq.n	8027718 <_vfiprintf_r+0xc0>
 8027700:	465b      	mov	r3, fp
 8027702:	4622      	mov	r2, r4
 8027704:	4629      	mov	r1, r5
 8027706:	4630      	mov	r0, r6
 8027708:	f7ff ff93 	bl	8027632 <__sfputs_r>
 802770c:	3001      	adds	r0, #1
 802770e:	f000 80aa 	beq.w	8027866 <_vfiprintf_r+0x20e>
 8027712:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8027714:	445a      	add	r2, fp
 8027716:	9209      	str	r2, [sp, #36]	; 0x24
 8027718:	f89a 3000 	ldrb.w	r3, [sl]
 802771c:	2b00      	cmp	r3, #0
 802771e:	f000 80a2 	beq.w	8027866 <_vfiprintf_r+0x20e>
 8027722:	2300      	movs	r3, #0
 8027724:	f04f 32ff 	mov.w	r2, #4294967295
 8027728:	e9cd 2305 	strd	r2, r3, [sp, #20]
 802772c:	f10a 0a01 	add.w	sl, sl, #1
 8027730:	9304      	str	r3, [sp, #16]
 8027732:	9307      	str	r3, [sp, #28]
 8027734:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8027738:	931a      	str	r3, [sp, #104]	; 0x68
 802773a:	4654      	mov	r4, sl
 802773c:	2205      	movs	r2, #5
 802773e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8027742:	4858      	ldr	r0, [pc, #352]	; (80278a4 <_vfiprintf_r+0x24c>)
 8027744:	f7d8 fdcc 	bl	80002e0 <memchr>
 8027748:	9a04      	ldr	r2, [sp, #16]
 802774a:	b9d8      	cbnz	r0, 8027784 <_vfiprintf_r+0x12c>
 802774c:	06d1      	lsls	r1, r2, #27
 802774e:	bf44      	itt	mi
 8027750:	2320      	movmi	r3, #32
 8027752:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8027756:	0713      	lsls	r3, r2, #28
 8027758:	bf44      	itt	mi
 802775a:	232b      	movmi	r3, #43	; 0x2b
 802775c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8027760:	f89a 3000 	ldrb.w	r3, [sl]
 8027764:	2b2a      	cmp	r3, #42	; 0x2a
 8027766:	d015      	beq.n	8027794 <_vfiprintf_r+0x13c>
 8027768:	9a07      	ldr	r2, [sp, #28]
 802776a:	4654      	mov	r4, sl
 802776c:	2000      	movs	r0, #0
 802776e:	f04f 0c0a 	mov.w	ip, #10
 8027772:	4621      	mov	r1, r4
 8027774:	f811 3b01 	ldrb.w	r3, [r1], #1
 8027778:	3b30      	subs	r3, #48	; 0x30
 802777a:	2b09      	cmp	r3, #9
 802777c:	d94e      	bls.n	802781c <_vfiprintf_r+0x1c4>
 802777e:	b1b0      	cbz	r0, 80277ae <_vfiprintf_r+0x156>
 8027780:	9207      	str	r2, [sp, #28]
 8027782:	e014      	b.n	80277ae <_vfiprintf_r+0x156>
 8027784:	eba0 0308 	sub.w	r3, r0, r8
 8027788:	fa09 f303 	lsl.w	r3, r9, r3
 802778c:	4313      	orrs	r3, r2
 802778e:	9304      	str	r3, [sp, #16]
 8027790:	46a2      	mov	sl, r4
 8027792:	e7d2      	b.n	802773a <_vfiprintf_r+0xe2>
 8027794:	9b03      	ldr	r3, [sp, #12]
 8027796:	1d19      	adds	r1, r3, #4
 8027798:	681b      	ldr	r3, [r3, #0]
 802779a:	9103      	str	r1, [sp, #12]
 802779c:	2b00      	cmp	r3, #0
 802779e:	bfbb      	ittet	lt
 80277a0:	425b      	neglt	r3, r3
 80277a2:	f042 0202 	orrlt.w	r2, r2, #2
 80277a6:	9307      	strge	r3, [sp, #28]
 80277a8:	9307      	strlt	r3, [sp, #28]
 80277aa:	bfb8      	it	lt
 80277ac:	9204      	strlt	r2, [sp, #16]
 80277ae:	7823      	ldrb	r3, [r4, #0]
 80277b0:	2b2e      	cmp	r3, #46	; 0x2e
 80277b2:	d10c      	bne.n	80277ce <_vfiprintf_r+0x176>
 80277b4:	7863      	ldrb	r3, [r4, #1]
 80277b6:	2b2a      	cmp	r3, #42	; 0x2a
 80277b8:	d135      	bne.n	8027826 <_vfiprintf_r+0x1ce>
 80277ba:	9b03      	ldr	r3, [sp, #12]
 80277bc:	1d1a      	adds	r2, r3, #4
 80277be:	681b      	ldr	r3, [r3, #0]
 80277c0:	9203      	str	r2, [sp, #12]
 80277c2:	2b00      	cmp	r3, #0
 80277c4:	bfb8      	it	lt
 80277c6:	f04f 33ff 	movlt.w	r3, #4294967295
 80277ca:	3402      	adds	r4, #2
 80277cc:	9305      	str	r3, [sp, #20]
 80277ce:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80278b4 <_vfiprintf_r+0x25c>
 80277d2:	7821      	ldrb	r1, [r4, #0]
 80277d4:	2203      	movs	r2, #3
 80277d6:	4650      	mov	r0, sl
 80277d8:	f7d8 fd82 	bl	80002e0 <memchr>
 80277dc:	b140      	cbz	r0, 80277f0 <_vfiprintf_r+0x198>
 80277de:	2340      	movs	r3, #64	; 0x40
 80277e0:	eba0 000a 	sub.w	r0, r0, sl
 80277e4:	fa03 f000 	lsl.w	r0, r3, r0
 80277e8:	9b04      	ldr	r3, [sp, #16]
 80277ea:	4303      	orrs	r3, r0
 80277ec:	3401      	adds	r4, #1
 80277ee:	9304      	str	r3, [sp, #16]
 80277f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80277f4:	482c      	ldr	r0, [pc, #176]	; (80278a8 <_vfiprintf_r+0x250>)
 80277f6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80277fa:	2206      	movs	r2, #6
 80277fc:	f7d8 fd70 	bl	80002e0 <memchr>
 8027800:	2800      	cmp	r0, #0
 8027802:	d03f      	beq.n	8027884 <_vfiprintf_r+0x22c>
 8027804:	4b29      	ldr	r3, [pc, #164]	; (80278ac <_vfiprintf_r+0x254>)
 8027806:	bb1b      	cbnz	r3, 8027850 <_vfiprintf_r+0x1f8>
 8027808:	9b03      	ldr	r3, [sp, #12]
 802780a:	3307      	adds	r3, #7
 802780c:	f023 0307 	bic.w	r3, r3, #7
 8027810:	3308      	adds	r3, #8
 8027812:	9303      	str	r3, [sp, #12]
 8027814:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8027816:	443b      	add	r3, r7
 8027818:	9309      	str	r3, [sp, #36]	; 0x24
 802781a:	e767      	b.n	80276ec <_vfiprintf_r+0x94>
 802781c:	fb0c 3202 	mla	r2, ip, r2, r3
 8027820:	460c      	mov	r4, r1
 8027822:	2001      	movs	r0, #1
 8027824:	e7a5      	b.n	8027772 <_vfiprintf_r+0x11a>
 8027826:	2300      	movs	r3, #0
 8027828:	3401      	adds	r4, #1
 802782a:	9305      	str	r3, [sp, #20]
 802782c:	4619      	mov	r1, r3
 802782e:	f04f 0c0a 	mov.w	ip, #10
 8027832:	4620      	mov	r0, r4
 8027834:	f810 2b01 	ldrb.w	r2, [r0], #1
 8027838:	3a30      	subs	r2, #48	; 0x30
 802783a:	2a09      	cmp	r2, #9
 802783c:	d903      	bls.n	8027846 <_vfiprintf_r+0x1ee>
 802783e:	2b00      	cmp	r3, #0
 8027840:	d0c5      	beq.n	80277ce <_vfiprintf_r+0x176>
 8027842:	9105      	str	r1, [sp, #20]
 8027844:	e7c3      	b.n	80277ce <_vfiprintf_r+0x176>
 8027846:	fb0c 2101 	mla	r1, ip, r1, r2
 802784a:	4604      	mov	r4, r0
 802784c:	2301      	movs	r3, #1
 802784e:	e7f0      	b.n	8027832 <_vfiprintf_r+0x1da>
 8027850:	ab03      	add	r3, sp, #12
 8027852:	9300      	str	r3, [sp, #0]
 8027854:	462a      	mov	r2, r5
 8027856:	4b16      	ldr	r3, [pc, #88]	; (80278b0 <_vfiprintf_r+0x258>)
 8027858:	a904      	add	r1, sp, #16
 802785a:	4630      	mov	r0, r6
 802785c:	f3af 8000 	nop.w
 8027860:	4607      	mov	r7, r0
 8027862:	1c78      	adds	r0, r7, #1
 8027864:	d1d6      	bne.n	8027814 <_vfiprintf_r+0x1bc>
 8027866:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8027868:	07d9      	lsls	r1, r3, #31
 802786a:	d405      	bmi.n	8027878 <_vfiprintf_r+0x220>
 802786c:	89ab      	ldrh	r3, [r5, #12]
 802786e:	059a      	lsls	r2, r3, #22
 8027870:	d402      	bmi.n	8027878 <_vfiprintf_r+0x220>
 8027872:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8027874:	f7ff fdbf 	bl	80273f6 <__retarget_lock_release_recursive>
 8027878:	89ab      	ldrh	r3, [r5, #12]
 802787a:	065b      	lsls	r3, r3, #25
 802787c:	f53f af12 	bmi.w	80276a4 <_vfiprintf_r+0x4c>
 8027880:	9809      	ldr	r0, [sp, #36]	; 0x24
 8027882:	e711      	b.n	80276a8 <_vfiprintf_r+0x50>
 8027884:	ab03      	add	r3, sp, #12
 8027886:	9300      	str	r3, [sp, #0]
 8027888:	462a      	mov	r2, r5
 802788a:	4b09      	ldr	r3, [pc, #36]	; (80278b0 <_vfiprintf_r+0x258>)
 802788c:	a904      	add	r1, sp, #16
 802788e:	4630      	mov	r0, r6
 8027890:	f000 f880 	bl	8027994 <_printf_i>
 8027894:	e7e4      	b.n	8027860 <_vfiprintf_r+0x208>
 8027896:	bf00      	nop
 8027898:	0802c1fc 	.word	0x0802c1fc
 802789c:	0802c21c 	.word	0x0802c21c
 80278a0:	0802c1dc 	.word	0x0802c1dc
 80278a4:	0802c240 	.word	0x0802c240
 80278a8:	0802c24a 	.word	0x0802c24a
 80278ac:	00000000 	.word	0x00000000
 80278b0:	08027633 	.word	0x08027633
 80278b4:	0802c246 	.word	0x0802c246

080278b8 <_printf_common>:
 80278b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80278bc:	4616      	mov	r6, r2
 80278be:	4699      	mov	r9, r3
 80278c0:	688a      	ldr	r2, [r1, #8]
 80278c2:	690b      	ldr	r3, [r1, #16]
 80278c4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80278c8:	4293      	cmp	r3, r2
 80278ca:	bfb8      	it	lt
 80278cc:	4613      	movlt	r3, r2
 80278ce:	6033      	str	r3, [r6, #0]
 80278d0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80278d4:	4607      	mov	r7, r0
 80278d6:	460c      	mov	r4, r1
 80278d8:	b10a      	cbz	r2, 80278de <_printf_common+0x26>
 80278da:	3301      	adds	r3, #1
 80278dc:	6033      	str	r3, [r6, #0]
 80278de:	6823      	ldr	r3, [r4, #0]
 80278e0:	0699      	lsls	r1, r3, #26
 80278e2:	bf42      	ittt	mi
 80278e4:	6833      	ldrmi	r3, [r6, #0]
 80278e6:	3302      	addmi	r3, #2
 80278e8:	6033      	strmi	r3, [r6, #0]
 80278ea:	6825      	ldr	r5, [r4, #0]
 80278ec:	f015 0506 	ands.w	r5, r5, #6
 80278f0:	d106      	bne.n	8027900 <_printf_common+0x48>
 80278f2:	f104 0a19 	add.w	sl, r4, #25
 80278f6:	68e3      	ldr	r3, [r4, #12]
 80278f8:	6832      	ldr	r2, [r6, #0]
 80278fa:	1a9b      	subs	r3, r3, r2
 80278fc:	42ab      	cmp	r3, r5
 80278fe:	dc26      	bgt.n	802794e <_printf_common+0x96>
 8027900:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8027904:	1e13      	subs	r3, r2, #0
 8027906:	6822      	ldr	r2, [r4, #0]
 8027908:	bf18      	it	ne
 802790a:	2301      	movne	r3, #1
 802790c:	0692      	lsls	r2, r2, #26
 802790e:	d42b      	bmi.n	8027968 <_printf_common+0xb0>
 8027910:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8027914:	4649      	mov	r1, r9
 8027916:	4638      	mov	r0, r7
 8027918:	47c0      	blx	r8
 802791a:	3001      	adds	r0, #1
 802791c:	d01e      	beq.n	802795c <_printf_common+0xa4>
 802791e:	6823      	ldr	r3, [r4, #0]
 8027920:	68e5      	ldr	r5, [r4, #12]
 8027922:	6832      	ldr	r2, [r6, #0]
 8027924:	f003 0306 	and.w	r3, r3, #6
 8027928:	2b04      	cmp	r3, #4
 802792a:	bf08      	it	eq
 802792c:	1aad      	subeq	r5, r5, r2
 802792e:	68a3      	ldr	r3, [r4, #8]
 8027930:	6922      	ldr	r2, [r4, #16]
 8027932:	bf0c      	ite	eq
 8027934:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8027938:	2500      	movne	r5, #0
 802793a:	4293      	cmp	r3, r2
 802793c:	bfc4      	itt	gt
 802793e:	1a9b      	subgt	r3, r3, r2
 8027940:	18ed      	addgt	r5, r5, r3
 8027942:	2600      	movs	r6, #0
 8027944:	341a      	adds	r4, #26
 8027946:	42b5      	cmp	r5, r6
 8027948:	d11a      	bne.n	8027980 <_printf_common+0xc8>
 802794a:	2000      	movs	r0, #0
 802794c:	e008      	b.n	8027960 <_printf_common+0xa8>
 802794e:	2301      	movs	r3, #1
 8027950:	4652      	mov	r2, sl
 8027952:	4649      	mov	r1, r9
 8027954:	4638      	mov	r0, r7
 8027956:	47c0      	blx	r8
 8027958:	3001      	adds	r0, #1
 802795a:	d103      	bne.n	8027964 <_printf_common+0xac>
 802795c:	f04f 30ff 	mov.w	r0, #4294967295
 8027960:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8027964:	3501      	adds	r5, #1
 8027966:	e7c6      	b.n	80278f6 <_printf_common+0x3e>
 8027968:	18e1      	adds	r1, r4, r3
 802796a:	1c5a      	adds	r2, r3, #1
 802796c:	2030      	movs	r0, #48	; 0x30
 802796e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8027972:	4422      	add	r2, r4
 8027974:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8027978:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 802797c:	3302      	adds	r3, #2
 802797e:	e7c7      	b.n	8027910 <_printf_common+0x58>
 8027980:	2301      	movs	r3, #1
 8027982:	4622      	mov	r2, r4
 8027984:	4649      	mov	r1, r9
 8027986:	4638      	mov	r0, r7
 8027988:	47c0      	blx	r8
 802798a:	3001      	adds	r0, #1
 802798c:	d0e6      	beq.n	802795c <_printf_common+0xa4>
 802798e:	3601      	adds	r6, #1
 8027990:	e7d9      	b.n	8027946 <_printf_common+0x8e>
	...

08027994 <_printf_i>:
 8027994:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8027998:	7e0f      	ldrb	r7, [r1, #24]
 802799a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 802799c:	2f78      	cmp	r7, #120	; 0x78
 802799e:	4691      	mov	r9, r2
 80279a0:	4680      	mov	r8, r0
 80279a2:	460c      	mov	r4, r1
 80279a4:	469a      	mov	sl, r3
 80279a6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80279aa:	d807      	bhi.n	80279bc <_printf_i+0x28>
 80279ac:	2f62      	cmp	r7, #98	; 0x62
 80279ae:	d80a      	bhi.n	80279c6 <_printf_i+0x32>
 80279b0:	2f00      	cmp	r7, #0
 80279b2:	f000 80d8 	beq.w	8027b66 <_printf_i+0x1d2>
 80279b6:	2f58      	cmp	r7, #88	; 0x58
 80279b8:	f000 80a3 	beq.w	8027b02 <_printf_i+0x16e>
 80279bc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80279c0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80279c4:	e03a      	b.n	8027a3c <_printf_i+0xa8>
 80279c6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80279ca:	2b15      	cmp	r3, #21
 80279cc:	d8f6      	bhi.n	80279bc <_printf_i+0x28>
 80279ce:	a101      	add	r1, pc, #4	; (adr r1, 80279d4 <_printf_i+0x40>)
 80279d0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80279d4:	08027a2d 	.word	0x08027a2d
 80279d8:	08027a41 	.word	0x08027a41
 80279dc:	080279bd 	.word	0x080279bd
 80279e0:	080279bd 	.word	0x080279bd
 80279e4:	080279bd 	.word	0x080279bd
 80279e8:	080279bd 	.word	0x080279bd
 80279ec:	08027a41 	.word	0x08027a41
 80279f0:	080279bd 	.word	0x080279bd
 80279f4:	080279bd 	.word	0x080279bd
 80279f8:	080279bd 	.word	0x080279bd
 80279fc:	080279bd 	.word	0x080279bd
 8027a00:	08027b4d 	.word	0x08027b4d
 8027a04:	08027a71 	.word	0x08027a71
 8027a08:	08027b2f 	.word	0x08027b2f
 8027a0c:	080279bd 	.word	0x080279bd
 8027a10:	080279bd 	.word	0x080279bd
 8027a14:	08027b6f 	.word	0x08027b6f
 8027a18:	080279bd 	.word	0x080279bd
 8027a1c:	08027a71 	.word	0x08027a71
 8027a20:	080279bd 	.word	0x080279bd
 8027a24:	080279bd 	.word	0x080279bd
 8027a28:	08027b37 	.word	0x08027b37
 8027a2c:	682b      	ldr	r3, [r5, #0]
 8027a2e:	1d1a      	adds	r2, r3, #4
 8027a30:	681b      	ldr	r3, [r3, #0]
 8027a32:	602a      	str	r2, [r5, #0]
 8027a34:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8027a38:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8027a3c:	2301      	movs	r3, #1
 8027a3e:	e0a3      	b.n	8027b88 <_printf_i+0x1f4>
 8027a40:	6820      	ldr	r0, [r4, #0]
 8027a42:	6829      	ldr	r1, [r5, #0]
 8027a44:	0606      	lsls	r6, r0, #24
 8027a46:	f101 0304 	add.w	r3, r1, #4
 8027a4a:	d50a      	bpl.n	8027a62 <_printf_i+0xce>
 8027a4c:	680e      	ldr	r6, [r1, #0]
 8027a4e:	602b      	str	r3, [r5, #0]
 8027a50:	2e00      	cmp	r6, #0
 8027a52:	da03      	bge.n	8027a5c <_printf_i+0xc8>
 8027a54:	232d      	movs	r3, #45	; 0x2d
 8027a56:	4276      	negs	r6, r6
 8027a58:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8027a5c:	485e      	ldr	r0, [pc, #376]	; (8027bd8 <_printf_i+0x244>)
 8027a5e:	230a      	movs	r3, #10
 8027a60:	e019      	b.n	8027a96 <_printf_i+0x102>
 8027a62:	680e      	ldr	r6, [r1, #0]
 8027a64:	602b      	str	r3, [r5, #0]
 8027a66:	f010 0f40 	tst.w	r0, #64	; 0x40
 8027a6a:	bf18      	it	ne
 8027a6c:	b236      	sxthne	r6, r6
 8027a6e:	e7ef      	b.n	8027a50 <_printf_i+0xbc>
 8027a70:	682b      	ldr	r3, [r5, #0]
 8027a72:	6820      	ldr	r0, [r4, #0]
 8027a74:	1d19      	adds	r1, r3, #4
 8027a76:	6029      	str	r1, [r5, #0]
 8027a78:	0601      	lsls	r1, r0, #24
 8027a7a:	d501      	bpl.n	8027a80 <_printf_i+0xec>
 8027a7c:	681e      	ldr	r6, [r3, #0]
 8027a7e:	e002      	b.n	8027a86 <_printf_i+0xf2>
 8027a80:	0646      	lsls	r6, r0, #25
 8027a82:	d5fb      	bpl.n	8027a7c <_printf_i+0xe8>
 8027a84:	881e      	ldrh	r6, [r3, #0]
 8027a86:	4854      	ldr	r0, [pc, #336]	; (8027bd8 <_printf_i+0x244>)
 8027a88:	2f6f      	cmp	r7, #111	; 0x6f
 8027a8a:	bf0c      	ite	eq
 8027a8c:	2308      	moveq	r3, #8
 8027a8e:	230a      	movne	r3, #10
 8027a90:	2100      	movs	r1, #0
 8027a92:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8027a96:	6865      	ldr	r5, [r4, #4]
 8027a98:	60a5      	str	r5, [r4, #8]
 8027a9a:	2d00      	cmp	r5, #0
 8027a9c:	bfa2      	ittt	ge
 8027a9e:	6821      	ldrge	r1, [r4, #0]
 8027aa0:	f021 0104 	bicge.w	r1, r1, #4
 8027aa4:	6021      	strge	r1, [r4, #0]
 8027aa6:	b90e      	cbnz	r6, 8027aac <_printf_i+0x118>
 8027aa8:	2d00      	cmp	r5, #0
 8027aaa:	d04d      	beq.n	8027b48 <_printf_i+0x1b4>
 8027aac:	4615      	mov	r5, r2
 8027aae:	fbb6 f1f3 	udiv	r1, r6, r3
 8027ab2:	fb03 6711 	mls	r7, r3, r1, r6
 8027ab6:	5dc7      	ldrb	r7, [r0, r7]
 8027ab8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8027abc:	4637      	mov	r7, r6
 8027abe:	42bb      	cmp	r3, r7
 8027ac0:	460e      	mov	r6, r1
 8027ac2:	d9f4      	bls.n	8027aae <_printf_i+0x11a>
 8027ac4:	2b08      	cmp	r3, #8
 8027ac6:	d10b      	bne.n	8027ae0 <_printf_i+0x14c>
 8027ac8:	6823      	ldr	r3, [r4, #0]
 8027aca:	07de      	lsls	r6, r3, #31
 8027acc:	d508      	bpl.n	8027ae0 <_printf_i+0x14c>
 8027ace:	6923      	ldr	r3, [r4, #16]
 8027ad0:	6861      	ldr	r1, [r4, #4]
 8027ad2:	4299      	cmp	r1, r3
 8027ad4:	bfde      	ittt	le
 8027ad6:	2330      	movle	r3, #48	; 0x30
 8027ad8:	f805 3c01 	strble.w	r3, [r5, #-1]
 8027adc:	f105 35ff 	addle.w	r5, r5, #4294967295
 8027ae0:	1b52      	subs	r2, r2, r5
 8027ae2:	6122      	str	r2, [r4, #16]
 8027ae4:	f8cd a000 	str.w	sl, [sp]
 8027ae8:	464b      	mov	r3, r9
 8027aea:	aa03      	add	r2, sp, #12
 8027aec:	4621      	mov	r1, r4
 8027aee:	4640      	mov	r0, r8
 8027af0:	f7ff fee2 	bl	80278b8 <_printf_common>
 8027af4:	3001      	adds	r0, #1
 8027af6:	d14c      	bne.n	8027b92 <_printf_i+0x1fe>
 8027af8:	f04f 30ff 	mov.w	r0, #4294967295
 8027afc:	b004      	add	sp, #16
 8027afe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8027b02:	4835      	ldr	r0, [pc, #212]	; (8027bd8 <_printf_i+0x244>)
 8027b04:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8027b08:	6829      	ldr	r1, [r5, #0]
 8027b0a:	6823      	ldr	r3, [r4, #0]
 8027b0c:	f851 6b04 	ldr.w	r6, [r1], #4
 8027b10:	6029      	str	r1, [r5, #0]
 8027b12:	061d      	lsls	r5, r3, #24
 8027b14:	d514      	bpl.n	8027b40 <_printf_i+0x1ac>
 8027b16:	07df      	lsls	r7, r3, #31
 8027b18:	bf44      	itt	mi
 8027b1a:	f043 0320 	orrmi.w	r3, r3, #32
 8027b1e:	6023      	strmi	r3, [r4, #0]
 8027b20:	b91e      	cbnz	r6, 8027b2a <_printf_i+0x196>
 8027b22:	6823      	ldr	r3, [r4, #0]
 8027b24:	f023 0320 	bic.w	r3, r3, #32
 8027b28:	6023      	str	r3, [r4, #0]
 8027b2a:	2310      	movs	r3, #16
 8027b2c:	e7b0      	b.n	8027a90 <_printf_i+0xfc>
 8027b2e:	6823      	ldr	r3, [r4, #0]
 8027b30:	f043 0320 	orr.w	r3, r3, #32
 8027b34:	6023      	str	r3, [r4, #0]
 8027b36:	2378      	movs	r3, #120	; 0x78
 8027b38:	4828      	ldr	r0, [pc, #160]	; (8027bdc <_printf_i+0x248>)
 8027b3a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8027b3e:	e7e3      	b.n	8027b08 <_printf_i+0x174>
 8027b40:	0659      	lsls	r1, r3, #25
 8027b42:	bf48      	it	mi
 8027b44:	b2b6      	uxthmi	r6, r6
 8027b46:	e7e6      	b.n	8027b16 <_printf_i+0x182>
 8027b48:	4615      	mov	r5, r2
 8027b4a:	e7bb      	b.n	8027ac4 <_printf_i+0x130>
 8027b4c:	682b      	ldr	r3, [r5, #0]
 8027b4e:	6826      	ldr	r6, [r4, #0]
 8027b50:	6961      	ldr	r1, [r4, #20]
 8027b52:	1d18      	adds	r0, r3, #4
 8027b54:	6028      	str	r0, [r5, #0]
 8027b56:	0635      	lsls	r5, r6, #24
 8027b58:	681b      	ldr	r3, [r3, #0]
 8027b5a:	d501      	bpl.n	8027b60 <_printf_i+0x1cc>
 8027b5c:	6019      	str	r1, [r3, #0]
 8027b5e:	e002      	b.n	8027b66 <_printf_i+0x1d2>
 8027b60:	0670      	lsls	r0, r6, #25
 8027b62:	d5fb      	bpl.n	8027b5c <_printf_i+0x1c8>
 8027b64:	8019      	strh	r1, [r3, #0]
 8027b66:	2300      	movs	r3, #0
 8027b68:	6123      	str	r3, [r4, #16]
 8027b6a:	4615      	mov	r5, r2
 8027b6c:	e7ba      	b.n	8027ae4 <_printf_i+0x150>
 8027b6e:	682b      	ldr	r3, [r5, #0]
 8027b70:	1d1a      	adds	r2, r3, #4
 8027b72:	602a      	str	r2, [r5, #0]
 8027b74:	681d      	ldr	r5, [r3, #0]
 8027b76:	6862      	ldr	r2, [r4, #4]
 8027b78:	2100      	movs	r1, #0
 8027b7a:	4628      	mov	r0, r5
 8027b7c:	f7d8 fbb0 	bl	80002e0 <memchr>
 8027b80:	b108      	cbz	r0, 8027b86 <_printf_i+0x1f2>
 8027b82:	1b40      	subs	r0, r0, r5
 8027b84:	6060      	str	r0, [r4, #4]
 8027b86:	6863      	ldr	r3, [r4, #4]
 8027b88:	6123      	str	r3, [r4, #16]
 8027b8a:	2300      	movs	r3, #0
 8027b8c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8027b90:	e7a8      	b.n	8027ae4 <_printf_i+0x150>
 8027b92:	6923      	ldr	r3, [r4, #16]
 8027b94:	462a      	mov	r2, r5
 8027b96:	4649      	mov	r1, r9
 8027b98:	4640      	mov	r0, r8
 8027b9a:	47d0      	blx	sl
 8027b9c:	3001      	adds	r0, #1
 8027b9e:	d0ab      	beq.n	8027af8 <_printf_i+0x164>
 8027ba0:	6823      	ldr	r3, [r4, #0]
 8027ba2:	079b      	lsls	r3, r3, #30
 8027ba4:	d413      	bmi.n	8027bce <_printf_i+0x23a>
 8027ba6:	68e0      	ldr	r0, [r4, #12]
 8027ba8:	9b03      	ldr	r3, [sp, #12]
 8027baa:	4298      	cmp	r0, r3
 8027bac:	bfb8      	it	lt
 8027bae:	4618      	movlt	r0, r3
 8027bb0:	e7a4      	b.n	8027afc <_printf_i+0x168>
 8027bb2:	2301      	movs	r3, #1
 8027bb4:	4632      	mov	r2, r6
 8027bb6:	4649      	mov	r1, r9
 8027bb8:	4640      	mov	r0, r8
 8027bba:	47d0      	blx	sl
 8027bbc:	3001      	adds	r0, #1
 8027bbe:	d09b      	beq.n	8027af8 <_printf_i+0x164>
 8027bc0:	3501      	adds	r5, #1
 8027bc2:	68e3      	ldr	r3, [r4, #12]
 8027bc4:	9903      	ldr	r1, [sp, #12]
 8027bc6:	1a5b      	subs	r3, r3, r1
 8027bc8:	42ab      	cmp	r3, r5
 8027bca:	dcf2      	bgt.n	8027bb2 <_printf_i+0x21e>
 8027bcc:	e7eb      	b.n	8027ba6 <_printf_i+0x212>
 8027bce:	2500      	movs	r5, #0
 8027bd0:	f104 0619 	add.w	r6, r4, #25
 8027bd4:	e7f5      	b.n	8027bc2 <_printf_i+0x22e>
 8027bd6:	bf00      	nop
 8027bd8:	0802c251 	.word	0x0802c251
 8027bdc:	0802c262 	.word	0x0802c262

08027be0 <cleanup_glue>:
 8027be0:	b538      	push	{r3, r4, r5, lr}
 8027be2:	460c      	mov	r4, r1
 8027be4:	6809      	ldr	r1, [r1, #0]
 8027be6:	4605      	mov	r5, r0
 8027be8:	b109      	cbz	r1, 8027bee <cleanup_glue+0xe>
 8027bea:	f7ff fff9 	bl	8027be0 <cleanup_glue>
 8027bee:	4621      	mov	r1, r4
 8027bf0:	4628      	mov	r0, r5
 8027bf2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8027bf6:	f7ff bc25 	b.w	8027444 <_free_r>
	...

08027bfc <_reclaim_reent>:
 8027bfc:	4b2c      	ldr	r3, [pc, #176]	; (8027cb0 <_reclaim_reent+0xb4>)
 8027bfe:	681b      	ldr	r3, [r3, #0]
 8027c00:	4283      	cmp	r3, r0
 8027c02:	b570      	push	{r4, r5, r6, lr}
 8027c04:	4604      	mov	r4, r0
 8027c06:	d051      	beq.n	8027cac <_reclaim_reent+0xb0>
 8027c08:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8027c0a:	b143      	cbz	r3, 8027c1e <_reclaim_reent+0x22>
 8027c0c:	68db      	ldr	r3, [r3, #12]
 8027c0e:	2b00      	cmp	r3, #0
 8027c10:	d14a      	bne.n	8027ca8 <_reclaim_reent+0xac>
 8027c12:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8027c14:	6819      	ldr	r1, [r3, #0]
 8027c16:	b111      	cbz	r1, 8027c1e <_reclaim_reent+0x22>
 8027c18:	4620      	mov	r0, r4
 8027c1a:	f7ff fc13 	bl	8027444 <_free_r>
 8027c1e:	6961      	ldr	r1, [r4, #20]
 8027c20:	b111      	cbz	r1, 8027c28 <_reclaim_reent+0x2c>
 8027c22:	4620      	mov	r0, r4
 8027c24:	f7ff fc0e 	bl	8027444 <_free_r>
 8027c28:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8027c2a:	b111      	cbz	r1, 8027c32 <_reclaim_reent+0x36>
 8027c2c:	4620      	mov	r0, r4
 8027c2e:	f7ff fc09 	bl	8027444 <_free_r>
 8027c32:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8027c34:	b111      	cbz	r1, 8027c3c <_reclaim_reent+0x40>
 8027c36:	4620      	mov	r0, r4
 8027c38:	f7ff fc04 	bl	8027444 <_free_r>
 8027c3c:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8027c3e:	b111      	cbz	r1, 8027c46 <_reclaim_reent+0x4a>
 8027c40:	4620      	mov	r0, r4
 8027c42:	f7ff fbff 	bl	8027444 <_free_r>
 8027c46:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8027c48:	b111      	cbz	r1, 8027c50 <_reclaim_reent+0x54>
 8027c4a:	4620      	mov	r0, r4
 8027c4c:	f7ff fbfa 	bl	8027444 <_free_r>
 8027c50:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8027c52:	b111      	cbz	r1, 8027c5a <_reclaim_reent+0x5e>
 8027c54:	4620      	mov	r0, r4
 8027c56:	f7ff fbf5 	bl	8027444 <_free_r>
 8027c5a:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8027c5c:	b111      	cbz	r1, 8027c64 <_reclaim_reent+0x68>
 8027c5e:	4620      	mov	r0, r4
 8027c60:	f7ff fbf0 	bl	8027444 <_free_r>
 8027c64:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8027c66:	b111      	cbz	r1, 8027c6e <_reclaim_reent+0x72>
 8027c68:	4620      	mov	r0, r4
 8027c6a:	f7ff fbeb 	bl	8027444 <_free_r>
 8027c6e:	69a3      	ldr	r3, [r4, #24]
 8027c70:	b1e3      	cbz	r3, 8027cac <_reclaim_reent+0xb0>
 8027c72:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8027c74:	4620      	mov	r0, r4
 8027c76:	4798      	blx	r3
 8027c78:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8027c7a:	b1b9      	cbz	r1, 8027cac <_reclaim_reent+0xb0>
 8027c7c:	4620      	mov	r0, r4
 8027c7e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8027c82:	f7ff bfad 	b.w	8027be0 <cleanup_glue>
 8027c86:	5949      	ldr	r1, [r1, r5]
 8027c88:	b941      	cbnz	r1, 8027c9c <_reclaim_reent+0xa0>
 8027c8a:	3504      	adds	r5, #4
 8027c8c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8027c8e:	2d80      	cmp	r5, #128	; 0x80
 8027c90:	68d9      	ldr	r1, [r3, #12]
 8027c92:	d1f8      	bne.n	8027c86 <_reclaim_reent+0x8a>
 8027c94:	4620      	mov	r0, r4
 8027c96:	f7ff fbd5 	bl	8027444 <_free_r>
 8027c9a:	e7ba      	b.n	8027c12 <_reclaim_reent+0x16>
 8027c9c:	680e      	ldr	r6, [r1, #0]
 8027c9e:	4620      	mov	r0, r4
 8027ca0:	f7ff fbd0 	bl	8027444 <_free_r>
 8027ca4:	4631      	mov	r1, r6
 8027ca6:	e7ef      	b.n	8027c88 <_reclaim_reent+0x8c>
 8027ca8:	2500      	movs	r5, #0
 8027caa:	e7ef      	b.n	8027c8c <_reclaim_reent+0x90>
 8027cac:	bd70      	pop	{r4, r5, r6, pc}
 8027cae:	bf00      	nop
 8027cb0:	200001ec 	.word	0x200001ec

08027cb4 <_sbrk_r>:
 8027cb4:	b538      	push	{r3, r4, r5, lr}
 8027cb6:	4d06      	ldr	r5, [pc, #24]	; (8027cd0 <_sbrk_r+0x1c>)
 8027cb8:	2300      	movs	r3, #0
 8027cba:	4604      	mov	r4, r0
 8027cbc:	4608      	mov	r0, r1
 8027cbe:	602b      	str	r3, [r5, #0]
 8027cc0:	f7db ffc4 	bl	8003c4c <_sbrk>
 8027cc4:	1c43      	adds	r3, r0, #1
 8027cc6:	d102      	bne.n	8027cce <_sbrk_r+0x1a>
 8027cc8:	682b      	ldr	r3, [r5, #0]
 8027cca:	b103      	cbz	r3, 8027cce <_sbrk_r+0x1a>
 8027ccc:	6023      	str	r3, [r4, #0]
 8027cce:	bd38      	pop	{r3, r4, r5, pc}
 8027cd0:	20005a1c 	.word	0x20005a1c

08027cd4 <_raise_r>:
 8027cd4:	291f      	cmp	r1, #31
 8027cd6:	b538      	push	{r3, r4, r5, lr}
 8027cd8:	4604      	mov	r4, r0
 8027cda:	460d      	mov	r5, r1
 8027cdc:	d904      	bls.n	8027ce8 <_raise_r+0x14>
 8027cde:	2316      	movs	r3, #22
 8027ce0:	6003      	str	r3, [r0, #0]
 8027ce2:	f04f 30ff 	mov.w	r0, #4294967295
 8027ce6:	bd38      	pop	{r3, r4, r5, pc}
 8027ce8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8027cea:	b112      	cbz	r2, 8027cf2 <_raise_r+0x1e>
 8027cec:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8027cf0:	b94b      	cbnz	r3, 8027d06 <_raise_r+0x32>
 8027cf2:	4620      	mov	r0, r4
 8027cf4:	f000 f830 	bl	8027d58 <_getpid_r>
 8027cf8:	462a      	mov	r2, r5
 8027cfa:	4601      	mov	r1, r0
 8027cfc:	4620      	mov	r0, r4
 8027cfe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8027d02:	f000 b817 	b.w	8027d34 <_kill_r>
 8027d06:	2b01      	cmp	r3, #1
 8027d08:	d00a      	beq.n	8027d20 <_raise_r+0x4c>
 8027d0a:	1c59      	adds	r1, r3, #1
 8027d0c:	d103      	bne.n	8027d16 <_raise_r+0x42>
 8027d0e:	2316      	movs	r3, #22
 8027d10:	6003      	str	r3, [r0, #0]
 8027d12:	2001      	movs	r0, #1
 8027d14:	e7e7      	b.n	8027ce6 <_raise_r+0x12>
 8027d16:	2400      	movs	r4, #0
 8027d18:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8027d1c:	4628      	mov	r0, r5
 8027d1e:	4798      	blx	r3
 8027d20:	2000      	movs	r0, #0
 8027d22:	e7e0      	b.n	8027ce6 <_raise_r+0x12>

08027d24 <raise>:
 8027d24:	4b02      	ldr	r3, [pc, #8]	; (8027d30 <raise+0xc>)
 8027d26:	4601      	mov	r1, r0
 8027d28:	6818      	ldr	r0, [r3, #0]
 8027d2a:	f7ff bfd3 	b.w	8027cd4 <_raise_r>
 8027d2e:	bf00      	nop
 8027d30:	200001ec 	.word	0x200001ec

08027d34 <_kill_r>:
 8027d34:	b538      	push	{r3, r4, r5, lr}
 8027d36:	4d07      	ldr	r5, [pc, #28]	; (8027d54 <_kill_r+0x20>)
 8027d38:	2300      	movs	r3, #0
 8027d3a:	4604      	mov	r4, r0
 8027d3c:	4608      	mov	r0, r1
 8027d3e:	4611      	mov	r1, r2
 8027d40:	602b      	str	r3, [r5, #0]
 8027d42:	f7db fefb 	bl	8003b3c <_kill>
 8027d46:	1c43      	adds	r3, r0, #1
 8027d48:	d102      	bne.n	8027d50 <_kill_r+0x1c>
 8027d4a:	682b      	ldr	r3, [r5, #0]
 8027d4c:	b103      	cbz	r3, 8027d50 <_kill_r+0x1c>
 8027d4e:	6023      	str	r3, [r4, #0]
 8027d50:	bd38      	pop	{r3, r4, r5, pc}
 8027d52:	bf00      	nop
 8027d54:	20005a1c 	.word	0x20005a1c

08027d58 <_getpid_r>:
 8027d58:	f7db bee8 	b.w	8003b2c <_getpid>

08027d5c <__sread>:
 8027d5c:	b510      	push	{r4, lr}
 8027d5e:	460c      	mov	r4, r1
 8027d60:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8027d64:	f000 fac8 	bl	80282f8 <_read_r>
 8027d68:	2800      	cmp	r0, #0
 8027d6a:	bfab      	itete	ge
 8027d6c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8027d6e:	89a3      	ldrhlt	r3, [r4, #12]
 8027d70:	181b      	addge	r3, r3, r0
 8027d72:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8027d76:	bfac      	ite	ge
 8027d78:	6563      	strge	r3, [r4, #84]	; 0x54
 8027d7a:	81a3      	strhlt	r3, [r4, #12]
 8027d7c:	bd10      	pop	{r4, pc}

08027d7e <__swrite>:
 8027d7e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8027d82:	461f      	mov	r7, r3
 8027d84:	898b      	ldrh	r3, [r1, #12]
 8027d86:	05db      	lsls	r3, r3, #23
 8027d88:	4605      	mov	r5, r0
 8027d8a:	460c      	mov	r4, r1
 8027d8c:	4616      	mov	r6, r2
 8027d8e:	d505      	bpl.n	8027d9c <__swrite+0x1e>
 8027d90:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8027d94:	2302      	movs	r3, #2
 8027d96:	2200      	movs	r2, #0
 8027d98:	f000 fa2a 	bl	80281f0 <_lseek_r>
 8027d9c:	89a3      	ldrh	r3, [r4, #12]
 8027d9e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8027da2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8027da6:	81a3      	strh	r3, [r4, #12]
 8027da8:	4632      	mov	r2, r6
 8027daa:	463b      	mov	r3, r7
 8027dac:	4628      	mov	r0, r5
 8027dae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8027db2:	f000 b869 	b.w	8027e88 <_write_r>

08027db6 <__sseek>:
 8027db6:	b510      	push	{r4, lr}
 8027db8:	460c      	mov	r4, r1
 8027dba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8027dbe:	f000 fa17 	bl	80281f0 <_lseek_r>
 8027dc2:	1c43      	adds	r3, r0, #1
 8027dc4:	89a3      	ldrh	r3, [r4, #12]
 8027dc6:	bf15      	itete	ne
 8027dc8:	6560      	strne	r0, [r4, #84]	; 0x54
 8027dca:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8027dce:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8027dd2:	81a3      	strheq	r3, [r4, #12]
 8027dd4:	bf18      	it	ne
 8027dd6:	81a3      	strhne	r3, [r4, #12]
 8027dd8:	bd10      	pop	{r4, pc}

08027dda <__sclose>:
 8027dda:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8027dde:	f000 b935 	b.w	802804c <_close_r>
	...

08027de4 <__swbuf_r>:
 8027de4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8027de6:	460e      	mov	r6, r1
 8027de8:	4614      	mov	r4, r2
 8027dea:	4605      	mov	r5, r0
 8027dec:	b118      	cbz	r0, 8027df6 <__swbuf_r+0x12>
 8027dee:	6983      	ldr	r3, [r0, #24]
 8027df0:	b90b      	cbnz	r3, 8027df6 <__swbuf_r+0x12>
 8027df2:	f7ff fa29 	bl	8027248 <__sinit>
 8027df6:	4b21      	ldr	r3, [pc, #132]	; (8027e7c <__swbuf_r+0x98>)
 8027df8:	429c      	cmp	r4, r3
 8027dfa:	d12b      	bne.n	8027e54 <__swbuf_r+0x70>
 8027dfc:	686c      	ldr	r4, [r5, #4]
 8027dfe:	69a3      	ldr	r3, [r4, #24]
 8027e00:	60a3      	str	r3, [r4, #8]
 8027e02:	89a3      	ldrh	r3, [r4, #12]
 8027e04:	071a      	lsls	r2, r3, #28
 8027e06:	d52f      	bpl.n	8027e68 <__swbuf_r+0x84>
 8027e08:	6923      	ldr	r3, [r4, #16]
 8027e0a:	b36b      	cbz	r3, 8027e68 <__swbuf_r+0x84>
 8027e0c:	6923      	ldr	r3, [r4, #16]
 8027e0e:	6820      	ldr	r0, [r4, #0]
 8027e10:	1ac0      	subs	r0, r0, r3
 8027e12:	6963      	ldr	r3, [r4, #20]
 8027e14:	b2f6      	uxtb	r6, r6
 8027e16:	4283      	cmp	r3, r0
 8027e18:	4637      	mov	r7, r6
 8027e1a:	dc04      	bgt.n	8027e26 <__swbuf_r+0x42>
 8027e1c:	4621      	mov	r1, r4
 8027e1e:	4628      	mov	r0, r5
 8027e20:	f000 f9aa 	bl	8028178 <_fflush_r>
 8027e24:	bb30      	cbnz	r0, 8027e74 <__swbuf_r+0x90>
 8027e26:	68a3      	ldr	r3, [r4, #8]
 8027e28:	3b01      	subs	r3, #1
 8027e2a:	60a3      	str	r3, [r4, #8]
 8027e2c:	6823      	ldr	r3, [r4, #0]
 8027e2e:	1c5a      	adds	r2, r3, #1
 8027e30:	6022      	str	r2, [r4, #0]
 8027e32:	701e      	strb	r6, [r3, #0]
 8027e34:	6963      	ldr	r3, [r4, #20]
 8027e36:	3001      	adds	r0, #1
 8027e38:	4283      	cmp	r3, r0
 8027e3a:	d004      	beq.n	8027e46 <__swbuf_r+0x62>
 8027e3c:	89a3      	ldrh	r3, [r4, #12]
 8027e3e:	07db      	lsls	r3, r3, #31
 8027e40:	d506      	bpl.n	8027e50 <__swbuf_r+0x6c>
 8027e42:	2e0a      	cmp	r6, #10
 8027e44:	d104      	bne.n	8027e50 <__swbuf_r+0x6c>
 8027e46:	4621      	mov	r1, r4
 8027e48:	4628      	mov	r0, r5
 8027e4a:	f000 f995 	bl	8028178 <_fflush_r>
 8027e4e:	b988      	cbnz	r0, 8027e74 <__swbuf_r+0x90>
 8027e50:	4638      	mov	r0, r7
 8027e52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8027e54:	4b0a      	ldr	r3, [pc, #40]	; (8027e80 <__swbuf_r+0x9c>)
 8027e56:	429c      	cmp	r4, r3
 8027e58:	d101      	bne.n	8027e5e <__swbuf_r+0x7a>
 8027e5a:	68ac      	ldr	r4, [r5, #8]
 8027e5c:	e7cf      	b.n	8027dfe <__swbuf_r+0x1a>
 8027e5e:	4b09      	ldr	r3, [pc, #36]	; (8027e84 <__swbuf_r+0xa0>)
 8027e60:	429c      	cmp	r4, r3
 8027e62:	bf08      	it	eq
 8027e64:	68ec      	ldreq	r4, [r5, #12]
 8027e66:	e7ca      	b.n	8027dfe <__swbuf_r+0x1a>
 8027e68:	4621      	mov	r1, r4
 8027e6a:	4628      	mov	r0, r5
 8027e6c:	f000 f81e 	bl	8027eac <__swsetup_r>
 8027e70:	2800      	cmp	r0, #0
 8027e72:	d0cb      	beq.n	8027e0c <__swbuf_r+0x28>
 8027e74:	f04f 37ff 	mov.w	r7, #4294967295
 8027e78:	e7ea      	b.n	8027e50 <__swbuf_r+0x6c>
 8027e7a:	bf00      	nop
 8027e7c:	0802c1fc 	.word	0x0802c1fc
 8027e80:	0802c21c 	.word	0x0802c21c
 8027e84:	0802c1dc 	.word	0x0802c1dc

08027e88 <_write_r>:
 8027e88:	b538      	push	{r3, r4, r5, lr}
 8027e8a:	4d07      	ldr	r5, [pc, #28]	; (8027ea8 <_write_r+0x20>)
 8027e8c:	4604      	mov	r4, r0
 8027e8e:	4608      	mov	r0, r1
 8027e90:	4611      	mov	r1, r2
 8027e92:	2200      	movs	r2, #0
 8027e94:	602a      	str	r2, [r5, #0]
 8027e96:	461a      	mov	r2, r3
 8027e98:	f7db fe87 	bl	8003baa <_write>
 8027e9c:	1c43      	adds	r3, r0, #1
 8027e9e:	d102      	bne.n	8027ea6 <_write_r+0x1e>
 8027ea0:	682b      	ldr	r3, [r5, #0]
 8027ea2:	b103      	cbz	r3, 8027ea6 <_write_r+0x1e>
 8027ea4:	6023      	str	r3, [r4, #0]
 8027ea6:	bd38      	pop	{r3, r4, r5, pc}
 8027ea8:	20005a1c 	.word	0x20005a1c

08027eac <__swsetup_r>:
 8027eac:	4b32      	ldr	r3, [pc, #200]	; (8027f78 <__swsetup_r+0xcc>)
 8027eae:	b570      	push	{r4, r5, r6, lr}
 8027eb0:	681d      	ldr	r5, [r3, #0]
 8027eb2:	4606      	mov	r6, r0
 8027eb4:	460c      	mov	r4, r1
 8027eb6:	b125      	cbz	r5, 8027ec2 <__swsetup_r+0x16>
 8027eb8:	69ab      	ldr	r3, [r5, #24]
 8027eba:	b913      	cbnz	r3, 8027ec2 <__swsetup_r+0x16>
 8027ebc:	4628      	mov	r0, r5
 8027ebe:	f7ff f9c3 	bl	8027248 <__sinit>
 8027ec2:	4b2e      	ldr	r3, [pc, #184]	; (8027f7c <__swsetup_r+0xd0>)
 8027ec4:	429c      	cmp	r4, r3
 8027ec6:	d10f      	bne.n	8027ee8 <__swsetup_r+0x3c>
 8027ec8:	686c      	ldr	r4, [r5, #4]
 8027eca:	89a3      	ldrh	r3, [r4, #12]
 8027ecc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8027ed0:	0719      	lsls	r1, r3, #28
 8027ed2:	d42c      	bmi.n	8027f2e <__swsetup_r+0x82>
 8027ed4:	06dd      	lsls	r5, r3, #27
 8027ed6:	d411      	bmi.n	8027efc <__swsetup_r+0x50>
 8027ed8:	2309      	movs	r3, #9
 8027eda:	6033      	str	r3, [r6, #0]
 8027edc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8027ee0:	81a3      	strh	r3, [r4, #12]
 8027ee2:	f04f 30ff 	mov.w	r0, #4294967295
 8027ee6:	e03e      	b.n	8027f66 <__swsetup_r+0xba>
 8027ee8:	4b25      	ldr	r3, [pc, #148]	; (8027f80 <__swsetup_r+0xd4>)
 8027eea:	429c      	cmp	r4, r3
 8027eec:	d101      	bne.n	8027ef2 <__swsetup_r+0x46>
 8027eee:	68ac      	ldr	r4, [r5, #8]
 8027ef0:	e7eb      	b.n	8027eca <__swsetup_r+0x1e>
 8027ef2:	4b24      	ldr	r3, [pc, #144]	; (8027f84 <__swsetup_r+0xd8>)
 8027ef4:	429c      	cmp	r4, r3
 8027ef6:	bf08      	it	eq
 8027ef8:	68ec      	ldreq	r4, [r5, #12]
 8027efa:	e7e6      	b.n	8027eca <__swsetup_r+0x1e>
 8027efc:	0758      	lsls	r0, r3, #29
 8027efe:	d512      	bpl.n	8027f26 <__swsetup_r+0x7a>
 8027f00:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8027f02:	b141      	cbz	r1, 8027f16 <__swsetup_r+0x6a>
 8027f04:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8027f08:	4299      	cmp	r1, r3
 8027f0a:	d002      	beq.n	8027f12 <__swsetup_r+0x66>
 8027f0c:	4630      	mov	r0, r6
 8027f0e:	f7ff fa99 	bl	8027444 <_free_r>
 8027f12:	2300      	movs	r3, #0
 8027f14:	6363      	str	r3, [r4, #52]	; 0x34
 8027f16:	89a3      	ldrh	r3, [r4, #12]
 8027f18:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8027f1c:	81a3      	strh	r3, [r4, #12]
 8027f1e:	2300      	movs	r3, #0
 8027f20:	6063      	str	r3, [r4, #4]
 8027f22:	6923      	ldr	r3, [r4, #16]
 8027f24:	6023      	str	r3, [r4, #0]
 8027f26:	89a3      	ldrh	r3, [r4, #12]
 8027f28:	f043 0308 	orr.w	r3, r3, #8
 8027f2c:	81a3      	strh	r3, [r4, #12]
 8027f2e:	6923      	ldr	r3, [r4, #16]
 8027f30:	b94b      	cbnz	r3, 8027f46 <__swsetup_r+0x9a>
 8027f32:	89a3      	ldrh	r3, [r4, #12]
 8027f34:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8027f38:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8027f3c:	d003      	beq.n	8027f46 <__swsetup_r+0x9a>
 8027f3e:	4621      	mov	r1, r4
 8027f40:	4630      	mov	r0, r6
 8027f42:	f000 f98d 	bl	8028260 <__smakebuf_r>
 8027f46:	89a0      	ldrh	r0, [r4, #12]
 8027f48:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8027f4c:	f010 0301 	ands.w	r3, r0, #1
 8027f50:	d00a      	beq.n	8027f68 <__swsetup_r+0xbc>
 8027f52:	2300      	movs	r3, #0
 8027f54:	60a3      	str	r3, [r4, #8]
 8027f56:	6963      	ldr	r3, [r4, #20]
 8027f58:	425b      	negs	r3, r3
 8027f5a:	61a3      	str	r3, [r4, #24]
 8027f5c:	6923      	ldr	r3, [r4, #16]
 8027f5e:	b943      	cbnz	r3, 8027f72 <__swsetup_r+0xc6>
 8027f60:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8027f64:	d1ba      	bne.n	8027edc <__swsetup_r+0x30>
 8027f66:	bd70      	pop	{r4, r5, r6, pc}
 8027f68:	0781      	lsls	r1, r0, #30
 8027f6a:	bf58      	it	pl
 8027f6c:	6963      	ldrpl	r3, [r4, #20]
 8027f6e:	60a3      	str	r3, [r4, #8]
 8027f70:	e7f4      	b.n	8027f5c <__swsetup_r+0xb0>
 8027f72:	2000      	movs	r0, #0
 8027f74:	e7f7      	b.n	8027f66 <__swsetup_r+0xba>
 8027f76:	bf00      	nop
 8027f78:	200001ec 	.word	0x200001ec
 8027f7c:	0802c1fc 	.word	0x0802c1fc
 8027f80:	0802c21c 	.word	0x0802c21c
 8027f84:	0802c1dc 	.word	0x0802c1dc

08027f88 <__register_exitproc>:
 8027f88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8027f8c:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 8028048 <__register_exitproc+0xc0>
 8027f90:	4606      	mov	r6, r0
 8027f92:	f8d8 0000 	ldr.w	r0, [r8]
 8027f96:	461f      	mov	r7, r3
 8027f98:	460d      	mov	r5, r1
 8027f9a:	4691      	mov	r9, r2
 8027f9c:	f7ff fa29 	bl	80273f2 <__retarget_lock_acquire_recursive>
 8027fa0:	4b25      	ldr	r3, [pc, #148]	; (8028038 <__register_exitproc+0xb0>)
 8027fa2:	681c      	ldr	r4, [r3, #0]
 8027fa4:	b934      	cbnz	r4, 8027fb4 <__register_exitproc+0x2c>
 8027fa6:	4c25      	ldr	r4, [pc, #148]	; (802803c <__register_exitproc+0xb4>)
 8027fa8:	601c      	str	r4, [r3, #0]
 8027faa:	4b25      	ldr	r3, [pc, #148]	; (8028040 <__register_exitproc+0xb8>)
 8027fac:	b113      	cbz	r3, 8027fb4 <__register_exitproc+0x2c>
 8027fae:	681b      	ldr	r3, [r3, #0]
 8027fb0:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 8027fb4:	6863      	ldr	r3, [r4, #4]
 8027fb6:	2b1f      	cmp	r3, #31
 8027fb8:	dd07      	ble.n	8027fca <__register_exitproc+0x42>
 8027fba:	f8d8 0000 	ldr.w	r0, [r8]
 8027fbe:	f7ff fa1a 	bl	80273f6 <__retarget_lock_release_recursive>
 8027fc2:	f04f 30ff 	mov.w	r0, #4294967295
 8027fc6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8027fca:	b34e      	cbz	r6, 8028020 <__register_exitproc+0x98>
 8027fcc:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 8027fd0:	b988      	cbnz	r0, 8027ff6 <__register_exitproc+0x6e>
 8027fd2:	4b1c      	ldr	r3, [pc, #112]	; (8028044 <__register_exitproc+0xbc>)
 8027fd4:	b923      	cbnz	r3, 8027fe0 <__register_exitproc+0x58>
 8027fd6:	f8d8 0000 	ldr.w	r0, [r8]
 8027fda:	f7ff fa0b 	bl	80273f4 <__retarget_lock_release>
 8027fde:	e7f0      	b.n	8027fc2 <__register_exitproc+0x3a>
 8027fe0:	f44f 7084 	mov.w	r0, #264	; 0x108
 8027fe4:	f7ff fa08 	bl	80273f8 <malloc>
 8027fe8:	2800      	cmp	r0, #0
 8027fea:	d0f4      	beq.n	8027fd6 <__register_exitproc+0x4e>
 8027fec:	2300      	movs	r3, #0
 8027fee:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
 8027ff2:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 8027ff6:	6863      	ldr	r3, [r4, #4]
 8027ff8:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 8027ffc:	2201      	movs	r2, #1
 8027ffe:	409a      	lsls	r2, r3
 8028000:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 8028004:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 8028008:	4313      	orrs	r3, r2
 802800a:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 802800e:	2e02      	cmp	r6, #2
 8028010:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
 8028014:	bf02      	ittt	eq
 8028016:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
 802801a:	4313      	orreq	r3, r2
 802801c:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
 8028020:	6863      	ldr	r3, [r4, #4]
 8028022:	f8d8 0000 	ldr.w	r0, [r8]
 8028026:	1c5a      	adds	r2, r3, #1
 8028028:	3302      	adds	r3, #2
 802802a:	6062      	str	r2, [r4, #4]
 802802c:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 8028030:	f7ff f9e1 	bl	80273f6 <__retarget_lock_release_recursive>
 8028034:	2000      	movs	r0, #0
 8028036:	e7c6      	b.n	8027fc6 <__register_exitproc+0x3e>
 8028038:	20005aac 	.word	0x20005aac
 802803c:	20005a20 	.word	0x20005a20
 8028040:	0802c274 	.word	0x0802c274
 8028044:	080273f9 	.word	0x080273f9
 8028048:	20000250 	.word	0x20000250

0802804c <_close_r>:
 802804c:	b538      	push	{r3, r4, r5, lr}
 802804e:	4d06      	ldr	r5, [pc, #24]	; (8028068 <_close_r+0x1c>)
 8028050:	2300      	movs	r3, #0
 8028052:	4604      	mov	r4, r0
 8028054:	4608      	mov	r0, r1
 8028056:	602b      	str	r3, [r5, #0]
 8028058:	f7db fdc3 	bl	8003be2 <_close>
 802805c:	1c43      	adds	r3, r0, #1
 802805e:	d102      	bne.n	8028066 <_close_r+0x1a>
 8028060:	682b      	ldr	r3, [r5, #0]
 8028062:	b103      	cbz	r3, 8028066 <_close_r+0x1a>
 8028064:	6023      	str	r3, [r4, #0]
 8028066:	bd38      	pop	{r3, r4, r5, pc}
 8028068:	20005a1c 	.word	0x20005a1c

0802806c <__sflush_r>:
 802806c:	898a      	ldrh	r2, [r1, #12]
 802806e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8028072:	4605      	mov	r5, r0
 8028074:	0710      	lsls	r0, r2, #28
 8028076:	460c      	mov	r4, r1
 8028078:	d458      	bmi.n	802812c <__sflush_r+0xc0>
 802807a:	684b      	ldr	r3, [r1, #4]
 802807c:	2b00      	cmp	r3, #0
 802807e:	dc05      	bgt.n	802808c <__sflush_r+0x20>
 8028080:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8028082:	2b00      	cmp	r3, #0
 8028084:	dc02      	bgt.n	802808c <__sflush_r+0x20>
 8028086:	2000      	movs	r0, #0
 8028088:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802808c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 802808e:	2e00      	cmp	r6, #0
 8028090:	d0f9      	beq.n	8028086 <__sflush_r+0x1a>
 8028092:	2300      	movs	r3, #0
 8028094:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8028098:	682f      	ldr	r7, [r5, #0]
 802809a:	602b      	str	r3, [r5, #0]
 802809c:	d032      	beq.n	8028104 <__sflush_r+0x98>
 802809e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80280a0:	89a3      	ldrh	r3, [r4, #12]
 80280a2:	075a      	lsls	r2, r3, #29
 80280a4:	d505      	bpl.n	80280b2 <__sflush_r+0x46>
 80280a6:	6863      	ldr	r3, [r4, #4]
 80280a8:	1ac0      	subs	r0, r0, r3
 80280aa:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80280ac:	b10b      	cbz	r3, 80280b2 <__sflush_r+0x46>
 80280ae:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80280b0:	1ac0      	subs	r0, r0, r3
 80280b2:	2300      	movs	r3, #0
 80280b4:	4602      	mov	r2, r0
 80280b6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80280b8:	6a21      	ldr	r1, [r4, #32]
 80280ba:	4628      	mov	r0, r5
 80280bc:	47b0      	blx	r6
 80280be:	1c43      	adds	r3, r0, #1
 80280c0:	89a3      	ldrh	r3, [r4, #12]
 80280c2:	d106      	bne.n	80280d2 <__sflush_r+0x66>
 80280c4:	6829      	ldr	r1, [r5, #0]
 80280c6:	291d      	cmp	r1, #29
 80280c8:	d82c      	bhi.n	8028124 <__sflush_r+0xb8>
 80280ca:	4a2a      	ldr	r2, [pc, #168]	; (8028174 <__sflush_r+0x108>)
 80280cc:	40ca      	lsrs	r2, r1
 80280ce:	07d6      	lsls	r6, r2, #31
 80280d0:	d528      	bpl.n	8028124 <__sflush_r+0xb8>
 80280d2:	2200      	movs	r2, #0
 80280d4:	6062      	str	r2, [r4, #4]
 80280d6:	04d9      	lsls	r1, r3, #19
 80280d8:	6922      	ldr	r2, [r4, #16]
 80280da:	6022      	str	r2, [r4, #0]
 80280dc:	d504      	bpl.n	80280e8 <__sflush_r+0x7c>
 80280de:	1c42      	adds	r2, r0, #1
 80280e0:	d101      	bne.n	80280e6 <__sflush_r+0x7a>
 80280e2:	682b      	ldr	r3, [r5, #0]
 80280e4:	b903      	cbnz	r3, 80280e8 <__sflush_r+0x7c>
 80280e6:	6560      	str	r0, [r4, #84]	; 0x54
 80280e8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80280ea:	602f      	str	r7, [r5, #0]
 80280ec:	2900      	cmp	r1, #0
 80280ee:	d0ca      	beq.n	8028086 <__sflush_r+0x1a>
 80280f0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80280f4:	4299      	cmp	r1, r3
 80280f6:	d002      	beq.n	80280fe <__sflush_r+0x92>
 80280f8:	4628      	mov	r0, r5
 80280fa:	f7ff f9a3 	bl	8027444 <_free_r>
 80280fe:	2000      	movs	r0, #0
 8028100:	6360      	str	r0, [r4, #52]	; 0x34
 8028102:	e7c1      	b.n	8028088 <__sflush_r+0x1c>
 8028104:	6a21      	ldr	r1, [r4, #32]
 8028106:	2301      	movs	r3, #1
 8028108:	4628      	mov	r0, r5
 802810a:	47b0      	blx	r6
 802810c:	1c41      	adds	r1, r0, #1
 802810e:	d1c7      	bne.n	80280a0 <__sflush_r+0x34>
 8028110:	682b      	ldr	r3, [r5, #0]
 8028112:	2b00      	cmp	r3, #0
 8028114:	d0c4      	beq.n	80280a0 <__sflush_r+0x34>
 8028116:	2b1d      	cmp	r3, #29
 8028118:	d001      	beq.n	802811e <__sflush_r+0xb2>
 802811a:	2b16      	cmp	r3, #22
 802811c:	d101      	bne.n	8028122 <__sflush_r+0xb6>
 802811e:	602f      	str	r7, [r5, #0]
 8028120:	e7b1      	b.n	8028086 <__sflush_r+0x1a>
 8028122:	89a3      	ldrh	r3, [r4, #12]
 8028124:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8028128:	81a3      	strh	r3, [r4, #12]
 802812a:	e7ad      	b.n	8028088 <__sflush_r+0x1c>
 802812c:	690f      	ldr	r7, [r1, #16]
 802812e:	2f00      	cmp	r7, #0
 8028130:	d0a9      	beq.n	8028086 <__sflush_r+0x1a>
 8028132:	0793      	lsls	r3, r2, #30
 8028134:	680e      	ldr	r6, [r1, #0]
 8028136:	bf08      	it	eq
 8028138:	694b      	ldreq	r3, [r1, #20]
 802813a:	600f      	str	r7, [r1, #0]
 802813c:	bf18      	it	ne
 802813e:	2300      	movne	r3, #0
 8028140:	eba6 0807 	sub.w	r8, r6, r7
 8028144:	608b      	str	r3, [r1, #8]
 8028146:	f1b8 0f00 	cmp.w	r8, #0
 802814a:	dd9c      	ble.n	8028086 <__sflush_r+0x1a>
 802814c:	6a21      	ldr	r1, [r4, #32]
 802814e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8028150:	4643      	mov	r3, r8
 8028152:	463a      	mov	r2, r7
 8028154:	4628      	mov	r0, r5
 8028156:	47b0      	blx	r6
 8028158:	2800      	cmp	r0, #0
 802815a:	dc06      	bgt.n	802816a <__sflush_r+0xfe>
 802815c:	89a3      	ldrh	r3, [r4, #12]
 802815e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8028162:	81a3      	strh	r3, [r4, #12]
 8028164:	f04f 30ff 	mov.w	r0, #4294967295
 8028168:	e78e      	b.n	8028088 <__sflush_r+0x1c>
 802816a:	4407      	add	r7, r0
 802816c:	eba8 0800 	sub.w	r8, r8, r0
 8028170:	e7e9      	b.n	8028146 <__sflush_r+0xda>
 8028172:	bf00      	nop
 8028174:	20400001 	.word	0x20400001

08028178 <_fflush_r>:
 8028178:	b538      	push	{r3, r4, r5, lr}
 802817a:	690b      	ldr	r3, [r1, #16]
 802817c:	4605      	mov	r5, r0
 802817e:	460c      	mov	r4, r1
 8028180:	b913      	cbnz	r3, 8028188 <_fflush_r+0x10>
 8028182:	2500      	movs	r5, #0
 8028184:	4628      	mov	r0, r5
 8028186:	bd38      	pop	{r3, r4, r5, pc}
 8028188:	b118      	cbz	r0, 8028192 <_fflush_r+0x1a>
 802818a:	6983      	ldr	r3, [r0, #24]
 802818c:	b90b      	cbnz	r3, 8028192 <_fflush_r+0x1a>
 802818e:	f7ff f85b 	bl	8027248 <__sinit>
 8028192:	4b14      	ldr	r3, [pc, #80]	; (80281e4 <_fflush_r+0x6c>)
 8028194:	429c      	cmp	r4, r3
 8028196:	d11b      	bne.n	80281d0 <_fflush_r+0x58>
 8028198:	686c      	ldr	r4, [r5, #4]
 802819a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802819e:	2b00      	cmp	r3, #0
 80281a0:	d0ef      	beq.n	8028182 <_fflush_r+0xa>
 80281a2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80281a4:	07d0      	lsls	r0, r2, #31
 80281a6:	d404      	bmi.n	80281b2 <_fflush_r+0x3a>
 80281a8:	0599      	lsls	r1, r3, #22
 80281aa:	d402      	bmi.n	80281b2 <_fflush_r+0x3a>
 80281ac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80281ae:	f7ff f920 	bl	80273f2 <__retarget_lock_acquire_recursive>
 80281b2:	4628      	mov	r0, r5
 80281b4:	4621      	mov	r1, r4
 80281b6:	f7ff ff59 	bl	802806c <__sflush_r>
 80281ba:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80281bc:	07da      	lsls	r2, r3, #31
 80281be:	4605      	mov	r5, r0
 80281c0:	d4e0      	bmi.n	8028184 <_fflush_r+0xc>
 80281c2:	89a3      	ldrh	r3, [r4, #12]
 80281c4:	059b      	lsls	r3, r3, #22
 80281c6:	d4dd      	bmi.n	8028184 <_fflush_r+0xc>
 80281c8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80281ca:	f7ff f914 	bl	80273f6 <__retarget_lock_release_recursive>
 80281ce:	e7d9      	b.n	8028184 <_fflush_r+0xc>
 80281d0:	4b05      	ldr	r3, [pc, #20]	; (80281e8 <_fflush_r+0x70>)
 80281d2:	429c      	cmp	r4, r3
 80281d4:	d101      	bne.n	80281da <_fflush_r+0x62>
 80281d6:	68ac      	ldr	r4, [r5, #8]
 80281d8:	e7df      	b.n	802819a <_fflush_r+0x22>
 80281da:	4b04      	ldr	r3, [pc, #16]	; (80281ec <_fflush_r+0x74>)
 80281dc:	429c      	cmp	r4, r3
 80281de:	bf08      	it	eq
 80281e0:	68ec      	ldreq	r4, [r5, #12]
 80281e2:	e7da      	b.n	802819a <_fflush_r+0x22>
 80281e4:	0802c1fc 	.word	0x0802c1fc
 80281e8:	0802c21c 	.word	0x0802c21c
 80281ec:	0802c1dc 	.word	0x0802c1dc

080281f0 <_lseek_r>:
 80281f0:	b538      	push	{r3, r4, r5, lr}
 80281f2:	4d07      	ldr	r5, [pc, #28]	; (8028210 <_lseek_r+0x20>)
 80281f4:	4604      	mov	r4, r0
 80281f6:	4608      	mov	r0, r1
 80281f8:	4611      	mov	r1, r2
 80281fa:	2200      	movs	r2, #0
 80281fc:	602a      	str	r2, [r5, #0]
 80281fe:	461a      	mov	r2, r3
 8028200:	f7db fd16 	bl	8003c30 <_lseek>
 8028204:	1c43      	adds	r3, r0, #1
 8028206:	d102      	bne.n	802820e <_lseek_r+0x1e>
 8028208:	682b      	ldr	r3, [r5, #0]
 802820a:	b103      	cbz	r3, 802820e <_lseek_r+0x1e>
 802820c:	6023      	str	r3, [r4, #0]
 802820e:	bd38      	pop	{r3, r4, r5, pc}
 8028210:	20005a1c 	.word	0x20005a1c

08028214 <__swhatbuf_r>:
 8028214:	b570      	push	{r4, r5, r6, lr}
 8028216:	460e      	mov	r6, r1
 8028218:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802821c:	2900      	cmp	r1, #0
 802821e:	b096      	sub	sp, #88	; 0x58
 8028220:	4614      	mov	r4, r2
 8028222:	461d      	mov	r5, r3
 8028224:	da08      	bge.n	8028238 <__swhatbuf_r+0x24>
 8028226:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 802822a:	2200      	movs	r2, #0
 802822c:	602a      	str	r2, [r5, #0]
 802822e:	061a      	lsls	r2, r3, #24
 8028230:	d410      	bmi.n	8028254 <__swhatbuf_r+0x40>
 8028232:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8028236:	e00e      	b.n	8028256 <__swhatbuf_r+0x42>
 8028238:	466a      	mov	r2, sp
 802823a:	f000 f86f 	bl	802831c <_fstat_r>
 802823e:	2800      	cmp	r0, #0
 8028240:	dbf1      	blt.n	8028226 <__swhatbuf_r+0x12>
 8028242:	9a01      	ldr	r2, [sp, #4]
 8028244:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8028248:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 802824c:	425a      	negs	r2, r3
 802824e:	415a      	adcs	r2, r3
 8028250:	602a      	str	r2, [r5, #0]
 8028252:	e7ee      	b.n	8028232 <__swhatbuf_r+0x1e>
 8028254:	2340      	movs	r3, #64	; 0x40
 8028256:	2000      	movs	r0, #0
 8028258:	6023      	str	r3, [r4, #0]
 802825a:	b016      	add	sp, #88	; 0x58
 802825c:	bd70      	pop	{r4, r5, r6, pc}
	...

08028260 <__smakebuf_r>:
 8028260:	898b      	ldrh	r3, [r1, #12]
 8028262:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8028264:	079d      	lsls	r5, r3, #30
 8028266:	4606      	mov	r6, r0
 8028268:	460c      	mov	r4, r1
 802826a:	d507      	bpl.n	802827c <__smakebuf_r+0x1c>
 802826c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8028270:	6023      	str	r3, [r4, #0]
 8028272:	6123      	str	r3, [r4, #16]
 8028274:	2301      	movs	r3, #1
 8028276:	6163      	str	r3, [r4, #20]
 8028278:	b002      	add	sp, #8
 802827a:	bd70      	pop	{r4, r5, r6, pc}
 802827c:	ab01      	add	r3, sp, #4
 802827e:	466a      	mov	r2, sp
 8028280:	f7ff ffc8 	bl	8028214 <__swhatbuf_r>
 8028284:	9900      	ldr	r1, [sp, #0]
 8028286:	4605      	mov	r5, r0
 8028288:	4630      	mov	r0, r6
 802828a:	f7ff f947 	bl	802751c <_malloc_r>
 802828e:	b948      	cbnz	r0, 80282a4 <__smakebuf_r+0x44>
 8028290:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8028294:	059a      	lsls	r2, r3, #22
 8028296:	d4ef      	bmi.n	8028278 <__smakebuf_r+0x18>
 8028298:	f023 0303 	bic.w	r3, r3, #3
 802829c:	f043 0302 	orr.w	r3, r3, #2
 80282a0:	81a3      	strh	r3, [r4, #12]
 80282a2:	e7e3      	b.n	802826c <__smakebuf_r+0xc>
 80282a4:	4b0d      	ldr	r3, [pc, #52]	; (80282dc <__smakebuf_r+0x7c>)
 80282a6:	62b3      	str	r3, [r6, #40]	; 0x28
 80282a8:	89a3      	ldrh	r3, [r4, #12]
 80282aa:	6020      	str	r0, [r4, #0]
 80282ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80282b0:	81a3      	strh	r3, [r4, #12]
 80282b2:	9b00      	ldr	r3, [sp, #0]
 80282b4:	6163      	str	r3, [r4, #20]
 80282b6:	9b01      	ldr	r3, [sp, #4]
 80282b8:	6120      	str	r0, [r4, #16]
 80282ba:	b15b      	cbz	r3, 80282d4 <__smakebuf_r+0x74>
 80282bc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80282c0:	4630      	mov	r0, r6
 80282c2:	f000 f83d 	bl	8028340 <_isatty_r>
 80282c6:	b128      	cbz	r0, 80282d4 <__smakebuf_r+0x74>
 80282c8:	89a3      	ldrh	r3, [r4, #12]
 80282ca:	f023 0303 	bic.w	r3, r3, #3
 80282ce:	f043 0301 	orr.w	r3, r3, #1
 80282d2:	81a3      	strh	r3, [r4, #12]
 80282d4:	89a0      	ldrh	r0, [r4, #12]
 80282d6:	4305      	orrs	r5, r0
 80282d8:	81a5      	strh	r5, [r4, #12]
 80282da:	e7cd      	b.n	8028278 <__smakebuf_r+0x18>
 80282dc:	080271e1 	.word	0x080271e1

080282e0 <__malloc_lock>:
 80282e0:	4801      	ldr	r0, [pc, #4]	; (80282e8 <__malloc_lock+0x8>)
 80282e2:	f7ff b886 	b.w	80273f2 <__retarget_lock_acquire_recursive>
 80282e6:	bf00      	nop
 80282e8:	20005909 	.word	0x20005909

080282ec <__malloc_unlock>:
 80282ec:	4801      	ldr	r0, [pc, #4]	; (80282f4 <__malloc_unlock+0x8>)
 80282ee:	f7ff b882 	b.w	80273f6 <__retarget_lock_release_recursive>
 80282f2:	bf00      	nop
 80282f4:	20005909 	.word	0x20005909

080282f8 <_read_r>:
 80282f8:	b538      	push	{r3, r4, r5, lr}
 80282fa:	4d07      	ldr	r5, [pc, #28]	; (8028318 <_read_r+0x20>)
 80282fc:	4604      	mov	r4, r0
 80282fe:	4608      	mov	r0, r1
 8028300:	4611      	mov	r1, r2
 8028302:	2200      	movs	r2, #0
 8028304:	602a      	str	r2, [r5, #0]
 8028306:	461a      	mov	r2, r3
 8028308:	f7db fc32 	bl	8003b70 <_read>
 802830c:	1c43      	adds	r3, r0, #1
 802830e:	d102      	bne.n	8028316 <_read_r+0x1e>
 8028310:	682b      	ldr	r3, [r5, #0]
 8028312:	b103      	cbz	r3, 8028316 <_read_r+0x1e>
 8028314:	6023      	str	r3, [r4, #0]
 8028316:	bd38      	pop	{r3, r4, r5, pc}
 8028318:	20005a1c 	.word	0x20005a1c

0802831c <_fstat_r>:
 802831c:	b538      	push	{r3, r4, r5, lr}
 802831e:	4d07      	ldr	r5, [pc, #28]	; (802833c <_fstat_r+0x20>)
 8028320:	2300      	movs	r3, #0
 8028322:	4604      	mov	r4, r0
 8028324:	4608      	mov	r0, r1
 8028326:	4611      	mov	r1, r2
 8028328:	602b      	str	r3, [r5, #0]
 802832a:	f7db fc66 	bl	8003bfa <_fstat>
 802832e:	1c43      	adds	r3, r0, #1
 8028330:	d102      	bne.n	8028338 <_fstat_r+0x1c>
 8028332:	682b      	ldr	r3, [r5, #0]
 8028334:	b103      	cbz	r3, 8028338 <_fstat_r+0x1c>
 8028336:	6023      	str	r3, [r4, #0]
 8028338:	bd38      	pop	{r3, r4, r5, pc}
 802833a:	bf00      	nop
 802833c:	20005a1c 	.word	0x20005a1c

08028340 <_isatty_r>:
 8028340:	b538      	push	{r3, r4, r5, lr}
 8028342:	4d06      	ldr	r5, [pc, #24]	; (802835c <_isatty_r+0x1c>)
 8028344:	2300      	movs	r3, #0
 8028346:	4604      	mov	r4, r0
 8028348:	4608      	mov	r0, r1
 802834a:	602b      	str	r3, [r5, #0]
 802834c:	f7db fc65 	bl	8003c1a <_isatty>
 8028350:	1c43      	adds	r3, r0, #1
 8028352:	d102      	bne.n	802835a <_isatty_r+0x1a>
 8028354:	682b      	ldr	r3, [r5, #0]
 8028356:	b103      	cbz	r3, 802835a <_isatty_r+0x1a>
 8028358:	6023      	str	r3, [r4, #0]
 802835a:	bd38      	pop	{r3, r4, r5, pc}
 802835c:	20005a1c 	.word	0x20005a1c

08028360 <_init>:
 8028360:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8028362:	bf00      	nop
 8028364:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8028366:	bc08      	pop	{r3}
 8028368:	469e      	mov	lr, r3
 802836a:	4770      	bx	lr

0802836c <_fini>:
 802836c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802836e:	bf00      	nop
 8028370:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8028372:	bc08      	pop	{r3}
 8028374:	469e      	mov	lr, r3
 8028376:	4770      	bx	lr
