
openh7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001e224  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000029f8  0801e4c8  0801e4c8  0002e4c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 FontFlashSection 00016e2a  08020ec0  08020ec0  00030ec0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 FontSearchFlashSection 0000034c  08037cec  08037cec  00047cec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .ARM          00000008  08038038  08038038  00048038  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .init_array   00000028  08038040  08038040  00048040  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   0000001c  08038068  08038068  00048068  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000314  20000000  08038084  00050000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00006ce0  20000314  08038398  00050314  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20006ff4  08038398  00056ff4  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00050314  2**0
                  CONTENTS, READONLY
 12 .debug_info   000df77d  00000000  00000000  00050342  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0001549c  00000000  00000000  0012fabf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00004eb0  00000000  00000000  00144f60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000048a0  00000000  00000000  00149e10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0004f13f  00000000  00000000  0014e6b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000605f4  00000000  00000000  0019d7ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001d38ac  00000000  00000000  001fdde3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000cf  00000000  00000000  003d168f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00015b30  00000000  00000000  003d1760  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	20000314 	.word	0x20000314
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0801e4ac 	.word	0x0801e4ac

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	20000318 	.word	0x20000318
 80002dc:	0801e4ac 	.word	0x0801e4ac

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b974 	b.w	8000690 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	4604      	mov	r4, r0
 80003c8:	468e      	mov	lr, r1
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d14d      	bne.n	800046a <__udivmoddi4+0xaa>
 80003ce:	428a      	cmp	r2, r1
 80003d0:	4694      	mov	ip, r2
 80003d2:	d969      	bls.n	80004a8 <__udivmoddi4+0xe8>
 80003d4:	fab2 f282 	clz	r2, r2
 80003d8:	b152      	cbz	r2, 80003f0 <__udivmoddi4+0x30>
 80003da:	fa01 f302 	lsl.w	r3, r1, r2
 80003de:	f1c2 0120 	rsb	r1, r2, #32
 80003e2:	fa20 f101 	lsr.w	r1, r0, r1
 80003e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80003ea:	ea41 0e03 	orr.w	lr, r1, r3
 80003ee:	4094      	lsls	r4, r2
 80003f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003f4:	0c21      	lsrs	r1, r4, #16
 80003f6:	fbbe f6f8 	udiv	r6, lr, r8
 80003fa:	fa1f f78c 	uxth.w	r7, ip
 80003fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000402:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000406:	fb06 f107 	mul.w	r1, r6, r7
 800040a:	4299      	cmp	r1, r3
 800040c:	d90a      	bls.n	8000424 <__udivmoddi4+0x64>
 800040e:	eb1c 0303 	adds.w	r3, ip, r3
 8000412:	f106 30ff 	add.w	r0, r6, #4294967295
 8000416:	f080 811f 	bcs.w	8000658 <__udivmoddi4+0x298>
 800041a:	4299      	cmp	r1, r3
 800041c:	f240 811c 	bls.w	8000658 <__udivmoddi4+0x298>
 8000420:	3e02      	subs	r6, #2
 8000422:	4463      	add	r3, ip
 8000424:	1a5b      	subs	r3, r3, r1
 8000426:	b2a4      	uxth	r4, r4
 8000428:	fbb3 f0f8 	udiv	r0, r3, r8
 800042c:	fb08 3310 	mls	r3, r8, r0, r3
 8000430:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000434:	fb00 f707 	mul.w	r7, r0, r7
 8000438:	42a7      	cmp	r7, r4
 800043a:	d90a      	bls.n	8000452 <__udivmoddi4+0x92>
 800043c:	eb1c 0404 	adds.w	r4, ip, r4
 8000440:	f100 33ff 	add.w	r3, r0, #4294967295
 8000444:	f080 810a 	bcs.w	800065c <__udivmoddi4+0x29c>
 8000448:	42a7      	cmp	r7, r4
 800044a:	f240 8107 	bls.w	800065c <__udivmoddi4+0x29c>
 800044e:	4464      	add	r4, ip
 8000450:	3802      	subs	r0, #2
 8000452:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000456:	1be4      	subs	r4, r4, r7
 8000458:	2600      	movs	r6, #0
 800045a:	b11d      	cbz	r5, 8000464 <__udivmoddi4+0xa4>
 800045c:	40d4      	lsrs	r4, r2
 800045e:	2300      	movs	r3, #0
 8000460:	e9c5 4300 	strd	r4, r3, [r5]
 8000464:	4631      	mov	r1, r6
 8000466:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046a:	428b      	cmp	r3, r1
 800046c:	d909      	bls.n	8000482 <__udivmoddi4+0xc2>
 800046e:	2d00      	cmp	r5, #0
 8000470:	f000 80ef 	beq.w	8000652 <__udivmoddi4+0x292>
 8000474:	2600      	movs	r6, #0
 8000476:	e9c5 0100 	strd	r0, r1, [r5]
 800047a:	4630      	mov	r0, r6
 800047c:	4631      	mov	r1, r6
 800047e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000482:	fab3 f683 	clz	r6, r3
 8000486:	2e00      	cmp	r6, #0
 8000488:	d14a      	bne.n	8000520 <__udivmoddi4+0x160>
 800048a:	428b      	cmp	r3, r1
 800048c:	d302      	bcc.n	8000494 <__udivmoddi4+0xd4>
 800048e:	4282      	cmp	r2, r0
 8000490:	f200 80f9 	bhi.w	8000686 <__udivmoddi4+0x2c6>
 8000494:	1a84      	subs	r4, r0, r2
 8000496:	eb61 0303 	sbc.w	r3, r1, r3
 800049a:	2001      	movs	r0, #1
 800049c:	469e      	mov	lr, r3
 800049e:	2d00      	cmp	r5, #0
 80004a0:	d0e0      	beq.n	8000464 <__udivmoddi4+0xa4>
 80004a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80004a6:	e7dd      	b.n	8000464 <__udivmoddi4+0xa4>
 80004a8:	b902      	cbnz	r2, 80004ac <__udivmoddi4+0xec>
 80004aa:	deff      	udf	#255	; 0xff
 80004ac:	fab2 f282 	clz	r2, r2
 80004b0:	2a00      	cmp	r2, #0
 80004b2:	f040 8092 	bne.w	80005da <__udivmoddi4+0x21a>
 80004b6:	eba1 010c 	sub.w	r1, r1, ip
 80004ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004be:	fa1f fe8c 	uxth.w	lr, ip
 80004c2:	2601      	movs	r6, #1
 80004c4:	0c20      	lsrs	r0, r4, #16
 80004c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80004ca:	fb07 1113 	mls	r1, r7, r3, r1
 80004ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004d2:	fb0e f003 	mul.w	r0, lr, r3
 80004d6:	4288      	cmp	r0, r1
 80004d8:	d908      	bls.n	80004ec <__udivmoddi4+0x12c>
 80004da:	eb1c 0101 	adds.w	r1, ip, r1
 80004de:	f103 38ff 	add.w	r8, r3, #4294967295
 80004e2:	d202      	bcs.n	80004ea <__udivmoddi4+0x12a>
 80004e4:	4288      	cmp	r0, r1
 80004e6:	f200 80cb 	bhi.w	8000680 <__udivmoddi4+0x2c0>
 80004ea:	4643      	mov	r3, r8
 80004ec:	1a09      	subs	r1, r1, r0
 80004ee:	b2a4      	uxth	r4, r4
 80004f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80004f4:	fb07 1110 	mls	r1, r7, r0, r1
 80004f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80004fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000500:	45a6      	cmp	lr, r4
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x156>
 8000504:	eb1c 0404 	adds.w	r4, ip, r4
 8000508:	f100 31ff 	add.w	r1, r0, #4294967295
 800050c:	d202      	bcs.n	8000514 <__udivmoddi4+0x154>
 800050e:	45a6      	cmp	lr, r4
 8000510:	f200 80bb 	bhi.w	800068a <__udivmoddi4+0x2ca>
 8000514:	4608      	mov	r0, r1
 8000516:	eba4 040e 	sub.w	r4, r4, lr
 800051a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800051e:	e79c      	b.n	800045a <__udivmoddi4+0x9a>
 8000520:	f1c6 0720 	rsb	r7, r6, #32
 8000524:	40b3      	lsls	r3, r6
 8000526:	fa22 fc07 	lsr.w	ip, r2, r7
 800052a:	ea4c 0c03 	orr.w	ip, ip, r3
 800052e:	fa20 f407 	lsr.w	r4, r0, r7
 8000532:	fa01 f306 	lsl.w	r3, r1, r6
 8000536:	431c      	orrs	r4, r3
 8000538:	40f9      	lsrs	r1, r7
 800053a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800053e:	fa00 f306 	lsl.w	r3, r0, r6
 8000542:	fbb1 f8f9 	udiv	r8, r1, r9
 8000546:	0c20      	lsrs	r0, r4, #16
 8000548:	fa1f fe8c 	uxth.w	lr, ip
 800054c:	fb09 1118 	mls	r1, r9, r8, r1
 8000550:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000554:	fb08 f00e 	mul.w	r0, r8, lr
 8000558:	4288      	cmp	r0, r1
 800055a:	fa02 f206 	lsl.w	r2, r2, r6
 800055e:	d90b      	bls.n	8000578 <__udivmoddi4+0x1b8>
 8000560:	eb1c 0101 	adds.w	r1, ip, r1
 8000564:	f108 3aff 	add.w	sl, r8, #4294967295
 8000568:	f080 8088 	bcs.w	800067c <__udivmoddi4+0x2bc>
 800056c:	4288      	cmp	r0, r1
 800056e:	f240 8085 	bls.w	800067c <__udivmoddi4+0x2bc>
 8000572:	f1a8 0802 	sub.w	r8, r8, #2
 8000576:	4461      	add	r1, ip
 8000578:	1a09      	subs	r1, r1, r0
 800057a:	b2a4      	uxth	r4, r4
 800057c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000580:	fb09 1110 	mls	r1, r9, r0, r1
 8000584:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000588:	fb00 fe0e 	mul.w	lr, r0, lr
 800058c:	458e      	cmp	lr, r1
 800058e:	d908      	bls.n	80005a2 <__udivmoddi4+0x1e2>
 8000590:	eb1c 0101 	adds.w	r1, ip, r1
 8000594:	f100 34ff 	add.w	r4, r0, #4294967295
 8000598:	d26c      	bcs.n	8000674 <__udivmoddi4+0x2b4>
 800059a:	458e      	cmp	lr, r1
 800059c:	d96a      	bls.n	8000674 <__udivmoddi4+0x2b4>
 800059e:	3802      	subs	r0, #2
 80005a0:	4461      	add	r1, ip
 80005a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80005a6:	fba0 9402 	umull	r9, r4, r0, r2
 80005aa:	eba1 010e 	sub.w	r1, r1, lr
 80005ae:	42a1      	cmp	r1, r4
 80005b0:	46c8      	mov	r8, r9
 80005b2:	46a6      	mov	lr, r4
 80005b4:	d356      	bcc.n	8000664 <__udivmoddi4+0x2a4>
 80005b6:	d053      	beq.n	8000660 <__udivmoddi4+0x2a0>
 80005b8:	b15d      	cbz	r5, 80005d2 <__udivmoddi4+0x212>
 80005ba:	ebb3 0208 	subs.w	r2, r3, r8
 80005be:	eb61 010e 	sbc.w	r1, r1, lr
 80005c2:	fa01 f707 	lsl.w	r7, r1, r7
 80005c6:	fa22 f306 	lsr.w	r3, r2, r6
 80005ca:	40f1      	lsrs	r1, r6
 80005cc:	431f      	orrs	r7, r3
 80005ce:	e9c5 7100 	strd	r7, r1, [r5]
 80005d2:	2600      	movs	r6, #0
 80005d4:	4631      	mov	r1, r6
 80005d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	40d8      	lsrs	r0, r3
 80005e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80005e4:	fa21 f303 	lsr.w	r3, r1, r3
 80005e8:	4091      	lsls	r1, r2
 80005ea:	4301      	orrs	r1, r0
 80005ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005f0:	fa1f fe8c 	uxth.w	lr, ip
 80005f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80005f8:	fb07 3610 	mls	r6, r7, r0, r3
 80005fc:	0c0b      	lsrs	r3, r1, #16
 80005fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000602:	fb00 f60e 	mul.w	r6, r0, lr
 8000606:	429e      	cmp	r6, r3
 8000608:	fa04 f402 	lsl.w	r4, r4, r2
 800060c:	d908      	bls.n	8000620 <__udivmoddi4+0x260>
 800060e:	eb1c 0303 	adds.w	r3, ip, r3
 8000612:	f100 38ff 	add.w	r8, r0, #4294967295
 8000616:	d22f      	bcs.n	8000678 <__udivmoddi4+0x2b8>
 8000618:	429e      	cmp	r6, r3
 800061a:	d92d      	bls.n	8000678 <__udivmoddi4+0x2b8>
 800061c:	3802      	subs	r0, #2
 800061e:	4463      	add	r3, ip
 8000620:	1b9b      	subs	r3, r3, r6
 8000622:	b289      	uxth	r1, r1
 8000624:	fbb3 f6f7 	udiv	r6, r3, r7
 8000628:	fb07 3316 	mls	r3, r7, r6, r3
 800062c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000630:	fb06 f30e 	mul.w	r3, r6, lr
 8000634:	428b      	cmp	r3, r1
 8000636:	d908      	bls.n	800064a <__udivmoddi4+0x28a>
 8000638:	eb1c 0101 	adds.w	r1, ip, r1
 800063c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000640:	d216      	bcs.n	8000670 <__udivmoddi4+0x2b0>
 8000642:	428b      	cmp	r3, r1
 8000644:	d914      	bls.n	8000670 <__udivmoddi4+0x2b0>
 8000646:	3e02      	subs	r6, #2
 8000648:	4461      	add	r1, ip
 800064a:	1ac9      	subs	r1, r1, r3
 800064c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000650:	e738      	b.n	80004c4 <__udivmoddi4+0x104>
 8000652:	462e      	mov	r6, r5
 8000654:	4628      	mov	r0, r5
 8000656:	e705      	b.n	8000464 <__udivmoddi4+0xa4>
 8000658:	4606      	mov	r6, r0
 800065a:	e6e3      	b.n	8000424 <__udivmoddi4+0x64>
 800065c:	4618      	mov	r0, r3
 800065e:	e6f8      	b.n	8000452 <__udivmoddi4+0x92>
 8000660:	454b      	cmp	r3, r9
 8000662:	d2a9      	bcs.n	80005b8 <__udivmoddi4+0x1f8>
 8000664:	ebb9 0802 	subs.w	r8, r9, r2
 8000668:	eb64 0e0c 	sbc.w	lr, r4, ip
 800066c:	3801      	subs	r0, #1
 800066e:	e7a3      	b.n	80005b8 <__udivmoddi4+0x1f8>
 8000670:	4646      	mov	r6, r8
 8000672:	e7ea      	b.n	800064a <__udivmoddi4+0x28a>
 8000674:	4620      	mov	r0, r4
 8000676:	e794      	b.n	80005a2 <__udivmoddi4+0x1e2>
 8000678:	4640      	mov	r0, r8
 800067a:	e7d1      	b.n	8000620 <__udivmoddi4+0x260>
 800067c:	46d0      	mov	r8, sl
 800067e:	e77b      	b.n	8000578 <__udivmoddi4+0x1b8>
 8000680:	3b02      	subs	r3, #2
 8000682:	4461      	add	r1, ip
 8000684:	e732      	b.n	80004ec <__udivmoddi4+0x12c>
 8000686:	4630      	mov	r0, r6
 8000688:	e709      	b.n	800049e <__udivmoddi4+0xde>
 800068a:	4464      	add	r4, ip
 800068c:	3802      	subs	r0, #2
 800068e:	e742      	b.n	8000516 <__udivmoddi4+0x156>

08000690 <__aeabi_idiv0>:
 8000690:	4770      	bx	lr
 8000692:	bf00      	nop

08000694 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
ADC_HandleTypeDef hadc3;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	b08a      	sub	sp, #40	; 0x28
 8000698:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800069a:	f107 031c 	add.w	r3, r7, #28
 800069e:	2200      	movs	r2, #0
 80006a0:	601a      	str	r2, [r3, #0]
 80006a2:	605a      	str	r2, [r3, #4]
 80006a4:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80006a6:	463b      	mov	r3, r7
 80006a8:	2200      	movs	r2, #0
 80006aa:	601a      	str	r2, [r3, #0]
 80006ac:	605a      	str	r2, [r3, #4]
 80006ae:	609a      	str	r2, [r3, #8]
 80006b0:	60da      	str	r2, [r3, #12]
 80006b2:	611a      	str	r2, [r3, #16]
 80006b4:	615a      	str	r2, [r3, #20]
 80006b6:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 80006b8:	4b30      	ldr	r3, [pc, #192]	; (800077c <MX_ADC1_Init+0xe8>)
 80006ba:	4a31      	ldr	r2, [pc, #196]	; (8000780 <MX_ADC1_Init+0xec>)
 80006bc:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 80006be:	4b2f      	ldr	r3, [pc, #188]	; (800077c <MX_ADC1_Init+0xe8>)
 80006c0:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80006c4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 80006c6:	4b2d      	ldr	r3, [pc, #180]	; (800077c <MX_ADC1_Init+0xe8>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80006cc:	4b2b      	ldr	r3, [pc, #172]	; (800077c <MX_ADC1_Init+0xe8>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80006d2:	4b2a      	ldr	r3, [pc, #168]	; (800077c <MX_ADC1_Init+0xe8>)
 80006d4:	2204      	movs	r2, #4
 80006d6:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80006d8:	4b28      	ldr	r3, [pc, #160]	; (800077c <MX_ADC1_Init+0xe8>)
 80006da:	2200      	movs	r2, #0
 80006dc:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80006de:	4b27      	ldr	r3, [pc, #156]	; (800077c <MX_ADC1_Init+0xe8>)
 80006e0:	2201      	movs	r2, #1
 80006e2:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 1;
 80006e4:	4b25      	ldr	r3, [pc, #148]	; (800077c <MX_ADC1_Init+0xe8>)
 80006e6:	2201      	movs	r2, #1
 80006e8:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80006ea:	4b24      	ldr	r3, [pc, #144]	; (800077c <MX_ADC1_Init+0xe8>)
 80006ec:	2200      	movs	r2, #0
 80006ee:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80006f0:	4b22      	ldr	r3, [pc, #136]	; (800077c <MX_ADC1_Init+0xe8>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80006f6:	4b21      	ldr	r3, [pc, #132]	; (800077c <MX_ADC1_Init+0xe8>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 80006fc:	4b1f      	ldr	r3, [pc, #124]	; (800077c <MX_ADC1_Init+0xe8>)
 80006fe:	2200      	movs	r2, #0
 8000700:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000702:	4b1e      	ldr	r3, [pc, #120]	; (800077c <MX_ADC1_Init+0xe8>)
 8000704:	2200      	movs	r2, #0
 8000706:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000708:	4b1c      	ldr	r3, [pc, #112]	; (800077c <MX_ADC1_Init+0xe8>)
 800070a:	2200      	movs	r2, #0
 800070c:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800070e:	4b1b      	ldr	r3, [pc, #108]	; (800077c <MX_ADC1_Init+0xe8>)
 8000710:	2200      	movs	r2, #0
 8000712:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000716:	4819      	ldr	r0, [pc, #100]	; (800077c <MX_ADC1_Init+0xe8>)
 8000718:	f004 f996 	bl	8004a48 <HAL_ADC_Init>
 800071c:	4603      	mov	r3, r0
 800071e:	2b00      	cmp	r3, #0
 8000720:	d001      	beq.n	8000726 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8000722:	f002 fe03 	bl	800332c <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000726:	2300      	movs	r3, #0
 8000728:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800072a:	f107 031c 	add.w	r3, r7, #28
 800072e:	4619      	mov	r1, r3
 8000730:	4812      	ldr	r0, [pc, #72]	; (800077c <MX_ADC1_Init+0xe8>)
 8000732:	f006 fa3b 	bl	8006bac <HAL_ADCEx_MultiModeConfigChannel>
 8000736:	4603      	mov	r3, r0
 8000738:	2b00      	cmp	r3, #0
 800073a:	d001      	beq.n	8000740 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 800073c:	f002 fdf6 	bl	800332c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000740:	4b10      	ldr	r3, [pc, #64]	; (8000784 <MX_ADC1_Init+0xf0>)
 8000742:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000744:	2306      	movs	r3, #6
 8000746:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_387CYCLES_5;
 8000748:	2306      	movs	r3, #6
 800074a:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800074c:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000750:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000752:	2304      	movs	r3, #4
 8000754:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000756:	2300      	movs	r3, #0
 8000758:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 800075a:	2300      	movs	r3, #0
 800075c:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800075e:	463b      	mov	r3, r7
 8000760:	4619      	mov	r1, r3
 8000762:	4806      	ldr	r0, [pc, #24]	; (800077c <MX_ADC1_Init+0xe8>)
 8000764:	f005 f8a8 	bl	80058b8 <HAL_ADC_ConfigChannel>
 8000768:	4603      	mov	r3, r0
 800076a:	2b00      	cmp	r3, #0
 800076c:	d001      	beq.n	8000772 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 800076e:	f002 fddd 	bl	800332c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000772:	bf00      	nop
 8000774:	3728      	adds	r7, #40	; 0x28
 8000776:	46bd      	mov	sp, r7
 8000778:	bd80      	pop	{r7, pc}
 800077a:	bf00      	nop
 800077c:	20000330 	.word	0x20000330
 8000780:	40022000 	.word	0x40022000
 8000784:	0c900008 	.word	0x0c900008

08000788 <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	b08e      	sub	sp, #56	; 0x38
 800078c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_AnalogWDGConfTypeDef AnalogWDGConfig = {0};
 800078e:	f107 0320 	add.w	r3, r7, #32
 8000792:	2200      	movs	r2, #0
 8000794:	601a      	str	r2, [r3, #0]
 8000796:	605a      	str	r2, [r3, #4]
 8000798:	609a      	str	r2, [r3, #8]
 800079a:	60da      	str	r2, [r3, #12]
 800079c:	611a      	str	r2, [r3, #16]
 800079e:	615a      	str	r2, [r3, #20]
  ADC_ChannelConfTypeDef sConfig = {0};
 80007a0:	1d3b      	adds	r3, r7, #4
 80007a2:	2200      	movs	r2, #0
 80007a4:	601a      	str	r2, [r3, #0]
 80007a6:	605a      	str	r2, [r3, #4]
 80007a8:	609a      	str	r2, [r3, #8]
 80007aa:	60da      	str	r2, [r3, #12]
 80007ac:	611a      	str	r2, [r3, #16]
 80007ae:	615a      	str	r2, [r3, #20]
 80007b0:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Common config
  */
  hadc3.Instance = ADC3;
 80007b2:	4b37      	ldr	r3, [pc, #220]	; (8000890 <MX_ADC3_Init+0x108>)
 80007b4:	4a37      	ldr	r2, [pc, #220]	; (8000894 <MX_ADC3_Init+0x10c>)
 80007b6:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 80007b8:	4b35      	ldr	r3, [pc, #212]	; (8000890 <MX_ADC3_Init+0x108>)
 80007ba:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80007be:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_16B;
 80007c0:	4b33      	ldr	r3, [pc, #204]	; (8000890 <MX_ADC3_Init+0x108>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80007c6:	4b32      	ldr	r3, [pc, #200]	; (8000890 <MX_ADC3_Init+0x108>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	60da      	str	r2, [r3, #12]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80007cc:	4b30      	ldr	r3, [pc, #192]	; (8000890 <MX_ADC3_Init+0x108>)
 80007ce:	2204      	movs	r2, #4
 80007d0:	611a      	str	r2, [r3, #16]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 80007d2:	4b2f      	ldr	r3, [pc, #188]	; (8000890 <MX_ADC3_Init+0x108>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	751a      	strb	r2, [r3, #20]
  hadc3.Init.ContinuousConvMode = ENABLE;
 80007d8:	4b2d      	ldr	r3, [pc, #180]	; (8000890 <MX_ADC3_Init+0x108>)
 80007da:	2201      	movs	r2, #1
 80007dc:	755a      	strb	r2, [r3, #21]
  hadc3.Init.NbrOfConversion = 1;
 80007de:	4b2c      	ldr	r3, [pc, #176]	; (8000890 <MX_ADC3_Init+0x108>)
 80007e0:	2201      	movs	r2, #1
 80007e2:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80007e4:	4b2a      	ldr	r3, [pc, #168]	; (8000890 <MX_ADC3_Init+0x108>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80007ea:	4b29      	ldr	r3, [pc, #164]	; (8000890 <MX_ADC3_Init+0x108>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	625a      	str	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80007f0:	4b27      	ldr	r3, [pc, #156]	; (8000890 <MX_ADC3_Init+0x108>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 80007f6:	4b26      	ldr	r3, [pc, #152]	; (8000890 <MX_ADC3_Init+0x108>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80007fc:	4b24      	ldr	r3, [pc, #144]	; (8000890 <MX_ADC3_Init+0x108>)
 80007fe:	2200      	movs	r2, #0
 8000800:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000802:	4b23      	ldr	r3, [pc, #140]	; (8000890 <MX_ADC3_Init+0x108>)
 8000804:	2200      	movs	r2, #0
 8000806:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 8000808:	4b21      	ldr	r3, [pc, #132]	; (8000890 <MX_ADC3_Init+0x108>)
 800080a:	2200      	movs	r2, #0
 800080c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000810:	481f      	ldr	r0, [pc, #124]	; (8000890 <MX_ADC3_Init+0x108>)
 8000812:	f004 f919 	bl	8004a48 <HAL_ADC_Init>
 8000816:	4603      	mov	r3, r0
 8000818:	2b00      	cmp	r3, #0
 800081a:	d001      	beq.n	8000820 <MX_ADC3_Init+0x98>
  {
    Error_Handler();
 800081c:	f002 fd86 	bl	800332c <Error_Handler>
  }
  /** Configure Analog WatchDog 1
  */
  AnalogWDGConfig.WatchdogNumber = ADC_ANALOGWATCHDOG_1;
 8000820:	4b1d      	ldr	r3, [pc, #116]	; (8000898 <MX_ADC3_Init+0x110>)
 8000822:	623b      	str	r3, [r7, #32]
  AnalogWDGConfig.WatchdogMode = ADC_ANALOGWATCHDOG_SINGLE_REG;
 8000824:	f44f 0340 	mov.w	r3, #12582912	; 0xc00000
 8000828:	627b      	str	r3, [r7, #36]	; 0x24
  AnalogWDGConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 800082a:	4b1c      	ldr	r3, [pc, #112]	; (800089c <MX_ADC3_Init+0x114>)
 800082c:	62bb      	str	r3, [r7, #40]	; 0x28
  AnalogWDGConfig.ITMode = ENABLE;
 800082e:	2301      	movs	r3, #1
 8000830:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  AnalogWDGConfig.HighThreshold = 15896;
 8000834:	f643 6318 	movw	r3, #15896	; 0x3e18
 8000838:	633b      	str	r3, [r7, #48]	; 0x30
  AnalogWDGConfig.LowThreshold = 10881;
 800083a:	f642 2381 	movw	r3, #10881	; 0x2a81
 800083e:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_ADC_AnalogWDGConfig(&hadc3, &AnalogWDGConfig) != HAL_OK)
 8000840:	f107 0320 	add.w	r3, r7, #32
 8000844:	4619      	mov	r1, r3
 8000846:	4812      	ldr	r0, [pc, #72]	; (8000890 <MX_ADC3_Init+0x108>)
 8000848:	f005 fb86 	bl	8005f58 <HAL_ADC_AnalogWDGConfig>
 800084c:	4603      	mov	r3, r0
 800084e:	2b00      	cmp	r3, #0
 8000850:	d001      	beq.n	8000856 <MX_ADC3_Init+0xce>
  {
    Error_Handler();
 8000852:	f002 fd6b 	bl	800332c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8000856:	4b11      	ldr	r3, [pc, #68]	; (800089c <MX_ADC3_Init+0x114>)
 8000858:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800085a:	2306      	movs	r3, #6
 800085c:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_810CYCLES_5;
 800085e:	2307      	movs	r3, #7
 8000860:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000862:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000866:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000868:	2304      	movs	r3, #4
 800086a:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800086c:	2300      	movs	r3, #0
 800086e:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000870:	2300      	movs	r3, #0
 8000872:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000874:	1d3b      	adds	r3, r7, #4
 8000876:	4619      	mov	r1, r3
 8000878:	4805      	ldr	r0, [pc, #20]	; (8000890 <MX_ADC3_Init+0x108>)
 800087a:	f005 f81d 	bl	80058b8 <HAL_ADC_ConfigChannel>
 800087e:	4603      	mov	r3, r0
 8000880:	2b00      	cmp	r3, #0
 8000882:	d001      	beq.n	8000888 <MX_ADC3_Init+0x100>
  {
    Error_Handler();
 8000884:	f002 fd52 	bl	800332c <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000888:	bf00      	nop
 800088a:	3738      	adds	r7, #56	; 0x38
 800088c:	46bd      	mov	sp, r7
 800088e:	bd80      	pop	{r7, pc}
 8000890:	20000394 	.word	0x20000394
 8000894:	58026000 	.word	0x58026000
 8000898:	7dc00000 	.word	0x7dc00000
 800089c:	cb840000 	.word	0xcb840000

080008a0 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b08a      	sub	sp, #40	; 0x28
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008a8:	f107 0314 	add.w	r3, r7, #20
 80008ac:	2200      	movs	r2, #0
 80008ae:	601a      	str	r2, [r3, #0]
 80008b0:	605a      	str	r2, [r3, #4]
 80008b2:	609a      	str	r2, [r3, #8]
 80008b4:	60da      	str	r2, [r3, #12]
 80008b6:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	4a26      	ldr	r2, [pc, #152]	; (8000958 <HAL_ADC_MspInit+0xb8>)
 80008be:	4293      	cmp	r3, r2
 80008c0:	d12a      	bne.n	8000918 <HAL_ADC_MspInit+0x78>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80008c2:	4b26      	ldr	r3, [pc, #152]	; (800095c <HAL_ADC_MspInit+0xbc>)
 80008c4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80008c8:	4a24      	ldr	r2, [pc, #144]	; (800095c <HAL_ADC_MspInit+0xbc>)
 80008ca:	f043 0320 	orr.w	r3, r3, #32
 80008ce:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80008d2:	4b22      	ldr	r3, [pc, #136]	; (800095c <HAL_ADC_MspInit+0xbc>)
 80008d4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80008d8:	f003 0320 	and.w	r3, r3, #32
 80008dc:	613b      	str	r3, [r7, #16]
 80008de:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008e0:	4b1e      	ldr	r3, [pc, #120]	; (800095c <HAL_ADC_MspInit+0xbc>)
 80008e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008e6:	4a1d      	ldr	r2, [pc, #116]	; (800095c <HAL_ADC_MspInit+0xbc>)
 80008e8:	f043 0301 	orr.w	r3, r3, #1
 80008ec:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80008f0:	4b1a      	ldr	r3, [pc, #104]	; (800095c <HAL_ADC_MspInit+0xbc>)
 80008f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008f6:	f003 0301 	and.w	r3, r3, #1
 80008fa:	60fb      	str	r3, [r7, #12]
 80008fc:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA6     ------> ADC1_INP3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80008fe:	2340      	movs	r3, #64	; 0x40
 8000900:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000902:	2303      	movs	r3, #3
 8000904:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000906:	2300      	movs	r3, #0
 8000908:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800090a:	f107 0314 	add.w	r3, r7, #20
 800090e:	4619      	mov	r1, r3
 8000910:	4813      	ldr	r0, [pc, #76]	; (8000960 <HAL_ADC_MspInit+0xc0>)
 8000912:	f006 fd05 	bl	8007320 <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(ADC3_IRQn);
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 8000916:	e01b      	b.n	8000950 <HAL_ADC_MspInit+0xb0>
  else if(adcHandle->Instance==ADC3)
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	681b      	ldr	r3, [r3, #0]
 800091c:	4a11      	ldr	r2, [pc, #68]	; (8000964 <HAL_ADC_MspInit+0xc4>)
 800091e:	4293      	cmp	r3, r2
 8000920:	d116      	bne.n	8000950 <HAL_ADC_MspInit+0xb0>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8000922:	4b0e      	ldr	r3, [pc, #56]	; (800095c <HAL_ADC_MspInit+0xbc>)
 8000924:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000928:	4a0c      	ldr	r2, [pc, #48]	; (800095c <HAL_ADC_MspInit+0xbc>)
 800092a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800092e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000932:	4b0a      	ldr	r3, [pc, #40]	; (800095c <HAL_ADC_MspInit+0xbc>)
 8000934:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000938:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800093c:	60bb      	str	r3, [r7, #8]
 800093e:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(ADC3_IRQn, 5, 0);
 8000940:	2200      	movs	r2, #0
 8000942:	2105      	movs	r1, #5
 8000944:	207f      	movs	r0, #127	; 0x7f
 8000946:	f006 fac7 	bl	8006ed8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC3_IRQn);
 800094a:	207f      	movs	r0, #127	; 0x7f
 800094c:	f006 fade 	bl	8006f0c <HAL_NVIC_EnableIRQ>
}
 8000950:	bf00      	nop
 8000952:	3728      	adds	r7, #40	; 0x28
 8000954:	46bd      	mov	sp, r7
 8000956:	bd80      	pop	{r7, pc}
 8000958:	40022000 	.word	0x40022000
 800095c:	58024400 	.word	0x58024400
 8000960:	58020000 	.word	0x58020000
 8000964:	58026000 	.word	0x58026000

08000968 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 800096c:	4b0d      	ldr	r3, [pc, #52]	; (80009a4 <MX_CRC_Init+0x3c>)
 800096e:	4a0e      	ldr	r2, [pc, #56]	; (80009a8 <MX_CRC_Init+0x40>)
 8000970:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8000972:	4b0c      	ldr	r3, [pc, #48]	; (80009a4 <MX_CRC_Init+0x3c>)
 8000974:	2200      	movs	r2, #0
 8000976:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8000978:	4b0a      	ldr	r3, [pc, #40]	; (80009a4 <MX_CRC_Init+0x3c>)
 800097a:	2200      	movs	r2, #0
 800097c:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 800097e:	4b09      	ldr	r3, [pc, #36]	; (80009a4 <MX_CRC_Init+0x3c>)
 8000980:	2200      	movs	r2, #0
 8000982:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8000984:	4b07      	ldr	r3, [pc, #28]	; (80009a4 <MX_CRC_Init+0x3c>)
 8000986:	2200      	movs	r2, #0
 8000988:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 800098a:	4b06      	ldr	r3, [pc, #24]	; (80009a4 <MX_CRC_Init+0x3c>)
 800098c:	2201      	movs	r2, #1
 800098e:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000990:	4804      	ldr	r0, [pc, #16]	; (80009a4 <MX_CRC_Init+0x3c>)
 8000992:	f006 fac9 	bl	8006f28 <HAL_CRC_Init>
 8000996:	4603      	mov	r3, r0
 8000998:	2b00      	cmp	r3, #0
 800099a:	d001      	beq.n	80009a0 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 800099c:	f002 fcc6 	bl	800332c <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80009a0:	bf00      	nop
 80009a2:	bd80      	pop	{r7, pc}
 80009a4:	200003f8 	.word	0x200003f8
 80009a8:	58024c00 	.word	0x58024c00

080009ac <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 80009ac:	b480      	push	{r7}
 80009ae:	b085      	sub	sp, #20
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	4a0b      	ldr	r2, [pc, #44]	; (80009e8 <HAL_CRC_MspInit+0x3c>)
 80009ba:	4293      	cmp	r3, r2
 80009bc:	d10e      	bne.n	80009dc <HAL_CRC_MspInit+0x30>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80009be:	4b0b      	ldr	r3, [pc, #44]	; (80009ec <HAL_CRC_MspInit+0x40>)
 80009c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009c4:	4a09      	ldr	r2, [pc, #36]	; (80009ec <HAL_CRC_MspInit+0x40>)
 80009c6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80009ca:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009ce:	4b07      	ldr	r3, [pc, #28]	; (80009ec <HAL_CRC_MspInit+0x40>)
 80009d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009d4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80009d8:	60fb      	str	r3, [r7, #12]
 80009da:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 80009dc:	bf00      	nop
 80009de:	3714      	adds	r7, #20
 80009e0:	46bd      	mov	sp, r7
 80009e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e6:	4770      	bx	lr
 80009e8:	58024c00 	.word	0x58024c00
 80009ec:	58024400 	.word	0x58024400

080009f0 <MX_DMA2D_Init>:

DMA2D_HandleTypeDef hdma2d;

/* DMA2D init function */
void MX_DMA2D_Init(void)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 80009f4:	4b19      	ldr	r3, [pc, #100]	; (8000a5c <MX_DMA2D_Init+0x6c>)
 80009f6:	4a1a      	ldr	r2, [pc, #104]	; (8000a60 <MX_DMA2D_Init+0x70>)
 80009f8:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 80009fa:	4b18      	ldr	r3, [pc, #96]	; (8000a5c <MX_DMA2D_Init+0x6c>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_RGB565;
 8000a00:	4b16      	ldr	r3, [pc, #88]	; (8000a5c <MX_DMA2D_Init+0x6c>)
 8000a02:	2202      	movs	r2, #2
 8000a04:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 8000a06:	4b15      	ldr	r3, [pc, #84]	; (8000a5c <MX_DMA2D_Init+0x6c>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8000a0c:	4b13      	ldr	r3, [pc, #76]	; (8000a5c <MX_DMA2D_Init+0x6c>)
 8000a0e:	2200      	movs	r2, #0
 8000a10:	645a      	str	r2, [r3, #68]	; 0x44
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_RGB565;
 8000a12:	4b12      	ldr	r3, [pc, #72]	; (8000a5c <MX_DMA2D_Init+0x6c>)
 8000a14:	2202      	movs	r2, #2
 8000a16:	649a      	str	r2, [r3, #72]	; 0x48
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8000a18:	4b10      	ldr	r3, [pc, #64]	; (8000a5c <MX_DMA2D_Init+0x6c>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma2d.LayerCfg[1].InputAlpha = 0;
 8000a1e:	4b0f      	ldr	r3, [pc, #60]	; (8000a5c <MX_DMA2D_Init+0x6c>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	651a      	str	r2, [r3, #80]	; 0x50
  hdma2d.LayerCfg[1].AlphaInverted = DMA2D_REGULAR_ALPHA;
 8000a24:	4b0d      	ldr	r3, [pc, #52]	; (8000a5c <MX_DMA2D_Init+0x6c>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	655a      	str	r2, [r3, #84]	; 0x54
  hdma2d.LayerCfg[1].RedBlueSwap = DMA2D_RB_REGULAR;
 8000a2a:	4b0c      	ldr	r3, [pc, #48]	; (8000a5c <MX_DMA2D_Init+0x6c>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	659a      	str	r2, [r3, #88]	; 0x58
  hdma2d.LayerCfg[1].ChromaSubSampling = DMA2D_NO_CSS;
 8000a30:	4b0a      	ldr	r3, [pc, #40]	; (8000a5c <MX_DMA2D_Init+0x6c>)
 8000a32:	2200      	movs	r2, #0
 8000a34:	65da      	str	r2, [r3, #92]	; 0x5c
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8000a36:	4809      	ldr	r0, [pc, #36]	; (8000a5c <MX_DMA2D_Init+0x6c>)
 8000a38:	f006 fb60 	bl	80070fc <HAL_DMA2D_Init>
 8000a3c:	4603      	mov	r3, r0
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d001      	beq.n	8000a46 <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 8000a42:	f002 fc73 	bl	800332c <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8000a46:	2101      	movs	r1, #1
 8000a48:	4804      	ldr	r0, [pc, #16]	; (8000a5c <MX_DMA2D_Init+0x6c>)
 8000a4a:	f006 fbbb 	bl	80071c4 <HAL_DMA2D_ConfigLayer>
 8000a4e:	4603      	mov	r3, r0
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d001      	beq.n	8000a58 <MX_DMA2D_Init+0x68>
  {
    Error_Handler();
 8000a54:	f002 fc6a 	bl	800332c <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 8000a58:	bf00      	nop
 8000a5a:	bd80      	pop	{r7, pc}
 8000a5c:	2000041c 	.word	0x2000041c
 8000a60:	52001000 	.word	0x52001000

08000a64 <HAL_DMA2D_MspInit>:

void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* dma2dHandle)
{
 8000a64:	b480      	push	{r7}
 8000a66:	b085      	sub	sp, #20
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	6078      	str	r0, [r7, #4]

  if(dma2dHandle->Instance==DMA2D)
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	4a0b      	ldr	r2, [pc, #44]	; (8000aa0 <HAL_DMA2D_MspInit+0x3c>)
 8000a72:	4293      	cmp	r3, r2
 8000a74:	d10e      	bne.n	8000a94 <HAL_DMA2D_MspInit+0x30>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* DMA2D clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8000a76:	4b0b      	ldr	r3, [pc, #44]	; (8000aa4 <HAL_DMA2D_MspInit+0x40>)
 8000a78:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8000a7c:	4a09      	ldr	r2, [pc, #36]	; (8000aa4 <HAL_DMA2D_MspInit+0x40>)
 8000a7e:	f043 0310 	orr.w	r3, r3, #16
 8000a82:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 8000a86:	4b07      	ldr	r3, [pc, #28]	; (8000aa4 <HAL_DMA2D_MspInit+0x40>)
 8000a88:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8000a8c:	f003 0310 	and.w	r3, r3, #16
 8000a90:	60fb      	str	r3, [r7, #12]
 8000a92:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }
}
 8000a94:	bf00      	nop
 8000a96:	3714      	adds	r7, #20
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a9e:	4770      	bx	lr
 8000aa0:	52001000 	.word	0x52001000
 8000aa4:	58024400 	.word	0x58024400

08000aa8 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	af00      	add	r7, sp, #0
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of InfusionQ */
  InfusionQHandle = osMessageQueueNew (16, sizeof(Infusion_paramT), &InfusionQ_attributes);
 8000aac:	4a38      	ldr	r2, [pc, #224]	; (8000b90 <MX_FREERTOS_Init+0xe8>)
 8000aae:	211c      	movs	r1, #28
 8000ab0:	2010      	movs	r0, #16
 8000ab2:	f00e f8e1 	bl	800ec78 <osMessageQueueNew>
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	4a36      	ldr	r2, [pc, #216]	; (8000b94 <MX_FREERTOS_Init+0xec>)
 8000aba:	6013      	str	r3, [r2, #0]

  /* creation of VolumeQ */
  VolumeQHandle = osMessageQueueNew (8, sizeof(float), &VolumeQ_attributes);
 8000abc:	4a36      	ldr	r2, [pc, #216]	; (8000b98 <MX_FREERTOS_Init+0xf0>)
 8000abe:	2104      	movs	r1, #4
 8000ac0:	2008      	movs	r0, #8
 8000ac2:	f00e f8d9 	bl	800ec78 <osMessageQueueNew>
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	4a34      	ldr	r2, [pc, #208]	; (8000b9c <MX_FREERTOS_Init+0xf4>)
 8000aca:	6013      	str	r3, [r2, #0]

  /* creation of FlowRateQ */
  FlowRateQHandle = osMessageQueueNew (8, sizeof(float), &FlowRateQ_attributes);
 8000acc:	4a34      	ldr	r2, [pc, #208]	; (8000ba0 <MX_FREERTOS_Init+0xf8>)
 8000ace:	2104      	movs	r1, #4
 8000ad0:	2008      	movs	r0, #8
 8000ad2:	f00e f8d1 	bl	800ec78 <osMessageQueueNew>
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	4a32      	ldr	r2, [pc, #200]	; (8000ba4 <MX_FREERTOS_Init+0xfc>)
 8000ada:	6013      	str	r3, [r2, #0]

  /* creation of TimeQ */
  TimeQHandle = osMessageQueueNew (8, sizeof(float), &TimeQ_attributes);
 8000adc:	4a32      	ldr	r2, [pc, #200]	; (8000ba8 <MX_FREERTOS_Init+0x100>)
 8000ade:	2104      	movs	r1, #4
 8000ae0:	2008      	movs	r0, #8
 8000ae2:	f00e f8c9 	bl	800ec78 <osMessageQueueNew>
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	4a30      	ldr	r2, [pc, #192]	; (8000bac <MX_FREERTOS_Init+0x104>)
 8000aea:	6013      	str	r3, [r2, #0]

  /* creation of LastStepQ */
  LastStepQHandle = osMessageQueueNew (2, sizeof(uint16_t), &LastStepQ_attributes);
 8000aec:	4a30      	ldr	r2, [pc, #192]	; (8000bb0 <MX_FREERTOS_Init+0x108>)
 8000aee:	2102      	movs	r1, #2
 8000af0:	2002      	movs	r0, #2
 8000af2:	f00e f8c1 	bl	800ec78 <osMessageQueueNew>
 8000af6:	4603      	mov	r3, r0
 8000af8:	4a2e      	ldr	r2, [pc, #184]	; (8000bb4 <MX_FREERTOS_Init+0x10c>)
 8000afa:	6013      	str	r3, [r2, #0]

  /* creation of RadiusQ */
  RadiusQHandle = osMessageQueueNew (2, sizeof(uint8_t), &RadiusQ_attributes);
 8000afc:	4a2e      	ldr	r2, [pc, #184]	; (8000bb8 <MX_FREERTOS_Init+0x110>)
 8000afe:	2101      	movs	r1, #1
 8000b00:	2002      	movs	r0, #2
 8000b02:	f00e f8b9 	bl	800ec78 <osMessageQueueNew>
 8000b06:	4603      	mov	r3, r0
 8000b08:	4a2c      	ldr	r2, [pc, #176]	; (8000bbc <MX_FREERTOS_Init+0x114>)
 8000b0a:	6013      	str	r3, [r2, #0]

  /* creation of VolumeLeftQ */
  VolumeLeftQHandle = osMessageQueueNew (8, sizeof(float), &VolumeLeftQ_attributes);
 8000b0c:	4a2c      	ldr	r2, [pc, #176]	; (8000bc0 <MX_FREERTOS_Init+0x118>)
 8000b0e:	2104      	movs	r1, #4
 8000b10:	2008      	movs	r0, #8
 8000b12:	f00e f8b1 	bl	800ec78 <osMessageQueueNew>
 8000b16:	4603      	mov	r3, r0
 8000b18:	4a2a      	ldr	r2, [pc, #168]	; (8000bc4 <MX_FREERTOS_Init+0x11c>)
 8000b1a:	6013      	str	r3, [r2, #0]

  /* creation of ModeQ */
  ModeQHandle = osMessageQueueNew (8, sizeof(uint8_t), &ModeQ_attributes);
 8000b1c:	4a2a      	ldr	r2, [pc, #168]	; (8000bc8 <MX_FREERTOS_Init+0x120>)
 8000b1e:	2101      	movs	r1, #1
 8000b20:	2008      	movs	r0, #8
 8000b22:	f00e f8a9 	bl	800ec78 <osMessageQueueNew>
 8000b26:	4603      	mov	r3, r0
 8000b28:	4a28      	ldr	r2, [pc, #160]	; (8000bcc <MX_FREERTOS_Init+0x124>)
 8000b2a:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of battery_manage */
  battery_manageHandle = osThreadNew(StartBatteryManage, NULL, &battery_manage_attributes);
 8000b2c:	4a28      	ldr	r2, [pc, #160]	; (8000bd0 <MX_FREERTOS_Init+0x128>)
 8000b2e:	2100      	movs	r1, #0
 8000b30:	4828      	ldr	r0, [pc, #160]	; (8000bd4 <MX_FREERTOS_Init+0x12c>)
 8000b32:	f00d fed5 	bl	800e8e0 <osThreadNew>
 8000b36:	4603      	mov	r3, r0
 8000b38:	4a27      	ldr	r2, [pc, #156]	; (8000bd8 <MX_FREERTOS_Init+0x130>)
 8000b3a:	6013      	str	r3, [r2, #0]

  /* creation of Stepper */
  StepperHandle = osThreadNew(Stepper_motor, NULL, &Stepper_attributes);
 8000b3c:	4a27      	ldr	r2, [pc, #156]	; (8000bdc <MX_FREERTOS_Init+0x134>)
 8000b3e:	2100      	movs	r1, #0
 8000b40:	4827      	ldr	r0, [pc, #156]	; (8000be0 <MX_FREERTOS_Init+0x138>)
 8000b42:	f00d fecd 	bl	800e8e0 <osThreadNew>
 8000b46:	4603      	mov	r3, r0
 8000b48:	4a26      	ldr	r2, [pc, #152]	; (8000be4 <MX_FREERTOS_Init+0x13c>)
 8000b4a:	6013      	str	r3, [r2, #0]

  /* creation of Connectivity */
  ConnectivityHandle = osThreadNew(Cloud_Connectivity, NULL, &Connectivity_attributes);
 8000b4c:	4a26      	ldr	r2, [pc, #152]	; (8000be8 <MX_FREERTOS_Init+0x140>)
 8000b4e:	2100      	movs	r1, #0
 8000b50:	4826      	ldr	r0, [pc, #152]	; (8000bec <MX_FREERTOS_Init+0x144>)
 8000b52:	f00d fec5 	bl	800e8e0 <osThreadNew>
 8000b56:	4603      	mov	r3, r0
 8000b58:	4a25      	ldr	r2, [pc, #148]	; (8000bf0 <MX_FREERTOS_Init+0x148>)
 8000b5a:	6013      	str	r3, [r2, #0]

  /* creation of Sensors */
  SensorsHandle = osThreadNew(Sensors_measurements, NULL, &Sensors_attributes);
 8000b5c:	4a25      	ldr	r2, [pc, #148]	; (8000bf4 <MX_FREERTOS_Init+0x14c>)
 8000b5e:	2100      	movs	r1, #0
 8000b60:	4825      	ldr	r0, [pc, #148]	; (8000bf8 <MX_FREERTOS_Init+0x150>)
 8000b62:	f00d febd 	bl	800e8e0 <osThreadNew>
 8000b66:	4603      	mov	r3, r0
 8000b68:	4a24      	ldr	r2, [pc, #144]	; (8000bfc <MX_FREERTOS_Init+0x154>)
 8000b6a:	6013      	str	r3, [r2, #0]

  /* creation of IHM */
  IHMHandle = osThreadNew(Interface, NULL, &IHM_attributes);
 8000b6c:	4a24      	ldr	r2, [pc, #144]	; (8000c00 <MX_FREERTOS_Init+0x158>)
 8000b6e:	2100      	movs	r1, #0
 8000b70:	4824      	ldr	r0, [pc, #144]	; (8000c04 <MX_FREERTOS_Init+0x15c>)
 8000b72:	f00d feb5 	bl	800e8e0 <osThreadNew>
 8000b76:	4603      	mov	r3, r0
 8000b78:	4a23      	ldr	r2, [pc, #140]	; (8000c08 <MX_FREERTOS_Init+0x160>)
 8000b7a:	6013      	str	r3, [r2, #0]

  /* creation of DataStorage */
  DataStorageHandle = osThreadNew(StartDataStorage, NULL, &DataStorage_attributes);
 8000b7c:	4a23      	ldr	r2, [pc, #140]	; (8000c0c <MX_FREERTOS_Init+0x164>)
 8000b7e:	2100      	movs	r1, #0
 8000b80:	4823      	ldr	r0, [pc, #140]	; (8000c10 <MX_FREERTOS_Init+0x168>)
 8000b82:	f00d fead 	bl	800e8e0 <osThreadNew>
 8000b86:	4603      	mov	r3, r0
 8000b88:	4a22      	ldr	r2, [pc, #136]	; (8000c14 <MX_FREERTOS_Init+0x16c>)
 8000b8a:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8000b8c:	bf00      	nop
 8000b8e:	bd80      	pop	{r7, pc}
 8000b90:	0801eca8 	.word	0x0801eca8
 8000b94:	2000049c 	.word	0x2000049c
 8000b98:	0801ecc0 	.word	0x0801ecc0
 8000b9c:	200004a0 	.word	0x200004a0
 8000ba0:	0801ecd8 	.word	0x0801ecd8
 8000ba4:	200004a4 	.word	0x200004a4
 8000ba8:	0801ecf0 	.word	0x0801ecf0
 8000bac:	200004a8 	.word	0x200004a8
 8000bb0:	0801ed08 	.word	0x0801ed08
 8000bb4:	200004ac 	.word	0x200004ac
 8000bb8:	0801ed20 	.word	0x0801ed20
 8000bbc:	200004b0 	.word	0x200004b0
 8000bc0:	0801ed38 	.word	0x0801ed38
 8000bc4:	200004b4 	.word	0x200004b4
 8000bc8:	0801ed50 	.word	0x0801ed50
 8000bcc:	200004b8 	.word	0x200004b8
 8000bd0:	0801ebd0 	.word	0x0801ebd0
 8000bd4:	08000c19 	.word	0x08000c19
 8000bd8:	20000484 	.word	0x20000484
 8000bdc:	0801ebf4 	.word	0x0801ebf4
 8000be0:	08000c29 	.word	0x08000c29
 8000be4:	20000488 	.word	0x20000488
 8000be8:	0801ec18 	.word	0x0801ec18
 8000bec:	08000d09 	.word	0x08000d09
 8000bf0:	2000048c 	.word	0x2000048c
 8000bf4:	0801ec3c 	.word	0x0801ec3c
 8000bf8:	08000ee1 	.word	0x08000ee1
 8000bfc:	20000490 	.word	0x20000490
 8000c00:	0801ec60 	.word	0x0801ec60
 8000c04:	08001015 	.word	0x08001015
 8000c08:	20000494 	.word	0x20000494
 8000c0c:	0801ec84 	.word	0x0801ec84
 8000c10:	08001091 	.word	0x08001091
 8000c14:	20000498 	.word	0x20000498

08000c18 <StartBatteryManage>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartBatteryManage */
void StartBatteryManage(void *argument)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b082      	sub	sp, #8
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartBatteryManage */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000c20:	2001      	movs	r0, #1
 8000c22:	f00d feef 	bl	800ea04 <osDelay>
 8000c26:	e7fb      	b.n	8000c20 <StartBatteryManage+0x8>

08000c28 <Stepper_motor>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Stepper_motor */
void Stepper_motor(void *argument)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b088      	sub	sp, #32
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Stepper_motor */

	// drv8825 structure initialization
	//drv8825_init(&drv, Dir_G_GPIO_Port, Dir_G_Pin,En_G_GPIO_Port, En_G_Pin, &htim2, TIM_CHANNEL_1);
	float Flowrate , radius=1;
 8000c30:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8000c34:	61fb      	str	r3, [r7, #28]
	float volume_to_inject ;
	int timeneeded=0;
 8000c36:	2300      	movs	r3, #0
 8000c38:	61bb      	str	r3, [r7, #24]
	uint8_t mode=0;
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	73fb      	strb	r3, [r7, #15]
	uint16_t laststep;

  /* Infinite loop */
  for(;;)
  {
	if(osMessageQueueGet(FlowRateQHandle,&Flowrate , 10U, 100)==osOK && osMessageQueueGet(VolumeQHandle,&volume_to_inject , 10U, 100)==osOK ){
 8000c3e:	4b2d      	ldr	r3, [pc, #180]	; (8000cf4 <Stepper_motor+0xcc>)
 8000c40:	6818      	ldr	r0, [r3, #0]
 8000c42:	f107 0114 	add.w	r1, r7, #20
 8000c46:	2364      	movs	r3, #100	; 0x64
 8000c48:	220a      	movs	r2, #10
 8000c4a:	f00e f8e9 	bl	800ee20 <osMessageQueueGet>
 8000c4e:	4603      	mov	r3, r0
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d13b      	bne.n	8000ccc <Stepper_motor+0xa4>
 8000c54:	4b28      	ldr	r3, [pc, #160]	; (8000cf8 <Stepper_motor+0xd0>)
 8000c56:	6818      	ldr	r0, [r3, #0]
 8000c58:	f107 0110 	add.w	r1, r7, #16
 8000c5c:	2364      	movs	r3, #100	; 0x64
 8000c5e:	220a      	movs	r2, #10
 8000c60:	f00e f8de 	bl	800ee20 <osMessageQueueGet>
 8000c64:	4603      	mov	r3, r0
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d130      	bne.n	8000ccc <Stepper_motor+0xa4>
		SyringeMove(Flowrate,radius);
 8000c6a:	ed97 7a05 	vldr	s14, [r7, #20]
 8000c6e:	edd7 7a07 	vldr	s15, [r7, #28]
 8000c72:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000c76:	edc7 7a00 	vstr	s15, [r7]
 8000c7a:	783b      	ldrb	r3, [r7, #0]
 8000c7c:	b2db      	uxtb	r3, r3
 8000c7e:	4618      	mov	r0, r3
 8000c80:	eeb0 0a47 	vmov.f32	s0, s14
 8000c84:	f002 fa66 	bl	8003154 <SyringeMove>
		//timeneeded= Time_Needed(Flowrate, volume_to_inject);
		timeneeded = volume_to_inject/(Flowrate/3600);
 8000c88:	edd7 6a04 	vldr	s13, [r7, #16]
 8000c8c:	edd7 7a05 	vldr	s15, [r7, #20]
 8000c90:	ed9f 6a1a 	vldr	s12, [pc, #104]	; 8000cfc <Stepper_motor+0xd4>
 8000c94:	ee87 7a86 	vdiv.f32	s14, s15, s12
 8000c98:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000c9c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000ca0:	ee17 3a90 	vmov	r3, s15
 8000ca4:	61bb      	str	r3, [r7, #24]
		laststep = timeneeded*L6474_GetCurrentSpeed(0);
 8000ca6:	2000      	movs	r0, #0
 8000ca8:	f000 fe8e 	bl	80019c8 <L6474_GetCurrentSpeed>
 8000cac:	4603      	mov	r3, r0
 8000cae:	461a      	mov	r2, r3
 8000cb0:	69bb      	ldr	r3, [r7, #24]
 8000cb2:	b29b      	uxth	r3, r3
 8000cb4:	fb12 f303 	smulbb	r3, r2, r3
 8000cb8:	b29b      	uxth	r3, r3
 8000cba:	81bb      	strh	r3, [r7, #12]
		osMessageQueuePut(LastStepQHandle, &laststep, 1, 100);
 8000cbc:	4b10      	ldr	r3, [pc, #64]	; (8000d00 <Stepper_motor+0xd8>)
 8000cbe:	6818      	ldr	r0, [r3, #0]
 8000cc0:	f107 010c 	add.w	r1, r7, #12
 8000cc4:	2364      	movs	r3, #100	; 0x64
 8000cc6:	2201      	movs	r2, #1
 8000cc8:	f00e f84a 	bl	800ed60 <osMessageQueuePut>
	}
	// ***** 0 => StopMode , 8=> PauseMode *******
	if(osMessageQueueGet(ModeQHandle, &mode, 10U, 10U)==osOK && (mode==0 || mode == 8)){
 8000ccc:	4b0d      	ldr	r3, [pc, #52]	; (8000d04 <Stepper_motor+0xdc>)
 8000cce:	6818      	ldr	r0, [r3, #0]
 8000cd0:	f107 010f 	add.w	r1, r7, #15
 8000cd4:	230a      	movs	r3, #10
 8000cd6:	220a      	movs	r2, #10
 8000cd8:	f00e f8a2 	bl	800ee20 <osMessageQueueGet>
 8000cdc:	4603      	mov	r3, r0
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d1ad      	bne.n	8000c3e <Stepper_motor+0x16>
 8000ce2:	7bfb      	ldrb	r3, [r7, #15]
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d002      	beq.n	8000cee <Stepper_motor+0xc6>
 8000ce8:	7bfb      	ldrb	r3, [r7, #15]
 8000cea:	2b08      	cmp	r3, #8
 8000cec:	d1a7      	bne.n	8000c3e <Stepper_motor+0x16>
		SyringeStop();
 8000cee:	f002 fa71 	bl	80031d4 <SyringeStop>
	if(osMessageQueueGet(FlowRateQHandle,&Flowrate , 10U, 100)==osOK && osMessageQueueGet(VolumeQHandle,&volume_to_inject , 10U, 100)==osOK ){
 8000cf2:	e7a4      	b.n	8000c3e <Stepper_motor+0x16>
 8000cf4:	200004a4 	.word	0x200004a4
 8000cf8:	200004a0 	.word	0x200004a0
 8000cfc:	45610000 	.word	0x45610000
 8000d00:	200004ac 	.word	0x200004ac
 8000d04:	200004b8 	.word	0x200004b8

08000d08 <Cloud_Connectivity>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Cloud_Connectivity */
void Cloud_Connectivity(void *argument)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b0ae      	sub	sp, #184	; 0xb8
 8000d0c:	af02      	add	r7, sp, #8
 8000d0e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Cloud_Connectivity */
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, RESET); // UART clock
 8000d10:	2200      	movs	r2, #0
 8000d12:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000d16:	4866      	ldr	r0, [pc, #408]	; (8000eb0 <Cloud_Connectivity+0x1a8>)
 8000d18:	f006 fcb2 	bl	8007680 <HAL_GPIO_WritePin>
	float Flowrate=0 , Timeleft=0, Volumeleft=0;
 8000d1c:	f04f 0300 	mov.w	r3, #0
 8000d20:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8000d24:	f04f 0300 	mov.w	r3, #0
 8000d28:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8000d2c:	f04f 0300 	mov.w	r3, #0
 8000d30:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	char flowbuff[10], timebuff[10] , volumebuff[10];

	/********** UNIQUE ID ***********/
	uint32_t (*unique_id_1) = (uint32_t*)(0x1FF1E800); // BASE address (reference manual stm32h743)
 8000d34:	4b5f      	ldr	r3, [pc, #380]	; (8000eb4 <Cloud_Connectivity+0x1ac>)
 8000d36:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
	uint32_t (*unique_id_2) = (uint32_t*)(0x1FF1E804); // BASE address + 0x04 offset
 8000d3a:	4b5f      	ldr	r3, [pc, #380]	; (8000eb8 <Cloud_Connectivity+0x1b0>)
 8000d3c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
	uint32_t (*unique_id_3) = (uint32_t*)(0x1FF1E808); // BASE address + 0x08 offset
 8000d40:	4b5e      	ldr	r3, [pc, #376]	; (8000ebc <Cloud_Connectivity+0x1b4>)
 8000d42:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
	char Id[85];
	int n =sprintf(Id,"%lu%lu%lu",*unique_id_1,*unique_id_2,*unique_id_3);
 8000d46:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8000d4a:	681a      	ldr	r2, [r3, #0]
 8000d4c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8000d50:	6819      	ldr	r1, [r3, #0]
 8000d52:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	f107 000c 	add.w	r0, r7, #12
 8000d5c:	9300      	str	r3, [sp, #0]
 8000d5e:	460b      	mov	r3, r1
 8000d60:	4957      	ldr	r1, [pc, #348]	; (8000ec0 <Cloud_Connectivity+0x1b8>)
 8000d62:	f01b fd1d 	bl	801c7a0 <siprintf>
 8000d66:	f8c7 00a0 	str.w	r0, [r7, #160]	; 0xa0
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, SET);
 8000d6a:	2201      	movs	r2, #1
 8000d6c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000d70:	484f      	ldr	r0, [pc, #316]	; (8000eb0 <Cloud_Connectivity+0x1a8>)
 8000d72:	f006 fc85 	bl	8007680 <HAL_GPIO_WritePin>
	HAL_UART_Transmit(&huart3,Id ,n , 100);
 8000d76:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8000d7a:	b29a      	uxth	r2, r3
 8000d7c:	f107 010c 	add.w	r1, r7, #12
 8000d80:	2364      	movs	r3, #100	; 0x64
 8000d82:	4850      	ldr	r0, [pc, #320]	; (8000ec4 <Cloud_Connectivity+0x1bc>)
 8000d84:	f00c fc68 	bl	800d658 <HAL_UART_Transmit>
	osDelay(10);
 8000d88:	200a      	movs	r0, #10
 8000d8a:	f00d fe3b 	bl	800ea04 <osDelay>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, RESET);
 8000d8e:	2200      	movs	r2, #0
 8000d90:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000d94:	4846      	ldr	r0, [pc, #280]	; (8000eb0 <Cloud_Connectivity+0x1a8>)
 8000d96:	f006 fc73 	bl	8007680 <HAL_GPIO_WritePin>
  /* Infinite loop */
	// ***** f==> flowrate t==> timeleft v==>volumeleft *****
  for(;;)
  {
    if(osMessageQueueGet(FlowRateQHandle,&Flowrate , 1U, 100U)==osOK){
 8000d9a:	4b4b      	ldr	r3, [pc, #300]	; (8000ec8 <Cloud_Connectivity+0x1c0>)
 8000d9c:	6818      	ldr	r0, [r3, #0]
 8000d9e:	f107 0190 	add.w	r1, r7, #144	; 0x90
 8000da2:	2364      	movs	r3, #100	; 0x64
 8000da4:	2201      	movs	r2, #1
 8000da6:	f00e f83b 	bl	800ee20 <osMessageQueueGet>
 8000daa:	4603      	mov	r3, r0
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d121      	bne.n	8000df4 <Cloud_Connectivity+0xec>
    	int nflow =sprintf((uint8_t *)flowbuff,"f%.3f",Flowrate);
 8000db0:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 8000db4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000db8:	f107 007c 	add.w	r0, r7, #124	; 0x7c
 8000dbc:	ec53 2b17 	vmov	r2, r3, d7
 8000dc0:	4942      	ldr	r1, [pc, #264]	; (8000ecc <Cloud_Connectivity+0x1c4>)
 8000dc2:	f01b fced 	bl	801c7a0 <siprintf>
 8000dc6:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c
    	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, SET);
 8000dca:	2201      	movs	r2, #1
 8000dcc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000dd0:	4837      	ldr	r0, [pc, #220]	; (8000eb0 <Cloud_Connectivity+0x1a8>)
 8000dd2:	f006 fc55 	bl	8007680 <HAL_GPIO_WritePin>
    	HAL_UART_Transmit(&huart3, (uint8_t *)flowbuff, nflow, 10);
 8000dd6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8000dda:	b29a      	uxth	r2, r3
 8000ddc:	f107 017c 	add.w	r1, r7, #124	; 0x7c
 8000de0:	230a      	movs	r3, #10
 8000de2:	4838      	ldr	r0, [pc, #224]	; (8000ec4 <Cloud_Connectivity+0x1bc>)
 8000de4:	f00c fc38 	bl	800d658 <HAL_UART_Transmit>
    	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, RESET);
 8000de8:	2200      	movs	r2, #0
 8000dea:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000dee:	4830      	ldr	r0, [pc, #192]	; (8000eb0 <Cloud_Connectivity+0x1a8>)
 8000df0:	f006 fc46 	bl	8007680 <HAL_GPIO_WritePin>
    }
    if(osMessageQueueGet(TimeQHandle,&Timeleft , 1U, 100U)==osOK){
 8000df4:	4b36      	ldr	r3, [pc, #216]	; (8000ed0 <Cloud_Connectivity+0x1c8>)
 8000df6:	6818      	ldr	r0, [r3, #0]
 8000df8:	f107 018c 	add.w	r1, r7, #140	; 0x8c
 8000dfc:	2364      	movs	r3, #100	; 0x64
 8000dfe:	2201      	movs	r2, #1
 8000e00:	f00e f80e 	bl	800ee20 <osMessageQueueGet>
 8000e04:	4603      	mov	r3, r0
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d121      	bne.n	8000e4e <Cloud_Connectivity+0x146>
        	int ntime =sprintf((uint8_t *)timebuff,"t%f",Timeleft);
 8000e0a:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8000e0e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000e12:	f107 0070 	add.w	r0, r7, #112	; 0x70
 8000e16:	ec53 2b17 	vmov	r2, r3, d7
 8000e1a:	492e      	ldr	r1, [pc, #184]	; (8000ed4 <Cloud_Connectivity+0x1cc>)
 8000e1c:	f01b fcc0 	bl	801c7a0 <siprintf>
 8000e20:	f8c7 0098 	str.w	r0, [r7, #152]	; 0x98
        	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, SET);
 8000e24:	2201      	movs	r2, #1
 8000e26:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000e2a:	4821      	ldr	r0, [pc, #132]	; (8000eb0 <Cloud_Connectivity+0x1a8>)
 8000e2c:	f006 fc28 	bl	8007680 <HAL_GPIO_WritePin>
        	HAL_UART_Transmit(&huart3, (uint8_t *)timebuff, ntime, 10);
 8000e30:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8000e34:	b29a      	uxth	r2, r3
 8000e36:	f107 0170 	add.w	r1, r7, #112	; 0x70
 8000e3a:	230a      	movs	r3, #10
 8000e3c:	4821      	ldr	r0, [pc, #132]	; (8000ec4 <Cloud_Connectivity+0x1bc>)
 8000e3e:	f00c fc0b 	bl	800d658 <HAL_UART_Transmit>
        	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, RESET);
 8000e42:	2200      	movs	r2, #0
 8000e44:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000e48:	4819      	ldr	r0, [pc, #100]	; (8000eb0 <Cloud_Connectivity+0x1a8>)
 8000e4a:	f006 fc19 	bl	8007680 <HAL_GPIO_WritePin>
        }
    if(osMessageQueueGet(VolumeLeftQHandle,&Volumeleft , 1, 100U)==osOK){
 8000e4e:	4b22      	ldr	r3, [pc, #136]	; (8000ed8 <Cloud_Connectivity+0x1d0>)
 8000e50:	6818      	ldr	r0, [r3, #0]
 8000e52:	f107 0188 	add.w	r1, r7, #136	; 0x88
 8000e56:	2364      	movs	r3, #100	; 0x64
 8000e58:	2201      	movs	r2, #1
 8000e5a:	f00d ffe1 	bl	800ee20 <osMessageQueueGet>
 8000e5e:	4603      	mov	r3, r0
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d121      	bne.n	8000ea8 <Cloud_Connectivity+0x1a0>
            	int nvol =sprintf((uint8_t *)volumebuff,"v%.3f",Volumeleft);
 8000e64:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 8000e68:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000e6c:	f107 0064 	add.w	r0, r7, #100	; 0x64
 8000e70:	ec53 2b17 	vmov	r2, r3, d7
 8000e74:	4919      	ldr	r1, [pc, #100]	; (8000edc <Cloud_Connectivity+0x1d4>)
 8000e76:	f01b fc93 	bl	801c7a0 <siprintf>
 8000e7a:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
            	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, SET);
 8000e7e:	2201      	movs	r2, #1
 8000e80:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000e84:	480a      	ldr	r0, [pc, #40]	; (8000eb0 <Cloud_Connectivity+0x1a8>)
 8000e86:	f006 fbfb 	bl	8007680 <HAL_GPIO_WritePin>
            	HAL_UART_Transmit(&huart3, (uint8_t *)volumebuff, nvol, 10);
 8000e8a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8000e8e:	b29a      	uxth	r2, r3
 8000e90:	f107 0164 	add.w	r1, r7, #100	; 0x64
 8000e94:	230a      	movs	r3, #10
 8000e96:	480b      	ldr	r0, [pc, #44]	; (8000ec4 <Cloud_Connectivity+0x1bc>)
 8000e98:	f00c fbde 	bl	800d658 <HAL_UART_Transmit>
            	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, RESET);
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000ea2:	4803      	ldr	r0, [pc, #12]	; (8000eb0 <Cloud_Connectivity+0x1a8>)
 8000ea4:	f006 fbec 	bl	8007680 <HAL_GPIO_WritePin>
            }
    osDelay(100);
 8000ea8:	2064      	movs	r0, #100	; 0x64
 8000eaa:	f00d fdab 	bl	800ea04 <osDelay>
    if(osMessageQueueGet(FlowRateQHandle,&Flowrate , 1U, 100U)==osOK){
 8000eae:	e774      	b.n	8000d9a <Cloud_Connectivity+0x92>
 8000eb0:	58020800 	.word	0x58020800
 8000eb4:	1ff1e800 	.word	0x1ff1e800
 8000eb8:	1ff1e804 	.word	0x1ff1e804
 8000ebc:	1ff1e808 	.word	0x1ff1e808
 8000ec0:	0801e558 	.word	0x0801e558
 8000ec4:	200007c4 	.word	0x200007c4
 8000ec8:	200004a4 	.word	0x200004a4
 8000ecc:	0801e564 	.word	0x0801e564
 8000ed0:	200004a8 	.word	0x200004a8
 8000ed4:	0801e56c 	.word	0x0801e56c
 8000ed8:	200004b4 	.word	0x200004b4
 8000edc:	0801e570 	.word	0x0801e570

08000ee0 <Sensors_measurements>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Sensors_measurements */
void Sensors_measurements(void *argument)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b08a      	sub	sp, #40	; 0x28
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Sensors_measurements */
	float volumeleft=0 , timeleft=0 ;
 8000ee8:	f04f 0300 	mov.w	r3, #0
 8000eec:	61bb      	str	r3, [r7, #24]
 8000eee:	f04f 0300 	mov.w	r3, #0
 8000ef2:	617b      	str	r3, [r7, #20]
	uint16_t  laststep=0, traveled_steps=0 ;
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	827b      	strh	r3, [r7, #18]
 8000ef8:	2300      	movs	r3, #0
 8000efa:	84fb      	strh	r3, [r7, #38]	; 0x26
	float Flowrate=0,volume_to_inject=0 ;
 8000efc:	f04f 0300 	mov.w	r3, #0
 8000f00:	60fb      	str	r3, [r7, #12]
 8000f02:	f04f 0300 	mov.w	r3, #0
 8000f06:	60bb      	str	r3, [r7, #8]
	HAL_ADC_Start_IT(&hadc3);
 8000f08:	483b      	ldr	r0, [pc, #236]	; (8000ff8 <Sensors_measurements+0x118>)
 8000f0a:	f004 f8fd 	bl	8005108 <HAL_ADC_Start_IT>
  /* Infinite loop */
  for(;;)
  {
osStatus_t a = osMessageQueueGet(FlowRateQHandle,&Flowrate , 15U, osWaitForever);
 8000f0e:	4b3b      	ldr	r3, [pc, #236]	; (8000ffc <Sensors_measurements+0x11c>)
 8000f10:	6818      	ldr	r0, [r3, #0]
 8000f12:	f107 010c 	add.w	r1, r7, #12
 8000f16:	f04f 33ff 	mov.w	r3, #4294967295
 8000f1a:	220f      	movs	r2, #15
 8000f1c:	f00d ff80 	bl	800ee20 <osMessageQueueGet>
 8000f20:	6238      	str	r0, [r7, #32]
osStatus_t b =osMessageQueueGet(VolumeQHandle,&volume_to_inject , 10U, 100);
 8000f22:	4b37      	ldr	r3, [pc, #220]	; (8001000 <Sensors_measurements+0x120>)
 8000f24:	6818      	ldr	r0, [r3, #0]
 8000f26:	f107 0108 	add.w	r1, r7, #8
 8000f2a:	2364      	movs	r3, #100	; 0x64
 8000f2c:	220a      	movs	r2, #10
 8000f2e:	f00d ff77 	bl	800ee20 <osMessageQueueGet>
 8000f32:	61f8      	str	r0, [r7, #28]
	osMessageQueueGet(LastStepQHandle, &laststep, 1U, 100);
 8000f34:	4b33      	ldr	r3, [pc, #204]	; (8001004 <Sensors_measurements+0x124>)
 8000f36:	6818      	ldr	r0, [r3, #0]
 8000f38:	f107 0112 	add.w	r1, r7, #18
 8000f3c:	2364      	movs	r3, #100	; 0x64
 8000f3e:	2201      	movs	r2, #1
 8000f40:	f00d ff6e 	bl	800ee20 <osMessageQueueGet>
	if(Flowrate!=0 && volume_to_inject!=0 && laststep!=0){
 8000f44:	edd7 7a03 	vldr	s15, [r7, #12]
 8000f48:	eef5 7a40 	vcmp.f32	s15, #0.0
 8000f4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f50:	d04e      	beq.n	8000ff0 <Sensors_measurements+0x110>
 8000f52:	edd7 7a02 	vldr	s15, [r7, #8]
 8000f56:	eef5 7a40 	vcmp.f32	s15, #0.0
 8000f5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f5e:	d047      	beq.n	8000ff0 <Sensors_measurements+0x110>
 8000f60:	8a7b      	ldrh	r3, [r7, #18]
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d044      	beq.n	8000ff0 <Sensors_measurements+0x110>
		traveled_steps= position();
 8000f66:	f002 f961 	bl	800322c <position>
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	84fb      	strh	r3, [r7, #38]	; 0x26
		volumeleft=calculate_volume_left(traveled_steps,Flowrate,volume_to_inject); //mm^3
 8000f6e:	edd7 7a03 	vldr	s15, [r7, #12]
 8000f72:	ed97 7a02 	vldr	s14, [r7, #8]
 8000f76:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000f78:	eef0 0a47 	vmov.f32	s1, s14
 8000f7c:	eeb0 0a67 	vmov.f32	s0, s15
 8000f80:	4618      	mov	r0, r3
 8000f82:	f002 f993 	bl	80032ac <calculate_volume_left>
 8000f86:	eef0 7a40 	vmov.f32	s15, s0
 8000f8a:	edc7 7a06 	vstr	s15, [r7, #24]
		timeleft=volumeleft/Flowrate; // seconds
 8000f8e:	edd7 6a06 	vldr	s13, [r7, #24]
 8000f92:	ed97 7a03 	vldr	s14, [r7, #12]
 8000f96:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000f9a:	edc7 7a05 	vstr	s15, [r7, #20]
		osMessageQueuePut(VolumeLeftQHandle,  &volumeleft, 1, 100);
 8000f9e:	4b1a      	ldr	r3, [pc, #104]	; (8001008 <Sensors_measurements+0x128>)
 8000fa0:	6818      	ldr	r0, [r3, #0]
 8000fa2:	f107 0118 	add.w	r1, r7, #24
 8000fa6:	2364      	movs	r3, #100	; 0x64
 8000fa8:	2201      	movs	r2, #1
 8000faa:	f00d fed9 	bl	800ed60 <osMessageQueuePut>
		osMessageQueuePut(TimeQHandle,  &timeleft, 1, 100);
 8000fae:	4b17      	ldr	r3, [pc, #92]	; (800100c <Sensors_measurements+0x12c>)
 8000fb0:	6818      	ldr	r0, [r3, #0]
 8000fb2:	f107 0114 	add.w	r1, r7, #20
 8000fb6:	2364      	movs	r3, #100	; 0x64
 8000fb8:	2201      	movs	r2, #1
 8000fba:	f00d fed1 	bl	800ed60 <osMessageQueuePut>
		if(traveled_steps>=laststep || volumeleft<=0 || timeleft <=0)
 8000fbe:	8a7b      	ldrh	r3, [r7, #18]
 8000fc0:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8000fc2:	429a      	cmp	r2, r3
 8000fc4:	d20d      	bcs.n	8000fe2 <Sensors_measurements+0x102>
 8000fc6:	edd7 7a06 	vldr	s15, [r7, #24]
 8000fca:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000fce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000fd2:	d906      	bls.n	8000fe2 <Sensors_measurements+0x102>
 8000fd4:	edd7 7a05 	vldr	s15, [r7, #20]
 8000fd8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000fdc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000fe0:	d806      	bhi.n	8000ff0 <Sensors_measurements+0x110>
			osMessageQueuePut(ModeQHandle,0, 10U, 100U); // ***** 0 => StopMode , 8=> PauseMode ******
 8000fe2:	4b0b      	ldr	r3, [pc, #44]	; (8001010 <Sensors_measurements+0x130>)
 8000fe4:	6818      	ldr	r0, [r3, #0]
 8000fe6:	2364      	movs	r3, #100	; 0x64
 8000fe8:	220a      	movs	r2, #10
 8000fea:	2100      	movs	r1, #0
 8000fec:	f00d feb8 	bl	800ed60 <osMessageQueuePut>
	 }

	  osDelay(10);
 8000ff0:	200a      	movs	r0, #10
 8000ff2:	f00d fd07 	bl	800ea04 <osDelay>
  {
 8000ff6:	e78a      	b.n	8000f0e <Sensors_measurements+0x2e>
 8000ff8:	20000394 	.word	0x20000394
 8000ffc:	200004a4 	.word	0x200004a4
 8001000:	200004a0 	.word	0x200004a0
 8001004:	200004ac 	.word	0x200004ac
 8001008:	200004b4 	.word	0x200004b4
 800100c:	200004a8 	.word	0x200004a8
 8001010:	200004b8 	.word	0x200004b8

08001014 <Interface>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Interface */
void Interface(void *argument)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b08a      	sub	sp, #40	; 0x28
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]
  /* Infinite loop */
  for(;;)
  {
	  // ***** 0 => StopMode , 8=> PauseMode *******

	  if(osMessageQueueGet(InfusionQHandle,&msgPerfusionParameters,10U,100)==osOK && msgPerfusionParameters.Mode!=0
 800101c:	4b18      	ldr	r3, [pc, #96]	; (8001080 <Interface+0x6c>)
 800101e:	6818      	ldr	r0, [r3, #0]
 8001020:	f107 010c 	add.w	r1, r7, #12
 8001024:	2364      	movs	r3, #100	; 0x64
 8001026:	220a      	movs	r2, #10
 8001028:	f00d fefa 	bl	800ee20 <osMessageQueueGet>
 800102c:	4603      	mov	r3, r0
 800102e:	2b00      	cmp	r3, #0
 8001030:	d117      	bne.n	8001062 <Interface+0x4e>
 8001032:	7f3b      	ldrb	r3, [r7, #28]
 8001034:	2b00      	cmp	r3, #0
 8001036:	d014      	beq.n	8001062 <Interface+0x4e>
			  &&  msgPerfusionParameters.Mode!=8  ){
 8001038:	7f3b      	ldrb	r3, [r7, #28]
 800103a:	2b08      	cmp	r3, #8
 800103c:	d011      	beq.n	8001062 <Interface+0x4e>
		  osMessageQueuePut(FlowRateQHandle,&msgPerfusionParameters.Flowrate , 1U, 100U);
 800103e:	4b11      	ldr	r3, [pc, #68]	; (8001084 <Interface+0x70>)
 8001040:	6818      	ldr	r0, [r3, #0]
 8001042:	f107 010c 	add.w	r1, r7, #12
 8001046:	2364      	movs	r3, #100	; 0x64
 8001048:	2201      	movs	r2, #1
 800104a:	f00d fe89 	bl	800ed60 <osMessageQueuePut>
		  osMessageQueuePut(VolumeQHandle,&msgPerfusionParameters.InfousionVolume , 1U, 100U);
 800104e:	4b0e      	ldr	r3, [pc, #56]	; (8001088 <Interface+0x74>)
 8001050:	6818      	ldr	r0, [r3, #0]
 8001052:	f107 030c 	add.w	r3, r7, #12
 8001056:	1d19      	adds	r1, r3, #4
 8001058:	2364      	movs	r3, #100	; 0x64
 800105a:	2201      	movs	r2, #1
 800105c:	f00d fe80 	bl	800ed60 <osMessageQueuePut>
 8001060:	e009      	b.n	8001076 <Interface+0x62>
	  }else{
		  osMessageQueuePut(ModeQHandle,&msgPerfusionParameters.Mode , 10U, 100U);
 8001062:	4b0a      	ldr	r3, [pc, #40]	; (800108c <Interface+0x78>)
 8001064:	6818      	ldr	r0, [r3, #0]
 8001066:	f107 030c 	add.w	r3, r7, #12
 800106a:	f103 0110 	add.w	r1, r3, #16
 800106e:	2364      	movs	r3, #100	; 0x64
 8001070:	220a      	movs	r2, #10
 8001072:	f00d fe75 	bl	800ed60 <osMessageQueuePut>
	  }

	  osDelay(1000);
 8001076:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800107a:	f00d fcc3 	bl	800ea04 <osDelay>
	  if(osMessageQueueGet(InfusionQHandle,&msgPerfusionParameters,10U,100)==osOK && msgPerfusionParameters.Mode!=0
 800107e:	e7cd      	b.n	800101c <Interface+0x8>
 8001080:	2000049c 	.word	0x2000049c
 8001084:	200004a4 	.word	0x200004a4
 8001088:	200004a0 	.word	0x200004a0
 800108c:	200004b8 	.word	0x200004b8

08001090 <StartDataStorage>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartDataStorage */
void StartDataStorage(void *argument)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b08a      	sub	sp, #40	; 0x28
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDataStorage */
	Infusion_paramT msgPerfusionParameters;
	msgPerfusionParameters.Flowrate=3000; // 3000ml/h ==> 50ml/min
 8001098:	4b08      	ldr	r3, [pc, #32]	; (80010bc <StartDataStorage+0x2c>)
 800109a:	60fb      	str	r3, [r7, #12]
	msgPerfusionParameters.InfousionVolume=50;
 800109c:	4b08      	ldr	r3, [pc, #32]	; (80010c0 <StartDataStorage+0x30>)
 800109e:	613b      	str	r3, [r7, #16]
  /* Infinite loop */
  for(;;)
  {
	  osMessageQueuePut(InfusionQHandle,&msgPerfusionParameters , 1U, 100U);
 80010a0:	4b08      	ldr	r3, [pc, #32]	; (80010c4 <StartDataStorage+0x34>)
 80010a2:	6818      	ldr	r0, [r3, #0]
 80010a4:	f107 010c 	add.w	r1, r7, #12
 80010a8:	2364      	movs	r3, #100	; 0x64
 80010aa:	2201      	movs	r2, #1
 80010ac:	f00d fe58 	bl	800ed60 <osMessageQueuePut>
	  osDelay(1000);
 80010b0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80010b4:	f00d fca6 	bl	800ea04 <osDelay>
	  osMessageQueuePut(InfusionQHandle,&msgPerfusionParameters , 1U, 100U);
 80010b8:	e7f2      	b.n	80010a0 <StartDataStorage+0x10>
 80010ba:	bf00      	nop
 80010bc:	453b8000 	.word	0x453b8000
 80010c0:	42480000 	.word	0x42480000
 80010c4:	2000049c 	.word	0x2000049c

080010c8 <MX_GPIO_Init>:
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
     PA13 (JTMS/SWDIO)   ------> DEBUG_JTMS-SWDIO
     PA14 (JTCK/SWCLK)   ------> DEBUG_JTCK-SWCLK
*/
void MX_GPIO_Init(void)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b08e      	sub	sp, #56	; 0x38
 80010cc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010d2:	2200      	movs	r2, #0
 80010d4:	601a      	str	r2, [r3, #0]
 80010d6:	605a      	str	r2, [r3, #4]
 80010d8:	609a      	str	r2, [r3, #8]
 80010da:	60da      	str	r2, [r3, #12]
 80010dc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80010de:	4b76      	ldr	r3, [pc, #472]	; (80012b8 <MX_GPIO_Init+0x1f0>)
 80010e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010e4:	4a74      	ldr	r2, [pc, #464]	; (80012b8 <MX_GPIO_Init+0x1f0>)
 80010e6:	f043 0310 	orr.w	r3, r3, #16
 80010ea:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80010ee:	4b72      	ldr	r3, [pc, #456]	; (80012b8 <MX_GPIO_Init+0x1f0>)
 80010f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010f4:	f003 0310 	and.w	r3, r3, #16
 80010f8:	623b      	str	r3, [r7, #32]
 80010fa:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80010fc:	4b6e      	ldr	r3, [pc, #440]	; (80012b8 <MX_GPIO_Init+0x1f0>)
 80010fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001102:	4a6d      	ldr	r2, [pc, #436]	; (80012b8 <MX_GPIO_Init+0x1f0>)
 8001104:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001108:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800110c:	4b6a      	ldr	r3, [pc, #424]	; (80012b8 <MX_GPIO_Init+0x1f0>)
 800110e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001112:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001116:	61fb      	str	r3, [r7, #28]
 8001118:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800111a:	4b67      	ldr	r3, [pc, #412]	; (80012b8 <MX_GPIO_Init+0x1f0>)
 800111c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001120:	4a65      	ldr	r2, [pc, #404]	; (80012b8 <MX_GPIO_Init+0x1f0>)
 8001122:	f043 0304 	orr.w	r3, r3, #4
 8001126:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800112a:	4b63      	ldr	r3, [pc, #396]	; (80012b8 <MX_GPIO_Init+0x1f0>)
 800112c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001130:	f003 0304 	and.w	r3, r3, #4
 8001134:	61bb      	str	r3, [r7, #24]
 8001136:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001138:	4b5f      	ldr	r3, [pc, #380]	; (80012b8 <MX_GPIO_Init+0x1f0>)
 800113a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800113e:	4a5e      	ldr	r2, [pc, #376]	; (80012b8 <MX_GPIO_Init+0x1f0>)
 8001140:	f043 0320 	orr.w	r3, r3, #32
 8001144:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001148:	4b5b      	ldr	r3, [pc, #364]	; (80012b8 <MX_GPIO_Init+0x1f0>)
 800114a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800114e:	f003 0320 	and.w	r3, r3, #32
 8001152:	617b      	str	r3, [r7, #20]
 8001154:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001156:	4b58      	ldr	r3, [pc, #352]	; (80012b8 <MX_GPIO_Init+0x1f0>)
 8001158:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800115c:	4a56      	ldr	r2, [pc, #344]	; (80012b8 <MX_GPIO_Init+0x1f0>)
 800115e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001162:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001166:	4b54      	ldr	r3, [pc, #336]	; (80012b8 <MX_GPIO_Init+0x1f0>)
 8001168:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800116c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001170:	613b      	str	r3, [r7, #16]
 8001172:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001174:	4b50      	ldr	r3, [pc, #320]	; (80012b8 <MX_GPIO_Init+0x1f0>)
 8001176:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800117a:	4a4f      	ldr	r2, [pc, #316]	; (80012b8 <MX_GPIO_Init+0x1f0>)
 800117c:	f043 0301 	orr.w	r3, r3, #1
 8001180:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001184:	4b4c      	ldr	r3, [pc, #304]	; (80012b8 <MX_GPIO_Init+0x1f0>)
 8001186:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800118a:	f003 0301 	and.w	r3, r3, #1
 800118e:	60fb      	str	r3, [r7, #12]
 8001190:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001192:	4b49      	ldr	r3, [pc, #292]	; (80012b8 <MX_GPIO_Init+0x1f0>)
 8001194:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001198:	4a47      	ldr	r2, [pc, #284]	; (80012b8 <MX_GPIO_Init+0x1f0>)
 800119a:	f043 0302 	orr.w	r3, r3, #2
 800119e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80011a2:	4b45      	ldr	r3, [pc, #276]	; (80012b8 <MX_GPIO_Init+0x1f0>)
 80011a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011a8:	f003 0302 	and.w	r3, r3, #2
 80011ac:	60bb      	str	r3, [r7, #8]
 80011ae:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80011b0:	4b41      	ldr	r3, [pc, #260]	; (80012b8 <MX_GPIO_Init+0x1f0>)
 80011b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011b6:	4a40      	ldr	r2, [pc, #256]	; (80012b8 <MX_GPIO_Init+0x1f0>)
 80011b8:	f043 0308 	orr.w	r3, r3, #8
 80011bc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80011c0:	4b3d      	ldr	r3, [pc, #244]	; (80012b8 <MX_GPIO_Init+0x1f0>)
 80011c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011c6:	f003 0308 	and.w	r3, r3, #8
 80011ca:	607b      	str	r3, [r7, #4]
 80011cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80011ce:	4b3a      	ldr	r3, [pc, #232]	; (80012b8 <MX_GPIO_Init+0x1f0>)
 80011d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011d4:	4a38      	ldr	r2, [pc, #224]	; (80012b8 <MX_GPIO_Init+0x1f0>)
 80011d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80011da:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80011de:	4b36      	ldr	r3, [pc, #216]	; (80012b8 <MX_GPIO_Init+0x1f0>)
 80011e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80011e8:	603b      	str	r3, [r7, #0]
 80011ea:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, STBY_RST_Pin|GPIO_PIN_3, GPIO_PIN_RESET);
 80011ec:	2200      	movs	r2, #0
 80011ee:	f44f 7184 	mov.w	r1, #264	; 0x108
 80011f2:	4832      	ldr	r0, [pc, #200]	; (80012bc <MX_GPIO_Init+0x1f4>)
 80011f4:	f006 fa44 	bl	8007680 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(UART_Clock_GPIO_Port, UART_Clock_Pin, GPIO_PIN_RESET);
 80011f8:	2200      	movs	r2, #0
 80011fa:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80011fe:	4830      	ldr	r0, [pc, #192]	; (80012c0 <MX_GPIO_Init+0x1f8>)
 8001200:	f006 fa3e 	bl	8007680 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, CS_Pin|LED2_Pin, GPIO_PIN_RESET);
 8001204:	2200      	movs	r2, #0
 8001206:	f44f 5184 	mov.w	r1, #4224	; 0x1080
 800120a:	482e      	ldr	r0, [pc, #184]	; (80012c4 <MX_GPIO_Init+0x1fc>)
 800120c:	f006 fa38 	bl	8007680 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = STBY_RST_Pin;
 8001210:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001214:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001216:	2301      	movs	r3, #1
 8001218:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800121a:	2300      	movs	r3, #0
 800121c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800121e:	2300      	movs	r3, #0
 8001220:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(STBY_RST_GPIO_Port, &GPIO_InitStruct);
 8001222:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001226:	4619      	mov	r1, r3
 8001228:	4824      	ldr	r0, [pc, #144]	; (80012bc <MX_GPIO_Init+0x1f4>)
 800122a:	f006 f879 	bl	8007320 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = UART_Clock_Pin;
 800122e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001232:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001234:	2301      	movs	r3, #1
 8001236:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001238:	2300      	movs	r3, #0
 800123a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800123c:	2300      	movs	r3, #0
 800123e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(UART_Clock_GPIO_Port, &GPIO_InitStruct);
 8001240:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001244:	4619      	mov	r1, r3
 8001246:	481e      	ldr	r0, [pc, #120]	; (80012c0 <MX_GPIO_Init+0x1f8>)
 8001248:	f006 f86a 	bl	8007320 <HAL_GPIO_Init>

  /*Configure GPIO pin : PH4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 800124c:	2310      	movs	r3, #16
 800124e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001250:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001254:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001256:	2301      	movs	r3, #1
 8001258:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800125a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800125e:	4619      	mov	r1, r3
 8001260:	4819      	ldr	r0, [pc, #100]	; (80012c8 <MX_GPIO_Init+0x200>)
 8001262:	f006 f85d 	bl	8007320 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = CS_Pin|LED2_Pin;
 8001266:	f44f 5384 	mov.w	r3, #4224	; 0x1080
 800126a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800126c:	2301      	movs	r3, #1
 800126e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001270:	2300      	movs	r3, #0
 8001272:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001274:	2300      	movs	r3, #0
 8001276:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001278:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800127c:	4619      	mov	r1, r3
 800127e:	4811      	ldr	r0, [pc, #68]	; (80012c4 <MX_GPIO_Init+0x1fc>)
 8001280:	f006 f84e 	bl	8007320 <HAL_GPIO_Init>

  /*Configure GPIO pin : PI3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001284:	2308      	movs	r3, #8
 8001286:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001288:	2301      	movs	r3, #1
 800128a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800128c:	2300      	movs	r3, #0
 800128e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8001290:	2301      	movs	r3, #1
 8001292:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001294:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001298:	4619      	mov	r1, r3
 800129a:	4808      	ldr	r0, [pc, #32]	; (80012bc <MX_GPIO_Init+0x1f4>)
 800129c:	f006 f840 	bl	8007320 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 5, 0);
 80012a0:	2200      	movs	r2, #0
 80012a2:	2105      	movs	r1, #5
 80012a4:	200a      	movs	r0, #10
 80012a6:	f005 fe17 	bl	8006ed8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 80012aa:	200a      	movs	r0, #10
 80012ac:	f005 fe2e 	bl	8006f0c <HAL_NVIC_EnableIRQ>

}
 80012b0:	bf00      	nop
 80012b2:	3738      	adds	r7, #56	; 0x38
 80012b4:	46bd      	mov	sp, r7
 80012b6:	bd80      	pop	{r7, pc}
 80012b8:	58024400 	.word	0x58024400
 80012bc:	58022000 	.word	0x58022000
 80012c0:	58020800 	.word	0x58020800
 80012c4:	58020400 	.word	0x58020400
 80012c8:	58021c00 	.word	0x58021c00

080012cc <MX_I2C1_SMBUS_Init>:
SMBUS_HandleTypeDef hsmbus1;

/* I2C1 init function */

void MX_I2C1_SMBUS_Init(void)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hsmbus1.Instance = I2C1;
 80012d0:	4b1d      	ldr	r3, [pc, #116]	; (8001348 <MX_I2C1_SMBUS_Init+0x7c>)
 80012d2:	4a1e      	ldr	r2, [pc, #120]	; (800134c <MX_I2C1_SMBUS_Init+0x80>)
 80012d4:	601a      	str	r2, [r3, #0]
  hsmbus1.Init.Timing = 0x10C0ECFF;
 80012d6:	4b1c      	ldr	r3, [pc, #112]	; (8001348 <MX_I2C1_SMBUS_Init+0x7c>)
 80012d8:	4a1d      	ldr	r2, [pc, #116]	; (8001350 <MX_I2C1_SMBUS_Init+0x84>)
 80012da:	605a      	str	r2, [r3, #4]
  hsmbus1.Init.AnalogFilter = SMBUS_ANALOGFILTER_ENABLE;
 80012dc:	4b1a      	ldr	r3, [pc, #104]	; (8001348 <MX_I2C1_SMBUS_Init+0x7c>)
 80012de:	2200      	movs	r2, #0
 80012e0:	609a      	str	r2, [r3, #8]
  hsmbus1.Init.OwnAddress1 = 2;
 80012e2:	4b19      	ldr	r3, [pc, #100]	; (8001348 <MX_I2C1_SMBUS_Init+0x7c>)
 80012e4:	2202      	movs	r2, #2
 80012e6:	60da      	str	r2, [r3, #12]
  hsmbus1.Init.AddressingMode = SMBUS_ADDRESSINGMODE_7BIT;
 80012e8:	4b17      	ldr	r3, [pc, #92]	; (8001348 <MX_I2C1_SMBUS_Init+0x7c>)
 80012ea:	2201      	movs	r2, #1
 80012ec:	611a      	str	r2, [r3, #16]
  hsmbus1.Init.DualAddressMode = SMBUS_DUALADDRESS_DISABLE;
 80012ee:	4b16      	ldr	r3, [pc, #88]	; (8001348 <MX_I2C1_SMBUS_Init+0x7c>)
 80012f0:	2200      	movs	r2, #0
 80012f2:	615a      	str	r2, [r3, #20]
  hsmbus1.Init.OwnAddress2 = 0;
 80012f4:	4b14      	ldr	r3, [pc, #80]	; (8001348 <MX_I2C1_SMBUS_Init+0x7c>)
 80012f6:	2200      	movs	r2, #0
 80012f8:	619a      	str	r2, [r3, #24]
  hsmbus1.Init.OwnAddress2Masks = SMBUS_OA2_NOMASK;
 80012fa:	4b13      	ldr	r3, [pc, #76]	; (8001348 <MX_I2C1_SMBUS_Init+0x7c>)
 80012fc:	2200      	movs	r2, #0
 80012fe:	61da      	str	r2, [r3, #28]
  hsmbus1.Init.GeneralCallMode = SMBUS_GENERALCALL_DISABLE;
 8001300:	4b11      	ldr	r3, [pc, #68]	; (8001348 <MX_I2C1_SMBUS_Init+0x7c>)
 8001302:	2200      	movs	r2, #0
 8001304:	621a      	str	r2, [r3, #32]
  hsmbus1.Init.NoStretchMode = SMBUS_NOSTRETCH_DISABLE;
 8001306:	4b10      	ldr	r3, [pc, #64]	; (8001348 <MX_I2C1_SMBUS_Init+0x7c>)
 8001308:	2200      	movs	r2, #0
 800130a:	625a      	str	r2, [r3, #36]	; 0x24
  hsmbus1.Init.PacketErrorCheckMode = SMBUS_PEC_DISABLE;
 800130c:	4b0e      	ldr	r3, [pc, #56]	; (8001348 <MX_I2C1_SMBUS_Init+0x7c>)
 800130e:	2200      	movs	r2, #0
 8001310:	629a      	str	r2, [r3, #40]	; 0x28
  hsmbus1.Init.PeripheralMode = SMBUS_PERIPHERAL_MODE_SMBUS_SLAVE;
 8001312:	4b0d      	ldr	r3, [pc, #52]	; (8001348 <MX_I2C1_SMBUS_Init+0x7c>)
 8001314:	2200      	movs	r2, #0
 8001316:	62da      	str	r2, [r3, #44]	; 0x2c
  hsmbus1.Init.SMBusTimeout = 0x000084C4;
 8001318:	4b0b      	ldr	r3, [pc, #44]	; (8001348 <MX_I2C1_SMBUS_Init+0x7c>)
 800131a:	f248 42c4 	movw	r2, #33988	; 0x84c4
 800131e:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_SMBUS_Init(&hsmbus1) != HAL_OK)
 8001320:	4809      	ldr	r0, [pc, #36]	; (8001348 <MX_I2C1_SMBUS_Init+0x7c>)
 8001322:	f00a f819 	bl	800b358 <HAL_SMBUS_Init>
 8001326:	4603      	mov	r3, r0
 8001328:	2b00      	cmp	r3, #0
 800132a:	d001      	beq.n	8001330 <MX_I2C1_SMBUS_Init+0x64>
  {
    Error_Handler();
 800132c:	f001 fffe 	bl	800332c <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_SMBUS_ConfigDigitalFilter(&hsmbus1, 0) != HAL_OK)
 8001330:	2100      	movs	r1, #0
 8001332:	4805      	ldr	r0, [pc, #20]	; (8001348 <MX_I2C1_SMBUS_Init+0x7c>)
 8001334:	f00a f8c8 	bl	800b4c8 <HAL_SMBUS_ConfigDigitalFilter>
 8001338:	4603      	mov	r3, r0
 800133a:	2b00      	cmp	r3, #0
 800133c:	d001      	beq.n	8001342 <MX_I2C1_SMBUS_Init+0x76>
  {
    Error_Handler();
 800133e:	f001 fff5 	bl	800332c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001342:	bf00      	nop
 8001344:	bd80      	pop	{r7, pc}
 8001346:	bf00      	nop
 8001348:	200004bc 	.word	0x200004bc
 800134c:	40005400 	.word	0x40005400
 8001350:	10c0ecff 	.word	0x10c0ecff

08001354 <HAL_SMBUS_MspInit>:

void HAL_SMBUS_MspInit(SMBUS_HandleTypeDef* smbusHandle)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b0b8      	sub	sp, #224	; 0xe0
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800135c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001360:	2200      	movs	r2, #0
 8001362:	601a      	str	r2, [r3, #0]
 8001364:	605a      	str	r2, [r3, #4]
 8001366:	609a      	str	r2, [r3, #8]
 8001368:	60da      	str	r2, [r3, #12]
 800136a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800136c:	f107 0310 	add.w	r3, r7, #16
 8001370:	22bc      	movs	r2, #188	; 0xbc
 8001372:	2100      	movs	r1, #0
 8001374:	4618      	mov	r0, r3
 8001376:	f01a fad1 	bl	801b91c <memset>
  if(smbusHandle->Instance==I2C1)
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	4a25      	ldr	r2, [pc, #148]	; (8001414 <HAL_SMBUS_MspInit+0xc0>)
 8001380:	4293      	cmp	r3, r2
 8001382:	d142      	bne.n	800140a <HAL_SMBUS_MspInit+0xb6>
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001384:	2308      	movs	r3, #8
 8001386:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8001388:	2300      	movs	r3, #0
 800138a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800138e:	f107 0310 	add.w	r3, r7, #16
 8001392:	4618      	mov	r0, r3
 8001394:	f007 fe54 	bl	8009040 <HAL_RCCEx_PeriphCLKConfig>
 8001398:	4603      	mov	r3, r0
 800139a:	2b00      	cmp	r3, #0
 800139c:	d001      	beq.n	80013a2 <HAL_SMBUS_MspInit+0x4e>
    {
      Error_Handler();
 800139e:	f001 ffc5 	bl	800332c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013a2:	4b1d      	ldr	r3, [pc, #116]	; (8001418 <HAL_SMBUS_MspInit+0xc4>)
 80013a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013a8:	4a1b      	ldr	r2, [pc, #108]	; (8001418 <HAL_SMBUS_MspInit+0xc4>)
 80013aa:	f043 0302 	orr.w	r3, r3, #2
 80013ae:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80013b2:	4b19      	ldr	r3, [pc, #100]	; (8001418 <HAL_SMBUS_MspInit+0xc4>)
 80013b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013b8:	f003 0302 	and.w	r3, r3, #2
 80013bc:	60fb      	str	r3, [r7, #12]
 80013be:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80013c0:	f44f 7340 	mov.w	r3, #768	; 0x300
 80013c4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80013c8:	2312      	movs	r3, #18
 80013ca:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ce:	2300      	movs	r3, #0
 80013d0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013d4:	2300      	movs	r3, #0
 80013d6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80013da:	2304      	movs	r3, #4
 80013dc:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013e0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80013e4:	4619      	mov	r1, r3
 80013e6:	480d      	ldr	r0, [pc, #52]	; (800141c <HAL_SMBUS_MspInit+0xc8>)
 80013e8:	f005 ff9a 	bl	8007320 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80013ec:	4b0a      	ldr	r3, [pc, #40]	; (8001418 <HAL_SMBUS_MspInit+0xc4>)
 80013ee:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80013f2:	4a09      	ldr	r2, [pc, #36]	; (8001418 <HAL_SMBUS_MspInit+0xc4>)
 80013f4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80013f8:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80013fc:	4b06      	ldr	r3, [pc, #24]	; (8001418 <HAL_SMBUS_MspInit+0xc4>)
 80013fe:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001402:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001406:	60bb      	str	r3, [r7, #8]
 8001408:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800140a:	bf00      	nop
 800140c:	37e0      	adds	r7, #224	; 0xe0
 800140e:	46bd      	mov	sp, r7
 8001410:	bd80      	pop	{r7, pc}
 8001412:	bf00      	nop
 8001414:	40005400 	.word	0x40005400
 8001418:	58024400 	.word	0x58024400
 800141c:	58020400 	.word	0x58020400

08001420 <L6474_AttachFlagInterrupt>:
 * @param[in] callback Name of the callback to attach 
 * to the Flag Interrupt
 * @retval None
 **********************************************************/
void L6474_AttachFlagInterrupt(void (*callback)(void))
{
 8001420:	b480      	push	{r7}
 8001422:	b083      	sub	sp, #12
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
  flagInterruptCallback = (void (*)())callback;
 8001428:	4a04      	ldr	r2, [pc, #16]	; (800143c <L6474_AttachFlagInterrupt+0x1c>)
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	6013      	str	r3, [r2, #0]
}
 800142e:	bf00      	nop
 8001430:	370c      	adds	r7, #12
 8001432:	46bd      	mov	sp, r7
 8001434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001438:	4770      	bx	lr
 800143a:	bf00      	nop
 800143c:	2000050c 	.word	0x2000050c

08001440 <L6474_CmdDisable>:
 * @brief  Issue the Disable command to the L6474 of the specified device
 * @param[in] deviceId (from 0 to 2)
 * @retval None
 **********************************************************/
void L6474_CmdDisable(uint8_t deviceId)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	b082      	sub	sp, #8
 8001444:	af00      	add	r7, sp, #0
 8001446:	4603      	mov	r3, r0
 8001448:	71fb      	strb	r3, [r7, #7]
  L6474_SendCommand(deviceId, L6474_DISABLE);
 800144a:	79fb      	ldrb	r3, [r7, #7]
 800144c:	21a8      	movs	r1, #168	; 0xa8
 800144e:	4618      	mov	r0, r3
 8001450:	f000 fe26 	bl	80020a0 <L6474_SendCommand>
}
 8001454:	bf00      	nop
 8001456:	3708      	adds	r7, #8
 8001458:	46bd      	mov	sp, r7
 800145a:	bd80      	pop	{r7, pc}

0800145c <L6474_CmdEnable>:
 * @brief  Issues the Enable command to the L6474 of the specified device
 * @param[in] deviceId (from 0 to 2)
 * @retval None
 **********************************************************/
void L6474_CmdEnable(uint8_t deviceId)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b082      	sub	sp, #8
 8001460:	af00      	add	r7, sp, #0
 8001462:	4603      	mov	r3, r0
 8001464:	71fb      	strb	r3, [r7, #7]
  L6474_SendCommand(deviceId, L6474_ENABLE);
 8001466:	79fb      	ldrb	r3, [r7, #7]
 8001468:	21b8      	movs	r1, #184	; 0xb8
 800146a:	4618      	mov	r0, r3
 800146c:	f000 fe18 	bl	80020a0 <L6474_SendCommand>
}
 8001470:	bf00      	nop
 8001472:	3708      	adds	r7, #8
 8001474:	46bd      	mov	sp, r7
 8001476:	bd80      	pop	{r7, pc}

08001478 <L6474_CmdGetParam>:
 * @param[in] deviceId (from 0 to 2)
 * @param[in] param Register adress (L6474_ABS_POS, L6474_MARK,...)
 * @retval Register value
 **********************************************************/
uint32_t L6474_CmdGetParam(uint8_t deviceId, uint32_t param)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b086      	sub	sp, #24
 800147c:	af00      	add	r7, sp, #0
 800147e:	4603      	mov	r3, r0
 8001480:	6039      	str	r1, [r7, #0]
 8001482:	71fb      	strb	r3, [r7, #7]
  uint32_t i;
  uint32_t spiRxData;
  uint8_t maxArgumentNbBytes = 0;
 8001484:	2300      	movs	r3, #0
 8001486:	74fb      	strb	r3, [r7, #19]
  uint8_t spiIndex = numberOfDevices - deviceId - 1;
 8001488:	4b70      	ldr	r3, [pc, #448]	; (800164c <L6474_CmdGetParam+0x1d4>)
 800148a:	781b      	ldrb	r3, [r3, #0]
 800148c:	b2da      	uxtb	r2, r3
 800148e:	79fb      	ldrb	r3, [r7, #7]
 8001490:	1ad3      	subs	r3, r2, r3
 8001492:	b2db      	uxtb	r3, r3
 8001494:	3b01      	subs	r3, #1
 8001496:	747b      	strb	r3, [r7, #17]
  bool itDisable = FALSE;  
 8001498:	2300      	movs	r3, #0
 800149a:	74bb      	strb	r3, [r7, #18]
  
  do
  {
    spiPreemtionByIsr = FALSE;
 800149c:	4b6c      	ldr	r3, [pc, #432]	; (8001650 <L6474_CmdGetParam+0x1d8>)
 800149e:	2200      	movs	r2, #0
 80014a0:	701a      	strb	r2, [r3, #0]
    if (itDisable)
 80014a2:	7cbb      	ldrb	r3, [r7, #18]
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d001      	beq.n	80014ac <L6474_CmdGetParam+0x34>
    {
      /* re-enable L6474_Board_EnableIrq if disable in previous iteration */
      //L6474_Board_EnableIrq();
      //__enable_irq();
      itDisable = FALSE;
 80014a8:	2300      	movs	r3, #0
 80014aa:	74bb      	strb	r3, [r7, #18]
    }
  
    for (i = 0; i < numberOfDevices; i++)
 80014ac:	2300      	movs	r3, #0
 80014ae:	617b      	str	r3, [r7, #20]
 80014b0:	e02b      	b.n	800150a <L6474_CmdGetParam+0x92>
    {
      spiTxBursts[0][i] = L6474_NOP;
 80014b2:	4a68      	ldr	r2, [pc, #416]	; (8001654 <L6474_CmdGetParam+0x1dc>)
 80014b4:	697b      	ldr	r3, [r7, #20]
 80014b6:	4413      	add	r3, r2
 80014b8:	2200      	movs	r2, #0
 80014ba:	701a      	strb	r2, [r3, #0]
      spiTxBursts[1][i] = L6474_NOP;
 80014bc:	4a65      	ldr	r2, [pc, #404]	; (8001654 <L6474_CmdGetParam+0x1dc>)
 80014be:	697b      	ldr	r3, [r7, #20]
 80014c0:	4413      	add	r3, r2
 80014c2:	3303      	adds	r3, #3
 80014c4:	2200      	movs	r2, #0
 80014c6:	701a      	strb	r2, [r3, #0]
      spiTxBursts[2][i] = L6474_NOP;
 80014c8:	4a62      	ldr	r2, [pc, #392]	; (8001654 <L6474_CmdGetParam+0x1dc>)
 80014ca:	697b      	ldr	r3, [r7, #20]
 80014cc:	4413      	add	r3, r2
 80014ce:	3306      	adds	r3, #6
 80014d0:	2200      	movs	r2, #0
 80014d2:	701a      	strb	r2, [r3, #0]
      spiTxBursts[3][i] = L6474_NOP;
 80014d4:	4a5f      	ldr	r2, [pc, #380]	; (8001654 <L6474_CmdGetParam+0x1dc>)
 80014d6:	697b      	ldr	r3, [r7, #20]
 80014d8:	4413      	add	r3, r2
 80014da:	3309      	adds	r3, #9
 80014dc:	2200      	movs	r2, #0
 80014de:	701a      	strb	r2, [r3, #0]
      spiRxBursts[1][i] = 0;
 80014e0:	4a5d      	ldr	r2, [pc, #372]	; (8001658 <L6474_CmdGetParam+0x1e0>)
 80014e2:	697b      	ldr	r3, [r7, #20]
 80014e4:	4413      	add	r3, r2
 80014e6:	3303      	adds	r3, #3
 80014e8:	2200      	movs	r2, #0
 80014ea:	701a      	strb	r2, [r3, #0]
      spiRxBursts[2][i] = 0;
 80014ec:	4a5a      	ldr	r2, [pc, #360]	; (8001658 <L6474_CmdGetParam+0x1e0>)
 80014ee:	697b      	ldr	r3, [r7, #20]
 80014f0:	4413      	add	r3, r2
 80014f2:	3306      	adds	r3, #6
 80014f4:	2200      	movs	r2, #0
 80014f6:	701a      	strb	r2, [r3, #0]
      spiRxBursts[3][i] = 0;    
 80014f8:	4a57      	ldr	r2, [pc, #348]	; (8001658 <L6474_CmdGetParam+0x1e0>)
 80014fa:	697b      	ldr	r3, [r7, #20]
 80014fc:	4413      	add	r3, r2
 80014fe:	3309      	adds	r3, #9
 8001500:	2200      	movs	r2, #0
 8001502:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < numberOfDevices; i++)
 8001504:	697b      	ldr	r3, [r7, #20]
 8001506:	3301      	adds	r3, #1
 8001508:	617b      	str	r3, [r7, #20]
 800150a:	4b50      	ldr	r3, [pc, #320]	; (800164c <L6474_CmdGetParam+0x1d4>)
 800150c:	781b      	ldrb	r3, [r3, #0]
 800150e:	b2db      	uxtb	r3, r3
 8001510:	461a      	mov	r2, r3
 8001512:	697b      	ldr	r3, [r7, #20]
 8001514:	4293      	cmp	r3, r2
 8001516:	d3cc      	bcc.n	80014b2 <L6474_CmdGetParam+0x3a>
    }
    switch (param)
 8001518:	683b      	ldr	r3, [r7, #0]
 800151a:	3b01      	subs	r3, #1
 800151c:	2b18      	cmp	r3, #24
 800151e:	d84d      	bhi.n	80015bc <L6474_CmdGetParam+0x144>
 8001520:	a201      	add	r2, pc, #4	; (adr r2, 8001528 <L6474_CmdGetParam+0xb0>)
 8001522:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001526:	bf00      	nop
 8001528:	0800158d 	.word	0x0800158d
 800152c:	080015a3 	.word	0x080015a3
 8001530:	0800158d 	.word	0x0800158d
 8001534:	080015bd 	.word	0x080015bd
 8001538:	080015bd 	.word	0x080015bd
 800153c:	080015bd 	.word	0x080015bd
 8001540:	080015bd 	.word	0x080015bd
 8001544:	080015bd 	.word	0x080015bd
 8001548:	080015bd 	.word	0x080015bd
 800154c:	080015bd 	.word	0x080015bd
 8001550:	080015bd 	.word	0x080015bd
 8001554:	080015bd 	.word	0x080015bd
 8001558:	080015bd 	.word	0x080015bd
 800155c:	080015bd 	.word	0x080015bd
 8001560:	080015bd 	.word	0x080015bd
 8001564:	080015bd 	.word	0x080015bd
 8001568:	080015bd 	.word	0x080015bd
 800156c:	080015bd 	.word	0x080015bd
 8001570:	080015bd 	.word	0x080015bd
 8001574:	080015bd 	.word	0x080015bd
 8001578:	080015bd 	.word	0x080015bd
 800157c:	080015bd 	.word	0x080015bd
 8001580:	080015bd 	.word	0x080015bd
 8001584:	080015a3 	.word	0x080015a3
 8001588:	080015a3 	.word	0x080015a3
    {
      case L6474_ABS_POS: ;
      case L6474_MARK:
        spiTxBursts[0][spiIndex] = ((uint8_t)L6474_GET_PARAM )| (param);
 800158c:	683b      	ldr	r3, [r7, #0]
 800158e:	b2da      	uxtb	r2, r3
 8001590:	7c7b      	ldrb	r3, [r7, #17]
 8001592:	f042 0220 	orr.w	r2, r2, #32
 8001596:	b2d1      	uxtb	r1, r2
 8001598:	4a2e      	ldr	r2, [pc, #184]	; (8001654 <L6474_CmdGetParam+0x1dc>)
 800159a:	54d1      	strb	r1, [r2, r3]
        maxArgumentNbBytes = 3;
 800159c:	2303      	movs	r3, #3
 800159e:	74fb      	strb	r3, [r7, #19]
        break;
 80015a0:	e018      	b.n	80015d4 <L6474_CmdGetParam+0x15c>
      case L6474_EL_POS: ;
      case L6474_CONFIG: ;
      case L6474_STATUS:
        spiTxBursts[1][spiIndex] = ((uint8_t)L6474_GET_PARAM )| (param);
 80015a2:	683b      	ldr	r3, [r7, #0]
 80015a4:	b2da      	uxtb	r2, r3
 80015a6:	7c7b      	ldrb	r3, [r7, #17]
 80015a8:	f042 0220 	orr.w	r2, r2, #32
 80015ac:	b2d1      	uxtb	r1, r2
 80015ae:	4a29      	ldr	r2, [pc, #164]	; (8001654 <L6474_CmdGetParam+0x1dc>)
 80015b0:	4413      	add	r3, r2
 80015b2:	460a      	mov	r2, r1
 80015b4:	70da      	strb	r2, [r3, #3]
        maxArgumentNbBytes = 2;
 80015b6:	2302      	movs	r3, #2
 80015b8:	74fb      	strb	r3, [r7, #19]
        break;
 80015ba:	e00b      	b.n	80015d4 <L6474_CmdGetParam+0x15c>
      default:
        spiTxBursts[2][spiIndex] = ((uint8_t)L6474_GET_PARAM )| (param);
 80015bc:	683b      	ldr	r3, [r7, #0]
 80015be:	b2da      	uxtb	r2, r3
 80015c0:	7c7b      	ldrb	r3, [r7, #17]
 80015c2:	f042 0220 	orr.w	r2, r2, #32
 80015c6:	b2d1      	uxtb	r1, r2
 80015c8:	4a22      	ldr	r2, [pc, #136]	; (8001654 <L6474_CmdGetParam+0x1dc>)
 80015ca:	4413      	add	r3, r2
 80015cc:	460a      	mov	r2, r1
 80015ce:	719a      	strb	r2, [r3, #6]
        maxArgumentNbBytes = 1;
 80015d0:	2301      	movs	r3, #1
 80015d2:	74fb      	strb	r3, [r7, #19]
    }
    
    /* Disable interruption before checking */
    /* pre-emption by ISR and SPI transfers*/
    L6474_Board_DisableIrq();
 80015d4:	f002 fc01 	bl	8003dda <L6474_Board_DisableIrq>
    itDisable = TRUE;
 80015d8:	2301      	movs	r3, #1
 80015da:	74bb      	strb	r3, [r7, #18]
  } while (spiPreemtionByIsr); // check pre-emption by ISR
 80015dc:	4b1c      	ldr	r3, [pc, #112]	; (8001650 <L6474_CmdGetParam+0x1d8>)
 80015de:	781b      	ldrb	r3, [r3, #0]
 80015e0:	b2db      	uxtb	r3, r3
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	f47f af5a 	bne.w	800149c <L6474_CmdGetParam+0x24>
    
  for (i = L6474_CMD_ARG_MAX_NB_BYTES-1-maxArgumentNbBytes;
 80015e8:	7cfb      	ldrb	r3, [r7, #19]
 80015ea:	f1c3 0303 	rsb	r3, r3, #3
 80015ee:	617b      	str	r3, [r7, #20]
 80015f0:	e011      	b.n	8001616 <L6474_CmdGetParam+0x19e>
       i < L6474_CMD_ARG_MAX_NB_BYTES;
       i++)
  {
     L6474_WriteBytes(&spiTxBursts[i][0],
 80015f2:	697a      	ldr	r2, [r7, #20]
 80015f4:	4613      	mov	r3, r2
 80015f6:	005b      	lsls	r3, r3, #1
 80015f8:	4413      	add	r3, r2
 80015fa:	4a16      	ldr	r2, [pc, #88]	; (8001654 <L6474_CmdGetParam+0x1dc>)
 80015fc:	1898      	adds	r0, r3, r2
 80015fe:	697a      	ldr	r2, [r7, #20]
 8001600:	4613      	mov	r3, r2
 8001602:	005b      	lsls	r3, r3, #1
 8001604:	4413      	add	r3, r2
 8001606:	4a14      	ldr	r2, [pc, #80]	; (8001658 <L6474_CmdGetParam+0x1e0>)
 8001608:	4413      	add	r3, r2
 800160a:	4619      	mov	r1, r3
 800160c:	f001 f90a 	bl	8002824 <L6474_WriteBytes>
       i++)
 8001610:	697b      	ldr	r3, [r7, #20]
 8001612:	3301      	adds	r3, #1
 8001614:	617b      	str	r3, [r7, #20]
  for (i = L6474_CMD_ARG_MAX_NB_BYTES-1-maxArgumentNbBytes;
 8001616:	697b      	ldr	r3, [r7, #20]
 8001618:	2b03      	cmp	r3, #3
 800161a:	d9ea      	bls.n	80015f2 <L6474_CmdGetParam+0x17a>
                          &spiRxBursts[i][0]);
  }
  
  spiRxData = ((uint32_t)spiRxBursts[1][spiIndex] << 16)|
 800161c:	7c7b      	ldrb	r3, [r7, #17]
 800161e:	4a0e      	ldr	r2, [pc, #56]	; (8001658 <L6474_CmdGetParam+0x1e0>)
 8001620:	4413      	add	r3, r2
 8001622:	78db      	ldrb	r3, [r3, #3]
 8001624:	041b      	lsls	r3, r3, #16
              (spiRxBursts[2][spiIndex] << 8) |
 8001626:	7c7a      	ldrb	r2, [r7, #17]
 8001628:	490b      	ldr	r1, [pc, #44]	; (8001658 <L6474_CmdGetParam+0x1e0>)
 800162a:	440a      	add	r2, r1
 800162c:	7992      	ldrb	r2, [r2, #6]
 800162e:	0212      	lsls	r2, r2, #8
  spiRxData = ((uint32_t)spiRxBursts[1][spiIndex] << 16)|
 8001630:	4313      	orrs	r3, r2
              (spiRxBursts[3][spiIndex]);
 8001632:	7c7a      	ldrb	r2, [r7, #17]
 8001634:	4908      	ldr	r1, [pc, #32]	; (8001658 <L6474_CmdGetParam+0x1e0>)
 8001636:	440a      	add	r2, r1
 8001638:	7a52      	ldrb	r2, [r2, #9]
  spiRxData = ((uint32_t)spiRxBursts[1][spiIndex] << 16)|
 800163a:	4313      	orrs	r3, r2
 800163c:	60fb      	str	r3, [r7, #12]
  
  /* re-enable L6474_Board_EnableIrq after SPI transfers*/
  L6474_Board_EnableIrq();
 800163e:	f002 fbd5 	bl	8003dec <L6474_Board_EnableIrq>
    
  return (spiRxData);
 8001642:	68fb      	ldr	r3, [r7, #12]
}
 8001644:	4618      	mov	r0, r3
 8001646:	3718      	adds	r7, #24
 8001648:	46bd      	mov	sp, r7
 800164a:	bd80      	pop	{r7, pc}
 800164c:	20000514 	.word	0x20000514
 8001650:	20000530 	.word	0x20000530
 8001654:	20000518 	.word	0x20000518
 8001658:	20000524 	.word	0x20000524

0800165c <L6474_CmdGetStatus>:
 * @note Once the GetStatus command is performed, the flags of the status register
 * are reset. This is not the case when the status register is read with the
 * GetParam command (via the functions L6474ReadStatusRegister or L6474CmdGetParam).
 **********************************************************/
uint16_t L6474_CmdGetStatus(uint8_t deviceId)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	b084      	sub	sp, #16
 8001660:	af00      	add	r7, sp, #0
 8001662:	4603      	mov	r3, r0
 8001664:	71fb      	strb	r3, [r7, #7]
  uint32_t i;
  uint16_t status;
  uint8_t spiIndex = numberOfDevices - deviceId - 1;
 8001666:	4b3c      	ldr	r3, [pc, #240]	; (8001758 <L6474_CmdGetStatus+0xfc>)
 8001668:	781b      	ldrb	r3, [r3, #0]
 800166a:	b2da      	uxtb	r2, r3
 800166c:	79fb      	ldrb	r3, [r7, #7]
 800166e:	1ad3      	subs	r3, r2, r3
 8001670:	b2db      	uxtb	r3, r3
 8001672:	3b01      	subs	r3, #1
 8001674:	72bb      	strb	r3, [r7, #10]
  bool itDisable = FALSE;  
 8001676:	2300      	movs	r3, #0
 8001678:	72fb      	strb	r3, [r7, #11]
  
  do
  {
    spiPreemtionByIsr = FALSE;
 800167a:	4b38      	ldr	r3, [pc, #224]	; (800175c <L6474_CmdGetStatus+0x100>)
 800167c:	2200      	movs	r2, #0
 800167e:	701a      	strb	r2, [r3, #0]
    if (itDisable)
 8001680:	7afb      	ldrb	r3, [r7, #11]
 8001682:	2b00      	cmp	r3, #0
 8001684:	d003      	beq.n	800168e <L6474_CmdGetStatus+0x32>
    {
      /* re-enable L6474_Board_EnableIrq if disable in previous iteration */
      L6474_Board_EnableIrq();
 8001686:	f002 fbb1 	bl	8003dec <L6474_Board_EnableIrq>
      itDisable = FALSE;
 800168a:	2300      	movs	r3, #0
 800168c:	72fb      	strb	r3, [r7, #11]
    }

    for (i = 0; i < numberOfDevices; i++)
 800168e:	2300      	movs	r3, #0
 8001690:	60fb      	str	r3, [r7, #12]
 8001692:	e01f      	b.n	80016d4 <L6474_CmdGetStatus+0x78>
    {
       spiTxBursts[0][i] = L6474_NOP;
 8001694:	4a32      	ldr	r2, [pc, #200]	; (8001760 <L6474_CmdGetStatus+0x104>)
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	4413      	add	r3, r2
 800169a:	2200      	movs	r2, #0
 800169c:	701a      	strb	r2, [r3, #0]
       spiTxBursts[1][i] = L6474_NOP;
 800169e:	4a30      	ldr	r2, [pc, #192]	; (8001760 <L6474_CmdGetStatus+0x104>)
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	4413      	add	r3, r2
 80016a4:	3303      	adds	r3, #3
 80016a6:	2200      	movs	r2, #0
 80016a8:	701a      	strb	r2, [r3, #0]
       spiTxBursts[2][i] = L6474_NOP;
 80016aa:	4a2d      	ldr	r2, [pc, #180]	; (8001760 <L6474_CmdGetStatus+0x104>)
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	4413      	add	r3, r2
 80016b0:	3306      	adds	r3, #6
 80016b2:	2200      	movs	r2, #0
 80016b4:	701a      	strb	r2, [r3, #0]
       spiRxBursts[1][i] = 0;
 80016b6:	4a2b      	ldr	r2, [pc, #172]	; (8001764 <L6474_CmdGetStatus+0x108>)
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	4413      	add	r3, r2
 80016bc:	3303      	adds	r3, #3
 80016be:	2200      	movs	r2, #0
 80016c0:	701a      	strb	r2, [r3, #0]
       spiRxBursts[2][i] = 0;
 80016c2:	4a28      	ldr	r2, [pc, #160]	; (8001764 <L6474_CmdGetStatus+0x108>)
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	4413      	add	r3, r2
 80016c8:	3306      	adds	r3, #6
 80016ca:	2200      	movs	r2, #0
 80016cc:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < numberOfDevices; i++)
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	3301      	adds	r3, #1
 80016d2:	60fb      	str	r3, [r7, #12]
 80016d4:	4b20      	ldr	r3, [pc, #128]	; (8001758 <L6474_CmdGetStatus+0xfc>)
 80016d6:	781b      	ldrb	r3, [r3, #0]
 80016d8:	b2db      	uxtb	r3, r3
 80016da:	461a      	mov	r2, r3
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	4293      	cmp	r3, r2
 80016e0:	d3d8      	bcc.n	8001694 <L6474_CmdGetStatus+0x38>
    }
    spiTxBursts[0][spiIndex] = L6474_GET_STATUS;
 80016e2:	7abb      	ldrb	r3, [r7, #10]
 80016e4:	4a1e      	ldr	r2, [pc, #120]	; (8001760 <L6474_CmdGetStatus+0x104>)
 80016e6:	21d0      	movs	r1, #208	; 0xd0
 80016e8:	54d1      	strb	r1, [r2, r3]

    /* Disable interruption before checking */
    /* pre-emption by ISR and SPI transfers*/
    L6474_Board_DisableIrq();
 80016ea:	f002 fb76 	bl	8003dda <L6474_Board_DisableIrq>
    itDisable = TRUE;
 80016ee:	2301      	movs	r3, #1
 80016f0:	72fb      	strb	r3, [r7, #11]
  } while (spiPreemtionByIsr); // check pre-emption by ISR
 80016f2:	4b1a      	ldr	r3, [pc, #104]	; (800175c <L6474_CmdGetStatus+0x100>)
 80016f4:	781b      	ldrb	r3, [r3, #0]
 80016f6:	b2db      	uxtb	r3, r3
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d1be      	bne.n	800167a <L6474_CmdGetStatus+0x1e>

  for (i = 0; i < L6474_CMD_ARG_NB_BYTES_GET_STATUS + L6474_RSP_NB_BYTES_GET_STATUS; i++)
 80016fc:	2300      	movs	r3, #0
 80016fe:	60fb      	str	r3, [r7, #12]
 8001700:	e011      	b.n	8001726 <L6474_CmdGetStatus+0xca>
  {
     L6474_WriteBytes(&spiTxBursts[i][0], &spiRxBursts[i][0]);
 8001702:	68fa      	ldr	r2, [r7, #12]
 8001704:	4613      	mov	r3, r2
 8001706:	005b      	lsls	r3, r3, #1
 8001708:	4413      	add	r3, r2
 800170a:	4a15      	ldr	r2, [pc, #84]	; (8001760 <L6474_CmdGetStatus+0x104>)
 800170c:	1898      	adds	r0, r3, r2
 800170e:	68fa      	ldr	r2, [r7, #12]
 8001710:	4613      	mov	r3, r2
 8001712:	005b      	lsls	r3, r3, #1
 8001714:	4413      	add	r3, r2
 8001716:	4a13      	ldr	r2, [pc, #76]	; (8001764 <L6474_CmdGetStatus+0x108>)
 8001718:	4413      	add	r3, r2
 800171a:	4619      	mov	r1, r3
 800171c:	f001 f882 	bl	8002824 <L6474_WriteBytes>
  for (i = 0; i < L6474_CMD_ARG_NB_BYTES_GET_STATUS + L6474_RSP_NB_BYTES_GET_STATUS; i++)
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	3301      	adds	r3, #1
 8001724:	60fb      	str	r3, [r7, #12]
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	2b02      	cmp	r3, #2
 800172a:	d9ea      	bls.n	8001702 <L6474_CmdGetStatus+0xa6>
  }
  status = (spiRxBursts[1][spiIndex] << 8) | (spiRxBursts[2][spiIndex]);
 800172c:	7abb      	ldrb	r3, [r7, #10]
 800172e:	4a0d      	ldr	r2, [pc, #52]	; (8001764 <L6474_CmdGetStatus+0x108>)
 8001730:	4413      	add	r3, r2
 8001732:	78db      	ldrb	r3, [r3, #3]
 8001734:	021b      	lsls	r3, r3, #8
 8001736:	b21a      	sxth	r2, r3
 8001738:	7abb      	ldrb	r3, [r7, #10]
 800173a:	490a      	ldr	r1, [pc, #40]	; (8001764 <L6474_CmdGetStatus+0x108>)
 800173c:	440b      	add	r3, r1
 800173e:	799b      	ldrb	r3, [r3, #6]
 8001740:	b21b      	sxth	r3, r3
 8001742:	4313      	orrs	r3, r2
 8001744:	b21b      	sxth	r3, r3
 8001746:	813b      	strh	r3, [r7, #8]
  
  /* re-enable L6474_Board_EnableIrq after SPI transfers*/
  L6474_Board_EnableIrq();
 8001748:	f002 fb50 	bl	8003dec <L6474_Board_EnableIrq>
  
  return (status);
 800174c:	893b      	ldrh	r3, [r7, #8]
}
 800174e:	4618      	mov	r0, r3
 8001750:	3710      	adds	r7, #16
 8001752:	46bd      	mov	sp, r7
 8001754:	bd80      	pop	{r7, pc}
 8001756:	bf00      	nop
 8001758:	20000514 	.word	0x20000514
 800175c:	20000530 	.word	0x20000530
 8001760:	20000518 	.word	0x20000518
 8001764:	20000524 	.word	0x20000524

08001768 <L6474_CmdSetParam>:
 * @retval None
 **********************************************************/
void L6474_CmdSetParam(uint8_t deviceId,
                       uint32_t param,
                       uint32_t value)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	b086      	sub	sp, #24
 800176c:	af00      	add	r7, sp, #0
 800176e:	4603      	mov	r3, r0
 8001770:	60b9      	str	r1, [r7, #8]
 8001772:	607a      	str	r2, [r7, #4]
 8001774:	73fb      	strb	r3, [r7, #15]
  uint32_t i;
  uint8_t maxArgumentNbBytes = 0;
 8001776:	2300      	movs	r3, #0
 8001778:	74fb      	strb	r3, [r7, #19]
  uint8_t spiIndex = numberOfDevices - deviceId - 1;
 800177a:	4b69      	ldr	r3, [pc, #420]	; (8001920 <L6474_CmdSetParam+0x1b8>)
 800177c:	781b      	ldrb	r3, [r3, #0]
 800177e:	b2da      	uxtb	r2, r3
 8001780:	7bfb      	ldrb	r3, [r7, #15]
 8001782:	1ad3      	subs	r3, r2, r3
 8001784:	b2db      	uxtb	r3, r3
 8001786:	3b01      	subs	r3, #1
 8001788:	747b      	strb	r3, [r7, #17]
  bool itDisable = FALSE;  
 800178a:	2300      	movs	r3, #0
 800178c:	74bb      	strb	r3, [r7, #18]
  do
  {
    spiPreemtionByIsr = FALSE;
 800178e:	4b65      	ldr	r3, [pc, #404]	; (8001924 <L6474_CmdSetParam+0x1bc>)
 8001790:	2200      	movs	r2, #0
 8001792:	701a      	strb	r2, [r3, #0]
    if (itDisable)
 8001794:	7cbb      	ldrb	r3, [r7, #18]
 8001796:	2b00      	cmp	r3, #0
 8001798:	d003      	beq.n	80017a2 <L6474_CmdSetParam+0x3a>
    {
      /* re-enable L6474_Board_EnableIrq if disable in previous iteration */
      L6474_Board_EnableIrq();
 800179a:	f002 fb27 	bl	8003dec <L6474_Board_EnableIrq>
      itDisable = FALSE;
 800179e:	2300      	movs	r3, #0
 80017a0:	74bb      	strb	r3, [r7, #18]
    }
    for (i = 0; i < numberOfDevices; i++)
 80017a2:	2300      	movs	r3, #0
 80017a4:	617b      	str	r3, [r7, #20]
 80017a6:	e019      	b.n	80017dc <L6474_CmdSetParam+0x74>
    {
      spiTxBursts[0][i] = L6474_NOP;
 80017a8:	4a5f      	ldr	r2, [pc, #380]	; (8001928 <L6474_CmdSetParam+0x1c0>)
 80017aa:	697b      	ldr	r3, [r7, #20]
 80017ac:	4413      	add	r3, r2
 80017ae:	2200      	movs	r2, #0
 80017b0:	701a      	strb	r2, [r3, #0]
      spiTxBursts[1][i] = L6474_NOP;
 80017b2:	4a5d      	ldr	r2, [pc, #372]	; (8001928 <L6474_CmdSetParam+0x1c0>)
 80017b4:	697b      	ldr	r3, [r7, #20]
 80017b6:	4413      	add	r3, r2
 80017b8:	3303      	adds	r3, #3
 80017ba:	2200      	movs	r2, #0
 80017bc:	701a      	strb	r2, [r3, #0]
      spiTxBursts[2][i] = L6474_NOP;
 80017be:	4a5a      	ldr	r2, [pc, #360]	; (8001928 <L6474_CmdSetParam+0x1c0>)
 80017c0:	697b      	ldr	r3, [r7, #20]
 80017c2:	4413      	add	r3, r2
 80017c4:	3306      	adds	r3, #6
 80017c6:	2200      	movs	r2, #0
 80017c8:	701a      	strb	r2, [r3, #0]
      spiTxBursts[3][i] = L6474_NOP;
 80017ca:	4a57      	ldr	r2, [pc, #348]	; (8001928 <L6474_CmdSetParam+0x1c0>)
 80017cc:	697b      	ldr	r3, [r7, #20]
 80017ce:	4413      	add	r3, r2
 80017d0:	3309      	adds	r3, #9
 80017d2:	2200      	movs	r2, #0
 80017d4:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < numberOfDevices; i++)
 80017d6:	697b      	ldr	r3, [r7, #20]
 80017d8:	3301      	adds	r3, #1
 80017da:	617b      	str	r3, [r7, #20]
 80017dc:	4b50      	ldr	r3, [pc, #320]	; (8001920 <L6474_CmdSetParam+0x1b8>)
 80017de:	781b      	ldrb	r3, [r3, #0]
 80017e0:	b2db      	uxtb	r3, r3
 80017e2:	461a      	mov	r2, r3
 80017e4:	697b      	ldr	r3, [r7, #20]
 80017e6:	4293      	cmp	r3, r2
 80017e8:	d3de      	bcc.n	80017a8 <L6474_CmdSetParam+0x40>
    }
    switch (param)
 80017ea:	68bb      	ldr	r3, [r7, #8]
 80017ec:	3b01      	subs	r3, #1
 80017ee:	2b17      	cmp	r3, #23
 80017f0:	d85c      	bhi.n	80018ac <L6474_CmdSetParam+0x144>
 80017f2:	a201      	add	r2, pc, #4	; (adr r2, 80017f8 <L6474_CmdSetParam+0x90>)
 80017f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017f8:	08001859 	.word	0x08001859
 80017fc:	08001889 	.word	0x08001889
 8001800:	08001859 	.word	0x08001859
 8001804:	080018ad 	.word	0x080018ad
 8001808:	080018ad 	.word	0x080018ad
 800180c:	080018ad 	.word	0x080018ad
 8001810:	080018ad 	.word	0x080018ad
 8001814:	080018ad 	.word	0x080018ad
 8001818:	080018ad 	.word	0x080018ad
 800181c:	080018ad 	.word	0x080018ad
 8001820:	080018ad 	.word	0x080018ad
 8001824:	080018ad 	.word	0x080018ad
 8001828:	080018ad 	.word	0x080018ad
 800182c:	080018ad 	.word	0x080018ad
 8001830:	080018ad 	.word	0x080018ad
 8001834:	080018ad 	.word	0x080018ad
 8001838:	080018ad 	.word	0x080018ad
 800183c:	080018ad 	.word	0x080018ad
 8001840:	080018ad 	.word	0x080018ad
 8001844:	080018ad 	.word	0x080018ad
 8001848:	080018ad 	.word	0x080018ad
 800184c:	080018ad 	.word	0x080018ad
 8001850:	080018ad 	.word	0x080018ad
 8001854:	08001889 	.word	0x08001889
  {
    case L6474_ABS_POS: ;
    case L6474_MARK:
        spiTxBursts[0][spiIndex] = param;
 8001858:	7c7b      	ldrb	r3, [r7, #17]
 800185a:	68ba      	ldr	r2, [r7, #8]
 800185c:	b2d1      	uxtb	r1, r2
 800185e:	4a32      	ldr	r2, [pc, #200]	; (8001928 <L6474_CmdSetParam+0x1c0>)
 8001860:	54d1      	strb	r1, [r2, r3]
        spiTxBursts[1][spiIndex] = (uint8_t)(value >> 16);
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	0c1a      	lsrs	r2, r3, #16
 8001866:	7c7b      	ldrb	r3, [r7, #17]
 8001868:	b2d1      	uxtb	r1, r2
 800186a:	4a2f      	ldr	r2, [pc, #188]	; (8001928 <L6474_CmdSetParam+0x1c0>)
 800186c:	4413      	add	r3, r2
 800186e:	460a      	mov	r2, r1
 8001870:	70da      	strb	r2, [r3, #3]
        spiTxBursts[2][spiIndex] = (uint8_t)(value >> 8);
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	0a1a      	lsrs	r2, r3, #8
 8001876:	7c7b      	ldrb	r3, [r7, #17]
 8001878:	b2d1      	uxtb	r1, r2
 800187a:	4a2b      	ldr	r2, [pc, #172]	; (8001928 <L6474_CmdSetParam+0x1c0>)
 800187c:	4413      	add	r3, r2
 800187e:	460a      	mov	r2, r1
 8001880:	719a      	strb	r2, [r3, #6]
        maxArgumentNbBytes = 3;
 8001882:	2303      	movs	r3, #3
 8001884:	74fb      	strb	r3, [r7, #19]
        break;
 8001886:	e01a      	b.n	80018be <L6474_CmdSetParam+0x156>
    case L6474_EL_POS: ;
    case L6474_CONFIG:
        spiTxBursts[1][spiIndex] = param;
 8001888:	7c7b      	ldrb	r3, [r7, #17]
 800188a:	68ba      	ldr	r2, [r7, #8]
 800188c:	b2d1      	uxtb	r1, r2
 800188e:	4a26      	ldr	r2, [pc, #152]	; (8001928 <L6474_CmdSetParam+0x1c0>)
 8001890:	4413      	add	r3, r2
 8001892:	460a      	mov	r2, r1
 8001894:	70da      	strb	r2, [r3, #3]
        spiTxBursts[2][spiIndex] = (uint8_t)(value >> 8);
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	0a1a      	lsrs	r2, r3, #8
 800189a:	7c7b      	ldrb	r3, [r7, #17]
 800189c:	b2d1      	uxtb	r1, r2
 800189e:	4a22      	ldr	r2, [pc, #136]	; (8001928 <L6474_CmdSetParam+0x1c0>)
 80018a0:	4413      	add	r3, r2
 80018a2:	460a      	mov	r2, r1
 80018a4:	719a      	strb	r2, [r3, #6]
        maxArgumentNbBytes = 2;
 80018a6:	2302      	movs	r3, #2
 80018a8:	74fb      	strb	r3, [r7, #19]
        break;
 80018aa:	e008      	b.n	80018be <L6474_CmdSetParam+0x156>
    default:
        spiTxBursts[2][spiIndex] = param;
 80018ac:	7c7b      	ldrb	r3, [r7, #17]
 80018ae:	68ba      	ldr	r2, [r7, #8]
 80018b0:	b2d1      	uxtb	r1, r2
 80018b2:	4a1d      	ldr	r2, [pc, #116]	; (8001928 <L6474_CmdSetParam+0x1c0>)
 80018b4:	4413      	add	r3, r2
 80018b6:	460a      	mov	r2, r1
 80018b8:	719a      	strb	r2, [r3, #6]
        maxArgumentNbBytes = 1;
 80018ba:	2301      	movs	r3, #1
 80018bc:	74fb      	strb	r3, [r7, #19]
    }
    spiTxBursts[3][spiIndex] = (uint8_t)(value);
 80018be:	7c7b      	ldrb	r3, [r7, #17]
 80018c0:	687a      	ldr	r2, [r7, #4]
 80018c2:	b2d1      	uxtb	r1, r2
 80018c4:	4a18      	ldr	r2, [pc, #96]	; (8001928 <L6474_CmdSetParam+0x1c0>)
 80018c6:	4413      	add	r3, r2
 80018c8:	460a      	mov	r2, r1
 80018ca:	725a      	strb	r2, [r3, #9]
    
    /* Disable interruption before checking */
    /* pre-emption by ISR and SPI transfers*/
    L6474_Board_DisableIrq();
 80018cc:	f002 fa85 	bl	8003dda <L6474_Board_DisableIrq>
    itDisable = TRUE;
 80018d0:	2301      	movs	r3, #1
 80018d2:	74bb      	strb	r3, [r7, #18]
  } while (spiPreemtionByIsr); // check pre-emption by ISR
 80018d4:	4b13      	ldr	r3, [pc, #76]	; (8001924 <L6474_CmdSetParam+0x1bc>)
 80018d6:	781b      	ldrb	r3, [r3, #0]
 80018d8:	b2db      	uxtb	r3, r3
 80018da:	2b00      	cmp	r3, #0
 80018dc:	f47f af57 	bne.w	800178e <L6474_CmdSetParam+0x26>
 
  /* SPI transfer */
  for (i = L6474_CMD_ARG_MAX_NB_BYTES-1-maxArgumentNbBytes;
 80018e0:	7cfb      	ldrb	r3, [r7, #19]
 80018e2:	f1c3 0303 	rsb	r3, r3, #3
 80018e6:	617b      	str	r3, [r7, #20]
 80018e8:	e011      	b.n	800190e <L6474_CmdSetParam+0x1a6>
       i < L6474_CMD_ARG_MAX_NB_BYTES;
       i++)
  {
     L6474_WriteBytes(&spiTxBursts[i][0],&spiRxBursts[i][0]);
 80018ea:	697a      	ldr	r2, [r7, #20]
 80018ec:	4613      	mov	r3, r2
 80018ee:	005b      	lsls	r3, r3, #1
 80018f0:	4413      	add	r3, r2
 80018f2:	4a0d      	ldr	r2, [pc, #52]	; (8001928 <L6474_CmdSetParam+0x1c0>)
 80018f4:	1898      	adds	r0, r3, r2
 80018f6:	697a      	ldr	r2, [r7, #20]
 80018f8:	4613      	mov	r3, r2
 80018fa:	005b      	lsls	r3, r3, #1
 80018fc:	4413      	add	r3, r2
 80018fe:	4a0b      	ldr	r2, [pc, #44]	; (800192c <L6474_CmdSetParam+0x1c4>)
 8001900:	4413      	add	r3, r2
 8001902:	4619      	mov	r1, r3
 8001904:	f000 ff8e 	bl	8002824 <L6474_WriteBytes>
       i++)
 8001908:	697b      	ldr	r3, [r7, #20]
 800190a:	3301      	adds	r3, #1
 800190c:	617b      	str	r3, [r7, #20]
  for (i = L6474_CMD_ARG_MAX_NB_BYTES-1-maxArgumentNbBytes;
 800190e:	697b      	ldr	r3, [r7, #20]
 8001910:	2b03      	cmp	r3, #3
 8001912:	d9ea      	bls.n	80018ea <L6474_CmdSetParam+0x182>
  }
  /* re-enable L6474_Board_EnableIrq after SPI transfers*/
  L6474_Board_EnableIrq();
 8001914:	f002 fa6a 	bl	8003dec <L6474_Board_EnableIrq>
}
 8001918:	bf00      	nop
 800191a:	3718      	adds	r7, #24
 800191c:	46bd      	mov	sp, r7
 800191e:	bd80      	pop	{r7, pc}
 8001920:	20000514 	.word	0x20000514
 8001924:	20000530 	.word	0x20000530
 8001928:	20000518 	.word	0x20000518
 800192c:	20000524 	.word	0x20000524

08001930 <L6474_Init>:
 * @brief Starts a new L6474 instance 
 * @param[in] pInit pointer to the initialization data
 * @retval None
 **********************************************************/
void L6474_Init(void* pInit)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	b082      	sub	sp, #8
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
  /* Initialise the GPIOs */
  L6474_Board_GpioInit(l6474DriverInstance);
 8001938:	4b22      	ldr	r3, [pc, #136]	; (80019c4 <L6474_Init+0x94>)
 800193a:	881b      	ldrh	r3, [r3, #0]
 800193c:	b2db      	uxtb	r3, r3
 800193e:	4618      	mov	r0, r3
 8001940:	f002 fa5e 	bl	8003e00 <L6474_Board_GpioInit>
  
  if(L6474_Board_SpiInit() != 0)
 8001944:	f002 fc58 	bl	80041f8 <L6474_Board_SpiInit>
 8001948:	4603      	mov	r3, r0
 800194a:	2b00      	cmp	r3, #0
 800194c:	d003      	beq.n	8001956 <L6474_Init+0x26>
  {
    /* Initialization Error */
    L6474_ErrorHandler(L6474_ERROR_0);
 800194e:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8001952:	f000 fb8f 	bl	8002074 <L6474_ErrorHandler>
  } 

  /* Initialise the PWMs used for the Step clocks ----------------------------*/
  L6474_Board_PwmInit(l6474DriverInstance);
 8001956:	4b1b      	ldr	r3, [pc, #108]	; (80019c4 <L6474_Init+0x94>)
 8001958:	881b      	ldrh	r3, [r3, #0]
 800195a:	b2db      	uxtb	r3, r3
 800195c:	4618      	mov	r0, r3
 800195e:	f002 fb77 	bl	8004050 <L6474_Board_PwmInit>
 
  /* Standby-reset deactivation */
  L6474_Board_ReleaseReset(l6474DriverInstance);
 8001962:	4b18      	ldr	r3, [pc, #96]	; (80019c4 <L6474_Init+0x94>)
 8001964:	881b      	ldrh	r3, [r3, #0]
 8001966:	b2db      	uxtb	r3, r3
 8001968:	4618      	mov	r0, r3
 800196a:	f002 fbf1 	bl	8004150 <L6474_Board_ReleaseReset>
  
  /* Let a delay after reset */
  L6474_Board_Delay(1); 
 800196e:	2001      	movs	r0, #1
 8001970:	f002 fa28 	bl	8003dc4 <L6474_Board_Delay>
  
  /* Set all registers and context variables to the predefined values from l6474_target_config.h */
  if (pInit == 0)
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	2b00      	cmp	r3, #0
 8001978:	d106      	bne.n	8001988 <L6474_Init+0x58>
  {
    L6474_SetDeviceParamsToPredefinedValues(l6474DriverInstance);
 800197a:	4b12      	ldr	r3, [pc, #72]	; (80019c4 <L6474_Init+0x94>)
 800197c:	881b      	ldrh	r3, [r3, #0]
 800197e:	b2db      	uxtb	r3, r3
 8001980:	4618      	mov	r0, r3
 8001982:	f000 fc83 	bl	800228c <L6474_SetDeviceParamsToPredefinedValues>
 8001986:	e006      	b.n	8001996 <L6474_Init+0x66>
  }
  else
  {
    L6474_SetDeviceParamsToGivenValues(l6474DriverInstance, pInit);
 8001988:	4b0e      	ldr	r3, [pc, #56]	; (80019c4 <L6474_Init+0x94>)
 800198a:	881b      	ldrh	r3, [r3, #0]
 800198c:	b2db      	uxtb	r3, r3
 800198e:	6879      	ldr	r1, [r7, #4]
 8001990:	4618      	mov	r0, r3
 8001992:	f000 fbd7 	bl	8002144 <L6474_SetDeviceParamsToGivenValues>
  }
  /* Disable L6474 powerstage */
  L6474_CmdDisable(l6474DriverInstance);
 8001996:	4b0b      	ldr	r3, [pc, #44]	; (80019c4 <L6474_Init+0x94>)
 8001998:	881b      	ldrh	r3, [r3, #0]
 800199a:	b2db      	uxtb	r3, r3
 800199c:	4618      	mov	r0, r3
 800199e:	f7ff fd4f 	bl	8001440 <L6474_CmdDisable>

  /* Get Status to clear flags after start up */
  L6474_CmdGetStatus(l6474DriverInstance);
 80019a2:	4b08      	ldr	r3, [pc, #32]	; (80019c4 <L6474_Init+0x94>)
 80019a4:	881b      	ldrh	r3, [r3, #0]
 80019a6:	b2db      	uxtb	r3, r3
 80019a8:	4618      	mov	r0, r3
 80019aa:	f7ff fe57 	bl	800165c <L6474_CmdGetStatus>

  l6474DriverInstance++;
 80019ae:	4b05      	ldr	r3, [pc, #20]	; (80019c4 <L6474_Init+0x94>)
 80019b0:	881b      	ldrh	r3, [r3, #0]
 80019b2:	3301      	adds	r3, #1
 80019b4:	b29a      	uxth	r2, r3
 80019b6:	4b03      	ldr	r3, [pc, #12]	; (80019c4 <L6474_Init+0x94>)
 80019b8:	801a      	strh	r2, [r3, #0]
}
 80019ba:	bf00      	nop
 80019bc:	3708      	adds	r7, #8
 80019be:	46bd      	mov	sp, r7
 80019c0:	bd80      	pop	{r7, pc}
 80019c2:	bf00      	nop
 80019c4:	20000532 	.word	0x20000532

080019c8 <L6474_GetCurrentSpeed>:
 * @brief Returns the current speed of the specified device
 * @param[in] deviceId (from 0 to 2)
 * @retval Speed in pps
 **********************************************************/
uint16_t L6474_GetCurrentSpeed(uint8_t deviceId)
{
 80019c8:	b480      	push	{r7}
 80019ca:	b083      	sub	sp, #12
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	4603      	mov	r3, r0
 80019d0:	71fb      	strb	r3, [r7, #7]
  return devicePrm[deviceId].speed;
 80019d2:	79fa      	ldrb	r2, [r7, #7]
 80019d4:	4907      	ldr	r1, [pc, #28]	; (80019f4 <L6474_GetCurrentSpeed+0x2c>)
 80019d6:	4613      	mov	r3, r2
 80019d8:	009b      	lsls	r3, r3, #2
 80019da:	4413      	add	r3, r2
 80019dc:	00db      	lsls	r3, r3, #3
 80019de:	440b      	add	r3, r1
 80019e0:	3320      	adds	r3, #32
 80019e2:	881b      	ldrh	r3, [r3, #0]
 80019e4:	b29b      	uxth	r3, r3
}
 80019e6:	4618      	mov	r0, r3
 80019e8:	370c      	adds	r7, #12
 80019ea:	46bd      	mov	sp, r7
 80019ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f0:	4770      	bx	lr
 80019f2:	bf00      	nop
 80019f4:	20000534 	.word	0x20000534

080019f8 <L6474_HardStop>:
 * @brief  Immediatly stops the motor 
 * @param[in] deviceId (from 0 to 2)
 * @retval None
 **********************************************************/
void L6474_HardStop(uint8_t deviceId) 
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b082      	sub	sp, #8
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	4603      	mov	r3, r0
 8001a00:	71fb      	strb	r3, [r7, #7]
  if (devicePrm[deviceId].stopMode == HOLD_MODE)
 8001a02:	79fa      	ldrb	r2, [r7, #7]
 8001a04:	4920      	ldr	r1, [pc, #128]	; (8001a88 <L6474_HardStop+0x90>)
 8001a06:	4613      	mov	r3, r2
 8001a08:	009b      	lsls	r3, r3, #2
 8001a0a:	4413      	add	r3, r2
 8001a0c:	00db      	lsls	r3, r3, #3
 8001a0e:	440b      	add	r3, r1
 8001a10:	3325      	adds	r3, #37	; 0x25
 8001a12:	781b      	ldrb	r3, [r3, #0]
 8001a14:	b2db      	uxtb	r3, r3
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d12d      	bne.n	8001a76 <L6474_HardStop+0x7e>
  {
    /* Disable corresponding PWM */
    L6474_Board_PwmStop(deviceId);
 8001a1a:	79fb      	ldrb	r3, [r7, #7]
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	f002 fb6d 	bl	80040fc <L6474_Board_PwmStop>

    /* Set inactive state */
    devicePrm[deviceId].motionState = INACTIVE;
 8001a22:	79fa      	ldrb	r2, [r7, #7]
 8001a24:	4918      	ldr	r1, [pc, #96]	; (8001a88 <L6474_HardStop+0x90>)
 8001a26:	4613      	mov	r3, r2
 8001a28:	009b      	lsls	r3, r3, #2
 8001a2a:	4413      	add	r3, r2
 8001a2c:	00db      	lsls	r3, r3, #3
 8001a2e:	440b      	add	r3, r1
 8001a30:	3324      	adds	r3, #36	; 0x24
 8001a32:	2208      	movs	r2, #8
 8001a34:	701a      	strb	r2, [r3, #0]
    devicePrm[deviceId].commandExecuted = NO_CMD;
 8001a36:	79fa      	ldrb	r2, [r7, #7]
 8001a38:	4913      	ldr	r1, [pc, #76]	; (8001a88 <L6474_HardStop+0x90>)
 8001a3a:	4613      	mov	r3, r2
 8001a3c:	009b      	lsls	r3, r3, #2
 8001a3e:	4413      	add	r3, r2
 8001a40:	00db      	lsls	r3, r3, #3
 8001a42:	440b      	add	r3, r1
 8001a44:	3322      	adds	r3, #34	; 0x22
 8001a46:	2203      	movs	r2, #3
 8001a48:	701a      	strb	r2, [r3, #0]
    devicePrm[deviceId].stepsToTake = MAX_STEPS;  
 8001a4a:	79fa      	ldrb	r2, [r7, #7]
 8001a4c:	490e      	ldr	r1, [pc, #56]	; (8001a88 <L6474_HardStop+0x90>)
 8001a4e:	4613      	mov	r3, r2
 8001a50:	009b      	lsls	r3, r3, #2
 8001a52:	4413      	add	r3, r2
 8001a54:	00db      	lsls	r3, r3, #3
 8001a56:	440b      	add	r3, r1
 8001a58:	3314      	adds	r3, #20
 8001a5a:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8001a5e:	601a      	str	r2, [r3, #0]
    devicePrm[deviceId].speed = 0;
 8001a60:	79fa      	ldrb	r2, [r7, #7]
 8001a62:	4909      	ldr	r1, [pc, #36]	; (8001a88 <L6474_HardStop+0x90>)
 8001a64:	4613      	mov	r3, r2
 8001a66:	009b      	lsls	r3, r3, #2
 8001a68:	4413      	add	r3, r2
 8001a6a:	00db      	lsls	r3, r3, #3
 8001a6c:	440b      	add	r3, r1
 8001a6e:	3320      	adds	r3, #32
 8001a70:	2200      	movs	r2, #0
 8001a72:	801a      	strh	r2, [r3, #0]
  else
  {
    //same handling for HIZ_MODE and STANDBY_MODE
    L6474_HizStop(deviceId);
  }
}
 8001a74:	e003      	b.n	8001a7e <L6474_HardStop+0x86>
    L6474_HizStop(deviceId);
 8001a76:	79fb      	ldrb	r3, [r7, #7]
 8001a78:	4618      	mov	r0, r3
 8001a7a:	f000 f807 	bl	8001a8c <L6474_HizStop>
}
 8001a7e:	bf00      	nop
 8001a80:	3708      	adds	r7, #8
 8001a82:	46bd      	mov	sp, r7
 8001a84:	bd80      	pop	{r7, pc}
 8001a86:	bf00      	nop
 8001a88:	20000534 	.word	0x20000534

08001a8c <L6474_HizStop>:
 * @brief  Immediatly stops the motor and disable the power bridge
 * @param[in] deviceId (from 0 to 2)
 * @retval None
 **********************************************************/
void L6474_HizStop(uint8_t deviceId) 
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b082      	sub	sp, #8
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	4603      	mov	r3, r0
 8001a94:	71fb      	strb	r3, [r7, #7]
  /* Disable corresponding PWM */
  L6474_Board_PwmStop(deviceId);
 8001a96:	79fb      	ldrb	r3, [r7, #7]
 8001a98:	4618      	mov	r0, r3
 8001a9a:	f002 fb2f 	bl	80040fc <L6474_Board_PwmStop>

  /* Disable power stage */
  L6474_CmdDisable(deviceId);
 8001a9e:	79fb      	ldrb	r3, [r7, #7]
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	f7ff fccd 	bl	8001440 <L6474_CmdDisable>

  /* Set inactive state */
  devicePrm[deviceId].motionState = INACTIVE;
 8001aa6:	79fa      	ldrb	r2, [r7, #7]
 8001aa8:	4915      	ldr	r1, [pc, #84]	; (8001b00 <L6474_HizStop+0x74>)
 8001aaa:	4613      	mov	r3, r2
 8001aac:	009b      	lsls	r3, r3, #2
 8001aae:	4413      	add	r3, r2
 8001ab0:	00db      	lsls	r3, r3, #3
 8001ab2:	440b      	add	r3, r1
 8001ab4:	3324      	adds	r3, #36	; 0x24
 8001ab6:	2208      	movs	r2, #8
 8001ab8:	701a      	strb	r2, [r3, #0]
  devicePrm[deviceId].commandExecuted = NO_CMD;
 8001aba:	79fa      	ldrb	r2, [r7, #7]
 8001abc:	4910      	ldr	r1, [pc, #64]	; (8001b00 <L6474_HizStop+0x74>)
 8001abe:	4613      	mov	r3, r2
 8001ac0:	009b      	lsls	r3, r3, #2
 8001ac2:	4413      	add	r3, r2
 8001ac4:	00db      	lsls	r3, r3, #3
 8001ac6:	440b      	add	r3, r1
 8001ac8:	3322      	adds	r3, #34	; 0x22
 8001aca:	2203      	movs	r2, #3
 8001acc:	701a      	strb	r2, [r3, #0]
  devicePrm[deviceId].stepsToTake = MAX_STEPS;  
 8001ace:	79fa      	ldrb	r2, [r7, #7]
 8001ad0:	490b      	ldr	r1, [pc, #44]	; (8001b00 <L6474_HizStop+0x74>)
 8001ad2:	4613      	mov	r3, r2
 8001ad4:	009b      	lsls	r3, r3, #2
 8001ad6:	4413      	add	r3, r2
 8001ad8:	00db      	lsls	r3, r3, #3
 8001ada:	440b      	add	r3, r1
 8001adc:	3314      	adds	r3, #20
 8001ade:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8001ae2:	601a      	str	r2, [r3, #0]
  devicePrm[deviceId].speed = 0;
 8001ae4:	79fa      	ldrb	r2, [r7, #7]
 8001ae6:	4906      	ldr	r1, [pc, #24]	; (8001b00 <L6474_HizStop+0x74>)
 8001ae8:	4613      	mov	r3, r2
 8001aea:	009b      	lsls	r3, r3, #2
 8001aec:	4413      	add	r3, r2
 8001aee:	00db      	lsls	r3, r3, #3
 8001af0:	440b      	add	r3, r1
 8001af2:	3320      	adds	r3, #32
 8001af4:	2200      	movs	r2, #0
 8001af6:	801a      	strh	r2, [r3, #0]
}
 8001af8:	bf00      	nop
 8001afa:	3708      	adds	r7, #8
 8001afc:	46bd      	mov	sp, r7
 8001afe:	bd80      	pop	{r7, pc}
 8001b00:	20000534 	.word	0x20000534

08001b04 <L6474_Run>:
 * @param[in] deviceId (from 0 to 2)
 * @param[in] direction FORWARD or BACKWARD
 * @retval None
 **********************************************************/
void L6474_Run(uint8_t deviceId, motorDir_t direction)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b082      	sub	sp, #8
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	4603      	mov	r3, r0
 8001b0c:	460a      	mov	r2, r1
 8001b0e:	71fb      	strb	r3, [r7, #7]
 8001b10:	4613      	mov	r3, r2
 8001b12:	71bb      	strb	r3, [r7, #6]
  /* If required deactivate motor */
  if (devicePrm[deviceId].motionState != INACTIVE) 
 8001b14:	79fa      	ldrb	r2, [r7, #7]
 8001b16:	4913      	ldr	r1, [pc, #76]	; (8001b64 <L6474_Run+0x60>)
 8001b18:	4613      	mov	r3, r2
 8001b1a:	009b      	lsls	r3, r3, #2
 8001b1c:	4413      	add	r3, r2
 8001b1e:	00db      	lsls	r3, r3, #3
 8001b20:	440b      	add	r3, r1
 8001b22:	3324      	adds	r3, #36	; 0x24
 8001b24:	781b      	ldrb	r3, [r3, #0]
 8001b26:	b2db      	uxtb	r3, r3
 8001b28:	2b08      	cmp	r3, #8
 8001b2a:	d003      	beq.n	8001b34 <L6474_Run+0x30>
  {
    L6474_HardStop(deviceId);
 8001b2c:	79fb      	ldrb	r3, [r7, #7]
 8001b2e:	4618      	mov	r0, r3
 8001b30:	f7ff ff62 	bl	80019f8 <L6474_HardStop>
  }
  
	/* Direction setup */
	L6474_SetDirection(deviceId,direction);
 8001b34:	79ba      	ldrb	r2, [r7, #6]
 8001b36:	79fb      	ldrb	r3, [r7, #7]
 8001b38:	4611      	mov	r1, r2
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	f000 f962 	bl	8001e04 <L6474_SetDirection>

	devicePrm[deviceId].commandExecuted = RUN_CMD;
 8001b40:	79fa      	ldrb	r2, [r7, #7]
 8001b42:	4908      	ldr	r1, [pc, #32]	; (8001b64 <L6474_Run+0x60>)
 8001b44:	4613      	mov	r3, r2
 8001b46:	009b      	lsls	r3, r3, #2
 8001b48:	4413      	add	r3, r2
 8001b4a:	00db      	lsls	r3, r3, #3
 8001b4c:	440b      	add	r3, r1
 8001b4e:	3322      	adds	r3, #34	; 0x22
 8001b50:	2200      	movs	r2, #0
 8001b52:	701a      	strb	r2, [r3, #0]

	/* Motor activation */
	L6474_StartMovement(deviceId); 
 8001b54:	79fb      	ldrb	r3, [r7, #7]
 8001b56:	4618      	mov	r0, r3
 8001b58:	f000 fdac 	bl	80026b4 <L6474_StartMovement>
}
 8001b5c:	bf00      	nop
 8001b5e:	3708      	adds	r7, #8
 8001b60:	46bd      	mov	sp, r7
 8001b62:	bd80      	pop	{r7, pc}
 8001b64:	20000534 	.word	0x20000534

08001b68 <L6474_SelectStepMode>:
 * @param[in] deviceId (from 0 to 2)
 * @param[in] stepMod from full step to 1/16 microstep as specified in enum motorStepMode_t
 * @retval None
 **********************************************************/
bool L6474_SelectStepMode(uint8_t deviceId, motorStepMode_t stepMod)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b084      	sub	sp, #16
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	4603      	mov	r3, r0
 8001b70:	460a      	mov	r2, r1
 8001b72:	71fb      	strb	r3, [r7, #7]
 8001b74:	4613      	mov	r3, r2
 8001b76:	71bb      	strb	r3, [r7, #6]
  uint8_t stepModeRegister;
  L6474_STEP_SEL_t l6474StepMod;
  
  switch (stepMod)
 8001b78:	79bb      	ldrb	r3, [r7, #6]
 8001b7a:	2b03      	cmp	r3, #3
 8001b7c:	d816      	bhi.n	8001bac <L6474_SelectStepMode+0x44>
 8001b7e:	a201      	add	r2, pc, #4	; (adr r2, 8001b84 <L6474_SelectStepMode+0x1c>)
 8001b80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b84:	08001b95 	.word	0x08001b95
 8001b88:	08001b9b 	.word	0x08001b9b
 8001b8c:	08001ba1 	.word	0x08001ba1
 8001b90:	08001ba7 	.word	0x08001ba7
  {
    case STEP_MODE_FULL:
      l6474StepMod = L6474_STEP_SEL_1;
 8001b94:	2308      	movs	r3, #8
 8001b96:	73fb      	strb	r3, [r7, #15]
      break;
 8001b98:	e00b      	b.n	8001bb2 <L6474_SelectStepMode+0x4a>
    case STEP_MODE_HALF:
      l6474StepMod = L6474_STEP_SEL_1_2;
 8001b9a:	2309      	movs	r3, #9
 8001b9c:	73fb      	strb	r3, [r7, #15]
      break;    
 8001b9e:	e008      	b.n	8001bb2 <L6474_SelectStepMode+0x4a>
    case STEP_MODE_1_4:
      l6474StepMod = L6474_STEP_SEL_1_4;
 8001ba0:	230a      	movs	r3, #10
 8001ba2:	73fb      	strb	r3, [r7, #15]
      break;        
 8001ba4:	e005      	b.n	8001bb2 <L6474_SelectStepMode+0x4a>
    case STEP_MODE_1_8:
      l6474StepMod = L6474_STEP_SEL_1_8;
 8001ba6:	230b      	movs	r3, #11
 8001ba8:	73fb      	strb	r3, [r7, #15]
      break;       
 8001baa:	e002      	b.n	8001bb2 <L6474_SelectStepMode+0x4a>
    case STEP_MODE_1_16:
    default:
      l6474StepMod = L6474_STEP_SEL_1_16;
 8001bac:	230c      	movs	r3, #12
 8001bae:	73fb      	strb	r3, [r7, #15]
      break;       
 8001bb0:	bf00      	nop
  }

  /* Deactivate motor*/
  L6474_HizStop(deviceId);
 8001bb2:	79fb      	ldrb	r3, [r7, #7]
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	f7ff ff69 	bl	8001a8c <L6474_HizStop>
  
  /* Read Step mode register and clear STEP_SEL field */
  stepModeRegister = (uint8_t)(0xF8 & L6474_CmdGetParam(deviceId,L6474_STEP_MODE)) ;
 8001bba:	79fb      	ldrb	r3, [r7, #7]
 8001bbc:	2116      	movs	r1, #22
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	f7ff fc5a 	bl	8001478 <L6474_CmdGetParam>
 8001bc4:	4603      	mov	r3, r0
 8001bc6:	b2db      	uxtb	r3, r3
 8001bc8:	f023 0307 	bic.w	r3, r3, #7
 8001bcc:	73bb      	strb	r3, [r7, #14]
  
  /* Apply new step mode */
  L6474_CmdSetParam(deviceId, L6474_STEP_MODE, stepModeRegister | (uint8_t)l6474StepMod);
 8001bce:	7bba      	ldrb	r2, [r7, #14]
 8001bd0:	7bfb      	ldrb	r3, [r7, #15]
 8001bd2:	4313      	orrs	r3, r2
 8001bd4:	b2db      	uxtb	r3, r3
 8001bd6:	461a      	mov	r2, r3
 8001bd8:	79fb      	ldrb	r3, [r7, #7]
 8001bda:	2116      	movs	r1, #22
 8001bdc:	4618      	mov	r0, r3
 8001bde:	f7ff fdc3 	bl	8001768 <L6474_CmdSetParam>

  /* Reset abs pos register */
  L6474_CmdSetParam(deviceId, L6474_ABS_POS, 0);
 8001be2:	79fb      	ldrb	r3, [r7, #7]
 8001be4:	2200      	movs	r2, #0
 8001be6:	2101      	movs	r1, #1
 8001be8:	4618      	mov	r0, r3
 8001bea:	f7ff fdbd 	bl	8001768 <L6474_CmdSetParam>
  
  return (1);
 8001bee:	2301      	movs	r3, #1
}
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	3710      	adds	r7, #16
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	bd80      	pop	{r7, pc}

08001bf8 <L6474_SetAnalogValue>:
 * L6474_TVAL, L6474_TON_MIN, L6474_TOFF_MIN, L6474_OCD_TH)
 * @param[in] value Analog value to convert and set into the register
 * @retval TRUE if param and param is valid, FALSE otherwise
 *********************************************************/
bool L6474_SetAnalogValue(uint8_t deviceId, uint32_t param, float value)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b086      	sub	sp, #24
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	4603      	mov	r3, r0
 8001c00:	60b9      	str	r1, [r7, #8]
 8001c02:	ed87 0a01 	vstr	s0, [r7, #4]
 8001c06:	73fb      	strb	r3, [r7, #15]
  uint32_t registerValue;
  bool result = TRUE;
 8001c08:	2301      	movs	r3, #1
 8001c0a:	74fb      	strb	r3, [r7, #19]
  if ((value < 0)&&(param != L6474_ABS_POS)&&(param != L6474_MARK)) 
 8001c0c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001c10:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001c14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c18:	d508      	bpl.n	8001c2c <L6474_SetAnalogValue+0x34>
 8001c1a:	68bb      	ldr	r3, [r7, #8]
 8001c1c:	2b01      	cmp	r3, #1
 8001c1e:	d005      	beq.n	8001c2c <L6474_SetAnalogValue+0x34>
 8001c20:	68bb      	ldr	r3, [r7, #8]
 8001c22:	2b03      	cmp	r3, #3
 8001c24:	d002      	beq.n	8001c2c <L6474_SetAnalogValue+0x34>
  {
    result = FALSE;
 8001c26:	2300      	movs	r3, #0
 8001c28:	74fb      	strb	r3, [r7, #19]
 8001c2a:	e0d9      	b.n	8001de0 <L6474_SetAnalogValue+0x1e8>
  }
  else
  {
    switch (param)
 8001c2c:	68bb      	ldr	r3, [r7, #8]
 8001c2e:	3b01      	subs	r3, #1
 8001c30:	2b12      	cmp	r3, #18
 8001c32:	f200 80ca 	bhi.w	8001dca <L6474_SetAnalogValue+0x1d2>
 8001c36:	a201      	add	r2, pc, #4	; (adr r2, 8001c3c <L6474_SetAnalogValue+0x44>)
 8001c38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c3c:	08001cef 	.word	0x08001cef
 8001c40:	08001c89 	.word	0x08001c89
 8001c44:	08001cef 	.word	0x08001cef
 8001c48:	08001dcb 	.word	0x08001dcb
 8001c4c:	08001dcb 	.word	0x08001dcb
 8001c50:	08001dcb 	.word	0x08001dcb
 8001c54:	08001dcb 	.word	0x08001dcb
 8001c58:	08001dcb 	.word	0x08001dcb
 8001c5c:	08001d59 	.word	0x08001d59
 8001c60:	08001dcb 	.word	0x08001dcb
 8001c64:	08001dcb 	.word	0x08001dcb
 8001c68:	08001dcb 	.word	0x08001dcb
 8001c6c:	08001dcb 	.word	0x08001dcb
 8001c70:	08001dcb 	.word	0x08001dcb
 8001c74:	08001da5 	.word	0x08001da5
 8001c78:	08001da5 	.word	0x08001da5
 8001c7c:	08001dcb 	.word	0x08001dcb
 8001c80:	08001dcb 	.word	0x08001dcb
 8001c84:	08001d7f 	.word	0x08001d7f
    {
      case L6474_EL_POS:
        if  ((value !=0)&&
 8001c88:	edd7 7a01 	vldr	s15, [r7, #4]
 8001c8c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001c90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c94:	d021      	beq.n	8001cda <L6474_SetAnalogValue+0xe2>
 8001c96:	edd7 7a01 	vldr	s15, [r7, #4]
 8001c9a:	ed9f 7a54 	vldr	s14, [pc, #336]	; 8001dec <L6474_SetAnalogValue+0x1f4>
 8001c9e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001ca2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ca6:	dc15      	bgt.n	8001cd4 <L6474_SetAnalogValue+0xdc>
            ((value > (L6474_ELPOS_STEP_MASK | L6474_ELPOS_MICROSTEP_MASK))||
             (value < (1<<(7-(L6474_STEP_MODE_STEP_SEL & L6474_CmdGetParam(0,L6474_STEP_MODE)))))))
 8001ca8:	2116      	movs	r1, #22
 8001caa:	2000      	movs	r0, #0
 8001cac:	f7ff fbe4 	bl	8001478 <L6474_CmdGetParam>
 8001cb0:	4603      	mov	r3, r0
 8001cb2:	43db      	mvns	r3, r3
 8001cb4:	f003 0307 	and.w	r3, r3, #7
 8001cb8:	2201      	movs	r2, #1
 8001cba:	fa02 f303 	lsl.w	r3, r2, r3
 8001cbe:	ee07 3a90 	vmov	s15, r3
 8001cc2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
            ((value > (L6474_ELPOS_STEP_MASK | L6474_ELPOS_MICROSTEP_MASK))||
 8001cc6:	ed97 7a01 	vldr	s14, [r7, #4]
 8001cca:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001cce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cd2:	d502      	bpl.n	8001cda <L6474_SetAnalogValue+0xe2>
        {
          result = FALSE;
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	74fb      	strb	r3, [r7, #19]
        }
        else
        {
          registerValue = ((uint32_t) value)& (L6474_ELPOS_STEP_MASK | L6474_ELPOS_MICROSTEP_MASK);
        }
        break;
 8001cd8:	e079      	b.n	8001dce <L6474_SetAnalogValue+0x1d6>
          registerValue = ((uint32_t) value)& (L6474_ELPOS_STEP_MASK | L6474_ELPOS_MICROSTEP_MASK);
 8001cda:	edd7 7a01 	vldr	s15, [r7, #4]
 8001cde:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001ce2:	ee17 3a90 	vmov	r3, s15
 8001ce6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001cea:	617b      	str	r3, [r7, #20]
        break;
 8001cec:	e06f      	b.n	8001dce <L6474_SetAnalogValue+0x1d6>
      case L6474_ABS_POS:
      case L6474_MARK:
        if ((value >= L6474_MIN_POSITION) &&
 8001cee:	edd7 7a01 	vldr	s15, [r7, #4]
 8001cf2:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 8001df0 <L6474_SetAnalogValue+0x1f8>
 8001cf6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001cfa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cfe:	db27      	blt.n	8001d50 <L6474_SetAnalogValue+0x158>
 8001d00:	edd7 7a01 	vldr	s15, [r7, #4]
 8001d04:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 8001df4 <L6474_SetAnalogValue+0x1fc>
 8001d08:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001d0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d10:	d81e      	bhi.n	8001d50 <L6474_SetAnalogValue+0x158>
            (value <= L6474_MAX_POSITION))
        {
          if (value >= 0)
 8001d12:	edd7 7a01 	vldr	s15, [r7, #4]
 8001d16:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001d1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d1e:	db09      	blt.n	8001d34 <L6474_SetAnalogValue+0x13c>
          {
            registerValue = ((uint32_t) value)& L6474_ABS_POS_VALUE_MASK;
 8001d20:	edd7 7a01 	vldr	s15, [r7, #4]
 8001d24:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001d28:	ee17 3a90 	vmov	r3, s15
 8001d2c:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8001d30:	617b      	str	r3, [r7, #20]
          if (value >= 0)
 8001d32:	e010      	b.n	8001d56 <L6474_SetAnalogValue+0x15e>
          }
          else
          {
            registerValue = L6474_ABS_POS_VALUE_MASK - (((uint32_t) (-value))& L6474_ABS_POS_VALUE_MASK) + 1;
 8001d34:	edd7 7a01 	vldr	s15, [r7, #4]
 8001d38:	eef1 7a67 	vneg.f32	s15, s15
 8001d3c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001d40:	ee17 3a90 	vmov	r3, s15
 8001d44:	43db      	mvns	r3, r3
 8001d46:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8001d4a:	3301      	adds	r3, #1
 8001d4c:	617b      	str	r3, [r7, #20]
          if (value >= 0)
 8001d4e:	e002      	b.n	8001d56 <L6474_SetAnalogValue+0x15e>
          }
        }
        else 
        {
          result = FALSE;
 8001d50:	2300      	movs	r3, #0
 8001d52:	74fb      	strb	r3, [r7, #19]
        }
        break;
 8001d54:	e03b      	b.n	8001dce <L6474_SetAnalogValue+0x1d6>
 8001d56:	e03a      	b.n	8001dce <L6474_SetAnalogValue+0x1d6>
      case L6474_TVAL:
        if (value > L6474_TVAL_MAX_VALUE)
 8001d58:	edd7 7a01 	vldr	s15, [r7, #4]
 8001d5c:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8001df8 <L6474_SetAnalogValue+0x200>
 8001d60:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001d64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d68:	dd02      	ble.n	8001d70 <L6474_SetAnalogValue+0x178>
        {
          result = FALSE;
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	74fb      	strb	r3, [r7, #19]
        }
        else
        {
          registerValue = L6474_Tval_Current_to_Par(value);
        }
        break;
 8001d6e:	e02e      	b.n	8001dce <L6474_SetAnalogValue+0x1d6>
          registerValue = L6474_Tval_Current_to_Par(value);
 8001d70:	ed97 0a01 	vldr	s0, [r7, #4]
 8001d74:	f000 fd14 	bl	80027a0 <L6474_Tval_Current_to_Par>
 8001d78:	4603      	mov	r3, r0
 8001d7a:	617b      	str	r3, [r7, #20]
        break;
 8001d7c:	e027      	b.n	8001dce <L6474_SetAnalogValue+0x1d6>
      case L6474_OCD_TH:
        if (value > L6474_OCD_TH_MAX_VALUE)
 8001d7e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001d82:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8001dfc <L6474_SetAnalogValue+0x204>
 8001d86:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001d8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d8e:	dd02      	ble.n	8001d96 <L6474_SetAnalogValue+0x19e>
        {
          result = FALSE;
 8001d90:	2300      	movs	r3, #0
 8001d92:	74fb      	strb	r3, [r7, #19]
        }
        else 
        {
          registerValue = L6474_Ocd_Th_to_Par(value);
        }
        break;
 8001d94:	e01b      	b.n	8001dce <L6474_SetAnalogValue+0x1d6>
          registerValue = L6474_Ocd_Th_to_Par(value);
 8001d96:	ed97 0a01 	vldr	s0, [r7, #4]
 8001d9a:	f000 fcdd 	bl	8002758 <L6474_Ocd_Th_to_Par>
 8001d9e:	4603      	mov	r3, r0
 8001da0:	617b      	str	r3, [r7, #20]
        break;
 8001da2:	e014      	b.n	8001dce <L6474_SetAnalogValue+0x1d6>
      case L6474_TON_MIN:
      case L6474_TOFF_MIN:
        if (value > L6474_TOFF_TON_MIN_MAX_VALUE)
 8001da4:	edd7 7a01 	vldr	s15, [r7, #4]
 8001da8:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8001e00 <L6474_SetAnalogValue+0x208>
 8001dac:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001db0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001db4:	dd02      	ble.n	8001dbc <L6474_SetAnalogValue+0x1c4>
        {
          result = FALSE;
 8001db6:	2300      	movs	r3, #0
 8001db8:	74fb      	strb	r3, [r7, #19]
        }
        else
        {
          registerValue = L6474_Tmin_Time_to_Par(value);
        }
        break;    
 8001dba:	e008      	b.n	8001dce <L6474_SetAnalogValue+0x1d6>
          registerValue = L6474_Tmin_Time_to_Par(value);
 8001dbc:	ed97 0a01 	vldr	s0, [r7, #4]
 8001dc0:	f000 fd12 	bl	80027e8 <L6474_Tmin_Time_to_Par>
 8001dc4:	4603      	mov	r3, r0
 8001dc6:	617b      	str	r3, [r7, #20]
        break;    
 8001dc8:	e001      	b.n	8001dce <L6474_SetAnalogValue+0x1d6>
      default:
        result = FALSE;
 8001dca:	2300      	movs	r3, #0
 8001dcc:	74fb      	strb	r3, [r7, #19]
    }
    if (result != FALSE)
 8001dce:	7cfb      	ldrb	r3, [r7, #19]
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d005      	beq.n	8001de0 <L6474_SetAnalogValue+0x1e8>
    {
      L6474_CmdSetParam(deviceId, param, registerValue);
 8001dd4:	7bfb      	ldrb	r3, [r7, #15]
 8001dd6:	697a      	ldr	r2, [r7, #20]
 8001dd8:	68b9      	ldr	r1, [r7, #8]
 8001dda:	4618      	mov	r0, r3
 8001ddc:	f7ff fcc4 	bl	8001768 <L6474_CmdSetParam>
    }
  }
  return result;
 8001de0:	7cfb      	ldrb	r3, [r7, #19]
}
 8001de2:	4618      	mov	r0, r3
 8001de4:	3718      	adds	r7, #24
 8001de6:	46bd      	mov	sp, r7
 8001de8:	bd80      	pop	{r7, pc}
 8001dea:	bf00      	nop
 8001dec:	43ff8000 	.word	0x43ff8000
 8001df0:	ca000000 	.word	0xca000000
 8001df4:	49fffff8 	.word	0x49fffff8
 8001df8:	457a0000 	.word	0x457a0000
 8001dfc:	45bb8000 	.word	0x45bb8000
 8001e00:	42800000 	.word	0x42800000

08001e04 <L6474_SetDirection>:
 * @note The direction change is only applied if the device 
 * is in INACTIVE state
 * @retval None
 **********************************************************/
void L6474_SetDirection(uint8_t deviceId, motorDir_t dir)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b082      	sub	sp, #8
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	4603      	mov	r3, r0
 8001e0c:	460a      	mov	r2, r1
 8001e0e:	71fb      	strb	r3, [r7, #7]
 8001e10:	4613      	mov	r3, r2
 8001e12:	71bb      	strb	r3, [r7, #6]
  if (devicePrm[deviceId].motionState == INACTIVE)
 8001e14:	79fa      	ldrb	r2, [r7, #7]
 8001e16:	490f      	ldr	r1, [pc, #60]	; (8001e54 <L6474_SetDirection+0x50>)
 8001e18:	4613      	mov	r3, r2
 8001e1a:	009b      	lsls	r3, r3, #2
 8001e1c:	4413      	add	r3, r2
 8001e1e:	00db      	lsls	r3, r3, #3
 8001e20:	440b      	add	r3, r1
 8001e22:	3324      	adds	r3, #36	; 0x24
 8001e24:	781b      	ldrb	r3, [r3, #0]
 8001e26:	b2db      	uxtb	r3, r3
 8001e28:	2b08      	cmp	r3, #8
 8001e2a:	d10f      	bne.n	8001e4c <L6474_SetDirection+0x48>
  {
    devicePrm[deviceId].direction = dir;
 8001e2c:	79fa      	ldrb	r2, [r7, #7]
 8001e2e:	4909      	ldr	r1, [pc, #36]	; (8001e54 <L6474_SetDirection+0x50>)
 8001e30:	4613      	mov	r3, r2
 8001e32:	009b      	lsls	r3, r3, #2
 8001e34:	4413      	add	r3, r2
 8001e36:	00db      	lsls	r3, r3, #3
 8001e38:	440b      	add	r3, r1
 8001e3a:	3323      	adds	r3, #35	; 0x23
 8001e3c:	79ba      	ldrb	r2, [r7, #6]
 8001e3e:	701a      	strb	r2, [r3, #0]
    L6474_Board_SetDirectionGpio(deviceId, dir);
 8001e40:	79ba      	ldrb	r2, [r7, #6]
 8001e42:	79fb      	ldrb	r3, [r7, #7]
 8001e44:	4611      	mov	r1, r2
 8001e46:	4618      	mov	r0, r3
 8001e48:	f002 f9a6 	bl	8004198 <L6474_Board_SetDirectionGpio>
  }
}
 8001e4c:	bf00      	nop
 8001e4e:	3708      	adds	r7, #8
 8001e50:	46bd      	mov	sp, r7
 8001e52:	bd80      	pop	{r7, pc}
 8001e54:	20000534 	.word	0x20000534

08001e58 <L6474_SetNbDevices>:
 * @param[in] nbDevices (from 1 to MAX_NUMBER_OF_DEVICES)
 * @retval TRUE if successfull, FALSE if failure, attempt to set a number of 
 * devices greater than MAX_NUMBER_OF_DEVICES
 **********************************************************/
bool L6474_SetNbDevices(uint8_t nbDevices)
{
 8001e58:	b480      	push	{r7}
 8001e5a:	b083      	sub	sp, #12
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	4603      	mov	r3, r0
 8001e60:	71fb      	strb	r3, [r7, #7]
  if (nbDevices <= MAX_NUMBER_OF_DEVICES)
 8001e62:	79fb      	ldrb	r3, [r7, #7]
 8001e64:	2b03      	cmp	r3, #3
 8001e66:	d807      	bhi.n	8001e78 <L6474_SetNbDevices+0x20>
  {
    l6474DriverInstance = 0;
 8001e68:	4b07      	ldr	r3, [pc, #28]	; (8001e88 <L6474_SetNbDevices+0x30>)
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	801a      	strh	r2, [r3, #0]
    numberOfDevices = nbDevices;
 8001e6e:	4a07      	ldr	r2, [pc, #28]	; (8001e8c <L6474_SetNbDevices+0x34>)
 8001e70:	79fb      	ldrb	r3, [r7, #7]
 8001e72:	7013      	strb	r3, [r2, #0]
    return TRUE;
 8001e74:	2301      	movs	r3, #1
 8001e76:	e000      	b.n	8001e7a <L6474_SetNbDevices+0x22>
  }
  else
  {
    return FALSE;
 8001e78:	2300      	movs	r3, #0
  }
}
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	370c      	adds	r7, #12
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e84:	4770      	bx	lr
 8001e86:	bf00      	nop
 8001e88:	20000532 	.word	0x20000532
 8001e8c:	20000514 	.word	0x20000514

08001e90 <L6474_SetMaxSpeed>:
 * @retval true if the command is successfully executed, else false
 * @note The command is not performed is the device is executing 
 * a MOVE or GOTO command (but it can be used during a RUN command).
 **********************************************************/
bool L6474_SetMaxSpeed(uint8_t deviceId, uint16_t newMaxSpeed)
{                                                  
 8001e90:	b480      	push	{r7}
 8001e92:	b085      	sub	sp, #20
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	4603      	mov	r3, r0
 8001e98:	460a      	mov	r2, r1
 8001e9a:	71fb      	strb	r3, [r7, #7]
 8001e9c:	4613      	mov	r3, r2
 8001e9e:	80bb      	strh	r3, [r7, #4]
  bool cmdExecuted = FALSE;
 8001ea0:	2300      	movs	r3, #0
 8001ea2:	73fb      	strb	r3, [r7, #15]
  if ((newMaxSpeed >= L6474_MIN_PWM_FREQ)&&
 8001ea4:	88bb      	ldrh	r3, [r7, #4]
 8001ea6:	2b01      	cmp	r3, #1
 8001ea8:	d935      	bls.n	8001f16 <L6474_SetMaxSpeed+0x86>
 8001eaa:	88bb      	ldrh	r3, [r7, #4]
 8001eac:	f242 7210 	movw	r2, #10000	; 0x2710
 8001eb0:	4293      	cmp	r3, r2
 8001eb2:	d830      	bhi.n	8001f16 <L6474_SetMaxSpeed+0x86>
      (newMaxSpeed <= L6474_MAX_PWM_FREQ) &&
      (devicePrm[deviceId].minSpeed <= newMaxSpeed) &&
 8001eb4:	79fa      	ldrb	r2, [r7, #7]
 8001eb6:	491b      	ldr	r1, [pc, #108]	; (8001f24 <L6474_SetMaxSpeed+0x94>)
 8001eb8:	4613      	mov	r3, r2
 8001eba:	009b      	lsls	r3, r3, #2
 8001ebc:	4413      	add	r3, r2
 8001ebe:	00db      	lsls	r3, r3, #3
 8001ec0:	440b      	add	r3, r1
 8001ec2:	331e      	adds	r3, #30
 8001ec4:	881b      	ldrh	r3, [r3, #0]
 8001ec6:	b29b      	uxth	r3, r3
      (newMaxSpeed <= L6474_MAX_PWM_FREQ) &&
 8001ec8:	88ba      	ldrh	r2, [r7, #4]
 8001eca:	429a      	cmp	r2, r3
 8001ecc:	d323      	bcc.n	8001f16 <L6474_SetMaxSpeed+0x86>
      ((devicePrm[deviceId].motionState == INACTIVE)||
 8001ece:	79fa      	ldrb	r2, [r7, #7]
 8001ed0:	4914      	ldr	r1, [pc, #80]	; (8001f24 <L6474_SetMaxSpeed+0x94>)
 8001ed2:	4613      	mov	r3, r2
 8001ed4:	009b      	lsls	r3, r3, #2
 8001ed6:	4413      	add	r3, r2
 8001ed8:	00db      	lsls	r3, r3, #3
 8001eda:	440b      	add	r3, r1
 8001edc:	3324      	adds	r3, #36	; 0x24
 8001ede:	781b      	ldrb	r3, [r3, #0]
 8001ee0:	b2db      	uxtb	r3, r3
      (devicePrm[deviceId].minSpeed <= newMaxSpeed) &&
 8001ee2:	2b08      	cmp	r3, #8
 8001ee4:	d00b      	beq.n	8001efe <L6474_SetMaxSpeed+0x6e>
       (devicePrm[deviceId].commandExecuted == RUN_CMD)))
 8001ee6:	79fa      	ldrb	r2, [r7, #7]
 8001ee8:	490e      	ldr	r1, [pc, #56]	; (8001f24 <L6474_SetMaxSpeed+0x94>)
 8001eea:	4613      	mov	r3, r2
 8001eec:	009b      	lsls	r3, r3, #2
 8001eee:	4413      	add	r3, r2
 8001ef0:	00db      	lsls	r3, r3, #3
 8001ef2:	440b      	add	r3, r1
 8001ef4:	3322      	adds	r3, #34	; 0x22
 8001ef6:	781b      	ldrb	r3, [r3, #0]
 8001ef8:	b2db      	uxtb	r3, r3
      ((devicePrm[deviceId].motionState == INACTIVE)||
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d10b      	bne.n	8001f16 <L6474_SetMaxSpeed+0x86>
  {
    devicePrm[deviceId].maxSpeed = newMaxSpeed;
 8001efe:	79fa      	ldrb	r2, [r7, #7]
 8001f00:	4908      	ldr	r1, [pc, #32]	; (8001f24 <L6474_SetMaxSpeed+0x94>)
 8001f02:	4613      	mov	r3, r2
 8001f04:	009b      	lsls	r3, r3, #2
 8001f06:	4413      	add	r3, r2
 8001f08:	00db      	lsls	r3, r3, #3
 8001f0a:	440b      	add	r3, r1
 8001f0c:	331c      	adds	r3, #28
 8001f0e:	88ba      	ldrh	r2, [r7, #4]
 8001f10:	801a      	strh	r2, [r3, #0]
    cmdExecuted = TRUE;
 8001f12:	2301      	movs	r3, #1
 8001f14:	73fb      	strb	r3, [r7, #15]
  }
  return cmdExecuted;
 8001f16:	7bfb      	ldrb	r3, [r7, #15]
}                                                     
 8001f18:	4618      	mov	r0, r3
 8001f1a:	3714      	adds	r7, #20
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f22:	4770      	bx	lr
 8001f24:	20000534 	.word	0x20000534

08001f28 <L6474_SetMinSpeed>:
 * @retval true if the command is successfully executed, else false
 * @note The command is not performed is the device is executing 
 * a MOVE or GOTO command (but it can be used during a RUN command).
 **********************************************************/
bool L6474_SetMinSpeed(uint8_t deviceId, uint16_t newMinSpeed)
{                                                  
 8001f28:	b480      	push	{r7}
 8001f2a:	b085      	sub	sp, #20
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	4603      	mov	r3, r0
 8001f30:	460a      	mov	r2, r1
 8001f32:	71fb      	strb	r3, [r7, #7]
 8001f34:	4613      	mov	r3, r2
 8001f36:	80bb      	strh	r3, [r7, #4]
  bool cmdExecuted = FALSE;
 8001f38:	2300      	movs	r3, #0
 8001f3a:	73fb      	strb	r3, [r7, #15]
  if ((newMinSpeed >= L6474_MIN_PWM_FREQ)&&
 8001f3c:	88bb      	ldrh	r3, [r7, #4]
 8001f3e:	2b01      	cmp	r3, #1
 8001f40:	d935      	bls.n	8001fae <L6474_SetMinSpeed+0x86>
 8001f42:	88bb      	ldrh	r3, [r7, #4]
 8001f44:	f242 7210 	movw	r2, #10000	; 0x2710
 8001f48:	4293      	cmp	r3, r2
 8001f4a:	d830      	bhi.n	8001fae <L6474_SetMinSpeed+0x86>
      (newMinSpeed <= L6474_MAX_PWM_FREQ) &&
      (newMinSpeed <= devicePrm[deviceId].maxSpeed) && 
 8001f4c:	79fa      	ldrb	r2, [r7, #7]
 8001f4e:	491b      	ldr	r1, [pc, #108]	; (8001fbc <L6474_SetMinSpeed+0x94>)
 8001f50:	4613      	mov	r3, r2
 8001f52:	009b      	lsls	r3, r3, #2
 8001f54:	4413      	add	r3, r2
 8001f56:	00db      	lsls	r3, r3, #3
 8001f58:	440b      	add	r3, r1
 8001f5a:	331c      	adds	r3, #28
 8001f5c:	881b      	ldrh	r3, [r3, #0]
 8001f5e:	b29b      	uxth	r3, r3
      (newMinSpeed <= L6474_MAX_PWM_FREQ) &&
 8001f60:	88ba      	ldrh	r2, [r7, #4]
 8001f62:	429a      	cmp	r2, r3
 8001f64:	d823      	bhi.n	8001fae <L6474_SetMinSpeed+0x86>
      ((devicePrm[deviceId].motionState == INACTIVE)||
 8001f66:	79fa      	ldrb	r2, [r7, #7]
 8001f68:	4914      	ldr	r1, [pc, #80]	; (8001fbc <L6474_SetMinSpeed+0x94>)
 8001f6a:	4613      	mov	r3, r2
 8001f6c:	009b      	lsls	r3, r3, #2
 8001f6e:	4413      	add	r3, r2
 8001f70:	00db      	lsls	r3, r3, #3
 8001f72:	440b      	add	r3, r1
 8001f74:	3324      	adds	r3, #36	; 0x24
 8001f76:	781b      	ldrb	r3, [r3, #0]
 8001f78:	b2db      	uxtb	r3, r3
      (newMinSpeed <= devicePrm[deviceId].maxSpeed) && 
 8001f7a:	2b08      	cmp	r3, #8
 8001f7c:	d00b      	beq.n	8001f96 <L6474_SetMinSpeed+0x6e>
       (devicePrm[deviceId].commandExecuted == RUN_CMD)))
 8001f7e:	79fa      	ldrb	r2, [r7, #7]
 8001f80:	490e      	ldr	r1, [pc, #56]	; (8001fbc <L6474_SetMinSpeed+0x94>)
 8001f82:	4613      	mov	r3, r2
 8001f84:	009b      	lsls	r3, r3, #2
 8001f86:	4413      	add	r3, r2
 8001f88:	00db      	lsls	r3, r3, #3
 8001f8a:	440b      	add	r3, r1
 8001f8c:	3322      	adds	r3, #34	; 0x22
 8001f8e:	781b      	ldrb	r3, [r3, #0]
 8001f90:	b2db      	uxtb	r3, r3
      ((devicePrm[deviceId].motionState == INACTIVE)||
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d10b      	bne.n	8001fae <L6474_SetMinSpeed+0x86>
  {
    devicePrm[deviceId].minSpeed = newMinSpeed;
 8001f96:	79fa      	ldrb	r2, [r7, #7]
 8001f98:	4908      	ldr	r1, [pc, #32]	; (8001fbc <L6474_SetMinSpeed+0x94>)
 8001f9a:	4613      	mov	r3, r2
 8001f9c:	009b      	lsls	r3, r3, #2
 8001f9e:	4413      	add	r3, r2
 8001fa0:	00db      	lsls	r3, r3, #3
 8001fa2:	440b      	add	r3, r1
 8001fa4:	331e      	adds	r3, #30
 8001fa6:	88ba      	ldrh	r2, [r7, #4]
 8001fa8:	801a      	strh	r2, [r3, #0]
    cmdExecuted = TRUE;
 8001faa:	2301      	movs	r3, #1
 8001fac:	73fb      	strb	r3, [r7, #15]
  }  
  return cmdExecuted;
 8001fae:	7bfb      	ldrb	r3, [r7, #15]
}                 
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	3714      	adds	r7, #20
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fba:	4770      	bx	lr
 8001fbc:	20000534 	.word	0x20000534

08001fc0 <L6474_SetStopMode>:
 * @param[in] deviceId Unused parameter
 * @param[in] stopMode HOLD_MODE to let power bridge enabled
 * @retval None
 **********************************************************/
void L6474_SetStopMode(uint8_t deviceId, motorStopMode_t stopMode)
{
 8001fc0:	b480      	push	{r7}
 8001fc2:	b083      	sub	sp, #12
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	4603      	mov	r3, r0
 8001fc8:	460a      	mov	r2, r1
 8001fca:	71fb      	strb	r3, [r7, #7]
 8001fcc:	4613      	mov	r3, r2
 8001fce:	71bb      	strb	r3, [r7, #6]
  devicePrm[deviceId].stopMode = stopMode;
 8001fd0:	79fa      	ldrb	r2, [r7, #7]
 8001fd2:	4907      	ldr	r1, [pc, #28]	; (8001ff0 <L6474_SetStopMode+0x30>)
 8001fd4:	4613      	mov	r3, r2
 8001fd6:	009b      	lsls	r3, r3, #2
 8001fd8:	4413      	add	r3, r2
 8001fda:	00db      	lsls	r3, r3, #3
 8001fdc:	440b      	add	r3, r1
 8001fde:	3325      	adds	r3, #37	; 0x25
 8001fe0:	79ba      	ldrb	r2, [r7, #6]
 8001fe2:	701a      	strb	r2, [r3, #0]
}
 8001fe4:	bf00      	nop
 8001fe6:	370c      	adds	r7, #12
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fee:	4770      	bx	lr
 8001ff0:	20000534 	.word	0x20000534

08001ff4 <L6474_ApplySpeed>:
 * @param[in] deviceId (from 0 to 2)
 * @param[in] newSpeed in pps
 * @retval None
 **********************************************************/
void L6474_ApplySpeed(uint8_t deviceId, uint16_t newSpeed)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	b082      	sub	sp, #8
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	4603      	mov	r3, r0
 8001ffc:	460a      	mov	r2, r1
 8001ffe:	71fb      	strb	r3, [r7, #7]
 8002000:	4613      	mov	r3, r2
 8002002:	80bb      	strh	r3, [r7, #4]
  if (newSpeed < L6474_MIN_PWM_FREQ)
 8002004:	88bb      	ldrh	r3, [r7, #4]
 8002006:	2b01      	cmp	r3, #1
 8002008:	d801      	bhi.n	800200e <L6474_ApplySpeed+0x1a>
  {
    newSpeed = L6474_MIN_PWM_FREQ;  
 800200a:	2302      	movs	r3, #2
 800200c:	80bb      	strh	r3, [r7, #4]
  }
  if (newSpeed > L6474_MAX_PWM_FREQ)
 800200e:	88bb      	ldrh	r3, [r7, #4]
 8002010:	f242 7210 	movw	r2, #10000	; 0x2710
 8002014:	4293      	cmp	r3, r2
 8002016:	d902      	bls.n	800201e <L6474_ApplySpeed+0x2a>
  {
    newSpeed = L6474_MAX_PWM_FREQ;
 8002018:	f242 7310 	movw	r3, #10000	; 0x2710
 800201c:	80bb      	strh	r3, [r7, #4]
  }
  
  devicePrm[deviceId].speed = newSpeed;
 800201e:	79fa      	ldrb	r2, [r7, #7]
 8002020:	4913      	ldr	r1, [pc, #76]	; (8002070 <L6474_ApplySpeed+0x7c>)
 8002022:	4613      	mov	r3, r2
 8002024:	009b      	lsls	r3, r3, #2
 8002026:	4413      	add	r3, r2
 8002028:	00db      	lsls	r3, r3, #3
 800202a:	440b      	add	r3, r1
 800202c:	3320      	adds	r3, #32
 800202e:	88ba      	ldrh	r2, [r7, #4]
 8002030:	801a      	strh	r2, [r3, #0]

  switch (deviceId)
 8002032:	79fb      	ldrb	r3, [r7, #7]
 8002034:	2b02      	cmp	r3, #2
 8002036:	d010      	beq.n	800205a <L6474_ApplySpeed+0x66>
 8002038:	2b02      	cmp	r3, #2
 800203a:	dc13      	bgt.n	8002064 <L6474_ApplySpeed+0x70>
 800203c:	2b00      	cmp	r3, #0
 800203e:	d002      	beq.n	8002046 <L6474_ApplySpeed+0x52>
 8002040:	2b01      	cmp	r3, #1
 8002042:	d005      	beq.n	8002050 <L6474_ApplySpeed+0x5c>
      break;
    case 2:
      L6474_Board_Pwm3SetFreq(newSpeed);
      break;
    default:
      break; //ignore error
 8002044:	e00e      	b.n	8002064 <L6474_ApplySpeed+0x70>
      L6474_Board_Pwm1SetFreq(newSpeed);
 8002046:	88bb      	ldrh	r3, [r7, #4]
 8002048:	4618      	mov	r0, r3
 800204a:	f001 ff8f 	bl	8003f6c <L6474_Board_Pwm1SetFreq>
      break;
 800204e:	e00a      	b.n	8002066 <L6474_ApplySpeed+0x72>
      L6474_Board_Pwm2SetFreq(newSpeed);
 8002050:	88bb      	ldrh	r3, [r7, #4]
 8002052:	4618      	mov	r0, r3
 8002054:	f001 ffb0 	bl	8003fb8 <L6474_Board_Pwm2SetFreq>
      break;
 8002058:	e005      	b.n	8002066 <L6474_ApplySpeed+0x72>
      L6474_Board_Pwm3SetFreq(newSpeed);
 800205a:	88bb      	ldrh	r3, [r7, #4]
 800205c:	4618      	mov	r0, r3
 800205e:	f001 ffd1 	bl	8004004 <L6474_Board_Pwm3SetFreq>
      break;
 8002062:	e000      	b.n	8002066 <L6474_ApplySpeed+0x72>
      break; //ignore error
 8002064:	bf00      	nop
  }
}
 8002066:	bf00      	nop
 8002068:	3708      	adds	r7, #8
 800206a:	46bd      	mov	sp, r7
 800206c:	bd80      	pop	{r7, pc}
 800206e:	bf00      	nop
 8002070:	20000534 	.word	0x20000534

08002074 <L6474_ErrorHandler>:
 * @brief Error handler which calls the user callback (if defined)
 * @param[in] error Number of the error
 * @retval None
 **********************************************************/
void L6474_ErrorHandler(uint16_t error)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b082      	sub	sp, #8
 8002078:	af00      	add	r7, sp, #0
 800207a:	4603      	mov	r3, r0
 800207c:	80fb      	strh	r3, [r7, #6]
  if (errorHandlerCallback != 0)
 800207e:	4b07      	ldr	r3, [pc, #28]	; (800209c <L6474_ErrorHandler+0x28>)
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	2b00      	cmp	r3, #0
 8002084:	d005      	beq.n	8002092 <L6474_ErrorHandler+0x1e>
  {
    (void) errorHandlerCallback(error);
 8002086:	4b05      	ldr	r3, [pc, #20]	; (800209c <L6474_ErrorHandler+0x28>)
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	88fa      	ldrh	r2, [r7, #6]
 800208c:	4610      	mov	r0, r2
 800208e:	4798      	blx	r3
    while(1)
    {
      /* Infinite loop */
    }
  }
}
 8002090:	e000      	b.n	8002094 <L6474_ErrorHandler+0x20>
    while(1)
 8002092:	e7fe      	b.n	8002092 <L6474_ErrorHandler+0x1e>
}
 8002094:	3708      	adds	r7, #8
 8002096:	46bd      	mov	sp, r7
 8002098:	bd80      	pop	{r7, pc}
 800209a:	bf00      	nop
 800209c:	20000510 	.word	0x20000510

080020a0 <L6474_SendCommand>:
 * @param[in] deviceId (from 0 to 2)
 * @param[in] param Command to send 
 * @retval None
 **********************************************************/
void L6474_SendCommand(uint8_t deviceId, uint8_t param)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b084      	sub	sp, #16
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	4603      	mov	r3, r0
 80020a8:	460a      	mov	r2, r1
 80020aa:	71fb      	strb	r3, [r7, #7]
 80020ac:	4613      	mov	r3, r2
 80020ae:	71bb      	strb	r3, [r7, #6]
  uint32_t i;
  uint8_t spiIndex = numberOfDevices - deviceId - 1;
 80020b0:	4b1f      	ldr	r3, [pc, #124]	; (8002130 <L6474_SendCommand+0x90>)
 80020b2:	781b      	ldrb	r3, [r3, #0]
 80020b4:	b2da      	uxtb	r2, r3
 80020b6:	79fb      	ldrb	r3, [r7, #7]
 80020b8:	1ad3      	subs	r3, r2, r3
 80020ba:	b2db      	uxtb	r3, r3
 80020bc:	3b01      	subs	r3, #1
 80020be:	72bb      	strb	r3, [r7, #10]
  bool itDisable = FALSE;  
 80020c0:	2300      	movs	r3, #0
 80020c2:	72fb      	strb	r3, [r7, #11]
  
  do
  {
    spiPreemtionByIsr = FALSE;
 80020c4:	4b1b      	ldr	r3, [pc, #108]	; (8002134 <L6474_SendCommand+0x94>)
 80020c6:	2200      	movs	r2, #0
 80020c8:	701a      	strb	r2, [r3, #0]
    if (itDisable)
 80020ca:	7afb      	ldrb	r3, [r7, #11]
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d003      	beq.n	80020d8 <L6474_SendCommand+0x38>
    {
      /* re-enable L6474_Board_EnableIrq if disable in previous iteration */
      L6474_Board_EnableIrq();
 80020d0:	f001 fe8c 	bl	8003dec <L6474_Board_EnableIrq>
      itDisable = FALSE;
 80020d4:	2300      	movs	r3, #0
 80020d6:	72fb      	strb	r3, [r7, #11]
    }
  
    for (i = 0; i < numberOfDevices; i++)
 80020d8:	2300      	movs	r3, #0
 80020da:	60fb      	str	r3, [r7, #12]
 80020dc:	e008      	b.n	80020f0 <L6474_SendCommand+0x50>
    {
      spiTxBursts[3][i] = L6474_NOP;     
 80020de:	4a16      	ldr	r2, [pc, #88]	; (8002138 <L6474_SendCommand+0x98>)
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	4413      	add	r3, r2
 80020e4:	3309      	adds	r3, #9
 80020e6:	2200      	movs	r2, #0
 80020e8:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < numberOfDevices; i++)
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	3301      	adds	r3, #1
 80020ee:	60fb      	str	r3, [r7, #12]
 80020f0:	4b0f      	ldr	r3, [pc, #60]	; (8002130 <L6474_SendCommand+0x90>)
 80020f2:	781b      	ldrb	r3, [r3, #0]
 80020f4:	b2db      	uxtb	r3, r3
 80020f6:	461a      	mov	r2, r3
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	4293      	cmp	r3, r2
 80020fc:	d3ef      	bcc.n	80020de <L6474_SendCommand+0x3e>
    }
    spiTxBursts[3][spiIndex] = param;
 80020fe:	7abb      	ldrb	r3, [r7, #10]
 8002100:	4a0d      	ldr	r2, [pc, #52]	; (8002138 <L6474_SendCommand+0x98>)
 8002102:	4413      	add	r3, r2
 8002104:	79ba      	ldrb	r2, [r7, #6]
 8002106:	725a      	strb	r2, [r3, #9]
    
    /* Disable interruption before checking */
    /* pre-emption by ISR and SPI transfers*/
    L6474_Board_DisableIrq();
 8002108:	f001 fe67 	bl	8003dda <L6474_Board_DisableIrq>
    itDisable = TRUE;
 800210c:	2301      	movs	r3, #1
 800210e:	72fb      	strb	r3, [r7, #11]
  } while (spiPreemtionByIsr); // check pre-emption by ISR
 8002110:	4b08      	ldr	r3, [pc, #32]	; (8002134 <L6474_SendCommand+0x94>)
 8002112:	781b      	ldrb	r3, [r3, #0]
 8002114:	b2db      	uxtb	r3, r3
 8002116:	2b00      	cmp	r3, #0
 8002118:	d1d4      	bne.n	80020c4 <L6474_SendCommand+0x24>

  L6474_WriteBytes(&spiTxBursts[3][0], &spiRxBursts[3][0]); 
 800211a:	4908      	ldr	r1, [pc, #32]	; (800213c <L6474_SendCommand+0x9c>)
 800211c:	4808      	ldr	r0, [pc, #32]	; (8002140 <L6474_SendCommand+0xa0>)
 800211e:	f000 fb81 	bl	8002824 <L6474_WriteBytes>
  
  /* re-enable L6474_Board_EnableIrq after SPI transfers*/
  L6474_Board_EnableIrq();
 8002122:	f001 fe63 	bl	8003dec <L6474_Board_EnableIrq>
}
 8002126:	bf00      	nop
 8002128:	3710      	adds	r7, #16
 800212a:	46bd      	mov	sp, r7
 800212c:	bd80      	pop	{r7, pc}
 800212e:	bf00      	nop
 8002130:	20000514 	.word	0x20000514
 8002134:	20000530 	.word	0x20000530
 8002138:	20000518 	.word	0x20000518
 800213c:	2000052d 	.word	0x2000052d
 8002140:	20000521 	.word	0x20000521

08002144 <L6474_SetDeviceParamsToGivenValues>:
 * @param[in] deviceId (from 0 to 2)
 * @param pInitPrm pointer to a structure containing the initial device parameters 
 * @retval None
 **********************************************************/
void L6474_SetDeviceParamsToGivenValues(uint8_t deviceId, L6474_Init_t *pInitPrm)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	b082      	sub	sp, #8
 8002148:	af00      	add	r7, sp, #0
 800214a:	4603      	mov	r3, r0
 800214c:	6039      	str	r1, [r7, #0]
 800214e:	71fb      	strb	r3, [r7, #7]
  devicePrm[deviceId].acceleration = pInitPrm->acceleration_step_s2;
 8002150:	79fa      	ldrb	r2, [r7, #7]
 8002152:	683b      	ldr	r3, [r7, #0]
 8002154:	8818      	ldrh	r0, [r3, #0]
 8002156:	494c      	ldr	r1, [pc, #304]	; (8002288 <L6474_SetDeviceParamsToGivenValues+0x144>)
 8002158:	4613      	mov	r3, r2
 800215a:	009b      	lsls	r3, r3, #2
 800215c:	4413      	add	r3, r2
 800215e:	00db      	lsls	r3, r3, #3
 8002160:	440b      	add	r3, r1
 8002162:	3318      	adds	r3, #24
 8002164:	4602      	mov	r2, r0
 8002166:	801a      	strh	r2, [r3, #0]
  devicePrm[deviceId].deceleration = pInitPrm->deceleration_step_s2;
 8002168:	79fa      	ldrb	r2, [r7, #7]
 800216a:	683b      	ldr	r3, [r7, #0]
 800216c:	8858      	ldrh	r0, [r3, #2]
 800216e:	4946      	ldr	r1, [pc, #280]	; (8002288 <L6474_SetDeviceParamsToGivenValues+0x144>)
 8002170:	4613      	mov	r3, r2
 8002172:	009b      	lsls	r3, r3, #2
 8002174:	4413      	add	r3, r2
 8002176:	00db      	lsls	r3, r3, #3
 8002178:	440b      	add	r3, r1
 800217a:	331a      	adds	r3, #26
 800217c:	4602      	mov	r2, r0
 800217e:	801a      	strh	r2, [r3, #0]
  devicePrm[deviceId].maxSpeed = pInitPrm->maximum_speed_step_s;
 8002180:	79fa      	ldrb	r2, [r7, #7]
 8002182:	683b      	ldr	r3, [r7, #0]
 8002184:	8898      	ldrh	r0, [r3, #4]
 8002186:	4940      	ldr	r1, [pc, #256]	; (8002288 <L6474_SetDeviceParamsToGivenValues+0x144>)
 8002188:	4613      	mov	r3, r2
 800218a:	009b      	lsls	r3, r3, #2
 800218c:	4413      	add	r3, r2
 800218e:	00db      	lsls	r3, r3, #3
 8002190:	440b      	add	r3, r1
 8002192:	331c      	adds	r3, #28
 8002194:	4602      	mov	r2, r0
 8002196:	801a      	strh	r2, [r3, #0]
  devicePrm[deviceId].minSpeed = pInitPrm->minimum_speed_step_s;
 8002198:	79fa      	ldrb	r2, [r7, #7]
 800219a:	683b      	ldr	r3, [r7, #0]
 800219c:	88d8      	ldrh	r0, [r3, #6]
 800219e:	493a      	ldr	r1, [pc, #232]	; (8002288 <L6474_SetDeviceParamsToGivenValues+0x144>)
 80021a0:	4613      	mov	r3, r2
 80021a2:	009b      	lsls	r3, r3, #2
 80021a4:	4413      	add	r3, r2
 80021a6:	00db      	lsls	r3, r3, #3
 80021a8:	440b      	add	r3, r1
 80021aa:	331e      	adds	r3, #30
 80021ac:	4602      	mov	r2, r0
 80021ae:	801a      	strh	r2, [r3, #0]
  
  devicePrm[deviceId].accu = 0;
 80021b0:	79fa      	ldrb	r2, [r7, #7]
 80021b2:	4935      	ldr	r1, [pc, #212]	; (8002288 <L6474_SetDeviceParamsToGivenValues+0x144>)
 80021b4:	4613      	mov	r3, r2
 80021b6:	009b      	lsls	r3, r3, #2
 80021b8:	4413      	add	r3, r2
 80021ba:	00db      	lsls	r3, r3, #3
 80021bc:	440b      	add	r3, r1
 80021be:	2200      	movs	r2, #0
 80021c0:	601a      	str	r2, [r3, #0]
  devicePrm[deviceId].currentPosition = 0;
 80021c2:	79fa      	ldrb	r2, [r7, #7]
 80021c4:	4930      	ldr	r1, [pc, #192]	; (8002288 <L6474_SetDeviceParamsToGivenValues+0x144>)
 80021c6:	4613      	mov	r3, r2
 80021c8:	009b      	lsls	r3, r3, #2
 80021ca:	4413      	add	r3, r2
 80021cc:	00db      	lsls	r3, r3, #3
 80021ce:	440b      	add	r3, r1
 80021d0:	3304      	adds	r3, #4
 80021d2:	2200      	movs	r2, #0
 80021d4:	601a      	str	r2, [r3, #0]
  devicePrm[deviceId].endAccPos = 0;
 80021d6:	79fa      	ldrb	r2, [r7, #7]
 80021d8:	492b      	ldr	r1, [pc, #172]	; (8002288 <L6474_SetDeviceParamsToGivenValues+0x144>)
 80021da:	4613      	mov	r3, r2
 80021dc:	009b      	lsls	r3, r3, #2
 80021de:	4413      	add	r3, r2
 80021e0:	00db      	lsls	r3, r3, #3
 80021e2:	440b      	add	r3, r1
 80021e4:	3308      	adds	r3, #8
 80021e6:	2200      	movs	r2, #0
 80021e8:	601a      	str	r2, [r3, #0]
  devicePrm[deviceId].relativePos = 0;
 80021ea:	79fa      	ldrb	r2, [r7, #7]
 80021ec:	4926      	ldr	r1, [pc, #152]	; (8002288 <L6474_SetDeviceParamsToGivenValues+0x144>)
 80021ee:	4613      	mov	r3, r2
 80021f0:	009b      	lsls	r3, r3, #2
 80021f2:	4413      	add	r3, r2
 80021f4:	00db      	lsls	r3, r3, #3
 80021f6:	440b      	add	r3, r1
 80021f8:	330c      	adds	r3, #12
 80021fa:	2200      	movs	r2, #0
 80021fc:	601a      	str	r2, [r3, #0]
  devicePrm[deviceId].startDecPos = 0;
 80021fe:	79fa      	ldrb	r2, [r7, #7]
 8002200:	4921      	ldr	r1, [pc, #132]	; (8002288 <L6474_SetDeviceParamsToGivenValues+0x144>)
 8002202:	4613      	mov	r3, r2
 8002204:	009b      	lsls	r3, r3, #2
 8002206:	4413      	add	r3, r2
 8002208:	00db      	lsls	r3, r3, #3
 800220a:	440b      	add	r3, r1
 800220c:	3310      	adds	r3, #16
 800220e:	2200      	movs	r2, #0
 8002210:	601a      	str	r2, [r3, #0]
  devicePrm[deviceId].stepsToTake = 0;
 8002212:	79fa      	ldrb	r2, [r7, #7]
 8002214:	491c      	ldr	r1, [pc, #112]	; (8002288 <L6474_SetDeviceParamsToGivenValues+0x144>)
 8002216:	4613      	mov	r3, r2
 8002218:	009b      	lsls	r3, r3, #2
 800221a:	4413      	add	r3, r2
 800221c:	00db      	lsls	r3, r3, #3
 800221e:	440b      	add	r3, r1
 8002220:	3314      	adds	r3, #20
 8002222:	2200      	movs	r2, #0
 8002224:	601a      	str	r2, [r3, #0]
  devicePrm[deviceId].speed = 0;
 8002226:	79fa      	ldrb	r2, [r7, #7]
 8002228:	4917      	ldr	r1, [pc, #92]	; (8002288 <L6474_SetDeviceParamsToGivenValues+0x144>)
 800222a:	4613      	mov	r3, r2
 800222c:	009b      	lsls	r3, r3, #2
 800222e:	4413      	add	r3, r2
 8002230:	00db      	lsls	r3, r3, #3
 8002232:	440b      	add	r3, r1
 8002234:	3320      	adds	r3, #32
 8002236:	2200      	movs	r2, #0
 8002238:	801a      	strh	r2, [r3, #0]
  devicePrm[deviceId].commandExecuted = NO_CMD;
 800223a:	79fa      	ldrb	r2, [r7, #7]
 800223c:	4912      	ldr	r1, [pc, #72]	; (8002288 <L6474_SetDeviceParamsToGivenValues+0x144>)
 800223e:	4613      	mov	r3, r2
 8002240:	009b      	lsls	r3, r3, #2
 8002242:	4413      	add	r3, r2
 8002244:	00db      	lsls	r3, r3, #3
 8002246:	440b      	add	r3, r1
 8002248:	3322      	adds	r3, #34	; 0x22
 800224a:	2203      	movs	r2, #3
 800224c:	701a      	strb	r2, [r3, #0]
  devicePrm[deviceId].direction = FORWARD;
 800224e:	79fa      	ldrb	r2, [r7, #7]
 8002250:	490d      	ldr	r1, [pc, #52]	; (8002288 <L6474_SetDeviceParamsToGivenValues+0x144>)
 8002252:	4613      	mov	r3, r2
 8002254:	009b      	lsls	r3, r3, #2
 8002256:	4413      	add	r3, r2
 8002258:	00db      	lsls	r3, r3, #3
 800225a:	440b      	add	r3, r1
 800225c:	3323      	adds	r3, #35	; 0x23
 800225e:	2201      	movs	r2, #1
 8002260:	701a      	strb	r2, [r3, #0]
  devicePrm[deviceId].motionState = INACTIVE;  
 8002262:	79fa      	ldrb	r2, [r7, #7]
 8002264:	4908      	ldr	r1, [pc, #32]	; (8002288 <L6474_SetDeviceParamsToGivenValues+0x144>)
 8002266:	4613      	mov	r3, r2
 8002268:	009b      	lsls	r3, r3, #2
 800226a:	4413      	add	r3, r2
 800226c:	00db      	lsls	r3, r3, #3
 800226e:	440b      	add	r3, r1
 8002270:	3324      	adds	r3, #36	; 0x24
 8002272:	2208      	movs	r2, #8
 8002274:	701a      	strb	r2, [r3, #0]
 
  L6474_SetRegisterToGivenValues(deviceId, pInitPrm);
 8002276:	79fb      	ldrb	r3, [r7, #7]
 8002278:	6839      	ldr	r1, [r7, #0]
 800227a:	4618      	mov	r0, r3
 800227c:	f000 f8a2 	bl	80023c4 <L6474_SetRegisterToGivenValues>
}
 8002280:	bf00      	nop
 8002282:	3708      	adds	r7, #8
 8002284:	46bd      	mov	sp, r7
 8002286:	bd80      	pop	{r7, pc}
 8002288:	20000534 	.word	0x20000534

0800228c <L6474_SetDeviceParamsToPredefinedValues>:
 * from l6474_target_config.h
 * @param[in] deviceId (from 0 to 2)
 * @retval None
 **********************************************************/
void L6474_SetDeviceParamsToPredefinedValues(uint8_t deviceId)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	b082      	sub	sp, #8
 8002290:	af00      	add	r7, sp, #0
 8002292:	4603      	mov	r3, r0
 8002294:	71fb      	strb	r3, [r7, #7]
  devicePrm[deviceId].acceleration = L6474_CONF_PARAM_ACC_DEVICE_0;
 8002296:	79fa      	ldrb	r2, [r7, #7]
 8002298:	4949      	ldr	r1, [pc, #292]	; (80023c0 <L6474_SetDeviceParamsToPredefinedValues+0x134>)
 800229a:	4613      	mov	r3, r2
 800229c:	009b      	lsls	r3, r3, #2
 800229e:	4413      	add	r3, r2
 80022a0:	00db      	lsls	r3, r3, #3
 80022a2:	440b      	add	r3, r1
 80022a4:	3318      	adds	r3, #24
 80022a6:	2201      	movs	r2, #1
 80022a8:	801a      	strh	r2, [r3, #0]
  devicePrm[deviceId].deceleration = L6474_CONF_PARAM_DEC_DEVICE_0;
 80022aa:	79fa      	ldrb	r2, [r7, #7]
 80022ac:	4944      	ldr	r1, [pc, #272]	; (80023c0 <L6474_SetDeviceParamsToPredefinedValues+0x134>)
 80022ae:	4613      	mov	r3, r2
 80022b0:	009b      	lsls	r3, r3, #2
 80022b2:	4413      	add	r3, r2
 80022b4:	00db      	lsls	r3, r3, #3
 80022b6:	440b      	add	r3, r1
 80022b8:	331a      	adds	r3, #26
 80022ba:	2201      	movs	r2, #1
 80022bc:	801a      	strh	r2, [r3, #0]
  devicePrm[deviceId].maxSpeed = L6474_CONF_PARAM_MAX_SPEED_DEVICE_0;
 80022be:	79fa      	ldrb	r2, [r7, #7]
 80022c0:	493f      	ldr	r1, [pc, #252]	; (80023c0 <L6474_SetDeviceParamsToPredefinedValues+0x134>)
 80022c2:	4613      	mov	r3, r2
 80022c4:	009b      	lsls	r3, r3, #2
 80022c6:	4413      	add	r3, r2
 80022c8:	00db      	lsls	r3, r3, #3
 80022ca:	440b      	add	r3, r1
 80022cc:	331c      	adds	r3, #28
 80022ce:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80022d2:	801a      	strh	r2, [r3, #0]
  devicePrm[deviceId].minSpeed = L6474_CONF_PARAM_MIN_SPEED_DEVICE_0;
 80022d4:	79fa      	ldrb	r2, [r7, #7]
 80022d6:	493a      	ldr	r1, [pc, #232]	; (80023c0 <L6474_SetDeviceParamsToPredefinedValues+0x134>)
 80022d8:	4613      	mov	r3, r2
 80022da:	009b      	lsls	r3, r3, #2
 80022dc:	4413      	add	r3, r2
 80022de:	00db      	lsls	r3, r3, #3
 80022e0:	440b      	add	r3, r1
 80022e2:	331e      	adds	r3, #30
 80022e4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80022e8:	801a      	strh	r2, [r3, #0]
  
  devicePrm[deviceId].accu = 0;
 80022ea:	79fa      	ldrb	r2, [r7, #7]
 80022ec:	4934      	ldr	r1, [pc, #208]	; (80023c0 <L6474_SetDeviceParamsToPredefinedValues+0x134>)
 80022ee:	4613      	mov	r3, r2
 80022f0:	009b      	lsls	r3, r3, #2
 80022f2:	4413      	add	r3, r2
 80022f4:	00db      	lsls	r3, r3, #3
 80022f6:	440b      	add	r3, r1
 80022f8:	2200      	movs	r2, #0
 80022fa:	601a      	str	r2, [r3, #0]
  devicePrm[deviceId].currentPosition = 0;
 80022fc:	79fa      	ldrb	r2, [r7, #7]
 80022fe:	4930      	ldr	r1, [pc, #192]	; (80023c0 <L6474_SetDeviceParamsToPredefinedValues+0x134>)
 8002300:	4613      	mov	r3, r2
 8002302:	009b      	lsls	r3, r3, #2
 8002304:	4413      	add	r3, r2
 8002306:	00db      	lsls	r3, r3, #3
 8002308:	440b      	add	r3, r1
 800230a:	3304      	adds	r3, #4
 800230c:	2200      	movs	r2, #0
 800230e:	601a      	str	r2, [r3, #0]
  devicePrm[deviceId].endAccPos = 0;
 8002310:	79fa      	ldrb	r2, [r7, #7]
 8002312:	492b      	ldr	r1, [pc, #172]	; (80023c0 <L6474_SetDeviceParamsToPredefinedValues+0x134>)
 8002314:	4613      	mov	r3, r2
 8002316:	009b      	lsls	r3, r3, #2
 8002318:	4413      	add	r3, r2
 800231a:	00db      	lsls	r3, r3, #3
 800231c:	440b      	add	r3, r1
 800231e:	3308      	adds	r3, #8
 8002320:	2200      	movs	r2, #0
 8002322:	601a      	str	r2, [r3, #0]
  devicePrm[deviceId].relativePos = 0;
 8002324:	79fa      	ldrb	r2, [r7, #7]
 8002326:	4926      	ldr	r1, [pc, #152]	; (80023c0 <L6474_SetDeviceParamsToPredefinedValues+0x134>)
 8002328:	4613      	mov	r3, r2
 800232a:	009b      	lsls	r3, r3, #2
 800232c:	4413      	add	r3, r2
 800232e:	00db      	lsls	r3, r3, #3
 8002330:	440b      	add	r3, r1
 8002332:	330c      	adds	r3, #12
 8002334:	2200      	movs	r2, #0
 8002336:	601a      	str	r2, [r3, #0]
  devicePrm[deviceId].startDecPos = 0;
 8002338:	79fa      	ldrb	r2, [r7, #7]
 800233a:	4921      	ldr	r1, [pc, #132]	; (80023c0 <L6474_SetDeviceParamsToPredefinedValues+0x134>)
 800233c:	4613      	mov	r3, r2
 800233e:	009b      	lsls	r3, r3, #2
 8002340:	4413      	add	r3, r2
 8002342:	00db      	lsls	r3, r3, #3
 8002344:	440b      	add	r3, r1
 8002346:	3310      	adds	r3, #16
 8002348:	2200      	movs	r2, #0
 800234a:	601a      	str	r2, [r3, #0]
  devicePrm[deviceId].stepsToTake = 0;
 800234c:	79fa      	ldrb	r2, [r7, #7]
 800234e:	491c      	ldr	r1, [pc, #112]	; (80023c0 <L6474_SetDeviceParamsToPredefinedValues+0x134>)
 8002350:	4613      	mov	r3, r2
 8002352:	009b      	lsls	r3, r3, #2
 8002354:	4413      	add	r3, r2
 8002356:	00db      	lsls	r3, r3, #3
 8002358:	440b      	add	r3, r1
 800235a:	3314      	adds	r3, #20
 800235c:	2200      	movs	r2, #0
 800235e:	601a      	str	r2, [r3, #0]
  devicePrm[deviceId].speed = 0;
 8002360:	79fa      	ldrb	r2, [r7, #7]
 8002362:	4917      	ldr	r1, [pc, #92]	; (80023c0 <L6474_SetDeviceParamsToPredefinedValues+0x134>)
 8002364:	4613      	mov	r3, r2
 8002366:	009b      	lsls	r3, r3, #2
 8002368:	4413      	add	r3, r2
 800236a:	00db      	lsls	r3, r3, #3
 800236c:	440b      	add	r3, r1
 800236e:	3320      	adds	r3, #32
 8002370:	2200      	movs	r2, #0
 8002372:	801a      	strh	r2, [r3, #0]
  devicePrm[deviceId].commandExecuted = NO_CMD;
 8002374:	79fa      	ldrb	r2, [r7, #7]
 8002376:	4912      	ldr	r1, [pc, #72]	; (80023c0 <L6474_SetDeviceParamsToPredefinedValues+0x134>)
 8002378:	4613      	mov	r3, r2
 800237a:	009b      	lsls	r3, r3, #2
 800237c:	4413      	add	r3, r2
 800237e:	00db      	lsls	r3, r3, #3
 8002380:	440b      	add	r3, r1
 8002382:	3322      	adds	r3, #34	; 0x22
 8002384:	2203      	movs	r2, #3
 8002386:	701a      	strb	r2, [r3, #0]
  devicePrm[deviceId].direction = FORWARD;
 8002388:	79fa      	ldrb	r2, [r7, #7]
 800238a:	490d      	ldr	r1, [pc, #52]	; (80023c0 <L6474_SetDeviceParamsToPredefinedValues+0x134>)
 800238c:	4613      	mov	r3, r2
 800238e:	009b      	lsls	r3, r3, #2
 8002390:	4413      	add	r3, r2
 8002392:	00db      	lsls	r3, r3, #3
 8002394:	440b      	add	r3, r1
 8002396:	3323      	adds	r3, #35	; 0x23
 8002398:	2201      	movs	r2, #1
 800239a:	701a      	strb	r2, [r3, #0]
  devicePrm[deviceId].motionState = INACTIVE;
 800239c:	79fa      	ldrb	r2, [r7, #7]
 800239e:	4908      	ldr	r1, [pc, #32]	; (80023c0 <L6474_SetDeviceParamsToPredefinedValues+0x134>)
 80023a0:	4613      	mov	r3, r2
 80023a2:	009b      	lsls	r3, r3, #2
 80023a4:	4413      	add	r3, r2
 80023a6:	00db      	lsls	r3, r3, #3
 80023a8:	440b      	add	r3, r1
 80023aa:	3324      	adds	r3, #36	; 0x24
 80023ac:	2208      	movs	r2, #8
 80023ae:	701a      	strb	r2, [r3, #0]
  
  L6474_SetRegisterToPredefinedValues(deviceId);
 80023b0:	79fb      	ldrb	r3, [r7, #7]
 80023b2:	4618      	mov	r0, r3
 80023b4:	f000 f882 	bl	80024bc <L6474_SetRegisterToPredefinedValues>

}
 80023b8:	bf00      	nop
 80023ba:	3708      	adds	r7, #8
 80023bc:	46bd      	mov	sp, r7
 80023be:	bd80      	pop	{r7, pc}
 80023c0:	20000534 	.word	0x20000534

080023c4 <L6474_SetRegisterToGivenValues>:
 * @param[in] deviceId (from 0 to 2)
 * @param pInitPrm pointer to a structure containing the initial device parameters 
 * @retval None
 **********************************************************/
void L6474_SetRegisterToGivenValues(uint8_t deviceId, L6474_Init_t *pInitPrm)
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	b082      	sub	sp, #8
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	4603      	mov	r3, r0
 80023cc:	6039      	str	r1, [r7, #0]
 80023ce:	71fb      	strb	r3, [r7, #7]
  L6474_CmdSetParam(deviceId,
 80023d0:	79fb      	ldrb	r3, [r7, #7]
 80023d2:	2200      	movs	r2, #0
 80023d4:	2101      	movs	r1, #1
 80023d6:	4618      	mov	r0, r3
 80023d8:	f7ff f9c6 	bl	8001768 <L6474_CmdSetParam>
                    L6474_ABS_POS,
                    0);
  L6474_CmdSetParam(deviceId,
 80023dc:	79fb      	ldrb	r3, [r7, #7]
 80023de:	2200      	movs	r2, #0
 80023e0:	2102      	movs	r1, #2
 80023e2:	4618      	mov	r0, r3
 80023e4:	f7ff f9c0 	bl	8001768 <L6474_CmdSetParam>
                    L6474_EL_POS,
                    0);
  L6474_CmdSetParam(deviceId,
 80023e8:	79fb      	ldrb	r3, [r7, #7]
 80023ea:	2200      	movs	r2, #0
 80023ec:	2103      	movs	r1, #3
 80023ee:	4618      	mov	r0, r3
 80023f0:	f7ff f9ba 	bl	8001768 <L6474_CmdSetParam>
                    L6474_MARK,
                    0);
  L6474_SetAnalogValue(deviceId,
 80023f4:	683b      	ldr	r3, [r7, #0]
 80023f6:	edd3 7a02 	vldr	s15, [r3, #8]
 80023fa:	79fb      	ldrb	r3, [r7, #7]
 80023fc:	eeb0 0a67 	vmov.f32	s0, s15
 8002400:	2109      	movs	r1, #9
 8002402:	4618      	mov	r0, r3
 8002404:	f7ff fbf8 	bl	8001bf8 <L6474_SetAnalogValue>
                       L6474_TVAL,
                       pInitPrm->torque_regulation_current_mA);
  L6474_CmdSetParam(deviceId,
                    L6474_T_FAST,
                    (uint8_t) pInitPrm->maximum_fast_decay_time |
 8002408:	683b      	ldr	r3, [r7, #0]
 800240a:	7d5a      	ldrb	r2, [r3, #21]
                    (uint8_t) pInitPrm->fall_time);
 800240c:	683b      	ldr	r3, [r7, #0]
 800240e:	7d1b      	ldrb	r3, [r3, #20]
  L6474_CmdSetParam(deviceId,
 8002410:	4313      	orrs	r3, r2
 8002412:	b2db      	uxtb	r3, r3
 8002414:	461a      	mov	r2, r3
 8002416:	79fb      	ldrb	r3, [r7, #7]
 8002418:	210e      	movs	r1, #14
 800241a:	4618      	mov	r0, r3
 800241c:	f7ff f9a4 	bl	8001768 <L6474_CmdSetParam>
  L6474_SetAnalogValue(deviceId,
 8002420:	683b      	ldr	r3, [r7, #0]
 8002422:	edd3 7a06 	vldr	s15, [r3, #24]
 8002426:	79fb      	ldrb	r3, [r7, #7]
 8002428:	eeb0 0a67 	vmov.f32	s0, s15
 800242c:	210f      	movs	r1, #15
 800242e:	4618      	mov	r0, r3
 8002430:	f7ff fbe2 	bl	8001bf8 <L6474_SetAnalogValue>
                       L6474_TON_MIN,
                       pInitPrm->minimum_ON_time_us);
  L6474_SetAnalogValue(deviceId,
 8002434:	683b      	ldr	r3, [r7, #0]
 8002436:	edd3 7a07 	vldr	s15, [r3, #28]
 800243a:	79fb      	ldrb	r3, [r7, #7]
 800243c:	eeb0 0a67 	vmov.f32	s0, s15
 8002440:	2110      	movs	r1, #16
 8002442:	4618      	mov	r0, r3
 8002444:	f7ff fbd8 	bl	8001bf8 <L6474_SetAnalogValue>
                       L6474_TOFF_MIN,
                       pInitPrm->minimum_OFF_time_us);
  L6474_SetAnalogValue(deviceId,
 8002448:	683b      	ldr	r3, [r7, #0]
 800244a:	edd3 7a03 	vldr	s15, [r3, #12]
 800244e:	79fb      	ldrb	r3, [r7, #7]
 8002450:	eeb0 0a67 	vmov.f32	s0, s15
 8002454:	2113      	movs	r1, #19
 8002456:	4618      	mov	r0, r3
 8002458:	f7ff fbce 	bl	8001bf8 <L6474_SetAnalogValue>
                       L6474_OCD_TH,
                       pInitPrm->overcurrent_threshold);
  L6474_CmdSetParam(deviceId,
                  L6474_STEP_MODE,
                  (uint8_t) pInitPrm->step_selection |
 800245c:	683b      	ldr	r3, [r7, #0]
 800245e:	7c9a      	ldrb	r2, [r3, #18]
                  (uint8_t) pInitPrm->sync_selection);
 8002460:	683b      	ldr	r3, [r7, #0]
 8002462:	7cdb      	ldrb	r3, [r3, #19]
  L6474_CmdSetParam(deviceId,
 8002464:	4313      	orrs	r3, r2
 8002466:	b2db      	uxtb	r3, r3
 8002468:	461a      	mov	r2, r3
 800246a:	79fb      	ldrb	r3, [r7, #7]
 800246c:	2116      	movs	r1, #22
 800246e:	4618      	mov	r0, r3
 8002470:	f7ff f97a 	bl	8001768 <L6474_CmdSetParam>
  L6474_CmdSetParam(deviceId,
 8002474:	683b      	ldr	r3, [r7, #0]
 8002476:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002478:	79fb      	ldrb	r3, [r7, #7]
 800247a:	2117      	movs	r1, #23
 800247c:	4618      	mov	r0, r3
 800247e:	f7ff f973 	bl	8001768 <L6474_CmdSetParam>
                    L6474_ALARM_EN,
                    pInitPrm->alarm);
  L6474_CmdSetParam(deviceId,
                    L6474_CONFIG,
                    (uint16_t) pInitPrm->clock |
 8002482:	683b      	ldr	r3, [r7, #0]
 8002484:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
                    (uint16_t) pInitPrm->torque_regulation_method |
 8002488:	683b      	ldr	r3, [r7, #0]
 800248a:	7c5b      	ldrb	r3, [r3, #17]
 800248c:	4313      	orrs	r3, r2
 800248e:	b2da      	uxtb	r2, r3
                    (uint16_t) pInitPrm->overcurrent_shutwdown |
 8002490:	683b      	ldr	r3, [r7, #0]
 8002492:	7c1b      	ldrb	r3, [r3, #16]
                    (uint16_t) pInitPrm->torque_regulation_method |
 8002494:	4313      	orrs	r3, r2
 8002496:	b2db      	uxtb	r3, r3
 8002498:	461a      	mov	r2, r3
                    (uint16_t) pInitPrm->slew_rate |
 800249a:	683b      	ldr	r3, [r7, #0]
 800249c:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
                    (uint16_t) pInitPrm->overcurrent_shutwdown |
 800249e:	4313      	orrs	r3, r2
                    (uint16_t) pInitPrm->target_swicthing_period);
 80024a0:	683a      	ldr	r2, [r7, #0]
 80024a2:	8c12      	ldrh	r2, [r2, #32]
                    (uint16_t) pInitPrm->slew_rate |
 80024a4:	4313      	orrs	r3, r2
  L6474_CmdSetParam(deviceId,
 80024a6:	461a      	mov	r2, r3
 80024a8:	79fb      	ldrb	r3, [r7, #7]
 80024aa:	2118      	movs	r1, #24
 80024ac:	4618      	mov	r0, r3
 80024ae:	f7ff f95b 	bl	8001768 <L6474_CmdSetParam>
  
}
 80024b2:	bf00      	nop
 80024b4:	3708      	adds	r7, #8
 80024b6:	46bd      	mov	sp, r7
 80024b8:	bd80      	pop	{r7, pc}
	...

080024bc <L6474_SetRegisterToPredefinedValues>:
 * from l6474_target_config.h
 * @param[in] deviceId (from 0 to 2)
 * @retval None
 **********************************************************/
void L6474_SetRegisterToPredefinedValues(uint8_t deviceId)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	b082      	sub	sp, #8
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	4603      	mov	r3, r0
 80024c4:	71fb      	strb	r3, [r7, #7]
  L6474_CmdSetParam(deviceId,
 80024c6:	79fb      	ldrb	r3, [r7, #7]
 80024c8:	2200      	movs	r2, #0
 80024ca:	2101      	movs	r1, #1
 80024cc:	4618      	mov	r0, r3
 80024ce:	f7ff f94b 	bl	8001768 <L6474_CmdSetParam>
                    L6474_ABS_POS,
                    0);
  L6474_CmdSetParam(deviceId,
 80024d2:	79fb      	ldrb	r3, [r7, #7]
 80024d4:	2200      	movs	r2, #0
 80024d6:	2102      	movs	r1, #2
 80024d8:	4618      	mov	r0, r3
 80024da:	f7ff f945 	bl	8001768 <L6474_CmdSetParam>
                    L6474_EL_POS,
                    0);
  L6474_CmdSetParam(deviceId,
 80024de:	79fb      	ldrb	r3, [r7, #7]
 80024e0:	2200      	movs	r2, #0
 80024e2:	2103      	movs	r1, #3
 80024e4:	4618      	mov	r0, r3
 80024e6:	f7ff f93f 	bl	8001768 <L6474_CmdSetParam>
                    L6474_MARK,
                    0);
  switch (deviceId)
 80024ea:	79fb      	ldrb	r3, [r7, #7]
 80024ec:	2b02      	cmp	r3, #2
 80024ee:	f000 8094 	beq.w	800261a <L6474_SetRegisterToPredefinedValues+0x15e>
 80024f2:	2b02      	cmp	r3, #2
 80024f4:	f300 80d7 	bgt.w	80026a6 <L6474_SetRegisterToPredefinedValues+0x1ea>
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d002      	beq.n	8002502 <L6474_SetRegisterToPredefinedValues+0x46>
 80024fc:	2b01      	cmp	r3, #1
 80024fe:	d046      	beq.n	800258e <L6474_SetRegisterToPredefinedValues+0xd2>
#endif         
      break;
#endif      
    default: ;
  }
}
 8002500:	e0d1      	b.n	80026a6 <L6474_SetRegisterToPredefinedValues+0x1ea>
                        L6474_Tval_Current_to_Par(L6474_CONF_PARAM_TVAL_DEVICE_0));
 8002502:	ed9f 0a6b 	vldr	s0, [pc, #428]	; 80026b0 <L6474_SetRegisterToPredefinedValues+0x1f4>
 8002506:	f000 f94b 	bl	80027a0 <L6474_Tval_Current_to_Par>
 800250a:	4603      	mov	r3, r0
      L6474_CmdSetParam(deviceId,
 800250c:	461a      	mov	r2, r3
 800250e:	79fb      	ldrb	r3, [r7, #7]
 8002510:	2109      	movs	r1, #9
 8002512:	4618      	mov	r0, r3
 8002514:	f7ff f928 	bl	8001768 <L6474_CmdSetParam>
      L6474_CmdSetParam(deviceId,
 8002518:	79fb      	ldrb	r3, [r7, #7]
 800251a:	2235      	movs	r2, #53	; 0x35
 800251c:	210e      	movs	r1, #14
 800251e:	4618      	mov	r0, r3
 8002520:	f7ff f922 	bl	8001768 <L6474_CmdSetParam>
                              L6474_Tmin_Time_to_Par(L6474_CONF_PARAM_TON_MIN_DEVICE_0)
 8002524:	eeb0 0a08 	vmov.f32	s0, #8	; 0x40400000  3.0
 8002528:	f000 f95e 	bl	80027e8 <L6474_Tmin_Time_to_Par>
 800252c:	4603      	mov	r3, r0
      L6474_CmdSetParam(deviceId,
 800252e:	461a      	mov	r2, r3
 8002530:	79fb      	ldrb	r3, [r7, #7]
 8002532:	210f      	movs	r1, #15
 8002534:	4618      	mov	r0, r3
 8002536:	f7ff f917 	bl	8001768 <L6474_CmdSetParam>
                              L6474_Tmin_Time_to_Par(L6474_CONF_PARAM_TOFF_MIN_DEVICE_0));
 800253a:	eeb3 0a05 	vmov.f32	s0, #53	; 0x41a80000  21.0
 800253e:	f000 f953 	bl	80027e8 <L6474_Tmin_Time_to_Par>
 8002542:	4603      	mov	r3, r0
      L6474_CmdSetParam(deviceId,
 8002544:	461a      	mov	r2, r3
 8002546:	79fb      	ldrb	r3, [r7, #7]
 8002548:	2110      	movs	r1, #16
 800254a:	4618      	mov	r0, r3
 800254c:	f7ff f90c 	bl	8001768 <L6474_CmdSetParam>
      L6474_CmdSetParam(deviceId,
 8002550:	79fb      	ldrb	r3, [r7, #7]
 8002552:	2201      	movs	r2, #1
 8002554:	2113      	movs	r1, #19
 8002556:	4618      	mov	r0, r3
 8002558:	f7ff f906 	bl	8001768 <L6474_CmdSetParam>
      L6474_CmdSetParam(deviceId,
 800255c:	79fb      	ldrb	r3, [r7, #7]
 800255e:	2288      	movs	r2, #136	; 0x88
 8002560:	2116      	movs	r1, #22
 8002562:	4618      	mov	r0, r3
 8002564:	f7ff f900 	bl	8001768 <L6474_CmdSetParam>
      L6474_CmdSetParam(deviceId,
 8002568:	79fb      	ldrb	r3, [r7, #7]
 800256a:	22cf      	movs	r2, #207	; 0xcf
 800256c:	2117      	movs	r1, #23
 800256e:	4618      	mov	r0, r3
 8002570:	f7ff f8fa 	bl	8001768 <L6474_CmdSetParam>
      L6474_CmdSetParam(deviceId,
 8002574:	79fb      	ldrb	r3, [r7, #7]
 8002576:	f44f 5232 	mov.w	r2, #11392	; 0x2c80
 800257a:	2118      	movs	r1, #24
 800257c:	4618      	mov	r0, r3
 800257e:	f7ff f8f3 	bl	8001768 <L6474_CmdSetParam>
      L6474_SetStopMode(deviceId, L6474_CONF_PARAM_AUTO_HIZ_STOP_DEVICE_0);
 8002582:	79fb      	ldrb	r3, [r7, #7]
 8002584:	2100      	movs	r1, #0
 8002586:	4618      	mov	r0, r3
 8002588:	f7ff fd1a 	bl	8001fc0 <L6474_SetStopMode>
      break;
 800258c:	e08b      	b.n	80026a6 <L6474_SetRegisterToPredefinedValues+0x1ea>
                        L6474_Tval_Current_to_Par(L6474_CONF_PARAM_TVAL_DEVICE_1));
 800258e:	ed9f 0a48 	vldr	s0, [pc, #288]	; 80026b0 <L6474_SetRegisterToPredefinedValues+0x1f4>
 8002592:	f000 f905 	bl	80027a0 <L6474_Tval_Current_to_Par>
 8002596:	4603      	mov	r3, r0
      L6474_CmdSetParam(deviceId,
 8002598:	461a      	mov	r2, r3
 800259a:	79fb      	ldrb	r3, [r7, #7]
 800259c:	2109      	movs	r1, #9
 800259e:	4618      	mov	r0, r3
 80025a0:	f7ff f8e2 	bl	8001768 <L6474_CmdSetParam>
      L6474_CmdSetParam(deviceId,
 80025a4:	79fb      	ldrb	r3, [r7, #7]
 80025a6:	2235      	movs	r2, #53	; 0x35
 80025a8:	210e      	movs	r1, #14
 80025aa:	4618      	mov	r0, r3
 80025ac:	f7ff f8dc 	bl	8001768 <L6474_CmdSetParam>
                        L6474_Tmin_Time_to_Par(L6474_CONF_PARAM_TON_MIN_DEVICE_1));
 80025b0:	eeb0 0a08 	vmov.f32	s0, #8	; 0x40400000  3.0
 80025b4:	f000 f918 	bl	80027e8 <L6474_Tmin_Time_to_Par>
 80025b8:	4603      	mov	r3, r0
      L6474_CmdSetParam(deviceId,
 80025ba:	461a      	mov	r2, r3
 80025bc:	79fb      	ldrb	r3, [r7, #7]
 80025be:	210f      	movs	r1, #15
 80025c0:	4618      	mov	r0, r3
 80025c2:	f7ff f8d1 	bl	8001768 <L6474_CmdSetParam>
                        L6474_Tmin_Time_to_Par(L6474_CONF_PARAM_TOFF_MIN_DEVICE_1));
 80025c6:	eeb3 0a05 	vmov.f32	s0, #53	; 0x41a80000  21.0
 80025ca:	f000 f90d 	bl	80027e8 <L6474_Tmin_Time_to_Par>
 80025ce:	4603      	mov	r3, r0
      L6474_CmdSetParam(deviceId,
 80025d0:	461a      	mov	r2, r3
 80025d2:	79fb      	ldrb	r3, [r7, #7]
 80025d4:	2110      	movs	r1, #16
 80025d6:	4618      	mov	r0, r3
 80025d8:	f7ff f8c6 	bl	8001768 <L6474_CmdSetParam>
      L6474_CmdSetParam(deviceId,
 80025dc:	79fb      	ldrb	r3, [r7, #7]
 80025de:	2201      	movs	r2, #1
 80025e0:	2113      	movs	r1, #19
 80025e2:	4618      	mov	r0, r3
 80025e4:	f7ff f8c0 	bl	8001768 <L6474_CmdSetParam>
      L6474_CmdSetParam(deviceId,
 80025e8:	79fb      	ldrb	r3, [r7, #7]
 80025ea:	228c      	movs	r2, #140	; 0x8c
 80025ec:	2116      	movs	r1, #22
 80025ee:	4618      	mov	r0, r3
 80025f0:	f7ff f8ba 	bl	8001768 <L6474_CmdSetParam>
      L6474_CmdSetParam(deviceId,
 80025f4:	79fb      	ldrb	r3, [r7, #7]
 80025f6:	22cf      	movs	r2, #207	; 0xcf
 80025f8:	2117      	movs	r1, #23
 80025fa:	4618      	mov	r0, r3
 80025fc:	f7ff f8b4 	bl	8001768 <L6474_CmdSetParam>
      L6474_CmdSetParam(deviceId,
 8002600:	79fb      	ldrb	r3, [r7, #7]
 8002602:	f44f 5232 	mov.w	r2, #11392	; 0x2c80
 8002606:	2118      	movs	r1, #24
 8002608:	4618      	mov	r0, r3
 800260a:	f7ff f8ad 	bl	8001768 <L6474_CmdSetParam>
      L6474_SetStopMode(deviceId, L6474_CONF_PARAM_AUTO_HIZ_STOP_DEVICE_1);
 800260e:	79fb      	ldrb	r3, [r7, #7]
 8002610:	2100      	movs	r1, #0
 8002612:	4618      	mov	r0, r3
 8002614:	f7ff fcd4 	bl	8001fc0 <L6474_SetStopMode>
      break;
 8002618:	e045      	b.n	80026a6 <L6474_SetRegisterToPredefinedValues+0x1ea>
                        L6474_Tval_Current_to_Par(L6474_CONF_PARAM_TVAL_DEVICE_2));
 800261a:	ed9f 0a25 	vldr	s0, [pc, #148]	; 80026b0 <L6474_SetRegisterToPredefinedValues+0x1f4>
 800261e:	f000 f8bf 	bl	80027a0 <L6474_Tval_Current_to_Par>
 8002622:	4603      	mov	r3, r0
      L6474_CmdSetParam(deviceId,
 8002624:	461a      	mov	r2, r3
 8002626:	79fb      	ldrb	r3, [r7, #7]
 8002628:	2109      	movs	r1, #9
 800262a:	4618      	mov	r0, r3
 800262c:	f7ff f89c 	bl	8001768 <L6474_CmdSetParam>
      L6474_CmdSetParam(deviceId,
 8002630:	79fb      	ldrb	r3, [r7, #7]
 8002632:	2235      	movs	r2, #53	; 0x35
 8002634:	210e      	movs	r1, #14
 8002636:	4618      	mov	r0, r3
 8002638:	f7ff f896 	bl	8001768 <L6474_CmdSetParam>
                        L6474_Tmin_Time_to_Par(L6474_CONF_PARAM_TON_MIN_DEVICE_2));
 800263c:	eeb0 0a08 	vmov.f32	s0, #8	; 0x40400000  3.0
 8002640:	f000 f8d2 	bl	80027e8 <L6474_Tmin_Time_to_Par>
 8002644:	4603      	mov	r3, r0
      L6474_CmdSetParam(deviceId,
 8002646:	461a      	mov	r2, r3
 8002648:	79fb      	ldrb	r3, [r7, #7]
 800264a:	210f      	movs	r1, #15
 800264c:	4618      	mov	r0, r3
 800264e:	f7ff f88b 	bl	8001768 <L6474_CmdSetParam>
                        L6474_Tmin_Time_to_Par(L6474_CONF_PARAM_TOFF_MIN_DEVICE_2));
 8002652:	eeb3 0a05 	vmov.f32	s0, #53	; 0x41a80000  21.0
 8002656:	f000 f8c7 	bl	80027e8 <L6474_Tmin_Time_to_Par>
 800265a:	4603      	mov	r3, r0
      L6474_CmdSetParam(deviceId,
 800265c:	461a      	mov	r2, r3
 800265e:	79fb      	ldrb	r3, [r7, #7]
 8002660:	2110      	movs	r1, #16
 8002662:	4618      	mov	r0, r3
 8002664:	f7ff f880 	bl	8001768 <L6474_CmdSetParam>
      L6474_CmdSetParam(deviceId,
 8002668:	79fb      	ldrb	r3, [r7, #7]
 800266a:	2201      	movs	r2, #1
 800266c:	2113      	movs	r1, #19
 800266e:	4618      	mov	r0, r3
 8002670:	f7ff f87a 	bl	8001768 <L6474_CmdSetParam>
      L6474_CmdSetParam(deviceId,
 8002674:	79fb      	ldrb	r3, [r7, #7]
 8002676:	228c      	movs	r2, #140	; 0x8c
 8002678:	2116      	movs	r1, #22
 800267a:	4618      	mov	r0, r3
 800267c:	f7ff f874 	bl	8001768 <L6474_CmdSetParam>
      L6474_CmdSetParam(deviceId,
 8002680:	79fb      	ldrb	r3, [r7, #7]
 8002682:	22cf      	movs	r2, #207	; 0xcf
 8002684:	2117      	movs	r1, #23
 8002686:	4618      	mov	r0, r3
 8002688:	f7ff f86e 	bl	8001768 <L6474_CmdSetParam>
      L6474_CmdSetParam(deviceId,
 800268c:	79fb      	ldrb	r3, [r7, #7]
 800268e:	f44f 5232 	mov.w	r2, #11392	; 0x2c80
 8002692:	2118      	movs	r1, #24
 8002694:	4618      	mov	r0, r3
 8002696:	f7ff f867 	bl	8001768 <L6474_CmdSetParam>
      L6474_SetStopMode(deviceId, L6474_CONF_PARAM_AUTO_HIZ_STOP_DEVICE_2);
 800269a:	79fb      	ldrb	r3, [r7, #7]
 800269c:	2100      	movs	r1, #0
 800269e:	4618      	mov	r0, r3
 80026a0:	f7ff fc8e 	bl	8001fc0 <L6474_SetStopMode>
      break;
 80026a4:	bf00      	nop
}
 80026a6:	bf00      	nop
 80026a8:	3708      	adds	r7, #8
 80026aa:	46bd      	mov	sp, r7
 80026ac:	bd80      	pop	{r7, pc}
 80026ae:	bf00      	nop
 80026b0:	437a0000 	.word	0x437a0000

080026b4 <L6474_StartMovement>:
 * and enable the power bridge
 * @param[in] deviceId (from 0 to 2)
 * @retval None
 **********************************************************/
void L6474_StartMovement(uint8_t deviceId)  
{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	b082      	sub	sp, #8
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	4603      	mov	r3, r0
 80026bc:	71fb      	strb	r3, [r7, #7]
  /* Enable L6474 powerstage */
  L6474_CmdEnable(deviceId);
 80026be:	79fb      	ldrb	r3, [r7, #7]
 80026c0:	4618      	mov	r0, r3
 80026c2:	f7fe fecb 	bl	800145c <L6474_CmdEnable>
  if (devicePrm[deviceId].endAccPos != 0)
 80026c6:	79fa      	ldrb	r2, [r7, #7]
 80026c8:	4922      	ldr	r1, [pc, #136]	; (8002754 <L6474_StartMovement+0xa0>)
 80026ca:	4613      	mov	r3, r2
 80026cc:	009b      	lsls	r3, r3, #2
 80026ce:	4413      	add	r3, r2
 80026d0:	00db      	lsls	r3, r3, #3
 80026d2:	440b      	add	r3, r1
 80026d4:	3308      	adds	r3, #8
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d00a      	beq.n	80026f2 <L6474_StartMovement+0x3e>
  {
    devicePrm[deviceId].motionState = ACCELERATING;
 80026dc:	79fa      	ldrb	r2, [r7, #7]
 80026de:	491d      	ldr	r1, [pc, #116]	; (8002754 <L6474_StartMovement+0xa0>)
 80026e0:	4613      	mov	r3, r2
 80026e2:	009b      	lsls	r3, r3, #2
 80026e4:	4413      	add	r3, r2
 80026e6:	00db      	lsls	r3, r3, #3
 80026e8:	440b      	add	r3, r1
 80026ea:	3324      	adds	r3, #36	; 0x24
 80026ec:	2200      	movs	r2, #0
 80026ee:	701a      	strb	r2, [r3, #0]
 80026f0:	e009      	b.n	8002706 <L6474_StartMovement+0x52>
  }
  else
  {
    devicePrm[deviceId].motionState = DECELERATING;    
 80026f2:	79fa      	ldrb	r2, [r7, #7]
 80026f4:	4917      	ldr	r1, [pc, #92]	; (8002754 <L6474_StartMovement+0xa0>)
 80026f6:	4613      	mov	r3, r2
 80026f8:	009b      	lsls	r3, r3, #2
 80026fa:	4413      	add	r3, r2
 80026fc:	00db      	lsls	r3, r3, #3
 80026fe:	440b      	add	r3, r1
 8002700:	3324      	adds	r3, #36	; 0x24
 8002702:	2202      	movs	r2, #2
 8002704:	701a      	strb	r2, [r3, #0]
  }
  devicePrm[deviceId].accu = 0;
 8002706:	79fa      	ldrb	r2, [r7, #7]
 8002708:	4912      	ldr	r1, [pc, #72]	; (8002754 <L6474_StartMovement+0xa0>)
 800270a:	4613      	mov	r3, r2
 800270c:	009b      	lsls	r3, r3, #2
 800270e:	4413      	add	r3, r2
 8002710:	00db      	lsls	r3, r3, #3
 8002712:	440b      	add	r3, r1
 8002714:	2200      	movs	r2, #0
 8002716:	601a      	str	r2, [r3, #0]
  devicePrm[deviceId].relativePos = 0;
 8002718:	79fa      	ldrb	r2, [r7, #7]
 800271a:	490e      	ldr	r1, [pc, #56]	; (8002754 <L6474_StartMovement+0xa0>)
 800271c:	4613      	mov	r3, r2
 800271e:	009b      	lsls	r3, r3, #2
 8002720:	4413      	add	r3, r2
 8002722:	00db      	lsls	r3, r3, #3
 8002724:	440b      	add	r3, r1
 8002726:	330c      	adds	r3, #12
 8002728:	2200      	movs	r2, #0
 800272a:	601a      	str	r2, [r3, #0]
  L6474_ApplySpeed(deviceId, devicePrm[deviceId].minSpeed);
 800272c:	79fa      	ldrb	r2, [r7, #7]
 800272e:	4909      	ldr	r1, [pc, #36]	; (8002754 <L6474_StartMovement+0xa0>)
 8002730:	4613      	mov	r3, r2
 8002732:	009b      	lsls	r3, r3, #2
 8002734:	4413      	add	r3, r2
 8002736:	00db      	lsls	r3, r3, #3
 8002738:	440b      	add	r3, r1
 800273a:	331e      	adds	r3, #30
 800273c:	881b      	ldrh	r3, [r3, #0]
 800273e:	b29a      	uxth	r2, r3
 8002740:	79fb      	ldrb	r3, [r7, #7]
 8002742:	4611      	mov	r1, r2
 8002744:	4618      	mov	r0, r3
 8002746:	f7ff fc55 	bl	8001ff4 <L6474_ApplySpeed>
}
 800274a:	bf00      	nop
 800274c:	3708      	adds	r7, #8
 800274e:	46bd      	mov	sp, r7
 8002750:	bd80      	pop	{r7, pc}
 8002752:	bf00      	nop
 8002754:	20000534 	.word	0x20000534

08002758 <L6474_Ocd_Th_to_Par>:
 * @brief Converts mA in compatible values for OCD_TH register
 * @param[in] Tval
 * @retval OCD_TH values
 **********************************************************/
inline uint8_t L6474_Ocd_Th_to_Par(float Tval)
{
 8002758:	b480      	push	{r7}
 800275a:	b083      	sub	sp, #12
 800275c:	af00      	add	r7, sp, #0
 800275e:	ed87 0a01 	vstr	s0, [r7, #4]
  return ((uint8_t)(((Tval - 375)*0.002666f)+0.5f));
 8002762:	edd7 7a01 	vldr	s15, [r7, #4]
 8002766:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8002798 <L6474_Ocd_Th_to_Par+0x40>
 800276a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800276e:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 800279c <L6474_Ocd_Th_to_Par+0x44>
 8002772:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002776:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800277a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800277e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002782:	edc7 7a00 	vstr	s15, [r7]
 8002786:	783b      	ldrb	r3, [r7, #0]
 8002788:	b2db      	uxtb	r3, r3
}
 800278a:	4618      	mov	r0, r3
 800278c:	370c      	adds	r7, #12
 800278e:	46bd      	mov	sp, r7
 8002790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002794:	4770      	bx	lr
 8002796:	bf00      	nop
 8002798:	43bb8000 	.word	0x43bb8000
 800279c:	3b2eb80f 	.word	0x3b2eb80f

080027a0 <L6474_Tval_Current_to_Par>:
 * @brief Converts mA in compatible values for TVAL register 
 * @param[in] Tval
 * @retval TVAL values
 **********************************************************/
inline uint8_t L6474_Tval_Current_to_Par(float Tval)
{
 80027a0:	b480      	push	{r7}
 80027a2:	b083      	sub	sp, #12
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	ed87 0a01 	vstr	s0, [r7, #4]
  return ((uint8_t)(((Tval - 31.25f)*0.032f)+0.5f));
 80027aa:	edd7 7a01 	vldr	s15, [r7, #4]
 80027ae:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 80027e0 <L6474_Tval_Current_to_Par+0x40>
 80027b2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80027b6:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 80027e4 <L6474_Tval_Current_to_Par+0x44>
 80027ba:	ee67 7a87 	vmul.f32	s15, s15, s14
 80027be:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80027c2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80027c6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80027ca:	edc7 7a00 	vstr	s15, [r7]
 80027ce:	783b      	ldrb	r3, [r7, #0]
 80027d0:	b2db      	uxtb	r3, r3
}
 80027d2:	4618      	mov	r0, r3
 80027d4:	370c      	adds	r7, #12
 80027d6:	46bd      	mov	sp, r7
 80027d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027dc:	4770      	bx	lr
 80027de:	bf00      	nop
 80027e0:	41fa0000 	.word	0x41fa0000
 80027e4:	3d03126f 	.word	0x3d03126f

080027e8 <L6474_Tmin_Time_to_Par>:
 * for TON_MIN register
 * @param[in] Tmin
 * @retval TON_MIN values
 **********************************************************/
inline uint8_t L6474_Tmin_Time_to_Par(float Tmin)
{
 80027e8:	b480      	push	{r7}
 80027ea:	b083      	sub	sp, #12
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	ed87 0a01 	vstr	s0, [r7, #4]
  return ((uint8_t)(((Tmin - 0.5f)*2.0f)+0.5f));
 80027f2:	edd7 7a01 	vldr	s15, [r7, #4]
 80027f6:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80027fa:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80027fe:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002802:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002806:	ee77 7a87 	vadd.f32	s15, s15, s14
 800280a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800280e:	edc7 7a00 	vstr	s15, [r7]
 8002812:	783b      	ldrb	r3, [r7, #0]
 8002814:	b2db      	uxtb	r3, r3
}
 8002816:	4618      	mov	r0, r3
 8002818:	370c      	adds	r7, #12
 800281a:	46bd      	mov	sp, r7
 800281c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002820:	4770      	bx	lr
	...

08002824 <L6474_WriteBytes>:
 * @param[in] pByteToTransmit pointer to the byte to transmit
 * @param[in] pReceivedByte pointer to the received byte
 * @retval None
 **********************************************************/
void L6474_WriteBytes(uint8_t *pByteToTransmit, uint8_t *pReceivedByte)
{
 8002824:	b580      	push	{r7, lr}
 8002826:	b082      	sub	sp, #8
 8002828:	af00      	add	r7, sp, #0
 800282a:	6078      	str	r0, [r7, #4]
 800282c:	6039      	str	r1, [r7, #0]
  if (L6474_Board_SpiWriteBytes(pByteToTransmit, pReceivedByte, numberOfDevices) != 0)
 800282e:	4b0d      	ldr	r3, [pc, #52]	; (8002864 <L6474_WriteBytes+0x40>)
 8002830:	781b      	ldrb	r3, [r3, #0]
 8002832:	b2db      	uxtb	r3, r3
 8002834:	461a      	mov	r2, r3
 8002836:	6839      	ldr	r1, [r7, #0]
 8002838:	6878      	ldr	r0, [r7, #4]
 800283a:	f001 fd17 	bl	800426c <L6474_Board_SpiWriteBytes>
 800283e:	4603      	mov	r3, r0
 8002840:	2b00      	cmp	r3, #0
 8002842:	d003      	beq.n	800284c <L6474_WriteBytes+0x28>
  {
    L6474_ErrorHandler(L6474_ERROR_1);
 8002844:	f248 0001 	movw	r0, #32769	; 0x8001
 8002848:	f7ff fc14 	bl	8002074 <L6474_ErrorHandler>
  }
  
  if (isrFlag)
 800284c:	4b06      	ldr	r3, [pc, #24]	; (8002868 <L6474_WriteBytes+0x44>)
 800284e:	781b      	ldrb	r3, [r3, #0]
 8002850:	b2db      	uxtb	r3, r3
 8002852:	2b00      	cmp	r3, #0
 8002854:	d002      	beq.n	800285c <L6474_WriteBytes+0x38>
  {
    spiPreemtionByIsr = TRUE;
 8002856:	4b05      	ldr	r3, [pc, #20]	; (800286c <L6474_WriteBytes+0x48>)
 8002858:	2201      	movs	r2, #1
 800285a:	701a      	strb	r2, [r3, #0]
  }
}
 800285c:	bf00      	nop
 800285e:	3708      	adds	r7, #8
 8002860:	46bd      	mov	sp, r7
 8002862:	bd80      	pop	{r7, pc}
 8002864:	20000514 	.word	0x20000514
 8002868:	20000531 	.word	0x20000531
 800286c:	20000530 	.word	0x20000530

08002870 <MX_LTDC_Init>:

LTDC_HandleTypeDef hltdc;

/* LTDC init function */
void MX_LTDC_Init(void)
{
 8002870:	b580      	push	{r7, lr}
 8002872:	b08e      	sub	sp, #56	; 0x38
 8002874:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8002876:	1d3b      	adds	r3, r7, #4
 8002878:	2234      	movs	r2, #52	; 0x34
 800287a:	2100      	movs	r1, #0
 800287c:	4618      	mov	r0, r3
 800287e:	f019 f84d 	bl	801b91c <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8002882:	4b3a      	ldr	r3, [pc, #232]	; (800296c <MX_LTDC_Init+0xfc>)
 8002884:	4a3a      	ldr	r2, [pc, #232]	; (8002970 <MX_LTDC_Init+0x100>)
 8002886:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8002888:	4b38      	ldr	r3, [pc, #224]	; (800296c <MX_LTDC_Init+0xfc>)
 800288a:	2200      	movs	r2, #0
 800288c:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 800288e:	4b37      	ldr	r3, [pc, #220]	; (800296c <MX_LTDC_Init+0xfc>)
 8002890:	2200      	movs	r2, #0
 8002892:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8002894:	4b35      	ldr	r3, [pc, #212]	; (800296c <MX_LTDC_Init+0xfc>)
 8002896:	2200      	movs	r2, #0
 8002898:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 800289a:	4b34      	ldr	r3, [pc, #208]	; (800296c <MX_LTDC_Init+0xfc>)
 800289c:	2200      	movs	r2, #0
 800289e:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 39;
 80028a0:	4b32      	ldr	r3, [pc, #200]	; (800296c <MX_LTDC_Init+0xfc>)
 80028a2:	2227      	movs	r2, #39	; 0x27
 80028a4:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 8;
 80028a6:	4b31      	ldr	r3, [pc, #196]	; (800296c <MX_LTDC_Init+0xfc>)
 80028a8:	2208      	movs	r2, #8
 80028aa:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 42;
 80028ac:	4b2f      	ldr	r3, [pc, #188]	; (800296c <MX_LTDC_Init+0xfc>)
 80028ae:	222a      	movs	r2, #42	; 0x2a
 80028b0:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 11;
 80028b2:	4b2e      	ldr	r3, [pc, #184]	; (800296c <MX_LTDC_Init+0xfc>)
 80028b4:	220b      	movs	r2, #11
 80028b6:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 522;
 80028b8:	4b2c      	ldr	r3, [pc, #176]	; (800296c <MX_LTDC_Init+0xfc>)
 80028ba:	f240 220a 	movw	r2, #522	; 0x20a
 80028be:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 283;
 80028c0:	4b2a      	ldr	r3, [pc, #168]	; (800296c <MX_LTDC_Init+0xfc>)
 80028c2:	f240 121b 	movw	r2, #283	; 0x11b
 80028c6:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 528;
 80028c8:	4b28      	ldr	r3, [pc, #160]	; (800296c <MX_LTDC_Init+0xfc>)
 80028ca:	f44f 7204 	mov.w	r2, #528	; 0x210
 80028ce:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 285;
 80028d0:	4b26      	ldr	r3, [pc, #152]	; (800296c <MX_LTDC_Init+0xfc>)
 80028d2:	f240 121d 	movw	r2, #285	; 0x11d
 80028d6:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 80028d8:	4b24      	ldr	r3, [pc, #144]	; (800296c <MX_LTDC_Init+0xfc>)
 80028da:	2200      	movs	r2, #0
 80028dc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 80028e0:	4b22      	ldr	r3, [pc, #136]	; (800296c <MX_LTDC_Init+0xfc>)
 80028e2:	2200      	movs	r2, #0
 80028e4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 80028e8:	4b20      	ldr	r3, [pc, #128]	; (800296c <MX_LTDC_Init+0xfc>)
 80028ea:	2200      	movs	r2, #0
 80028ec:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 80028f0:	481e      	ldr	r0, [pc, #120]	; (800296c <MX_LTDC_Init+0xfc>)
 80028f2:	f004 ff1d 	bl	8007730 <HAL_LTDC_Init>
 80028f6:	4603      	mov	r3, r0
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d001      	beq.n	8002900 <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 80028fc:	f000 fd16 	bl	800332c <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8002900:	2300      	movs	r3, #0
 8002902:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 480;
 8002904:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8002908:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 800290a:	2300      	movs	r3, #0
 800290c:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 272;
 800290e:	f44f 7388 	mov.w	r3, #272	; 0x110
 8002912:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8002914:	2302      	movs	r3, #2
 8002916:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 8002918:	23ff      	movs	r3, #255	; 0xff
 800291a:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 800291c:	2300      	movs	r3, #0
 800291e:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8002920:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002924:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8002926:	2305      	movs	r3, #5
 8002928:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0;
 800292a:	2300      	movs	r3, #0
 800292c:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 480;
 800292e:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8002932:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 272;
 8002934:	f44f 7388 	mov.w	r3, #272	; 0x110
 8002938:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 800293a:	2300      	movs	r3, #0
 800293c:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 8002940:	2300      	movs	r3, #0
 8002942:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 8002946:	2300      	movs	r3, #0
 8002948:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 800294c:	1d3b      	adds	r3, r7, #4
 800294e:	2200      	movs	r2, #0
 8002950:	4619      	mov	r1, r3
 8002952:	4806      	ldr	r0, [pc, #24]	; (800296c <MX_LTDC_Init+0xfc>)
 8002954:	f005 f874 	bl	8007a40 <HAL_LTDC_ConfigLayer>
 8002958:	4603      	mov	r3, r0
 800295a:	2b00      	cmp	r3, #0
 800295c:	d001      	beq.n	8002962 <MX_LTDC_Init+0xf2>
  {
    Error_Handler();
 800295e:	f000 fce5 	bl	800332c <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8002962:	bf00      	nop
 8002964:	3738      	adds	r7, #56	; 0x38
 8002966:	46bd      	mov	sp, r7
 8002968:	bd80      	pop	{r7, pc}
 800296a:	bf00      	nop
 800296c:	200005ac 	.word	0x200005ac
 8002970:	50001000 	.word	0x50001000

08002974 <HAL_LTDC_MspInit>:

void HAL_LTDC_MspInit(LTDC_HandleTypeDef* ltdcHandle)
{
 8002974:	b580      	push	{r7, lr}
 8002976:	b0c0      	sub	sp, #256	; 0x100
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800297c:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8002980:	2200      	movs	r2, #0
 8002982:	601a      	str	r2, [r3, #0]
 8002984:	605a      	str	r2, [r3, #4]
 8002986:	609a      	str	r2, [r3, #8]
 8002988:	60da      	str	r2, [r3, #12]
 800298a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800298c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002990:	22bc      	movs	r2, #188	; 0xbc
 8002992:	2100      	movs	r1, #0
 8002994:	4618      	mov	r0, r3
 8002996:	f018 ffc1 	bl	801b91c <memset>
  if(ltdcHandle->Instance==LTDC)
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	4acf      	ldr	r2, [pc, #828]	; (8002cdc <HAL_LTDC_MspInit+0x368>)
 80029a0:	4293      	cmp	r3, r2
 80029a2:	f040 8196 	bne.w	8002cd2 <HAL_LTDC_MspInit+0x35e>
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 80029a6:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80029aa:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.PLL3.PLL3M = 1;
 80029ac:	2301      	movs	r3, #1
 80029ae:	657b      	str	r3, [r7, #84]	; 0x54
    PeriphClkInitStruct.PLL3.PLL3N = 18;
 80029b0:	2312      	movs	r3, #18
 80029b2:	65bb      	str	r3, [r7, #88]	; 0x58
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 80029b4:	2302      	movs	r3, #2
 80029b6:	65fb      	str	r3, [r7, #92]	; 0x5c
    PeriphClkInitStruct.PLL3.PLL3Q = 2;
 80029b8:	2302      	movs	r3, #2
 80029ba:	663b      	str	r3, [r7, #96]	; 0x60
    PeriphClkInitStruct.PLL3.PLL3R = 1;
 80029bc:	2301      	movs	r3, #1
 80029be:	667b      	str	r3, [r7, #100]	; 0x64
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 80029c0:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80029c4:	66bb      	str	r3, [r7, #104]	; 0x68
    PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOMEDIUM;
 80029c6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80029ca:	66fb      	str	r3, [r7, #108]	; 0x6c
    PeriphClkInitStruct.PLL3.PLL3FRACN = 6144;
 80029cc:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80029d0:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80029d2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80029d6:	4618      	mov	r0, r3
 80029d8:	f006 fb32 	bl	8009040 <HAL_RCCEx_PeriphCLKConfig>
 80029dc:	4603      	mov	r3, r0
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d001      	beq.n	80029e6 <HAL_LTDC_MspInit+0x72>
    {
      Error_Handler();
 80029e2:	f000 fca3 	bl	800332c <Error_Handler>
    }

    /* LTDC clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 80029e6:	4bbe      	ldr	r3, [pc, #760]	; (8002ce0 <HAL_LTDC_MspInit+0x36c>)
 80029e8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80029ec:	4abc      	ldr	r2, [pc, #752]	; (8002ce0 <HAL_LTDC_MspInit+0x36c>)
 80029ee:	f043 0308 	orr.w	r3, r3, #8
 80029f2:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 80029f6:	4bba      	ldr	r3, [pc, #744]	; (8002ce0 <HAL_LTDC_MspInit+0x36c>)
 80029f8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80029fc:	f003 0308 	and.w	r3, r3, #8
 8002a00:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002a02:	6afb      	ldr	r3, [r7, #44]	; 0x2c

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002a04:	4bb6      	ldr	r3, [pc, #728]	; (8002ce0 <HAL_LTDC_MspInit+0x36c>)
 8002a06:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002a0a:	4ab5      	ldr	r2, [pc, #724]	; (8002ce0 <HAL_LTDC_MspInit+0x36c>)
 8002a0c:	f043 0310 	orr.w	r3, r3, #16
 8002a10:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002a14:	4bb2      	ldr	r3, [pc, #712]	; (8002ce0 <HAL_LTDC_MspInit+0x36c>)
 8002a16:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002a1a:	f003 0310 	and.w	r3, r3, #16
 8002a1e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002a20:	6abb      	ldr	r3, [r7, #40]	; 0x28
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8002a22:	4baf      	ldr	r3, [pc, #700]	; (8002ce0 <HAL_LTDC_MspInit+0x36c>)
 8002a24:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002a28:	4aad      	ldr	r2, [pc, #692]	; (8002ce0 <HAL_LTDC_MspInit+0x36c>)
 8002a2a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a2e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002a32:	4bab      	ldr	r3, [pc, #684]	; (8002ce0 <HAL_LTDC_MspInit+0x36c>)
 8002a34:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002a38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a3c:	627b      	str	r3, [r7, #36]	; 0x24
 8002a3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002a40:	4ba7      	ldr	r3, [pc, #668]	; (8002ce0 <HAL_LTDC_MspInit+0x36c>)
 8002a42:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002a46:	4aa6      	ldr	r2, [pc, #664]	; (8002ce0 <HAL_LTDC_MspInit+0x36c>)
 8002a48:	f043 0320 	orr.w	r3, r3, #32
 8002a4c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002a50:	4ba3      	ldr	r3, [pc, #652]	; (8002ce0 <HAL_LTDC_MspInit+0x36c>)
 8002a52:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002a56:	f003 0320 	and.w	r3, r3, #32
 8002a5a:	623b      	str	r3, [r7, #32]
 8002a5c:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002a5e:	4ba0      	ldr	r3, [pc, #640]	; (8002ce0 <HAL_LTDC_MspInit+0x36c>)
 8002a60:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002a64:	4a9e      	ldr	r2, [pc, #632]	; (8002ce0 <HAL_LTDC_MspInit+0x36c>)
 8002a66:	f043 0304 	orr.w	r3, r3, #4
 8002a6a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002a6e:	4b9c      	ldr	r3, [pc, #624]	; (8002ce0 <HAL_LTDC_MspInit+0x36c>)
 8002a70:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002a74:	f003 0304 	and.w	r3, r3, #4
 8002a78:	61fb      	str	r3, [r7, #28]
 8002a7a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8002a7c:	4b98      	ldr	r3, [pc, #608]	; (8002ce0 <HAL_LTDC_MspInit+0x36c>)
 8002a7e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002a82:	4a97      	ldr	r2, [pc, #604]	; (8002ce0 <HAL_LTDC_MspInit+0x36c>)
 8002a84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002a88:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002a8c:	4b94      	ldr	r3, [pc, #592]	; (8002ce0 <HAL_LTDC_MspInit+0x36c>)
 8002a8e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002a92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a96:	61bb      	str	r3, [r7, #24]
 8002a98:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a9a:	4b91      	ldr	r3, [pc, #580]	; (8002ce0 <HAL_LTDC_MspInit+0x36c>)
 8002a9c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002aa0:	4a8f      	ldr	r2, [pc, #572]	; (8002ce0 <HAL_LTDC_MspInit+0x36c>)
 8002aa2:	f043 0301 	orr.w	r3, r3, #1
 8002aa6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002aaa:	4b8d      	ldr	r3, [pc, #564]	; (8002ce0 <HAL_LTDC_MspInit+0x36c>)
 8002aac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002ab0:	f003 0301 	and.w	r3, r3, #1
 8002ab4:	617b      	str	r3, [r7, #20]
 8002ab6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ab8:	4b89      	ldr	r3, [pc, #548]	; (8002ce0 <HAL_LTDC_MspInit+0x36c>)
 8002aba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002abe:	4a88      	ldr	r2, [pc, #544]	; (8002ce0 <HAL_LTDC_MspInit+0x36c>)
 8002ac0:	f043 0302 	orr.w	r3, r3, #2
 8002ac4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002ac8:	4b85      	ldr	r3, [pc, #532]	; (8002ce0 <HAL_LTDC_MspInit+0x36c>)
 8002aca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002ace:	f003 0302 	and.w	r3, r3, #2
 8002ad2:	613b      	str	r3, [r7, #16]
 8002ad4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002ad6:	4b82      	ldr	r3, [pc, #520]	; (8002ce0 <HAL_LTDC_MspInit+0x36c>)
 8002ad8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002adc:	4a80      	ldr	r2, [pc, #512]	; (8002ce0 <HAL_LTDC_MspInit+0x36c>)
 8002ade:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002ae2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002ae6:	4b7e      	ldr	r3, [pc, #504]	; (8002ce0 <HAL_LTDC_MspInit+0x36c>)
 8002ae8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002aec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002af0:	60fb      	str	r3, [r7, #12]
 8002af2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002af4:	4b7a      	ldr	r3, [pc, #488]	; (8002ce0 <HAL_LTDC_MspInit+0x36c>)
 8002af6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002afa:	4a79      	ldr	r2, [pc, #484]	; (8002ce0 <HAL_LTDC_MspInit+0x36c>)
 8002afc:	f043 0308 	orr.w	r3, r3, #8
 8002b00:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002b04:	4b76      	ldr	r3, [pc, #472]	; (8002ce0 <HAL_LTDC_MspInit+0x36c>)
 8002b06:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002b0a:	f003 0308 	and.w	r3, r3, #8
 8002b0e:	60bb      	str	r3, [r7, #8]
 8002b10:	68bb      	ldr	r3, [r7, #8]
    PI4     ------> LTDC_B4
    PI5     ------> LTDC_B5
    PI6     ------> LTDC_B6
    PI7     ------> LTDC_B7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8002b12:	2370      	movs	r3, #112	; 0x70
 8002b14:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b18:	2302      	movs	r3, #2
 8002b1a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b1e:	2300      	movs	r3, #0
 8002b20:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b24:	2300      	movs	r3, #0
 8002b26:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002b2a:	230e      	movs	r3, #14
 8002b2c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002b30:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8002b34:	4619      	mov	r1, r3
 8002b36:	486b      	ldr	r0, [pc, #428]	; (8002ce4 <HAL_LTDC_MspInit+0x370>)
 8002b38:	f004 fbf2 	bl	8007320 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_0|GPIO_PIN_1
 8002b3c:	f240 63f7 	movw	r3, #1783	; 0x6f7
 8002b40:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
                          |GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
                          |GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b44:	2302      	movs	r3, #2
 8002b46:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b4a:	2300      	movs	r3, #0
 8002b4c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b50:	2300      	movs	r3, #0
 8002b52:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002b56:	230e      	movs	r3, #14
 8002b58:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8002b5c:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8002b60:	4619      	mov	r1, r3
 8002b62:	4861      	ldr	r0, [pc, #388]	; (8002ce8 <HAL_LTDC_MspInit+0x374>)
 8002b64:	f004 fbdc 	bl	8007320 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002b68:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002b6c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b70:	2302      	movs	r3, #2
 8002b72:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b76:	2300      	movs	r3, #0
 8002b78:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b7c:	2300      	movs	r3, #0
 8002b7e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002b82:	230e      	movs	r3, #14
 8002b84:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002b88:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8002b8c:	4619      	mov	r1, r3
 8002b8e:	4857      	ldr	r0, [pc, #348]	; (8002cec <HAL_LTDC_MspInit+0x378>)
 8002b90:	f004 fbc6 	bl	8007320 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002b94:	2301      	movs	r3, #1
 8002b96:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b9a:	2302      	movs	r3, #2
 8002b9c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ba0:	2300      	movs	r3, #0
 8002ba2:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ba6:	2300      	movs	r3, #0
 8002ba8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002bac:	230e      	movs	r3, #14
 8002bae:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002bb2:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8002bb6:	4619      	mov	r1, r3
 8002bb8:	484d      	ldr	r0, [pc, #308]	; (8002cf0 <HAL_LTDC_MspInit+0x37c>)
 8002bba:	f004 fbb1 	bl	8007320 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_8|GPIO_PIN_9
 8002bbe:	f24a 330c 	movw	r3, #41740	; 0xa30c
 8002bc2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
                          |GPIO_PIN_13|GPIO_PIN_15;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bc6:	2302      	movs	r3, #2
 8002bc8:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bcc:	2300      	movs	r3, #0
 8002bce:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bd2:	2300      	movs	r3, #0
 8002bd4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002bd8:	230e      	movs	r3, #14
 8002bda:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002bde:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8002be2:	4619      	mov	r1, r3
 8002be4:	4843      	ldr	r0, [pc, #268]	; (8002cf4 <HAL_LTDC_MspInit+0x380>)
 8002be6:	f004 fb9b 	bl	8007320 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_10;
 8002bea:	f44f 6384 	mov.w	r3, #1056	; 0x420
 8002bee:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bf2:	2302      	movs	r3, #2
 8002bf4:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bf8:	2300      	movs	r3, #0
 8002bfa:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bfe:	2300      	movs	r3, #0
 8002c00:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002c04:	230e      	movs	r3, #14
 8002c06:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c0a:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8002c0e:	4619      	mov	r1, r3
 8002c10:	4839      	ldr	r0, [pc, #228]	; (8002cf8 <HAL_LTDC_MspInit+0x384>)
 8002c12:	f004 fb85 	bl	8007320 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002c16:	2302      	movs	r3, #2
 8002c18:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c1c:	2302      	movs	r3, #2
 8002c1e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c22:	2300      	movs	r3, #0
 8002c24:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c28:	2300      	movs	r3, #0
 8002c2a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8002c2e:	2309      	movs	r3, #9
 8002c30:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c34:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8002c38:	4619      	mov	r1, r3
 8002c3a:	4830      	ldr	r0, [pc, #192]	; (8002cfc <HAL_LTDC_MspInit+0x388>)
 8002c3c:	f004 fb70 	bl	8007320 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_11;
 8002c40:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 8002c44:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c48:	2302      	movs	r3, #2
 8002c4a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c4e:	2300      	movs	r3, #0
 8002c50:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c54:	2300      	movs	r3, #0
 8002c56:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002c5a:	230e      	movs	r3, #14
 8002c5c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002c60:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8002c64:	4619      	mov	r1, r3
 8002c66:	4826      	ldr	r0, [pc, #152]	; (8002d00 <HAL_LTDC_MspInit+0x38c>)
 8002c68:	f004 fb5a 	bl	8007320 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002c6c:	2340      	movs	r3, #64	; 0x40
 8002c6e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c72:	2302      	movs	r3, #2
 8002c74:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c78:	2300      	movs	r3, #0
 8002c7a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c7e:	2300      	movs	r3, #0
 8002c80:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002c84:	230e      	movs	r3, #14
 8002c86:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002c8a:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8002c8e:	4619      	mov	r1, r3
 8002c90:	481c      	ldr	r0, [pc, #112]	; (8002d04 <HAL_LTDC_MspInit+0x390>)
 8002c92:	f004 fb45 	bl	8007320 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002c96:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002c9a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c9e:	2302      	movs	r3, #2
 8002ca0:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ca4:	2300      	movs	r3, #0
 8002ca6:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002caa:	2300      	movs	r3, #0
 8002cac:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8002cb0:	2309      	movs	r3, #9
 8002cb2:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002cb6:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8002cba:	4619      	mov	r1, r3
 8002cbc:	4810      	ldr	r0, [pc, #64]	; (8002d00 <HAL_LTDC_MspInit+0x38c>)
 8002cbe:	f004 fb2f 	bl	8007320 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	2105      	movs	r1, #5
 8002cc6:	2058      	movs	r0, #88	; 0x58
 8002cc8:	f004 f906 	bl	8006ed8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8002ccc:	2058      	movs	r0, #88	; 0x58
 8002cce:	f004 f91d 	bl	8006f0c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }
}
 8002cd2:	bf00      	nop
 8002cd4:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8002cd8:	46bd      	mov	sp, r7
 8002cda:	bd80      	pop	{r7, pc}
 8002cdc:	50001000 	.word	0x50001000
 8002ce0:	58024400 	.word	0x58024400
 8002ce4:	58021000 	.word	0x58021000
 8002ce8:	58022000 	.word	0x58022000
 8002cec:	58021400 	.word	0x58021400
 8002cf0:	58020800 	.word	0x58020800
 8002cf4:	58021c00 	.word	0x58021c00
 8002cf8:	58020000 	.word	0x58020000
 8002cfc:	58020400 	.word	0x58020400
 8002d00:	58021800 	.word	0x58021800
 8002d04:	58020c00 	.word	0x58020c00

08002d08 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	b084      	sub	sp, #16
 8002d0c:	af00      	add	r7, sp, #0
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8002d0e:	4b49      	ldr	r3, [pc, #292]	; (8002e34 <main+0x12c>)
 8002d10:	695b      	ldr	r3, [r3, #20]
 8002d12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d11b      	bne.n	8002d52 <main+0x4a>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002d1a:	f3bf 8f4f 	dsb	sy
}
 8002d1e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002d20:	f3bf 8f6f 	isb	sy
}
 8002d24:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8002d26:	4b43      	ldr	r3, [pc, #268]	; (8002e34 <main+0x12c>)
 8002d28:	2200      	movs	r2, #0
 8002d2a:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8002d2e:	f3bf 8f4f 	dsb	sy
}
 8002d32:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002d34:	f3bf 8f6f 	isb	sy
}
 8002d38:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8002d3a:	4b3e      	ldr	r3, [pc, #248]	; (8002e34 <main+0x12c>)
 8002d3c:	695b      	ldr	r3, [r3, #20]
 8002d3e:	4a3d      	ldr	r2, [pc, #244]	; (8002e34 <main+0x12c>)
 8002d40:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d44:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8002d46:	f3bf 8f4f 	dsb	sy
}
 8002d4a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002d4c:	f3bf 8f6f 	isb	sy
}
 8002d50:	e000      	b.n	8002d54 <main+0x4c>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8002d52:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8002d54:	4b37      	ldr	r3, [pc, #220]	; (8002e34 <main+0x12c>)
 8002d56:	695b      	ldr	r3, [r3, #20]
 8002d58:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d138      	bne.n	8002dd2 <main+0xca>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8002d60:	4b34      	ldr	r3, [pc, #208]	; (8002e34 <main+0x12c>)
 8002d62:	2200      	movs	r2, #0
 8002d64:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8002d68:	f3bf 8f4f 	dsb	sy
}
 8002d6c:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8002d6e:	4b31      	ldr	r3, [pc, #196]	; (8002e34 <main+0x12c>)
 8002d70:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002d74:	60fb      	str	r3, [r7, #12]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	0b5b      	lsrs	r3, r3, #13
 8002d7a:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8002d7e:	60bb      	str	r3, [r7, #8]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	08db      	lsrs	r3, r3, #3
 8002d84:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002d88:	607b      	str	r3, [r7, #4]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8002d8a:	68bb      	ldr	r3, [r7, #8]
 8002d8c:	015a      	lsls	r2, r3, #5
 8002d8e:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8002d92:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8002d94:	687a      	ldr	r2, [r7, #4]
 8002d96:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8002d98:	4926      	ldr	r1, [pc, #152]	; (8002e34 <main+0x12c>)
 8002d9a:	4313      	orrs	r3, r2
 8002d9c:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	1e5a      	subs	r2, r3, #1
 8002da4:	607a      	str	r2, [r7, #4]
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d1ef      	bne.n	8002d8a <main+0x82>
    } while(sets-- != 0U);
 8002daa:	68bb      	ldr	r3, [r7, #8]
 8002dac:	1e5a      	subs	r2, r3, #1
 8002dae:	60ba      	str	r2, [r7, #8]
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d1e5      	bne.n	8002d80 <main+0x78>
  __ASM volatile ("dsb 0xF":::"memory");
 8002db4:	f3bf 8f4f 	dsb	sy
}
 8002db8:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8002dba:	4b1e      	ldr	r3, [pc, #120]	; (8002e34 <main+0x12c>)
 8002dbc:	695b      	ldr	r3, [r3, #20]
 8002dbe:	4a1d      	ldr	r2, [pc, #116]	; (8002e34 <main+0x12c>)
 8002dc0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002dc4:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8002dc6:	f3bf 8f4f 	dsb	sy
}
 8002dca:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002dcc:	f3bf 8f6f 	isb	sy
}
 8002dd0:	e000      	b.n	8002dd4 <main+0xcc>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8002dd2:	bf00      	nop
  SCB_EnableDCache();

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002dd4:	f001 fab0 	bl	8004338 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002dd8:	f000 f830 	bl	8002e3c <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8002ddc:	f000 f8b2 	bl	8002f44 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002de0:	f7fe f972 	bl	80010c8 <MX_GPIO_Init>
  MX_SPI2_Init();
 8002de4:	f000 fb8a 	bl	80034fc <MX_SPI2_Init>
  MX_ADC3_Init();
 8002de8:	f7fd fcce 	bl	8000788 <MX_ADC3_Init>
  MX_I2C1_SMBUS_Init();
 8002dec:	f7fe fa6e 	bl	80012cc <MX_I2C1_SMBUS_Init>
  MX_DMA2D_Init();
 8002df0:	f7fd fdfe 	bl	80009f0 <MX_DMA2D_Init>
  MX_LTDC_Init();
 8002df4:	f7ff fd3c 	bl	8002870 <MX_LTDC_Init>
  MX_CRC_Init();
 8002df8:	f7fd fdb6 	bl	8000968 <MX_CRC_Init>
  MX_TIM2_Init();
 8002dfc:	f000 fe58 	bl	8003ab0 <MX_TIM2_Init>
  MX_QUADSPI_Init();
 8002e00:	f000 fa9a 	bl	8003338 <MX_QUADSPI_Init>
  MX_USART3_UART_Init();
 8002e04:	f000 ff2c 	bl	8003c60 <MX_USART3_UART_Init>
  MX_ADC1_Init();
 8002e08:	f7fd fc44 	bl	8000694 <MX_ADC1_Init>
  //MX_SDMMC1_SD_Init();
  //MX_TouchGFX_Init();
  /* USER CODE BEGIN 2 */
  L6474_SetNbDevices(1);
 8002e0c:	2001      	movs	r0, #1
 8002e0e:	f7ff f823 	bl	8001e58 <L6474_SetNbDevices>
  L6474_Init(NULL);
 8002e12:	2000      	movs	r0, #0
 8002e14:	f7fe fd8c 	bl	8001930 <L6474_Init>
  L6474_SelectStepMode(0, STEP_MODE_1_16);
 8002e18:	2104      	movs	r1, #4
 8002e1a:	2000      	movs	r0, #0
 8002e1c:	f7fe fea4 	bl	8001b68 <L6474_SelectStepMode>
  L6474_AttachFlagInterrupt(MyFlagInterruptHandler);
 8002e20:	4805      	ldr	r0, [pc, #20]	; (8002e38 <main+0x130>)
 8002e22:	f7fe fafd 	bl	8001420 <L6474_AttachFlagInterrupt>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8002e26:	f00b fd11 	bl	800e84c <osKernelInitialize>
  MX_FREERTOS_Init();
 8002e2a:	f7fd fe3d 	bl	8000aa8 <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 8002e2e:	f00b fd31 	bl	800e894 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8002e32:	e7fe      	b.n	8002e32 <main+0x12a>
 8002e34:	e000ed00 	.word	0xe000ed00
 8002e38:	08002fa1 	.word	0x08002fa1

08002e3c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	b09c      	sub	sp, #112	; 0x70
 8002e40:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002e42:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002e46:	224c      	movs	r2, #76	; 0x4c
 8002e48:	2100      	movs	r1, #0
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	f018 fd66 	bl	801b91c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002e50:	1d3b      	adds	r3, r7, #4
 8002e52:	2220      	movs	r2, #32
 8002e54:	2100      	movs	r1, #0
 8002e56:	4618      	mov	r0, r3
 8002e58:	f018 fd60 	bl	801b91c <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8002e5c:	2002      	movs	r0, #2
 8002e5e:	f004 ffff 	bl	8007e60 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002e62:	2300      	movs	r3, #0
 8002e64:	603b      	str	r3, [r7, #0]
 8002e66:	4b34      	ldr	r3, [pc, #208]	; (8002f38 <SystemClock_Config+0xfc>)
 8002e68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e6a:	4a33      	ldr	r2, [pc, #204]	; (8002f38 <SystemClock_Config+0xfc>)
 8002e6c:	f023 0301 	bic.w	r3, r3, #1
 8002e70:	62d3      	str	r3, [r2, #44]	; 0x2c
 8002e72:	4b31      	ldr	r3, [pc, #196]	; (8002f38 <SystemClock_Config+0xfc>)
 8002e74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e76:	f003 0301 	and.w	r3, r3, #1
 8002e7a:	603b      	str	r3, [r7, #0]
 8002e7c:	4b2f      	ldr	r3, [pc, #188]	; (8002f3c <SystemClock_Config+0x100>)
 8002e7e:	699b      	ldr	r3, [r3, #24]
 8002e80:	4a2e      	ldr	r2, [pc, #184]	; (8002f3c <SystemClock_Config+0x100>)
 8002e82:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002e86:	6193      	str	r3, [r2, #24]
 8002e88:	4b2c      	ldr	r3, [pc, #176]	; (8002f3c <SystemClock_Config+0x100>)
 8002e8a:	699b      	ldr	r3, [r3, #24]
 8002e8c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002e90:	603b      	str	r3, [r7, #0]
 8002e92:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8002e94:	bf00      	nop
 8002e96:	4b29      	ldr	r3, [pc, #164]	; (8002f3c <SystemClock_Config+0x100>)
 8002e98:	699b      	ldr	r3, [r3, #24]
 8002e9a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002e9e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002ea2:	d1f8      	bne.n	8002e96 <SystemClock_Config+0x5a>
  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8002ea4:	4b26      	ldr	r3, [pc, #152]	; (8002f40 <SystemClock_Config+0x104>)
 8002ea6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ea8:	f023 0303 	bic.w	r3, r3, #3
 8002eac:	4a24      	ldr	r2, [pc, #144]	; (8002f40 <SystemClock_Config+0x104>)
 8002eae:	f043 0302 	orr.w	r3, r3, #2
 8002eb2:	6293      	str	r3, [r2, #40]	; 0x28
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002eb4:	2301      	movs	r3, #1
 8002eb6:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002eb8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002ebc:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002ebe:	2302      	movs	r3, #2
 8002ec0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002ec2:	2302      	movs	r3, #2
 8002ec4:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8002ec6:	2301      	movs	r3, #1
 8002ec8:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 100;
 8002eca:	2364      	movs	r3, #100	; 0x64
 8002ecc:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8002ece:	2302      	movs	r3, #2
 8002ed0:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002ed2:	2304      	movs	r3, #4
 8002ed4:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8002ed6:	2302      	movs	r3, #2
 8002ed8:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8002eda:	230c      	movs	r3, #12
 8002edc:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8002ede:	2300      	movs	r3, #0
 8002ee0:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8002ee2:	2300      	movs	r3, #0
 8002ee4:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002ee6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002eea:	4618      	mov	r0, r3
 8002eec:	f005 f8ac 	bl	8008048 <HAL_RCC_OscConfig>
 8002ef0:	4603      	mov	r3, r0
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d001      	beq.n	8002efa <SystemClock_Config+0xbe>
  {
    Error_Handler();
 8002ef6:	f000 fa19 	bl	800332c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002efa:	233f      	movs	r3, #63	; 0x3f
 8002efc:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002efe:	2303      	movs	r3, #3
 8002f00:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8002f02:	2300      	movs	r3, #0
 8002f04:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8002f06:	2308      	movs	r3, #8
 8002f08:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8002f0a:	2340      	movs	r3, #64	; 0x40
 8002f0c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8002f0e:	2340      	movs	r3, #64	; 0x40
 8002f10:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8002f12:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002f16:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8002f18:	2340      	movs	r3, #64	; 0x40
 8002f1a:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002f1c:	1d3b      	adds	r3, r7, #4
 8002f1e:	2102      	movs	r1, #2
 8002f20:	4618      	mov	r0, r3
 8002f22:	f005 fcbf 	bl	80088a4 <HAL_RCC_ClockConfig>
 8002f26:	4603      	mov	r3, r0
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d001      	beq.n	8002f30 <SystemClock_Config+0xf4>
  {
    Error_Handler();
 8002f2c:	f000 f9fe 	bl	800332c <Error_Handler>
  }
}
 8002f30:	bf00      	nop
 8002f32:	3770      	adds	r7, #112	; 0x70
 8002f34:	46bd      	mov	sp, r7
 8002f36:	bd80      	pop	{r7, pc}
 8002f38:	58000400 	.word	0x58000400
 8002f3c:	58024800 	.word	0x58024800
 8002f40:	58024400 	.word	0x58024400

08002f44 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8002f44:	b580      	push	{r7, lr}
 8002f46:	b0b0      	sub	sp, #192	; 0xc0
 8002f48:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002f4a:	1d3b      	adds	r3, r7, #4
 8002f4c:	22bc      	movs	r2, #188	; 0xbc
 8002f4e:	2100      	movs	r1, #0
 8002f50:	4618      	mov	r0, r3
 8002f52:	f018 fce3 	bl	801b91c <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8002f56:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8002f5a:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.PLL2.PLL2M = 1;
 8002f5c:	2301      	movs	r3, #1
 8002f5e:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 18;
 8002f60:	2312      	movs	r3, #18
 8002f62:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 2;
 8002f64:	2302      	movs	r3, #2
 8002f66:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8002f68:	2302      	movs	r3, #2
 8002f6a:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8002f6c:	2302      	movs	r3, #2
 8002f6e:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8002f70:	23c0      	movs	r3, #192	; 0xc0
 8002f72:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 8002f74:	2320      	movs	r3, #32
 8002f76:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 6144;
 8002f78:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8002f7c:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8002f7e:	2300      	movs	r3, #0
 8002f80:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002f84:	1d3b      	adds	r3, r7, #4
 8002f86:	4618      	mov	r0, r3
 8002f88:	f006 f85a 	bl	8009040 <HAL_RCCEx_PeriphCLKConfig>
 8002f8c:	4603      	mov	r3, r0
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d001      	beq.n	8002f96 <PeriphCommonClock_Config+0x52>
  {
    Error_Handler();
 8002f92:	f000 f9cb 	bl	800332c <Error_Handler>
  }
}
 8002f96:	bf00      	nop
 8002f98:	37c0      	adds	r7, #192	; 0xc0
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	bd80      	pop	{r7, pc}
	...

08002fa0 <MyFlagInterruptHandler>:

/* USER CODE BEGIN 4 */
//stepper driver interrupt
void MyFlagInterruptHandler(void)
{
 8002fa0:	b580      	push	{r7, lr}
 8002fa2:	b082      	sub	sp, #8
 8002fa4:	af00      	add	r7, sp, #0
  /* Get the value of the status register via the L6474 command GET_STATUS */
  uint16_t statusRegister = L6474_CmdGetStatus(0);
 8002fa6:	2000      	movs	r0, #0
 8002fa8:	f7fe fb58 	bl	800165c <L6474_CmdGetStatus>
 8002fac:	4603      	mov	r3, r0
 8002fae:	80fb      	strh	r3, [r7, #6]

  /* Check HIZ flag: if set, power brigdes are disabled */
  if ((statusRegister & L6474_STATUS_HIZ) == L6474_STATUS_HIZ)
 8002fb0:	88fb      	ldrh	r3, [r7, #6]
 8002fb2:	f003 0301 	and.w	r3, r3, #1
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d007      	beq.n	8002fca <MyFlagInterruptHandler+0x2a>
  {
    // HIZ state
	  HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
 8002fba:	2180      	movs	r1, #128	; 0x80
 8002fbc:	4837      	ldr	r0, [pc, #220]	; (800309c <MyFlagInterruptHandler+0xfc>)
 8002fbe:	f004 fb78 	bl	80076b2 <HAL_GPIO_TogglePin>
	  	  HAL_Delay(1000);
 8002fc2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002fc6:	f001 fa13 	bl	80043f0 <HAL_Delay>

    // Action to be customized
  }

  /* Check direction bit */
  if ((statusRegister & L6474_STATUS_DIR) == L6474_STATUS_DIR)
 8002fca:	88fb      	ldrh	r3, [r7, #6]
 8002fcc:	f003 0310 	and.w	r3, r3, #16
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d008      	beq.n	8002fe6 <MyFlagInterruptHandler+0x46>
  {
    // Forward direction is set
	  HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
 8002fd4:	2180      	movs	r1, #128	; 0x80
 8002fd6:	4831      	ldr	r0, [pc, #196]	; (800309c <MyFlagInterruptHandler+0xfc>)
 8002fd8:	f004 fb6b 	bl	80076b2 <HAL_GPIO_TogglePin>
	  HAL_Delay(1000);
 8002fdc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002fe0:	f001 fa06 	bl	80043f0 <HAL_Delay>
 8002fe4:	e007      	b.n	8002ff6 <MyFlagInterruptHandler+0x56>
    // Action to be customized
  }
  else
  {
    // Backward direction is set
	  HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
 8002fe6:	2180      	movs	r1, #128	; 0x80
 8002fe8:	482c      	ldr	r0, [pc, #176]	; (800309c <MyFlagInterruptHandler+0xfc>)
 8002fea:	f004 fb62 	bl	80076b2 <HAL_GPIO_TogglePin>
	  	  HAL_Delay(1000);
 8002fee:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002ff2:	f001 f9fd 	bl	80043f0 <HAL_Delay>
  }

  /* Check NOTPERF_CMD flag: if set, the command received by SPI can't be performed */
  /* This often occures when a command is sent to the L6474 */
  /* while it is in HIZ state */
  if ((statusRegister & L6474_STATUS_NOTPERF_CMD) == L6474_STATUS_NOTPERF_CMD)
 8002ff6:	88fb      	ldrh	r3, [r7, #6]
 8002ff8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d007      	beq.n	8003010 <MyFlagInterruptHandler+0x70>
  {
      // Command received by SPI can't be performed
	  HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
 8003000:	2180      	movs	r1, #128	; 0x80
 8003002:	4826      	ldr	r0, [pc, #152]	; (800309c <MyFlagInterruptHandler+0xfc>)
 8003004:	f004 fb55 	bl	80076b2 <HAL_GPIO_TogglePin>
	  HAL_Delay(1000);
 8003008:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800300c:	f001 f9f0 	bl	80043f0 <HAL_Delay>
     // Action to be customized
  }

  /* Check WRONG_CMD flag: if set, the command does not exist */
  if ((statusRegister & L6474_STATUS_WRONG_CMD) == L6474_STATUS_WRONG_CMD)
 8003010:	88fb      	ldrh	r3, [r7, #6]
 8003012:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003016:	2b00      	cmp	r3, #0
 8003018:	d007      	beq.n	800302a <MyFlagInterruptHandler+0x8a>
  {
     //command received by SPI does not exist
	  HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
 800301a:	2180      	movs	r1, #128	; 0x80
 800301c:	481f      	ldr	r0, [pc, #124]	; (800309c <MyFlagInterruptHandler+0xfc>)
 800301e:	f004 fb48 	bl	80076b2 <HAL_GPIO_TogglePin>
	  HAL_Delay(1000);
 8003022:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003026:	f001 f9e3 	bl	80043f0 <HAL_Delay>
     // Action to be customized
  }

  /* Check UVLO flag: if not set, there is an undervoltage lock-out */
  if ((statusRegister & L6474_STATUS_UVLO) == 0)
 800302a:	88fb      	ldrh	r3, [r7, #6]
 800302c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003030:	2b00      	cmp	r3, #0
 8003032:	d107      	bne.n	8003044 <MyFlagInterruptHandler+0xa4>
  {
     //undervoltage lock-out
	  HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
 8003034:	2180      	movs	r1, #128	; 0x80
 8003036:	4819      	ldr	r0, [pc, #100]	; (800309c <MyFlagInterruptHandler+0xfc>)
 8003038:	f004 fb3b 	bl	80076b2 <HAL_GPIO_TogglePin>
	  HAL_Delay(1000);
 800303c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003040:	f001 f9d6 	bl	80043f0 <HAL_Delay>
     // Action to be customized
  }

  /* Check TH_WRN flag: if not set, the thermal warning threshold is reached */
  if ((statusRegister & L6474_STATUS_TH_WRN) == 0)
 8003044:	88fb      	ldrh	r3, [r7, #6]
 8003046:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800304a:	2b00      	cmp	r3, #0
 800304c:	d107      	bne.n	800305e <MyFlagInterruptHandler+0xbe>
  {
    //thermal warning threshold is reached
	  HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
 800304e:	2180      	movs	r1, #128	; 0x80
 8003050:	4812      	ldr	r0, [pc, #72]	; (800309c <MyFlagInterruptHandler+0xfc>)
 8003052:	f004 fb2e 	bl	80076b2 <HAL_GPIO_TogglePin>
	  	  HAL_Delay(1000);
 8003056:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800305a:	f001 f9c9 	bl	80043f0 <HAL_Delay>
    // Action to be customized
  }

  /* Check TH_SHD flag: if not set, the thermal shut down threshold is reached */
  if ((statusRegister & L6474_STATUS_TH_SD) == 0)
 800305e:	88fb      	ldrh	r3, [r7, #6]
 8003060:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003064:	2b00      	cmp	r3, #0
 8003066:	d107      	bne.n	8003078 <MyFlagInterruptHandler+0xd8>
  {
    //thermal shut down threshold is reached
	  HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
 8003068:	2180      	movs	r1, #128	; 0x80
 800306a:	480c      	ldr	r0, [pc, #48]	; (800309c <MyFlagInterruptHandler+0xfc>)
 800306c:	f004 fb21 	bl	80076b2 <HAL_GPIO_TogglePin>
	  HAL_Delay(1000);
 8003070:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003074:	f001 f9bc 	bl	80043f0 <HAL_Delay>
    // Action to be customized

  }

  /* Check OCD  flag: if not set, there is an overcurrent detection */
  if ((statusRegister & L6474_STATUS_OCD) == 0)
 8003078:	88fb      	ldrh	r3, [r7, #6]
 800307a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800307e:	2b00      	cmp	r3, #0
 8003080:	d107      	bne.n	8003092 <MyFlagInterruptHandler+0xf2>
  {
    //overcurrent detection
	  HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
 8003082:	2180      	movs	r1, #128	; 0x80
 8003084:	4805      	ldr	r0, [pc, #20]	; (800309c <MyFlagInterruptHandler+0xfc>)
 8003086:	f004 fb14 	bl	80076b2 <HAL_GPIO_TogglePin>
	  HAL_Delay(1000);
 800308a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800308e:	f001 f9af 	bl	80043f0 <HAL_Delay>
    // Action to be customized
  }

}
 8003092:	bf00      	nop
 8003094:	3708      	adds	r7, #8
 8003096:	46bd      	mov	sp, r7
 8003098:	bd80      	pop	{r7, pc}
 800309a:	bf00      	nop
 800309c:	58020400 	.word	0x58020400

080030a0 <HAL_ADC_LevelOutOfWindowCallback>:
// cpu temp interrupt
void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc){
 80030a0:	b580      	push	{r7, lr}
 80030a2:	b082      	sub	sp, #8
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	6078      	str	r0, [r7, #4]
	// do something in case of analog watchdog interrupts
	HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET);
 80030a8:	2201      	movs	r2, #1
 80030aa:	2180      	movs	r1, #128	; 0x80
 80030ac:	4804      	ldr	r0, [pc, #16]	; (80030c0 <HAL_ADC_LevelOutOfWindowCallback+0x20>)
 80030ae:	f004 fae7 	bl	8007680 <HAL_GPIO_WritePin>
	HAL_ADC_Stop_IT(hadc);
 80030b2:	6878      	ldr	r0, [r7, #4]
 80030b4:	f002 f968 	bl	8005388 <HAL_ADC_Stop_IT>
}
 80030b8:	bf00      	nop
 80030ba:	3708      	adds	r7, #8
 80030bc:	46bd      	mov	sp, r7
 80030be:	bd80      	pop	{r7, pc}
 80030c0:	58020400 	.word	0x58020400
 80030c4:	00000000 	.word	0x00000000

080030c8 <Screws_Speed_From_FlowRate>:

// returns the speed of Screws (mm/s) needed for a given flow_rate (mm^3/h) and syringe radius(mm)
float Screws_Speed_From_FlowRate(float flow_rate , float radius ){
 80030c8:	b480      	push	{r7}
 80030ca:	b085      	sub	sp, #20
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	ed87 0a01 	vstr	s0, [r7, #4]
 80030d2:	edc7 0a00 	vstr	s1, [r7]
	float section = radius*radius*3.14159;
 80030d6:	edd7 7a00 	vldr	s15, [r7]
 80030da:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80030de:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80030e2:	ed9f 6b0f 	vldr	d6, [pc, #60]	; 8003120 <Screws_Speed_From_FlowRate+0x58>
 80030e6:	ee27 7b06 	vmul.f64	d7, d7, d6
 80030ea:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80030ee:	edc7 7a03 	vstr	s15, [r7, #12]
	flow_rate = flow_rate/3600;
 80030f2:	ed97 7a01 	vldr	s14, [r7, #4]
 80030f6:	eddf 6a0c 	vldr	s13, [pc, #48]	; 8003128 <Screws_Speed_From_FlowRate+0x60>
 80030fa:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80030fe:	edc7 7a01 	vstr	s15, [r7, #4]
	return flow_rate/section;
 8003102:	ed97 7a01 	vldr	s14, [r7, #4]
 8003106:	edd7 7a03 	vldr	s15, [r7, #12]
 800310a:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800310e:	eef0 7a66 	vmov.f32	s15, s13
}
 8003112:	eeb0 0a67 	vmov.f32	s0, s15
 8003116:	3714      	adds	r7, #20
 8003118:	46bd      	mov	sp, r7
 800311a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800311e:	4770      	bx	lr
 8003120:	f01b866e 	.word	0xf01b866e
 8003124:	400921f9 	.word	0x400921f9
 8003128:	45610000 	.word	0x45610000

0800312c <Motor_Speed>:
// returns the speed of Screws needed for a given fluid volume(m^3) , time(seconds) and radius
float Screws_Speed_From_Time_And_Volume(float time , float volume,uint8_t radius){
	return Screws_Speed_From_FlowRate(volume/time,radius) ;
}
// returns the motor speed needed (rps)
float Motor_Speed(float screwspeed){
 800312c:	b480      	push	{r7}
 800312e:	b083      	sub	sp, #12
 8003130:	af00      	add	r7, sp, #0
 8003132:	ed87 0a01 	vstr	s0, [r7, #4]
	return screwspeed / (SCREWSTEP);
 8003136:	edd7 7a01 	vldr	s15, [r7, #4]
 800313a:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 800313e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8003142:	eef0 7a66 	vmov.f32	s15, s13
}
 8003146:	eeb0 0a67 	vmov.f32	s0, s15
 800314a:	370c      	adds	r7, #12
 800314c:	46bd      	mov	sp, r7
 800314e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003152:	4770      	bx	lr

08003154 <SyringeMove>:
float Time_Needed(float flow_rate, float volume_to_inject){
	flow_rate = flow_rate/3600;
	return (volume_to_inject/flow_rate);
}

void SyringeMove(float FlowRate , uint8_t radius){
 8003154:	b580      	push	{r7, lr}
 8003156:	b086      	sub	sp, #24
 8003158:	af00      	add	r7, sp, #0
 800315a:	ed87 0a01 	vstr	s0, [r7, #4]
 800315e:	4603      	mov	r3, r0
 8003160:	70fb      	strb	r3, [r7, #3]
	float screwspeed , motorspeed;
	int pps;
	screwspeed = Screws_Speed_From_FlowRate(FlowRate,radius);
 8003162:	78fb      	ldrb	r3, [r7, #3]
 8003164:	ee07 3a90 	vmov	s15, r3
 8003168:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800316c:	eef0 0a67 	vmov.f32	s1, s15
 8003170:	ed97 0a01 	vldr	s0, [r7, #4]
 8003174:	f7ff ffa8 	bl	80030c8 <Screws_Speed_From_FlowRate>
 8003178:	ed87 0a05 	vstr	s0, [r7, #20]
	motorspeed = Motor_Speed(screwspeed);
 800317c:	ed97 0a05 	vldr	s0, [r7, #20]
 8003180:	f7ff ffd4 	bl	800312c <Motor_Speed>
 8003184:	ed87 0a04 	vstr	s0, [r7, #16]
	pps=motorspeed*200*16; // 1/16 microstep
 8003188:	edd7 7a04 	vldr	s15, [r7, #16]
 800318c:	ed9f 7a10 	vldr	s14, [pc, #64]	; 80031d0 <SyringeMove+0x7c>
 8003190:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003194:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 8003198:	ee67 7a87 	vmul.f32	s15, s15, s14
 800319c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80031a0:	ee17 3a90 	vmov	r3, s15
 80031a4:	60fb      	str	r3, [r7, #12]
	L6474_SetMaxSpeed(0,pps);
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	b29b      	uxth	r3, r3
 80031aa:	4619      	mov	r1, r3
 80031ac:	2000      	movs	r0, #0
 80031ae:	f7fe fe6f 	bl	8001e90 <L6474_SetMaxSpeed>
	L6474_SetMinSpeed(0, pps);
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	b29b      	uxth	r3, r3
 80031b6:	4619      	mov	r1, r3
 80031b8:	2000      	movs	r0, #0
 80031ba:	f7fe feb5 	bl	8001f28 <L6474_SetMinSpeed>
	L6474_Run(0, FORWARD);
 80031be:	2101      	movs	r1, #1
 80031c0:	2000      	movs	r0, #0
 80031c2:	f7fe fc9f 	bl	8001b04 <L6474_Run>
	/*drv8825_setSpeedRPM(drv8825, motorspeed*60);
	drv8825_setEn(drv8825, EN_START);*/
}
 80031c6:	bf00      	nop
 80031c8:	3718      	adds	r7, #24
 80031ca:	46bd      	mov	sp, r7
 80031cc:	bd80      	pop	{r7, pc}
 80031ce:	bf00      	nop
 80031d0:	43480000 	.word	0x43480000

080031d4 <SyringeStop>:
void SyringeStop(){
 80031d4:	b580      	push	{r7, lr}
 80031d6:	af00      	add	r7, sp, #0
		//drv8825_setEn(drv8825, EN_STOP);
	L6474_HardStop(0);
 80031d8:	2000      	movs	r0, #0
 80031da:	f7fe fc0d 	bl	80019f8 <L6474_HardStop>
}
 80031de:	bf00      	nop
 80031e0:	bd80      	pop	{r7, pc}

080031e2 <map>:

uint16_t map(uint16_t x, uint16_t in_min, uint16_t in_max, uint16_t out_min, uint16_t out_max) {
 80031e2:	b490      	push	{r4, r7}
 80031e4:	b082      	sub	sp, #8
 80031e6:	af00      	add	r7, sp, #0
 80031e8:	4604      	mov	r4, r0
 80031ea:	4608      	mov	r0, r1
 80031ec:	4611      	mov	r1, r2
 80031ee:	461a      	mov	r2, r3
 80031f0:	4623      	mov	r3, r4
 80031f2:	80fb      	strh	r3, [r7, #6]
 80031f4:	4603      	mov	r3, r0
 80031f6:	80bb      	strh	r3, [r7, #4]
 80031f8:	460b      	mov	r3, r1
 80031fa:	807b      	strh	r3, [r7, #2]
 80031fc:	4613      	mov	r3, r2
 80031fe:	803b      	strh	r3, [r7, #0]
  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8003200:	88fa      	ldrh	r2, [r7, #6]
 8003202:	88bb      	ldrh	r3, [r7, #4]
 8003204:	1ad3      	subs	r3, r2, r3
 8003206:	8a39      	ldrh	r1, [r7, #16]
 8003208:	883a      	ldrh	r2, [r7, #0]
 800320a:	1a8a      	subs	r2, r1, r2
 800320c:	fb03 f202 	mul.w	r2, r3, r2
 8003210:	8879      	ldrh	r1, [r7, #2]
 8003212:	88bb      	ldrh	r3, [r7, #4]
 8003214:	1acb      	subs	r3, r1, r3
 8003216:	fb92 f3f3 	sdiv	r3, r2, r3
 800321a:	b29a      	uxth	r2, r3
 800321c:	883b      	ldrh	r3, [r7, #0]
 800321e:	4413      	add	r3, r2
 8003220:	b29b      	uxth	r3, r3
}
 8003222:	4618      	mov	r0, r3
 8003224:	3708      	adds	r7, #8
 8003226:	46bd      	mov	sp, r7
 8003228:	bc90      	pop	{r4, r7}
 800322a:	4770      	bx	lr

0800322c <position>:
uint16_t position(){
 800322c:	b580      	push	{r7, lr}
 800322e:	b084      	sub	sp, #16
 8003230:	af02      	add	r7, sp, #8
	uint16_t readValue,traveled_steps,count=0 ;
 8003232:	2300      	movs	r3, #0
 8003234:	80fb      	strh	r3, [r7, #6]
	HAL_ADC_Start(&hadc1);
 8003236:	481b      	ldr	r0, [pc, #108]	; (80032a4 <position+0x78>)
 8003238:	f001 fda8 	bl	8004d8c <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, 100);
 800323c:	2164      	movs	r1, #100	; 0x64
 800323e:	4819      	ldr	r0, [pc, #100]	; (80032a4 <position+0x78>)
 8003240:	f001 fe6e 	bl	8004f20 <HAL_ADC_PollForConversion>
	readValue = HAL_ADC_GetValue(&hadc1);
 8003244:	4817      	ldr	r0, [pc, #92]	; (80032a4 <position+0x78>)
 8003246:	f002 f8db 	bl	8005400 <HAL_ADC_GetValue>
 800324a:	4603      	mov	r3, r0
 800324c:	80bb      	strh	r3, [r7, #4]
	traveled_steps=map(readValue, 0, 65535,0 ,2000)+(count*2000); // 10tours * 200steps
 800324e:	88b8      	ldrh	r0, [r7, #4]
 8003250:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8003254:	9300      	str	r3, [sp, #0]
 8003256:	2300      	movs	r3, #0
 8003258:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800325c:	2100      	movs	r1, #0
 800325e:	f7ff ffc0 	bl	80031e2 <map>
 8003262:	4603      	mov	r3, r0
 8003264:	461a      	mov	r2, r3
 8003266:	88fb      	ldrh	r3, [r7, #6]
 8003268:	4619      	mov	r1, r3
 800326a:	0149      	lsls	r1, r1, #5
 800326c:	1ac9      	subs	r1, r1, r3
 800326e:	0089      	lsls	r1, r1, #2
 8003270:	440b      	add	r3, r1
 8003272:	011b      	lsls	r3, r3, #4
 8003274:	b29b      	uxth	r3, r3
 8003276:	4413      	add	r3, r2
 8003278:	807b      	strh	r3, [r7, #2]
	if(traveled_steps%2000==0)
 800327a:	887b      	ldrh	r3, [r7, #2]
 800327c:	4a0a      	ldr	r2, [pc, #40]	; (80032a8 <position+0x7c>)
 800327e:	fba2 1203 	umull	r1, r2, r2, r3
 8003282:	09d2      	lsrs	r2, r2, #7
 8003284:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8003288:	fb01 f202 	mul.w	r2, r1, r2
 800328c:	1a9b      	subs	r3, r3, r2
 800328e:	b29b      	uxth	r3, r3
 8003290:	2b00      	cmp	r3, #0
 8003292:	d102      	bne.n	800329a <position+0x6e>
		count++;
 8003294:	88fb      	ldrh	r3, [r7, #6]
 8003296:	3301      	adds	r3, #1
 8003298:	80fb      	strh	r3, [r7, #6]
	return traveled_steps;
 800329a:	887b      	ldrh	r3, [r7, #2]
}
 800329c:	4618      	mov	r0, r3
 800329e:	3708      	adds	r7, #8
 80032a0:	46bd      	mov	sp, r7
 80032a2:	bd80      	pop	{r7, pc}
 80032a4:	20000330 	.word	0x20000330
 80032a8:	10624dd3 	.word	0x10624dd3

080032ac <calculate_volume_left>:
float calculate_volume_left(uint16_t traveled_steps ,float flowrate ,float volume_to_inject ){
 80032ac:	b580      	push	{r7, lr}
 80032ae:	b086      	sub	sp, #24
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	4603      	mov	r3, r0
 80032b4:	ed87 0a02 	vstr	s0, [r7, #8]
 80032b8:	edc7 0a01 	vstr	s1, [r7, #4]
 80032bc:	81fb      	strh	r3, [r7, #14]
	float injectedVolume;
	injectedVolume = (traveled_steps / L6474_GetCurrentSpeed(0))*(flowrate/3600);
 80032be:	2000      	movs	r0, #0
 80032c0:	f7fe fb82 	bl	80019c8 <L6474_GetCurrentSpeed>
 80032c4:	4603      	mov	r3, r0
 80032c6:	461a      	mov	r2, r3
 80032c8:	89fb      	ldrh	r3, [r7, #14]
 80032ca:	fbb3 f3f2 	udiv	r3, r3, r2
 80032ce:	b29b      	uxth	r3, r3
 80032d0:	ee07 3a90 	vmov	s15, r3
 80032d4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80032d8:	edd7 6a02 	vldr	s13, [r7, #8]
 80032dc:	ed9f 6a09 	vldr	s12, [pc, #36]	; 8003304 <calculate_volume_left+0x58>
 80032e0:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80032e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80032e8:	edc7 7a05 	vstr	s15, [r7, #20]
	return (volume_to_inject-injectedVolume);
 80032ec:	ed97 7a01 	vldr	s14, [r7, #4]
 80032f0:	edd7 7a05 	vldr	s15, [r7, #20]
 80032f4:	ee77 7a67 	vsub.f32	s15, s14, s15
}
 80032f8:	eeb0 0a67 	vmov.f32	s0, s15
 80032fc:	3718      	adds	r7, #24
 80032fe:	46bd      	mov	sp, r7
 8003300:	bd80      	pop	{r7, pc}
 8003302:	bf00      	nop
 8003304:	45610000 	.word	0x45610000

08003308 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003308:	b580      	push	{r7, lr}
 800330a:	b082      	sub	sp, #8
 800330c:	af00      	add	r7, sp, #0
 800330e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM3) {
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	4a04      	ldr	r2, [pc, #16]	; (8003328 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8003316:	4293      	cmp	r3, r2
 8003318:	d101      	bne.n	800331e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800331a:	f001 f849 	bl	80043b0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800331e:	bf00      	nop
 8003320:	3708      	adds	r7, #8
 8003322:	46bd      	mov	sp, r7
 8003324:	bd80      	pop	{r7, pc}
 8003326:	bf00      	nop
 8003328:	40000400 	.word	0x40000400

0800332c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800332c:	b480      	push	{r7}
 800332e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8003330:	b672      	cpsid	i
}
 8003332:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003334:	e7fe      	b.n	8003334 <Error_Handler+0x8>
	...

08003338 <MX_QUADSPI_Init>:

QSPI_HandleTypeDef hqspi;

/* QUADSPI init function */
void MX_QUADSPI_Init(void)
{
 8003338:	b580      	push	{r7, lr}
 800333a:	af00      	add	r7, sp, #0
  /* USER CODE END QUADSPI_Init 0 */

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  hqspi.Instance = QUADSPI;
 800333c:	4b12      	ldr	r3, [pc, #72]	; (8003388 <MX_QUADSPI_Init+0x50>)
 800333e:	4a13      	ldr	r2, [pc, #76]	; (800338c <MX_QUADSPI_Init+0x54>)
 8003340:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 255;
 8003342:	4b11      	ldr	r3, [pc, #68]	; (8003388 <MX_QUADSPI_Init+0x50>)
 8003344:	22ff      	movs	r2, #255	; 0xff
 8003346:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 8003348:	4b0f      	ldr	r3, [pc, #60]	; (8003388 <MX_QUADSPI_Init+0x50>)
 800334a:	2201      	movs	r2, #1
 800334c:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 800334e:	4b0e      	ldr	r3, [pc, #56]	; (8003388 <MX_QUADSPI_Init+0x50>)
 8003350:	2200      	movs	r2, #0
 8003352:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 1;
 8003354:	4b0c      	ldr	r3, [pc, #48]	; (8003388 <MX_QUADSPI_Init+0x50>)
 8003356:	2201      	movs	r2, #1
 8003358:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 800335a:	4b0b      	ldr	r3, [pc, #44]	; (8003388 <MX_QUADSPI_Init+0x50>)
 800335c:	2200      	movs	r2, #0
 800335e:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8003360:	4b09      	ldr	r3, [pc, #36]	; (8003388 <MX_QUADSPI_Init+0x50>)
 8003362:	2200      	movs	r2, #0
 8003364:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 8003366:	4b08      	ldr	r3, [pc, #32]	; (8003388 <MX_QUADSPI_Init+0x50>)
 8003368:	2200      	movs	r2, #0
 800336a:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 800336c:	4b06      	ldr	r3, [pc, #24]	; (8003388 <MX_QUADSPI_Init+0x50>)
 800336e:	2200      	movs	r2, #0
 8003370:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8003372:	4805      	ldr	r0, [pc, #20]	; (8003388 <MX_QUADSPI_Init+0x50>)
 8003374:	f004 fdae 	bl	8007ed4 <HAL_QSPI_Init>
 8003378:	4603      	mov	r3, r0
 800337a:	2b00      	cmp	r3, #0
 800337c:	d001      	beq.n	8003382 <MX_QUADSPI_Init+0x4a>
  {
    Error_Handler();
 800337e:	f7ff ffd5 	bl	800332c <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8003382:	bf00      	nop
 8003384:	bd80      	pop	{r7, pc}
 8003386:	bf00      	nop
 8003388:	20000654 	.word	0x20000654
 800338c:	52005000 	.word	0x52005000

08003390 <HAL_QSPI_MspInit>:

void HAL_QSPI_MspInit(QSPI_HandleTypeDef* qspiHandle)
{
 8003390:	b580      	push	{r7, lr}
 8003392:	b0ba      	sub	sp, #232	; 0xe8
 8003394:	af00      	add	r7, sp, #0
 8003396:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003398:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800339c:	2200      	movs	r2, #0
 800339e:	601a      	str	r2, [r3, #0]
 80033a0:	605a      	str	r2, [r3, #4]
 80033a2:	609a      	str	r2, [r3, #8]
 80033a4:	60da      	str	r2, [r3, #12]
 80033a6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80033a8:	f107 0318 	add.w	r3, r7, #24
 80033ac:	22bc      	movs	r2, #188	; 0xbc
 80033ae:	2100      	movs	r1, #0
 80033b0:	4618      	mov	r0, r3
 80033b2:	f018 fab3 	bl	801b91c <memset>
  if(qspiHandle->Instance==QUADSPI)
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	4a4c      	ldr	r2, [pc, #304]	; (80034ec <HAL_QSPI_MspInit+0x15c>)
 80033bc:	4293      	cmp	r3, r2
 80033be:	f040 8091 	bne.w	80034e4 <HAL_QSPI_MspInit+0x154>
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_QSPI;
 80033c2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80033c6:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.QspiClockSelection = RCC_QSPICLKSOURCE_D1HCLK;
 80033c8:	2300      	movs	r3, #0
 80033ca:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80033cc:	f107 0318 	add.w	r3, r7, #24
 80033d0:	4618      	mov	r0, r3
 80033d2:	f005 fe35 	bl	8009040 <HAL_RCCEx_PeriphCLKConfig>
 80033d6:	4603      	mov	r3, r0
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d001      	beq.n	80033e0 <HAL_QSPI_MspInit+0x50>
    {
      Error_Handler();
 80033dc:	f7ff ffa6 	bl	800332c <Error_Handler>
    }

    /* QUADSPI clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 80033e0:	4b43      	ldr	r3, [pc, #268]	; (80034f0 <HAL_QSPI_MspInit+0x160>)
 80033e2:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80033e6:	4a42      	ldr	r2, [pc, #264]	; (80034f0 <HAL_QSPI_MspInit+0x160>)
 80033e8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80033ec:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 80033f0:	4b3f      	ldr	r3, [pc, #252]	; (80034f0 <HAL_QSPI_MspInit+0x160>)
 80033f2:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80033f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80033fa:	617b      	str	r3, [r7, #20]
 80033fc:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80033fe:	4b3c      	ldr	r3, [pc, #240]	; (80034f0 <HAL_QSPI_MspInit+0x160>)
 8003400:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003404:	4a3a      	ldr	r2, [pc, #232]	; (80034f0 <HAL_QSPI_MspInit+0x160>)
 8003406:	f043 0320 	orr.w	r3, r3, #32
 800340a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800340e:	4b38      	ldr	r3, [pc, #224]	; (80034f0 <HAL_QSPI_MspInit+0x160>)
 8003410:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003414:	f003 0320 	and.w	r3, r3, #32
 8003418:	613b      	str	r3, [r7, #16]
 800341a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800341c:	4b34      	ldr	r3, [pc, #208]	; (80034f0 <HAL_QSPI_MspInit+0x160>)
 800341e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003422:	4a33      	ldr	r2, [pc, #204]	; (80034f0 <HAL_QSPI_MspInit+0x160>)
 8003424:	f043 0302 	orr.w	r3, r3, #2
 8003428:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800342c:	4b30      	ldr	r3, [pc, #192]	; (80034f0 <HAL_QSPI_MspInit+0x160>)
 800342e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003432:	f003 0302 	and.w	r3, r3, #2
 8003436:	60fb      	str	r3, [r7, #12]
 8003438:	68fb      	ldr	r3, [r7, #12]
    PF8     ------> QUADSPI_BK1_IO0
    PF9     ------> QUADSPI_BK1_IO1
    PB2     ------> QUADSPI_CLK
    PB6     ------> QUADSPI_BK1_NCS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800343a:	23c0      	movs	r3, #192	; 0xc0
 800343c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003440:	2302      	movs	r3, #2
 8003442:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003446:	2300      	movs	r3, #0
 8003448:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800344c:	2300      	movs	r3, #0
 800344e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8003452:	2309      	movs	r3, #9
 8003454:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003458:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800345c:	4619      	mov	r1, r3
 800345e:	4825      	ldr	r0, [pc, #148]	; (80034f4 <HAL_QSPI_MspInit+0x164>)
 8003460:	f003 ff5e 	bl	8007320 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8003464:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003468:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800346c:	2302      	movs	r3, #2
 800346e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003472:	2300      	movs	r3, #0
 8003474:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003478:	2300      	movs	r3, #0
 800347a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 800347e:	230a      	movs	r3, #10
 8003480:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003484:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003488:	4619      	mov	r1, r3
 800348a:	481a      	ldr	r0, [pc, #104]	; (80034f4 <HAL_QSPI_MspInit+0x164>)
 800348c:	f003 ff48 	bl	8007320 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003490:	2304      	movs	r3, #4
 8003492:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003496:	2302      	movs	r3, #2
 8003498:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800349c:	2300      	movs	r3, #0
 800349e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034a2:	2300      	movs	r3, #0
 80034a4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80034a8:	2309      	movs	r3, #9
 80034aa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80034ae:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80034b2:	4619      	mov	r1, r3
 80034b4:	4810      	ldr	r0, [pc, #64]	; (80034f8 <HAL_QSPI_MspInit+0x168>)
 80034b6:	f003 ff33 	bl	8007320 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80034ba:	2340      	movs	r3, #64	; 0x40
 80034bc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034c0:	2302      	movs	r3, #2
 80034c2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034c6:	2300      	movs	r3, #0
 80034c8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034cc:	2300      	movs	r3, #0
 80034ce:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 80034d2:	230a      	movs	r3, #10
 80034d4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80034d8:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80034dc:	4619      	mov	r1, r3
 80034de:	4806      	ldr	r0, [pc, #24]	; (80034f8 <HAL_QSPI_MspInit+0x168>)
 80034e0:	f003 ff1e 	bl	8007320 <HAL_GPIO_Init>

  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }
}
 80034e4:	bf00      	nop
 80034e6:	37e8      	adds	r7, #232	; 0xe8
 80034e8:	46bd      	mov	sp, r7
 80034ea:	bd80      	pop	{r7, pc}
 80034ec:	52005000 	.word	0x52005000
 80034f0:	58024400 	.word	0x58024400
 80034f4:	58021400 	.word	0x58021400
 80034f8:	58020400 	.word	0x58020400

080034fc <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 80034fc:	b580      	push	{r7, lr}
 80034fe:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8003500:	4b27      	ldr	r3, [pc, #156]	; (80035a0 <MX_SPI2_Init+0xa4>)
 8003502:	4a28      	ldr	r2, [pc, #160]	; (80035a4 <MX_SPI2_Init+0xa8>)
 8003504:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8003506:	4b26      	ldr	r3, [pc, #152]	; (80035a0 <MX_SPI2_Init+0xa4>)
 8003508:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 800350c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800350e:	4b24      	ldr	r3, [pc, #144]	; (80035a0 <MX_SPI2_Init+0xa4>)
 8003510:	2200      	movs	r2, #0
 8003512:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_32BIT;
 8003514:	4b22      	ldr	r3, [pc, #136]	; (80035a0 <MX_SPI2_Init+0xa4>)
 8003516:	221f      	movs	r2, #31
 8003518:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800351a:	4b21      	ldr	r3, [pc, #132]	; (80035a0 <MX_SPI2_Init+0xa4>)
 800351c:	2200      	movs	r2, #0
 800351e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003520:	4b1f      	ldr	r3, [pc, #124]	; (80035a0 <MX_SPI2_Init+0xa4>)
 8003522:	2200      	movs	r2, #0
 8003524:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8003526:	4b1e      	ldr	r3, [pc, #120]	; (80035a0 <MX_SPI2_Init+0xa4>)
 8003528:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800352c:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 800352e:	4b1c      	ldr	r3, [pc, #112]	; (80035a0 <MX_SPI2_Init+0xa4>)
 8003530:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003534:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003536:	4b1a      	ldr	r3, [pc, #104]	; (80035a0 <MX_SPI2_Init+0xa4>)
 8003538:	2200      	movs	r2, #0
 800353a:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800353c:	4b18      	ldr	r3, [pc, #96]	; (80035a0 <MX_SPI2_Init+0xa4>)
 800353e:	2200      	movs	r2, #0
 8003540:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003542:	4b17      	ldr	r3, [pc, #92]	; (80035a0 <MX_SPI2_Init+0xa4>)
 8003544:	2200      	movs	r2, #0
 8003546:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 8003548:	4b15      	ldr	r3, [pc, #84]	; (80035a0 <MX_SPI2_Init+0xa4>)
 800354a:	2200      	movs	r2, #0
 800354c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800354e:	4b14      	ldr	r3, [pc, #80]	; (80035a0 <MX_SPI2_Init+0xa4>)
 8003550:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003554:	635a      	str	r2, [r3, #52]	; 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8003556:	4b12      	ldr	r3, [pc, #72]	; (80035a0 <MX_SPI2_Init+0xa4>)
 8003558:	2200      	movs	r2, #0
 800355a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 800355c:	4b10      	ldr	r3, [pc, #64]	; (80035a0 <MX_SPI2_Init+0xa4>)
 800355e:	2200      	movs	r2, #0
 8003560:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8003562:	4b0f      	ldr	r3, [pc, #60]	; (80035a0 <MX_SPI2_Init+0xa4>)
 8003564:	2200      	movs	r2, #0
 8003566:	641a      	str	r2, [r3, #64]	; 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8003568:	4b0d      	ldr	r3, [pc, #52]	; (80035a0 <MX_SPI2_Init+0xa4>)
 800356a:	2200      	movs	r2, #0
 800356c:	645a      	str	r2, [r3, #68]	; 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 800356e:	4b0c      	ldr	r3, [pc, #48]	; (80035a0 <MX_SPI2_Init+0xa4>)
 8003570:	2200      	movs	r2, #0
 8003572:	649a      	str	r2, [r3, #72]	; 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8003574:	4b0a      	ldr	r3, [pc, #40]	; (80035a0 <MX_SPI2_Init+0xa4>)
 8003576:	2200      	movs	r2, #0
 8003578:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800357a:	4b09      	ldr	r3, [pc, #36]	; (80035a0 <MX_SPI2_Init+0xa4>)
 800357c:	2200      	movs	r2, #0
 800357e:	651a      	str	r2, [r3, #80]	; 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8003580:	4b07      	ldr	r3, [pc, #28]	; (80035a0 <MX_SPI2_Init+0xa4>)
 8003582:	2200      	movs	r2, #0
 8003584:	655a      	str	r2, [r3, #84]	; 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8003586:	4b06      	ldr	r3, [pc, #24]	; (80035a0 <MX_SPI2_Init+0xa4>)
 8003588:	2200      	movs	r2, #0
 800358a:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800358c:	4804      	ldr	r0, [pc, #16]	; (80035a0 <MX_SPI2_Init+0xa4>)
 800358e:	f007 ffe3 	bl	800b558 <HAL_SPI_Init>
 8003592:	4603      	mov	r3, r0
 8003594:	2b00      	cmp	r3, #0
 8003596:	d001      	beq.n	800359c <MX_SPI2_Init+0xa0>
  {
    Error_Handler();
 8003598:	f7ff fec8 	bl	800332c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800359c:	bf00      	nop
 800359e:	bd80      	pop	{r7, pc}
 80035a0:	200006a0 	.word	0x200006a0
 80035a4:	40003800 	.word	0x40003800

080035a8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80035a8:	b580      	push	{r7, lr}
 80035aa:	b0b8      	sub	sp, #224	; 0xe0
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80035b0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80035b4:	2200      	movs	r2, #0
 80035b6:	601a      	str	r2, [r3, #0]
 80035b8:	605a      	str	r2, [r3, #4]
 80035ba:	609a      	str	r2, [r3, #8]
 80035bc:	60da      	str	r2, [r3, #12]
 80035be:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80035c0:	f107 0310 	add.w	r3, r7, #16
 80035c4:	22bc      	movs	r2, #188	; 0xbc
 80035c6:	2100      	movs	r1, #0
 80035c8:	4618      	mov	r0, r3
 80035ca:	f018 f9a7 	bl	801b91c <memset>
  if(spiHandle->Instance==SPI2)
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	4a25      	ldr	r2, [pc, #148]	; (8003668 <HAL_SPI_MspInit+0xc0>)
 80035d4:	4293      	cmp	r3, r2
 80035d6:	d142      	bne.n	800365e <HAL_SPI_MspInit+0xb6>
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 80035d8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80035dc:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 80035de:	2300      	movs	r3, #0
 80035e0:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80035e2:	f107 0310 	add.w	r3, r7, #16
 80035e6:	4618      	mov	r0, r3
 80035e8:	f005 fd2a 	bl	8009040 <HAL_RCCEx_PeriphCLKConfig>
 80035ec:	4603      	mov	r3, r0
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d001      	beq.n	80035f6 <HAL_SPI_MspInit+0x4e>
    {
      Error_Handler();
 80035f2:	f7ff fe9b 	bl	800332c <Error_Handler>
    }

    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80035f6:	4b1d      	ldr	r3, [pc, #116]	; (800366c <HAL_SPI_MspInit+0xc4>)
 80035f8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80035fc:	4a1b      	ldr	r2, [pc, #108]	; (800366c <HAL_SPI_MspInit+0xc4>)
 80035fe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003602:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003606:	4b19      	ldr	r3, [pc, #100]	; (800366c <HAL_SPI_MspInit+0xc4>)
 8003608:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800360c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003610:	60fb      	str	r3, [r7, #12]
 8003612:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003614:	4b15      	ldr	r3, [pc, #84]	; (800366c <HAL_SPI_MspInit+0xc4>)
 8003616:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800361a:	4a14      	ldr	r2, [pc, #80]	; (800366c <HAL_SPI_MspInit+0xc4>)
 800361c:	f043 0302 	orr.w	r3, r3, #2
 8003620:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003624:	4b11      	ldr	r3, [pc, #68]	; (800366c <HAL_SPI_MspInit+0xc4>)
 8003626:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800362a:	f003 0302 	and.w	r3, r3, #2
 800362e:	60bb      	str	r3, [r7, #8]
 8003630:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8003632:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8003636:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800363a:	2302      	movs	r3, #2
 800363c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003640:	2300      	movs	r3, #0
 8003642:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003646:	2300      	movs	r3, #0
 8003648:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800364c:	2305      	movs	r3, #5
 800364e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003652:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8003656:	4619      	mov	r1, r3
 8003658:	4805      	ldr	r0, [pc, #20]	; (8003670 <HAL_SPI_MspInit+0xc8>)
 800365a:	f003 fe61 	bl	8007320 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 800365e:	bf00      	nop
 8003660:	37e0      	adds	r7, #224	; 0xe0
 8003662:	46bd      	mov	sp, r7
 8003664:	bd80      	pop	{r7, pc}
 8003666:	bf00      	nop
 8003668:	40003800 	.word	0x40003800
 800366c:	58024400 	.word	0x58024400
 8003670:	58020400 	.word	0x58020400

08003674 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003674:	b580      	push	{r7, lr}
 8003676:	b082      	sub	sp, #8
 8003678:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800367a:	4b0c      	ldr	r3, [pc, #48]	; (80036ac <HAL_MspInit+0x38>)
 800367c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003680:	4a0a      	ldr	r2, [pc, #40]	; (80036ac <HAL_MspInit+0x38>)
 8003682:	f043 0302 	orr.w	r3, r3, #2
 8003686:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800368a:	4b08      	ldr	r3, [pc, #32]	; (80036ac <HAL_MspInit+0x38>)
 800368c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003690:	f003 0302 	and.w	r3, r3, #2
 8003694:	607b      	str	r3, [r7, #4]
 8003696:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8003698:	2200      	movs	r2, #0
 800369a:	210f      	movs	r1, #15
 800369c:	f06f 0001 	mvn.w	r0, #1
 80036a0:	f003 fc1a 	bl	8006ed8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80036a4:	bf00      	nop
 80036a6:	3708      	adds	r7, #8
 80036a8:	46bd      	mov	sp, r7
 80036aa:	bd80      	pop	{r7, pc}
 80036ac:	58024400 	.word	0x58024400

080036b0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80036b0:	b580      	push	{r7, lr}
 80036b2:	b090      	sub	sp, #64	; 0x40
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM3 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	2b0f      	cmp	r3, #15
 80036bc:	d827      	bhi.n	800370e <HAL_InitTick+0x5e>
  {
  HAL_NVIC_SetPriority(TIM3_IRQn, TickPriority ,0U);
 80036be:	2200      	movs	r2, #0
 80036c0:	6879      	ldr	r1, [r7, #4]
 80036c2:	201d      	movs	r0, #29
 80036c4:	f003 fc08 	bl	8006ed8 <HAL_NVIC_SetPriority>

  /* Enable the TIM3 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80036c8:	201d      	movs	r0, #29
 80036ca:	f003 fc1f 	bl	8006f0c <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 80036ce:	4a29      	ldr	r2, [pc, #164]	; (8003774 <HAL_InitTick+0xc4>)
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
  /* Enable TIM3 clock */
  __HAL_RCC_TIM3_CLK_ENABLE();
 80036d4:	4b28      	ldr	r3, [pc, #160]	; (8003778 <HAL_InitTick+0xc8>)
 80036d6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80036da:	4a27      	ldr	r2, [pc, #156]	; (8003778 <HAL_InitTick+0xc8>)
 80036dc:	f043 0302 	orr.w	r3, r3, #2
 80036e0:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80036e4:	4b24      	ldr	r3, [pc, #144]	; (8003778 <HAL_InitTick+0xc8>)
 80036e6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80036ea:	f003 0302 	and.w	r3, r3, #2
 80036ee:	60fb      	str	r3, [r7, #12]
 80036f0:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80036f2:	f107 0210 	add.w	r2, r7, #16
 80036f6:	f107 0314 	add.w	r3, r7, #20
 80036fa:	4611      	mov	r1, r2
 80036fc:	4618      	mov	r0, r3
 80036fe:	f005 fc5d 	bl	8008fbc <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8003702:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003704:	63bb      	str	r3, [r7, #56]	; 0x38
  /* Compute TIM3 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8003706:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003708:	2b00      	cmp	r3, #0
 800370a:	d106      	bne.n	800371a <HAL_InitTick+0x6a>
 800370c:	e001      	b.n	8003712 <HAL_InitTick+0x62>
    return HAL_ERROR;
 800370e:	2301      	movs	r3, #1
 8003710:	e02b      	b.n	800376a <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8003712:	f005 fc27 	bl	8008f64 <HAL_RCC_GetPCLK1Freq>
 8003716:	63f8      	str	r0, [r7, #60]	; 0x3c
 8003718:	e004      	b.n	8003724 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800371a:	f005 fc23 	bl	8008f64 <HAL_RCC_GetPCLK1Freq>
 800371e:	4603      	mov	r3, r0
 8003720:	005b      	lsls	r3, r3, #1
 8003722:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  /* Compute the prescaler value to have TIM3 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8003724:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003726:	4a15      	ldr	r2, [pc, #84]	; (800377c <HAL_InitTick+0xcc>)
 8003728:	fba2 2303 	umull	r2, r3, r2, r3
 800372c:	0c9b      	lsrs	r3, r3, #18
 800372e:	3b01      	subs	r3, #1
 8003730:	637b      	str	r3, [r7, #52]	; 0x34

  /* Initialize TIM3 */
  htim3.Instance = TIM3;
 8003732:	4b13      	ldr	r3, [pc, #76]	; (8003780 <HAL_InitTick+0xd0>)
 8003734:	4a13      	ldr	r2, [pc, #76]	; (8003784 <HAL_InitTick+0xd4>)
 8003736:	601a      	str	r2, [r3, #0]
  + Period = [(TIM3CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim3.Init.Period = (1000000U / 1000U) - 1U;
 8003738:	4b11      	ldr	r3, [pc, #68]	; (8003780 <HAL_InitTick+0xd0>)
 800373a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800373e:	60da      	str	r2, [r3, #12]
  htim3.Init.Prescaler = uwPrescalerValue;
 8003740:	4a0f      	ldr	r2, [pc, #60]	; (8003780 <HAL_InitTick+0xd0>)
 8003742:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003744:	6053      	str	r3, [r2, #4]
  htim3.Init.ClockDivision = 0;
 8003746:	4b0e      	ldr	r3, [pc, #56]	; (8003780 <HAL_InitTick+0xd0>)
 8003748:	2200      	movs	r2, #0
 800374a:	611a      	str	r2, [r3, #16]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800374c:	4b0c      	ldr	r3, [pc, #48]	; (8003780 <HAL_InitTick+0xd0>)
 800374e:	2200      	movs	r2, #0
 8003750:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim3) == HAL_OK)
 8003752:	480b      	ldr	r0, [pc, #44]	; (8003780 <HAL_InitTick+0xd0>)
 8003754:	f008 fbdb 	bl	800bf0e <HAL_TIM_Base_Init>
 8003758:	4603      	mov	r3, r0
 800375a:	2b00      	cmp	r3, #0
 800375c:	d104      	bne.n	8003768 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim3);
 800375e:	4808      	ldr	r0, [pc, #32]	; (8003780 <HAL_InitTick+0xd0>)
 8003760:	f008 fc2c 	bl	800bfbc <HAL_TIM_Base_Start_IT>
 8003764:	4603      	mov	r3, r0
 8003766:	e000      	b.n	800376a <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 8003768:	2301      	movs	r3, #1
}
 800376a:	4618      	mov	r0, r3
 800376c:	3740      	adds	r7, #64	; 0x40
 800376e:	46bd      	mov	sp, r7
 8003770:	bd80      	pop	{r7, pc}
 8003772:	bf00      	nop
 8003774:	20000008 	.word	0x20000008
 8003778:	58024400 	.word	0x58024400
 800377c:	431bde83 	.word	0x431bde83
 8003780:	20000728 	.word	0x20000728
 8003784:	40000400 	.word	0x40000400

08003788 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003788:	b480      	push	{r7}
 800378a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800378c:	e7fe      	b.n	800378c <NMI_Handler+0x4>

0800378e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800378e:	b480      	push	{r7}
 8003790:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003792:	e7fe      	b.n	8003792 <HardFault_Handler+0x4>

08003794 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003794:	b480      	push	{r7}
 8003796:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003798:	e7fe      	b.n	8003798 <MemManage_Handler+0x4>

0800379a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800379a:	b480      	push	{r7}
 800379c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800379e:	e7fe      	b.n	800379e <BusFault_Handler+0x4>

080037a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80037a0:	b480      	push	{r7}
 80037a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80037a4:	e7fe      	b.n	80037a4 <UsageFault_Handler+0x4>

080037a6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80037a6:	b480      	push	{r7}
 80037a8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80037aa:	bf00      	nop
 80037ac:	46bd      	mov	sp, r7
 80037ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b2:	4770      	bx	lr

080037b4 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 80037b4:	b580      	push	{r7, lr}
 80037b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 80037b8:	2010      	movs	r0, #16
 80037ba:	f003 ff94 	bl	80076e6 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 80037be:	bf00      	nop
 80037c0:	bd80      	pop	{r7, pc}
	...

080037c4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80037c4:	b580      	push	{r7, lr}
 80037c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80037c8:	4802      	ldr	r0, [pc, #8]	; (80037d4 <TIM2_IRQHandler+0x10>)
 80037ca:	f008 fec1 	bl	800c550 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80037ce:	bf00      	nop
 80037d0:	bd80      	pop	{r7, pc}
 80037d2:	bf00      	nop
 80037d4:	20000778 	.word	0x20000778

080037d8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80037d8:	b580      	push	{r7, lr}
 80037da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80037dc:	4802      	ldr	r0, [pc, #8]	; (80037e8 <TIM3_IRQHandler+0x10>)
 80037de:	f008 feb7 	bl	800c550 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80037e2:	bf00      	nop
 80037e4:	bd80      	pop	{r7, pc}
 80037e6:	bf00      	nop
 80037e8:	20000728 	.word	0x20000728

080037ec <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 80037ec:	b580      	push	{r7, lr}
 80037ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 80037f0:	4802      	ldr	r0, [pc, #8]	; (80037fc <LTDC_IRQHandler+0x10>)
 80037f2:	f004 f86d 	bl	80078d0 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 80037f6:	bf00      	nop
 80037f8:	bd80      	pop	{r7, pc}
 80037fa:	bf00      	nop
 80037fc:	200005ac 	.word	0x200005ac

08003800 <ADC3_IRQHandler>:

/**
  * @brief This function handles ADC3 global interrupt.
  */
void ADC3_IRQHandler(void)
{
 8003800:	b580      	push	{r7, lr}
 8003802:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC3_IRQn 0 */

  /* USER CODE END ADC3_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc3);
 8003804:	4802      	ldr	r0, [pc, #8]	; (8003810 <ADC3_IRQHandler+0x10>)
 8003806:	f001 fe09 	bl	800541c <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC3_IRQn 1 */

  /* USER CODE END ADC3_IRQn 1 */
}
 800380a:	bf00      	nop
 800380c:	bd80      	pop	{r7, pc}
 800380e:	bf00      	nop
 8003810:	20000394 	.word	0x20000394

08003814 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003814:	b480      	push	{r7}
 8003816:	af00      	add	r7, sp, #0
	return 1;
 8003818:	2301      	movs	r3, #1
}
 800381a:	4618      	mov	r0, r3
 800381c:	46bd      	mov	sp, r7
 800381e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003822:	4770      	bx	lr

08003824 <_kill>:

int _kill(int pid, int sig)
{
 8003824:	b580      	push	{r7, lr}
 8003826:	b082      	sub	sp, #8
 8003828:	af00      	add	r7, sp, #0
 800382a:	6078      	str	r0, [r7, #4]
 800382c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800382e:	f017 ff21 	bl	801b674 <__errno>
 8003832:	4603      	mov	r3, r0
 8003834:	2216      	movs	r2, #22
 8003836:	601a      	str	r2, [r3, #0]
	return -1;
 8003838:	f04f 33ff 	mov.w	r3, #4294967295
}
 800383c:	4618      	mov	r0, r3
 800383e:	3708      	adds	r7, #8
 8003840:	46bd      	mov	sp, r7
 8003842:	bd80      	pop	{r7, pc}

08003844 <_exit>:

void _exit (int status)
{
 8003844:	b580      	push	{r7, lr}
 8003846:	b082      	sub	sp, #8
 8003848:	af00      	add	r7, sp, #0
 800384a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800384c:	f04f 31ff 	mov.w	r1, #4294967295
 8003850:	6878      	ldr	r0, [r7, #4]
 8003852:	f7ff ffe7 	bl	8003824 <_kill>
	while (1) {}		/* Make sure we hang here */
 8003856:	e7fe      	b.n	8003856 <_exit+0x12>

08003858 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003858:	b580      	push	{r7, lr}
 800385a:	b086      	sub	sp, #24
 800385c:	af00      	add	r7, sp, #0
 800385e:	60f8      	str	r0, [r7, #12]
 8003860:	60b9      	str	r1, [r7, #8]
 8003862:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003864:	2300      	movs	r3, #0
 8003866:	617b      	str	r3, [r7, #20]
 8003868:	e00a      	b.n	8003880 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800386a:	f3af 8000 	nop.w
 800386e:	4601      	mov	r1, r0
 8003870:	68bb      	ldr	r3, [r7, #8]
 8003872:	1c5a      	adds	r2, r3, #1
 8003874:	60ba      	str	r2, [r7, #8]
 8003876:	b2ca      	uxtb	r2, r1
 8003878:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800387a:	697b      	ldr	r3, [r7, #20]
 800387c:	3301      	adds	r3, #1
 800387e:	617b      	str	r3, [r7, #20]
 8003880:	697a      	ldr	r2, [r7, #20]
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	429a      	cmp	r2, r3
 8003886:	dbf0      	blt.n	800386a <_read+0x12>
	}

return len;
 8003888:	687b      	ldr	r3, [r7, #4]
}
 800388a:	4618      	mov	r0, r3
 800388c:	3718      	adds	r7, #24
 800388e:	46bd      	mov	sp, r7
 8003890:	bd80      	pop	{r7, pc}

08003892 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003892:	b580      	push	{r7, lr}
 8003894:	b086      	sub	sp, #24
 8003896:	af00      	add	r7, sp, #0
 8003898:	60f8      	str	r0, [r7, #12]
 800389a:	60b9      	str	r1, [r7, #8]
 800389c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800389e:	2300      	movs	r3, #0
 80038a0:	617b      	str	r3, [r7, #20]
 80038a2:	e009      	b.n	80038b8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80038a4:	68bb      	ldr	r3, [r7, #8]
 80038a6:	1c5a      	adds	r2, r3, #1
 80038a8:	60ba      	str	r2, [r7, #8]
 80038aa:	781b      	ldrb	r3, [r3, #0]
 80038ac:	4618      	mov	r0, r3
 80038ae:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80038b2:	697b      	ldr	r3, [r7, #20]
 80038b4:	3301      	adds	r3, #1
 80038b6:	617b      	str	r3, [r7, #20]
 80038b8:	697a      	ldr	r2, [r7, #20]
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	429a      	cmp	r2, r3
 80038be:	dbf1      	blt.n	80038a4 <_write+0x12>
	}
	return len;
 80038c0:	687b      	ldr	r3, [r7, #4]
}
 80038c2:	4618      	mov	r0, r3
 80038c4:	3718      	adds	r7, #24
 80038c6:	46bd      	mov	sp, r7
 80038c8:	bd80      	pop	{r7, pc}

080038ca <_close>:

int _close(int file)
{
 80038ca:	b480      	push	{r7}
 80038cc:	b083      	sub	sp, #12
 80038ce:	af00      	add	r7, sp, #0
 80038d0:	6078      	str	r0, [r7, #4]
	return -1;
 80038d2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80038d6:	4618      	mov	r0, r3
 80038d8:	370c      	adds	r7, #12
 80038da:	46bd      	mov	sp, r7
 80038dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e0:	4770      	bx	lr

080038e2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80038e2:	b480      	push	{r7}
 80038e4:	b083      	sub	sp, #12
 80038e6:	af00      	add	r7, sp, #0
 80038e8:	6078      	str	r0, [r7, #4]
 80038ea:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80038ec:	683b      	ldr	r3, [r7, #0]
 80038ee:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80038f2:	605a      	str	r2, [r3, #4]
	return 0;
 80038f4:	2300      	movs	r3, #0
}
 80038f6:	4618      	mov	r0, r3
 80038f8:	370c      	adds	r7, #12
 80038fa:	46bd      	mov	sp, r7
 80038fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003900:	4770      	bx	lr

08003902 <_isatty>:

int _isatty(int file)
{
 8003902:	b480      	push	{r7}
 8003904:	b083      	sub	sp, #12
 8003906:	af00      	add	r7, sp, #0
 8003908:	6078      	str	r0, [r7, #4]
	return 1;
 800390a:	2301      	movs	r3, #1
}
 800390c:	4618      	mov	r0, r3
 800390e:	370c      	adds	r7, #12
 8003910:	46bd      	mov	sp, r7
 8003912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003916:	4770      	bx	lr

08003918 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003918:	b480      	push	{r7}
 800391a:	b085      	sub	sp, #20
 800391c:	af00      	add	r7, sp, #0
 800391e:	60f8      	str	r0, [r7, #12]
 8003920:	60b9      	str	r1, [r7, #8]
 8003922:	607a      	str	r2, [r7, #4]
	return 0;
 8003924:	2300      	movs	r3, #0
}
 8003926:	4618      	mov	r0, r3
 8003928:	3714      	adds	r7, #20
 800392a:	46bd      	mov	sp, r7
 800392c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003930:	4770      	bx	lr
	...

08003934 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003934:	b580      	push	{r7, lr}
 8003936:	b086      	sub	sp, #24
 8003938:	af00      	add	r7, sp, #0
 800393a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800393c:	4a14      	ldr	r2, [pc, #80]	; (8003990 <_sbrk+0x5c>)
 800393e:	4b15      	ldr	r3, [pc, #84]	; (8003994 <_sbrk+0x60>)
 8003940:	1ad3      	subs	r3, r2, r3
 8003942:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003944:	697b      	ldr	r3, [r7, #20]
 8003946:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003948:	4b13      	ldr	r3, [pc, #76]	; (8003998 <_sbrk+0x64>)
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	2b00      	cmp	r3, #0
 800394e:	d102      	bne.n	8003956 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003950:	4b11      	ldr	r3, [pc, #68]	; (8003998 <_sbrk+0x64>)
 8003952:	4a12      	ldr	r2, [pc, #72]	; (800399c <_sbrk+0x68>)
 8003954:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003956:	4b10      	ldr	r3, [pc, #64]	; (8003998 <_sbrk+0x64>)
 8003958:	681a      	ldr	r2, [r3, #0]
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	4413      	add	r3, r2
 800395e:	693a      	ldr	r2, [r7, #16]
 8003960:	429a      	cmp	r2, r3
 8003962:	d207      	bcs.n	8003974 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003964:	f017 fe86 	bl	801b674 <__errno>
 8003968:	4603      	mov	r3, r0
 800396a:	220c      	movs	r2, #12
 800396c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800396e:	f04f 33ff 	mov.w	r3, #4294967295
 8003972:	e009      	b.n	8003988 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003974:	4b08      	ldr	r3, [pc, #32]	; (8003998 <_sbrk+0x64>)
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800397a:	4b07      	ldr	r3, [pc, #28]	; (8003998 <_sbrk+0x64>)
 800397c:	681a      	ldr	r2, [r3, #0]
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	4413      	add	r3, r2
 8003982:	4a05      	ldr	r2, [pc, #20]	; (8003998 <_sbrk+0x64>)
 8003984:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003986:	68fb      	ldr	r3, [r7, #12]
}
 8003988:	4618      	mov	r0, r3
 800398a:	3718      	adds	r7, #24
 800398c:	46bd      	mov	sp, r7
 800398e:	bd80      	pop	{r7, pc}
 8003990:	20020000 	.word	0x20020000
 8003994:	00000400 	.word	0x00000400
 8003998:	20000774 	.word	0x20000774
 800399c:	20006ff8 	.word	0x20006ff8

080039a0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80039a0:	b480      	push	{r7}
 80039a2:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80039a4:	4b37      	ldr	r3, [pc, #220]	; (8003a84 <SystemInit+0xe4>)
 80039a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039aa:	4a36      	ldr	r2, [pc, #216]	; (8003a84 <SystemInit+0xe4>)
 80039ac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80039b0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80039b4:	4b34      	ldr	r3, [pc, #208]	; (8003a88 <SystemInit+0xe8>)
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	f003 030f 	and.w	r3, r3, #15
 80039bc:	2b06      	cmp	r3, #6
 80039be:	d807      	bhi.n	80039d0 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80039c0:	4b31      	ldr	r3, [pc, #196]	; (8003a88 <SystemInit+0xe8>)
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f023 030f 	bic.w	r3, r3, #15
 80039c8:	4a2f      	ldr	r2, [pc, #188]	; (8003a88 <SystemInit+0xe8>)
 80039ca:	f043 0307 	orr.w	r3, r3, #7
 80039ce:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80039d0:	4b2e      	ldr	r3, [pc, #184]	; (8003a8c <SystemInit+0xec>)
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	4a2d      	ldr	r2, [pc, #180]	; (8003a8c <SystemInit+0xec>)
 80039d6:	f043 0301 	orr.w	r3, r3, #1
 80039da:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80039dc:	4b2b      	ldr	r3, [pc, #172]	; (8003a8c <SystemInit+0xec>)
 80039de:	2200      	movs	r2, #0
 80039e0:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80039e2:	4b2a      	ldr	r3, [pc, #168]	; (8003a8c <SystemInit+0xec>)
 80039e4:	681a      	ldr	r2, [r3, #0]
 80039e6:	4929      	ldr	r1, [pc, #164]	; (8003a8c <SystemInit+0xec>)
 80039e8:	4b29      	ldr	r3, [pc, #164]	; (8003a90 <SystemInit+0xf0>)
 80039ea:	4013      	ands	r3, r2
 80039ec:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80039ee:	4b26      	ldr	r3, [pc, #152]	; (8003a88 <SystemInit+0xe8>)
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	f003 0308 	and.w	r3, r3, #8
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d007      	beq.n	8003a0a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80039fa:	4b23      	ldr	r3, [pc, #140]	; (8003a88 <SystemInit+0xe8>)
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f023 030f 	bic.w	r3, r3, #15
 8003a02:	4a21      	ldr	r2, [pc, #132]	; (8003a88 <SystemInit+0xe8>)
 8003a04:	f043 0307 	orr.w	r3, r3, #7
 8003a08:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8003a0a:	4b20      	ldr	r3, [pc, #128]	; (8003a8c <SystemInit+0xec>)
 8003a0c:	2200      	movs	r2, #0
 8003a0e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8003a10:	4b1e      	ldr	r3, [pc, #120]	; (8003a8c <SystemInit+0xec>)
 8003a12:	2200      	movs	r2, #0
 8003a14:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8003a16:	4b1d      	ldr	r3, [pc, #116]	; (8003a8c <SystemInit+0xec>)
 8003a18:	2200      	movs	r2, #0
 8003a1a:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8003a1c:	4b1b      	ldr	r3, [pc, #108]	; (8003a8c <SystemInit+0xec>)
 8003a1e:	4a1d      	ldr	r2, [pc, #116]	; (8003a94 <SystemInit+0xf4>)
 8003a20:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8003a22:	4b1a      	ldr	r3, [pc, #104]	; (8003a8c <SystemInit+0xec>)
 8003a24:	4a1c      	ldr	r2, [pc, #112]	; (8003a98 <SystemInit+0xf8>)
 8003a26:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8003a28:	4b18      	ldr	r3, [pc, #96]	; (8003a8c <SystemInit+0xec>)
 8003a2a:	4a1c      	ldr	r2, [pc, #112]	; (8003a9c <SystemInit+0xfc>)
 8003a2c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8003a2e:	4b17      	ldr	r3, [pc, #92]	; (8003a8c <SystemInit+0xec>)
 8003a30:	2200      	movs	r2, #0
 8003a32:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8003a34:	4b15      	ldr	r3, [pc, #84]	; (8003a8c <SystemInit+0xec>)
 8003a36:	4a19      	ldr	r2, [pc, #100]	; (8003a9c <SystemInit+0xfc>)
 8003a38:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8003a3a:	4b14      	ldr	r3, [pc, #80]	; (8003a8c <SystemInit+0xec>)
 8003a3c:	2200      	movs	r2, #0
 8003a3e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8003a40:	4b12      	ldr	r3, [pc, #72]	; (8003a8c <SystemInit+0xec>)
 8003a42:	4a16      	ldr	r2, [pc, #88]	; (8003a9c <SystemInit+0xfc>)
 8003a44:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8003a46:	4b11      	ldr	r3, [pc, #68]	; (8003a8c <SystemInit+0xec>)
 8003a48:	2200      	movs	r2, #0
 8003a4a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8003a4c:	4b0f      	ldr	r3, [pc, #60]	; (8003a8c <SystemInit+0xec>)
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	4a0e      	ldr	r2, [pc, #56]	; (8003a8c <SystemInit+0xec>)
 8003a52:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003a56:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8003a58:	4b0c      	ldr	r3, [pc, #48]	; (8003a8c <SystemInit+0xec>)
 8003a5a:	2200      	movs	r2, #0
 8003a5c:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8003a5e:	4b10      	ldr	r3, [pc, #64]	; (8003aa0 <SystemInit+0x100>)
 8003a60:	681a      	ldr	r2, [r3, #0]
 8003a62:	4b10      	ldr	r3, [pc, #64]	; (8003aa4 <SystemInit+0x104>)
 8003a64:	4013      	ands	r3, r2
 8003a66:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003a6a:	d202      	bcs.n	8003a72 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8003a6c:	4b0e      	ldr	r3, [pc, #56]	; (8003aa8 <SystemInit+0x108>)
 8003a6e:	2201      	movs	r2, #1
 8003a70:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8003a72:	4b0e      	ldr	r3, [pc, #56]	; (8003aac <SystemInit+0x10c>)
 8003a74:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8003a78:	601a      	str	r2, [r3, #0]
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/

}
 8003a7a:	bf00      	nop
 8003a7c:	46bd      	mov	sp, r7
 8003a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a82:	4770      	bx	lr
 8003a84:	e000ed00 	.word	0xe000ed00
 8003a88:	52002000 	.word	0x52002000
 8003a8c:	58024400 	.word	0x58024400
 8003a90:	eaf6ed7f 	.word	0xeaf6ed7f
 8003a94:	02020200 	.word	0x02020200
 8003a98:	01ff0000 	.word	0x01ff0000
 8003a9c:	01010280 	.word	0x01010280
 8003aa0:	5c001000 	.word	0x5c001000
 8003aa4:	ffff0000 	.word	0xffff0000
 8003aa8:	51008108 	.word	0x51008108
 8003aac:	52004000 	.word	0x52004000

08003ab0 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8003ab0:	b580      	push	{r7, lr}
 8003ab2:	b08e      	sub	sp, #56	; 0x38
 8003ab4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003ab6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003aba:	2200      	movs	r2, #0
 8003abc:	601a      	str	r2, [r3, #0]
 8003abe:	605a      	str	r2, [r3, #4]
 8003ac0:	609a      	str	r2, [r3, #8]
 8003ac2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003ac4:	f107 031c 	add.w	r3, r7, #28
 8003ac8:	2200      	movs	r2, #0
 8003aca:	601a      	str	r2, [r3, #0]
 8003acc:	605a      	str	r2, [r3, #4]
 8003ace:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003ad0:	463b      	mov	r3, r7
 8003ad2:	2200      	movs	r2, #0
 8003ad4:	601a      	str	r2, [r3, #0]
 8003ad6:	605a      	str	r2, [r3, #4]
 8003ad8:	609a      	str	r2, [r3, #8]
 8003ada:	60da      	str	r2, [r3, #12]
 8003adc:	611a      	str	r2, [r3, #16]
 8003ade:	615a      	str	r2, [r3, #20]
 8003ae0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003ae2:	4b2e      	ldr	r3, [pc, #184]	; (8003b9c <MX_TIM2_Init+0xec>)
 8003ae4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003ae8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1024;
 8003aea:	4b2c      	ldr	r3, [pc, #176]	; (8003b9c <MX_TIM2_Init+0xec>)
 8003aec:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003af0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003af2:	4b2a      	ldr	r3, [pc, #168]	; (8003b9c <MX_TIM2_Init+0xec>)
 8003af4:	2200      	movs	r2, #0
 8003af6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10240;
 8003af8:	4b28      	ldr	r3, [pc, #160]	; (8003b9c <MX_TIM2_Init+0xec>)
 8003afa:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 8003afe:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003b00:	4b26      	ldr	r3, [pc, #152]	; (8003b9c <MX_TIM2_Init+0xec>)
 8003b02:	2200      	movs	r2, #0
 8003b04:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003b06:	4b25      	ldr	r3, [pc, #148]	; (8003b9c <MX_TIM2_Init+0xec>)
 8003b08:	2280      	movs	r2, #128	; 0x80
 8003b0a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8003b0c:	4823      	ldr	r0, [pc, #140]	; (8003b9c <MX_TIM2_Init+0xec>)
 8003b0e:	f008 f9fe 	bl	800bf0e <HAL_TIM_Base_Init>
 8003b12:	4603      	mov	r3, r0
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d001      	beq.n	8003b1c <MX_TIM2_Init+0x6c>
  {
    Error_Handler();
 8003b18:	f7ff fc08 	bl	800332c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003b1c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003b20:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8003b22:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003b26:	4619      	mov	r1, r3
 8003b28:	481c      	ldr	r0, [pc, #112]	; (8003b9c <MX_TIM2_Init+0xec>)
 8003b2a:	f008 ff45 	bl	800c9b8 <HAL_TIM_ConfigClockSource>
 8003b2e:	4603      	mov	r3, r0
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d001      	beq.n	8003b38 <MX_TIM2_Init+0x88>
  {
    Error_Handler();
 8003b34:	f7ff fbfa 	bl	800332c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8003b38:	4818      	ldr	r0, [pc, #96]	; (8003b9c <MX_TIM2_Init+0xec>)
 8003b3a:	f008 fab7 	bl	800c0ac <HAL_TIM_PWM_Init>
 8003b3e:	4603      	mov	r3, r0
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d001      	beq.n	8003b48 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8003b44:	f7ff fbf2 	bl	800332c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003b48:	2300      	movs	r3, #0
 8003b4a:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003b4c:	2300      	movs	r3, #0
 8003b4e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003b50:	f107 031c 	add.w	r3, r7, #28
 8003b54:	4619      	mov	r1, r3
 8003b56:	4811      	ldr	r0, [pc, #68]	; (8003b9c <MX_TIM2_Init+0xec>)
 8003b58:	f009 fc82 	bl	800d460 <HAL_TIMEx_MasterConfigSynchronization>
 8003b5c:	4603      	mov	r3, r0
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d001      	beq.n	8003b66 <MX_TIM2_Init+0xb6>
  {
    Error_Handler();
 8003b62:	f7ff fbe3 	bl	800332c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003b66:	2360      	movs	r3, #96	; 0x60
 8003b68:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8003b6a:	2300      	movs	r3, #0
 8003b6c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003b6e:	2300      	movs	r3, #0
 8003b70:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003b72:	2300      	movs	r3, #0
 8003b74:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003b76:	463b      	mov	r3, r7
 8003b78:	2200      	movs	r2, #0
 8003b7a:	4619      	mov	r1, r3
 8003b7c:	4807      	ldr	r0, [pc, #28]	; (8003b9c <MX_TIM2_Init+0xec>)
 8003b7e:	f008 fe07 	bl	800c790 <HAL_TIM_PWM_ConfigChannel>
 8003b82:	4603      	mov	r3, r0
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d001      	beq.n	8003b8c <MX_TIM2_Init+0xdc>
  {
    Error_Handler();
 8003b88:	f7ff fbd0 	bl	800332c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8003b8c:	4803      	ldr	r0, [pc, #12]	; (8003b9c <MX_TIM2_Init+0xec>)
 8003b8e:	f000 f82d 	bl	8003bec <HAL_TIM_MspPostInit>

}
 8003b92:	bf00      	nop
 8003b94:	3738      	adds	r7, #56	; 0x38
 8003b96:	46bd      	mov	sp, r7
 8003b98:	bd80      	pop	{r7, pc}
 8003b9a:	bf00      	nop
 8003b9c:	20000778 	.word	0x20000778

08003ba0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8003ba0:	b580      	push	{r7, lr}
 8003ba2:	b084      	sub	sp, #16
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003bb0:	d116      	bne.n	8003be0 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003bb2:	4b0d      	ldr	r3, [pc, #52]	; (8003be8 <HAL_TIM_Base_MspInit+0x48>)
 8003bb4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003bb8:	4a0b      	ldr	r2, [pc, #44]	; (8003be8 <HAL_TIM_Base_MspInit+0x48>)
 8003bba:	f043 0301 	orr.w	r3, r3, #1
 8003bbe:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003bc2:	4b09      	ldr	r3, [pc, #36]	; (8003be8 <HAL_TIM_Base_MspInit+0x48>)
 8003bc4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003bc8:	f003 0301 	and.w	r3, r3, #1
 8003bcc:	60fb      	str	r3, [r7, #12]
 8003bce:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8003bd0:	2200      	movs	r2, #0
 8003bd2:	2105      	movs	r1, #5
 8003bd4:	201c      	movs	r0, #28
 8003bd6:	f003 f97f 	bl	8006ed8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003bda:	201c      	movs	r0, #28
 8003bdc:	f003 f996 	bl	8006f0c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8003be0:	bf00      	nop
 8003be2:	3710      	adds	r7, #16
 8003be4:	46bd      	mov	sp, r7
 8003be6:	bd80      	pop	{r7, pc}
 8003be8:	58024400 	.word	0x58024400

08003bec <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8003bec:	b580      	push	{r7, lr}
 8003bee:	b088      	sub	sp, #32
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003bf4:	f107 030c 	add.w	r3, r7, #12
 8003bf8:	2200      	movs	r2, #0
 8003bfa:	601a      	str	r2, [r3, #0]
 8003bfc:	605a      	str	r2, [r3, #4]
 8003bfe:	609a      	str	r2, [r3, #8]
 8003c00:	60da      	str	r2, [r3, #12]
 8003c02:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c0c:	d11f      	bne.n	8003c4e <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003c0e:	4b12      	ldr	r3, [pc, #72]	; (8003c58 <HAL_TIM_MspPostInit+0x6c>)
 8003c10:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003c14:	4a10      	ldr	r2, [pc, #64]	; (8003c58 <HAL_TIM_MspPostInit+0x6c>)
 8003c16:	f043 0301 	orr.w	r3, r3, #1
 8003c1a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003c1e:	4b0e      	ldr	r3, [pc, #56]	; (8003c58 <HAL_TIM_MspPostInit+0x6c>)
 8003c20:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003c24:	f003 0301 	and.w	r3, r3, #1
 8003c28:	60bb      	str	r3, [r7, #8]
 8003c2a:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA15 (JTDI)     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8003c2c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003c30:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c32:	2302      	movs	r3, #2
 8003c34:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c36:	2300      	movs	r3, #0
 8003c38:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c3a:	2300      	movs	r3, #0
 8003c3c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003c3e:	2301      	movs	r3, #1
 8003c40:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003c42:	f107 030c 	add.w	r3, r7, #12
 8003c46:	4619      	mov	r1, r3
 8003c48:	4804      	ldr	r0, [pc, #16]	; (8003c5c <HAL_TIM_MspPostInit+0x70>)
 8003c4a:	f003 fb69 	bl	8007320 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8003c4e:	bf00      	nop
 8003c50:	3720      	adds	r7, #32
 8003c52:	46bd      	mov	sp, r7
 8003c54:	bd80      	pop	{r7, pc}
 8003c56:	bf00      	nop
 8003c58:	58024400 	.word	0x58024400
 8003c5c:	58020000 	.word	0x58020000

08003c60 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8003c60:	b580      	push	{r7, lr}
 8003c62:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8003c64:	4b22      	ldr	r3, [pc, #136]	; (8003cf0 <MX_USART3_UART_Init+0x90>)
 8003c66:	4a23      	ldr	r2, [pc, #140]	; (8003cf4 <MX_USART3_UART_Init+0x94>)
 8003c68:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8003c6a:	4b21      	ldr	r3, [pc, #132]	; (8003cf0 <MX_USART3_UART_Init+0x90>)
 8003c6c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8003c70:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8003c72:	4b1f      	ldr	r3, [pc, #124]	; (8003cf0 <MX_USART3_UART_Init+0x90>)
 8003c74:	2200      	movs	r2, #0
 8003c76:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8003c78:	4b1d      	ldr	r3, [pc, #116]	; (8003cf0 <MX_USART3_UART_Init+0x90>)
 8003c7a:	2200      	movs	r2, #0
 8003c7c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8003c7e:	4b1c      	ldr	r3, [pc, #112]	; (8003cf0 <MX_USART3_UART_Init+0x90>)
 8003c80:	2200      	movs	r2, #0
 8003c82:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8003c84:	4b1a      	ldr	r3, [pc, #104]	; (8003cf0 <MX_USART3_UART_Init+0x90>)
 8003c86:	220c      	movs	r2, #12
 8003c88:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003c8a:	4b19      	ldr	r3, [pc, #100]	; (8003cf0 <MX_USART3_UART_Init+0x90>)
 8003c8c:	2200      	movs	r2, #0
 8003c8e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8003c90:	4b17      	ldr	r3, [pc, #92]	; (8003cf0 <MX_USART3_UART_Init+0x90>)
 8003c92:	2200      	movs	r2, #0
 8003c94:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003c96:	4b16      	ldr	r3, [pc, #88]	; (8003cf0 <MX_USART3_UART_Init+0x90>)
 8003c98:	2200      	movs	r2, #0
 8003c9a:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003c9c:	4b14      	ldr	r3, [pc, #80]	; (8003cf0 <MX_USART3_UART_Init+0x90>)
 8003c9e:	2200      	movs	r2, #0
 8003ca0:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003ca2:	4b13      	ldr	r3, [pc, #76]	; (8003cf0 <MX_USART3_UART_Init+0x90>)
 8003ca4:	2200      	movs	r2, #0
 8003ca6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8003ca8:	4811      	ldr	r0, [pc, #68]	; (8003cf0 <MX_USART3_UART_Init+0x90>)
 8003caa:	f009 fc85 	bl	800d5b8 <HAL_UART_Init>
 8003cae:	4603      	mov	r3, r0
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d001      	beq.n	8003cb8 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8003cb4:	f7ff fb3a 	bl	800332c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003cb8:	2100      	movs	r1, #0
 8003cba:	480d      	ldr	r0, [pc, #52]	; (8003cf0 <MX_USART3_UART_Init+0x90>)
 8003cbc:	f00a fcb8 	bl	800e630 <HAL_UARTEx_SetTxFifoThreshold>
 8003cc0:	4603      	mov	r3, r0
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d001      	beq.n	8003cca <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8003cc6:	f7ff fb31 	bl	800332c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003cca:	2100      	movs	r1, #0
 8003ccc:	4808      	ldr	r0, [pc, #32]	; (8003cf0 <MX_USART3_UART_Init+0x90>)
 8003cce:	f00a fced 	bl	800e6ac <HAL_UARTEx_SetRxFifoThreshold>
 8003cd2:	4603      	mov	r3, r0
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d001      	beq.n	8003cdc <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8003cd8:	f7ff fb28 	bl	800332c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8003cdc:	4804      	ldr	r0, [pc, #16]	; (8003cf0 <MX_USART3_UART_Init+0x90>)
 8003cde:	f00a fc6e 	bl	800e5be <HAL_UARTEx_DisableFifoMode>
 8003ce2:	4603      	mov	r3, r0
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d001      	beq.n	8003cec <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8003ce8:	f7ff fb20 	bl	800332c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8003cec:	bf00      	nop
 8003cee:	bd80      	pop	{r7, pc}
 8003cf0:	200007c4 	.word	0x200007c4
 8003cf4:	40004800 	.word	0x40004800

08003cf8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003cf8:	b580      	push	{r7, lr}
 8003cfa:	b0b8      	sub	sp, #224	; 0xe0
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003d00:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8003d04:	2200      	movs	r2, #0
 8003d06:	601a      	str	r2, [r3, #0]
 8003d08:	605a      	str	r2, [r3, #4]
 8003d0a:	609a      	str	r2, [r3, #8]
 8003d0c:	60da      	str	r2, [r3, #12]
 8003d0e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003d10:	f107 0310 	add.w	r3, r7, #16
 8003d14:	22bc      	movs	r2, #188	; 0xbc
 8003d16:	2100      	movs	r1, #0
 8003d18:	4618      	mov	r0, r3
 8003d1a:	f017 fdff 	bl	801b91c <memset>
  if(uartHandle->Instance==USART3)
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	4a25      	ldr	r2, [pc, #148]	; (8003db8 <HAL_UART_MspInit+0xc0>)
 8003d24:	4293      	cmp	r3, r2
 8003d26:	d142      	bne.n	8003dae <HAL_UART_MspInit+0xb6>
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8003d28:	2302      	movs	r3, #2
 8003d2a:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8003d2c:	2300      	movs	r3, #0
 8003d2e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003d32:	f107 0310 	add.w	r3, r7, #16
 8003d36:	4618      	mov	r0, r3
 8003d38:	f005 f982 	bl	8009040 <HAL_RCCEx_PeriphCLKConfig>
 8003d3c:	4603      	mov	r3, r0
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d001      	beq.n	8003d46 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8003d42:	f7ff faf3 	bl	800332c <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8003d46:	4b1d      	ldr	r3, [pc, #116]	; (8003dbc <HAL_UART_MspInit+0xc4>)
 8003d48:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003d4c:	4a1b      	ldr	r2, [pc, #108]	; (8003dbc <HAL_UART_MspInit+0xc4>)
 8003d4e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003d52:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003d56:	4b19      	ldr	r3, [pc, #100]	; (8003dbc <HAL_UART_MspInit+0xc4>)
 8003d58:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003d5c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003d60:	60fb      	str	r3, [r7, #12]
 8003d62:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003d64:	4b15      	ldr	r3, [pc, #84]	; (8003dbc <HAL_UART_MspInit+0xc4>)
 8003d66:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003d6a:	4a14      	ldr	r2, [pc, #80]	; (8003dbc <HAL_UART_MspInit+0xc4>)
 8003d6c:	f043 0308 	orr.w	r3, r3, #8
 8003d70:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003d74:	4b11      	ldr	r3, [pc, #68]	; (8003dbc <HAL_UART_MspInit+0xc4>)
 8003d76:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003d7a:	f003 0308 	and.w	r3, r3, #8
 8003d7e:	60bb      	str	r3, [r7, #8]
 8003d80:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8003d82:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003d86:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d8a:	2302      	movs	r3, #2
 8003d8c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d90:	2300      	movs	r3, #0
 8003d92:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003d96:	2300      	movs	r3, #0
 8003d98:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003d9c:	2307      	movs	r3, #7
 8003d9e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003da2:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8003da6:	4619      	mov	r1, r3
 8003da8:	4805      	ldr	r0, [pc, #20]	; (8003dc0 <HAL_UART_MspInit+0xc8>)
 8003daa:	f003 fab9 	bl	8007320 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8003dae:	bf00      	nop
 8003db0:	37e0      	adds	r7, #224	; 0xe0
 8003db2:	46bd      	mov	sp, r7
 8003db4:	bd80      	pop	{r7, pc}
 8003db6:	bf00      	nop
 8003db8:	40004800 	.word	0x40004800
 8003dbc:	58024400 	.word	0x58024400
 8003dc0:	58020c00 	.word	0x58020c00

08003dc4 <L6474_Board_Delay>:
 * @brief This function provides an accurate delay in milliseconds
 * @param[in] delay  time length in milliseconds
 * @retval None
 **********************************************************/
void L6474_Board_Delay(uint32_t delay)
{
 8003dc4:	b580      	push	{r7, lr}
 8003dc6:	b082      	sub	sp, #8
 8003dc8:	af00      	add	r7, sp, #0
 8003dca:	6078      	str	r0, [r7, #4]
  HAL_Delay(delay);
 8003dcc:	6878      	ldr	r0, [r7, #4]
 8003dce:	f000 fb0f 	bl	80043f0 <HAL_Delay>
}
 8003dd2:	bf00      	nop
 8003dd4:	3708      	adds	r7, #8
 8003dd6:	46bd      	mov	sp, r7
 8003dd8:	bd80      	pop	{r7, pc}

08003dda <L6474_Board_DisableIrq>:
/******************************************************//**
 * @brief This function disable the interruptions
  * @retval None
 **********************************************************/
void L6474_Board_DisableIrq(void)
{
 8003dda:	b480      	push	{r7}
 8003ddc:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8003dde:	b672      	cpsid	i
}
 8003de0:	bf00      	nop
  __disable_irq();
}
 8003de2:	bf00      	nop
 8003de4:	46bd      	mov	sp, r7
 8003de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dea:	4770      	bx	lr

08003dec <L6474_Board_EnableIrq>:
/******************************************************//**
 * @brief This function enable the interruptions
 * @retval None
 **********************************************************/
void L6474_Board_EnableIrq(void)
{
 8003dec:	b480      	push	{r7}
 8003dee:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsie i" : : : "memory");
 8003df0:	b662      	cpsie	i
}
 8003df2:	bf00      	nop
  __enable_irq();
}
 8003df4:	bf00      	nop
 8003df6:	46bd      	mov	sp, r7
 8003df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dfc:	4770      	bx	lr
	...

08003e00 <L6474_Board_GpioInit>:
 * @brief  Initiliases the GPIOs used by the L6474s
 * @param[in] deviceId (from 0 to 2)
 * @retval None
  **********************************************************/
void L6474_Board_GpioInit(uint8_t deviceId)
{
 8003e00:	b580      	push	{r7, lr}
 8003e02:	b08a      	sub	sp, #40	; 0x28
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	4603      	mov	r3, r0
 8003e08:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef GPIO_InitStruct;

  if (deviceId ==0)
 8003e0a:	79fb      	ldrb	r3, [r7, #7]
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d16a      	bne.n	8003ee6 <L6474_Board_GpioInit+0xe6>
  {
    /* GPIO Ports Clock Enable */
    __GPIOC_CLK_ENABLE();
 8003e10:	4b52      	ldr	r3, [pc, #328]	; (8003f5c <L6474_Board_GpioInit+0x15c>)
 8003e12:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003e16:	4a51      	ldr	r2, [pc, #324]	; (8003f5c <L6474_Board_GpioInit+0x15c>)
 8003e18:	f043 0304 	orr.w	r3, r3, #4
 8003e1c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003e20:	4b4e      	ldr	r3, [pc, #312]	; (8003f5c <L6474_Board_GpioInit+0x15c>)
 8003e22:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003e26:	f003 0304 	and.w	r3, r3, #4
 8003e2a:	613b      	str	r3, [r7, #16]
 8003e2c:	693b      	ldr	r3, [r7, #16]
    __GPIOA_CLK_ENABLE();
 8003e2e:	4b4b      	ldr	r3, [pc, #300]	; (8003f5c <L6474_Board_GpioInit+0x15c>)
 8003e30:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003e34:	4a49      	ldr	r2, [pc, #292]	; (8003f5c <L6474_Board_GpioInit+0x15c>)
 8003e36:	f043 0301 	orr.w	r3, r3, #1
 8003e3a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003e3e:	4b47      	ldr	r3, [pc, #284]	; (8003f5c <L6474_Board_GpioInit+0x15c>)
 8003e40:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003e44:	f003 0301 	and.w	r3, r3, #1
 8003e48:	60fb      	str	r3, [r7, #12]
 8003e4a:	68fb      	ldr	r3, [r7, #12]
    __GPIOB_CLK_ENABLE();
 8003e4c:	4b43      	ldr	r3, [pc, #268]	; (8003f5c <L6474_Board_GpioInit+0x15c>)
 8003e4e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003e52:	4a42      	ldr	r2, [pc, #264]	; (8003f5c <L6474_Board_GpioInit+0x15c>)
 8003e54:	f043 0302 	orr.w	r3, r3, #2
 8003e58:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003e5c:	4b3f      	ldr	r3, [pc, #252]	; (8003f5c <L6474_Board_GpioInit+0x15c>)
 8003e5e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003e62:	f003 0302 	and.w	r3, r3, #2
 8003e66:	60bb      	str	r3, [r7, #8]
 8003e68:	68bb      	ldr	r3, [r7, #8]
    
    /* Configure L6474 - Flag pin -------------------------------------------*/
    GPIO_InitStruct.Pin = BSP_MOTOR_CONTROL_BOARD_FLAG_PIN;
 8003e6a:	2310      	movs	r3, #16
 8003e6c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8003e6e:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8003e72:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003e74:	2301      	movs	r3, #1
 8003e76:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_MEDIUM;
 8003e78:	2301      	movs	r3, #1
 8003e7a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(BSP_MOTOR_CONTROL_BOARD_FLAG_PORT, &GPIO_InitStruct);
 8003e7c:	f107 0314 	add.w	r3, r7, #20
 8003e80:	4619      	mov	r1, r3
 8003e82:	4837      	ldr	r0, [pc, #220]	; (8003f60 <L6474_Board_GpioInit+0x160>)
 8003e84:	f003 fa4c 	bl	8007320 <HAL_GPIO_Init>
    
   /* Set Priority of External Line Interrupt used for the Flag interrupt*/ 
    HAL_NVIC_SetPriority(EXTI_MCU_LINE_IRQn, 5, 0);
 8003e88:	2200      	movs	r2, #0
 8003e8a:	2105      	movs	r1, #5
 8003e8c:	200a      	movs	r0, #10
 8003e8e:	f003 f823 	bl	8006ed8 <HAL_NVIC_SetPriority>
      
    /* Enable the External Line Interrupt used for the Flag interrupt*/
    HAL_NVIC_EnableIRQ(EXTI_MCU_LINE_IRQn);    
 8003e92:	200a      	movs	r0, #10
 8003e94:	f003 f83a 	bl	8006f0c <HAL_NVIC_EnableIRQ>

    /* Configure L6474 - CS pin ---------------------------------------------*/
    GPIO_InitStruct.Pin = BSP_MOTOR_CONTROL_BOARD_CS_PIN;
 8003e98:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003e9c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003e9e:	2301      	movs	r3, #1
 8003ea0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ea2:	2300      	movs	r3, #0
 8003ea4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_MEDIUM;
 8003ea6:	2301      	movs	r3, #1
 8003ea8:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(BSP_MOTOR_CONTROL_BOARD_CS_PORT, &GPIO_InitStruct);
 8003eaa:	f107 0314 	add.w	r3, r7, #20
 8003eae:	4619      	mov	r1, r3
 8003eb0:	482c      	ldr	r0, [pc, #176]	; (8003f64 <L6474_Board_GpioInit+0x164>)
 8003eb2:	f003 fa35 	bl	8007320 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(BSP_MOTOR_CONTROL_BOARD_CS_PORT, BSP_MOTOR_CONTROL_BOARD_CS_PIN, GPIO_PIN_SET); 
 8003eb6:	2201      	movs	r2, #1
 8003eb8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003ebc:	4829      	ldr	r0, [pc, #164]	; (8003f64 <L6474_Board_GpioInit+0x164>)
 8003ebe:	f003 fbdf 	bl	8007680 <HAL_GPIO_WritePin>
    
    /* Configure L6474 - STBY/RESET pin -------------------------------------*/
    GPIO_InitStruct.Pin = BSP_MOTOR_CONTROL_BOARD_RESET_PIN;
 8003ec2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003ec6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003ec8:	2301      	movs	r3, #1
 8003eca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ecc:	2300      	movs	r3, #0
 8003ece:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_MEDIUM;
 8003ed0:	2301      	movs	r3, #1
 8003ed2:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(BSP_MOTOR_CONTROL_BOARD_RESET_PORT, &GPIO_InitStruct);
 8003ed4:	f107 0314 	add.w	r3, r7, #20
 8003ed8:	4619      	mov	r1, r3
 8003eda:	4823      	ldr	r0, [pc, #140]	; (8003f68 <L6474_Board_GpioInit+0x168>)
 8003edc:	f003 fa20 	bl	8007320 <HAL_GPIO_Init>
    L6474_Board_Reset(0);  
 8003ee0:	2000      	movs	r0, #0
 8003ee2:	f000 f947 	bl	8004174 <L6474_Board_Reset>
  }
  
  switch (deviceId)
 8003ee6:	79fb      	ldrb	r3, [r7, #7]
 8003ee8:	2b02      	cmp	r3, #2
 8003eea:	d024      	beq.n	8003f36 <L6474_Board_GpioInit+0x136>
 8003eec:	2b02      	cmp	r3, #2
 8003eee:	dc31      	bgt.n	8003f54 <L6474_Board_GpioInit+0x154>
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d002      	beq.n	8003efa <L6474_Board_GpioInit+0xfa>
 8003ef4:	2b01      	cmp	r3, #1
 8003ef6:	d00f      	beq.n	8003f18 <L6474_Board_GpioInit+0x118>
      GPIO_InitStruct.Pull = GPIO_NOPULL;
      GPIO_InitStruct.Speed = GPIO_SPEED_MEDIUM;
      HAL_GPIO_Init(BSP_MOTOR_CONTROL_BOARD_DIR_3_PORT, &GPIO_InitStruct);    
        break;
  }
}
 8003ef8:	e02c      	b.n	8003f54 <L6474_Board_GpioInit+0x154>
      GPIO_InitStruct.Pin = BSP_MOTOR_CONTROL_BOARD_DIR_1_PIN;
 8003efa:	2308      	movs	r3, #8
 8003efc:	617b      	str	r3, [r7, #20]
      GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003efe:	2301      	movs	r3, #1
 8003f00:	61bb      	str	r3, [r7, #24]
      GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f02:	2300      	movs	r3, #0
 8003f04:	61fb      	str	r3, [r7, #28]
      GPIO_InitStruct.Speed = GPIO_SPEED_MEDIUM;
 8003f06:	2301      	movs	r3, #1
 8003f08:	623b      	str	r3, [r7, #32]
      HAL_GPIO_Init(BSP_MOTOR_CONTROL_BOARD_DIR_1_PORT, &GPIO_InitStruct);
 8003f0a:	f107 0314 	add.w	r3, r7, #20
 8003f0e:	4619      	mov	r1, r3
 8003f10:	4815      	ldr	r0, [pc, #84]	; (8003f68 <L6474_Board_GpioInit+0x168>)
 8003f12:	f003 fa05 	bl	8007320 <HAL_GPIO_Init>
      break;
 8003f16:	e01d      	b.n	8003f54 <L6474_Board_GpioInit+0x154>
      GPIO_InitStruct.Pin = BSP_MOTOR_CONTROL_BOARD_DIR_2_PIN;
 8003f18:	2320      	movs	r3, #32
 8003f1a:	617b      	str	r3, [r7, #20]
      GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003f1c:	2301      	movs	r3, #1
 8003f1e:	61bb      	str	r3, [r7, #24]
      GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f20:	2300      	movs	r3, #0
 8003f22:	61fb      	str	r3, [r7, #28]
      GPIO_InitStruct.Speed = GPIO_SPEED_MEDIUM;
 8003f24:	2301      	movs	r3, #1
 8003f26:	623b      	str	r3, [r7, #32]
      HAL_GPIO_Init(BSP_MOTOR_CONTROL_BOARD_DIR_2_PORT, &GPIO_InitStruct);
 8003f28:	f107 0314 	add.w	r3, r7, #20
 8003f2c:	4619      	mov	r1, r3
 8003f2e:	480d      	ldr	r0, [pc, #52]	; (8003f64 <L6474_Board_GpioInit+0x164>)
 8003f30:	f003 f9f6 	bl	8007320 <HAL_GPIO_Init>
      break;
 8003f34:	e00e      	b.n	8003f54 <L6474_Board_GpioInit+0x154>
      GPIO_InitStruct.Pin = BSP_MOTOR_CONTROL_BOARD_DIR_3_PIN;
 8003f36:	2310      	movs	r3, #16
 8003f38:	617b      	str	r3, [r7, #20]
      GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003f3a:	2301      	movs	r3, #1
 8003f3c:	61bb      	str	r3, [r7, #24]
      GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f3e:	2300      	movs	r3, #0
 8003f40:	61fb      	str	r3, [r7, #28]
      GPIO_InitStruct.Speed = GPIO_SPEED_MEDIUM;
 8003f42:	2301      	movs	r3, #1
 8003f44:	623b      	str	r3, [r7, #32]
      HAL_GPIO_Init(BSP_MOTOR_CONTROL_BOARD_DIR_3_PORT, &GPIO_InitStruct);    
 8003f46:	f107 0314 	add.w	r3, r7, #20
 8003f4a:	4619      	mov	r1, r3
 8003f4c:	4805      	ldr	r0, [pc, #20]	; (8003f64 <L6474_Board_GpioInit+0x164>)
 8003f4e:	f003 f9e7 	bl	8007320 <HAL_GPIO_Init>
        break;
 8003f52:	bf00      	nop
}
 8003f54:	bf00      	nop
 8003f56:	3728      	adds	r7, #40	; 0x28
 8003f58:	46bd      	mov	sp, r7
 8003f5a:	bd80      	pop	{r7, pc}
 8003f5c:	58024400 	.word	0x58024400
 8003f60:	58021c00 	.word	0x58021c00
 8003f64:	58020400 	.word	0x58020400
 8003f68:	58022000 	.word	0x58022000

08003f6c <L6474_Board_Pwm1SetFreq>:
 * @param[in] newFreq in Hz
 * @retval None
 * @note The frequency is directly the current speed of the device
 **********************************************************/
void L6474_Board_Pwm1SetFreq(uint16_t newFreq)
{
 8003f6c:	b580      	push	{r7, lr}
 8003f6e:	b084      	sub	sp, #16
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	4603      	mov	r3, r0
 8003f74:	80fb      	strh	r3, [r7, #6]
  uint32_t sysFreq = HAL_RCC_GetSysClockFreq();
 8003f76:	f004 fe4b 	bl	8008c10 <HAL_RCC_GetSysClockFreq>
 8003f7a:	60f8      	str	r0, [r7, #12]
  uint32_t period = (sysFreq/ (TIMER_PRESCALER * BSP_MOTOR_CONTROL_BOARD_PWM1_FREQ_RESCALER * (uint32_t)newFreq)) - 1;
 8003f7c:	88fb      	ldrh	r3, [r7, #6]
 8003f7e:	029b      	lsls	r3, r3, #10
 8003f80:	68fa      	ldr	r2, [r7, #12]
 8003f82:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f86:	3b01      	subs	r3, #1
 8003f88:	60bb      	str	r3, [r7, #8]
  
  __HAL_TIM_SetAutoreload(&hTimPwm1, period);
 8003f8a:	4b0a      	ldr	r3, [pc, #40]	; (8003fb4 <L6474_Board_Pwm1SetFreq+0x48>)
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	68ba      	ldr	r2, [r7, #8]
 8003f90:	62da      	str	r2, [r3, #44]	; 0x2c
 8003f92:	4a08      	ldr	r2, [pc, #32]	; (8003fb4 <L6474_Board_Pwm1SetFreq+0x48>)
 8003f94:	68bb      	ldr	r3, [r7, #8]
 8003f96:	60d3      	str	r3, [r2, #12]
  __HAL_TIM_SetCompare(&hTimPwm1, BSP_MOTOR_CONTROL_BOARD_CHAN_TIMER_PWM1, period >> 1);
 8003f98:	4b06      	ldr	r3, [pc, #24]	; (8003fb4 <L6474_Board_Pwm1SetFreq+0x48>)
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	68ba      	ldr	r2, [r7, #8]
 8003f9e:	0852      	lsrs	r2, r2, #1
 8003fa0:	635a      	str	r2, [r3, #52]	; 0x34
  HAL_TIM_PWM_Start_IT(&hTimPwm1, BSP_MOTOR_CONTROL_BOARD_CHAN_TIMER_PWM1);  
 8003fa2:	2100      	movs	r1, #0
 8003fa4:	4803      	ldr	r0, [pc, #12]	; (8003fb4 <L6474_Board_Pwm1SetFreq+0x48>)
 8003fa6:	f008 f979 	bl	800c29c <HAL_TIM_PWM_Start_IT>
}
 8003faa:	bf00      	nop
 8003fac:	3710      	adds	r7, #16
 8003fae:	46bd      	mov	sp, r7
 8003fb0:	bd80      	pop	{r7, pc}
 8003fb2:	bf00      	nop
 8003fb4:	200008dc 	.word	0x200008dc

08003fb8 <L6474_Board_Pwm2SetFreq>:
 * @param[in] newFreq in Hz
 * @retval None
 * @note The frequency is directly the current speed of the device
 **********************************************************/
void L6474_Board_Pwm2SetFreq(uint16_t newFreq)
{
 8003fb8:	b580      	push	{r7, lr}
 8003fba:	b084      	sub	sp, #16
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	4603      	mov	r3, r0
 8003fc0:	80fb      	strh	r3, [r7, #6]
  uint32_t sysFreq = HAL_RCC_GetSysClockFreq();
 8003fc2:	f004 fe25 	bl	8008c10 <HAL_RCC_GetSysClockFreq>
 8003fc6:	60f8      	str	r0, [r7, #12]
  uint32_t period = (sysFreq/ (TIMER_PRESCALER * BSP_MOTOR_CONTROL_BOARD_PWM2_FREQ_RESCALER  * (uint32_t)newFreq)) - 1;
 8003fc8:	88fb      	ldrh	r3, [r7, #6]
 8003fca:	029b      	lsls	r3, r3, #10
 8003fcc:	68fa      	ldr	r2, [r7, #12]
 8003fce:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fd2:	3b01      	subs	r3, #1
 8003fd4:	60bb      	str	r3, [r7, #8]
  
  __HAL_TIM_SetAutoreload(&hTimPwm2, period);
 8003fd6:	4b0a      	ldr	r3, [pc, #40]	; (8004000 <L6474_Board_Pwm2SetFreq+0x48>)
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	68ba      	ldr	r2, [r7, #8]
 8003fdc:	62da      	str	r2, [r3, #44]	; 0x2c
 8003fde:	4a08      	ldr	r2, [pc, #32]	; (8004000 <L6474_Board_Pwm2SetFreq+0x48>)
 8003fe0:	68bb      	ldr	r3, [r7, #8]
 8003fe2:	60d3      	str	r3, [r2, #12]
  __HAL_TIM_SetCompare(&hTimPwm2, BSP_MOTOR_CONTROL_BOARD_CHAN_TIMER_PWM2, period >> 1);
 8003fe4:	4b06      	ldr	r3, [pc, #24]	; (8004000 <L6474_Board_Pwm2SetFreq+0x48>)
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	68ba      	ldr	r2, [r7, #8]
 8003fea:	0852      	lsrs	r2, r2, #1
 8003fec:	639a      	str	r2, [r3, #56]	; 0x38
  HAL_TIM_PWM_Start_IT(&hTimPwm2, BSP_MOTOR_CONTROL_BOARD_CHAN_TIMER_PWM2);
 8003fee:	2104      	movs	r1, #4
 8003ff0:	4803      	ldr	r0, [pc, #12]	; (8004000 <L6474_Board_Pwm2SetFreq+0x48>)
 8003ff2:	f008 f953 	bl	800c29c <HAL_TIM_PWM_Start_IT>
}
 8003ff6:	bf00      	nop
 8003ff8:	3710      	adds	r7, #16
 8003ffa:	46bd      	mov	sp, r7
 8003ffc:	bd80      	pop	{r7, pc}
 8003ffe:	bf00      	nop
 8004000:	20000928 	.word	0x20000928

08004004 <L6474_Board_Pwm3SetFreq>:
 * @param[in] newFreq in Hz
 * @retval None
 * @note The frequency is directly the current speed of the device
 **********************************************************/
void L6474_Board_Pwm3SetFreq(uint16_t newFreq)
{
 8004004:	b580      	push	{r7, lr}
 8004006:	b084      	sub	sp, #16
 8004008:	af00      	add	r7, sp, #0
 800400a:	4603      	mov	r3, r0
 800400c:	80fb      	strh	r3, [r7, #6]
  uint32_t sysFreq = HAL_RCC_GetSysClockFreq();
 800400e:	f004 fdff 	bl	8008c10 <HAL_RCC_GetSysClockFreq>
 8004012:	60f8      	str	r0, [r7, #12]
  /* Double the frequency as the SW is generated by SW */
  uint32_t period = (sysFreq/ (TIMER_PRESCALER * BSP_MOTOR_CONTROL_BOARD_PWM3_FREQ_RESCALER * (uint32_t)newFreq)) - 1;
 8004014:	88fb      	ldrh	r3, [r7, #6]
 8004016:	02db      	lsls	r3, r3, #11
 8004018:	68fa      	ldr	r2, [r7, #12]
 800401a:	fbb2 f3f3 	udiv	r3, r2, r3
 800401e:	3b01      	subs	r3, #1
 8004020:	60bb      	str	r3, [r7, #8]
  
  __HAL_TIM_SetAutoreload(&hTimPwm3, period);
 8004022:	4b0a      	ldr	r3, [pc, #40]	; (800404c <L6474_Board_Pwm3SetFreq+0x48>)
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	68ba      	ldr	r2, [r7, #8]
 8004028:	62da      	str	r2, [r3, #44]	; 0x2c
 800402a:	4a08      	ldr	r2, [pc, #32]	; (800404c <L6474_Board_Pwm3SetFreq+0x48>)
 800402c:	68bb      	ldr	r3, [r7, #8]
 800402e:	60d3      	str	r3, [r2, #12]
  __HAL_TIM_SetCompare(&hTimPwm3, BSP_MOTOR_CONTROL_BOARD_CHAN_TIMER_PWM3, period >> 1);
 8004030:	4b06      	ldr	r3, [pc, #24]	; (800404c <L6474_Board_Pwm3SetFreq+0x48>)
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	68ba      	ldr	r2, [r7, #8]
 8004036:	0852      	lsrs	r2, r2, #1
 8004038:	63da      	str	r2, [r3, #60]	; 0x3c
  HAL_TIM_PWM_Start_IT(&hTimPwm3, BSP_MOTOR_CONTROL_BOARD_CHAN_TIMER_PWM3);  
 800403a:	2108      	movs	r1, #8
 800403c:	4803      	ldr	r0, [pc, #12]	; (800404c <L6474_Board_Pwm3SetFreq+0x48>)
 800403e:	f008 f92d 	bl	800c29c <HAL_TIM_PWM_Start_IT>
}
 8004042:	bf00      	nop
 8004044:	3710      	adds	r7, #16
 8004046:	46bd      	mov	sp, r7
 8004048:	bd80      	pop	{r7, pc}
 800404a:	bf00      	nop
 800404c:	20000974 	.word	0x20000974

08004050 <L6474_Board_PwmInit>:
 * @note Device 0 uses PWM1 based on timer 1 
 * Device 1 uses PWM 2 based on timer 2
 * Device 2 uses PWM3 based timer 0
 **********************************************************/
void L6474_Board_PwmInit(uint8_t deviceId)
{
 8004050:	b580      	push	{r7, lr}
 8004052:	b08e      	sub	sp, #56	; 0x38
 8004054:	af00      	add	r7, sp, #0
 8004056:	4603      	mov	r3, r0
 8004058:	71fb      	strb	r3, [r7, #7]
  TIM_OC_InitTypeDef sConfigOC;
  TIM_MasterConfigTypeDef sMasterConfig;
  TIM_HandleTypeDef *pHTim;
  uint32_t  channel;

  switch (deviceId)
 800405a:	79fb      	ldrb	r3, [r7, #7]
 800405c:	2b01      	cmp	r3, #1
 800405e:	d00a      	beq.n	8004076 <L6474_Board_PwmInit+0x26>
 8004060:	2b02      	cmp	r3, #2
 8004062:	d011      	beq.n	8004088 <L6474_Board_PwmInit+0x38>
  {

  case 0:
  default:
      pHTim = &hTimPwm1;
 8004064:	4b21      	ldr	r3, [pc, #132]	; (80040ec <L6474_Board_PwmInit+0x9c>)
 8004066:	637b      	str	r3, [r7, #52]	; 0x34
      pHTim->Instance = BSP_MOTOR_CONTROL_BOARD_TIMER_PWM1;
 8004068:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800406a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800406e:	601a      	str	r2, [r3, #0]
      channel = BSP_MOTOR_CONTROL_BOARD_CHAN_TIMER_PWM1;
 8004070:	2300      	movs	r3, #0
 8004072:	633b      	str	r3, [r7, #48]	; 0x30

      break;
 8004074:	e010      	b.n	8004098 <L6474_Board_PwmInit+0x48>
    case  1:
      pHTim = &hTimPwm2;
 8004076:	4b1e      	ldr	r3, [pc, #120]	; (80040f0 <L6474_Board_PwmInit+0xa0>)
 8004078:	637b      	str	r3, [r7, #52]	; 0x34
      pHTim->Instance = BSP_MOTOR_CONTROL_BOARD_TIMER_PWM2;
 800407a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800407c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004080:	601a      	str	r2, [r3, #0]
      channel = BSP_MOTOR_CONTROL_BOARD_CHAN_TIMER_PWM2;
 8004082:	2304      	movs	r3, #4
 8004084:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8004086:	e007      	b.n	8004098 <L6474_Board_PwmInit+0x48>


    case 2:
      pHTim = &hTimPwm3;
 8004088:	4b1a      	ldr	r3, [pc, #104]	; (80040f4 <L6474_Board_PwmInit+0xa4>)
 800408a:	637b      	str	r3, [r7, #52]	; 0x34
      pHTim->Instance = BSP_MOTOR_CONTROL_BOARD_TIMER_PWM3;
 800408c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800408e:	4a1a      	ldr	r2, [pc, #104]	; (80040f8 <L6474_Board_PwmInit+0xa8>)
 8004090:	601a      	str	r2, [r3, #0]
      channel = BSP_MOTOR_CONTROL_BOARD_CHAN_TIMER_PWM3;
 8004092:	2308      	movs	r3, #8
 8004094:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8004096:	bf00      	nop
  }
  pHTim->Init.Prescaler = TIMER_PRESCALER -1;
 8004098:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800409a:	f240 32ff 	movw	r2, #1023	; 0x3ff
 800409e:	605a      	str	r2, [r3, #4]
  
  pHTim->Init.Period = 0;
 80040a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80040a2:	2200      	movs	r2, #0
 80040a4:	60da      	str	r2, [r3, #12]
  pHTim->Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80040a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80040a8:	2200      	movs	r2, #0
 80040aa:	611a      	str	r2, [r3, #16]
  HAL_TIM_PWM_Init(pHTim);
 80040ac:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80040ae:	f007 fffd 	bl	800c0ac <HAL_TIM_PWM_Init>
  
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80040b2:	2360      	movs	r3, #96	; 0x60
 80040b4:	617b      	str	r3, [r7, #20]
  sConfigOC.Pulse = 0;
 80040b6:	2300      	movs	r3, #0
 80040b8:	61bb      	str	r3, [r7, #24]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80040ba:	2300      	movs	r3, #0
 80040bc:	61fb      	str	r3, [r7, #28]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80040be:	2300      	movs	r3, #0
 80040c0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_TIM_PWM_ConfigChannel(pHTim, &sConfigOC, channel);
 80040c2:	f107 0314 	add.w	r3, r7, #20
 80040c6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80040c8:	4619      	mov	r1, r3
 80040ca:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80040cc:	f008 fb60 	bl	800c790 <HAL_TIM_PWM_ConfigChannel>
  
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80040d0:	2300      	movs	r3, #0
 80040d2:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80040d4:	2300      	movs	r3, #0
 80040d6:	613b      	str	r3, [r7, #16]
  HAL_TIMEx_MasterConfigSynchronization(pHTim, &sMasterConfig);
 80040d8:	f107 0308 	add.w	r3, r7, #8
 80040dc:	4619      	mov	r1, r3
 80040de:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80040e0:	f009 f9be 	bl	800d460 <HAL_TIMEx_MasterConfigSynchronization>
}
 80040e4:	bf00      	nop
 80040e6:	3738      	adds	r7, #56	; 0x38
 80040e8:	46bd      	mov	sp, r7
 80040ea:	bd80      	pop	{r7, pc}
 80040ec:	200008dc 	.word	0x200008dc
 80040f0:	20000928 	.word	0x20000928
 80040f4:	20000974 	.word	0x20000974
 80040f8:	40000800 	.word	0x40000800

080040fc <L6474_Board_PwmStop>:
 * @brief  Stops the PWM uses by the specified device
 * @param[in] deviceId (from 0 to 2)
 * @retval None
 **********************************************************/
void L6474_Board_PwmStop(uint8_t deviceId)
{
 80040fc:	b580      	push	{r7, lr}
 80040fe:	b082      	sub	sp, #8
 8004100:	af00      	add	r7, sp, #0
 8004102:	4603      	mov	r3, r0
 8004104:	71fb      	strb	r3, [r7, #7]
  switch (deviceId)
 8004106:	79fb      	ldrb	r3, [r7, #7]
 8004108:	2b02      	cmp	r3, #2
 800410a:	d010      	beq.n	800412e <L6474_Board_PwmStop+0x32>
 800410c:	2b02      	cmp	r3, #2
 800410e:	dc13      	bgt.n	8004138 <L6474_Board_PwmStop+0x3c>
 8004110:	2b00      	cmp	r3, #0
 8004112:	d002      	beq.n	800411a <L6474_Board_PwmStop+0x1e>
 8004114:	2b01      	cmp	r3, #1
 8004116:	d005      	beq.n	8004124 <L6474_Board_PwmStop+0x28>
    case 2:
       HAL_TIM_PWM_Stop(&hTimPwm3,BSP_MOTOR_CONTROL_BOARD_CHAN_TIMER_PWM3);
      
      break;
    default:
      break;//ignore error
 8004118:	e00e      	b.n	8004138 <L6474_Board_PwmStop+0x3c>
       HAL_TIM_PWM_Stop(&hTimPwm1,BSP_MOTOR_CONTROL_BOARD_CHAN_TIMER_PWM1);
 800411a:	2100      	movs	r1, #0
 800411c:	4809      	ldr	r0, [pc, #36]	; (8004144 <L6474_Board_PwmStop+0x48>)
 800411e:	f008 f827 	bl	800c170 <HAL_TIM_PWM_Stop>
      break;
 8004122:	e00a      	b.n	800413a <L6474_Board_PwmStop+0x3e>
      HAL_TIM_PWM_Stop(&hTimPwm2,BSP_MOTOR_CONTROL_BOARD_CHAN_TIMER_PWM2);
 8004124:	2104      	movs	r1, #4
 8004126:	4808      	ldr	r0, [pc, #32]	; (8004148 <L6474_Board_PwmStop+0x4c>)
 8004128:	f008 f822 	bl	800c170 <HAL_TIM_PWM_Stop>
      break;
 800412c:	e005      	b.n	800413a <L6474_Board_PwmStop+0x3e>
       HAL_TIM_PWM_Stop(&hTimPwm3,BSP_MOTOR_CONTROL_BOARD_CHAN_TIMER_PWM3);
 800412e:	2108      	movs	r1, #8
 8004130:	4806      	ldr	r0, [pc, #24]	; (800414c <L6474_Board_PwmStop+0x50>)
 8004132:	f008 f81d 	bl	800c170 <HAL_TIM_PWM_Stop>
      break;
 8004136:	e000      	b.n	800413a <L6474_Board_PwmStop+0x3e>
      break;//ignore error
 8004138:	bf00      	nop
  }
}
 800413a:	bf00      	nop
 800413c:	3708      	adds	r7, #8
 800413e:	46bd      	mov	sp, r7
 8004140:	bd80      	pop	{r7, pc}
 8004142:	bf00      	nop
 8004144:	200008dc 	.word	0x200008dc
 8004148:	20000928 	.word	0x20000928
 800414c:	20000974 	.word	0x20000974

08004150 <L6474_Board_ReleaseReset>:
 * @brief  Releases the L6474 reset (pin set to High) of all devices
 * @param[in] deviceId (from 0 to 2)
 * @retval None
 **********************************************************/
void L6474_Board_ReleaseReset(uint8_t deviceId)
{ 
 8004150:	b580      	push	{r7, lr}
 8004152:	b082      	sub	sp, #8
 8004154:	af00      	add	r7, sp, #0
 8004156:	4603      	mov	r3, r0
 8004158:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIOI, GPIO_PIN_8, GPIO_PIN_SET);
 800415a:	2201      	movs	r2, #1
 800415c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004160:	4803      	ldr	r0, [pc, #12]	; (8004170 <L6474_Board_ReleaseReset+0x20>)
 8004162:	f003 fa8d 	bl	8007680 <HAL_GPIO_WritePin>
}
 8004166:	bf00      	nop
 8004168:	3708      	adds	r7, #8
 800416a:	46bd      	mov	sp, r7
 800416c:	bd80      	pop	{r7, pc}
 800416e:	bf00      	nop
 8004170:	58022000 	.word	0x58022000

08004174 <L6474_Board_Reset>:
 * @brief  Resets the L6474 (reset pin set to low) of all devices
 * @param[in] deviceId (from 0 to 2)
 * @retval None
 **********************************************************/
void L6474_Board_Reset(uint8_t deviceId)
{
 8004174:	b580      	push	{r7, lr}
 8004176:	b082      	sub	sp, #8
 8004178:	af00      	add	r7, sp, #0
 800417a:	4603      	mov	r3, r0
 800417c:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIOI, GPIO_PIN_8, GPIO_PIN_RESET);
 800417e:	2200      	movs	r2, #0
 8004180:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004184:	4803      	ldr	r0, [pc, #12]	; (8004194 <L6474_Board_Reset+0x20>)
 8004186:	f003 fa7b 	bl	8007680 <HAL_GPIO_WritePin>
}
 800418a:	bf00      	nop
 800418c:	3708      	adds	r7, #8
 800418e:	46bd      	mov	sp, r7
 8004190:	bd80      	pop	{r7, pc}
 8004192:	bf00      	nop
 8004194:	58022000 	.word	0x58022000

08004198 <L6474_Board_SetDirectionGpio>:
 * @param[in] deviceId (from 0 to 2)
 * @param[in] gpioState state of the direction gpio (0 to reset, 1 to set)
 * @retval None
 **********************************************************/
void L6474_Board_SetDirectionGpio(uint8_t deviceId, uint8_t gpioState)
{
 8004198:	b580      	push	{r7, lr}
 800419a:	b082      	sub	sp, #8
 800419c:	af00      	add	r7, sp, #0
 800419e:	4603      	mov	r3, r0
 80041a0:	460a      	mov	r2, r1
 80041a2:	71fb      	strb	r3, [r7, #7]
 80041a4:	4613      	mov	r3, r2
 80041a6:	71bb      	strb	r3, [r7, #6]
  switch (deviceId)
 80041a8:	79fb      	ldrb	r3, [r7, #7]
 80041aa:	2b02      	cmp	r3, #2
 80041ac:	d006      	beq.n	80041bc <L6474_Board_SetDirectionGpio+0x24>
 80041ae:	2b02      	cmp	r3, #2
 80041b0:	dc19      	bgt.n	80041e6 <L6474_Board_SetDirectionGpio+0x4e>
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d010      	beq.n	80041d8 <L6474_Board_SetDirectionGpio+0x40>
 80041b6:	2b01      	cmp	r3, #1
 80041b8:	d007      	beq.n	80041ca <L6474_Board_SetDirectionGpio+0x32>
      HAL_GPIO_WritePin(BSP_MOTOR_CONTROL_BOARD_DIR_1_PORT, BSP_MOTOR_CONTROL_BOARD_DIR_1_PIN, (GPIO_PinState)gpioState); 
      break;
    default:
      ;
  }
}
 80041ba:	e014      	b.n	80041e6 <L6474_Board_SetDirectionGpio+0x4e>
      HAL_GPIO_WritePin(BSP_MOTOR_CONTROL_BOARD_DIR_3_PORT, BSP_MOTOR_CONTROL_BOARD_DIR_3_PIN, (GPIO_PinState)gpioState); 
 80041bc:	79bb      	ldrb	r3, [r7, #6]
 80041be:	461a      	mov	r2, r3
 80041c0:	2110      	movs	r1, #16
 80041c2:	480b      	ldr	r0, [pc, #44]	; (80041f0 <L6474_Board_SetDirectionGpio+0x58>)
 80041c4:	f003 fa5c 	bl	8007680 <HAL_GPIO_WritePin>
      break;
 80041c8:	e00d      	b.n	80041e6 <L6474_Board_SetDirectionGpio+0x4e>
      HAL_GPIO_WritePin(BSP_MOTOR_CONTROL_BOARD_DIR_2_PORT, BSP_MOTOR_CONTROL_BOARD_DIR_2_PIN, (GPIO_PinState)gpioState); 
 80041ca:	79bb      	ldrb	r3, [r7, #6]
 80041cc:	461a      	mov	r2, r3
 80041ce:	2120      	movs	r1, #32
 80041d0:	4807      	ldr	r0, [pc, #28]	; (80041f0 <L6474_Board_SetDirectionGpio+0x58>)
 80041d2:	f003 fa55 	bl	8007680 <HAL_GPIO_WritePin>
      break;
 80041d6:	e006      	b.n	80041e6 <L6474_Board_SetDirectionGpio+0x4e>
      HAL_GPIO_WritePin(BSP_MOTOR_CONTROL_BOARD_DIR_1_PORT, BSP_MOTOR_CONTROL_BOARD_DIR_1_PIN, (GPIO_PinState)gpioState); 
 80041d8:	79bb      	ldrb	r3, [r7, #6]
 80041da:	461a      	mov	r2, r3
 80041dc:	2108      	movs	r1, #8
 80041de:	4805      	ldr	r0, [pc, #20]	; (80041f4 <L6474_Board_SetDirectionGpio+0x5c>)
 80041e0:	f003 fa4e 	bl	8007680 <HAL_GPIO_WritePin>
      break;
 80041e4:	bf00      	nop
}
 80041e6:	bf00      	nop
 80041e8:	3708      	adds	r7, #8
 80041ea:	46bd      	mov	sp, r7
 80041ec:	bd80      	pop	{r7, pc}
 80041ee:	bf00      	nop
 80041f0:	58020400 	.word	0x58020400
 80041f4:	58022000 	.word	0x58022000

080041f8 <L6474_Board_SpiInit>:
/******************************************************//**
 * @brief  Initialise the SPI used by L6474
 * @retval HAL_OK if SPI transaction is OK, HAL_KO else
 **********************************************************/
uint8_t L6474_Board_SpiInit(void)
{
 80041f8:	b580      	push	{r7, lr}
 80041fa:	b082      	sub	sp, #8
 80041fc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status;
  
  /* Initialises the SPI  --------------------------------------------------*/
  SpiHandle.Instance               = SPIx;
 80041fe:	4b19      	ldr	r3, [pc, #100]	; (8004264 <L6474_Board_SpiInit+0x6c>)
 8004200:	4a19      	ldr	r2, [pc, #100]	; (8004268 <L6474_Board_SpiInit+0x70>)
 8004202:	601a      	str	r2, [r3, #0]
  SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32; 
 8004204:	4b17      	ldr	r3, [pc, #92]	; (8004264 <L6474_Board_SpiInit+0x6c>)
 8004206:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800420a:	61da      	str	r2, [r3, #28]
  SpiHandle.Init.Direction         = SPI_DIRECTION_2LINES;
 800420c:	4b15      	ldr	r3, [pc, #84]	; (8004264 <L6474_Board_SpiInit+0x6c>)
 800420e:	2200      	movs	r2, #0
 8004210:	609a      	str	r2, [r3, #8]
  SpiHandle.Init.CLKPhase          = SPI_PHASE_2EDGE;    
 8004212:	4b14      	ldr	r3, [pc, #80]	; (8004264 <L6474_Board_SpiInit+0x6c>)
 8004214:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004218:	615a      	str	r2, [r3, #20]
  SpiHandle.Init.CLKPolarity       = SPI_POLARITY_HIGH;
 800421a:	4b12      	ldr	r3, [pc, #72]	; (8004264 <L6474_Board_SpiInit+0x6c>)
 800421c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004220:	611a      	str	r2, [r3, #16]
  SpiHandle.Init.CRCCalculation    = SPI_CRCCALCULATION_DISABLED;
 8004222:	4b10      	ldr	r3, [pc, #64]	; (8004264 <L6474_Board_SpiInit+0x6c>)
 8004224:	2200      	movs	r2, #0
 8004226:	629a      	str	r2, [r3, #40]	; 0x28
  SpiHandle.Init.CRCPolynomial     = 7;
 8004228:	4b0e      	ldr	r3, [pc, #56]	; (8004264 <L6474_Board_SpiInit+0x6c>)
 800422a:	2207      	movs	r2, #7
 800422c:	62da      	str	r2, [r3, #44]	; 0x2c
  SpiHandle.Init.DataSize          = SPI_DATASIZE_8BIT;
 800422e:	4b0d      	ldr	r3, [pc, #52]	; (8004264 <L6474_Board_SpiInit+0x6c>)
 8004230:	2207      	movs	r2, #7
 8004232:	60da      	str	r2, [r3, #12]
  SpiHandle.Init.FirstBit          = SPI_FIRSTBIT_MSB;
 8004234:	4b0b      	ldr	r3, [pc, #44]	; (8004264 <L6474_Board_SpiInit+0x6c>)
 8004236:	2200      	movs	r2, #0
 8004238:	621a      	str	r2, [r3, #32]
  SpiHandle.Init.NSS               = SPI_NSS_SOFT;
 800423a:	4b0a      	ldr	r3, [pc, #40]	; (8004264 <L6474_Board_SpiInit+0x6c>)
 800423c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8004240:	619a      	str	r2, [r3, #24]
  SpiHandle.Init.TIMode            = SPI_TIMODE_DISABLED;
 8004242:	4b08      	ldr	r3, [pc, #32]	; (8004264 <L6474_Board_SpiInit+0x6c>)
 8004244:	2200      	movs	r2, #0
 8004246:	625a      	str	r2, [r3, #36]	; 0x24
  
  SpiHandle.Init.Mode = SPI_MODE_MASTER;
 8004248:	4b06      	ldr	r3, [pc, #24]	; (8004264 <L6474_Board_SpiInit+0x6c>)
 800424a:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 800424e:	605a      	str	r2, [r3, #4]
  
  status = HAL_SPI_Init(&SpiHandle);
 8004250:	4804      	ldr	r0, [pc, #16]	; (8004264 <L6474_Board_SpiInit+0x6c>)
 8004252:	f007 f981 	bl	800b558 <HAL_SPI_Init>
 8004256:	4603      	mov	r3, r0
 8004258:	71fb      	strb	r3, [r7, #7]
  
  return (uint8_t) status;
 800425a:	79fb      	ldrb	r3, [r7, #7]
}
 800425c:	4618      	mov	r0, r3
 800425e:	3708      	adds	r7, #8
 8004260:	46bd      	mov	sp, r7
 8004262:	bd80      	pop	{r7, pc}
 8004264:	20000854 	.word	0x20000854
 8004268:	40003800 	.word	0x40003800

0800426c <L6474_Board_SpiWriteBytes>:
 * @param[in] pReceivedByte pointer to the received byte
 * @param[in] nbDevices Number of device in the SPI chain
 * @retval HAL_OK if SPI transaction is OK, HAL_KO else 
 **********************************************************/
uint8_t L6474_Board_SpiWriteBytes(uint8_t *pByteToTransmit, uint8_t *pReceivedByte, uint8_t nbDevices)
{
 800426c:	b580      	push	{r7, lr}
 800426e:	b088      	sub	sp, #32
 8004270:	af02      	add	r7, sp, #8
 8004272:	60f8      	str	r0, [r7, #12]
 8004274:	60b9      	str	r1, [r7, #8]
 8004276:	4613      	mov	r3, r2
 8004278:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status;
  uint32_t i;
  HAL_GPIO_WritePin(BSP_MOTOR_CONTROL_BOARD_CS_PORT, BSP_MOTOR_CONTROL_BOARD_CS_PIN, GPIO_PIN_RESET); 
 800427a:	2200      	movs	r2, #0
 800427c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004280:	4816      	ldr	r0, [pc, #88]	; (80042dc <L6474_Board_SpiWriteBytes+0x70>)
 8004282:	f003 f9fd 	bl	8007680 <HAL_GPIO_WritePin>
  for (i = 0; i < nbDevices; i++)
 8004286:	2300      	movs	r3, #0
 8004288:	613b      	str	r3, [r7, #16]
 800428a:	e016      	b.n	80042ba <L6474_Board_SpiWriteBytes+0x4e>
  {
    status = HAL_SPI_TransmitReceive(&SpiHandle, pByteToTransmit, pReceivedByte, 1, SPIx_TIMEOUT_MAX);
 800428c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004290:	9300      	str	r3, [sp, #0]
 8004292:	2301      	movs	r3, #1
 8004294:	68ba      	ldr	r2, [r7, #8]
 8004296:	68f9      	ldr	r1, [r7, #12]
 8004298:	4811      	ldr	r0, [pc, #68]	; (80042e0 <L6474_Board_SpiWriteBytes+0x74>)
 800429a:	f007 fa63 	bl	800b764 <HAL_SPI_TransmitReceive>
 800429e:	4603      	mov	r3, r0
 80042a0:	75fb      	strb	r3, [r7, #23]
    if (status != HAL_OK)
 80042a2:	7dfb      	ldrb	r3, [r7, #23]
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d10d      	bne.n	80042c4 <L6474_Board_SpiWriteBytes+0x58>
    {
      break;
    }
    pByteToTransmit++;
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	3301      	adds	r3, #1
 80042ac:	60fb      	str	r3, [r7, #12]
    pReceivedByte++;
 80042ae:	68bb      	ldr	r3, [r7, #8]
 80042b0:	3301      	adds	r3, #1
 80042b2:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < nbDevices; i++)
 80042b4:	693b      	ldr	r3, [r7, #16]
 80042b6:	3301      	adds	r3, #1
 80042b8:	613b      	str	r3, [r7, #16]
 80042ba:	79fb      	ldrb	r3, [r7, #7]
 80042bc:	693a      	ldr	r2, [r7, #16]
 80042be:	429a      	cmp	r2, r3
 80042c0:	d3e4      	bcc.n	800428c <L6474_Board_SpiWriteBytes+0x20>
 80042c2:	e000      	b.n	80042c6 <L6474_Board_SpiWriteBytes+0x5a>
      break;
 80042c4:	bf00      	nop
  }
  HAL_GPIO_WritePin(BSP_MOTOR_CONTROL_BOARD_CS_PORT, BSP_MOTOR_CONTROL_BOARD_CS_PIN, GPIO_PIN_SET); 
 80042c6:	2201      	movs	r2, #1
 80042c8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80042cc:	4803      	ldr	r0, [pc, #12]	; (80042dc <L6474_Board_SpiWriteBytes+0x70>)
 80042ce:	f003 f9d7 	bl	8007680 <HAL_GPIO_WritePin>
  
  return (uint8_t) status;  
 80042d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80042d4:	4618      	mov	r0, r3
 80042d6:	3718      	adds	r7, #24
 80042d8:	46bd      	mov	sp, r7
 80042da:	bd80      	pop	{r7, pc}
 80042dc:	58020400 	.word	0x58020400
 80042e0:	20000854 	.word	0x20000854

080042e4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80042e4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800431c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80042e8:	f7ff fb5a 	bl	80039a0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80042ec:	480c      	ldr	r0, [pc, #48]	; (8004320 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80042ee:	490d      	ldr	r1, [pc, #52]	; (8004324 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80042f0:	4a0d      	ldr	r2, [pc, #52]	; (8004328 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80042f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80042f4:	e002      	b.n	80042fc <LoopCopyDataInit>

080042f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80042f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80042f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80042fa:	3304      	adds	r3, #4

080042fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80042fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80042fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004300:	d3f9      	bcc.n	80042f6 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004302:	4a0a      	ldr	r2, [pc, #40]	; (800432c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8004304:	4c0a      	ldr	r4, [pc, #40]	; (8004330 <LoopFillZerobss+0x22>)
  movs r3, #0
 8004306:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004308:	e001      	b.n	800430e <LoopFillZerobss>

0800430a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800430a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800430c:	3204      	adds	r2, #4

0800430e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800430e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004310:	d3fb      	bcc.n	800430a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8004312:	f017 fabd 	bl	801b890 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004316:	f7fe fcf7 	bl	8002d08 <main>
  bx  lr
 800431a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800431c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8004320:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004324:	20000314 	.word	0x20000314
  ldr r2, =_sidata
 8004328:	08038084 	.word	0x08038084
  ldr r2, =_sbss
 800432c:	20000314 	.word	0x20000314
  ldr r4, =_ebss
 8004330:	20006ff4 	.word	0x20006ff4

08004334 <ADC_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004334:	e7fe      	b.n	8004334 <ADC_IRQHandler>
	...

08004338 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004338:	b580      	push	{r7, lr}
 800433a:	b082      	sub	sp, #8
 800433c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800433e:	2003      	movs	r0, #3
 8004340:	f002 fdbf 	bl	8006ec2 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004344:	f004 fc64 	bl	8008c10 <HAL_RCC_GetSysClockFreq>
 8004348:	4602      	mov	r2, r0
 800434a:	4b15      	ldr	r3, [pc, #84]	; (80043a0 <HAL_Init+0x68>)
 800434c:	699b      	ldr	r3, [r3, #24]
 800434e:	0a1b      	lsrs	r3, r3, #8
 8004350:	f003 030f 	and.w	r3, r3, #15
 8004354:	4913      	ldr	r1, [pc, #76]	; (80043a4 <HAL_Init+0x6c>)
 8004356:	5ccb      	ldrb	r3, [r1, r3]
 8004358:	f003 031f 	and.w	r3, r3, #31
 800435c:	fa22 f303 	lsr.w	r3, r2, r3
 8004360:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004362:	4b0f      	ldr	r3, [pc, #60]	; (80043a0 <HAL_Init+0x68>)
 8004364:	699b      	ldr	r3, [r3, #24]
 8004366:	f003 030f 	and.w	r3, r3, #15
 800436a:	4a0e      	ldr	r2, [pc, #56]	; (80043a4 <HAL_Init+0x6c>)
 800436c:	5cd3      	ldrb	r3, [r2, r3]
 800436e:	f003 031f 	and.w	r3, r3, #31
 8004372:	687a      	ldr	r2, [r7, #4]
 8004374:	fa22 f303 	lsr.w	r3, r2, r3
 8004378:	4a0b      	ldr	r2, [pc, #44]	; (80043a8 <HAL_Init+0x70>)
 800437a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800437c:	4a0b      	ldr	r2, [pc, #44]	; (80043ac <HAL_Init+0x74>)
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004382:	2000      	movs	r0, #0
 8004384:	f7ff f994 	bl	80036b0 <HAL_InitTick>
 8004388:	4603      	mov	r3, r0
 800438a:	2b00      	cmp	r3, #0
 800438c:	d001      	beq.n	8004392 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800438e:	2301      	movs	r3, #1
 8004390:	e002      	b.n	8004398 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8004392:	f7ff f96f 	bl	8003674 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004396:	2300      	movs	r3, #0
}
 8004398:	4618      	mov	r0, r3
 800439a:	3708      	adds	r7, #8
 800439c:	46bd      	mov	sp, r7
 800439e:	bd80      	pop	{r7, pc}
 80043a0:	58024400 	.word	0x58024400
 80043a4:	0801ed68 	.word	0x0801ed68
 80043a8:	20000004 	.word	0x20000004
 80043ac:	20000000 	.word	0x20000000

080043b0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80043b0:	b480      	push	{r7}
 80043b2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80043b4:	4b06      	ldr	r3, [pc, #24]	; (80043d0 <HAL_IncTick+0x20>)
 80043b6:	781b      	ldrb	r3, [r3, #0]
 80043b8:	461a      	mov	r2, r3
 80043ba:	4b06      	ldr	r3, [pc, #24]	; (80043d4 <HAL_IncTick+0x24>)
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	4413      	add	r3, r2
 80043c0:	4a04      	ldr	r2, [pc, #16]	; (80043d4 <HAL_IncTick+0x24>)
 80043c2:	6013      	str	r3, [r2, #0]
}
 80043c4:	bf00      	nop
 80043c6:	46bd      	mov	sp, r7
 80043c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043cc:	4770      	bx	lr
 80043ce:	bf00      	nop
 80043d0:	2000000c 	.word	0x2000000c
 80043d4:	200009c0 	.word	0x200009c0

080043d8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80043d8:	b480      	push	{r7}
 80043da:	af00      	add	r7, sp, #0
  return uwTick;
 80043dc:	4b03      	ldr	r3, [pc, #12]	; (80043ec <HAL_GetTick+0x14>)
 80043de:	681b      	ldr	r3, [r3, #0]
}
 80043e0:	4618      	mov	r0, r3
 80043e2:	46bd      	mov	sp, r7
 80043e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e8:	4770      	bx	lr
 80043ea:	bf00      	nop
 80043ec:	200009c0 	.word	0x200009c0

080043f0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80043f0:	b580      	push	{r7, lr}
 80043f2:	b084      	sub	sp, #16
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80043f8:	f7ff ffee 	bl	80043d8 <HAL_GetTick>
 80043fc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004408:	d005      	beq.n	8004416 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800440a:	4b0a      	ldr	r3, [pc, #40]	; (8004434 <HAL_Delay+0x44>)
 800440c:	781b      	ldrb	r3, [r3, #0]
 800440e:	461a      	mov	r2, r3
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	4413      	add	r3, r2
 8004414:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004416:	bf00      	nop
 8004418:	f7ff ffde 	bl	80043d8 <HAL_GetTick>
 800441c:	4602      	mov	r2, r0
 800441e:	68bb      	ldr	r3, [r7, #8]
 8004420:	1ad3      	subs	r3, r2, r3
 8004422:	68fa      	ldr	r2, [r7, #12]
 8004424:	429a      	cmp	r2, r3
 8004426:	d8f7      	bhi.n	8004418 <HAL_Delay+0x28>
  {
  }
}
 8004428:	bf00      	nop
 800442a:	bf00      	nop
 800442c:	3710      	adds	r7, #16
 800442e:	46bd      	mov	sp, r7
 8004430:	bd80      	pop	{r7, pc}
 8004432:	bf00      	nop
 8004434:	2000000c 	.word	0x2000000c

08004438 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8004438:	b480      	push	{r7}
 800443a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 800443c:	4b03      	ldr	r3, [pc, #12]	; (800444c <HAL_GetREVID+0x14>)
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	0c1b      	lsrs	r3, r3, #16
}
 8004442:	4618      	mov	r0, r3
 8004444:	46bd      	mov	sp, r7
 8004446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800444a:	4770      	bx	lr
 800444c:	5c001000 	.word	0x5c001000

08004450 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8004450:	b480      	push	{r7}
 8004452:	b083      	sub	sp, #12
 8004454:	af00      	add	r7, sp, #0
 8004456:	6078      	str	r0, [r7, #4]
 8004458:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	689b      	ldr	r3, [r3, #8]
 800445e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8004462:	683b      	ldr	r3, [r7, #0]
 8004464:	431a      	orrs	r2, r3
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	609a      	str	r2, [r3, #8]
}
 800446a:	bf00      	nop
 800446c:	370c      	adds	r7, #12
 800446e:	46bd      	mov	sp, r7
 8004470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004474:	4770      	bx	lr

08004476 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8004476:	b480      	push	{r7}
 8004478:	b083      	sub	sp, #12
 800447a:	af00      	add	r7, sp, #0
 800447c:	6078      	str	r0, [r7, #4]
 800447e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	689b      	ldr	r3, [r3, #8]
 8004484:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8004488:	683b      	ldr	r3, [r7, #0]
 800448a:	431a      	orrs	r2, r3
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	609a      	str	r2, [r3, #8]
}
 8004490:	bf00      	nop
 8004492:	370c      	adds	r7, #12
 8004494:	46bd      	mov	sp, r7
 8004496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800449a:	4770      	bx	lr

0800449c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800449c:	b480      	push	{r7}
 800449e:	b083      	sub	sp, #12
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	689b      	ldr	r3, [r3, #8]
 80044a8:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80044ac:	4618      	mov	r0, r3
 80044ae:	370c      	adds	r7, #12
 80044b0:	46bd      	mov	sp, r7
 80044b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b6:	4770      	bx	lr

080044b8 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80044b8:	b480      	push	{r7}
 80044ba:	b087      	sub	sp, #28
 80044bc:	af00      	add	r7, sp, #0
 80044be:	60f8      	str	r0, [r7, #12]
 80044c0:	60b9      	str	r1, [r7, #8]
 80044c2:	607a      	str	r2, [r7, #4]
 80044c4:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	3360      	adds	r3, #96	; 0x60
 80044ca:	461a      	mov	r2, r3
 80044cc:	68bb      	ldr	r3, [r7, #8]
 80044ce:	009b      	lsls	r3, r3, #2
 80044d0:	4413      	add	r3, r2
 80044d2:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 80044d4:	697b      	ldr	r3, [r7, #20]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 80044e2:	683b      	ldr	r3, [r7, #0]
 80044e4:	430b      	orrs	r3, r1
 80044e6:	431a      	orrs	r2, r3
 80044e8:	697b      	ldr	r3, [r7, #20]
 80044ea:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 80044ec:	bf00      	nop
 80044ee:	371c      	adds	r7, #28
 80044f0:	46bd      	mov	sp, r7
 80044f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f6:	4770      	bx	lr

080044f8 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 80044f8:	b480      	push	{r7}
 80044fa:	b085      	sub	sp, #20
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	60f8      	str	r0, [r7, #12]
 8004500:	60b9      	str	r1, [r7, #8]
 8004502:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	691b      	ldr	r3, [r3, #16]
 8004508:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 800450c:	68bb      	ldr	r3, [r7, #8]
 800450e:	f003 031f 	and.w	r3, r3, #31
 8004512:	6879      	ldr	r1, [r7, #4]
 8004514:	fa01 f303 	lsl.w	r3, r1, r3
 8004518:	431a      	orrs	r2, r3
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	611a      	str	r2, [r3, #16]
}
 800451e:	bf00      	nop
 8004520:	3714      	adds	r7, #20
 8004522:	46bd      	mov	sp, r7
 8004524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004528:	4770      	bx	lr

0800452a <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 800452a:	b480      	push	{r7}
 800452c:	b087      	sub	sp, #28
 800452e:	af00      	add	r7, sp, #0
 8004530:	60f8      	str	r0, [r7, #12]
 8004532:	60b9      	str	r1, [r7, #8]
 8004534:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	3360      	adds	r3, #96	; 0x60
 800453a:	461a      	mov	r2, r3
 800453c:	68bb      	ldr	r3, [r7, #8]
 800453e:	009b      	lsls	r3, r3, #2
 8004540:	4413      	add	r3, r2
 8004542:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8004544:	697b      	ldr	r3, [r7, #20]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	431a      	orrs	r2, r3
 8004550:	697b      	ldr	r3, [r7, #20]
 8004552:	601a      	str	r2, [r3, #0]
  }
}
 8004554:	bf00      	nop
 8004556:	371c      	adds	r7, #28
 8004558:	46bd      	mov	sp, r7
 800455a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800455e:	4770      	bx	lr

08004560 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8004560:	b480      	push	{r7}
 8004562:	b083      	sub	sp, #12
 8004564:	af00      	add	r7, sp, #0
 8004566:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	68db      	ldr	r3, [r3, #12]
 800456c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004570:	2b00      	cmp	r3, #0
 8004572:	d101      	bne.n	8004578 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8004574:	2301      	movs	r3, #1
 8004576:	e000      	b.n	800457a <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8004578:	2300      	movs	r3, #0
}
 800457a:	4618      	mov	r0, r3
 800457c:	370c      	adds	r7, #12
 800457e:	46bd      	mov	sp, r7
 8004580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004584:	4770      	bx	lr

08004586 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8004586:	b480      	push	{r7}
 8004588:	b087      	sub	sp, #28
 800458a:	af00      	add	r7, sp, #0
 800458c:	60f8      	str	r0, [r7, #12]
 800458e:	60b9      	str	r1, [r7, #8]
 8004590:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	3330      	adds	r3, #48	; 0x30
 8004596:	461a      	mov	r2, r3
 8004598:	68bb      	ldr	r3, [r7, #8]
 800459a:	0a1b      	lsrs	r3, r3, #8
 800459c:	009b      	lsls	r3, r3, #2
 800459e:	f003 030c 	and.w	r3, r3, #12
 80045a2:	4413      	add	r3, r2
 80045a4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80045a6:	697b      	ldr	r3, [r7, #20]
 80045a8:	681a      	ldr	r2, [r3, #0]
 80045aa:	68bb      	ldr	r3, [r7, #8]
 80045ac:	f003 031f 	and.w	r3, r3, #31
 80045b0:	211f      	movs	r1, #31
 80045b2:	fa01 f303 	lsl.w	r3, r1, r3
 80045b6:	43db      	mvns	r3, r3
 80045b8:	401a      	ands	r2, r3
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	0e9b      	lsrs	r3, r3, #26
 80045be:	f003 011f 	and.w	r1, r3, #31
 80045c2:	68bb      	ldr	r3, [r7, #8]
 80045c4:	f003 031f 	and.w	r3, r3, #31
 80045c8:	fa01 f303 	lsl.w	r3, r1, r3
 80045cc:	431a      	orrs	r2, r3
 80045ce:	697b      	ldr	r3, [r7, #20]
 80045d0:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80045d2:	bf00      	nop
 80045d4:	371c      	adds	r7, #28
 80045d6:	46bd      	mov	sp, r7
 80045d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045dc:	4770      	bx	lr

080045de <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80045de:	b480      	push	{r7}
 80045e0:	b083      	sub	sp, #12
 80045e2:	af00      	add	r7, sp, #0
 80045e4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80045ea:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d101      	bne.n	80045f6 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 80045f2:	2301      	movs	r3, #1
 80045f4:	e000      	b.n	80045f8 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 80045f6:	2300      	movs	r3, #0
}
 80045f8:	4618      	mov	r0, r3
 80045fa:	370c      	adds	r7, #12
 80045fc:	46bd      	mov	sp, r7
 80045fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004602:	4770      	bx	lr

08004604 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8004604:	b480      	push	{r7}
 8004606:	b087      	sub	sp, #28
 8004608:	af00      	add	r7, sp, #0
 800460a:	60f8      	str	r0, [r7, #12]
 800460c:	60b9      	str	r1, [r7, #8]
 800460e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	3314      	adds	r3, #20
 8004614:	461a      	mov	r2, r3
 8004616:	68bb      	ldr	r3, [r7, #8]
 8004618:	0e5b      	lsrs	r3, r3, #25
 800461a:	009b      	lsls	r3, r3, #2
 800461c:	f003 0304 	and.w	r3, r3, #4
 8004620:	4413      	add	r3, r2
 8004622:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004624:	697b      	ldr	r3, [r7, #20]
 8004626:	681a      	ldr	r2, [r3, #0]
 8004628:	68bb      	ldr	r3, [r7, #8]
 800462a:	0d1b      	lsrs	r3, r3, #20
 800462c:	f003 031f 	and.w	r3, r3, #31
 8004630:	2107      	movs	r1, #7
 8004632:	fa01 f303 	lsl.w	r3, r1, r3
 8004636:	43db      	mvns	r3, r3
 8004638:	401a      	ands	r2, r3
 800463a:	68bb      	ldr	r3, [r7, #8]
 800463c:	0d1b      	lsrs	r3, r3, #20
 800463e:	f003 031f 	and.w	r3, r3, #31
 8004642:	6879      	ldr	r1, [r7, #4]
 8004644:	fa01 f303 	lsl.w	r3, r1, r3
 8004648:	431a      	orrs	r2, r3
 800464a:	697b      	ldr	r3, [r7, #20]
 800464c:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800464e:	bf00      	nop
 8004650:	371c      	adds	r7, #28
 8004652:	46bd      	mov	sp, r7
 8004654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004658:	4770      	bx	lr
	...

0800465c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800465c:	b480      	push	{r7}
 800465e:	b085      	sub	sp, #20
 8004660:	af00      	add	r7, sp, #0
 8004662:	60f8      	str	r0, [r7, #12]
 8004664:	60b9      	str	r1, [r7, #8]
 8004666:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 800466e:	68bb      	ldr	r3, [r7, #8]
 8004670:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004674:	43db      	mvns	r3, r3
 8004676:	401a      	ands	r2, r3
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	f003 0318 	and.w	r3, r3, #24
 800467e:	4908      	ldr	r1, [pc, #32]	; (80046a0 <LL_ADC_SetChannelSingleDiff+0x44>)
 8004680:	40d9      	lsrs	r1, r3
 8004682:	68bb      	ldr	r3, [r7, #8]
 8004684:	400b      	ands	r3, r1
 8004686:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800468a:	431a      	orrs	r2, r3
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif
}
 8004692:	bf00      	nop
 8004694:	3714      	adds	r7, #20
 8004696:	46bd      	mov	sp, r7
 8004698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800469c:	4770      	bx	lr
 800469e:	bf00      	nop
 80046a0:	000fffff 	.word	0x000fffff

080046a4 <LL_ADC_SetAnalogWDMonitChannels>:
  *         (1) On STM32H7, parameter available only on ADC instance: ADC3.\n
  *         (2) On STM32H7, parameter available only on ADC instance: ADC2.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetAnalogWDMonitChannels(ADC_TypeDef *ADCx, uint32_t AWDy, uint32_t AWDChannelGroup)
{
 80046a4:	b480      	push	{r7}
 80046a6:	b087      	sub	sp, #28
 80046a8:	af00      	add	r7, sp, #0
 80046aa:	60f8      	str	r0, [r7, #12]
 80046ac:	60b9      	str	r1, [r7, #8]
 80046ae:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "AWDChannelGroup" with bits position  */
  /* in register and register position depending on parameter "AWDy".         */
  /* Parameters "AWDChannelGroup" and "AWDy" are used with masks because      */
  /* containing other bits reserved for other purpose.                        */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->CFGR, ((AWDy & ADC_AWD_CRX_REGOFFSET_MASK) >> ADC_AWD_CRX_REGOFFSET_POS)
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	330c      	adds	r3, #12
 80046b4:	4618      	mov	r0, r3
 80046b6:	68bb      	ldr	r3, [r7, #8]
 80046b8:	0d1b      	lsrs	r3, r3, #20
 80046ba:	f003 0103 	and.w	r1, r3, #3
 80046be:	68bb      	ldr	r3, [r7, #8]
 80046c0:	f003 0201 	and.w	r2, r3, #1
 80046c4:	4613      	mov	r3, r2
 80046c6:	00db      	lsls	r3, r3, #3
 80046c8:	4413      	add	r3, r2
 80046ca:	009b      	lsls	r3, r3, #2
 80046cc:	440b      	add	r3, r1
 80046ce:	009b      	lsls	r3, r3, #2
 80046d0:	4403      	add	r3, r0
 80046d2:	617b      	str	r3, [r7, #20]
                                                      + ((AWDy & ADC_AWD_CR12_REGOFFSETGAP_MASK) * ADC_AWD_CR12_REGOFFSETGAP_VAL));

  MODIFY_REG(*preg,
 80046d4:	697b      	ldr	r3, [r7, #20]
 80046d6:	681a      	ldr	r2, [r3, #0]
 80046d8:	68b9      	ldr	r1, [r7, #8]
 80046da:	4b08      	ldr	r3, [pc, #32]	; (80046fc <LL_ADC_SetAnalogWDMonitChannels+0x58>)
 80046dc:	400b      	ands	r3, r1
 80046de:	43db      	mvns	r3, r3
 80046e0:	401a      	ands	r2, r3
 80046e2:	6879      	ldr	r1, [r7, #4]
 80046e4:	68bb      	ldr	r3, [r7, #8]
 80046e6:	400b      	ands	r3, r1
 80046e8:	431a      	orrs	r2, r3
 80046ea:	697b      	ldr	r3, [r7, #20]
 80046ec:	601a      	str	r2, [r3, #0]
             (AWDy & ADC_AWD_CR_ALL_CHANNEL_MASK),
             AWDChannelGroup & AWDy);
}
 80046ee:	bf00      	nop
 80046f0:	371c      	adds	r7, #28
 80046f2:	46bd      	mov	sp, r7
 80046f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f8:	4770      	bx	lr
 80046fa:	bf00      	nop
 80046fc:	7dcfffff 	.word	0x7dcfffff

08004700 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8004700:	b480      	push	{r7}
 8004702:	b083      	sub	sp, #12
 8004704:	af00      	add	r7, sp, #0
 8004706:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	689b      	ldr	r3, [r3, #8]
 800470c:	f003 031f 	and.w	r3, r3, #31
}
 8004710:	4618      	mov	r0, r3
 8004712:	370c      	adds	r7, #12
 8004714:	46bd      	mov	sp, r7
 8004716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800471a:	4770      	bx	lr

0800471c <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800471c:	b480      	push	{r7}
 800471e:	b083      	sub	sp, #12
 8004720:	af00      	add	r7, sp, #0
 8004722:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	689b      	ldr	r3, [r3, #8]
 8004728:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
}
 800472c:	4618      	mov	r0, r3
 800472e:	370c      	adds	r7, #12
 8004730:	46bd      	mov	sp, r7
 8004732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004736:	4770      	bx	lr

08004738 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8004738:	b480      	push	{r7}
 800473a:	b083      	sub	sp, #12
 800473c:	af00      	add	r7, sp, #0
 800473e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	689a      	ldr	r2, [r3, #8]
 8004744:	4b04      	ldr	r3, [pc, #16]	; (8004758 <LL_ADC_DisableDeepPowerDown+0x20>)
 8004746:	4013      	ands	r3, r2
 8004748:	687a      	ldr	r2, [r7, #4]
 800474a:	6093      	str	r3, [r2, #8]
}
 800474c:	bf00      	nop
 800474e:	370c      	adds	r7, #12
 8004750:	46bd      	mov	sp, r7
 8004752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004756:	4770      	bx	lr
 8004758:	5fffffc0 	.word	0x5fffffc0

0800475c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 800475c:	b480      	push	{r7}
 800475e:	b083      	sub	sp, #12
 8004760:	af00      	add	r7, sp, #0
 8004762:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	689b      	ldr	r3, [r3, #8]
 8004768:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800476c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004770:	d101      	bne.n	8004776 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8004772:	2301      	movs	r3, #1
 8004774:	e000      	b.n	8004778 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8004776:	2300      	movs	r3, #0
}
 8004778:	4618      	mov	r0, r3
 800477a:	370c      	adds	r7, #12
 800477c:	46bd      	mov	sp, r7
 800477e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004782:	4770      	bx	lr

08004784 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8004784:	b480      	push	{r7}
 8004786:	b083      	sub	sp, #12
 8004788:	af00      	add	r7, sp, #0
 800478a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	689a      	ldr	r2, [r3, #8]
 8004790:	4b05      	ldr	r3, [pc, #20]	; (80047a8 <LL_ADC_EnableInternalRegulator+0x24>)
 8004792:	4013      	ands	r3, r2
 8004794:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800479c:	bf00      	nop
 800479e:	370c      	adds	r7, #12
 80047a0:	46bd      	mov	sp, r7
 80047a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a6:	4770      	bx	lr
 80047a8:	6fffffc0 	.word	0x6fffffc0

080047ac <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80047ac:	b480      	push	{r7}
 80047ae:	b083      	sub	sp, #12
 80047b0:	af00      	add	r7, sp, #0
 80047b2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	689b      	ldr	r3, [r3, #8]
 80047b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047bc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80047c0:	d101      	bne.n	80047c6 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80047c2:	2301      	movs	r3, #1
 80047c4:	e000      	b.n	80047c8 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80047c6:	2300      	movs	r3, #0
}
 80047c8:	4618      	mov	r0, r3
 80047ca:	370c      	adds	r7, #12
 80047cc:	46bd      	mov	sp, r7
 80047ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d2:	4770      	bx	lr

080047d4 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80047d4:	b480      	push	{r7}
 80047d6:	b083      	sub	sp, #12
 80047d8:	af00      	add	r7, sp, #0
 80047da:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	689a      	ldr	r2, [r3, #8]
 80047e0:	4b05      	ldr	r3, [pc, #20]	; (80047f8 <LL_ADC_Enable+0x24>)
 80047e2:	4013      	ands	r3, r2
 80047e4:	f043 0201 	orr.w	r2, r3, #1
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80047ec:	bf00      	nop
 80047ee:	370c      	adds	r7, #12
 80047f0:	46bd      	mov	sp, r7
 80047f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f6:	4770      	bx	lr
 80047f8:	7fffffc0 	.word	0x7fffffc0

080047fc <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 80047fc:	b480      	push	{r7}
 80047fe:	b083      	sub	sp, #12
 8004800:	af00      	add	r7, sp, #0
 8004802:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	689a      	ldr	r2, [r3, #8]
 8004808:	4b05      	ldr	r3, [pc, #20]	; (8004820 <LL_ADC_Disable+0x24>)
 800480a:	4013      	ands	r3, r2
 800480c:	f043 0202 	orr.w	r2, r3, #2
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8004814:	bf00      	nop
 8004816:	370c      	adds	r7, #12
 8004818:	46bd      	mov	sp, r7
 800481a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800481e:	4770      	bx	lr
 8004820:	7fffffc0 	.word	0x7fffffc0

08004824 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8004824:	b480      	push	{r7}
 8004826:	b083      	sub	sp, #12
 8004828:	af00      	add	r7, sp, #0
 800482a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	689b      	ldr	r3, [r3, #8]
 8004830:	f003 0301 	and.w	r3, r3, #1
 8004834:	2b01      	cmp	r3, #1
 8004836:	d101      	bne.n	800483c <LL_ADC_IsEnabled+0x18>
 8004838:	2301      	movs	r3, #1
 800483a:	e000      	b.n	800483e <LL_ADC_IsEnabled+0x1a>
 800483c:	2300      	movs	r3, #0
}
 800483e:	4618      	mov	r0, r3
 8004840:	370c      	adds	r7, #12
 8004842:	46bd      	mov	sp, r7
 8004844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004848:	4770      	bx	lr

0800484a <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 800484a:	b480      	push	{r7}
 800484c:	b083      	sub	sp, #12
 800484e:	af00      	add	r7, sp, #0
 8004850:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	689b      	ldr	r3, [r3, #8]
 8004856:	f003 0302 	and.w	r3, r3, #2
 800485a:	2b02      	cmp	r3, #2
 800485c:	d101      	bne.n	8004862 <LL_ADC_IsDisableOngoing+0x18>
 800485e:	2301      	movs	r3, #1
 8004860:	e000      	b.n	8004864 <LL_ADC_IsDisableOngoing+0x1a>
 8004862:	2300      	movs	r3, #0
}
 8004864:	4618      	mov	r0, r3
 8004866:	370c      	adds	r7, #12
 8004868:	46bd      	mov	sp, r7
 800486a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800486e:	4770      	bx	lr

08004870 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8004870:	b480      	push	{r7}
 8004872:	b083      	sub	sp, #12
 8004874:	af00      	add	r7, sp, #0
 8004876:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	689a      	ldr	r2, [r3, #8]
 800487c:	4b05      	ldr	r3, [pc, #20]	; (8004894 <LL_ADC_REG_StartConversion+0x24>)
 800487e:	4013      	ands	r3, r2
 8004880:	f043 0204 	orr.w	r2, r3, #4
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8004888:	bf00      	nop
 800488a:	370c      	adds	r7, #12
 800488c:	46bd      	mov	sp, r7
 800488e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004892:	4770      	bx	lr
 8004894:	7fffffc0 	.word	0x7fffffc0

08004898 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8004898:	b480      	push	{r7}
 800489a:	b083      	sub	sp, #12
 800489c:	af00      	add	r7, sp, #0
 800489e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	689a      	ldr	r2, [r3, #8]
 80048a4:	4b05      	ldr	r3, [pc, #20]	; (80048bc <LL_ADC_REG_StopConversion+0x24>)
 80048a6:	4013      	ands	r3, r2
 80048a8:	f043 0210 	orr.w	r2, r3, #16
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 80048b0:	bf00      	nop
 80048b2:	370c      	adds	r7, #12
 80048b4:	46bd      	mov	sp, r7
 80048b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ba:	4770      	bx	lr
 80048bc:	7fffffc0 	.word	0x7fffffc0

080048c0 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80048c0:	b480      	push	{r7}
 80048c2:	b083      	sub	sp, #12
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	689b      	ldr	r3, [r3, #8]
 80048cc:	f003 0304 	and.w	r3, r3, #4
 80048d0:	2b04      	cmp	r3, #4
 80048d2:	d101      	bne.n	80048d8 <LL_ADC_REG_IsConversionOngoing+0x18>
 80048d4:	2301      	movs	r3, #1
 80048d6:	e000      	b.n	80048da <LL_ADC_REG_IsConversionOngoing+0x1a>
 80048d8:	2300      	movs	r3, #0
}
 80048da:	4618      	mov	r0, r3
 80048dc:	370c      	adds	r7, #12
 80048de:	46bd      	mov	sp, r7
 80048e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e4:	4770      	bx	lr
	...

080048e8 <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 80048e8:	b480      	push	{r7}
 80048ea:	b083      	sub	sp, #12
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	689a      	ldr	r2, [r3, #8]
 80048f4:	4b05      	ldr	r3, [pc, #20]	; (800490c <LL_ADC_INJ_StopConversion+0x24>)
 80048f6:	4013      	ands	r3, r2
 80048f8:	f043 0220 	orr.w	r2, r3, #32
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8004900:	bf00      	nop
 8004902:	370c      	adds	r7, #12
 8004904:	46bd      	mov	sp, r7
 8004906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800490a:	4770      	bx	lr
 800490c:	7fffffc0 	.word	0x7fffffc0

08004910 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8004910:	b480      	push	{r7}
 8004912:	b083      	sub	sp, #12
 8004914:	af00      	add	r7, sp, #0
 8004916:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	689b      	ldr	r3, [r3, #8]
 800491c:	f003 0308 	and.w	r3, r3, #8
 8004920:	2b08      	cmp	r3, #8
 8004922:	d101      	bne.n	8004928 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8004924:	2301      	movs	r3, #1
 8004926:	e000      	b.n	800492a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8004928:	2300      	movs	r3, #0
}
 800492a:	4618      	mov	r0, r3
 800492c:	370c      	adds	r7, #12
 800492e:	46bd      	mov	sp, r7
 8004930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004934:	4770      	bx	lr

08004936 <LL_ADC_ClearFlag_AWD1>:
  * @rmtoll ISR      AWD1           LL_ADC_ClearFlag_AWD1
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_ClearFlag_AWD1(ADC_TypeDef *ADCx)
{
 8004936:	b480      	push	{r7}
 8004938:	b083      	sub	sp, #12
 800493a:	af00      	add	r7, sp, #0
 800493c:	6078      	str	r0, [r7, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_AWD1);
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	2280      	movs	r2, #128	; 0x80
 8004942:	601a      	str	r2, [r3, #0]
}
 8004944:	bf00      	nop
 8004946:	370c      	adds	r7, #12
 8004948:	46bd      	mov	sp, r7
 800494a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800494e:	4770      	bx	lr

08004950 <LL_ADC_ClearFlag_AWD2>:
  * @rmtoll ISR      AWD2           LL_ADC_ClearFlag_AWD2
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_ClearFlag_AWD2(ADC_TypeDef *ADCx)
{
 8004950:	b480      	push	{r7}
 8004952:	b083      	sub	sp, #12
 8004954:	af00      	add	r7, sp, #0
 8004956:	6078      	str	r0, [r7, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_AWD2);
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800495e:	601a      	str	r2, [r3, #0]
}
 8004960:	bf00      	nop
 8004962:	370c      	adds	r7, #12
 8004964:	46bd      	mov	sp, r7
 8004966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800496a:	4770      	bx	lr

0800496c <LL_ADC_ClearFlag_AWD3>:
  * @rmtoll ISR      AWD3           LL_ADC_ClearFlag_AWD3
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_ClearFlag_AWD3(ADC_TypeDef *ADCx)
{
 800496c:	b480      	push	{r7}
 800496e:	b083      	sub	sp, #12
 8004970:	af00      	add	r7, sp, #0
 8004972:	6078      	str	r0, [r7, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_AWD3);
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	f44f 7200 	mov.w	r2, #512	; 0x200
 800497a:	601a      	str	r2, [r3, #0]
}
 800497c:	bf00      	nop
 800497e:	370c      	adds	r7, #12
 8004980:	46bd      	mov	sp, r7
 8004982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004986:	4770      	bx	lr

08004988 <LL_ADC_EnableIT_AWD1>:
  * @rmtoll IER      AWD1IE         LL_ADC_EnableIT_AWD1
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableIT_AWD1(ADC_TypeDef *ADCx)
{
 8004988:	b480      	push	{r7}
 800498a:	b083      	sub	sp, #12
 800498c:	af00      	add	r7, sp, #0
 800498e:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->IER, LL_ADC_IT_AWD1);
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	685b      	ldr	r3, [r3, #4]
 8004994:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	605a      	str	r2, [r3, #4]
}
 800499c:	bf00      	nop
 800499e:	370c      	adds	r7, #12
 80049a0:	46bd      	mov	sp, r7
 80049a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a6:	4770      	bx	lr

080049a8 <LL_ADC_EnableIT_AWD2>:
  * @rmtoll IER      AWD2IE         LL_ADC_EnableIT_AWD2
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableIT_AWD2(ADC_TypeDef *ADCx)
{
 80049a8:	b480      	push	{r7}
 80049aa:	b083      	sub	sp, #12
 80049ac:	af00      	add	r7, sp, #0
 80049ae:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->IER, LL_ADC_IT_AWD2);
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	685b      	ldr	r3, [r3, #4]
 80049b4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	605a      	str	r2, [r3, #4]
}
 80049bc:	bf00      	nop
 80049be:	370c      	adds	r7, #12
 80049c0:	46bd      	mov	sp, r7
 80049c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c6:	4770      	bx	lr

080049c8 <LL_ADC_EnableIT_AWD3>:
  * @rmtoll IER      AWD3IE         LL_ADC_EnableIT_AWD3
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableIT_AWD3(ADC_TypeDef *ADCx)
{
 80049c8:	b480      	push	{r7}
 80049ca:	b083      	sub	sp, #12
 80049cc:	af00      	add	r7, sp, #0
 80049ce:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->IER, LL_ADC_IT_AWD3);
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	685b      	ldr	r3, [r3, #4]
 80049d4:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	605a      	str	r2, [r3, #4]
}
 80049dc:	bf00      	nop
 80049de:	370c      	adds	r7, #12
 80049e0:	46bd      	mov	sp, r7
 80049e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e6:	4770      	bx	lr

080049e8 <LL_ADC_DisableIT_AWD1>:
  * @rmtoll IER      AWD1IE         LL_ADC_DisableIT_AWD1
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_AWD1(ADC_TypeDef *ADCx)
{
 80049e8:	b480      	push	{r7}
 80049ea:	b083      	sub	sp, #12
 80049ec:	af00      	add	r7, sp, #0
 80049ee:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_AWD1);
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	685b      	ldr	r3, [r3, #4]
 80049f4:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	605a      	str	r2, [r3, #4]
}
 80049fc:	bf00      	nop
 80049fe:	370c      	adds	r7, #12
 8004a00:	46bd      	mov	sp, r7
 8004a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a06:	4770      	bx	lr

08004a08 <LL_ADC_DisableIT_AWD2>:
  * @rmtoll IER      AWD2IE         LL_ADC_DisableIT_AWD2
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_AWD2(ADC_TypeDef *ADCx)
{
 8004a08:	b480      	push	{r7}
 8004a0a:	b083      	sub	sp, #12
 8004a0c:	af00      	add	r7, sp, #0
 8004a0e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_AWD2);
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	685b      	ldr	r3, [r3, #4]
 8004a14:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	605a      	str	r2, [r3, #4]
}
 8004a1c:	bf00      	nop
 8004a1e:	370c      	adds	r7, #12
 8004a20:	46bd      	mov	sp, r7
 8004a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a26:	4770      	bx	lr

08004a28 <LL_ADC_DisableIT_AWD3>:
  * @rmtoll IER      AWD3IE         LL_ADC_DisableIT_AWD3
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_AWD3(ADC_TypeDef *ADCx)
{
 8004a28:	b480      	push	{r7}
 8004a2a:	b083      	sub	sp, #12
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_AWD3);
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	685b      	ldr	r3, [r3, #4]
 8004a34:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	605a      	str	r2, [r3, #4]
}
 8004a3c:	bf00      	nop
 8004a3e:	370c      	adds	r7, #12
 8004a40:	46bd      	mov	sp, r7
 8004a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a46:	4770      	bx	lr

08004a48 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8004a48:	b590      	push	{r4, r7, lr}
 8004a4a:	b089      	sub	sp, #36	; 0x24
 8004a4c:	af00      	add	r7, sp, #0
 8004a4e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004a50:	2300      	movs	r3, #0
 8004a52:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8004a54:	2300      	movs	r3, #0
 8004a56:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d101      	bne.n	8004a62 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8004a5e:	2301      	movs	r3, #1
 8004a60:	e18f      	b.n	8004d82 <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	68db      	ldr	r3, [r3, #12]
 8004a66:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d109      	bne.n	8004a84 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004a70:	6878      	ldr	r0, [r7, #4]
 8004a72:	f7fb ff15 	bl	80008a0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	2200      	movs	r2, #0
 8004a7a:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	2200      	movs	r2, #0
 8004a80:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	4618      	mov	r0, r3
 8004a8a:	f7ff fe67 	bl	800475c <LL_ADC_IsDeepPowerDownEnabled>
 8004a8e:	4603      	mov	r3, r0
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d004      	beq.n	8004a9e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	4618      	mov	r0, r3
 8004a9a:	f7ff fe4d 	bl	8004738 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	4618      	mov	r0, r3
 8004aa4:	f7ff fe82 	bl	80047ac <LL_ADC_IsInternalRegulatorEnabled>
 8004aa8:	4603      	mov	r3, r0
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d114      	bne.n	8004ad8 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	4618      	mov	r0, r3
 8004ab4:	f7ff fe66 	bl	8004784 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004ab8:	4b87      	ldr	r3, [pc, #540]	; (8004cd8 <HAL_ADC_Init+0x290>)
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	099b      	lsrs	r3, r3, #6
 8004abe:	4a87      	ldr	r2, [pc, #540]	; (8004cdc <HAL_ADC_Init+0x294>)
 8004ac0:	fba2 2303 	umull	r2, r3, r2, r3
 8004ac4:	099b      	lsrs	r3, r3, #6
 8004ac6:	3301      	adds	r3, #1
 8004ac8:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8004aca:	e002      	b.n	8004ad2 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8004acc:	68bb      	ldr	r3, [r7, #8]
 8004ace:	3b01      	subs	r3, #1
 8004ad0:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8004ad2:	68bb      	ldr	r3, [r7, #8]
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d1f9      	bne.n	8004acc <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	4618      	mov	r0, r3
 8004ade:	f7ff fe65 	bl	80047ac <LL_ADC_IsInternalRegulatorEnabled>
 8004ae2:	4603      	mov	r3, r0
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d10d      	bne.n	8004b04 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004aec:	f043 0210 	orr.w	r2, r3, #16
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004af8:	f043 0201 	orr.w	r2, r3, #1
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8004b00:	2301      	movs	r3, #1
 8004b02:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	4618      	mov	r0, r3
 8004b0a:	f7ff fed9 	bl	80048c0 <LL_ADC_REG_IsConversionOngoing>
 8004b0e:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b14:	f003 0310 	and.w	r3, r3, #16
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	f040 8129 	bne.w	8004d70 <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8004b1e:	697b      	ldr	r3, [r7, #20]
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	f040 8125 	bne.w	8004d70 <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b2a:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8004b2e:	f043 0202 	orr.w	r2, r3, #2
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	4618      	mov	r0, r3
 8004b3c:	f7ff fe72 	bl	8004824 <LL_ADC_IsEnabled>
 8004b40:	4603      	mov	r3, r0
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d136      	bne.n	8004bb4 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	4a65      	ldr	r2, [pc, #404]	; (8004ce0 <HAL_ADC_Init+0x298>)
 8004b4c:	4293      	cmp	r3, r2
 8004b4e:	d004      	beq.n	8004b5a <HAL_ADC_Init+0x112>
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	4a63      	ldr	r2, [pc, #396]	; (8004ce4 <HAL_ADC_Init+0x29c>)
 8004b56:	4293      	cmp	r3, r2
 8004b58:	d10e      	bne.n	8004b78 <HAL_ADC_Init+0x130>
 8004b5a:	4861      	ldr	r0, [pc, #388]	; (8004ce0 <HAL_ADC_Init+0x298>)
 8004b5c:	f7ff fe62 	bl	8004824 <LL_ADC_IsEnabled>
 8004b60:	4604      	mov	r4, r0
 8004b62:	4860      	ldr	r0, [pc, #384]	; (8004ce4 <HAL_ADC_Init+0x29c>)
 8004b64:	f7ff fe5e 	bl	8004824 <LL_ADC_IsEnabled>
 8004b68:	4603      	mov	r3, r0
 8004b6a:	4323      	orrs	r3, r4
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	bf0c      	ite	eq
 8004b70:	2301      	moveq	r3, #1
 8004b72:	2300      	movne	r3, #0
 8004b74:	b2db      	uxtb	r3, r3
 8004b76:	e008      	b.n	8004b8a <HAL_ADC_Init+0x142>
 8004b78:	485b      	ldr	r0, [pc, #364]	; (8004ce8 <HAL_ADC_Init+0x2a0>)
 8004b7a:	f7ff fe53 	bl	8004824 <LL_ADC_IsEnabled>
 8004b7e:	4603      	mov	r3, r0
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	bf0c      	ite	eq
 8004b84:	2301      	moveq	r3, #1
 8004b86:	2300      	movne	r3, #0
 8004b88:	b2db      	uxtb	r3, r3
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d012      	beq.n	8004bb4 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	4a53      	ldr	r2, [pc, #332]	; (8004ce0 <HAL_ADC_Init+0x298>)
 8004b94:	4293      	cmp	r3, r2
 8004b96:	d004      	beq.n	8004ba2 <HAL_ADC_Init+0x15a>
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	4a51      	ldr	r2, [pc, #324]	; (8004ce4 <HAL_ADC_Init+0x29c>)
 8004b9e:	4293      	cmp	r3, r2
 8004ba0:	d101      	bne.n	8004ba6 <HAL_ADC_Init+0x15e>
 8004ba2:	4a52      	ldr	r2, [pc, #328]	; (8004cec <HAL_ADC_Init+0x2a4>)
 8004ba4:	e000      	b.n	8004ba8 <HAL_ADC_Init+0x160>
 8004ba6:	4a52      	ldr	r2, [pc, #328]	; (8004cf0 <HAL_ADC_Init+0x2a8>)
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	685b      	ldr	r3, [r3, #4]
 8004bac:	4619      	mov	r1, r3
 8004bae:	4610      	mov	r0, r2
 8004bb0:	f7ff fc4e 	bl	8004450 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8004bb4:	f7ff fc40 	bl	8004438 <HAL_GetREVID>
 8004bb8:	4603      	mov	r3, r0
 8004bba:	f241 0203 	movw	r2, #4099	; 0x1003
 8004bbe:	4293      	cmp	r3, r2
 8004bc0:	d914      	bls.n	8004bec <HAL_ADC_Init+0x1a4>
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	689b      	ldr	r3, [r3, #8]
 8004bc6:	2b10      	cmp	r3, #16
 8004bc8:	d110      	bne.n	8004bec <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	7d5b      	ldrb	r3, [r3, #21]
 8004bce:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8004bd4:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8004bda:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	7f1b      	ldrb	r3, [r3, #28]
 8004be0:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8004be2:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8004be4:	f043 030c 	orr.w	r3, r3, #12
 8004be8:	61bb      	str	r3, [r7, #24]
 8004bea:	e00d      	b.n	8004c08 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	7d5b      	ldrb	r3, [r3, #21]
 8004bf0:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8004bf6:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8004bfc:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	7f1b      	ldrb	r3, [r3, #28]
 8004c02:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8004c04:	4313      	orrs	r3, r2
 8004c06:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	7f1b      	ldrb	r3, [r3, #28]
 8004c0c:	2b01      	cmp	r3, #1
 8004c0e:	d106      	bne.n	8004c1e <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	6a1b      	ldr	r3, [r3, #32]
 8004c14:	3b01      	subs	r3, #1
 8004c16:	045b      	lsls	r3, r3, #17
 8004c18:	69ba      	ldr	r2, [r7, #24]
 8004c1a:	4313      	orrs	r3, r2
 8004c1c:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d009      	beq.n	8004c3a <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c2a:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c32:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004c34:	69ba      	ldr	r2, [r7, #24]
 8004c36:	4313      	orrs	r3, r2
 8004c38:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	68da      	ldr	r2, [r3, #12]
 8004c40:	4b2c      	ldr	r3, [pc, #176]	; (8004cf4 <HAL_ADC_Init+0x2ac>)
 8004c42:	4013      	ands	r3, r2
 8004c44:	687a      	ldr	r2, [r7, #4]
 8004c46:	6812      	ldr	r2, [r2, #0]
 8004c48:	69b9      	ldr	r1, [r7, #24]
 8004c4a:	430b      	orrs	r3, r1
 8004c4c:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	4618      	mov	r0, r3
 8004c54:	f7ff fe34 	bl	80048c0 <LL_ADC_REG_IsConversionOngoing>
 8004c58:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	4618      	mov	r0, r3
 8004c60:	f7ff fe56 	bl	8004910 <LL_ADC_INJ_IsConversionOngoing>
 8004c64:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004c66:	693b      	ldr	r3, [r7, #16]
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d15f      	bne.n	8004d2c <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d15c      	bne.n	8004d2c <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	7d1b      	ldrb	r3, [r3, #20]
 8004c76:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 8004c7c:	4313      	orrs	r3, r2
 8004c7e:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	68da      	ldr	r2, [r3, #12]
 8004c86:	4b1c      	ldr	r3, [pc, #112]	; (8004cf8 <HAL_ADC_Init+0x2b0>)
 8004c88:	4013      	ands	r3, r2
 8004c8a:	687a      	ldr	r2, [r7, #4]
 8004c8c:	6812      	ldr	r2, [r2, #0]
 8004c8e:	69b9      	ldr	r1, [r7, #24]
 8004c90:	430b      	orrs	r3, r1
 8004c92:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004c9a:	2b01      	cmp	r3, #1
 8004c9c:	d130      	bne.n	8004d00 <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ca2:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	691a      	ldr	r2, [r3, #16]
 8004caa:	4b14      	ldr	r3, [pc, #80]	; (8004cfc <HAL_ADC_Init+0x2b4>)
 8004cac:	4013      	ands	r3, r2
 8004cae:	687a      	ldr	r2, [r7, #4]
 8004cb0:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004cb2:	3a01      	subs	r2, #1
 8004cb4:	0411      	lsls	r1, r2, #16
 8004cb6:	687a      	ldr	r2, [r7, #4]
 8004cb8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004cba:	4311      	orrs	r1, r2
 8004cbc:	687a      	ldr	r2, [r7, #4]
 8004cbe:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8004cc0:	4311      	orrs	r1, r2
 8004cc2:	687a      	ldr	r2, [r7, #4]
 8004cc4:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8004cc6:	430a      	orrs	r2, r1
 8004cc8:	431a      	orrs	r2, r3
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	f042 0201 	orr.w	r2, r2, #1
 8004cd2:	611a      	str	r2, [r3, #16]
 8004cd4:	e01c      	b.n	8004d10 <HAL_ADC_Init+0x2c8>
 8004cd6:	bf00      	nop
 8004cd8:	20000000 	.word	0x20000000
 8004cdc:	053e2d63 	.word	0x053e2d63
 8004ce0:	40022000 	.word	0x40022000
 8004ce4:	40022100 	.word	0x40022100
 8004ce8:	58026000 	.word	0x58026000
 8004cec:	40022300 	.word	0x40022300
 8004cf0:	58026300 	.word	0x58026300
 8004cf4:	fff0c003 	.word	0xfff0c003
 8004cf8:	ffffbffc 	.word	0xffffbffc
 8004cfc:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	691a      	ldr	r2, [r3, #16]
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	f022 0201 	bic.w	r2, r2, #1
 8004d0e:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	691b      	ldr	r3, [r3, #16]
 8004d16:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	430a      	orrs	r2, r1
 8004d24:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8004d26:	6878      	ldr	r0, [r7, #4]
 8004d28:	f001 fdde 	bl	80068e8 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	68db      	ldr	r3, [r3, #12]
 8004d30:	2b01      	cmp	r3, #1
 8004d32:	d10c      	bne.n	8004d4e <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d3a:	f023 010f 	bic.w	r1, r3, #15
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	699b      	ldr	r3, [r3, #24]
 8004d42:	1e5a      	subs	r2, r3, #1
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	430a      	orrs	r2, r1
 8004d4a:	631a      	str	r2, [r3, #48]	; 0x30
 8004d4c:	e007      	b.n	8004d5e <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	f022 020f 	bic.w	r2, r2, #15
 8004d5c:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d62:	f023 0303 	bic.w	r3, r3, #3
 8004d66:	f043 0201 	orr.w	r2, r3, #1
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	655a      	str	r2, [r3, #84]	; 0x54
 8004d6e:	e007      	b.n	8004d80 <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d74:	f043 0210 	orr.w	r2, r3, #16
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8004d7c:	2301      	movs	r3, #1
 8004d7e:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8004d80:	7ffb      	ldrb	r3, [r7, #31]
}
 8004d82:	4618      	mov	r0, r3
 8004d84:	3724      	adds	r7, #36	; 0x24
 8004d86:	46bd      	mov	sp, r7
 8004d88:	bd90      	pop	{r4, r7, pc}
 8004d8a:	bf00      	nop

08004d8c <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8004d8c:	b580      	push	{r7, lr}
 8004d8e:	b086      	sub	sp, #24
 8004d90:	af00      	add	r7, sp, #0
 8004d92:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	4a5c      	ldr	r2, [pc, #368]	; (8004f0c <HAL_ADC_Start+0x180>)
 8004d9a:	4293      	cmp	r3, r2
 8004d9c:	d004      	beq.n	8004da8 <HAL_ADC_Start+0x1c>
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	4a5b      	ldr	r2, [pc, #364]	; (8004f10 <HAL_ADC_Start+0x184>)
 8004da4:	4293      	cmp	r3, r2
 8004da6:	d101      	bne.n	8004dac <HAL_ADC_Start+0x20>
 8004da8:	4b5a      	ldr	r3, [pc, #360]	; (8004f14 <HAL_ADC_Start+0x188>)
 8004daa:	e000      	b.n	8004dae <HAL_ADC_Start+0x22>
 8004dac:	4b5a      	ldr	r3, [pc, #360]	; (8004f18 <HAL_ADC_Start+0x18c>)
 8004dae:	4618      	mov	r0, r3
 8004db0:	f7ff fca6 	bl	8004700 <LL_ADC_GetMultimode>
 8004db4:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	4618      	mov	r0, r3
 8004dbc:	f7ff fd80 	bl	80048c0 <LL_ADC_REG_IsConversionOngoing>
 8004dc0:	4603      	mov	r3, r0
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	f040 809a 	bne.w	8004efc <HAL_ADC_Start+0x170>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004dce:	2b01      	cmp	r3, #1
 8004dd0:	d101      	bne.n	8004dd6 <HAL_ADC_Start+0x4a>
 8004dd2:	2302      	movs	r3, #2
 8004dd4:	e095      	b.n	8004f02 <HAL_ADC_Start+0x176>
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	2201      	movs	r2, #1
 8004dda:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8004dde:	6878      	ldr	r0, [r7, #4]
 8004de0:	f001 fc98 	bl	8006714 <ADC_Enable>
 8004de4:	4603      	mov	r3, r0
 8004de6:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8004de8:	7dfb      	ldrb	r3, [r7, #23]
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	f040 8081 	bne.w	8004ef2 <HAL_ADC_Start+0x166>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004df4:	4b49      	ldr	r3, [pc, #292]	; (8004f1c <HAL_ADC_Start+0x190>)
 8004df6:	4013      	ands	r3, r2
 8004df8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	4a42      	ldr	r2, [pc, #264]	; (8004f10 <HAL_ADC_Start+0x184>)
 8004e06:	4293      	cmp	r3, r2
 8004e08:	d002      	beq.n	8004e10 <HAL_ADC_Start+0x84>
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	e000      	b.n	8004e12 <HAL_ADC_Start+0x86>
 8004e10:	4b3e      	ldr	r3, [pc, #248]	; (8004f0c <HAL_ADC_Start+0x180>)
 8004e12:	687a      	ldr	r2, [r7, #4]
 8004e14:	6812      	ldr	r2, [r2, #0]
 8004e16:	4293      	cmp	r3, r2
 8004e18:	d002      	beq.n	8004e20 <HAL_ADC_Start+0x94>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004e1a:	693b      	ldr	r3, [r7, #16]
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d105      	bne.n	8004e2c <HAL_ADC_Start+0xa0>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e24:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	655a      	str	r2, [r3, #84]	; 0x54
      }

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e30:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004e34:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e38:	d106      	bne.n	8004e48 <HAL_ADC_Start+0xbc>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e3e:	f023 0206 	bic.w	r2, r3, #6
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	659a      	str	r2, [r3, #88]	; 0x58
 8004e46:	e002      	b.n	8004e4e <HAL_ADC_Start+0xc2>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	2200      	movs	r2, #0
 8004e4c:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	221c      	movs	r2, #28
 8004e54:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	2200      	movs	r2, #0
 8004e5a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      /* trigger event.                                                       */
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	4a2b      	ldr	r2, [pc, #172]	; (8004f10 <HAL_ADC_Start+0x184>)
 8004e64:	4293      	cmp	r3, r2
 8004e66:	d002      	beq.n	8004e6e <HAL_ADC_Start+0xe2>
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	e000      	b.n	8004e70 <HAL_ADC_Start+0xe4>
 8004e6e:	4b27      	ldr	r3, [pc, #156]	; (8004f0c <HAL_ADC_Start+0x180>)
 8004e70:	687a      	ldr	r2, [r7, #4]
 8004e72:	6812      	ldr	r2, [r2, #0]
 8004e74:	4293      	cmp	r3, r2
 8004e76:	d008      	beq.n	8004e8a <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004e78:	693b      	ldr	r3, [r7, #16]
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d005      	beq.n	8004e8a <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8004e7e:	693b      	ldr	r3, [r7, #16]
 8004e80:	2b05      	cmp	r3, #5
 8004e82:	d002      	beq.n	8004e8a <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8004e84:	693b      	ldr	r3, [r7, #16]
 8004e86:	2b09      	cmp	r3, #9
 8004e88:	d114      	bne.n	8004eb4 <HAL_ADC_Start+0x128>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	68db      	ldr	r3, [r3, #12]
 8004e90:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d007      	beq.n	8004ea8 <HAL_ADC_Start+0x11c>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e9c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004ea0:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	4618      	mov	r0, r3
 8004eae:	f7ff fcdf 	bl	8004870 <LL_ADC_REG_StartConversion>
 8004eb2:	e025      	b.n	8004f00 <HAL_ADC_Start+0x174>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004eb8:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	655a      	str	r2, [r3, #84]	; 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	4a12      	ldr	r2, [pc, #72]	; (8004f10 <HAL_ADC_Start+0x184>)
 8004ec6:	4293      	cmp	r3, r2
 8004ec8:	d002      	beq.n	8004ed0 <HAL_ADC_Start+0x144>
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	e000      	b.n	8004ed2 <HAL_ADC_Start+0x146>
 8004ed0:	4b0e      	ldr	r3, [pc, #56]	; (8004f0c <HAL_ADC_Start+0x180>)
 8004ed2:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	68db      	ldr	r3, [r3, #12]
 8004ed8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d00f      	beq.n	8004f00 <HAL_ADC_Start+0x174>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ee4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004ee8:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	655a      	str	r2, [r3, #84]	; 0x54
 8004ef0:	e006      	b.n	8004f00 <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	2200      	movs	r2, #0
 8004ef6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8004efa:	e001      	b.n	8004f00 <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8004efc:	2302      	movs	r3, #2
 8004efe:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8004f00:	7dfb      	ldrb	r3, [r7, #23]
}
 8004f02:	4618      	mov	r0, r3
 8004f04:	3718      	adds	r7, #24
 8004f06:	46bd      	mov	sp, r7
 8004f08:	bd80      	pop	{r7, pc}
 8004f0a:	bf00      	nop
 8004f0c:	40022000 	.word	0x40022000
 8004f10:	40022100 	.word	0x40022100
 8004f14:	40022300 	.word	0x40022300
 8004f18:	58026300 	.word	0x58026300
 8004f1c:	fffff0fe 	.word	0xfffff0fe

08004f20 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8004f20:	b580      	push	{r7, lr}
 8004f22:	b088      	sub	sp, #32
 8004f24:	af00      	add	r7, sp, #0
 8004f26:	6078      	str	r0, [r7, #4]
 8004f28:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	4a72      	ldr	r2, [pc, #456]	; (80050f8 <HAL_ADC_PollForConversion+0x1d8>)
 8004f30:	4293      	cmp	r3, r2
 8004f32:	d004      	beq.n	8004f3e <HAL_ADC_PollForConversion+0x1e>
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	4a70      	ldr	r2, [pc, #448]	; (80050fc <HAL_ADC_PollForConversion+0x1dc>)
 8004f3a:	4293      	cmp	r3, r2
 8004f3c:	d101      	bne.n	8004f42 <HAL_ADC_PollForConversion+0x22>
 8004f3e:	4b70      	ldr	r3, [pc, #448]	; (8005100 <HAL_ADC_PollForConversion+0x1e0>)
 8004f40:	e000      	b.n	8004f44 <HAL_ADC_PollForConversion+0x24>
 8004f42:	4b70      	ldr	r3, [pc, #448]	; (8005104 <HAL_ADC_PollForConversion+0x1e4>)
 8004f44:	4618      	mov	r0, r3
 8004f46:	f7ff fbdb 	bl	8004700 <LL_ADC_GetMultimode>
 8004f4a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	691b      	ldr	r3, [r3, #16]
 8004f50:	2b08      	cmp	r3, #8
 8004f52:	d102      	bne.n	8004f5a <HAL_ADC_PollForConversion+0x3a>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8004f54:	2308      	movs	r3, #8
 8004f56:	61fb      	str	r3, [r7, #28]
 8004f58:	e037      	b.n	8004fca <HAL_ADC_PollForConversion+0xaa>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004f5a:	697b      	ldr	r3, [r7, #20]
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d005      	beq.n	8004f6c <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8004f60:	697b      	ldr	r3, [r7, #20]
 8004f62:	2b05      	cmp	r3, #5
 8004f64:	d002      	beq.n	8004f6c <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8004f66:	697b      	ldr	r3, [r7, #20]
 8004f68:	2b09      	cmp	r3, #9
 8004f6a:	d111      	bne.n	8004f90 <HAL_ADC_PollForConversion+0x70>
       )
    {
      /* Check DMNGT bit in handle ADC CFGR register */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	68db      	ldr	r3, [r3, #12]
 8004f72:	f003 0301 	and.w	r3, r3, #1
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d007      	beq.n	8004f8a <HAL_ADC_PollForConversion+0x6a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f7e:	f043 0220 	orr.w	r2, r3, #32
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 8004f86:	2301      	movs	r3, #1
 8004f88:	e0b1      	b.n	80050ee <HAL_ADC_PollForConversion+0x1ce>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8004f8a:	2304      	movs	r3, #4
 8004f8c:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 8004f8e:	e01c      	b.n	8004fca <HAL_ADC_PollForConversion+0xaa>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	4a58      	ldr	r2, [pc, #352]	; (80050f8 <HAL_ADC_PollForConversion+0x1d8>)
 8004f96:	4293      	cmp	r3, r2
 8004f98:	d004      	beq.n	8004fa4 <HAL_ADC_PollForConversion+0x84>
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	4a57      	ldr	r2, [pc, #348]	; (80050fc <HAL_ADC_PollForConversion+0x1dc>)
 8004fa0:	4293      	cmp	r3, r2
 8004fa2:	d101      	bne.n	8004fa8 <HAL_ADC_PollForConversion+0x88>
 8004fa4:	4b56      	ldr	r3, [pc, #344]	; (8005100 <HAL_ADC_PollForConversion+0x1e0>)
 8004fa6:	e000      	b.n	8004faa <HAL_ADC_PollForConversion+0x8a>
 8004fa8:	4b56      	ldr	r3, [pc, #344]	; (8005104 <HAL_ADC_PollForConversion+0x1e4>)
 8004faa:	4618      	mov	r0, r3
 8004fac:	f7ff fbb6 	bl	800471c <LL_ADC_GetMultiDMATransfer>
 8004fb0:	4603      	mov	r3, r0
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d007      	beq.n	8004fc6 <HAL_ADC_PollForConversion+0xa6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fba:	f043 0220 	orr.w	r2, r3, #32
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 8004fc2:	2301      	movs	r3, #1
 8004fc4:	e093      	b.n	80050ee <HAL_ADC_PollForConversion+0x1ce>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8004fc6:	2304      	movs	r3, #4
 8004fc8:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8004fca:	f7ff fa05 	bl	80043d8 <HAL_GetTick>
 8004fce:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8004fd0:	e021      	b.n	8005016 <HAL_ADC_PollForConversion+0xf6>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8004fd2:	683b      	ldr	r3, [r7, #0]
 8004fd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fd8:	d01d      	beq.n	8005016 <HAL_ADC_PollForConversion+0xf6>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8004fda:	f7ff f9fd 	bl	80043d8 <HAL_GetTick>
 8004fde:	4602      	mov	r2, r0
 8004fe0:	693b      	ldr	r3, [r7, #16]
 8004fe2:	1ad3      	subs	r3, r2, r3
 8004fe4:	683a      	ldr	r2, [r7, #0]
 8004fe6:	429a      	cmp	r2, r3
 8004fe8:	d302      	bcc.n	8004ff0 <HAL_ADC_PollForConversion+0xd0>
 8004fea:	683b      	ldr	r3, [r7, #0]
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d112      	bne.n	8005016 <HAL_ADC_PollForConversion+0xf6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	681a      	ldr	r2, [r3, #0]
 8004ff6:	69fb      	ldr	r3, [r7, #28]
 8004ff8:	4013      	ands	r3, r2
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d10b      	bne.n	8005016 <HAL_ADC_PollForConversion+0xf6>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005002:	f043 0204 	orr.w	r2, r3, #4
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	655a      	str	r2, [r3, #84]	; 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	2200      	movs	r2, #0
 800500e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

          return HAL_TIMEOUT;
 8005012:	2303      	movs	r3, #3
 8005014:	e06b      	b.n	80050ee <HAL_ADC_PollForConversion+0x1ce>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	681a      	ldr	r2, [r3, #0]
 800501c:	69fb      	ldr	r3, [r7, #28]
 800501e:	4013      	ands	r3, r2
 8005020:	2b00      	cmp	r3, #0
 8005022:	d0d6      	beq.n	8004fd2 <HAL_ADC_PollForConversion+0xb2>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005028:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	4618      	mov	r0, r3
 8005036:	f7ff fa93 	bl	8004560 <LL_ADC_REG_IsTriggerSourceSWStart>
 800503a:	4603      	mov	r3, r0
 800503c:	2b00      	cmp	r3, #0
 800503e:	d01c      	beq.n	800507a <HAL_ADC_PollForConversion+0x15a>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	7d5b      	ldrb	r3, [r3, #21]
 8005044:	2b00      	cmp	r3, #0
 8005046:	d118      	bne.n	800507a <HAL_ADC_PollForConversion+0x15a>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	f003 0308 	and.w	r3, r3, #8
 8005052:	2b08      	cmp	r3, #8
 8005054:	d111      	bne.n	800507a <HAL_ADC_PollForConversion+0x15a>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800505a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	655a      	str	r2, [r3, #84]	; 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005066:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800506a:	2b00      	cmp	r3, #0
 800506c:	d105      	bne.n	800507a <HAL_ADC_PollForConversion+0x15a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005072:	f043 0201 	orr.w	r2, r3, #1
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	4a1f      	ldr	r2, [pc, #124]	; (80050fc <HAL_ADC_PollForConversion+0x1dc>)
 8005080:	4293      	cmp	r3, r2
 8005082:	d002      	beq.n	800508a <HAL_ADC_PollForConversion+0x16a>
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	e000      	b.n	800508c <HAL_ADC_PollForConversion+0x16c>
 800508a:	4b1b      	ldr	r3, [pc, #108]	; (80050f8 <HAL_ADC_PollForConversion+0x1d8>)
 800508c:	687a      	ldr	r2, [r7, #4]
 800508e:	6812      	ldr	r2, [r2, #0]
 8005090:	4293      	cmp	r3, r2
 8005092:	d008      	beq.n	80050a6 <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8005094:	697b      	ldr	r3, [r7, #20]
 8005096:	2b00      	cmp	r3, #0
 8005098:	d005      	beq.n	80050a6 <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800509a:	697b      	ldr	r3, [r7, #20]
 800509c:	2b05      	cmp	r3, #5
 800509e:	d002      	beq.n	80050a6 <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80050a0:	697b      	ldr	r3, [r7, #20]
 80050a2:	2b09      	cmp	r3, #9
 80050a4:	d104      	bne.n	80050b0 <HAL_ADC_PollForConversion+0x190>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	68db      	ldr	r3, [r3, #12]
 80050ac:	61bb      	str	r3, [r7, #24]
 80050ae:	e00c      	b.n	80050ca <HAL_ADC_PollForConversion+0x1aa>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	4a11      	ldr	r2, [pc, #68]	; (80050fc <HAL_ADC_PollForConversion+0x1dc>)
 80050b6:	4293      	cmp	r3, r2
 80050b8:	d002      	beq.n	80050c0 <HAL_ADC_PollForConversion+0x1a0>
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	e000      	b.n	80050c2 <HAL_ADC_PollForConversion+0x1a2>
 80050c0:	4b0d      	ldr	r3, [pc, #52]	; (80050f8 <HAL_ADC_PollForConversion+0x1d8>)
 80050c2:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	68db      	ldr	r3, [r3, #12]
 80050c8:	61bb      	str	r3, [r7, #24]
  }

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 80050ca:	69fb      	ldr	r3, [r7, #28]
 80050cc:	2b08      	cmp	r3, #8
 80050ce:	d104      	bne.n	80050da <HAL_ADC_PollForConversion+0x1ba>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	2208      	movs	r2, #8
 80050d6:	601a      	str	r2, [r3, #0]
 80050d8:	e008      	b.n	80050ec <HAL_ADC_PollForConversion+0x1cc>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 80050da:	69bb      	ldr	r3, [r7, #24]
 80050dc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d103      	bne.n	80050ec <HAL_ADC_PollForConversion+0x1cc>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	220c      	movs	r2, #12
 80050ea:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 80050ec:	2300      	movs	r3, #0
}
 80050ee:	4618      	mov	r0, r3
 80050f0:	3720      	adds	r7, #32
 80050f2:	46bd      	mov	sp, r7
 80050f4:	bd80      	pop	{r7, pc}
 80050f6:	bf00      	nop
 80050f8:	40022000 	.word	0x40022000
 80050fc:	40022100 	.word	0x40022100
 8005100:	40022300 	.word	0x40022300
 8005104:	58026300 	.word	0x58026300

08005108 <HAL_ADC_Start_IT>:
  *          before calling HAL_ADC_Start_IT().
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef *hadc)
{
 8005108:	b580      	push	{r7, lr}
 800510a:	b086      	sub	sp, #24
 800510c:	af00      	add	r7, sp, #0
 800510e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	4a90      	ldr	r2, [pc, #576]	; (8005358 <HAL_ADC_Start_IT+0x250>)
 8005116:	4293      	cmp	r3, r2
 8005118:	d004      	beq.n	8005124 <HAL_ADC_Start_IT+0x1c>
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	4a8f      	ldr	r2, [pc, #572]	; (800535c <HAL_ADC_Start_IT+0x254>)
 8005120:	4293      	cmp	r3, r2
 8005122:	d101      	bne.n	8005128 <HAL_ADC_Start_IT+0x20>
 8005124:	4b8e      	ldr	r3, [pc, #568]	; (8005360 <HAL_ADC_Start_IT+0x258>)
 8005126:	e000      	b.n	800512a <HAL_ADC_Start_IT+0x22>
 8005128:	4b8e      	ldr	r3, [pc, #568]	; (8005364 <HAL_ADC_Start_IT+0x25c>)
 800512a:	4618      	mov	r0, r3
 800512c:	f7ff fae8 	bl	8004700 <LL_ADC_GetMultimode>
 8005130:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	4618      	mov	r0, r3
 8005138:	f7ff fbc2 	bl	80048c0 <LL_ADC_REG_IsConversionOngoing>
 800513c:	4603      	mov	r3, r0
 800513e:	2b00      	cmp	r3, #0
 8005140:	f040 8119 	bne.w	8005376 <HAL_ADC_Start_IT+0x26e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800514a:	2b01      	cmp	r3, #1
 800514c:	d101      	bne.n	8005152 <HAL_ADC_Start_IT+0x4a>
 800514e:	2302      	movs	r3, #2
 8005150:	e116      	b.n	8005380 <HAL_ADC_Start_IT+0x278>
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	2201      	movs	r2, #1
 8005156:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800515a:	6878      	ldr	r0, [r7, #4]
 800515c:	f001 fada 	bl	8006714 <ADC_Enable>
 8005160:	4603      	mov	r3, r0
 8005162:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8005164:	7dfb      	ldrb	r3, [r7, #23]
 8005166:	2b00      	cmp	r3, #0
 8005168:	f040 8100 	bne.w	800536c <HAL_ADC_Start_IT+0x264>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005170:	4b7d      	ldr	r3, [pc, #500]	; (8005368 <HAL_ADC_Start_IT+0x260>)
 8005172:	4013      	ands	r3, r2
 8005174:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	4a76      	ldr	r2, [pc, #472]	; (800535c <HAL_ADC_Start_IT+0x254>)
 8005182:	4293      	cmp	r3, r2
 8005184:	d002      	beq.n	800518c <HAL_ADC_Start_IT+0x84>
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	e000      	b.n	800518e <HAL_ADC_Start_IT+0x86>
 800518c:	4b72      	ldr	r3, [pc, #456]	; (8005358 <HAL_ADC_Start_IT+0x250>)
 800518e:	687a      	ldr	r2, [r7, #4]
 8005190:	6812      	ldr	r2, [r2, #0]
 8005192:	4293      	cmp	r3, r2
 8005194:	d002      	beq.n	800519c <HAL_ADC_Start_IT+0x94>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8005196:	693b      	ldr	r3, [r7, #16]
 8005198:	2b00      	cmp	r3, #0
 800519a:	d105      	bne.n	80051a8 <HAL_ADC_Start_IT+0xa0>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051a0:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	655a      	str	r2, [r3, #84]	; 0x54
      }

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051ac:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d006      	beq.n	80051c2 <HAL_ADC_Start_IT+0xba>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051b8:	f023 0206 	bic.w	r2, r3, #6
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	659a      	str	r2, [r3, #88]	; 0x58
 80051c0:	e002      	b.n	80051c8 <HAL_ADC_Start_IT+0xc0>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	2200      	movs	r2, #0
 80051c6:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	221c      	movs	r2, #28
 80051ce:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	2200      	movs	r2, #0
 80051d4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      /* Disable all interruptions before enabling the desired ones */
      __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	685a      	ldr	r2, [r3, #4]
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	f022 021c 	bic.w	r2, r2, #28
 80051e6:	605a      	str	r2, [r3, #4]

      /* Enable ADC end of conversion interrupt */
      switch (hadc->Init.EOCSelection)
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	691b      	ldr	r3, [r3, #16]
 80051ec:	2b08      	cmp	r3, #8
 80051ee:	d108      	bne.n	8005202 <HAL_ADC_Start_IT+0xfa>
      {
        case ADC_EOC_SEQ_CONV:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOS);
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	685a      	ldr	r2, [r3, #4]
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	f042 0208 	orr.w	r2, r2, #8
 80051fe:	605a      	str	r2, [r3, #4]
          break;
 8005200:	e008      	b.n	8005214 <HAL_ADC_Start_IT+0x10c>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	685a      	ldr	r2, [r3, #4]
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	f042 0204 	orr.w	r2, r2, #4
 8005210:	605a      	str	r2, [r3, #4]
          break;
 8005212:	bf00      	nop

      /* Enable ADC overrun interrupt */
      /* If hadc->Init.Overrun is set to ADC_OVR_DATA_PRESERVED, only then is
         ADC_IT_OVR enabled; otherwise data overwrite is considered as normal
         behavior and no CPU time is lost for a non-processed interruption */
      if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005218:	2b00      	cmp	r3, #0
 800521a:	d107      	bne.n	800522c <HAL_ADC_Start_IT+0x124>
      {
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	685a      	ldr	r2, [r3, #4]
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	f042 0210 	orr.w	r2, r2, #16
 800522a:	605a      	str	r2, [r3, #4]
      /* trigger event.                                                       */
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	4a4a      	ldr	r2, [pc, #296]	; (800535c <HAL_ADC_Start_IT+0x254>)
 8005232:	4293      	cmp	r3, r2
 8005234:	d002      	beq.n	800523c <HAL_ADC_Start_IT+0x134>
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	e000      	b.n	800523e <HAL_ADC_Start_IT+0x136>
 800523c:	4b46      	ldr	r3, [pc, #280]	; (8005358 <HAL_ADC_Start_IT+0x250>)
 800523e:	687a      	ldr	r2, [r7, #4]
 8005240:	6812      	ldr	r2, [r2, #0]
 8005242:	4293      	cmp	r3, r2
 8005244:	d008      	beq.n	8005258 <HAL_ADC_Start_IT+0x150>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8005246:	693b      	ldr	r3, [r7, #16]
 8005248:	2b00      	cmp	r3, #0
 800524a:	d005      	beq.n	8005258 <HAL_ADC_Start_IT+0x150>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800524c:	693b      	ldr	r3, [r7, #16]
 800524e:	2b05      	cmp	r3, #5
 8005250:	d002      	beq.n	8005258 <HAL_ADC_Start_IT+0x150>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8005252:	693b      	ldr	r3, [r7, #16]
 8005254:	2b09      	cmp	r3, #9
 8005256:	d13b      	bne.n	80052d0 <HAL_ADC_Start_IT+0x1c8>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	68db      	ldr	r3, [r3, #12]
 800525e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005262:	2b00      	cmp	r3, #0
 8005264:	d02d      	beq.n	80052c2 <HAL_ADC_Start_IT+0x1ba>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800526a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800526e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	655a      	str	r2, [r3, #84]	; 0x54

          /* Enable as well injected interruptions in case
           HAL_ADCEx_InjectedStart_IT() has not been called beforehand. This
           allows to start regular and injected conversions when JAUTO is
           set with a single call to HAL_ADC_Start_IT() */
          switch (hadc->Init.EOCSelection)
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	691b      	ldr	r3, [r3, #16]
 800527a:	2b08      	cmp	r3, #8
 800527c:	d110      	bne.n	80052a0 <HAL_ADC_Start_IT+0x198>
          {
            case ADC_EOC_SEQ_CONV:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	685a      	ldr	r2, [r3, #4]
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	f022 0220 	bic.w	r2, r2, #32
 800528c:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	685a      	ldr	r2, [r3, #4]
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800529c:	605a      	str	r2, [r3, #4]
              break;
 800529e:	e011      	b.n	80052c4 <HAL_ADC_Start_IT+0x1bc>
            /* case ADC_EOC_SINGLE_CONV */
            default:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	685a      	ldr	r2, [r3, #4]
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80052ae:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	685a      	ldr	r2, [r3, #4]
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	f042 0220 	orr.w	r2, r2, #32
 80052be:	605a      	str	r2, [r3, #4]
              break;
 80052c0:	e000      	b.n	80052c4 <HAL_ADC_Start_IT+0x1bc>
          }
        }
 80052c2:	bf00      	nop

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	4618      	mov	r0, r3
 80052ca:	f7ff fad1 	bl	8004870 <LL_ADC_REG_StartConversion>
 80052ce:	e056      	b.n	800537e <HAL_ADC_Start_IT+0x276>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052d4:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	655a      	str	r2, [r3, #84]	; 0x54
        /* if Master ADC JAUTO bit is set, Slave injected interruptions
           are enabled nevertheless (for same reason as above) */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	4a1e      	ldr	r2, [pc, #120]	; (800535c <HAL_ADC_Start_IT+0x254>)
 80052e2:	4293      	cmp	r3, r2
 80052e4:	d002      	beq.n	80052ec <HAL_ADC_Start_IT+0x1e4>
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	e000      	b.n	80052ee <HAL_ADC_Start_IT+0x1e6>
 80052ec:	4b1a      	ldr	r3, [pc, #104]	; (8005358 <HAL_ADC_Start_IT+0x250>)
 80052ee:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	68db      	ldr	r3, [r3, #12]
 80052f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d03f      	beq.n	800537c <HAL_ADC_Start_IT+0x274>
        {
          /* First, update Slave State in setting HAL_ADC_STATE_INJ_BUSY bit
             and in resetting HAL_ADC_STATE_INJ_EOC bit */
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005300:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8005304:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	655a      	str	r2, [r3, #84]	; 0x54
          /* Next, set Slave injected interruptions */
          switch (hadc->Init.EOCSelection)
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	691b      	ldr	r3, [r3, #16]
 8005310:	2b08      	cmp	r3, #8
 8005312:	d110      	bne.n	8005336 <HAL_ADC_Start_IT+0x22e>
          {
            case ADC_EOC_SEQ_CONV:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	685a      	ldr	r2, [r3, #4]
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	f022 0220 	bic.w	r2, r2, #32
 8005322:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	685a      	ldr	r2, [r3, #4]
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005332:	605a      	str	r2, [r3, #4]
              break;
 8005334:	e023      	b.n	800537e <HAL_ADC_Start_IT+0x276>
            /* case ADC_EOC_SINGLE_CONV */
            default:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	685a      	ldr	r2, [r3, #4]
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005344:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	685a      	ldr	r2, [r3, #4]
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	f042 0220 	orr.w	r2, r2, #32
 8005354:	605a      	str	r2, [r3, #4]
              break;
 8005356:	e012      	b.n	800537e <HAL_ADC_Start_IT+0x276>
 8005358:	40022000 	.word	0x40022000
 800535c:	40022100 	.word	0x40022100
 8005360:	40022300 	.word	0x40022300
 8005364:	58026300 	.word	0x58026300
 8005368:	fffff0fe 	.word	0xfffff0fe
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	2200      	movs	r2, #0
 8005370:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8005374:	e003      	b.n	800537e <HAL_ADC_Start_IT+0x276>
    }

  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8005376:	2302      	movs	r3, #2
 8005378:	75fb      	strb	r3, [r7, #23]
 800537a:	e000      	b.n	800537e <HAL_ADC_Start_IT+0x276>
        }
 800537c:	bf00      	nop
  }

  /* Return function status */
  return tmp_hal_status;
 800537e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005380:	4618      	mov	r0, r3
 8005382:	3718      	adds	r7, #24
 8005384:	46bd      	mov	sp, r7
 8005386:	bd80      	pop	{r7, pc}

08005388 <HAL_ADC_Stop_IT>:
  *         end-of-conversion, disable ADC peripheral.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_IT(ADC_HandleTypeDef *hadc)
{
 8005388:	b580      	push	{r7, lr}
 800538a:	b084      	sub	sp, #16
 800538c:	af00      	add	r7, sp, #0
 800538e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005396:	2b01      	cmp	r3, #1
 8005398:	d101      	bne.n	800539e <HAL_ADC_Stop_IT+0x16>
 800539a:	2302      	movs	r3, #2
 800539c:	e029      	b.n	80053f2 <HAL_ADC_Stop_IT+0x6a>
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	2201      	movs	r2, #1
 80053a2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 80053a6:	2103      	movs	r1, #3
 80053a8:	6878      	ldr	r0, [r7, #4]
 80053aa:	f001 f8f7 	bl	800659c <ADC_ConversionStop>
 80053ae:	4603      	mov	r3, r0
 80053b0:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 80053b2:	7bfb      	ldrb	r3, [r7, #15]
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d117      	bne.n	80053e8 <HAL_ADC_Stop_IT+0x60>
  {
    /* Disable ADC end of conversion interrupt for regular group */
    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	685a      	ldr	r2, [r3, #4]
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	f022 021c 	bic.w	r2, r2, #28
 80053c6:	605a      	str	r2, [r3, #4]

    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 80053c8:	6878      	ldr	r0, [r7, #4]
 80053ca:	f001 fa2d 	bl	8006828 <ADC_Disable>
 80053ce:	4603      	mov	r3, r0
 80053d0:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 80053d2:	7bfb      	ldrb	r3, [r7, #15]
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d107      	bne.n	80053e8 <HAL_ADC_Stop_IT+0x60>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80053dc:	4b07      	ldr	r3, [pc, #28]	; (80053fc <HAL_ADC_Stop_IT+0x74>)
 80053de:	4013      	ands	r3, r2
 80053e0:	f043 0201 	orr.w	r2, r3, #1
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	2200      	movs	r2, #0
 80053ec:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80053f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80053f2:	4618      	mov	r0, r3
 80053f4:	3710      	adds	r7, #16
 80053f6:	46bd      	mov	sp, r7
 80053f8:	bd80      	pop	{r7, pc}
 80053fa:	bf00      	nop
 80053fc:	ffffeefe 	.word	0xffffeefe

08005400 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8005400:	b480      	push	{r7}
 8005402:	b083      	sub	sp, #12
 8005404:	af00      	add	r7, sp, #0
 8005406:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 800540e:	4618      	mov	r0, r3
 8005410:	370c      	adds	r7, #12
 8005412:	46bd      	mov	sp, r7
 8005414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005418:	4770      	bx	lr
	...

0800541c <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 800541c:	b580      	push	{r7, lr}
 800541e:	b08a      	sub	sp, #40	; 0x28
 8005420:	af00      	add	r7, sp, #0
 8005422:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8005424:	2300      	movs	r3, #0
 8005426:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	685b      	ldr	r3, [r3, #4]
 8005436:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	4a87      	ldr	r2, [pc, #540]	; (800565c <HAL_ADC_IRQHandler+0x240>)
 800543e:	4293      	cmp	r3, r2
 8005440:	d004      	beq.n	800544c <HAL_ADC_IRQHandler+0x30>
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	4a86      	ldr	r2, [pc, #536]	; (8005660 <HAL_ADC_IRQHandler+0x244>)
 8005448:	4293      	cmp	r3, r2
 800544a:	d101      	bne.n	8005450 <HAL_ADC_IRQHandler+0x34>
 800544c:	4b85      	ldr	r3, [pc, #532]	; (8005664 <HAL_ADC_IRQHandler+0x248>)
 800544e:	e000      	b.n	8005452 <HAL_ADC_IRQHandler+0x36>
 8005450:	4b85      	ldr	r3, [pc, #532]	; (8005668 <HAL_ADC_IRQHandler+0x24c>)
 8005452:	4618      	mov	r0, r3
 8005454:	f7ff f954 	bl	8004700 <LL_ADC_GetMultimode>
 8005458:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 800545a:	69fb      	ldr	r3, [r7, #28]
 800545c:	f003 0302 	and.w	r3, r3, #2
 8005460:	2b00      	cmp	r3, #0
 8005462:	d017      	beq.n	8005494 <HAL_ADC_IRQHandler+0x78>
 8005464:	69bb      	ldr	r3, [r7, #24]
 8005466:	f003 0302 	and.w	r3, r3, #2
 800546a:	2b00      	cmp	r3, #0
 800546c:	d012      	beq.n	8005494 <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005472:	f003 0310 	and.w	r3, r3, #16
 8005476:	2b00      	cmp	r3, #0
 8005478:	d105      	bne.n	8005486 <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800547e:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	655a      	str	r2, [r3, #84]	; 0x54

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8005486:	6878      	ldr	r0, [r7, #4]
 8005488:	f001 fb86 	bl	8006b98 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	2202      	movs	r2, #2
 8005492:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8005494:	69fb      	ldr	r3, [r7, #28]
 8005496:	f003 0304 	and.w	r3, r3, #4
 800549a:	2b00      	cmp	r3, #0
 800549c:	d004      	beq.n	80054a8 <HAL_ADC_IRQHandler+0x8c>
 800549e:	69bb      	ldr	r3, [r7, #24]
 80054a0:	f003 0304 	and.w	r3, r3, #4
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d10a      	bne.n	80054be <HAL_ADC_IRQHandler+0xa2>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80054a8:	69fb      	ldr	r3, [r7, #28]
 80054aa:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	f000 8083 	beq.w	80055ba <HAL_ADC_IRQHandler+0x19e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80054b4:	69bb      	ldr	r3, [r7, #24]
 80054b6:	f003 0308 	and.w	r3, r3, #8
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d07d      	beq.n	80055ba <HAL_ADC_IRQHandler+0x19e>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054c2:	f003 0310 	and.w	r3, r3, #16
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d105      	bne.n	80054d6 <HAL_ADC_IRQHandler+0xba>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054ce:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	4618      	mov	r0, r3
 80054dc:	f7ff f840 	bl	8004560 <LL_ADC_REG_IsTriggerSourceSWStart>
 80054e0:	4603      	mov	r3, r0
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d062      	beq.n	80055ac <HAL_ADC_IRQHandler+0x190>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	4a5d      	ldr	r2, [pc, #372]	; (8005660 <HAL_ADC_IRQHandler+0x244>)
 80054ec:	4293      	cmp	r3, r2
 80054ee:	d002      	beq.n	80054f6 <HAL_ADC_IRQHandler+0xda>
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	e000      	b.n	80054f8 <HAL_ADC_IRQHandler+0xdc>
 80054f6:	4b59      	ldr	r3, [pc, #356]	; (800565c <HAL_ADC_IRQHandler+0x240>)
 80054f8:	687a      	ldr	r2, [r7, #4]
 80054fa:	6812      	ldr	r2, [r2, #0]
 80054fc:	4293      	cmp	r3, r2
 80054fe:	d008      	beq.n	8005512 <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8005500:	697b      	ldr	r3, [r7, #20]
 8005502:	2b00      	cmp	r3, #0
 8005504:	d005      	beq.n	8005512 <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8005506:	697b      	ldr	r3, [r7, #20]
 8005508:	2b05      	cmp	r3, #5
 800550a:	d002      	beq.n	8005512 <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800550c:	697b      	ldr	r3, [r7, #20]
 800550e:	2b09      	cmp	r3, #9
 8005510:	d104      	bne.n	800551c <HAL_ADC_IRQHandler+0x100>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	68db      	ldr	r3, [r3, #12]
 8005518:	623b      	str	r3, [r7, #32]
 800551a:	e00c      	b.n	8005536 <HAL_ADC_IRQHandler+0x11a>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	4a4f      	ldr	r2, [pc, #316]	; (8005660 <HAL_ADC_IRQHandler+0x244>)
 8005522:	4293      	cmp	r3, r2
 8005524:	d002      	beq.n	800552c <HAL_ADC_IRQHandler+0x110>
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	e000      	b.n	800552e <HAL_ADC_IRQHandler+0x112>
 800552c:	4b4b      	ldr	r3, [pc, #300]	; (800565c <HAL_ADC_IRQHandler+0x240>)
 800552e:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8005530:	693b      	ldr	r3, [r7, #16]
 8005532:	68db      	ldr	r3, [r3, #12]
 8005534:	623b      	str	r3, [r7, #32]
      }

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8005536:	6a3b      	ldr	r3, [r7, #32]
 8005538:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800553c:	2b00      	cmp	r3, #0
 800553e:	d135      	bne.n	80055ac <HAL_ADC_IRQHandler+0x190>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	f003 0308 	and.w	r3, r3, #8
 800554a:	2b08      	cmp	r3, #8
 800554c:	d12e      	bne.n	80055ac <HAL_ADC_IRQHandler+0x190>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	4618      	mov	r0, r3
 8005554:	f7ff f9b4 	bl	80048c0 <LL_ADC_REG_IsConversionOngoing>
 8005558:	4603      	mov	r3, r0
 800555a:	2b00      	cmp	r3, #0
 800555c:	d11a      	bne.n	8005594 <HAL_ADC_IRQHandler+0x178>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	685a      	ldr	r2, [r3, #4]
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	f022 020c 	bic.w	r2, r2, #12
 800556c:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005572:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	655a      	str	r2, [r3, #84]	; 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800557e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005582:	2b00      	cmp	r3, #0
 8005584:	d112      	bne.n	80055ac <HAL_ADC_IRQHandler+0x190>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800558a:	f043 0201 	orr.w	r2, r3, #1
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	655a      	str	r2, [r3, #84]	; 0x54
 8005592:	e00b      	b.n	80055ac <HAL_ADC_IRQHandler+0x190>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005598:	f043 0210 	orr.w	r2, r3, #16
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80055a4:	f043 0201 	orr.w	r2, r3, #1
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	659a      	str	r2, [r3, #88]	; 0x58
    /*       possibility to use:                                              */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80055ac:	6878      	ldr	r0, [r7, #4]
 80055ae:	f000 f96f 	bl	8005890 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	220c      	movs	r2, #12
 80055b8:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80055ba:	69fb      	ldr	r3, [r7, #28]
 80055bc:	f003 0320 	and.w	r3, r3, #32
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d004      	beq.n	80055ce <HAL_ADC_IRQHandler+0x1b2>
 80055c4:	69bb      	ldr	r3, [r7, #24]
 80055c6:	f003 0320 	and.w	r3, r3, #32
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d10b      	bne.n	80055e6 <HAL_ADC_IRQHandler+0x1ca>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80055ce:	69fb      	ldr	r3, [r7, #28]
 80055d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	f000 80a0 	beq.w	800571a <HAL_ADC_IRQHandler+0x2fe>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80055da:	69bb      	ldr	r3, [r7, #24]
 80055dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	f000 809a 	beq.w	800571a <HAL_ADC_IRQHandler+0x2fe>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055ea:	f003 0310 	and.w	r3, r3, #16
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d105      	bne.n	80055fe <HAL_ADC_IRQHandler+0x1e2>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055f6:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	4618      	mov	r0, r3
 8005604:	f7fe ffeb 	bl	80045de <LL_ADC_INJ_IsTriggerSourceSWStart>
 8005608:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	4618      	mov	r0, r3
 8005610:	f7fe ffa6 	bl	8004560 <LL_ADC_REG_IsTriggerSourceSWStart>
 8005614:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	4a11      	ldr	r2, [pc, #68]	; (8005660 <HAL_ADC_IRQHandler+0x244>)
 800561c:	4293      	cmp	r3, r2
 800561e:	d002      	beq.n	8005626 <HAL_ADC_IRQHandler+0x20a>
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	e000      	b.n	8005628 <HAL_ADC_IRQHandler+0x20c>
 8005626:	4b0d      	ldr	r3, [pc, #52]	; (800565c <HAL_ADC_IRQHandler+0x240>)
 8005628:	687a      	ldr	r2, [r7, #4]
 800562a:	6812      	ldr	r2, [r2, #0]
 800562c:	4293      	cmp	r3, r2
 800562e:	d008      	beq.n	8005642 <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8005630:	697b      	ldr	r3, [r7, #20]
 8005632:	2b00      	cmp	r3, #0
 8005634:	d005      	beq.n	8005642 <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8005636:	697b      	ldr	r3, [r7, #20]
 8005638:	2b06      	cmp	r3, #6
 800563a:	d002      	beq.n	8005642 <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 800563c:	697b      	ldr	r3, [r7, #20]
 800563e:	2b07      	cmp	r3, #7
 8005640:	d104      	bne.n	800564c <HAL_ADC_IRQHandler+0x230>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	68db      	ldr	r3, [r3, #12]
 8005648:	623b      	str	r3, [r7, #32]
 800564a:	e014      	b.n	8005676 <HAL_ADC_IRQHandler+0x25a>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	4a03      	ldr	r2, [pc, #12]	; (8005660 <HAL_ADC_IRQHandler+0x244>)
 8005652:	4293      	cmp	r3, r2
 8005654:	d00a      	beq.n	800566c <HAL_ADC_IRQHandler+0x250>
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	e008      	b.n	800566e <HAL_ADC_IRQHandler+0x252>
 800565c:	40022000 	.word	0x40022000
 8005660:	40022100 	.word	0x40022100
 8005664:	40022300 	.word	0x40022300
 8005668:	58026300 	.word	0x58026300
 800566c:	4b84      	ldr	r3, [pc, #528]	; (8005880 <HAL_ADC_IRQHandler+0x464>)
 800566e:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8005670:	693b      	ldr	r3, [r7, #16]
 8005672:	68db      	ldr	r3, [r3, #12]
 8005674:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	2b00      	cmp	r3, #0
 800567a:	d047      	beq.n	800570c <HAL_ADC_IRQHandler+0x2f0>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 800567c:	6a3b      	ldr	r3, [r7, #32]
 800567e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005682:	2b00      	cmp	r3, #0
 8005684:	d007      	beq.n	8005696 <HAL_ADC_IRQHandler+0x27a>
 8005686:	68bb      	ldr	r3, [r7, #8]
 8005688:	2b00      	cmp	r3, #0
 800568a:	d03f      	beq.n	800570c <HAL_ADC_IRQHandler+0x2f0>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 800568c:	6a3b      	ldr	r3, [r7, #32]
 800568e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8005692:	2b00      	cmp	r3, #0
 8005694:	d13a      	bne.n	800570c <HAL_ADC_IRQHandler+0x2f0>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056a0:	2b40      	cmp	r3, #64	; 0x40
 80056a2:	d133      	bne.n	800570c <HAL_ADC_IRQHandler+0x2f0>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 80056a4:	6a3b      	ldr	r3, [r7, #32]
 80056a6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d12e      	bne.n	800570c <HAL_ADC_IRQHandler+0x2f0>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	4618      	mov	r0, r3
 80056b4:	f7ff f92c 	bl	8004910 <LL_ADC_INJ_IsConversionOngoing>
 80056b8:	4603      	mov	r3, r0
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d11a      	bne.n	80056f4 <HAL_ADC_IRQHandler+0x2d8>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	685a      	ldr	r2, [r3, #4]
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80056cc:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056d2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	655a      	str	r2, [r3, #84]	; 0x54

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d112      	bne.n	800570c <HAL_ADC_IRQHandler+0x2f0>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056ea:	f043 0201 	orr.w	r2, r3, #1
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	655a      	str	r2, [r3, #84]	; 0x54
 80056f2:	e00b      	b.n	800570c <HAL_ADC_IRQHandler+0x2f0>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056f8:	f043 0210 	orr.w	r2, r3, #16
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	655a      	str	r2, [r3, #84]	; 0x54

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005704:	f043 0201 	orr.w	r2, r3, #1
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	659a      	str	r2, [r3, #88]	; 0x58
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800570c:	6878      	ldr	r0, [r7, #4]
 800570e:	f001 fa1b 	bl	8006b48 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	2260      	movs	r2, #96	; 0x60
 8005718:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 800571a:	69fb      	ldr	r3, [r7, #28]
 800571c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005720:	2b00      	cmp	r3, #0
 8005722:	d011      	beq.n	8005748 <HAL_ADC_IRQHandler+0x32c>
 8005724:	69bb      	ldr	r3, [r7, #24]
 8005726:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800572a:	2b00      	cmp	r3, #0
 800572c:	d00c      	beq.n	8005748 <HAL_ADC_IRQHandler+0x32c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005732:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 800573a:	6878      	ldr	r0, [r7, #4]
 800573c:	f7fd fcb0 	bl	80030a0 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	2280      	movs	r2, #128	; 0x80
 8005746:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8005748:	69fb      	ldr	r3, [r7, #28]
 800574a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800574e:	2b00      	cmp	r3, #0
 8005750:	d012      	beq.n	8005778 <HAL_ADC_IRQHandler+0x35c>
 8005752:	69bb      	ldr	r3, [r7, #24]
 8005754:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005758:	2b00      	cmp	r3, #0
 800575a:	d00d      	beq.n	8005778 <HAL_ADC_IRQHandler+0x35c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005760:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8005768:	6878      	ldr	r0, [r7, #4]
 800576a:	f001 fa01 	bl	8006b70 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005776:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8005778:	69fb      	ldr	r3, [r7, #28]
 800577a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800577e:	2b00      	cmp	r3, #0
 8005780:	d012      	beq.n	80057a8 <HAL_ADC_IRQHandler+0x38c>
 8005782:	69bb      	ldr	r3, [r7, #24]
 8005784:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005788:	2b00      	cmp	r3, #0
 800578a:	d00d      	beq.n	80057a8 <HAL_ADC_IRQHandler+0x38c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005790:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8005798:	6878      	ldr	r0, [r7, #4]
 800579a:	f001 f9f3 	bl	8006b84 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80057a6:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 80057a8:	69fb      	ldr	r3, [r7, #28]
 80057aa:	f003 0310 	and.w	r3, r3, #16
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d043      	beq.n	800583a <HAL_ADC_IRQHandler+0x41e>
 80057b2:	69bb      	ldr	r3, [r7, #24]
 80057b4:	f003 0310 	and.w	r3, r3, #16
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d03e      	beq.n	800583a <HAL_ADC_IRQHandler+0x41e>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d102      	bne.n	80057ca <HAL_ADC_IRQHandler+0x3ae>
    {
      overrun_error = 1UL;
 80057c4:	2301      	movs	r3, #1
 80057c6:	627b      	str	r3, [r7, #36]	; 0x24
 80057c8:	e021      	b.n	800580e <HAL_ADC_IRQHandler+0x3f2>
    }
    else
    {
      /* Check DMA configuration */
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 80057ca:	697b      	ldr	r3, [r7, #20]
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d015      	beq.n	80057fc <HAL_ADC_IRQHandler+0x3e0>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	4a2a      	ldr	r2, [pc, #168]	; (8005880 <HAL_ADC_IRQHandler+0x464>)
 80057d6:	4293      	cmp	r3, r2
 80057d8:	d004      	beq.n	80057e4 <HAL_ADC_IRQHandler+0x3c8>
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	4a29      	ldr	r2, [pc, #164]	; (8005884 <HAL_ADC_IRQHandler+0x468>)
 80057e0:	4293      	cmp	r3, r2
 80057e2:	d101      	bne.n	80057e8 <HAL_ADC_IRQHandler+0x3cc>
 80057e4:	4b28      	ldr	r3, [pc, #160]	; (8005888 <HAL_ADC_IRQHandler+0x46c>)
 80057e6:	e000      	b.n	80057ea <HAL_ADC_IRQHandler+0x3ce>
 80057e8:	4b28      	ldr	r3, [pc, #160]	; (800588c <HAL_ADC_IRQHandler+0x470>)
 80057ea:	4618      	mov	r0, r3
 80057ec:	f7fe ff96 	bl	800471c <LL_ADC_GetMultiDMATransfer>
 80057f0:	4603      	mov	r3, r0
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d00b      	beq.n	800580e <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 80057f6:	2301      	movs	r3, #1
 80057f8:	627b      	str	r3, [r7, #36]	; 0x24
 80057fa:	e008      	b.n	800580e <HAL_ADC_IRQHandler+0x3f2>
        }
      }
      else
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMNGT) != 0UL)
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	68db      	ldr	r3, [r3, #12]
 8005802:	f003 0303 	and.w	r3, r3, #3
 8005806:	2b00      	cmp	r3, #0
 8005808:	d001      	beq.n	800580e <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 800580a:	2301      	movs	r3, #1
 800580c:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 800580e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005810:	2b01      	cmp	r3, #1
 8005812:	d10e      	bne.n	8005832 <HAL_ADC_IRQHandler+0x416>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005818:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005824:	f043 0202 	orr.w	r2, r3, #2
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	659a      	str	r2, [r3, #88]	; 0x58
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 800582c:	6878      	ldr	r0, [r7, #4]
 800582e:	f000 f839 	bl	80058a4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	2210      	movs	r2, #16
 8005838:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 800583a:	69fb      	ldr	r3, [r7, #28]
 800583c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005840:	2b00      	cmp	r3, #0
 8005842:	d018      	beq.n	8005876 <HAL_ADC_IRQHandler+0x45a>
 8005844:	69bb      	ldr	r3, [r7, #24]
 8005846:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800584a:	2b00      	cmp	r3, #0
 800584c:	d013      	beq.n	8005876 <HAL_ADC_IRQHandler+0x45a>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005852:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800585e:	f043 0208 	orr.w	r2, r3, #8
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	659a      	str	r2, [r3, #88]	; 0x58

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800586e:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8005870:	6878      	ldr	r0, [r7, #4]
 8005872:	f001 f973 	bl	8006b5c <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8005876:	bf00      	nop
 8005878:	3728      	adds	r7, #40	; 0x28
 800587a:	46bd      	mov	sp, r7
 800587c:	bd80      	pop	{r7, pc}
 800587e:	bf00      	nop
 8005880:	40022000 	.word	0x40022000
 8005884:	40022100 	.word	0x40022100
 8005888:	40022300 	.word	0x40022300
 800588c:	58026300 	.word	0x58026300

08005890 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8005890:	b480      	push	{r7}
 8005892:	b083      	sub	sp, #12
 8005894:	af00      	add	r7, sp, #0
 8005896:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8005898:	bf00      	nop
 800589a:	370c      	adds	r7, #12
 800589c:	46bd      	mov	sp, r7
 800589e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a2:	4770      	bx	lr

080058a4 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80058a4:	b480      	push	{r7}
 80058a6:	b083      	sub	sp, #12
 80058a8:	af00      	add	r7, sp, #0
 80058aa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80058ac:	bf00      	nop
 80058ae:	370c      	adds	r7, #12
 80058b0:	46bd      	mov	sp, r7
 80058b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b6:	4770      	bx	lr

080058b8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80058b8:	b590      	push	{r4, r7, lr}
 80058ba:	b0a1      	sub	sp, #132	; 0x84
 80058bc:	af00      	add	r7, sp, #0
 80058be:	6078      	str	r0, [r7, #4]
 80058c0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80058c2:	2300      	movs	r3, #0
 80058c4:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 80058c8:	2300      	movs	r3, #0
 80058ca:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80058cc:	683b      	ldr	r3, [r7, #0]
 80058ce:	68db      	ldr	r3, [r3, #12]
 80058d0:	4a9d      	ldr	r2, [pc, #628]	; (8005b48 <HAL_ADC_ConfigChannel+0x290>)
 80058d2:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80058da:	2b01      	cmp	r3, #1
 80058dc:	d101      	bne.n	80058e2 <HAL_ADC_ConfigChannel+0x2a>
 80058de:	2302      	movs	r3, #2
 80058e0:	e321      	b.n	8005f26 <HAL_ADC_ConfigChannel+0x66e>
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	2201      	movs	r2, #1
 80058e6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	4618      	mov	r0, r3
 80058f0:	f7fe ffe6 	bl	80048c0 <LL_ADC_REG_IsConversionOngoing>
 80058f4:	4603      	mov	r3, r0
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	f040 8306 	bne.w	8005f08 <HAL_ADC_ConfigChannel+0x650>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 80058fc:	683b      	ldr	r3, [r7, #0]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005904:	2b00      	cmp	r3, #0
 8005906:	d108      	bne.n	800591a <HAL_ADC_ConfigChannel+0x62>
 8005908:	683b      	ldr	r3, [r7, #0]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	0e9b      	lsrs	r3, r3, #26
 800590e:	f003 031f 	and.w	r3, r3, #31
 8005912:	2201      	movs	r2, #1
 8005914:	fa02 f303 	lsl.w	r3, r2, r3
 8005918:	e016      	b.n	8005948 <HAL_ADC_ConfigChannel+0x90>
 800591a:	683b      	ldr	r3, [r7, #0]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005920:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005922:	fa93 f3a3 	rbit	r3, r3
 8005926:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8005928:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800592a:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800592c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800592e:	2b00      	cmp	r3, #0
 8005930:	d101      	bne.n	8005936 <HAL_ADC_ConfigChannel+0x7e>
  {
    return 32U;
 8005932:	2320      	movs	r3, #32
 8005934:	e003      	b.n	800593e <HAL_ADC_ConfigChannel+0x86>
  }
  return __builtin_clz(value);
 8005936:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005938:	fab3 f383 	clz	r3, r3
 800593c:	b2db      	uxtb	r3, r3
 800593e:	f003 031f 	and.w	r3, r3, #31
 8005942:	2201      	movs	r2, #1
 8005944:	fa02 f303 	lsl.w	r3, r2, r3
 8005948:	687a      	ldr	r2, [r7, #4]
 800594a:	6812      	ldr	r2, [r2, #0]
 800594c:	69d1      	ldr	r1, [r2, #28]
 800594e:	687a      	ldr	r2, [r7, #4]
 8005950:	6812      	ldr	r2, [r2, #0]
 8005952:	430b      	orrs	r3, r1
 8005954:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	6818      	ldr	r0, [r3, #0]
 800595a:	683b      	ldr	r3, [r7, #0]
 800595c:	6859      	ldr	r1, [r3, #4]
 800595e:	683b      	ldr	r3, [r7, #0]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	461a      	mov	r2, r3
 8005964:	f7fe fe0f 	bl	8004586 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	4618      	mov	r0, r3
 800596e:	f7fe ffa7 	bl	80048c0 <LL_ADC_REG_IsConversionOngoing>
 8005972:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	4618      	mov	r0, r3
 800597a:	f7fe ffc9 	bl	8004910 <LL_ADC_INJ_IsConversionOngoing>
 800597e:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8005980:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005982:	2b00      	cmp	r3, #0
 8005984:	f040 80b3 	bne.w	8005aee <HAL_ADC_ConfigChannel+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8005988:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800598a:	2b00      	cmp	r3, #0
 800598c:	f040 80af 	bne.w	8005aee <HAL_ADC_ConfigChannel+0x236>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	6818      	ldr	r0, [r3, #0]
 8005994:	683b      	ldr	r3, [r7, #0]
 8005996:	6819      	ldr	r1, [r3, #0]
 8005998:	683b      	ldr	r3, [r7, #0]
 800599a:	689b      	ldr	r3, [r3, #8]
 800599c:	461a      	mov	r2, r3
 800599e:	f7fe fe31 	bl	8004604 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80059a2:	4b6a      	ldr	r3, [pc, #424]	; (8005b4c <HAL_ADC_ConfigChannel+0x294>)
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80059aa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80059ae:	d10b      	bne.n	80059c8 <HAL_ADC_ConfigChannel+0x110>
 80059b0:	683b      	ldr	r3, [r7, #0]
 80059b2:	695a      	ldr	r2, [r3, #20]
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	68db      	ldr	r3, [r3, #12]
 80059ba:	089b      	lsrs	r3, r3, #2
 80059bc:	f003 0307 	and.w	r3, r3, #7
 80059c0:	005b      	lsls	r3, r3, #1
 80059c2:	fa02 f303 	lsl.w	r3, r2, r3
 80059c6:	e01d      	b.n	8005a04 <HAL_ADC_ConfigChannel+0x14c>
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	68db      	ldr	r3, [r3, #12]
 80059ce:	f003 0310 	and.w	r3, r3, #16
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d10b      	bne.n	80059ee <HAL_ADC_ConfigChannel+0x136>
 80059d6:	683b      	ldr	r3, [r7, #0]
 80059d8:	695a      	ldr	r2, [r3, #20]
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	68db      	ldr	r3, [r3, #12]
 80059e0:	089b      	lsrs	r3, r3, #2
 80059e2:	f003 0307 	and.w	r3, r3, #7
 80059e6:	005b      	lsls	r3, r3, #1
 80059e8:	fa02 f303 	lsl.w	r3, r2, r3
 80059ec:	e00a      	b.n	8005a04 <HAL_ADC_ConfigChannel+0x14c>
 80059ee:	683b      	ldr	r3, [r7, #0]
 80059f0:	695a      	ldr	r2, [r3, #20]
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	68db      	ldr	r3, [r3, #12]
 80059f8:	089b      	lsrs	r3, r3, #2
 80059fa:	f003 0304 	and.w	r3, r3, #4
 80059fe:	005b      	lsls	r3, r3, #1
 8005a00:	fa02 f303 	lsl.w	r3, r2, r3
 8005a04:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8005a06:	683b      	ldr	r3, [r7, #0]
 8005a08:	691b      	ldr	r3, [r3, #16]
 8005a0a:	2b04      	cmp	r3, #4
 8005a0c:	d027      	beq.n	8005a5e <HAL_ADC_ConfigChannel+0x1a6>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	6818      	ldr	r0, [r3, #0]
 8005a12:	683b      	ldr	r3, [r7, #0]
 8005a14:	6919      	ldr	r1, [r3, #16]
 8005a16:	683b      	ldr	r3, [r7, #0]
 8005a18:	681a      	ldr	r2, [r3, #0]
 8005a1a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005a1c:	f7fe fd4c 	bl	80044b8 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	6818      	ldr	r0, [r3, #0]
 8005a24:	683b      	ldr	r3, [r7, #0]
 8005a26:	6919      	ldr	r1, [r3, #16]
 8005a28:	683b      	ldr	r3, [r7, #0]
 8005a2a:	7e5b      	ldrb	r3, [r3, #25]
 8005a2c:	2b01      	cmp	r3, #1
 8005a2e:	d102      	bne.n	8005a36 <HAL_ADC_ConfigChannel+0x17e>
 8005a30:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005a34:	e000      	b.n	8005a38 <HAL_ADC_ConfigChannel+0x180>
 8005a36:	2300      	movs	r3, #0
 8005a38:	461a      	mov	r2, r3
 8005a3a:	f7fe fd76 	bl	800452a <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	6818      	ldr	r0, [r3, #0]
 8005a42:	683b      	ldr	r3, [r7, #0]
 8005a44:	6919      	ldr	r1, [r3, #16]
 8005a46:	683b      	ldr	r3, [r7, #0]
 8005a48:	7e1b      	ldrb	r3, [r3, #24]
 8005a4a:	2b01      	cmp	r3, #1
 8005a4c:	d102      	bne.n	8005a54 <HAL_ADC_ConfigChannel+0x19c>
 8005a4e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005a52:	e000      	b.n	8005a56 <HAL_ADC_ConfigChannel+0x19e>
 8005a54:	2300      	movs	r3, #0
 8005a56:	461a      	mov	r2, r3
 8005a58:	f7fe fd4e 	bl	80044f8 <LL_ADC_SetDataRightShift>
 8005a5c:	e047      	b.n	8005aee <HAL_ADC_ConfigChannel+0x236>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005a64:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005a68:	683b      	ldr	r3, [r7, #0]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	069b      	lsls	r3, r3, #26
 8005a6e:	429a      	cmp	r2, r3
 8005a70:	d107      	bne.n	8005a82 <HAL_ADC_ConfigChannel+0x1ca>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8005a80:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005a88:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005a8c:	683b      	ldr	r3, [r7, #0]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	069b      	lsls	r3, r3, #26
 8005a92:	429a      	cmp	r2, r3
 8005a94:	d107      	bne.n	8005aa6 <HAL_ADC_ConfigChannel+0x1ee>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8005aa4:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005aac:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005ab0:	683b      	ldr	r3, [r7, #0]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	069b      	lsls	r3, r3, #26
 8005ab6:	429a      	cmp	r2, r3
 8005ab8:	d107      	bne.n	8005aca <HAL_ADC_ConfigChannel+0x212>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8005ac8:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005ad0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005ad4:	683b      	ldr	r3, [r7, #0]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	069b      	lsls	r3, r3, #26
 8005ada:	429a      	cmp	r2, r3
 8005adc:	d107      	bne.n	8005aee <HAL_ADC_ConfigChannel+0x236>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8005aec:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	4618      	mov	r0, r3
 8005af4:	f7fe fe96 	bl	8004824 <LL_ADC_IsEnabled>
 8005af8:	4603      	mov	r3, r0
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	f040 820d 	bne.w	8005f1a <HAL_ADC_ConfigChannel+0x662>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	6818      	ldr	r0, [r3, #0]
 8005b04:	683b      	ldr	r3, [r7, #0]
 8005b06:	6819      	ldr	r1, [r3, #0]
 8005b08:	683b      	ldr	r3, [r7, #0]
 8005b0a:	68db      	ldr	r3, [r3, #12]
 8005b0c:	461a      	mov	r2, r3
 8005b0e:	f7fe fda5 	bl	800465c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8005b12:	683b      	ldr	r3, [r7, #0]
 8005b14:	68db      	ldr	r3, [r3, #12]
 8005b16:	4a0c      	ldr	r2, [pc, #48]	; (8005b48 <HAL_ADC_ConfigChannel+0x290>)
 8005b18:	4293      	cmp	r3, r2
 8005b1a:	f040 8133 	bne.w	8005d84 <HAL_ADC_ConfigChannel+0x4cc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8005b22:	683b      	ldr	r3, [r7, #0]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d110      	bne.n	8005b50 <HAL_ADC_ConfigChannel+0x298>
 8005b2e:	683b      	ldr	r3, [r7, #0]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	0e9b      	lsrs	r3, r3, #26
 8005b34:	3301      	adds	r3, #1
 8005b36:	f003 031f 	and.w	r3, r3, #31
 8005b3a:	2b09      	cmp	r3, #9
 8005b3c:	bf94      	ite	ls
 8005b3e:	2301      	movls	r3, #1
 8005b40:	2300      	movhi	r3, #0
 8005b42:	b2db      	uxtb	r3, r3
 8005b44:	e01e      	b.n	8005b84 <HAL_ADC_ConfigChannel+0x2cc>
 8005b46:	bf00      	nop
 8005b48:	47ff0000 	.word	0x47ff0000
 8005b4c:	5c001000 	.word	0x5c001000
 8005b50:	683b      	ldr	r3, [r7, #0]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b56:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005b58:	fa93 f3a3 	rbit	r3, r3
 8005b5c:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8005b5e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005b60:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8005b62:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d101      	bne.n	8005b6c <HAL_ADC_ConfigChannel+0x2b4>
    return 32U;
 8005b68:	2320      	movs	r3, #32
 8005b6a:	e003      	b.n	8005b74 <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 8005b6c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005b6e:	fab3 f383 	clz	r3, r3
 8005b72:	b2db      	uxtb	r3, r3
 8005b74:	3301      	adds	r3, #1
 8005b76:	f003 031f 	and.w	r3, r3, #31
 8005b7a:	2b09      	cmp	r3, #9
 8005b7c:	bf94      	ite	ls
 8005b7e:	2301      	movls	r3, #1
 8005b80:	2300      	movhi	r3, #0
 8005b82:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d079      	beq.n	8005c7c <HAL_ADC_ConfigChannel+0x3c4>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8005b88:	683b      	ldr	r3, [r7, #0]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d107      	bne.n	8005ba4 <HAL_ADC_ConfigChannel+0x2ec>
 8005b94:	683b      	ldr	r3, [r7, #0]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	0e9b      	lsrs	r3, r3, #26
 8005b9a:	3301      	adds	r3, #1
 8005b9c:	069b      	lsls	r3, r3, #26
 8005b9e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005ba2:	e015      	b.n	8005bd0 <HAL_ADC_ConfigChannel+0x318>
 8005ba4:	683b      	ldr	r3, [r7, #0]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005baa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005bac:	fa93 f3a3 	rbit	r3, r3
 8005bb0:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8005bb2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005bb4:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8005bb6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d101      	bne.n	8005bc0 <HAL_ADC_ConfigChannel+0x308>
    return 32U;
 8005bbc:	2320      	movs	r3, #32
 8005bbe:	e003      	b.n	8005bc8 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8005bc0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005bc2:	fab3 f383 	clz	r3, r3
 8005bc6:	b2db      	uxtb	r3, r3
 8005bc8:	3301      	adds	r3, #1
 8005bca:	069b      	lsls	r3, r3, #26
 8005bcc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005bd0:	683b      	ldr	r3, [r7, #0]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d109      	bne.n	8005bf0 <HAL_ADC_ConfigChannel+0x338>
 8005bdc:	683b      	ldr	r3, [r7, #0]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	0e9b      	lsrs	r3, r3, #26
 8005be2:	3301      	adds	r3, #1
 8005be4:	f003 031f 	and.w	r3, r3, #31
 8005be8:	2101      	movs	r1, #1
 8005bea:	fa01 f303 	lsl.w	r3, r1, r3
 8005bee:	e017      	b.n	8005c20 <HAL_ADC_ConfigChannel+0x368>
 8005bf0:	683b      	ldr	r3, [r7, #0]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005bf6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005bf8:	fa93 f3a3 	rbit	r3, r3
 8005bfc:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8005bfe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005c00:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8005c02:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d101      	bne.n	8005c0c <HAL_ADC_ConfigChannel+0x354>
    return 32U;
 8005c08:	2320      	movs	r3, #32
 8005c0a:	e003      	b.n	8005c14 <HAL_ADC_ConfigChannel+0x35c>
  return __builtin_clz(value);
 8005c0c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005c0e:	fab3 f383 	clz	r3, r3
 8005c12:	b2db      	uxtb	r3, r3
 8005c14:	3301      	adds	r3, #1
 8005c16:	f003 031f 	and.w	r3, r3, #31
 8005c1a:	2101      	movs	r1, #1
 8005c1c:	fa01 f303 	lsl.w	r3, r1, r3
 8005c20:	ea42 0103 	orr.w	r1, r2, r3
 8005c24:	683b      	ldr	r3, [r7, #0]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d10a      	bne.n	8005c46 <HAL_ADC_ConfigChannel+0x38e>
 8005c30:	683b      	ldr	r3, [r7, #0]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	0e9b      	lsrs	r3, r3, #26
 8005c36:	3301      	adds	r3, #1
 8005c38:	f003 021f 	and.w	r2, r3, #31
 8005c3c:	4613      	mov	r3, r2
 8005c3e:	005b      	lsls	r3, r3, #1
 8005c40:	4413      	add	r3, r2
 8005c42:	051b      	lsls	r3, r3, #20
 8005c44:	e018      	b.n	8005c78 <HAL_ADC_ConfigChannel+0x3c0>
 8005c46:	683b      	ldr	r3, [r7, #0]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005c4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c4e:	fa93 f3a3 	rbit	r3, r3
 8005c52:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8005c54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c56:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8005c58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d101      	bne.n	8005c62 <HAL_ADC_ConfigChannel+0x3aa>
    return 32U;
 8005c5e:	2320      	movs	r3, #32
 8005c60:	e003      	b.n	8005c6a <HAL_ADC_ConfigChannel+0x3b2>
  return __builtin_clz(value);
 8005c62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c64:	fab3 f383 	clz	r3, r3
 8005c68:	b2db      	uxtb	r3, r3
 8005c6a:	3301      	adds	r3, #1
 8005c6c:	f003 021f 	and.w	r2, r3, #31
 8005c70:	4613      	mov	r3, r2
 8005c72:	005b      	lsls	r3, r3, #1
 8005c74:	4413      	add	r3, r2
 8005c76:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005c78:	430b      	orrs	r3, r1
 8005c7a:	e07e      	b.n	8005d7a <HAL_ADC_ConfigChannel+0x4c2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8005c7c:	683b      	ldr	r3, [r7, #0]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d107      	bne.n	8005c98 <HAL_ADC_ConfigChannel+0x3e0>
 8005c88:	683b      	ldr	r3, [r7, #0]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	0e9b      	lsrs	r3, r3, #26
 8005c8e:	3301      	adds	r3, #1
 8005c90:	069b      	lsls	r3, r3, #26
 8005c92:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005c96:	e015      	b.n	8005cc4 <HAL_ADC_ConfigChannel+0x40c>
 8005c98:	683b      	ldr	r3, [r7, #0]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005c9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ca0:	fa93 f3a3 	rbit	r3, r3
 8005ca4:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8005ca6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ca8:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8005caa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d101      	bne.n	8005cb4 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8005cb0:	2320      	movs	r3, #32
 8005cb2:	e003      	b.n	8005cbc <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8005cb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cb6:	fab3 f383 	clz	r3, r3
 8005cba:	b2db      	uxtb	r3, r3
 8005cbc:	3301      	adds	r3, #1
 8005cbe:	069b      	lsls	r3, r3, #26
 8005cc0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005cc4:	683b      	ldr	r3, [r7, #0]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d109      	bne.n	8005ce4 <HAL_ADC_ConfigChannel+0x42c>
 8005cd0:	683b      	ldr	r3, [r7, #0]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	0e9b      	lsrs	r3, r3, #26
 8005cd6:	3301      	adds	r3, #1
 8005cd8:	f003 031f 	and.w	r3, r3, #31
 8005cdc:	2101      	movs	r1, #1
 8005cde:	fa01 f303 	lsl.w	r3, r1, r3
 8005ce2:	e017      	b.n	8005d14 <HAL_ADC_ConfigChannel+0x45c>
 8005ce4:	683b      	ldr	r3, [r7, #0]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005cea:	69fb      	ldr	r3, [r7, #28]
 8005cec:	fa93 f3a3 	rbit	r3, r3
 8005cf0:	61bb      	str	r3, [r7, #24]
  return result;
 8005cf2:	69bb      	ldr	r3, [r7, #24]
 8005cf4:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8005cf6:	6a3b      	ldr	r3, [r7, #32]
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d101      	bne.n	8005d00 <HAL_ADC_ConfigChannel+0x448>
    return 32U;
 8005cfc:	2320      	movs	r3, #32
 8005cfe:	e003      	b.n	8005d08 <HAL_ADC_ConfigChannel+0x450>
  return __builtin_clz(value);
 8005d00:	6a3b      	ldr	r3, [r7, #32]
 8005d02:	fab3 f383 	clz	r3, r3
 8005d06:	b2db      	uxtb	r3, r3
 8005d08:	3301      	adds	r3, #1
 8005d0a:	f003 031f 	and.w	r3, r3, #31
 8005d0e:	2101      	movs	r1, #1
 8005d10:	fa01 f303 	lsl.w	r3, r1, r3
 8005d14:	ea42 0103 	orr.w	r1, r2, r3
 8005d18:	683b      	ldr	r3, [r7, #0]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d10d      	bne.n	8005d40 <HAL_ADC_ConfigChannel+0x488>
 8005d24:	683b      	ldr	r3, [r7, #0]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	0e9b      	lsrs	r3, r3, #26
 8005d2a:	3301      	adds	r3, #1
 8005d2c:	f003 021f 	and.w	r2, r3, #31
 8005d30:	4613      	mov	r3, r2
 8005d32:	005b      	lsls	r3, r3, #1
 8005d34:	4413      	add	r3, r2
 8005d36:	3b1e      	subs	r3, #30
 8005d38:	051b      	lsls	r3, r3, #20
 8005d3a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005d3e:	e01b      	b.n	8005d78 <HAL_ADC_ConfigChannel+0x4c0>
 8005d40:	683b      	ldr	r3, [r7, #0]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005d46:	693b      	ldr	r3, [r7, #16]
 8005d48:	fa93 f3a3 	rbit	r3, r3
 8005d4c:	60fb      	str	r3, [r7, #12]
  return result;
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8005d52:	697b      	ldr	r3, [r7, #20]
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d101      	bne.n	8005d5c <HAL_ADC_ConfigChannel+0x4a4>
    return 32U;
 8005d58:	2320      	movs	r3, #32
 8005d5a:	e003      	b.n	8005d64 <HAL_ADC_ConfigChannel+0x4ac>
  return __builtin_clz(value);
 8005d5c:	697b      	ldr	r3, [r7, #20]
 8005d5e:	fab3 f383 	clz	r3, r3
 8005d62:	b2db      	uxtb	r3, r3
 8005d64:	3301      	adds	r3, #1
 8005d66:	f003 021f 	and.w	r2, r3, #31
 8005d6a:	4613      	mov	r3, r2
 8005d6c:	005b      	lsls	r3, r3, #1
 8005d6e:	4413      	add	r3, r2
 8005d70:	3b1e      	subs	r3, #30
 8005d72:	051b      	lsls	r3, r3, #20
 8005d74:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005d78:	430b      	orrs	r3, r1
 8005d7a:	683a      	ldr	r2, [r7, #0]
 8005d7c:	6892      	ldr	r2, [r2, #8]
 8005d7e:	4619      	mov	r1, r3
 8005d80:	f7fe fc40 	bl	8004604 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8005d84:	683b      	ldr	r3, [r7, #0]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	f280 80c6 	bge.w	8005f1a <HAL_ADC_ConfigChannel+0x662>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	4a67      	ldr	r2, [pc, #412]	; (8005f30 <HAL_ADC_ConfigChannel+0x678>)
 8005d94:	4293      	cmp	r3, r2
 8005d96:	d004      	beq.n	8005da2 <HAL_ADC_ConfigChannel+0x4ea>
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	4a65      	ldr	r2, [pc, #404]	; (8005f34 <HAL_ADC_ConfigChannel+0x67c>)
 8005d9e:	4293      	cmp	r3, r2
 8005da0:	d101      	bne.n	8005da6 <HAL_ADC_ConfigChannel+0x4ee>
 8005da2:	4b65      	ldr	r3, [pc, #404]	; (8005f38 <HAL_ADC_ConfigChannel+0x680>)
 8005da4:	e000      	b.n	8005da8 <HAL_ADC_ConfigChannel+0x4f0>
 8005da6:	4b65      	ldr	r3, [pc, #404]	; (8005f3c <HAL_ADC_ConfigChannel+0x684>)
 8005da8:	4618      	mov	r0, r3
 8005daa:	f7fe fb77 	bl	800449c <LL_ADC_GetCommonPathInternalCh>
 8005dae:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	4a5e      	ldr	r2, [pc, #376]	; (8005f30 <HAL_ADC_ConfigChannel+0x678>)
 8005db6:	4293      	cmp	r3, r2
 8005db8:	d004      	beq.n	8005dc4 <HAL_ADC_ConfigChannel+0x50c>
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	4a5d      	ldr	r2, [pc, #372]	; (8005f34 <HAL_ADC_ConfigChannel+0x67c>)
 8005dc0:	4293      	cmp	r3, r2
 8005dc2:	d10e      	bne.n	8005de2 <HAL_ADC_ConfigChannel+0x52a>
 8005dc4:	485a      	ldr	r0, [pc, #360]	; (8005f30 <HAL_ADC_ConfigChannel+0x678>)
 8005dc6:	f7fe fd2d 	bl	8004824 <LL_ADC_IsEnabled>
 8005dca:	4604      	mov	r4, r0
 8005dcc:	4859      	ldr	r0, [pc, #356]	; (8005f34 <HAL_ADC_ConfigChannel+0x67c>)
 8005dce:	f7fe fd29 	bl	8004824 <LL_ADC_IsEnabled>
 8005dd2:	4603      	mov	r3, r0
 8005dd4:	4323      	orrs	r3, r4
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	bf0c      	ite	eq
 8005dda:	2301      	moveq	r3, #1
 8005ddc:	2300      	movne	r3, #0
 8005dde:	b2db      	uxtb	r3, r3
 8005de0:	e008      	b.n	8005df4 <HAL_ADC_ConfigChannel+0x53c>
 8005de2:	4857      	ldr	r0, [pc, #348]	; (8005f40 <HAL_ADC_ConfigChannel+0x688>)
 8005de4:	f7fe fd1e 	bl	8004824 <LL_ADC_IsEnabled>
 8005de8:	4603      	mov	r3, r0
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	bf0c      	ite	eq
 8005dee:	2301      	moveq	r3, #1
 8005df0:	2300      	movne	r3, #0
 8005df2:	b2db      	uxtb	r3, r3
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d07d      	beq.n	8005ef4 <HAL_ADC_ConfigChannel+0x63c>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8005df8:	683b      	ldr	r3, [r7, #0]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	4a51      	ldr	r2, [pc, #324]	; (8005f44 <HAL_ADC_ConfigChannel+0x68c>)
 8005dfe:	4293      	cmp	r3, r2
 8005e00:	d130      	bne.n	8005e64 <HAL_ADC_ConfigChannel+0x5ac>
 8005e02:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e04:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d12b      	bne.n	8005e64 <HAL_ADC_ConfigChannel+0x5ac>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	4a4b      	ldr	r2, [pc, #300]	; (8005f40 <HAL_ADC_ConfigChannel+0x688>)
 8005e12:	4293      	cmp	r3, r2
 8005e14:	f040 8081 	bne.w	8005f1a <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	4a44      	ldr	r2, [pc, #272]	; (8005f30 <HAL_ADC_ConfigChannel+0x678>)
 8005e1e:	4293      	cmp	r3, r2
 8005e20:	d004      	beq.n	8005e2c <HAL_ADC_ConfigChannel+0x574>
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	4a43      	ldr	r2, [pc, #268]	; (8005f34 <HAL_ADC_ConfigChannel+0x67c>)
 8005e28:	4293      	cmp	r3, r2
 8005e2a:	d101      	bne.n	8005e30 <HAL_ADC_ConfigChannel+0x578>
 8005e2c:	4a42      	ldr	r2, [pc, #264]	; (8005f38 <HAL_ADC_ConfigChannel+0x680>)
 8005e2e:	e000      	b.n	8005e32 <HAL_ADC_ConfigChannel+0x57a>
 8005e30:	4a42      	ldr	r2, [pc, #264]	; (8005f3c <HAL_ADC_ConfigChannel+0x684>)
 8005e32:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e34:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005e38:	4619      	mov	r1, r3
 8005e3a:	4610      	mov	r0, r2
 8005e3c:	f7fe fb1b 	bl	8004476 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005e40:	4b41      	ldr	r3, [pc, #260]	; (8005f48 <HAL_ADC_ConfigChannel+0x690>)
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	099b      	lsrs	r3, r3, #6
 8005e46:	4a41      	ldr	r2, [pc, #260]	; (8005f4c <HAL_ADC_ConfigChannel+0x694>)
 8005e48:	fba2 2303 	umull	r2, r3, r2, r3
 8005e4c:	099b      	lsrs	r3, r3, #6
 8005e4e:	3301      	adds	r3, #1
 8005e50:	005b      	lsls	r3, r3, #1
 8005e52:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8005e54:	e002      	b.n	8005e5c <HAL_ADC_ConfigChannel+0x5a4>
              {
                wait_loop_index--;
 8005e56:	68bb      	ldr	r3, [r7, #8]
 8005e58:	3b01      	subs	r3, #1
 8005e5a:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8005e5c:	68bb      	ldr	r3, [r7, #8]
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d1f9      	bne.n	8005e56 <HAL_ADC_ConfigChannel+0x59e>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005e62:	e05a      	b.n	8005f1a <HAL_ADC_ConfigChannel+0x662>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8005e64:	683b      	ldr	r3, [r7, #0]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	4a39      	ldr	r2, [pc, #228]	; (8005f50 <HAL_ADC_ConfigChannel+0x698>)
 8005e6a:	4293      	cmp	r3, r2
 8005e6c:	d11e      	bne.n	8005eac <HAL_ADC_ConfigChannel+0x5f4>
 8005e6e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e70:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d119      	bne.n	8005eac <HAL_ADC_ConfigChannel+0x5f4>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	4a30      	ldr	r2, [pc, #192]	; (8005f40 <HAL_ADC_ConfigChannel+0x688>)
 8005e7e:	4293      	cmp	r3, r2
 8005e80:	d14b      	bne.n	8005f1a <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	4a2a      	ldr	r2, [pc, #168]	; (8005f30 <HAL_ADC_ConfigChannel+0x678>)
 8005e88:	4293      	cmp	r3, r2
 8005e8a:	d004      	beq.n	8005e96 <HAL_ADC_ConfigChannel+0x5de>
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	4a28      	ldr	r2, [pc, #160]	; (8005f34 <HAL_ADC_ConfigChannel+0x67c>)
 8005e92:	4293      	cmp	r3, r2
 8005e94:	d101      	bne.n	8005e9a <HAL_ADC_ConfigChannel+0x5e2>
 8005e96:	4a28      	ldr	r2, [pc, #160]	; (8005f38 <HAL_ADC_ConfigChannel+0x680>)
 8005e98:	e000      	b.n	8005e9c <HAL_ADC_ConfigChannel+0x5e4>
 8005e9a:	4a28      	ldr	r2, [pc, #160]	; (8005f3c <HAL_ADC_ConfigChannel+0x684>)
 8005e9c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e9e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005ea2:	4619      	mov	r1, r3
 8005ea4:	4610      	mov	r0, r2
 8005ea6:	f7fe fae6 	bl	8004476 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005eaa:	e036      	b.n	8005f1a <HAL_ADC_ConfigChannel+0x662>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8005eac:	683b      	ldr	r3, [r7, #0]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	4a28      	ldr	r2, [pc, #160]	; (8005f54 <HAL_ADC_ConfigChannel+0x69c>)
 8005eb2:	4293      	cmp	r3, r2
 8005eb4:	d131      	bne.n	8005f1a <HAL_ADC_ConfigChannel+0x662>
 8005eb6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005eb8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d12c      	bne.n	8005f1a <HAL_ADC_ConfigChannel+0x662>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	4a1e      	ldr	r2, [pc, #120]	; (8005f40 <HAL_ADC_ConfigChannel+0x688>)
 8005ec6:	4293      	cmp	r3, r2
 8005ec8:	d127      	bne.n	8005f1a <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	4a18      	ldr	r2, [pc, #96]	; (8005f30 <HAL_ADC_ConfigChannel+0x678>)
 8005ed0:	4293      	cmp	r3, r2
 8005ed2:	d004      	beq.n	8005ede <HAL_ADC_ConfigChannel+0x626>
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	4a16      	ldr	r2, [pc, #88]	; (8005f34 <HAL_ADC_ConfigChannel+0x67c>)
 8005eda:	4293      	cmp	r3, r2
 8005edc:	d101      	bne.n	8005ee2 <HAL_ADC_ConfigChannel+0x62a>
 8005ede:	4a16      	ldr	r2, [pc, #88]	; (8005f38 <HAL_ADC_ConfigChannel+0x680>)
 8005ee0:	e000      	b.n	8005ee4 <HAL_ADC_ConfigChannel+0x62c>
 8005ee2:	4a16      	ldr	r2, [pc, #88]	; (8005f3c <HAL_ADC_ConfigChannel+0x684>)
 8005ee4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005ee6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005eea:	4619      	mov	r1, r3
 8005eec:	4610      	mov	r0, r2
 8005eee:	f7fe fac2 	bl	8004476 <LL_ADC_SetCommonPathInternalCh>
 8005ef2:	e012      	b.n	8005f1a <HAL_ADC_ConfigChannel+0x662>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ef8:	f043 0220 	orr.w	r2, r3, #32
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 8005f00:	2301      	movs	r3, #1
 8005f02:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8005f06:	e008      	b.n	8005f1a <HAL_ADC_ConfigChannel+0x662>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f0c:	f043 0220 	orr.w	r2, r3, #32
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8005f14:	2301      	movs	r3, #1
 8005f16:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	2200      	movs	r2, #0
 8005f1e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8005f22:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8005f26:	4618      	mov	r0, r3
 8005f28:	3784      	adds	r7, #132	; 0x84
 8005f2a:	46bd      	mov	sp, r7
 8005f2c:	bd90      	pop	{r4, r7, pc}
 8005f2e:	bf00      	nop
 8005f30:	40022000 	.word	0x40022000
 8005f34:	40022100 	.word	0x40022100
 8005f38:	40022300 	.word	0x40022300
 8005f3c:	58026300 	.word	0x58026300
 8005f40:	58026000 	.word	0x58026000
 8005f44:	cb840000 	.word	0xcb840000
 8005f48:	20000000 	.word	0x20000000
 8005f4c:	053e2d63 	.word	0x053e2d63
 8005f50:	c7520000 	.word	0xc7520000
 8005f54:	cfb80000 	.word	0xcfb80000

08005f58 <HAL_ADC_AnalogWDGConfig>:
  * @param hadc ADC handle
  * @param AnalogWDGConfig Structure of ADC analog watchdog configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_AnalogWDGConfig(ADC_HandleTypeDef *hadc, ADC_AnalogWDGConfTypeDef *AnalogWDGConfig)
{
 8005f58:	b580      	push	{r7, lr}
 8005f5a:	b094      	sub	sp, #80	; 0x50
 8005f5c:	af00      	add	r7, sp, #0
 8005f5e:	6078      	str	r0, [r7, #4]
 8005f60:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005f62:	2300      	movs	r3, #0
 8005f64:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_ANALOG_WATCHDOG_NUMBER(AnalogWDGConfig->WatchdogNumber));
  assert_param(IS_ADC_ANALOG_WATCHDOG_MODE(AnalogWDGConfig->WatchdogMode));
  assert_param(IS_FUNCTIONAL_STATE(AnalogWDGConfig->ITMode));

  if ((AnalogWDGConfig->WatchdogMode == ADC_ANALOGWATCHDOG_SINGLE_REG)     ||
 8005f68:	683b      	ldr	r3, [r7, #0]
 8005f6a:	685b      	ldr	r3, [r3, #4]
 8005f6c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005f70:	d003      	beq.n	8005f7a <HAL_ADC_AnalogWDGConfig+0x22>
      (AnalogWDGConfig->WatchdogMode == ADC_ANALOGWATCHDOG_SINGLE_INJEC)   ||
 8005f72:	683b      	ldr	r3, [r7, #0]
 8005f74:	685b      	ldr	r3, [r3, #4]
  if ((AnalogWDGConfig->WatchdogMode == ADC_ANALOGWATCHDOG_SINGLE_REG)     ||
 8005f76:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
      assert_param(IS_ADC_RANGE(ADC_GET_RESOLUTION(hadc), AnalogWDGConfig->LowThreshold));
    }
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005f80:	2b01      	cmp	r3, #1
 8005f82:	d101      	bne.n	8005f88 <HAL_ADC_AnalogWDGConfig+0x30>
 8005f84:	2302      	movs	r3, #2
 8005f86:	e304      	b.n	8006592 <HAL_ADC_AnalogWDGConfig+0x63a>
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	2201      	movs	r2, #1
 8005f8c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on ADC groups regular and injected:                  */
  /*  - Analog watchdog channels                                              */
  /*  - Analog watchdog thresholds                                            */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	4618      	mov	r0, r3
 8005f96:	f7fe fc93 	bl	80048c0 <LL_ADC_REG_IsConversionOngoing>
 8005f9a:	64b8      	str	r0, [r7, #72]	; 0x48
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	4618      	mov	r0, r3
 8005fa2:	f7fe fcb5 	bl	8004910 <LL_ADC_INJ_IsConversionOngoing>
 8005fa6:	6478      	str	r0, [r7, #68]	; 0x44
  if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8005fa8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	f040 82e2 	bne.w	8006574 <HAL_ADC_AnalogWDGConfig+0x61c>
      && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8005fb0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	f040 82de 	bne.w	8006574 <HAL_ADC_AnalogWDGConfig+0x61c>
     )
  {
    /* Analog watchdog configuration */
    if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_1)
 8005fb8:	683b      	ldr	r3, [r7, #0]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	4a9b      	ldr	r2, [pc, #620]	; (800622c <HAL_ADC_AnalogWDGConfig+0x2d4>)
 8005fbe:	4293      	cmp	r3, r2
 8005fc0:	f040 80fa 	bne.w	80061b8 <HAL_ADC_AnalogWDGConfig+0x260>
    {
      /* Configuration of analog watchdog:                                    */
      /*  - Set the analog watchdog enable mode: one or overall group of      */
      /*    channels, on groups regular and-or injected.                      */
      switch (AnalogWDGConfig->WatchdogMode)
 8005fc4:	683b      	ldr	r3, [r7, #0]
 8005fc6:	685b      	ldr	r3, [r3, #4]
 8005fc8:	f1b3 7fe0 	cmp.w	r3, #29360128	; 0x1c00000
 8005fcc:	d034      	beq.n	8006038 <HAL_ADC_AnalogWDGConfig+0xe0>
 8005fce:	f1b3 7fe0 	cmp.w	r3, #29360128	; 0x1c00000
 8005fd2:	d856      	bhi.n	8006082 <HAL_ADC_AnalogWDGConfig+0x12a>
 8005fd4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005fd8:	d04b      	beq.n	8006072 <HAL_ADC_AnalogWDGConfig+0x11a>
 8005fda:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005fde:	d850      	bhi.n	8006082 <HAL_ADC_AnalogWDGConfig+0x12a>
 8005fe0:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8005fe4:	d01b      	beq.n	800601e <HAL_ADC_AnalogWDGConfig+0xc6>
 8005fe6:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8005fea:	d84a      	bhi.n	8006082 <HAL_ADC_AnalogWDGConfig+0x12a>
 8005fec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005ff0:	d037      	beq.n	8006062 <HAL_ADC_AnalogWDGConfig+0x10a>
 8005ff2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005ff6:	d844      	bhi.n	8006082 <HAL_ADC_AnalogWDGConfig+0x12a>
 8005ff8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005ffc:	d029      	beq.n	8006052 <HAL_ADC_AnalogWDGConfig+0xfa>
 8005ffe:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8006002:	d13e      	bne.n	8006082 <HAL_ADC_AnalogWDGConfig+0x12a>
      {
        case ADC_ANALOGWATCHDOG_SINGLE_REG:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, __LL_ADC_ANALOGWD_CHANNEL_GROUP(AnalogWDGConfig->Channel,
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	6818      	ldr	r0, [r3, #0]
 8006008:	683b      	ldr	r3, [r7, #0]
 800600a:	689b      	ldr	r3, [r3, #8]
 800600c:	f023 737c 	bic.w	r3, r3, #66060288	; 0x3f00000
 8006010:	f443 0340 	orr.w	r3, r3, #12582912	; 0xc00000
 8006014:	461a      	mov	r2, r3
 8006016:	4985      	ldr	r1, [pc, #532]	; (800622c <HAL_ADC_AnalogWDGConfig+0x2d4>)
 8006018:	f7fe fb44 	bl	80046a4 <LL_ADC_SetAnalogWDMonitChannels>
                                          LL_ADC_GROUP_REGULAR));
          break;
 800601c:	e039      	b.n	8006092 <HAL_ADC_AnalogWDGConfig+0x13a>

        case ADC_ANALOGWATCHDOG_SINGLE_INJEC:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, __LL_ADC_ANALOGWD_CHANNEL_GROUP(AnalogWDGConfig->Channel,
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	6818      	ldr	r0, [r3, #0]
 8006022:	683b      	ldr	r3, [r7, #0]
 8006024:	689b      	ldr	r3, [r3, #8]
 8006026:	f023 737c 	bic.w	r3, r3, #66060288	; 0x3f00000
 800602a:	f043 73a0 	orr.w	r3, r3, #20971520	; 0x1400000
 800602e:	461a      	mov	r2, r3
 8006030:	497e      	ldr	r1, [pc, #504]	; (800622c <HAL_ADC_AnalogWDGConfig+0x2d4>)
 8006032:	f7fe fb37 	bl	80046a4 <LL_ADC_SetAnalogWDMonitChannels>
                                          LL_ADC_GROUP_INJECTED));
          break;
 8006036:	e02c      	b.n	8006092 <HAL_ADC_AnalogWDGConfig+0x13a>

        case ADC_ANALOGWATCHDOG_SINGLE_REGINJEC:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, __LL_ADC_ANALOGWD_CHANNEL_GROUP(AnalogWDGConfig->Channel,
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	6818      	ldr	r0, [r3, #0]
 800603c:	683b      	ldr	r3, [r7, #0]
 800603e:	689b      	ldr	r3, [r3, #8]
 8006040:	f023 737c 	bic.w	r3, r3, #66060288	; 0x3f00000
 8006044:	f043 73e0 	orr.w	r3, r3, #29360128	; 0x1c00000
 8006048:	461a      	mov	r2, r3
 800604a:	4978      	ldr	r1, [pc, #480]	; (800622c <HAL_ADC_AnalogWDGConfig+0x2d4>)
 800604c:	f7fe fb2a 	bl	80046a4 <LL_ADC_SetAnalogWDMonitChannels>
                                          LL_ADC_GROUP_REGULAR_INJECTED));
          break;
 8006050:	e01f      	b.n	8006092 <HAL_ADC_AnalogWDGConfig+0x13a>

        case ADC_ANALOGWATCHDOG_ALL_REG:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, LL_ADC_AWD_ALL_CHANNELS_REG);
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	4a76      	ldr	r2, [pc, #472]	; (8006230 <HAL_ADC_AnalogWDGConfig+0x2d8>)
 8006058:	4974      	ldr	r1, [pc, #464]	; (800622c <HAL_ADC_AnalogWDGConfig+0x2d4>)
 800605a:	4618      	mov	r0, r3
 800605c:	f7fe fb22 	bl	80046a4 <LL_ADC_SetAnalogWDMonitChannels>
          break;
 8006060:	e017      	b.n	8006092 <HAL_ADC_AnalogWDGConfig+0x13a>

        case ADC_ANALOGWATCHDOG_ALL_INJEC:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, LL_ADC_AWD_ALL_CHANNELS_INJ);
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	4a73      	ldr	r2, [pc, #460]	; (8006234 <HAL_ADC_AnalogWDGConfig+0x2dc>)
 8006068:	4970      	ldr	r1, [pc, #448]	; (800622c <HAL_ADC_AnalogWDGConfig+0x2d4>)
 800606a:	4618      	mov	r0, r3
 800606c:	f7fe fb1a 	bl	80046a4 <LL_ADC_SetAnalogWDMonitChannels>
          break;
 8006070:	e00f      	b.n	8006092 <HAL_ADC_AnalogWDGConfig+0x13a>

        case ADC_ANALOGWATCHDOG_ALL_REGINJEC:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, LL_ADC_AWD_ALL_CHANNELS_REG_INJ);
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	4a70      	ldr	r2, [pc, #448]	; (8006238 <HAL_ADC_AnalogWDGConfig+0x2e0>)
 8006078:	496c      	ldr	r1, [pc, #432]	; (800622c <HAL_ADC_AnalogWDGConfig+0x2d4>)
 800607a:	4618      	mov	r0, r3
 800607c:	f7fe fb12 	bl	80046a4 <LL_ADC_SetAnalogWDMonitChannels>
          break;
 8006080:	e007      	b.n	8006092 <HAL_ADC_AnalogWDGConfig+0x13a>

        default: /* ADC_ANALOGWATCHDOG_NONE */
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, LL_ADC_AWD_DISABLE);
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	2200      	movs	r2, #0
 8006088:	4968      	ldr	r1, [pc, #416]	; (800622c <HAL_ADC_AnalogWDGConfig+0x2d4>)
 800608a:	4618      	mov	r0, r3
 800608c:	f7fe fb0a 	bl	80046a4 <LL_ADC_SetAnalogWDMonitChannels>
          break;
 8006090:	bf00      	nop
      }

      /* Shift the offset in function of the selected ADC resolution:         */
      /* Thresholds have to be left-aligned on bit 11, the LSB (right bits)   */
      /* are set to 0                                                         */
      tmpAWDHighThresholdShifted = ADC_AWD1THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->HighThreshold);
 8006092:	4b6a      	ldr	r3, [pc, #424]	; (800623c <HAL_ADC_AnalogWDGConfig+0x2e4>)
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800609a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800609e:	d10b      	bne.n	80060b8 <HAL_ADC_AnalogWDGConfig+0x160>
 80060a0:	683b      	ldr	r3, [r7, #0]
 80060a2:	691a      	ldr	r2, [r3, #16]
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	68db      	ldr	r3, [r3, #12]
 80060aa:	089b      	lsrs	r3, r3, #2
 80060ac:	f003 0307 	and.w	r3, r3, #7
 80060b0:	005b      	lsls	r3, r3, #1
 80060b2:	fa02 f303 	lsl.w	r3, r2, r3
 80060b6:	e01d      	b.n	80060f4 <HAL_ADC_AnalogWDGConfig+0x19c>
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	68db      	ldr	r3, [r3, #12]
 80060be:	f003 0310 	and.w	r3, r3, #16
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d10b      	bne.n	80060de <HAL_ADC_AnalogWDGConfig+0x186>
 80060c6:	683b      	ldr	r3, [r7, #0]
 80060c8:	691a      	ldr	r2, [r3, #16]
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	68db      	ldr	r3, [r3, #12]
 80060d0:	089b      	lsrs	r3, r3, #2
 80060d2:	f003 0307 	and.w	r3, r3, #7
 80060d6:	005b      	lsls	r3, r3, #1
 80060d8:	fa02 f303 	lsl.w	r3, r2, r3
 80060dc:	e00a      	b.n	80060f4 <HAL_ADC_AnalogWDGConfig+0x19c>
 80060de:	683b      	ldr	r3, [r7, #0]
 80060e0:	691a      	ldr	r2, [r3, #16]
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	68db      	ldr	r3, [r3, #12]
 80060e8:	089b      	lsrs	r3, r3, #2
 80060ea:	f003 0304 	and.w	r3, r3, #4
 80060ee:	005b      	lsls	r3, r3, #1
 80060f0:	fa02 f303 	lsl.w	r3, r2, r3
 80060f4:	643b      	str	r3, [r7, #64]	; 0x40
      tmpAWDLowThresholdShifted  = ADC_AWD1THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->LowThreshold);
 80060f6:	4b51      	ldr	r3, [pc, #324]	; (800623c <HAL_ADC_AnalogWDGConfig+0x2e4>)
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80060fe:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006102:	d10b      	bne.n	800611c <HAL_ADC_AnalogWDGConfig+0x1c4>
 8006104:	683b      	ldr	r3, [r7, #0]
 8006106:	695a      	ldr	r2, [r3, #20]
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	68db      	ldr	r3, [r3, #12]
 800610e:	089b      	lsrs	r3, r3, #2
 8006110:	f003 0307 	and.w	r3, r3, #7
 8006114:	005b      	lsls	r3, r3, #1
 8006116:	fa02 f303 	lsl.w	r3, r2, r3
 800611a:	e01d      	b.n	8006158 <HAL_ADC_AnalogWDGConfig+0x200>
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	68db      	ldr	r3, [r3, #12]
 8006122:	f003 0310 	and.w	r3, r3, #16
 8006126:	2b00      	cmp	r3, #0
 8006128:	d10b      	bne.n	8006142 <HAL_ADC_AnalogWDGConfig+0x1ea>
 800612a:	683b      	ldr	r3, [r7, #0]
 800612c:	695a      	ldr	r2, [r3, #20]
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	68db      	ldr	r3, [r3, #12]
 8006134:	089b      	lsrs	r3, r3, #2
 8006136:	f003 0307 	and.w	r3, r3, #7
 800613a:	005b      	lsls	r3, r3, #1
 800613c:	fa02 f303 	lsl.w	r3, r2, r3
 8006140:	e00a      	b.n	8006158 <HAL_ADC_AnalogWDGConfig+0x200>
 8006142:	683b      	ldr	r3, [r7, #0]
 8006144:	695a      	ldr	r2, [r3, #20]
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	68db      	ldr	r3, [r3, #12]
 800614c:	089b      	lsrs	r3, r3, #2
 800614e:	f003 0304 	and.w	r3, r3, #4
 8006152:	005b      	lsls	r3, r3, #1
 8006154:	fa02 f303 	lsl.w	r3, r2, r3
 8006158:	63fb      	str	r3, [r7, #60]	; 0x3c

        MODIFY_REG(hadc->Instance->LTR1_TR1,  ADC_LTR_LT, tmpAWDLowThresholdShifted);
        MODIFY_REG(hadc->Instance->HTR1_TR2,  ADC_HTR_HT, tmpAWDHighThresholdShifted);
      }
#else
      MODIFY_REG(hadc->Instance->LTR1,  ADC_LTR_LT, tmpAWDLowThresholdShifted);
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	6a1b      	ldr	r3, [r3, #32]
 8006160:	f003 417c 	and.w	r1, r3, #4227858432	; 0xfc000000
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800616a:	430a      	orrs	r2, r1
 800616c:	621a      	str	r2, [r3, #32]
      MODIFY_REG(hadc->Instance->HTR1,  ADC_HTR_HT, tmpAWDHighThresholdShifted);
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006174:	f003 417c 	and.w	r1, r3, #4227858432	; 0xfc000000
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800617e:	430a      	orrs	r2, r1
 8006180:	625a      	str	r2, [r3, #36]	; 0x24
#endif

      /* Update state, clear previous result related to AWD1 */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006186:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	655a      	str	r2, [r3, #84]	; 0x54

      /* Clear flag ADC analog watchdog */
      /* Note: Flag cleared Clear the ADC Analog watchdog flag to be ready  */
      /* to use for HAL_ADC_IRQHandler() or HAL_ADC_PollForEvent()          */
      /* (in case left enabled by previous ADC operations).                 */
      LL_ADC_ClearFlag_AWD1(hadc->Instance);
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	4618      	mov	r0, r3
 8006194:	f7fe fbcf 	bl	8004936 <LL_ADC_ClearFlag_AWD1>

      /* Configure ADC analog watchdog interrupt */
      if (AnalogWDGConfig->ITMode == ENABLE)
 8006198:	683b      	ldr	r3, [r7, #0]
 800619a:	7b1b      	ldrb	r3, [r3, #12]
 800619c:	2b01      	cmp	r3, #1
 800619e:	d105      	bne.n	80061ac <HAL_ADC_AnalogWDGConfig+0x254>
      {
        LL_ADC_EnableIT_AWD1(hadc->Instance);
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	4618      	mov	r0, r3
 80061a6:	f7fe fbef 	bl	8004988 <LL_ADC_EnableIT_AWD1>
    if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_1)
 80061aa:	e1ec      	b.n	8006586 <HAL_ADC_AnalogWDGConfig+0x62e>
      }
      else
      {
        LL_ADC_DisableIT_AWD1(hadc->Instance);
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	4618      	mov	r0, r3
 80061b2:	f7fe fc19 	bl	80049e8 <LL_ADC_DisableIT_AWD1>
    if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_1)
 80061b6:	e1e6      	b.n	8006586 <HAL_ADC_AnalogWDGConfig+0x62e>
      }
    }
    /* Case of ADC_ANALOGWATCHDOG_2 or ADC_ANALOGWATCHDOG_3 */
    else
    {
      switch (AnalogWDGConfig->WatchdogMode)
 80061b8:	683b      	ldr	r3, [r7, #0]
 80061ba:	685b      	ldr	r3, [r3, #4]
 80061bc:	f1b3 7fe0 	cmp.w	r3, #29360128	; 0x1c00000
 80061c0:	d020      	beq.n	8006204 <HAL_ADC_AnalogWDGConfig+0x2ac>
 80061c2:	f1b3 7fe0 	cmp.w	r3, #29360128	; 0x1c00000
 80061c6:	f200 80f3 	bhi.w	80063b0 <HAL_ADC_AnalogWDGConfig+0x458>
 80061ca:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80061ce:	f000 808a 	beq.w	80062e6 <HAL_ADC_AnalogWDGConfig+0x38e>
 80061d2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80061d6:	f200 80eb 	bhi.w	80063b0 <HAL_ADC_AnalogWDGConfig+0x458>
 80061da:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 80061de:	d011      	beq.n	8006204 <HAL_ADC_AnalogWDGConfig+0x2ac>
 80061e0:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 80061e4:	f200 80e4 	bhi.w	80063b0 <HAL_ADC_AnalogWDGConfig+0x458>
 80061e8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80061ec:	d07b      	beq.n	80062e6 <HAL_ADC_AnalogWDGConfig+0x38e>
 80061ee:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80061f2:	f200 80dd 	bhi.w	80063b0 <HAL_ADC_AnalogWDGConfig+0x458>
 80061f6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80061fa:	d074      	beq.n	80062e6 <HAL_ADC_AnalogWDGConfig+0x38e>
 80061fc:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8006200:	f040 80d6 	bne.w	80063b0 <HAL_ADC_AnalogWDGConfig+0x458>
        case ADC_ANALOGWATCHDOG_SINGLE_REG:
        case ADC_ANALOGWATCHDOG_SINGLE_INJEC:
        case ADC_ANALOGWATCHDOG_SINGLE_REGINJEC:
          /* Update AWD by bitfield to keep the possibility to monitor        */
          /* several channels by successive calls of this function.           */
          if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_2)
 8006204:	683b      	ldr	r3, [r7, #0]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	4a0d      	ldr	r2, [pc, #52]	; (8006240 <HAL_ADC_AnalogWDGConfig+0x2e8>)
 800620a:	4293      	cmp	r3, r2
 800620c:	d13b      	bne.n	8006286 <HAL_ADC_AnalogWDGConfig+0x32e>
          {
            SET_BIT(hadc->Instance->AWD2CR, (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(AnalogWDGConfig->Channel) & 0x1FUL)));
 800620e:	683b      	ldr	r3, [r7, #0]
 8006210:	689b      	ldr	r3, [r3, #8]
 8006212:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006216:	2b00      	cmp	r3, #0
 8006218:	d114      	bne.n	8006244 <HAL_ADC_AnalogWDGConfig+0x2ec>
 800621a:	683b      	ldr	r3, [r7, #0]
 800621c:	689b      	ldr	r3, [r3, #8]
 800621e:	0e9b      	lsrs	r3, r3, #26
 8006220:	f003 031f 	and.w	r3, r3, #31
 8006224:	2201      	movs	r2, #1
 8006226:	fa02 f303 	lsl.w	r3, r2, r3
 800622a:	e022      	b.n	8006272 <HAL_ADC_AnalogWDGConfig+0x31a>
 800622c:	7dc00000 	.word	0x7dc00000
 8006230:	008fffff 	.word	0x008fffff
 8006234:	010fffff 	.word	0x010fffff
 8006238:	018fffff 	.word	0x018fffff
 800623c:	5c001000 	.word	0x5c001000
 8006240:	001fffff 	.word	0x001fffff
 8006244:	683b      	ldr	r3, [r7, #0]
 8006246:	689b      	ldr	r3, [r3, #8]
 8006248:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800624a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800624c:	fa93 f3a3 	rbit	r3, r3
 8006250:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8006252:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006254:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8006256:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006258:	2b00      	cmp	r3, #0
 800625a:	d101      	bne.n	8006260 <HAL_ADC_AnalogWDGConfig+0x308>
    return 32U;
 800625c:	2320      	movs	r3, #32
 800625e:	e003      	b.n	8006268 <HAL_ADC_AnalogWDGConfig+0x310>
  return __builtin_clz(value);
 8006260:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006262:	fab3 f383 	clz	r3, r3
 8006266:	b2db      	uxtb	r3, r3
 8006268:	f003 031f 	and.w	r3, r3, #31
 800626c:	2201      	movs	r2, #1
 800626e:	fa02 f303 	lsl.w	r3, r2, r3
 8006272:	687a      	ldr	r2, [r7, #4]
 8006274:	6812      	ldr	r2, [r2, #0]
 8006276:	f8d2 10a0 	ldr.w	r1, [r2, #160]	; 0xa0
 800627a:	687a      	ldr	r2, [r7, #4]
 800627c:	6812      	ldr	r2, [r2, #0]
 800627e:	430b      	orrs	r3, r1
 8006280:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
          }
          else
          {
            SET_BIT(hadc->Instance->AWD3CR, (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(AnalogWDGConfig->Channel) & 0x1FUL)));
          }
          break;
 8006284:	e09d      	b.n	80063c2 <HAL_ADC_AnalogWDGConfig+0x46a>
            SET_BIT(hadc->Instance->AWD3CR, (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(AnalogWDGConfig->Channel) & 0x1FUL)));
 8006286:	683b      	ldr	r3, [r7, #0]
 8006288:	689b      	ldr	r3, [r3, #8]
 800628a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800628e:	2b00      	cmp	r3, #0
 8006290:	d108      	bne.n	80062a4 <HAL_ADC_AnalogWDGConfig+0x34c>
 8006292:	683b      	ldr	r3, [r7, #0]
 8006294:	689b      	ldr	r3, [r3, #8]
 8006296:	0e9b      	lsrs	r3, r3, #26
 8006298:	f003 031f 	and.w	r3, r3, #31
 800629c:	2201      	movs	r2, #1
 800629e:	fa02 f303 	lsl.w	r3, r2, r3
 80062a2:	e016      	b.n	80062d2 <HAL_ADC_AnalogWDGConfig+0x37a>
 80062a4:	683b      	ldr	r3, [r7, #0]
 80062a6:	689b      	ldr	r3, [r3, #8]
 80062a8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80062aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062ac:	fa93 f3a3 	rbit	r3, r3
 80062b0:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 80062b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 80062b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d101      	bne.n	80062c0 <HAL_ADC_AnalogWDGConfig+0x368>
    return 32U;
 80062bc:	2320      	movs	r3, #32
 80062be:	e003      	b.n	80062c8 <HAL_ADC_AnalogWDGConfig+0x370>
  return __builtin_clz(value);
 80062c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062c2:	fab3 f383 	clz	r3, r3
 80062c6:	b2db      	uxtb	r3, r3
 80062c8:	f003 031f 	and.w	r3, r3, #31
 80062cc:	2201      	movs	r2, #1
 80062ce:	fa02 f303 	lsl.w	r3, r2, r3
 80062d2:	687a      	ldr	r2, [r7, #4]
 80062d4:	6812      	ldr	r2, [r2, #0]
 80062d6:	f8d2 10a4 	ldr.w	r1, [r2, #164]	; 0xa4
 80062da:	687a      	ldr	r2, [r7, #4]
 80062dc:	6812      	ldr	r2, [r2, #0]
 80062de:	430b      	orrs	r3, r1
 80062e0:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
          break;
 80062e4:	e06d      	b.n	80063c2 <HAL_ADC_AnalogWDGConfig+0x46a>
          else
          {
#endif  /*ADC_VER_V5_V90*/
            /* Update AWD by bitfield to keep the possibility to monitor        */
            /* several channels by successive calls of this function.           */
            if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_2)
 80062e6:	683b      	ldr	r3, [r7, #0]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	4aa0      	ldr	r2, [pc, #640]	; (800656c <HAL_ADC_AnalogWDGConfig+0x614>)
 80062ec:	4293      	cmp	r3, r2
 80062ee:	d12f      	bne.n	8006350 <HAL_ADC_AnalogWDGConfig+0x3f8>
            {
              SET_BIT(hadc->Instance->AWD2CR, (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(AnalogWDGConfig->Channel) & 0x1FUL)));
 80062f0:	683b      	ldr	r3, [r7, #0]
 80062f2:	689b      	ldr	r3, [r3, #8]
 80062f4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d108      	bne.n	800630e <HAL_ADC_AnalogWDGConfig+0x3b6>
 80062fc:	683b      	ldr	r3, [r7, #0]
 80062fe:	689b      	ldr	r3, [r3, #8]
 8006300:	0e9b      	lsrs	r3, r3, #26
 8006302:	f003 031f 	and.w	r3, r3, #31
 8006306:	2201      	movs	r2, #1
 8006308:	fa02 f303 	lsl.w	r3, r2, r3
 800630c:	e016      	b.n	800633c <HAL_ADC_AnalogWDGConfig+0x3e4>
 800630e:	683b      	ldr	r3, [r7, #0]
 8006310:	689b      	ldr	r3, [r3, #8]
 8006312:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006314:	69fb      	ldr	r3, [r7, #28]
 8006316:	fa93 f3a3 	rbit	r3, r3
 800631a:	61bb      	str	r3, [r7, #24]
  return result;
 800631c:	69bb      	ldr	r3, [r7, #24]
 800631e:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8006320:	6a3b      	ldr	r3, [r7, #32]
 8006322:	2b00      	cmp	r3, #0
 8006324:	d101      	bne.n	800632a <HAL_ADC_AnalogWDGConfig+0x3d2>
    return 32U;
 8006326:	2320      	movs	r3, #32
 8006328:	e003      	b.n	8006332 <HAL_ADC_AnalogWDGConfig+0x3da>
  return __builtin_clz(value);
 800632a:	6a3b      	ldr	r3, [r7, #32]
 800632c:	fab3 f383 	clz	r3, r3
 8006330:	b2db      	uxtb	r3, r3
 8006332:	f003 031f 	and.w	r3, r3, #31
 8006336:	2201      	movs	r2, #1
 8006338:	fa02 f303 	lsl.w	r3, r2, r3
 800633c:	687a      	ldr	r2, [r7, #4]
 800633e:	6812      	ldr	r2, [r2, #0]
 8006340:	f8d2 10a0 	ldr.w	r1, [r2, #160]	; 0xa0
 8006344:	687a      	ldr	r2, [r7, #4]
 8006346:	6812      	ldr	r2, [r2, #0]
 8006348:	430b      	orrs	r3, r1
 800634a:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
              SET_BIT(hadc->Instance->AWD3CR, (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(AnalogWDGConfig->Channel) & 0x1FUL)));
            }
#if defined(ADC_VER_V5_V90)
          }
#endif  /*ADC_VER_V5_V90*/
          break;
 800634e:	e038      	b.n	80063c2 <HAL_ADC_AnalogWDGConfig+0x46a>
              SET_BIT(hadc->Instance->AWD3CR, (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(AnalogWDGConfig->Channel) & 0x1FUL)));
 8006350:	683b      	ldr	r3, [r7, #0]
 8006352:	689b      	ldr	r3, [r3, #8]
 8006354:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006358:	2b00      	cmp	r3, #0
 800635a:	d108      	bne.n	800636e <HAL_ADC_AnalogWDGConfig+0x416>
 800635c:	683b      	ldr	r3, [r7, #0]
 800635e:	689b      	ldr	r3, [r3, #8]
 8006360:	0e9b      	lsrs	r3, r3, #26
 8006362:	f003 031f 	and.w	r3, r3, #31
 8006366:	2201      	movs	r2, #1
 8006368:	fa02 f303 	lsl.w	r3, r2, r3
 800636c:	e016      	b.n	800639c <HAL_ADC_AnalogWDGConfig+0x444>
 800636e:	683b      	ldr	r3, [r7, #0]
 8006370:	689b      	ldr	r3, [r3, #8]
 8006372:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006374:	693b      	ldr	r3, [r7, #16]
 8006376:	fa93 f3a3 	rbit	r3, r3
 800637a:	60fb      	str	r3, [r7, #12]
  return result;
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8006380:	697b      	ldr	r3, [r7, #20]
 8006382:	2b00      	cmp	r3, #0
 8006384:	d101      	bne.n	800638a <HAL_ADC_AnalogWDGConfig+0x432>
    return 32U;
 8006386:	2320      	movs	r3, #32
 8006388:	e003      	b.n	8006392 <HAL_ADC_AnalogWDGConfig+0x43a>
  return __builtin_clz(value);
 800638a:	697b      	ldr	r3, [r7, #20]
 800638c:	fab3 f383 	clz	r3, r3
 8006390:	b2db      	uxtb	r3, r3
 8006392:	f003 031f 	and.w	r3, r3, #31
 8006396:	2201      	movs	r2, #1
 8006398:	fa02 f303 	lsl.w	r3, r2, r3
 800639c:	687a      	ldr	r2, [r7, #4]
 800639e:	6812      	ldr	r2, [r2, #0]
 80063a0:	f8d2 10a4 	ldr.w	r1, [r2, #164]	; 0xa4
 80063a4:	687a      	ldr	r2, [r7, #4]
 80063a6:	6812      	ldr	r2, [r2, #0]
 80063a8:	430b      	orrs	r3, r1
 80063aa:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
          break;
 80063ae:	e008      	b.n	80063c2 <HAL_ADC_AnalogWDGConfig+0x46a>

        default: /* ADC_ANALOGWATCHDOG_NONE */
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, AnalogWDGConfig->WatchdogNumber, LL_ADC_AWD_DISABLE);
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	6818      	ldr	r0, [r3, #0]
 80063b4:	683b      	ldr	r3, [r7, #0]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	2200      	movs	r2, #0
 80063ba:	4619      	mov	r1, r3
 80063bc:	f7fe f972 	bl	80046a4 <LL_ADC_SetAnalogWDMonitChannels>
          break;
 80063c0:	bf00      	nop
      }

      /* Shift the thresholds in function of the selected ADC resolution      */
      /* have to be left-aligned on bit 15, the LSB (right bits) are set to 0 */
      tmpAWDHighThresholdShifted = ADC_AWD23THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->HighThreshold);
 80063c2:	4b6b      	ldr	r3, [pc, #428]	; (8006570 <HAL_ADC_AnalogWDGConfig+0x618>)
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80063ca:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80063ce:	d10b      	bne.n	80063e8 <HAL_ADC_AnalogWDGConfig+0x490>
 80063d0:	683b      	ldr	r3, [r7, #0]
 80063d2:	691a      	ldr	r2, [r3, #16]
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	68db      	ldr	r3, [r3, #12]
 80063da:	089b      	lsrs	r3, r3, #2
 80063dc:	f003 0307 	and.w	r3, r3, #7
 80063e0:	005b      	lsls	r3, r3, #1
 80063e2:	fa02 f303 	lsl.w	r3, r2, r3
 80063e6:	e01d      	b.n	8006424 <HAL_ADC_AnalogWDGConfig+0x4cc>
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	68db      	ldr	r3, [r3, #12]
 80063ee:	f003 0310 	and.w	r3, r3, #16
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d10b      	bne.n	800640e <HAL_ADC_AnalogWDGConfig+0x4b6>
 80063f6:	683b      	ldr	r3, [r7, #0]
 80063f8:	691a      	ldr	r2, [r3, #16]
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	68db      	ldr	r3, [r3, #12]
 8006400:	089b      	lsrs	r3, r3, #2
 8006402:	f003 0307 	and.w	r3, r3, #7
 8006406:	005b      	lsls	r3, r3, #1
 8006408:	fa02 f303 	lsl.w	r3, r2, r3
 800640c:	e00a      	b.n	8006424 <HAL_ADC_AnalogWDGConfig+0x4cc>
 800640e:	683b      	ldr	r3, [r7, #0]
 8006410:	691a      	ldr	r2, [r3, #16]
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	68db      	ldr	r3, [r3, #12]
 8006418:	089b      	lsrs	r3, r3, #2
 800641a:	f003 0304 	and.w	r3, r3, #4
 800641e:	005b      	lsls	r3, r3, #1
 8006420:	fa02 f303 	lsl.w	r3, r2, r3
 8006424:	643b      	str	r3, [r7, #64]	; 0x40
      tmpAWDLowThresholdShifted  = ADC_AWD23THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->LowThreshold);
 8006426:	4b52      	ldr	r3, [pc, #328]	; (8006570 <HAL_ADC_AnalogWDGConfig+0x618>)
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800642e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006432:	d10b      	bne.n	800644c <HAL_ADC_AnalogWDGConfig+0x4f4>
 8006434:	683b      	ldr	r3, [r7, #0]
 8006436:	695a      	ldr	r2, [r3, #20]
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	68db      	ldr	r3, [r3, #12]
 800643e:	089b      	lsrs	r3, r3, #2
 8006440:	f003 0307 	and.w	r3, r3, #7
 8006444:	005b      	lsls	r3, r3, #1
 8006446:	fa02 f303 	lsl.w	r3, r2, r3
 800644a:	e01d      	b.n	8006488 <HAL_ADC_AnalogWDGConfig+0x530>
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	68db      	ldr	r3, [r3, #12]
 8006452:	f003 0310 	and.w	r3, r3, #16
 8006456:	2b00      	cmp	r3, #0
 8006458:	d10b      	bne.n	8006472 <HAL_ADC_AnalogWDGConfig+0x51a>
 800645a:	683b      	ldr	r3, [r7, #0]
 800645c:	695a      	ldr	r2, [r3, #20]
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	68db      	ldr	r3, [r3, #12]
 8006464:	089b      	lsrs	r3, r3, #2
 8006466:	f003 0307 	and.w	r3, r3, #7
 800646a:	005b      	lsls	r3, r3, #1
 800646c:	fa02 f303 	lsl.w	r3, r2, r3
 8006470:	e00a      	b.n	8006488 <HAL_ADC_AnalogWDGConfig+0x530>
 8006472:	683b      	ldr	r3, [r7, #0]
 8006474:	695a      	ldr	r2, [r3, #20]
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	68db      	ldr	r3, [r3, #12]
 800647c:	089b      	lsrs	r3, r3, #2
 800647e:	f003 0304 	and.w	r3, r3, #4
 8006482:	005b      	lsls	r3, r3, #1
 8006484:	fa02 f303 	lsl.w	r3, r2, r3
 8006488:	63fb      	str	r3, [r7, #60]	; 0x3c
          MODIFY_REG(hadc->Instance->LTR3_RES10,  ADC_LTR_LT, tmpAWDLowThresholdShifted);
          MODIFY_REG(hadc->Instance->HTR3_RES11,  ADC_HTR_HT, tmpAWDHighThresholdShifted);
        }
      }
#else
      if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_2)
 800648a:	683b      	ldr	r3, [r7, #0]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	4a37      	ldr	r2, [pc, #220]	; (800656c <HAL_ADC_AnalogWDGConfig+0x614>)
 8006490:	4293      	cmp	r3, r2
 8006492:	d118      	bne.n	80064c6 <HAL_ADC_AnalogWDGConfig+0x56e>
      {
        /* Set ADC analog watchdog thresholds value of both thresholds high and low */
        MODIFY_REG(hadc->Instance->LTR2,  ADC_LTR_LT, tmpAWDLowThresholdShifted);
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800649c:	f003 417c 	and.w	r1, r3, #4227858432	; 0xfc000000
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80064a6:	430a      	orrs	r2, r1
 80064a8:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
        MODIFY_REG(hadc->Instance->HTR2,  ADC_HTR_HT, tmpAWDHighThresholdShifted);
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80064b4:	f003 417c 	and.w	r1, r3, #4227858432	; 0xfc000000
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80064be:	430a      	orrs	r2, r1
 80064c0:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
 80064c4:	e017      	b.n	80064f6 <HAL_ADC_AnalogWDGConfig+0x59e>
      }
      else
      {
        /* Set ADC analog watchdog thresholds value of both thresholds high and low */
        MODIFY_REG(hadc->Instance->LTR3,  ADC_LTR_LT, tmpAWDLowThresholdShifted);
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80064ce:	f003 417c 	and.w	r1, r3, #4227858432	; 0xfc000000
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80064d8:	430a      	orrs	r2, r1
 80064da:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
        MODIFY_REG(hadc->Instance->HTR3,  ADC_HTR_HT, tmpAWDHighThresholdShifted);
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80064e6:	f003 417c 	and.w	r1, r3, #4227858432	; 0xfc000000
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80064f0:	430a      	orrs	r2, r1
 80064f2:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
      }

#endif
      if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_2)
 80064f6:	683b      	ldr	r3, [r7, #0]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	4a1c      	ldr	r2, [pc, #112]	; (800656c <HAL_ADC_AnalogWDGConfig+0x614>)
 80064fc:	4293      	cmp	r3, r2
 80064fe:	d11a      	bne.n	8006536 <HAL_ADC_AnalogWDGConfig+0x5de>
      {
        /* Update state, clear previous result related to AWD2 */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006504:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	655a      	str	r2, [r3, #84]	; 0x54

        /* Clear flag ADC analog watchdog */
        /* Note: Flag cleared Clear the ADC Analog watchdog flag to be ready  */
        /* to use for HAL_ADC_IRQHandler() or HAL_ADC_PollForEvent()          */
        /* (in case left enabled by previous ADC operations).                 */
        LL_ADC_ClearFlag_AWD2(hadc->Instance);
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	4618      	mov	r0, r3
 8006512:	f7fe fa1d 	bl	8004950 <LL_ADC_ClearFlag_AWD2>

        /* Configure ADC analog watchdog interrupt */
        if (AnalogWDGConfig->ITMode == ENABLE)
 8006516:	683b      	ldr	r3, [r7, #0]
 8006518:	7b1b      	ldrb	r3, [r3, #12]
 800651a:	2b01      	cmp	r3, #1
 800651c:	d105      	bne.n	800652a <HAL_ADC_AnalogWDGConfig+0x5d2>
        {
          LL_ADC_EnableIT_AWD2(hadc->Instance);
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	4618      	mov	r0, r3
 8006524:	f7fe fa40 	bl	80049a8 <LL_ADC_EnableIT_AWD2>
    if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_1)
 8006528:	e02d      	b.n	8006586 <HAL_ADC_AnalogWDGConfig+0x62e>
        }
        else
        {
          LL_ADC_DisableIT_AWD2(hadc->Instance);
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	4618      	mov	r0, r3
 8006530:	f7fe fa6a 	bl	8004a08 <LL_ADC_DisableIT_AWD2>
    if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_1)
 8006534:	e027      	b.n	8006586 <HAL_ADC_AnalogWDGConfig+0x62e>
      }
      /* (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_3) */
      else
      {
        /* Update state, clear previous result related to AWD3 */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800653a:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	655a      	str	r2, [r3, #84]	; 0x54

        /* Clear flag ADC analog watchdog */
        /* Note: Flag cleared Clear the ADC Analog watchdog flag to be ready  */
        /* to use for HAL_ADC_IRQHandler() or HAL_ADC_PollForEvent()          */
        /* (in case left enabled by previous ADC operations).                 */
        LL_ADC_ClearFlag_AWD3(hadc->Instance);
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	4618      	mov	r0, r3
 8006548:	f7fe fa10 	bl	800496c <LL_ADC_ClearFlag_AWD3>

        /* Configure ADC analog watchdog interrupt */
        if (AnalogWDGConfig->ITMode == ENABLE)
 800654c:	683b      	ldr	r3, [r7, #0]
 800654e:	7b1b      	ldrb	r3, [r3, #12]
 8006550:	2b01      	cmp	r3, #1
 8006552:	d105      	bne.n	8006560 <HAL_ADC_AnalogWDGConfig+0x608>
        {
          LL_ADC_EnableIT_AWD3(hadc->Instance);
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	4618      	mov	r0, r3
 800655a:	f7fe fa35 	bl	80049c8 <LL_ADC_EnableIT_AWD3>
    if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_1)
 800655e:	e012      	b.n	8006586 <HAL_ADC_AnalogWDGConfig+0x62e>
        }
        else
        {
          LL_ADC_DisableIT_AWD3(hadc->Instance);
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	4618      	mov	r0, r3
 8006566:	f7fe fa5f 	bl	8004a28 <LL_ADC_DisableIT_AWD3>
    if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_1)
 800656a:	e00c      	b.n	8006586 <HAL_ADC_AnalogWDGConfig+0x62e>
 800656c:	001fffff 	.word	0x001fffff
 8006570:	5c001000 	.word	0x5c001000
  /* If a conversion is on going on ADC group regular or injected, no update  */
  /* could be done on neither of the AWD configuration structure parameters.  */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006578:	f043 0220 	orr.w	r2, r3, #32
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8006580:	2301      	movs	r3, #1
 8006582:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  }
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	2200      	movs	r2, #0
 800658a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800658e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 8006592:	4618      	mov	r0, r3
 8006594:	3750      	adds	r7, #80	; 0x50
 8006596:	46bd      	mov	sp, r7
 8006598:	bd80      	pop	{r7, pc}
 800659a:	bf00      	nop

0800659c <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 800659c:	b580      	push	{r7, lr}
 800659e:	b088      	sub	sp, #32
 80065a0:	af00      	add	r7, sp, #0
 80065a2:	6078      	str	r0, [r7, #4]
 80065a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 80065a6:	2300      	movs	r3, #0
 80065a8:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 80065aa:	683b      	ldr	r3, [r7, #0]
 80065ac:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	4618      	mov	r0, r3
 80065b4:	f7fe f984 	bl	80048c0 <LL_ADC_REG_IsConversionOngoing>
 80065b8:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	4618      	mov	r0, r3
 80065c0:	f7fe f9a6 	bl	8004910 <LL_ADC_INJ_IsConversionOngoing>
 80065c4:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 80065c6:	693b      	ldr	r3, [r7, #16]
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d103      	bne.n	80065d4 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	f000 8098 	beq.w	8006704 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	68db      	ldr	r3, [r3, #12]
 80065da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d02a      	beq.n	8006638 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	7d5b      	ldrb	r3, [r3, #21]
 80065e6:	2b01      	cmp	r3, #1
 80065e8:	d126      	bne.n	8006638 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	7d1b      	ldrb	r3, [r3, #20]
 80065ee:	2b01      	cmp	r3, #1
 80065f0:	d122      	bne.n	8006638 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 80065f2:	2301      	movs	r3, #1
 80065f4:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 80065f6:	e014      	b.n	8006622 <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 80065f8:	69fb      	ldr	r3, [r7, #28]
 80065fa:	4a45      	ldr	r2, [pc, #276]	; (8006710 <ADC_ConversionStop+0x174>)
 80065fc:	4293      	cmp	r3, r2
 80065fe:	d90d      	bls.n	800661c <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006604:	f043 0210 	orr.w	r2, r3, #16
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006610:	f043 0201 	orr.w	r2, r3, #1
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8006618:	2301      	movs	r3, #1
 800661a:	e074      	b.n	8006706 <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 800661c:	69fb      	ldr	r3, [r7, #28]
 800661e:	3301      	adds	r3, #1
 8006620:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800662c:	2b40      	cmp	r3, #64	; 0x40
 800662e:	d1e3      	bne.n	80065f8 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	2240      	movs	r2, #64	; 0x40
 8006636:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8006638:	69bb      	ldr	r3, [r7, #24]
 800663a:	2b02      	cmp	r3, #2
 800663c:	d014      	beq.n	8006668 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	4618      	mov	r0, r3
 8006644:	f7fe f93c 	bl	80048c0 <LL_ADC_REG_IsConversionOngoing>
 8006648:	4603      	mov	r3, r0
 800664a:	2b00      	cmp	r3, #0
 800664c:	d00c      	beq.n	8006668 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	4618      	mov	r0, r3
 8006654:	f7fe f8f9 	bl	800484a <LL_ADC_IsDisableOngoing>
 8006658:	4603      	mov	r3, r0
 800665a:	2b00      	cmp	r3, #0
 800665c:	d104      	bne.n	8006668 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	4618      	mov	r0, r3
 8006664:	f7fe f918 	bl	8004898 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8006668:	69bb      	ldr	r3, [r7, #24]
 800666a:	2b01      	cmp	r3, #1
 800666c:	d014      	beq.n	8006698 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	4618      	mov	r0, r3
 8006674:	f7fe f94c 	bl	8004910 <LL_ADC_INJ_IsConversionOngoing>
 8006678:	4603      	mov	r3, r0
 800667a:	2b00      	cmp	r3, #0
 800667c:	d00c      	beq.n	8006698 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	4618      	mov	r0, r3
 8006684:	f7fe f8e1 	bl	800484a <LL_ADC_IsDisableOngoing>
 8006688:	4603      	mov	r3, r0
 800668a:	2b00      	cmp	r3, #0
 800668c:	d104      	bne.n	8006698 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	4618      	mov	r0, r3
 8006694:	f7fe f928 	bl	80048e8 <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8006698:	69bb      	ldr	r3, [r7, #24]
 800669a:	2b02      	cmp	r3, #2
 800669c:	d005      	beq.n	80066aa <ADC_ConversionStop+0x10e>
 800669e:	69bb      	ldr	r3, [r7, #24]
 80066a0:	2b03      	cmp	r3, #3
 80066a2:	d105      	bne.n	80066b0 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 80066a4:	230c      	movs	r3, #12
 80066a6:	617b      	str	r3, [r7, #20]
        break;
 80066a8:	e005      	b.n	80066b6 <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 80066aa:	2308      	movs	r3, #8
 80066ac:	617b      	str	r3, [r7, #20]
        break;
 80066ae:	e002      	b.n	80066b6 <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 80066b0:	2304      	movs	r3, #4
 80066b2:	617b      	str	r3, [r7, #20]
        break;
 80066b4:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 80066b6:	f7fd fe8f 	bl	80043d8 <HAL_GetTick>
 80066ba:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80066bc:	e01b      	b.n	80066f6 <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 80066be:	f7fd fe8b 	bl	80043d8 <HAL_GetTick>
 80066c2:	4602      	mov	r2, r0
 80066c4:	68bb      	ldr	r3, [r7, #8]
 80066c6:	1ad3      	subs	r3, r2, r3
 80066c8:	2b05      	cmp	r3, #5
 80066ca:	d914      	bls.n	80066f6 <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	689a      	ldr	r2, [r3, #8]
 80066d2:	697b      	ldr	r3, [r7, #20]
 80066d4:	4013      	ands	r3, r2
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d00d      	beq.n	80066f6 <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80066de:	f043 0210 	orr.w	r2, r3, #16
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80066ea:	f043 0201 	orr.w	r2, r3, #1
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 80066f2:	2301      	movs	r3, #1
 80066f4:	e007      	b.n	8006706 <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	689a      	ldr	r2, [r3, #8]
 80066fc:	697b      	ldr	r3, [r7, #20]
 80066fe:	4013      	ands	r3, r2
 8006700:	2b00      	cmp	r3, #0
 8006702:	d1dc      	bne.n	80066be <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8006704:	2300      	movs	r3, #0
}
 8006706:	4618      	mov	r0, r3
 8006708:	3720      	adds	r7, #32
 800670a:	46bd      	mov	sp, r7
 800670c:	bd80      	pop	{r7, pc}
 800670e:	bf00      	nop
 8006710:	000cdbff 	.word	0x000cdbff

08006714 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8006714:	b580      	push	{r7, lr}
 8006716:	b084      	sub	sp, #16
 8006718:	af00      	add	r7, sp, #0
 800671a:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	4618      	mov	r0, r3
 8006722:	f7fe f87f 	bl	8004824 <LL_ADC_IsEnabled>
 8006726:	4603      	mov	r3, r0
 8006728:	2b00      	cmp	r3, #0
 800672a:	d16e      	bne.n	800680a <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	689a      	ldr	r2, [r3, #8]
 8006732:	4b38      	ldr	r3, [pc, #224]	; (8006814 <ADC_Enable+0x100>)
 8006734:	4013      	ands	r3, r2
 8006736:	2b00      	cmp	r3, #0
 8006738:	d00d      	beq.n	8006756 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800673e:	f043 0210 	orr.w	r2, r3, #16
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800674a:	f043 0201 	orr.w	r2, r3, #1
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8006752:	2301      	movs	r3, #1
 8006754:	e05a      	b.n	800680c <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	4618      	mov	r0, r3
 800675c:	f7fe f83a 	bl	80047d4 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8006760:	f7fd fe3a 	bl	80043d8 <HAL_GetTick>
 8006764:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	4a2b      	ldr	r2, [pc, #172]	; (8006818 <ADC_Enable+0x104>)
 800676c:	4293      	cmp	r3, r2
 800676e:	d004      	beq.n	800677a <ADC_Enable+0x66>
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	4a29      	ldr	r2, [pc, #164]	; (800681c <ADC_Enable+0x108>)
 8006776:	4293      	cmp	r3, r2
 8006778:	d101      	bne.n	800677e <ADC_Enable+0x6a>
 800677a:	4b29      	ldr	r3, [pc, #164]	; (8006820 <ADC_Enable+0x10c>)
 800677c:	e000      	b.n	8006780 <ADC_Enable+0x6c>
 800677e:	4b29      	ldr	r3, [pc, #164]	; (8006824 <ADC_Enable+0x110>)
 8006780:	4618      	mov	r0, r3
 8006782:	f7fd ffbd 	bl	8004700 <LL_ADC_GetMultimode>
 8006786:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	4a23      	ldr	r2, [pc, #140]	; (800681c <ADC_Enable+0x108>)
 800678e:	4293      	cmp	r3, r2
 8006790:	d002      	beq.n	8006798 <ADC_Enable+0x84>
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	e000      	b.n	800679a <ADC_Enable+0x86>
 8006798:	4b1f      	ldr	r3, [pc, #124]	; (8006818 <ADC_Enable+0x104>)
 800679a:	687a      	ldr	r2, [r7, #4]
 800679c:	6812      	ldr	r2, [r2, #0]
 800679e:	4293      	cmp	r3, r2
 80067a0:	d02c      	beq.n	80067fc <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80067a2:	68bb      	ldr	r3, [r7, #8]
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d130      	bne.n	800680a <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80067a8:	e028      	b.n	80067fc <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	4618      	mov	r0, r3
 80067b0:	f7fe f838 	bl	8004824 <LL_ADC_IsEnabled>
 80067b4:	4603      	mov	r3, r0
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d104      	bne.n	80067c4 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	4618      	mov	r0, r3
 80067c0:	f7fe f808 	bl	80047d4 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80067c4:	f7fd fe08 	bl	80043d8 <HAL_GetTick>
 80067c8:	4602      	mov	r2, r0
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	1ad3      	subs	r3, r2, r3
 80067ce:	2b02      	cmp	r3, #2
 80067d0:	d914      	bls.n	80067fc <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	f003 0301 	and.w	r3, r3, #1
 80067dc:	2b01      	cmp	r3, #1
 80067de:	d00d      	beq.n	80067fc <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80067e4:	f043 0210 	orr.w	r2, r3, #16
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80067f0:	f043 0201 	orr.w	r2, r3, #1
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	659a      	str	r2, [r3, #88]	; 0x58

            return HAL_ERROR;
 80067f8:	2301      	movs	r3, #1
 80067fa:	e007      	b.n	800680c <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	f003 0301 	and.w	r3, r3, #1
 8006806:	2b01      	cmp	r3, #1
 8006808:	d1cf      	bne.n	80067aa <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800680a:	2300      	movs	r3, #0
}
 800680c:	4618      	mov	r0, r3
 800680e:	3710      	adds	r7, #16
 8006810:	46bd      	mov	sp, r7
 8006812:	bd80      	pop	{r7, pc}
 8006814:	8000003f 	.word	0x8000003f
 8006818:	40022000 	.word	0x40022000
 800681c:	40022100 	.word	0x40022100
 8006820:	40022300 	.word	0x40022300
 8006824:	58026300 	.word	0x58026300

08006828 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8006828:	b580      	push	{r7, lr}
 800682a:	b084      	sub	sp, #16
 800682c:	af00      	add	r7, sp, #0
 800682e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	4618      	mov	r0, r3
 8006836:	f7fe f808 	bl	800484a <LL_ADC_IsDisableOngoing>
 800683a:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	4618      	mov	r0, r3
 8006842:	f7fd ffef 	bl	8004824 <LL_ADC_IsEnabled>
 8006846:	4603      	mov	r3, r0
 8006848:	2b00      	cmp	r3, #0
 800684a:	d047      	beq.n	80068dc <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	2b00      	cmp	r3, #0
 8006850:	d144      	bne.n	80068dc <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	689b      	ldr	r3, [r3, #8]
 8006858:	f003 030d 	and.w	r3, r3, #13
 800685c:	2b01      	cmp	r3, #1
 800685e:	d10c      	bne.n	800687a <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	4618      	mov	r0, r3
 8006866:	f7fd ffc9 	bl	80047fc <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	2203      	movs	r2, #3
 8006870:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8006872:	f7fd fdb1 	bl	80043d8 <HAL_GetTick>
 8006876:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8006878:	e029      	b.n	80068ce <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800687e:	f043 0210 	orr.w	r2, r3, #16
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800688a:	f043 0201 	orr.w	r2, r3, #1
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 8006892:	2301      	movs	r3, #1
 8006894:	e023      	b.n	80068de <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8006896:	f7fd fd9f 	bl	80043d8 <HAL_GetTick>
 800689a:	4602      	mov	r2, r0
 800689c:	68bb      	ldr	r3, [r7, #8]
 800689e:	1ad3      	subs	r3, r2, r3
 80068a0:	2b02      	cmp	r3, #2
 80068a2:	d914      	bls.n	80068ce <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	689b      	ldr	r3, [r3, #8]
 80068aa:	f003 0301 	and.w	r3, r3, #1
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d00d      	beq.n	80068ce <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80068b6:	f043 0210 	orr.w	r2, r3, #16
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80068c2:	f043 0201 	orr.w	r2, r3, #1
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 80068ca:	2301      	movs	r3, #1
 80068cc:	e007      	b.n	80068de <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	689b      	ldr	r3, [r3, #8]
 80068d4:	f003 0301 	and.w	r3, r3, #1
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d1dc      	bne.n	8006896 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80068dc:	2300      	movs	r3, #0
}
 80068de:	4618      	mov	r0, r3
 80068e0:	3710      	adds	r7, #16
 80068e2:	46bd      	mov	sp, r7
 80068e4:	bd80      	pop	{r7, pc}
	...

080068e8 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 80068e8:	b580      	push	{r7, lr}
 80068ea:	b084      	sub	sp, #16
 80068ec:	af00      	add	r7, sp, #0
 80068ee:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	4a79      	ldr	r2, [pc, #484]	; (8006adc <ADC_ConfigureBoostMode+0x1f4>)
 80068f6:	4293      	cmp	r3, r2
 80068f8:	d004      	beq.n	8006904 <ADC_ConfigureBoostMode+0x1c>
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	4a78      	ldr	r2, [pc, #480]	; (8006ae0 <ADC_ConfigureBoostMode+0x1f8>)
 8006900:	4293      	cmp	r3, r2
 8006902:	d109      	bne.n	8006918 <ADC_ConfigureBoostMode+0x30>
 8006904:	4b77      	ldr	r3, [pc, #476]	; (8006ae4 <ADC_ConfigureBoostMode+0x1fc>)
 8006906:	689b      	ldr	r3, [r3, #8]
 8006908:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800690c:	2b00      	cmp	r3, #0
 800690e:	bf14      	ite	ne
 8006910:	2301      	movne	r3, #1
 8006912:	2300      	moveq	r3, #0
 8006914:	b2db      	uxtb	r3, r3
 8006916:	e008      	b.n	800692a <ADC_ConfigureBoostMode+0x42>
 8006918:	4b73      	ldr	r3, [pc, #460]	; (8006ae8 <ADC_ConfigureBoostMode+0x200>)
 800691a:	689b      	ldr	r3, [r3, #8]
 800691c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006920:	2b00      	cmp	r3, #0
 8006922:	bf14      	ite	ne
 8006924:	2301      	movne	r3, #1
 8006926:	2300      	moveq	r3, #0
 8006928:	b2db      	uxtb	r3, r3
 800692a:	2b00      	cmp	r3, #0
 800692c:	d01c      	beq.n	8006968 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 800692e:	f002 fae9 	bl	8008f04 <HAL_RCC_GetHCLKFreq>
 8006932:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	685b      	ldr	r3, [r3, #4]
 8006938:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800693c:	d010      	beq.n	8006960 <ADC_ConfigureBoostMode+0x78>
 800693e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006942:	d871      	bhi.n	8006a28 <ADC_ConfigureBoostMode+0x140>
 8006944:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006948:	d002      	beq.n	8006950 <ADC_ConfigureBoostMode+0x68>
 800694a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800694e:	d16b      	bne.n	8006a28 <ADC_ConfigureBoostMode+0x140>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	685b      	ldr	r3, [r3, #4]
 8006954:	0c1b      	lsrs	r3, r3, #16
 8006956:	68fa      	ldr	r2, [r7, #12]
 8006958:	fbb2 f3f3 	udiv	r3, r2, r3
 800695c:	60fb      	str	r3, [r7, #12]
        break;
 800695e:	e066      	b.n	8006a2e <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	089b      	lsrs	r3, r3, #2
 8006964:	60fb      	str	r3, [r7, #12]
        break;
 8006966:	e062      	b.n	8006a2e <ADC_ConfigureBoostMode+0x146>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8006968:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800696c:	f003 faae 	bl	8009ecc <HAL_RCCEx_GetPeriphCLKFreq>
 8006970:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	685b      	ldr	r3, [r3, #4]
 8006976:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 800697a:	d051      	beq.n	8006a20 <ADC_ConfigureBoostMode+0x138>
 800697c:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8006980:	d854      	bhi.n	8006a2c <ADC_ConfigureBoostMode+0x144>
 8006982:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8006986:	d047      	beq.n	8006a18 <ADC_ConfigureBoostMode+0x130>
 8006988:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 800698c:	d84e      	bhi.n	8006a2c <ADC_ConfigureBoostMode+0x144>
 800698e:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8006992:	d03d      	beq.n	8006a10 <ADC_ConfigureBoostMode+0x128>
 8006994:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8006998:	d848      	bhi.n	8006a2c <ADC_ConfigureBoostMode+0x144>
 800699a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800699e:	d033      	beq.n	8006a08 <ADC_ConfigureBoostMode+0x120>
 80069a0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80069a4:	d842      	bhi.n	8006a2c <ADC_ConfigureBoostMode+0x144>
 80069a6:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 80069aa:	d029      	beq.n	8006a00 <ADC_ConfigureBoostMode+0x118>
 80069ac:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 80069b0:	d83c      	bhi.n	8006a2c <ADC_ConfigureBoostMode+0x144>
 80069b2:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 80069b6:	d01a      	beq.n	80069ee <ADC_ConfigureBoostMode+0x106>
 80069b8:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 80069bc:	d836      	bhi.n	8006a2c <ADC_ConfigureBoostMode+0x144>
 80069be:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 80069c2:	d014      	beq.n	80069ee <ADC_ConfigureBoostMode+0x106>
 80069c4:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 80069c8:	d830      	bhi.n	8006a2c <ADC_ConfigureBoostMode+0x144>
 80069ca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80069ce:	d00e      	beq.n	80069ee <ADC_ConfigureBoostMode+0x106>
 80069d0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80069d4:	d82a      	bhi.n	8006a2c <ADC_ConfigureBoostMode+0x144>
 80069d6:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80069da:	d008      	beq.n	80069ee <ADC_ConfigureBoostMode+0x106>
 80069dc:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80069e0:	d824      	bhi.n	8006a2c <ADC_ConfigureBoostMode+0x144>
 80069e2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80069e6:	d002      	beq.n	80069ee <ADC_ConfigureBoostMode+0x106>
 80069e8:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80069ec:	d11e      	bne.n	8006a2c <ADC_ConfigureBoostMode+0x144>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	685b      	ldr	r3, [r3, #4]
 80069f2:	0c9b      	lsrs	r3, r3, #18
 80069f4:	005b      	lsls	r3, r3, #1
 80069f6:	68fa      	ldr	r2, [r7, #12]
 80069f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80069fc:	60fb      	str	r3, [r7, #12]
        break;
 80069fe:	e016      	b.n	8006a2e <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	091b      	lsrs	r3, r3, #4
 8006a04:	60fb      	str	r3, [r7, #12]
        break;
 8006a06:	e012      	b.n	8006a2e <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	095b      	lsrs	r3, r3, #5
 8006a0c:	60fb      	str	r3, [r7, #12]
        break;
 8006a0e:	e00e      	b.n	8006a2e <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	099b      	lsrs	r3, r3, #6
 8006a14:	60fb      	str	r3, [r7, #12]
        break;
 8006a16:	e00a      	b.n	8006a2e <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	09db      	lsrs	r3, r3, #7
 8006a1c:	60fb      	str	r3, [r7, #12]
        break;
 8006a1e:	e006      	b.n	8006a2e <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	0a1b      	lsrs	r3, r3, #8
 8006a24:	60fb      	str	r3, [r7, #12]
        break;
 8006a26:	e002      	b.n	8006a2e <ADC_ConfigureBoostMode+0x146>
        break;
 8006a28:	bf00      	nop
 8006a2a:	e000      	b.n	8006a2e <ADC_ConfigureBoostMode+0x146>
      default:
        break;
 8006a2c:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8006a2e:	f7fd fd03 	bl	8004438 <HAL_GetREVID>
 8006a32:	4603      	mov	r3, r0
 8006a34:	f241 0203 	movw	r2, #4099	; 0x1003
 8006a38:	4293      	cmp	r3, r2
 8006a3a:	d815      	bhi.n	8006a68 <ADC_ConfigureBoostMode+0x180>
  {
    if (freq > 20000000UL)
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	4a2b      	ldr	r2, [pc, #172]	; (8006aec <ADC_ConfigureBoostMode+0x204>)
 8006a40:	4293      	cmp	r3, r2
 8006a42:	d908      	bls.n	8006a56 <ADC_ConfigureBoostMode+0x16e>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	689a      	ldr	r2, [r3, #8]
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006a52:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8006a54:	e03e      	b.n	8006ad4 <ADC_ConfigureBoostMode+0x1ec>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	689a      	ldr	r2, [r3, #8]
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006a64:	609a      	str	r2, [r3, #8]
}
 8006a66:	e035      	b.n	8006ad4 <ADC_ConfigureBoostMode+0x1ec>
    freq /= 2U; /* divider by 2 for Rev.V */
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	085b      	lsrs	r3, r3, #1
 8006a6c:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	4a1f      	ldr	r2, [pc, #124]	; (8006af0 <ADC_ConfigureBoostMode+0x208>)
 8006a72:	4293      	cmp	r3, r2
 8006a74:	d808      	bhi.n	8006a88 <ADC_ConfigureBoostMode+0x1a0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	689a      	ldr	r2, [r3, #8]
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8006a84:	609a      	str	r2, [r3, #8]
}
 8006a86:	e025      	b.n	8006ad4 <ADC_ConfigureBoostMode+0x1ec>
    else if (freq <= 12500000UL)
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	4a1a      	ldr	r2, [pc, #104]	; (8006af4 <ADC_ConfigureBoostMode+0x20c>)
 8006a8c:	4293      	cmp	r3, r2
 8006a8e:	d80a      	bhi.n	8006aa6 <ADC_ConfigureBoostMode+0x1be>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	689b      	ldr	r3, [r3, #8]
 8006a96:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006aa2:	609a      	str	r2, [r3, #8]
}
 8006aa4:	e016      	b.n	8006ad4 <ADC_ConfigureBoostMode+0x1ec>
    else if (freq <= 25000000UL)
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	4a13      	ldr	r2, [pc, #76]	; (8006af8 <ADC_ConfigureBoostMode+0x210>)
 8006aaa:	4293      	cmp	r3, r2
 8006aac:	d80a      	bhi.n	8006ac4 <ADC_ConfigureBoostMode+0x1dc>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	689b      	ldr	r3, [r3, #8]
 8006ab4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006ac0:	609a      	str	r2, [r3, #8]
}
 8006ac2:	e007      	b.n	8006ad4 <ADC_ConfigureBoostMode+0x1ec>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	689a      	ldr	r2, [r3, #8]
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8006ad2:	609a      	str	r2, [r3, #8]
}
 8006ad4:	bf00      	nop
 8006ad6:	3710      	adds	r7, #16
 8006ad8:	46bd      	mov	sp, r7
 8006ada:	bd80      	pop	{r7, pc}
 8006adc:	40022000 	.word	0x40022000
 8006ae0:	40022100 	.word	0x40022100
 8006ae4:	40022300 	.word	0x40022300
 8006ae8:	58026300 	.word	0x58026300
 8006aec:	01312d00 	.word	0x01312d00
 8006af0:	005f5e10 	.word	0x005f5e10
 8006af4:	00bebc20 	.word	0x00bebc20
 8006af8:	017d7840 	.word	0x017d7840

08006afc <LL_ADC_IsEnabled>:
{
 8006afc:	b480      	push	{r7}
 8006afe:	b083      	sub	sp, #12
 8006b00:	af00      	add	r7, sp, #0
 8006b02:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	689b      	ldr	r3, [r3, #8]
 8006b08:	f003 0301 	and.w	r3, r3, #1
 8006b0c:	2b01      	cmp	r3, #1
 8006b0e:	d101      	bne.n	8006b14 <LL_ADC_IsEnabled+0x18>
 8006b10:	2301      	movs	r3, #1
 8006b12:	e000      	b.n	8006b16 <LL_ADC_IsEnabled+0x1a>
 8006b14:	2300      	movs	r3, #0
}
 8006b16:	4618      	mov	r0, r3
 8006b18:	370c      	adds	r7, #12
 8006b1a:	46bd      	mov	sp, r7
 8006b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b20:	4770      	bx	lr

08006b22 <LL_ADC_REG_IsConversionOngoing>:
{
 8006b22:	b480      	push	{r7}
 8006b24:	b083      	sub	sp, #12
 8006b26:	af00      	add	r7, sp, #0
 8006b28:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	689b      	ldr	r3, [r3, #8]
 8006b2e:	f003 0304 	and.w	r3, r3, #4
 8006b32:	2b04      	cmp	r3, #4
 8006b34:	d101      	bne.n	8006b3a <LL_ADC_REG_IsConversionOngoing+0x18>
 8006b36:	2301      	movs	r3, #1
 8006b38:	e000      	b.n	8006b3c <LL_ADC_REG_IsConversionOngoing+0x1a>
 8006b3a:	2300      	movs	r3, #0
}
 8006b3c:	4618      	mov	r0, r3
 8006b3e:	370c      	adds	r7, #12
 8006b40:	46bd      	mov	sp, r7
 8006b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b46:	4770      	bx	lr

08006b48 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8006b48:	b480      	push	{r7}
 8006b4a:	b083      	sub	sp, #12
 8006b4c:	af00      	add	r7, sp, #0
 8006b4e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8006b50:	bf00      	nop
 8006b52:	370c      	adds	r7, #12
 8006b54:	46bd      	mov	sp, r7
 8006b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b5a:	4770      	bx	lr

08006b5c <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8006b5c:	b480      	push	{r7}
 8006b5e:	b083      	sub	sp, #12
 8006b60:	af00      	add	r7, sp, #0
 8006b62:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8006b64:	bf00      	nop
 8006b66:	370c      	adds	r7, #12
 8006b68:	46bd      	mov	sp, r7
 8006b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b6e:	4770      	bx	lr

08006b70 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8006b70:	b480      	push	{r7}
 8006b72:	b083      	sub	sp, #12
 8006b74:	af00      	add	r7, sp, #0
 8006b76:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8006b78:	bf00      	nop
 8006b7a:	370c      	adds	r7, #12
 8006b7c:	46bd      	mov	sp, r7
 8006b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b82:	4770      	bx	lr

08006b84 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8006b84:	b480      	push	{r7}
 8006b86:	b083      	sub	sp, #12
 8006b88:	af00      	add	r7, sp, #0
 8006b8a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8006b8c:	bf00      	nop
 8006b8e:	370c      	adds	r7, #12
 8006b90:	46bd      	mov	sp, r7
 8006b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b96:	4770      	bx	lr

08006b98 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8006b98:	b480      	push	{r7}
 8006b9a:	b083      	sub	sp, #12
 8006b9c:	af00      	add	r7, sp, #0
 8006b9e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8006ba0:	bf00      	nop
 8006ba2:	370c      	adds	r7, #12
 8006ba4:	46bd      	mov	sp, r7
 8006ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006baa:	4770      	bx	lr

08006bac <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8006bac:	b590      	push	{r4, r7, lr}
 8006bae:	b09f      	sub	sp, #124	; 0x7c
 8006bb0:	af00      	add	r7, sp, #0
 8006bb2:	6078      	str	r0, [r7, #4]
 8006bb4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006bb6:	2300      	movs	r3, #0
 8006bb8:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006bc2:	2b01      	cmp	r3, #1
 8006bc4:	d101      	bne.n	8006bca <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8006bc6:	2302      	movs	r3, #2
 8006bc8:	e0be      	b.n	8006d48 <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	2201      	movs	r2, #1
 8006bce:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8006bd2:	2300      	movs	r3, #0
 8006bd4:	65fb      	str	r3, [r7, #92]	; 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8006bd6:	2300      	movs	r3, #0
 8006bd8:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	4a5c      	ldr	r2, [pc, #368]	; (8006d50 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8006be0:	4293      	cmp	r3, r2
 8006be2:	d102      	bne.n	8006bea <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8006be4:	4b5b      	ldr	r3, [pc, #364]	; (8006d54 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8006be6:	60bb      	str	r3, [r7, #8]
 8006be8:	e001      	b.n	8006bee <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8006bea:	2300      	movs	r3, #0
 8006bec:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8006bee:	68bb      	ldr	r3, [r7, #8]
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d10b      	bne.n	8006c0c <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006bf8:	f043 0220 	orr.w	r2, r3, #32
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	2200      	movs	r2, #0
 8006c04:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8006c08:	2301      	movs	r3, #1
 8006c0a:	e09d      	b.n	8006d48 <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8006c0c:	68bb      	ldr	r3, [r7, #8]
 8006c0e:	4618      	mov	r0, r3
 8006c10:	f7ff ff87 	bl	8006b22 <LL_ADC_REG_IsConversionOngoing>
 8006c14:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	4618      	mov	r0, r3
 8006c1c:	f7ff ff81 	bl	8006b22 <LL_ADC_REG_IsConversionOngoing>
 8006c20:	4603      	mov	r3, r0
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d17f      	bne.n	8006d26 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8006c26:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d17c      	bne.n	8006d26 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	4a47      	ldr	r2, [pc, #284]	; (8006d50 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8006c32:	4293      	cmp	r3, r2
 8006c34:	d004      	beq.n	8006c40 <HAL_ADCEx_MultiModeConfigChannel+0x94>
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	4a46      	ldr	r2, [pc, #280]	; (8006d54 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8006c3c:	4293      	cmp	r3, r2
 8006c3e:	d101      	bne.n	8006c44 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 8006c40:	4b45      	ldr	r3, [pc, #276]	; (8006d58 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8006c42:	e000      	b.n	8006c46 <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8006c44:	4b45      	ldr	r3, [pc, #276]	; (8006d5c <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8006c46:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8006c48:	683b      	ldr	r3, [r7, #0]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d039      	beq.n	8006cc4 <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8006c50:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006c52:	689b      	ldr	r3, [r3, #8]
 8006c54:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006c58:	683b      	ldr	r3, [r7, #0]
 8006c5a:	685b      	ldr	r3, [r3, #4]
 8006c5c:	431a      	orrs	r2, r3
 8006c5e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006c60:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	4a3a      	ldr	r2, [pc, #232]	; (8006d50 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8006c68:	4293      	cmp	r3, r2
 8006c6a:	d004      	beq.n	8006c76 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	4a38      	ldr	r2, [pc, #224]	; (8006d54 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8006c72:	4293      	cmp	r3, r2
 8006c74:	d10e      	bne.n	8006c94 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8006c76:	4836      	ldr	r0, [pc, #216]	; (8006d50 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8006c78:	f7ff ff40 	bl	8006afc <LL_ADC_IsEnabled>
 8006c7c:	4604      	mov	r4, r0
 8006c7e:	4835      	ldr	r0, [pc, #212]	; (8006d54 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8006c80:	f7ff ff3c 	bl	8006afc <LL_ADC_IsEnabled>
 8006c84:	4603      	mov	r3, r0
 8006c86:	4323      	orrs	r3, r4
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	bf0c      	ite	eq
 8006c8c:	2301      	moveq	r3, #1
 8006c8e:	2300      	movne	r3, #0
 8006c90:	b2db      	uxtb	r3, r3
 8006c92:	e008      	b.n	8006ca6 <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 8006c94:	4832      	ldr	r0, [pc, #200]	; (8006d60 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8006c96:	f7ff ff31 	bl	8006afc <LL_ADC_IsEnabled>
 8006c9a:	4603      	mov	r3, r0
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	bf0c      	ite	eq
 8006ca0:	2301      	moveq	r3, #1
 8006ca2:	2300      	movne	r3, #0
 8006ca4:	b2db      	uxtb	r3, r3
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d047      	beq.n	8006d3a <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8006caa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006cac:	689a      	ldr	r2, [r3, #8]
 8006cae:	4b2d      	ldr	r3, [pc, #180]	; (8006d64 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8006cb0:	4013      	ands	r3, r2
 8006cb2:	683a      	ldr	r2, [r7, #0]
 8006cb4:	6811      	ldr	r1, [r2, #0]
 8006cb6:	683a      	ldr	r2, [r7, #0]
 8006cb8:	6892      	ldr	r2, [r2, #8]
 8006cba:	430a      	orrs	r2, r1
 8006cbc:	431a      	orrs	r2, r3
 8006cbe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006cc0:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8006cc2:	e03a      	b.n	8006d3a <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8006cc4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006cc6:	689b      	ldr	r3, [r3, #8]
 8006cc8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006ccc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006cce:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	4a1e      	ldr	r2, [pc, #120]	; (8006d50 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8006cd6:	4293      	cmp	r3, r2
 8006cd8:	d004      	beq.n	8006ce4 <HAL_ADCEx_MultiModeConfigChannel+0x138>
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	4a1d      	ldr	r2, [pc, #116]	; (8006d54 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8006ce0:	4293      	cmp	r3, r2
 8006ce2:	d10e      	bne.n	8006d02 <HAL_ADCEx_MultiModeConfigChannel+0x156>
 8006ce4:	481a      	ldr	r0, [pc, #104]	; (8006d50 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8006ce6:	f7ff ff09 	bl	8006afc <LL_ADC_IsEnabled>
 8006cea:	4604      	mov	r4, r0
 8006cec:	4819      	ldr	r0, [pc, #100]	; (8006d54 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8006cee:	f7ff ff05 	bl	8006afc <LL_ADC_IsEnabled>
 8006cf2:	4603      	mov	r3, r0
 8006cf4:	4323      	orrs	r3, r4
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	bf0c      	ite	eq
 8006cfa:	2301      	moveq	r3, #1
 8006cfc:	2300      	movne	r3, #0
 8006cfe:	b2db      	uxtb	r3, r3
 8006d00:	e008      	b.n	8006d14 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8006d02:	4817      	ldr	r0, [pc, #92]	; (8006d60 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8006d04:	f7ff fefa 	bl	8006afc <LL_ADC_IsEnabled>
 8006d08:	4603      	mov	r3, r0
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	bf0c      	ite	eq
 8006d0e:	2301      	moveq	r3, #1
 8006d10:	2300      	movne	r3, #0
 8006d12:	b2db      	uxtb	r3, r3
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d010      	beq.n	8006d3a <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8006d18:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006d1a:	689a      	ldr	r2, [r3, #8]
 8006d1c:	4b11      	ldr	r3, [pc, #68]	; (8006d64 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8006d1e:	4013      	ands	r3, r2
 8006d20:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006d22:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8006d24:	e009      	b.n	8006d3a <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d2a:	f043 0220 	orr.w	r2, r3, #32
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8006d32:	2301      	movs	r3, #1
 8006d34:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8006d38:	e000      	b.n	8006d3c <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8006d3a:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	2200      	movs	r2, #0
 8006d40:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8006d44:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8006d48:	4618      	mov	r0, r3
 8006d4a:	377c      	adds	r7, #124	; 0x7c
 8006d4c:	46bd      	mov	sp, r7
 8006d4e:	bd90      	pop	{r4, r7, pc}
 8006d50:	40022000 	.word	0x40022000
 8006d54:	40022100 	.word	0x40022100
 8006d58:	40022300 	.word	0x40022300
 8006d5c:	58026300 	.word	0x58026300
 8006d60:	58026000 	.word	0x58026000
 8006d64:	fffff0e0 	.word	0xfffff0e0

08006d68 <__NVIC_SetPriorityGrouping>:
{
 8006d68:	b480      	push	{r7}
 8006d6a:	b085      	sub	sp, #20
 8006d6c:	af00      	add	r7, sp, #0
 8006d6e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	f003 0307 	and.w	r3, r3, #7
 8006d76:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006d78:	4b0b      	ldr	r3, [pc, #44]	; (8006da8 <__NVIC_SetPriorityGrouping+0x40>)
 8006d7a:	68db      	ldr	r3, [r3, #12]
 8006d7c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006d7e:	68ba      	ldr	r2, [r7, #8]
 8006d80:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8006d84:	4013      	ands	r3, r2
 8006d86:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006d8c:	68bb      	ldr	r3, [r7, #8]
 8006d8e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8006d90:	4b06      	ldr	r3, [pc, #24]	; (8006dac <__NVIC_SetPriorityGrouping+0x44>)
 8006d92:	4313      	orrs	r3, r2
 8006d94:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006d96:	4a04      	ldr	r2, [pc, #16]	; (8006da8 <__NVIC_SetPriorityGrouping+0x40>)
 8006d98:	68bb      	ldr	r3, [r7, #8]
 8006d9a:	60d3      	str	r3, [r2, #12]
}
 8006d9c:	bf00      	nop
 8006d9e:	3714      	adds	r7, #20
 8006da0:	46bd      	mov	sp, r7
 8006da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006da6:	4770      	bx	lr
 8006da8:	e000ed00 	.word	0xe000ed00
 8006dac:	05fa0000 	.word	0x05fa0000

08006db0 <__NVIC_GetPriorityGrouping>:
{
 8006db0:	b480      	push	{r7}
 8006db2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006db4:	4b04      	ldr	r3, [pc, #16]	; (8006dc8 <__NVIC_GetPriorityGrouping+0x18>)
 8006db6:	68db      	ldr	r3, [r3, #12]
 8006db8:	0a1b      	lsrs	r3, r3, #8
 8006dba:	f003 0307 	and.w	r3, r3, #7
}
 8006dbe:	4618      	mov	r0, r3
 8006dc0:	46bd      	mov	sp, r7
 8006dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc6:	4770      	bx	lr
 8006dc8:	e000ed00 	.word	0xe000ed00

08006dcc <__NVIC_EnableIRQ>:
{
 8006dcc:	b480      	push	{r7}
 8006dce:	b083      	sub	sp, #12
 8006dd0:	af00      	add	r7, sp, #0
 8006dd2:	4603      	mov	r3, r0
 8006dd4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8006dd6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	db0b      	blt.n	8006df6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006dde:	88fb      	ldrh	r3, [r7, #6]
 8006de0:	f003 021f 	and.w	r2, r3, #31
 8006de4:	4907      	ldr	r1, [pc, #28]	; (8006e04 <__NVIC_EnableIRQ+0x38>)
 8006de6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006dea:	095b      	lsrs	r3, r3, #5
 8006dec:	2001      	movs	r0, #1
 8006dee:	fa00 f202 	lsl.w	r2, r0, r2
 8006df2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8006df6:	bf00      	nop
 8006df8:	370c      	adds	r7, #12
 8006dfa:	46bd      	mov	sp, r7
 8006dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e00:	4770      	bx	lr
 8006e02:	bf00      	nop
 8006e04:	e000e100 	.word	0xe000e100

08006e08 <__NVIC_SetPriority>:
{
 8006e08:	b480      	push	{r7}
 8006e0a:	b083      	sub	sp, #12
 8006e0c:	af00      	add	r7, sp, #0
 8006e0e:	4603      	mov	r3, r0
 8006e10:	6039      	str	r1, [r7, #0]
 8006e12:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8006e14:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	db0a      	blt.n	8006e32 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006e1c:	683b      	ldr	r3, [r7, #0]
 8006e1e:	b2da      	uxtb	r2, r3
 8006e20:	490c      	ldr	r1, [pc, #48]	; (8006e54 <__NVIC_SetPriority+0x4c>)
 8006e22:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006e26:	0112      	lsls	r2, r2, #4
 8006e28:	b2d2      	uxtb	r2, r2
 8006e2a:	440b      	add	r3, r1
 8006e2c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8006e30:	e00a      	b.n	8006e48 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006e32:	683b      	ldr	r3, [r7, #0]
 8006e34:	b2da      	uxtb	r2, r3
 8006e36:	4908      	ldr	r1, [pc, #32]	; (8006e58 <__NVIC_SetPriority+0x50>)
 8006e38:	88fb      	ldrh	r3, [r7, #6]
 8006e3a:	f003 030f 	and.w	r3, r3, #15
 8006e3e:	3b04      	subs	r3, #4
 8006e40:	0112      	lsls	r2, r2, #4
 8006e42:	b2d2      	uxtb	r2, r2
 8006e44:	440b      	add	r3, r1
 8006e46:	761a      	strb	r2, [r3, #24]
}
 8006e48:	bf00      	nop
 8006e4a:	370c      	adds	r7, #12
 8006e4c:	46bd      	mov	sp, r7
 8006e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e52:	4770      	bx	lr
 8006e54:	e000e100 	.word	0xe000e100
 8006e58:	e000ed00 	.word	0xe000ed00

08006e5c <NVIC_EncodePriority>:
{
 8006e5c:	b480      	push	{r7}
 8006e5e:	b089      	sub	sp, #36	; 0x24
 8006e60:	af00      	add	r7, sp, #0
 8006e62:	60f8      	str	r0, [r7, #12]
 8006e64:	60b9      	str	r1, [r7, #8]
 8006e66:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	f003 0307 	and.w	r3, r3, #7
 8006e6e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006e70:	69fb      	ldr	r3, [r7, #28]
 8006e72:	f1c3 0307 	rsb	r3, r3, #7
 8006e76:	2b04      	cmp	r3, #4
 8006e78:	bf28      	it	cs
 8006e7a:	2304      	movcs	r3, #4
 8006e7c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006e7e:	69fb      	ldr	r3, [r7, #28]
 8006e80:	3304      	adds	r3, #4
 8006e82:	2b06      	cmp	r3, #6
 8006e84:	d902      	bls.n	8006e8c <NVIC_EncodePriority+0x30>
 8006e86:	69fb      	ldr	r3, [r7, #28]
 8006e88:	3b03      	subs	r3, #3
 8006e8a:	e000      	b.n	8006e8e <NVIC_EncodePriority+0x32>
 8006e8c:	2300      	movs	r3, #0
 8006e8e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006e90:	f04f 32ff 	mov.w	r2, #4294967295
 8006e94:	69bb      	ldr	r3, [r7, #24]
 8006e96:	fa02 f303 	lsl.w	r3, r2, r3
 8006e9a:	43da      	mvns	r2, r3
 8006e9c:	68bb      	ldr	r3, [r7, #8]
 8006e9e:	401a      	ands	r2, r3
 8006ea0:	697b      	ldr	r3, [r7, #20]
 8006ea2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006ea4:	f04f 31ff 	mov.w	r1, #4294967295
 8006ea8:	697b      	ldr	r3, [r7, #20]
 8006eaa:	fa01 f303 	lsl.w	r3, r1, r3
 8006eae:	43d9      	mvns	r1, r3
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006eb4:	4313      	orrs	r3, r2
}
 8006eb6:	4618      	mov	r0, r3
 8006eb8:	3724      	adds	r7, #36	; 0x24
 8006eba:	46bd      	mov	sp, r7
 8006ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ec0:	4770      	bx	lr

08006ec2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006ec2:	b580      	push	{r7, lr}
 8006ec4:	b082      	sub	sp, #8
 8006ec6:	af00      	add	r7, sp, #0
 8006ec8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006eca:	6878      	ldr	r0, [r7, #4]
 8006ecc:	f7ff ff4c 	bl	8006d68 <__NVIC_SetPriorityGrouping>
}
 8006ed0:	bf00      	nop
 8006ed2:	3708      	adds	r7, #8
 8006ed4:	46bd      	mov	sp, r7
 8006ed6:	bd80      	pop	{r7, pc}

08006ed8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006ed8:	b580      	push	{r7, lr}
 8006eda:	b086      	sub	sp, #24
 8006edc:	af00      	add	r7, sp, #0
 8006ede:	4603      	mov	r3, r0
 8006ee0:	60b9      	str	r1, [r7, #8]
 8006ee2:	607a      	str	r2, [r7, #4]
 8006ee4:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8006ee6:	f7ff ff63 	bl	8006db0 <__NVIC_GetPriorityGrouping>
 8006eea:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006eec:	687a      	ldr	r2, [r7, #4]
 8006eee:	68b9      	ldr	r1, [r7, #8]
 8006ef0:	6978      	ldr	r0, [r7, #20]
 8006ef2:	f7ff ffb3 	bl	8006e5c <NVIC_EncodePriority>
 8006ef6:	4602      	mov	r2, r0
 8006ef8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8006efc:	4611      	mov	r1, r2
 8006efe:	4618      	mov	r0, r3
 8006f00:	f7ff ff82 	bl	8006e08 <__NVIC_SetPriority>
}
 8006f04:	bf00      	nop
 8006f06:	3718      	adds	r7, #24
 8006f08:	46bd      	mov	sp, r7
 8006f0a:	bd80      	pop	{r7, pc}

08006f0c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006f0c:	b580      	push	{r7, lr}
 8006f0e:	b082      	sub	sp, #8
 8006f10:	af00      	add	r7, sp, #0
 8006f12:	4603      	mov	r3, r0
 8006f14:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006f16:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006f1a:	4618      	mov	r0, r3
 8006f1c:	f7ff ff56 	bl	8006dcc <__NVIC_EnableIRQ>
}
 8006f20:	bf00      	nop
 8006f22:	3708      	adds	r7, #8
 8006f24:	46bd      	mov	sp, r7
 8006f26:	bd80      	pop	{r7, pc}

08006f28 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8006f28:	b580      	push	{r7, lr}
 8006f2a:	b082      	sub	sp, #8
 8006f2c:	af00      	add	r7, sp, #0
 8006f2e:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d101      	bne.n	8006f3a <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8006f36:	2301      	movs	r3, #1
 8006f38:	e054      	b.n	8006fe4 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	7f5b      	ldrb	r3, [r3, #29]
 8006f3e:	b2db      	uxtb	r3, r3
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d105      	bne.n	8006f50 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	2200      	movs	r2, #0
 8006f48:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8006f4a:	6878      	ldr	r0, [r7, #4]
 8006f4c:	f7f9 fd2e 	bl	80009ac <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	2202      	movs	r2, #2
 8006f54:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	791b      	ldrb	r3, [r3, #4]
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d10c      	bne.n	8006f78 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	4a22      	ldr	r2, [pc, #136]	; (8006fec <HAL_CRC_Init+0xc4>)
 8006f64:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	689a      	ldr	r2, [r3, #8]
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	f022 0218 	bic.w	r2, r2, #24
 8006f74:	609a      	str	r2, [r3, #8]
 8006f76:	e00c      	b.n	8006f92 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	6899      	ldr	r1, [r3, #8]
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	68db      	ldr	r3, [r3, #12]
 8006f80:	461a      	mov	r2, r3
 8006f82:	6878      	ldr	r0, [r7, #4]
 8006f84:	f000 f834 	bl	8006ff0 <HAL_CRCEx_Polynomial_Set>
 8006f88:	4603      	mov	r3, r0
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d001      	beq.n	8006f92 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8006f8e:	2301      	movs	r3, #1
 8006f90:	e028      	b.n	8006fe4 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	795b      	ldrb	r3, [r3, #5]
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d105      	bne.n	8006fa6 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	f04f 32ff 	mov.w	r2, #4294967295
 8006fa2:	611a      	str	r2, [r3, #16]
 8006fa4:	e004      	b.n	8006fb0 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	687a      	ldr	r2, [r7, #4]
 8006fac:	6912      	ldr	r2, [r2, #16]
 8006fae:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	689b      	ldr	r3, [r3, #8]
 8006fb6:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	695a      	ldr	r2, [r3, #20]
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	430a      	orrs	r2, r1
 8006fc4:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	689b      	ldr	r3, [r3, #8]
 8006fcc:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	699a      	ldr	r2, [r3, #24]
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	430a      	orrs	r2, r1
 8006fda:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	2201      	movs	r2, #1
 8006fe0:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8006fe2:	2300      	movs	r3, #0
}
 8006fe4:	4618      	mov	r0, r3
 8006fe6:	3708      	adds	r7, #8
 8006fe8:	46bd      	mov	sp, r7
 8006fea:	bd80      	pop	{r7, pc}
 8006fec:	04c11db7 	.word	0x04c11db7

08006ff0 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8006ff0:	b480      	push	{r7}
 8006ff2:	b087      	sub	sp, #28
 8006ff4:	af00      	add	r7, sp, #0
 8006ff6:	60f8      	str	r0, [r7, #12]
 8006ff8:	60b9      	str	r1, [r7, #8]
 8006ffa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006ffc:	2300      	movs	r3, #0
 8006ffe:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8007000:	231f      	movs	r3, #31
 8007002:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8007004:	bf00      	nop
 8007006:	693b      	ldr	r3, [r7, #16]
 8007008:	1e5a      	subs	r2, r3, #1
 800700a:	613a      	str	r2, [r7, #16]
 800700c:	2b00      	cmp	r3, #0
 800700e:	d009      	beq.n	8007024 <HAL_CRCEx_Polynomial_Set+0x34>
 8007010:	693b      	ldr	r3, [r7, #16]
 8007012:	f003 031f 	and.w	r3, r3, #31
 8007016:	68ba      	ldr	r2, [r7, #8]
 8007018:	fa22 f303 	lsr.w	r3, r2, r3
 800701c:	f003 0301 	and.w	r3, r3, #1
 8007020:	2b00      	cmp	r3, #0
 8007022:	d0f0      	beq.n	8007006 <HAL_CRCEx_Polynomial_Set+0x16>
  {
  }

  switch (PolyLength)
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	2b18      	cmp	r3, #24
 8007028:	d846      	bhi.n	80070b8 <HAL_CRCEx_Polynomial_Set+0xc8>
 800702a:	a201      	add	r2, pc, #4	; (adr r2, 8007030 <HAL_CRCEx_Polynomial_Set+0x40>)
 800702c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007030:	080070bf 	.word	0x080070bf
 8007034:	080070b9 	.word	0x080070b9
 8007038:	080070b9 	.word	0x080070b9
 800703c:	080070b9 	.word	0x080070b9
 8007040:	080070b9 	.word	0x080070b9
 8007044:	080070b9 	.word	0x080070b9
 8007048:	080070b9 	.word	0x080070b9
 800704c:	080070b9 	.word	0x080070b9
 8007050:	080070ad 	.word	0x080070ad
 8007054:	080070b9 	.word	0x080070b9
 8007058:	080070b9 	.word	0x080070b9
 800705c:	080070b9 	.word	0x080070b9
 8007060:	080070b9 	.word	0x080070b9
 8007064:	080070b9 	.word	0x080070b9
 8007068:	080070b9 	.word	0x080070b9
 800706c:	080070b9 	.word	0x080070b9
 8007070:	080070a1 	.word	0x080070a1
 8007074:	080070b9 	.word	0x080070b9
 8007078:	080070b9 	.word	0x080070b9
 800707c:	080070b9 	.word	0x080070b9
 8007080:	080070b9 	.word	0x080070b9
 8007084:	080070b9 	.word	0x080070b9
 8007088:	080070b9 	.word	0x080070b9
 800708c:	080070b9 	.word	0x080070b9
 8007090:	08007095 	.word	0x08007095
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8007094:	693b      	ldr	r3, [r7, #16]
 8007096:	2b06      	cmp	r3, #6
 8007098:	d913      	bls.n	80070c2 <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 800709a:	2301      	movs	r3, #1
 800709c:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800709e:	e010      	b.n	80070c2 <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 80070a0:	693b      	ldr	r3, [r7, #16]
 80070a2:	2b07      	cmp	r3, #7
 80070a4:	d90f      	bls.n	80070c6 <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 80070a6:	2301      	movs	r3, #1
 80070a8:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80070aa:	e00c      	b.n	80070c6 <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 80070ac:	693b      	ldr	r3, [r7, #16]
 80070ae:	2b0f      	cmp	r3, #15
 80070b0:	d90b      	bls.n	80070ca <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 80070b2:	2301      	movs	r3, #1
 80070b4:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80070b6:	e008      	b.n	80070ca <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 80070b8:	2301      	movs	r3, #1
 80070ba:	75fb      	strb	r3, [r7, #23]
      break;
 80070bc:	e006      	b.n	80070cc <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80070be:	bf00      	nop
 80070c0:	e004      	b.n	80070cc <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80070c2:	bf00      	nop
 80070c4:	e002      	b.n	80070cc <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80070c6:	bf00      	nop
 80070c8:	e000      	b.n	80070cc <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80070ca:	bf00      	nop
  }
  if (status == HAL_OK)
 80070cc:	7dfb      	ldrb	r3, [r7, #23]
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d10d      	bne.n	80070ee <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	68ba      	ldr	r2, [r7, #8]
 80070d8:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	689b      	ldr	r3, [r3, #8]
 80070e0:	f023 0118 	bic.w	r1, r3, #24
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	687a      	ldr	r2, [r7, #4]
 80070ea:	430a      	orrs	r2, r1
 80070ec:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 80070ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80070f0:	4618      	mov	r0, r3
 80070f2:	371c      	adds	r7, #28
 80070f4:	46bd      	mov	sp, r7
 80070f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070fa:	4770      	bx	lr

080070fc <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 80070fc:	b580      	push	{r7, lr}
 80070fe:	b082      	sub	sp, #8
 8007100:	af00      	add	r7, sp, #0
 8007102:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	2b00      	cmp	r3, #0
 8007108:	d101      	bne.n	800710e <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 800710a:	2301      	movs	r3, #1
 800710c:	e04f      	b.n	80071ae <HAL_DMA2D_Init+0xb2>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8007114:	b2db      	uxtb	r3, r3
 8007116:	2b00      	cmp	r3, #0
 8007118:	d106      	bne.n	8007128 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	2200      	movs	r2, #0
 800711e:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8007122:	6878      	ldr	r0, [r7, #4]
 8007124:	f7f9 fc9e 	bl	8000a64 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	2202      	movs	r2, #2
 800712c:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	681a      	ldr	r2, [r3, #0]
 8007136:	4b20      	ldr	r3, [pc, #128]	; (80071b8 <HAL_DMA2D_Init+0xbc>)
 8007138:	4013      	ands	r3, r2
 800713a:	687a      	ldr	r2, [r7, #4]
 800713c:	6851      	ldr	r1, [r2, #4]
 800713e:	687a      	ldr	r2, [r7, #4]
 8007140:	69d2      	ldr	r2, [r2, #28]
 8007142:	4311      	orrs	r1, r2
 8007144:	687a      	ldr	r2, [r7, #4]
 8007146:	6812      	ldr	r2, [r2, #0]
 8007148:	430b      	orrs	r3, r1
 800714a:	6013      	str	r3, [r2, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007152:	4b1a      	ldr	r3, [pc, #104]	; (80071bc <HAL_DMA2D_Init+0xc0>)
 8007154:	4013      	ands	r3, r2
 8007156:	687a      	ldr	r2, [r7, #4]
 8007158:	6891      	ldr	r1, [r2, #8]
 800715a:	687a      	ldr	r2, [r7, #4]
 800715c:	6992      	ldr	r2, [r2, #24]
 800715e:	4311      	orrs	r1, r2
 8007160:	687a      	ldr	r2, [r7, #4]
 8007162:	6812      	ldr	r2, [r2, #0]
 8007164:	430b      	orrs	r3, r1
 8007166:	6353      	str	r3, [r2, #52]	; 0x34
             hdma2d->Init.ColorMode | hdma2d->Init.BytesSwap);

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800716e:	4b14      	ldr	r3, [pc, #80]	; (80071c0 <HAL_DMA2D_Init+0xc4>)
 8007170:	4013      	ands	r3, r2
 8007172:	687a      	ldr	r2, [r7, #4]
 8007174:	68d1      	ldr	r1, [r2, #12]
 8007176:	687a      	ldr	r2, [r7, #4]
 8007178:	6812      	ldr	r2, [r2, #0]
 800717a:	430b      	orrs	r3, r1
 800717c:	6413      	str	r3, [r2, #64]	; 0x40
  /* DMA2D OPFCCR AI and RBS fields setting (Output Alpha Inversion)*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007184:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	691b      	ldr	r3, [r3, #16]
 800718c:	051a      	lsls	r2, r3, #20
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	695b      	ldr	r3, [r3, #20]
 8007192:	055b      	lsls	r3, r3, #21
 8007194:	431a      	orrs	r2, r3
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	430a      	orrs	r2, r1
 800719c:	635a      	str	r2, [r3, #52]	; 0x34
             ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | \
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	2200      	movs	r2, #0
 80071a2:	665a      	str	r2, [r3, #100]	; 0x64

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	2201      	movs	r2, #1
 80071a8:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  return HAL_OK;
 80071ac:	2300      	movs	r3, #0
}
 80071ae:	4618      	mov	r0, r3
 80071b0:	3708      	adds	r7, #8
 80071b2:	46bd      	mov	sp, r7
 80071b4:	bd80      	pop	{r7, pc}
 80071b6:	bf00      	nop
 80071b8:	fff8ffbf 	.word	0xfff8ffbf
 80071bc:	fffffef8 	.word	0xfffffef8
 80071c0:	ffff0000 	.word	0xffff0000

080071c4 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 80071c4:	b480      	push	{r7}
 80071c6:	b087      	sub	sp, #28
 80071c8:	af00      	add	r7, sp, #0
 80071ca:	6078      	str	r0, [r7, #4]
 80071cc:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	685b      	ldr	r3, [r3, #4]
 80071d2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
    }
  }
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));

  if ((LayerIdx == DMA2D_FOREGROUND_LAYER) && (hdma2d->LayerCfg[LayerIdx].InputColorMode == DMA2D_INPUT_YCBCR))
 80071d6:	683b      	ldr	r3, [r7, #0]
 80071d8:	2b01      	cmp	r3, #1
  {
    assert_param(IS_DMA2D_CHROMA_SUB_SAMPLING(hdma2d->LayerCfg[LayerIdx].ChromaSubSampling));
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 80071e0:	2b01      	cmp	r3, #1
 80071e2:	d101      	bne.n	80071e8 <HAL_DMA2D_ConfigLayer+0x24>
 80071e4:	2302      	movs	r3, #2
 80071e6:	e092      	b.n	800730e <HAL_DMA2D_ConfigLayer+0x14a>
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	2201      	movs	r2, #1
 80071ec:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	2202      	movs	r2, #2
 80071f4:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 80071f8:	683a      	ldr	r2, [r7, #0]
 80071fa:	4613      	mov	r3, r2
 80071fc:	00db      	lsls	r3, r3, #3
 80071fe:	1a9b      	subs	r3, r3, r2
 8007200:	009b      	lsls	r3, r3, #2
 8007202:	3328      	adds	r3, #40	; 0x28
 8007204:	687a      	ldr	r2, [r7, #4]
 8007206:	4413      	add	r3, r2
 8007208:	60fb      	str	r3, [r7, #12]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	685a      	ldr	r2, [r3, #4]
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	689b      	ldr	r3, [r3, #8]
 8007212:	041b      	lsls	r3, r3, #16
 8007214:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	691b      	ldr	r3, [r3, #16]
 800721a:	051b      	lsls	r3, r3, #20
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 800721c:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	695b      	ldr	r3, [r3, #20]
 8007222:	055b      	lsls	r3, r3, #21
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8007224:	4313      	orrs	r3, r2
 8007226:	613b      	str	r3, [r7, #16]
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
 8007228:	4b3c      	ldr	r3, [pc, #240]	; (800731c <HAL_DMA2D_ConfigLayer+0x158>)
 800722a:	617b      	str	r3, [r7, #20]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	685b      	ldr	r3, [r3, #4]
 8007230:	2b0a      	cmp	r3, #10
 8007232:	d003      	beq.n	800723c <HAL_DMA2D_ConfigLayer+0x78>
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	685b      	ldr	r3, [r3, #4]
 8007238:	2b09      	cmp	r3, #9
 800723a:	d107      	bne.n	800724c <HAL_DMA2D_ConfigLayer+0x88>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	68db      	ldr	r3, [r3, #12]
 8007240:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8007244:	693a      	ldr	r2, [r7, #16]
 8007246:	4313      	orrs	r3, r2
 8007248:	613b      	str	r3, [r7, #16]
 800724a:	e005      	b.n	8007258 <HAL_DMA2D_ConfigLayer+0x94>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	68db      	ldr	r3, [r3, #12]
 8007250:	061b      	lsls	r3, r3, #24
 8007252:	693a      	ldr	r2, [r7, #16]
 8007254:	4313      	orrs	r3, r2
 8007256:	613b      	str	r3, [r7, #16]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8007258:	683b      	ldr	r3, [r7, #0]
 800725a:	2b00      	cmp	r3, #0
 800725c:	d120      	bne.n	80072a0 <HAL_DMA2D_ConfigLayer+0xdc>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007264:	697b      	ldr	r3, [r7, #20]
 8007266:	43db      	mvns	r3, r3
 8007268:	ea02 0103 	and.w	r1, r2, r3
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	693a      	ldr	r2, [r7, #16]
 8007272:	430a      	orrs	r2, r1
 8007274:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	68fa      	ldr	r2, [r7, #12]
 800727c:	6812      	ldr	r2, [r2, #0]
 800727e:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	685b      	ldr	r3, [r3, #4]
 8007284:	2b0a      	cmp	r3, #10
 8007286:	d003      	beq.n	8007290 <HAL_DMA2D_ConfigLayer+0xcc>
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	685b      	ldr	r3, [r3, #4]
 800728c:	2b09      	cmp	r3, #9
 800728e:	d135      	bne.n	80072fc <HAL_DMA2D_ConfigLayer+0x138>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	68da      	ldr	r2, [r3, #12]
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 800729c:	629a      	str	r2, [r3, #40]	; 0x28
 800729e:	e02d      	b.n	80072fc <HAL_DMA2D_ConfigLayer+0x138>
  }
  /* Configure the foreground DMA2D layer */
  else
  {

    if (pLayerCfg->InputColorMode == DMA2D_INPUT_YCBCR)
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	685b      	ldr	r3, [r3, #4]
 80072a4:	2b0b      	cmp	r3, #11
 80072a6:	d109      	bne.n	80072bc <HAL_DMA2D_ConfigLayer+0xf8>
    {
      regValue |= (pLayerCfg->ChromaSubSampling << DMA2D_FGPFCCR_CSS_Pos);
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	699b      	ldr	r3, [r3, #24]
 80072ac:	049b      	lsls	r3, r3, #18
 80072ae:	693a      	ldr	r2, [r7, #16]
 80072b0:	4313      	orrs	r3, r2
 80072b2:	613b      	str	r3, [r7, #16]
      regMask  |= DMA2D_FGPFCCR_CSS;
 80072b4:	697b      	ldr	r3, [r7, #20]
 80072b6:	f443 2340 	orr.w	r3, r3, #786432	; 0xc0000
 80072ba:	617b      	str	r3, [r7, #20]
    }

    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	69da      	ldr	r2, [r3, #28]
 80072c2:	697b      	ldr	r3, [r7, #20]
 80072c4:	43db      	mvns	r3, r3
 80072c6:	ea02 0103 	and.w	r1, r2, r3
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	693a      	ldr	r2, [r7, #16]
 80072d0:	430a      	orrs	r2, r1
 80072d2:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	68fa      	ldr	r2, [r7, #12]
 80072da:	6812      	ldr	r2, [r2, #0]
 80072dc:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	685b      	ldr	r3, [r3, #4]
 80072e2:	2b0a      	cmp	r3, #10
 80072e4:	d003      	beq.n	80072ee <HAL_DMA2D_ConfigLayer+0x12a>
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	685b      	ldr	r3, [r3, #4]
 80072ea:	2b09      	cmp	r3, #9
 80072ec:	d106      	bne.n	80072fc <HAL_DMA2D_ConfigLayer+0x138>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	68da      	ldr	r2, [r3, #12]
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 80072fa:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	2201      	movs	r2, #1
 8007300:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	2200      	movs	r2, #0
 8007308:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

  return HAL_OK;
 800730c:	2300      	movs	r3, #0
}
 800730e:	4618      	mov	r0, r3
 8007310:	371c      	adds	r7, #28
 8007312:	46bd      	mov	sp, r7
 8007314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007318:	4770      	bx	lr
 800731a:	bf00      	nop
 800731c:	ff33000f 	.word	0xff33000f

08007320 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007320:	b480      	push	{r7}
 8007322:	b089      	sub	sp, #36	; 0x24
 8007324:	af00      	add	r7, sp, #0
 8007326:	6078      	str	r0, [r7, #4]
 8007328:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800732a:	2300      	movs	r3, #0
 800732c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800732e:	4b89      	ldr	r3, [pc, #548]	; (8007554 <HAL_GPIO_Init+0x234>)
 8007330:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8007332:	e194      	b.n	800765e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8007334:	683b      	ldr	r3, [r7, #0]
 8007336:	681a      	ldr	r2, [r3, #0]
 8007338:	2101      	movs	r1, #1
 800733a:	69fb      	ldr	r3, [r7, #28]
 800733c:	fa01 f303 	lsl.w	r3, r1, r3
 8007340:	4013      	ands	r3, r2
 8007342:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8007344:	693b      	ldr	r3, [r7, #16]
 8007346:	2b00      	cmp	r3, #0
 8007348:	f000 8186 	beq.w	8007658 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800734c:	683b      	ldr	r3, [r7, #0]
 800734e:	685b      	ldr	r3, [r3, #4]
 8007350:	f003 0303 	and.w	r3, r3, #3
 8007354:	2b01      	cmp	r3, #1
 8007356:	d005      	beq.n	8007364 <HAL_GPIO_Init+0x44>
 8007358:	683b      	ldr	r3, [r7, #0]
 800735a:	685b      	ldr	r3, [r3, #4]
 800735c:	f003 0303 	and.w	r3, r3, #3
 8007360:	2b02      	cmp	r3, #2
 8007362:	d130      	bne.n	80073c6 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	689b      	ldr	r3, [r3, #8]
 8007368:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800736a:	69fb      	ldr	r3, [r7, #28]
 800736c:	005b      	lsls	r3, r3, #1
 800736e:	2203      	movs	r2, #3
 8007370:	fa02 f303 	lsl.w	r3, r2, r3
 8007374:	43db      	mvns	r3, r3
 8007376:	69ba      	ldr	r2, [r7, #24]
 8007378:	4013      	ands	r3, r2
 800737a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800737c:	683b      	ldr	r3, [r7, #0]
 800737e:	68da      	ldr	r2, [r3, #12]
 8007380:	69fb      	ldr	r3, [r7, #28]
 8007382:	005b      	lsls	r3, r3, #1
 8007384:	fa02 f303 	lsl.w	r3, r2, r3
 8007388:	69ba      	ldr	r2, [r7, #24]
 800738a:	4313      	orrs	r3, r2
 800738c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	69ba      	ldr	r2, [r7, #24]
 8007392:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	685b      	ldr	r3, [r3, #4]
 8007398:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800739a:	2201      	movs	r2, #1
 800739c:	69fb      	ldr	r3, [r7, #28]
 800739e:	fa02 f303 	lsl.w	r3, r2, r3
 80073a2:	43db      	mvns	r3, r3
 80073a4:	69ba      	ldr	r2, [r7, #24]
 80073a6:	4013      	ands	r3, r2
 80073a8:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80073aa:	683b      	ldr	r3, [r7, #0]
 80073ac:	685b      	ldr	r3, [r3, #4]
 80073ae:	091b      	lsrs	r3, r3, #4
 80073b0:	f003 0201 	and.w	r2, r3, #1
 80073b4:	69fb      	ldr	r3, [r7, #28]
 80073b6:	fa02 f303 	lsl.w	r3, r2, r3
 80073ba:	69ba      	ldr	r2, [r7, #24]
 80073bc:	4313      	orrs	r3, r2
 80073be:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	69ba      	ldr	r2, [r7, #24]
 80073c4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80073c6:	683b      	ldr	r3, [r7, #0]
 80073c8:	685b      	ldr	r3, [r3, #4]
 80073ca:	f003 0303 	and.w	r3, r3, #3
 80073ce:	2b03      	cmp	r3, #3
 80073d0:	d017      	beq.n	8007402 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	68db      	ldr	r3, [r3, #12]
 80073d6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80073d8:	69fb      	ldr	r3, [r7, #28]
 80073da:	005b      	lsls	r3, r3, #1
 80073dc:	2203      	movs	r2, #3
 80073de:	fa02 f303 	lsl.w	r3, r2, r3
 80073e2:	43db      	mvns	r3, r3
 80073e4:	69ba      	ldr	r2, [r7, #24]
 80073e6:	4013      	ands	r3, r2
 80073e8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80073ea:	683b      	ldr	r3, [r7, #0]
 80073ec:	689a      	ldr	r2, [r3, #8]
 80073ee:	69fb      	ldr	r3, [r7, #28]
 80073f0:	005b      	lsls	r3, r3, #1
 80073f2:	fa02 f303 	lsl.w	r3, r2, r3
 80073f6:	69ba      	ldr	r2, [r7, #24]
 80073f8:	4313      	orrs	r3, r2
 80073fa:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	69ba      	ldr	r2, [r7, #24]
 8007400:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007402:	683b      	ldr	r3, [r7, #0]
 8007404:	685b      	ldr	r3, [r3, #4]
 8007406:	f003 0303 	and.w	r3, r3, #3
 800740a:	2b02      	cmp	r3, #2
 800740c:	d123      	bne.n	8007456 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800740e:	69fb      	ldr	r3, [r7, #28]
 8007410:	08da      	lsrs	r2, r3, #3
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	3208      	adds	r2, #8
 8007416:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800741a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800741c:	69fb      	ldr	r3, [r7, #28]
 800741e:	f003 0307 	and.w	r3, r3, #7
 8007422:	009b      	lsls	r3, r3, #2
 8007424:	220f      	movs	r2, #15
 8007426:	fa02 f303 	lsl.w	r3, r2, r3
 800742a:	43db      	mvns	r3, r3
 800742c:	69ba      	ldr	r2, [r7, #24]
 800742e:	4013      	ands	r3, r2
 8007430:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8007432:	683b      	ldr	r3, [r7, #0]
 8007434:	691a      	ldr	r2, [r3, #16]
 8007436:	69fb      	ldr	r3, [r7, #28]
 8007438:	f003 0307 	and.w	r3, r3, #7
 800743c:	009b      	lsls	r3, r3, #2
 800743e:	fa02 f303 	lsl.w	r3, r2, r3
 8007442:	69ba      	ldr	r2, [r7, #24]
 8007444:	4313      	orrs	r3, r2
 8007446:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8007448:	69fb      	ldr	r3, [r7, #28]
 800744a:	08da      	lsrs	r2, r3, #3
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	3208      	adds	r2, #8
 8007450:	69b9      	ldr	r1, [r7, #24]
 8007452:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800745c:	69fb      	ldr	r3, [r7, #28]
 800745e:	005b      	lsls	r3, r3, #1
 8007460:	2203      	movs	r2, #3
 8007462:	fa02 f303 	lsl.w	r3, r2, r3
 8007466:	43db      	mvns	r3, r3
 8007468:	69ba      	ldr	r2, [r7, #24]
 800746a:	4013      	ands	r3, r2
 800746c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800746e:	683b      	ldr	r3, [r7, #0]
 8007470:	685b      	ldr	r3, [r3, #4]
 8007472:	f003 0203 	and.w	r2, r3, #3
 8007476:	69fb      	ldr	r3, [r7, #28]
 8007478:	005b      	lsls	r3, r3, #1
 800747a:	fa02 f303 	lsl.w	r3, r2, r3
 800747e:	69ba      	ldr	r2, [r7, #24]
 8007480:	4313      	orrs	r3, r2
 8007482:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	69ba      	ldr	r2, [r7, #24]
 8007488:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800748a:	683b      	ldr	r3, [r7, #0]
 800748c:	685b      	ldr	r3, [r3, #4]
 800748e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007492:	2b00      	cmp	r3, #0
 8007494:	f000 80e0 	beq.w	8007658 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007498:	4b2f      	ldr	r3, [pc, #188]	; (8007558 <HAL_GPIO_Init+0x238>)
 800749a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800749e:	4a2e      	ldr	r2, [pc, #184]	; (8007558 <HAL_GPIO_Init+0x238>)
 80074a0:	f043 0302 	orr.w	r3, r3, #2
 80074a4:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80074a8:	4b2b      	ldr	r3, [pc, #172]	; (8007558 <HAL_GPIO_Init+0x238>)
 80074aa:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80074ae:	f003 0302 	and.w	r3, r3, #2
 80074b2:	60fb      	str	r3, [r7, #12]
 80074b4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80074b6:	4a29      	ldr	r2, [pc, #164]	; (800755c <HAL_GPIO_Init+0x23c>)
 80074b8:	69fb      	ldr	r3, [r7, #28]
 80074ba:	089b      	lsrs	r3, r3, #2
 80074bc:	3302      	adds	r3, #2
 80074be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80074c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80074c4:	69fb      	ldr	r3, [r7, #28]
 80074c6:	f003 0303 	and.w	r3, r3, #3
 80074ca:	009b      	lsls	r3, r3, #2
 80074cc:	220f      	movs	r2, #15
 80074ce:	fa02 f303 	lsl.w	r3, r2, r3
 80074d2:	43db      	mvns	r3, r3
 80074d4:	69ba      	ldr	r2, [r7, #24]
 80074d6:	4013      	ands	r3, r2
 80074d8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	4a20      	ldr	r2, [pc, #128]	; (8007560 <HAL_GPIO_Init+0x240>)
 80074de:	4293      	cmp	r3, r2
 80074e0:	d052      	beq.n	8007588 <HAL_GPIO_Init+0x268>
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	4a1f      	ldr	r2, [pc, #124]	; (8007564 <HAL_GPIO_Init+0x244>)
 80074e6:	4293      	cmp	r3, r2
 80074e8:	d031      	beq.n	800754e <HAL_GPIO_Init+0x22e>
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	4a1e      	ldr	r2, [pc, #120]	; (8007568 <HAL_GPIO_Init+0x248>)
 80074ee:	4293      	cmp	r3, r2
 80074f0:	d02b      	beq.n	800754a <HAL_GPIO_Init+0x22a>
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	4a1d      	ldr	r2, [pc, #116]	; (800756c <HAL_GPIO_Init+0x24c>)
 80074f6:	4293      	cmp	r3, r2
 80074f8:	d025      	beq.n	8007546 <HAL_GPIO_Init+0x226>
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	4a1c      	ldr	r2, [pc, #112]	; (8007570 <HAL_GPIO_Init+0x250>)
 80074fe:	4293      	cmp	r3, r2
 8007500:	d01f      	beq.n	8007542 <HAL_GPIO_Init+0x222>
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	4a1b      	ldr	r2, [pc, #108]	; (8007574 <HAL_GPIO_Init+0x254>)
 8007506:	4293      	cmp	r3, r2
 8007508:	d019      	beq.n	800753e <HAL_GPIO_Init+0x21e>
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	4a1a      	ldr	r2, [pc, #104]	; (8007578 <HAL_GPIO_Init+0x258>)
 800750e:	4293      	cmp	r3, r2
 8007510:	d013      	beq.n	800753a <HAL_GPIO_Init+0x21a>
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	4a19      	ldr	r2, [pc, #100]	; (800757c <HAL_GPIO_Init+0x25c>)
 8007516:	4293      	cmp	r3, r2
 8007518:	d00d      	beq.n	8007536 <HAL_GPIO_Init+0x216>
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	4a18      	ldr	r2, [pc, #96]	; (8007580 <HAL_GPIO_Init+0x260>)
 800751e:	4293      	cmp	r3, r2
 8007520:	d007      	beq.n	8007532 <HAL_GPIO_Init+0x212>
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	4a17      	ldr	r2, [pc, #92]	; (8007584 <HAL_GPIO_Init+0x264>)
 8007526:	4293      	cmp	r3, r2
 8007528:	d101      	bne.n	800752e <HAL_GPIO_Init+0x20e>
 800752a:	2309      	movs	r3, #9
 800752c:	e02d      	b.n	800758a <HAL_GPIO_Init+0x26a>
 800752e:	230a      	movs	r3, #10
 8007530:	e02b      	b.n	800758a <HAL_GPIO_Init+0x26a>
 8007532:	2308      	movs	r3, #8
 8007534:	e029      	b.n	800758a <HAL_GPIO_Init+0x26a>
 8007536:	2307      	movs	r3, #7
 8007538:	e027      	b.n	800758a <HAL_GPIO_Init+0x26a>
 800753a:	2306      	movs	r3, #6
 800753c:	e025      	b.n	800758a <HAL_GPIO_Init+0x26a>
 800753e:	2305      	movs	r3, #5
 8007540:	e023      	b.n	800758a <HAL_GPIO_Init+0x26a>
 8007542:	2304      	movs	r3, #4
 8007544:	e021      	b.n	800758a <HAL_GPIO_Init+0x26a>
 8007546:	2303      	movs	r3, #3
 8007548:	e01f      	b.n	800758a <HAL_GPIO_Init+0x26a>
 800754a:	2302      	movs	r3, #2
 800754c:	e01d      	b.n	800758a <HAL_GPIO_Init+0x26a>
 800754e:	2301      	movs	r3, #1
 8007550:	e01b      	b.n	800758a <HAL_GPIO_Init+0x26a>
 8007552:	bf00      	nop
 8007554:	58000080 	.word	0x58000080
 8007558:	58024400 	.word	0x58024400
 800755c:	58000400 	.word	0x58000400
 8007560:	58020000 	.word	0x58020000
 8007564:	58020400 	.word	0x58020400
 8007568:	58020800 	.word	0x58020800
 800756c:	58020c00 	.word	0x58020c00
 8007570:	58021000 	.word	0x58021000
 8007574:	58021400 	.word	0x58021400
 8007578:	58021800 	.word	0x58021800
 800757c:	58021c00 	.word	0x58021c00
 8007580:	58022000 	.word	0x58022000
 8007584:	58022400 	.word	0x58022400
 8007588:	2300      	movs	r3, #0
 800758a:	69fa      	ldr	r2, [r7, #28]
 800758c:	f002 0203 	and.w	r2, r2, #3
 8007590:	0092      	lsls	r2, r2, #2
 8007592:	4093      	lsls	r3, r2
 8007594:	69ba      	ldr	r2, [r7, #24]
 8007596:	4313      	orrs	r3, r2
 8007598:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800759a:	4938      	ldr	r1, [pc, #224]	; (800767c <HAL_GPIO_Init+0x35c>)
 800759c:	69fb      	ldr	r3, [r7, #28]
 800759e:	089b      	lsrs	r3, r3, #2
 80075a0:	3302      	adds	r3, #2
 80075a2:	69ba      	ldr	r2, [r7, #24]
 80075a4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80075a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80075b0:	693b      	ldr	r3, [r7, #16]
 80075b2:	43db      	mvns	r3, r3
 80075b4:	69ba      	ldr	r2, [r7, #24]
 80075b6:	4013      	ands	r3, r2
 80075b8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80075ba:	683b      	ldr	r3, [r7, #0]
 80075bc:	685b      	ldr	r3, [r3, #4]
 80075be:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d003      	beq.n	80075ce <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80075c6:	69ba      	ldr	r2, [r7, #24]
 80075c8:	693b      	ldr	r3, [r7, #16]
 80075ca:	4313      	orrs	r3, r2
 80075cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80075ce:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80075d2:	69bb      	ldr	r3, [r7, #24]
 80075d4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80075d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80075da:	685b      	ldr	r3, [r3, #4]
 80075dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80075de:	693b      	ldr	r3, [r7, #16]
 80075e0:	43db      	mvns	r3, r3
 80075e2:	69ba      	ldr	r2, [r7, #24]
 80075e4:	4013      	ands	r3, r2
 80075e6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80075e8:	683b      	ldr	r3, [r7, #0]
 80075ea:	685b      	ldr	r3, [r3, #4]
 80075ec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d003      	beq.n	80075fc <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80075f4:	69ba      	ldr	r2, [r7, #24]
 80075f6:	693b      	ldr	r3, [r7, #16]
 80075f8:	4313      	orrs	r3, r2
 80075fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80075fc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007600:	69bb      	ldr	r3, [r7, #24]
 8007602:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8007604:	697b      	ldr	r3, [r7, #20]
 8007606:	685b      	ldr	r3, [r3, #4]
 8007608:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800760a:	693b      	ldr	r3, [r7, #16]
 800760c:	43db      	mvns	r3, r3
 800760e:	69ba      	ldr	r2, [r7, #24]
 8007610:	4013      	ands	r3, r2
 8007612:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8007614:	683b      	ldr	r3, [r7, #0]
 8007616:	685b      	ldr	r3, [r3, #4]
 8007618:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800761c:	2b00      	cmp	r3, #0
 800761e:	d003      	beq.n	8007628 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8007620:	69ba      	ldr	r2, [r7, #24]
 8007622:	693b      	ldr	r3, [r7, #16]
 8007624:	4313      	orrs	r3, r2
 8007626:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8007628:	697b      	ldr	r3, [r7, #20]
 800762a:	69ba      	ldr	r2, [r7, #24]
 800762c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800762e:	697b      	ldr	r3, [r7, #20]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007634:	693b      	ldr	r3, [r7, #16]
 8007636:	43db      	mvns	r3, r3
 8007638:	69ba      	ldr	r2, [r7, #24]
 800763a:	4013      	ands	r3, r2
 800763c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800763e:	683b      	ldr	r3, [r7, #0]
 8007640:	685b      	ldr	r3, [r3, #4]
 8007642:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007646:	2b00      	cmp	r3, #0
 8007648:	d003      	beq.n	8007652 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800764a:	69ba      	ldr	r2, [r7, #24]
 800764c:	693b      	ldr	r3, [r7, #16]
 800764e:	4313      	orrs	r3, r2
 8007650:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8007652:	697b      	ldr	r3, [r7, #20]
 8007654:	69ba      	ldr	r2, [r7, #24]
 8007656:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8007658:	69fb      	ldr	r3, [r7, #28]
 800765a:	3301      	adds	r3, #1
 800765c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800765e:	683b      	ldr	r3, [r7, #0]
 8007660:	681a      	ldr	r2, [r3, #0]
 8007662:	69fb      	ldr	r3, [r7, #28]
 8007664:	fa22 f303 	lsr.w	r3, r2, r3
 8007668:	2b00      	cmp	r3, #0
 800766a:	f47f ae63 	bne.w	8007334 <HAL_GPIO_Init+0x14>
  }
}
 800766e:	bf00      	nop
 8007670:	bf00      	nop
 8007672:	3724      	adds	r7, #36	; 0x24
 8007674:	46bd      	mov	sp, r7
 8007676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800767a:	4770      	bx	lr
 800767c:	58000400 	.word	0x58000400

08007680 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007680:	b480      	push	{r7}
 8007682:	b083      	sub	sp, #12
 8007684:	af00      	add	r7, sp, #0
 8007686:	6078      	str	r0, [r7, #4]
 8007688:	460b      	mov	r3, r1
 800768a:	807b      	strh	r3, [r7, #2]
 800768c:	4613      	mov	r3, r2
 800768e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8007690:	787b      	ldrb	r3, [r7, #1]
 8007692:	2b00      	cmp	r3, #0
 8007694:	d003      	beq.n	800769e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8007696:	887a      	ldrh	r2, [r7, #2]
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800769c:	e003      	b.n	80076a6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800769e:	887b      	ldrh	r3, [r7, #2]
 80076a0:	041a      	lsls	r2, r3, #16
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	619a      	str	r2, [r3, #24]
}
 80076a6:	bf00      	nop
 80076a8:	370c      	adds	r7, #12
 80076aa:	46bd      	mov	sp, r7
 80076ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076b0:	4770      	bx	lr

080076b2 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80076b2:	b480      	push	{r7}
 80076b4:	b085      	sub	sp, #20
 80076b6:	af00      	add	r7, sp, #0
 80076b8:	6078      	str	r0, [r7, #4]
 80076ba:	460b      	mov	r3, r1
 80076bc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	695b      	ldr	r3, [r3, #20]
 80076c2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80076c4:	887a      	ldrh	r2, [r7, #2]
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	4013      	ands	r3, r2
 80076ca:	041a      	lsls	r2, r3, #16
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	43d9      	mvns	r1, r3
 80076d0:	887b      	ldrh	r3, [r7, #2]
 80076d2:	400b      	ands	r3, r1
 80076d4:	431a      	orrs	r2, r3
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	619a      	str	r2, [r3, #24]
}
 80076da:	bf00      	nop
 80076dc:	3714      	adds	r7, #20
 80076de:	46bd      	mov	sp, r7
 80076e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076e4:	4770      	bx	lr

080076e6 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80076e6:	b580      	push	{r7, lr}
 80076e8:	b082      	sub	sp, #8
 80076ea:	af00      	add	r7, sp, #0
 80076ec:	4603      	mov	r3, r0
 80076ee:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 80076f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80076f4:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80076f8:	88fb      	ldrh	r3, [r7, #6]
 80076fa:	4013      	ands	r3, r2
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d008      	beq.n	8007712 <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8007700:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007704:	88fb      	ldrh	r3, [r7, #6]
 8007706:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800770a:	88fb      	ldrh	r3, [r7, #6]
 800770c:	4618      	mov	r0, r3
 800770e:	f000 f804 	bl	800771a <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 8007712:	bf00      	nop
 8007714:	3708      	adds	r7, #8
 8007716:	46bd      	mov	sp, r7
 8007718:	bd80      	pop	{r7, pc}

0800771a <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800771a:	b480      	push	{r7}
 800771c:	b083      	sub	sp, #12
 800771e:	af00      	add	r7, sp, #0
 8007720:	4603      	mov	r3, r0
 8007722:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8007724:	bf00      	nop
 8007726:	370c      	adds	r7, #12
 8007728:	46bd      	mov	sp, r7
 800772a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800772e:	4770      	bx	lr

08007730 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8007730:	b580      	push	{r7, lr}
 8007732:	b084      	sub	sp, #16
 8007734:	af00      	add	r7, sp, #0
 8007736:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	2b00      	cmp	r3, #0
 800773c:	d101      	bne.n	8007742 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 800773e:	2301      	movs	r3, #1
 8007740:	e0bf      	b.n	80078c2 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8007748:	b2db      	uxtb	r3, r3
 800774a:	2b00      	cmp	r3, #0
 800774c:	d106      	bne.n	800775c <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	2200      	movs	r2, #0
 8007752:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8007756:	6878      	ldr	r0, [r7, #4]
 8007758:	f7fb f90c 	bl	8002974 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	2202      	movs	r2, #2
 8007760:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	699a      	ldr	r2, [r3, #24]
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8007772:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	6999      	ldr	r1, [r3, #24]
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	685a      	ldr	r2, [r3, #4]
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	689b      	ldr	r3, [r3, #8]
 8007782:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8007788:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	691b      	ldr	r3, [r3, #16]
 800778e:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	430a      	orrs	r2, r1
 8007796:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	6899      	ldr	r1, [r3, #8]
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	681a      	ldr	r2, [r3, #0]
 80077a2:	4b4a      	ldr	r3, [pc, #296]	; (80078cc <HAL_LTDC_Init+0x19c>)
 80077a4:	400b      	ands	r3, r1
 80077a6:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	695b      	ldr	r3, [r3, #20]
 80077ac:	041b      	lsls	r3, r3, #16
 80077ae:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	6899      	ldr	r1, [r3, #8]
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	699a      	ldr	r2, [r3, #24]
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	431a      	orrs	r2, r3
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	430a      	orrs	r2, r1
 80077c4:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	68d9      	ldr	r1, [r3, #12]
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	681a      	ldr	r2, [r3, #0]
 80077d0:	4b3e      	ldr	r3, [pc, #248]	; (80078cc <HAL_LTDC_Init+0x19c>)
 80077d2:	400b      	ands	r3, r1
 80077d4:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	69db      	ldr	r3, [r3, #28]
 80077da:	041b      	lsls	r3, r3, #16
 80077dc:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	68d9      	ldr	r1, [r3, #12]
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	6a1a      	ldr	r2, [r3, #32]
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	431a      	orrs	r2, r3
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	430a      	orrs	r2, r1
 80077f2:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	6919      	ldr	r1, [r3, #16]
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	681a      	ldr	r2, [r3, #0]
 80077fe:	4b33      	ldr	r3, [pc, #204]	; (80078cc <HAL_LTDC_Init+0x19c>)
 8007800:	400b      	ands	r3, r1
 8007802:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007808:	041b      	lsls	r3, r3, #16
 800780a:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	6919      	ldr	r1, [r3, #16]
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	431a      	orrs	r2, r3
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	430a      	orrs	r2, r1
 8007820:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	6959      	ldr	r1, [r3, #20]
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	681a      	ldr	r2, [r3, #0]
 800782c:	4b27      	ldr	r3, [pc, #156]	; (80078cc <HAL_LTDC_Init+0x19c>)
 800782e:	400b      	ands	r3, r1
 8007830:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007836:	041b      	lsls	r3, r3, #16
 8007838:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	6959      	ldr	r1, [r3, #20]
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	431a      	orrs	r2, r3
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	430a      	orrs	r2, r1
 800784e:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007856:	021b      	lsls	r3, r3, #8
 8007858:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8007860:	041b      	lsls	r3, r3, #16
 8007862:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8007872:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800787a:	68ba      	ldr	r2, [r7, #8]
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	4313      	orrs	r3, r2
 8007880:	687a      	ldr	r2, [r7, #4]
 8007882:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8007886:	431a      	orrs	r2, r3
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	430a      	orrs	r2, r1
 800788e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	f042 0206 	orr.w	r2, r2, #6
 800789e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	699a      	ldr	r2, [r3, #24]
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	f042 0201 	orr.w	r2, r2, #1
 80078ae:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	2200      	movs	r2, #0
 80078b4:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	2201      	movs	r2, #1
 80078bc:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 80078c0:	2300      	movs	r3, #0
}
 80078c2:	4618      	mov	r0, r3
 80078c4:	3710      	adds	r7, #16
 80078c6:	46bd      	mov	sp, r7
 80078c8:	bd80      	pop	{r7, pc}
 80078ca:	bf00      	nop
 80078cc:	f000f800 	.word	0xf000f800

080078d0 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 80078d0:	b580      	push	{r7, lr}
 80078d2:	b084      	sub	sp, #16
 80078d4:	af00      	add	r7, sp, #0
 80078d6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078de:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80078e6:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	f003 0304 	and.w	r3, r3, #4
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d023      	beq.n	800793a <HAL_LTDC_IRQHandler+0x6a>
 80078f2:	68bb      	ldr	r3, [r7, #8]
 80078f4:	f003 0304 	and.w	r3, r3, #4
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d01e      	beq.n	800793a <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	f022 0204 	bic.w	r2, r2, #4
 800790a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	2204      	movs	r2, #4
 8007912:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800791a:	f043 0201 	orr.w	r2, r3, #1
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	2204      	movs	r2, #4
 8007928:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	2200      	movs	r2, #0
 8007930:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8007934:	6878      	ldr	r0, [r7, #4]
 8007936:	f000 f86f 	bl	8007a18 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	f003 0302 	and.w	r3, r3, #2
 8007940:	2b00      	cmp	r3, #0
 8007942:	d023      	beq.n	800798c <HAL_LTDC_IRQHandler+0xbc>
 8007944:	68bb      	ldr	r3, [r7, #8]
 8007946:	f003 0302 	and.w	r3, r3, #2
 800794a:	2b00      	cmp	r3, #0
 800794c:	d01e      	beq.n	800798c <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	f022 0202 	bic.w	r2, r2, #2
 800795c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	2202      	movs	r2, #2
 8007964:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800796c:	f043 0202 	orr.w	r2, r3, #2
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	2204      	movs	r2, #4
 800797a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	2200      	movs	r2, #0
 8007982:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8007986:	6878      	ldr	r0, [r7, #4]
 8007988:	f000 f846 	bl	8007a18 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	f003 0301 	and.w	r3, r3, #1
 8007992:	2b00      	cmp	r3, #0
 8007994:	d01b      	beq.n	80079ce <HAL_LTDC_IRQHandler+0xfe>
 8007996:	68bb      	ldr	r3, [r7, #8]
 8007998:	f003 0301 	and.w	r3, r3, #1
 800799c:	2b00      	cmp	r3, #0
 800799e:	d016      	beq.n	80079ce <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	f022 0201 	bic.w	r2, r2, #1
 80079ae:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	2201      	movs	r2, #1
 80079b6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	2201      	movs	r2, #1
 80079bc:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	2200      	movs	r2, #0
 80079c4:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 80079c8:	6878      	ldr	r0, [r7, #4]
 80079ca:	f00e f913 	bl	8015bf4 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	f003 0308 	and.w	r3, r3, #8
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d01b      	beq.n	8007a10 <HAL_LTDC_IRQHandler+0x140>
 80079d8:	68bb      	ldr	r3, [r7, #8]
 80079da:	f003 0308 	and.w	r3, r3, #8
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d016      	beq.n	8007a10 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	f022 0208 	bic.w	r2, r2, #8
 80079f0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	2208      	movs	r2, #8
 80079f8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	2201      	movs	r2, #1
 80079fe:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	2200      	movs	r2, #0
 8007a06:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 8007a0a:	6878      	ldr	r0, [r7, #4]
 8007a0c:	f000 f80e 	bl	8007a2c <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 8007a10:	bf00      	nop
 8007a12:	3710      	adds	r7, #16
 8007a14:	46bd      	mov	sp, r7
 8007a16:	bd80      	pop	{r7, pc}

08007a18 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 8007a18:	b480      	push	{r7}
 8007a1a:	b083      	sub	sp, #12
 8007a1c:	af00      	add	r7, sp, #0
 8007a1e:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 8007a20:	bf00      	nop
 8007a22:	370c      	adds	r7, #12
 8007a24:	46bd      	mov	sp, r7
 8007a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a2a:	4770      	bx	lr

08007a2c <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8007a2c:	b480      	push	{r7}
 8007a2e:	b083      	sub	sp, #12
 8007a30:	af00      	add	r7, sp, #0
 8007a32:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 8007a34:	bf00      	nop
 8007a36:	370c      	adds	r7, #12
 8007a38:	46bd      	mov	sp, r7
 8007a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a3e:	4770      	bx	lr

08007a40 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8007a40:	b5b0      	push	{r4, r5, r7, lr}
 8007a42:	b084      	sub	sp, #16
 8007a44:	af00      	add	r7, sp, #0
 8007a46:	60f8      	str	r0, [r7, #12]
 8007a48:	60b9      	str	r1, [r7, #8]
 8007a4a:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8007a52:	2b01      	cmp	r3, #1
 8007a54:	d101      	bne.n	8007a5a <HAL_LTDC_ConfigLayer+0x1a>
 8007a56:	2302      	movs	r3, #2
 8007a58:	e02c      	b.n	8007ab4 <HAL_LTDC_ConfigLayer+0x74>
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	2201      	movs	r2, #1
 8007a5e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	2202      	movs	r2, #2
 8007a66:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8007a6a:	68fa      	ldr	r2, [r7, #12]
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	2134      	movs	r1, #52	; 0x34
 8007a70:	fb01 f303 	mul.w	r3, r1, r3
 8007a74:	4413      	add	r3, r2
 8007a76:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8007a7a:	68bb      	ldr	r3, [r7, #8]
 8007a7c:	4614      	mov	r4, r2
 8007a7e:	461d      	mov	r5, r3
 8007a80:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007a82:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007a84:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007a86:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007a88:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007a8a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007a8c:	682b      	ldr	r3, [r5, #0]
 8007a8e:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8007a90:	687a      	ldr	r2, [r7, #4]
 8007a92:	68b9      	ldr	r1, [r7, #8]
 8007a94:	68f8      	ldr	r0, [r7, #12]
 8007a96:	f000 f849 	bl	8007b2c <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	2201      	movs	r2, #1
 8007aa0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	2201      	movs	r2, #1
 8007aa6:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	2200      	movs	r2, #0
 8007aae:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8007ab2:	2300      	movs	r3, #0
}
 8007ab4:	4618      	mov	r0, r3
 8007ab6:	3710      	adds	r7, #16
 8007ab8:	46bd      	mov	sp, r7
 8007aba:	bdb0      	pop	{r4, r5, r7, pc}

08007abc <HAL_LTDC_ProgramLineEvent>:
  * @param  Line    Line Interrupt Position.
  * @note   User application may resort to HAL_LTDC_LineEventCallback() at line interrupt generation.
  * @retval  HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ProgramLineEvent(LTDC_HandleTypeDef *hltdc, uint32_t Line)
{
 8007abc:	b480      	push	{r7}
 8007abe:	b083      	sub	sp, #12
 8007ac0:	af00      	add	r7, sp, #0
 8007ac2:	6078      	str	r0, [r7, #4]
 8007ac4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_LTDC_LIPOS(Line));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8007acc:	2b01      	cmp	r3, #1
 8007ace:	d101      	bne.n	8007ad4 <HAL_LTDC_ProgramLineEvent+0x18>
 8007ad0:	2302      	movs	r3, #2
 8007ad2:	e023      	b.n	8007b1c <HAL_LTDC_ProgramLineEvent+0x60>
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	2201      	movs	r2, #1
 8007ad8:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	2202      	movs	r2, #2
 8007ae0:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Disable the Line interrupt */
  __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	f022 0201 	bic.w	r2, r2, #1
 8007af2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the Line Interrupt position */
  LTDC->LIPCR = (uint32_t)Line;
 8007af4:	4a0c      	ldr	r2, [pc, #48]	; (8007b28 <HAL_LTDC_ProgramLineEvent+0x6c>)
 8007af6:	683b      	ldr	r3, [r7, #0]
 8007af8:	6413      	str	r3, [r2, #64]	; 0x40

  /* Enable the Line interrupt */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_LI);
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	f042 0201 	orr.w	r2, r2, #1
 8007b08:	635a      	str	r2, [r3, #52]	; 0x34

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	2201      	movs	r2, #1
 8007b0e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	2200      	movs	r2, #0
 8007b16:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8007b1a:	2300      	movs	r3, #0
}
 8007b1c:	4618      	mov	r0, r3
 8007b1e:	370c      	adds	r7, #12
 8007b20:	46bd      	mov	sp, r7
 8007b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b26:	4770      	bx	lr
 8007b28:	50001000 	.word	0x50001000

08007b2c <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8007b2c:	b480      	push	{r7}
 8007b2e:	b089      	sub	sp, #36	; 0x24
 8007b30:	af00      	add	r7, sp, #0
 8007b32:	60f8      	str	r0, [r7, #12]
 8007b34:	60b9      	str	r1, [r7, #8]
 8007b36:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8007b38:	68bb      	ldr	r3, [r7, #8]
 8007b3a:	685a      	ldr	r2, [r3, #4]
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	68db      	ldr	r3, [r3, #12]
 8007b42:	0c1b      	lsrs	r3, r3, #16
 8007b44:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007b48:	4413      	add	r3, r2
 8007b4a:	041b      	lsls	r3, r3, #16
 8007b4c:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	461a      	mov	r2, r3
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	01db      	lsls	r3, r3, #7
 8007b58:	4413      	add	r3, r2
 8007b5a:	3384      	adds	r3, #132	; 0x84
 8007b5c:	685b      	ldr	r3, [r3, #4]
 8007b5e:	68fa      	ldr	r2, [r7, #12]
 8007b60:	6812      	ldr	r2, [r2, #0]
 8007b62:	4611      	mov	r1, r2
 8007b64:	687a      	ldr	r2, [r7, #4]
 8007b66:	01d2      	lsls	r2, r2, #7
 8007b68:	440a      	add	r2, r1
 8007b6a:	3284      	adds	r2, #132	; 0x84
 8007b6c:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8007b70:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8007b72:	68bb      	ldr	r3, [r7, #8]
 8007b74:	681a      	ldr	r2, [r3, #0]
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	68db      	ldr	r3, [r3, #12]
 8007b7c:	0c1b      	lsrs	r3, r3, #16
 8007b7e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007b82:	4413      	add	r3, r2
 8007b84:	1c5a      	adds	r2, r3, #1
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	4619      	mov	r1, r3
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	01db      	lsls	r3, r3, #7
 8007b90:	440b      	add	r3, r1
 8007b92:	3384      	adds	r3, #132	; 0x84
 8007b94:	4619      	mov	r1, r3
 8007b96:	69fb      	ldr	r3, [r7, #28]
 8007b98:	4313      	orrs	r3, r2
 8007b9a:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8007b9c:	68bb      	ldr	r3, [r7, #8]
 8007b9e:	68da      	ldr	r2, [r3, #12]
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	68db      	ldr	r3, [r3, #12]
 8007ba6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007baa:	4413      	add	r3, r2
 8007bac:	041b      	lsls	r3, r3, #16
 8007bae:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	461a      	mov	r2, r3
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	01db      	lsls	r3, r3, #7
 8007bba:	4413      	add	r3, r2
 8007bbc:	3384      	adds	r3, #132	; 0x84
 8007bbe:	689b      	ldr	r3, [r3, #8]
 8007bc0:	68fa      	ldr	r2, [r7, #12]
 8007bc2:	6812      	ldr	r2, [r2, #0]
 8007bc4:	4611      	mov	r1, r2
 8007bc6:	687a      	ldr	r2, [r7, #4]
 8007bc8:	01d2      	lsls	r2, r2, #7
 8007bca:	440a      	add	r2, r1
 8007bcc:	3284      	adds	r2, #132	; 0x84
 8007bce:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8007bd2:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8007bd4:	68bb      	ldr	r3, [r7, #8]
 8007bd6:	689a      	ldr	r2, [r3, #8]
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	68db      	ldr	r3, [r3, #12]
 8007bde:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007be2:	4413      	add	r3, r2
 8007be4:	1c5a      	adds	r2, r3, #1
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	4619      	mov	r1, r3
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	01db      	lsls	r3, r3, #7
 8007bf0:	440b      	add	r3, r1
 8007bf2:	3384      	adds	r3, #132	; 0x84
 8007bf4:	4619      	mov	r1, r3
 8007bf6:	69fb      	ldr	r3, [r7, #28]
 8007bf8:	4313      	orrs	r3, r2
 8007bfa:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	461a      	mov	r2, r3
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	01db      	lsls	r3, r3, #7
 8007c06:	4413      	add	r3, r2
 8007c08:	3384      	adds	r3, #132	; 0x84
 8007c0a:	691b      	ldr	r3, [r3, #16]
 8007c0c:	68fa      	ldr	r2, [r7, #12]
 8007c0e:	6812      	ldr	r2, [r2, #0]
 8007c10:	4611      	mov	r1, r2
 8007c12:	687a      	ldr	r2, [r7, #4]
 8007c14:	01d2      	lsls	r2, r2, #7
 8007c16:	440a      	add	r2, r1
 8007c18:	3284      	adds	r2, #132	; 0x84
 8007c1a:	f023 0307 	bic.w	r3, r3, #7
 8007c1e:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	461a      	mov	r2, r3
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	01db      	lsls	r3, r3, #7
 8007c2a:	4413      	add	r3, r2
 8007c2c:	3384      	adds	r3, #132	; 0x84
 8007c2e:	461a      	mov	r2, r3
 8007c30:	68bb      	ldr	r3, [r7, #8]
 8007c32:	691b      	ldr	r3, [r3, #16]
 8007c34:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8007c36:	68bb      	ldr	r3, [r7, #8]
 8007c38:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8007c3c:	021b      	lsls	r3, r3, #8
 8007c3e:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8007c40:	68bb      	ldr	r3, [r7, #8]
 8007c42:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8007c46:	041b      	lsls	r3, r3, #16
 8007c48:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8007c4a:	68bb      	ldr	r3, [r7, #8]
 8007c4c:	699b      	ldr	r3, [r3, #24]
 8007c4e:	061b      	lsls	r3, r3, #24
 8007c50:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	461a      	mov	r2, r3
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	01db      	lsls	r3, r3, #7
 8007c5c:	4413      	add	r3, r2
 8007c5e:	3384      	adds	r3, #132	; 0x84
 8007c60:	699b      	ldr	r3, [r3, #24]
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	461a      	mov	r2, r3
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	01db      	lsls	r3, r3, #7
 8007c6c:	4413      	add	r3, r2
 8007c6e:	3384      	adds	r3, #132	; 0x84
 8007c70:	461a      	mov	r2, r3
 8007c72:	2300      	movs	r3, #0
 8007c74:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8007c76:	68bb      	ldr	r3, [r7, #8]
 8007c78:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007c7c:	461a      	mov	r2, r3
 8007c7e:	69fb      	ldr	r3, [r7, #28]
 8007c80:	431a      	orrs	r2, r3
 8007c82:	69bb      	ldr	r3, [r7, #24]
 8007c84:	431a      	orrs	r2, r3
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	4619      	mov	r1, r3
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	01db      	lsls	r3, r3, #7
 8007c90:	440b      	add	r3, r1
 8007c92:	3384      	adds	r3, #132	; 0x84
 8007c94:	4619      	mov	r1, r3
 8007c96:	697b      	ldr	r3, [r7, #20]
 8007c98:	4313      	orrs	r3, r2
 8007c9a:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	461a      	mov	r2, r3
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	01db      	lsls	r3, r3, #7
 8007ca6:	4413      	add	r3, r2
 8007ca8:	3384      	adds	r3, #132	; 0x84
 8007caa:	695b      	ldr	r3, [r3, #20]
 8007cac:	68fa      	ldr	r2, [r7, #12]
 8007cae:	6812      	ldr	r2, [r2, #0]
 8007cb0:	4611      	mov	r1, r2
 8007cb2:	687a      	ldr	r2, [r7, #4]
 8007cb4:	01d2      	lsls	r2, r2, #7
 8007cb6:	440a      	add	r2, r1
 8007cb8:	3284      	adds	r2, #132	; 0x84
 8007cba:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8007cbe:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	461a      	mov	r2, r3
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	01db      	lsls	r3, r3, #7
 8007cca:	4413      	add	r3, r2
 8007ccc:	3384      	adds	r3, #132	; 0x84
 8007cce:	461a      	mov	r2, r3
 8007cd0:	68bb      	ldr	r3, [r7, #8]
 8007cd2:	695b      	ldr	r3, [r3, #20]
 8007cd4:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	461a      	mov	r2, r3
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	01db      	lsls	r3, r3, #7
 8007ce0:	4413      	add	r3, r2
 8007ce2:	3384      	adds	r3, #132	; 0x84
 8007ce4:	69da      	ldr	r2, [r3, #28]
 8007ce6:	68fb      	ldr	r3, [r7, #12]
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	4619      	mov	r1, r3
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	01db      	lsls	r3, r3, #7
 8007cf0:	440b      	add	r3, r1
 8007cf2:	3384      	adds	r3, #132	; 0x84
 8007cf4:	4619      	mov	r1, r3
 8007cf6:	4b58      	ldr	r3, [pc, #352]	; (8007e58 <LTDC_SetConfig+0x32c>)
 8007cf8:	4013      	ands	r3, r2
 8007cfa:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8007cfc:	68bb      	ldr	r3, [r7, #8]
 8007cfe:	69da      	ldr	r2, [r3, #28]
 8007d00:	68bb      	ldr	r3, [r7, #8]
 8007d02:	6a1b      	ldr	r3, [r3, #32]
 8007d04:	68f9      	ldr	r1, [r7, #12]
 8007d06:	6809      	ldr	r1, [r1, #0]
 8007d08:	4608      	mov	r0, r1
 8007d0a:	6879      	ldr	r1, [r7, #4]
 8007d0c:	01c9      	lsls	r1, r1, #7
 8007d0e:	4401      	add	r1, r0
 8007d10:	3184      	adds	r1, #132	; 0x84
 8007d12:	4313      	orrs	r3, r2
 8007d14:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	461a      	mov	r2, r3
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	01db      	lsls	r3, r3, #7
 8007d20:	4413      	add	r3, r2
 8007d22:	3384      	adds	r3, #132	; 0x84
 8007d24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	461a      	mov	r2, r3
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	01db      	lsls	r3, r3, #7
 8007d30:	4413      	add	r3, r2
 8007d32:	3384      	adds	r3, #132	; 0x84
 8007d34:	461a      	mov	r2, r3
 8007d36:	2300      	movs	r3, #0
 8007d38:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	461a      	mov	r2, r3
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	01db      	lsls	r3, r3, #7
 8007d44:	4413      	add	r3, r2
 8007d46:	3384      	adds	r3, #132	; 0x84
 8007d48:	461a      	mov	r2, r3
 8007d4a:	68bb      	ldr	r3, [r7, #8]
 8007d4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d4e:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8007d50:	68bb      	ldr	r3, [r7, #8]
 8007d52:	691b      	ldr	r3, [r3, #16]
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	d102      	bne.n	8007d5e <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 8007d58:	2304      	movs	r3, #4
 8007d5a:	61fb      	str	r3, [r7, #28]
 8007d5c:	e01b      	b.n	8007d96 <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8007d5e:	68bb      	ldr	r3, [r7, #8]
 8007d60:	691b      	ldr	r3, [r3, #16]
 8007d62:	2b01      	cmp	r3, #1
 8007d64:	d102      	bne.n	8007d6c <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 8007d66:	2303      	movs	r3, #3
 8007d68:	61fb      	str	r3, [r7, #28]
 8007d6a:	e014      	b.n	8007d96 <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8007d6c:	68bb      	ldr	r3, [r7, #8]
 8007d6e:	691b      	ldr	r3, [r3, #16]
 8007d70:	2b04      	cmp	r3, #4
 8007d72:	d00b      	beq.n	8007d8c <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8007d74:	68bb      	ldr	r3, [r7, #8]
 8007d76:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8007d78:	2b02      	cmp	r3, #2
 8007d7a:	d007      	beq.n	8007d8c <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8007d7c:	68bb      	ldr	r3, [r7, #8]
 8007d7e:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8007d80:	2b03      	cmp	r3, #3
 8007d82:	d003      	beq.n	8007d8c <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8007d84:	68bb      	ldr	r3, [r7, #8]
 8007d86:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8007d88:	2b07      	cmp	r3, #7
 8007d8a:	d102      	bne.n	8007d92 <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 8007d8c:	2302      	movs	r3, #2
 8007d8e:	61fb      	str	r3, [r7, #28]
 8007d90:	e001      	b.n	8007d96 <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 8007d92:	2301      	movs	r3, #1
 8007d94:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	461a      	mov	r2, r3
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	01db      	lsls	r3, r3, #7
 8007da0:	4413      	add	r3, r2
 8007da2:	3384      	adds	r3, #132	; 0x84
 8007da4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007da6:	68fa      	ldr	r2, [r7, #12]
 8007da8:	6812      	ldr	r2, [r2, #0]
 8007daa:	4611      	mov	r1, r2
 8007dac:	687a      	ldr	r2, [r7, #4]
 8007dae:	01d2      	lsls	r2, r2, #7
 8007db0:	440a      	add	r2, r1
 8007db2:	3284      	adds	r2, #132	; 0x84
 8007db4:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8007db8:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 8007dba:	68bb      	ldr	r3, [r7, #8]
 8007dbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007dbe:	69fa      	ldr	r2, [r7, #28]
 8007dc0:	fb02 f303 	mul.w	r3, r2, r3
 8007dc4:	041a      	lsls	r2, r3, #16
 8007dc6:	68bb      	ldr	r3, [r7, #8]
 8007dc8:	6859      	ldr	r1, [r3, #4]
 8007dca:	68bb      	ldr	r3, [r7, #8]
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	1acb      	subs	r3, r1, r3
 8007dd0:	69f9      	ldr	r1, [r7, #28]
 8007dd2:	fb01 f303 	mul.w	r3, r1, r3
 8007dd6:	3307      	adds	r3, #7
 8007dd8:	68f9      	ldr	r1, [r7, #12]
 8007dda:	6809      	ldr	r1, [r1, #0]
 8007ddc:	4608      	mov	r0, r1
 8007dde:	6879      	ldr	r1, [r7, #4]
 8007de0:	01c9      	lsls	r1, r1, #7
 8007de2:	4401      	add	r1, r0
 8007de4:	3184      	adds	r1, #132	; 0x84
 8007de6:	4313      	orrs	r3, r2
 8007de8:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	461a      	mov	r2, r3
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	01db      	lsls	r3, r3, #7
 8007df4:	4413      	add	r3, r2
 8007df6:	3384      	adds	r3, #132	; 0x84
 8007df8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	4619      	mov	r1, r3
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	01db      	lsls	r3, r3, #7
 8007e04:	440b      	add	r3, r1
 8007e06:	3384      	adds	r3, #132	; 0x84
 8007e08:	4619      	mov	r1, r3
 8007e0a:	4b14      	ldr	r3, [pc, #80]	; (8007e5c <LTDC_SetConfig+0x330>)
 8007e0c:	4013      	ands	r3, r2
 8007e0e:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	461a      	mov	r2, r3
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	01db      	lsls	r3, r3, #7
 8007e1a:	4413      	add	r3, r2
 8007e1c:	3384      	adds	r3, #132	; 0x84
 8007e1e:	461a      	mov	r2, r3
 8007e20:	68bb      	ldr	r3, [r7, #8]
 8007e22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e24:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	461a      	mov	r2, r3
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	01db      	lsls	r3, r3, #7
 8007e30:	4413      	add	r3, r2
 8007e32:	3384      	adds	r3, #132	; 0x84
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	68fa      	ldr	r2, [r7, #12]
 8007e38:	6812      	ldr	r2, [r2, #0]
 8007e3a:	4611      	mov	r1, r2
 8007e3c:	687a      	ldr	r2, [r7, #4]
 8007e3e:	01d2      	lsls	r2, r2, #7
 8007e40:	440a      	add	r2, r1
 8007e42:	3284      	adds	r2, #132	; 0x84
 8007e44:	f043 0301 	orr.w	r3, r3, #1
 8007e48:	6013      	str	r3, [r2, #0]
}
 8007e4a:	bf00      	nop
 8007e4c:	3724      	adds	r7, #36	; 0x24
 8007e4e:	46bd      	mov	sp, r7
 8007e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e54:	4770      	bx	lr
 8007e56:	bf00      	nop
 8007e58:	fffff8f8 	.word	0xfffff8f8
 8007e5c:	fffff800 	.word	0xfffff800

08007e60 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8007e60:	b580      	push	{r7, lr}
 8007e62:	b084      	sub	sp, #16
 8007e64:	af00      	add	r7, sp, #0
 8007e66:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8007e68:	4b19      	ldr	r3, [pc, #100]	; (8007ed0 <HAL_PWREx_ConfigSupply+0x70>)
 8007e6a:	68db      	ldr	r3, [r3, #12]
 8007e6c:	f003 0304 	and.w	r3, r3, #4
 8007e70:	2b04      	cmp	r3, #4
 8007e72:	d00a      	beq.n	8007e8a <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8007e74:	4b16      	ldr	r3, [pc, #88]	; (8007ed0 <HAL_PWREx_ConfigSupply+0x70>)
 8007e76:	68db      	ldr	r3, [r3, #12]
 8007e78:	f003 0307 	and.w	r3, r3, #7
 8007e7c:	687a      	ldr	r2, [r7, #4]
 8007e7e:	429a      	cmp	r2, r3
 8007e80:	d001      	beq.n	8007e86 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8007e82:	2301      	movs	r3, #1
 8007e84:	e01f      	b.n	8007ec6 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8007e86:	2300      	movs	r3, #0
 8007e88:	e01d      	b.n	8007ec6 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8007e8a:	4b11      	ldr	r3, [pc, #68]	; (8007ed0 <HAL_PWREx_ConfigSupply+0x70>)
 8007e8c:	68db      	ldr	r3, [r3, #12]
 8007e8e:	f023 0207 	bic.w	r2, r3, #7
 8007e92:	490f      	ldr	r1, [pc, #60]	; (8007ed0 <HAL_PWREx_ConfigSupply+0x70>)
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	4313      	orrs	r3, r2
 8007e98:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8007e9a:	f7fc fa9d 	bl	80043d8 <HAL_GetTick>
 8007e9e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8007ea0:	e009      	b.n	8007eb6 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8007ea2:	f7fc fa99 	bl	80043d8 <HAL_GetTick>
 8007ea6:	4602      	mov	r2, r0
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	1ad3      	subs	r3, r2, r3
 8007eac:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007eb0:	d901      	bls.n	8007eb6 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8007eb2:	2301      	movs	r3, #1
 8007eb4:	e007      	b.n	8007ec6 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8007eb6:	4b06      	ldr	r3, [pc, #24]	; (8007ed0 <HAL_PWREx_ConfigSupply+0x70>)
 8007eb8:	685b      	ldr	r3, [r3, #4]
 8007eba:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007ebe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007ec2:	d1ee      	bne.n	8007ea2 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8007ec4:	2300      	movs	r3, #0
}
 8007ec6:	4618      	mov	r0, r3
 8007ec8:	3710      	adds	r7, #16
 8007eca:	46bd      	mov	sp, r7
 8007ecc:	bd80      	pop	{r7, pc}
 8007ece:	bf00      	nop
 8007ed0:	58024800 	.word	0x58024800

08007ed4 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8007ed4:	b580      	push	{r7, lr}
 8007ed6:	b086      	sub	sp, #24
 8007ed8:	af02      	add	r7, sp, #8
 8007eda:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8007edc:	f7fc fa7c 	bl	80043d8 <HAL_GetTick>
 8007ee0:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	d101      	bne.n	8007eec <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8007ee8:	2301      	movs	r3, #1
 8007eea:	e05f      	b.n	8007fac <HAL_QSPI_Init+0xd8>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007ef2:	b2db      	uxtb	r3, r3
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	d107      	bne.n	8007f08 <HAL_QSPI_Init+0x34>

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8007ef8:	6878      	ldr	r0, [r7, #4]
 8007efa:	f7fb fa49 	bl	8003390 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8007efe:	f241 3188 	movw	r1, #5000	; 0x1388
 8007f02:	6878      	ldr	r0, [r7, #4]
 8007f04:	f000 f85a 	bl	8007fbc <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	f423 6170 	bic.w	r1, r3, #3840	; 0xf00
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	689b      	ldr	r3, [r3, #8]
 8007f16:	3b01      	subs	r3, #1
 8007f18:	021a      	lsls	r2, r3, #8
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	430a      	orrs	r2, r1
 8007f20:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007f26:	9300      	str	r3, [sp, #0]
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	2200      	movs	r2, #0
 8007f2c:	2120      	movs	r1, #32
 8007f2e:	6878      	ldr	r0, [r7, #4]
 8007f30:	f000 f852 	bl	8007fd8 <QSPI_WaitFlagStateUntilTimeout>
 8007f34:	4603      	mov	r3, r0
 8007f36:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8007f38:	7afb      	ldrb	r3, [r7, #11]
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d135      	bne.n	8007faa <HAL_QSPI_Init+0xd6>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	681a      	ldr	r2, [r3, #0]
 8007f44:	4b1b      	ldr	r3, [pc, #108]	; (8007fb4 <HAL_QSPI_Init+0xe0>)
 8007f46:	4013      	ands	r3, r2
 8007f48:	687a      	ldr	r2, [r7, #4]
 8007f4a:	6852      	ldr	r2, [r2, #4]
 8007f4c:	0611      	lsls	r1, r2, #24
 8007f4e:	687a      	ldr	r2, [r7, #4]
 8007f50:	68d2      	ldr	r2, [r2, #12]
 8007f52:	4311      	orrs	r1, r2
 8007f54:	687a      	ldr	r2, [r7, #4]
 8007f56:	69d2      	ldr	r2, [r2, #28]
 8007f58:	4311      	orrs	r1, r2
 8007f5a:	687a      	ldr	r2, [r7, #4]
 8007f5c:	6a12      	ldr	r2, [r2, #32]
 8007f5e:	4311      	orrs	r1, r2
 8007f60:	687a      	ldr	r2, [r7, #4]
 8007f62:	6812      	ldr	r2, [r2, #0]
 8007f64:	430b      	orrs	r3, r1
 8007f66:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	685a      	ldr	r2, [r3, #4]
 8007f6e:	4b12      	ldr	r3, [pc, #72]	; (8007fb8 <HAL_QSPI_Init+0xe4>)
 8007f70:	4013      	ands	r3, r2
 8007f72:	687a      	ldr	r2, [r7, #4]
 8007f74:	6912      	ldr	r2, [r2, #16]
 8007f76:	0411      	lsls	r1, r2, #16
 8007f78:	687a      	ldr	r2, [r7, #4]
 8007f7a:	6952      	ldr	r2, [r2, #20]
 8007f7c:	4311      	orrs	r1, r2
 8007f7e:	687a      	ldr	r2, [r7, #4]
 8007f80:	6992      	ldr	r2, [r2, #24]
 8007f82:	4311      	orrs	r1, r2
 8007f84:	687a      	ldr	r2, [r7, #4]
 8007f86:	6812      	ldr	r2, [r2, #0]
 8007f88:	430b      	orrs	r3, r1
 8007f8a:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	681a      	ldr	r2, [r3, #0]
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	f042 0201 	orr.w	r2, r2, #1
 8007f9a:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	2200      	movs	r2, #0
 8007fa0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	2201      	movs	r2, #1
 8007fa6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Return function status */
  return status;
 8007faa:	7afb      	ldrb	r3, [r7, #11]
}
 8007fac:	4618      	mov	r0, r3
 8007fae:	3710      	adds	r7, #16
 8007fb0:	46bd      	mov	sp, r7
 8007fb2:	bd80      	pop	{r7, pc}
 8007fb4:	00ffff2f 	.word	0x00ffff2f
 8007fb8:	ffe0f8fe 	.word	0xffe0f8fe

08007fbc <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8007fbc:	b480      	push	{r7}
 8007fbe:	b083      	sub	sp, #12
 8007fc0:	af00      	add	r7, sp, #0
 8007fc2:	6078      	str	r0, [r7, #4]
 8007fc4:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	683a      	ldr	r2, [r7, #0]
 8007fca:	649a      	str	r2, [r3, #72]	; 0x48
}
 8007fcc:	bf00      	nop
 8007fce:	370c      	adds	r7, #12
 8007fd0:	46bd      	mov	sp, r7
 8007fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fd6:	4770      	bx	lr

08007fd8 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8007fd8:	b580      	push	{r7, lr}
 8007fda:	b084      	sub	sp, #16
 8007fdc:	af00      	add	r7, sp, #0
 8007fde:	60f8      	str	r0, [r7, #12]
 8007fe0:	60b9      	str	r1, [r7, #8]
 8007fe2:	603b      	str	r3, [r7, #0]
 8007fe4:	4613      	mov	r3, r2
 8007fe6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8007fe8:	e01a      	b.n	8008020 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007fea:	69bb      	ldr	r3, [r7, #24]
 8007fec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ff0:	d016      	beq.n	8008020 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007ff2:	f7fc f9f1 	bl	80043d8 <HAL_GetTick>
 8007ff6:	4602      	mov	r2, r0
 8007ff8:	683b      	ldr	r3, [r7, #0]
 8007ffa:	1ad3      	subs	r3, r2, r3
 8007ffc:	69ba      	ldr	r2, [r7, #24]
 8007ffe:	429a      	cmp	r2, r3
 8008000:	d302      	bcc.n	8008008 <QSPI_WaitFlagStateUntilTimeout+0x30>
 8008002:	69bb      	ldr	r3, [r7, #24]
 8008004:	2b00      	cmp	r3, #0
 8008006:	d10b      	bne.n	8008020 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	2204      	movs	r2, #4
 800800c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008014:	f043 0201 	orr.w	r2, r3, #1
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	645a      	str	r2, [r3, #68]	; 0x44

        return HAL_ERROR;
 800801c:	2301      	movs	r3, #1
 800801e:	e00e      	b.n	800803e <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	689a      	ldr	r2, [r3, #8]
 8008026:	68bb      	ldr	r3, [r7, #8]
 8008028:	4013      	ands	r3, r2
 800802a:	2b00      	cmp	r3, #0
 800802c:	bf14      	ite	ne
 800802e:	2301      	movne	r3, #1
 8008030:	2300      	moveq	r3, #0
 8008032:	b2db      	uxtb	r3, r3
 8008034:	461a      	mov	r2, r3
 8008036:	79fb      	ldrb	r3, [r7, #7]
 8008038:	429a      	cmp	r2, r3
 800803a:	d1d6      	bne.n	8007fea <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800803c:	2300      	movs	r3, #0
}
 800803e:	4618      	mov	r0, r3
 8008040:	3710      	adds	r7, #16
 8008042:	46bd      	mov	sp, r7
 8008044:	bd80      	pop	{r7, pc}
	...

08008048 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008048:	b580      	push	{r7, lr}
 800804a:	b08c      	sub	sp, #48	; 0x30
 800804c:	af00      	add	r7, sp, #0
 800804e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	2b00      	cmp	r3, #0
 8008054:	d102      	bne.n	800805c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8008056:	2301      	movs	r3, #1
 8008058:	f000 bc1d 	b.w	8008896 <HAL_RCC_OscConfig+0x84e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	f003 0301 	and.w	r3, r3, #1
 8008064:	2b00      	cmp	r3, #0
 8008066:	f000 8087 	beq.w	8008178 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800806a:	4b99      	ldr	r3, [pc, #612]	; (80082d0 <HAL_RCC_OscConfig+0x288>)
 800806c:	691b      	ldr	r3, [r3, #16]
 800806e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008072:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008074:	4b96      	ldr	r3, [pc, #600]	; (80082d0 <HAL_RCC_OscConfig+0x288>)
 8008076:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008078:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800807a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800807c:	2b10      	cmp	r3, #16
 800807e:	d007      	beq.n	8008090 <HAL_RCC_OscConfig+0x48>
 8008080:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008082:	2b18      	cmp	r3, #24
 8008084:	d110      	bne.n	80080a8 <HAL_RCC_OscConfig+0x60>
 8008086:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008088:	f003 0303 	and.w	r3, r3, #3
 800808c:	2b02      	cmp	r3, #2
 800808e:	d10b      	bne.n	80080a8 <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008090:	4b8f      	ldr	r3, [pc, #572]	; (80082d0 <HAL_RCC_OscConfig+0x288>)
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008098:	2b00      	cmp	r3, #0
 800809a:	d06c      	beq.n	8008176 <HAL_RCC_OscConfig+0x12e>
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	685b      	ldr	r3, [r3, #4]
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	d168      	bne.n	8008176 <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 80080a4:	2301      	movs	r3, #1
 80080a6:	e3f6      	b.n	8008896 <HAL_RCC_OscConfig+0x84e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	685b      	ldr	r3, [r3, #4]
 80080ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80080b0:	d106      	bne.n	80080c0 <HAL_RCC_OscConfig+0x78>
 80080b2:	4b87      	ldr	r3, [pc, #540]	; (80082d0 <HAL_RCC_OscConfig+0x288>)
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	4a86      	ldr	r2, [pc, #536]	; (80082d0 <HAL_RCC_OscConfig+0x288>)
 80080b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80080bc:	6013      	str	r3, [r2, #0]
 80080be:	e02e      	b.n	800811e <HAL_RCC_OscConfig+0xd6>
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	685b      	ldr	r3, [r3, #4]
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	d10c      	bne.n	80080e2 <HAL_RCC_OscConfig+0x9a>
 80080c8:	4b81      	ldr	r3, [pc, #516]	; (80082d0 <HAL_RCC_OscConfig+0x288>)
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	4a80      	ldr	r2, [pc, #512]	; (80082d0 <HAL_RCC_OscConfig+0x288>)
 80080ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80080d2:	6013      	str	r3, [r2, #0]
 80080d4:	4b7e      	ldr	r3, [pc, #504]	; (80082d0 <HAL_RCC_OscConfig+0x288>)
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	4a7d      	ldr	r2, [pc, #500]	; (80082d0 <HAL_RCC_OscConfig+0x288>)
 80080da:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80080de:	6013      	str	r3, [r2, #0]
 80080e0:	e01d      	b.n	800811e <HAL_RCC_OscConfig+0xd6>
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	685b      	ldr	r3, [r3, #4]
 80080e6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80080ea:	d10c      	bne.n	8008106 <HAL_RCC_OscConfig+0xbe>
 80080ec:	4b78      	ldr	r3, [pc, #480]	; (80082d0 <HAL_RCC_OscConfig+0x288>)
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	4a77      	ldr	r2, [pc, #476]	; (80082d0 <HAL_RCC_OscConfig+0x288>)
 80080f2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80080f6:	6013      	str	r3, [r2, #0]
 80080f8:	4b75      	ldr	r3, [pc, #468]	; (80082d0 <HAL_RCC_OscConfig+0x288>)
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	4a74      	ldr	r2, [pc, #464]	; (80082d0 <HAL_RCC_OscConfig+0x288>)
 80080fe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008102:	6013      	str	r3, [r2, #0]
 8008104:	e00b      	b.n	800811e <HAL_RCC_OscConfig+0xd6>
 8008106:	4b72      	ldr	r3, [pc, #456]	; (80082d0 <HAL_RCC_OscConfig+0x288>)
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	4a71      	ldr	r2, [pc, #452]	; (80082d0 <HAL_RCC_OscConfig+0x288>)
 800810c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008110:	6013      	str	r3, [r2, #0]
 8008112:	4b6f      	ldr	r3, [pc, #444]	; (80082d0 <HAL_RCC_OscConfig+0x288>)
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	4a6e      	ldr	r2, [pc, #440]	; (80082d0 <HAL_RCC_OscConfig+0x288>)
 8008118:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800811c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	685b      	ldr	r3, [r3, #4]
 8008122:	2b00      	cmp	r3, #0
 8008124:	d013      	beq.n	800814e <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008126:	f7fc f957 	bl	80043d8 <HAL_GetTick>
 800812a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800812c:	e008      	b.n	8008140 <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800812e:	f7fc f953 	bl	80043d8 <HAL_GetTick>
 8008132:	4602      	mov	r2, r0
 8008134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008136:	1ad3      	subs	r3, r2, r3
 8008138:	2b64      	cmp	r3, #100	; 0x64
 800813a:	d901      	bls.n	8008140 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 800813c:	2303      	movs	r3, #3
 800813e:	e3aa      	b.n	8008896 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008140:	4b63      	ldr	r3, [pc, #396]	; (80082d0 <HAL_RCC_OscConfig+0x288>)
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008148:	2b00      	cmp	r3, #0
 800814a:	d0f0      	beq.n	800812e <HAL_RCC_OscConfig+0xe6>
 800814c:	e014      	b.n	8008178 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800814e:	f7fc f943 	bl	80043d8 <HAL_GetTick>
 8008152:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8008154:	e008      	b.n	8008168 <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008156:	f7fc f93f 	bl	80043d8 <HAL_GetTick>
 800815a:	4602      	mov	r2, r0
 800815c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800815e:	1ad3      	subs	r3, r2, r3
 8008160:	2b64      	cmp	r3, #100	; 0x64
 8008162:	d901      	bls.n	8008168 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 8008164:	2303      	movs	r3, #3
 8008166:	e396      	b.n	8008896 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8008168:	4b59      	ldr	r3, [pc, #356]	; (80082d0 <HAL_RCC_OscConfig+0x288>)
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008170:	2b00      	cmp	r3, #0
 8008172:	d1f0      	bne.n	8008156 <HAL_RCC_OscConfig+0x10e>
 8008174:	e000      	b.n	8008178 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008176:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	f003 0302 	and.w	r3, r3, #2
 8008180:	2b00      	cmp	r3, #0
 8008182:	f000 80cb 	beq.w	800831c <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008186:	4b52      	ldr	r3, [pc, #328]	; (80082d0 <HAL_RCC_OscConfig+0x288>)
 8008188:	691b      	ldr	r3, [r3, #16]
 800818a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800818e:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008190:	4b4f      	ldr	r3, [pc, #316]	; (80082d0 <HAL_RCC_OscConfig+0x288>)
 8008192:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008194:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8008196:	6a3b      	ldr	r3, [r7, #32]
 8008198:	2b00      	cmp	r3, #0
 800819a:	d007      	beq.n	80081ac <HAL_RCC_OscConfig+0x164>
 800819c:	6a3b      	ldr	r3, [r7, #32]
 800819e:	2b18      	cmp	r3, #24
 80081a0:	d156      	bne.n	8008250 <HAL_RCC_OscConfig+0x208>
 80081a2:	69fb      	ldr	r3, [r7, #28]
 80081a4:	f003 0303 	and.w	r3, r3, #3
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	d151      	bne.n	8008250 <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80081ac:	4b48      	ldr	r3, [pc, #288]	; (80082d0 <HAL_RCC_OscConfig+0x288>)
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	f003 0304 	and.w	r3, r3, #4
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	d005      	beq.n	80081c4 <HAL_RCC_OscConfig+0x17c>
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	68db      	ldr	r3, [r3, #12]
 80081bc:	2b00      	cmp	r3, #0
 80081be:	d101      	bne.n	80081c4 <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 80081c0:	2301      	movs	r3, #1
 80081c2:	e368      	b.n	8008896 <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80081c4:	4b42      	ldr	r3, [pc, #264]	; (80082d0 <HAL_RCC_OscConfig+0x288>)
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	f023 0219 	bic.w	r2, r3, #25
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	68db      	ldr	r3, [r3, #12]
 80081d0:	493f      	ldr	r1, [pc, #252]	; (80082d0 <HAL_RCC_OscConfig+0x288>)
 80081d2:	4313      	orrs	r3, r2
 80081d4:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80081d6:	f7fc f8ff 	bl	80043d8 <HAL_GetTick>
 80081da:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80081dc:	e008      	b.n	80081f0 <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80081de:	f7fc f8fb 	bl	80043d8 <HAL_GetTick>
 80081e2:	4602      	mov	r2, r0
 80081e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081e6:	1ad3      	subs	r3, r2, r3
 80081e8:	2b02      	cmp	r3, #2
 80081ea:	d901      	bls.n	80081f0 <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 80081ec:	2303      	movs	r3, #3
 80081ee:	e352      	b.n	8008896 <HAL_RCC_OscConfig+0x84e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80081f0:	4b37      	ldr	r3, [pc, #220]	; (80082d0 <HAL_RCC_OscConfig+0x288>)
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	f003 0304 	and.w	r3, r3, #4
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	d0f0      	beq.n	80081de <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80081fc:	f7fc f91c 	bl	8004438 <HAL_GetREVID>
 8008200:	4603      	mov	r3, r0
 8008202:	f241 0203 	movw	r2, #4099	; 0x1003
 8008206:	4293      	cmp	r3, r2
 8008208:	d817      	bhi.n	800823a <HAL_RCC_OscConfig+0x1f2>
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	691b      	ldr	r3, [r3, #16]
 800820e:	2b40      	cmp	r3, #64	; 0x40
 8008210:	d108      	bne.n	8008224 <HAL_RCC_OscConfig+0x1dc>
 8008212:	4b2f      	ldr	r3, [pc, #188]	; (80082d0 <HAL_RCC_OscConfig+0x288>)
 8008214:	685b      	ldr	r3, [r3, #4]
 8008216:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800821a:	4a2d      	ldr	r2, [pc, #180]	; (80082d0 <HAL_RCC_OscConfig+0x288>)
 800821c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008220:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008222:	e07b      	b.n	800831c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008224:	4b2a      	ldr	r3, [pc, #168]	; (80082d0 <HAL_RCC_OscConfig+0x288>)
 8008226:	685b      	ldr	r3, [r3, #4]
 8008228:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	691b      	ldr	r3, [r3, #16]
 8008230:	031b      	lsls	r3, r3, #12
 8008232:	4927      	ldr	r1, [pc, #156]	; (80082d0 <HAL_RCC_OscConfig+0x288>)
 8008234:	4313      	orrs	r3, r2
 8008236:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008238:	e070      	b.n	800831c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800823a:	4b25      	ldr	r3, [pc, #148]	; (80082d0 <HAL_RCC_OscConfig+0x288>)
 800823c:	685b      	ldr	r3, [r3, #4]
 800823e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	691b      	ldr	r3, [r3, #16]
 8008246:	061b      	lsls	r3, r3, #24
 8008248:	4921      	ldr	r1, [pc, #132]	; (80082d0 <HAL_RCC_OscConfig+0x288>)
 800824a:	4313      	orrs	r3, r2
 800824c:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800824e:	e065      	b.n	800831c <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	68db      	ldr	r3, [r3, #12]
 8008254:	2b00      	cmp	r3, #0
 8008256:	d048      	beq.n	80082ea <HAL_RCC_OscConfig+0x2a2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8008258:	4b1d      	ldr	r3, [pc, #116]	; (80082d0 <HAL_RCC_OscConfig+0x288>)
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	f023 0219 	bic.w	r2, r3, #25
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	68db      	ldr	r3, [r3, #12]
 8008264:	491a      	ldr	r1, [pc, #104]	; (80082d0 <HAL_RCC_OscConfig+0x288>)
 8008266:	4313      	orrs	r3, r2
 8008268:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800826a:	f7fc f8b5 	bl	80043d8 <HAL_GetTick>
 800826e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008270:	e008      	b.n	8008284 <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008272:	f7fc f8b1 	bl	80043d8 <HAL_GetTick>
 8008276:	4602      	mov	r2, r0
 8008278:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800827a:	1ad3      	subs	r3, r2, r3
 800827c:	2b02      	cmp	r3, #2
 800827e:	d901      	bls.n	8008284 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 8008280:	2303      	movs	r3, #3
 8008282:	e308      	b.n	8008896 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008284:	4b12      	ldr	r3, [pc, #72]	; (80082d0 <HAL_RCC_OscConfig+0x288>)
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	f003 0304 	and.w	r3, r3, #4
 800828c:	2b00      	cmp	r3, #0
 800828e:	d0f0      	beq.n	8008272 <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008290:	f7fc f8d2 	bl	8004438 <HAL_GetREVID>
 8008294:	4603      	mov	r3, r0
 8008296:	f241 0203 	movw	r2, #4099	; 0x1003
 800829a:	4293      	cmp	r3, r2
 800829c:	d81a      	bhi.n	80082d4 <HAL_RCC_OscConfig+0x28c>
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	691b      	ldr	r3, [r3, #16]
 80082a2:	2b40      	cmp	r3, #64	; 0x40
 80082a4:	d108      	bne.n	80082b8 <HAL_RCC_OscConfig+0x270>
 80082a6:	4b0a      	ldr	r3, [pc, #40]	; (80082d0 <HAL_RCC_OscConfig+0x288>)
 80082a8:	685b      	ldr	r3, [r3, #4]
 80082aa:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80082ae:	4a08      	ldr	r2, [pc, #32]	; (80082d0 <HAL_RCC_OscConfig+0x288>)
 80082b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80082b4:	6053      	str	r3, [r2, #4]
 80082b6:	e031      	b.n	800831c <HAL_RCC_OscConfig+0x2d4>
 80082b8:	4b05      	ldr	r3, [pc, #20]	; (80082d0 <HAL_RCC_OscConfig+0x288>)
 80082ba:	685b      	ldr	r3, [r3, #4]
 80082bc:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	691b      	ldr	r3, [r3, #16]
 80082c4:	031b      	lsls	r3, r3, #12
 80082c6:	4902      	ldr	r1, [pc, #8]	; (80082d0 <HAL_RCC_OscConfig+0x288>)
 80082c8:	4313      	orrs	r3, r2
 80082ca:	604b      	str	r3, [r1, #4]
 80082cc:	e026      	b.n	800831c <HAL_RCC_OscConfig+0x2d4>
 80082ce:	bf00      	nop
 80082d0:	58024400 	.word	0x58024400
 80082d4:	4b9a      	ldr	r3, [pc, #616]	; (8008540 <HAL_RCC_OscConfig+0x4f8>)
 80082d6:	685b      	ldr	r3, [r3, #4]
 80082d8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	691b      	ldr	r3, [r3, #16]
 80082e0:	061b      	lsls	r3, r3, #24
 80082e2:	4997      	ldr	r1, [pc, #604]	; (8008540 <HAL_RCC_OscConfig+0x4f8>)
 80082e4:	4313      	orrs	r3, r2
 80082e6:	604b      	str	r3, [r1, #4]
 80082e8:	e018      	b.n	800831c <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80082ea:	4b95      	ldr	r3, [pc, #596]	; (8008540 <HAL_RCC_OscConfig+0x4f8>)
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	4a94      	ldr	r2, [pc, #592]	; (8008540 <HAL_RCC_OscConfig+0x4f8>)
 80082f0:	f023 0301 	bic.w	r3, r3, #1
 80082f4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80082f6:	f7fc f86f 	bl	80043d8 <HAL_GetTick>
 80082fa:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80082fc:	e008      	b.n	8008310 <HAL_RCC_OscConfig+0x2c8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80082fe:	f7fc f86b 	bl	80043d8 <HAL_GetTick>
 8008302:	4602      	mov	r2, r0
 8008304:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008306:	1ad3      	subs	r3, r2, r3
 8008308:	2b02      	cmp	r3, #2
 800830a:	d901      	bls.n	8008310 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 800830c:	2303      	movs	r3, #3
 800830e:	e2c2      	b.n	8008896 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8008310:	4b8b      	ldr	r3, [pc, #556]	; (8008540 <HAL_RCC_OscConfig+0x4f8>)
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	f003 0304 	and.w	r3, r3, #4
 8008318:	2b00      	cmp	r3, #0
 800831a:	d1f0      	bne.n	80082fe <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	f003 0310 	and.w	r3, r3, #16
 8008324:	2b00      	cmp	r3, #0
 8008326:	f000 80a9 	beq.w	800847c <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800832a:	4b85      	ldr	r3, [pc, #532]	; (8008540 <HAL_RCC_OscConfig+0x4f8>)
 800832c:	691b      	ldr	r3, [r3, #16]
 800832e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008332:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008334:	4b82      	ldr	r3, [pc, #520]	; (8008540 <HAL_RCC_OscConfig+0x4f8>)
 8008336:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008338:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800833a:	69bb      	ldr	r3, [r7, #24]
 800833c:	2b08      	cmp	r3, #8
 800833e:	d007      	beq.n	8008350 <HAL_RCC_OscConfig+0x308>
 8008340:	69bb      	ldr	r3, [r7, #24]
 8008342:	2b18      	cmp	r3, #24
 8008344:	d13a      	bne.n	80083bc <HAL_RCC_OscConfig+0x374>
 8008346:	697b      	ldr	r3, [r7, #20]
 8008348:	f003 0303 	and.w	r3, r3, #3
 800834c:	2b01      	cmp	r3, #1
 800834e:	d135      	bne.n	80083bc <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008350:	4b7b      	ldr	r3, [pc, #492]	; (8008540 <HAL_RCC_OscConfig+0x4f8>)
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008358:	2b00      	cmp	r3, #0
 800835a:	d005      	beq.n	8008368 <HAL_RCC_OscConfig+0x320>
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	69db      	ldr	r3, [r3, #28]
 8008360:	2b80      	cmp	r3, #128	; 0x80
 8008362:	d001      	beq.n	8008368 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8008364:	2301      	movs	r3, #1
 8008366:	e296      	b.n	8008896 <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008368:	f7fc f866 	bl	8004438 <HAL_GetREVID>
 800836c:	4603      	mov	r3, r0
 800836e:	f241 0203 	movw	r2, #4099	; 0x1003
 8008372:	4293      	cmp	r3, r2
 8008374:	d817      	bhi.n	80083a6 <HAL_RCC_OscConfig+0x35e>
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	6a1b      	ldr	r3, [r3, #32]
 800837a:	2b20      	cmp	r3, #32
 800837c:	d108      	bne.n	8008390 <HAL_RCC_OscConfig+0x348>
 800837e:	4b70      	ldr	r3, [pc, #448]	; (8008540 <HAL_RCC_OscConfig+0x4f8>)
 8008380:	685b      	ldr	r3, [r3, #4]
 8008382:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8008386:	4a6e      	ldr	r2, [pc, #440]	; (8008540 <HAL_RCC_OscConfig+0x4f8>)
 8008388:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800838c:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800838e:	e075      	b.n	800847c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008390:	4b6b      	ldr	r3, [pc, #428]	; (8008540 <HAL_RCC_OscConfig+0x4f8>)
 8008392:	685b      	ldr	r3, [r3, #4]
 8008394:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	6a1b      	ldr	r3, [r3, #32]
 800839c:	069b      	lsls	r3, r3, #26
 800839e:	4968      	ldr	r1, [pc, #416]	; (8008540 <HAL_RCC_OscConfig+0x4f8>)
 80083a0:	4313      	orrs	r3, r2
 80083a2:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80083a4:	e06a      	b.n	800847c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80083a6:	4b66      	ldr	r3, [pc, #408]	; (8008540 <HAL_RCC_OscConfig+0x4f8>)
 80083a8:	68db      	ldr	r3, [r3, #12]
 80083aa:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	6a1b      	ldr	r3, [r3, #32]
 80083b2:	061b      	lsls	r3, r3, #24
 80083b4:	4962      	ldr	r1, [pc, #392]	; (8008540 <HAL_RCC_OscConfig+0x4f8>)
 80083b6:	4313      	orrs	r3, r2
 80083b8:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80083ba:	e05f      	b.n	800847c <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	69db      	ldr	r3, [r3, #28]
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	d042      	beq.n	800844a <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80083c4:	4b5e      	ldr	r3, [pc, #376]	; (8008540 <HAL_RCC_OscConfig+0x4f8>)
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	4a5d      	ldr	r2, [pc, #372]	; (8008540 <HAL_RCC_OscConfig+0x4f8>)
 80083ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80083ce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80083d0:	f7fc f802 	bl	80043d8 <HAL_GetTick>
 80083d4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80083d6:	e008      	b.n	80083ea <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80083d8:	f7fb fffe 	bl	80043d8 <HAL_GetTick>
 80083dc:	4602      	mov	r2, r0
 80083de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083e0:	1ad3      	subs	r3, r2, r3
 80083e2:	2b02      	cmp	r3, #2
 80083e4:	d901      	bls.n	80083ea <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80083e6:	2303      	movs	r3, #3
 80083e8:	e255      	b.n	8008896 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80083ea:	4b55      	ldr	r3, [pc, #340]	; (8008540 <HAL_RCC_OscConfig+0x4f8>)
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	d0f0      	beq.n	80083d8 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80083f6:	f7fc f81f 	bl	8004438 <HAL_GetREVID>
 80083fa:	4603      	mov	r3, r0
 80083fc:	f241 0203 	movw	r2, #4099	; 0x1003
 8008400:	4293      	cmp	r3, r2
 8008402:	d817      	bhi.n	8008434 <HAL_RCC_OscConfig+0x3ec>
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	6a1b      	ldr	r3, [r3, #32]
 8008408:	2b20      	cmp	r3, #32
 800840a:	d108      	bne.n	800841e <HAL_RCC_OscConfig+0x3d6>
 800840c:	4b4c      	ldr	r3, [pc, #304]	; (8008540 <HAL_RCC_OscConfig+0x4f8>)
 800840e:	685b      	ldr	r3, [r3, #4]
 8008410:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8008414:	4a4a      	ldr	r2, [pc, #296]	; (8008540 <HAL_RCC_OscConfig+0x4f8>)
 8008416:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800841a:	6053      	str	r3, [r2, #4]
 800841c:	e02e      	b.n	800847c <HAL_RCC_OscConfig+0x434>
 800841e:	4b48      	ldr	r3, [pc, #288]	; (8008540 <HAL_RCC_OscConfig+0x4f8>)
 8008420:	685b      	ldr	r3, [r3, #4]
 8008422:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	6a1b      	ldr	r3, [r3, #32]
 800842a:	069b      	lsls	r3, r3, #26
 800842c:	4944      	ldr	r1, [pc, #272]	; (8008540 <HAL_RCC_OscConfig+0x4f8>)
 800842e:	4313      	orrs	r3, r2
 8008430:	604b      	str	r3, [r1, #4]
 8008432:	e023      	b.n	800847c <HAL_RCC_OscConfig+0x434>
 8008434:	4b42      	ldr	r3, [pc, #264]	; (8008540 <HAL_RCC_OscConfig+0x4f8>)
 8008436:	68db      	ldr	r3, [r3, #12]
 8008438:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	6a1b      	ldr	r3, [r3, #32]
 8008440:	061b      	lsls	r3, r3, #24
 8008442:	493f      	ldr	r1, [pc, #252]	; (8008540 <HAL_RCC_OscConfig+0x4f8>)
 8008444:	4313      	orrs	r3, r2
 8008446:	60cb      	str	r3, [r1, #12]
 8008448:	e018      	b.n	800847c <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800844a:	4b3d      	ldr	r3, [pc, #244]	; (8008540 <HAL_RCC_OscConfig+0x4f8>)
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	4a3c      	ldr	r2, [pc, #240]	; (8008540 <HAL_RCC_OscConfig+0x4f8>)
 8008450:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008454:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008456:	f7fb ffbf 	bl	80043d8 <HAL_GetTick>
 800845a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800845c:	e008      	b.n	8008470 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800845e:	f7fb ffbb 	bl	80043d8 <HAL_GetTick>
 8008462:	4602      	mov	r2, r0
 8008464:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008466:	1ad3      	subs	r3, r2, r3
 8008468:	2b02      	cmp	r3, #2
 800846a:	d901      	bls.n	8008470 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800846c:	2303      	movs	r3, #3
 800846e:	e212      	b.n	8008896 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8008470:	4b33      	ldr	r3, [pc, #204]	; (8008540 <HAL_RCC_OscConfig+0x4f8>)
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008478:	2b00      	cmp	r3, #0
 800847a:	d1f0      	bne.n	800845e <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	f003 0308 	and.w	r3, r3, #8
 8008484:	2b00      	cmp	r3, #0
 8008486:	d036      	beq.n	80084f6 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	695b      	ldr	r3, [r3, #20]
 800848c:	2b00      	cmp	r3, #0
 800848e:	d019      	beq.n	80084c4 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008490:	4b2b      	ldr	r3, [pc, #172]	; (8008540 <HAL_RCC_OscConfig+0x4f8>)
 8008492:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008494:	4a2a      	ldr	r2, [pc, #168]	; (8008540 <HAL_RCC_OscConfig+0x4f8>)
 8008496:	f043 0301 	orr.w	r3, r3, #1
 800849a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800849c:	f7fb ff9c 	bl	80043d8 <HAL_GetTick>
 80084a0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80084a2:	e008      	b.n	80084b6 <HAL_RCC_OscConfig+0x46e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80084a4:	f7fb ff98 	bl	80043d8 <HAL_GetTick>
 80084a8:	4602      	mov	r2, r0
 80084aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084ac:	1ad3      	subs	r3, r2, r3
 80084ae:	2b02      	cmp	r3, #2
 80084b0:	d901      	bls.n	80084b6 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 80084b2:	2303      	movs	r3, #3
 80084b4:	e1ef      	b.n	8008896 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80084b6:	4b22      	ldr	r3, [pc, #136]	; (8008540 <HAL_RCC_OscConfig+0x4f8>)
 80084b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80084ba:	f003 0302 	and.w	r3, r3, #2
 80084be:	2b00      	cmp	r3, #0
 80084c0:	d0f0      	beq.n	80084a4 <HAL_RCC_OscConfig+0x45c>
 80084c2:	e018      	b.n	80084f6 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80084c4:	4b1e      	ldr	r3, [pc, #120]	; (8008540 <HAL_RCC_OscConfig+0x4f8>)
 80084c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80084c8:	4a1d      	ldr	r2, [pc, #116]	; (8008540 <HAL_RCC_OscConfig+0x4f8>)
 80084ca:	f023 0301 	bic.w	r3, r3, #1
 80084ce:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80084d0:	f7fb ff82 	bl	80043d8 <HAL_GetTick>
 80084d4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80084d6:	e008      	b.n	80084ea <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80084d8:	f7fb ff7e 	bl	80043d8 <HAL_GetTick>
 80084dc:	4602      	mov	r2, r0
 80084de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084e0:	1ad3      	subs	r3, r2, r3
 80084e2:	2b02      	cmp	r3, #2
 80084e4:	d901      	bls.n	80084ea <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 80084e6:	2303      	movs	r3, #3
 80084e8:	e1d5      	b.n	8008896 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80084ea:	4b15      	ldr	r3, [pc, #84]	; (8008540 <HAL_RCC_OscConfig+0x4f8>)
 80084ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80084ee:	f003 0302 	and.w	r3, r3, #2
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	d1f0      	bne.n	80084d8 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	f003 0320 	and.w	r3, r3, #32
 80084fe:	2b00      	cmp	r3, #0
 8008500:	d039      	beq.n	8008576 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	699b      	ldr	r3, [r3, #24]
 8008506:	2b00      	cmp	r3, #0
 8008508:	d01c      	beq.n	8008544 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800850a:	4b0d      	ldr	r3, [pc, #52]	; (8008540 <HAL_RCC_OscConfig+0x4f8>)
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	4a0c      	ldr	r2, [pc, #48]	; (8008540 <HAL_RCC_OscConfig+0x4f8>)
 8008510:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8008514:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8008516:	f7fb ff5f 	bl	80043d8 <HAL_GetTick>
 800851a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800851c:	e008      	b.n	8008530 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800851e:	f7fb ff5b 	bl	80043d8 <HAL_GetTick>
 8008522:	4602      	mov	r2, r0
 8008524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008526:	1ad3      	subs	r3, r2, r3
 8008528:	2b02      	cmp	r3, #2
 800852a:	d901      	bls.n	8008530 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 800852c:	2303      	movs	r3, #3
 800852e:	e1b2      	b.n	8008896 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8008530:	4b03      	ldr	r3, [pc, #12]	; (8008540 <HAL_RCC_OscConfig+0x4f8>)
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008538:	2b00      	cmp	r3, #0
 800853a:	d0f0      	beq.n	800851e <HAL_RCC_OscConfig+0x4d6>
 800853c:	e01b      	b.n	8008576 <HAL_RCC_OscConfig+0x52e>
 800853e:	bf00      	nop
 8008540:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8008544:	4b9b      	ldr	r3, [pc, #620]	; (80087b4 <HAL_RCC_OscConfig+0x76c>)
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	4a9a      	ldr	r2, [pc, #616]	; (80087b4 <HAL_RCC_OscConfig+0x76c>)
 800854a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800854e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8008550:	f7fb ff42 	bl	80043d8 <HAL_GetTick>
 8008554:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8008556:	e008      	b.n	800856a <HAL_RCC_OscConfig+0x522>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8008558:	f7fb ff3e 	bl	80043d8 <HAL_GetTick>
 800855c:	4602      	mov	r2, r0
 800855e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008560:	1ad3      	subs	r3, r2, r3
 8008562:	2b02      	cmp	r3, #2
 8008564:	d901      	bls.n	800856a <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8008566:	2303      	movs	r3, #3
 8008568:	e195      	b.n	8008896 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800856a:	4b92      	ldr	r3, [pc, #584]	; (80087b4 <HAL_RCC_OscConfig+0x76c>)
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008572:	2b00      	cmp	r3, #0
 8008574:	d1f0      	bne.n	8008558 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	f003 0304 	and.w	r3, r3, #4
 800857e:	2b00      	cmp	r3, #0
 8008580:	f000 8081 	beq.w	8008686 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8008584:	4b8c      	ldr	r3, [pc, #560]	; (80087b8 <HAL_RCC_OscConfig+0x770>)
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	4a8b      	ldr	r2, [pc, #556]	; (80087b8 <HAL_RCC_OscConfig+0x770>)
 800858a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800858e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008590:	f7fb ff22 	bl	80043d8 <HAL_GetTick>
 8008594:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008596:	e008      	b.n	80085aa <HAL_RCC_OscConfig+0x562>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8008598:	f7fb ff1e 	bl	80043d8 <HAL_GetTick>
 800859c:	4602      	mov	r2, r0
 800859e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085a0:	1ad3      	subs	r3, r2, r3
 80085a2:	2b64      	cmp	r3, #100	; 0x64
 80085a4:	d901      	bls.n	80085aa <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 80085a6:	2303      	movs	r3, #3
 80085a8:	e175      	b.n	8008896 <HAL_RCC_OscConfig+0x84e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80085aa:	4b83      	ldr	r3, [pc, #524]	; (80087b8 <HAL_RCC_OscConfig+0x770>)
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	d0f0      	beq.n	8008598 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	689b      	ldr	r3, [r3, #8]
 80085ba:	2b01      	cmp	r3, #1
 80085bc:	d106      	bne.n	80085cc <HAL_RCC_OscConfig+0x584>
 80085be:	4b7d      	ldr	r3, [pc, #500]	; (80087b4 <HAL_RCC_OscConfig+0x76c>)
 80085c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80085c2:	4a7c      	ldr	r2, [pc, #496]	; (80087b4 <HAL_RCC_OscConfig+0x76c>)
 80085c4:	f043 0301 	orr.w	r3, r3, #1
 80085c8:	6713      	str	r3, [r2, #112]	; 0x70
 80085ca:	e02d      	b.n	8008628 <HAL_RCC_OscConfig+0x5e0>
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	689b      	ldr	r3, [r3, #8]
 80085d0:	2b00      	cmp	r3, #0
 80085d2:	d10c      	bne.n	80085ee <HAL_RCC_OscConfig+0x5a6>
 80085d4:	4b77      	ldr	r3, [pc, #476]	; (80087b4 <HAL_RCC_OscConfig+0x76c>)
 80085d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80085d8:	4a76      	ldr	r2, [pc, #472]	; (80087b4 <HAL_RCC_OscConfig+0x76c>)
 80085da:	f023 0301 	bic.w	r3, r3, #1
 80085de:	6713      	str	r3, [r2, #112]	; 0x70
 80085e0:	4b74      	ldr	r3, [pc, #464]	; (80087b4 <HAL_RCC_OscConfig+0x76c>)
 80085e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80085e4:	4a73      	ldr	r2, [pc, #460]	; (80087b4 <HAL_RCC_OscConfig+0x76c>)
 80085e6:	f023 0304 	bic.w	r3, r3, #4
 80085ea:	6713      	str	r3, [r2, #112]	; 0x70
 80085ec:	e01c      	b.n	8008628 <HAL_RCC_OscConfig+0x5e0>
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	689b      	ldr	r3, [r3, #8]
 80085f2:	2b05      	cmp	r3, #5
 80085f4:	d10c      	bne.n	8008610 <HAL_RCC_OscConfig+0x5c8>
 80085f6:	4b6f      	ldr	r3, [pc, #444]	; (80087b4 <HAL_RCC_OscConfig+0x76c>)
 80085f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80085fa:	4a6e      	ldr	r2, [pc, #440]	; (80087b4 <HAL_RCC_OscConfig+0x76c>)
 80085fc:	f043 0304 	orr.w	r3, r3, #4
 8008600:	6713      	str	r3, [r2, #112]	; 0x70
 8008602:	4b6c      	ldr	r3, [pc, #432]	; (80087b4 <HAL_RCC_OscConfig+0x76c>)
 8008604:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008606:	4a6b      	ldr	r2, [pc, #428]	; (80087b4 <HAL_RCC_OscConfig+0x76c>)
 8008608:	f043 0301 	orr.w	r3, r3, #1
 800860c:	6713      	str	r3, [r2, #112]	; 0x70
 800860e:	e00b      	b.n	8008628 <HAL_RCC_OscConfig+0x5e0>
 8008610:	4b68      	ldr	r3, [pc, #416]	; (80087b4 <HAL_RCC_OscConfig+0x76c>)
 8008612:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008614:	4a67      	ldr	r2, [pc, #412]	; (80087b4 <HAL_RCC_OscConfig+0x76c>)
 8008616:	f023 0301 	bic.w	r3, r3, #1
 800861a:	6713      	str	r3, [r2, #112]	; 0x70
 800861c:	4b65      	ldr	r3, [pc, #404]	; (80087b4 <HAL_RCC_OscConfig+0x76c>)
 800861e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008620:	4a64      	ldr	r2, [pc, #400]	; (80087b4 <HAL_RCC_OscConfig+0x76c>)
 8008622:	f023 0304 	bic.w	r3, r3, #4
 8008626:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	689b      	ldr	r3, [r3, #8]
 800862c:	2b00      	cmp	r3, #0
 800862e:	d015      	beq.n	800865c <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008630:	f7fb fed2 	bl	80043d8 <HAL_GetTick>
 8008634:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008636:	e00a      	b.n	800864e <HAL_RCC_OscConfig+0x606>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008638:	f7fb fece 	bl	80043d8 <HAL_GetTick>
 800863c:	4602      	mov	r2, r0
 800863e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008640:	1ad3      	subs	r3, r2, r3
 8008642:	f241 3288 	movw	r2, #5000	; 0x1388
 8008646:	4293      	cmp	r3, r2
 8008648:	d901      	bls.n	800864e <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800864a:	2303      	movs	r3, #3
 800864c:	e123      	b.n	8008896 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800864e:	4b59      	ldr	r3, [pc, #356]	; (80087b4 <HAL_RCC_OscConfig+0x76c>)
 8008650:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008652:	f003 0302 	and.w	r3, r3, #2
 8008656:	2b00      	cmp	r3, #0
 8008658:	d0ee      	beq.n	8008638 <HAL_RCC_OscConfig+0x5f0>
 800865a:	e014      	b.n	8008686 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800865c:	f7fb febc 	bl	80043d8 <HAL_GetTick>
 8008660:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8008662:	e00a      	b.n	800867a <HAL_RCC_OscConfig+0x632>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008664:	f7fb feb8 	bl	80043d8 <HAL_GetTick>
 8008668:	4602      	mov	r2, r0
 800866a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800866c:	1ad3      	subs	r3, r2, r3
 800866e:	f241 3288 	movw	r2, #5000	; 0x1388
 8008672:	4293      	cmp	r3, r2
 8008674:	d901      	bls.n	800867a <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8008676:	2303      	movs	r3, #3
 8008678:	e10d      	b.n	8008896 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800867a:	4b4e      	ldr	r3, [pc, #312]	; (80087b4 <HAL_RCC_OscConfig+0x76c>)
 800867c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800867e:	f003 0302 	and.w	r3, r3, #2
 8008682:	2b00      	cmp	r3, #0
 8008684:	d1ee      	bne.n	8008664 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800868a:	2b00      	cmp	r3, #0
 800868c:	f000 8102 	beq.w	8008894 <HAL_RCC_OscConfig+0x84c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8008690:	4b48      	ldr	r3, [pc, #288]	; (80087b4 <HAL_RCC_OscConfig+0x76c>)
 8008692:	691b      	ldr	r3, [r3, #16]
 8008694:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008698:	2b18      	cmp	r3, #24
 800869a:	f000 80bd 	beq.w	8008818 <HAL_RCC_OscConfig+0x7d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086a2:	2b02      	cmp	r3, #2
 80086a4:	f040 809e 	bne.w	80087e4 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80086a8:	4b42      	ldr	r3, [pc, #264]	; (80087b4 <HAL_RCC_OscConfig+0x76c>)
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	4a41      	ldr	r2, [pc, #260]	; (80087b4 <HAL_RCC_OscConfig+0x76c>)
 80086ae:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80086b2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80086b4:	f7fb fe90 	bl	80043d8 <HAL_GetTick>
 80086b8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80086ba:	e008      	b.n	80086ce <HAL_RCC_OscConfig+0x686>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80086bc:	f7fb fe8c 	bl	80043d8 <HAL_GetTick>
 80086c0:	4602      	mov	r2, r0
 80086c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086c4:	1ad3      	subs	r3, r2, r3
 80086c6:	2b02      	cmp	r3, #2
 80086c8:	d901      	bls.n	80086ce <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 80086ca:	2303      	movs	r3, #3
 80086cc:	e0e3      	b.n	8008896 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80086ce:	4b39      	ldr	r3, [pc, #228]	; (80087b4 <HAL_RCC_OscConfig+0x76c>)
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d1f0      	bne.n	80086bc <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80086da:	4b36      	ldr	r3, [pc, #216]	; (80087b4 <HAL_RCC_OscConfig+0x76c>)
 80086dc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80086de:	4b37      	ldr	r3, [pc, #220]	; (80087bc <HAL_RCC_OscConfig+0x774>)
 80086e0:	4013      	ands	r3, r2
 80086e2:	687a      	ldr	r2, [r7, #4]
 80086e4:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80086e6:	687a      	ldr	r2, [r7, #4]
 80086e8:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80086ea:	0112      	lsls	r2, r2, #4
 80086ec:	430a      	orrs	r2, r1
 80086ee:	4931      	ldr	r1, [pc, #196]	; (80087b4 <HAL_RCC_OscConfig+0x76c>)
 80086f0:	4313      	orrs	r3, r2
 80086f2:	628b      	str	r3, [r1, #40]	; 0x28
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80086f8:	3b01      	subs	r3, #1
 80086fa:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008702:	3b01      	subs	r3, #1
 8008704:	025b      	lsls	r3, r3, #9
 8008706:	b29b      	uxth	r3, r3
 8008708:	431a      	orrs	r2, r3
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800870e:	3b01      	subs	r3, #1
 8008710:	041b      	lsls	r3, r3, #16
 8008712:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8008716:	431a      	orrs	r2, r3
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800871c:	3b01      	subs	r3, #1
 800871e:	061b      	lsls	r3, r3, #24
 8008720:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8008724:	4923      	ldr	r1, [pc, #140]	; (80087b4 <HAL_RCC_OscConfig+0x76c>)
 8008726:	4313      	orrs	r3, r2
 8008728:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 800872a:	4b22      	ldr	r3, [pc, #136]	; (80087b4 <HAL_RCC_OscConfig+0x76c>)
 800872c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800872e:	4a21      	ldr	r2, [pc, #132]	; (80087b4 <HAL_RCC_OscConfig+0x76c>)
 8008730:	f023 0301 	bic.w	r3, r3, #1
 8008734:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8008736:	4b1f      	ldr	r3, [pc, #124]	; (80087b4 <HAL_RCC_OscConfig+0x76c>)
 8008738:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800873a:	4b21      	ldr	r3, [pc, #132]	; (80087c0 <HAL_RCC_OscConfig+0x778>)
 800873c:	4013      	ands	r3, r2
 800873e:	687a      	ldr	r2, [r7, #4]
 8008740:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8008742:	00d2      	lsls	r2, r2, #3
 8008744:	491b      	ldr	r1, [pc, #108]	; (80087b4 <HAL_RCC_OscConfig+0x76c>)
 8008746:	4313      	orrs	r3, r2
 8008748:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800874a:	4b1a      	ldr	r3, [pc, #104]	; (80087b4 <HAL_RCC_OscConfig+0x76c>)
 800874c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800874e:	f023 020c 	bic.w	r2, r3, #12
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008756:	4917      	ldr	r1, [pc, #92]	; (80087b4 <HAL_RCC_OscConfig+0x76c>)
 8008758:	4313      	orrs	r3, r2
 800875a:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800875c:	4b15      	ldr	r3, [pc, #84]	; (80087b4 <HAL_RCC_OscConfig+0x76c>)
 800875e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008760:	f023 0202 	bic.w	r2, r3, #2
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008768:	4912      	ldr	r1, [pc, #72]	; (80087b4 <HAL_RCC_OscConfig+0x76c>)
 800876a:	4313      	orrs	r3, r2
 800876c:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800876e:	4b11      	ldr	r3, [pc, #68]	; (80087b4 <HAL_RCC_OscConfig+0x76c>)
 8008770:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008772:	4a10      	ldr	r2, [pc, #64]	; (80087b4 <HAL_RCC_OscConfig+0x76c>)
 8008774:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008778:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800877a:	4b0e      	ldr	r3, [pc, #56]	; (80087b4 <HAL_RCC_OscConfig+0x76c>)
 800877c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800877e:	4a0d      	ldr	r2, [pc, #52]	; (80087b4 <HAL_RCC_OscConfig+0x76c>)
 8008780:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008784:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8008786:	4b0b      	ldr	r3, [pc, #44]	; (80087b4 <HAL_RCC_OscConfig+0x76c>)
 8008788:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800878a:	4a0a      	ldr	r2, [pc, #40]	; (80087b4 <HAL_RCC_OscConfig+0x76c>)
 800878c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008790:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8008792:	4b08      	ldr	r3, [pc, #32]	; (80087b4 <HAL_RCC_OscConfig+0x76c>)
 8008794:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008796:	4a07      	ldr	r2, [pc, #28]	; (80087b4 <HAL_RCC_OscConfig+0x76c>)
 8008798:	f043 0301 	orr.w	r3, r3, #1
 800879c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800879e:	4b05      	ldr	r3, [pc, #20]	; (80087b4 <HAL_RCC_OscConfig+0x76c>)
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	4a04      	ldr	r2, [pc, #16]	; (80087b4 <HAL_RCC_OscConfig+0x76c>)
 80087a4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80087a8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80087aa:	f7fb fe15 	bl	80043d8 <HAL_GetTick>
 80087ae:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80087b0:	e011      	b.n	80087d6 <HAL_RCC_OscConfig+0x78e>
 80087b2:	bf00      	nop
 80087b4:	58024400 	.word	0x58024400
 80087b8:	58024800 	.word	0x58024800
 80087bc:	fffffc0c 	.word	0xfffffc0c
 80087c0:	ffff0007 	.word	0xffff0007
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80087c4:	f7fb fe08 	bl	80043d8 <HAL_GetTick>
 80087c8:	4602      	mov	r2, r0
 80087ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087cc:	1ad3      	subs	r3, r2, r3
 80087ce:	2b02      	cmp	r3, #2
 80087d0:	d901      	bls.n	80087d6 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 80087d2:	2303      	movs	r3, #3
 80087d4:	e05f      	b.n	8008896 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80087d6:	4b32      	ldr	r3, [pc, #200]	; (80088a0 <HAL_RCC_OscConfig+0x858>)
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80087de:	2b00      	cmp	r3, #0
 80087e0:	d0f0      	beq.n	80087c4 <HAL_RCC_OscConfig+0x77c>
 80087e2:	e057      	b.n	8008894 <HAL_RCC_OscConfig+0x84c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80087e4:	4b2e      	ldr	r3, [pc, #184]	; (80088a0 <HAL_RCC_OscConfig+0x858>)
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	4a2d      	ldr	r2, [pc, #180]	; (80088a0 <HAL_RCC_OscConfig+0x858>)
 80087ea:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80087ee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80087f0:	f7fb fdf2 	bl	80043d8 <HAL_GetTick>
 80087f4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80087f6:	e008      	b.n	800880a <HAL_RCC_OscConfig+0x7c2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80087f8:	f7fb fdee 	bl	80043d8 <HAL_GetTick>
 80087fc:	4602      	mov	r2, r0
 80087fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008800:	1ad3      	subs	r3, r2, r3
 8008802:	2b02      	cmp	r3, #2
 8008804:	d901      	bls.n	800880a <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8008806:	2303      	movs	r3, #3
 8008808:	e045      	b.n	8008896 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800880a:	4b25      	ldr	r3, [pc, #148]	; (80088a0 <HAL_RCC_OscConfig+0x858>)
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008812:	2b00      	cmp	r3, #0
 8008814:	d1f0      	bne.n	80087f8 <HAL_RCC_OscConfig+0x7b0>
 8008816:	e03d      	b.n	8008894 <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8008818:	4b21      	ldr	r3, [pc, #132]	; (80088a0 <HAL_RCC_OscConfig+0x858>)
 800881a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800881c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800881e:	4b20      	ldr	r3, [pc, #128]	; (80088a0 <HAL_RCC_OscConfig+0x858>)
 8008820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008822:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008828:	2b01      	cmp	r3, #1
 800882a:	d031      	beq.n	8008890 <HAL_RCC_OscConfig+0x848>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800882c:	693b      	ldr	r3, [r7, #16]
 800882e:	f003 0203 	and.w	r2, r3, #3
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008836:	429a      	cmp	r2, r3
 8008838:	d12a      	bne.n	8008890 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800883a:	693b      	ldr	r3, [r7, #16]
 800883c:	091b      	lsrs	r3, r3, #4
 800883e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008846:	429a      	cmp	r2, r3
 8008848:	d122      	bne.n	8008890 <HAL_RCC_OscConfig+0x848>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800884a:	68fb      	ldr	r3, [r7, #12]
 800884c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008854:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8008856:	429a      	cmp	r2, r3
 8008858:	d11a      	bne.n	8008890 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800885a:	68fb      	ldr	r3, [r7, #12]
 800885c:	0a5b      	lsrs	r3, r3, #9
 800885e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008866:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8008868:	429a      	cmp	r2, r3
 800886a:	d111      	bne.n	8008890 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800886c:	68fb      	ldr	r3, [r7, #12]
 800886e:	0c1b      	lsrs	r3, r3, #16
 8008870:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008878:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800887a:	429a      	cmp	r2, r3
 800887c:	d108      	bne.n	8008890 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800887e:	68fb      	ldr	r3, [r7, #12]
 8008880:	0e1b      	lsrs	r3, r3, #24
 8008882:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800888a:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800888c:	429a      	cmp	r2, r3
 800888e:	d001      	beq.n	8008894 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8008890:	2301      	movs	r3, #1
 8008892:	e000      	b.n	8008896 <HAL_RCC_OscConfig+0x84e>
      }
    }
  }
  return HAL_OK;
 8008894:	2300      	movs	r3, #0
}
 8008896:	4618      	mov	r0, r3
 8008898:	3730      	adds	r7, #48	; 0x30
 800889a:	46bd      	mov	sp, r7
 800889c:	bd80      	pop	{r7, pc}
 800889e:	bf00      	nop
 80088a0:	58024400 	.word	0x58024400

080088a4 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80088a4:	b580      	push	{r7, lr}
 80088a6:	b086      	sub	sp, #24
 80088a8:	af00      	add	r7, sp, #0
 80088aa:	6078      	str	r0, [r7, #4]
 80088ac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	2b00      	cmp	r3, #0
 80088b2:	d101      	bne.n	80088b8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80088b4:	2301      	movs	r3, #1
 80088b6:	e19c      	b.n	8008bf2 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80088b8:	4b8a      	ldr	r3, [pc, #552]	; (8008ae4 <HAL_RCC_ClockConfig+0x240>)
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	f003 030f 	and.w	r3, r3, #15
 80088c0:	683a      	ldr	r2, [r7, #0]
 80088c2:	429a      	cmp	r2, r3
 80088c4:	d910      	bls.n	80088e8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80088c6:	4b87      	ldr	r3, [pc, #540]	; (8008ae4 <HAL_RCC_ClockConfig+0x240>)
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	f023 020f 	bic.w	r2, r3, #15
 80088ce:	4985      	ldr	r1, [pc, #532]	; (8008ae4 <HAL_RCC_ClockConfig+0x240>)
 80088d0:	683b      	ldr	r3, [r7, #0]
 80088d2:	4313      	orrs	r3, r2
 80088d4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80088d6:	4b83      	ldr	r3, [pc, #524]	; (8008ae4 <HAL_RCC_ClockConfig+0x240>)
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	f003 030f 	and.w	r3, r3, #15
 80088de:	683a      	ldr	r2, [r7, #0]
 80088e0:	429a      	cmp	r2, r3
 80088e2:	d001      	beq.n	80088e8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80088e4:	2301      	movs	r3, #1
 80088e6:	e184      	b.n	8008bf2 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	f003 0304 	and.w	r3, r3, #4
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	d010      	beq.n	8008916 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	691a      	ldr	r2, [r3, #16]
 80088f8:	4b7b      	ldr	r3, [pc, #492]	; (8008ae8 <HAL_RCC_ClockConfig+0x244>)
 80088fa:	699b      	ldr	r3, [r3, #24]
 80088fc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008900:	429a      	cmp	r2, r3
 8008902:	d908      	bls.n	8008916 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8008904:	4b78      	ldr	r3, [pc, #480]	; (8008ae8 <HAL_RCC_ClockConfig+0x244>)
 8008906:	699b      	ldr	r3, [r3, #24]
 8008908:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	691b      	ldr	r3, [r3, #16]
 8008910:	4975      	ldr	r1, [pc, #468]	; (8008ae8 <HAL_RCC_ClockConfig+0x244>)
 8008912:	4313      	orrs	r3, r2
 8008914:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	f003 0308 	and.w	r3, r3, #8
 800891e:	2b00      	cmp	r3, #0
 8008920:	d010      	beq.n	8008944 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	695a      	ldr	r2, [r3, #20]
 8008926:	4b70      	ldr	r3, [pc, #448]	; (8008ae8 <HAL_RCC_ClockConfig+0x244>)
 8008928:	69db      	ldr	r3, [r3, #28]
 800892a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800892e:	429a      	cmp	r2, r3
 8008930:	d908      	bls.n	8008944 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8008932:	4b6d      	ldr	r3, [pc, #436]	; (8008ae8 <HAL_RCC_ClockConfig+0x244>)
 8008934:	69db      	ldr	r3, [r3, #28]
 8008936:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	695b      	ldr	r3, [r3, #20]
 800893e:	496a      	ldr	r1, [pc, #424]	; (8008ae8 <HAL_RCC_ClockConfig+0x244>)
 8008940:	4313      	orrs	r3, r2
 8008942:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	f003 0310 	and.w	r3, r3, #16
 800894c:	2b00      	cmp	r3, #0
 800894e:	d010      	beq.n	8008972 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	699a      	ldr	r2, [r3, #24]
 8008954:	4b64      	ldr	r3, [pc, #400]	; (8008ae8 <HAL_RCC_ClockConfig+0x244>)
 8008956:	69db      	ldr	r3, [r3, #28]
 8008958:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800895c:	429a      	cmp	r2, r3
 800895e:	d908      	bls.n	8008972 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8008960:	4b61      	ldr	r3, [pc, #388]	; (8008ae8 <HAL_RCC_ClockConfig+0x244>)
 8008962:	69db      	ldr	r3, [r3, #28]
 8008964:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	699b      	ldr	r3, [r3, #24]
 800896c:	495e      	ldr	r1, [pc, #376]	; (8008ae8 <HAL_RCC_ClockConfig+0x244>)
 800896e:	4313      	orrs	r3, r2
 8008970:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	f003 0320 	and.w	r3, r3, #32
 800897a:	2b00      	cmp	r3, #0
 800897c:	d010      	beq.n	80089a0 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	69da      	ldr	r2, [r3, #28]
 8008982:	4b59      	ldr	r3, [pc, #356]	; (8008ae8 <HAL_RCC_ClockConfig+0x244>)
 8008984:	6a1b      	ldr	r3, [r3, #32]
 8008986:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800898a:	429a      	cmp	r2, r3
 800898c:	d908      	bls.n	80089a0 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800898e:	4b56      	ldr	r3, [pc, #344]	; (8008ae8 <HAL_RCC_ClockConfig+0x244>)
 8008990:	6a1b      	ldr	r3, [r3, #32]
 8008992:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	69db      	ldr	r3, [r3, #28]
 800899a:	4953      	ldr	r1, [pc, #332]	; (8008ae8 <HAL_RCC_ClockConfig+0x244>)
 800899c:	4313      	orrs	r3, r2
 800899e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	f003 0302 	and.w	r3, r3, #2
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	d010      	beq.n	80089ce <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	68da      	ldr	r2, [r3, #12]
 80089b0:	4b4d      	ldr	r3, [pc, #308]	; (8008ae8 <HAL_RCC_ClockConfig+0x244>)
 80089b2:	699b      	ldr	r3, [r3, #24]
 80089b4:	f003 030f 	and.w	r3, r3, #15
 80089b8:	429a      	cmp	r2, r3
 80089ba:	d908      	bls.n	80089ce <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80089bc:	4b4a      	ldr	r3, [pc, #296]	; (8008ae8 <HAL_RCC_ClockConfig+0x244>)
 80089be:	699b      	ldr	r3, [r3, #24]
 80089c0:	f023 020f 	bic.w	r2, r3, #15
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	68db      	ldr	r3, [r3, #12]
 80089c8:	4947      	ldr	r1, [pc, #284]	; (8008ae8 <HAL_RCC_ClockConfig+0x244>)
 80089ca:	4313      	orrs	r3, r2
 80089cc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	f003 0301 	and.w	r3, r3, #1
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	d055      	beq.n	8008a86 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80089da:	4b43      	ldr	r3, [pc, #268]	; (8008ae8 <HAL_RCC_ClockConfig+0x244>)
 80089dc:	699b      	ldr	r3, [r3, #24]
 80089de:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	689b      	ldr	r3, [r3, #8]
 80089e6:	4940      	ldr	r1, [pc, #256]	; (8008ae8 <HAL_RCC_ClockConfig+0x244>)
 80089e8:	4313      	orrs	r3, r2
 80089ea:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	685b      	ldr	r3, [r3, #4]
 80089f0:	2b02      	cmp	r3, #2
 80089f2:	d107      	bne.n	8008a04 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80089f4:	4b3c      	ldr	r3, [pc, #240]	; (8008ae8 <HAL_RCC_ClockConfig+0x244>)
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	d121      	bne.n	8008a44 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8008a00:	2301      	movs	r3, #1
 8008a02:	e0f6      	b.n	8008bf2 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	685b      	ldr	r3, [r3, #4]
 8008a08:	2b03      	cmp	r3, #3
 8008a0a:	d107      	bne.n	8008a1c <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008a0c:	4b36      	ldr	r3, [pc, #216]	; (8008ae8 <HAL_RCC_ClockConfig+0x244>)
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008a14:	2b00      	cmp	r3, #0
 8008a16:	d115      	bne.n	8008a44 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8008a18:	2301      	movs	r3, #1
 8008a1a:	e0ea      	b.n	8008bf2 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	685b      	ldr	r3, [r3, #4]
 8008a20:	2b01      	cmp	r3, #1
 8008a22:	d107      	bne.n	8008a34 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008a24:	4b30      	ldr	r3, [pc, #192]	; (8008ae8 <HAL_RCC_ClockConfig+0x244>)
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008a2c:	2b00      	cmp	r3, #0
 8008a2e:	d109      	bne.n	8008a44 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8008a30:	2301      	movs	r3, #1
 8008a32:	e0de      	b.n	8008bf2 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008a34:	4b2c      	ldr	r3, [pc, #176]	; (8008ae8 <HAL_RCC_ClockConfig+0x244>)
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	f003 0304 	and.w	r3, r3, #4
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	d101      	bne.n	8008a44 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8008a40:	2301      	movs	r3, #1
 8008a42:	e0d6      	b.n	8008bf2 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8008a44:	4b28      	ldr	r3, [pc, #160]	; (8008ae8 <HAL_RCC_ClockConfig+0x244>)
 8008a46:	691b      	ldr	r3, [r3, #16]
 8008a48:	f023 0207 	bic.w	r2, r3, #7
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	685b      	ldr	r3, [r3, #4]
 8008a50:	4925      	ldr	r1, [pc, #148]	; (8008ae8 <HAL_RCC_ClockConfig+0x244>)
 8008a52:	4313      	orrs	r3, r2
 8008a54:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008a56:	f7fb fcbf 	bl	80043d8 <HAL_GetTick>
 8008a5a:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008a5c:	e00a      	b.n	8008a74 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008a5e:	f7fb fcbb 	bl	80043d8 <HAL_GetTick>
 8008a62:	4602      	mov	r2, r0
 8008a64:	697b      	ldr	r3, [r7, #20]
 8008a66:	1ad3      	subs	r3, r2, r3
 8008a68:	f241 3288 	movw	r2, #5000	; 0x1388
 8008a6c:	4293      	cmp	r3, r2
 8008a6e:	d901      	bls.n	8008a74 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8008a70:	2303      	movs	r3, #3
 8008a72:	e0be      	b.n	8008bf2 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008a74:	4b1c      	ldr	r3, [pc, #112]	; (8008ae8 <HAL_RCC_ClockConfig+0x244>)
 8008a76:	691b      	ldr	r3, [r3, #16]
 8008a78:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	685b      	ldr	r3, [r3, #4]
 8008a80:	00db      	lsls	r3, r3, #3
 8008a82:	429a      	cmp	r2, r3
 8008a84:	d1eb      	bne.n	8008a5e <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	f003 0302 	and.w	r3, r3, #2
 8008a8e:	2b00      	cmp	r3, #0
 8008a90:	d010      	beq.n	8008ab4 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	68da      	ldr	r2, [r3, #12]
 8008a96:	4b14      	ldr	r3, [pc, #80]	; (8008ae8 <HAL_RCC_ClockConfig+0x244>)
 8008a98:	699b      	ldr	r3, [r3, #24]
 8008a9a:	f003 030f 	and.w	r3, r3, #15
 8008a9e:	429a      	cmp	r2, r3
 8008aa0:	d208      	bcs.n	8008ab4 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008aa2:	4b11      	ldr	r3, [pc, #68]	; (8008ae8 <HAL_RCC_ClockConfig+0x244>)
 8008aa4:	699b      	ldr	r3, [r3, #24]
 8008aa6:	f023 020f 	bic.w	r2, r3, #15
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	68db      	ldr	r3, [r3, #12]
 8008aae:	490e      	ldr	r1, [pc, #56]	; (8008ae8 <HAL_RCC_ClockConfig+0x244>)
 8008ab0:	4313      	orrs	r3, r2
 8008ab2:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008ab4:	4b0b      	ldr	r3, [pc, #44]	; (8008ae4 <HAL_RCC_ClockConfig+0x240>)
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	f003 030f 	and.w	r3, r3, #15
 8008abc:	683a      	ldr	r2, [r7, #0]
 8008abe:	429a      	cmp	r2, r3
 8008ac0:	d214      	bcs.n	8008aec <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008ac2:	4b08      	ldr	r3, [pc, #32]	; (8008ae4 <HAL_RCC_ClockConfig+0x240>)
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	f023 020f 	bic.w	r2, r3, #15
 8008aca:	4906      	ldr	r1, [pc, #24]	; (8008ae4 <HAL_RCC_ClockConfig+0x240>)
 8008acc:	683b      	ldr	r3, [r7, #0]
 8008ace:	4313      	orrs	r3, r2
 8008ad0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008ad2:	4b04      	ldr	r3, [pc, #16]	; (8008ae4 <HAL_RCC_ClockConfig+0x240>)
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	f003 030f 	and.w	r3, r3, #15
 8008ada:	683a      	ldr	r2, [r7, #0]
 8008adc:	429a      	cmp	r2, r3
 8008ade:	d005      	beq.n	8008aec <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8008ae0:	2301      	movs	r3, #1
 8008ae2:	e086      	b.n	8008bf2 <HAL_RCC_ClockConfig+0x34e>
 8008ae4:	52002000 	.word	0x52002000
 8008ae8:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	f003 0304 	and.w	r3, r3, #4
 8008af4:	2b00      	cmp	r3, #0
 8008af6:	d010      	beq.n	8008b1a <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	691a      	ldr	r2, [r3, #16]
 8008afc:	4b3f      	ldr	r3, [pc, #252]	; (8008bfc <HAL_RCC_ClockConfig+0x358>)
 8008afe:	699b      	ldr	r3, [r3, #24]
 8008b00:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008b04:	429a      	cmp	r2, r3
 8008b06:	d208      	bcs.n	8008b1a <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8008b08:	4b3c      	ldr	r3, [pc, #240]	; (8008bfc <HAL_RCC_ClockConfig+0x358>)
 8008b0a:	699b      	ldr	r3, [r3, #24]
 8008b0c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	691b      	ldr	r3, [r3, #16]
 8008b14:	4939      	ldr	r1, [pc, #228]	; (8008bfc <HAL_RCC_ClockConfig+0x358>)
 8008b16:	4313      	orrs	r3, r2
 8008b18:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	f003 0308 	and.w	r3, r3, #8
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	d010      	beq.n	8008b48 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	695a      	ldr	r2, [r3, #20]
 8008b2a:	4b34      	ldr	r3, [pc, #208]	; (8008bfc <HAL_RCC_ClockConfig+0x358>)
 8008b2c:	69db      	ldr	r3, [r3, #28]
 8008b2e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008b32:	429a      	cmp	r2, r3
 8008b34:	d208      	bcs.n	8008b48 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8008b36:	4b31      	ldr	r3, [pc, #196]	; (8008bfc <HAL_RCC_ClockConfig+0x358>)
 8008b38:	69db      	ldr	r3, [r3, #28]
 8008b3a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	695b      	ldr	r3, [r3, #20]
 8008b42:	492e      	ldr	r1, [pc, #184]	; (8008bfc <HAL_RCC_ClockConfig+0x358>)
 8008b44:	4313      	orrs	r3, r2
 8008b46:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	f003 0310 	and.w	r3, r3, #16
 8008b50:	2b00      	cmp	r3, #0
 8008b52:	d010      	beq.n	8008b76 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	699a      	ldr	r2, [r3, #24]
 8008b58:	4b28      	ldr	r3, [pc, #160]	; (8008bfc <HAL_RCC_ClockConfig+0x358>)
 8008b5a:	69db      	ldr	r3, [r3, #28]
 8008b5c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008b60:	429a      	cmp	r2, r3
 8008b62:	d208      	bcs.n	8008b76 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8008b64:	4b25      	ldr	r3, [pc, #148]	; (8008bfc <HAL_RCC_ClockConfig+0x358>)
 8008b66:	69db      	ldr	r3, [r3, #28]
 8008b68:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	699b      	ldr	r3, [r3, #24]
 8008b70:	4922      	ldr	r1, [pc, #136]	; (8008bfc <HAL_RCC_ClockConfig+0x358>)
 8008b72:	4313      	orrs	r3, r2
 8008b74:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	f003 0320 	and.w	r3, r3, #32
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	d010      	beq.n	8008ba4 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	69da      	ldr	r2, [r3, #28]
 8008b86:	4b1d      	ldr	r3, [pc, #116]	; (8008bfc <HAL_RCC_ClockConfig+0x358>)
 8008b88:	6a1b      	ldr	r3, [r3, #32]
 8008b8a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008b8e:	429a      	cmp	r2, r3
 8008b90:	d208      	bcs.n	8008ba4 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8008b92:	4b1a      	ldr	r3, [pc, #104]	; (8008bfc <HAL_RCC_ClockConfig+0x358>)
 8008b94:	6a1b      	ldr	r3, [r3, #32]
 8008b96:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	69db      	ldr	r3, [r3, #28]
 8008b9e:	4917      	ldr	r1, [pc, #92]	; (8008bfc <HAL_RCC_ClockConfig+0x358>)
 8008ba0:	4313      	orrs	r3, r2
 8008ba2:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8008ba4:	f000 f834 	bl	8008c10 <HAL_RCC_GetSysClockFreq>
 8008ba8:	4602      	mov	r2, r0
 8008baa:	4b14      	ldr	r3, [pc, #80]	; (8008bfc <HAL_RCC_ClockConfig+0x358>)
 8008bac:	699b      	ldr	r3, [r3, #24]
 8008bae:	0a1b      	lsrs	r3, r3, #8
 8008bb0:	f003 030f 	and.w	r3, r3, #15
 8008bb4:	4912      	ldr	r1, [pc, #72]	; (8008c00 <HAL_RCC_ClockConfig+0x35c>)
 8008bb6:	5ccb      	ldrb	r3, [r1, r3]
 8008bb8:	f003 031f 	and.w	r3, r3, #31
 8008bbc:	fa22 f303 	lsr.w	r3, r2, r3
 8008bc0:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008bc2:	4b0e      	ldr	r3, [pc, #56]	; (8008bfc <HAL_RCC_ClockConfig+0x358>)
 8008bc4:	699b      	ldr	r3, [r3, #24]
 8008bc6:	f003 030f 	and.w	r3, r3, #15
 8008bca:	4a0d      	ldr	r2, [pc, #52]	; (8008c00 <HAL_RCC_ClockConfig+0x35c>)
 8008bcc:	5cd3      	ldrb	r3, [r2, r3]
 8008bce:	f003 031f 	and.w	r3, r3, #31
 8008bd2:	693a      	ldr	r2, [r7, #16]
 8008bd4:	fa22 f303 	lsr.w	r3, r2, r3
 8008bd8:	4a0a      	ldr	r2, [pc, #40]	; (8008c04 <HAL_RCC_ClockConfig+0x360>)
 8008bda:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8008bdc:	4a0a      	ldr	r2, [pc, #40]	; (8008c08 <HAL_RCC_ClockConfig+0x364>)
 8008bde:	693b      	ldr	r3, [r7, #16]
 8008be0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8008be2:	4b0a      	ldr	r3, [pc, #40]	; (8008c0c <HAL_RCC_ClockConfig+0x368>)
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	4618      	mov	r0, r3
 8008be8:	f7fa fd62 	bl	80036b0 <HAL_InitTick>
 8008bec:	4603      	mov	r3, r0
 8008bee:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8008bf0:	7bfb      	ldrb	r3, [r7, #15]
}
 8008bf2:	4618      	mov	r0, r3
 8008bf4:	3718      	adds	r7, #24
 8008bf6:	46bd      	mov	sp, r7
 8008bf8:	bd80      	pop	{r7, pc}
 8008bfa:	bf00      	nop
 8008bfc:	58024400 	.word	0x58024400
 8008c00:	0801ed68 	.word	0x0801ed68
 8008c04:	20000004 	.word	0x20000004
 8008c08:	20000000 	.word	0x20000000
 8008c0c:	20000008 	.word	0x20000008

08008c10 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008c10:	b480      	push	{r7}
 8008c12:	b089      	sub	sp, #36	; 0x24
 8008c14:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008c16:	4bb3      	ldr	r3, [pc, #716]	; (8008ee4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008c18:	691b      	ldr	r3, [r3, #16]
 8008c1a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008c1e:	2b18      	cmp	r3, #24
 8008c20:	f200 8155 	bhi.w	8008ece <HAL_RCC_GetSysClockFreq+0x2be>
 8008c24:	a201      	add	r2, pc, #4	; (adr r2, 8008c2c <HAL_RCC_GetSysClockFreq+0x1c>)
 8008c26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c2a:	bf00      	nop
 8008c2c:	08008c91 	.word	0x08008c91
 8008c30:	08008ecf 	.word	0x08008ecf
 8008c34:	08008ecf 	.word	0x08008ecf
 8008c38:	08008ecf 	.word	0x08008ecf
 8008c3c:	08008ecf 	.word	0x08008ecf
 8008c40:	08008ecf 	.word	0x08008ecf
 8008c44:	08008ecf 	.word	0x08008ecf
 8008c48:	08008ecf 	.word	0x08008ecf
 8008c4c:	08008cb7 	.word	0x08008cb7
 8008c50:	08008ecf 	.word	0x08008ecf
 8008c54:	08008ecf 	.word	0x08008ecf
 8008c58:	08008ecf 	.word	0x08008ecf
 8008c5c:	08008ecf 	.word	0x08008ecf
 8008c60:	08008ecf 	.word	0x08008ecf
 8008c64:	08008ecf 	.word	0x08008ecf
 8008c68:	08008ecf 	.word	0x08008ecf
 8008c6c:	08008cbd 	.word	0x08008cbd
 8008c70:	08008ecf 	.word	0x08008ecf
 8008c74:	08008ecf 	.word	0x08008ecf
 8008c78:	08008ecf 	.word	0x08008ecf
 8008c7c:	08008ecf 	.word	0x08008ecf
 8008c80:	08008ecf 	.word	0x08008ecf
 8008c84:	08008ecf 	.word	0x08008ecf
 8008c88:	08008ecf 	.word	0x08008ecf
 8008c8c:	08008cc3 	.word	0x08008cc3
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008c90:	4b94      	ldr	r3, [pc, #592]	; (8008ee4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	f003 0320 	and.w	r3, r3, #32
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	d009      	beq.n	8008cb0 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008c9c:	4b91      	ldr	r3, [pc, #580]	; (8008ee4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	08db      	lsrs	r3, r3, #3
 8008ca2:	f003 0303 	and.w	r3, r3, #3
 8008ca6:	4a90      	ldr	r2, [pc, #576]	; (8008ee8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008ca8:	fa22 f303 	lsr.w	r3, r2, r3
 8008cac:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8008cae:	e111      	b.n	8008ed4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8008cb0:	4b8d      	ldr	r3, [pc, #564]	; (8008ee8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008cb2:	61bb      	str	r3, [r7, #24]
    break;
 8008cb4:	e10e      	b.n	8008ed4 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8008cb6:	4b8d      	ldr	r3, [pc, #564]	; (8008eec <HAL_RCC_GetSysClockFreq+0x2dc>)
 8008cb8:	61bb      	str	r3, [r7, #24]
    break;
 8008cba:	e10b      	b.n	8008ed4 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8008cbc:	4b8c      	ldr	r3, [pc, #560]	; (8008ef0 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8008cbe:	61bb      	str	r3, [r7, #24]
    break;
 8008cc0:	e108      	b.n	8008ed4 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008cc2:	4b88      	ldr	r3, [pc, #544]	; (8008ee4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008cc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008cc6:	f003 0303 	and.w	r3, r3, #3
 8008cca:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8008ccc:	4b85      	ldr	r3, [pc, #532]	; (8008ee4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008cce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008cd0:	091b      	lsrs	r3, r3, #4
 8008cd2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008cd6:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8008cd8:	4b82      	ldr	r3, [pc, #520]	; (8008ee4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008cda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cdc:	f003 0301 	and.w	r3, r3, #1
 8008ce0:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8008ce2:	4b80      	ldr	r3, [pc, #512]	; (8008ee4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008ce4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008ce6:	08db      	lsrs	r3, r3, #3
 8008ce8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008cec:	68fa      	ldr	r2, [r7, #12]
 8008cee:	fb02 f303 	mul.w	r3, r2, r3
 8008cf2:	ee07 3a90 	vmov	s15, r3
 8008cf6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008cfa:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8008cfe:	693b      	ldr	r3, [r7, #16]
 8008d00:	2b00      	cmp	r3, #0
 8008d02:	f000 80e1 	beq.w	8008ec8 <HAL_RCC_GetSysClockFreq+0x2b8>
 8008d06:	697b      	ldr	r3, [r7, #20]
 8008d08:	2b02      	cmp	r3, #2
 8008d0a:	f000 8083 	beq.w	8008e14 <HAL_RCC_GetSysClockFreq+0x204>
 8008d0e:	697b      	ldr	r3, [r7, #20]
 8008d10:	2b02      	cmp	r3, #2
 8008d12:	f200 80a1 	bhi.w	8008e58 <HAL_RCC_GetSysClockFreq+0x248>
 8008d16:	697b      	ldr	r3, [r7, #20]
 8008d18:	2b00      	cmp	r3, #0
 8008d1a:	d003      	beq.n	8008d24 <HAL_RCC_GetSysClockFreq+0x114>
 8008d1c:	697b      	ldr	r3, [r7, #20]
 8008d1e:	2b01      	cmp	r3, #1
 8008d20:	d056      	beq.n	8008dd0 <HAL_RCC_GetSysClockFreq+0x1c0>
 8008d22:	e099      	b.n	8008e58 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008d24:	4b6f      	ldr	r3, [pc, #444]	; (8008ee4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	f003 0320 	and.w	r3, r3, #32
 8008d2c:	2b00      	cmp	r3, #0
 8008d2e:	d02d      	beq.n	8008d8c <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008d30:	4b6c      	ldr	r3, [pc, #432]	; (8008ee4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	08db      	lsrs	r3, r3, #3
 8008d36:	f003 0303 	and.w	r3, r3, #3
 8008d3a:	4a6b      	ldr	r2, [pc, #428]	; (8008ee8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008d3c:	fa22 f303 	lsr.w	r3, r2, r3
 8008d40:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	ee07 3a90 	vmov	s15, r3
 8008d48:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008d4c:	693b      	ldr	r3, [r7, #16]
 8008d4e:	ee07 3a90 	vmov	s15, r3
 8008d52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008d56:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008d5a:	4b62      	ldr	r3, [pc, #392]	; (8008ee4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008d5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008d62:	ee07 3a90 	vmov	s15, r3
 8008d66:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008d6a:	ed97 6a02 	vldr	s12, [r7, #8]
 8008d6e:	eddf 5a61 	vldr	s11, [pc, #388]	; 8008ef4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008d72:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008d76:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008d7a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008d7e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008d82:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008d86:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8008d8a:	e087      	b.n	8008e9c <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008d8c:	693b      	ldr	r3, [r7, #16]
 8008d8e:	ee07 3a90 	vmov	s15, r3
 8008d92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008d96:	eddf 6a58 	vldr	s13, [pc, #352]	; 8008ef8 <HAL_RCC_GetSysClockFreq+0x2e8>
 8008d9a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008d9e:	4b51      	ldr	r3, [pc, #324]	; (8008ee4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008da0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008da2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008da6:	ee07 3a90 	vmov	s15, r3
 8008daa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008dae:	ed97 6a02 	vldr	s12, [r7, #8]
 8008db2:	eddf 5a50 	vldr	s11, [pc, #320]	; 8008ef4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008db6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008dba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008dbe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008dc2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008dc6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008dca:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008dce:	e065      	b.n	8008e9c <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008dd0:	693b      	ldr	r3, [r7, #16]
 8008dd2:	ee07 3a90 	vmov	s15, r3
 8008dd6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008dda:	eddf 6a48 	vldr	s13, [pc, #288]	; 8008efc <HAL_RCC_GetSysClockFreq+0x2ec>
 8008dde:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008de2:	4b40      	ldr	r3, [pc, #256]	; (8008ee4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008de4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008de6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008dea:	ee07 3a90 	vmov	s15, r3
 8008dee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008df2:	ed97 6a02 	vldr	s12, [r7, #8]
 8008df6:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8008ef4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008dfa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008dfe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008e02:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008e06:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008e0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008e0e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008e12:	e043      	b.n	8008e9c <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008e14:	693b      	ldr	r3, [r7, #16]
 8008e16:	ee07 3a90 	vmov	s15, r3
 8008e1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008e1e:	eddf 6a38 	vldr	s13, [pc, #224]	; 8008f00 <HAL_RCC_GetSysClockFreq+0x2f0>
 8008e22:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008e26:	4b2f      	ldr	r3, [pc, #188]	; (8008ee4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008e28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e2a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008e2e:	ee07 3a90 	vmov	s15, r3
 8008e32:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008e36:	ed97 6a02 	vldr	s12, [r7, #8]
 8008e3a:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8008ef4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008e3e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008e42:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008e46:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008e4a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008e4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008e52:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008e56:	e021      	b.n	8008e9c <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008e58:	693b      	ldr	r3, [r7, #16]
 8008e5a:	ee07 3a90 	vmov	s15, r3
 8008e5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008e62:	eddf 6a26 	vldr	s13, [pc, #152]	; 8008efc <HAL_RCC_GetSysClockFreq+0x2ec>
 8008e66:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008e6a:	4b1e      	ldr	r3, [pc, #120]	; (8008ee4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008e6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e6e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008e72:	ee07 3a90 	vmov	s15, r3
 8008e76:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008e7a:	ed97 6a02 	vldr	s12, [r7, #8]
 8008e7e:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8008ef4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008e82:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008e86:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008e8a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008e8e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008e92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008e96:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008e9a:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8008e9c:	4b11      	ldr	r3, [pc, #68]	; (8008ee4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008e9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ea0:	0a5b      	lsrs	r3, r3, #9
 8008ea2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008ea6:	3301      	adds	r3, #1
 8008ea8:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8008eaa:	683b      	ldr	r3, [r7, #0]
 8008eac:	ee07 3a90 	vmov	s15, r3
 8008eb0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8008eb4:	edd7 6a07 	vldr	s13, [r7, #28]
 8008eb8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008ebc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008ec0:	ee17 3a90 	vmov	r3, s15
 8008ec4:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8008ec6:	e005      	b.n	8008ed4 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8008ec8:	2300      	movs	r3, #0
 8008eca:	61bb      	str	r3, [r7, #24]
    break;
 8008ecc:	e002      	b.n	8008ed4 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8008ece:	4b07      	ldr	r3, [pc, #28]	; (8008eec <HAL_RCC_GetSysClockFreq+0x2dc>)
 8008ed0:	61bb      	str	r3, [r7, #24]
    break;
 8008ed2:	bf00      	nop
  }

  return sysclockfreq;
 8008ed4:	69bb      	ldr	r3, [r7, #24]
}
 8008ed6:	4618      	mov	r0, r3
 8008ed8:	3724      	adds	r7, #36	; 0x24
 8008eda:	46bd      	mov	sp, r7
 8008edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ee0:	4770      	bx	lr
 8008ee2:	bf00      	nop
 8008ee4:	58024400 	.word	0x58024400
 8008ee8:	03d09000 	.word	0x03d09000
 8008eec:	003d0900 	.word	0x003d0900
 8008ef0:	007a1200 	.word	0x007a1200
 8008ef4:	46000000 	.word	0x46000000
 8008ef8:	4c742400 	.word	0x4c742400
 8008efc:	4a742400 	.word	0x4a742400
 8008f00:	4af42400 	.word	0x4af42400

08008f04 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008f04:	b580      	push	{r7, lr}
 8008f06:	b082      	sub	sp, #8
 8008f08:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8008f0a:	f7ff fe81 	bl	8008c10 <HAL_RCC_GetSysClockFreq>
 8008f0e:	4602      	mov	r2, r0
 8008f10:	4b10      	ldr	r3, [pc, #64]	; (8008f54 <HAL_RCC_GetHCLKFreq+0x50>)
 8008f12:	699b      	ldr	r3, [r3, #24]
 8008f14:	0a1b      	lsrs	r3, r3, #8
 8008f16:	f003 030f 	and.w	r3, r3, #15
 8008f1a:	490f      	ldr	r1, [pc, #60]	; (8008f58 <HAL_RCC_GetHCLKFreq+0x54>)
 8008f1c:	5ccb      	ldrb	r3, [r1, r3]
 8008f1e:	f003 031f 	and.w	r3, r3, #31
 8008f22:	fa22 f303 	lsr.w	r3, r2, r3
 8008f26:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008f28:	4b0a      	ldr	r3, [pc, #40]	; (8008f54 <HAL_RCC_GetHCLKFreq+0x50>)
 8008f2a:	699b      	ldr	r3, [r3, #24]
 8008f2c:	f003 030f 	and.w	r3, r3, #15
 8008f30:	4a09      	ldr	r2, [pc, #36]	; (8008f58 <HAL_RCC_GetHCLKFreq+0x54>)
 8008f32:	5cd3      	ldrb	r3, [r2, r3]
 8008f34:	f003 031f 	and.w	r3, r3, #31
 8008f38:	687a      	ldr	r2, [r7, #4]
 8008f3a:	fa22 f303 	lsr.w	r3, r2, r3
 8008f3e:	4a07      	ldr	r2, [pc, #28]	; (8008f5c <HAL_RCC_GetHCLKFreq+0x58>)
 8008f40:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8008f42:	4a07      	ldr	r2, [pc, #28]	; (8008f60 <HAL_RCC_GetHCLKFreq+0x5c>)
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8008f48:	4b04      	ldr	r3, [pc, #16]	; (8008f5c <HAL_RCC_GetHCLKFreq+0x58>)
 8008f4a:	681b      	ldr	r3, [r3, #0]
}
 8008f4c:	4618      	mov	r0, r3
 8008f4e:	3708      	adds	r7, #8
 8008f50:	46bd      	mov	sp, r7
 8008f52:	bd80      	pop	{r7, pc}
 8008f54:	58024400 	.word	0x58024400
 8008f58:	0801ed68 	.word	0x0801ed68
 8008f5c:	20000004 	.word	0x20000004
 8008f60:	20000000 	.word	0x20000000

08008f64 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008f64:	b580      	push	{r7, lr}
 8008f66:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8008f68:	f7ff ffcc 	bl	8008f04 <HAL_RCC_GetHCLKFreq>
 8008f6c:	4602      	mov	r2, r0
 8008f6e:	4b06      	ldr	r3, [pc, #24]	; (8008f88 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008f70:	69db      	ldr	r3, [r3, #28]
 8008f72:	091b      	lsrs	r3, r3, #4
 8008f74:	f003 0307 	and.w	r3, r3, #7
 8008f78:	4904      	ldr	r1, [pc, #16]	; (8008f8c <HAL_RCC_GetPCLK1Freq+0x28>)
 8008f7a:	5ccb      	ldrb	r3, [r1, r3]
 8008f7c:	f003 031f 	and.w	r3, r3, #31
 8008f80:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8008f84:	4618      	mov	r0, r3
 8008f86:	bd80      	pop	{r7, pc}
 8008f88:	58024400 	.word	0x58024400
 8008f8c:	0801ed68 	.word	0x0801ed68

08008f90 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008f90:	b580      	push	{r7, lr}
 8008f92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8008f94:	f7ff ffb6 	bl	8008f04 <HAL_RCC_GetHCLKFreq>
 8008f98:	4602      	mov	r2, r0
 8008f9a:	4b06      	ldr	r3, [pc, #24]	; (8008fb4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008f9c:	69db      	ldr	r3, [r3, #28]
 8008f9e:	0a1b      	lsrs	r3, r3, #8
 8008fa0:	f003 0307 	and.w	r3, r3, #7
 8008fa4:	4904      	ldr	r1, [pc, #16]	; (8008fb8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8008fa6:	5ccb      	ldrb	r3, [r1, r3]
 8008fa8:	f003 031f 	and.w	r3, r3, #31
 8008fac:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8008fb0:	4618      	mov	r0, r3
 8008fb2:	bd80      	pop	{r7, pc}
 8008fb4:	58024400 	.word	0x58024400
 8008fb8:	0801ed68 	.word	0x0801ed68

08008fbc <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8008fbc:	b480      	push	{r7}
 8008fbe:	b083      	sub	sp, #12
 8008fc0:	af00      	add	r7, sp, #0
 8008fc2:	6078      	str	r0, [r7, #4]
 8008fc4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	223f      	movs	r2, #63	; 0x3f
 8008fca:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8008fcc:	4b1a      	ldr	r3, [pc, #104]	; (8009038 <HAL_RCC_GetClockConfig+0x7c>)
 8008fce:	691b      	ldr	r3, [r3, #16]
 8008fd0:	f003 0207 	and.w	r2, r3, #7
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8008fd8:	4b17      	ldr	r3, [pc, #92]	; (8009038 <HAL_RCC_GetClockConfig+0x7c>)
 8008fda:	699b      	ldr	r3, [r3, #24]
 8008fdc:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8008fe4:	4b14      	ldr	r3, [pc, #80]	; (8009038 <HAL_RCC_GetClockConfig+0x7c>)
 8008fe6:	699b      	ldr	r3, [r3, #24]
 8008fe8:	f003 020f 	and.w	r2, r3, #15
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8008ff0:	4b11      	ldr	r3, [pc, #68]	; (8009038 <HAL_RCC_GetClockConfig+0x7c>)
 8008ff2:	699b      	ldr	r3, [r3, #24]
 8008ff4:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8008ffc:	4b0e      	ldr	r3, [pc, #56]	; (8009038 <HAL_RCC_GetClockConfig+0x7c>)
 8008ffe:	69db      	ldr	r3, [r3, #28]
 8009000:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8009008:	4b0b      	ldr	r3, [pc, #44]	; (8009038 <HAL_RCC_GetClockConfig+0x7c>)
 800900a:	69db      	ldr	r3, [r3, #28]
 800900c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8009014:	4b08      	ldr	r3, [pc, #32]	; (8009038 <HAL_RCC_GetClockConfig+0x7c>)
 8009016:	6a1b      	ldr	r3, [r3, #32]
 8009018:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8009020:	4b06      	ldr	r3, [pc, #24]	; (800903c <HAL_RCC_GetClockConfig+0x80>)
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	f003 020f 	and.w	r2, r3, #15
 8009028:	683b      	ldr	r3, [r7, #0]
 800902a:	601a      	str	r2, [r3, #0]
}
 800902c:	bf00      	nop
 800902e:	370c      	adds	r7, #12
 8009030:	46bd      	mov	sp, r7
 8009032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009036:	4770      	bx	lr
 8009038:	58024400 	.word	0x58024400
 800903c:	52002000 	.word	0x52002000

08009040 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8009040:	b580      	push	{r7, lr}
 8009042:	b086      	sub	sp, #24
 8009044:	af00      	add	r7, sp, #0
 8009046:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8009048:	2300      	movs	r3, #0
 800904a:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800904c:	2300      	movs	r3, #0
 800904e:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009058:	2b00      	cmp	r3, #0
 800905a:	d03f      	beq.n	80090dc <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009060:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009064:	d02a      	beq.n	80090bc <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8009066:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800906a:	d824      	bhi.n	80090b6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800906c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009070:	d018      	beq.n	80090a4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8009072:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009076:	d81e      	bhi.n	80090b6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8009078:	2b00      	cmp	r3, #0
 800907a:	d003      	beq.n	8009084 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800907c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009080:	d007      	beq.n	8009092 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8009082:	e018      	b.n	80090b6 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009084:	4ba3      	ldr	r3, [pc, #652]	; (8009314 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8009086:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009088:	4aa2      	ldr	r2, [pc, #648]	; (8009314 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800908a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800908e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8009090:	e015      	b.n	80090be <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	3304      	adds	r3, #4
 8009096:	2102      	movs	r1, #2
 8009098:	4618      	mov	r0, r3
 800909a:	f001 fff9 	bl	800b090 <RCCEx_PLL2_Config>
 800909e:	4603      	mov	r3, r0
 80090a0:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80090a2:	e00c      	b.n	80090be <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	3324      	adds	r3, #36	; 0x24
 80090a8:	2102      	movs	r1, #2
 80090aa:	4618      	mov	r0, r3
 80090ac:	f002 f8a2 	bl	800b1f4 <RCCEx_PLL3_Config>
 80090b0:	4603      	mov	r3, r0
 80090b2:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80090b4:	e003      	b.n	80090be <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80090b6:	2301      	movs	r3, #1
 80090b8:	75fb      	strb	r3, [r7, #23]
      break;
 80090ba:	e000      	b.n	80090be <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80090bc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80090be:	7dfb      	ldrb	r3, [r7, #23]
 80090c0:	2b00      	cmp	r3, #0
 80090c2:	d109      	bne.n	80090d8 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80090c4:	4b93      	ldr	r3, [pc, #588]	; (8009314 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80090c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80090c8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80090d0:	4990      	ldr	r1, [pc, #576]	; (8009314 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80090d2:	4313      	orrs	r3, r2
 80090d4:	650b      	str	r3, [r1, #80]	; 0x50
 80090d6:	e001      	b.n	80090dc <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80090d8:	7dfb      	ldrb	r3, [r7, #23]
 80090da:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80090e4:	2b00      	cmp	r3, #0
 80090e6:	d03d      	beq.n	8009164 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80090ec:	2b04      	cmp	r3, #4
 80090ee:	d826      	bhi.n	800913e <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80090f0:	a201      	add	r2, pc, #4	; (adr r2, 80090f8 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 80090f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80090f6:	bf00      	nop
 80090f8:	0800910d 	.word	0x0800910d
 80090fc:	0800911b 	.word	0x0800911b
 8009100:	0800912d 	.word	0x0800912d
 8009104:	08009145 	.word	0x08009145
 8009108:	08009145 	.word	0x08009145
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800910c:	4b81      	ldr	r3, [pc, #516]	; (8009314 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800910e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009110:	4a80      	ldr	r2, [pc, #512]	; (8009314 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8009112:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009116:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8009118:	e015      	b.n	8009146 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	3304      	adds	r3, #4
 800911e:	2100      	movs	r1, #0
 8009120:	4618      	mov	r0, r3
 8009122:	f001 ffb5 	bl	800b090 <RCCEx_PLL2_Config>
 8009126:	4603      	mov	r3, r0
 8009128:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800912a:	e00c      	b.n	8009146 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	3324      	adds	r3, #36	; 0x24
 8009130:	2100      	movs	r1, #0
 8009132:	4618      	mov	r0, r3
 8009134:	f002 f85e 	bl	800b1f4 <RCCEx_PLL3_Config>
 8009138:	4603      	mov	r3, r0
 800913a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800913c:	e003      	b.n	8009146 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800913e:	2301      	movs	r3, #1
 8009140:	75fb      	strb	r3, [r7, #23]
      break;
 8009142:	e000      	b.n	8009146 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8009144:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009146:	7dfb      	ldrb	r3, [r7, #23]
 8009148:	2b00      	cmp	r3, #0
 800914a:	d109      	bne.n	8009160 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800914c:	4b71      	ldr	r3, [pc, #452]	; (8009314 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800914e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009150:	f023 0207 	bic.w	r2, r3, #7
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009158:	496e      	ldr	r1, [pc, #440]	; (8009314 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800915a:	4313      	orrs	r3, r2
 800915c:	650b      	str	r3, [r1, #80]	; 0x50
 800915e:	e001      	b.n	8009164 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009160:	7dfb      	ldrb	r3, [r7, #23]
 8009162:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	681b      	ldr	r3, [r3, #0]
 8009168:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800916c:	2b00      	cmp	r3, #0
 800916e:	d042      	beq.n	80091f6 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009174:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009178:	d02b      	beq.n	80091d2 <HAL_RCCEx_PeriphCLKConfig+0x192>
 800917a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800917e:	d825      	bhi.n	80091cc <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8009180:	2bc0      	cmp	r3, #192	; 0xc0
 8009182:	d028      	beq.n	80091d6 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8009184:	2bc0      	cmp	r3, #192	; 0xc0
 8009186:	d821      	bhi.n	80091cc <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8009188:	2b80      	cmp	r3, #128	; 0x80
 800918a:	d016      	beq.n	80091ba <HAL_RCCEx_PeriphCLKConfig+0x17a>
 800918c:	2b80      	cmp	r3, #128	; 0x80
 800918e:	d81d      	bhi.n	80091cc <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8009190:	2b00      	cmp	r3, #0
 8009192:	d002      	beq.n	800919a <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8009194:	2b40      	cmp	r3, #64	; 0x40
 8009196:	d007      	beq.n	80091a8 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8009198:	e018      	b.n	80091cc <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800919a:	4b5e      	ldr	r3, [pc, #376]	; (8009314 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800919c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800919e:	4a5d      	ldr	r2, [pc, #372]	; (8009314 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80091a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80091a4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80091a6:	e017      	b.n	80091d8 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	3304      	adds	r3, #4
 80091ac:	2100      	movs	r1, #0
 80091ae:	4618      	mov	r0, r3
 80091b0:	f001 ff6e 	bl	800b090 <RCCEx_PLL2_Config>
 80091b4:	4603      	mov	r3, r0
 80091b6:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80091b8:	e00e      	b.n	80091d8 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	3324      	adds	r3, #36	; 0x24
 80091be:	2100      	movs	r1, #0
 80091c0:	4618      	mov	r0, r3
 80091c2:	f002 f817 	bl	800b1f4 <RCCEx_PLL3_Config>
 80091c6:	4603      	mov	r3, r0
 80091c8:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80091ca:	e005      	b.n	80091d8 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80091cc:	2301      	movs	r3, #1
 80091ce:	75fb      	strb	r3, [r7, #23]
      break;
 80091d0:	e002      	b.n	80091d8 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 80091d2:	bf00      	nop
 80091d4:	e000      	b.n	80091d8 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 80091d6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80091d8:	7dfb      	ldrb	r3, [r7, #23]
 80091da:	2b00      	cmp	r3, #0
 80091dc:	d109      	bne.n	80091f2 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80091de:	4b4d      	ldr	r3, [pc, #308]	; (8009314 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80091e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80091e2:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80091ea:	494a      	ldr	r1, [pc, #296]	; (8009314 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80091ec:	4313      	orrs	r3, r2
 80091ee:	650b      	str	r3, [r1, #80]	; 0x50
 80091f0:	e001      	b.n	80091f6 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80091f2:	7dfb      	ldrb	r3, [r7, #23]
 80091f4:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80091fe:	2b00      	cmp	r3, #0
 8009200:	d049      	beq.n	8009296 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8009208:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800920c:	d030      	beq.n	8009270 <HAL_RCCEx_PeriphCLKConfig+0x230>
 800920e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009212:	d82a      	bhi.n	800926a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8009214:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8009218:	d02c      	beq.n	8009274 <HAL_RCCEx_PeriphCLKConfig+0x234>
 800921a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800921e:	d824      	bhi.n	800926a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8009220:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009224:	d018      	beq.n	8009258 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8009226:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800922a:	d81e      	bhi.n	800926a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800922c:	2b00      	cmp	r3, #0
 800922e:	d003      	beq.n	8009238 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8009230:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009234:	d007      	beq.n	8009246 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8009236:	e018      	b.n	800926a <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009238:	4b36      	ldr	r3, [pc, #216]	; (8009314 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800923a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800923c:	4a35      	ldr	r2, [pc, #212]	; (8009314 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800923e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009242:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8009244:	e017      	b.n	8009276 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	3304      	adds	r3, #4
 800924a:	2100      	movs	r1, #0
 800924c:	4618      	mov	r0, r3
 800924e:	f001 ff1f 	bl	800b090 <RCCEx_PLL2_Config>
 8009252:	4603      	mov	r3, r0
 8009254:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8009256:	e00e      	b.n	8009276 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	3324      	adds	r3, #36	; 0x24
 800925c:	2100      	movs	r1, #0
 800925e:	4618      	mov	r0, r3
 8009260:	f001 ffc8 	bl	800b1f4 <RCCEx_PLL3_Config>
 8009264:	4603      	mov	r3, r0
 8009266:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8009268:	e005      	b.n	8009276 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800926a:	2301      	movs	r3, #1
 800926c:	75fb      	strb	r3, [r7, #23]
      break;
 800926e:	e002      	b.n	8009276 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8009270:	bf00      	nop
 8009272:	e000      	b.n	8009276 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8009274:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009276:	7dfb      	ldrb	r3, [r7, #23]
 8009278:	2b00      	cmp	r3, #0
 800927a:	d10a      	bne.n	8009292 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800927c:	4b25      	ldr	r3, [pc, #148]	; (8009314 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800927e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009280:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800928a:	4922      	ldr	r1, [pc, #136]	; (8009314 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800928c:	4313      	orrs	r3, r2
 800928e:	658b      	str	r3, [r1, #88]	; 0x58
 8009290:	e001      	b.n	8009296 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009292:	7dfb      	ldrb	r3, [r7, #23]
 8009294:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800929e:	2b00      	cmp	r3, #0
 80092a0:	d04b      	beq.n	800933a <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80092a8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80092ac:	d030      	beq.n	8009310 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 80092ae:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80092b2:	d82a      	bhi.n	800930a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80092b4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80092b8:	d02e      	beq.n	8009318 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 80092ba:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80092be:	d824      	bhi.n	800930a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80092c0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80092c4:	d018      	beq.n	80092f8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 80092c6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80092ca:	d81e      	bhi.n	800930a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80092cc:	2b00      	cmp	r3, #0
 80092ce:	d003      	beq.n	80092d8 <HAL_RCCEx_PeriphCLKConfig+0x298>
 80092d0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80092d4:	d007      	beq.n	80092e6 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 80092d6:	e018      	b.n	800930a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80092d8:	4b0e      	ldr	r3, [pc, #56]	; (8009314 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80092da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092dc:	4a0d      	ldr	r2, [pc, #52]	; (8009314 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80092de:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80092e2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80092e4:	e019      	b.n	800931a <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	3304      	adds	r3, #4
 80092ea:	2100      	movs	r1, #0
 80092ec:	4618      	mov	r0, r3
 80092ee:	f001 fecf 	bl	800b090 <RCCEx_PLL2_Config>
 80092f2:	4603      	mov	r3, r0
 80092f4:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80092f6:	e010      	b.n	800931a <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	3324      	adds	r3, #36	; 0x24
 80092fc:	2100      	movs	r1, #0
 80092fe:	4618      	mov	r0, r3
 8009300:	f001 ff78 	bl	800b1f4 <RCCEx_PLL3_Config>
 8009304:	4603      	mov	r3, r0
 8009306:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8009308:	e007      	b.n	800931a <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800930a:	2301      	movs	r3, #1
 800930c:	75fb      	strb	r3, [r7, #23]
      break;
 800930e:	e004      	b.n	800931a <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 8009310:	bf00      	nop
 8009312:	e002      	b.n	800931a <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8009314:	58024400 	.word	0x58024400
      break;
 8009318:	bf00      	nop
    }

    if(ret == HAL_OK)
 800931a:	7dfb      	ldrb	r3, [r7, #23]
 800931c:	2b00      	cmp	r3, #0
 800931e:	d10a      	bne.n	8009336 <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8009320:	4b99      	ldr	r3, [pc, #612]	; (8009588 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8009322:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009324:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800932e:	4996      	ldr	r1, [pc, #600]	; (8009588 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8009330:	4313      	orrs	r3, r2
 8009332:	658b      	str	r3, [r1, #88]	; 0x58
 8009334:	e001      	b.n	800933a <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009336:	7dfb      	ldrb	r3, [r7, #23]
 8009338:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	681b      	ldr	r3, [r3, #0]
 800933e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009342:	2b00      	cmp	r3, #0
 8009344:	d032      	beq.n	80093ac <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800934a:	2b30      	cmp	r3, #48	; 0x30
 800934c:	d01c      	beq.n	8009388 <HAL_RCCEx_PeriphCLKConfig+0x348>
 800934e:	2b30      	cmp	r3, #48	; 0x30
 8009350:	d817      	bhi.n	8009382 <HAL_RCCEx_PeriphCLKConfig+0x342>
 8009352:	2b20      	cmp	r3, #32
 8009354:	d00c      	beq.n	8009370 <HAL_RCCEx_PeriphCLKConfig+0x330>
 8009356:	2b20      	cmp	r3, #32
 8009358:	d813      	bhi.n	8009382 <HAL_RCCEx_PeriphCLKConfig+0x342>
 800935a:	2b00      	cmp	r3, #0
 800935c:	d016      	beq.n	800938c <HAL_RCCEx_PeriphCLKConfig+0x34c>
 800935e:	2b10      	cmp	r3, #16
 8009360:	d10f      	bne.n	8009382 <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009362:	4b89      	ldr	r3, [pc, #548]	; (8009588 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8009364:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009366:	4a88      	ldr	r2, [pc, #544]	; (8009588 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8009368:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800936c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800936e:	e00e      	b.n	800938e <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	3304      	adds	r3, #4
 8009374:	2102      	movs	r1, #2
 8009376:	4618      	mov	r0, r3
 8009378:	f001 fe8a 	bl	800b090 <RCCEx_PLL2_Config>
 800937c:	4603      	mov	r3, r0
 800937e:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8009380:	e005      	b.n	800938e <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8009382:	2301      	movs	r3, #1
 8009384:	75fb      	strb	r3, [r7, #23]
      break;
 8009386:	e002      	b.n	800938e <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8009388:	bf00      	nop
 800938a:	e000      	b.n	800938e <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 800938c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800938e:	7dfb      	ldrb	r3, [r7, #23]
 8009390:	2b00      	cmp	r3, #0
 8009392:	d109      	bne.n	80093a8 <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8009394:	4b7c      	ldr	r3, [pc, #496]	; (8009588 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8009396:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009398:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80093a0:	4979      	ldr	r1, [pc, #484]	; (8009588 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80093a2:	4313      	orrs	r3, r2
 80093a4:	64cb      	str	r3, [r1, #76]	; 0x4c
 80093a6:	e001      	b.n	80093ac <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80093a8:	7dfb      	ldrb	r3, [r7, #23]
 80093aa:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80093b4:	2b00      	cmp	r3, #0
 80093b6:	d047      	beq.n	8009448 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80093bc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80093c0:	d030      	beq.n	8009424 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 80093c2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80093c6:	d82a      	bhi.n	800941e <HAL_RCCEx_PeriphCLKConfig+0x3de>
 80093c8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80093cc:	d02c      	beq.n	8009428 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 80093ce:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80093d2:	d824      	bhi.n	800941e <HAL_RCCEx_PeriphCLKConfig+0x3de>
 80093d4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80093d8:	d018      	beq.n	800940c <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 80093da:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80093de:	d81e      	bhi.n	800941e <HAL_RCCEx_PeriphCLKConfig+0x3de>
 80093e0:	2b00      	cmp	r3, #0
 80093e2:	d003      	beq.n	80093ec <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 80093e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80093e8:	d007      	beq.n	80093fa <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 80093ea:	e018      	b.n	800941e <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80093ec:	4b66      	ldr	r3, [pc, #408]	; (8009588 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80093ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093f0:	4a65      	ldr	r2, [pc, #404]	; (8009588 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80093f2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80093f6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80093f8:	e017      	b.n	800942a <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	3304      	adds	r3, #4
 80093fe:	2100      	movs	r1, #0
 8009400:	4618      	mov	r0, r3
 8009402:	f001 fe45 	bl	800b090 <RCCEx_PLL2_Config>
 8009406:	4603      	mov	r3, r0
 8009408:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800940a:	e00e      	b.n	800942a <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	3324      	adds	r3, #36	; 0x24
 8009410:	2100      	movs	r1, #0
 8009412:	4618      	mov	r0, r3
 8009414:	f001 feee 	bl	800b1f4 <RCCEx_PLL3_Config>
 8009418:	4603      	mov	r3, r0
 800941a:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800941c:	e005      	b.n	800942a <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800941e:	2301      	movs	r3, #1
 8009420:	75fb      	strb	r3, [r7, #23]
      break;
 8009422:	e002      	b.n	800942a <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8009424:	bf00      	nop
 8009426:	e000      	b.n	800942a <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8009428:	bf00      	nop
    }

    if(ret == HAL_OK)
 800942a:	7dfb      	ldrb	r3, [r7, #23]
 800942c:	2b00      	cmp	r3, #0
 800942e:	d109      	bne.n	8009444 <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8009430:	4b55      	ldr	r3, [pc, #340]	; (8009588 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8009432:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009434:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800943c:	4952      	ldr	r1, [pc, #328]	; (8009588 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800943e:	4313      	orrs	r3, r2
 8009440:	650b      	str	r3, [r1, #80]	; 0x50
 8009442:	e001      	b.n	8009448 <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009444:	7dfb      	ldrb	r3, [r7, #23]
 8009446:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009450:	2b00      	cmp	r3, #0
 8009452:	d049      	beq.n	80094e8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009458:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800945c:	d02e      	beq.n	80094bc <HAL_RCCEx_PeriphCLKConfig+0x47c>
 800945e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009462:	d828      	bhi.n	80094b6 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8009464:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8009468:	d02a      	beq.n	80094c0 <HAL_RCCEx_PeriphCLKConfig+0x480>
 800946a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800946e:	d822      	bhi.n	80094b6 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8009470:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8009474:	d026      	beq.n	80094c4 <HAL_RCCEx_PeriphCLKConfig+0x484>
 8009476:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800947a:	d81c      	bhi.n	80094b6 <HAL_RCCEx_PeriphCLKConfig+0x476>
 800947c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009480:	d010      	beq.n	80094a4 <HAL_RCCEx_PeriphCLKConfig+0x464>
 8009482:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009486:	d816      	bhi.n	80094b6 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8009488:	2b00      	cmp	r3, #0
 800948a:	d01d      	beq.n	80094c8 <HAL_RCCEx_PeriphCLKConfig+0x488>
 800948c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009490:	d111      	bne.n	80094b6 <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	3304      	adds	r3, #4
 8009496:	2101      	movs	r1, #1
 8009498:	4618      	mov	r0, r3
 800949a:	f001 fdf9 	bl	800b090 <RCCEx_PLL2_Config>
 800949e:	4603      	mov	r3, r0
 80094a0:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80094a2:	e012      	b.n	80094ca <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	3324      	adds	r3, #36	; 0x24
 80094a8:	2101      	movs	r1, #1
 80094aa:	4618      	mov	r0, r3
 80094ac:	f001 fea2 	bl	800b1f4 <RCCEx_PLL3_Config>
 80094b0:	4603      	mov	r3, r0
 80094b2:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80094b4:	e009      	b.n	80094ca <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80094b6:	2301      	movs	r3, #1
 80094b8:	75fb      	strb	r3, [r7, #23]
      break;
 80094ba:	e006      	b.n	80094ca <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 80094bc:	bf00      	nop
 80094be:	e004      	b.n	80094ca <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 80094c0:	bf00      	nop
 80094c2:	e002      	b.n	80094ca <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 80094c4:	bf00      	nop
 80094c6:	e000      	b.n	80094ca <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 80094c8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80094ca:	7dfb      	ldrb	r3, [r7, #23]
 80094cc:	2b00      	cmp	r3, #0
 80094ce:	d109      	bne.n	80094e4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80094d0:	4b2d      	ldr	r3, [pc, #180]	; (8009588 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80094d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80094d4:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80094dc:	492a      	ldr	r1, [pc, #168]	; (8009588 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80094de:	4313      	orrs	r3, r2
 80094e0:	650b      	str	r3, [r1, #80]	; 0x50
 80094e2:	e001      	b.n	80094e8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80094e4:	7dfb      	ldrb	r3, [r7, #23]
 80094e6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	681b      	ldr	r3, [r3, #0]
 80094ec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80094f0:	2b00      	cmp	r3, #0
 80094f2:	d04d      	beq.n	8009590 <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80094fa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80094fe:	d02e      	beq.n	800955e <HAL_RCCEx_PeriphCLKConfig+0x51e>
 8009500:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009504:	d828      	bhi.n	8009558 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8009506:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800950a:	d02a      	beq.n	8009562 <HAL_RCCEx_PeriphCLKConfig+0x522>
 800950c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009510:	d822      	bhi.n	8009558 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8009512:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009516:	d026      	beq.n	8009566 <HAL_RCCEx_PeriphCLKConfig+0x526>
 8009518:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800951c:	d81c      	bhi.n	8009558 <HAL_RCCEx_PeriphCLKConfig+0x518>
 800951e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009522:	d010      	beq.n	8009546 <HAL_RCCEx_PeriphCLKConfig+0x506>
 8009524:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009528:	d816      	bhi.n	8009558 <HAL_RCCEx_PeriphCLKConfig+0x518>
 800952a:	2b00      	cmp	r3, #0
 800952c:	d01d      	beq.n	800956a <HAL_RCCEx_PeriphCLKConfig+0x52a>
 800952e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009532:	d111      	bne.n	8009558 <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	3304      	adds	r3, #4
 8009538:	2101      	movs	r1, #1
 800953a:	4618      	mov	r0, r3
 800953c:	f001 fda8 	bl	800b090 <RCCEx_PLL2_Config>
 8009540:	4603      	mov	r3, r0
 8009542:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8009544:	e012      	b.n	800956c <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	3324      	adds	r3, #36	; 0x24
 800954a:	2101      	movs	r1, #1
 800954c:	4618      	mov	r0, r3
 800954e:	f001 fe51 	bl	800b1f4 <RCCEx_PLL3_Config>
 8009552:	4603      	mov	r3, r0
 8009554:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8009556:	e009      	b.n	800956c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8009558:	2301      	movs	r3, #1
 800955a:	75fb      	strb	r3, [r7, #23]
      break;
 800955c:	e006      	b.n	800956c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800955e:	bf00      	nop
 8009560:	e004      	b.n	800956c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8009562:	bf00      	nop
 8009564:	e002      	b.n	800956c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8009566:	bf00      	nop
 8009568:	e000      	b.n	800956c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800956a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800956c:	7dfb      	ldrb	r3, [r7, #23]
 800956e:	2b00      	cmp	r3, #0
 8009570:	d10c      	bne.n	800958c <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8009572:	4b05      	ldr	r3, [pc, #20]	; (8009588 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8009574:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009576:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8009580:	4901      	ldr	r1, [pc, #4]	; (8009588 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8009582:	4313      	orrs	r3, r2
 8009584:	658b      	str	r3, [r1, #88]	; 0x58
 8009586:	e003      	b.n	8009590 <HAL_RCCEx_PeriphCLKConfig+0x550>
 8009588:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800958c:	7dfb      	ldrb	r3, [r7, #23]
 800958e:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	681b      	ldr	r3, [r3, #0]
 8009594:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009598:	2b00      	cmp	r3, #0
 800959a:	d02f      	beq.n	80095fc <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80095a0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80095a4:	d00e      	beq.n	80095c4 <HAL_RCCEx_PeriphCLKConfig+0x584>
 80095a6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80095aa:	d814      	bhi.n	80095d6 <HAL_RCCEx_PeriphCLKConfig+0x596>
 80095ac:	2b00      	cmp	r3, #0
 80095ae:	d015      	beq.n	80095dc <HAL_RCCEx_PeriphCLKConfig+0x59c>
 80095b0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80095b4:	d10f      	bne.n	80095d6 <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80095b6:	4baf      	ldr	r3, [pc, #700]	; (8009874 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80095b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095ba:	4aae      	ldr	r2, [pc, #696]	; (8009874 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80095bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80095c0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80095c2:	e00c      	b.n	80095de <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	3304      	adds	r3, #4
 80095c8:	2101      	movs	r1, #1
 80095ca:	4618      	mov	r0, r3
 80095cc:	f001 fd60 	bl	800b090 <RCCEx_PLL2_Config>
 80095d0:	4603      	mov	r3, r0
 80095d2:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80095d4:	e003      	b.n	80095de <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80095d6:	2301      	movs	r3, #1
 80095d8:	75fb      	strb	r3, [r7, #23]
      break;
 80095da:	e000      	b.n	80095de <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 80095dc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80095de:	7dfb      	ldrb	r3, [r7, #23]
 80095e0:	2b00      	cmp	r3, #0
 80095e2:	d109      	bne.n	80095f8 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80095e4:	4ba3      	ldr	r3, [pc, #652]	; (8009874 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80095e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80095e8:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80095f0:	49a0      	ldr	r1, [pc, #640]	; (8009874 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80095f2:	4313      	orrs	r3, r2
 80095f4:	650b      	str	r3, [r1, #80]	; 0x50
 80095f6:	e001      	b.n	80095fc <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80095f8:	7dfb      	ldrb	r3, [r7, #23]
 80095fa:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	681b      	ldr	r3, [r3, #0]
 8009600:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009604:	2b00      	cmp	r3, #0
 8009606:	d032      	beq.n	800966e <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800960c:	2b03      	cmp	r3, #3
 800960e:	d81b      	bhi.n	8009648 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8009610:	a201      	add	r2, pc, #4	; (adr r2, 8009618 <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 8009612:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009616:	bf00      	nop
 8009618:	0800964f 	.word	0x0800964f
 800961c:	08009629 	.word	0x08009629
 8009620:	08009637 	.word	0x08009637
 8009624:	0800964f 	.word	0x0800964f
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009628:	4b92      	ldr	r3, [pc, #584]	; (8009874 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800962a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800962c:	4a91      	ldr	r2, [pc, #580]	; (8009874 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800962e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009632:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8009634:	e00c      	b.n	8009650 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	3304      	adds	r3, #4
 800963a:	2102      	movs	r1, #2
 800963c:	4618      	mov	r0, r3
 800963e:	f001 fd27 	bl	800b090 <RCCEx_PLL2_Config>
 8009642:	4603      	mov	r3, r0
 8009644:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8009646:	e003      	b.n	8009650 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8009648:	2301      	movs	r3, #1
 800964a:	75fb      	strb	r3, [r7, #23]
      break;
 800964c:	e000      	b.n	8009650 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 800964e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009650:	7dfb      	ldrb	r3, [r7, #23]
 8009652:	2b00      	cmp	r3, #0
 8009654:	d109      	bne.n	800966a <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8009656:	4b87      	ldr	r3, [pc, #540]	; (8009874 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009658:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800965a:	f023 0203 	bic.w	r2, r3, #3
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009662:	4984      	ldr	r1, [pc, #528]	; (8009874 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009664:	4313      	orrs	r3, r2
 8009666:	64cb      	str	r3, [r1, #76]	; 0x4c
 8009668:	e001      	b.n	800966e <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800966a:	7dfb      	ldrb	r3, [r7, #23]
 800966c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	681b      	ldr	r3, [r3, #0]
 8009672:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009676:	2b00      	cmp	r3, #0
 8009678:	f000 8086 	beq.w	8009788 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800967c:	4b7e      	ldr	r3, [pc, #504]	; (8009878 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	4a7d      	ldr	r2, [pc, #500]	; (8009878 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8009682:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009686:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8009688:	f7fa fea6 	bl	80043d8 <HAL_GetTick>
 800968c:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800968e:	e009      	b.n	80096a4 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009690:	f7fa fea2 	bl	80043d8 <HAL_GetTick>
 8009694:	4602      	mov	r2, r0
 8009696:	693b      	ldr	r3, [r7, #16]
 8009698:	1ad3      	subs	r3, r2, r3
 800969a:	2b64      	cmp	r3, #100	; 0x64
 800969c:	d902      	bls.n	80096a4 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 800969e:	2303      	movs	r3, #3
 80096a0:	75fb      	strb	r3, [r7, #23]
        break;
 80096a2:	e005      	b.n	80096b0 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80096a4:	4b74      	ldr	r3, [pc, #464]	; (8009878 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 80096a6:	681b      	ldr	r3, [r3, #0]
 80096a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80096ac:	2b00      	cmp	r3, #0
 80096ae:	d0ef      	beq.n	8009690 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 80096b0:	7dfb      	ldrb	r3, [r7, #23]
 80096b2:	2b00      	cmp	r3, #0
 80096b4:	d166      	bne.n	8009784 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80096b6:	4b6f      	ldr	r3, [pc, #444]	; (8009874 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80096b8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80096c0:	4053      	eors	r3, r2
 80096c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	d013      	beq.n	80096f2 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80096ca:	4b6a      	ldr	r3, [pc, #424]	; (8009874 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80096cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80096ce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80096d2:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80096d4:	4b67      	ldr	r3, [pc, #412]	; (8009874 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80096d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80096d8:	4a66      	ldr	r2, [pc, #408]	; (8009874 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80096da:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80096de:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80096e0:	4b64      	ldr	r3, [pc, #400]	; (8009874 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80096e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80096e4:	4a63      	ldr	r2, [pc, #396]	; (8009874 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80096e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80096ea:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80096ec:	4a61      	ldr	r2, [pc, #388]	; (8009874 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80096ee:	68fb      	ldr	r3, [r7, #12]
 80096f0:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80096f8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80096fc:	d115      	bne.n	800972a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80096fe:	f7fa fe6b 	bl	80043d8 <HAL_GetTick>
 8009702:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009704:	e00b      	b.n	800971e <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009706:	f7fa fe67 	bl	80043d8 <HAL_GetTick>
 800970a:	4602      	mov	r2, r0
 800970c:	693b      	ldr	r3, [r7, #16]
 800970e:	1ad3      	subs	r3, r2, r3
 8009710:	f241 3288 	movw	r2, #5000	; 0x1388
 8009714:	4293      	cmp	r3, r2
 8009716:	d902      	bls.n	800971e <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8009718:	2303      	movs	r3, #3
 800971a:	75fb      	strb	r3, [r7, #23]
            break;
 800971c:	e005      	b.n	800972a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800971e:	4b55      	ldr	r3, [pc, #340]	; (8009874 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009720:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009722:	f003 0302 	and.w	r3, r3, #2
 8009726:	2b00      	cmp	r3, #0
 8009728:	d0ed      	beq.n	8009706 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 800972a:	7dfb      	ldrb	r3, [r7, #23]
 800972c:	2b00      	cmp	r3, #0
 800972e:	d126      	bne.n	800977e <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8009736:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800973a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800973e:	d10d      	bne.n	800975c <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8009740:	4b4c      	ldr	r3, [pc, #304]	; (8009874 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009742:	691b      	ldr	r3, [r3, #16]
 8009744:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800974e:	0919      	lsrs	r1, r3, #4
 8009750:	4b4a      	ldr	r3, [pc, #296]	; (800987c <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 8009752:	400b      	ands	r3, r1
 8009754:	4947      	ldr	r1, [pc, #284]	; (8009874 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009756:	4313      	orrs	r3, r2
 8009758:	610b      	str	r3, [r1, #16]
 800975a:	e005      	b.n	8009768 <HAL_RCCEx_PeriphCLKConfig+0x728>
 800975c:	4b45      	ldr	r3, [pc, #276]	; (8009874 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800975e:	691b      	ldr	r3, [r3, #16]
 8009760:	4a44      	ldr	r2, [pc, #272]	; (8009874 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009762:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8009766:	6113      	str	r3, [r2, #16]
 8009768:	4b42      	ldr	r3, [pc, #264]	; (8009874 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800976a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8009772:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009776:	493f      	ldr	r1, [pc, #252]	; (8009874 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009778:	4313      	orrs	r3, r2
 800977a:	670b      	str	r3, [r1, #112]	; 0x70
 800977c:	e004      	b.n	8009788 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800977e:	7dfb      	ldrb	r3, [r7, #23]
 8009780:	75bb      	strb	r3, [r7, #22]
 8009782:	e001      	b.n	8009788 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009784:	7dfb      	ldrb	r3, [r7, #23]
 8009786:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	681b      	ldr	r3, [r3, #0]
 800978c:	f003 0301 	and.w	r3, r3, #1
 8009790:	2b00      	cmp	r3, #0
 8009792:	f000 8085 	beq.w	80098a0 <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800979a:	2b28      	cmp	r3, #40	; 0x28
 800979c:	d866      	bhi.n	800986c <HAL_RCCEx_PeriphCLKConfig+0x82c>
 800979e:	a201      	add	r2, pc, #4	; (adr r2, 80097a4 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 80097a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80097a4:	08009881 	.word	0x08009881
 80097a8:	0800986d 	.word	0x0800986d
 80097ac:	0800986d 	.word	0x0800986d
 80097b0:	0800986d 	.word	0x0800986d
 80097b4:	0800986d 	.word	0x0800986d
 80097b8:	0800986d 	.word	0x0800986d
 80097bc:	0800986d 	.word	0x0800986d
 80097c0:	0800986d 	.word	0x0800986d
 80097c4:	08009849 	.word	0x08009849
 80097c8:	0800986d 	.word	0x0800986d
 80097cc:	0800986d 	.word	0x0800986d
 80097d0:	0800986d 	.word	0x0800986d
 80097d4:	0800986d 	.word	0x0800986d
 80097d8:	0800986d 	.word	0x0800986d
 80097dc:	0800986d 	.word	0x0800986d
 80097e0:	0800986d 	.word	0x0800986d
 80097e4:	0800985b 	.word	0x0800985b
 80097e8:	0800986d 	.word	0x0800986d
 80097ec:	0800986d 	.word	0x0800986d
 80097f0:	0800986d 	.word	0x0800986d
 80097f4:	0800986d 	.word	0x0800986d
 80097f8:	0800986d 	.word	0x0800986d
 80097fc:	0800986d 	.word	0x0800986d
 8009800:	0800986d 	.word	0x0800986d
 8009804:	08009881 	.word	0x08009881
 8009808:	0800986d 	.word	0x0800986d
 800980c:	0800986d 	.word	0x0800986d
 8009810:	0800986d 	.word	0x0800986d
 8009814:	0800986d 	.word	0x0800986d
 8009818:	0800986d 	.word	0x0800986d
 800981c:	0800986d 	.word	0x0800986d
 8009820:	0800986d 	.word	0x0800986d
 8009824:	08009881 	.word	0x08009881
 8009828:	0800986d 	.word	0x0800986d
 800982c:	0800986d 	.word	0x0800986d
 8009830:	0800986d 	.word	0x0800986d
 8009834:	0800986d 	.word	0x0800986d
 8009838:	0800986d 	.word	0x0800986d
 800983c:	0800986d 	.word	0x0800986d
 8009840:	0800986d 	.word	0x0800986d
 8009844:	08009881 	.word	0x08009881
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	3304      	adds	r3, #4
 800984c:	2101      	movs	r1, #1
 800984e:	4618      	mov	r0, r3
 8009850:	f001 fc1e 	bl	800b090 <RCCEx_PLL2_Config>
 8009854:	4603      	mov	r3, r0
 8009856:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8009858:	e013      	b.n	8009882 <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	3324      	adds	r3, #36	; 0x24
 800985e:	2101      	movs	r1, #1
 8009860:	4618      	mov	r0, r3
 8009862:	f001 fcc7 	bl	800b1f4 <RCCEx_PLL3_Config>
 8009866:	4603      	mov	r3, r0
 8009868:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800986a:	e00a      	b.n	8009882 <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800986c:	2301      	movs	r3, #1
 800986e:	75fb      	strb	r3, [r7, #23]
      break;
 8009870:	e007      	b.n	8009882 <HAL_RCCEx_PeriphCLKConfig+0x842>
 8009872:	bf00      	nop
 8009874:	58024400 	.word	0x58024400
 8009878:	58024800 	.word	0x58024800
 800987c:	00ffffcf 	.word	0x00ffffcf
      break;
 8009880:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009882:	7dfb      	ldrb	r3, [r7, #23]
 8009884:	2b00      	cmp	r3, #0
 8009886:	d109      	bne.n	800989c <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8009888:	4b96      	ldr	r3, [pc, #600]	; (8009ae4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800988a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800988c:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009894:	4993      	ldr	r1, [pc, #588]	; (8009ae4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8009896:	4313      	orrs	r3, r2
 8009898:	654b      	str	r3, [r1, #84]	; 0x54
 800989a:	e001      	b.n	80098a0 <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800989c:	7dfb      	ldrb	r3, [r7, #23]
 800989e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	681b      	ldr	r3, [r3, #0]
 80098a4:	f003 0302 	and.w	r3, r3, #2
 80098a8:	2b00      	cmp	r3, #0
 80098aa:	d038      	beq.n	800991e <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80098b0:	2b05      	cmp	r3, #5
 80098b2:	d821      	bhi.n	80098f8 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 80098b4:	a201      	add	r2, pc, #4	; (adr r2, 80098bc <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 80098b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80098ba:	bf00      	nop
 80098bc:	080098ff 	.word	0x080098ff
 80098c0:	080098d5 	.word	0x080098d5
 80098c4:	080098e7 	.word	0x080098e7
 80098c8:	080098ff 	.word	0x080098ff
 80098cc:	080098ff 	.word	0x080098ff
 80098d0:	080098ff 	.word	0x080098ff
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	3304      	adds	r3, #4
 80098d8:	2101      	movs	r1, #1
 80098da:	4618      	mov	r0, r3
 80098dc:	f001 fbd8 	bl	800b090 <RCCEx_PLL2_Config>
 80098e0:	4603      	mov	r3, r0
 80098e2:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80098e4:	e00c      	b.n	8009900 <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	3324      	adds	r3, #36	; 0x24
 80098ea:	2101      	movs	r1, #1
 80098ec:	4618      	mov	r0, r3
 80098ee:	f001 fc81 	bl	800b1f4 <RCCEx_PLL3_Config>
 80098f2:	4603      	mov	r3, r0
 80098f4:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80098f6:	e003      	b.n	8009900 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80098f8:	2301      	movs	r3, #1
 80098fa:	75fb      	strb	r3, [r7, #23]
      break;
 80098fc:	e000      	b.n	8009900 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 80098fe:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009900:	7dfb      	ldrb	r3, [r7, #23]
 8009902:	2b00      	cmp	r3, #0
 8009904:	d109      	bne.n	800991a <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8009906:	4b77      	ldr	r3, [pc, #476]	; (8009ae4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8009908:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800990a:	f023 0207 	bic.w	r2, r3, #7
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009912:	4974      	ldr	r1, [pc, #464]	; (8009ae4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8009914:	4313      	orrs	r3, r2
 8009916:	654b      	str	r3, [r1, #84]	; 0x54
 8009918:	e001      	b.n	800991e <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800991a:	7dfb      	ldrb	r3, [r7, #23]
 800991c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	681b      	ldr	r3, [r3, #0]
 8009922:	f003 0304 	and.w	r3, r3, #4
 8009926:	2b00      	cmp	r3, #0
 8009928:	d03a      	beq.n	80099a0 <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009930:	2b05      	cmp	r3, #5
 8009932:	d821      	bhi.n	8009978 <HAL_RCCEx_PeriphCLKConfig+0x938>
 8009934:	a201      	add	r2, pc, #4	; (adr r2, 800993c <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 8009936:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800993a:	bf00      	nop
 800993c:	0800997f 	.word	0x0800997f
 8009940:	08009955 	.word	0x08009955
 8009944:	08009967 	.word	0x08009967
 8009948:	0800997f 	.word	0x0800997f
 800994c:	0800997f 	.word	0x0800997f
 8009950:	0800997f 	.word	0x0800997f
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	3304      	adds	r3, #4
 8009958:	2101      	movs	r1, #1
 800995a:	4618      	mov	r0, r3
 800995c:	f001 fb98 	bl	800b090 <RCCEx_PLL2_Config>
 8009960:	4603      	mov	r3, r0
 8009962:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8009964:	e00c      	b.n	8009980 <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	3324      	adds	r3, #36	; 0x24
 800996a:	2101      	movs	r1, #1
 800996c:	4618      	mov	r0, r3
 800996e:	f001 fc41 	bl	800b1f4 <RCCEx_PLL3_Config>
 8009972:	4603      	mov	r3, r0
 8009974:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8009976:	e003      	b.n	8009980 <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009978:	2301      	movs	r3, #1
 800997a:	75fb      	strb	r3, [r7, #23]
      break;
 800997c:	e000      	b.n	8009980 <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 800997e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009980:	7dfb      	ldrb	r3, [r7, #23]
 8009982:	2b00      	cmp	r3, #0
 8009984:	d10a      	bne.n	800999c <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8009986:	4b57      	ldr	r3, [pc, #348]	; (8009ae4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8009988:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800998a:	f023 0207 	bic.w	r2, r3, #7
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009994:	4953      	ldr	r1, [pc, #332]	; (8009ae4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8009996:	4313      	orrs	r3, r2
 8009998:	658b      	str	r3, [r1, #88]	; 0x58
 800999a:	e001      	b.n	80099a0 <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800999c:	7dfb      	ldrb	r3, [r7, #23]
 800999e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	681b      	ldr	r3, [r3, #0]
 80099a4:	f003 0320 	and.w	r3, r3, #32
 80099a8:	2b00      	cmp	r3, #0
 80099aa:	d04b      	beq.n	8009a44 <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80099b2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80099b6:	d02e      	beq.n	8009a16 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 80099b8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80099bc:	d828      	bhi.n	8009a10 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 80099be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80099c2:	d02a      	beq.n	8009a1a <HAL_RCCEx_PeriphCLKConfig+0x9da>
 80099c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80099c8:	d822      	bhi.n	8009a10 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 80099ca:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80099ce:	d026      	beq.n	8009a1e <HAL_RCCEx_PeriphCLKConfig+0x9de>
 80099d0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80099d4:	d81c      	bhi.n	8009a10 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 80099d6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80099da:	d010      	beq.n	80099fe <HAL_RCCEx_PeriphCLKConfig+0x9be>
 80099dc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80099e0:	d816      	bhi.n	8009a10 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 80099e2:	2b00      	cmp	r3, #0
 80099e4:	d01d      	beq.n	8009a22 <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 80099e6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80099ea:	d111      	bne.n	8009a10 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	3304      	adds	r3, #4
 80099f0:	2100      	movs	r1, #0
 80099f2:	4618      	mov	r0, r3
 80099f4:	f001 fb4c 	bl	800b090 <RCCEx_PLL2_Config>
 80099f8:	4603      	mov	r3, r0
 80099fa:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80099fc:	e012      	b.n	8009a24 <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	3324      	adds	r3, #36	; 0x24
 8009a02:	2102      	movs	r1, #2
 8009a04:	4618      	mov	r0, r3
 8009a06:	f001 fbf5 	bl	800b1f4 <RCCEx_PLL3_Config>
 8009a0a:	4603      	mov	r3, r0
 8009a0c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8009a0e:	e009      	b.n	8009a24 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009a10:	2301      	movs	r3, #1
 8009a12:	75fb      	strb	r3, [r7, #23]
      break;
 8009a14:	e006      	b.n	8009a24 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8009a16:	bf00      	nop
 8009a18:	e004      	b.n	8009a24 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8009a1a:	bf00      	nop
 8009a1c:	e002      	b.n	8009a24 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8009a1e:	bf00      	nop
 8009a20:	e000      	b.n	8009a24 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8009a22:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009a24:	7dfb      	ldrb	r3, [r7, #23]
 8009a26:	2b00      	cmp	r3, #0
 8009a28:	d10a      	bne.n	8009a40 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8009a2a:	4b2e      	ldr	r3, [pc, #184]	; (8009ae4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8009a2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009a2e:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009a38:	492a      	ldr	r1, [pc, #168]	; (8009ae4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8009a3a:	4313      	orrs	r3, r2
 8009a3c:	654b      	str	r3, [r1, #84]	; 0x54
 8009a3e:	e001      	b.n	8009a44 <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009a40:	7dfb      	ldrb	r3, [r7, #23]
 8009a42:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	681b      	ldr	r3, [r3, #0]
 8009a48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009a4c:	2b00      	cmp	r3, #0
 8009a4e:	d04d      	beq.n	8009aec <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009a56:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8009a5a:	d02e      	beq.n	8009aba <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8009a5c:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8009a60:	d828      	bhi.n	8009ab4 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8009a62:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009a66:	d02a      	beq.n	8009abe <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8009a68:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009a6c:	d822      	bhi.n	8009ab4 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8009a6e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009a72:	d026      	beq.n	8009ac2 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8009a74:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009a78:	d81c      	bhi.n	8009ab4 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8009a7a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009a7e:	d010      	beq.n	8009aa2 <HAL_RCCEx_PeriphCLKConfig+0xa62>
 8009a80:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009a84:	d816      	bhi.n	8009ab4 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8009a86:	2b00      	cmp	r3, #0
 8009a88:	d01d      	beq.n	8009ac6 <HAL_RCCEx_PeriphCLKConfig+0xa86>
 8009a8a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009a8e:	d111      	bne.n	8009ab4 <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	3304      	adds	r3, #4
 8009a94:	2100      	movs	r1, #0
 8009a96:	4618      	mov	r0, r3
 8009a98:	f001 fafa 	bl	800b090 <RCCEx_PLL2_Config>
 8009a9c:	4603      	mov	r3, r0
 8009a9e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8009aa0:	e012      	b.n	8009ac8 <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	3324      	adds	r3, #36	; 0x24
 8009aa6:	2102      	movs	r1, #2
 8009aa8:	4618      	mov	r0, r3
 8009aaa:	f001 fba3 	bl	800b1f4 <RCCEx_PLL3_Config>
 8009aae:	4603      	mov	r3, r0
 8009ab0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8009ab2:	e009      	b.n	8009ac8 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009ab4:	2301      	movs	r3, #1
 8009ab6:	75fb      	strb	r3, [r7, #23]
      break;
 8009ab8:	e006      	b.n	8009ac8 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8009aba:	bf00      	nop
 8009abc:	e004      	b.n	8009ac8 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8009abe:	bf00      	nop
 8009ac0:	e002      	b.n	8009ac8 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8009ac2:	bf00      	nop
 8009ac4:	e000      	b.n	8009ac8 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8009ac6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009ac8:	7dfb      	ldrb	r3, [r7, #23]
 8009aca:	2b00      	cmp	r3, #0
 8009acc:	d10c      	bne.n	8009ae8 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8009ace:	4b05      	ldr	r3, [pc, #20]	; (8009ae4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8009ad0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009ad2:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009adc:	4901      	ldr	r1, [pc, #4]	; (8009ae4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8009ade:	4313      	orrs	r3, r2
 8009ae0:	658b      	str	r3, [r1, #88]	; 0x58
 8009ae2:	e003      	b.n	8009aec <HAL_RCCEx_PeriphCLKConfig+0xaac>
 8009ae4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009ae8:	7dfb      	ldrb	r3, [r7, #23]
 8009aea:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	681b      	ldr	r3, [r3, #0]
 8009af0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009af4:	2b00      	cmp	r3, #0
 8009af6:	d04b      	beq.n	8009b90 <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009afe:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8009b02:	d02e      	beq.n	8009b62 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8009b04:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8009b08:	d828      	bhi.n	8009b5c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8009b0a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009b0e:	d02a      	beq.n	8009b66 <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8009b10:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009b14:	d822      	bhi.n	8009b5c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8009b16:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8009b1a:	d026      	beq.n	8009b6a <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 8009b1c:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8009b20:	d81c      	bhi.n	8009b5c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8009b22:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009b26:	d010      	beq.n	8009b4a <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 8009b28:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009b2c:	d816      	bhi.n	8009b5c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8009b2e:	2b00      	cmp	r3, #0
 8009b30:	d01d      	beq.n	8009b6e <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 8009b32:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009b36:	d111      	bne.n	8009b5c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	3304      	adds	r3, #4
 8009b3c:	2100      	movs	r1, #0
 8009b3e:	4618      	mov	r0, r3
 8009b40:	f001 faa6 	bl	800b090 <RCCEx_PLL2_Config>
 8009b44:	4603      	mov	r3, r0
 8009b46:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8009b48:	e012      	b.n	8009b70 <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	3324      	adds	r3, #36	; 0x24
 8009b4e:	2102      	movs	r1, #2
 8009b50:	4618      	mov	r0, r3
 8009b52:	f001 fb4f 	bl	800b1f4 <RCCEx_PLL3_Config>
 8009b56:	4603      	mov	r3, r0
 8009b58:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8009b5a:	e009      	b.n	8009b70 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009b5c:	2301      	movs	r3, #1
 8009b5e:	75fb      	strb	r3, [r7, #23]
      break;
 8009b60:	e006      	b.n	8009b70 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8009b62:	bf00      	nop
 8009b64:	e004      	b.n	8009b70 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8009b66:	bf00      	nop
 8009b68:	e002      	b.n	8009b70 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8009b6a:	bf00      	nop
 8009b6c:	e000      	b.n	8009b70 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8009b6e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009b70:	7dfb      	ldrb	r3, [r7, #23]
 8009b72:	2b00      	cmp	r3, #0
 8009b74:	d10a      	bne.n	8009b8c <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8009b76:	4b9d      	ldr	r3, [pc, #628]	; (8009dec <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009b78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009b7a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009b84:	4999      	ldr	r1, [pc, #612]	; (8009dec <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009b86:	4313      	orrs	r3, r2
 8009b88:	658b      	str	r3, [r1, #88]	; 0x58
 8009b8a:	e001      	b.n	8009b90 <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009b8c:	7dfb      	ldrb	r3, [r7, #23]
 8009b8e:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	681b      	ldr	r3, [r3, #0]
 8009b94:	f003 0308 	and.w	r3, r3, #8
 8009b98:	2b00      	cmp	r3, #0
 8009b9a:	d01a      	beq.n	8009bd2 <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009ba2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009ba6:	d10a      	bne.n	8009bbe <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	3324      	adds	r3, #36	; 0x24
 8009bac:	2102      	movs	r1, #2
 8009bae:	4618      	mov	r0, r3
 8009bb0:	f001 fb20 	bl	800b1f4 <RCCEx_PLL3_Config>
 8009bb4:	4603      	mov	r3, r0
 8009bb6:	2b00      	cmp	r3, #0
 8009bb8:	d001      	beq.n	8009bbe <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 8009bba:	2301      	movs	r3, #1
 8009bbc:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8009bbe:	4b8b      	ldr	r3, [pc, #556]	; (8009dec <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009bc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009bc2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009bcc:	4987      	ldr	r1, [pc, #540]	; (8009dec <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009bce:	4313      	orrs	r3, r2
 8009bd0:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	681b      	ldr	r3, [r3, #0]
 8009bd6:	f003 0310 	and.w	r3, r3, #16
 8009bda:	2b00      	cmp	r3, #0
 8009bdc:	d01a      	beq.n	8009c14 <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009be4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009be8:	d10a      	bne.n	8009c00 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	3324      	adds	r3, #36	; 0x24
 8009bee:	2102      	movs	r1, #2
 8009bf0:	4618      	mov	r0, r3
 8009bf2:	f001 faff 	bl	800b1f4 <RCCEx_PLL3_Config>
 8009bf6:	4603      	mov	r3, r0
 8009bf8:	2b00      	cmp	r3, #0
 8009bfa:	d001      	beq.n	8009c00 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 8009bfc:	2301      	movs	r3, #1
 8009bfe:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8009c00:	4b7a      	ldr	r3, [pc, #488]	; (8009dec <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009c02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009c04:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009c0e:	4977      	ldr	r1, [pc, #476]	; (8009dec <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009c10:	4313      	orrs	r3, r2
 8009c12:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	681b      	ldr	r3, [r3, #0]
 8009c18:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009c1c:	2b00      	cmp	r3, #0
 8009c1e:	d034      	beq.n	8009c8a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8009c26:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009c2a:	d01d      	beq.n	8009c68 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 8009c2c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009c30:	d817      	bhi.n	8009c62 <HAL_RCCEx_PeriphCLKConfig+0xc22>
 8009c32:	2b00      	cmp	r3, #0
 8009c34:	d003      	beq.n	8009c3e <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8009c36:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009c3a:	d009      	beq.n	8009c50 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 8009c3c:	e011      	b.n	8009c62 <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	3304      	adds	r3, #4
 8009c42:	2100      	movs	r1, #0
 8009c44:	4618      	mov	r0, r3
 8009c46:	f001 fa23 	bl	800b090 <RCCEx_PLL2_Config>
 8009c4a:	4603      	mov	r3, r0
 8009c4c:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8009c4e:	e00c      	b.n	8009c6a <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	3324      	adds	r3, #36	; 0x24
 8009c54:	2102      	movs	r1, #2
 8009c56:	4618      	mov	r0, r3
 8009c58:	f001 facc 	bl	800b1f4 <RCCEx_PLL3_Config>
 8009c5c:	4603      	mov	r3, r0
 8009c5e:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8009c60:	e003      	b.n	8009c6a <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009c62:	2301      	movs	r3, #1
 8009c64:	75fb      	strb	r3, [r7, #23]
      break;
 8009c66:	e000      	b.n	8009c6a <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 8009c68:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009c6a:	7dfb      	ldrb	r3, [r7, #23]
 8009c6c:	2b00      	cmp	r3, #0
 8009c6e:	d10a      	bne.n	8009c86 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8009c70:	4b5e      	ldr	r3, [pc, #376]	; (8009dec <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009c72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009c74:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8009c7e:	495b      	ldr	r1, [pc, #364]	; (8009dec <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009c80:	4313      	orrs	r3, r2
 8009c82:	658b      	str	r3, [r1, #88]	; 0x58
 8009c84:	e001      	b.n	8009c8a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009c86:	7dfb      	ldrb	r3, [r7, #23]
 8009c88:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	681b      	ldr	r3, [r3, #0]
 8009c8e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009c92:	2b00      	cmp	r3, #0
 8009c94:	d033      	beq.n	8009cfe <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009c9c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009ca0:	d01c      	beq.n	8009cdc <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 8009ca2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009ca6:	d816      	bhi.n	8009cd6 <HAL_RCCEx_PeriphCLKConfig+0xc96>
 8009ca8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009cac:	d003      	beq.n	8009cb6 <HAL_RCCEx_PeriphCLKConfig+0xc76>
 8009cae:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009cb2:	d007      	beq.n	8009cc4 <HAL_RCCEx_PeriphCLKConfig+0xc84>
 8009cb4:	e00f      	b.n	8009cd6 <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009cb6:	4b4d      	ldr	r3, [pc, #308]	; (8009dec <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009cb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009cba:	4a4c      	ldr	r2, [pc, #304]	; (8009dec <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009cbc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009cc0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8009cc2:	e00c      	b.n	8009cde <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	3324      	adds	r3, #36	; 0x24
 8009cc8:	2101      	movs	r1, #1
 8009cca:	4618      	mov	r0, r3
 8009ccc:	f001 fa92 	bl	800b1f4 <RCCEx_PLL3_Config>
 8009cd0:	4603      	mov	r3, r0
 8009cd2:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8009cd4:	e003      	b.n	8009cde <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009cd6:	2301      	movs	r3, #1
 8009cd8:	75fb      	strb	r3, [r7, #23]
      break;
 8009cda:	e000      	b.n	8009cde <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 8009cdc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009cde:	7dfb      	ldrb	r3, [r7, #23]
 8009ce0:	2b00      	cmp	r3, #0
 8009ce2:	d10a      	bne.n	8009cfa <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8009ce4:	4b41      	ldr	r3, [pc, #260]	; (8009dec <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009ce6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009ce8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009cf2:	493e      	ldr	r1, [pc, #248]	; (8009dec <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009cf4:	4313      	orrs	r3, r2
 8009cf6:	654b      	str	r3, [r1, #84]	; 0x54
 8009cf8:	e001      	b.n	8009cfe <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009cfa:	7dfb      	ldrb	r3, [r7, #23]
 8009cfc:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	681b      	ldr	r3, [r3, #0]
 8009d02:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009d06:	2b00      	cmp	r3, #0
 8009d08:	d029      	beq.n	8009d5e <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009d0e:	2b00      	cmp	r3, #0
 8009d10:	d003      	beq.n	8009d1a <HAL_RCCEx_PeriphCLKConfig+0xcda>
 8009d12:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009d16:	d007      	beq.n	8009d28 <HAL_RCCEx_PeriphCLKConfig+0xce8>
 8009d18:	e00f      	b.n	8009d3a <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009d1a:	4b34      	ldr	r3, [pc, #208]	; (8009dec <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009d1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d1e:	4a33      	ldr	r2, [pc, #204]	; (8009dec <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009d20:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009d24:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8009d26:	e00b      	b.n	8009d40 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	3304      	adds	r3, #4
 8009d2c:	2102      	movs	r1, #2
 8009d2e:	4618      	mov	r0, r3
 8009d30:	f001 f9ae 	bl	800b090 <RCCEx_PLL2_Config>
 8009d34:	4603      	mov	r3, r0
 8009d36:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8009d38:	e002      	b.n	8009d40 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 8009d3a:	2301      	movs	r3, #1
 8009d3c:	75fb      	strb	r3, [r7, #23]
      break;
 8009d3e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009d40:	7dfb      	ldrb	r3, [r7, #23]
 8009d42:	2b00      	cmp	r3, #0
 8009d44:	d109      	bne.n	8009d5a <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8009d46:	4b29      	ldr	r3, [pc, #164]	; (8009dec <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009d48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009d4a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009d52:	4926      	ldr	r1, [pc, #152]	; (8009dec <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009d54:	4313      	orrs	r3, r2
 8009d56:	64cb      	str	r3, [r1, #76]	; 0x4c
 8009d58:	e001      	b.n	8009d5e <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009d5a:	7dfb      	ldrb	r3, [r7, #23]
 8009d5c:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	681b      	ldr	r3, [r3, #0]
 8009d62:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009d66:	2b00      	cmp	r3, #0
 8009d68:	d00a      	beq.n	8009d80 <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	3324      	adds	r3, #36	; 0x24
 8009d6e:	2102      	movs	r1, #2
 8009d70:	4618      	mov	r0, r3
 8009d72:	f001 fa3f 	bl	800b1f4 <RCCEx_PLL3_Config>
 8009d76:	4603      	mov	r3, r0
 8009d78:	2b00      	cmp	r3, #0
 8009d7a:	d001      	beq.n	8009d80 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 8009d7c:	2301      	movs	r3, #1
 8009d7e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	681b      	ldr	r3, [r3, #0]
 8009d84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009d88:	2b00      	cmp	r3, #0
 8009d8a:	d033      	beq.n	8009df4 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009d90:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009d94:	d017      	beq.n	8009dc6 <HAL_RCCEx_PeriphCLKConfig+0xd86>
 8009d96:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009d9a:	d811      	bhi.n	8009dc0 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8009d9c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009da0:	d013      	beq.n	8009dca <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8009da2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009da6:	d80b      	bhi.n	8009dc0 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8009da8:	2b00      	cmp	r3, #0
 8009daa:	d010      	beq.n	8009dce <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 8009dac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009db0:	d106      	bne.n	8009dc0 <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009db2:	4b0e      	ldr	r3, [pc, #56]	; (8009dec <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009db4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009db6:	4a0d      	ldr	r2, [pc, #52]	; (8009dec <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009db8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009dbc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8009dbe:	e007      	b.n	8009dd0 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009dc0:	2301      	movs	r3, #1
 8009dc2:	75fb      	strb	r3, [r7, #23]
      break;
 8009dc4:	e004      	b.n	8009dd0 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8009dc6:	bf00      	nop
 8009dc8:	e002      	b.n	8009dd0 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8009dca:	bf00      	nop
 8009dcc:	e000      	b.n	8009dd0 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8009dce:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009dd0:	7dfb      	ldrb	r3, [r7, #23]
 8009dd2:	2b00      	cmp	r3, #0
 8009dd4:	d10c      	bne.n	8009df0 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8009dd6:	4b05      	ldr	r3, [pc, #20]	; (8009dec <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009dd8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009dda:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009de2:	4902      	ldr	r1, [pc, #8]	; (8009dec <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009de4:	4313      	orrs	r3, r2
 8009de6:	654b      	str	r3, [r1, #84]	; 0x54
 8009de8:	e004      	b.n	8009df4 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 8009dea:	bf00      	nop
 8009dec:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009df0:	7dfb      	ldrb	r3, [r7, #23]
 8009df2:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	681b      	ldr	r3, [r3, #0]
 8009df8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009dfc:	2b00      	cmp	r3, #0
 8009dfe:	d008      	beq.n	8009e12 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8009e00:	4b31      	ldr	r3, [pc, #196]	; (8009ec8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8009e02:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009e04:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009e0c:	492e      	ldr	r1, [pc, #184]	; (8009ec8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8009e0e:	4313      	orrs	r3, r2
 8009e10:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	681b      	ldr	r3, [r3, #0]
 8009e16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009e1a:	2b00      	cmp	r3, #0
 8009e1c:	d009      	beq.n	8009e32 <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8009e1e:	4b2a      	ldr	r3, [pc, #168]	; (8009ec8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8009e20:	691b      	ldr	r3, [r3, #16]
 8009e22:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8009e2c:	4926      	ldr	r1, [pc, #152]	; (8009ec8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8009e2e:	4313      	orrs	r3, r2
 8009e30:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	681b      	ldr	r3, [r3, #0]
 8009e36:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009e3a:	2b00      	cmp	r3, #0
 8009e3c:	d008      	beq.n	8009e50 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8009e3e:	4b22      	ldr	r3, [pc, #136]	; (8009ec8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8009e40:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009e42:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009e4a:	491f      	ldr	r1, [pc, #124]	; (8009ec8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8009e4c:	4313      	orrs	r3, r2
 8009e4e:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	681b      	ldr	r3, [r3, #0]
 8009e54:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8009e58:	2b00      	cmp	r3, #0
 8009e5a:	d00d      	beq.n	8009e78 <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8009e5c:	4b1a      	ldr	r3, [pc, #104]	; (8009ec8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8009e5e:	691b      	ldr	r3, [r3, #16]
 8009e60:	4a19      	ldr	r2, [pc, #100]	; (8009ec8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8009e62:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009e66:	6113      	str	r3, [r2, #16]
 8009e68:	4b17      	ldr	r3, [pc, #92]	; (8009ec8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8009e6a:	691a      	ldr	r2, [r3, #16]
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8009e72:	4915      	ldr	r1, [pc, #84]	; (8009ec8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8009e74:	4313      	orrs	r3, r2
 8009e76:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	681b      	ldr	r3, [r3, #0]
 8009e7c:	2b00      	cmp	r3, #0
 8009e7e:	da08      	bge.n	8009e92 <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8009e80:	4b11      	ldr	r3, [pc, #68]	; (8009ec8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8009e82:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009e84:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009e8c:	490e      	ldr	r1, [pc, #56]	; (8009ec8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8009e8e:	4313      	orrs	r3, r2
 8009e90:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	681b      	ldr	r3, [r3, #0]
 8009e96:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009e9a:	2b00      	cmp	r3, #0
 8009e9c:	d009      	beq.n	8009eb2 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8009e9e:	4b0a      	ldr	r3, [pc, #40]	; (8009ec8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8009ea0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009ea2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009eac:	4906      	ldr	r1, [pc, #24]	; (8009ec8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8009eae:	4313      	orrs	r3, r2
 8009eb0:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8009eb2:	7dbb      	ldrb	r3, [r7, #22]
 8009eb4:	2b00      	cmp	r3, #0
 8009eb6:	d101      	bne.n	8009ebc <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 8009eb8:	2300      	movs	r3, #0
 8009eba:	e000      	b.n	8009ebe <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 8009ebc:	2301      	movs	r3, #1
}
 8009ebe:	4618      	mov	r0, r3
 8009ec0:	3718      	adds	r7, #24
 8009ec2:	46bd      	mov	sp, r7
 8009ec4:	bd80      	pop	{r7, pc}
 8009ec6:	bf00      	nop
 8009ec8:	58024400 	.word	0x58024400

08009ecc <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8009ecc:	b580      	push	{r7, lr}
 8009ece:	b090      	sub	sp, #64	; 0x40
 8009ed0:	af00      	add	r7, sp, #0
 8009ed2:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009eda:	f040 8095 	bne.w	800a008 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 8009ede:	4b97      	ldr	r3, [pc, #604]	; (800a13c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8009ee0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009ee2:	f003 0307 	and.w	r3, r3, #7
 8009ee6:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8009ee8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009eea:	2b04      	cmp	r3, #4
 8009eec:	f200 8088 	bhi.w	800a000 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 8009ef0:	a201      	add	r2, pc, #4	; (adr r2, 8009ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x2c>)
 8009ef2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ef6:	bf00      	nop
 8009ef8:	08009f0d 	.word	0x08009f0d
 8009efc:	08009f35 	.word	0x08009f35
 8009f00:	08009f5d 	.word	0x08009f5d
 8009f04:	08009ff9 	.word	0x08009ff9
 8009f08:	08009f85 	.word	0x08009f85
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009f0c:	4b8b      	ldr	r3, [pc, #556]	; (800a13c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8009f0e:	681b      	ldr	r3, [r3, #0]
 8009f10:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009f14:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009f18:	d108      	bne.n	8009f2c <HAL_RCCEx_GetPeriphCLKFreq+0x60>
         {
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009f1a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009f1e:	4618      	mov	r0, r3
 8009f20:	f000 ff64 	bl	800adec <HAL_RCCEx_GetPLL1ClockFreq>
           frequency = pll1_clocks.PLL1_Q_Frequency;
 8009f24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f26:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8009f28:	f000 bc94 	b.w	800a854 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8009f2c:	2300      	movs	r3, #0
 8009f2e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009f30:	f000 bc90 	b.w	800a854 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009f34:	4b81      	ldr	r3, [pc, #516]	; (800a13c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8009f36:	681b      	ldr	r3, [r3, #0]
 8009f38:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009f3c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009f40:	d108      	bne.n	8009f54 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009f42:	f107 0318 	add.w	r3, r7, #24
 8009f46:	4618      	mov	r0, r3
 8009f48:	f000 fca8 	bl	800a89c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009f4c:	69bb      	ldr	r3, [r7, #24]
 8009f4e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8009f50:	f000 bc80 	b.w	800a854 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8009f54:	2300      	movs	r3, #0
 8009f56:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009f58:	f000 bc7c 	b.w	800a854 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009f5c:	4b77      	ldr	r3, [pc, #476]	; (800a13c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8009f5e:	681b      	ldr	r3, [r3, #0]
 8009f60:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009f64:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009f68:	d108      	bne.n	8009f7c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009f6a:	f107 030c 	add.w	r3, r7, #12
 8009f6e:	4618      	mov	r0, r3
 8009f70:	f000 fde8 	bl	800ab44 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8009f74:	68fb      	ldr	r3, [r7, #12]
 8009f76:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8009f78:	f000 bc6c 	b.w	800a854 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8009f7c:	2300      	movs	r3, #0
 8009f7e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009f80:	f000 bc68 	b.w	800a854 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8009f84:	4b6d      	ldr	r3, [pc, #436]	; (800a13c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8009f86:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009f88:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009f8c:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009f8e:	4b6b      	ldr	r3, [pc, #428]	; (800a13c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8009f90:	681b      	ldr	r3, [r3, #0]
 8009f92:	f003 0304 	and.w	r3, r3, #4
 8009f96:	2b04      	cmp	r3, #4
 8009f98:	d10c      	bne.n	8009fb4 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
 8009f9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009f9c:	2b00      	cmp	r3, #0
 8009f9e:	d109      	bne.n	8009fb4 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009fa0:	4b66      	ldr	r3, [pc, #408]	; (800a13c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8009fa2:	681b      	ldr	r3, [r3, #0]
 8009fa4:	08db      	lsrs	r3, r3, #3
 8009fa6:	f003 0303 	and.w	r3, r3, #3
 8009faa:	4a65      	ldr	r2, [pc, #404]	; (800a140 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 8009fac:	fa22 f303 	lsr.w	r3, r2, r3
 8009fb0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009fb2:	e01f      	b.n	8009ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009fb4:	4b61      	ldr	r3, [pc, #388]	; (800a13c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8009fb6:	681b      	ldr	r3, [r3, #0]
 8009fb8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009fbc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009fc0:	d106      	bne.n	8009fd0 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
 8009fc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009fc4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009fc8:	d102      	bne.n	8009fd0 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8009fca:	4b5e      	ldr	r3, [pc, #376]	; (800a144 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8009fcc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009fce:	e011      	b.n	8009ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009fd0:	4b5a      	ldr	r3, [pc, #360]	; (800a13c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8009fd2:	681b      	ldr	r3, [r3, #0]
 8009fd4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009fd8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009fdc:	d106      	bne.n	8009fec <HAL_RCCEx_GetPeriphCLKFreq+0x120>
 8009fde:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009fe0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009fe4:	d102      	bne.n	8009fec <HAL_RCCEx_GetPeriphCLKFreq+0x120>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8009fe6:	4b58      	ldr	r3, [pc, #352]	; (800a148 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 8009fe8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009fea:	e003      	b.n	8009ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8009fec:	2300      	movs	r3, #0
 8009fee:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8009ff0:	f000 bc30 	b.w	800a854 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8009ff4:	f000 bc2e 	b.w	800a854 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8009ff8:	4b54      	ldr	r3, [pc, #336]	; (800a14c <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 8009ffa:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009ffc:	f000 bc2a 	b.w	800a854 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      default :
        {
          frequency = 0;
 800a000:	2300      	movs	r3, #0
 800a002:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a004:	f000 bc26 	b.w	800a854 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a00e:	f040 809f 	bne.w	800a150 <HAL_RCCEx_GetPeriphCLKFreq+0x284>
    {

      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 800a012:	4b4a      	ldr	r3, [pc, #296]	; (800a13c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a014:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a016:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 800a01a:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800a01c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a01e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a022:	d04d      	beq.n	800a0c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1f4>
 800a024:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a026:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a02a:	f200 8084 	bhi.w	800a136 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 800a02e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a030:	2bc0      	cmp	r3, #192	; 0xc0
 800a032:	d07d      	beq.n	800a130 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 800a034:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a036:	2bc0      	cmp	r3, #192	; 0xc0
 800a038:	d87d      	bhi.n	800a136 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 800a03a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a03c:	2b80      	cmp	r3, #128	; 0x80
 800a03e:	d02d      	beq.n	800a09c <HAL_RCCEx_GetPeriphCLKFreq+0x1d0>
 800a040:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a042:	2b80      	cmp	r3, #128	; 0x80
 800a044:	d877      	bhi.n	800a136 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 800a046:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a048:	2b00      	cmp	r3, #0
 800a04a:	d003      	beq.n	800a054 <HAL_RCCEx_GetPeriphCLKFreq+0x188>
 800a04c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a04e:	2b40      	cmp	r3, #64	; 0x40
 800a050:	d012      	beq.n	800a078 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
 800a052:	e070      	b.n	800a136 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
      {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a054:	4b39      	ldr	r3, [pc, #228]	; (800a13c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a056:	681b      	ldr	r3, [r3, #0]
 800a058:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a05c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a060:	d107      	bne.n	800a072 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a062:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a066:	4618      	mov	r0, r3
 800a068:	f000 fec0 	bl	800adec <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a06c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a06e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a070:	e3f0      	b.n	800a854 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800a072:	2300      	movs	r3, #0
 800a074:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a076:	e3ed      	b.n	800a854 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a078:	4b30      	ldr	r3, [pc, #192]	; (800a13c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a07a:	681b      	ldr	r3, [r3, #0]
 800a07c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a080:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a084:	d107      	bne.n	800a096 <HAL_RCCEx_GetPeriphCLKFreq+0x1ca>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a086:	f107 0318 	add.w	r3, r7, #24
 800a08a:	4618      	mov	r0, r3
 800a08c:	f000 fc06 	bl	800a89c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a090:	69bb      	ldr	r3, [r7, #24]
 800a092:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a094:	e3de      	b.n	800a854 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800a096:	2300      	movs	r3, #0
 800a098:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a09a:	e3db      	b.n	800a854 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a09c:	4b27      	ldr	r3, [pc, #156]	; (800a13c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a09e:	681b      	ldr	r3, [r3, #0]
 800a0a0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a0a4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a0a8:	d107      	bne.n	800a0ba <HAL_RCCEx_GetPeriphCLKFreq+0x1ee>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a0aa:	f107 030c 	add.w	r3, r7, #12
 800a0ae:	4618      	mov	r0, r3
 800a0b0:	f000 fd48 	bl	800ab44 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a0b4:	68fb      	ldr	r3, [r7, #12]
 800a0b6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a0b8:	e3cc      	b.n	800a854 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800a0ba:	2300      	movs	r3, #0
 800a0bc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a0be:	e3c9      	b.n	800a854 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800a0c0:	4b1e      	ldr	r3, [pc, #120]	; (800a13c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a0c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a0c4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a0c8:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a0ca:	4b1c      	ldr	r3, [pc, #112]	; (800a13c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a0cc:	681b      	ldr	r3, [r3, #0]
 800a0ce:	f003 0304 	and.w	r3, r3, #4
 800a0d2:	2b04      	cmp	r3, #4
 800a0d4:	d10c      	bne.n	800a0f0 <HAL_RCCEx_GetPeriphCLKFreq+0x224>
 800a0d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a0d8:	2b00      	cmp	r3, #0
 800a0da:	d109      	bne.n	800a0f0 <HAL_RCCEx_GetPeriphCLKFreq+0x224>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a0dc:	4b17      	ldr	r3, [pc, #92]	; (800a13c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a0de:	681b      	ldr	r3, [r3, #0]
 800a0e0:	08db      	lsrs	r3, r3, #3
 800a0e2:	f003 0303 	and.w	r3, r3, #3
 800a0e6:	4a16      	ldr	r2, [pc, #88]	; (800a140 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 800a0e8:	fa22 f303 	lsr.w	r3, r2, r3
 800a0ec:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a0ee:	e01e      	b.n	800a12e <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a0f0:	4b12      	ldr	r3, [pc, #72]	; (800a13c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a0f2:	681b      	ldr	r3, [r3, #0]
 800a0f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a0f8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a0fc:	d106      	bne.n	800a10c <HAL_RCCEx_GetPeriphCLKFreq+0x240>
 800a0fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a100:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a104:	d102      	bne.n	800a10c <HAL_RCCEx_GetPeriphCLKFreq+0x240>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800a106:	4b0f      	ldr	r3, [pc, #60]	; (800a144 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800a108:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a10a:	e010      	b.n	800a12e <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a10c:	4b0b      	ldr	r3, [pc, #44]	; (800a13c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a10e:	681b      	ldr	r3, [r3, #0]
 800a110:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a114:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a118:	d106      	bne.n	800a128 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
 800a11a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a11c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a120:	d102      	bne.n	800a128 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800a122:	4b09      	ldr	r3, [pc, #36]	; (800a148 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 800a124:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a126:	e002      	b.n	800a12e <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800a128:	2300      	movs	r3, #0
 800a12a:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800a12c:	e392      	b.n	800a854 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 800a12e:	e391      	b.n	800a854 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800a130:	4b06      	ldr	r3, [pc, #24]	; (800a14c <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 800a132:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a134:	e38e      	b.n	800a854 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      default :
        {
          frequency = 0;
 800a136:	2300      	movs	r3, #0
 800a138:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a13a:	e38b      	b.n	800a854 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 800a13c:	58024400 	.word	0x58024400
 800a140:	03d09000 	.word	0x03d09000
 800a144:	003d0900 	.word	0x003d0900
 800a148:	007a1200 	.word	0x007a1200
 800a14c:	00bb8000 	.word	0x00bb8000
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a156:	f040 809c 	bne.w	800a292 <HAL_RCCEx_GetPeriphCLKFreq+0x3c6>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 800a15a:	4b9d      	ldr	r3, [pc, #628]	; (800a3d0 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800a15c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a15e:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 800a162:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800a164:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a166:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a16a:	d054      	beq.n	800a216 <HAL_RCCEx_GetPeriphCLKFreq+0x34a>
 800a16c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a16e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a172:	f200 808b 	bhi.w	800a28c <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 800a176:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a178:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800a17c:	f000 8083 	beq.w	800a286 <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
 800a180:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a182:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800a186:	f200 8081 	bhi.w	800a28c <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 800a18a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a18c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a190:	d02f      	beq.n	800a1f2 <HAL_RCCEx_GetPeriphCLKFreq+0x326>
 800a192:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a194:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a198:	d878      	bhi.n	800a28c <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 800a19a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a19c:	2b00      	cmp	r3, #0
 800a19e:	d004      	beq.n	800a1aa <HAL_RCCEx_GetPeriphCLKFreq+0x2de>
 800a1a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1a2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a1a6:	d012      	beq.n	800a1ce <HAL_RCCEx_GetPeriphCLKFreq+0x302>
 800a1a8:	e070      	b.n	800a28c <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
      {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a1aa:	4b89      	ldr	r3, [pc, #548]	; (800a3d0 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800a1ac:	681b      	ldr	r3, [r3, #0]
 800a1ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a1b2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a1b6:	d107      	bne.n	800a1c8 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a1b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a1bc:	4618      	mov	r0, r3
 800a1be:	f000 fe15 	bl	800adec <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a1c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1c4:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a1c6:	e345      	b.n	800a854 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800a1c8:	2300      	movs	r3, #0
 800a1ca:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a1cc:	e342      	b.n	800a854 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a1ce:	4b80      	ldr	r3, [pc, #512]	; (800a3d0 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800a1d0:	681b      	ldr	r3, [r3, #0]
 800a1d2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a1d6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a1da:	d107      	bne.n	800a1ec <HAL_RCCEx_GetPeriphCLKFreq+0x320>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a1dc:	f107 0318 	add.w	r3, r7, #24
 800a1e0:	4618      	mov	r0, r3
 800a1e2:	f000 fb5b 	bl	800a89c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a1e6:	69bb      	ldr	r3, [r7, #24]
 800a1e8:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a1ea:	e333      	b.n	800a854 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800a1ec:	2300      	movs	r3, #0
 800a1ee:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a1f0:	e330      	b.n	800a854 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a1f2:	4b77      	ldr	r3, [pc, #476]	; (800a3d0 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800a1f4:	681b      	ldr	r3, [r3, #0]
 800a1f6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a1fa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a1fe:	d107      	bne.n	800a210 <HAL_RCCEx_GetPeriphCLKFreq+0x344>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a200:	f107 030c 	add.w	r3, r7, #12
 800a204:	4618      	mov	r0, r3
 800a206:	f000 fc9d 	bl	800ab44 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a20a:	68fb      	ldr	r3, [r7, #12]
 800a20c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a20e:	e321      	b.n	800a854 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800a210:	2300      	movs	r3, #0
 800a212:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a214:	e31e      	b.n	800a854 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800a216:	4b6e      	ldr	r3, [pc, #440]	; (800a3d0 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800a218:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a21a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a21e:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a220:	4b6b      	ldr	r3, [pc, #428]	; (800a3d0 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800a222:	681b      	ldr	r3, [r3, #0]
 800a224:	f003 0304 	and.w	r3, r3, #4
 800a228:	2b04      	cmp	r3, #4
 800a22a:	d10c      	bne.n	800a246 <HAL_RCCEx_GetPeriphCLKFreq+0x37a>
 800a22c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a22e:	2b00      	cmp	r3, #0
 800a230:	d109      	bne.n	800a246 <HAL_RCCEx_GetPeriphCLKFreq+0x37a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a232:	4b67      	ldr	r3, [pc, #412]	; (800a3d0 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800a234:	681b      	ldr	r3, [r3, #0]
 800a236:	08db      	lsrs	r3, r3, #3
 800a238:	f003 0303 	and.w	r3, r3, #3
 800a23c:	4a65      	ldr	r2, [pc, #404]	; (800a3d4 <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
 800a23e:	fa22 f303 	lsr.w	r3, r2, r3
 800a242:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a244:	e01e      	b.n	800a284 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a246:	4b62      	ldr	r3, [pc, #392]	; (800a3d0 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800a248:	681b      	ldr	r3, [r3, #0]
 800a24a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a24e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a252:	d106      	bne.n	800a262 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 800a254:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a256:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a25a:	d102      	bne.n	800a262 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800a25c:	4b5e      	ldr	r3, [pc, #376]	; (800a3d8 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
 800a25e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a260:	e010      	b.n	800a284 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a262:	4b5b      	ldr	r3, [pc, #364]	; (800a3d0 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800a264:	681b      	ldr	r3, [r3, #0]
 800a266:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a26a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a26e:	d106      	bne.n	800a27e <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 800a270:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a272:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a276:	d102      	bne.n	800a27e <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800a278:	4b58      	ldr	r3, [pc, #352]	; (800a3dc <HAL_RCCEx_GetPeriphCLKFreq+0x510>)
 800a27a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a27c:	e002      	b.n	800a284 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800a27e:	2300      	movs	r3, #0
 800a280:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800a282:	e2e7      	b.n	800a854 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 800a284:	e2e6      	b.n	800a854 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800a286:	4b56      	ldr	r3, [pc, #344]	; (800a3e0 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800a288:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a28a:	e2e3      	b.n	800a854 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      default :
        {
          frequency = 0;
 800a28c:	2300      	movs	r3, #0
 800a28e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a290:	e2e0      	b.n	800a854 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a298:	f040 80a7 	bne.w	800a3ea <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 800a29c:	4b4c      	ldr	r3, [pc, #304]	; (800a3d0 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800a29e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a2a0:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800a2a4:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800a2a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2a8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a2ac:	d055      	beq.n	800a35a <HAL_RCCEx_GetPeriphCLKFreq+0x48e>
 800a2ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2b0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a2b4:	f200 8096 	bhi.w	800a3e4 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
 800a2b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2ba:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800a2be:	f000 8084 	beq.w	800a3ca <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
 800a2c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2c4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800a2c8:	f200 808c 	bhi.w	800a3e4 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
 800a2cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2ce:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a2d2:	d030      	beq.n	800a336 <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
 800a2d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2d6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a2da:	f200 8083 	bhi.w	800a3e4 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
 800a2de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2e0:	2b00      	cmp	r3, #0
 800a2e2:	d004      	beq.n	800a2ee <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 800a2e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2e6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800a2ea:	d012      	beq.n	800a312 <HAL_RCCEx_GetPeriphCLKFreq+0x446>
 800a2ec:	e07a      	b.n	800a3e4 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
      {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a2ee:	4b38      	ldr	r3, [pc, #224]	; (800a3d0 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800a2f0:	681b      	ldr	r3, [r3, #0]
 800a2f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a2f6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a2fa:	d107      	bne.n	800a30c <HAL_RCCEx_GetPeriphCLKFreq+0x440>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a2fc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a300:	4618      	mov	r0, r3
 800a302:	f000 fd73 	bl	800adec <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a306:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a308:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a30a:	e2a3      	b.n	800a854 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800a30c:	2300      	movs	r3, #0
 800a30e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a310:	e2a0      	b.n	800a854 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a312:	4b2f      	ldr	r3, [pc, #188]	; (800a3d0 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800a314:	681b      	ldr	r3, [r3, #0]
 800a316:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a31a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a31e:	d107      	bne.n	800a330 <HAL_RCCEx_GetPeriphCLKFreq+0x464>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a320:	f107 0318 	add.w	r3, r7, #24
 800a324:	4618      	mov	r0, r3
 800a326:	f000 fab9 	bl	800a89c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a32a:	69bb      	ldr	r3, [r7, #24]
 800a32c:	63fb      	str	r3, [r7, #60]	; 0x3c
          }
         else
         {
           frequency = 0;
         }
          break;
 800a32e:	e291      	b.n	800a854 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800a330:	2300      	movs	r3, #0
 800a332:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a334:	e28e      	b.n	800a854 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a336:	4b26      	ldr	r3, [pc, #152]	; (800a3d0 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800a338:	681b      	ldr	r3, [r3, #0]
 800a33a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a33e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a342:	d107      	bne.n	800a354 <HAL_RCCEx_GetPeriphCLKFreq+0x488>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a344:	f107 030c 	add.w	r3, r7, #12
 800a348:	4618      	mov	r0, r3
 800a34a:	f000 fbfb 	bl	800ab44 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a34e:	68fb      	ldr	r3, [r7, #12]
 800a350:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a352:	e27f      	b.n	800a854 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800a354:	2300      	movs	r3, #0
 800a356:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a358:	e27c      	b.n	800a854 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800a35a:	4b1d      	ldr	r3, [pc, #116]	; (800a3d0 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800a35c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a35e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a362:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a364:	4b1a      	ldr	r3, [pc, #104]	; (800a3d0 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800a366:	681b      	ldr	r3, [r3, #0]
 800a368:	f003 0304 	and.w	r3, r3, #4
 800a36c:	2b04      	cmp	r3, #4
 800a36e:	d10c      	bne.n	800a38a <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
 800a370:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a372:	2b00      	cmp	r3, #0
 800a374:	d109      	bne.n	800a38a <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a376:	4b16      	ldr	r3, [pc, #88]	; (800a3d0 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800a378:	681b      	ldr	r3, [r3, #0]
 800a37a:	08db      	lsrs	r3, r3, #3
 800a37c:	f003 0303 	and.w	r3, r3, #3
 800a380:	4a14      	ldr	r2, [pc, #80]	; (800a3d4 <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
 800a382:	fa22 f303 	lsr.w	r3, r2, r3
 800a386:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a388:	e01e      	b.n	800a3c8 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a38a:	4b11      	ldr	r3, [pc, #68]	; (800a3d0 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800a38c:	681b      	ldr	r3, [r3, #0]
 800a38e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a392:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a396:	d106      	bne.n	800a3a6 <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
 800a398:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a39a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a39e:	d102      	bne.n	800a3a6 <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800a3a0:	4b0d      	ldr	r3, [pc, #52]	; (800a3d8 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
 800a3a2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a3a4:	e010      	b.n	800a3c8 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a3a6:	4b0a      	ldr	r3, [pc, #40]	; (800a3d0 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800a3a8:	681b      	ldr	r3, [r3, #0]
 800a3aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a3ae:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a3b2:	d106      	bne.n	800a3c2 <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
 800a3b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a3b6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a3ba:	d102      	bne.n	800a3c2 <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800a3bc:	4b07      	ldr	r3, [pc, #28]	; (800a3dc <HAL_RCCEx_GetPeriphCLKFreq+0x510>)
 800a3be:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a3c0:	e002      	b.n	800a3c8 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800a3c2:	2300      	movs	r3, #0
 800a3c4:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800a3c6:	e245      	b.n	800a854 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 800a3c8:	e244      	b.n	800a854 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800a3ca:	4b05      	ldr	r3, [pc, #20]	; (800a3e0 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800a3cc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a3ce:	e241      	b.n	800a854 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 800a3d0:	58024400 	.word	0x58024400
 800a3d4:	03d09000 	.word	0x03d09000
 800a3d8:	003d0900 	.word	0x003d0900
 800a3dc:	007a1200 	.word	0x007a1200
 800a3e0:	00bb8000 	.word	0x00bb8000
        }

      default :
        {
          frequency = 0;
 800a3e4:	2300      	movs	r3, #0
 800a3e6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a3e8:	e234      	b.n	800a854 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a3f0:	f040 809c 	bne.w	800a52c <HAL_RCCEx_GetPeriphCLKFreq+0x660>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 800a3f4:	4b9b      	ldr	r3, [pc, #620]	; (800a664 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800a3f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a3f8:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800a3fc:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800a3fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a400:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a404:	d054      	beq.n	800a4b0 <HAL_RCCEx_GetPeriphCLKFreq+0x5e4>
 800a406:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a408:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a40c:	f200 808b 	bhi.w	800a526 <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
 800a410:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a412:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800a416:	f000 8083 	beq.w	800a520 <HAL_RCCEx_GetPeriphCLKFreq+0x654>
 800a41a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a41c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800a420:	f200 8081 	bhi.w	800a526 <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
 800a424:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a426:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a42a:	d02f      	beq.n	800a48c <HAL_RCCEx_GetPeriphCLKFreq+0x5c0>
 800a42c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a42e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a432:	d878      	bhi.n	800a526 <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
 800a434:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a436:	2b00      	cmp	r3, #0
 800a438:	d004      	beq.n	800a444 <HAL_RCCEx_GetPeriphCLKFreq+0x578>
 800a43a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a43c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a440:	d012      	beq.n	800a468 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>
 800a442:	e070      	b.n	800a526 <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a444:	4b87      	ldr	r3, [pc, #540]	; (800a664 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800a446:	681b      	ldr	r3, [r3, #0]
 800a448:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a44c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a450:	d107      	bne.n	800a462 <HAL_RCCEx_GetPeriphCLKFreq+0x596>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a452:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a456:	4618      	mov	r0, r3
 800a458:	f000 fcc8 	bl	800adec <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a45c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a45e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a460:	e1f8      	b.n	800a854 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800a462:	2300      	movs	r3, #0
 800a464:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a466:	e1f5      	b.n	800a854 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a468:	4b7e      	ldr	r3, [pc, #504]	; (800a664 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800a46a:	681b      	ldr	r3, [r3, #0]
 800a46c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a470:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a474:	d107      	bne.n	800a486 <HAL_RCCEx_GetPeriphCLKFreq+0x5ba>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a476:	f107 0318 	add.w	r3, r7, #24
 800a47a:	4618      	mov	r0, r3
 800a47c:	f000 fa0e 	bl	800a89c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a480:	69bb      	ldr	r3, [r7, #24]
 800a482:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a484:	e1e6      	b.n	800a854 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800a486:	2300      	movs	r3, #0
 800a488:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a48a:	e1e3      	b.n	800a854 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a48c:	4b75      	ldr	r3, [pc, #468]	; (800a664 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800a48e:	681b      	ldr	r3, [r3, #0]
 800a490:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a494:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a498:	d107      	bne.n	800a4aa <HAL_RCCEx_GetPeriphCLKFreq+0x5de>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a49a:	f107 030c 	add.w	r3, r7, #12
 800a49e:	4618      	mov	r0, r3
 800a4a0:	f000 fb50 	bl	800ab44 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a4a4:	68fb      	ldr	r3, [r7, #12]
 800a4a6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a4a8:	e1d4      	b.n	800a854 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800a4aa:	2300      	movs	r3, #0
 800a4ac:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a4ae:	e1d1      	b.n	800a854 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800a4b0:	4b6c      	ldr	r3, [pc, #432]	; (800a664 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800a4b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a4b4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a4b8:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a4ba:	4b6a      	ldr	r3, [pc, #424]	; (800a664 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800a4bc:	681b      	ldr	r3, [r3, #0]
 800a4be:	f003 0304 	and.w	r3, r3, #4
 800a4c2:	2b04      	cmp	r3, #4
 800a4c4:	d10c      	bne.n	800a4e0 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 800a4c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a4c8:	2b00      	cmp	r3, #0
 800a4ca:	d109      	bne.n	800a4e0 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a4cc:	4b65      	ldr	r3, [pc, #404]	; (800a664 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800a4ce:	681b      	ldr	r3, [r3, #0]
 800a4d0:	08db      	lsrs	r3, r3, #3
 800a4d2:	f003 0303 	and.w	r3, r3, #3
 800a4d6:	4a64      	ldr	r2, [pc, #400]	; (800a668 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>)
 800a4d8:	fa22 f303 	lsr.w	r3, r2, r3
 800a4dc:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a4de:	e01e      	b.n	800a51e <HAL_RCCEx_GetPeriphCLKFreq+0x652>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a4e0:	4b60      	ldr	r3, [pc, #384]	; (800a664 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800a4e2:	681b      	ldr	r3, [r3, #0]
 800a4e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a4e8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a4ec:	d106      	bne.n	800a4fc <HAL_RCCEx_GetPeriphCLKFreq+0x630>
 800a4ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a4f0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a4f4:	d102      	bne.n	800a4fc <HAL_RCCEx_GetPeriphCLKFreq+0x630>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800a4f6:	4b5d      	ldr	r3, [pc, #372]	; (800a66c <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>)
 800a4f8:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a4fa:	e010      	b.n	800a51e <HAL_RCCEx_GetPeriphCLKFreq+0x652>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a4fc:	4b59      	ldr	r3, [pc, #356]	; (800a664 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800a4fe:	681b      	ldr	r3, [r3, #0]
 800a500:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a504:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a508:	d106      	bne.n	800a518 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 800a50a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a50c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a510:	d102      	bne.n	800a518 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800a512:	4b57      	ldr	r3, [pc, #348]	; (800a670 <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>)
 800a514:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a516:	e002      	b.n	800a51e <HAL_RCCEx_GetPeriphCLKFreq+0x652>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800a518:	2300      	movs	r3, #0
 800a51a:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800a51c:	e19a      	b.n	800a854 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 800a51e:	e199      	b.n	800a854 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800a520:	4b54      	ldr	r3, [pc, #336]	; (800a674 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a522:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a524:	e196      	b.n	800a854 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      default :
        {
          frequency = 0;
 800a526:	2300      	movs	r3, #0
 800a528:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a52a:	e193      	b.n	800a854 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800a532:	d173      	bne.n	800a61c <HAL_RCCEx_GetPeriphCLKFreq+0x750>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 800a534:	4b4b      	ldr	r3, [pc, #300]	; (800a664 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800a536:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a538:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800a53c:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800a53e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a540:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a544:	d02f      	beq.n	800a5a6 <HAL_RCCEx_GetPeriphCLKFreq+0x6da>
 800a546:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a548:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a54c:	d863      	bhi.n	800a616 <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
 800a54e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a550:	2b00      	cmp	r3, #0
 800a552:	d004      	beq.n	800a55e <HAL_RCCEx_GetPeriphCLKFreq+0x692>
 800a554:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a556:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a55a:	d012      	beq.n	800a582 <HAL_RCCEx_GetPeriphCLKFreq+0x6b6>
 800a55c:	e05b      	b.n	800a616 <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a55e:	4b41      	ldr	r3, [pc, #260]	; (800a664 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800a560:	681b      	ldr	r3, [r3, #0]
 800a562:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a566:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a56a:	d107      	bne.n	800a57c <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a56c:	f107 0318 	add.w	r3, r7, #24
 800a570:	4618      	mov	r0, r3
 800a572:	f000 f993 	bl	800a89c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a576:	69bb      	ldr	r3, [r7, #24]
 800a578:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a57a:	e16b      	b.n	800a854 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800a57c:	2300      	movs	r3, #0
 800a57e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a580:	e168      	b.n	800a854 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a582:	4b38      	ldr	r3, [pc, #224]	; (800a664 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800a584:	681b      	ldr	r3, [r3, #0]
 800a586:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a58a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a58e:	d107      	bne.n	800a5a0 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a590:	f107 030c 	add.w	r3, r7, #12
 800a594:	4618      	mov	r0, r3
 800a596:	f000 fad5 	bl	800ab44 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800a59a:	697b      	ldr	r3, [r7, #20]
 800a59c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a59e:	e159      	b.n	800a854 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800a5a0:	2300      	movs	r3, #0
 800a5a2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a5a4:	e156      	b.n	800a854 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800a5a6:	4b2f      	ldr	r3, [pc, #188]	; (800a664 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800a5a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a5aa:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a5ae:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a5b0:	4b2c      	ldr	r3, [pc, #176]	; (800a664 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800a5b2:	681b      	ldr	r3, [r3, #0]
 800a5b4:	f003 0304 	and.w	r3, r3, #4
 800a5b8:	2b04      	cmp	r3, #4
 800a5ba:	d10c      	bne.n	800a5d6 <HAL_RCCEx_GetPeriphCLKFreq+0x70a>
 800a5bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a5be:	2b00      	cmp	r3, #0
 800a5c0:	d109      	bne.n	800a5d6 <HAL_RCCEx_GetPeriphCLKFreq+0x70a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a5c2:	4b28      	ldr	r3, [pc, #160]	; (800a664 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800a5c4:	681b      	ldr	r3, [r3, #0]
 800a5c6:	08db      	lsrs	r3, r3, #3
 800a5c8:	f003 0303 	and.w	r3, r3, #3
 800a5cc:	4a26      	ldr	r2, [pc, #152]	; (800a668 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>)
 800a5ce:	fa22 f303 	lsr.w	r3, r2, r3
 800a5d2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a5d4:	e01e      	b.n	800a614 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a5d6:	4b23      	ldr	r3, [pc, #140]	; (800a664 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800a5d8:	681b      	ldr	r3, [r3, #0]
 800a5da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a5de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a5e2:	d106      	bne.n	800a5f2 <HAL_RCCEx_GetPeriphCLKFreq+0x726>
 800a5e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a5e6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a5ea:	d102      	bne.n	800a5f2 <HAL_RCCEx_GetPeriphCLKFreq+0x726>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800a5ec:	4b1f      	ldr	r3, [pc, #124]	; (800a66c <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>)
 800a5ee:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a5f0:	e010      	b.n	800a614 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a5f2:	4b1c      	ldr	r3, [pc, #112]	; (800a664 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800a5f4:	681b      	ldr	r3, [r3, #0]
 800a5f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a5fa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a5fe:	d106      	bne.n	800a60e <HAL_RCCEx_GetPeriphCLKFreq+0x742>
 800a600:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a602:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a606:	d102      	bne.n	800a60e <HAL_RCCEx_GetPeriphCLKFreq+0x742>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800a608:	4b19      	ldr	r3, [pc, #100]	; (800a670 <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>)
 800a60a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a60c:	e002      	b.n	800a614 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800a60e:	2300      	movs	r3, #0
 800a610:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800a612:	e11f      	b.n	800a854 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 800a614:	e11e      	b.n	800a854 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      default :
        {
          frequency = 0;
 800a616:	2300      	movs	r3, #0
 800a618:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a61a:	e11b      	b.n	800a854 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a622:	d13e      	bne.n	800a6a2 <HAL_RCCEx_GetPeriphCLKFreq+0x7d6>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 800a624:	4b0f      	ldr	r3, [pc, #60]	; (800a664 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800a626:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a628:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a62c:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800a62e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a630:	2b00      	cmp	r3, #0
 800a632:	d004      	beq.n	800a63e <HAL_RCCEx_GetPeriphCLKFreq+0x772>
 800a634:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a636:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a63a:	d01d      	beq.n	800a678 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 800a63c:	e02e      	b.n	800a69c <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a63e:	4b09      	ldr	r3, [pc, #36]	; (800a664 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800a640:	681b      	ldr	r3, [r3, #0]
 800a642:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a646:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a64a:	d107      	bne.n	800a65c <HAL_RCCEx_GetPeriphCLKFreq+0x790>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a64c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a650:	4618      	mov	r0, r3
 800a652:	f000 fbcb 	bl	800adec <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a656:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a658:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800a65a:	e0fb      	b.n	800a854 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 800a65c:	2300      	movs	r3, #0
 800a65e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a660:	e0f8      	b.n	800a854 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 800a662:	bf00      	nop
 800a664:	58024400 	.word	0x58024400
 800a668:	03d09000 	.word	0x03d09000
 800a66c:	003d0900 	.word	0x003d0900
 800a670:	007a1200 	.word	0x007a1200
 800a674:	00bb8000 	.word	0x00bb8000
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a678:	4b79      	ldr	r3, [pc, #484]	; (800a860 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800a67a:	681b      	ldr	r3, [r3, #0]
 800a67c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a680:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a684:	d107      	bne.n	800a696 <HAL_RCCEx_GetPeriphCLKFreq+0x7ca>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a686:	f107 0318 	add.w	r3, r7, #24
 800a68a:	4618      	mov	r0, r3
 800a68c:	f000 f906 	bl	800a89c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800a690:	6a3b      	ldr	r3, [r7, #32]
 800a692:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800a694:	e0de      	b.n	800a854 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 800a696:	2300      	movs	r3, #0
 800a698:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a69a:	e0db      	b.n	800a854 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      default :
        {
          frequency = 0;
 800a69c:	2300      	movs	r3, #0
 800a69e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a6a0:	e0d8      	b.n	800a854 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a6a8:	f040 8085 	bne.w	800a7b6 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 800a6ac:	4b6c      	ldr	r3, [pc, #432]	; (800a860 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800a6ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a6b0:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800a6b4:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800a6b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6b8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a6bc:	d06b      	beq.n	800a796 <HAL_RCCEx_GetPeriphCLKFreq+0x8ca>
 800a6be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6c0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a6c4:	d874      	bhi.n	800a7b0 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 800a6c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a6cc:	d056      	beq.n	800a77c <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
 800a6ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a6d4:	d86c      	bhi.n	800a7b0 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 800a6d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6d8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a6dc:	d03b      	beq.n	800a756 <HAL_RCCEx_GetPeriphCLKFreq+0x88a>
 800a6de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6e0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a6e4:	d864      	bhi.n	800a7b0 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 800a6e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6e8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a6ec:	d021      	beq.n	800a732 <HAL_RCCEx_GetPeriphCLKFreq+0x866>
 800a6ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6f0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a6f4:	d85c      	bhi.n	800a7b0 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 800a6f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6f8:	2b00      	cmp	r3, #0
 800a6fa:	d004      	beq.n	800a706 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800a6fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6fe:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a702:	d004      	beq.n	800a70e <HAL_RCCEx_GetPeriphCLKFreq+0x842>
 800a704:	e054      	b.n	800a7b0 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800a706:	f000 f8b3 	bl	800a870 <HAL_RCCEx_GetD3PCLK1Freq>
 800a70a:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 800a70c:	e0a2      	b.n	800a854 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a70e:	4b54      	ldr	r3, [pc, #336]	; (800a860 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800a710:	681b      	ldr	r3, [r3, #0]
 800a712:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a716:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a71a:	d107      	bne.n	800a72c <HAL_RCCEx_GetPeriphCLKFreq+0x860>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a71c:	f107 0318 	add.w	r3, r7, #24
 800a720:	4618      	mov	r0, r3
 800a722:	f000 f8bb 	bl	800a89c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800a726:	69fb      	ldr	r3, [r7, #28]
 800a728:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800a72a:	e093      	b.n	800a854 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 800a72c:	2300      	movs	r3, #0
 800a72e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a730:	e090      	b.n	800a854 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a732:	4b4b      	ldr	r3, [pc, #300]	; (800a860 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800a734:	681b      	ldr	r3, [r3, #0]
 800a736:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a73a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a73e:	d107      	bne.n	800a750 <HAL_RCCEx_GetPeriphCLKFreq+0x884>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a740:	f107 030c 	add.w	r3, r7, #12
 800a744:	4618      	mov	r0, r3
 800a746:	f000 f9fd 	bl	800ab44 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800a74a:	693b      	ldr	r3, [r7, #16]
 800a74c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800a74e:	e081      	b.n	800a854 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 800a750:	2300      	movs	r3, #0
 800a752:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a754:	e07e      	b.n	800a854 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800a756:	4b42      	ldr	r3, [pc, #264]	; (800a860 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800a758:	681b      	ldr	r3, [r3, #0]
 800a75a:	f003 0304 	and.w	r3, r3, #4
 800a75e:	2b04      	cmp	r3, #4
 800a760:	d109      	bne.n	800a776 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
         {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a762:	4b3f      	ldr	r3, [pc, #252]	; (800a860 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800a764:	681b      	ldr	r3, [r3, #0]
 800a766:	08db      	lsrs	r3, r3, #3
 800a768:	f003 0303 	and.w	r3, r3, #3
 800a76c:	4a3d      	ldr	r2, [pc, #244]	; (800a864 <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 800a76e:	fa22 f303 	lsr.w	r3, r2, r3
 800a772:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800a774:	e06e      	b.n	800a854 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 800a776:	2300      	movs	r3, #0
 800a778:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a77a:	e06b      	b.n	800a854 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800a77c:	4b38      	ldr	r3, [pc, #224]	; (800a860 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800a77e:	681b      	ldr	r3, [r3, #0]
 800a780:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a784:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a788:	d102      	bne.n	800a790 <HAL_RCCEx_GetPeriphCLKFreq+0x8c4>
         {
          frequency = CSI_VALUE;
 800a78a:	4b37      	ldr	r3, [pc, #220]	; (800a868 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800a78c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a78e:	e061      	b.n	800a854 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800a790:	2300      	movs	r3, #0
 800a792:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a794:	e05e      	b.n	800a854 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800a796:	4b32      	ldr	r3, [pc, #200]	; (800a860 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800a798:	681b      	ldr	r3, [r3, #0]
 800a79a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a79e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a7a2:	d102      	bne.n	800a7aa <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
         {
          frequency = HSE_VALUE;
 800a7a4:	4b31      	ldr	r3, [pc, #196]	; (800a86c <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800a7a6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800a7a8:	e054      	b.n	800a854 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 800a7aa:	2300      	movs	r3, #0
 800a7ac:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a7ae:	e051      	b.n	800a854 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 800a7b0:	2300      	movs	r3, #0
 800a7b2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a7b4:	e04e      	b.n	800a854 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a7bc:	d148      	bne.n	800a850 <HAL_RCCEx_GetPeriphCLKFreq+0x984>
    {
      /* Get FDCAN clock source */
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
 800a7be:	4b28      	ldr	r3, [pc, #160]	; (800a860 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800a7c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a7c2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a7c6:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800a7c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7ca:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a7ce:	d02a      	beq.n	800a826 <HAL_RCCEx_GetPeriphCLKFreq+0x95a>
 800a7d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7d2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a7d6:	d838      	bhi.n	800a84a <HAL_RCCEx_GetPeriphCLKFreq+0x97e>
 800a7d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7da:	2b00      	cmp	r3, #0
 800a7dc:	d004      	beq.n	800a7e8 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
 800a7de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7e0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a7e4:	d00d      	beq.n	800a802 <HAL_RCCEx_GetPeriphCLKFreq+0x936>
 800a7e6:	e030      	b.n	800a84a <HAL_RCCEx_GetPeriphCLKFreq+0x97e>
      {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800a7e8:	4b1d      	ldr	r3, [pc, #116]	; (800a860 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800a7ea:	681b      	ldr	r3, [r3, #0]
 800a7ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a7f0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a7f4:	d102      	bne.n	800a7fc <HAL_RCCEx_GetPeriphCLKFreq+0x930>
         {
          frequency = HSE_VALUE;
 800a7f6:	4b1d      	ldr	r3, [pc, #116]	; (800a86c <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800a7f8:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800a7fa:	e02b      	b.n	800a854 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 800a7fc:	2300      	movs	r3, #0
 800a7fe:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a800:	e028      	b.n	800a854 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a802:	4b17      	ldr	r3, [pc, #92]	; (800a860 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800a804:	681b      	ldr	r3, [r3, #0]
 800a806:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a80a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a80e:	d107      	bne.n	800a820 <HAL_RCCEx_GetPeriphCLKFreq+0x954>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a810:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a814:	4618      	mov	r0, r3
 800a816:	f000 fae9 	bl	800adec <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a81a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a81c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800a81e:	e019      	b.n	800a854 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 800a820:	2300      	movs	r3, #0
 800a822:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a824:	e016      	b.n	800a854 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a826:	4b0e      	ldr	r3, [pc, #56]	; (800a860 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800a828:	681b      	ldr	r3, [r3, #0]
 800a82a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a82e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a832:	d107      	bne.n	800a844 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a834:	f107 0318 	add.w	r3, r7, #24
 800a838:	4618      	mov	r0, r3
 800a83a:	f000 f82f 	bl	800a89c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800a83e:	69fb      	ldr	r3, [r7, #28]
 800a840:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800a842:	e007      	b.n	800a854 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 800a844:	2300      	movs	r3, #0
 800a846:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a848:	e004      	b.n	800a854 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      default :
        {
          frequency = 0;
 800a84a:	2300      	movs	r3, #0
 800a84c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a84e:	e001      	b.n	800a854 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else
    {
      frequency = 0;
 800a850:	2300      	movs	r3, #0
 800a852:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 800a854:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800a856:	4618      	mov	r0, r3
 800a858:	3740      	adds	r7, #64	; 0x40
 800a85a:	46bd      	mov	sp, r7
 800a85c:	bd80      	pop	{r7, pc}
 800a85e:	bf00      	nop
 800a860:	58024400 	.word	0x58024400
 800a864:	03d09000 	.word	0x03d09000
 800a868:	003d0900 	.word	0x003d0900
 800a86c:	007a1200 	.word	0x007a1200

0800a870 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800a870:	b580      	push	{r7, lr}
 800a872:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800a874:	f7fe fb46 	bl	8008f04 <HAL_RCC_GetHCLKFreq>
 800a878:	4602      	mov	r2, r0
 800a87a:	4b06      	ldr	r3, [pc, #24]	; (800a894 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800a87c:	6a1b      	ldr	r3, [r3, #32]
 800a87e:	091b      	lsrs	r3, r3, #4
 800a880:	f003 0307 	and.w	r3, r3, #7
 800a884:	4904      	ldr	r1, [pc, #16]	; (800a898 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800a886:	5ccb      	ldrb	r3, [r1, r3]
 800a888:	f003 031f 	and.w	r3, r3, #31
 800a88c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800a890:	4618      	mov	r0, r3
 800a892:	bd80      	pop	{r7, pc}
 800a894:	58024400 	.word	0x58024400
 800a898:	0801ed68 	.word	0x0801ed68

0800a89c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 800a89c:	b480      	push	{r7}
 800a89e:	b089      	sub	sp, #36	; 0x24
 800a8a0:	af00      	add	r7, sp, #0
 800a8a2:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a8a4:	4ba1      	ldr	r3, [pc, #644]	; (800ab2c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a8a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a8a8:	f003 0303 	and.w	r3, r3, #3
 800a8ac:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800a8ae:	4b9f      	ldr	r3, [pc, #636]	; (800ab2c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a8b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a8b2:	0b1b      	lsrs	r3, r3, #12
 800a8b4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a8b8:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800a8ba:	4b9c      	ldr	r3, [pc, #624]	; (800ab2c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a8bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a8be:	091b      	lsrs	r3, r3, #4
 800a8c0:	f003 0301 	and.w	r3, r3, #1
 800a8c4:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800a8c6:	4b99      	ldr	r3, [pc, #612]	; (800ab2c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a8c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a8ca:	08db      	lsrs	r3, r3, #3
 800a8cc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a8d0:	693a      	ldr	r2, [r7, #16]
 800a8d2:	fb02 f303 	mul.w	r3, r2, r3
 800a8d6:	ee07 3a90 	vmov	s15, r3
 800a8da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a8de:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800a8e2:	697b      	ldr	r3, [r7, #20]
 800a8e4:	2b00      	cmp	r3, #0
 800a8e6:	f000 8111 	beq.w	800ab0c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800a8ea:	69bb      	ldr	r3, [r7, #24]
 800a8ec:	2b02      	cmp	r3, #2
 800a8ee:	f000 8083 	beq.w	800a9f8 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800a8f2:	69bb      	ldr	r3, [r7, #24]
 800a8f4:	2b02      	cmp	r3, #2
 800a8f6:	f200 80a1 	bhi.w	800aa3c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800a8fa:	69bb      	ldr	r3, [r7, #24]
 800a8fc:	2b00      	cmp	r3, #0
 800a8fe:	d003      	beq.n	800a908 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800a900:	69bb      	ldr	r3, [r7, #24]
 800a902:	2b01      	cmp	r3, #1
 800a904:	d056      	beq.n	800a9b4 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800a906:	e099      	b.n	800aa3c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a908:	4b88      	ldr	r3, [pc, #544]	; (800ab2c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a90a:	681b      	ldr	r3, [r3, #0]
 800a90c:	f003 0320 	and.w	r3, r3, #32
 800a910:	2b00      	cmp	r3, #0
 800a912:	d02d      	beq.n	800a970 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a914:	4b85      	ldr	r3, [pc, #532]	; (800ab2c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a916:	681b      	ldr	r3, [r3, #0]
 800a918:	08db      	lsrs	r3, r3, #3
 800a91a:	f003 0303 	and.w	r3, r3, #3
 800a91e:	4a84      	ldr	r2, [pc, #528]	; (800ab30 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800a920:	fa22 f303 	lsr.w	r3, r2, r3
 800a924:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800a926:	68bb      	ldr	r3, [r7, #8]
 800a928:	ee07 3a90 	vmov	s15, r3
 800a92c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a930:	697b      	ldr	r3, [r7, #20]
 800a932:	ee07 3a90 	vmov	s15, r3
 800a936:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a93a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a93e:	4b7b      	ldr	r3, [pc, #492]	; (800ab2c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a940:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a942:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a946:	ee07 3a90 	vmov	s15, r3
 800a94a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a94e:	ed97 6a03 	vldr	s12, [r7, #12]
 800a952:	eddf 5a78 	vldr	s11, [pc, #480]	; 800ab34 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a956:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a95a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a95e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a962:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a966:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a96a:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800a96e:	e087      	b.n	800aa80 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800a970:	697b      	ldr	r3, [r7, #20]
 800a972:	ee07 3a90 	vmov	s15, r3
 800a976:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a97a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800ab38 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800a97e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a982:	4b6a      	ldr	r3, [pc, #424]	; (800ab2c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a984:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a986:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a98a:	ee07 3a90 	vmov	s15, r3
 800a98e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a992:	ed97 6a03 	vldr	s12, [r7, #12]
 800a996:	eddf 5a67 	vldr	s11, [pc, #412]	; 800ab34 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a99a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a99e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a9a2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a9a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a9aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a9ae:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a9b2:	e065      	b.n	800aa80 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800a9b4:	697b      	ldr	r3, [r7, #20]
 800a9b6:	ee07 3a90 	vmov	s15, r3
 800a9ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a9be:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800ab3c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800a9c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a9c6:	4b59      	ldr	r3, [pc, #356]	; (800ab2c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a9c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a9ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a9ce:	ee07 3a90 	vmov	s15, r3
 800a9d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a9d6:	ed97 6a03 	vldr	s12, [r7, #12]
 800a9da:	eddf 5a56 	vldr	s11, [pc, #344]	; 800ab34 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a9de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a9e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a9e6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a9ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a9ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a9f2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a9f6:	e043      	b.n	800aa80 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800a9f8:	697b      	ldr	r3, [r7, #20]
 800a9fa:	ee07 3a90 	vmov	s15, r3
 800a9fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aa02:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800ab40 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800aa06:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aa0a:	4b48      	ldr	r3, [pc, #288]	; (800ab2c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800aa0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aa12:	ee07 3a90 	vmov	s15, r3
 800aa16:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aa1a:	ed97 6a03 	vldr	s12, [r7, #12]
 800aa1e:	eddf 5a45 	vldr	s11, [pc, #276]	; 800ab34 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800aa22:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800aa26:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800aa2a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800aa2e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800aa32:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aa36:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800aa3a:	e021      	b.n	800aa80 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800aa3c:	697b      	ldr	r3, [r7, #20]
 800aa3e:	ee07 3a90 	vmov	s15, r3
 800aa42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aa46:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800ab3c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800aa4a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aa4e:	4b37      	ldr	r3, [pc, #220]	; (800ab2c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800aa50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aa56:	ee07 3a90 	vmov	s15, r3
 800aa5a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aa5e:	ed97 6a03 	vldr	s12, [r7, #12]
 800aa62:	eddf 5a34 	vldr	s11, [pc, #208]	; 800ab34 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800aa66:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800aa6a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800aa6e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800aa72:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800aa76:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aa7a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800aa7e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 800aa80:	4b2a      	ldr	r3, [pc, #168]	; (800ab2c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800aa82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa84:	0a5b      	lsrs	r3, r3, #9
 800aa86:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800aa8a:	ee07 3a90 	vmov	s15, r3
 800aa8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aa92:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800aa96:	ee37 7a87 	vadd.f32	s14, s15, s14
 800aa9a:	edd7 6a07 	vldr	s13, [r7, #28]
 800aa9e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800aaa2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800aaa6:	ee17 2a90 	vmov	r2, s15
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800aaae:	4b1f      	ldr	r3, [pc, #124]	; (800ab2c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800aab0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aab2:	0c1b      	lsrs	r3, r3, #16
 800aab4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800aab8:	ee07 3a90 	vmov	s15, r3
 800aabc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aac0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800aac4:	ee37 7a87 	vadd.f32	s14, s15, s14
 800aac8:	edd7 6a07 	vldr	s13, [r7, #28]
 800aacc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800aad0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800aad4:	ee17 2a90 	vmov	r2, s15
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 800aadc:	4b13      	ldr	r3, [pc, #76]	; (800ab2c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800aade:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aae0:	0e1b      	lsrs	r3, r3, #24
 800aae2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800aae6:	ee07 3a90 	vmov	s15, r3
 800aaea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aaee:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800aaf2:	ee37 7a87 	vadd.f32	s14, s15, s14
 800aaf6:	edd7 6a07 	vldr	s13, [r7, #28]
 800aafa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800aafe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ab02:	ee17 2a90 	vmov	r2, s15
 800ab06:	687b      	ldr	r3, [r7, #4]
 800ab08:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800ab0a:	e008      	b.n	800ab1e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	2200      	movs	r2, #0
 800ab10:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	2200      	movs	r2, #0
 800ab16:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	2200      	movs	r2, #0
 800ab1c:	609a      	str	r2, [r3, #8]
}
 800ab1e:	bf00      	nop
 800ab20:	3724      	adds	r7, #36	; 0x24
 800ab22:	46bd      	mov	sp, r7
 800ab24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab28:	4770      	bx	lr
 800ab2a:	bf00      	nop
 800ab2c:	58024400 	.word	0x58024400
 800ab30:	03d09000 	.word	0x03d09000
 800ab34:	46000000 	.word	0x46000000
 800ab38:	4c742400 	.word	0x4c742400
 800ab3c:	4a742400 	.word	0x4a742400
 800ab40:	4af42400 	.word	0x4af42400

0800ab44 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 800ab44:	b480      	push	{r7}
 800ab46:	b089      	sub	sp, #36	; 0x24
 800ab48:	af00      	add	r7, sp, #0
 800ab4a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800ab4c:	4ba1      	ldr	r3, [pc, #644]	; (800add4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ab4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ab50:	f003 0303 	and.w	r3, r3, #3
 800ab54:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800ab56:	4b9f      	ldr	r3, [pc, #636]	; (800add4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ab58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ab5a:	0d1b      	lsrs	r3, r3, #20
 800ab5c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ab60:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800ab62:	4b9c      	ldr	r3, [pc, #624]	; (800add4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ab64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab66:	0a1b      	lsrs	r3, r3, #8
 800ab68:	f003 0301 	and.w	r3, r3, #1
 800ab6c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800ab6e:	4b99      	ldr	r3, [pc, #612]	; (800add4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ab70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ab72:	08db      	lsrs	r3, r3, #3
 800ab74:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ab78:	693a      	ldr	r2, [r7, #16]
 800ab7a:	fb02 f303 	mul.w	r3, r2, r3
 800ab7e:	ee07 3a90 	vmov	s15, r3
 800ab82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ab86:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800ab8a:	697b      	ldr	r3, [r7, #20]
 800ab8c:	2b00      	cmp	r3, #0
 800ab8e:	f000 8111 	beq.w	800adb4 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800ab92:	69bb      	ldr	r3, [r7, #24]
 800ab94:	2b02      	cmp	r3, #2
 800ab96:	f000 8083 	beq.w	800aca0 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800ab9a:	69bb      	ldr	r3, [r7, #24]
 800ab9c:	2b02      	cmp	r3, #2
 800ab9e:	f200 80a1 	bhi.w	800ace4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800aba2:	69bb      	ldr	r3, [r7, #24]
 800aba4:	2b00      	cmp	r3, #0
 800aba6:	d003      	beq.n	800abb0 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800aba8:	69bb      	ldr	r3, [r7, #24]
 800abaa:	2b01      	cmp	r3, #1
 800abac:	d056      	beq.n	800ac5c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800abae:	e099      	b.n	800ace4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800abb0:	4b88      	ldr	r3, [pc, #544]	; (800add4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800abb2:	681b      	ldr	r3, [r3, #0]
 800abb4:	f003 0320 	and.w	r3, r3, #32
 800abb8:	2b00      	cmp	r3, #0
 800abba:	d02d      	beq.n	800ac18 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800abbc:	4b85      	ldr	r3, [pc, #532]	; (800add4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800abbe:	681b      	ldr	r3, [r3, #0]
 800abc0:	08db      	lsrs	r3, r3, #3
 800abc2:	f003 0303 	and.w	r3, r3, #3
 800abc6:	4a84      	ldr	r2, [pc, #528]	; (800add8 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800abc8:	fa22 f303 	lsr.w	r3, r2, r3
 800abcc:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800abce:	68bb      	ldr	r3, [r7, #8]
 800abd0:	ee07 3a90 	vmov	s15, r3
 800abd4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800abd8:	697b      	ldr	r3, [r7, #20]
 800abda:	ee07 3a90 	vmov	s15, r3
 800abde:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800abe2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800abe6:	4b7b      	ldr	r3, [pc, #492]	; (800add4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800abe8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800abea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800abee:	ee07 3a90 	vmov	s15, r3
 800abf2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800abf6:	ed97 6a03 	vldr	s12, [r7, #12]
 800abfa:	eddf 5a78 	vldr	s11, [pc, #480]	; 800addc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800abfe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ac02:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ac06:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ac0a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ac0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ac12:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800ac16:	e087      	b.n	800ad28 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800ac18:	697b      	ldr	r3, [r7, #20]
 800ac1a:	ee07 3a90 	vmov	s15, r3
 800ac1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ac22:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800ade0 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800ac26:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ac2a:	4b6a      	ldr	r3, [pc, #424]	; (800add4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ac2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ac32:	ee07 3a90 	vmov	s15, r3
 800ac36:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ac3a:	ed97 6a03 	vldr	s12, [r7, #12]
 800ac3e:	eddf 5a67 	vldr	s11, [pc, #412]	; 800addc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800ac42:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ac46:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ac4a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ac4e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ac52:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ac56:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800ac5a:	e065      	b.n	800ad28 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800ac5c:	697b      	ldr	r3, [r7, #20]
 800ac5e:	ee07 3a90 	vmov	s15, r3
 800ac62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ac66:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800ade4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800ac6a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ac6e:	4b59      	ldr	r3, [pc, #356]	; (800add4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ac70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ac76:	ee07 3a90 	vmov	s15, r3
 800ac7a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ac7e:	ed97 6a03 	vldr	s12, [r7, #12]
 800ac82:	eddf 5a56 	vldr	s11, [pc, #344]	; 800addc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800ac86:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ac8a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ac8e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ac92:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ac96:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ac9a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800ac9e:	e043      	b.n	800ad28 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800aca0:	697b      	ldr	r3, [r7, #20]
 800aca2:	ee07 3a90 	vmov	s15, r3
 800aca6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800acaa:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800ade8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800acae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800acb2:	4b48      	ldr	r3, [pc, #288]	; (800add4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800acb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800acb6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800acba:	ee07 3a90 	vmov	s15, r3
 800acbe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800acc2:	ed97 6a03 	vldr	s12, [r7, #12]
 800acc6:	eddf 5a45 	vldr	s11, [pc, #276]	; 800addc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800acca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800acce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800acd2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800acd6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800acda:	ee67 7a27 	vmul.f32	s15, s14, s15
 800acde:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800ace2:	e021      	b.n	800ad28 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800ace4:	697b      	ldr	r3, [r7, #20]
 800ace6:	ee07 3a90 	vmov	s15, r3
 800acea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800acee:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800ade4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800acf2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800acf6:	4b37      	ldr	r3, [pc, #220]	; (800add4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800acf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800acfa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800acfe:	ee07 3a90 	vmov	s15, r3
 800ad02:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ad06:	ed97 6a03 	vldr	s12, [r7, #12]
 800ad0a:	eddf 5a34 	vldr	s11, [pc, #208]	; 800addc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800ad0e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ad12:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ad16:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ad1a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ad1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ad22:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800ad26:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 800ad28:	4b2a      	ldr	r3, [pc, #168]	; (800add4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ad2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad2c:	0a5b      	lsrs	r3, r3, #9
 800ad2e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ad32:	ee07 3a90 	vmov	s15, r3
 800ad36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ad3a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ad3e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ad42:	edd7 6a07 	vldr	s13, [r7, #28]
 800ad46:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ad4a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ad4e:	ee17 2a90 	vmov	r2, s15
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800ad56:	4b1f      	ldr	r3, [pc, #124]	; (800add4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ad58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad5a:	0c1b      	lsrs	r3, r3, #16
 800ad5c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ad60:	ee07 3a90 	vmov	s15, r3
 800ad64:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ad68:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ad6c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ad70:	edd7 6a07 	vldr	s13, [r7, #28]
 800ad74:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ad78:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ad7c:	ee17 2a90 	vmov	r2, s15
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 800ad84:	4b13      	ldr	r3, [pc, #76]	; (800add4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ad86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad88:	0e1b      	lsrs	r3, r3, #24
 800ad8a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ad8e:	ee07 3a90 	vmov	s15, r3
 800ad92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ad96:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ad9a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ad9e:	edd7 6a07 	vldr	s13, [r7, #28]
 800ada2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ada6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800adaa:	ee17 2a90 	vmov	r2, s15
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800adb2:	e008      	b.n	800adc6 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	2200      	movs	r2, #0
 800adb8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	2200      	movs	r2, #0
 800adbe:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	2200      	movs	r2, #0
 800adc4:	609a      	str	r2, [r3, #8]
}
 800adc6:	bf00      	nop
 800adc8:	3724      	adds	r7, #36	; 0x24
 800adca:	46bd      	mov	sp, r7
 800adcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800add0:	4770      	bx	lr
 800add2:	bf00      	nop
 800add4:	58024400 	.word	0x58024400
 800add8:	03d09000 	.word	0x03d09000
 800addc:	46000000 	.word	0x46000000
 800ade0:	4c742400 	.word	0x4c742400
 800ade4:	4a742400 	.word	0x4a742400
 800ade8:	4af42400 	.word	0x4af42400

0800adec <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 800adec:	b480      	push	{r7}
 800adee:	b089      	sub	sp, #36	; 0x24
 800adf0:	af00      	add	r7, sp, #0
 800adf2:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800adf4:	4ba0      	ldr	r3, [pc, #640]	; (800b078 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800adf6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800adf8:	f003 0303 	and.w	r3, r3, #3
 800adfc:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 800adfe:	4b9e      	ldr	r3, [pc, #632]	; (800b078 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ae00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ae02:	091b      	lsrs	r3, r3, #4
 800ae04:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ae08:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800ae0a:	4b9b      	ldr	r3, [pc, #620]	; (800b078 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ae0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae0e:	f003 0301 	and.w	r3, r3, #1
 800ae12:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800ae14:	4b98      	ldr	r3, [pc, #608]	; (800b078 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ae16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ae18:	08db      	lsrs	r3, r3, #3
 800ae1a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ae1e:	693a      	ldr	r2, [r7, #16]
 800ae20:	fb02 f303 	mul.w	r3, r2, r3
 800ae24:	ee07 3a90 	vmov	s15, r3
 800ae28:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ae2c:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800ae30:	697b      	ldr	r3, [r7, #20]
 800ae32:	2b00      	cmp	r3, #0
 800ae34:	f000 8111 	beq.w	800b05a <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800ae38:	69bb      	ldr	r3, [r7, #24]
 800ae3a:	2b02      	cmp	r3, #2
 800ae3c:	f000 8083 	beq.w	800af46 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800ae40:	69bb      	ldr	r3, [r7, #24]
 800ae42:	2b02      	cmp	r3, #2
 800ae44:	f200 80a1 	bhi.w	800af8a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800ae48:	69bb      	ldr	r3, [r7, #24]
 800ae4a:	2b00      	cmp	r3, #0
 800ae4c:	d003      	beq.n	800ae56 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800ae4e:	69bb      	ldr	r3, [r7, #24]
 800ae50:	2b01      	cmp	r3, #1
 800ae52:	d056      	beq.n	800af02 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800ae54:	e099      	b.n	800af8a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ae56:	4b88      	ldr	r3, [pc, #544]	; (800b078 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ae58:	681b      	ldr	r3, [r3, #0]
 800ae5a:	f003 0320 	and.w	r3, r3, #32
 800ae5e:	2b00      	cmp	r3, #0
 800ae60:	d02d      	beq.n	800aebe <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800ae62:	4b85      	ldr	r3, [pc, #532]	; (800b078 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ae64:	681b      	ldr	r3, [r3, #0]
 800ae66:	08db      	lsrs	r3, r3, #3
 800ae68:	f003 0303 	and.w	r3, r3, #3
 800ae6c:	4a83      	ldr	r2, [pc, #524]	; (800b07c <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800ae6e:	fa22 f303 	lsr.w	r3, r2, r3
 800ae72:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800ae74:	68bb      	ldr	r3, [r7, #8]
 800ae76:	ee07 3a90 	vmov	s15, r3
 800ae7a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ae7e:	697b      	ldr	r3, [r7, #20]
 800ae80:	ee07 3a90 	vmov	s15, r3
 800ae84:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ae88:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ae8c:	4b7a      	ldr	r3, [pc, #488]	; (800b078 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ae8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ae90:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ae94:	ee07 3a90 	vmov	s15, r3
 800ae98:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ae9c:	ed97 6a03 	vldr	s12, [r7, #12]
 800aea0:	eddf 5a77 	vldr	s11, [pc, #476]	; 800b080 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800aea4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800aea8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800aeac:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800aeb0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800aeb4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aeb8:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800aebc:	e087      	b.n	800afce <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800aebe:	697b      	ldr	r3, [r7, #20]
 800aec0:	ee07 3a90 	vmov	s15, r3
 800aec4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aec8:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800b084 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800aecc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aed0:	4b69      	ldr	r3, [pc, #420]	; (800b078 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800aed2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aed4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aed8:	ee07 3a90 	vmov	s15, r3
 800aedc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aee0:	ed97 6a03 	vldr	s12, [r7, #12]
 800aee4:	eddf 5a66 	vldr	s11, [pc, #408]	; 800b080 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800aee8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800aeec:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800aef0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800aef4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800aef8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aefc:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800af00:	e065      	b.n	800afce <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800af02:	697b      	ldr	r3, [r7, #20]
 800af04:	ee07 3a90 	vmov	s15, r3
 800af08:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800af0c:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800b088 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800af10:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800af14:	4b58      	ldr	r3, [pc, #352]	; (800b078 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800af16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800af18:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800af1c:	ee07 3a90 	vmov	s15, r3
 800af20:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800af24:	ed97 6a03 	vldr	s12, [r7, #12]
 800af28:	eddf 5a55 	vldr	s11, [pc, #340]	; 800b080 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800af2c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800af30:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800af34:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800af38:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800af3c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800af40:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800af44:	e043      	b.n	800afce <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800af46:	697b      	ldr	r3, [r7, #20]
 800af48:	ee07 3a90 	vmov	s15, r3
 800af4c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800af50:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800b08c <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800af54:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800af58:	4b47      	ldr	r3, [pc, #284]	; (800b078 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800af5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800af5c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800af60:	ee07 3a90 	vmov	s15, r3
 800af64:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800af68:	ed97 6a03 	vldr	s12, [r7, #12]
 800af6c:	eddf 5a44 	vldr	s11, [pc, #272]	; 800b080 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800af70:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800af74:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800af78:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800af7c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800af80:	ee67 7a27 	vmul.f32	s15, s14, s15
 800af84:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800af88:	e021      	b.n	800afce <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    default:
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800af8a:	697b      	ldr	r3, [r7, #20]
 800af8c:	ee07 3a90 	vmov	s15, r3
 800af90:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800af94:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800b084 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800af98:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800af9c:	4b36      	ldr	r3, [pc, #216]	; (800b078 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800af9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800afa0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800afa4:	ee07 3a90 	vmov	s15, r3
 800afa8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800afac:	ed97 6a03 	vldr	s12, [r7, #12]
 800afb0:	eddf 5a33 	vldr	s11, [pc, #204]	; 800b080 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800afb4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800afb8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800afbc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800afc0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800afc4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800afc8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800afcc:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 800afce:	4b2a      	ldr	r3, [pc, #168]	; (800b078 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800afd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800afd2:	0a5b      	lsrs	r3, r3, #9
 800afd4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800afd8:	ee07 3a90 	vmov	s15, r3
 800afdc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800afe0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800afe4:	ee37 7a87 	vadd.f32	s14, s15, s14
 800afe8:	edd7 6a07 	vldr	s13, [r7, #28]
 800afec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800aff0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800aff4:	ee17 2a90 	vmov	r2, s15
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 800affc:	4b1e      	ldr	r3, [pc, #120]	; (800b078 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800affe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b000:	0c1b      	lsrs	r3, r3, #16
 800b002:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b006:	ee07 3a90 	vmov	s15, r3
 800b00a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b00e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b012:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b016:	edd7 6a07 	vldr	s13, [r7, #28]
 800b01a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b01e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b022:	ee17 2a90 	vmov	r2, s15
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 800b02a:	4b13      	ldr	r3, [pc, #76]	; (800b078 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b02c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b02e:	0e1b      	lsrs	r3, r3, #24
 800b030:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b034:	ee07 3a90 	vmov	s15, r3
 800b038:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b03c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b040:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b044:	edd7 6a07 	vldr	s13, [r7, #28]
 800b048:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b04c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b050:	ee17 2a90 	vmov	r2, s15
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800b058:	e008      	b.n	800b06c <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	2200      	movs	r2, #0
 800b05e:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	2200      	movs	r2, #0
 800b064:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	2200      	movs	r2, #0
 800b06a:	609a      	str	r2, [r3, #8]
}
 800b06c:	bf00      	nop
 800b06e:	3724      	adds	r7, #36	; 0x24
 800b070:	46bd      	mov	sp, r7
 800b072:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b076:	4770      	bx	lr
 800b078:	58024400 	.word	0x58024400
 800b07c:	03d09000 	.word	0x03d09000
 800b080:	46000000 	.word	0x46000000
 800b084:	4c742400 	.word	0x4c742400
 800b088:	4a742400 	.word	0x4a742400
 800b08c:	4af42400 	.word	0x4af42400

0800b090 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800b090:	b580      	push	{r7, lr}
 800b092:	b084      	sub	sp, #16
 800b094:	af00      	add	r7, sp, #0
 800b096:	6078      	str	r0, [r7, #4]
 800b098:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800b09a:	2300      	movs	r3, #0
 800b09c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800b09e:	4b53      	ldr	r3, [pc, #332]	; (800b1ec <RCCEx_PLL2_Config+0x15c>)
 800b0a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b0a2:	f003 0303 	and.w	r3, r3, #3
 800b0a6:	2b03      	cmp	r3, #3
 800b0a8:	d101      	bne.n	800b0ae <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800b0aa:	2301      	movs	r3, #1
 800b0ac:	e099      	b.n	800b1e2 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800b0ae:	4b4f      	ldr	r3, [pc, #316]	; (800b1ec <RCCEx_PLL2_Config+0x15c>)
 800b0b0:	681b      	ldr	r3, [r3, #0]
 800b0b2:	4a4e      	ldr	r2, [pc, #312]	; (800b1ec <RCCEx_PLL2_Config+0x15c>)
 800b0b4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800b0b8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b0ba:	f7f9 f98d 	bl	80043d8 <HAL_GetTick>
 800b0be:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800b0c0:	e008      	b.n	800b0d4 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800b0c2:	f7f9 f989 	bl	80043d8 <HAL_GetTick>
 800b0c6:	4602      	mov	r2, r0
 800b0c8:	68bb      	ldr	r3, [r7, #8]
 800b0ca:	1ad3      	subs	r3, r2, r3
 800b0cc:	2b02      	cmp	r3, #2
 800b0ce:	d901      	bls.n	800b0d4 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800b0d0:	2303      	movs	r3, #3
 800b0d2:	e086      	b.n	800b1e2 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800b0d4:	4b45      	ldr	r3, [pc, #276]	; (800b1ec <RCCEx_PLL2_Config+0x15c>)
 800b0d6:	681b      	ldr	r3, [r3, #0]
 800b0d8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b0dc:	2b00      	cmp	r3, #0
 800b0de:	d1f0      	bne.n	800b0c2 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800b0e0:	4b42      	ldr	r3, [pc, #264]	; (800b1ec <RCCEx_PLL2_Config+0x15c>)
 800b0e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b0e4:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	681b      	ldr	r3, [r3, #0]
 800b0ec:	031b      	lsls	r3, r3, #12
 800b0ee:	493f      	ldr	r1, [pc, #252]	; (800b1ec <RCCEx_PLL2_Config+0x15c>)
 800b0f0:	4313      	orrs	r3, r2
 800b0f2:	628b      	str	r3, [r1, #40]	; 0x28
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	685b      	ldr	r3, [r3, #4]
 800b0f8:	3b01      	subs	r3, #1
 800b0fa:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	689b      	ldr	r3, [r3, #8]
 800b102:	3b01      	subs	r3, #1
 800b104:	025b      	lsls	r3, r3, #9
 800b106:	b29b      	uxth	r3, r3
 800b108:	431a      	orrs	r2, r3
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	68db      	ldr	r3, [r3, #12]
 800b10e:	3b01      	subs	r3, #1
 800b110:	041b      	lsls	r3, r3, #16
 800b112:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800b116:	431a      	orrs	r2, r3
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	691b      	ldr	r3, [r3, #16]
 800b11c:	3b01      	subs	r3, #1
 800b11e:	061b      	lsls	r3, r3, #24
 800b120:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800b124:	4931      	ldr	r1, [pc, #196]	; (800b1ec <RCCEx_PLL2_Config+0x15c>)
 800b126:	4313      	orrs	r3, r2
 800b128:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800b12a:	4b30      	ldr	r3, [pc, #192]	; (800b1ec <RCCEx_PLL2_Config+0x15c>)
 800b12c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b12e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	695b      	ldr	r3, [r3, #20]
 800b136:	492d      	ldr	r1, [pc, #180]	; (800b1ec <RCCEx_PLL2_Config+0x15c>)
 800b138:	4313      	orrs	r3, r2
 800b13a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800b13c:	4b2b      	ldr	r3, [pc, #172]	; (800b1ec <RCCEx_PLL2_Config+0x15c>)
 800b13e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b140:	f023 0220 	bic.w	r2, r3, #32
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	699b      	ldr	r3, [r3, #24]
 800b148:	4928      	ldr	r1, [pc, #160]	; (800b1ec <RCCEx_PLL2_Config+0x15c>)
 800b14a:	4313      	orrs	r3, r2
 800b14c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800b14e:	4b27      	ldr	r3, [pc, #156]	; (800b1ec <RCCEx_PLL2_Config+0x15c>)
 800b150:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b152:	4a26      	ldr	r2, [pc, #152]	; (800b1ec <RCCEx_PLL2_Config+0x15c>)
 800b154:	f023 0310 	bic.w	r3, r3, #16
 800b158:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800b15a:	4b24      	ldr	r3, [pc, #144]	; (800b1ec <RCCEx_PLL2_Config+0x15c>)
 800b15c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b15e:	4b24      	ldr	r3, [pc, #144]	; (800b1f0 <RCCEx_PLL2_Config+0x160>)
 800b160:	4013      	ands	r3, r2
 800b162:	687a      	ldr	r2, [r7, #4]
 800b164:	69d2      	ldr	r2, [r2, #28]
 800b166:	00d2      	lsls	r2, r2, #3
 800b168:	4920      	ldr	r1, [pc, #128]	; (800b1ec <RCCEx_PLL2_Config+0x15c>)
 800b16a:	4313      	orrs	r3, r2
 800b16c:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800b16e:	4b1f      	ldr	r3, [pc, #124]	; (800b1ec <RCCEx_PLL2_Config+0x15c>)
 800b170:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b172:	4a1e      	ldr	r2, [pc, #120]	; (800b1ec <RCCEx_PLL2_Config+0x15c>)
 800b174:	f043 0310 	orr.w	r3, r3, #16
 800b178:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800b17a:	683b      	ldr	r3, [r7, #0]
 800b17c:	2b00      	cmp	r3, #0
 800b17e:	d106      	bne.n	800b18e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800b180:	4b1a      	ldr	r3, [pc, #104]	; (800b1ec <RCCEx_PLL2_Config+0x15c>)
 800b182:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b184:	4a19      	ldr	r2, [pc, #100]	; (800b1ec <RCCEx_PLL2_Config+0x15c>)
 800b186:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b18a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800b18c:	e00f      	b.n	800b1ae <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800b18e:	683b      	ldr	r3, [r7, #0]
 800b190:	2b01      	cmp	r3, #1
 800b192:	d106      	bne.n	800b1a2 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800b194:	4b15      	ldr	r3, [pc, #84]	; (800b1ec <RCCEx_PLL2_Config+0x15c>)
 800b196:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b198:	4a14      	ldr	r2, [pc, #80]	; (800b1ec <RCCEx_PLL2_Config+0x15c>)
 800b19a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b19e:	62d3      	str	r3, [r2, #44]	; 0x2c
 800b1a0:	e005      	b.n	800b1ae <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800b1a2:	4b12      	ldr	r3, [pc, #72]	; (800b1ec <RCCEx_PLL2_Config+0x15c>)
 800b1a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b1a6:	4a11      	ldr	r2, [pc, #68]	; (800b1ec <RCCEx_PLL2_Config+0x15c>)
 800b1a8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800b1ac:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800b1ae:	4b0f      	ldr	r3, [pc, #60]	; (800b1ec <RCCEx_PLL2_Config+0x15c>)
 800b1b0:	681b      	ldr	r3, [r3, #0]
 800b1b2:	4a0e      	ldr	r2, [pc, #56]	; (800b1ec <RCCEx_PLL2_Config+0x15c>)
 800b1b4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800b1b8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b1ba:	f7f9 f90d 	bl	80043d8 <HAL_GetTick>
 800b1be:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800b1c0:	e008      	b.n	800b1d4 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800b1c2:	f7f9 f909 	bl	80043d8 <HAL_GetTick>
 800b1c6:	4602      	mov	r2, r0
 800b1c8:	68bb      	ldr	r3, [r7, #8]
 800b1ca:	1ad3      	subs	r3, r2, r3
 800b1cc:	2b02      	cmp	r3, #2
 800b1ce:	d901      	bls.n	800b1d4 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800b1d0:	2303      	movs	r3, #3
 800b1d2:	e006      	b.n	800b1e2 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800b1d4:	4b05      	ldr	r3, [pc, #20]	; (800b1ec <RCCEx_PLL2_Config+0x15c>)
 800b1d6:	681b      	ldr	r3, [r3, #0]
 800b1d8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b1dc:	2b00      	cmp	r3, #0
 800b1de:	d0f0      	beq.n	800b1c2 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800b1e0:	7bfb      	ldrb	r3, [r7, #15]
}
 800b1e2:	4618      	mov	r0, r3
 800b1e4:	3710      	adds	r7, #16
 800b1e6:	46bd      	mov	sp, r7
 800b1e8:	bd80      	pop	{r7, pc}
 800b1ea:	bf00      	nop
 800b1ec:	58024400 	.word	0x58024400
 800b1f0:	ffff0007 	.word	0xffff0007

0800b1f4 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800b1f4:	b580      	push	{r7, lr}
 800b1f6:	b084      	sub	sp, #16
 800b1f8:	af00      	add	r7, sp, #0
 800b1fa:	6078      	str	r0, [r7, #4]
 800b1fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800b1fe:	2300      	movs	r3, #0
 800b200:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800b202:	4b53      	ldr	r3, [pc, #332]	; (800b350 <RCCEx_PLL3_Config+0x15c>)
 800b204:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b206:	f003 0303 	and.w	r3, r3, #3
 800b20a:	2b03      	cmp	r3, #3
 800b20c:	d101      	bne.n	800b212 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800b20e:	2301      	movs	r3, #1
 800b210:	e099      	b.n	800b346 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800b212:	4b4f      	ldr	r3, [pc, #316]	; (800b350 <RCCEx_PLL3_Config+0x15c>)
 800b214:	681b      	ldr	r3, [r3, #0]
 800b216:	4a4e      	ldr	r2, [pc, #312]	; (800b350 <RCCEx_PLL3_Config+0x15c>)
 800b218:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b21c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b21e:	f7f9 f8db 	bl	80043d8 <HAL_GetTick>
 800b222:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800b224:	e008      	b.n	800b238 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800b226:	f7f9 f8d7 	bl	80043d8 <HAL_GetTick>
 800b22a:	4602      	mov	r2, r0
 800b22c:	68bb      	ldr	r3, [r7, #8]
 800b22e:	1ad3      	subs	r3, r2, r3
 800b230:	2b02      	cmp	r3, #2
 800b232:	d901      	bls.n	800b238 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800b234:	2303      	movs	r3, #3
 800b236:	e086      	b.n	800b346 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800b238:	4b45      	ldr	r3, [pc, #276]	; (800b350 <RCCEx_PLL3_Config+0x15c>)
 800b23a:	681b      	ldr	r3, [r3, #0]
 800b23c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b240:	2b00      	cmp	r3, #0
 800b242:	d1f0      	bne.n	800b226 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800b244:	4b42      	ldr	r3, [pc, #264]	; (800b350 <RCCEx_PLL3_Config+0x15c>)
 800b246:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b248:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	681b      	ldr	r3, [r3, #0]
 800b250:	051b      	lsls	r3, r3, #20
 800b252:	493f      	ldr	r1, [pc, #252]	; (800b350 <RCCEx_PLL3_Config+0x15c>)
 800b254:	4313      	orrs	r3, r2
 800b256:	628b      	str	r3, [r1, #40]	; 0x28
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	685b      	ldr	r3, [r3, #4]
 800b25c:	3b01      	subs	r3, #1
 800b25e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b262:	687b      	ldr	r3, [r7, #4]
 800b264:	689b      	ldr	r3, [r3, #8]
 800b266:	3b01      	subs	r3, #1
 800b268:	025b      	lsls	r3, r3, #9
 800b26a:	b29b      	uxth	r3, r3
 800b26c:	431a      	orrs	r2, r3
 800b26e:	687b      	ldr	r3, [r7, #4]
 800b270:	68db      	ldr	r3, [r3, #12]
 800b272:	3b01      	subs	r3, #1
 800b274:	041b      	lsls	r3, r3, #16
 800b276:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800b27a:	431a      	orrs	r2, r3
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	691b      	ldr	r3, [r3, #16]
 800b280:	3b01      	subs	r3, #1
 800b282:	061b      	lsls	r3, r3, #24
 800b284:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800b288:	4931      	ldr	r1, [pc, #196]	; (800b350 <RCCEx_PLL3_Config+0x15c>)
 800b28a:	4313      	orrs	r3, r2
 800b28c:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800b28e:	4b30      	ldr	r3, [pc, #192]	; (800b350 <RCCEx_PLL3_Config+0x15c>)
 800b290:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b292:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	695b      	ldr	r3, [r3, #20]
 800b29a:	492d      	ldr	r1, [pc, #180]	; (800b350 <RCCEx_PLL3_Config+0x15c>)
 800b29c:	4313      	orrs	r3, r2
 800b29e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800b2a0:	4b2b      	ldr	r3, [pc, #172]	; (800b350 <RCCEx_PLL3_Config+0x15c>)
 800b2a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b2a4:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	699b      	ldr	r3, [r3, #24]
 800b2ac:	4928      	ldr	r1, [pc, #160]	; (800b350 <RCCEx_PLL3_Config+0x15c>)
 800b2ae:	4313      	orrs	r3, r2
 800b2b0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800b2b2:	4b27      	ldr	r3, [pc, #156]	; (800b350 <RCCEx_PLL3_Config+0x15c>)
 800b2b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b2b6:	4a26      	ldr	r2, [pc, #152]	; (800b350 <RCCEx_PLL3_Config+0x15c>)
 800b2b8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b2bc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800b2be:	4b24      	ldr	r3, [pc, #144]	; (800b350 <RCCEx_PLL3_Config+0x15c>)
 800b2c0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b2c2:	4b24      	ldr	r3, [pc, #144]	; (800b354 <RCCEx_PLL3_Config+0x160>)
 800b2c4:	4013      	ands	r3, r2
 800b2c6:	687a      	ldr	r2, [r7, #4]
 800b2c8:	69d2      	ldr	r2, [r2, #28]
 800b2ca:	00d2      	lsls	r2, r2, #3
 800b2cc:	4920      	ldr	r1, [pc, #128]	; (800b350 <RCCEx_PLL3_Config+0x15c>)
 800b2ce:	4313      	orrs	r3, r2
 800b2d0:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800b2d2:	4b1f      	ldr	r3, [pc, #124]	; (800b350 <RCCEx_PLL3_Config+0x15c>)
 800b2d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b2d6:	4a1e      	ldr	r2, [pc, #120]	; (800b350 <RCCEx_PLL3_Config+0x15c>)
 800b2d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b2dc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800b2de:	683b      	ldr	r3, [r7, #0]
 800b2e0:	2b00      	cmp	r3, #0
 800b2e2:	d106      	bne.n	800b2f2 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800b2e4:	4b1a      	ldr	r3, [pc, #104]	; (800b350 <RCCEx_PLL3_Config+0x15c>)
 800b2e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b2e8:	4a19      	ldr	r2, [pc, #100]	; (800b350 <RCCEx_PLL3_Config+0x15c>)
 800b2ea:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800b2ee:	62d3      	str	r3, [r2, #44]	; 0x2c
 800b2f0:	e00f      	b.n	800b312 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800b2f2:	683b      	ldr	r3, [r7, #0]
 800b2f4:	2b01      	cmp	r3, #1
 800b2f6:	d106      	bne.n	800b306 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800b2f8:	4b15      	ldr	r3, [pc, #84]	; (800b350 <RCCEx_PLL3_Config+0x15c>)
 800b2fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b2fc:	4a14      	ldr	r2, [pc, #80]	; (800b350 <RCCEx_PLL3_Config+0x15c>)
 800b2fe:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800b302:	62d3      	str	r3, [r2, #44]	; 0x2c
 800b304:	e005      	b.n	800b312 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800b306:	4b12      	ldr	r3, [pc, #72]	; (800b350 <RCCEx_PLL3_Config+0x15c>)
 800b308:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b30a:	4a11      	ldr	r2, [pc, #68]	; (800b350 <RCCEx_PLL3_Config+0x15c>)
 800b30c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800b310:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800b312:	4b0f      	ldr	r3, [pc, #60]	; (800b350 <RCCEx_PLL3_Config+0x15c>)
 800b314:	681b      	ldr	r3, [r3, #0]
 800b316:	4a0e      	ldr	r2, [pc, #56]	; (800b350 <RCCEx_PLL3_Config+0x15c>)
 800b318:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b31c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b31e:	f7f9 f85b 	bl	80043d8 <HAL_GetTick>
 800b322:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800b324:	e008      	b.n	800b338 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800b326:	f7f9 f857 	bl	80043d8 <HAL_GetTick>
 800b32a:	4602      	mov	r2, r0
 800b32c:	68bb      	ldr	r3, [r7, #8]
 800b32e:	1ad3      	subs	r3, r2, r3
 800b330:	2b02      	cmp	r3, #2
 800b332:	d901      	bls.n	800b338 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800b334:	2303      	movs	r3, #3
 800b336:	e006      	b.n	800b346 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800b338:	4b05      	ldr	r3, [pc, #20]	; (800b350 <RCCEx_PLL3_Config+0x15c>)
 800b33a:	681b      	ldr	r3, [r3, #0]
 800b33c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b340:	2b00      	cmp	r3, #0
 800b342:	d0f0      	beq.n	800b326 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800b344:	7bfb      	ldrb	r3, [r7, #15]
}
 800b346:	4618      	mov	r0, r3
 800b348:	3710      	adds	r7, #16
 800b34a:	46bd      	mov	sp, r7
 800b34c:	bd80      	pop	{r7, pc}
 800b34e:	bf00      	nop
 800b350:	58024400 	.word	0x58024400
 800b354:	ffff0007 	.word	0xffff0007

0800b358 <HAL_SMBUS_Init>:
  * @param  hsmbus Pointer to a SMBUS_HandleTypeDef structure that contains
  *                the configuration information for the specified SMBUS.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SMBUS_Init(SMBUS_HandleTypeDef *hsmbus)
{
 800b358:	b580      	push	{r7, lr}
 800b35a:	b082      	sub	sp, #8
 800b35c:	af00      	add	r7, sp, #0
 800b35e:	6078      	str	r0, [r7, #4]
  /* Check the SMBUS handle allocation */
  if (hsmbus == NULL)
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	2b00      	cmp	r3, #0
 800b364:	d101      	bne.n	800b36a <HAL_SMBUS_Init+0x12>
  {
    return HAL_ERROR;
 800b366:	2301      	movs	r3, #1
 800b368:	e0a8      	b.n	800b4bc <HAL_SMBUS_Init+0x164>
  assert_param(IS_SMBUS_GENERAL_CALL(hsmbus->Init.GeneralCallMode));
  assert_param(IS_SMBUS_NO_STRETCH(hsmbus->Init.NoStretchMode));
  assert_param(IS_SMBUS_PEC(hsmbus->Init.PacketErrorCheckMode));
  assert_param(IS_SMBUS_PERIPHERAL_MODE(hsmbus->Init.PeripheralMode));

  if (hsmbus->State == HAL_SMBUS_STATE_RESET)
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b36e:	2b00      	cmp	r3, #0
 800b370:	d106      	bne.n	800b380 <HAL_SMBUS_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hsmbus->Lock = HAL_UNLOCKED;
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	2200      	movs	r2, #0
 800b376:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hsmbus->MspInitCallback(hsmbus);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_SMBUS_MspInit(hsmbus);
 800b37a:	6878      	ldr	r0, [r7, #4]
 800b37c:	f7f5 ffea 	bl	8001354 <HAL_SMBUS_MspInit>
#endif /* USE_HAL_SMBUS_REGISTER_CALLBACKS */
  }

  hsmbus->State = HAL_SMBUS_STATE_BUSY;
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	2202      	movs	r2, #2
 800b384:	649a      	str	r2, [r3, #72]	; 0x48

  /* Disable the selected SMBUS peripheral */
  __HAL_SMBUS_DISABLE(hsmbus);
 800b386:	687b      	ldr	r3, [r7, #4]
 800b388:	681b      	ldr	r3, [r3, #0]
 800b38a:	681a      	ldr	r2, [r3, #0]
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	681b      	ldr	r3, [r3, #0]
 800b390:	f022 0201 	bic.w	r2, r2, #1
 800b394:	601a      	str	r2, [r3, #0]

  /*---------------------------- SMBUSx TIMINGR Configuration ------------------------*/
  /* Configure SMBUSx: Frequency range */
  hsmbus->Instance->TIMINGR = hsmbus->Init.Timing & TIMING_CLEAR_MASK;
 800b396:	687b      	ldr	r3, [r7, #4]
 800b398:	685a      	ldr	r2, [r3, #4]
 800b39a:	687b      	ldr	r3, [r7, #4]
 800b39c:	681b      	ldr	r3, [r3, #0]
 800b39e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800b3a2:	611a      	str	r2, [r3, #16]

  /*---------------------------- SMBUSx TIMEOUTR Configuration ------------------------*/
  /* Configure SMBUSx: Bus Timeout  */
  hsmbus->Instance->TIMEOUTR &= ~I2C_TIMEOUTR_TIMOUTEN;
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	681b      	ldr	r3, [r3, #0]
 800b3a8:	695a      	ldr	r2, [r3, #20]
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	681b      	ldr	r3, [r3, #0]
 800b3ae:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800b3b2:	615a      	str	r2, [r3, #20]
  hsmbus->Instance->TIMEOUTR &= ~I2C_TIMEOUTR_TEXTEN;
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	681b      	ldr	r3, [r3, #0]
 800b3b8:	695a      	ldr	r2, [r3, #20]
 800b3ba:	687b      	ldr	r3, [r7, #4]
 800b3bc:	681b      	ldr	r3, [r3, #0]
 800b3be:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800b3c2:	615a      	str	r2, [r3, #20]
  hsmbus->Instance->TIMEOUTR = hsmbus->Init.SMBusTimeout;
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	681b      	ldr	r3, [r3, #0]
 800b3c8:	687a      	ldr	r2, [r7, #4]
 800b3ca:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800b3cc:	615a      	str	r2, [r3, #20]

  /*---------------------------- SMBUSx OAR1 Configuration -----------------------*/
  /* Configure SMBUSx: Own Address1 and ack own address1 mode */
  hsmbus->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	681b      	ldr	r3, [r3, #0]
 800b3d2:	689a      	ldr	r2, [r3, #8]
 800b3d4:	687b      	ldr	r3, [r7, #4]
 800b3d6:	681b      	ldr	r3, [r3, #0]
 800b3d8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800b3dc:	609a      	str	r2, [r3, #8]

  if (hsmbus->Init.OwnAddress1 != 0UL)
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	68db      	ldr	r3, [r3, #12]
 800b3e2:	2b00      	cmp	r3, #0
 800b3e4:	d012      	beq.n	800b40c <HAL_SMBUS_Init+0xb4>
  {
    if (hsmbus->Init.AddressingMode == SMBUS_ADDRESSINGMODE_7BIT)
 800b3e6:	687b      	ldr	r3, [r7, #4]
 800b3e8:	691b      	ldr	r3, [r3, #16]
 800b3ea:	2b01      	cmp	r3, #1
 800b3ec:	d107      	bne.n	800b3fe <HAL_SMBUS_Init+0xa6>
    {
      hsmbus->Instance->OAR1 = (I2C_OAR1_OA1EN | hsmbus->Init.OwnAddress1);
 800b3ee:	687b      	ldr	r3, [r7, #4]
 800b3f0:	68da      	ldr	r2, [r3, #12]
 800b3f2:	687b      	ldr	r3, [r7, #4]
 800b3f4:	681b      	ldr	r3, [r3, #0]
 800b3f6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800b3fa:	609a      	str	r2, [r3, #8]
 800b3fc:	e006      	b.n	800b40c <HAL_SMBUS_Init+0xb4>
    }
    else /* SMBUS_ADDRESSINGMODE_10BIT */
    {
      hsmbus->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hsmbus->Init.OwnAddress1);
 800b3fe:	687b      	ldr	r3, [r7, #4]
 800b400:	68da      	ldr	r2, [r3, #12]
 800b402:	687b      	ldr	r3, [r7, #4]
 800b404:	681b      	ldr	r3, [r3, #0]
 800b406:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800b40a:	609a      	str	r2, [r3, #8]
    }
  }

  /*---------------------------- SMBUSx CR2 Configuration ------------------------*/
  /* Configure SMBUSx: Addressing Master mode */
  if (hsmbus->Init.AddressingMode == SMBUS_ADDRESSINGMODE_10BIT)
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	691b      	ldr	r3, [r3, #16]
 800b410:	2b02      	cmp	r3, #2
 800b412:	d104      	bne.n	800b41e <HAL_SMBUS_Init+0xc6>
  {
    hsmbus->Instance->CR2 = (I2C_CR2_ADD10);
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	681b      	ldr	r3, [r3, #0]
 800b418:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b41c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process) */
  /* AUTOEND and NACK bit will be manage during Transfer process */
  hsmbus->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800b41e:	687b      	ldr	r3, [r7, #4]
 800b420:	681b      	ldr	r3, [r3, #0]
 800b422:	6859      	ldr	r1, [r3, #4]
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	681a      	ldr	r2, [r3, #0]
 800b428:	4b26      	ldr	r3, [pc, #152]	; (800b4c4 <HAL_SMBUS_Init+0x16c>)
 800b42a:	430b      	orrs	r3, r1
 800b42c:	6053      	str	r3, [r2, #4]

  /*---------------------------- SMBUSx OAR2 Configuration -----------------------*/
  /* Configure SMBUSx: Dual mode and Own Address2 */
  hsmbus->Instance->OAR2 = (hsmbus->Init.DualAddressMode | hsmbus->Init.OwnAddress2 | \
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	695a      	ldr	r2, [r3, #20]
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	699b      	ldr	r3, [r3, #24]
 800b436:	ea42 0103 	orr.w	r1, r2, r3
                            (hsmbus->Init.OwnAddress2Masks << 8U));
 800b43a:	687b      	ldr	r3, [r7, #4]
 800b43c:	69db      	ldr	r3, [r3, #28]
 800b43e:	021a      	lsls	r2, r3, #8
  hsmbus->Instance->OAR2 = (hsmbus->Init.DualAddressMode | hsmbus->Init.OwnAddress2 | \
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	681b      	ldr	r3, [r3, #0]
 800b444:	430a      	orrs	r2, r1
 800b446:	60da      	str	r2, [r3, #12]

  /*---------------------------- SMBUSx CR1 Configuration ------------------------*/
  /* Configure SMBUSx: Generalcall and NoStretch mode */
  hsmbus->Instance->CR1 = (hsmbus->Init.GeneralCallMode | hsmbus->Init.NoStretchMode | \
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	6a1a      	ldr	r2, [r3, #32]
 800b44c:	687b      	ldr	r3, [r7, #4]
 800b44e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b450:	431a      	orrs	r2, r3
                           hsmbus->Init.PacketErrorCheckMode | hsmbus->Init.PeripheralMode | \
 800b452:	687b      	ldr	r3, [r7, #4]
 800b454:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  hsmbus->Instance->CR1 = (hsmbus->Init.GeneralCallMode | hsmbus->Init.NoStretchMode | \
 800b456:	431a      	orrs	r2, r3
                           hsmbus->Init.PacketErrorCheckMode | hsmbus->Init.PeripheralMode | \
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b45c:	ea42 0103 	orr.w	r1, r2, r3
                           hsmbus->Init.AnalogFilter);
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	689a      	ldr	r2, [r3, #8]
  hsmbus->Instance->CR1 = (hsmbus->Init.GeneralCallMode | hsmbus->Init.NoStretchMode | \
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	681b      	ldr	r3, [r3, #0]
                           hsmbus->Init.PacketErrorCheckMode | hsmbus->Init.PeripheralMode | \
 800b468:	430a      	orrs	r2, r1
  hsmbus->Instance->CR1 = (hsmbus->Init.GeneralCallMode | hsmbus->Init.NoStretchMode | \
 800b46a:	601a      	str	r2, [r3, #0]

  /* Enable Slave Byte Control only in case of Packet Error Check is enabled
     and SMBUS Peripheral is set in Slave mode */
  if ((hsmbus->Init.PacketErrorCheckMode == SMBUS_PEC_ENABLE) && \
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b470:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800b474:	d110      	bne.n	800b498 <HAL_SMBUS_Init+0x140>
      ((hsmbus->Init.PeripheralMode == SMBUS_PERIPHERAL_MODE_SMBUS_SLAVE) || \
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  if ((hsmbus->Init.PacketErrorCheckMode == SMBUS_PEC_ENABLE) && \
 800b47a:	2b00      	cmp	r3, #0
 800b47c:	d004      	beq.n	800b488 <HAL_SMBUS_Init+0x130>
       (hsmbus->Init.PeripheralMode == SMBUS_PERIPHERAL_MODE_SMBUS_SLAVE_ARP)))
 800b47e:	687b      	ldr	r3, [r7, #4]
 800b480:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      ((hsmbus->Init.PeripheralMode == SMBUS_PERIPHERAL_MODE_SMBUS_SLAVE) || \
 800b482:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b486:	d107      	bne.n	800b498 <HAL_SMBUS_Init+0x140>
  {
    hsmbus->Instance->CR1 |= I2C_CR1_SBC;
 800b488:	687b      	ldr	r3, [r7, #4]
 800b48a:	681b      	ldr	r3, [r3, #0]
 800b48c:	681a      	ldr	r2, [r3, #0]
 800b48e:	687b      	ldr	r3, [r7, #4]
 800b490:	681b      	ldr	r3, [r3, #0]
 800b492:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800b496:	601a      	str	r2, [r3, #0]
  }

  /* Enable the selected SMBUS peripheral */
  __HAL_SMBUS_ENABLE(hsmbus);
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	681b      	ldr	r3, [r3, #0]
 800b49c:	681a      	ldr	r2, [r3, #0]
 800b49e:	687b      	ldr	r3, [r7, #4]
 800b4a0:	681b      	ldr	r3, [r3, #0]
 800b4a2:	f042 0201 	orr.w	r2, r2, #1
 800b4a6:	601a      	str	r2, [r3, #0]

  hsmbus->ErrorCode = HAL_SMBUS_ERROR_NONE;
 800b4a8:	687b      	ldr	r3, [r7, #4]
 800b4aa:	2200      	movs	r2, #0
 800b4ac:	64da      	str	r2, [r3, #76]	; 0x4c
  hsmbus->PreviousState = HAL_SMBUS_STATE_READY;
 800b4ae:	687b      	ldr	r3, [r7, #4]
 800b4b0:	2201      	movs	r2, #1
 800b4b2:	641a      	str	r2, [r3, #64]	; 0x40
  hsmbus->State = HAL_SMBUS_STATE_READY;
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	2201      	movs	r2, #1
 800b4b8:	649a      	str	r2, [r3, #72]	; 0x48

  return HAL_OK;
 800b4ba:	2300      	movs	r3, #0
}
 800b4bc:	4618      	mov	r0, r3
 800b4be:	3708      	adds	r7, #8
 800b4c0:	46bd      	mov	sp, r7
 800b4c2:	bd80      	pop	{r7, pc}
 800b4c4:	02008000 	.word	0x02008000

0800b4c8 <HAL_SMBUS_ConfigDigitalFilter>:
  *                the configuration information for the specified SMBUS.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SMBUS_ConfigDigitalFilter(SMBUS_HandleTypeDef *hsmbus, uint32_t DigitalFilter)
{
 800b4c8:	b480      	push	{r7}
 800b4ca:	b085      	sub	sp, #20
 800b4cc:	af00      	add	r7, sp, #0
 800b4ce:	6078      	str	r0, [r7, #4]
 800b4d0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SMBUS_ALL_INSTANCE(hsmbus->Instance));
  assert_param(IS_SMBUS_DIGITAL_FILTER(DigitalFilter));

  if (hsmbus->State == HAL_SMBUS_STATE_READY)
 800b4d2:	687b      	ldr	r3, [r7, #4]
 800b4d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b4d6:	2b01      	cmp	r3, #1
 800b4d8:	d137      	bne.n	800b54a <HAL_SMBUS_ConfigDigitalFilter+0x82>
  {
    /* Process Locked */
    __HAL_LOCK(hsmbus);
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b4e0:	2b01      	cmp	r3, #1
 800b4e2:	d101      	bne.n	800b4e8 <HAL_SMBUS_ConfigDigitalFilter+0x20>
 800b4e4:	2302      	movs	r3, #2
 800b4e6:	e031      	b.n	800b54c <HAL_SMBUS_ConfigDigitalFilter+0x84>
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	2201      	movs	r2, #1
 800b4ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

    hsmbus->State = HAL_SMBUS_STATE_BUSY;
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	2202      	movs	r2, #2
 800b4f4:	649a      	str	r2, [r3, #72]	; 0x48

    /* Disable the selected SMBUS peripheral */
    __HAL_SMBUS_DISABLE(hsmbus);
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	681b      	ldr	r3, [r3, #0]
 800b4fa:	681a      	ldr	r2, [r3, #0]
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	681b      	ldr	r3, [r3, #0]
 800b500:	f022 0201 	bic.w	r2, r2, #1
 800b504:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hsmbus->Instance->CR1;
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	681b      	ldr	r3, [r3, #0]
 800b50a:	681b      	ldr	r3, [r3, #0]
 800b50c:	60fb      	str	r3, [r7, #12]

    /* Reset I2C DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800b50e:	68fb      	ldr	r3, [r7, #12]
 800b510:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800b514:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << I2C_CR1_DNF_Pos;
 800b516:	683b      	ldr	r3, [r7, #0]
 800b518:	021b      	lsls	r3, r3, #8
 800b51a:	68fa      	ldr	r2, [r7, #12]
 800b51c:	4313      	orrs	r3, r2
 800b51e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hsmbus->Instance->CR1 = tmpreg;
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	681b      	ldr	r3, [r3, #0]
 800b524:	68fa      	ldr	r2, [r7, #12]
 800b526:	601a      	str	r2, [r3, #0]

    __HAL_SMBUS_ENABLE(hsmbus);
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	681b      	ldr	r3, [r3, #0]
 800b52c:	681a      	ldr	r2, [r3, #0]
 800b52e:	687b      	ldr	r3, [r7, #4]
 800b530:	681b      	ldr	r3, [r3, #0]
 800b532:	f042 0201 	orr.w	r2, r2, #1
 800b536:	601a      	str	r2, [r3, #0]

    hsmbus->State = HAL_SMBUS_STATE_READY;
 800b538:	687b      	ldr	r3, [r7, #4]
 800b53a:	2201      	movs	r2, #1
 800b53c:	649a      	str	r2, [r3, #72]	; 0x48

    /* Process Unlocked */
    __HAL_UNLOCK(hsmbus);
 800b53e:	687b      	ldr	r3, [r7, #4]
 800b540:	2200      	movs	r2, #0
 800b542:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

    return HAL_OK;
 800b546:	2300      	movs	r3, #0
 800b548:	e000      	b.n	800b54c <HAL_SMBUS_ConfigDigitalFilter+0x84>
  }
  else
  {
    return HAL_BUSY;
 800b54a:	2302      	movs	r3, #2
  }
}
 800b54c:	4618      	mov	r0, r3
 800b54e:	3714      	adds	r7, #20
 800b550:	46bd      	mov	sp, r7
 800b552:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b556:	4770      	bx	lr

0800b558 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800b558:	b580      	push	{r7, lr}
 800b55a:	b084      	sub	sp, #16
 800b55c:	af00      	add	r7, sp, #0
 800b55e:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	2b00      	cmp	r3, #0
 800b564:	d101      	bne.n	800b56a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800b566:	2301      	movs	r3, #1
 800b568:	e0f1      	b.n	800b74e <HAL_SPI_Init+0x1f6>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800b56a:	687b      	ldr	r3, [r7, #4]
 800b56c:	2200      	movs	r2, #0
 800b56e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	681b      	ldr	r3, [r3, #0]
 800b574:	4a78      	ldr	r2, [pc, #480]	; (800b758 <HAL_SPI_Init+0x200>)
 800b576:	4293      	cmp	r3, r2
 800b578:	d00f      	beq.n	800b59a <HAL_SPI_Init+0x42>
 800b57a:	687b      	ldr	r3, [r7, #4]
 800b57c:	681b      	ldr	r3, [r3, #0]
 800b57e:	4a77      	ldr	r2, [pc, #476]	; (800b75c <HAL_SPI_Init+0x204>)
 800b580:	4293      	cmp	r3, r2
 800b582:	d00a      	beq.n	800b59a <HAL_SPI_Init+0x42>
 800b584:	687b      	ldr	r3, [r7, #4]
 800b586:	681b      	ldr	r3, [r3, #0]
 800b588:	4a75      	ldr	r2, [pc, #468]	; (800b760 <HAL_SPI_Init+0x208>)
 800b58a:	4293      	cmp	r3, r2
 800b58c:	d005      	beq.n	800b59a <HAL_SPI_Init+0x42>
 800b58e:	687b      	ldr	r3, [r7, #4]
 800b590:	68db      	ldr	r3, [r3, #12]
 800b592:	2b0f      	cmp	r3, #15
 800b594:	d901      	bls.n	800b59a <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800b596:	2301      	movs	r3, #1
 800b598:	e0d9      	b.n	800b74e <HAL_SPI_Init+0x1f6>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800b59a:	6878      	ldr	r0, [r7, #4]
 800b59c:	f000 fc9c 	bl	800bed8 <SPI_GetPacketSize>
 800b5a0:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800b5a2:	687b      	ldr	r3, [r7, #4]
 800b5a4:	681b      	ldr	r3, [r3, #0]
 800b5a6:	4a6c      	ldr	r2, [pc, #432]	; (800b758 <HAL_SPI_Init+0x200>)
 800b5a8:	4293      	cmp	r3, r2
 800b5aa:	d00c      	beq.n	800b5c6 <HAL_SPI_Init+0x6e>
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	681b      	ldr	r3, [r3, #0]
 800b5b0:	4a6a      	ldr	r2, [pc, #424]	; (800b75c <HAL_SPI_Init+0x204>)
 800b5b2:	4293      	cmp	r3, r2
 800b5b4:	d007      	beq.n	800b5c6 <HAL_SPI_Init+0x6e>
 800b5b6:	687b      	ldr	r3, [r7, #4]
 800b5b8:	681b      	ldr	r3, [r3, #0]
 800b5ba:	4a69      	ldr	r2, [pc, #420]	; (800b760 <HAL_SPI_Init+0x208>)
 800b5bc:	4293      	cmp	r3, r2
 800b5be:	d002      	beq.n	800b5c6 <HAL_SPI_Init+0x6e>
 800b5c0:	68fb      	ldr	r3, [r7, #12]
 800b5c2:	2b08      	cmp	r3, #8
 800b5c4:	d811      	bhi.n	800b5ea <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800b5ca:	4a63      	ldr	r2, [pc, #396]	; (800b758 <HAL_SPI_Init+0x200>)
 800b5cc:	4293      	cmp	r3, r2
 800b5ce:	d009      	beq.n	800b5e4 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	681b      	ldr	r3, [r3, #0]
 800b5d4:	4a61      	ldr	r2, [pc, #388]	; (800b75c <HAL_SPI_Init+0x204>)
 800b5d6:	4293      	cmp	r3, r2
 800b5d8:	d004      	beq.n	800b5e4 <HAL_SPI_Init+0x8c>
 800b5da:	687b      	ldr	r3, [r7, #4]
 800b5dc:	681b      	ldr	r3, [r3, #0]
 800b5de:	4a60      	ldr	r2, [pc, #384]	; (800b760 <HAL_SPI_Init+0x208>)
 800b5e0:	4293      	cmp	r3, r2
 800b5e2:	d104      	bne.n	800b5ee <HAL_SPI_Init+0x96>
 800b5e4:	68fb      	ldr	r3, [r7, #12]
 800b5e6:	2b10      	cmp	r3, #16
 800b5e8:	d901      	bls.n	800b5ee <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800b5ea:	2301      	movs	r3, #1
 800b5ec:	e0af      	b.n	800b74e <HAL_SPI_Init+0x1f6>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800b5ee:	687b      	ldr	r3, [r7, #4]
 800b5f0:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800b5f4:	b2db      	uxtb	r3, r3
 800b5f6:	2b00      	cmp	r3, #0
 800b5f8:	d106      	bne.n	800b608 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800b5fa:	687b      	ldr	r3, [r7, #4]
 800b5fc:	2200      	movs	r2, #0
 800b5fe:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800b602:	6878      	ldr	r0, [r7, #4]
 800b604:	f7f7 ffd0 	bl	80035a8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800b608:	687b      	ldr	r3, [r7, #4]
 800b60a:	2202      	movs	r2, #2
 800b60c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	681b      	ldr	r3, [r3, #0]
 800b614:	681a      	ldr	r2, [r3, #0]
 800b616:	687b      	ldr	r3, [r7, #4]
 800b618:	681b      	ldr	r3, [r3, #0]
 800b61a:	f022 0201 	bic.w	r2, r2, #1
 800b61e:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	681b      	ldr	r3, [r3, #0]
 800b624:	689b      	ldr	r3, [r3, #8]
 800b626:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 800b62a:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800b62c:	687b      	ldr	r3, [r7, #4]
 800b62e:	699b      	ldr	r3, [r3, #24]
 800b630:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b634:	d119      	bne.n	800b66a <HAL_SPI_Init+0x112>
 800b636:	687b      	ldr	r3, [r7, #4]
 800b638:	685b      	ldr	r3, [r3, #4]
 800b63a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b63e:	d103      	bne.n	800b648 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800b640:	687b      	ldr	r3, [r7, #4]
 800b642:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800b644:	2b00      	cmp	r3, #0
 800b646:	d008      	beq.n	800b65a <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800b648:	687b      	ldr	r3, [r7, #4]
 800b64a:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800b64c:	2b00      	cmp	r3, #0
 800b64e:	d10c      	bne.n	800b66a <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800b654:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b658:	d107      	bne.n	800b66a <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800b65a:	687b      	ldr	r3, [r7, #4]
 800b65c:	681b      	ldr	r3, [r3, #0]
 800b65e:	681a      	ldr	r2, [r3, #0]
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	681b      	ldr	r3, [r3, #0]
 800b664:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800b668:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800b66a:	687b      	ldr	r3, [r7, #4]
 800b66c:	69da      	ldr	r2, [r3, #28]
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b672:	431a      	orrs	r2, r3
 800b674:	68bb      	ldr	r3, [r7, #8]
 800b676:	431a      	orrs	r2, r3
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b67c:	ea42 0103 	orr.w	r1, r2, r3
 800b680:	687b      	ldr	r3, [r7, #4]
 800b682:	68da      	ldr	r2, [r3, #12]
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	681b      	ldr	r3, [r3, #0]
 800b688:	430a      	orrs	r2, r1
 800b68a:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800b68c:	687b      	ldr	r3, [r7, #4]
 800b68e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b694:	431a      	orrs	r2, r3
 800b696:	687b      	ldr	r3, [r7, #4]
 800b698:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b69a:	431a      	orrs	r2, r3
 800b69c:	687b      	ldr	r3, [r7, #4]
 800b69e:	699b      	ldr	r3, [r3, #24]
 800b6a0:	431a      	orrs	r2, r3
 800b6a2:	687b      	ldr	r3, [r7, #4]
 800b6a4:	691b      	ldr	r3, [r3, #16]
 800b6a6:	431a      	orrs	r2, r3
 800b6a8:	687b      	ldr	r3, [r7, #4]
 800b6aa:	695b      	ldr	r3, [r3, #20]
 800b6ac:	431a      	orrs	r2, r3
 800b6ae:	687b      	ldr	r3, [r7, #4]
 800b6b0:	6a1b      	ldr	r3, [r3, #32]
 800b6b2:	431a      	orrs	r2, r3
 800b6b4:	687b      	ldr	r3, [r7, #4]
 800b6b6:	685b      	ldr	r3, [r3, #4]
 800b6b8:	431a      	orrs	r2, r3
 800b6ba:	687b      	ldr	r3, [r7, #4]
 800b6bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b6be:	431a      	orrs	r2, r3
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	689b      	ldr	r3, [r3, #8]
 800b6c4:	431a      	orrs	r2, r3
 800b6c6:	687b      	ldr	r3, [r7, #4]
 800b6c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b6ca:	ea42 0103 	orr.w	r1, r2, r3
 800b6ce:	687b      	ldr	r3, [r7, #4]
 800b6d0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800b6d2:	687b      	ldr	r3, [r7, #4]
 800b6d4:	681b      	ldr	r3, [r3, #0]
 800b6d6:	430a      	orrs	r2, r1
 800b6d8:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800b6da:	687b      	ldr	r3, [r7, #4]
 800b6dc:	685b      	ldr	r3, [r3, #4]
 800b6de:	2b00      	cmp	r3, #0
 800b6e0:	d113      	bne.n	800b70a <HAL_SPI_Init+0x1b2>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800b6e2:	687b      	ldr	r3, [r7, #4]
 800b6e4:	681b      	ldr	r3, [r3, #0]
 800b6e6:	689b      	ldr	r3, [r3, #8]
 800b6e8:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800b6ec:	687b      	ldr	r3, [r7, #4]
 800b6ee:	681b      	ldr	r3, [r3, #0]
 800b6f0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b6f4:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800b6f6:	687b      	ldr	r3, [r7, #4]
 800b6f8:	681b      	ldr	r3, [r3, #0]
 800b6fa:	689b      	ldr	r3, [r3, #8]
 800b6fc:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800b700:	687b      	ldr	r3, [r7, #4]
 800b702:	681b      	ldr	r3, [r3, #0]
 800b704:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800b708:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800b70a:	687b      	ldr	r3, [r7, #4]
 800b70c:	681b      	ldr	r3, [r3, #0]
 800b70e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b710:	687b      	ldr	r3, [r7, #4]
 800b712:	681b      	ldr	r3, [r3, #0]
 800b714:	f022 0201 	bic.w	r2, r2, #1
 800b718:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800b71a:	687b      	ldr	r3, [r7, #4]
 800b71c:	685b      	ldr	r3, [r3, #4]
 800b71e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b722:	2b00      	cmp	r3, #0
 800b724:	d00a      	beq.n	800b73c <HAL_SPI_Init+0x1e4>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	681b      	ldr	r3, [r3, #0]
 800b72a:	68db      	ldr	r3, [r3, #12]
 800b72c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800b730:	687b      	ldr	r3, [r7, #4]
 800b732:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b734:	687b      	ldr	r3, [r7, #4]
 800b736:	681b      	ldr	r3, [r3, #0]
 800b738:	430a      	orrs	r2, r1
 800b73a:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	2200      	movs	r2, #0
 800b740:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	2201      	movs	r2, #1
 800b748:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 800b74c:	2300      	movs	r3, #0
}
 800b74e:	4618      	mov	r0, r3
 800b750:	3710      	adds	r7, #16
 800b752:	46bd      	mov	sp, r7
 800b754:	bd80      	pop	{r7, pc}
 800b756:	bf00      	nop
 800b758:	40013000 	.word	0x40013000
 800b75c:	40003800 	.word	0x40003800
 800b760:	40003c00 	.word	0x40003c00

0800b764 <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800b764:	b580      	push	{r7, lr}
 800b766:	b08e      	sub	sp, #56	; 0x38
 800b768:	af02      	add	r7, sp, #8
 800b76a:	60f8      	str	r0, [r7, #12]
 800b76c:	60b9      	str	r1, [r7, #8]
 800b76e:	607a      	str	r2, [r7, #4]
 800b770:	807b      	strh	r3, [r7, #2]
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800b772:	2300      	movs	r3, #0
 800b774:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800b778:	68fb      	ldr	r3, [r7, #12]
 800b77a:	681b      	ldr	r3, [r3, #0]
 800b77c:	3320      	adds	r3, #32
 800b77e:	627b      	str	r3, [r7, #36]	; 0x24
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800b780:	68fb      	ldr	r3, [r7, #12]
 800b782:	681b      	ldr	r3, [r3, #0]
 800b784:	3330      	adds	r3, #48	; 0x30
 800b786:	623b      	str	r3, [r7, #32]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 800b788:	68fb      	ldr	r3, [r7, #12]
 800b78a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800b78e:	2b01      	cmp	r3, #1
 800b790:	d101      	bne.n	800b796 <HAL_SPI_TransmitReceive+0x32>
 800b792:	2302      	movs	r3, #2
 800b794:	e2ce      	b.n	800bd34 <HAL_SPI_TransmitReceive+0x5d0>
 800b796:	68fb      	ldr	r3, [r7, #12]
 800b798:	2201      	movs	r2, #1
 800b79a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800b79e:	f7f8 fe1b 	bl	80043d8 <HAL_GetTick>
 800b7a2:	61f8      	str	r0, [r7, #28]

  initial_TxXferCount = Size;
 800b7a4:	887b      	ldrh	r3, [r7, #2]
 800b7a6:	85fb      	strh	r3, [r7, #46]	; 0x2e
  initial_RxXferCount = Size;
 800b7a8:	887b      	ldrh	r3, [r7, #2]
 800b7aa:	85bb      	strh	r3, [r7, #44]	; 0x2c
  tmp_state           = hspi->State;
 800b7ac:	68fb      	ldr	r3, [r7, #12]
 800b7ae:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800b7b2:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800b7b4:	68fb      	ldr	r3, [r7, #12]
 800b7b6:	685b      	ldr	r3, [r3, #4]
 800b7b8:	617b      	str	r3, [r7, #20]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800b7ba:	7efb      	ldrb	r3, [r7, #27]
 800b7bc:	2b01      	cmp	r3, #1
 800b7be:	d014      	beq.n	800b7ea <HAL_SPI_TransmitReceive+0x86>
 800b7c0:	697b      	ldr	r3, [r7, #20]
 800b7c2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b7c6:	d106      	bne.n	800b7d6 <HAL_SPI_TransmitReceive+0x72>
        ((tmp_mode == SPI_MODE_MASTER) && \
         (hspi->Init.Direction == SPI_DIRECTION_2LINES) && \
 800b7c8:	68fb      	ldr	r3, [r7, #12]
 800b7ca:	689b      	ldr	r3, [r3, #8]
        ((tmp_mode == SPI_MODE_MASTER) && \
 800b7cc:	2b00      	cmp	r3, #0
 800b7ce:	d102      	bne.n	800b7d6 <HAL_SPI_TransmitReceive+0x72>
         (hspi->Init.Direction == SPI_DIRECTION_2LINES) && \
 800b7d0:	7efb      	ldrb	r3, [r7, #27]
 800b7d2:	2b04      	cmp	r3, #4
 800b7d4:	d009      	beq.n	800b7ea <HAL_SPI_TransmitReceive+0x86>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    errorcode = HAL_BUSY;
 800b7d6:	2302      	movs	r3, #2
 800b7d8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 800b7dc:	68fb      	ldr	r3, [r7, #12]
 800b7de:	2200      	movs	r2, #0
 800b7e0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800b7e4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800b7e8:	e2a4      	b.n	800bd34 <HAL_SPI_TransmitReceive+0x5d0>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 800b7ea:	68bb      	ldr	r3, [r7, #8]
 800b7ec:	2b00      	cmp	r3, #0
 800b7ee:	d005      	beq.n	800b7fc <HAL_SPI_TransmitReceive+0x98>
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	2b00      	cmp	r3, #0
 800b7f4:	d002      	beq.n	800b7fc <HAL_SPI_TransmitReceive+0x98>
 800b7f6:	887b      	ldrh	r3, [r7, #2]
 800b7f8:	2b00      	cmp	r3, #0
 800b7fa:	d109      	bne.n	800b810 <HAL_SPI_TransmitReceive+0xac>
  {
    errorcode = HAL_ERROR;
 800b7fc:	2301      	movs	r3, #1
 800b7fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 800b802:	68fb      	ldr	r3, [r7, #12]
 800b804:	2200      	movs	r2, #0
 800b806:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800b80a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800b80e:	e291      	b.n	800bd34 <HAL_SPI_TransmitReceive+0x5d0>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800b810:	68fb      	ldr	r3, [r7, #12]
 800b812:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800b816:	b2db      	uxtb	r3, r3
 800b818:	2b04      	cmp	r3, #4
 800b81a:	d003      	beq.n	800b824 <HAL_SPI_TransmitReceive+0xc0>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800b81c:	68fb      	ldr	r3, [r7, #12]
 800b81e:	2205      	movs	r2, #5
 800b820:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800b824:	68fb      	ldr	r3, [r7, #12]
 800b826:	2200      	movs	r2, #0
 800b828:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800b82c:	68fb      	ldr	r3, [r7, #12]
 800b82e:	687a      	ldr	r2, [r7, #4]
 800b830:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferCount = Size;
 800b832:	68fb      	ldr	r3, [r7, #12]
 800b834:	887a      	ldrh	r2, [r7, #2]
 800b836:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->RxXferSize  = Size;
 800b83a:	68fb      	ldr	r3, [r7, #12]
 800b83c:	887a      	ldrh	r2, [r7, #2]
 800b83e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800b842:	68fb      	ldr	r3, [r7, #12]
 800b844:	68ba      	ldr	r2, [r7, #8]
 800b846:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferCount = Size;
 800b848:	68fb      	ldr	r3, [r7, #12]
 800b84a:	887a      	ldrh	r2, [r7, #2]
 800b84c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->TxXferSize  = Size;
 800b850:	68fb      	ldr	r3, [r7, #12]
 800b852:	887a      	ldrh	r2, [r7, #2]
 800b854:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800b858:	68fb      	ldr	r3, [r7, #12]
 800b85a:	2200      	movs	r2, #0
 800b85c:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 800b85e:	68fb      	ldr	r3, [r7, #12]
 800b860:	2200      	movs	r2, #0
 800b862:	675a      	str	r2, [r3, #116]	; 0x74

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800b864:	68fb      	ldr	r3, [r7, #12]
 800b866:	681b      	ldr	r3, [r3, #0]
 800b868:	685a      	ldr	r2, [r3, #4]
 800b86a:	4b81      	ldr	r3, [pc, #516]	; (800ba70 <HAL_SPI_TransmitReceive+0x30c>)
 800b86c:	4013      	ands	r3, r2
 800b86e:	8879      	ldrh	r1, [r7, #2]
 800b870:	68fa      	ldr	r2, [r7, #12]
 800b872:	6812      	ldr	r2, [r2, #0]
 800b874:	430b      	orrs	r3, r1
 800b876:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 800b878:	68fb      	ldr	r3, [r7, #12]
 800b87a:	681b      	ldr	r3, [r3, #0]
 800b87c:	681a      	ldr	r2, [r3, #0]
 800b87e:	68fb      	ldr	r3, [r7, #12]
 800b880:	681b      	ldr	r3, [r3, #0]
 800b882:	f042 0201 	orr.w	r2, r2, #1
 800b886:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800b888:	68fb      	ldr	r3, [r7, #12]
 800b88a:	685b      	ldr	r3, [r3, #4]
 800b88c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b890:	d107      	bne.n	800b8a2 <HAL_SPI_TransmitReceive+0x13e>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800b892:	68fb      	ldr	r3, [r7, #12]
 800b894:	681b      	ldr	r3, [r3, #0]
 800b896:	681a      	ldr	r2, [r3, #0]
 800b898:	68fb      	ldr	r3, [r7, #12]
 800b89a:	681b      	ldr	r3, [r3, #0]
 800b89c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b8a0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800b8a2:	68fb      	ldr	r3, [r7, #12]
 800b8a4:	68db      	ldr	r3, [r3, #12]
 800b8a6:	2b0f      	cmp	r3, #15
 800b8a8:	d970      	bls.n	800b98c <HAL_SPI_TransmitReceive+0x228>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800b8aa:	e068      	b.n	800b97e <HAL_SPI_TransmitReceive+0x21a>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 800b8ac:	68fb      	ldr	r3, [r7, #12]
 800b8ae:	681b      	ldr	r3, [r3, #0]
 800b8b0:	695b      	ldr	r3, [r3, #20]
 800b8b2:	f003 0302 	and.w	r3, r3, #2
 800b8b6:	2b02      	cmp	r3, #2
 800b8b8:	d11a      	bne.n	800b8f0 <HAL_SPI_TransmitReceive+0x18c>
 800b8ba:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800b8bc:	2b00      	cmp	r3, #0
 800b8be:	d017      	beq.n	800b8f0 <HAL_SPI_TransmitReceive+0x18c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800b8c0:	68fb      	ldr	r3, [r7, #12]
 800b8c2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800b8c4:	68fb      	ldr	r3, [r7, #12]
 800b8c6:	681b      	ldr	r3, [r3, #0]
 800b8c8:	6812      	ldr	r2, [r2, #0]
 800b8ca:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800b8cc:	68fb      	ldr	r3, [r7, #12]
 800b8ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b8d0:	1d1a      	adds	r2, r3, #4
 800b8d2:	68fb      	ldr	r3, [r7, #12]
 800b8d4:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount --;
 800b8d6:	68fb      	ldr	r3, [r7, #12]
 800b8d8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800b8dc:	b29b      	uxth	r3, r3
 800b8de:	3b01      	subs	r3, #1
 800b8e0:	b29a      	uxth	r2, r3
 800b8e2:	68fb      	ldr	r3, [r7, #12]
 800b8e4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 800b8e8:	68fb      	ldr	r3, [r7, #12]
 800b8ea:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800b8ee:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }

      /* Check RXWNE/EOT flag */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL) && (initial_RxXferCount > 0UL))
 800b8f0:	68fb      	ldr	r3, [r7, #12]
 800b8f2:	681b      	ldr	r3, [r3, #0]
 800b8f4:	695a      	ldr	r2, [r3, #20]
 800b8f6:	f248 0308 	movw	r3, #32776	; 0x8008
 800b8fa:	4013      	ands	r3, r2
 800b8fc:	2b00      	cmp	r3, #0
 800b8fe:	d01a      	beq.n	800b936 <HAL_SPI_TransmitReceive+0x1d2>
 800b900:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800b902:	2b00      	cmp	r3, #0
 800b904:	d017      	beq.n	800b936 <HAL_SPI_TransmitReceive+0x1d2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800b906:	68fb      	ldr	r3, [r7, #12]
 800b908:	681a      	ldr	r2, [r3, #0]
 800b90a:	68fb      	ldr	r3, [r7, #12]
 800b90c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b90e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800b910:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800b912:	68fb      	ldr	r3, [r7, #12]
 800b914:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b916:	1d1a      	adds	r2, r3, #4
 800b918:	68fb      	ldr	r3, [r7, #12]
 800b91a:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount --;
 800b91c:	68fb      	ldr	r3, [r7, #12]
 800b91e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800b922:	b29b      	uxth	r3, r3
 800b924:	3b01      	subs	r3, #1
 800b926:	b29a      	uxth	r2, r3
 800b928:	68fb      	ldr	r3, [r7, #12]
 800b92a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 800b92e:	68fb      	ldr	r3, [r7, #12]
 800b930:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800b934:	85bb      	strh	r3, [r7, #44]	; 0x2c
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b936:	f7f8 fd4f 	bl	80043d8 <HAL_GetTick>
 800b93a:	4602      	mov	r2, r0
 800b93c:	69fb      	ldr	r3, [r7, #28]
 800b93e:	1ad3      	subs	r3, r2, r3
 800b940:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b942:	429a      	cmp	r2, r3
 800b944:	d803      	bhi.n	800b94e <HAL_SPI_TransmitReceive+0x1ea>
 800b946:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b948:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b94c:	d102      	bne.n	800b954 <HAL_SPI_TransmitReceive+0x1f0>
 800b94e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b950:	2b00      	cmp	r3, #0
 800b952:	d114      	bne.n	800b97e <HAL_SPI_TransmitReceive+0x21a>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 800b954:	68f8      	ldr	r0, [r7, #12]
 800b956:	f000 f9f1 	bl	800bd3c <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 800b95a:	68fb      	ldr	r3, [r7, #12]
 800b95c:	2200      	movs	r2, #0
 800b95e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800b962:	68fb      	ldr	r3, [r7, #12]
 800b964:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b968:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800b96c:	68fb      	ldr	r3, [r7, #12]
 800b96e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 800b972:	68fb      	ldr	r3, [r7, #12]
 800b974:	2201      	movs	r2, #1
 800b976:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 800b97a:	2303      	movs	r3, #3
 800b97c:	e1da      	b.n	800bd34 <HAL_SPI_TransmitReceive+0x5d0>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800b97e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800b980:	2b00      	cmp	r3, #0
 800b982:	d193      	bne.n	800b8ac <HAL_SPI_TransmitReceive+0x148>
 800b984:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800b986:	2b00      	cmp	r3, #0
 800b988:	d190      	bne.n	800b8ac <HAL_SPI_TransmitReceive+0x148>
 800b98a:	e1ac      	b.n	800bce6 <HAL_SPI_TransmitReceive+0x582>
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800b98c:	68fb      	ldr	r3, [r7, #12]
 800b98e:	68db      	ldr	r3, [r3, #12]
 800b990:	2b07      	cmp	r3, #7
 800b992:	f240 81a0 	bls.w	800bcd6 <HAL_SPI_TransmitReceive+0x572>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800b996:	e0a9      	b.n	800baec <HAL_SPI_TransmitReceive+0x388>
    {
      /* Check TXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP) && (initial_TxXferCount > 0UL))
 800b998:	68fb      	ldr	r3, [r7, #12]
 800b99a:	681b      	ldr	r3, [r3, #0]
 800b99c:	695b      	ldr	r3, [r3, #20]
 800b99e:	f003 0302 	and.w	r3, r3, #2
 800b9a2:	2b02      	cmp	r3, #2
 800b9a4:	d139      	bne.n	800ba1a <HAL_SPI_TransmitReceive+0x2b6>
 800b9a6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800b9a8:	2b00      	cmp	r3, #0
 800b9aa:	d036      	beq.n	800ba1a <HAL_SPI_TransmitReceive+0x2b6>
      {
        if ((initial_TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800b9ac:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800b9ae:	2b01      	cmp	r3, #1
 800b9b0:	d91c      	bls.n	800b9ec <HAL_SPI_TransmitReceive+0x288>
 800b9b2:	68fb      	ldr	r3, [r7, #12]
 800b9b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b9b6:	2b00      	cmp	r3, #0
 800b9b8:	d018      	beq.n	800b9ec <HAL_SPI_TransmitReceive+0x288>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800b9ba:	68fb      	ldr	r3, [r7, #12]
 800b9bc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800b9be:	68fb      	ldr	r3, [r7, #12]
 800b9c0:	681b      	ldr	r3, [r3, #0]
 800b9c2:	6812      	ldr	r2, [r2, #0]
 800b9c4:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800b9c6:	68fb      	ldr	r3, [r7, #12]
 800b9c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b9ca:	1d1a      	adds	r2, r3, #4
 800b9cc:	68fb      	ldr	r3, [r7, #12]
 800b9ce:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800b9d0:	68fb      	ldr	r3, [r7, #12]
 800b9d2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800b9d6:	b29b      	uxth	r3, r3
 800b9d8:	3b02      	subs	r3, #2
 800b9da:	b29a      	uxth	r2, r3
 800b9dc:	68fb      	ldr	r3, [r7, #12]
 800b9de:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 800b9e2:	68fb      	ldr	r3, [r7, #12]
 800b9e4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800b9e8:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800b9ea:	e016      	b.n	800ba1a <HAL_SPI_TransmitReceive+0x2b6>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800b9ec:	68fb      	ldr	r3, [r7, #12]
 800b9ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b9f0:	881a      	ldrh	r2, [r3, #0]
 800b9f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9f4:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800b9f6:	68fb      	ldr	r3, [r7, #12]
 800b9f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b9fa:	1c9a      	adds	r2, r3, #2
 800b9fc:	68fb      	ldr	r3, [r7, #12]
 800b9fe:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800ba00:	68fb      	ldr	r3, [r7, #12]
 800ba02:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ba06:	b29b      	uxth	r3, r3
 800ba08:	3b01      	subs	r3, #1
 800ba0a:	b29a      	uxth	r2, r3
 800ba0c:	68fb      	ldr	r3, [r7, #12]
 800ba0e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 800ba12:	68fb      	ldr	r3, [r7, #12]
 800ba14:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ba18:	85fb      	strh	r3, [r7, #46]	; 0x2e
        }
      }

      /* Check RXWNE/FRLVL flag */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL) && (initial_RxXferCount > 0UL))
 800ba1a:	68fb      	ldr	r3, [r7, #12]
 800ba1c:	681b      	ldr	r3, [r3, #0]
 800ba1e:	695b      	ldr	r3, [r3, #20]
 800ba20:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800ba24:	2b00      	cmp	r3, #0
 800ba26:	d03d      	beq.n	800baa4 <HAL_SPI_TransmitReceive+0x340>
 800ba28:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800ba2a:	2b00      	cmp	r3, #0
 800ba2c:	d03a      	beq.n	800baa4 <HAL_SPI_TransmitReceive+0x340>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 800ba2e:	68fb      	ldr	r3, [r7, #12]
 800ba30:	681b      	ldr	r3, [r3, #0]
 800ba32:	695b      	ldr	r3, [r3, #20]
 800ba34:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800ba38:	2b00      	cmp	r3, #0
 800ba3a:	d01b      	beq.n	800ba74 <HAL_SPI_TransmitReceive+0x310>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800ba3c:	68fb      	ldr	r3, [r7, #12]
 800ba3e:	681a      	ldr	r2, [r3, #0]
 800ba40:	68fb      	ldr	r3, [r7, #12]
 800ba42:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ba44:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800ba46:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800ba48:	68fb      	ldr	r3, [r7, #12]
 800ba4a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ba4c:	1d1a      	adds	r2, r3, #4
 800ba4e:	68fb      	ldr	r3, [r7, #12]
 800ba50:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 800ba52:	68fb      	ldr	r3, [r7, #12]
 800ba54:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800ba58:	b29b      	uxth	r3, r3
 800ba5a:	3b02      	subs	r3, #2
 800ba5c:	b29a      	uxth	r2, r3
 800ba5e:	68fb      	ldr	r3, [r7, #12]
 800ba60:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800ba64:	68fb      	ldr	r3, [r7, #12]
 800ba66:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800ba6a:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800ba6c:	e01a      	b.n	800baa4 <HAL_SPI_TransmitReceive+0x340>
 800ba6e:	bf00      	nop
 800ba70:	ffff0000 	.word	0xffff0000
        }
        else
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800ba74:	68fb      	ldr	r3, [r7, #12]
 800ba76:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ba78:	6a3a      	ldr	r2, [r7, #32]
 800ba7a:	8812      	ldrh	r2, [r2, #0]
 800ba7c:	b292      	uxth	r2, r2
 800ba7e:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800ba80:	68fb      	ldr	r3, [r7, #12]
 800ba82:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ba84:	1c9a      	adds	r2, r3, #2
 800ba86:	68fb      	ldr	r3, [r7, #12]
 800ba88:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 800ba8a:	68fb      	ldr	r3, [r7, #12]
 800ba8c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800ba90:	b29b      	uxth	r3, r3
 800ba92:	3b01      	subs	r3, #1
 800ba94:	b29a      	uxth	r2, r3
 800ba96:	68fb      	ldr	r3, [r7, #12]
 800ba98:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800ba9c:	68fb      	ldr	r3, [r7, #12]
 800ba9e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800baa2:	85bb      	strh	r3, [r7, #44]	; 0x2c
        }
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800baa4:	f7f8 fc98 	bl	80043d8 <HAL_GetTick>
 800baa8:	4602      	mov	r2, r0
 800baaa:	69fb      	ldr	r3, [r7, #28]
 800baac:	1ad3      	subs	r3, r2, r3
 800baae:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bab0:	429a      	cmp	r2, r3
 800bab2:	d803      	bhi.n	800babc <HAL_SPI_TransmitReceive+0x358>
 800bab4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bab6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800baba:	d102      	bne.n	800bac2 <HAL_SPI_TransmitReceive+0x35e>
 800babc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800babe:	2b00      	cmp	r3, #0
 800bac0:	d114      	bne.n	800baec <HAL_SPI_TransmitReceive+0x388>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 800bac2:	68f8      	ldr	r0, [r7, #12]
 800bac4:	f000 f93a 	bl	800bd3c <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 800bac8:	68fb      	ldr	r3, [r7, #12]
 800baca:	2200      	movs	r2, #0
 800bacc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800bad0:	68fb      	ldr	r3, [r7, #12]
 800bad2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bad6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800bada:	68fb      	ldr	r3, [r7, #12]
 800badc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 800bae0:	68fb      	ldr	r3, [r7, #12]
 800bae2:	2201      	movs	r2, #1
 800bae4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 800bae8:	2303      	movs	r3, #3
 800baea:	e123      	b.n	800bd34 <HAL_SPI_TransmitReceive+0x5d0>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800baec:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800baee:	2b00      	cmp	r3, #0
 800baf0:	f47f af52 	bne.w	800b998 <HAL_SPI_TransmitReceive+0x234>
 800baf4:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800baf6:	2b00      	cmp	r3, #0
 800baf8:	f47f af4e 	bne.w	800b998 <HAL_SPI_TransmitReceive+0x234>
 800bafc:	e0f3      	b.n	800bce6 <HAL_SPI_TransmitReceive+0x582>
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 800bafe:	68fb      	ldr	r3, [r7, #12]
 800bb00:	681b      	ldr	r3, [r3, #0]
 800bb02:	695b      	ldr	r3, [r3, #20]
 800bb04:	f003 0302 	and.w	r3, r3, #2
 800bb08:	2b02      	cmp	r3, #2
 800bb0a:	d15a      	bne.n	800bbc2 <HAL_SPI_TransmitReceive+0x45e>
 800bb0c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800bb0e:	2b00      	cmp	r3, #0
 800bb10:	d057      	beq.n	800bbc2 <HAL_SPI_TransmitReceive+0x45e>
      {
        if ((initial_TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800bb12:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800bb14:	2b03      	cmp	r3, #3
 800bb16:	d91c      	bls.n	800bb52 <HAL_SPI_TransmitReceive+0x3ee>
 800bb18:	68fb      	ldr	r3, [r7, #12]
 800bb1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bb1c:	2b40      	cmp	r3, #64	; 0x40
 800bb1e:	d918      	bls.n	800bb52 <HAL_SPI_TransmitReceive+0x3ee>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800bb20:	68fb      	ldr	r3, [r7, #12]
 800bb22:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800bb24:	68fb      	ldr	r3, [r7, #12]
 800bb26:	681b      	ldr	r3, [r3, #0]
 800bb28:	6812      	ldr	r2, [r2, #0]
 800bb2a:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800bb2c:	68fb      	ldr	r3, [r7, #12]
 800bb2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bb30:	1d1a      	adds	r2, r3, #4
 800bb32:	68fb      	ldr	r3, [r7, #12]
 800bb34:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 800bb36:	68fb      	ldr	r3, [r7, #12]
 800bb38:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800bb3c:	b29b      	uxth	r3, r3
 800bb3e:	3b04      	subs	r3, #4
 800bb40:	b29a      	uxth	r2, r3
 800bb42:	68fb      	ldr	r3, [r7, #12]
 800bb44:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 800bb48:	68fb      	ldr	r3, [r7, #12]
 800bb4a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800bb4e:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800bb50:	e037      	b.n	800bbc2 <HAL_SPI_TransmitReceive+0x45e>
        }
        else if ((initial_TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800bb52:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800bb54:	2b01      	cmp	r3, #1
 800bb56:	d91b      	bls.n	800bb90 <HAL_SPI_TransmitReceive+0x42c>
 800bb58:	68fb      	ldr	r3, [r7, #12]
 800bb5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bb5c:	2b00      	cmp	r3, #0
 800bb5e:	d017      	beq.n	800bb90 <HAL_SPI_TransmitReceive+0x42c>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800bb60:	68fb      	ldr	r3, [r7, #12]
 800bb62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bb64:	881a      	ldrh	r2, [r3, #0]
 800bb66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb68:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800bb6a:	68fb      	ldr	r3, [r7, #12]
 800bb6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bb6e:	1c9a      	adds	r2, r3, #2
 800bb70:	68fb      	ldr	r3, [r7, #12]
 800bb72:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800bb74:	68fb      	ldr	r3, [r7, #12]
 800bb76:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800bb7a:	b29b      	uxth	r3, r3
 800bb7c:	3b02      	subs	r3, #2
 800bb7e:	b29a      	uxth	r2, r3
 800bb80:	68fb      	ldr	r3, [r7, #12]
 800bb82:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 800bb86:	68fb      	ldr	r3, [r7, #12]
 800bb88:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800bb8c:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800bb8e:	e018      	b.n	800bbc2 <HAL_SPI_TransmitReceive+0x45e>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 800bb90:	68fb      	ldr	r3, [r7, #12]
 800bb92:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800bb94:	68fb      	ldr	r3, [r7, #12]
 800bb96:	681b      	ldr	r3, [r3, #0]
 800bb98:	3320      	adds	r3, #32
 800bb9a:	7812      	ldrb	r2, [r2, #0]
 800bb9c:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800bb9e:	68fb      	ldr	r3, [r7, #12]
 800bba0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bba2:	1c5a      	adds	r2, r3, #1
 800bba4:	68fb      	ldr	r3, [r7, #12]
 800bba6:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800bba8:	68fb      	ldr	r3, [r7, #12]
 800bbaa:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800bbae:	b29b      	uxth	r3, r3
 800bbb0:	3b01      	subs	r3, #1
 800bbb2:	b29a      	uxth	r2, r3
 800bbb4:	68fb      	ldr	r3, [r7, #12]
 800bbb6:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 800bbba:	68fb      	ldr	r3, [r7, #12]
 800bbbc:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800bbc0:	85fb      	strh	r3, [r7, #46]	; 0x2e
        }
      }

      /* Wait until RXWNE/FRLVL flag is reset */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL) && (initial_RxXferCount > 0UL))
 800bbc2:	68fb      	ldr	r3, [r7, #12]
 800bbc4:	681b      	ldr	r3, [r3, #0]
 800bbc6:	695b      	ldr	r3, [r3, #20]
 800bbc8:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800bbcc:	2b00      	cmp	r3, #0
 800bbce:	d05e      	beq.n	800bc8e <HAL_SPI_TransmitReceive+0x52a>
 800bbd0:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800bbd2:	2b00      	cmp	r3, #0
 800bbd4:	d05b      	beq.n	800bc8e <HAL_SPI_TransmitReceive+0x52a>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 800bbd6:	68fb      	ldr	r3, [r7, #12]
 800bbd8:	681b      	ldr	r3, [r3, #0]
 800bbda:	695b      	ldr	r3, [r3, #20]
 800bbdc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800bbe0:	2b00      	cmp	r3, #0
 800bbe2:	d018      	beq.n	800bc16 <HAL_SPI_TransmitReceive+0x4b2>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800bbe4:	68fb      	ldr	r3, [r7, #12]
 800bbe6:	681a      	ldr	r2, [r3, #0]
 800bbe8:	68fb      	ldr	r3, [r7, #12]
 800bbea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bbec:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800bbee:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800bbf0:	68fb      	ldr	r3, [r7, #12]
 800bbf2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bbf4:	1d1a      	adds	r2, r3, #4
 800bbf6:	68fb      	ldr	r3, [r7, #12]
 800bbf8:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)4UL;
 800bbfa:	68fb      	ldr	r3, [r7, #12]
 800bbfc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800bc00:	b29b      	uxth	r3, r3
 800bc02:	3b04      	subs	r3, #4
 800bc04:	b29a      	uxth	r2, r3
 800bc06:	68fb      	ldr	r3, [r7, #12]
 800bc08:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800bc0c:	68fb      	ldr	r3, [r7, #12]
 800bc0e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800bc12:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800bc14:	e03b      	b.n	800bc8e <HAL_SPI_TransmitReceive+0x52a>
        }
        else if ((hspi->Instance->SR & SPI_FLAG_FRLVL) > SPI_RX_FIFO_1PACKET)
 800bc16:	68fb      	ldr	r3, [r7, #12]
 800bc18:	681b      	ldr	r3, [r3, #0]
 800bc1a:	695b      	ldr	r3, [r3, #20]
 800bc1c:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 800bc20:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bc24:	d918      	bls.n	800bc58 <HAL_SPI_TransmitReceive+0x4f4>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800bc26:	68fb      	ldr	r3, [r7, #12]
 800bc28:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bc2a:	6a3a      	ldr	r2, [r7, #32]
 800bc2c:	8812      	ldrh	r2, [r2, #0]
 800bc2e:	b292      	uxth	r2, r2
 800bc30:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800bc32:	68fb      	ldr	r3, [r7, #12]
 800bc34:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bc36:	1c9a      	adds	r2, r3, #2
 800bc38:	68fb      	ldr	r3, [r7, #12]
 800bc3a:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 800bc3c:	68fb      	ldr	r3, [r7, #12]
 800bc3e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800bc42:	b29b      	uxth	r3, r3
 800bc44:	3b02      	subs	r3, #2
 800bc46:	b29a      	uxth	r2, r3
 800bc48:	68fb      	ldr	r3, [r7, #12]
 800bc4a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800bc4e:	68fb      	ldr	r3, [r7, #12]
 800bc50:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800bc54:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800bc56:	e01a      	b.n	800bc8e <HAL_SPI_TransmitReceive+0x52a>
        }
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800bc58:	68fb      	ldr	r3, [r7, #12]
 800bc5a:	681b      	ldr	r3, [r3, #0]
 800bc5c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800bc60:	68fb      	ldr	r3, [r7, #12]
 800bc62:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bc64:	7812      	ldrb	r2, [r2, #0]
 800bc66:	b2d2      	uxtb	r2, r2
 800bc68:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800bc6a:	68fb      	ldr	r3, [r7, #12]
 800bc6c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bc6e:	1c5a      	adds	r2, r3, #1
 800bc70:	68fb      	ldr	r3, [r7, #12]
 800bc72:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 800bc74:	68fb      	ldr	r3, [r7, #12]
 800bc76:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800bc7a:	b29b      	uxth	r3, r3
 800bc7c:	3b01      	subs	r3, #1
 800bc7e:	b29a      	uxth	r2, r3
 800bc80:	68fb      	ldr	r3, [r7, #12]
 800bc82:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800bc86:	68fb      	ldr	r3, [r7, #12]
 800bc88:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800bc8c:	85bb      	strh	r3, [r7, #44]	; 0x2c
        }
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800bc8e:	f7f8 fba3 	bl	80043d8 <HAL_GetTick>
 800bc92:	4602      	mov	r2, r0
 800bc94:	69fb      	ldr	r3, [r7, #28]
 800bc96:	1ad3      	subs	r3, r2, r3
 800bc98:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bc9a:	429a      	cmp	r2, r3
 800bc9c:	d803      	bhi.n	800bca6 <HAL_SPI_TransmitReceive+0x542>
 800bc9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bca0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bca4:	d102      	bne.n	800bcac <HAL_SPI_TransmitReceive+0x548>
 800bca6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bca8:	2b00      	cmp	r3, #0
 800bcaa:	d114      	bne.n	800bcd6 <HAL_SPI_TransmitReceive+0x572>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 800bcac:	68f8      	ldr	r0, [r7, #12]
 800bcae:	f000 f845 	bl	800bd3c <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 800bcb2:	68fb      	ldr	r3, [r7, #12]
 800bcb4:	2200      	movs	r2, #0
 800bcb6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800bcba:	68fb      	ldr	r3, [r7, #12]
 800bcbc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bcc0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800bcc4:	68fb      	ldr	r3, [r7, #12]
 800bcc6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 800bcca:	68fb      	ldr	r3, [r7, #12]
 800bccc:	2201      	movs	r2, #1
 800bcce:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 800bcd2:	2303      	movs	r3, #3
 800bcd4:	e02e      	b.n	800bd34 <HAL_SPI_TransmitReceive+0x5d0>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800bcd6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800bcd8:	2b00      	cmp	r3, #0
 800bcda:	f47f af10 	bne.w	800bafe <HAL_SPI_TransmitReceive+0x39a>
 800bcde:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800bce0:	2b00      	cmp	r3, #0
 800bce2:	f47f af0c 	bne.w	800bafe <HAL_SPI_TransmitReceive+0x39a>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 800bce6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bce8:	9300      	str	r3, [sp, #0]
 800bcea:	69fb      	ldr	r3, [r7, #28]
 800bcec:	2200      	movs	r2, #0
 800bcee:	2108      	movs	r1, #8
 800bcf0:	68f8      	ldr	r0, [r7, #12]
 800bcf2:	f000 f8c3 	bl	800be7c <SPI_WaitOnFlagUntilTimeout>
 800bcf6:	4603      	mov	r3, r0
 800bcf8:	2b00      	cmp	r3, #0
 800bcfa:	d007      	beq.n	800bd0c <HAL_SPI_TransmitReceive+0x5a8>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800bcfc:	68fb      	ldr	r3, [r7, #12]
 800bcfe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bd02:	f043 0220 	orr.w	r2, r3, #32
 800bd06:	68fb      	ldr	r3, [r7, #12]
 800bd08:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800bd0c:	68f8      	ldr	r0, [r7, #12]
 800bd0e:	f000 f815 	bl	800bd3c <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800bd12:	68fb      	ldr	r3, [r7, #12]
 800bd14:	2200      	movs	r2, #0
 800bd16:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800bd1a:	68fb      	ldr	r3, [r7, #12]
 800bd1c:	2201      	movs	r2, #1
 800bd1e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800bd22:	68fb      	ldr	r3, [r7, #12]
 800bd24:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bd28:	2b00      	cmp	r3, #0
 800bd2a:	d001      	beq.n	800bd30 <HAL_SPI_TransmitReceive+0x5cc>
  {
    return HAL_ERROR;
 800bd2c:	2301      	movs	r3, #1
 800bd2e:	e001      	b.n	800bd34 <HAL_SPI_TransmitReceive+0x5d0>
  }
  return errorcode;
 800bd30:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800bd34:	4618      	mov	r0, r3
 800bd36:	3730      	adds	r7, #48	; 0x30
 800bd38:	46bd      	mov	sp, r7
 800bd3a:	bd80      	pop	{r7, pc}

0800bd3c <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800bd3c:	b480      	push	{r7}
 800bd3e:	b085      	sub	sp, #20
 800bd40:	af00      	add	r7, sp, #0
 800bd42:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800bd44:	687b      	ldr	r3, [r7, #4]
 800bd46:	681b      	ldr	r3, [r3, #0]
 800bd48:	695b      	ldr	r3, [r3, #20]
 800bd4a:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800bd4c:	687b      	ldr	r3, [r7, #4]
 800bd4e:	681b      	ldr	r3, [r3, #0]
 800bd50:	699a      	ldr	r2, [r3, #24]
 800bd52:	687b      	ldr	r3, [r7, #4]
 800bd54:	681b      	ldr	r3, [r3, #0]
 800bd56:	f042 0208 	orr.w	r2, r2, #8
 800bd5a:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800bd5c:	687b      	ldr	r3, [r7, #4]
 800bd5e:	681b      	ldr	r3, [r3, #0]
 800bd60:	699a      	ldr	r2, [r3, #24]
 800bd62:	687b      	ldr	r3, [r7, #4]
 800bd64:	681b      	ldr	r3, [r3, #0]
 800bd66:	f042 0210 	orr.w	r2, r2, #16
 800bd6a:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800bd6c:	687b      	ldr	r3, [r7, #4]
 800bd6e:	681b      	ldr	r3, [r3, #0]
 800bd70:	681a      	ldr	r2, [r3, #0]
 800bd72:	687b      	ldr	r3, [r7, #4]
 800bd74:	681b      	ldr	r3, [r3, #0]
 800bd76:	f022 0201 	bic.w	r2, r2, #1
 800bd7a:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800bd7c:	687b      	ldr	r3, [r7, #4]
 800bd7e:	681b      	ldr	r3, [r3, #0]
 800bd80:	6919      	ldr	r1, [r3, #16]
 800bd82:	687b      	ldr	r3, [r7, #4]
 800bd84:	681a      	ldr	r2, [r3, #0]
 800bd86:	4b3c      	ldr	r3, [pc, #240]	; (800be78 <SPI_CloseTransfer+0x13c>)
 800bd88:	400b      	ands	r3, r1
 800bd8a:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800bd8c:	687b      	ldr	r3, [r7, #4]
 800bd8e:	681b      	ldr	r3, [r3, #0]
 800bd90:	689a      	ldr	r2, [r3, #8]
 800bd92:	687b      	ldr	r3, [r7, #4]
 800bd94:	681b      	ldr	r3, [r3, #0]
 800bd96:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800bd9a:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800bd9c:	687b      	ldr	r3, [r7, #4]
 800bd9e:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800bda2:	b2db      	uxtb	r3, r3
 800bda4:	2b04      	cmp	r3, #4
 800bda6:	d014      	beq.n	800bdd2 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800bda8:	68fb      	ldr	r3, [r7, #12]
 800bdaa:	f003 0320 	and.w	r3, r3, #32
 800bdae:	2b00      	cmp	r3, #0
 800bdb0:	d00f      	beq.n	800bdd2 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800bdb2:	687b      	ldr	r3, [r7, #4]
 800bdb4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bdb8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800bdbc:	687b      	ldr	r3, [r7, #4]
 800bdbe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800bdc2:	687b      	ldr	r3, [r7, #4]
 800bdc4:	681b      	ldr	r3, [r3, #0]
 800bdc6:	699a      	ldr	r2, [r3, #24]
 800bdc8:	687b      	ldr	r3, [r7, #4]
 800bdca:	681b      	ldr	r3, [r3, #0]
 800bdcc:	f042 0220 	orr.w	r2, r2, #32
 800bdd0:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800bdd2:	687b      	ldr	r3, [r7, #4]
 800bdd4:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800bdd8:	b2db      	uxtb	r3, r3
 800bdda:	2b03      	cmp	r3, #3
 800bddc:	d014      	beq.n	800be08 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800bdde:	68fb      	ldr	r3, [r7, #12]
 800bde0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bde4:	2b00      	cmp	r3, #0
 800bde6:	d00f      	beq.n	800be08 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800bde8:	687b      	ldr	r3, [r7, #4]
 800bdea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bdee:	f043 0204 	orr.w	r2, r3, #4
 800bdf2:	687b      	ldr	r3, [r7, #4]
 800bdf4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800bdf8:	687b      	ldr	r3, [r7, #4]
 800bdfa:	681b      	ldr	r3, [r3, #0]
 800bdfc:	699a      	ldr	r2, [r3, #24]
 800bdfe:	687b      	ldr	r3, [r7, #4]
 800be00:	681b      	ldr	r3, [r3, #0]
 800be02:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800be06:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800be08:	68fb      	ldr	r3, [r7, #12]
 800be0a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800be0e:	2b00      	cmp	r3, #0
 800be10:	d00f      	beq.n	800be32 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800be12:	687b      	ldr	r3, [r7, #4]
 800be14:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800be18:	f043 0201 	orr.w	r2, r3, #1
 800be1c:	687b      	ldr	r3, [r7, #4]
 800be1e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800be22:	687b      	ldr	r3, [r7, #4]
 800be24:	681b      	ldr	r3, [r3, #0]
 800be26:	699a      	ldr	r2, [r3, #24]
 800be28:	687b      	ldr	r3, [r7, #4]
 800be2a:	681b      	ldr	r3, [r3, #0]
 800be2c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800be30:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800be32:	68fb      	ldr	r3, [r7, #12]
 800be34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800be38:	2b00      	cmp	r3, #0
 800be3a:	d00f      	beq.n	800be5c <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800be3c:	687b      	ldr	r3, [r7, #4]
 800be3e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800be42:	f043 0208 	orr.w	r2, r3, #8
 800be46:	687b      	ldr	r3, [r7, #4]
 800be48:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800be4c:	687b      	ldr	r3, [r7, #4]
 800be4e:	681b      	ldr	r3, [r3, #0]
 800be50:	699a      	ldr	r2, [r3, #24]
 800be52:	687b      	ldr	r3, [r7, #4]
 800be54:	681b      	ldr	r3, [r3, #0]
 800be56:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800be5a:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800be5c:	687b      	ldr	r3, [r7, #4]
 800be5e:	2200      	movs	r2, #0
 800be60:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800be64:	687b      	ldr	r3, [r7, #4]
 800be66:	2200      	movs	r2, #0
 800be68:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 800be6c:	bf00      	nop
 800be6e:	3714      	adds	r7, #20
 800be70:	46bd      	mov	sp, r7
 800be72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be76:	4770      	bx	lr
 800be78:	fffffc90 	.word	0xfffffc90

0800be7c <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Tickstart, uint32_t Timeout)
{
 800be7c:	b580      	push	{r7, lr}
 800be7e:	b084      	sub	sp, #16
 800be80:	af00      	add	r7, sp, #0
 800be82:	60f8      	str	r0, [r7, #12]
 800be84:	60b9      	str	r1, [r7, #8]
 800be86:	603b      	str	r3, [r7, #0]
 800be88:	4613      	mov	r3, r2
 800be8a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800be8c:	e010      	b.n	800beb0 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800be8e:	f7f8 faa3 	bl	80043d8 <HAL_GetTick>
 800be92:	4602      	mov	r2, r0
 800be94:	683b      	ldr	r3, [r7, #0]
 800be96:	1ad3      	subs	r3, r2, r3
 800be98:	69ba      	ldr	r2, [r7, #24]
 800be9a:	429a      	cmp	r2, r3
 800be9c:	d803      	bhi.n	800bea6 <SPI_WaitOnFlagUntilTimeout+0x2a>
 800be9e:	69bb      	ldr	r3, [r7, #24]
 800bea0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bea4:	d102      	bne.n	800beac <SPI_WaitOnFlagUntilTimeout+0x30>
 800bea6:	69bb      	ldr	r3, [r7, #24]
 800bea8:	2b00      	cmp	r3, #0
 800beaa:	d101      	bne.n	800beb0 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 800beac:	2303      	movs	r3, #3
 800beae:	e00f      	b.n	800bed0 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800beb0:	68fb      	ldr	r3, [r7, #12]
 800beb2:	681b      	ldr	r3, [r3, #0]
 800beb4:	695a      	ldr	r2, [r3, #20]
 800beb6:	68bb      	ldr	r3, [r7, #8]
 800beb8:	4013      	ands	r3, r2
 800beba:	68ba      	ldr	r2, [r7, #8]
 800bebc:	429a      	cmp	r2, r3
 800bebe:	bf0c      	ite	eq
 800bec0:	2301      	moveq	r3, #1
 800bec2:	2300      	movne	r3, #0
 800bec4:	b2db      	uxtb	r3, r3
 800bec6:	461a      	mov	r2, r3
 800bec8:	79fb      	ldrb	r3, [r7, #7]
 800beca:	429a      	cmp	r2, r3
 800becc:	d0df      	beq.n	800be8e <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 800bece:	2300      	movs	r3, #0
}
 800bed0:	4618      	mov	r0, r3
 800bed2:	3710      	adds	r7, #16
 800bed4:	46bd      	mov	sp, r7
 800bed6:	bd80      	pop	{r7, pc}

0800bed8 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 800bed8:	b480      	push	{r7}
 800beda:	b085      	sub	sp, #20
 800bedc:	af00      	add	r7, sp, #0
 800bede:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800bee0:	687b      	ldr	r3, [r7, #4]
 800bee2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bee4:	095b      	lsrs	r3, r3, #5
 800bee6:	3301      	adds	r3, #1
 800bee8:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800beea:	687b      	ldr	r3, [r7, #4]
 800beec:	68db      	ldr	r3, [r3, #12]
 800beee:	3301      	adds	r3, #1
 800bef0:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800bef2:	68bb      	ldr	r3, [r7, #8]
 800bef4:	3307      	adds	r3, #7
 800bef6:	08db      	lsrs	r3, r3, #3
 800bef8:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800befa:	68bb      	ldr	r3, [r7, #8]
 800befc:	68fa      	ldr	r2, [r7, #12]
 800befe:	fb02 f303 	mul.w	r3, r2, r3
}
 800bf02:	4618      	mov	r0, r3
 800bf04:	3714      	adds	r7, #20
 800bf06:	46bd      	mov	sp, r7
 800bf08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf0c:	4770      	bx	lr

0800bf0e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800bf0e:	b580      	push	{r7, lr}
 800bf10:	b082      	sub	sp, #8
 800bf12:	af00      	add	r7, sp, #0
 800bf14:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800bf16:	687b      	ldr	r3, [r7, #4]
 800bf18:	2b00      	cmp	r3, #0
 800bf1a:	d101      	bne.n	800bf20 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800bf1c:	2301      	movs	r3, #1
 800bf1e:	e049      	b.n	800bfb4 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800bf20:	687b      	ldr	r3, [r7, #4]
 800bf22:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bf26:	b2db      	uxtb	r3, r3
 800bf28:	2b00      	cmp	r3, #0
 800bf2a:	d106      	bne.n	800bf3a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800bf2c:	687b      	ldr	r3, [r7, #4]
 800bf2e:	2200      	movs	r2, #0
 800bf30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800bf34:	6878      	ldr	r0, [r7, #4]
 800bf36:	f7f7 fe33 	bl	8003ba0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bf3a:	687b      	ldr	r3, [r7, #4]
 800bf3c:	2202      	movs	r2, #2
 800bf3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800bf42:	687b      	ldr	r3, [r7, #4]
 800bf44:	681a      	ldr	r2, [r3, #0]
 800bf46:	687b      	ldr	r3, [r7, #4]
 800bf48:	3304      	adds	r3, #4
 800bf4a:	4619      	mov	r1, r3
 800bf4c:	4610      	mov	r0, r2
 800bf4e:	f000 fe53 	bl	800cbf8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800bf52:	687b      	ldr	r3, [r7, #4]
 800bf54:	2201      	movs	r2, #1
 800bf56:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800bf5a:	687b      	ldr	r3, [r7, #4]
 800bf5c:	2201      	movs	r2, #1
 800bf5e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800bf62:	687b      	ldr	r3, [r7, #4]
 800bf64:	2201      	movs	r2, #1
 800bf66:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800bf6a:	687b      	ldr	r3, [r7, #4]
 800bf6c:	2201      	movs	r2, #1
 800bf6e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800bf72:	687b      	ldr	r3, [r7, #4]
 800bf74:	2201      	movs	r2, #1
 800bf76:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800bf7a:	687b      	ldr	r3, [r7, #4]
 800bf7c:	2201      	movs	r2, #1
 800bf7e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800bf82:	687b      	ldr	r3, [r7, #4]
 800bf84:	2201      	movs	r2, #1
 800bf86:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800bf8a:	687b      	ldr	r3, [r7, #4]
 800bf8c:	2201      	movs	r2, #1
 800bf8e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800bf92:	687b      	ldr	r3, [r7, #4]
 800bf94:	2201      	movs	r2, #1
 800bf96:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800bf9a:	687b      	ldr	r3, [r7, #4]
 800bf9c:	2201      	movs	r2, #1
 800bf9e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800bfa2:	687b      	ldr	r3, [r7, #4]
 800bfa4:	2201      	movs	r2, #1
 800bfa6:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800bfaa:	687b      	ldr	r3, [r7, #4]
 800bfac:	2201      	movs	r2, #1
 800bfae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800bfb2:	2300      	movs	r3, #0
}
 800bfb4:	4618      	mov	r0, r3
 800bfb6:	3708      	adds	r7, #8
 800bfb8:	46bd      	mov	sp, r7
 800bfba:	bd80      	pop	{r7, pc}

0800bfbc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800bfbc:	b480      	push	{r7}
 800bfbe:	b085      	sub	sp, #20
 800bfc0:	af00      	add	r7, sp, #0
 800bfc2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800bfc4:	687b      	ldr	r3, [r7, #4]
 800bfc6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bfca:	b2db      	uxtb	r3, r3
 800bfcc:	2b01      	cmp	r3, #1
 800bfce:	d001      	beq.n	800bfd4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800bfd0:	2301      	movs	r3, #1
 800bfd2:	e054      	b.n	800c07e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bfd4:	687b      	ldr	r3, [r7, #4]
 800bfd6:	2202      	movs	r2, #2
 800bfd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800bfdc:	687b      	ldr	r3, [r7, #4]
 800bfde:	681b      	ldr	r3, [r3, #0]
 800bfe0:	68da      	ldr	r2, [r3, #12]
 800bfe2:	687b      	ldr	r3, [r7, #4]
 800bfe4:	681b      	ldr	r3, [r3, #0]
 800bfe6:	f042 0201 	orr.w	r2, r2, #1
 800bfea:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800bfec:	687b      	ldr	r3, [r7, #4]
 800bfee:	681b      	ldr	r3, [r3, #0]
 800bff0:	4a26      	ldr	r2, [pc, #152]	; (800c08c <HAL_TIM_Base_Start_IT+0xd0>)
 800bff2:	4293      	cmp	r3, r2
 800bff4:	d022      	beq.n	800c03c <HAL_TIM_Base_Start_IT+0x80>
 800bff6:	687b      	ldr	r3, [r7, #4]
 800bff8:	681b      	ldr	r3, [r3, #0]
 800bffa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bffe:	d01d      	beq.n	800c03c <HAL_TIM_Base_Start_IT+0x80>
 800c000:	687b      	ldr	r3, [r7, #4]
 800c002:	681b      	ldr	r3, [r3, #0]
 800c004:	4a22      	ldr	r2, [pc, #136]	; (800c090 <HAL_TIM_Base_Start_IT+0xd4>)
 800c006:	4293      	cmp	r3, r2
 800c008:	d018      	beq.n	800c03c <HAL_TIM_Base_Start_IT+0x80>
 800c00a:	687b      	ldr	r3, [r7, #4]
 800c00c:	681b      	ldr	r3, [r3, #0]
 800c00e:	4a21      	ldr	r2, [pc, #132]	; (800c094 <HAL_TIM_Base_Start_IT+0xd8>)
 800c010:	4293      	cmp	r3, r2
 800c012:	d013      	beq.n	800c03c <HAL_TIM_Base_Start_IT+0x80>
 800c014:	687b      	ldr	r3, [r7, #4]
 800c016:	681b      	ldr	r3, [r3, #0]
 800c018:	4a1f      	ldr	r2, [pc, #124]	; (800c098 <HAL_TIM_Base_Start_IT+0xdc>)
 800c01a:	4293      	cmp	r3, r2
 800c01c:	d00e      	beq.n	800c03c <HAL_TIM_Base_Start_IT+0x80>
 800c01e:	687b      	ldr	r3, [r7, #4]
 800c020:	681b      	ldr	r3, [r3, #0]
 800c022:	4a1e      	ldr	r2, [pc, #120]	; (800c09c <HAL_TIM_Base_Start_IT+0xe0>)
 800c024:	4293      	cmp	r3, r2
 800c026:	d009      	beq.n	800c03c <HAL_TIM_Base_Start_IT+0x80>
 800c028:	687b      	ldr	r3, [r7, #4]
 800c02a:	681b      	ldr	r3, [r3, #0]
 800c02c:	4a1c      	ldr	r2, [pc, #112]	; (800c0a0 <HAL_TIM_Base_Start_IT+0xe4>)
 800c02e:	4293      	cmp	r3, r2
 800c030:	d004      	beq.n	800c03c <HAL_TIM_Base_Start_IT+0x80>
 800c032:	687b      	ldr	r3, [r7, #4]
 800c034:	681b      	ldr	r3, [r3, #0]
 800c036:	4a1b      	ldr	r2, [pc, #108]	; (800c0a4 <HAL_TIM_Base_Start_IT+0xe8>)
 800c038:	4293      	cmp	r3, r2
 800c03a:	d115      	bne.n	800c068 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c03c:	687b      	ldr	r3, [r7, #4]
 800c03e:	681b      	ldr	r3, [r3, #0]
 800c040:	689a      	ldr	r2, [r3, #8]
 800c042:	4b19      	ldr	r3, [pc, #100]	; (800c0a8 <HAL_TIM_Base_Start_IT+0xec>)
 800c044:	4013      	ands	r3, r2
 800c046:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c048:	68fb      	ldr	r3, [r7, #12]
 800c04a:	2b06      	cmp	r3, #6
 800c04c:	d015      	beq.n	800c07a <HAL_TIM_Base_Start_IT+0xbe>
 800c04e:	68fb      	ldr	r3, [r7, #12]
 800c050:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c054:	d011      	beq.n	800c07a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800c056:	687b      	ldr	r3, [r7, #4]
 800c058:	681b      	ldr	r3, [r3, #0]
 800c05a:	681a      	ldr	r2, [r3, #0]
 800c05c:	687b      	ldr	r3, [r7, #4]
 800c05e:	681b      	ldr	r3, [r3, #0]
 800c060:	f042 0201 	orr.w	r2, r2, #1
 800c064:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c066:	e008      	b.n	800c07a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800c068:	687b      	ldr	r3, [r7, #4]
 800c06a:	681b      	ldr	r3, [r3, #0]
 800c06c:	681a      	ldr	r2, [r3, #0]
 800c06e:	687b      	ldr	r3, [r7, #4]
 800c070:	681b      	ldr	r3, [r3, #0]
 800c072:	f042 0201 	orr.w	r2, r2, #1
 800c076:	601a      	str	r2, [r3, #0]
 800c078:	e000      	b.n	800c07c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c07a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800c07c:	2300      	movs	r3, #0
}
 800c07e:	4618      	mov	r0, r3
 800c080:	3714      	adds	r7, #20
 800c082:	46bd      	mov	sp, r7
 800c084:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c088:	4770      	bx	lr
 800c08a:	bf00      	nop
 800c08c:	40010000 	.word	0x40010000
 800c090:	40000400 	.word	0x40000400
 800c094:	40000800 	.word	0x40000800
 800c098:	40000c00 	.word	0x40000c00
 800c09c:	40010400 	.word	0x40010400
 800c0a0:	40001800 	.word	0x40001800
 800c0a4:	40014000 	.word	0x40014000
 800c0a8:	00010007 	.word	0x00010007

0800c0ac <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800c0ac:	b580      	push	{r7, lr}
 800c0ae:	b082      	sub	sp, #8
 800c0b0:	af00      	add	r7, sp, #0
 800c0b2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c0b4:	687b      	ldr	r3, [r7, #4]
 800c0b6:	2b00      	cmp	r3, #0
 800c0b8:	d101      	bne.n	800c0be <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800c0ba:	2301      	movs	r3, #1
 800c0bc:	e049      	b.n	800c152 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c0be:	687b      	ldr	r3, [r7, #4]
 800c0c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c0c4:	b2db      	uxtb	r3, r3
 800c0c6:	2b00      	cmp	r3, #0
 800c0c8:	d106      	bne.n	800c0d8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c0ca:	687b      	ldr	r3, [r7, #4]
 800c0cc:	2200      	movs	r2, #0
 800c0ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800c0d2:	6878      	ldr	r0, [r7, #4]
 800c0d4:	f000 f841 	bl	800c15a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c0d8:	687b      	ldr	r3, [r7, #4]
 800c0da:	2202      	movs	r2, #2
 800c0dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c0e0:	687b      	ldr	r3, [r7, #4]
 800c0e2:	681a      	ldr	r2, [r3, #0]
 800c0e4:	687b      	ldr	r3, [r7, #4]
 800c0e6:	3304      	adds	r3, #4
 800c0e8:	4619      	mov	r1, r3
 800c0ea:	4610      	mov	r0, r2
 800c0ec:	f000 fd84 	bl	800cbf8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c0f0:	687b      	ldr	r3, [r7, #4]
 800c0f2:	2201      	movs	r2, #1
 800c0f4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c0f8:	687b      	ldr	r3, [r7, #4]
 800c0fa:	2201      	movs	r2, #1
 800c0fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800c100:	687b      	ldr	r3, [r7, #4]
 800c102:	2201      	movs	r2, #1
 800c104:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800c108:	687b      	ldr	r3, [r7, #4]
 800c10a:	2201      	movs	r2, #1
 800c10c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800c110:	687b      	ldr	r3, [r7, #4]
 800c112:	2201      	movs	r2, #1
 800c114:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800c118:	687b      	ldr	r3, [r7, #4]
 800c11a:	2201      	movs	r2, #1
 800c11c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800c120:	687b      	ldr	r3, [r7, #4]
 800c122:	2201      	movs	r2, #1
 800c124:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c128:	687b      	ldr	r3, [r7, #4]
 800c12a:	2201      	movs	r2, #1
 800c12c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c130:	687b      	ldr	r3, [r7, #4]
 800c132:	2201      	movs	r2, #1
 800c134:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c138:	687b      	ldr	r3, [r7, #4]
 800c13a:	2201      	movs	r2, #1
 800c13c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800c140:	687b      	ldr	r3, [r7, #4]
 800c142:	2201      	movs	r2, #1
 800c144:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c148:	687b      	ldr	r3, [r7, #4]
 800c14a:	2201      	movs	r2, #1
 800c14c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800c150:	2300      	movs	r3, #0
}
 800c152:	4618      	mov	r0, r3
 800c154:	3708      	adds	r7, #8
 800c156:	46bd      	mov	sp, r7
 800c158:	bd80      	pop	{r7, pc}

0800c15a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800c15a:	b480      	push	{r7}
 800c15c:	b083      	sub	sp, #12
 800c15e:	af00      	add	r7, sp, #0
 800c160:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800c162:	bf00      	nop
 800c164:	370c      	adds	r7, #12
 800c166:	46bd      	mov	sp, r7
 800c168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c16c:	4770      	bx	lr
	...

0800c170 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800c170:	b580      	push	{r7, lr}
 800c172:	b082      	sub	sp, #8
 800c174:	af00      	add	r7, sp, #0
 800c176:	6078      	str	r0, [r7, #4]
 800c178:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800c17a:	687b      	ldr	r3, [r7, #4]
 800c17c:	681b      	ldr	r3, [r3, #0]
 800c17e:	2200      	movs	r2, #0
 800c180:	6839      	ldr	r1, [r7, #0]
 800c182:	4618      	mov	r0, r3
 800c184:	f001 f946 	bl	800d414 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800c188:	687b      	ldr	r3, [r7, #4]
 800c18a:	681b      	ldr	r3, [r3, #0]
 800c18c:	4a3e      	ldr	r2, [pc, #248]	; (800c288 <HAL_TIM_PWM_Stop+0x118>)
 800c18e:	4293      	cmp	r3, r2
 800c190:	d013      	beq.n	800c1ba <HAL_TIM_PWM_Stop+0x4a>
 800c192:	687b      	ldr	r3, [r7, #4]
 800c194:	681b      	ldr	r3, [r3, #0]
 800c196:	4a3d      	ldr	r2, [pc, #244]	; (800c28c <HAL_TIM_PWM_Stop+0x11c>)
 800c198:	4293      	cmp	r3, r2
 800c19a:	d00e      	beq.n	800c1ba <HAL_TIM_PWM_Stop+0x4a>
 800c19c:	687b      	ldr	r3, [r7, #4]
 800c19e:	681b      	ldr	r3, [r3, #0]
 800c1a0:	4a3b      	ldr	r2, [pc, #236]	; (800c290 <HAL_TIM_PWM_Stop+0x120>)
 800c1a2:	4293      	cmp	r3, r2
 800c1a4:	d009      	beq.n	800c1ba <HAL_TIM_PWM_Stop+0x4a>
 800c1a6:	687b      	ldr	r3, [r7, #4]
 800c1a8:	681b      	ldr	r3, [r3, #0]
 800c1aa:	4a3a      	ldr	r2, [pc, #232]	; (800c294 <HAL_TIM_PWM_Stop+0x124>)
 800c1ac:	4293      	cmp	r3, r2
 800c1ae:	d004      	beq.n	800c1ba <HAL_TIM_PWM_Stop+0x4a>
 800c1b0:	687b      	ldr	r3, [r7, #4]
 800c1b2:	681b      	ldr	r3, [r3, #0]
 800c1b4:	4a38      	ldr	r2, [pc, #224]	; (800c298 <HAL_TIM_PWM_Stop+0x128>)
 800c1b6:	4293      	cmp	r3, r2
 800c1b8:	d101      	bne.n	800c1be <HAL_TIM_PWM_Stop+0x4e>
 800c1ba:	2301      	movs	r3, #1
 800c1bc:	e000      	b.n	800c1c0 <HAL_TIM_PWM_Stop+0x50>
 800c1be:	2300      	movs	r3, #0
 800c1c0:	2b00      	cmp	r3, #0
 800c1c2:	d017      	beq.n	800c1f4 <HAL_TIM_PWM_Stop+0x84>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800c1c4:	687b      	ldr	r3, [r7, #4]
 800c1c6:	681b      	ldr	r3, [r3, #0]
 800c1c8:	6a1a      	ldr	r2, [r3, #32]
 800c1ca:	f241 1311 	movw	r3, #4369	; 0x1111
 800c1ce:	4013      	ands	r3, r2
 800c1d0:	2b00      	cmp	r3, #0
 800c1d2:	d10f      	bne.n	800c1f4 <HAL_TIM_PWM_Stop+0x84>
 800c1d4:	687b      	ldr	r3, [r7, #4]
 800c1d6:	681b      	ldr	r3, [r3, #0]
 800c1d8:	6a1a      	ldr	r2, [r3, #32]
 800c1da:	f240 4344 	movw	r3, #1092	; 0x444
 800c1de:	4013      	ands	r3, r2
 800c1e0:	2b00      	cmp	r3, #0
 800c1e2:	d107      	bne.n	800c1f4 <HAL_TIM_PWM_Stop+0x84>
 800c1e4:	687b      	ldr	r3, [r7, #4]
 800c1e6:	681b      	ldr	r3, [r3, #0]
 800c1e8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c1ea:	687b      	ldr	r3, [r7, #4]
 800c1ec:	681b      	ldr	r3, [r3, #0]
 800c1ee:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800c1f2:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800c1f4:	687b      	ldr	r3, [r7, #4]
 800c1f6:	681b      	ldr	r3, [r3, #0]
 800c1f8:	6a1a      	ldr	r2, [r3, #32]
 800c1fa:	f241 1311 	movw	r3, #4369	; 0x1111
 800c1fe:	4013      	ands	r3, r2
 800c200:	2b00      	cmp	r3, #0
 800c202:	d10f      	bne.n	800c224 <HAL_TIM_PWM_Stop+0xb4>
 800c204:	687b      	ldr	r3, [r7, #4]
 800c206:	681b      	ldr	r3, [r3, #0]
 800c208:	6a1a      	ldr	r2, [r3, #32]
 800c20a:	f240 4344 	movw	r3, #1092	; 0x444
 800c20e:	4013      	ands	r3, r2
 800c210:	2b00      	cmp	r3, #0
 800c212:	d107      	bne.n	800c224 <HAL_TIM_PWM_Stop+0xb4>
 800c214:	687b      	ldr	r3, [r7, #4]
 800c216:	681b      	ldr	r3, [r3, #0]
 800c218:	681a      	ldr	r2, [r3, #0]
 800c21a:	687b      	ldr	r3, [r7, #4]
 800c21c:	681b      	ldr	r3, [r3, #0]
 800c21e:	f022 0201 	bic.w	r2, r2, #1
 800c222:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800c224:	683b      	ldr	r3, [r7, #0]
 800c226:	2b00      	cmp	r3, #0
 800c228:	d104      	bne.n	800c234 <HAL_TIM_PWM_Stop+0xc4>
 800c22a:	687b      	ldr	r3, [r7, #4]
 800c22c:	2201      	movs	r2, #1
 800c22e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800c232:	e023      	b.n	800c27c <HAL_TIM_PWM_Stop+0x10c>
 800c234:	683b      	ldr	r3, [r7, #0]
 800c236:	2b04      	cmp	r3, #4
 800c238:	d104      	bne.n	800c244 <HAL_TIM_PWM_Stop+0xd4>
 800c23a:	687b      	ldr	r3, [r7, #4]
 800c23c:	2201      	movs	r2, #1
 800c23e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800c242:	e01b      	b.n	800c27c <HAL_TIM_PWM_Stop+0x10c>
 800c244:	683b      	ldr	r3, [r7, #0]
 800c246:	2b08      	cmp	r3, #8
 800c248:	d104      	bne.n	800c254 <HAL_TIM_PWM_Stop+0xe4>
 800c24a:	687b      	ldr	r3, [r7, #4]
 800c24c:	2201      	movs	r2, #1
 800c24e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800c252:	e013      	b.n	800c27c <HAL_TIM_PWM_Stop+0x10c>
 800c254:	683b      	ldr	r3, [r7, #0]
 800c256:	2b0c      	cmp	r3, #12
 800c258:	d104      	bne.n	800c264 <HAL_TIM_PWM_Stop+0xf4>
 800c25a:	687b      	ldr	r3, [r7, #4]
 800c25c:	2201      	movs	r2, #1
 800c25e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800c262:	e00b      	b.n	800c27c <HAL_TIM_PWM_Stop+0x10c>
 800c264:	683b      	ldr	r3, [r7, #0]
 800c266:	2b10      	cmp	r3, #16
 800c268:	d104      	bne.n	800c274 <HAL_TIM_PWM_Stop+0x104>
 800c26a:	687b      	ldr	r3, [r7, #4]
 800c26c:	2201      	movs	r2, #1
 800c26e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800c272:	e003      	b.n	800c27c <HAL_TIM_PWM_Stop+0x10c>
 800c274:	687b      	ldr	r3, [r7, #4]
 800c276:	2201      	movs	r2, #1
 800c278:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 800c27c:	2300      	movs	r3, #0
}
 800c27e:	4618      	mov	r0, r3
 800c280:	3708      	adds	r7, #8
 800c282:	46bd      	mov	sp, r7
 800c284:	bd80      	pop	{r7, pc}
 800c286:	bf00      	nop
 800c288:	40010000 	.word	0x40010000
 800c28c:	40010400 	.word	0x40010400
 800c290:	40014000 	.word	0x40014000
 800c294:	40014400 	.word	0x40014400
 800c298:	40014800 	.word	0x40014800

0800c29c <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800c29c:	b580      	push	{r7, lr}
 800c29e:	b084      	sub	sp, #16
 800c2a0:	af00      	add	r7, sp, #0
 800c2a2:	6078      	str	r0, [r7, #4]
 800c2a4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800c2a6:	2300      	movs	r3, #0
 800c2a8:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800c2aa:	683b      	ldr	r3, [r7, #0]
 800c2ac:	2b00      	cmp	r3, #0
 800c2ae:	d109      	bne.n	800c2c4 <HAL_TIM_PWM_Start_IT+0x28>
 800c2b0:	687b      	ldr	r3, [r7, #4]
 800c2b2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800c2b6:	b2db      	uxtb	r3, r3
 800c2b8:	2b01      	cmp	r3, #1
 800c2ba:	bf14      	ite	ne
 800c2bc:	2301      	movne	r3, #1
 800c2be:	2300      	moveq	r3, #0
 800c2c0:	b2db      	uxtb	r3, r3
 800c2c2:	e03c      	b.n	800c33e <HAL_TIM_PWM_Start_IT+0xa2>
 800c2c4:	683b      	ldr	r3, [r7, #0]
 800c2c6:	2b04      	cmp	r3, #4
 800c2c8:	d109      	bne.n	800c2de <HAL_TIM_PWM_Start_IT+0x42>
 800c2ca:	687b      	ldr	r3, [r7, #4]
 800c2cc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800c2d0:	b2db      	uxtb	r3, r3
 800c2d2:	2b01      	cmp	r3, #1
 800c2d4:	bf14      	ite	ne
 800c2d6:	2301      	movne	r3, #1
 800c2d8:	2300      	moveq	r3, #0
 800c2da:	b2db      	uxtb	r3, r3
 800c2dc:	e02f      	b.n	800c33e <HAL_TIM_PWM_Start_IT+0xa2>
 800c2de:	683b      	ldr	r3, [r7, #0]
 800c2e0:	2b08      	cmp	r3, #8
 800c2e2:	d109      	bne.n	800c2f8 <HAL_TIM_PWM_Start_IT+0x5c>
 800c2e4:	687b      	ldr	r3, [r7, #4]
 800c2e6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800c2ea:	b2db      	uxtb	r3, r3
 800c2ec:	2b01      	cmp	r3, #1
 800c2ee:	bf14      	ite	ne
 800c2f0:	2301      	movne	r3, #1
 800c2f2:	2300      	moveq	r3, #0
 800c2f4:	b2db      	uxtb	r3, r3
 800c2f6:	e022      	b.n	800c33e <HAL_TIM_PWM_Start_IT+0xa2>
 800c2f8:	683b      	ldr	r3, [r7, #0]
 800c2fa:	2b0c      	cmp	r3, #12
 800c2fc:	d109      	bne.n	800c312 <HAL_TIM_PWM_Start_IT+0x76>
 800c2fe:	687b      	ldr	r3, [r7, #4]
 800c300:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c304:	b2db      	uxtb	r3, r3
 800c306:	2b01      	cmp	r3, #1
 800c308:	bf14      	ite	ne
 800c30a:	2301      	movne	r3, #1
 800c30c:	2300      	moveq	r3, #0
 800c30e:	b2db      	uxtb	r3, r3
 800c310:	e015      	b.n	800c33e <HAL_TIM_PWM_Start_IT+0xa2>
 800c312:	683b      	ldr	r3, [r7, #0]
 800c314:	2b10      	cmp	r3, #16
 800c316:	d109      	bne.n	800c32c <HAL_TIM_PWM_Start_IT+0x90>
 800c318:	687b      	ldr	r3, [r7, #4]
 800c31a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800c31e:	b2db      	uxtb	r3, r3
 800c320:	2b01      	cmp	r3, #1
 800c322:	bf14      	ite	ne
 800c324:	2301      	movne	r3, #1
 800c326:	2300      	moveq	r3, #0
 800c328:	b2db      	uxtb	r3, r3
 800c32a:	e008      	b.n	800c33e <HAL_TIM_PWM_Start_IT+0xa2>
 800c32c:	687b      	ldr	r3, [r7, #4]
 800c32e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800c332:	b2db      	uxtb	r3, r3
 800c334:	2b01      	cmp	r3, #1
 800c336:	bf14      	ite	ne
 800c338:	2301      	movne	r3, #1
 800c33a:	2300      	moveq	r3, #0
 800c33c:	b2db      	uxtb	r3, r3
 800c33e:	2b00      	cmp	r3, #0
 800c340:	d001      	beq.n	800c346 <HAL_TIM_PWM_Start_IT+0xaa>
  {
    return HAL_ERROR;
 800c342:	2301      	movs	r3, #1
 800c344:	e0ec      	b.n	800c520 <HAL_TIM_PWM_Start_IT+0x284>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800c346:	683b      	ldr	r3, [r7, #0]
 800c348:	2b00      	cmp	r3, #0
 800c34a:	d104      	bne.n	800c356 <HAL_TIM_PWM_Start_IT+0xba>
 800c34c:	687b      	ldr	r3, [r7, #4]
 800c34e:	2202      	movs	r2, #2
 800c350:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800c354:	e023      	b.n	800c39e <HAL_TIM_PWM_Start_IT+0x102>
 800c356:	683b      	ldr	r3, [r7, #0]
 800c358:	2b04      	cmp	r3, #4
 800c35a:	d104      	bne.n	800c366 <HAL_TIM_PWM_Start_IT+0xca>
 800c35c:	687b      	ldr	r3, [r7, #4]
 800c35e:	2202      	movs	r2, #2
 800c360:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800c364:	e01b      	b.n	800c39e <HAL_TIM_PWM_Start_IT+0x102>
 800c366:	683b      	ldr	r3, [r7, #0]
 800c368:	2b08      	cmp	r3, #8
 800c36a:	d104      	bne.n	800c376 <HAL_TIM_PWM_Start_IT+0xda>
 800c36c:	687b      	ldr	r3, [r7, #4]
 800c36e:	2202      	movs	r2, #2
 800c370:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800c374:	e013      	b.n	800c39e <HAL_TIM_PWM_Start_IT+0x102>
 800c376:	683b      	ldr	r3, [r7, #0]
 800c378:	2b0c      	cmp	r3, #12
 800c37a:	d104      	bne.n	800c386 <HAL_TIM_PWM_Start_IT+0xea>
 800c37c:	687b      	ldr	r3, [r7, #4]
 800c37e:	2202      	movs	r2, #2
 800c380:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800c384:	e00b      	b.n	800c39e <HAL_TIM_PWM_Start_IT+0x102>
 800c386:	683b      	ldr	r3, [r7, #0]
 800c388:	2b10      	cmp	r3, #16
 800c38a:	d104      	bne.n	800c396 <HAL_TIM_PWM_Start_IT+0xfa>
 800c38c:	687b      	ldr	r3, [r7, #4]
 800c38e:	2202      	movs	r2, #2
 800c390:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800c394:	e003      	b.n	800c39e <HAL_TIM_PWM_Start_IT+0x102>
 800c396:	687b      	ldr	r3, [r7, #4]
 800c398:	2202      	movs	r2, #2
 800c39a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  switch (Channel)
 800c39e:	683b      	ldr	r3, [r7, #0]
 800c3a0:	2b0c      	cmp	r3, #12
 800c3a2:	d841      	bhi.n	800c428 <HAL_TIM_PWM_Start_IT+0x18c>
 800c3a4:	a201      	add	r2, pc, #4	; (adr r2, 800c3ac <HAL_TIM_PWM_Start_IT+0x110>)
 800c3a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c3aa:	bf00      	nop
 800c3ac:	0800c3e1 	.word	0x0800c3e1
 800c3b0:	0800c429 	.word	0x0800c429
 800c3b4:	0800c429 	.word	0x0800c429
 800c3b8:	0800c429 	.word	0x0800c429
 800c3bc:	0800c3f3 	.word	0x0800c3f3
 800c3c0:	0800c429 	.word	0x0800c429
 800c3c4:	0800c429 	.word	0x0800c429
 800c3c8:	0800c429 	.word	0x0800c429
 800c3cc:	0800c405 	.word	0x0800c405
 800c3d0:	0800c429 	.word	0x0800c429
 800c3d4:	0800c429 	.word	0x0800c429
 800c3d8:	0800c429 	.word	0x0800c429
 800c3dc:	0800c417 	.word	0x0800c417
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800c3e0:	687b      	ldr	r3, [r7, #4]
 800c3e2:	681b      	ldr	r3, [r3, #0]
 800c3e4:	68da      	ldr	r2, [r3, #12]
 800c3e6:	687b      	ldr	r3, [r7, #4]
 800c3e8:	681b      	ldr	r3, [r3, #0]
 800c3ea:	f042 0202 	orr.w	r2, r2, #2
 800c3ee:	60da      	str	r2, [r3, #12]
      break;
 800c3f0:	e01d      	b.n	800c42e <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800c3f2:	687b      	ldr	r3, [r7, #4]
 800c3f4:	681b      	ldr	r3, [r3, #0]
 800c3f6:	68da      	ldr	r2, [r3, #12]
 800c3f8:	687b      	ldr	r3, [r7, #4]
 800c3fa:	681b      	ldr	r3, [r3, #0]
 800c3fc:	f042 0204 	orr.w	r2, r2, #4
 800c400:	60da      	str	r2, [r3, #12]
      break;
 800c402:	e014      	b.n	800c42e <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800c404:	687b      	ldr	r3, [r7, #4]
 800c406:	681b      	ldr	r3, [r3, #0]
 800c408:	68da      	ldr	r2, [r3, #12]
 800c40a:	687b      	ldr	r3, [r7, #4]
 800c40c:	681b      	ldr	r3, [r3, #0]
 800c40e:	f042 0208 	orr.w	r2, r2, #8
 800c412:	60da      	str	r2, [r3, #12]
      break;
 800c414:	e00b      	b.n	800c42e <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800c416:	687b      	ldr	r3, [r7, #4]
 800c418:	681b      	ldr	r3, [r3, #0]
 800c41a:	68da      	ldr	r2, [r3, #12]
 800c41c:	687b      	ldr	r3, [r7, #4]
 800c41e:	681b      	ldr	r3, [r3, #0]
 800c420:	f042 0210 	orr.w	r2, r2, #16
 800c424:	60da      	str	r2, [r3, #12]
      break;
 800c426:	e002      	b.n	800c42e <HAL_TIM_PWM_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 800c428:	2301      	movs	r3, #1
 800c42a:	73fb      	strb	r3, [r7, #15]
      break;
 800c42c:	bf00      	nop
  }

  if (status == HAL_OK)
 800c42e:	7bfb      	ldrb	r3, [r7, #15]
 800c430:	2b00      	cmp	r3, #0
 800c432:	d174      	bne.n	800c51e <HAL_TIM_PWM_Start_IT+0x282>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800c434:	687b      	ldr	r3, [r7, #4]
 800c436:	681b      	ldr	r3, [r3, #0]
 800c438:	2201      	movs	r2, #1
 800c43a:	6839      	ldr	r1, [r7, #0]
 800c43c:	4618      	mov	r0, r3
 800c43e:	f000 ffe9 	bl	800d414 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800c442:	687b      	ldr	r3, [r7, #4]
 800c444:	681b      	ldr	r3, [r3, #0]
 800c446:	4a38      	ldr	r2, [pc, #224]	; (800c528 <HAL_TIM_PWM_Start_IT+0x28c>)
 800c448:	4293      	cmp	r3, r2
 800c44a:	d013      	beq.n	800c474 <HAL_TIM_PWM_Start_IT+0x1d8>
 800c44c:	687b      	ldr	r3, [r7, #4]
 800c44e:	681b      	ldr	r3, [r3, #0]
 800c450:	4a36      	ldr	r2, [pc, #216]	; (800c52c <HAL_TIM_PWM_Start_IT+0x290>)
 800c452:	4293      	cmp	r3, r2
 800c454:	d00e      	beq.n	800c474 <HAL_TIM_PWM_Start_IT+0x1d8>
 800c456:	687b      	ldr	r3, [r7, #4]
 800c458:	681b      	ldr	r3, [r3, #0]
 800c45a:	4a35      	ldr	r2, [pc, #212]	; (800c530 <HAL_TIM_PWM_Start_IT+0x294>)
 800c45c:	4293      	cmp	r3, r2
 800c45e:	d009      	beq.n	800c474 <HAL_TIM_PWM_Start_IT+0x1d8>
 800c460:	687b      	ldr	r3, [r7, #4]
 800c462:	681b      	ldr	r3, [r3, #0]
 800c464:	4a33      	ldr	r2, [pc, #204]	; (800c534 <HAL_TIM_PWM_Start_IT+0x298>)
 800c466:	4293      	cmp	r3, r2
 800c468:	d004      	beq.n	800c474 <HAL_TIM_PWM_Start_IT+0x1d8>
 800c46a:	687b      	ldr	r3, [r7, #4]
 800c46c:	681b      	ldr	r3, [r3, #0]
 800c46e:	4a32      	ldr	r2, [pc, #200]	; (800c538 <HAL_TIM_PWM_Start_IT+0x29c>)
 800c470:	4293      	cmp	r3, r2
 800c472:	d101      	bne.n	800c478 <HAL_TIM_PWM_Start_IT+0x1dc>
 800c474:	2301      	movs	r3, #1
 800c476:	e000      	b.n	800c47a <HAL_TIM_PWM_Start_IT+0x1de>
 800c478:	2300      	movs	r3, #0
 800c47a:	2b00      	cmp	r3, #0
 800c47c:	d007      	beq.n	800c48e <HAL_TIM_PWM_Start_IT+0x1f2>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 800c47e:	687b      	ldr	r3, [r7, #4]
 800c480:	681b      	ldr	r3, [r3, #0]
 800c482:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c484:	687b      	ldr	r3, [r7, #4]
 800c486:	681b      	ldr	r3, [r3, #0]
 800c488:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800c48c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c48e:	687b      	ldr	r3, [r7, #4]
 800c490:	681b      	ldr	r3, [r3, #0]
 800c492:	4a25      	ldr	r2, [pc, #148]	; (800c528 <HAL_TIM_PWM_Start_IT+0x28c>)
 800c494:	4293      	cmp	r3, r2
 800c496:	d022      	beq.n	800c4de <HAL_TIM_PWM_Start_IT+0x242>
 800c498:	687b      	ldr	r3, [r7, #4]
 800c49a:	681b      	ldr	r3, [r3, #0]
 800c49c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c4a0:	d01d      	beq.n	800c4de <HAL_TIM_PWM_Start_IT+0x242>
 800c4a2:	687b      	ldr	r3, [r7, #4]
 800c4a4:	681b      	ldr	r3, [r3, #0]
 800c4a6:	4a25      	ldr	r2, [pc, #148]	; (800c53c <HAL_TIM_PWM_Start_IT+0x2a0>)
 800c4a8:	4293      	cmp	r3, r2
 800c4aa:	d018      	beq.n	800c4de <HAL_TIM_PWM_Start_IT+0x242>
 800c4ac:	687b      	ldr	r3, [r7, #4]
 800c4ae:	681b      	ldr	r3, [r3, #0]
 800c4b0:	4a23      	ldr	r2, [pc, #140]	; (800c540 <HAL_TIM_PWM_Start_IT+0x2a4>)
 800c4b2:	4293      	cmp	r3, r2
 800c4b4:	d013      	beq.n	800c4de <HAL_TIM_PWM_Start_IT+0x242>
 800c4b6:	687b      	ldr	r3, [r7, #4]
 800c4b8:	681b      	ldr	r3, [r3, #0]
 800c4ba:	4a22      	ldr	r2, [pc, #136]	; (800c544 <HAL_TIM_PWM_Start_IT+0x2a8>)
 800c4bc:	4293      	cmp	r3, r2
 800c4be:	d00e      	beq.n	800c4de <HAL_TIM_PWM_Start_IT+0x242>
 800c4c0:	687b      	ldr	r3, [r7, #4]
 800c4c2:	681b      	ldr	r3, [r3, #0]
 800c4c4:	4a19      	ldr	r2, [pc, #100]	; (800c52c <HAL_TIM_PWM_Start_IT+0x290>)
 800c4c6:	4293      	cmp	r3, r2
 800c4c8:	d009      	beq.n	800c4de <HAL_TIM_PWM_Start_IT+0x242>
 800c4ca:	687b      	ldr	r3, [r7, #4]
 800c4cc:	681b      	ldr	r3, [r3, #0]
 800c4ce:	4a1e      	ldr	r2, [pc, #120]	; (800c548 <HAL_TIM_PWM_Start_IT+0x2ac>)
 800c4d0:	4293      	cmp	r3, r2
 800c4d2:	d004      	beq.n	800c4de <HAL_TIM_PWM_Start_IT+0x242>
 800c4d4:	687b      	ldr	r3, [r7, #4]
 800c4d6:	681b      	ldr	r3, [r3, #0]
 800c4d8:	4a15      	ldr	r2, [pc, #84]	; (800c530 <HAL_TIM_PWM_Start_IT+0x294>)
 800c4da:	4293      	cmp	r3, r2
 800c4dc:	d115      	bne.n	800c50a <HAL_TIM_PWM_Start_IT+0x26e>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c4de:	687b      	ldr	r3, [r7, #4]
 800c4e0:	681b      	ldr	r3, [r3, #0]
 800c4e2:	689a      	ldr	r2, [r3, #8]
 800c4e4:	4b19      	ldr	r3, [pc, #100]	; (800c54c <HAL_TIM_PWM_Start_IT+0x2b0>)
 800c4e6:	4013      	ands	r3, r2
 800c4e8:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c4ea:	68bb      	ldr	r3, [r7, #8]
 800c4ec:	2b06      	cmp	r3, #6
 800c4ee:	d015      	beq.n	800c51c <HAL_TIM_PWM_Start_IT+0x280>
 800c4f0:	68bb      	ldr	r3, [r7, #8]
 800c4f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c4f6:	d011      	beq.n	800c51c <HAL_TIM_PWM_Start_IT+0x280>
      {
        __HAL_TIM_ENABLE(htim);
 800c4f8:	687b      	ldr	r3, [r7, #4]
 800c4fa:	681b      	ldr	r3, [r3, #0]
 800c4fc:	681a      	ldr	r2, [r3, #0]
 800c4fe:	687b      	ldr	r3, [r7, #4]
 800c500:	681b      	ldr	r3, [r3, #0]
 800c502:	f042 0201 	orr.w	r2, r2, #1
 800c506:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c508:	e008      	b.n	800c51c <HAL_TIM_PWM_Start_IT+0x280>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800c50a:	687b      	ldr	r3, [r7, #4]
 800c50c:	681b      	ldr	r3, [r3, #0]
 800c50e:	681a      	ldr	r2, [r3, #0]
 800c510:	687b      	ldr	r3, [r7, #4]
 800c512:	681b      	ldr	r3, [r3, #0]
 800c514:	f042 0201 	orr.w	r2, r2, #1
 800c518:	601a      	str	r2, [r3, #0]
 800c51a:	e000      	b.n	800c51e <HAL_TIM_PWM_Start_IT+0x282>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c51c:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 800c51e:	7bfb      	ldrb	r3, [r7, #15]
}
 800c520:	4618      	mov	r0, r3
 800c522:	3710      	adds	r7, #16
 800c524:	46bd      	mov	sp, r7
 800c526:	bd80      	pop	{r7, pc}
 800c528:	40010000 	.word	0x40010000
 800c52c:	40010400 	.word	0x40010400
 800c530:	40014000 	.word	0x40014000
 800c534:	40014400 	.word	0x40014400
 800c538:	40014800 	.word	0x40014800
 800c53c:	40000400 	.word	0x40000400
 800c540:	40000800 	.word	0x40000800
 800c544:	40000c00 	.word	0x40000c00
 800c548:	40001800 	.word	0x40001800
 800c54c:	00010007 	.word	0x00010007

0800c550 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800c550:	b580      	push	{r7, lr}
 800c552:	b082      	sub	sp, #8
 800c554:	af00      	add	r7, sp, #0
 800c556:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800c558:	687b      	ldr	r3, [r7, #4]
 800c55a:	681b      	ldr	r3, [r3, #0]
 800c55c:	691b      	ldr	r3, [r3, #16]
 800c55e:	f003 0302 	and.w	r3, r3, #2
 800c562:	2b02      	cmp	r3, #2
 800c564:	d122      	bne.n	800c5ac <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800c566:	687b      	ldr	r3, [r7, #4]
 800c568:	681b      	ldr	r3, [r3, #0]
 800c56a:	68db      	ldr	r3, [r3, #12]
 800c56c:	f003 0302 	and.w	r3, r3, #2
 800c570:	2b02      	cmp	r3, #2
 800c572:	d11b      	bne.n	800c5ac <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800c574:	687b      	ldr	r3, [r7, #4]
 800c576:	681b      	ldr	r3, [r3, #0]
 800c578:	f06f 0202 	mvn.w	r2, #2
 800c57c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800c57e:	687b      	ldr	r3, [r7, #4]
 800c580:	2201      	movs	r2, #1
 800c582:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800c584:	687b      	ldr	r3, [r7, #4]
 800c586:	681b      	ldr	r3, [r3, #0]
 800c588:	699b      	ldr	r3, [r3, #24]
 800c58a:	f003 0303 	and.w	r3, r3, #3
 800c58e:	2b00      	cmp	r3, #0
 800c590:	d003      	beq.n	800c59a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800c592:	6878      	ldr	r0, [r7, #4]
 800c594:	f000 fb12 	bl	800cbbc <HAL_TIM_IC_CaptureCallback>
 800c598:	e005      	b.n	800c5a6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800c59a:	6878      	ldr	r0, [r7, #4]
 800c59c:	f000 fb04 	bl	800cba8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c5a0:	6878      	ldr	r0, [r7, #4]
 800c5a2:	f000 fb15 	bl	800cbd0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c5a6:	687b      	ldr	r3, [r7, #4]
 800c5a8:	2200      	movs	r2, #0
 800c5aa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800c5ac:	687b      	ldr	r3, [r7, #4]
 800c5ae:	681b      	ldr	r3, [r3, #0]
 800c5b0:	691b      	ldr	r3, [r3, #16]
 800c5b2:	f003 0304 	and.w	r3, r3, #4
 800c5b6:	2b04      	cmp	r3, #4
 800c5b8:	d122      	bne.n	800c600 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800c5ba:	687b      	ldr	r3, [r7, #4]
 800c5bc:	681b      	ldr	r3, [r3, #0]
 800c5be:	68db      	ldr	r3, [r3, #12]
 800c5c0:	f003 0304 	and.w	r3, r3, #4
 800c5c4:	2b04      	cmp	r3, #4
 800c5c6:	d11b      	bne.n	800c600 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800c5c8:	687b      	ldr	r3, [r7, #4]
 800c5ca:	681b      	ldr	r3, [r3, #0]
 800c5cc:	f06f 0204 	mvn.w	r2, #4
 800c5d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800c5d2:	687b      	ldr	r3, [r7, #4]
 800c5d4:	2202      	movs	r2, #2
 800c5d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800c5d8:	687b      	ldr	r3, [r7, #4]
 800c5da:	681b      	ldr	r3, [r3, #0]
 800c5dc:	699b      	ldr	r3, [r3, #24]
 800c5de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c5e2:	2b00      	cmp	r3, #0
 800c5e4:	d003      	beq.n	800c5ee <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c5e6:	6878      	ldr	r0, [r7, #4]
 800c5e8:	f000 fae8 	bl	800cbbc <HAL_TIM_IC_CaptureCallback>
 800c5ec:	e005      	b.n	800c5fa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c5ee:	6878      	ldr	r0, [r7, #4]
 800c5f0:	f000 fada 	bl	800cba8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c5f4:	6878      	ldr	r0, [r7, #4]
 800c5f6:	f000 faeb 	bl	800cbd0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c5fa:	687b      	ldr	r3, [r7, #4]
 800c5fc:	2200      	movs	r2, #0
 800c5fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800c600:	687b      	ldr	r3, [r7, #4]
 800c602:	681b      	ldr	r3, [r3, #0]
 800c604:	691b      	ldr	r3, [r3, #16]
 800c606:	f003 0308 	and.w	r3, r3, #8
 800c60a:	2b08      	cmp	r3, #8
 800c60c:	d122      	bne.n	800c654 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800c60e:	687b      	ldr	r3, [r7, #4]
 800c610:	681b      	ldr	r3, [r3, #0]
 800c612:	68db      	ldr	r3, [r3, #12]
 800c614:	f003 0308 	and.w	r3, r3, #8
 800c618:	2b08      	cmp	r3, #8
 800c61a:	d11b      	bne.n	800c654 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800c61c:	687b      	ldr	r3, [r7, #4]
 800c61e:	681b      	ldr	r3, [r3, #0]
 800c620:	f06f 0208 	mvn.w	r2, #8
 800c624:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800c626:	687b      	ldr	r3, [r7, #4]
 800c628:	2204      	movs	r2, #4
 800c62a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800c62c:	687b      	ldr	r3, [r7, #4]
 800c62e:	681b      	ldr	r3, [r3, #0]
 800c630:	69db      	ldr	r3, [r3, #28]
 800c632:	f003 0303 	and.w	r3, r3, #3
 800c636:	2b00      	cmp	r3, #0
 800c638:	d003      	beq.n	800c642 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c63a:	6878      	ldr	r0, [r7, #4]
 800c63c:	f000 fabe 	bl	800cbbc <HAL_TIM_IC_CaptureCallback>
 800c640:	e005      	b.n	800c64e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c642:	6878      	ldr	r0, [r7, #4]
 800c644:	f000 fab0 	bl	800cba8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c648:	6878      	ldr	r0, [r7, #4]
 800c64a:	f000 fac1 	bl	800cbd0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c64e:	687b      	ldr	r3, [r7, #4]
 800c650:	2200      	movs	r2, #0
 800c652:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800c654:	687b      	ldr	r3, [r7, #4]
 800c656:	681b      	ldr	r3, [r3, #0]
 800c658:	691b      	ldr	r3, [r3, #16]
 800c65a:	f003 0310 	and.w	r3, r3, #16
 800c65e:	2b10      	cmp	r3, #16
 800c660:	d122      	bne.n	800c6a8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800c662:	687b      	ldr	r3, [r7, #4]
 800c664:	681b      	ldr	r3, [r3, #0]
 800c666:	68db      	ldr	r3, [r3, #12]
 800c668:	f003 0310 	and.w	r3, r3, #16
 800c66c:	2b10      	cmp	r3, #16
 800c66e:	d11b      	bne.n	800c6a8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800c670:	687b      	ldr	r3, [r7, #4]
 800c672:	681b      	ldr	r3, [r3, #0]
 800c674:	f06f 0210 	mvn.w	r2, #16
 800c678:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800c67a:	687b      	ldr	r3, [r7, #4]
 800c67c:	2208      	movs	r2, #8
 800c67e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800c680:	687b      	ldr	r3, [r7, #4]
 800c682:	681b      	ldr	r3, [r3, #0]
 800c684:	69db      	ldr	r3, [r3, #28]
 800c686:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c68a:	2b00      	cmp	r3, #0
 800c68c:	d003      	beq.n	800c696 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c68e:	6878      	ldr	r0, [r7, #4]
 800c690:	f000 fa94 	bl	800cbbc <HAL_TIM_IC_CaptureCallback>
 800c694:	e005      	b.n	800c6a2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c696:	6878      	ldr	r0, [r7, #4]
 800c698:	f000 fa86 	bl	800cba8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c69c:	6878      	ldr	r0, [r7, #4]
 800c69e:	f000 fa97 	bl	800cbd0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c6a2:	687b      	ldr	r3, [r7, #4]
 800c6a4:	2200      	movs	r2, #0
 800c6a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800c6a8:	687b      	ldr	r3, [r7, #4]
 800c6aa:	681b      	ldr	r3, [r3, #0]
 800c6ac:	691b      	ldr	r3, [r3, #16]
 800c6ae:	f003 0301 	and.w	r3, r3, #1
 800c6b2:	2b01      	cmp	r3, #1
 800c6b4:	d10e      	bne.n	800c6d4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800c6b6:	687b      	ldr	r3, [r7, #4]
 800c6b8:	681b      	ldr	r3, [r3, #0]
 800c6ba:	68db      	ldr	r3, [r3, #12]
 800c6bc:	f003 0301 	and.w	r3, r3, #1
 800c6c0:	2b01      	cmp	r3, #1
 800c6c2:	d107      	bne.n	800c6d4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800c6c4:	687b      	ldr	r3, [r7, #4]
 800c6c6:	681b      	ldr	r3, [r3, #0]
 800c6c8:	f06f 0201 	mvn.w	r2, #1
 800c6cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800c6ce:	6878      	ldr	r0, [r7, #4]
 800c6d0:	f7f6 fe1a 	bl	8003308 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800c6d4:	687b      	ldr	r3, [r7, #4]
 800c6d6:	681b      	ldr	r3, [r3, #0]
 800c6d8:	691b      	ldr	r3, [r3, #16]
 800c6da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c6de:	2b80      	cmp	r3, #128	; 0x80
 800c6e0:	d10e      	bne.n	800c700 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800c6e2:	687b      	ldr	r3, [r7, #4]
 800c6e4:	681b      	ldr	r3, [r3, #0]
 800c6e6:	68db      	ldr	r3, [r3, #12]
 800c6e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c6ec:	2b80      	cmp	r3, #128	; 0x80
 800c6ee:	d107      	bne.n	800c700 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800c6f0:	687b      	ldr	r3, [r7, #4]
 800c6f2:	681b      	ldr	r3, [r3, #0]
 800c6f4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800c6f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800c6fa:	6878      	ldr	r0, [r7, #4]
 800c6fc:	f000 ff48 	bl	800d590 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800c700:	687b      	ldr	r3, [r7, #4]
 800c702:	681b      	ldr	r3, [r3, #0]
 800c704:	691b      	ldr	r3, [r3, #16]
 800c706:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c70a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c70e:	d10e      	bne.n	800c72e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800c710:	687b      	ldr	r3, [r7, #4]
 800c712:	681b      	ldr	r3, [r3, #0]
 800c714:	68db      	ldr	r3, [r3, #12]
 800c716:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c71a:	2b80      	cmp	r3, #128	; 0x80
 800c71c:	d107      	bne.n	800c72e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800c71e:	687b      	ldr	r3, [r7, #4]
 800c720:	681b      	ldr	r3, [r3, #0]
 800c722:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800c726:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800c728:	6878      	ldr	r0, [r7, #4]
 800c72a:	f000 ff3b 	bl	800d5a4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800c72e:	687b      	ldr	r3, [r7, #4]
 800c730:	681b      	ldr	r3, [r3, #0]
 800c732:	691b      	ldr	r3, [r3, #16]
 800c734:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c738:	2b40      	cmp	r3, #64	; 0x40
 800c73a:	d10e      	bne.n	800c75a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800c73c:	687b      	ldr	r3, [r7, #4]
 800c73e:	681b      	ldr	r3, [r3, #0]
 800c740:	68db      	ldr	r3, [r3, #12]
 800c742:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c746:	2b40      	cmp	r3, #64	; 0x40
 800c748:	d107      	bne.n	800c75a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800c74a:	687b      	ldr	r3, [r7, #4]
 800c74c:	681b      	ldr	r3, [r3, #0]
 800c74e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800c752:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800c754:	6878      	ldr	r0, [r7, #4]
 800c756:	f000 fa45 	bl	800cbe4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800c75a:	687b      	ldr	r3, [r7, #4]
 800c75c:	681b      	ldr	r3, [r3, #0]
 800c75e:	691b      	ldr	r3, [r3, #16]
 800c760:	f003 0320 	and.w	r3, r3, #32
 800c764:	2b20      	cmp	r3, #32
 800c766:	d10e      	bne.n	800c786 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800c768:	687b      	ldr	r3, [r7, #4]
 800c76a:	681b      	ldr	r3, [r3, #0]
 800c76c:	68db      	ldr	r3, [r3, #12]
 800c76e:	f003 0320 	and.w	r3, r3, #32
 800c772:	2b20      	cmp	r3, #32
 800c774:	d107      	bne.n	800c786 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800c776:	687b      	ldr	r3, [r7, #4]
 800c778:	681b      	ldr	r3, [r3, #0]
 800c77a:	f06f 0220 	mvn.w	r2, #32
 800c77e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800c780:	6878      	ldr	r0, [r7, #4]
 800c782:	f000 fefb 	bl	800d57c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800c786:	bf00      	nop
 800c788:	3708      	adds	r7, #8
 800c78a:	46bd      	mov	sp, r7
 800c78c:	bd80      	pop	{r7, pc}
	...

0800c790 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800c790:	b580      	push	{r7, lr}
 800c792:	b086      	sub	sp, #24
 800c794:	af00      	add	r7, sp, #0
 800c796:	60f8      	str	r0, [r7, #12]
 800c798:	60b9      	str	r1, [r7, #8]
 800c79a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800c79c:	2300      	movs	r3, #0
 800c79e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800c7a0:	68fb      	ldr	r3, [r7, #12]
 800c7a2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c7a6:	2b01      	cmp	r3, #1
 800c7a8:	d101      	bne.n	800c7ae <HAL_TIM_PWM_ConfigChannel+0x1e>
 800c7aa:	2302      	movs	r3, #2
 800c7ac:	e0ff      	b.n	800c9ae <HAL_TIM_PWM_ConfigChannel+0x21e>
 800c7ae:	68fb      	ldr	r3, [r7, #12]
 800c7b0:	2201      	movs	r2, #1
 800c7b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800c7b6:	687b      	ldr	r3, [r7, #4]
 800c7b8:	2b14      	cmp	r3, #20
 800c7ba:	f200 80f0 	bhi.w	800c99e <HAL_TIM_PWM_ConfigChannel+0x20e>
 800c7be:	a201      	add	r2, pc, #4	; (adr r2, 800c7c4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800c7c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c7c4:	0800c819 	.word	0x0800c819
 800c7c8:	0800c99f 	.word	0x0800c99f
 800c7cc:	0800c99f 	.word	0x0800c99f
 800c7d0:	0800c99f 	.word	0x0800c99f
 800c7d4:	0800c859 	.word	0x0800c859
 800c7d8:	0800c99f 	.word	0x0800c99f
 800c7dc:	0800c99f 	.word	0x0800c99f
 800c7e0:	0800c99f 	.word	0x0800c99f
 800c7e4:	0800c89b 	.word	0x0800c89b
 800c7e8:	0800c99f 	.word	0x0800c99f
 800c7ec:	0800c99f 	.word	0x0800c99f
 800c7f0:	0800c99f 	.word	0x0800c99f
 800c7f4:	0800c8db 	.word	0x0800c8db
 800c7f8:	0800c99f 	.word	0x0800c99f
 800c7fc:	0800c99f 	.word	0x0800c99f
 800c800:	0800c99f 	.word	0x0800c99f
 800c804:	0800c91d 	.word	0x0800c91d
 800c808:	0800c99f 	.word	0x0800c99f
 800c80c:	0800c99f 	.word	0x0800c99f
 800c810:	0800c99f 	.word	0x0800c99f
 800c814:	0800c95d 	.word	0x0800c95d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800c818:	68fb      	ldr	r3, [r7, #12]
 800c81a:	681b      	ldr	r3, [r3, #0]
 800c81c:	68b9      	ldr	r1, [r7, #8]
 800c81e:	4618      	mov	r0, r3
 800c820:	f000 fa84 	bl	800cd2c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800c824:	68fb      	ldr	r3, [r7, #12]
 800c826:	681b      	ldr	r3, [r3, #0]
 800c828:	699a      	ldr	r2, [r3, #24]
 800c82a:	68fb      	ldr	r3, [r7, #12]
 800c82c:	681b      	ldr	r3, [r3, #0]
 800c82e:	f042 0208 	orr.w	r2, r2, #8
 800c832:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800c834:	68fb      	ldr	r3, [r7, #12]
 800c836:	681b      	ldr	r3, [r3, #0]
 800c838:	699a      	ldr	r2, [r3, #24]
 800c83a:	68fb      	ldr	r3, [r7, #12]
 800c83c:	681b      	ldr	r3, [r3, #0]
 800c83e:	f022 0204 	bic.w	r2, r2, #4
 800c842:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800c844:	68fb      	ldr	r3, [r7, #12]
 800c846:	681b      	ldr	r3, [r3, #0]
 800c848:	6999      	ldr	r1, [r3, #24]
 800c84a:	68bb      	ldr	r3, [r7, #8]
 800c84c:	691a      	ldr	r2, [r3, #16]
 800c84e:	68fb      	ldr	r3, [r7, #12]
 800c850:	681b      	ldr	r3, [r3, #0]
 800c852:	430a      	orrs	r2, r1
 800c854:	619a      	str	r2, [r3, #24]
      break;
 800c856:	e0a5      	b.n	800c9a4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800c858:	68fb      	ldr	r3, [r7, #12]
 800c85a:	681b      	ldr	r3, [r3, #0]
 800c85c:	68b9      	ldr	r1, [r7, #8]
 800c85e:	4618      	mov	r0, r3
 800c860:	f000 faf4 	bl	800ce4c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800c864:	68fb      	ldr	r3, [r7, #12]
 800c866:	681b      	ldr	r3, [r3, #0]
 800c868:	699a      	ldr	r2, [r3, #24]
 800c86a:	68fb      	ldr	r3, [r7, #12]
 800c86c:	681b      	ldr	r3, [r3, #0]
 800c86e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c872:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800c874:	68fb      	ldr	r3, [r7, #12]
 800c876:	681b      	ldr	r3, [r3, #0]
 800c878:	699a      	ldr	r2, [r3, #24]
 800c87a:	68fb      	ldr	r3, [r7, #12]
 800c87c:	681b      	ldr	r3, [r3, #0]
 800c87e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c882:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800c884:	68fb      	ldr	r3, [r7, #12]
 800c886:	681b      	ldr	r3, [r3, #0]
 800c888:	6999      	ldr	r1, [r3, #24]
 800c88a:	68bb      	ldr	r3, [r7, #8]
 800c88c:	691b      	ldr	r3, [r3, #16]
 800c88e:	021a      	lsls	r2, r3, #8
 800c890:	68fb      	ldr	r3, [r7, #12]
 800c892:	681b      	ldr	r3, [r3, #0]
 800c894:	430a      	orrs	r2, r1
 800c896:	619a      	str	r2, [r3, #24]
      break;
 800c898:	e084      	b.n	800c9a4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800c89a:	68fb      	ldr	r3, [r7, #12]
 800c89c:	681b      	ldr	r3, [r3, #0]
 800c89e:	68b9      	ldr	r1, [r7, #8]
 800c8a0:	4618      	mov	r0, r3
 800c8a2:	f000 fb5d 	bl	800cf60 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800c8a6:	68fb      	ldr	r3, [r7, #12]
 800c8a8:	681b      	ldr	r3, [r3, #0]
 800c8aa:	69da      	ldr	r2, [r3, #28]
 800c8ac:	68fb      	ldr	r3, [r7, #12]
 800c8ae:	681b      	ldr	r3, [r3, #0]
 800c8b0:	f042 0208 	orr.w	r2, r2, #8
 800c8b4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800c8b6:	68fb      	ldr	r3, [r7, #12]
 800c8b8:	681b      	ldr	r3, [r3, #0]
 800c8ba:	69da      	ldr	r2, [r3, #28]
 800c8bc:	68fb      	ldr	r3, [r7, #12]
 800c8be:	681b      	ldr	r3, [r3, #0]
 800c8c0:	f022 0204 	bic.w	r2, r2, #4
 800c8c4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800c8c6:	68fb      	ldr	r3, [r7, #12]
 800c8c8:	681b      	ldr	r3, [r3, #0]
 800c8ca:	69d9      	ldr	r1, [r3, #28]
 800c8cc:	68bb      	ldr	r3, [r7, #8]
 800c8ce:	691a      	ldr	r2, [r3, #16]
 800c8d0:	68fb      	ldr	r3, [r7, #12]
 800c8d2:	681b      	ldr	r3, [r3, #0]
 800c8d4:	430a      	orrs	r2, r1
 800c8d6:	61da      	str	r2, [r3, #28]
      break;
 800c8d8:	e064      	b.n	800c9a4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800c8da:	68fb      	ldr	r3, [r7, #12]
 800c8dc:	681b      	ldr	r3, [r3, #0]
 800c8de:	68b9      	ldr	r1, [r7, #8]
 800c8e0:	4618      	mov	r0, r3
 800c8e2:	f000 fbc5 	bl	800d070 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800c8e6:	68fb      	ldr	r3, [r7, #12]
 800c8e8:	681b      	ldr	r3, [r3, #0]
 800c8ea:	69da      	ldr	r2, [r3, #28]
 800c8ec:	68fb      	ldr	r3, [r7, #12]
 800c8ee:	681b      	ldr	r3, [r3, #0]
 800c8f0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c8f4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800c8f6:	68fb      	ldr	r3, [r7, #12]
 800c8f8:	681b      	ldr	r3, [r3, #0]
 800c8fa:	69da      	ldr	r2, [r3, #28]
 800c8fc:	68fb      	ldr	r3, [r7, #12]
 800c8fe:	681b      	ldr	r3, [r3, #0]
 800c900:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c904:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800c906:	68fb      	ldr	r3, [r7, #12]
 800c908:	681b      	ldr	r3, [r3, #0]
 800c90a:	69d9      	ldr	r1, [r3, #28]
 800c90c:	68bb      	ldr	r3, [r7, #8]
 800c90e:	691b      	ldr	r3, [r3, #16]
 800c910:	021a      	lsls	r2, r3, #8
 800c912:	68fb      	ldr	r3, [r7, #12]
 800c914:	681b      	ldr	r3, [r3, #0]
 800c916:	430a      	orrs	r2, r1
 800c918:	61da      	str	r2, [r3, #28]
      break;
 800c91a:	e043      	b.n	800c9a4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800c91c:	68fb      	ldr	r3, [r7, #12]
 800c91e:	681b      	ldr	r3, [r3, #0]
 800c920:	68b9      	ldr	r1, [r7, #8]
 800c922:	4618      	mov	r0, r3
 800c924:	f000 fc0e 	bl	800d144 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800c928:	68fb      	ldr	r3, [r7, #12]
 800c92a:	681b      	ldr	r3, [r3, #0]
 800c92c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c92e:	68fb      	ldr	r3, [r7, #12]
 800c930:	681b      	ldr	r3, [r3, #0]
 800c932:	f042 0208 	orr.w	r2, r2, #8
 800c936:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800c938:	68fb      	ldr	r3, [r7, #12]
 800c93a:	681b      	ldr	r3, [r3, #0]
 800c93c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c93e:	68fb      	ldr	r3, [r7, #12]
 800c940:	681b      	ldr	r3, [r3, #0]
 800c942:	f022 0204 	bic.w	r2, r2, #4
 800c946:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800c948:	68fb      	ldr	r3, [r7, #12]
 800c94a:	681b      	ldr	r3, [r3, #0]
 800c94c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800c94e:	68bb      	ldr	r3, [r7, #8]
 800c950:	691a      	ldr	r2, [r3, #16]
 800c952:	68fb      	ldr	r3, [r7, #12]
 800c954:	681b      	ldr	r3, [r3, #0]
 800c956:	430a      	orrs	r2, r1
 800c958:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800c95a:	e023      	b.n	800c9a4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800c95c:	68fb      	ldr	r3, [r7, #12]
 800c95e:	681b      	ldr	r3, [r3, #0]
 800c960:	68b9      	ldr	r1, [r7, #8]
 800c962:	4618      	mov	r0, r3
 800c964:	f000 fc52 	bl	800d20c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800c968:	68fb      	ldr	r3, [r7, #12]
 800c96a:	681b      	ldr	r3, [r3, #0]
 800c96c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c96e:	68fb      	ldr	r3, [r7, #12]
 800c970:	681b      	ldr	r3, [r3, #0]
 800c972:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c976:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800c978:	68fb      	ldr	r3, [r7, #12]
 800c97a:	681b      	ldr	r3, [r3, #0]
 800c97c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c97e:	68fb      	ldr	r3, [r7, #12]
 800c980:	681b      	ldr	r3, [r3, #0]
 800c982:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c986:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800c988:	68fb      	ldr	r3, [r7, #12]
 800c98a:	681b      	ldr	r3, [r3, #0]
 800c98c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800c98e:	68bb      	ldr	r3, [r7, #8]
 800c990:	691b      	ldr	r3, [r3, #16]
 800c992:	021a      	lsls	r2, r3, #8
 800c994:	68fb      	ldr	r3, [r7, #12]
 800c996:	681b      	ldr	r3, [r3, #0]
 800c998:	430a      	orrs	r2, r1
 800c99a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800c99c:	e002      	b.n	800c9a4 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800c99e:	2301      	movs	r3, #1
 800c9a0:	75fb      	strb	r3, [r7, #23]
      break;
 800c9a2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800c9a4:	68fb      	ldr	r3, [r7, #12]
 800c9a6:	2200      	movs	r2, #0
 800c9a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800c9ac:	7dfb      	ldrb	r3, [r7, #23]
}
 800c9ae:	4618      	mov	r0, r3
 800c9b0:	3718      	adds	r7, #24
 800c9b2:	46bd      	mov	sp, r7
 800c9b4:	bd80      	pop	{r7, pc}
 800c9b6:	bf00      	nop

0800c9b8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800c9b8:	b580      	push	{r7, lr}
 800c9ba:	b084      	sub	sp, #16
 800c9bc:	af00      	add	r7, sp, #0
 800c9be:	6078      	str	r0, [r7, #4]
 800c9c0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800c9c2:	2300      	movs	r3, #0
 800c9c4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800c9c6:	687b      	ldr	r3, [r7, #4]
 800c9c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c9cc:	2b01      	cmp	r3, #1
 800c9ce:	d101      	bne.n	800c9d4 <HAL_TIM_ConfigClockSource+0x1c>
 800c9d0:	2302      	movs	r3, #2
 800c9d2:	e0dc      	b.n	800cb8e <HAL_TIM_ConfigClockSource+0x1d6>
 800c9d4:	687b      	ldr	r3, [r7, #4]
 800c9d6:	2201      	movs	r2, #1
 800c9d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800c9dc:	687b      	ldr	r3, [r7, #4]
 800c9de:	2202      	movs	r2, #2
 800c9e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800c9e4:	687b      	ldr	r3, [r7, #4]
 800c9e6:	681b      	ldr	r3, [r3, #0]
 800c9e8:	689b      	ldr	r3, [r3, #8]
 800c9ea:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800c9ec:	68ba      	ldr	r2, [r7, #8]
 800c9ee:	4b6a      	ldr	r3, [pc, #424]	; (800cb98 <HAL_TIM_ConfigClockSource+0x1e0>)
 800c9f0:	4013      	ands	r3, r2
 800c9f2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c9f4:	68bb      	ldr	r3, [r7, #8]
 800c9f6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800c9fa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800c9fc:	687b      	ldr	r3, [r7, #4]
 800c9fe:	681b      	ldr	r3, [r3, #0]
 800ca00:	68ba      	ldr	r2, [r7, #8]
 800ca02:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800ca04:	683b      	ldr	r3, [r7, #0]
 800ca06:	681b      	ldr	r3, [r3, #0]
 800ca08:	4a64      	ldr	r2, [pc, #400]	; (800cb9c <HAL_TIM_ConfigClockSource+0x1e4>)
 800ca0a:	4293      	cmp	r3, r2
 800ca0c:	f000 80a9 	beq.w	800cb62 <HAL_TIM_ConfigClockSource+0x1aa>
 800ca10:	4a62      	ldr	r2, [pc, #392]	; (800cb9c <HAL_TIM_ConfigClockSource+0x1e4>)
 800ca12:	4293      	cmp	r3, r2
 800ca14:	f200 80ae 	bhi.w	800cb74 <HAL_TIM_ConfigClockSource+0x1bc>
 800ca18:	4a61      	ldr	r2, [pc, #388]	; (800cba0 <HAL_TIM_ConfigClockSource+0x1e8>)
 800ca1a:	4293      	cmp	r3, r2
 800ca1c:	f000 80a1 	beq.w	800cb62 <HAL_TIM_ConfigClockSource+0x1aa>
 800ca20:	4a5f      	ldr	r2, [pc, #380]	; (800cba0 <HAL_TIM_ConfigClockSource+0x1e8>)
 800ca22:	4293      	cmp	r3, r2
 800ca24:	f200 80a6 	bhi.w	800cb74 <HAL_TIM_ConfigClockSource+0x1bc>
 800ca28:	4a5e      	ldr	r2, [pc, #376]	; (800cba4 <HAL_TIM_ConfigClockSource+0x1ec>)
 800ca2a:	4293      	cmp	r3, r2
 800ca2c:	f000 8099 	beq.w	800cb62 <HAL_TIM_ConfigClockSource+0x1aa>
 800ca30:	4a5c      	ldr	r2, [pc, #368]	; (800cba4 <HAL_TIM_ConfigClockSource+0x1ec>)
 800ca32:	4293      	cmp	r3, r2
 800ca34:	f200 809e 	bhi.w	800cb74 <HAL_TIM_ConfigClockSource+0x1bc>
 800ca38:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800ca3c:	f000 8091 	beq.w	800cb62 <HAL_TIM_ConfigClockSource+0x1aa>
 800ca40:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800ca44:	f200 8096 	bhi.w	800cb74 <HAL_TIM_ConfigClockSource+0x1bc>
 800ca48:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ca4c:	f000 8089 	beq.w	800cb62 <HAL_TIM_ConfigClockSource+0x1aa>
 800ca50:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ca54:	f200 808e 	bhi.w	800cb74 <HAL_TIM_ConfigClockSource+0x1bc>
 800ca58:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ca5c:	d03e      	beq.n	800cadc <HAL_TIM_ConfigClockSource+0x124>
 800ca5e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ca62:	f200 8087 	bhi.w	800cb74 <HAL_TIM_ConfigClockSource+0x1bc>
 800ca66:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ca6a:	f000 8086 	beq.w	800cb7a <HAL_TIM_ConfigClockSource+0x1c2>
 800ca6e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ca72:	d87f      	bhi.n	800cb74 <HAL_TIM_ConfigClockSource+0x1bc>
 800ca74:	2b70      	cmp	r3, #112	; 0x70
 800ca76:	d01a      	beq.n	800caae <HAL_TIM_ConfigClockSource+0xf6>
 800ca78:	2b70      	cmp	r3, #112	; 0x70
 800ca7a:	d87b      	bhi.n	800cb74 <HAL_TIM_ConfigClockSource+0x1bc>
 800ca7c:	2b60      	cmp	r3, #96	; 0x60
 800ca7e:	d050      	beq.n	800cb22 <HAL_TIM_ConfigClockSource+0x16a>
 800ca80:	2b60      	cmp	r3, #96	; 0x60
 800ca82:	d877      	bhi.n	800cb74 <HAL_TIM_ConfigClockSource+0x1bc>
 800ca84:	2b50      	cmp	r3, #80	; 0x50
 800ca86:	d03c      	beq.n	800cb02 <HAL_TIM_ConfigClockSource+0x14a>
 800ca88:	2b50      	cmp	r3, #80	; 0x50
 800ca8a:	d873      	bhi.n	800cb74 <HAL_TIM_ConfigClockSource+0x1bc>
 800ca8c:	2b40      	cmp	r3, #64	; 0x40
 800ca8e:	d058      	beq.n	800cb42 <HAL_TIM_ConfigClockSource+0x18a>
 800ca90:	2b40      	cmp	r3, #64	; 0x40
 800ca92:	d86f      	bhi.n	800cb74 <HAL_TIM_ConfigClockSource+0x1bc>
 800ca94:	2b30      	cmp	r3, #48	; 0x30
 800ca96:	d064      	beq.n	800cb62 <HAL_TIM_ConfigClockSource+0x1aa>
 800ca98:	2b30      	cmp	r3, #48	; 0x30
 800ca9a:	d86b      	bhi.n	800cb74 <HAL_TIM_ConfigClockSource+0x1bc>
 800ca9c:	2b20      	cmp	r3, #32
 800ca9e:	d060      	beq.n	800cb62 <HAL_TIM_ConfigClockSource+0x1aa>
 800caa0:	2b20      	cmp	r3, #32
 800caa2:	d867      	bhi.n	800cb74 <HAL_TIM_ConfigClockSource+0x1bc>
 800caa4:	2b00      	cmp	r3, #0
 800caa6:	d05c      	beq.n	800cb62 <HAL_TIM_ConfigClockSource+0x1aa>
 800caa8:	2b10      	cmp	r3, #16
 800caaa:	d05a      	beq.n	800cb62 <HAL_TIM_ConfigClockSource+0x1aa>
 800caac:	e062      	b.n	800cb74 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800caae:	687b      	ldr	r3, [r7, #4]
 800cab0:	6818      	ldr	r0, [r3, #0]
 800cab2:	683b      	ldr	r3, [r7, #0]
 800cab4:	6899      	ldr	r1, [r3, #8]
 800cab6:	683b      	ldr	r3, [r7, #0]
 800cab8:	685a      	ldr	r2, [r3, #4]
 800caba:	683b      	ldr	r3, [r7, #0]
 800cabc:	68db      	ldr	r3, [r3, #12]
 800cabe:	f000 fc89 	bl	800d3d4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800cac2:	687b      	ldr	r3, [r7, #4]
 800cac4:	681b      	ldr	r3, [r3, #0]
 800cac6:	689b      	ldr	r3, [r3, #8]
 800cac8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800caca:	68bb      	ldr	r3, [r7, #8]
 800cacc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800cad0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800cad2:	687b      	ldr	r3, [r7, #4]
 800cad4:	681b      	ldr	r3, [r3, #0]
 800cad6:	68ba      	ldr	r2, [r7, #8]
 800cad8:	609a      	str	r2, [r3, #8]
      break;
 800cada:	e04f      	b.n	800cb7c <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800cadc:	687b      	ldr	r3, [r7, #4]
 800cade:	6818      	ldr	r0, [r3, #0]
 800cae0:	683b      	ldr	r3, [r7, #0]
 800cae2:	6899      	ldr	r1, [r3, #8]
 800cae4:	683b      	ldr	r3, [r7, #0]
 800cae6:	685a      	ldr	r2, [r3, #4]
 800cae8:	683b      	ldr	r3, [r7, #0]
 800caea:	68db      	ldr	r3, [r3, #12]
 800caec:	f000 fc72 	bl	800d3d4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800caf0:	687b      	ldr	r3, [r7, #4]
 800caf2:	681b      	ldr	r3, [r3, #0]
 800caf4:	689a      	ldr	r2, [r3, #8]
 800caf6:	687b      	ldr	r3, [r7, #4]
 800caf8:	681b      	ldr	r3, [r3, #0]
 800cafa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800cafe:	609a      	str	r2, [r3, #8]
      break;
 800cb00:	e03c      	b.n	800cb7c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800cb02:	687b      	ldr	r3, [r7, #4]
 800cb04:	6818      	ldr	r0, [r3, #0]
 800cb06:	683b      	ldr	r3, [r7, #0]
 800cb08:	6859      	ldr	r1, [r3, #4]
 800cb0a:	683b      	ldr	r3, [r7, #0]
 800cb0c:	68db      	ldr	r3, [r3, #12]
 800cb0e:	461a      	mov	r2, r3
 800cb10:	f000 fbe2 	bl	800d2d8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800cb14:	687b      	ldr	r3, [r7, #4]
 800cb16:	681b      	ldr	r3, [r3, #0]
 800cb18:	2150      	movs	r1, #80	; 0x50
 800cb1a:	4618      	mov	r0, r3
 800cb1c:	f000 fc3c 	bl	800d398 <TIM_ITRx_SetConfig>
      break;
 800cb20:	e02c      	b.n	800cb7c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800cb22:	687b      	ldr	r3, [r7, #4]
 800cb24:	6818      	ldr	r0, [r3, #0]
 800cb26:	683b      	ldr	r3, [r7, #0]
 800cb28:	6859      	ldr	r1, [r3, #4]
 800cb2a:	683b      	ldr	r3, [r7, #0]
 800cb2c:	68db      	ldr	r3, [r3, #12]
 800cb2e:	461a      	mov	r2, r3
 800cb30:	f000 fc01 	bl	800d336 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800cb34:	687b      	ldr	r3, [r7, #4]
 800cb36:	681b      	ldr	r3, [r3, #0]
 800cb38:	2160      	movs	r1, #96	; 0x60
 800cb3a:	4618      	mov	r0, r3
 800cb3c:	f000 fc2c 	bl	800d398 <TIM_ITRx_SetConfig>
      break;
 800cb40:	e01c      	b.n	800cb7c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800cb42:	687b      	ldr	r3, [r7, #4]
 800cb44:	6818      	ldr	r0, [r3, #0]
 800cb46:	683b      	ldr	r3, [r7, #0]
 800cb48:	6859      	ldr	r1, [r3, #4]
 800cb4a:	683b      	ldr	r3, [r7, #0]
 800cb4c:	68db      	ldr	r3, [r3, #12]
 800cb4e:	461a      	mov	r2, r3
 800cb50:	f000 fbc2 	bl	800d2d8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800cb54:	687b      	ldr	r3, [r7, #4]
 800cb56:	681b      	ldr	r3, [r3, #0]
 800cb58:	2140      	movs	r1, #64	; 0x40
 800cb5a:	4618      	mov	r0, r3
 800cb5c:	f000 fc1c 	bl	800d398 <TIM_ITRx_SetConfig>
      break;
 800cb60:	e00c      	b.n	800cb7c <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800cb62:	687b      	ldr	r3, [r7, #4]
 800cb64:	681a      	ldr	r2, [r3, #0]
 800cb66:	683b      	ldr	r3, [r7, #0]
 800cb68:	681b      	ldr	r3, [r3, #0]
 800cb6a:	4619      	mov	r1, r3
 800cb6c:	4610      	mov	r0, r2
 800cb6e:	f000 fc13 	bl	800d398 <TIM_ITRx_SetConfig>
      break;
 800cb72:	e003      	b.n	800cb7c <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800cb74:	2301      	movs	r3, #1
 800cb76:	73fb      	strb	r3, [r7, #15]
      break;
 800cb78:	e000      	b.n	800cb7c <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800cb7a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800cb7c:	687b      	ldr	r3, [r7, #4]
 800cb7e:	2201      	movs	r2, #1
 800cb80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800cb84:	687b      	ldr	r3, [r7, #4]
 800cb86:	2200      	movs	r2, #0
 800cb88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800cb8c:	7bfb      	ldrb	r3, [r7, #15]
}
 800cb8e:	4618      	mov	r0, r3
 800cb90:	3710      	adds	r7, #16
 800cb92:	46bd      	mov	sp, r7
 800cb94:	bd80      	pop	{r7, pc}
 800cb96:	bf00      	nop
 800cb98:	ffceff88 	.word	0xffceff88
 800cb9c:	00100040 	.word	0x00100040
 800cba0:	00100030 	.word	0x00100030
 800cba4:	00100020 	.word	0x00100020

0800cba8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800cba8:	b480      	push	{r7}
 800cbaa:	b083      	sub	sp, #12
 800cbac:	af00      	add	r7, sp, #0
 800cbae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800cbb0:	bf00      	nop
 800cbb2:	370c      	adds	r7, #12
 800cbb4:	46bd      	mov	sp, r7
 800cbb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbba:	4770      	bx	lr

0800cbbc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800cbbc:	b480      	push	{r7}
 800cbbe:	b083      	sub	sp, #12
 800cbc0:	af00      	add	r7, sp, #0
 800cbc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800cbc4:	bf00      	nop
 800cbc6:	370c      	adds	r7, #12
 800cbc8:	46bd      	mov	sp, r7
 800cbca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbce:	4770      	bx	lr

0800cbd0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800cbd0:	b480      	push	{r7}
 800cbd2:	b083      	sub	sp, #12
 800cbd4:	af00      	add	r7, sp, #0
 800cbd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800cbd8:	bf00      	nop
 800cbda:	370c      	adds	r7, #12
 800cbdc:	46bd      	mov	sp, r7
 800cbde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbe2:	4770      	bx	lr

0800cbe4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800cbe4:	b480      	push	{r7}
 800cbe6:	b083      	sub	sp, #12
 800cbe8:	af00      	add	r7, sp, #0
 800cbea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800cbec:	bf00      	nop
 800cbee:	370c      	adds	r7, #12
 800cbf0:	46bd      	mov	sp, r7
 800cbf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbf6:	4770      	bx	lr

0800cbf8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800cbf8:	b480      	push	{r7}
 800cbfa:	b085      	sub	sp, #20
 800cbfc:	af00      	add	r7, sp, #0
 800cbfe:	6078      	str	r0, [r7, #4]
 800cc00:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800cc02:	687b      	ldr	r3, [r7, #4]
 800cc04:	681b      	ldr	r3, [r3, #0]
 800cc06:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800cc08:	687b      	ldr	r3, [r7, #4]
 800cc0a:	4a40      	ldr	r2, [pc, #256]	; (800cd0c <TIM_Base_SetConfig+0x114>)
 800cc0c:	4293      	cmp	r3, r2
 800cc0e:	d013      	beq.n	800cc38 <TIM_Base_SetConfig+0x40>
 800cc10:	687b      	ldr	r3, [r7, #4]
 800cc12:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cc16:	d00f      	beq.n	800cc38 <TIM_Base_SetConfig+0x40>
 800cc18:	687b      	ldr	r3, [r7, #4]
 800cc1a:	4a3d      	ldr	r2, [pc, #244]	; (800cd10 <TIM_Base_SetConfig+0x118>)
 800cc1c:	4293      	cmp	r3, r2
 800cc1e:	d00b      	beq.n	800cc38 <TIM_Base_SetConfig+0x40>
 800cc20:	687b      	ldr	r3, [r7, #4]
 800cc22:	4a3c      	ldr	r2, [pc, #240]	; (800cd14 <TIM_Base_SetConfig+0x11c>)
 800cc24:	4293      	cmp	r3, r2
 800cc26:	d007      	beq.n	800cc38 <TIM_Base_SetConfig+0x40>
 800cc28:	687b      	ldr	r3, [r7, #4]
 800cc2a:	4a3b      	ldr	r2, [pc, #236]	; (800cd18 <TIM_Base_SetConfig+0x120>)
 800cc2c:	4293      	cmp	r3, r2
 800cc2e:	d003      	beq.n	800cc38 <TIM_Base_SetConfig+0x40>
 800cc30:	687b      	ldr	r3, [r7, #4]
 800cc32:	4a3a      	ldr	r2, [pc, #232]	; (800cd1c <TIM_Base_SetConfig+0x124>)
 800cc34:	4293      	cmp	r3, r2
 800cc36:	d108      	bne.n	800cc4a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800cc38:	68fb      	ldr	r3, [r7, #12]
 800cc3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cc3e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800cc40:	683b      	ldr	r3, [r7, #0]
 800cc42:	685b      	ldr	r3, [r3, #4]
 800cc44:	68fa      	ldr	r2, [r7, #12]
 800cc46:	4313      	orrs	r3, r2
 800cc48:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800cc4a:	687b      	ldr	r3, [r7, #4]
 800cc4c:	4a2f      	ldr	r2, [pc, #188]	; (800cd0c <TIM_Base_SetConfig+0x114>)
 800cc4e:	4293      	cmp	r3, r2
 800cc50:	d01f      	beq.n	800cc92 <TIM_Base_SetConfig+0x9a>
 800cc52:	687b      	ldr	r3, [r7, #4]
 800cc54:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cc58:	d01b      	beq.n	800cc92 <TIM_Base_SetConfig+0x9a>
 800cc5a:	687b      	ldr	r3, [r7, #4]
 800cc5c:	4a2c      	ldr	r2, [pc, #176]	; (800cd10 <TIM_Base_SetConfig+0x118>)
 800cc5e:	4293      	cmp	r3, r2
 800cc60:	d017      	beq.n	800cc92 <TIM_Base_SetConfig+0x9a>
 800cc62:	687b      	ldr	r3, [r7, #4]
 800cc64:	4a2b      	ldr	r2, [pc, #172]	; (800cd14 <TIM_Base_SetConfig+0x11c>)
 800cc66:	4293      	cmp	r3, r2
 800cc68:	d013      	beq.n	800cc92 <TIM_Base_SetConfig+0x9a>
 800cc6a:	687b      	ldr	r3, [r7, #4]
 800cc6c:	4a2a      	ldr	r2, [pc, #168]	; (800cd18 <TIM_Base_SetConfig+0x120>)
 800cc6e:	4293      	cmp	r3, r2
 800cc70:	d00f      	beq.n	800cc92 <TIM_Base_SetConfig+0x9a>
 800cc72:	687b      	ldr	r3, [r7, #4]
 800cc74:	4a29      	ldr	r2, [pc, #164]	; (800cd1c <TIM_Base_SetConfig+0x124>)
 800cc76:	4293      	cmp	r3, r2
 800cc78:	d00b      	beq.n	800cc92 <TIM_Base_SetConfig+0x9a>
 800cc7a:	687b      	ldr	r3, [r7, #4]
 800cc7c:	4a28      	ldr	r2, [pc, #160]	; (800cd20 <TIM_Base_SetConfig+0x128>)
 800cc7e:	4293      	cmp	r3, r2
 800cc80:	d007      	beq.n	800cc92 <TIM_Base_SetConfig+0x9a>
 800cc82:	687b      	ldr	r3, [r7, #4]
 800cc84:	4a27      	ldr	r2, [pc, #156]	; (800cd24 <TIM_Base_SetConfig+0x12c>)
 800cc86:	4293      	cmp	r3, r2
 800cc88:	d003      	beq.n	800cc92 <TIM_Base_SetConfig+0x9a>
 800cc8a:	687b      	ldr	r3, [r7, #4]
 800cc8c:	4a26      	ldr	r2, [pc, #152]	; (800cd28 <TIM_Base_SetConfig+0x130>)
 800cc8e:	4293      	cmp	r3, r2
 800cc90:	d108      	bne.n	800cca4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800cc92:	68fb      	ldr	r3, [r7, #12]
 800cc94:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800cc98:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800cc9a:	683b      	ldr	r3, [r7, #0]
 800cc9c:	68db      	ldr	r3, [r3, #12]
 800cc9e:	68fa      	ldr	r2, [r7, #12]
 800cca0:	4313      	orrs	r3, r2
 800cca2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800cca4:	68fb      	ldr	r3, [r7, #12]
 800cca6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800ccaa:	683b      	ldr	r3, [r7, #0]
 800ccac:	695b      	ldr	r3, [r3, #20]
 800ccae:	4313      	orrs	r3, r2
 800ccb0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800ccb2:	687b      	ldr	r3, [r7, #4]
 800ccb4:	68fa      	ldr	r2, [r7, #12]
 800ccb6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800ccb8:	683b      	ldr	r3, [r7, #0]
 800ccba:	689a      	ldr	r2, [r3, #8]
 800ccbc:	687b      	ldr	r3, [r7, #4]
 800ccbe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800ccc0:	683b      	ldr	r3, [r7, #0]
 800ccc2:	681a      	ldr	r2, [r3, #0]
 800ccc4:	687b      	ldr	r3, [r7, #4]
 800ccc6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800ccc8:	687b      	ldr	r3, [r7, #4]
 800ccca:	4a10      	ldr	r2, [pc, #64]	; (800cd0c <TIM_Base_SetConfig+0x114>)
 800cccc:	4293      	cmp	r3, r2
 800ccce:	d00f      	beq.n	800ccf0 <TIM_Base_SetConfig+0xf8>
 800ccd0:	687b      	ldr	r3, [r7, #4]
 800ccd2:	4a12      	ldr	r2, [pc, #72]	; (800cd1c <TIM_Base_SetConfig+0x124>)
 800ccd4:	4293      	cmp	r3, r2
 800ccd6:	d00b      	beq.n	800ccf0 <TIM_Base_SetConfig+0xf8>
 800ccd8:	687b      	ldr	r3, [r7, #4]
 800ccda:	4a11      	ldr	r2, [pc, #68]	; (800cd20 <TIM_Base_SetConfig+0x128>)
 800ccdc:	4293      	cmp	r3, r2
 800ccde:	d007      	beq.n	800ccf0 <TIM_Base_SetConfig+0xf8>
 800cce0:	687b      	ldr	r3, [r7, #4]
 800cce2:	4a10      	ldr	r2, [pc, #64]	; (800cd24 <TIM_Base_SetConfig+0x12c>)
 800cce4:	4293      	cmp	r3, r2
 800cce6:	d003      	beq.n	800ccf0 <TIM_Base_SetConfig+0xf8>
 800cce8:	687b      	ldr	r3, [r7, #4]
 800ccea:	4a0f      	ldr	r2, [pc, #60]	; (800cd28 <TIM_Base_SetConfig+0x130>)
 800ccec:	4293      	cmp	r3, r2
 800ccee:	d103      	bne.n	800ccf8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800ccf0:	683b      	ldr	r3, [r7, #0]
 800ccf2:	691a      	ldr	r2, [r3, #16]
 800ccf4:	687b      	ldr	r3, [r7, #4]
 800ccf6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800ccf8:	687b      	ldr	r3, [r7, #4]
 800ccfa:	2201      	movs	r2, #1
 800ccfc:	615a      	str	r2, [r3, #20]
}
 800ccfe:	bf00      	nop
 800cd00:	3714      	adds	r7, #20
 800cd02:	46bd      	mov	sp, r7
 800cd04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd08:	4770      	bx	lr
 800cd0a:	bf00      	nop
 800cd0c:	40010000 	.word	0x40010000
 800cd10:	40000400 	.word	0x40000400
 800cd14:	40000800 	.word	0x40000800
 800cd18:	40000c00 	.word	0x40000c00
 800cd1c:	40010400 	.word	0x40010400
 800cd20:	40014000 	.word	0x40014000
 800cd24:	40014400 	.word	0x40014400
 800cd28:	40014800 	.word	0x40014800

0800cd2c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800cd2c:	b480      	push	{r7}
 800cd2e:	b087      	sub	sp, #28
 800cd30:	af00      	add	r7, sp, #0
 800cd32:	6078      	str	r0, [r7, #4]
 800cd34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800cd36:	687b      	ldr	r3, [r7, #4]
 800cd38:	6a1b      	ldr	r3, [r3, #32]
 800cd3a:	f023 0201 	bic.w	r2, r3, #1
 800cd3e:	687b      	ldr	r3, [r7, #4]
 800cd40:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800cd42:	687b      	ldr	r3, [r7, #4]
 800cd44:	6a1b      	ldr	r3, [r3, #32]
 800cd46:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800cd48:	687b      	ldr	r3, [r7, #4]
 800cd4a:	685b      	ldr	r3, [r3, #4]
 800cd4c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800cd4e:	687b      	ldr	r3, [r7, #4]
 800cd50:	699b      	ldr	r3, [r3, #24]
 800cd52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800cd54:	68fa      	ldr	r2, [r7, #12]
 800cd56:	4b37      	ldr	r3, [pc, #220]	; (800ce34 <TIM_OC1_SetConfig+0x108>)
 800cd58:	4013      	ands	r3, r2
 800cd5a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800cd5c:	68fb      	ldr	r3, [r7, #12]
 800cd5e:	f023 0303 	bic.w	r3, r3, #3
 800cd62:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800cd64:	683b      	ldr	r3, [r7, #0]
 800cd66:	681b      	ldr	r3, [r3, #0]
 800cd68:	68fa      	ldr	r2, [r7, #12]
 800cd6a:	4313      	orrs	r3, r2
 800cd6c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800cd6e:	697b      	ldr	r3, [r7, #20]
 800cd70:	f023 0302 	bic.w	r3, r3, #2
 800cd74:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800cd76:	683b      	ldr	r3, [r7, #0]
 800cd78:	689b      	ldr	r3, [r3, #8]
 800cd7a:	697a      	ldr	r2, [r7, #20]
 800cd7c:	4313      	orrs	r3, r2
 800cd7e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800cd80:	687b      	ldr	r3, [r7, #4]
 800cd82:	4a2d      	ldr	r2, [pc, #180]	; (800ce38 <TIM_OC1_SetConfig+0x10c>)
 800cd84:	4293      	cmp	r3, r2
 800cd86:	d00f      	beq.n	800cda8 <TIM_OC1_SetConfig+0x7c>
 800cd88:	687b      	ldr	r3, [r7, #4]
 800cd8a:	4a2c      	ldr	r2, [pc, #176]	; (800ce3c <TIM_OC1_SetConfig+0x110>)
 800cd8c:	4293      	cmp	r3, r2
 800cd8e:	d00b      	beq.n	800cda8 <TIM_OC1_SetConfig+0x7c>
 800cd90:	687b      	ldr	r3, [r7, #4]
 800cd92:	4a2b      	ldr	r2, [pc, #172]	; (800ce40 <TIM_OC1_SetConfig+0x114>)
 800cd94:	4293      	cmp	r3, r2
 800cd96:	d007      	beq.n	800cda8 <TIM_OC1_SetConfig+0x7c>
 800cd98:	687b      	ldr	r3, [r7, #4]
 800cd9a:	4a2a      	ldr	r2, [pc, #168]	; (800ce44 <TIM_OC1_SetConfig+0x118>)
 800cd9c:	4293      	cmp	r3, r2
 800cd9e:	d003      	beq.n	800cda8 <TIM_OC1_SetConfig+0x7c>
 800cda0:	687b      	ldr	r3, [r7, #4]
 800cda2:	4a29      	ldr	r2, [pc, #164]	; (800ce48 <TIM_OC1_SetConfig+0x11c>)
 800cda4:	4293      	cmp	r3, r2
 800cda6:	d10c      	bne.n	800cdc2 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800cda8:	697b      	ldr	r3, [r7, #20]
 800cdaa:	f023 0308 	bic.w	r3, r3, #8
 800cdae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800cdb0:	683b      	ldr	r3, [r7, #0]
 800cdb2:	68db      	ldr	r3, [r3, #12]
 800cdb4:	697a      	ldr	r2, [r7, #20]
 800cdb6:	4313      	orrs	r3, r2
 800cdb8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800cdba:	697b      	ldr	r3, [r7, #20]
 800cdbc:	f023 0304 	bic.w	r3, r3, #4
 800cdc0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800cdc2:	687b      	ldr	r3, [r7, #4]
 800cdc4:	4a1c      	ldr	r2, [pc, #112]	; (800ce38 <TIM_OC1_SetConfig+0x10c>)
 800cdc6:	4293      	cmp	r3, r2
 800cdc8:	d00f      	beq.n	800cdea <TIM_OC1_SetConfig+0xbe>
 800cdca:	687b      	ldr	r3, [r7, #4]
 800cdcc:	4a1b      	ldr	r2, [pc, #108]	; (800ce3c <TIM_OC1_SetConfig+0x110>)
 800cdce:	4293      	cmp	r3, r2
 800cdd0:	d00b      	beq.n	800cdea <TIM_OC1_SetConfig+0xbe>
 800cdd2:	687b      	ldr	r3, [r7, #4]
 800cdd4:	4a1a      	ldr	r2, [pc, #104]	; (800ce40 <TIM_OC1_SetConfig+0x114>)
 800cdd6:	4293      	cmp	r3, r2
 800cdd8:	d007      	beq.n	800cdea <TIM_OC1_SetConfig+0xbe>
 800cdda:	687b      	ldr	r3, [r7, #4]
 800cddc:	4a19      	ldr	r2, [pc, #100]	; (800ce44 <TIM_OC1_SetConfig+0x118>)
 800cdde:	4293      	cmp	r3, r2
 800cde0:	d003      	beq.n	800cdea <TIM_OC1_SetConfig+0xbe>
 800cde2:	687b      	ldr	r3, [r7, #4]
 800cde4:	4a18      	ldr	r2, [pc, #96]	; (800ce48 <TIM_OC1_SetConfig+0x11c>)
 800cde6:	4293      	cmp	r3, r2
 800cde8:	d111      	bne.n	800ce0e <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800cdea:	693b      	ldr	r3, [r7, #16]
 800cdec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800cdf0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800cdf2:	693b      	ldr	r3, [r7, #16]
 800cdf4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800cdf8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800cdfa:	683b      	ldr	r3, [r7, #0]
 800cdfc:	695b      	ldr	r3, [r3, #20]
 800cdfe:	693a      	ldr	r2, [r7, #16]
 800ce00:	4313      	orrs	r3, r2
 800ce02:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800ce04:	683b      	ldr	r3, [r7, #0]
 800ce06:	699b      	ldr	r3, [r3, #24]
 800ce08:	693a      	ldr	r2, [r7, #16]
 800ce0a:	4313      	orrs	r3, r2
 800ce0c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ce0e:	687b      	ldr	r3, [r7, #4]
 800ce10:	693a      	ldr	r2, [r7, #16]
 800ce12:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800ce14:	687b      	ldr	r3, [r7, #4]
 800ce16:	68fa      	ldr	r2, [r7, #12]
 800ce18:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800ce1a:	683b      	ldr	r3, [r7, #0]
 800ce1c:	685a      	ldr	r2, [r3, #4]
 800ce1e:	687b      	ldr	r3, [r7, #4]
 800ce20:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ce22:	687b      	ldr	r3, [r7, #4]
 800ce24:	697a      	ldr	r2, [r7, #20]
 800ce26:	621a      	str	r2, [r3, #32]
}
 800ce28:	bf00      	nop
 800ce2a:	371c      	adds	r7, #28
 800ce2c:	46bd      	mov	sp, r7
 800ce2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce32:	4770      	bx	lr
 800ce34:	fffeff8f 	.word	0xfffeff8f
 800ce38:	40010000 	.word	0x40010000
 800ce3c:	40010400 	.word	0x40010400
 800ce40:	40014000 	.word	0x40014000
 800ce44:	40014400 	.word	0x40014400
 800ce48:	40014800 	.word	0x40014800

0800ce4c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800ce4c:	b480      	push	{r7}
 800ce4e:	b087      	sub	sp, #28
 800ce50:	af00      	add	r7, sp, #0
 800ce52:	6078      	str	r0, [r7, #4]
 800ce54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ce56:	687b      	ldr	r3, [r7, #4]
 800ce58:	6a1b      	ldr	r3, [r3, #32]
 800ce5a:	f023 0210 	bic.w	r2, r3, #16
 800ce5e:	687b      	ldr	r3, [r7, #4]
 800ce60:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ce62:	687b      	ldr	r3, [r7, #4]
 800ce64:	6a1b      	ldr	r3, [r3, #32]
 800ce66:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ce68:	687b      	ldr	r3, [r7, #4]
 800ce6a:	685b      	ldr	r3, [r3, #4]
 800ce6c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800ce6e:	687b      	ldr	r3, [r7, #4]
 800ce70:	699b      	ldr	r3, [r3, #24]
 800ce72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800ce74:	68fa      	ldr	r2, [r7, #12]
 800ce76:	4b34      	ldr	r3, [pc, #208]	; (800cf48 <TIM_OC2_SetConfig+0xfc>)
 800ce78:	4013      	ands	r3, r2
 800ce7a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800ce7c:	68fb      	ldr	r3, [r7, #12]
 800ce7e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ce82:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ce84:	683b      	ldr	r3, [r7, #0]
 800ce86:	681b      	ldr	r3, [r3, #0]
 800ce88:	021b      	lsls	r3, r3, #8
 800ce8a:	68fa      	ldr	r2, [r7, #12]
 800ce8c:	4313      	orrs	r3, r2
 800ce8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800ce90:	697b      	ldr	r3, [r7, #20]
 800ce92:	f023 0320 	bic.w	r3, r3, #32
 800ce96:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800ce98:	683b      	ldr	r3, [r7, #0]
 800ce9a:	689b      	ldr	r3, [r3, #8]
 800ce9c:	011b      	lsls	r3, r3, #4
 800ce9e:	697a      	ldr	r2, [r7, #20]
 800cea0:	4313      	orrs	r3, r2
 800cea2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800cea4:	687b      	ldr	r3, [r7, #4]
 800cea6:	4a29      	ldr	r2, [pc, #164]	; (800cf4c <TIM_OC2_SetConfig+0x100>)
 800cea8:	4293      	cmp	r3, r2
 800ceaa:	d003      	beq.n	800ceb4 <TIM_OC2_SetConfig+0x68>
 800ceac:	687b      	ldr	r3, [r7, #4]
 800ceae:	4a28      	ldr	r2, [pc, #160]	; (800cf50 <TIM_OC2_SetConfig+0x104>)
 800ceb0:	4293      	cmp	r3, r2
 800ceb2:	d10d      	bne.n	800ced0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800ceb4:	697b      	ldr	r3, [r7, #20]
 800ceb6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ceba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800cebc:	683b      	ldr	r3, [r7, #0]
 800cebe:	68db      	ldr	r3, [r3, #12]
 800cec0:	011b      	lsls	r3, r3, #4
 800cec2:	697a      	ldr	r2, [r7, #20]
 800cec4:	4313      	orrs	r3, r2
 800cec6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800cec8:	697b      	ldr	r3, [r7, #20]
 800ceca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800cece:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ced0:	687b      	ldr	r3, [r7, #4]
 800ced2:	4a1e      	ldr	r2, [pc, #120]	; (800cf4c <TIM_OC2_SetConfig+0x100>)
 800ced4:	4293      	cmp	r3, r2
 800ced6:	d00f      	beq.n	800cef8 <TIM_OC2_SetConfig+0xac>
 800ced8:	687b      	ldr	r3, [r7, #4]
 800ceda:	4a1d      	ldr	r2, [pc, #116]	; (800cf50 <TIM_OC2_SetConfig+0x104>)
 800cedc:	4293      	cmp	r3, r2
 800cede:	d00b      	beq.n	800cef8 <TIM_OC2_SetConfig+0xac>
 800cee0:	687b      	ldr	r3, [r7, #4]
 800cee2:	4a1c      	ldr	r2, [pc, #112]	; (800cf54 <TIM_OC2_SetConfig+0x108>)
 800cee4:	4293      	cmp	r3, r2
 800cee6:	d007      	beq.n	800cef8 <TIM_OC2_SetConfig+0xac>
 800cee8:	687b      	ldr	r3, [r7, #4]
 800ceea:	4a1b      	ldr	r2, [pc, #108]	; (800cf58 <TIM_OC2_SetConfig+0x10c>)
 800ceec:	4293      	cmp	r3, r2
 800ceee:	d003      	beq.n	800cef8 <TIM_OC2_SetConfig+0xac>
 800cef0:	687b      	ldr	r3, [r7, #4]
 800cef2:	4a1a      	ldr	r2, [pc, #104]	; (800cf5c <TIM_OC2_SetConfig+0x110>)
 800cef4:	4293      	cmp	r3, r2
 800cef6:	d113      	bne.n	800cf20 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800cef8:	693b      	ldr	r3, [r7, #16]
 800cefa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800cefe:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800cf00:	693b      	ldr	r3, [r7, #16]
 800cf02:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800cf06:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800cf08:	683b      	ldr	r3, [r7, #0]
 800cf0a:	695b      	ldr	r3, [r3, #20]
 800cf0c:	009b      	lsls	r3, r3, #2
 800cf0e:	693a      	ldr	r2, [r7, #16]
 800cf10:	4313      	orrs	r3, r2
 800cf12:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800cf14:	683b      	ldr	r3, [r7, #0]
 800cf16:	699b      	ldr	r3, [r3, #24]
 800cf18:	009b      	lsls	r3, r3, #2
 800cf1a:	693a      	ldr	r2, [r7, #16]
 800cf1c:	4313      	orrs	r3, r2
 800cf1e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800cf20:	687b      	ldr	r3, [r7, #4]
 800cf22:	693a      	ldr	r2, [r7, #16]
 800cf24:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800cf26:	687b      	ldr	r3, [r7, #4]
 800cf28:	68fa      	ldr	r2, [r7, #12]
 800cf2a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800cf2c:	683b      	ldr	r3, [r7, #0]
 800cf2e:	685a      	ldr	r2, [r3, #4]
 800cf30:	687b      	ldr	r3, [r7, #4]
 800cf32:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800cf34:	687b      	ldr	r3, [r7, #4]
 800cf36:	697a      	ldr	r2, [r7, #20]
 800cf38:	621a      	str	r2, [r3, #32]
}
 800cf3a:	bf00      	nop
 800cf3c:	371c      	adds	r7, #28
 800cf3e:	46bd      	mov	sp, r7
 800cf40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf44:	4770      	bx	lr
 800cf46:	bf00      	nop
 800cf48:	feff8fff 	.word	0xfeff8fff
 800cf4c:	40010000 	.word	0x40010000
 800cf50:	40010400 	.word	0x40010400
 800cf54:	40014000 	.word	0x40014000
 800cf58:	40014400 	.word	0x40014400
 800cf5c:	40014800 	.word	0x40014800

0800cf60 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800cf60:	b480      	push	{r7}
 800cf62:	b087      	sub	sp, #28
 800cf64:	af00      	add	r7, sp, #0
 800cf66:	6078      	str	r0, [r7, #4]
 800cf68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800cf6a:	687b      	ldr	r3, [r7, #4]
 800cf6c:	6a1b      	ldr	r3, [r3, #32]
 800cf6e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800cf72:	687b      	ldr	r3, [r7, #4]
 800cf74:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800cf76:	687b      	ldr	r3, [r7, #4]
 800cf78:	6a1b      	ldr	r3, [r3, #32]
 800cf7a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800cf7c:	687b      	ldr	r3, [r7, #4]
 800cf7e:	685b      	ldr	r3, [r3, #4]
 800cf80:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800cf82:	687b      	ldr	r3, [r7, #4]
 800cf84:	69db      	ldr	r3, [r3, #28]
 800cf86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800cf88:	68fa      	ldr	r2, [r7, #12]
 800cf8a:	4b33      	ldr	r3, [pc, #204]	; (800d058 <TIM_OC3_SetConfig+0xf8>)
 800cf8c:	4013      	ands	r3, r2
 800cf8e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800cf90:	68fb      	ldr	r3, [r7, #12]
 800cf92:	f023 0303 	bic.w	r3, r3, #3
 800cf96:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800cf98:	683b      	ldr	r3, [r7, #0]
 800cf9a:	681b      	ldr	r3, [r3, #0]
 800cf9c:	68fa      	ldr	r2, [r7, #12]
 800cf9e:	4313      	orrs	r3, r2
 800cfa0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800cfa2:	697b      	ldr	r3, [r7, #20]
 800cfa4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800cfa8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800cfaa:	683b      	ldr	r3, [r7, #0]
 800cfac:	689b      	ldr	r3, [r3, #8]
 800cfae:	021b      	lsls	r3, r3, #8
 800cfb0:	697a      	ldr	r2, [r7, #20]
 800cfb2:	4313      	orrs	r3, r2
 800cfb4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800cfb6:	687b      	ldr	r3, [r7, #4]
 800cfb8:	4a28      	ldr	r2, [pc, #160]	; (800d05c <TIM_OC3_SetConfig+0xfc>)
 800cfba:	4293      	cmp	r3, r2
 800cfbc:	d003      	beq.n	800cfc6 <TIM_OC3_SetConfig+0x66>
 800cfbe:	687b      	ldr	r3, [r7, #4]
 800cfc0:	4a27      	ldr	r2, [pc, #156]	; (800d060 <TIM_OC3_SetConfig+0x100>)
 800cfc2:	4293      	cmp	r3, r2
 800cfc4:	d10d      	bne.n	800cfe2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800cfc6:	697b      	ldr	r3, [r7, #20]
 800cfc8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800cfcc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800cfce:	683b      	ldr	r3, [r7, #0]
 800cfd0:	68db      	ldr	r3, [r3, #12]
 800cfd2:	021b      	lsls	r3, r3, #8
 800cfd4:	697a      	ldr	r2, [r7, #20]
 800cfd6:	4313      	orrs	r3, r2
 800cfd8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800cfda:	697b      	ldr	r3, [r7, #20]
 800cfdc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800cfe0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800cfe2:	687b      	ldr	r3, [r7, #4]
 800cfe4:	4a1d      	ldr	r2, [pc, #116]	; (800d05c <TIM_OC3_SetConfig+0xfc>)
 800cfe6:	4293      	cmp	r3, r2
 800cfe8:	d00f      	beq.n	800d00a <TIM_OC3_SetConfig+0xaa>
 800cfea:	687b      	ldr	r3, [r7, #4]
 800cfec:	4a1c      	ldr	r2, [pc, #112]	; (800d060 <TIM_OC3_SetConfig+0x100>)
 800cfee:	4293      	cmp	r3, r2
 800cff0:	d00b      	beq.n	800d00a <TIM_OC3_SetConfig+0xaa>
 800cff2:	687b      	ldr	r3, [r7, #4]
 800cff4:	4a1b      	ldr	r2, [pc, #108]	; (800d064 <TIM_OC3_SetConfig+0x104>)
 800cff6:	4293      	cmp	r3, r2
 800cff8:	d007      	beq.n	800d00a <TIM_OC3_SetConfig+0xaa>
 800cffa:	687b      	ldr	r3, [r7, #4]
 800cffc:	4a1a      	ldr	r2, [pc, #104]	; (800d068 <TIM_OC3_SetConfig+0x108>)
 800cffe:	4293      	cmp	r3, r2
 800d000:	d003      	beq.n	800d00a <TIM_OC3_SetConfig+0xaa>
 800d002:	687b      	ldr	r3, [r7, #4]
 800d004:	4a19      	ldr	r2, [pc, #100]	; (800d06c <TIM_OC3_SetConfig+0x10c>)
 800d006:	4293      	cmp	r3, r2
 800d008:	d113      	bne.n	800d032 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800d00a:	693b      	ldr	r3, [r7, #16]
 800d00c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d010:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800d012:	693b      	ldr	r3, [r7, #16]
 800d014:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800d018:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800d01a:	683b      	ldr	r3, [r7, #0]
 800d01c:	695b      	ldr	r3, [r3, #20]
 800d01e:	011b      	lsls	r3, r3, #4
 800d020:	693a      	ldr	r2, [r7, #16]
 800d022:	4313      	orrs	r3, r2
 800d024:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800d026:	683b      	ldr	r3, [r7, #0]
 800d028:	699b      	ldr	r3, [r3, #24]
 800d02a:	011b      	lsls	r3, r3, #4
 800d02c:	693a      	ldr	r2, [r7, #16]
 800d02e:	4313      	orrs	r3, r2
 800d030:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d032:	687b      	ldr	r3, [r7, #4]
 800d034:	693a      	ldr	r2, [r7, #16]
 800d036:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800d038:	687b      	ldr	r3, [r7, #4]
 800d03a:	68fa      	ldr	r2, [r7, #12]
 800d03c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800d03e:	683b      	ldr	r3, [r7, #0]
 800d040:	685a      	ldr	r2, [r3, #4]
 800d042:	687b      	ldr	r3, [r7, #4]
 800d044:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d046:	687b      	ldr	r3, [r7, #4]
 800d048:	697a      	ldr	r2, [r7, #20]
 800d04a:	621a      	str	r2, [r3, #32]
}
 800d04c:	bf00      	nop
 800d04e:	371c      	adds	r7, #28
 800d050:	46bd      	mov	sp, r7
 800d052:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d056:	4770      	bx	lr
 800d058:	fffeff8f 	.word	0xfffeff8f
 800d05c:	40010000 	.word	0x40010000
 800d060:	40010400 	.word	0x40010400
 800d064:	40014000 	.word	0x40014000
 800d068:	40014400 	.word	0x40014400
 800d06c:	40014800 	.word	0x40014800

0800d070 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800d070:	b480      	push	{r7}
 800d072:	b087      	sub	sp, #28
 800d074:	af00      	add	r7, sp, #0
 800d076:	6078      	str	r0, [r7, #4]
 800d078:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800d07a:	687b      	ldr	r3, [r7, #4]
 800d07c:	6a1b      	ldr	r3, [r3, #32]
 800d07e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800d082:	687b      	ldr	r3, [r7, #4]
 800d084:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d086:	687b      	ldr	r3, [r7, #4]
 800d088:	6a1b      	ldr	r3, [r3, #32]
 800d08a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d08c:	687b      	ldr	r3, [r7, #4]
 800d08e:	685b      	ldr	r3, [r3, #4]
 800d090:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800d092:	687b      	ldr	r3, [r7, #4]
 800d094:	69db      	ldr	r3, [r3, #28]
 800d096:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800d098:	68fa      	ldr	r2, [r7, #12]
 800d09a:	4b24      	ldr	r3, [pc, #144]	; (800d12c <TIM_OC4_SetConfig+0xbc>)
 800d09c:	4013      	ands	r3, r2
 800d09e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800d0a0:	68fb      	ldr	r3, [r7, #12]
 800d0a2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d0a6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d0a8:	683b      	ldr	r3, [r7, #0]
 800d0aa:	681b      	ldr	r3, [r3, #0]
 800d0ac:	021b      	lsls	r3, r3, #8
 800d0ae:	68fa      	ldr	r2, [r7, #12]
 800d0b0:	4313      	orrs	r3, r2
 800d0b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800d0b4:	693b      	ldr	r3, [r7, #16]
 800d0b6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800d0ba:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800d0bc:	683b      	ldr	r3, [r7, #0]
 800d0be:	689b      	ldr	r3, [r3, #8]
 800d0c0:	031b      	lsls	r3, r3, #12
 800d0c2:	693a      	ldr	r2, [r7, #16]
 800d0c4:	4313      	orrs	r3, r2
 800d0c6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d0c8:	687b      	ldr	r3, [r7, #4]
 800d0ca:	4a19      	ldr	r2, [pc, #100]	; (800d130 <TIM_OC4_SetConfig+0xc0>)
 800d0cc:	4293      	cmp	r3, r2
 800d0ce:	d00f      	beq.n	800d0f0 <TIM_OC4_SetConfig+0x80>
 800d0d0:	687b      	ldr	r3, [r7, #4]
 800d0d2:	4a18      	ldr	r2, [pc, #96]	; (800d134 <TIM_OC4_SetConfig+0xc4>)
 800d0d4:	4293      	cmp	r3, r2
 800d0d6:	d00b      	beq.n	800d0f0 <TIM_OC4_SetConfig+0x80>
 800d0d8:	687b      	ldr	r3, [r7, #4]
 800d0da:	4a17      	ldr	r2, [pc, #92]	; (800d138 <TIM_OC4_SetConfig+0xc8>)
 800d0dc:	4293      	cmp	r3, r2
 800d0de:	d007      	beq.n	800d0f0 <TIM_OC4_SetConfig+0x80>
 800d0e0:	687b      	ldr	r3, [r7, #4]
 800d0e2:	4a16      	ldr	r2, [pc, #88]	; (800d13c <TIM_OC4_SetConfig+0xcc>)
 800d0e4:	4293      	cmp	r3, r2
 800d0e6:	d003      	beq.n	800d0f0 <TIM_OC4_SetConfig+0x80>
 800d0e8:	687b      	ldr	r3, [r7, #4]
 800d0ea:	4a15      	ldr	r2, [pc, #84]	; (800d140 <TIM_OC4_SetConfig+0xd0>)
 800d0ec:	4293      	cmp	r3, r2
 800d0ee:	d109      	bne.n	800d104 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800d0f0:	697b      	ldr	r3, [r7, #20]
 800d0f2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800d0f6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800d0f8:	683b      	ldr	r3, [r7, #0]
 800d0fa:	695b      	ldr	r3, [r3, #20]
 800d0fc:	019b      	lsls	r3, r3, #6
 800d0fe:	697a      	ldr	r2, [r7, #20]
 800d100:	4313      	orrs	r3, r2
 800d102:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d104:	687b      	ldr	r3, [r7, #4]
 800d106:	697a      	ldr	r2, [r7, #20]
 800d108:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800d10a:	687b      	ldr	r3, [r7, #4]
 800d10c:	68fa      	ldr	r2, [r7, #12]
 800d10e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800d110:	683b      	ldr	r3, [r7, #0]
 800d112:	685a      	ldr	r2, [r3, #4]
 800d114:	687b      	ldr	r3, [r7, #4]
 800d116:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d118:	687b      	ldr	r3, [r7, #4]
 800d11a:	693a      	ldr	r2, [r7, #16]
 800d11c:	621a      	str	r2, [r3, #32]
}
 800d11e:	bf00      	nop
 800d120:	371c      	adds	r7, #28
 800d122:	46bd      	mov	sp, r7
 800d124:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d128:	4770      	bx	lr
 800d12a:	bf00      	nop
 800d12c:	feff8fff 	.word	0xfeff8fff
 800d130:	40010000 	.word	0x40010000
 800d134:	40010400 	.word	0x40010400
 800d138:	40014000 	.word	0x40014000
 800d13c:	40014400 	.word	0x40014400
 800d140:	40014800 	.word	0x40014800

0800d144 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800d144:	b480      	push	{r7}
 800d146:	b087      	sub	sp, #28
 800d148:	af00      	add	r7, sp, #0
 800d14a:	6078      	str	r0, [r7, #4]
 800d14c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800d14e:	687b      	ldr	r3, [r7, #4]
 800d150:	6a1b      	ldr	r3, [r3, #32]
 800d152:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800d156:	687b      	ldr	r3, [r7, #4]
 800d158:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d15a:	687b      	ldr	r3, [r7, #4]
 800d15c:	6a1b      	ldr	r3, [r3, #32]
 800d15e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d160:	687b      	ldr	r3, [r7, #4]
 800d162:	685b      	ldr	r3, [r3, #4]
 800d164:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800d166:	687b      	ldr	r3, [r7, #4]
 800d168:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d16a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800d16c:	68fa      	ldr	r2, [r7, #12]
 800d16e:	4b21      	ldr	r3, [pc, #132]	; (800d1f4 <TIM_OC5_SetConfig+0xb0>)
 800d170:	4013      	ands	r3, r2
 800d172:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800d174:	683b      	ldr	r3, [r7, #0]
 800d176:	681b      	ldr	r3, [r3, #0]
 800d178:	68fa      	ldr	r2, [r7, #12]
 800d17a:	4313      	orrs	r3, r2
 800d17c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800d17e:	693b      	ldr	r3, [r7, #16]
 800d180:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800d184:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800d186:	683b      	ldr	r3, [r7, #0]
 800d188:	689b      	ldr	r3, [r3, #8]
 800d18a:	041b      	lsls	r3, r3, #16
 800d18c:	693a      	ldr	r2, [r7, #16]
 800d18e:	4313      	orrs	r3, r2
 800d190:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d192:	687b      	ldr	r3, [r7, #4]
 800d194:	4a18      	ldr	r2, [pc, #96]	; (800d1f8 <TIM_OC5_SetConfig+0xb4>)
 800d196:	4293      	cmp	r3, r2
 800d198:	d00f      	beq.n	800d1ba <TIM_OC5_SetConfig+0x76>
 800d19a:	687b      	ldr	r3, [r7, #4]
 800d19c:	4a17      	ldr	r2, [pc, #92]	; (800d1fc <TIM_OC5_SetConfig+0xb8>)
 800d19e:	4293      	cmp	r3, r2
 800d1a0:	d00b      	beq.n	800d1ba <TIM_OC5_SetConfig+0x76>
 800d1a2:	687b      	ldr	r3, [r7, #4]
 800d1a4:	4a16      	ldr	r2, [pc, #88]	; (800d200 <TIM_OC5_SetConfig+0xbc>)
 800d1a6:	4293      	cmp	r3, r2
 800d1a8:	d007      	beq.n	800d1ba <TIM_OC5_SetConfig+0x76>
 800d1aa:	687b      	ldr	r3, [r7, #4]
 800d1ac:	4a15      	ldr	r2, [pc, #84]	; (800d204 <TIM_OC5_SetConfig+0xc0>)
 800d1ae:	4293      	cmp	r3, r2
 800d1b0:	d003      	beq.n	800d1ba <TIM_OC5_SetConfig+0x76>
 800d1b2:	687b      	ldr	r3, [r7, #4]
 800d1b4:	4a14      	ldr	r2, [pc, #80]	; (800d208 <TIM_OC5_SetConfig+0xc4>)
 800d1b6:	4293      	cmp	r3, r2
 800d1b8:	d109      	bne.n	800d1ce <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800d1ba:	697b      	ldr	r3, [r7, #20]
 800d1bc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800d1c0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800d1c2:	683b      	ldr	r3, [r7, #0]
 800d1c4:	695b      	ldr	r3, [r3, #20]
 800d1c6:	021b      	lsls	r3, r3, #8
 800d1c8:	697a      	ldr	r2, [r7, #20]
 800d1ca:	4313      	orrs	r3, r2
 800d1cc:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d1ce:	687b      	ldr	r3, [r7, #4]
 800d1d0:	697a      	ldr	r2, [r7, #20]
 800d1d2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800d1d4:	687b      	ldr	r3, [r7, #4]
 800d1d6:	68fa      	ldr	r2, [r7, #12]
 800d1d8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800d1da:	683b      	ldr	r3, [r7, #0]
 800d1dc:	685a      	ldr	r2, [r3, #4]
 800d1de:	687b      	ldr	r3, [r7, #4]
 800d1e0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d1e2:	687b      	ldr	r3, [r7, #4]
 800d1e4:	693a      	ldr	r2, [r7, #16]
 800d1e6:	621a      	str	r2, [r3, #32]
}
 800d1e8:	bf00      	nop
 800d1ea:	371c      	adds	r7, #28
 800d1ec:	46bd      	mov	sp, r7
 800d1ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1f2:	4770      	bx	lr
 800d1f4:	fffeff8f 	.word	0xfffeff8f
 800d1f8:	40010000 	.word	0x40010000
 800d1fc:	40010400 	.word	0x40010400
 800d200:	40014000 	.word	0x40014000
 800d204:	40014400 	.word	0x40014400
 800d208:	40014800 	.word	0x40014800

0800d20c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800d20c:	b480      	push	{r7}
 800d20e:	b087      	sub	sp, #28
 800d210:	af00      	add	r7, sp, #0
 800d212:	6078      	str	r0, [r7, #4]
 800d214:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800d216:	687b      	ldr	r3, [r7, #4]
 800d218:	6a1b      	ldr	r3, [r3, #32]
 800d21a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800d21e:	687b      	ldr	r3, [r7, #4]
 800d220:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d222:	687b      	ldr	r3, [r7, #4]
 800d224:	6a1b      	ldr	r3, [r3, #32]
 800d226:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d228:	687b      	ldr	r3, [r7, #4]
 800d22a:	685b      	ldr	r3, [r3, #4]
 800d22c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800d22e:	687b      	ldr	r3, [r7, #4]
 800d230:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d232:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800d234:	68fa      	ldr	r2, [r7, #12]
 800d236:	4b22      	ldr	r3, [pc, #136]	; (800d2c0 <TIM_OC6_SetConfig+0xb4>)
 800d238:	4013      	ands	r3, r2
 800d23a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d23c:	683b      	ldr	r3, [r7, #0]
 800d23e:	681b      	ldr	r3, [r3, #0]
 800d240:	021b      	lsls	r3, r3, #8
 800d242:	68fa      	ldr	r2, [r7, #12]
 800d244:	4313      	orrs	r3, r2
 800d246:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800d248:	693b      	ldr	r3, [r7, #16]
 800d24a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800d24e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800d250:	683b      	ldr	r3, [r7, #0]
 800d252:	689b      	ldr	r3, [r3, #8]
 800d254:	051b      	lsls	r3, r3, #20
 800d256:	693a      	ldr	r2, [r7, #16]
 800d258:	4313      	orrs	r3, r2
 800d25a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d25c:	687b      	ldr	r3, [r7, #4]
 800d25e:	4a19      	ldr	r2, [pc, #100]	; (800d2c4 <TIM_OC6_SetConfig+0xb8>)
 800d260:	4293      	cmp	r3, r2
 800d262:	d00f      	beq.n	800d284 <TIM_OC6_SetConfig+0x78>
 800d264:	687b      	ldr	r3, [r7, #4]
 800d266:	4a18      	ldr	r2, [pc, #96]	; (800d2c8 <TIM_OC6_SetConfig+0xbc>)
 800d268:	4293      	cmp	r3, r2
 800d26a:	d00b      	beq.n	800d284 <TIM_OC6_SetConfig+0x78>
 800d26c:	687b      	ldr	r3, [r7, #4]
 800d26e:	4a17      	ldr	r2, [pc, #92]	; (800d2cc <TIM_OC6_SetConfig+0xc0>)
 800d270:	4293      	cmp	r3, r2
 800d272:	d007      	beq.n	800d284 <TIM_OC6_SetConfig+0x78>
 800d274:	687b      	ldr	r3, [r7, #4]
 800d276:	4a16      	ldr	r2, [pc, #88]	; (800d2d0 <TIM_OC6_SetConfig+0xc4>)
 800d278:	4293      	cmp	r3, r2
 800d27a:	d003      	beq.n	800d284 <TIM_OC6_SetConfig+0x78>
 800d27c:	687b      	ldr	r3, [r7, #4]
 800d27e:	4a15      	ldr	r2, [pc, #84]	; (800d2d4 <TIM_OC6_SetConfig+0xc8>)
 800d280:	4293      	cmp	r3, r2
 800d282:	d109      	bne.n	800d298 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800d284:	697b      	ldr	r3, [r7, #20]
 800d286:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800d28a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800d28c:	683b      	ldr	r3, [r7, #0]
 800d28e:	695b      	ldr	r3, [r3, #20]
 800d290:	029b      	lsls	r3, r3, #10
 800d292:	697a      	ldr	r2, [r7, #20]
 800d294:	4313      	orrs	r3, r2
 800d296:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d298:	687b      	ldr	r3, [r7, #4]
 800d29a:	697a      	ldr	r2, [r7, #20]
 800d29c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800d29e:	687b      	ldr	r3, [r7, #4]
 800d2a0:	68fa      	ldr	r2, [r7, #12]
 800d2a2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800d2a4:	683b      	ldr	r3, [r7, #0]
 800d2a6:	685a      	ldr	r2, [r3, #4]
 800d2a8:	687b      	ldr	r3, [r7, #4]
 800d2aa:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d2ac:	687b      	ldr	r3, [r7, #4]
 800d2ae:	693a      	ldr	r2, [r7, #16]
 800d2b0:	621a      	str	r2, [r3, #32]
}
 800d2b2:	bf00      	nop
 800d2b4:	371c      	adds	r7, #28
 800d2b6:	46bd      	mov	sp, r7
 800d2b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2bc:	4770      	bx	lr
 800d2be:	bf00      	nop
 800d2c0:	feff8fff 	.word	0xfeff8fff
 800d2c4:	40010000 	.word	0x40010000
 800d2c8:	40010400 	.word	0x40010400
 800d2cc:	40014000 	.word	0x40014000
 800d2d0:	40014400 	.word	0x40014400
 800d2d4:	40014800 	.word	0x40014800

0800d2d8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800d2d8:	b480      	push	{r7}
 800d2da:	b087      	sub	sp, #28
 800d2dc:	af00      	add	r7, sp, #0
 800d2de:	60f8      	str	r0, [r7, #12]
 800d2e0:	60b9      	str	r1, [r7, #8]
 800d2e2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800d2e4:	68fb      	ldr	r3, [r7, #12]
 800d2e6:	6a1b      	ldr	r3, [r3, #32]
 800d2e8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800d2ea:	68fb      	ldr	r3, [r7, #12]
 800d2ec:	6a1b      	ldr	r3, [r3, #32]
 800d2ee:	f023 0201 	bic.w	r2, r3, #1
 800d2f2:	68fb      	ldr	r3, [r7, #12]
 800d2f4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800d2f6:	68fb      	ldr	r3, [r7, #12]
 800d2f8:	699b      	ldr	r3, [r3, #24]
 800d2fa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800d2fc:	693b      	ldr	r3, [r7, #16]
 800d2fe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800d302:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800d304:	687b      	ldr	r3, [r7, #4]
 800d306:	011b      	lsls	r3, r3, #4
 800d308:	693a      	ldr	r2, [r7, #16]
 800d30a:	4313      	orrs	r3, r2
 800d30c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800d30e:	697b      	ldr	r3, [r7, #20]
 800d310:	f023 030a 	bic.w	r3, r3, #10
 800d314:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800d316:	697a      	ldr	r2, [r7, #20]
 800d318:	68bb      	ldr	r3, [r7, #8]
 800d31a:	4313      	orrs	r3, r2
 800d31c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800d31e:	68fb      	ldr	r3, [r7, #12]
 800d320:	693a      	ldr	r2, [r7, #16]
 800d322:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800d324:	68fb      	ldr	r3, [r7, #12]
 800d326:	697a      	ldr	r2, [r7, #20]
 800d328:	621a      	str	r2, [r3, #32]
}
 800d32a:	bf00      	nop
 800d32c:	371c      	adds	r7, #28
 800d32e:	46bd      	mov	sp, r7
 800d330:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d334:	4770      	bx	lr

0800d336 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800d336:	b480      	push	{r7}
 800d338:	b087      	sub	sp, #28
 800d33a:	af00      	add	r7, sp, #0
 800d33c:	60f8      	str	r0, [r7, #12]
 800d33e:	60b9      	str	r1, [r7, #8]
 800d340:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800d342:	68fb      	ldr	r3, [r7, #12]
 800d344:	6a1b      	ldr	r3, [r3, #32]
 800d346:	f023 0210 	bic.w	r2, r3, #16
 800d34a:	68fb      	ldr	r3, [r7, #12]
 800d34c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800d34e:	68fb      	ldr	r3, [r7, #12]
 800d350:	699b      	ldr	r3, [r3, #24]
 800d352:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800d354:	68fb      	ldr	r3, [r7, #12]
 800d356:	6a1b      	ldr	r3, [r3, #32]
 800d358:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800d35a:	697b      	ldr	r3, [r7, #20]
 800d35c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800d360:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800d362:	687b      	ldr	r3, [r7, #4]
 800d364:	031b      	lsls	r3, r3, #12
 800d366:	697a      	ldr	r2, [r7, #20]
 800d368:	4313      	orrs	r3, r2
 800d36a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800d36c:	693b      	ldr	r3, [r7, #16]
 800d36e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800d372:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800d374:	68bb      	ldr	r3, [r7, #8]
 800d376:	011b      	lsls	r3, r3, #4
 800d378:	693a      	ldr	r2, [r7, #16]
 800d37a:	4313      	orrs	r3, r2
 800d37c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800d37e:	68fb      	ldr	r3, [r7, #12]
 800d380:	697a      	ldr	r2, [r7, #20]
 800d382:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800d384:	68fb      	ldr	r3, [r7, #12]
 800d386:	693a      	ldr	r2, [r7, #16]
 800d388:	621a      	str	r2, [r3, #32]
}
 800d38a:	bf00      	nop
 800d38c:	371c      	adds	r7, #28
 800d38e:	46bd      	mov	sp, r7
 800d390:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d394:	4770      	bx	lr
	...

0800d398 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800d398:	b480      	push	{r7}
 800d39a:	b085      	sub	sp, #20
 800d39c:	af00      	add	r7, sp, #0
 800d39e:	6078      	str	r0, [r7, #4]
 800d3a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800d3a2:	687b      	ldr	r3, [r7, #4]
 800d3a4:	689b      	ldr	r3, [r3, #8]
 800d3a6:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800d3a8:	68fa      	ldr	r2, [r7, #12]
 800d3aa:	4b09      	ldr	r3, [pc, #36]	; (800d3d0 <TIM_ITRx_SetConfig+0x38>)
 800d3ac:	4013      	ands	r3, r2
 800d3ae:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800d3b0:	683a      	ldr	r2, [r7, #0]
 800d3b2:	68fb      	ldr	r3, [r7, #12]
 800d3b4:	4313      	orrs	r3, r2
 800d3b6:	f043 0307 	orr.w	r3, r3, #7
 800d3ba:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800d3bc:	687b      	ldr	r3, [r7, #4]
 800d3be:	68fa      	ldr	r2, [r7, #12]
 800d3c0:	609a      	str	r2, [r3, #8]
}
 800d3c2:	bf00      	nop
 800d3c4:	3714      	adds	r7, #20
 800d3c6:	46bd      	mov	sp, r7
 800d3c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3cc:	4770      	bx	lr
 800d3ce:	bf00      	nop
 800d3d0:	ffcfff8f 	.word	0xffcfff8f

0800d3d4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800d3d4:	b480      	push	{r7}
 800d3d6:	b087      	sub	sp, #28
 800d3d8:	af00      	add	r7, sp, #0
 800d3da:	60f8      	str	r0, [r7, #12]
 800d3dc:	60b9      	str	r1, [r7, #8]
 800d3de:	607a      	str	r2, [r7, #4]
 800d3e0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800d3e2:	68fb      	ldr	r3, [r7, #12]
 800d3e4:	689b      	ldr	r3, [r3, #8]
 800d3e6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800d3e8:	697b      	ldr	r3, [r7, #20]
 800d3ea:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800d3ee:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800d3f0:	683b      	ldr	r3, [r7, #0]
 800d3f2:	021a      	lsls	r2, r3, #8
 800d3f4:	687b      	ldr	r3, [r7, #4]
 800d3f6:	431a      	orrs	r2, r3
 800d3f8:	68bb      	ldr	r3, [r7, #8]
 800d3fa:	4313      	orrs	r3, r2
 800d3fc:	697a      	ldr	r2, [r7, #20]
 800d3fe:	4313      	orrs	r3, r2
 800d400:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800d402:	68fb      	ldr	r3, [r7, #12]
 800d404:	697a      	ldr	r2, [r7, #20]
 800d406:	609a      	str	r2, [r3, #8]
}
 800d408:	bf00      	nop
 800d40a:	371c      	adds	r7, #28
 800d40c:	46bd      	mov	sp, r7
 800d40e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d412:	4770      	bx	lr

0800d414 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800d414:	b480      	push	{r7}
 800d416:	b087      	sub	sp, #28
 800d418:	af00      	add	r7, sp, #0
 800d41a:	60f8      	str	r0, [r7, #12]
 800d41c:	60b9      	str	r1, [r7, #8]
 800d41e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800d420:	68bb      	ldr	r3, [r7, #8]
 800d422:	f003 031f 	and.w	r3, r3, #31
 800d426:	2201      	movs	r2, #1
 800d428:	fa02 f303 	lsl.w	r3, r2, r3
 800d42c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800d42e:	68fb      	ldr	r3, [r7, #12]
 800d430:	6a1a      	ldr	r2, [r3, #32]
 800d432:	697b      	ldr	r3, [r7, #20]
 800d434:	43db      	mvns	r3, r3
 800d436:	401a      	ands	r2, r3
 800d438:	68fb      	ldr	r3, [r7, #12]
 800d43a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800d43c:	68fb      	ldr	r3, [r7, #12]
 800d43e:	6a1a      	ldr	r2, [r3, #32]
 800d440:	68bb      	ldr	r3, [r7, #8]
 800d442:	f003 031f 	and.w	r3, r3, #31
 800d446:	6879      	ldr	r1, [r7, #4]
 800d448:	fa01 f303 	lsl.w	r3, r1, r3
 800d44c:	431a      	orrs	r2, r3
 800d44e:	68fb      	ldr	r3, [r7, #12]
 800d450:	621a      	str	r2, [r3, #32]
}
 800d452:	bf00      	nop
 800d454:	371c      	adds	r7, #28
 800d456:	46bd      	mov	sp, r7
 800d458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d45c:	4770      	bx	lr
	...

0800d460 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800d460:	b480      	push	{r7}
 800d462:	b085      	sub	sp, #20
 800d464:	af00      	add	r7, sp, #0
 800d466:	6078      	str	r0, [r7, #4]
 800d468:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800d46a:	687b      	ldr	r3, [r7, #4]
 800d46c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d470:	2b01      	cmp	r3, #1
 800d472:	d101      	bne.n	800d478 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800d474:	2302      	movs	r3, #2
 800d476:	e06d      	b.n	800d554 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800d478:	687b      	ldr	r3, [r7, #4]
 800d47a:	2201      	movs	r2, #1
 800d47c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d480:	687b      	ldr	r3, [r7, #4]
 800d482:	2202      	movs	r2, #2
 800d484:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800d488:	687b      	ldr	r3, [r7, #4]
 800d48a:	681b      	ldr	r3, [r3, #0]
 800d48c:	685b      	ldr	r3, [r3, #4]
 800d48e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800d490:	687b      	ldr	r3, [r7, #4]
 800d492:	681b      	ldr	r3, [r3, #0]
 800d494:	689b      	ldr	r3, [r3, #8]
 800d496:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800d498:	687b      	ldr	r3, [r7, #4]
 800d49a:	681b      	ldr	r3, [r3, #0]
 800d49c:	4a30      	ldr	r2, [pc, #192]	; (800d560 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800d49e:	4293      	cmp	r3, r2
 800d4a0:	d004      	beq.n	800d4ac <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800d4a2:	687b      	ldr	r3, [r7, #4]
 800d4a4:	681b      	ldr	r3, [r3, #0]
 800d4a6:	4a2f      	ldr	r2, [pc, #188]	; (800d564 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800d4a8:	4293      	cmp	r3, r2
 800d4aa:	d108      	bne.n	800d4be <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800d4ac:	68fb      	ldr	r3, [r7, #12]
 800d4ae:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800d4b2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800d4b4:	683b      	ldr	r3, [r7, #0]
 800d4b6:	685b      	ldr	r3, [r3, #4]
 800d4b8:	68fa      	ldr	r2, [r7, #12]
 800d4ba:	4313      	orrs	r3, r2
 800d4bc:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800d4be:	68fb      	ldr	r3, [r7, #12]
 800d4c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d4c4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800d4c6:	683b      	ldr	r3, [r7, #0]
 800d4c8:	681b      	ldr	r3, [r3, #0]
 800d4ca:	68fa      	ldr	r2, [r7, #12]
 800d4cc:	4313      	orrs	r3, r2
 800d4ce:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800d4d0:	687b      	ldr	r3, [r7, #4]
 800d4d2:	681b      	ldr	r3, [r3, #0]
 800d4d4:	68fa      	ldr	r2, [r7, #12]
 800d4d6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d4d8:	687b      	ldr	r3, [r7, #4]
 800d4da:	681b      	ldr	r3, [r3, #0]
 800d4dc:	4a20      	ldr	r2, [pc, #128]	; (800d560 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800d4de:	4293      	cmp	r3, r2
 800d4e0:	d022      	beq.n	800d528 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d4e2:	687b      	ldr	r3, [r7, #4]
 800d4e4:	681b      	ldr	r3, [r3, #0]
 800d4e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d4ea:	d01d      	beq.n	800d528 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d4ec:	687b      	ldr	r3, [r7, #4]
 800d4ee:	681b      	ldr	r3, [r3, #0]
 800d4f0:	4a1d      	ldr	r2, [pc, #116]	; (800d568 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800d4f2:	4293      	cmp	r3, r2
 800d4f4:	d018      	beq.n	800d528 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d4f6:	687b      	ldr	r3, [r7, #4]
 800d4f8:	681b      	ldr	r3, [r3, #0]
 800d4fa:	4a1c      	ldr	r2, [pc, #112]	; (800d56c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800d4fc:	4293      	cmp	r3, r2
 800d4fe:	d013      	beq.n	800d528 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d500:	687b      	ldr	r3, [r7, #4]
 800d502:	681b      	ldr	r3, [r3, #0]
 800d504:	4a1a      	ldr	r2, [pc, #104]	; (800d570 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800d506:	4293      	cmp	r3, r2
 800d508:	d00e      	beq.n	800d528 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d50a:	687b      	ldr	r3, [r7, #4]
 800d50c:	681b      	ldr	r3, [r3, #0]
 800d50e:	4a15      	ldr	r2, [pc, #84]	; (800d564 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800d510:	4293      	cmp	r3, r2
 800d512:	d009      	beq.n	800d528 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d514:	687b      	ldr	r3, [r7, #4]
 800d516:	681b      	ldr	r3, [r3, #0]
 800d518:	4a16      	ldr	r2, [pc, #88]	; (800d574 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800d51a:	4293      	cmp	r3, r2
 800d51c:	d004      	beq.n	800d528 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d51e:	687b      	ldr	r3, [r7, #4]
 800d520:	681b      	ldr	r3, [r3, #0]
 800d522:	4a15      	ldr	r2, [pc, #84]	; (800d578 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800d524:	4293      	cmp	r3, r2
 800d526:	d10c      	bne.n	800d542 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800d528:	68bb      	ldr	r3, [r7, #8]
 800d52a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d52e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800d530:	683b      	ldr	r3, [r7, #0]
 800d532:	689b      	ldr	r3, [r3, #8]
 800d534:	68ba      	ldr	r2, [r7, #8]
 800d536:	4313      	orrs	r3, r2
 800d538:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800d53a:	687b      	ldr	r3, [r7, #4]
 800d53c:	681b      	ldr	r3, [r3, #0]
 800d53e:	68ba      	ldr	r2, [r7, #8]
 800d540:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800d542:	687b      	ldr	r3, [r7, #4]
 800d544:	2201      	movs	r2, #1
 800d546:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800d54a:	687b      	ldr	r3, [r7, #4]
 800d54c:	2200      	movs	r2, #0
 800d54e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800d552:	2300      	movs	r3, #0
}
 800d554:	4618      	mov	r0, r3
 800d556:	3714      	adds	r7, #20
 800d558:	46bd      	mov	sp, r7
 800d55a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d55e:	4770      	bx	lr
 800d560:	40010000 	.word	0x40010000
 800d564:	40010400 	.word	0x40010400
 800d568:	40000400 	.word	0x40000400
 800d56c:	40000800 	.word	0x40000800
 800d570:	40000c00 	.word	0x40000c00
 800d574:	40001800 	.word	0x40001800
 800d578:	40014000 	.word	0x40014000

0800d57c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800d57c:	b480      	push	{r7}
 800d57e:	b083      	sub	sp, #12
 800d580:	af00      	add	r7, sp, #0
 800d582:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800d584:	bf00      	nop
 800d586:	370c      	adds	r7, #12
 800d588:	46bd      	mov	sp, r7
 800d58a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d58e:	4770      	bx	lr

0800d590 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800d590:	b480      	push	{r7}
 800d592:	b083      	sub	sp, #12
 800d594:	af00      	add	r7, sp, #0
 800d596:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800d598:	bf00      	nop
 800d59a:	370c      	adds	r7, #12
 800d59c:	46bd      	mov	sp, r7
 800d59e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5a2:	4770      	bx	lr

0800d5a4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800d5a4:	b480      	push	{r7}
 800d5a6:	b083      	sub	sp, #12
 800d5a8:	af00      	add	r7, sp, #0
 800d5aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800d5ac:	bf00      	nop
 800d5ae:	370c      	adds	r7, #12
 800d5b0:	46bd      	mov	sp, r7
 800d5b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5b6:	4770      	bx	lr

0800d5b8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800d5b8:	b580      	push	{r7, lr}
 800d5ba:	b082      	sub	sp, #8
 800d5bc:	af00      	add	r7, sp, #0
 800d5be:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800d5c0:	687b      	ldr	r3, [r7, #4]
 800d5c2:	2b00      	cmp	r3, #0
 800d5c4:	d101      	bne.n	800d5ca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800d5c6:	2301      	movs	r3, #1
 800d5c8:	e042      	b.n	800d650 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800d5ca:	687b      	ldr	r3, [r7, #4]
 800d5cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d5d0:	2b00      	cmp	r3, #0
 800d5d2:	d106      	bne.n	800d5e2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800d5d4:	687b      	ldr	r3, [r7, #4]
 800d5d6:	2200      	movs	r2, #0
 800d5d8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800d5dc:	6878      	ldr	r0, [r7, #4]
 800d5de:	f7f6 fb8b 	bl	8003cf8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800d5e2:	687b      	ldr	r3, [r7, #4]
 800d5e4:	2224      	movs	r2, #36	; 0x24
 800d5e6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800d5ea:	687b      	ldr	r3, [r7, #4]
 800d5ec:	681b      	ldr	r3, [r3, #0]
 800d5ee:	681a      	ldr	r2, [r3, #0]
 800d5f0:	687b      	ldr	r3, [r7, #4]
 800d5f2:	681b      	ldr	r3, [r3, #0]
 800d5f4:	f022 0201 	bic.w	r2, r2, #1
 800d5f8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800d5fa:	6878      	ldr	r0, [r7, #4]
 800d5fc:	f000 f8c2 	bl	800d784 <UART_SetConfig>
 800d600:	4603      	mov	r3, r0
 800d602:	2b01      	cmp	r3, #1
 800d604:	d101      	bne.n	800d60a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800d606:	2301      	movs	r3, #1
 800d608:	e022      	b.n	800d650 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800d60a:	687b      	ldr	r3, [r7, #4]
 800d60c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d60e:	2b00      	cmp	r3, #0
 800d610:	d002      	beq.n	800d618 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800d612:	6878      	ldr	r0, [r7, #4]
 800d614:	f000 fe1e 	bl	800e254 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800d618:	687b      	ldr	r3, [r7, #4]
 800d61a:	681b      	ldr	r3, [r3, #0]
 800d61c:	685a      	ldr	r2, [r3, #4]
 800d61e:	687b      	ldr	r3, [r7, #4]
 800d620:	681b      	ldr	r3, [r3, #0]
 800d622:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800d626:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800d628:	687b      	ldr	r3, [r7, #4]
 800d62a:	681b      	ldr	r3, [r3, #0]
 800d62c:	689a      	ldr	r2, [r3, #8]
 800d62e:	687b      	ldr	r3, [r7, #4]
 800d630:	681b      	ldr	r3, [r3, #0]
 800d632:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800d636:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800d638:	687b      	ldr	r3, [r7, #4]
 800d63a:	681b      	ldr	r3, [r3, #0]
 800d63c:	681a      	ldr	r2, [r3, #0]
 800d63e:	687b      	ldr	r3, [r7, #4]
 800d640:	681b      	ldr	r3, [r3, #0]
 800d642:	f042 0201 	orr.w	r2, r2, #1
 800d646:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800d648:	6878      	ldr	r0, [r7, #4]
 800d64a:	f000 fea5 	bl	800e398 <UART_CheckIdleState>
 800d64e:	4603      	mov	r3, r0
}
 800d650:	4618      	mov	r0, r3
 800d652:	3708      	adds	r7, #8
 800d654:	46bd      	mov	sp, r7
 800d656:	bd80      	pop	{r7, pc}

0800d658 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800d658:	b580      	push	{r7, lr}
 800d65a:	b08a      	sub	sp, #40	; 0x28
 800d65c:	af02      	add	r7, sp, #8
 800d65e:	60f8      	str	r0, [r7, #12]
 800d660:	60b9      	str	r1, [r7, #8]
 800d662:	603b      	str	r3, [r7, #0]
 800d664:	4613      	mov	r3, r2
 800d666:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800d668:	68fb      	ldr	r3, [r7, #12]
 800d66a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d66e:	2b20      	cmp	r3, #32
 800d670:	f040 8083 	bne.w	800d77a <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 800d674:	68bb      	ldr	r3, [r7, #8]
 800d676:	2b00      	cmp	r3, #0
 800d678:	d002      	beq.n	800d680 <HAL_UART_Transmit+0x28>
 800d67a:	88fb      	ldrh	r3, [r7, #6]
 800d67c:	2b00      	cmp	r3, #0
 800d67e:	d101      	bne.n	800d684 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800d680:	2301      	movs	r3, #1
 800d682:	e07b      	b.n	800d77c <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 800d684:	68fb      	ldr	r3, [r7, #12]
 800d686:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800d68a:	2b01      	cmp	r3, #1
 800d68c:	d101      	bne.n	800d692 <HAL_UART_Transmit+0x3a>
 800d68e:	2302      	movs	r3, #2
 800d690:	e074      	b.n	800d77c <HAL_UART_Transmit+0x124>
 800d692:	68fb      	ldr	r3, [r7, #12]
 800d694:	2201      	movs	r2, #1
 800d696:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d69a:	68fb      	ldr	r3, [r7, #12]
 800d69c:	2200      	movs	r2, #0
 800d69e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800d6a2:	68fb      	ldr	r3, [r7, #12]
 800d6a4:	2221      	movs	r2, #33	; 0x21
 800d6a6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800d6aa:	f7f6 fe95 	bl	80043d8 <HAL_GetTick>
 800d6ae:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800d6b0:	68fb      	ldr	r3, [r7, #12]
 800d6b2:	88fa      	ldrh	r2, [r7, #6]
 800d6b4:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800d6b8:	68fb      	ldr	r3, [r7, #12]
 800d6ba:	88fa      	ldrh	r2, [r7, #6]
 800d6bc:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d6c0:	68fb      	ldr	r3, [r7, #12]
 800d6c2:	689b      	ldr	r3, [r3, #8]
 800d6c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d6c8:	d108      	bne.n	800d6dc <HAL_UART_Transmit+0x84>
 800d6ca:	68fb      	ldr	r3, [r7, #12]
 800d6cc:	691b      	ldr	r3, [r3, #16]
 800d6ce:	2b00      	cmp	r3, #0
 800d6d0:	d104      	bne.n	800d6dc <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800d6d2:	2300      	movs	r3, #0
 800d6d4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800d6d6:	68bb      	ldr	r3, [r7, #8]
 800d6d8:	61bb      	str	r3, [r7, #24]
 800d6da:	e003      	b.n	800d6e4 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 800d6dc:	68bb      	ldr	r3, [r7, #8]
 800d6de:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800d6e0:	2300      	movs	r3, #0
 800d6e2:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800d6e4:	68fb      	ldr	r3, [r7, #12]
 800d6e6:	2200      	movs	r2, #0
 800d6e8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 800d6ec:	e02c      	b.n	800d748 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800d6ee:	683b      	ldr	r3, [r7, #0]
 800d6f0:	9300      	str	r3, [sp, #0]
 800d6f2:	697b      	ldr	r3, [r7, #20]
 800d6f4:	2200      	movs	r2, #0
 800d6f6:	2180      	movs	r1, #128	; 0x80
 800d6f8:	68f8      	ldr	r0, [r7, #12]
 800d6fa:	f000 fe98 	bl	800e42e <UART_WaitOnFlagUntilTimeout>
 800d6fe:	4603      	mov	r3, r0
 800d700:	2b00      	cmp	r3, #0
 800d702:	d001      	beq.n	800d708 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 800d704:	2303      	movs	r3, #3
 800d706:	e039      	b.n	800d77c <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 800d708:	69fb      	ldr	r3, [r7, #28]
 800d70a:	2b00      	cmp	r3, #0
 800d70c:	d10b      	bne.n	800d726 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800d70e:	69bb      	ldr	r3, [r7, #24]
 800d710:	881b      	ldrh	r3, [r3, #0]
 800d712:	461a      	mov	r2, r3
 800d714:	68fb      	ldr	r3, [r7, #12]
 800d716:	681b      	ldr	r3, [r3, #0]
 800d718:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800d71c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800d71e:	69bb      	ldr	r3, [r7, #24]
 800d720:	3302      	adds	r3, #2
 800d722:	61bb      	str	r3, [r7, #24]
 800d724:	e007      	b.n	800d736 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800d726:	69fb      	ldr	r3, [r7, #28]
 800d728:	781a      	ldrb	r2, [r3, #0]
 800d72a:	68fb      	ldr	r3, [r7, #12]
 800d72c:	681b      	ldr	r3, [r3, #0]
 800d72e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800d730:	69fb      	ldr	r3, [r7, #28]
 800d732:	3301      	adds	r3, #1
 800d734:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800d736:	68fb      	ldr	r3, [r7, #12]
 800d738:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800d73c:	b29b      	uxth	r3, r3
 800d73e:	3b01      	subs	r3, #1
 800d740:	b29a      	uxth	r2, r3
 800d742:	68fb      	ldr	r3, [r7, #12]
 800d744:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800d748:	68fb      	ldr	r3, [r7, #12]
 800d74a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800d74e:	b29b      	uxth	r3, r3
 800d750:	2b00      	cmp	r3, #0
 800d752:	d1cc      	bne.n	800d6ee <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800d754:	683b      	ldr	r3, [r7, #0]
 800d756:	9300      	str	r3, [sp, #0]
 800d758:	697b      	ldr	r3, [r7, #20]
 800d75a:	2200      	movs	r2, #0
 800d75c:	2140      	movs	r1, #64	; 0x40
 800d75e:	68f8      	ldr	r0, [r7, #12]
 800d760:	f000 fe65 	bl	800e42e <UART_WaitOnFlagUntilTimeout>
 800d764:	4603      	mov	r3, r0
 800d766:	2b00      	cmp	r3, #0
 800d768:	d001      	beq.n	800d76e <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 800d76a:	2303      	movs	r3, #3
 800d76c:	e006      	b.n	800d77c <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800d76e:	68fb      	ldr	r3, [r7, #12]
 800d770:	2220      	movs	r2, #32
 800d772:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 800d776:	2300      	movs	r3, #0
 800d778:	e000      	b.n	800d77c <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 800d77a:	2302      	movs	r3, #2
  }
}
 800d77c:	4618      	mov	r0, r3
 800d77e:	3720      	adds	r7, #32
 800d780:	46bd      	mov	sp, r7
 800d782:	bd80      	pop	{r7, pc}

0800d784 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800d784:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800d788:	b092      	sub	sp, #72	; 0x48
 800d78a:	af00      	add	r7, sp, #0
 800d78c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800d78e:	2300      	movs	r3, #0
 800d790:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800d794:	697b      	ldr	r3, [r7, #20]
 800d796:	689a      	ldr	r2, [r3, #8]
 800d798:	697b      	ldr	r3, [r7, #20]
 800d79a:	691b      	ldr	r3, [r3, #16]
 800d79c:	431a      	orrs	r2, r3
 800d79e:	697b      	ldr	r3, [r7, #20]
 800d7a0:	695b      	ldr	r3, [r3, #20]
 800d7a2:	431a      	orrs	r2, r3
 800d7a4:	697b      	ldr	r3, [r7, #20]
 800d7a6:	69db      	ldr	r3, [r3, #28]
 800d7a8:	4313      	orrs	r3, r2
 800d7aa:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800d7ac:	697b      	ldr	r3, [r7, #20]
 800d7ae:	681b      	ldr	r3, [r3, #0]
 800d7b0:	681a      	ldr	r2, [r3, #0]
 800d7b2:	4bbe      	ldr	r3, [pc, #760]	; (800daac <UART_SetConfig+0x328>)
 800d7b4:	4013      	ands	r3, r2
 800d7b6:	697a      	ldr	r2, [r7, #20]
 800d7b8:	6812      	ldr	r2, [r2, #0]
 800d7ba:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800d7bc:	430b      	orrs	r3, r1
 800d7be:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800d7c0:	697b      	ldr	r3, [r7, #20]
 800d7c2:	681b      	ldr	r3, [r3, #0]
 800d7c4:	685b      	ldr	r3, [r3, #4]
 800d7c6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800d7ca:	697b      	ldr	r3, [r7, #20]
 800d7cc:	68da      	ldr	r2, [r3, #12]
 800d7ce:	697b      	ldr	r3, [r7, #20]
 800d7d0:	681b      	ldr	r3, [r3, #0]
 800d7d2:	430a      	orrs	r2, r1
 800d7d4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800d7d6:	697b      	ldr	r3, [r7, #20]
 800d7d8:	699b      	ldr	r3, [r3, #24]
 800d7da:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800d7dc:	697b      	ldr	r3, [r7, #20]
 800d7de:	681b      	ldr	r3, [r3, #0]
 800d7e0:	4ab3      	ldr	r2, [pc, #716]	; (800dab0 <UART_SetConfig+0x32c>)
 800d7e2:	4293      	cmp	r3, r2
 800d7e4:	d004      	beq.n	800d7f0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800d7e6:	697b      	ldr	r3, [r7, #20]
 800d7e8:	6a1b      	ldr	r3, [r3, #32]
 800d7ea:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d7ec:	4313      	orrs	r3, r2
 800d7ee:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800d7f0:	697b      	ldr	r3, [r7, #20]
 800d7f2:	681b      	ldr	r3, [r3, #0]
 800d7f4:	689a      	ldr	r2, [r3, #8]
 800d7f6:	4baf      	ldr	r3, [pc, #700]	; (800dab4 <UART_SetConfig+0x330>)
 800d7f8:	4013      	ands	r3, r2
 800d7fa:	697a      	ldr	r2, [r7, #20]
 800d7fc:	6812      	ldr	r2, [r2, #0]
 800d7fe:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800d800:	430b      	orrs	r3, r1
 800d802:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800d804:	697b      	ldr	r3, [r7, #20]
 800d806:	681b      	ldr	r3, [r3, #0]
 800d808:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d80a:	f023 010f 	bic.w	r1, r3, #15
 800d80e:	697b      	ldr	r3, [r7, #20]
 800d810:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d812:	697b      	ldr	r3, [r7, #20]
 800d814:	681b      	ldr	r3, [r3, #0]
 800d816:	430a      	orrs	r2, r1
 800d818:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800d81a:	697b      	ldr	r3, [r7, #20]
 800d81c:	681b      	ldr	r3, [r3, #0]
 800d81e:	4aa6      	ldr	r2, [pc, #664]	; (800dab8 <UART_SetConfig+0x334>)
 800d820:	4293      	cmp	r3, r2
 800d822:	d177      	bne.n	800d914 <UART_SetConfig+0x190>
 800d824:	4ba5      	ldr	r3, [pc, #660]	; (800dabc <UART_SetConfig+0x338>)
 800d826:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d828:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800d82c:	2b28      	cmp	r3, #40	; 0x28
 800d82e:	d86d      	bhi.n	800d90c <UART_SetConfig+0x188>
 800d830:	a201      	add	r2, pc, #4	; (adr r2, 800d838 <UART_SetConfig+0xb4>)
 800d832:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d836:	bf00      	nop
 800d838:	0800d8dd 	.word	0x0800d8dd
 800d83c:	0800d90d 	.word	0x0800d90d
 800d840:	0800d90d 	.word	0x0800d90d
 800d844:	0800d90d 	.word	0x0800d90d
 800d848:	0800d90d 	.word	0x0800d90d
 800d84c:	0800d90d 	.word	0x0800d90d
 800d850:	0800d90d 	.word	0x0800d90d
 800d854:	0800d90d 	.word	0x0800d90d
 800d858:	0800d8e5 	.word	0x0800d8e5
 800d85c:	0800d90d 	.word	0x0800d90d
 800d860:	0800d90d 	.word	0x0800d90d
 800d864:	0800d90d 	.word	0x0800d90d
 800d868:	0800d90d 	.word	0x0800d90d
 800d86c:	0800d90d 	.word	0x0800d90d
 800d870:	0800d90d 	.word	0x0800d90d
 800d874:	0800d90d 	.word	0x0800d90d
 800d878:	0800d8ed 	.word	0x0800d8ed
 800d87c:	0800d90d 	.word	0x0800d90d
 800d880:	0800d90d 	.word	0x0800d90d
 800d884:	0800d90d 	.word	0x0800d90d
 800d888:	0800d90d 	.word	0x0800d90d
 800d88c:	0800d90d 	.word	0x0800d90d
 800d890:	0800d90d 	.word	0x0800d90d
 800d894:	0800d90d 	.word	0x0800d90d
 800d898:	0800d8f5 	.word	0x0800d8f5
 800d89c:	0800d90d 	.word	0x0800d90d
 800d8a0:	0800d90d 	.word	0x0800d90d
 800d8a4:	0800d90d 	.word	0x0800d90d
 800d8a8:	0800d90d 	.word	0x0800d90d
 800d8ac:	0800d90d 	.word	0x0800d90d
 800d8b0:	0800d90d 	.word	0x0800d90d
 800d8b4:	0800d90d 	.word	0x0800d90d
 800d8b8:	0800d8fd 	.word	0x0800d8fd
 800d8bc:	0800d90d 	.word	0x0800d90d
 800d8c0:	0800d90d 	.word	0x0800d90d
 800d8c4:	0800d90d 	.word	0x0800d90d
 800d8c8:	0800d90d 	.word	0x0800d90d
 800d8cc:	0800d90d 	.word	0x0800d90d
 800d8d0:	0800d90d 	.word	0x0800d90d
 800d8d4:	0800d90d 	.word	0x0800d90d
 800d8d8:	0800d905 	.word	0x0800d905
 800d8dc:	2301      	movs	r3, #1
 800d8de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d8e2:	e222      	b.n	800dd2a <UART_SetConfig+0x5a6>
 800d8e4:	2304      	movs	r3, #4
 800d8e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d8ea:	e21e      	b.n	800dd2a <UART_SetConfig+0x5a6>
 800d8ec:	2308      	movs	r3, #8
 800d8ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d8f2:	e21a      	b.n	800dd2a <UART_SetConfig+0x5a6>
 800d8f4:	2310      	movs	r3, #16
 800d8f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d8fa:	e216      	b.n	800dd2a <UART_SetConfig+0x5a6>
 800d8fc:	2320      	movs	r3, #32
 800d8fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d902:	e212      	b.n	800dd2a <UART_SetConfig+0x5a6>
 800d904:	2340      	movs	r3, #64	; 0x40
 800d906:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d90a:	e20e      	b.n	800dd2a <UART_SetConfig+0x5a6>
 800d90c:	2380      	movs	r3, #128	; 0x80
 800d90e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d912:	e20a      	b.n	800dd2a <UART_SetConfig+0x5a6>
 800d914:	697b      	ldr	r3, [r7, #20]
 800d916:	681b      	ldr	r3, [r3, #0]
 800d918:	4a69      	ldr	r2, [pc, #420]	; (800dac0 <UART_SetConfig+0x33c>)
 800d91a:	4293      	cmp	r3, r2
 800d91c:	d130      	bne.n	800d980 <UART_SetConfig+0x1fc>
 800d91e:	4b67      	ldr	r3, [pc, #412]	; (800dabc <UART_SetConfig+0x338>)
 800d920:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d922:	f003 0307 	and.w	r3, r3, #7
 800d926:	2b05      	cmp	r3, #5
 800d928:	d826      	bhi.n	800d978 <UART_SetConfig+0x1f4>
 800d92a:	a201      	add	r2, pc, #4	; (adr r2, 800d930 <UART_SetConfig+0x1ac>)
 800d92c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d930:	0800d949 	.word	0x0800d949
 800d934:	0800d951 	.word	0x0800d951
 800d938:	0800d959 	.word	0x0800d959
 800d93c:	0800d961 	.word	0x0800d961
 800d940:	0800d969 	.word	0x0800d969
 800d944:	0800d971 	.word	0x0800d971
 800d948:	2300      	movs	r3, #0
 800d94a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d94e:	e1ec      	b.n	800dd2a <UART_SetConfig+0x5a6>
 800d950:	2304      	movs	r3, #4
 800d952:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d956:	e1e8      	b.n	800dd2a <UART_SetConfig+0x5a6>
 800d958:	2308      	movs	r3, #8
 800d95a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d95e:	e1e4      	b.n	800dd2a <UART_SetConfig+0x5a6>
 800d960:	2310      	movs	r3, #16
 800d962:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d966:	e1e0      	b.n	800dd2a <UART_SetConfig+0x5a6>
 800d968:	2320      	movs	r3, #32
 800d96a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d96e:	e1dc      	b.n	800dd2a <UART_SetConfig+0x5a6>
 800d970:	2340      	movs	r3, #64	; 0x40
 800d972:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d976:	e1d8      	b.n	800dd2a <UART_SetConfig+0x5a6>
 800d978:	2380      	movs	r3, #128	; 0x80
 800d97a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d97e:	e1d4      	b.n	800dd2a <UART_SetConfig+0x5a6>
 800d980:	697b      	ldr	r3, [r7, #20]
 800d982:	681b      	ldr	r3, [r3, #0]
 800d984:	4a4f      	ldr	r2, [pc, #316]	; (800dac4 <UART_SetConfig+0x340>)
 800d986:	4293      	cmp	r3, r2
 800d988:	d130      	bne.n	800d9ec <UART_SetConfig+0x268>
 800d98a:	4b4c      	ldr	r3, [pc, #304]	; (800dabc <UART_SetConfig+0x338>)
 800d98c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d98e:	f003 0307 	and.w	r3, r3, #7
 800d992:	2b05      	cmp	r3, #5
 800d994:	d826      	bhi.n	800d9e4 <UART_SetConfig+0x260>
 800d996:	a201      	add	r2, pc, #4	; (adr r2, 800d99c <UART_SetConfig+0x218>)
 800d998:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d99c:	0800d9b5 	.word	0x0800d9b5
 800d9a0:	0800d9bd 	.word	0x0800d9bd
 800d9a4:	0800d9c5 	.word	0x0800d9c5
 800d9a8:	0800d9cd 	.word	0x0800d9cd
 800d9ac:	0800d9d5 	.word	0x0800d9d5
 800d9b0:	0800d9dd 	.word	0x0800d9dd
 800d9b4:	2300      	movs	r3, #0
 800d9b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d9ba:	e1b6      	b.n	800dd2a <UART_SetConfig+0x5a6>
 800d9bc:	2304      	movs	r3, #4
 800d9be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d9c2:	e1b2      	b.n	800dd2a <UART_SetConfig+0x5a6>
 800d9c4:	2308      	movs	r3, #8
 800d9c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d9ca:	e1ae      	b.n	800dd2a <UART_SetConfig+0x5a6>
 800d9cc:	2310      	movs	r3, #16
 800d9ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d9d2:	e1aa      	b.n	800dd2a <UART_SetConfig+0x5a6>
 800d9d4:	2320      	movs	r3, #32
 800d9d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d9da:	e1a6      	b.n	800dd2a <UART_SetConfig+0x5a6>
 800d9dc:	2340      	movs	r3, #64	; 0x40
 800d9de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d9e2:	e1a2      	b.n	800dd2a <UART_SetConfig+0x5a6>
 800d9e4:	2380      	movs	r3, #128	; 0x80
 800d9e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d9ea:	e19e      	b.n	800dd2a <UART_SetConfig+0x5a6>
 800d9ec:	697b      	ldr	r3, [r7, #20]
 800d9ee:	681b      	ldr	r3, [r3, #0]
 800d9f0:	4a35      	ldr	r2, [pc, #212]	; (800dac8 <UART_SetConfig+0x344>)
 800d9f2:	4293      	cmp	r3, r2
 800d9f4:	d130      	bne.n	800da58 <UART_SetConfig+0x2d4>
 800d9f6:	4b31      	ldr	r3, [pc, #196]	; (800dabc <UART_SetConfig+0x338>)
 800d9f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d9fa:	f003 0307 	and.w	r3, r3, #7
 800d9fe:	2b05      	cmp	r3, #5
 800da00:	d826      	bhi.n	800da50 <UART_SetConfig+0x2cc>
 800da02:	a201      	add	r2, pc, #4	; (adr r2, 800da08 <UART_SetConfig+0x284>)
 800da04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800da08:	0800da21 	.word	0x0800da21
 800da0c:	0800da29 	.word	0x0800da29
 800da10:	0800da31 	.word	0x0800da31
 800da14:	0800da39 	.word	0x0800da39
 800da18:	0800da41 	.word	0x0800da41
 800da1c:	0800da49 	.word	0x0800da49
 800da20:	2300      	movs	r3, #0
 800da22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800da26:	e180      	b.n	800dd2a <UART_SetConfig+0x5a6>
 800da28:	2304      	movs	r3, #4
 800da2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800da2e:	e17c      	b.n	800dd2a <UART_SetConfig+0x5a6>
 800da30:	2308      	movs	r3, #8
 800da32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800da36:	e178      	b.n	800dd2a <UART_SetConfig+0x5a6>
 800da38:	2310      	movs	r3, #16
 800da3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800da3e:	e174      	b.n	800dd2a <UART_SetConfig+0x5a6>
 800da40:	2320      	movs	r3, #32
 800da42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800da46:	e170      	b.n	800dd2a <UART_SetConfig+0x5a6>
 800da48:	2340      	movs	r3, #64	; 0x40
 800da4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800da4e:	e16c      	b.n	800dd2a <UART_SetConfig+0x5a6>
 800da50:	2380      	movs	r3, #128	; 0x80
 800da52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800da56:	e168      	b.n	800dd2a <UART_SetConfig+0x5a6>
 800da58:	697b      	ldr	r3, [r7, #20]
 800da5a:	681b      	ldr	r3, [r3, #0]
 800da5c:	4a1b      	ldr	r2, [pc, #108]	; (800dacc <UART_SetConfig+0x348>)
 800da5e:	4293      	cmp	r3, r2
 800da60:	d142      	bne.n	800dae8 <UART_SetConfig+0x364>
 800da62:	4b16      	ldr	r3, [pc, #88]	; (800dabc <UART_SetConfig+0x338>)
 800da64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800da66:	f003 0307 	and.w	r3, r3, #7
 800da6a:	2b05      	cmp	r3, #5
 800da6c:	d838      	bhi.n	800dae0 <UART_SetConfig+0x35c>
 800da6e:	a201      	add	r2, pc, #4	; (adr r2, 800da74 <UART_SetConfig+0x2f0>)
 800da70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800da74:	0800da8d 	.word	0x0800da8d
 800da78:	0800da95 	.word	0x0800da95
 800da7c:	0800da9d 	.word	0x0800da9d
 800da80:	0800daa5 	.word	0x0800daa5
 800da84:	0800dad1 	.word	0x0800dad1
 800da88:	0800dad9 	.word	0x0800dad9
 800da8c:	2300      	movs	r3, #0
 800da8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800da92:	e14a      	b.n	800dd2a <UART_SetConfig+0x5a6>
 800da94:	2304      	movs	r3, #4
 800da96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800da9a:	e146      	b.n	800dd2a <UART_SetConfig+0x5a6>
 800da9c:	2308      	movs	r3, #8
 800da9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800daa2:	e142      	b.n	800dd2a <UART_SetConfig+0x5a6>
 800daa4:	2310      	movs	r3, #16
 800daa6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800daaa:	e13e      	b.n	800dd2a <UART_SetConfig+0x5a6>
 800daac:	cfff69f3 	.word	0xcfff69f3
 800dab0:	58000c00 	.word	0x58000c00
 800dab4:	11fff4ff 	.word	0x11fff4ff
 800dab8:	40011000 	.word	0x40011000
 800dabc:	58024400 	.word	0x58024400
 800dac0:	40004400 	.word	0x40004400
 800dac4:	40004800 	.word	0x40004800
 800dac8:	40004c00 	.word	0x40004c00
 800dacc:	40005000 	.word	0x40005000
 800dad0:	2320      	movs	r3, #32
 800dad2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dad6:	e128      	b.n	800dd2a <UART_SetConfig+0x5a6>
 800dad8:	2340      	movs	r3, #64	; 0x40
 800dada:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dade:	e124      	b.n	800dd2a <UART_SetConfig+0x5a6>
 800dae0:	2380      	movs	r3, #128	; 0x80
 800dae2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dae6:	e120      	b.n	800dd2a <UART_SetConfig+0x5a6>
 800dae8:	697b      	ldr	r3, [r7, #20]
 800daea:	681b      	ldr	r3, [r3, #0]
 800daec:	4acb      	ldr	r2, [pc, #812]	; (800de1c <UART_SetConfig+0x698>)
 800daee:	4293      	cmp	r3, r2
 800daf0:	d176      	bne.n	800dbe0 <UART_SetConfig+0x45c>
 800daf2:	4bcb      	ldr	r3, [pc, #812]	; (800de20 <UART_SetConfig+0x69c>)
 800daf4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800daf6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800dafa:	2b28      	cmp	r3, #40	; 0x28
 800dafc:	d86c      	bhi.n	800dbd8 <UART_SetConfig+0x454>
 800dafe:	a201      	add	r2, pc, #4	; (adr r2, 800db04 <UART_SetConfig+0x380>)
 800db00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800db04:	0800dba9 	.word	0x0800dba9
 800db08:	0800dbd9 	.word	0x0800dbd9
 800db0c:	0800dbd9 	.word	0x0800dbd9
 800db10:	0800dbd9 	.word	0x0800dbd9
 800db14:	0800dbd9 	.word	0x0800dbd9
 800db18:	0800dbd9 	.word	0x0800dbd9
 800db1c:	0800dbd9 	.word	0x0800dbd9
 800db20:	0800dbd9 	.word	0x0800dbd9
 800db24:	0800dbb1 	.word	0x0800dbb1
 800db28:	0800dbd9 	.word	0x0800dbd9
 800db2c:	0800dbd9 	.word	0x0800dbd9
 800db30:	0800dbd9 	.word	0x0800dbd9
 800db34:	0800dbd9 	.word	0x0800dbd9
 800db38:	0800dbd9 	.word	0x0800dbd9
 800db3c:	0800dbd9 	.word	0x0800dbd9
 800db40:	0800dbd9 	.word	0x0800dbd9
 800db44:	0800dbb9 	.word	0x0800dbb9
 800db48:	0800dbd9 	.word	0x0800dbd9
 800db4c:	0800dbd9 	.word	0x0800dbd9
 800db50:	0800dbd9 	.word	0x0800dbd9
 800db54:	0800dbd9 	.word	0x0800dbd9
 800db58:	0800dbd9 	.word	0x0800dbd9
 800db5c:	0800dbd9 	.word	0x0800dbd9
 800db60:	0800dbd9 	.word	0x0800dbd9
 800db64:	0800dbc1 	.word	0x0800dbc1
 800db68:	0800dbd9 	.word	0x0800dbd9
 800db6c:	0800dbd9 	.word	0x0800dbd9
 800db70:	0800dbd9 	.word	0x0800dbd9
 800db74:	0800dbd9 	.word	0x0800dbd9
 800db78:	0800dbd9 	.word	0x0800dbd9
 800db7c:	0800dbd9 	.word	0x0800dbd9
 800db80:	0800dbd9 	.word	0x0800dbd9
 800db84:	0800dbc9 	.word	0x0800dbc9
 800db88:	0800dbd9 	.word	0x0800dbd9
 800db8c:	0800dbd9 	.word	0x0800dbd9
 800db90:	0800dbd9 	.word	0x0800dbd9
 800db94:	0800dbd9 	.word	0x0800dbd9
 800db98:	0800dbd9 	.word	0x0800dbd9
 800db9c:	0800dbd9 	.word	0x0800dbd9
 800dba0:	0800dbd9 	.word	0x0800dbd9
 800dba4:	0800dbd1 	.word	0x0800dbd1
 800dba8:	2301      	movs	r3, #1
 800dbaa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dbae:	e0bc      	b.n	800dd2a <UART_SetConfig+0x5a6>
 800dbb0:	2304      	movs	r3, #4
 800dbb2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dbb6:	e0b8      	b.n	800dd2a <UART_SetConfig+0x5a6>
 800dbb8:	2308      	movs	r3, #8
 800dbba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dbbe:	e0b4      	b.n	800dd2a <UART_SetConfig+0x5a6>
 800dbc0:	2310      	movs	r3, #16
 800dbc2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dbc6:	e0b0      	b.n	800dd2a <UART_SetConfig+0x5a6>
 800dbc8:	2320      	movs	r3, #32
 800dbca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dbce:	e0ac      	b.n	800dd2a <UART_SetConfig+0x5a6>
 800dbd0:	2340      	movs	r3, #64	; 0x40
 800dbd2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dbd6:	e0a8      	b.n	800dd2a <UART_SetConfig+0x5a6>
 800dbd8:	2380      	movs	r3, #128	; 0x80
 800dbda:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dbde:	e0a4      	b.n	800dd2a <UART_SetConfig+0x5a6>
 800dbe0:	697b      	ldr	r3, [r7, #20]
 800dbe2:	681b      	ldr	r3, [r3, #0]
 800dbe4:	4a8f      	ldr	r2, [pc, #572]	; (800de24 <UART_SetConfig+0x6a0>)
 800dbe6:	4293      	cmp	r3, r2
 800dbe8:	d130      	bne.n	800dc4c <UART_SetConfig+0x4c8>
 800dbea:	4b8d      	ldr	r3, [pc, #564]	; (800de20 <UART_SetConfig+0x69c>)
 800dbec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dbee:	f003 0307 	and.w	r3, r3, #7
 800dbf2:	2b05      	cmp	r3, #5
 800dbf4:	d826      	bhi.n	800dc44 <UART_SetConfig+0x4c0>
 800dbf6:	a201      	add	r2, pc, #4	; (adr r2, 800dbfc <UART_SetConfig+0x478>)
 800dbf8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dbfc:	0800dc15 	.word	0x0800dc15
 800dc00:	0800dc1d 	.word	0x0800dc1d
 800dc04:	0800dc25 	.word	0x0800dc25
 800dc08:	0800dc2d 	.word	0x0800dc2d
 800dc0c:	0800dc35 	.word	0x0800dc35
 800dc10:	0800dc3d 	.word	0x0800dc3d
 800dc14:	2300      	movs	r3, #0
 800dc16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dc1a:	e086      	b.n	800dd2a <UART_SetConfig+0x5a6>
 800dc1c:	2304      	movs	r3, #4
 800dc1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dc22:	e082      	b.n	800dd2a <UART_SetConfig+0x5a6>
 800dc24:	2308      	movs	r3, #8
 800dc26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dc2a:	e07e      	b.n	800dd2a <UART_SetConfig+0x5a6>
 800dc2c:	2310      	movs	r3, #16
 800dc2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dc32:	e07a      	b.n	800dd2a <UART_SetConfig+0x5a6>
 800dc34:	2320      	movs	r3, #32
 800dc36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dc3a:	e076      	b.n	800dd2a <UART_SetConfig+0x5a6>
 800dc3c:	2340      	movs	r3, #64	; 0x40
 800dc3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dc42:	e072      	b.n	800dd2a <UART_SetConfig+0x5a6>
 800dc44:	2380      	movs	r3, #128	; 0x80
 800dc46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dc4a:	e06e      	b.n	800dd2a <UART_SetConfig+0x5a6>
 800dc4c:	697b      	ldr	r3, [r7, #20]
 800dc4e:	681b      	ldr	r3, [r3, #0]
 800dc50:	4a75      	ldr	r2, [pc, #468]	; (800de28 <UART_SetConfig+0x6a4>)
 800dc52:	4293      	cmp	r3, r2
 800dc54:	d130      	bne.n	800dcb8 <UART_SetConfig+0x534>
 800dc56:	4b72      	ldr	r3, [pc, #456]	; (800de20 <UART_SetConfig+0x69c>)
 800dc58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dc5a:	f003 0307 	and.w	r3, r3, #7
 800dc5e:	2b05      	cmp	r3, #5
 800dc60:	d826      	bhi.n	800dcb0 <UART_SetConfig+0x52c>
 800dc62:	a201      	add	r2, pc, #4	; (adr r2, 800dc68 <UART_SetConfig+0x4e4>)
 800dc64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dc68:	0800dc81 	.word	0x0800dc81
 800dc6c:	0800dc89 	.word	0x0800dc89
 800dc70:	0800dc91 	.word	0x0800dc91
 800dc74:	0800dc99 	.word	0x0800dc99
 800dc78:	0800dca1 	.word	0x0800dca1
 800dc7c:	0800dca9 	.word	0x0800dca9
 800dc80:	2300      	movs	r3, #0
 800dc82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dc86:	e050      	b.n	800dd2a <UART_SetConfig+0x5a6>
 800dc88:	2304      	movs	r3, #4
 800dc8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dc8e:	e04c      	b.n	800dd2a <UART_SetConfig+0x5a6>
 800dc90:	2308      	movs	r3, #8
 800dc92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dc96:	e048      	b.n	800dd2a <UART_SetConfig+0x5a6>
 800dc98:	2310      	movs	r3, #16
 800dc9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dc9e:	e044      	b.n	800dd2a <UART_SetConfig+0x5a6>
 800dca0:	2320      	movs	r3, #32
 800dca2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dca6:	e040      	b.n	800dd2a <UART_SetConfig+0x5a6>
 800dca8:	2340      	movs	r3, #64	; 0x40
 800dcaa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dcae:	e03c      	b.n	800dd2a <UART_SetConfig+0x5a6>
 800dcb0:	2380      	movs	r3, #128	; 0x80
 800dcb2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dcb6:	e038      	b.n	800dd2a <UART_SetConfig+0x5a6>
 800dcb8:	697b      	ldr	r3, [r7, #20]
 800dcba:	681b      	ldr	r3, [r3, #0]
 800dcbc:	4a5b      	ldr	r2, [pc, #364]	; (800de2c <UART_SetConfig+0x6a8>)
 800dcbe:	4293      	cmp	r3, r2
 800dcc0:	d130      	bne.n	800dd24 <UART_SetConfig+0x5a0>
 800dcc2:	4b57      	ldr	r3, [pc, #348]	; (800de20 <UART_SetConfig+0x69c>)
 800dcc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800dcc6:	f003 0307 	and.w	r3, r3, #7
 800dcca:	2b05      	cmp	r3, #5
 800dccc:	d826      	bhi.n	800dd1c <UART_SetConfig+0x598>
 800dcce:	a201      	add	r2, pc, #4	; (adr r2, 800dcd4 <UART_SetConfig+0x550>)
 800dcd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dcd4:	0800dced 	.word	0x0800dced
 800dcd8:	0800dcf5 	.word	0x0800dcf5
 800dcdc:	0800dcfd 	.word	0x0800dcfd
 800dce0:	0800dd05 	.word	0x0800dd05
 800dce4:	0800dd0d 	.word	0x0800dd0d
 800dce8:	0800dd15 	.word	0x0800dd15
 800dcec:	2302      	movs	r3, #2
 800dcee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dcf2:	e01a      	b.n	800dd2a <UART_SetConfig+0x5a6>
 800dcf4:	2304      	movs	r3, #4
 800dcf6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dcfa:	e016      	b.n	800dd2a <UART_SetConfig+0x5a6>
 800dcfc:	2308      	movs	r3, #8
 800dcfe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dd02:	e012      	b.n	800dd2a <UART_SetConfig+0x5a6>
 800dd04:	2310      	movs	r3, #16
 800dd06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dd0a:	e00e      	b.n	800dd2a <UART_SetConfig+0x5a6>
 800dd0c:	2320      	movs	r3, #32
 800dd0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dd12:	e00a      	b.n	800dd2a <UART_SetConfig+0x5a6>
 800dd14:	2340      	movs	r3, #64	; 0x40
 800dd16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dd1a:	e006      	b.n	800dd2a <UART_SetConfig+0x5a6>
 800dd1c:	2380      	movs	r3, #128	; 0x80
 800dd1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dd22:	e002      	b.n	800dd2a <UART_SetConfig+0x5a6>
 800dd24:	2380      	movs	r3, #128	; 0x80
 800dd26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800dd2a:	697b      	ldr	r3, [r7, #20]
 800dd2c:	681b      	ldr	r3, [r3, #0]
 800dd2e:	4a3f      	ldr	r2, [pc, #252]	; (800de2c <UART_SetConfig+0x6a8>)
 800dd30:	4293      	cmp	r3, r2
 800dd32:	f040 80f8 	bne.w	800df26 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800dd36:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800dd3a:	2b20      	cmp	r3, #32
 800dd3c:	dc46      	bgt.n	800ddcc <UART_SetConfig+0x648>
 800dd3e:	2b02      	cmp	r3, #2
 800dd40:	f2c0 8082 	blt.w	800de48 <UART_SetConfig+0x6c4>
 800dd44:	3b02      	subs	r3, #2
 800dd46:	2b1e      	cmp	r3, #30
 800dd48:	d87e      	bhi.n	800de48 <UART_SetConfig+0x6c4>
 800dd4a:	a201      	add	r2, pc, #4	; (adr r2, 800dd50 <UART_SetConfig+0x5cc>)
 800dd4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dd50:	0800ddd3 	.word	0x0800ddd3
 800dd54:	0800de49 	.word	0x0800de49
 800dd58:	0800dddb 	.word	0x0800dddb
 800dd5c:	0800de49 	.word	0x0800de49
 800dd60:	0800de49 	.word	0x0800de49
 800dd64:	0800de49 	.word	0x0800de49
 800dd68:	0800ddeb 	.word	0x0800ddeb
 800dd6c:	0800de49 	.word	0x0800de49
 800dd70:	0800de49 	.word	0x0800de49
 800dd74:	0800de49 	.word	0x0800de49
 800dd78:	0800de49 	.word	0x0800de49
 800dd7c:	0800de49 	.word	0x0800de49
 800dd80:	0800de49 	.word	0x0800de49
 800dd84:	0800de49 	.word	0x0800de49
 800dd88:	0800ddfb 	.word	0x0800ddfb
 800dd8c:	0800de49 	.word	0x0800de49
 800dd90:	0800de49 	.word	0x0800de49
 800dd94:	0800de49 	.word	0x0800de49
 800dd98:	0800de49 	.word	0x0800de49
 800dd9c:	0800de49 	.word	0x0800de49
 800dda0:	0800de49 	.word	0x0800de49
 800dda4:	0800de49 	.word	0x0800de49
 800dda8:	0800de49 	.word	0x0800de49
 800ddac:	0800de49 	.word	0x0800de49
 800ddb0:	0800de49 	.word	0x0800de49
 800ddb4:	0800de49 	.word	0x0800de49
 800ddb8:	0800de49 	.word	0x0800de49
 800ddbc:	0800de49 	.word	0x0800de49
 800ddc0:	0800de49 	.word	0x0800de49
 800ddc4:	0800de49 	.word	0x0800de49
 800ddc8:	0800de3b 	.word	0x0800de3b
 800ddcc:	2b40      	cmp	r3, #64	; 0x40
 800ddce:	d037      	beq.n	800de40 <UART_SetConfig+0x6bc>
 800ddd0:	e03a      	b.n	800de48 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800ddd2:	f7fc fd4d 	bl	800a870 <HAL_RCCEx_GetD3PCLK1Freq>
 800ddd6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800ddd8:	e03c      	b.n	800de54 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ddda:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ddde:	4618      	mov	r0, r3
 800dde0:	f7fc fd5c 	bl	800a89c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800dde4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dde6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800dde8:	e034      	b.n	800de54 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ddea:	f107 0318 	add.w	r3, r7, #24
 800ddee:	4618      	mov	r0, r3
 800ddf0:	f7fc fea8 	bl	800ab44 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800ddf4:	69fb      	ldr	r3, [r7, #28]
 800ddf6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ddf8:	e02c      	b.n	800de54 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ddfa:	4b09      	ldr	r3, [pc, #36]	; (800de20 <UART_SetConfig+0x69c>)
 800ddfc:	681b      	ldr	r3, [r3, #0]
 800ddfe:	f003 0320 	and.w	r3, r3, #32
 800de02:	2b00      	cmp	r3, #0
 800de04:	d016      	beq.n	800de34 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800de06:	4b06      	ldr	r3, [pc, #24]	; (800de20 <UART_SetConfig+0x69c>)
 800de08:	681b      	ldr	r3, [r3, #0]
 800de0a:	08db      	lsrs	r3, r3, #3
 800de0c:	f003 0303 	and.w	r3, r3, #3
 800de10:	4a07      	ldr	r2, [pc, #28]	; (800de30 <UART_SetConfig+0x6ac>)
 800de12:	fa22 f303 	lsr.w	r3, r2, r3
 800de16:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800de18:	e01c      	b.n	800de54 <UART_SetConfig+0x6d0>
 800de1a:	bf00      	nop
 800de1c:	40011400 	.word	0x40011400
 800de20:	58024400 	.word	0x58024400
 800de24:	40007800 	.word	0x40007800
 800de28:	40007c00 	.word	0x40007c00
 800de2c:	58000c00 	.word	0x58000c00
 800de30:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800de34:	4b9d      	ldr	r3, [pc, #628]	; (800e0ac <UART_SetConfig+0x928>)
 800de36:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800de38:	e00c      	b.n	800de54 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800de3a:	4b9d      	ldr	r3, [pc, #628]	; (800e0b0 <UART_SetConfig+0x92c>)
 800de3c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800de3e:	e009      	b.n	800de54 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800de40:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800de44:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800de46:	e005      	b.n	800de54 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800de48:	2300      	movs	r3, #0
 800de4a:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800de4c:	2301      	movs	r3, #1
 800de4e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800de52:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800de54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800de56:	2b00      	cmp	r3, #0
 800de58:	f000 81de 	beq.w	800e218 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800de5c:	697b      	ldr	r3, [r7, #20]
 800de5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800de60:	4a94      	ldr	r2, [pc, #592]	; (800e0b4 <UART_SetConfig+0x930>)
 800de62:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800de66:	461a      	mov	r2, r3
 800de68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800de6a:	fbb3 f3f2 	udiv	r3, r3, r2
 800de6e:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800de70:	697b      	ldr	r3, [r7, #20]
 800de72:	685a      	ldr	r2, [r3, #4]
 800de74:	4613      	mov	r3, r2
 800de76:	005b      	lsls	r3, r3, #1
 800de78:	4413      	add	r3, r2
 800de7a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800de7c:	429a      	cmp	r2, r3
 800de7e:	d305      	bcc.n	800de8c <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800de80:	697b      	ldr	r3, [r7, #20]
 800de82:	685b      	ldr	r3, [r3, #4]
 800de84:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800de86:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800de88:	429a      	cmp	r2, r3
 800de8a:	d903      	bls.n	800de94 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800de8c:	2301      	movs	r3, #1
 800de8e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800de92:	e1c1      	b.n	800e218 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800de94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800de96:	2200      	movs	r2, #0
 800de98:	60bb      	str	r3, [r7, #8]
 800de9a:	60fa      	str	r2, [r7, #12]
 800de9c:	697b      	ldr	r3, [r7, #20]
 800de9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dea0:	4a84      	ldr	r2, [pc, #528]	; (800e0b4 <UART_SetConfig+0x930>)
 800dea2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800dea6:	b29b      	uxth	r3, r3
 800dea8:	2200      	movs	r2, #0
 800deaa:	603b      	str	r3, [r7, #0]
 800deac:	607a      	str	r2, [r7, #4]
 800deae:	e9d7 2300 	ldrd	r2, r3, [r7]
 800deb2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800deb6:	f7f2 fa6b 	bl	8000390 <__aeabi_uldivmod>
 800deba:	4602      	mov	r2, r0
 800debc:	460b      	mov	r3, r1
 800debe:	4610      	mov	r0, r2
 800dec0:	4619      	mov	r1, r3
 800dec2:	f04f 0200 	mov.w	r2, #0
 800dec6:	f04f 0300 	mov.w	r3, #0
 800deca:	020b      	lsls	r3, r1, #8
 800decc:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800ded0:	0202      	lsls	r2, r0, #8
 800ded2:	6979      	ldr	r1, [r7, #20]
 800ded4:	6849      	ldr	r1, [r1, #4]
 800ded6:	0849      	lsrs	r1, r1, #1
 800ded8:	2000      	movs	r0, #0
 800deda:	460c      	mov	r4, r1
 800dedc:	4605      	mov	r5, r0
 800dede:	eb12 0804 	adds.w	r8, r2, r4
 800dee2:	eb43 0905 	adc.w	r9, r3, r5
 800dee6:	697b      	ldr	r3, [r7, #20]
 800dee8:	685b      	ldr	r3, [r3, #4]
 800deea:	2200      	movs	r2, #0
 800deec:	469a      	mov	sl, r3
 800deee:	4693      	mov	fp, r2
 800def0:	4652      	mov	r2, sl
 800def2:	465b      	mov	r3, fp
 800def4:	4640      	mov	r0, r8
 800def6:	4649      	mov	r1, r9
 800def8:	f7f2 fa4a 	bl	8000390 <__aeabi_uldivmod>
 800defc:	4602      	mov	r2, r0
 800defe:	460b      	mov	r3, r1
 800df00:	4613      	mov	r3, r2
 800df02:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800df04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df06:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800df0a:	d308      	bcc.n	800df1e <UART_SetConfig+0x79a>
 800df0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df0e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800df12:	d204      	bcs.n	800df1e <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800df14:	697b      	ldr	r3, [r7, #20]
 800df16:	681b      	ldr	r3, [r3, #0]
 800df18:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800df1a:	60da      	str	r2, [r3, #12]
 800df1c:	e17c      	b.n	800e218 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800df1e:	2301      	movs	r3, #1
 800df20:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800df24:	e178      	b.n	800e218 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800df26:	697b      	ldr	r3, [r7, #20]
 800df28:	69db      	ldr	r3, [r3, #28]
 800df2a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800df2e:	f040 80c5 	bne.w	800e0bc <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800df32:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800df36:	2b20      	cmp	r3, #32
 800df38:	dc48      	bgt.n	800dfcc <UART_SetConfig+0x848>
 800df3a:	2b00      	cmp	r3, #0
 800df3c:	db7b      	blt.n	800e036 <UART_SetConfig+0x8b2>
 800df3e:	2b20      	cmp	r3, #32
 800df40:	d879      	bhi.n	800e036 <UART_SetConfig+0x8b2>
 800df42:	a201      	add	r2, pc, #4	; (adr r2, 800df48 <UART_SetConfig+0x7c4>)
 800df44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800df48:	0800dfd3 	.word	0x0800dfd3
 800df4c:	0800dfdb 	.word	0x0800dfdb
 800df50:	0800e037 	.word	0x0800e037
 800df54:	0800e037 	.word	0x0800e037
 800df58:	0800dfe3 	.word	0x0800dfe3
 800df5c:	0800e037 	.word	0x0800e037
 800df60:	0800e037 	.word	0x0800e037
 800df64:	0800e037 	.word	0x0800e037
 800df68:	0800dff3 	.word	0x0800dff3
 800df6c:	0800e037 	.word	0x0800e037
 800df70:	0800e037 	.word	0x0800e037
 800df74:	0800e037 	.word	0x0800e037
 800df78:	0800e037 	.word	0x0800e037
 800df7c:	0800e037 	.word	0x0800e037
 800df80:	0800e037 	.word	0x0800e037
 800df84:	0800e037 	.word	0x0800e037
 800df88:	0800e003 	.word	0x0800e003
 800df8c:	0800e037 	.word	0x0800e037
 800df90:	0800e037 	.word	0x0800e037
 800df94:	0800e037 	.word	0x0800e037
 800df98:	0800e037 	.word	0x0800e037
 800df9c:	0800e037 	.word	0x0800e037
 800dfa0:	0800e037 	.word	0x0800e037
 800dfa4:	0800e037 	.word	0x0800e037
 800dfa8:	0800e037 	.word	0x0800e037
 800dfac:	0800e037 	.word	0x0800e037
 800dfb0:	0800e037 	.word	0x0800e037
 800dfb4:	0800e037 	.word	0x0800e037
 800dfb8:	0800e037 	.word	0x0800e037
 800dfbc:	0800e037 	.word	0x0800e037
 800dfc0:	0800e037 	.word	0x0800e037
 800dfc4:	0800e037 	.word	0x0800e037
 800dfc8:	0800e029 	.word	0x0800e029
 800dfcc:	2b40      	cmp	r3, #64	; 0x40
 800dfce:	d02e      	beq.n	800e02e <UART_SetConfig+0x8aa>
 800dfd0:	e031      	b.n	800e036 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800dfd2:	f7fa ffc7 	bl	8008f64 <HAL_RCC_GetPCLK1Freq>
 800dfd6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800dfd8:	e033      	b.n	800e042 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800dfda:	f7fa ffd9 	bl	8008f90 <HAL_RCC_GetPCLK2Freq>
 800dfde:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800dfe0:	e02f      	b.n	800e042 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800dfe2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800dfe6:	4618      	mov	r0, r3
 800dfe8:	f7fc fc58 	bl	800a89c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800dfec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dfee:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800dff0:	e027      	b.n	800e042 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800dff2:	f107 0318 	add.w	r3, r7, #24
 800dff6:	4618      	mov	r0, r3
 800dff8:	f7fc fda4 	bl	800ab44 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800dffc:	69fb      	ldr	r3, [r7, #28]
 800dffe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e000:	e01f      	b.n	800e042 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e002:	4b2d      	ldr	r3, [pc, #180]	; (800e0b8 <UART_SetConfig+0x934>)
 800e004:	681b      	ldr	r3, [r3, #0]
 800e006:	f003 0320 	and.w	r3, r3, #32
 800e00a:	2b00      	cmp	r3, #0
 800e00c:	d009      	beq.n	800e022 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800e00e:	4b2a      	ldr	r3, [pc, #168]	; (800e0b8 <UART_SetConfig+0x934>)
 800e010:	681b      	ldr	r3, [r3, #0]
 800e012:	08db      	lsrs	r3, r3, #3
 800e014:	f003 0303 	and.w	r3, r3, #3
 800e018:	4a24      	ldr	r2, [pc, #144]	; (800e0ac <UART_SetConfig+0x928>)
 800e01a:	fa22 f303 	lsr.w	r3, r2, r3
 800e01e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800e020:	e00f      	b.n	800e042 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800e022:	4b22      	ldr	r3, [pc, #136]	; (800e0ac <UART_SetConfig+0x928>)
 800e024:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e026:	e00c      	b.n	800e042 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800e028:	4b21      	ldr	r3, [pc, #132]	; (800e0b0 <UART_SetConfig+0x92c>)
 800e02a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e02c:	e009      	b.n	800e042 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e02e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e032:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e034:	e005      	b.n	800e042 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800e036:	2300      	movs	r3, #0
 800e038:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800e03a:	2301      	movs	r3, #1
 800e03c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800e040:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800e042:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e044:	2b00      	cmp	r3, #0
 800e046:	f000 80e7 	beq.w	800e218 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e04a:	697b      	ldr	r3, [r7, #20]
 800e04c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e04e:	4a19      	ldr	r2, [pc, #100]	; (800e0b4 <UART_SetConfig+0x930>)
 800e050:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e054:	461a      	mov	r2, r3
 800e056:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e058:	fbb3 f3f2 	udiv	r3, r3, r2
 800e05c:	005a      	lsls	r2, r3, #1
 800e05e:	697b      	ldr	r3, [r7, #20]
 800e060:	685b      	ldr	r3, [r3, #4]
 800e062:	085b      	lsrs	r3, r3, #1
 800e064:	441a      	add	r2, r3
 800e066:	697b      	ldr	r3, [r7, #20]
 800e068:	685b      	ldr	r3, [r3, #4]
 800e06a:	fbb2 f3f3 	udiv	r3, r2, r3
 800e06e:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800e070:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e072:	2b0f      	cmp	r3, #15
 800e074:	d916      	bls.n	800e0a4 <UART_SetConfig+0x920>
 800e076:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e078:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e07c:	d212      	bcs.n	800e0a4 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800e07e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e080:	b29b      	uxth	r3, r3
 800e082:	f023 030f 	bic.w	r3, r3, #15
 800e086:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800e088:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e08a:	085b      	lsrs	r3, r3, #1
 800e08c:	b29b      	uxth	r3, r3
 800e08e:	f003 0307 	and.w	r3, r3, #7
 800e092:	b29a      	uxth	r2, r3
 800e094:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800e096:	4313      	orrs	r3, r2
 800e098:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800e09a:	697b      	ldr	r3, [r7, #20]
 800e09c:	681b      	ldr	r3, [r3, #0]
 800e09e:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800e0a0:	60da      	str	r2, [r3, #12]
 800e0a2:	e0b9      	b.n	800e218 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800e0a4:	2301      	movs	r3, #1
 800e0a6:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800e0aa:	e0b5      	b.n	800e218 <UART_SetConfig+0xa94>
 800e0ac:	03d09000 	.word	0x03d09000
 800e0b0:	003d0900 	.word	0x003d0900
 800e0b4:	0801ed78 	.word	0x0801ed78
 800e0b8:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800e0bc:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800e0c0:	2b20      	cmp	r3, #32
 800e0c2:	dc49      	bgt.n	800e158 <UART_SetConfig+0x9d4>
 800e0c4:	2b00      	cmp	r3, #0
 800e0c6:	db7c      	blt.n	800e1c2 <UART_SetConfig+0xa3e>
 800e0c8:	2b20      	cmp	r3, #32
 800e0ca:	d87a      	bhi.n	800e1c2 <UART_SetConfig+0xa3e>
 800e0cc:	a201      	add	r2, pc, #4	; (adr r2, 800e0d4 <UART_SetConfig+0x950>)
 800e0ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e0d2:	bf00      	nop
 800e0d4:	0800e15f 	.word	0x0800e15f
 800e0d8:	0800e167 	.word	0x0800e167
 800e0dc:	0800e1c3 	.word	0x0800e1c3
 800e0e0:	0800e1c3 	.word	0x0800e1c3
 800e0e4:	0800e16f 	.word	0x0800e16f
 800e0e8:	0800e1c3 	.word	0x0800e1c3
 800e0ec:	0800e1c3 	.word	0x0800e1c3
 800e0f0:	0800e1c3 	.word	0x0800e1c3
 800e0f4:	0800e17f 	.word	0x0800e17f
 800e0f8:	0800e1c3 	.word	0x0800e1c3
 800e0fc:	0800e1c3 	.word	0x0800e1c3
 800e100:	0800e1c3 	.word	0x0800e1c3
 800e104:	0800e1c3 	.word	0x0800e1c3
 800e108:	0800e1c3 	.word	0x0800e1c3
 800e10c:	0800e1c3 	.word	0x0800e1c3
 800e110:	0800e1c3 	.word	0x0800e1c3
 800e114:	0800e18f 	.word	0x0800e18f
 800e118:	0800e1c3 	.word	0x0800e1c3
 800e11c:	0800e1c3 	.word	0x0800e1c3
 800e120:	0800e1c3 	.word	0x0800e1c3
 800e124:	0800e1c3 	.word	0x0800e1c3
 800e128:	0800e1c3 	.word	0x0800e1c3
 800e12c:	0800e1c3 	.word	0x0800e1c3
 800e130:	0800e1c3 	.word	0x0800e1c3
 800e134:	0800e1c3 	.word	0x0800e1c3
 800e138:	0800e1c3 	.word	0x0800e1c3
 800e13c:	0800e1c3 	.word	0x0800e1c3
 800e140:	0800e1c3 	.word	0x0800e1c3
 800e144:	0800e1c3 	.word	0x0800e1c3
 800e148:	0800e1c3 	.word	0x0800e1c3
 800e14c:	0800e1c3 	.word	0x0800e1c3
 800e150:	0800e1c3 	.word	0x0800e1c3
 800e154:	0800e1b5 	.word	0x0800e1b5
 800e158:	2b40      	cmp	r3, #64	; 0x40
 800e15a:	d02e      	beq.n	800e1ba <UART_SetConfig+0xa36>
 800e15c:	e031      	b.n	800e1c2 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800e15e:	f7fa ff01 	bl	8008f64 <HAL_RCC_GetPCLK1Freq>
 800e162:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800e164:	e033      	b.n	800e1ce <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800e166:	f7fa ff13 	bl	8008f90 <HAL_RCC_GetPCLK2Freq>
 800e16a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800e16c:	e02f      	b.n	800e1ce <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e16e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e172:	4618      	mov	r0, r3
 800e174:	f7fc fb92 	bl	800a89c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800e178:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e17a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e17c:	e027      	b.n	800e1ce <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e17e:	f107 0318 	add.w	r3, r7, #24
 800e182:	4618      	mov	r0, r3
 800e184:	f7fc fcde 	bl	800ab44 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800e188:	69fb      	ldr	r3, [r7, #28]
 800e18a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e18c:	e01f      	b.n	800e1ce <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e18e:	4b2d      	ldr	r3, [pc, #180]	; (800e244 <UART_SetConfig+0xac0>)
 800e190:	681b      	ldr	r3, [r3, #0]
 800e192:	f003 0320 	and.w	r3, r3, #32
 800e196:	2b00      	cmp	r3, #0
 800e198:	d009      	beq.n	800e1ae <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800e19a:	4b2a      	ldr	r3, [pc, #168]	; (800e244 <UART_SetConfig+0xac0>)
 800e19c:	681b      	ldr	r3, [r3, #0]
 800e19e:	08db      	lsrs	r3, r3, #3
 800e1a0:	f003 0303 	and.w	r3, r3, #3
 800e1a4:	4a28      	ldr	r2, [pc, #160]	; (800e248 <UART_SetConfig+0xac4>)
 800e1a6:	fa22 f303 	lsr.w	r3, r2, r3
 800e1aa:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800e1ac:	e00f      	b.n	800e1ce <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800e1ae:	4b26      	ldr	r3, [pc, #152]	; (800e248 <UART_SetConfig+0xac4>)
 800e1b0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e1b2:	e00c      	b.n	800e1ce <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800e1b4:	4b25      	ldr	r3, [pc, #148]	; (800e24c <UART_SetConfig+0xac8>)
 800e1b6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e1b8:	e009      	b.n	800e1ce <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e1ba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e1be:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e1c0:	e005      	b.n	800e1ce <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800e1c2:	2300      	movs	r3, #0
 800e1c4:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800e1c6:	2301      	movs	r3, #1
 800e1c8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800e1cc:	bf00      	nop
    }

    if (pclk != 0U)
 800e1ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e1d0:	2b00      	cmp	r3, #0
 800e1d2:	d021      	beq.n	800e218 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e1d4:	697b      	ldr	r3, [r7, #20]
 800e1d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e1d8:	4a1d      	ldr	r2, [pc, #116]	; (800e250 <UART_SetConfig+0xacc>)
 800e1da:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e1de:	461a      	mov	r2, r3
 800e1e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e1e2:	fbb3 f2f2 	udiv	r2, r3, r2
 800e1e6:	697b      	ldr	r3, [r7, #20]
 800e1e8:	685b      	ldr	r3, [r3, #4]
 800e1ea:	085b      	lsrs	r3, r3, #1
 800e1ec:	441a      	add	r2, r3
 800e1ee:	697b      	ldr	r3, [r7, #20]
 800e1f0:	685b      	ldr	r3, [r3, #4]
 800e1f2:	fbb2 f3f3 	udiv	r3, r2, r3
 800e1f6:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800e1f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e1fa:	2b0f      	cmp	r3, #15
 800e1fc:	d909      	bls.n	800e212 <UART_SetConfig+0xa8e>
 800e1fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e200:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e204:	d205      	bcs.n	800e212 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800e206:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e208:	b29a      	uxth	r2, r3
 800e20a:	697b      	ldr	r3, [r7, #20]
 800e20c:	681b      	ldr	r3, [r3, #0]
 800e20e:	60da      	str	r2, [r3, #12]
 800e210:	e002      	b.n	800e218 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800e212:	2301      	movs	r3, #1
 800e214:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800e218:	697b      	ldr	r3, [r7, #20]
 800e21a:	2201      	movs	r2, #1
 800e21c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800e220:	697b      	ldr	r3, [r7, #20]
 800e222:	2201      	movs	r2, #1
 800e224:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800e228:	697b      	ldr	r3, [r7, #20]
 800e22a:	2200      	movs	r2, #0
 800e22c:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800e22e:	697b      	ldr	r3, [r7, #20]
 800e230:	2200      	movs	r2, #0
 800e232:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800e234:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800e238:	4618      	mov	r0, r3
 800e23a:	3748      	adds	r7, #72	; 0x48
 800e23c:	46bd      	mov	sp, r7
 800e23e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800e242:	bf00      	nop
 800e244:	58024400 	.word	0x58024400
 800e248:	03d09000 	.word	0x03d09000
 800e24c:	003d0900 	.word	0x003d0900
 800e250:	0801ed78 	.word	0x0801ed78

0800e254 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800e254:	b480      	push	{r7}
 800e256:	b083      	sub	sp, #12
 800e258:	af00      	add	r7, sp, #0
 800e25a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800e25c:	687b      	ldr	r3, [r7, #4]
 800e25e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e260:	f003 0301 	and.w	r3, r3, #1
 800e264:	2b00      	cmp	r3, #0
 800e266:	d00a      	beq.n	800e27e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800e268:	687b      	ldr	r3, [r7, #4]
 800e26a:	681b      	ldr	r3, [r3, #0]
 800e26c:	685b      	ldr	r3, [r3, #4]
 800e26e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800e272:	687b      	ldr	r3, [r7, #4]
 800e274:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e276:	687b      	ldr	r3, [r7, #4]
 800e278:	681b      	ldr	r3, [r3, #0]
 800e27a:	430a      	orrs	r2, r1
 800e27c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800e27e:	687b      	ldr	r3, [r7, #4]
 800e280:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e282:	f003 0302 	and.w	r3, r3, #2
 800e286:	2b00      	cmp	r3, #0
 800e288:	d00a      	beq.n	800e2a0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800e28a:	687b      	ldr	r3, [r7, #4]
 800e28c:	681b      	ldr	r3, [r3, #0]
 800e28e:	685b      	ldr	r3, [r3, #4]
 800e290:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800e294:	687b      	ldr	r3, [r7, #4]
 800e296:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e298:	687b      	ldr	r3, [r7, #4]
 800e29a:	681b      	ldr	r3, [r3, #0]
 800e29c:	430a      	orrs	r2, r1
 800e29e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800e2a0:	687b      	ldr	r3, [r7, #4]
 800e2a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e2a4:	f003 0304 	and.w	r3, r3, #4
 800e2a8:	2b00      	cmp	r3, #0
 800e2aa:	d00a      	beq.n	800e2c2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800e2ac:	687b      	ldr	r3, [r7, #4]
 800e2ae:	681b      	ldr	r3, [r3, #0]
 800e2b0:	685b      	ldr	r3, [r3, #4]
 800e2b2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800e2b6:	687b      	ldr	r3, [r7, #4]
 800e2b8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e2ba:	687b      	ldr	r3, [r7, #4]
 800e2bc:	681b      	ldr	r3, [r3, #0]
 800e2be:	430a      	orrs	r2, r1
 800e2c0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800e2c2:	687b      	ldr	r3, [r7, #4]
 800e2c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e2c6:	f003 0308 	and.w	r3, r3, #8
 800e2ca:	2b00      	cmp	r3, #0
 800e2cc:	d00a      	beq.n	800e2e4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800e2ce:	687b      	ldr	r3, [r7, #4]
 800e2d0:	681b      	ldr	r3, [r3, #0]
 800e2d2:	685b      	ldr	r3, [r3, #4]
 800e2d4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800e2d8:	687b      	ldr	r3, [r7, #4]
 800e2da:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e2dc:	687b      	ldr	r3, [r7, #4]
 800e2de:	681b      	ldr	r3, [r3, #0]
 800e2e0:	430a      	orrs	r2, r1
 800e2e2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800e2e4:	687b      	ldr	r3, [r7, #4]
 800e2e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e2e8:	f003 0310 	and.w	r3, r3, #16
 800e2ec:	2b00      	cmp	r3, #0
 800e2ee:	d00a      	beq.n	800e306 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800e2f0:	687b      	ldr	r3, [r7, #4]
 800e2f2:	681b      	ldr	r3, [r3, #0]
 800e2f4:	689b      	ldr	r3, [r3, #8]
 800e2f6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800e2fa:	687b      	ldr	r3, [r7, #4]
 800e2fc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800e2fe:	687b      	ldr	r3, [r7, #4]
 800e300:	681b      	ldr	r3, [r3, #0]
 800e302:	430a      	orrs	r2, r1
 800e304:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800e306:	687b      	ldr	r3, [r7, #4]
 800e308:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e30a:	f003 0320 	and.w	r3, r3, #32
 800e30e:	2b00      	cmp	r3, #0
 800e310:	d00a      	beq.n	800e328 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800e312:	687b      	ldr	r3, [r7, #4]
 800e314:	681b      	ldr	r3, [r3, #0]
 800e316:	689b      	ldr	r3, [r3, #8]
 800e318:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800e31c:	687b      	ldr	r3, [r7, #4]
 800e31e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800e320:	687b      	ldr	r3, [r7, #4]
 800e322:	681b      	ldr	r3, [r3, #0]
 800e324:	430a      	orrs	r2, r1
 800e326:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800e328:	687b      	ldr	r3, [r7, #4]
 800e32a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e32c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e330:	2b00      	cmp	r3, #0
 800e332:	d01a      	beq.n	800e36a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800e334:	687b      	ldr	r3, [r7, #4]
 800e336:	681b      	ldr	r3, [r3, #0]
 800e338:	685b      	ldr	r3, [r3, #4]
 800e33a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800e33e:	687b      	ldr	r3, [r7, #4]
 800e340:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e342:	687b      	ldr	r3, [r7, #4]
 800e344:	681b      	ldr	r3, [r3, #0]
 800e346:	430a      	orrs	r2, r1
 800e348:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800e34a:	687b      	ldr	r3, [r7, #4]
 800e34c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e34e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e352:	d10a      	bne.n	800e36a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800e354:	687b      	ldr	r3, [r7, #4]
 800e356:	681b      	ldr	r3, [r3, #0]
 800e358:	685b      	ldr	r3, [r3, #4]
 800e35a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800e35e:	687b      	ldr	r3, [r7, #4]
 800e360:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800e362:	687b      	ldr	r3, [r7, #4]
 800e364:	681b      	ldr	r3, [r3, #0]
 800e366:	430a      	orrs	r2, r1
 800e368:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800e36a:	687b      	ldr	r3, [r7, #4]
 800e36c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e36e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e372:	2b00      	cmp	r3, #0
 800e374:	d00a      	beq.n	800e38c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800e376:	687b      	ldr	r3, [r7, #4]
 800e378:	681b      	ldr	r3, [r3, #0]
 800e37a:	685b      	ldr	r3, [r3, #4]
 800e37c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800e380:	687b      	ldr	r3, [r7, #4]
 800e382:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800e384:	687b      	ldr	r3, [r7, #4]
 800e386:	681b      	ldr	r3, [r3, #0]
 800e388:	430a      	orrs	r2, r1
 800e38a:	605a      	str	r2, [r3, #4]
  }
}
 800e38c:	bf00      	nop
 800e38e:	370c      	adds	r7, #12
 800e390:	46bd      	mov	sp, r7
 800e392:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e396:	4770      	bx	lr

0800e398 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800e398:	b580      	push	{r7, lr}
 800e39a:	b086      	sub	sp, #24
 800e39c:	af02      	add	r7, sp, #8
 800e39e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e3a0:	687b      	ldr	r3, [r7, #4]
 800e3a2:	2200      	movs	r2, #0
 800e3a4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800e3a8:	f7f6 f816 	bl	80043d8 <HAL_GetTick>
 800e3ac:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800e3ae:	687b      	ldr	r3, [r7, #4]
 800e3b0:	681b      	ldr	r3, [r3, #0]
 800e3b2:	681b      	ldr	r3, [r3, #0]
 800e3b4:	f003 0308 	and.w	r3, r3, #8
 800e3b8:	2b08      	cmp	r3, #8
 800e3ba:	d10e      	bne.n	800e3da <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800e3bc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800e3c0:	9300      	str	r3, [sp, #0]
 800e3c2:	68fb      	ldr	r3, [r7, #12]
 800e3c4:	2200      	movs	r2, #0
 800e3c6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800e3ca:	6878      	ldr	r0, [r7, #4]
 800e3cc:	f000 f82f 	bl	800e42e <UART_WaitOnFlagUntilTimeout>
 800e3d0:	4603      	mov	r3, r0
 800e3d2:	2b00      	cmp	r3, #0
 800e3d4:	d001      	beq.n	800e3da <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800e3d6:	2303      	movs	r3, #3
 800e3d8:	e025      	b.n	800e426 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800e3da:	687b      	ldr	r3, [r7, #4]
 800e3dc:	681b      	ldr	r3, [r3, #0]
 800e3de:	681b      	ldr	r3, [r3, #0]
 800e3e0:	f003 0304 	and.w	r3, r3, #4
 800e3e4:	2b04      	cmp	r3, #4
 800e3e6:	d10e      	bne.n	800e406 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800e3e8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800e3ec:	9300      	str	r3, [sp, #0]
 800e3ee:	68fb      	ldr	r3, [r7, #12]
 800e3f0:	2200      	movs	r2, #0
 800e3f2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800e3f6:	6878      	ldr	r0, [r7, #4]
 800e3f8:	f000 f819 	bl	800e42e <UART_WaitOnFlagUntilTimeout>
 800e3fc:	4603      	mov	r3, r0
 800e3fe:	2b00      	cmp	r3, #0
 800e400:	d001      	beq.n	800e406 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800e402:	2303      	movs	r3, #3
 800e404:	e00f      	b.n	800e426 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800e406:	687b      	ldr	r3, [r7, #4]
 800e408:	2220      	movs	r2, #32
 800e40a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800e40e:	687b      	ldr	r3, [r7, #4]
 800e410:	2220      	movs	r2, #32
 800e412:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e416:	687b      	ldr	r3, [r7, #4]
 800e418:	2200      	movs	r2, #0
 800e41a:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800e41c:	687b      	ldr	r3, [r7, #4]
 800e41e:	2200      	movs	r2, #0
 800e420:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800e424:	2300      	movs	r3, #0
}
 800e426:	4618      	mov	r0, r3
 800e428:	3710      	adds	r7, #16
 800e42a:	46bd      	mov	sp, r7
 800e42c:	bd80      	pop	{r7, pc}

0800e42e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800e42e:	b580      	push	{r7, lr}
 800e430:	b09c      	sub	sp, #112	; 0x70
 800e432:	af00      	add	r7, sp, #0
 800e434:	60f8      	str	r0, [r7, #12]
 800e436:	60b9      	str	r1, [r7, #8]
 800e438:	603b      	str	r3, [r7, #0]
 800e43a:	4613      	mov	r3, r2
 800e43c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e43e:	e0a9      	b.n	800e594 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800e440:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e442:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e446:	f000 80a5 	beq.w	800e594 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e44a:	f7f5 ffc5 	bl	80043d8 <HAL_GetTick>
 800e44e:	4602      	mov	r2, r0
 800e450:	683b      	ldr	r3, [r7, #0]
 800e452:	1ad3      	subs	r3, r2, r3
 800e454:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800e456:	429a      	cmp	r2, r3
 800e458:	d302      	bcc.n	800e460 <UART_WaitOnFlagUntilTimeout+0x32>
 800e45a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e45c:	2b00      	cmp	r3, #0
 800e45e:	d140      	bne.n	800e4e2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800e460:	68fb      	ldr	r3, [r7, #12]
 800e462:	681b      	ldr	r3, [r3, #0]
 800e464:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e466:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e468:	e853 3f00 	ldrex	r3, [r3]
 800e46c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800e46e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e470:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800e474:	667b      	str	r3, [r7, #100]	; 0x64
 800e476:	68fb      	ldr	r3, [r7, #12]
 800e478:	681b      	ldr	r3, [r3, #0]
 800e47a:	461a      	mov	r2, r3
 800e47c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e47e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800e480:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e482:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800e484:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800e486:	e841 2300 	strex	r3, r2, [r1]
 800e48a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800e48c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e48e:	2b00      	cmp	r3, #0
 800e490:	d1e6      	bne.n	800e460 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e492:	68fb      	ldr	r3, [r7, #12]
 800e494:	681b      	ldr	r3, [r3, #0]
 800e496:	3308      	adds	r3, #8
 800e498:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e49a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e49c:	e853 3f00 	ldrex	r3, [r3]
 800e4a0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800e4a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e4a4:	f023 0301 	bic.w	r3, r3, #1
 800e4a8:	663b      	str	r3, [r7, #96]	; 0x60
 800e4aa:	68fb      	ldr	r3, [r7, #12]
 800e4ac:	681b      	ldr	r3, [r3, #0]
 800e4ae:	3308      	adds	r3, #8
 800e4b0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800e4b2:	64ba      	str	r2, [r7, #72]	; 0x48
 800e4b4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e4b6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800e4b8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e4ba:	e841 2300 	strex	r3, r2, [r1]
 800e4be:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800e4c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e4c2:	2b00      	cmp	r3, #0
 800e4c4:	d1e5      	bne.n	800e492 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800e4c6:	68fb      	ldr	r3, [r7, #12]
 800e4c8:	2220      	movs	r2, #32
 800e4ca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800e4ce:	68fb      	ldr	r3, [r7, #12]
 800e4d0:	2220      	movs	r2, #32
 800e4d2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800e4d6:	68fb      	ldr	r3, [r7, #12]
 800e4d8:	2200      	movs	r2, #0
 800e4da:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800e4de:	2303      	movs	r3, #3
 800e4e0:	e069      	b.n	800e5b6 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800e4e2:	68fb      	ldr	r3, [r7, #12]
 800e4e4:	681b      	ldr	r3, [r3, #0]
 800e4e6:	681b      	ldr	r3, [r3, #0]
 800e4e8:	f003 0304 	and.w	r3, r3, #4
 800e4ec:	2b00      	cmp	r3, #0
 800e4ee:	d051      	beq.n	800e594 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800e4f0:	68fb      	ldr	r3, [r7, #12]
 800e4f2:	681b      	ldr	r3, [r3, #0]
 800e4f4:	69db      	ldr	r3, [r3, #28]
 800e4f6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800e4fa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e4fe:	d149      	bne.n	800e594 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800e500:	68fb      	ldr	r3, [r7, #12]
 800e502:	681b      	ldr	r3, [r3, #0]
 800e504:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800e508:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800e50a:	68fb      	ldr	r3, [r7, #12]
 800e50c:	681b      	ldr	r3, [r3, #0]
 800e50e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e510:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e512:	e853 3f00 	ldrex	r3, [r3]
 800e516:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800e518:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e51a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800e51e:	66fb      	str	r3, [r7, #108]	; 0x6c
 800e520:	68fb      	ldr	r3, [r7, #12]
 800e522:	681b      	ldr	r3, [r3, #0]
 800e524:	461a      	mov	r2, r3
 800e526:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e528:	637b      	str	r3, [r7, #52]	; 0x34
 800e52a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e52c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800e52e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e530:	e841 2300 	strex	r3, r2, [r1]
 800e534:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800e536:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e538:	2b00      	cmp	r3, #0
 800e53a:	d1e6      	bne.n	800e50a <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e53c:	68fb      	ldr	r3, [r7, #12]
 800e53e:	681b      	ldr	r3, [r3, #0]
 800e540:	3308      	adds	r3, #8
 800e542:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e544:	697b      	ldr	r3, [r7, #20]
 800e546:	e853 3f00 	ldrex	r3, [r3]
 800e54a:	613b      	str	r3, [r7, #16]
   return(result);
 800e54c:	693b      	ldr	r3, [r7, #16]
 800e54e:	f023 0301 	bic.w	r3, r3, #1
 800e552:	66bb      	str	r3, [r7, #104]	; 0x68
 800e554:	68fb      	ldr	r3, [r7, #12]
 800e556:	681b      	ldr	r3, [r3, #0]
 800e558:	3308      	adds	r3, #8
 800e55a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800e55c:	623a      	str	r2, [r7, #32]
 800e55e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e560:	69f9      	ldr	r1, [r7, #28]
 800e562:	6a3a      	ldr	r2, [r7, #32]
 800e564:	e841 2300 	strex	r3, r2, [r1]
 800e568:	61bb      	str	r3, [r7, #24]
   return(result);
 800e56a:	69bb      	ldr	r3, [r7, #24]
 800e56c:	2b00      	cmp	r3, #0
 800e56e:	d1e5      	bne.n	800e53c <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800e570:	68fb      	ldr	r3, [r7, #12]
 800e572:	2220      	movs	r2, #32
 800e574:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800e578:	68fb      	ldr	r3, [r7, #12]
 800e57a:	2220      	movs	r2, #32
 800e57c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800e580:	68fb      	ldr	r3, [r7, #12]
 800e582:	2220      	movs	r2, #32
 800e584:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800e588:	68fb      	ldr	r3, [r7, #12]
 800e58a:	2200      	movs	r2, #0
 800e58c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800e590:	2303      	movs	r3, #3
 800e592:	e010      	b.n	800e5b6 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e594:	68fb      	ldr	r3, [r7, #12]
 800e596:	681b      	ldr	r3, [r3, #0]
 800e598:	69da      	ldr	r2, [r3, #28]
 800e59a:	68bb      	ldr	r3, [r7, #8]
 800e59c:	4013      	ands	r3, r2
 800e59e:	68ba      	ldr	r2, [r7, #8]
 800e5a0:	429a      	cmp	r2, r3
 800e5a2:	bf0c      	ite	eq
 800e5a4:	2301      	moveq	r3, #1
 800e5a6:	2300      	movne	r3, #0
 800e5a8:	b2db      	uxtb	r3, r3
 800e5aa:	461a      	mov	r2, r3
 800e5ac:	79fb      	ldrb	r3, [r7, #7]
 800e5ae:	429a      	cmp	r2, r3
 800e5b0:	f43f af46 	beq.w	800e440 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800e5b4:	2300      	movs	r3, #0
}
 800e5b6:	4618      	mov	r0, r3
 800e5b8:	3770      	adds	r7, #112	; 0x70
 800e5ba:	46bd      	mov	sp, r7
 800e5bc:	bd80      	pop	{r7, pc}

0800e5be <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800e5be:	b480      	push	{r7}
 800e5c0:	b085      	sub	sp, #20
 800e5c2:	af00      	add	r7, sp, #0
 800e5c4:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800e5c6:	687b      	ldr	r3, [r7, #4]
 800e5c8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800e5cc:	2b01      	cmp	r3, #1
 800e5ce:	d101      	bne.n	800e5d4 <HAL_UARTEx_DisableFifoMode+0x16>
 800e5d0:	2302      	movs	r3, #2
 800e5d2:	e027      	b.n	800e624 <HAL_UARTEx_DisableFifoMode+0x66>
 800e5d4:	687b      	ldr	r3, [r7, #4]
 800e5d6:	2201      	movs	r2, #1
 800e5d8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800e5dc:	687b      	ldr	r3, [r7, #4]
 800e5de:	2224      	movs	r2, #36	; 0x24
 800e5e0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800e5e4:	687b      	ldr	r3, [r7, #4]
 800e5e6:	681b      	ldr	r3, [r3, #0]
 800e5e8:	681b      	ldr	r3, [r3, #0]
 800e5ea:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800e5ec:	687b      	ldr	r3, [r7, #4]
 800e5ee:	681b      	ldr	r3, [r3, #0]
 800e5f0:	681a      	ldr	r2, [r3, #0]
 800e5f2:	687b      	ldr	r3, [r7, #4]
 800e5f4:	681b      	ldr	r3, [r3, #0]
 800e5f6:	f022 0201 	bic.w	r2, r2, #1
 800e5fa:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800e5fc:	68fb      	ldr	r3, [r7, #12]
 800e5fe:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800e602:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800e604:	687b      	ldr	r3, [r7, #4]
 800e606:	2200      	movs	r2, #0
 800e608:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800e60a:	687b      	ldr	r3, [r7, #4]
 800e60c:	681b      	ldr	r3, [r3, #0]
 800e60e:	68fa      	ldr	r2, [r7, #12]
 800e610:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800e612:	687b      	ldr	r3, [r7, #4]
 800e614:	2220      	movs	r2, #32
 800e616:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800e61a:	687b      	ldr	r3, [r7, #4]
 800e61c:	2200      	movs	r2, #0
 800e61e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800e622:	2300      	movs	r3, #0
}
 800e624:	4618      	mov	r0, r3
 800e626:	3714      	adds	r7, #20
 800e628:	46bd      	mov	sp, r7
 800e62a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e62e:	4770      	bx	lr

0800e630 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800e630:	b580      	push	{r7, lr}
 800e632:	b084      	sub	sp, #16
 800e634:	af00      	add	r7, sp, #0
 800e636:	6078      	str	r0, [r7, #4]
 800e638:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800e63a:	687b      	ldr	r3, [r7, #4]
 800e63c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800e640:	2b01      	cmp	r3, #1
 800e642:	d101      	bne.n	800e648 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800e644:	2302      	movs	r3, #2
 800e646:	e02d      	b.n	800e6a4 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800e648:	687b      	ldr	r3, [r7, #4]
 800e64a:	2201      	movs	r2, #1
 800e64c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800e650:	687b      	ldr	r3, [r7, #4]
 800e652:	2224      	movs	r2, #36	; 0x24
 800e654:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800e658:	687b      	ldr	r3, [r7, #4]
 800e65a:	681b      	ldr	r3, [r3, #0]
 800e65c:	681b      	ldr	r3, [r3, #0]
 800e65e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800e660:	687b      	ldr	r3, [r7, #4]
 800e662:	681b      	ldr	r3, [r3, #0]
 800e664:	681a      	ldr	r2, [r3, #0]
 800e666:	687b      	ldr	r3, [r7, #4]
 800e668:	681b      	ldr	r3, [r3, #0]
 800e66a:	f022 0201 	bic.w	r2, r2, #1
 800e66e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800e670:	687b      	ldr	r3, [r7, #4]
 800e672:	681b      	ldr	r3, [r3, #0]
 800e674:	689b      	ldr	r3, [r3, #8]
 800e676:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800e67a:	687b      	ldr	r3, [r7, #4]
 800e67c:	681b      	ldr	r3, [r3, #0]
 800e67e:	683a      	ldr	r2, [r7, #0]
 800e680:	430a      	orrs	r2, r1
 800e682:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800e684:	6878      	ldr	r0, [r7, #4]
 800e686:	f000 f84f 	bl	800e728 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800e68a:	687b      	ldr	r3, [r7, #4]
 800e68c:	681b      	ldr	r3, [r3, #0]
 800e68e:	68fa      	ldr	r2, [r7, #12]
 800e690:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800e692:	687b      	ldr	r3, [r7, #4]
 800e694:	2220      	movs	r2, #32
 800e696:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800e69a:	687b      	ldr	r3, [r7, #4]
 800e69c:	2200      	movs	r2, #0
 800e69e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800e6a2:	2300      	movs	r3, #0
}
 800e6a4:	4618      	mov	r0, r3
 800e6a6:	3710      	adds	r7, #16
 800e6a8:	46bd      	mov	sp, r7
 800e6aa:	bd80      	pop	{r7, pc}

0800e6ac <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800e6ac:	b580      	push	{r7, lr}
 800e6ae:	b084      	sub	sp, #16
 800e6b0:	af00      	add	r7, sp, #0
 800e6b2:	6078      	str	r0, [r7, #4]
 800e6b4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800e6b6:	687b      	ldr	r3, [r7, #4]
 800e6b8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800e6bc:	2b01      	cmp	r3, #1
 800e6be:	d101      	bne.n	800e6c4 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800e6c0:	2302      	movs	r3, #2
 800e6c2:	e02d      	b.n	800e720 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800e6c4:	687b      	ldr	r3, [r7, #4]
 800e6c6:	2201      	movs	r2, #1
 800e6c8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800e6cc:	687b      	ldr	r3, [r7, #4]
 800e6ce:	2224      	movs	r2, #36	; 0x24
 800e6d0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800e6d4:	687b      	ldr	r3, [r7, #4]
 800e6d6:	681b      	ldr	r3, [r3, #0]
 800e6d8:	681b      	ldr	r3, [r3, #0]
 800e6da:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800e6dc:	687b      	ldr	r3, [r7, #4]
 800e6de:	681b      	ldr	r3, [r3, #0]
 800e6e0:	681a      	ldr	r2, [r3, #0]
 800e6e2:	687b      	ldr	r3, [r7, #4]
 800e6e4:	681b      	ldr	r3, [r3, #0]
 800e6e6:	f022 0201 	bic.w	r2, r2, #1
 800e6ea:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800e6ec:	687b      	ldr	r3, [r7, #4]
 800e6ee:	681b      	ldr	r3, [r3, #0]
 800e6f0:	689b      	ldr	r3, [r3, #8]
 800e6f2:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800e6f6:	687b      	ldr	r3, [r7, #4]
 800e6f8:	681b      	ldr	r3, [r3, #0]
 800e6fa:	683a      	ldr	r2, [r7, #0]
 800e6fc:	430a      	orrs	r2, r1
 800e6fe:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800e700:	6878      	ldr	r0, [r7, #4]
 800e702:	f000 f811 	bl	800e728 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800e706:	687b      	ldr	r3, [r7, #4]
 800e708:	681b      	ldr	r3, [r3, #0]
 800e70a:	68fa      	ldr	r2, [r7, #12]
 800e70c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800e70e:	687b      	ldr	r3, [r7, #4]
 800e710:	2220      	movs	r2, #32
 800e712:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800e716:	687b      	ldr	r3, [r7, #4]
 800e718:	2200      	movs	r2, #0
 800e71a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800e71e:	2300      	movs	r3, #0
}
 800e720:	4618      	mov	r0, r3
 800e722:	3710      	adds	r7, #16
 800e724:	46bd      	mov	sp, r7
 800e726:	bd80      	pop	{r7, pc}

0800e728 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800e728:	b480      	push	{r7}
 800e72a:	b085      	sub	sp, #20
 800e72c:	af00      	add	r7, sp, #0
 800e72e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800e730:	687b      	ldr	r3, [r7, #4]
 800e732:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e734:	2b00      	cmp	r3, #0
 800e736:	d108      	bne.n	800e74a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800e738:	687b      	ldr	r3, [r7, #4]
 800e73a:	2201      	movs	r2, #1
 800e73c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800e740:	687b      	ldr	r3, [r7, #4]
 800e742:	2201      	movs	r2, #1
 800e744:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800e748:	e031      	b.n	800e7ae <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800e74a:	2310      	movs	r3, #16
 800e74c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800e74e:	2310      	movs	r3, #16
 800e750:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800e752:	687b      	ldr	r3, [r7, #4]
 800e754:	681b      	ldr	r3, [r3, #0]
 800e756:	689b      	ldr	r3, [r3, #8]
 800e758:	0e5b      	lsrs	r3, r3, #25
 800e75a:	b2db      	uxtb	r3, r3
 800e75c:	f003 0307 	and.w	r3, r3, #7
 800e760:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800e762:	687b      	ldr	r3, [r7, #4]
 800e764:	681b      	ldr	r3, [r3, #0]
 800e766:	689b      	ldr	r3, [r3, #8]
 800e768:	0f5b      	lsrs	r3, r3, #29
 800e76a:	b2db      	uxtb	r3, r3
 800e76c:	f003 0307 	and.w	r3, r3, #7
 800e770:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800e772:	7bbb      	ldrb	r3, [r7, #14]
 800e774:	7b3a      	ldrb	r2, [r7, #12]
 800e776:	4911      	ldr	r1, [pc, #68]	; (800e7bc <UARTEx_SetNbDataToProcess+0x94>)
 800e778:	5c8a      	ldrb	r2, [r1, r2]
 800e77a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800e77e:	7b3a      	ldrb	r2, [r7, #12]
 800e780:	490f      	ldr	r1, [pc, #60]	; (800e7c0 <UARTEx_SetNbDataToProcess+0x98>)
 800e782:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800e784:	fb93 f3f2 	sdiv	r3, r3, r2
 800e788:	b29a      	uxth	r2, r3
 800e78a:	687b      	ldr	r3, [r7, #4]
 800e78c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800e790:	7bfb      	ldrb	r3, [r7, #15]
 800e792:	7b7a      	ldrb	r2, [r7, #13]
 800e794:	4909      	ldr	r1, [pc, #36]	; (800e7bc <UARTEx_SetNbDataToProcess+0x94>)
 800e796:	5c8a      	ldrb	r2, [r1, r2]
 800e798:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800e79c:	7b7a      	ldrb	r2, [r7, #13]
 800e79e:	4908      	ldr	r1, [pc, #32]	; (800e7c0 <UARTEx_SetNbDataToProcess+0x98>)
 800e7a0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800e7a2:	fb93 f3f2 	sdiv	r3, r3, r2
 800e7a6:	b29a      	uxth	r2, r3
 800e7a8:	687b      	ldr	r3, [r7, #4]
 800e7aa:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800e7ae:	bf00      	nop
 800e7b0:	3714      	adds	r7, #20
 800e7b2:	46bd      	mov	sp, r7
 800e7b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7b8:	4770      	bx	lr
 800e7ba:	bf00      	nop
 800e7bc:	0801ed90 	.word	0x0801ed90
 800e7c0:	0801ed98 	.word	0x0801ed98

0800e7c4 <__NVIC_SetPriority>:
{
 800e7c4:	b480      	push	{r7}
 800e7c6:	b083      	sub	sp, #12
 800e7c8:	af00      	add	r7, sp, #0
 800e7ca:	4603      	mov	r3, r0
 800e7cc:	6039      	str	r1, [r7, #0]
 800e7ce:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800e7d0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800e7d4:	2b00      	cmp	r3, #0
 800e7d6:	db0a      	blt.n	800e7ee <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800e7d8:	683b      	ldr	r3, [r7, #0]
 800e7da:	b2da      	uxtb	r2, r3
 800e7dc:	490c      	ldr	r1, [pc, #48]	; (800e810 <__NVIC_SetPriority+0x4c>)
 800e7de:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800e7e2:	0112      	lsls	r2, r2, #4
 800e7e4:	b2d2      	uxtb	r2, r2
 800e7e6:	440b      	add	r3, r1
 800e7e8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800e7ec:	e00a      	b.n	800e804 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800e7ee:	683b      	ldr	r3, [r7, #0]
 800e7f0:	b2da      	uxtb	r2, r3
 800e7f2:	4908      	ldr	r1, [pc, #32]	; (800e814 <__NVIC_SetPriority+0x50>)
 800e7f4:	88fb      	ldrh	r3, [r7, #6]
 800e7f6:	f003 030f 	and.w	r3, r3, #15
 800e7fa:	3b04      	subs	r3, #4
 800e7fc:	0112      	lsls	r2, r2, #4
 800e7fe:	b2d2      	uxtb	r2, r2
 800e800:	440b      	add	r3, r1
 800e802:	761a      	strb	r2, [r3, #24]
}
 800e804:	bf00      	nop
 800e806:	370c      	adds	r7, #12
 800e808:	46bd      	mov	sp, r7
 800e80a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e80e:	4770      	bx	lr
 800e810:	e000e100 	.word	0xe000e100
 800e814:	e000ed00 	.word	0xe000ed00

0800e818 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800e818:	b580      	push	{r7, lr}
 800e81a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800e81c:	4b05      	ldr	r3, [pc, #20]	; (800e834 <SysTick_Handler+0x1c>)
 800e81e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800e820:	f002 fa9a 	bl	8010d58 <xTaskGetSchedulerState>
 800e824:	4603      	mov	r3, r0
 800e826:	2b01      	cmp	r3, #1
 800e828:	d001      	beq.n	800e82e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800e82a:	f003 f97d 	bl	8011b28 <xPortSysTickHandler>
  }
}
 800e82e:	bf00      	nop
 800e830:	bd80      	pop	{r7, pc}
 800e832:	bf00      	nop
 800e834:	e000e010 	.word	0xe000e010

0800e838 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800e838:	b580      	push	{r7, lr}
 800e83a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800e83c:	2100      	movs	r1, #0
 800e83e:	f06f 0004 	mvn.w	r0, #4
 800e842:	f7ff ffbf 	bl	800e7c4 <__NVIC_SetPriority>
#endif
}
 800e846:	bf00      	nop
 800e848:	bd80      	pop	{r7, pc}
	...

0800e84c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800e84c:	b480      	push	{r7}
 800e84e:	b083      	sub	sp, #12
 800e850:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e852:	f3ef 8305 	mrs	r3, IPSR
 800e856:	603b      	str	r3, [r7, #0]
  return(result);
 800e858:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800e85a:	2b00      	cmp	r3, #0
 800e85c:	d003      	beq.n	800e866 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800e85e:	f06f 0305 	mvn.w	r3, #5
 800e862:	607b      	str	r3, [r7, #4]
 800e864:	e00c      	b.n	800e880 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800e866:	4b0a      	ldr	r3, [pc, #40]	; (800e890 <osKernelInitialize+0x44>)
 800e868:	681b      	ldr	r3, [r3, #0]
 800e86a:	2b00      	cmp	r3, #0
 800e86c:	d105      	bne.n	800e87a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800e86e:	4b08      	ldr	r3, [pc, #32]	; (800e890 <osKernelInitialize+0x44>)
 800e870:	2201      	movs	r2, #1
 800e872:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800e874:	2300      	movs	r3, #0
 800e876:	607b      	str	r3, [r7, #4]
 800e878:	e002      	b.n	800e880 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800e87a:	f04f 33ff 	mov.w	r3, #4294967295
 800e87e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800e880:	687b      	ldr	r3, [r7, #4]
}
 800e882:	4618      	mov	r0, r3
 800e884:	370c      	adds	r7, #12
 800e886:	46bd      	mov	sp, r7
 800e888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e88c:	4770      	bx	lr
 800e88e:	bf00      	nop
 800e890:	200009c4 	.word	0x200009c4

0800e894 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800e894:	b580      	push	{r7, lr}
 800e896:	b082      	sub	sp, #8
 800e898:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e89a:	f3ef 8305 	mrs	r3, IPSR
 800e89e:	603b      	str	r3, [r7, #0]
  return(result);
 800e8a0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800e8a2:	2b00      	cmp	r3, #0
 800e8a4:	d003      	beq.n	800e8ae <osKernelStart+0x1a>
    stat = osErrorISR;
 800e8a6:	f06f 0305 	mvn.w	r3, #5
 800e8aa:	607b      	str	r3, [r7, #4]
 800e8ac:	e010      	b.n	800e8d0 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800e8ae:	4b0b      	ldr	r3, [pc, #44]	; (800e8dc <osKernelStart+0x48>)
 800e8b0:	681b      	ldr	r3, [r3, #0]
 800e8b2:	2b01      	cmp	r3, #1
 800e8b4:	d109      	bne.n	800e8ca <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800e8b6:	f7ff ffbf 	bl	800e838 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800e8ba:	4b08      	ldr	r3, [pc, #32]	; (800e8dc <osKernelStart+0x48>)
 800e8bc:	2202      	movs	r2, #2
 800e8be:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800e8c0:	f001 fdee 	bl	80104a0 <vTaskStartScheduler>
      stat = osOK;
 800e8c4:	2300      	movs	r3, #0
 800e8c6:	607b      	str	r3, [r7, #4]
 800e8c8:	e002      	b.n	800e8d0 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800e8ca:	f04f 33ff 	mov.w	r3, #4294967295
 800e8ce:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800e8d0:	687b      	ldr	r3, [r7, #4]
}
 800e8d2:	4618      	mov	r0, r3
 800e8d4:	3708      	adds	r7, #8
 800e8d6:	46bd      	mov	sp, r7
 800e8d8:	bd80      	pop	{r7, pc}
 800e8da:	bf00      	nop
 800e8dc:	200009c4 	.word	0x200009c4

0800e8e0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800e8e0:	b580      	push	{r7, lr}
 800e8e2:	b08e      	sub	sp, #56	; 0x38
 800e8e4:	af04      	add	r7, sp, #16
 800e8e6:	60f8      	str	r0, [r7, #12]
 800e8e8:	60b9      	str	r1, [r7, #8]
 800e8ea:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800e8ec:	2300      	movs	r3, #0
 800e8ee:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e8f0:	f3ef 8305 	mrs	r3, IPSR
 800e8f4:	617b      	str	r3, [r7, #20]
  return(result);
 800e8f6:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800e8f8:	2b00      	cmp	r3, #0
 800e8fa:	d17e      	bne.n	800e9fa <osThreadNew+0x11a>
 800e8fc:	68fb      	ldr	r3, [r7, #12]
 800e8fe:	2b00      	cmp	r3, #0
 800e900:	d07b      	beq.n	800e9fa <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800e902:	2380      	movs	r3, #128	; 0x80
 800e904:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800e906:	2318      	movs	r3, #24
 800e908:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800e90a:	2300      	movs	r3, #0
 800e90c:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800e90e:	f04f 33ff 	mov.w	r3, #4294967295
 800e912:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800e914:	687b      	ldr	r3, [r7, #4]
 800e916:	2b00      	cmp	r3, #0
 800e918:	d045      	beq.n	800e9a6 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800e91a:	687b      	ldr	r3, [r7, #4]
 800e91c:	681b      	ldr	r3, [r3, #0]
 800e91e:	2b00      	cmp	r3, #0
 800e920:	d002      	beq.n	800e928 <osThreadNew+0x48>
        name = attr->name;
 800e922:	687b      	ldr	r3, [r7, #4]
 800e924:	681b      	ldr	r3, [r3, #0]
 800e926:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800e928:	687b      	ldr	r3, [r7, #4]
 800e92a:	699b      	ldr	r3, [r3, #24]
 800e92c:	2b00      	cmp	r3, #0
 800e92e:	d002      	beq.n	800e936 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800e930:	687b      	ldr	r3, [r7, #4]
 800e932:	699b      	ldr	r3, [r3, #24]
 800e934:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800e936:	69fb      	ldr	r3, [r7, #28]
 800e938:	2b00      	cmp	r3, #0
 800e93a:	d008      	beq.n	800e94e <osThreadNew+0x6e>
 800e93c:	69fb      	ldr	r3, [r7, #28]
 800e93e:	2b38      	cmp	r3, #56	; 0x38
 800e940:	d805      	bhi.n	800e94e <osThreadNew+0x6e>
 800e942:	687b      	ldr	r3, [r7, #4]
 800e944:	685b      	ldr	r3, [r3, #4]
 800e946:	f003 0301 	and.w	r3, r3, #1
 800e94a:	2b00      	cmp	r3, #0
 800e94c:	d001      	beq.n	800e952 <osThreadNew+0x72>
        return (NULL);
 800e94e:	2300      	movs	r3, #0
 800e950:	e054      	b.n	800e9fc <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800e952:	687b      	ldr	r3, [r7, #4]
 800e954:	695b      	ldr	r3, [r3, #20]
 800e956:	2b00      	cmp	r3, #0
 800e958:	d003      	beq.n	800e962 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800e95a:	687b      	ldr	r3, [r7, #4]
 800e95c:	695b      	ldr	r3, [r3, #20]
 800e95e:	089b      	lsrs	r3, r3, #2
 800e960:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800e962:	687b      	ldr	r3, [r7, #4]
 800e964:	689b      	ldr	r3, [r3, #8]
 800e966:	2b00      	cmp	r3, #0
 800e968:	d00e      	beq.n	800e988 <osThreadNew+0xa8>
 800e96a:	687b      	ldr	r3, [r7, #4]
 800e96c:	68db      	ldr	r3, [r3, #12]
 800e96e:	2bbb      	cmp	r3, #187	; 0xbb
 800e970:	d90a      	bls.n	800e988 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800e972:	687b      	ldr	r3, [r7, #4]
 800e974:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800e976:	2b00      	cmp	r3, #0
 800e978:	d006      	beq.n	800e988 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800e97a:	687b      	ldr	r3, [r7, #4]
 800e97c:	695b      	ldr	r3, [r3, #20]
 800e97e:	2b00      	cmp	r3, #0
 800e980:	d002      	beq.n	800e988 <osThreadNew+0xa8>
        mem = 1;
 800e982:	2301      	movs	r3, #1
 800e984:	61bb      	str	r3, [r7, #24]
 800e986:	e010      	b.n	800e9aa <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800e988:	687b      	ldr	r3, [r7, #4]
 800e98a:	689b      	ldr	r3, [r3, #8]
 800e98c:	2b00      	cmp	r3, #0
 800e98e:	d10c      	bne.n	800e9aa <osThreadNew+0xca>
 800e990:	687b      	ldr	r3, [r7, #4]
 800e992:	68db      	ldr	r3, [r3, #12]
 800e994:	2b00      	cmp	r3, #0
 800e996:	d108      	bne.n	800e9aa <osThreadNew+0xca>
 800e998:	687b      	ldr	r3, [r7, #4]
 800e99a:	691b      	ldr	r3, [r3, #16]
 800e99c:	2b00      	cmp	r3, #0
 800e99e:	d104      	bne.n	800e9aa <osThreadNew+0xca>
          mem = 0;
 800e9a0:	2300      	movs	r3, #0
 800e9a2:	61bb      	str	r3, [r7, #24]
 800e9a4:	e001      	b.n	800e9aa <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800e9a6:	2300      	movs	r3, #0
 800e9a8:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800e9aa:	69bb      	ldr	r3, [r7, #24]
 800e9ac:	2b01      	cmp	r3, #1
 800e9ae:	d110      	bne.n	800e9d2 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800e9b0:	687b      	ldr	r3, [r7, #4]
 800e9b2:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800e9b4:	687a      	ldr	r2, [r7, #4]
 800e9b6:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800e9b8:	9202      	str	r2, [sp, #8]
 800e9ba:	9301      	str	r3, [sp, #4]
 800e9bc:	69fb      	ldr	r3, [r7, #28]
 800e9be:	9300      	str	r3, [sp, #0]
 800e9c0:	68bb      	ldr	r3, [r7, #8]
 800e9c2:	6a3a      	ldr	r2, [r7, #32]
 800e9c4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800e9c6:	68f8      	ldr	r0, [r7, #12]
 800e9c8:	f001 fb7e 	bl	80100c8 <xTaskCreateStatic>
 800e9cc:	4603      	mov	r3, r0
 800e9ce:	613b      	str	r3, [r7, #16]
 800e9d0:	e013      	b.n	800e9fa <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800e9d2:	69bb      	ldr	r3, [r7, #24]
 800e9d4:	2b00      	cmp	r3, #0
 800e9d6:	d110      	bne.n	800e9fa <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800e9d8:	6a3b      	ldr	r3, [r7, #32]
 800e9da:	b29a      	uxth	r2, r3
 800e9dc:	f107 0310 	add.w	r3, r7, #16
 800e9e0:	9301      	str	r3, [sp, #4]
 800e9e2:	69fb      	ldr	r3, [r7, #28]
 800e9e4:	9300      	str	r3, [sp, #0]
 800e9e6:	68bb      	ldr	r3, [r7, #8]
 800e9e8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800e9ea:	68f8      	ldr	r0, [r7, #12]
 800e9ec:	f001 fbc9 	bl	8010182 <xTaskCreate>
 800e9f0:	4603      	mov	r3, r0
 800e9f2:	2b01      	cmp	r3, #1
 800e9f4:	d001      	beq.n	800e9fa <osThreadNew+0x11a>
            hTask = NULL;
 800e9f6:	2300      	movs	r3, #0
 800e9f8:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800e9fa:	693b      	ldr	r3, [r7, #16]
}
 800e9fc:	4618      	mov	r0, r3
 800e9fe:	3728      	adds	r7, #40	; 0x28
 800ea00:	46bd      	mov	sp, r7
 800ea02:	bd80      	pop	{r7, pc}

0800ea04 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800ea04:	b580      	push	{r7, lr}
 800ea06:	b084      	sub	sp, #16
 800ea08:	af00      	add	r7, sp, #0
 800ea0a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ea0c:	f3ef 8305 	mrs	r3, IPSR
 800ea10:	60bb      	str	r3, [r7, #8]
  return(result);
 800ea12:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800ea14:	2b00      	cmp	r3, #0
 800ea16:	d003      	beq.n	800ea20 <osDelay+0x1c>
    stat = osErrorISR;
 800ea18:	f06f 0305 	mvn.w	r3, #5
 800ea1c:	60fb      	str	r3, [r7, #12]
 800ea1e:	e007      	b.n	800ea30 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800ea20:	2300      	movs	r3, #0
 800ea22:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800ea24:	687b      	ldr	r3, [r7, #4]
 800ea26:	2b00      	cmp	r3, #0
 800ea28:	d002      	beq.n	800ea30 <osDelay+0x2c>
      vTaskDelay(ticks);
 800ea2a:	6878      	ldr	r0, [r7, #4]
 800ea2c:	f001 fd04 	bl	8010438 <vTaskDelay>
    }
  }

  return (stat);
 800ea30:	68fb      	ldr	r3, [r7, #12]
}
 800ea32:	4618      	mov	r0, r3
 800ea34:	3710      	adds	r7, #16
 800ea36:	46bd      	mov	sp, r7
 800ea38:	bd80      	pop	{r7, pc}

0800ea3a <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800ea3a:	b580      	push	{r7, lr}
 800ea3c:	b08a      	sub	sp, #40	; 0x28
 800ea3e:	af02      	add	r7, sp, #8
 800ea40:	60f8      	str	r0, [r7, #12]
 800ea42:	60b9      	str	r1, [r7, #8]
 800ea44:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 800ea46:	2300      	movs	r3, #0
 800ea48:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ea4a:	f3ef 8305 	mrs	r3, IPSR
 800ea4e:	613b      	str	r3, [r7, #16]
  return(result);
 800ea50:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800ea52:	2b00      	cmp	r3, #0
 800ea54:	d175      	bne.n	800eb42 <osSemaphoreNew+0x108>
 800ea56:	68fb      	ldr	r3, [r7, #12]
 800ea58:	2b00      	cmp	r3, #0
 800ea5a:	d072      	beq.n	800eb42 <osSemaphoreNew+0x108>
 800ea5c:	68ba      	ldr	r2, [r7, #8]
 800ea5e:	68fb      	ldr	r3, [r7, #12]
 800ea60:	429a      	cmp	r2, r3
 800ea62:	d86e      	bhi.n	800eb42 <osSemaphoreNew+0x108>
    mem = -1;
 800ea64:	f04f 33ff 	mov.w	r3, #4294967295
 800ea68:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800ea6a:	687b      	ldr	r3, [r7, #4]
 800ea6c:	2b00      	cmp	r3, #0
 800ea6e:	d015      	beq.n	800ea9c <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800ea70:	687b      	ldr	r3, [r7, #4]
 800ea72:	689b      	ldr	r3, [r3, #8]
 800ea74:	2b00      	cmp	r3, #0
 800ea76:	d006      	beq.n	800ea86 <osSemaphoreNew+0x4c>
 800ea78:	687b      	ldr	r3, [r7, #4]
 800ea7a:	68db      	ldr	r3, [r3, #12]
 800ea7c:	2b4f      	cmp	r3, #79	; 0x4f
 800ea7e:	d902      	bls.n	800ea86 <osSemaphoreNew+0x4c>
        mem = 1;
 800ea80:	2301      	movs	r3, #1
 800ea82:	61bb      	str	r3, [r7, #24]
 800ea84:	e00c      	b.n	800eaa0 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800ea86:	687b      	ldr	r3, [r7, #4]
 800ea88:	689b      	ldr	r3, [r3, #8]
 800ea8a:	2b00      	cmp	r3, #0
 800ea8c:	d108      	bne.n	800eaa0 <osSemaphoreNew+0x66>
 800ea8e:	687b      	ldr	r3, [r7, #4]
 800ea90:	68db      	ldr	r3, [r3, #12]
 800ea92:	2b00      	cmp	r3, #0
 800ea94:	d104      	bne.n	800eaa0 <osSemaphoreNew+0x66>
          mem = 0;
 800ea96:	2300      	movs	r3, #0
 800ea98:	61bb      	str	r3, [r7, #24]
 800ea9a:	e001      	b.n	800eaa0 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 800ea9c:	2300      	movs	r3, #0
 800ea9e:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 800eaa0:	69bb      	ldr	r3, [r7, #24]
 800eaa2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eaa6:	d04c      	beq.n	800eb42 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 800eaa8:	68fb      	ldr	r3, [r7, #12]
 800eaaa:	2b01      	cmp	r3, #1
 800eaac:	d128      	bne.n	800eb00 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 800eaae:	69bb      	ldr	r3, [r7, #24]
 800eab0:	2b01      	cmp	r3, #1
 800eab2:	d10a      	bne.n	800eaca <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800eab4:	687b      	ldr	r3, [r7, #4]
 800eab6:	689b      	ldr	r3, [r3, #8]
 800eab8:	2203      	movs	r2, #3
 800eaba:	9200      	str	r2, [sp, #0]
 800eabc:	2200      	movs	r2, #0
 800eabe:	2100      	movs	r1, #0
 800eac0:	2001      	movs	r0, #1
 800eac2:	f000 fb5b 	bl	800f17c <xQueueGenericCreateStatic>
 800eac6:	61f8      	str	r0, [r7, #28]
 800eac8:	e005      	b.n	800ead6 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 800eaca:	2203      	movs	r2, #3
 800eacc:	2100      	movs	r1, #0
 800eace:	2001      	movs	r0, #1
 800ead0:	f000 fbcc 	bl	800f26c <xQueueGenericCreate>
 800ead4:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800ead6:	69fb      	ldr	r3, [r7, #28]
 800ead8:	2b00      	cmp	r3, #0
 800eada:	d022      	beq.n	800eb22 <osSemaphoreNew+0xe8>
 800eadc:	68bb      	ldr	r3, [r7, #8]
 800eade:	2b00      	cmp	r3, #0
 800eae0:	d01f      	beq.n	800eb22 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800eae2:	2300      	movs	r3, #0
 800eae4:	2200      	movs	r2, #0
 800eae6:	2100      	movs	r1, #0
 800eae8:	69f8      	ldr	r0, [r7, #28]
 800eaea:	f000 fc87 	bl	800f3fc <xQueueGenericSend>
 800eaee:	4603      	mov	r3, r0
 800eaf0:	2b01      	cmp	r3, #1
 800eaf2:	d016      	beq.n	800eb22 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 800eaf4:	69f8      	ldr	r0, [r7, #28]
 800eaf6:	f001 f913 	bl	800fd20 <vQueueDelete>
            hSemaphore = NULL;
 800eafa:	2300      	movs	r3, #0
 800eafc:	61fb      	str	r3, [r7, #28]
 800eafe:	e010      	b.n	800eb22 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 800eb00:	69bb      	ldr	r3, [r7, #24]
 800eb02:	2b01      	cmp	r3, #1
 800eb04:	d108      	bne.n	800eb18 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800eb06:	687b      	ldr	r3, [r7, #4]
 800eb08:	689b      	ldr	r3, [r3, #8]
 800eb0a:	461a      	mov	r2, r3
 800eb0c:	68b9      	ldr	r1, [r7, #8]
 800eb0e:	68f8      	ldr	r0, [r7, #12]
 800eb10:	f000 fc09 	bl	800f326 <xQueueCreateCountingSemaphoreStatic>
 800eb14:	61f8      	str	r0, [r7, #28]
 800eb16:	e004      	b.n	800eb22 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800eb18:	68b9      	ldr	r1, [r7, #8]
 800eb1a:	68f8      	ldr	r0, [r7, #12]
 800eb1c:	f000 fc3a 	bl	800f394 <xQueueCreateCountingSemaphore>
 800eb20:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800eb22:	69fb      	ldr	r3, [r7, #28]
 800eb24:	2b00      	cmp	r3, #0
 800eb26:	d00c      	beq.n	800eb42 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 800eb28:	687b      	ldr	r3, [r7, #4]
 800eb2a:	2b00      	cmp	r3, #0
 800eb2c:	d003      	beq.n	800eb36 <osSemaphoreNew+0xfc>
          name = attr->name;
 800eb2e:	687b      	ldr	r3, [r7, #4]
 800eb30:	681b      	ldr	r3, [r3, #0]
 800eb32:	617b      	str	r3, [r7, #20]
 800eb34:	e001      	b.n	800eb3a <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 800eb36:	2300      	movs	r3, #0
 800eb38:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800eb3a:	6979      	ldr	r1, [r7, #20]
 800eb3c:	69f8      	ldr	r0, [r7, #28]
 800eb3e:	f001 fa3b 	bl	800ffb8 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800eb42:	69fb      	ldr	r3, [r7, #28]
}
 800eb44:	4618      	mov	r0, r3
 800eb46:	3720      	adds	r7, #32
 800eb48:	46bd      	mov	sp, r7
 800eb4a:	bd80      	pop	{r7, pc}

0800eb4c <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 800eb4c:	b580      	push	{r7, lr}
 800eb4e:	b086      	sub	sp, #24
 800eb50:	af00      	add	r7, sp, #0
 800eb52:	6078      	str	r0, [r7, #4]
 800eb54:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800eb56:	687b      	ldr	r3, [r7, #4]
 800eb58:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800eb5a:	2300      	movs	r3, #0
 800eb5c:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800eb5e:	693b      	ldr	r3, [r7, #16]
 800eb60:	2b00      	cmp	r3, #0
 800eb62:	d103      	bne.n	800eb6c <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 800eb64:	f06f 0303 	mvn.w	r3, #3
 800eb68:	617b      	str	r3, [r7, #20]
 800eb6a:	e039      	b.n	800ebe0 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800eb6c:	f3ef 8305 	mrs	r3, IPSR
 800eb70:	60fb      	str	r3, [r7, #12]
  return(result);
 800eb72:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800eb74:	2b00      	cmp	r3, #0
 800eb76:	d022      	beq.n	800ebbe <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 800eb78:	683b      	ldr	r3, [r7, #0]
 800eb7a:	2b00      	cmp	r3, #0
 800eb7c:	d003      	beq.n	800eb86 <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 800eb7e:	f06f 0303 	mvn.w	r3, #3
 800eb82:	617b      	str	r3, [r7, #20]
 800eb84:	e02c      	b.n	800ebe0 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 800eb86:	2300      	movs	r3, #0
 800eb88:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800eb8a:	f107 0308 	add.w	r3, r7, #8
 800eb8e:	461a      	mov	r2, r3
 800eb90:	2100      	movs	r1, #0
 800eb92:	6938      	ldr	r0, [r7, #16]
 800eb94:	f001 f844 	bl	800fc20 <xQueueReceiveFromISR>
 800eb98:	4603      	mov	r3, r0
 800eb9a:	2b01      	cmp	r3, #1
 800eb9c:	d003      	beq.n	800eba6 <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 800eb9e:	f06f 0302 	mvn.w	r3, #2
 800eba2:	617b      	str	r3, [r7, #20]
 800eba4:	e01c      	b.n	800ebe0 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 800eba6:	68bb      	ldr	r3, [r7, #8]
 800eba8:	2b00      	cmp	r3, #0
 800ebaa:	d019      	beq.n	800ebe0 <osSemaphoreAcquire+0x94>
 800ebac:	4b0f      	ldr	r3, [pc, #60]	; (800ebec <osSemaphoreAcquire+0xa0>)
 800ebae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ebb2:	601a      	str	r2, [r3, #0]
 800ebb4:	f3bf 8f4f 	dsb	sy
 800ebb8:	f3bf 8f6f 	isb	sy
 800ebbc:	e010      	b.n	800ebe0 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800ebbe:	6839      	ldr	r1, [r7, #0]
 800ebc0:	6938      	ldr	r0, [r7, #16]
 800ebc2:	f000 ff21 	bl	800fa08 <xQueueSemaphoreTake>
 800ebc6:	4603      	mov	r3, r0
 800ebc8:	2b01      	cmp	r3, #1
 800ebca:	d009      	beq.n	800ebe0 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 800ebcc:	683b      	ldr	r3, [r7, #0]
 800ebce:	2b00      	cmp	r3, #0
 800ebd0:	d003      	beq.n	800ebda <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 800ebd2:	f06f 0301 	mvn.w	r3, #1
 800ebd6:	617b      	str	r3, [r7, #20]
 800ebd8:	e002      	b.n	800ebe0 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 800ebda:	f06f 0302 	mvn.w	r3, #2
 800ebde:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800ebe0:	697b      	ldr	r3, [r7, #20]
}
 800ebe2:	4618      	mov	r0, r3
 800ebe4:	3718      	adds	r7, #24
 800ebe6:	46bd      	mov	sp, r7
 800ebe8:	bd80      	pop	{r7, pc}
 800ebea:	bf00      	nop
 800ebec:	e000ed04 	.word	0xe000ed04

0800ebf0 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 800ebf0:	b580      	push	{r7, lr}
 800ebf2:	b086      	sub	sp, #24
 800ebf4:	af00      	add	r7, sp, #0
 800ebf6:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800ebf8:	687b      	ldr	r3, [r7, #4]
 800ebfa:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800ebfc:	2300      	movs	r3, #0
 800ebfe:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800ec00:	693b      	ldr	r3, [r7, #16]
 800ec02:	2b00      	cmp	r3, #0
 800ec04:	d103      	bne.n	800ec0e <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 800ec06:	f06f 0303 	mvn.w	r3, #3
 800ec0a:	617b      	str	r3, [r7, #20]
 800ec0c:	e02c      	b.n	800ec68 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ec0e:	f3ef 8305 	mrs	r3, IPSR
 800ec12:	60fb      	str	r3, [r7, #12]
  return(result);
 800ec14:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800ec16:	2b00      	cmp	r3, #0
 800ec18:	d01a      	beq.n	800ec50 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 800ec1a:	2300      	movs	r3, #0
 800ec1c:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800ec1e:	f107 0308 	add.w	r3, r7, #8
 800ec22:	4619      	mov	r1, r3
 800ec24:	6938      	ldr	r0, [r7, #16]
 800ec26:	f000 fd82 	bl	800f72e <xQueueGiveFromISR>
 800ec2a:	4603      	mov	r3, r0
 800ec2c:	2b01      	cmp	r3, #1
 800ec2e:	d003      	beq.n	800ec38 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 800ec30:	f06f 0302 	mvn.w	r3, #2
 800ec34:	617b      	str	r3, [r7, #20]
 800ec36:	e017      	b.n	800ec68 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 800ec38:	68bb      	ldr	r3, [r7, #8]
 800ec3a:	2b00      	cmp	r3, #0
 800ec3c:	d014      	beq.n	800ec68 <osSemaphoreRelease+0x78>
 800ec3e:	4b0d      	ldr	r3, [pc, #52]	; (800ec74 <osSemaphoreRelease+0x84>)
 800ec40:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ec44:	601a      	str	r2, [r3, #0]
 800ec46:	f3bf 8f4f 	dsb	sy
 800ec4a:	f3bf 8f6f 	isb	sy
 800ec4e:	e00b      	b.n	800ec68 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800ec50:	2300      	movs	r3, #0
 800ec52:	2200      	movs	r2, #0
 800ec54:	2100      	movs	r1, #0
 800ec56:	6938      	ldr	r0, [r7, #16]
 800ec58:	f000 fbd0 	bl	800f3fc <xQueueGenericSend>
 800ec5c:	4603      	mov	r3, r0
 800ec5e:	2b01      	cmp	r3, #1
 800ec60:	d002      	beq.n	800ec68 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 800ec62:	f06f 0302 	mvn.w	r3, #2
 800ec66:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 800ec68:	697b      	ldr	r3, [r7, #20]
}
 800ec6a:	4618      	mov	r0, r3
 800ec6c:	3718      	adds	r7, #24
 800ec6e:	46bd      	mov	sp, r7
 800ec70:	bd80      	pop	{r7, pc}
 800ec72:	bf00      	nop
 800ec74:	e000ed04 	.word	0xe000ed04

0800ec78 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800ec78:	b580      	push	{r7, lr}
 800ec7a:	b08a      	sub	sp, #40	; 0x28
 800ec7c:	af02      	add	r7, sp, #8
 800ec7e:	60f8      	str	r0, [r7, #12]
 800ec80:	60b9      	str	r1, [r7, #8]
 800ec82:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800ec84:	2300      	movs	r3, #0
 800ec86:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ec88:	f3ef 8305 	mrs	r3, IPSR
 800ec8c:	613b      	str	r3, [r7, #16]
  return(result);
 800ec8e:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800ec90:	2b00      	cmp	r3, #0
 800ec92:	d15f      	bne.n	800ed54 <osMessageQueueNew+0xdc>
 800ec94:	68fb      	ldr	r3, [r7, #12]
 800ec96:	2b00      	cmp	r3, #0
 800ec98:	d05c      	beq.n	800ed54 <osMessageQueueNew+0xdc>
 800ec9a:	68bb      	ldr	r3, [r7, #8]
 800ec9c:	2b00      	cmp	r3, #0
 800ec9e:	d059      	beq.n	800ed54 <osMessageQueueNew+0xdc>
    mem = -1;
 800eca0:	f04f 33ff 	mov.w	r3, #4294967295
 800eca4:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800eca6:	687b      	ldr	r3, [r7, #4]
 800eca8:	2b00      	cmp	r3, #0
 800ecaa:	d029      	beq.n	800ed00 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800ecac:	687b      	ldr	r3, [r7, #4]
 800ecae:	689b      	ldr	r3, [r3, #8]
 800ecb0:	2b00      	cmp	r3, #0
 800ecb2:	d012      	beq.n	800ecda <osMessageQueueNew+0x62>
 800ecb4:	687b      	ldr	r3, [r7, #4]
 800ecb6:	68db      	ldr	r3, [r3, #12]
 800ecb8:	2b4f      	cmp	r3, #79	; 0x4f
 800ecba:	d90e      	bls.n	800ecda <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800ecbc:	687b      	ldr	r3, [r7, #4]
 800ecbe:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800ecc0:	2b00      	cmp	r3, #0
 800ecc2:	d00a      	beq.n	800ecda <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800ecc4:	687b      	ldr	r3, [r7, #4]
 800ecc6:	695a      	ldr	r2, [r3, #20]
 800ecc8:	68fb      	ldr	r3, [r7, #12]
 800ecca:	68b9      	ldr	r1, [r7, #8]
 800eccc:	fb01 f303 	mul.w	r3, r1, r3
 800ecd0:	429a      	cmp	r2, r3
 800ecd2:	d302      	bcc.n	800ecda <osMessageQueueNew+0x62>
        mem = 1;
 800ecd4:	2301      	movs	r3, #1
 800ecd6:	61bb      	str	r3, [r7, #24]
 800ecd8:	e014      	b.n	800ed04 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800ecda:	687b      	ldr	r3, [r7, #4]
 800ecdc:	689b      	ldr	r3, [r3, #8]
 800ecde:	2b00      	cmp	r3, #0
 800ece0:	d110      	bne.n	800ed04 <osMessageQueueNew+0x8c>
 800ece2:	687b      	ldr	r3, [r7, #4]
 800ece4:	68db      	ldr	r3, [r3, #12]
 800ece6:	2b00      	cmp	r3, #0
 800ece8:	d10c      	bne.n	800ed04 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800ecea:	687b      	ldr	r3, [r7, #4]
 800ecec:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800ecee:	2b00      	cmp	r3, #0
 800ecf0:	d108      	bne.n	800ed04 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800ecf2:	687b      	ldr	r3, [r7, #4]
 800ecf4:	695b      	ldr	r3, [r3, #20]
 800ecf6:	2b00      	cmp	r3, #0
 800ecf8:	d104      	bne.n	800ed04 <osMessageQueueNew+0x8c>
          mem = 0;
 800ecfa:	2300      	movs	r3, #0
 800ecfc:	61bb      	str	r3, [r7, #24]
 800ecfe:	e001      	b.n	800ed04 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 800ed00:	2300      	movs	r3, #0
 800ed02:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800ed04:	69bb      	ldr	r3, [r7, #24]
 800ed06:	2b01      	cmp	r3, #1
 800ed08:	d10b      	bne.n	800ed22 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800ed0a:	687b      	ldr	r3, [r7, #4]
 800ed0c:	691a      	ldr	r2, [r3, #16]
 800ed0e:	687b      	ldr	r3, [r7, #4]
 800ed10:	689b      	ldr	r3, [r3, #8]
 800ed12:	2100      	movs	r1, #0
 800ed14:	9100      	str	r1, [sp, #0]
 800ed16:	68b9      	ldr	r1, [r7, #8]
 800ed18:	68f8      	ldr	r0, [r7, #12]
 800ed1a:	f000 fa2f 	bl	800f17c <xQueueGenericCreateStatic>
 800ed1e:	61f8      	str	r0, [r7, #28]
 800ed20:	e008      	b.n	800ed34 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 800ed22:	69bb      	ldr	r3, [r7, #24]
 800ed24:	2b00      	cmp	r3, #0
 800ed26:	d105      	bne.n	800ed34 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800ed28:	2200      	movs	r2, #0
 800ed2a:	68b9      	ldr	r1, [r7, #8]
 800ed2c:	68f8      	ldr	r0, [r7, #12]
 800ed2e:	f000 fa9d 	bl	800f26c <xQueueGenericCreate>
 800ed32:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800ed34:	69fb      	ldr	r3, [r7, #28]
 800ed36:	2b00      	cmp	r3, #0
 800ed38:	d00c      	beq.n	800ed54 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 800ed3a:	687b      	ldr	r3, [r7, #4]
 800ed3c:	2b00      	cmp	r3, #0
 800ed3e:	d003      	beq.n	800ed48 <osMessageQueueNew+0xd0>
        name = attr->name;
 800ed40:	687b      	ldr	r3, [r7, #4]
 800ed42:	681b      	ldr	r3, [r3, #0]
 800ed44:	617b      	str	r3, [r7, #20]
 800ed46:	e001      	b.n	800ed4c <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 800ed48:	2300      	movs	r3, #0
 800ed4a:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 800ed4c:	6979      	ldr	r1, [r7, #20]
 800ed4e:	69f8      	ldr	r0, [r7, #28]
 800ed50:	f001 f932 	bl	800ffb8 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800ed54:	69fb      	ldr	r3, [r7, #28]
}
 800ed56:	4618      	mov	r0, r3
 800ed58:	3720      	adds	r7, #32
 800ed5a:	46bd      	mov	sp, r7
 800ed5c:	bd80      	pop	{r7, pc}
	...

0800ed60 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800ed60:	b580      	push	{r7, lr}
 800ed62:	b088      	sub	sp, #32
 800ed64:	af00      	add	r7, sp, #0
 800ed66:	60f8      	str	r0, [r7, #12]
 800ed68:	60b9      	str	r1, [r7, #8]
 800ed6a:	603b      	str	r3, [r7, #0]
 800ed6c:	4613      	mov	r3, r2
 800ed6e:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800ed70:	68fb      	ldr	r3, [r7, #12]
 800ed72:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800ed74:	2300      	movs	r3, #0
 800ed76:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ed78:	f3ef 8305 	mrs	r3, IPSR
 800ed7c:	617b      	str	r3, [r7, #20]
  return(result);
 800ed7e:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800ed80:	2b00      	cmp	r3, #0
 800ed82:	d028      	beq.n	800edd6 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800ed84:	69bb      	ldr	r3, [r7, #24]
 800ed86:	2b00      	cmp	r3, #0
 800ed88:	d005      	beq.n	800ed96 <osMessageQueuePut+0x36>
 800ed8a:	68bb      	ldr	r3, [r7, #8]
 800ed8c:	2b00      	cmp	r3, #0
 800ed8e:	d002      	beq.n	800ed96 <osMessageQueuePut+0x36>
 800ed90:	683b      	ldr	r3, [r7, #0]
 800ed92:	2b00      	cmp	r3, #0
 800ed94:	d003      	beq.n	800ed9e <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 800ed96:	f06f 0303 	mvn.w	r3, #3
 800ed9a:	61fb      	str	r3, [r7, #28]
 800ed9c:	e038      	b.n	800ee10 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 800ed9e:	2300      	movs	r3, #0
 800eda0:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800eda2:	f107 0210 	add.w	r2, r7, #16
 800eda6:	2300      	movs	r3, #0
 800eda8:	68b9      	ldr	r1, [r7, #8]
 800edaa:	69b8      	ldr	r0, [r7, #24]
 800edac:	f000 fc24 	bl	800f5f8 <xQueueGenericSendFromISR>
 800edb0:	4603      	mov	r3, r0
 800edb2:	2b01      	cmp	r3, #1
 800edb4:	d003      	beq.n	800edbe <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 800edb6:	f06f 0302 	mvn.w	r3, #2
 800edba:	61fb      	str	r3, [r7, #28]
 800edbc:	e028      	b.n	800ee10 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 800edbe:	693b      	ldr	r3, [r7, #16]
 800edc0:	2b00      	cmp	r3, #0
 800edc2:	d025      	beq.n	800ee10 <osMessageQueuePut+0xb0>
 800edc4:	4b15      	ldr	r3, [pc, #84]	; (800ee1c <osMessageQueuePut+0xbc>)
 800edc6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800edca:	601a      	str	r2, [r3, #0]
 800edcc:	f3bf 8f4f 	dsb	sy
 800edd0:	f3bf 8f6f 	isb	sy
 800edd4:	e01c      	b.n	800ee10 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800edd6:	69bb      	ldr	r3, [r7, #24]
 800edd8:	2b00      	cmp	r3, #0
 800edda:	d002      	beq.n	800ede2 <osMessageQueuePut+0x82>
 800eddc:	68bb      	ldr	r3, [r7, #8]
 800edde:	2b00      	cmp	r3, #0
 800ede0:	d103      	bne.n	800edea <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 800ede2:	f06f 0303 	mvn.w	r3, #3
 800ede6:	61fb      	str	r3, [r7, #28]
 800ede8:	e012      	b.n	800ee10 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800edea:	2300      	movs	r3, #0
 800edec:	683a      	ldr	r2, [r7, #0]
 800edee:	68b9      	ldr	r1, [r7, #8]
 800edf0:	69b8      	ldr	r0, [r7, #24]
 800edf2:	f000 fb03 	bl	800f3fc <xQueueGenericSend>
 800edf6:	4603      	mov	r3, r0
 800edf8:	2b01      	cmp	r3, #1
 800edfa:	d009      	beq.n	800ee10 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 800edfc:	683b      	ldr	r3, [r7, #0]
 800edfe:	2b00      	cmp	r3, #0
 800ee00:	d003      	beq.n	800ee0a <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 800ee02:	f06f 0301 	mvn.w	r3, #1
 800ee06:	61fb      	str	r3, [r7, #28]
 800ee08:	e002      	b.n	800ee10 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 800ee0a:	f06f 0302 	mvn.w	r3, #2
 800ee0e:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800ee10:	69fb      	ldr	r3, [r7, #28]
}
 800ee12:	4618      	mov	r0, r3
 800ee14:	3720      	adds	r7, #32
 800ee16:	46bd      	mov	sp, r7
 800ee18:	bd80      	pop	{r7, pc}
 800ee1a:	bf00      	nop
 800ee1c:	e000ed04 	.word	0xe000ed04

0800ee20 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800ee20:	b580      	push	{r7, lr}
 800ee22:	b088      	sub	sp, #32
 800ee24:	af00      	add	r7, sp, #0
 800ee26:	60f8      	str	r0, [r7, #12]
 800ee28:	60b9      	str	r1, [r7, #8]
 800ee2a:	607a      	str	r2, [r7, #4]
 800ee2c:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800ee2e:	68fb      	ldr	r3, [r7, #12]
 800ee30:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800ee32:	2300      	movs	r3, #0
 800ee34:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ee36:	f3ef 8305 	mrs	r3, IPSR
 800ee3a:	617b      	str	r3, [r7, #20]
  return(result);
 800ee3c:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800ee3e:	2b00      	cmp	r3, #0
 800ee40:	d028      	beq.n	800ee94 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800ee42:	69bb      	ldr	r3, [r7, #24]
 800ee44:	2b00      	cmp	r3, #0
 800ee46:	d005      	beq.n	800ee54 <osMessageQueueGet+0x34>
 800ee48:	68bb      	ldr	r3, [r7, #8]
 800ee4a:	2b00      	cmp	r3, #0
 800ee4c:	d002      	beq.n	800ee54 <osMessageQueueGet+0x34>
 800ee4e:	683b      	ldr	r3, [r7, #0]
 800ee50:	2b00      	cmp	r3, #0
 800ee52:	d003      	beq.n	800ee5c <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 800ee54:	f06f 0303 	mvn.w	r3, #3
 800ee58:	61fb      	str	r3, [r7, #28]
 800ee5a:	e037      	b.n	800eecc <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 800ee5c:	2300      	movs	r3, #0
 800ee5e:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800ee60:	f107 0310 	add.w	r3, r7, #16
 800ee64:	461a      	mov	r2, r3
 800ee66:	68b9      	ldr	r1, [r7, #8]
 800ee68:	69b8      	ldr	r0, [r7, #24]
 800ee6a:	f000 fed9 	bl	800fc20 <xQueueReceiveFromISR>
 800ee6e:	4603      	mov	r3, r0
 800ee70:	2b01      	cmp	r3, #1
 800ee72:	d003      	beq.n	800ee7c <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 800ee74:	f06f 0302 	mvn.w	r3, #2
 800ee78:	61fb      	str	r3, [r7, #28]
 800ee7a:	e027      	b.n	800eecc <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 800ee7c:	693b      	ldr	r3, [r7, #16]
 800ee7e:	2b00      	cmp	r3, #0
 800ee80:	d024      	beq.n	800eecc <osMessageQueueGet+0xac>
 800ee82:	4b15      	ldr	r3, [pc, #84]	; (800eed8 <osMessageQueueGet+0xb8>)
 800ee84:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ee88:	601a      	str	r2, [r3, #0]
 800ee8a:	f3bf 8f4f 	dsb	sy
 800ee8e:	f3bf 8f6f 	isb	sy
 800ee92:	e01b      	b.n	800eecc <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800ee94:	69bb      	ldr	r3, [r7, #24]
 800ee96:	2b00      	cmp	r3, #0
 800ee98:	d002      	beq.n	800eea0 <osMessageQueueGet+0x80>
 800ee9a:	68bb      	ldr	r3, [r7, #8]
 800ee9c:	2b00      	cmp	r3, #0
 800ee9e:	d103      	bne.n	800eea8 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 800eea0:	f06f 0303 	mvn.w	r3, #3
 800eea4:	61fb      	str	r3, [r7, #28]
 800eea6:	e011      	b.n	800eecc <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800eea8:	683a      	ldr	r2, [r7, #0]
 800eeaa:	68b9      	ldr	r1, [r7, #8]
 800eeac:	69b8      	ldr	r0, [r7, #24]
 800eeae:	f000 fccb 	bl	800f848 <xQueueReceive>
 800eeb2:	4603      	mov	r3, r0
 800eeb4:	2b01      	cmp	r3, #1
 800eeb6:	d009      	beq.n	800eecc <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 800eeb8:	683b      	ldr	r3, [r7, #0]
 800eeba:	2b00      	cmp	r3, #0
 800eebc:	d003      	beq.n	800eec6 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 800eebe:	f06f 0301 	mvn.w	r3, #1
 800eec2:	61fb      	str	r3, [r7, #28]
 800eec4:	e002      	b.n	800eecc <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 800eec6:	f06f 0302 	mvn.w	r3, #2
 800eeca:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800eecc:	69fb      	ldr	r3, [r7, #28]
}
 800eece:	4618      	mov	r0, r3
 800eed0:	3720      	adds	r7, #32
 800eed2:	46bd      	mov	sp, r7
 800eed4:	bd80      	pop	{r7, pc}
 800eed6:	bf00      	nop
 800eed8:	e000ed04 	.word	0xe000ed04

0800eedc <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800eedc:	b480      	push	{r7}
 800eede:	b085      	sub	sp, #20
 800eee0:	af00      	add	r7, sp, #0
 800eee2:	60f8      	str	r0, [r7, #12]
 800eee4:	60b9      	str	r1, [r7, #8]
 800eee6:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800eee8:	68fb      	ldr	r3, [r7, #12]
 800eeea:	4a07      	ldr	r2, [pc, #28]	; (800ef08 <vApplicationGetIdleTaskMemory+0x2c>)
 800eeec:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800eeee:	68bb      	ldr	r3, [r7, #8]
 800eef0:	4a06      	ldr	r2, [pc, #24]	; (800ef0c <vApplicationGetIdleTaskMemory+0x30>)
 800eef2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800eef4:	687b      	ldr	r3, [r7, #4]
 800eef6:	2280      	movs	r2, #128	; 0x80
 800eef8:	601a      	str	r2, [r3, #0]
}
 800eefa:	bf00      	nop
 800eefc:	3714      	adds	r7, #20
 800eefe:	46bd      	mov	sp, r7
 800ef00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef04:	4770      	bx	lr
 800ef06:	bf00      	nop
 800ef08:	200009c8 	.word	0x200009c8
 800ef0c:	20000a84 	.word	0x20000a84

0800ef10 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800ef10:	b480      	push	{r7}
 800ef12:	b085      	sub	sp, #20
 800ef14:	af00      	add	r7, sp, #0
 800ef16:	60f8      	str	r0, [r7, #12]
 800ef18:	60b9      	str	r1, [r7, #8]
 800ef1a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800ef1c:	68fb      	ldr	r3, [r7, #12]
 800ef1e:	4a07      	ldr	r2, [pc, #28]	; (800ef3c <vApplicationGetTimerTaskMemory+0x2c>)
 800ef20:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800ef22:	68bb      	ldr	r3, [r7, #8]
 800ef24:	4a06      	ldr	r2, [pc, #24]	; (800ef40 <vApplicationGetTimerTaskMemory+0x30>)
 800ef26:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800ef28:	687b      	ldr	r3, [r7, #4]
 800ef2a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800ef2e:	601a      	str	r2, [r3, #0]
}
 800ef30:	bf00      	nop
 800ef32:	3714      	adds	r7, #20
 800ef34:	46bd      	mov	sp, r7
 800ef36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef3a:	4770      	bx	lr
 800ef3c:	20000c84 	.word	0x20000c84
 800ef40:	20000d40 	.word	0x20000d40

0800ef44 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800ef44:	b480      	push	{r7}
 800ef46:	b083      	sub	sp, #12
 800ef48:	af00      	add	r7, sp, #0
 800ef4a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ef4c:	687b      	ldr	r3, [r7, #4]
 800ef4e:	f103 0208 	add.w	r2, r3, #8
 800ef52:	687b      	ldr	r3, [r7, #4]
 800ef54:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800ef56:	687b      	ldr	r3, [r7, #4]
 800ef58:	f04f 32ff 	mov.w	r2, #4294967295
 800ef5c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ef5e:	687b      	ldr	r3, [r7, #4]
 800ef60:	f103 0208 	add.w	r2, r3, #8
 800ef64:	687b      	ldr	r3, [r7, #4]
 800ef66:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ef68:	687b      	ldr	r3, [r7, #4]
 800ef6a:	f103 0208 	add.w	r2, r3, #8
 800ef6e:	687b      	ldr	r3, [r7, #4]
 800ef70:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800ef72:	687b      	ldr	r3, [r7, #4]
 800ef74:	2200      	movs	r2, #0
 800ef76:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800ef78:	bf00      	nop
 800ef7a:	370c      	adds	r7, #12
 800ef7c:	46bd      	mov	sp, r7
 800ef7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef82:	4770      	bx	lr

0800ef84 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800ef84:	b480      	push	{r7}
 800ef86:	b083      	sub	sp, #12
 800ef88:	af00      	add	r7, sp, #0
 800ef8a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800ef8c:	687b      	ldr	r3, [r7, #4]
 800ef8e:	2200      	movs	r2, #0
 800ef90:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800ef92:	bf00      	nop
 800ef94:	370c      	adds	r7, #12
 800ef96:	46bd      	mov	sp, r7
 800ef98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef9c:	4770      	bx	lr

0800ef9e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800ef9e:	b480      	push	{r7}
 800efa0:	b085      	sub	sp, #20
 800efa2:	af00      	add	r7, sp, #0
 800efa4:	6078      	str	r0, [r7, #4]
 800efa6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800efa8:	687b      	ldr	r3, [r7, #4]
 800efaa:	685b      	ldr	r3, [r3, #4]
 800efac:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800efae:	683b      	ldr	r3, [r7, #0]
 800efb0:	68fa      	ldr	r2, [r7, #12]
 800efb2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800efb4:	68fb      	ldr	r3, [r7, #12]
 800efb6:	689a      	ldr	r2, [r3, #8]
 800efb8:	683b      	ldr	r3, [r7, #0]
 800efba:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800efbc:	68fb      	ldr	r3, [r7, #12]
 800efbe:	689b      	ldr	r3, [r3, #8]
 800efc0:	683a      	ldr	r2, [r7, #0]
 800efc2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800efc4:	68fb      	ldr	r3, [r7, #12]
 800efc6:	683a      	ldr	r2, [r7, #0]
 800efc8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800efca:	683b      	ldr	r3, [r7, #0]
 800efcc:	687a      	ldr	r2, [r7, #4]
 800efce:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800efd0:	687b      	ldr	r3, [r7, #4]
 800efd2:	681b      	ldr	r3, [r3, #0]
 800efd4:	1c5a      	adds	r2, r3, #1
 800efd6:	687b      	ldr	r3, [r7, #4]
 800efd8:	601a      	str	r2, [r3, #0]
}
 800efda:	bf00      	nop
 800efdc:	3714      	adds	r7, #20
 800efde:	46bd      	mov	sp, r7
 800efe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efe4:	4770      	bx	lr

0800efe6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800efe6:	b480      	push	{r7}
 800efe8:	b085      	sub	sp, #20
 800efea:	af00      	add	r7, sp, #0
 800efec:	6078      	str	r0, [r7, #4]
 800efee:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800eff0:	683b      	ldr	r3, [r7, #0]
 800eff2:	681b      	ldr	r3, [r3, #0]
 800eff4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800eff6:	68bb      	ldr	r3, [r7, #8]
 800eff8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800effc:	d103      	bne.n	800f006 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800effe:	687b      	ldr	r3, [r7, #4]
 800f000:	691b      	ldr	r3, [r3, #16]
 800f002:	60fb      	str	r3, [r7, #12]
 800f004:	e00c      	b.n	800f020 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800f006:	687b      	ldr	r3, [r7, #4]
 800f008:	3308      	adds	r3, #8
 800f00a:	60fb      	str	r3, [r7, #12]
 800f00c:	e002      	b.n	800f014 <vListInsert+0x2e>
 800f00e:	68fb      	ldr	r3, [r7, #12]
 800f010:	685b      	ldr	r3, [r3, #4]
 800f012:	60fb      	str	r3, [r7, #12]
 800f014:	68fb      	ldr	r3, [r7, #12]
 800f016:	685b      	ldr	r3, [r3, #4]
 800f018:	681b      	ldr	r3, [r3, #0]
 800f01a:	68ba      	ldr	r2, [r7, #8]
 800f01c:	429a      	cmp	r2, r3
 800f01e:	d2f6      	bcs.n	800f00e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800f020:	68fb      	ldr	r3, [r7, #12]
 800f022:	685a      	ldr	r2, [r3, #4]
 800f024:	683b      	ldr	r3, [r7, #0]
 800f026:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800f028:	683b      	ldr	r3, [r7, #0]
 800f02a:	685b      	ldr	r3, [r3, #4]
 800f02c:	683a      	ldr	r2, [r7, #0]
 800f02e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800f030:	683b      	ldr	r3, [r7, #0]
 800f032:	68fa      	ldr	r2, [r7, #12]
 800f034:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800f036:	68fb      	ldr	r3, [r7, #12]
 800f038:	683a      	ldr	r2, [r7, #0]
 800f03a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800f03c:	683b      	ldr	r3, [r7, #0]
 800f03e:	687a      	ldr	r2, [r7, #4]
 800f040:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800f042:	687b      	ldr	r3, [r7, #4]
 800f044:	681b      	ldr	r3, [r3, #0]
 800f046:	1c5a      	adds	r2, r3, #1
 800f048:	687b      	ldr	r3, [r7, #4]
 800f04a:	601a      	str	r2, [r3, #0]
}
 800f04c:	bf00      	nop
 800f04e:	3714      	adds	r7, #20
 800f050:	46bd      	mov	sp, r7
 800f052:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f056:	4770      	bx	lr

0800f058 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800f058:	b480      	push	{r7}
 800f05a:	b085      	sub	sp, #20
 800f05c:	af00      	add	r7, sp, #0
 800f05e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800f060:	687b      	ldr	r3, [r7, #4]
 800f062:	691b      	ldr	r3, [r3, #16]
 800f064:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800f066:	687b      	ldr	r3, [r7, #4]
 800f068:	685b      	ldr	r3, [r3, #4]
 800f06a:	687a      	ldr	r2, [r7, #4]
 800f06c:	6892      	ldr	r2, [r2, #8]
 800f06e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800f070:	687b      	ldr	r3, [r7, #4]
 800f072:	689b      	ldr	r3, [r3, #8]
 800f074:	687a      	ldr	r2, [r7, #4]
 800f076:	6852      	ldr	r2, [r2, #4]
 800f078:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800f07a:	68fb      	ldr	r3, [r7, #12]
 800f07c:	685b      	ldr	r3, [r3, #4]
 800f07e:	687a      	ldr	r2, [r7, #4]
 800f080:	429a      	cmp	r2, r3
 800f082:	d103      	bne.n	800f08c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800f084:	687b      	ldr	r3, [r7, #4]
 800f086:	689a      	ldr	r2, [r3, #8]
 800f088:	68fb      	ldr	r3, [r7, #12]
 800f08a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800f08c:	687b      	ldr	r3, [r7, #4]
 800f08e:	2200      	movs	r2, #0
 800f090:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800f092:	68fb      	ldr	r3, [r7, #12]
 800f094:	681b      	ldr	r3, [r3, #0]
 800f096:	1e5a      	subs	r2, r3, #1
 800f098:	68fb      	ldr	r3, [r7, #12]
 800f09a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800f09c:	68fb      	ldr	r3, [r7, #12]
 800f09e:	681b      	ldr	r3, [r3, #0]
}
 800f0a0:	4618      	mov	r0, r3
 800f0a2:	3714      	adds	r7, #20
 800f0a4:	46bd      	mov	sp, r7
 800f0a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0aa:	4770      	bx	lr

0800f0ac <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800f0ac:	b580      	push	{r7, lr}
 800f0ae:	b084      	sub	sp, #16
 800f0b0:	af00      	add	r7, sp, #0
 800f0b2:	6078      	str	r0, [r7, #4]
 800f0b4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800f0b6:	687b      	ldr	r3, [r7, #4]
 800f0b8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800f0ba:	68fb      	ldr	r3, [r7, #12]
 800f0bc:	2b00      	cmp	r3, #0
 800f0be:	d10a      	bne.n	800f0d6 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800f0c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f0c4:	f383 8811 	msr	BASEPRI, r3
 800f0c8:	f3bf 8f6f 	isb	sy
 800f0cc:	f3bf 8f4f 	dsb	sy
 800f0d0:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800f0d2:	bf00      	nop
 800f0d4:	e7fe      	b.n	800f0d4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800f0d6:	f002 fc95 	bl	8011a04 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800f0da:	68fb      	ldr	r3, [r7, #12]
 800f0dc:	681a      	ldr	r2, [r3, #0]
 800f0de:	68fb      	ldr	r3, [r7, #12]
 800f0e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f0e2:	68f9      	ldr	r1, [r7, #12]
 800f0e4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800f0e6:	fb01 f303 	mul.w	r3, r1, r3
 800f0ea:	441a      	add	r2, r3
 800f0ec:	68fb      	ldr	r3, [r7, #12]
 800f0ee:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800f0f0:	68fb      	ldr	r3, [r7, #12]
 800f0f2:	2200      	movs	r2, #0
 800f0f4:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800f0f6:	68fb      	ldr	r3, [r7, #12]
 800f0f8:	681a      	ldr	r2, [r3, #0]
 800f0fa:	68fb      	ldr	r3, [r7, #12]
 800f0fc:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800f0fe:	68fb      	ldr	r3, [r7, #12]
 800f100:	681a      	ldr	r2, [r3, #0]
 800f102:	68fb      	ldr	r3, [r7, #12]
 800f104:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f106:	3b01      	subs	r3, #1
 800f108:	68f9      	ldr	r1, [r7, #12]
 800f10a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800f10c:	fb01 f303 	mul.w	r3, r1, r3
 800f110:	441a      	add	r2, r3
 800f112:	68fb      	ldr	r3, [r7, #12]
 800f114:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800f116:	68fb      	ldr	r3, [r7, #12]
 800f118:	22ff      	movs	r2, #255	; 0xff
 800f11a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800f11e:	68fb      	ldr	r3, [r7, #12]
 800f120:	22ff      	movs	r2, #255	; 0xff
 800f122:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800f126:	683b      	ldr	r3, [r7, #0]
 800f128:	2b00      	cmp	r3, #0
 800f12a:	d114      	bne.n	800f156 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f12c:	68fb      	ldr	r3, [r7, #12]
 800f12e:	691b      	ldr	r3, [r3, #16]
 800f130:	2b00      	cmp	r3, #0
 800f132:	d01a      	beq.n	800f16a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f134:	68fb      	ldr	r3, [r7, #12]
 800f136:	3310      	adds	r3, #16
 800f138:	4618      	mov	r0, r3
 800f13a:	f001 fc4b 	bl	80109d4 <xTaskRemoveFromEventList>
 800f13e:	4603      	mov	r3, r0
 800f140:	2b00      	cmp	r3, #0
 800f142:	d012      	beq.n	800f16a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800f144:	4b0c      	ldr	r3, [pc, #48]	; (800f178 <xQueueGenericReset+0xcc>)
 800f146:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f14a:	601a      	str	r2, [r3, #0]
 800f14c:	f3bf 8f4f 	dsb	sy
 800f150:	f3bf 8f6f 	isb	sy
 800f154:	e009      	b.n	800f16a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800f156:	68fb      	ldr	r3, [r7, #12]
 800f158:	3310      	adds	r3, #16
 800f15a:	4618      	mov	r0, r3
 800f15c:	f7ff fef2 	bl	800ef44 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800f160:	68fb      	ldr	r3, [r7, #12]
 800f162:	3324      	adds	r3, #36	; 0x24
 800f164:	4618      	mov	r0, r3
 800f166:	f7ff feed 	bl	800ef44 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800f16a:	f002 fc7b 	bl	8011a64 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800f16e:	2301      	movs	r3, #1
}
 800f170:	4618      	mov	r0, r3
 800f172:	3710      	adds	r7, #16
 800f174:	46bd      	mov	sp, r7
 800f176:	bd80      	pop	{r7, pc}
 800f178:	e000ed04 	.word	0xe000ed04

0800f17c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800f17c:	b580      	push	{r7, lr}
 800f17e:	b08e      	sub	sp, #56	; 0x38
 800f180:	af02      	add	r7, sp, #8
 800f182:	60f8      	str	r0, [r7, #12]
 800f184:	60b9      	str	r1, [r7, #8]
 800f186:	607a      	str	r2, [r7, #4]
 800f188:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800f18a:	68fb      	ldr	r3, [r7, #12]
 800f18c:	2b00      	cmp	r3, #0
 800f18e:	d10a      	bne.n	800f1a6 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800f190:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f194:	f383 8811 	msr	BASEPRI, r3
 800f198:	f3bf 8f6f 	isb	sy
 800f19c:	f3bf 8f4f 	dsb	sy
 800f1a0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800f1a2:	bf00      	nop
 800f1a4:	e7fe      	b.n	800f1a4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800f1a6:	683b      	ldr	r3, [r7, #0]
 800f1a8:	2b00      	cmp	r3, #0
 800f1aa:	d10a      	bne.n	800f1c2 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800f1ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f1b0:	f383 8811 	msr	BASEPRI, r3
 800f1b4:	f3bf 8f6f 	isb	sy
 800f1b8:	f3bf 8f4f 	dsb	sy
 800f1bc:	627b      	str	r3, [r7, #36]	; 0x24
}
 800f1be:	bf00      	nop
 800f1c0:	e7fe      	b.n	800f1c0 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800f1c2:	687b      	ldr	r3, [r7, #4]
 800f1c4:	2b00      	cmp	r3, #0
 800f1c6:	d002      	beq.n	800f1ce <xQueueGenericCreateStatic+0x52>
 800f1c8:	68bb      	ldr	r3, [r7, #8]
 800f1ca:	2b00      	cmp	r3, #0
 800f1cc:	d001      	beq.n	800f1d2 <xQueueGenericCreateStatic+0x56>
 800f1ce:	2301      	movs	r3, #1
 800f1d0:	e000      	b.n	800f1d4 <xQueueGenericCreateStatic+0x58>
 800f1d2:	2300      	movs	r3, #0
 800f1d4:	2b00      	cmp	r3, #0
 800f1d6:	d10a      	bne.n	800f1ee <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800f1d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f1dc:	f383 8811 	msr	BASEPRI, r3
 800f1e0:	f3bf 8f6f 	isb	sy
 800f1e4:	f3bf 8f4f 	dsb	sy
 800f1e8:	623b      	str	r3, [r7, #32]
}
 800f1ea:	bf00      	nop
 800f1ec:	e7fe      	b.n	800f1ec <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800f1ee:	687b      	ldr	r3, [r7, #4]
 800f1f0:	2b00      	cmp	r3, #0
 800f1f2:	d102      	bne.n	800f1fa <xQueueGenericCreateStatic+0x7e>
 800f1f4:	68bb      	ldr	r3, [r7, #8]
 800f1f6:	2b00      	cmp	r3, #0
 800f1f8:	d101      	bne.n	800f1fe <xQueueGenericCreateStatic+0x82>
 800f1fa:	2301      	movs	r3, #1
 800f1fc:	e000      	b.n	800f200 <xQueueGenericCreateStatic+0x84>
 800f1fe:	2300      	movs	r3, #0
 800f200:	2b00      	cmp	r3, #0
 800f202:	d10a      	bne.n	800f21a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800f204:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f208:	f383 8811 	msr	BASEPRI, r3
 800f20c:	f3bf 8f6f 	isb	sy
 800f210:	f3bf 8f4f 	dsb	sy
 800f214:	61fb      	str	r3, [r7, #28]
}
 800f216:	bf00      	nop
 800f218:	e7fe      	b.n	800f218 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800f21a:	2350      	movs	r3, #80	; 0x50
 800f21c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800f21e:	697b      	ldr	r3, [r7, #20]
 800f220:	2b50      	cmp	r3, #80	; 0x50
 800f222:	d00a      	beq.n	800f23a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800f224:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f228:	f383 8811 	msr	BASEPRI, r3
 800f22c:	f3bf 8f6f 	isb	sy
 800f230:	f3bf 8f4f 	dsb	sy
 800f234:	61bb      	str	r3, [r7, #24]
}
 800f236:	bf00      	nop
 800f238:	e7fe      	b.n	800f238 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800f23a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800f23c:	683b      	ldr	r3, [r7, #0]
 800f23e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800f240:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f242:	2b00      	cmp	r3, #0
 800f244:	d00d      	beq.n	800f262 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800f246:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f248:	2201      	movs	r2, #1
 800f24a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800f24e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800f252:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f254:	9300      	str	r3, [sp, #0]
 800f256:	4613      	mov	r3, r2
 800f258:	687a      	ldr	r2, [r7, #4]
 800f25a:	68b9      	ldr	r1, [r7, #8]
 800f25c:	68f8      	ldr	r0, [r7, #12]
 800f25e:	f000 f83f 	bl	800f2e0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800f262:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800f264:	4618      	mov	r0, r3
 800f266:	3730      	adds	r7, #48	; 0x30
 800f268:	46bd      	mov	sp, r7
 800f26a:	bd80      	pop	{r7, pc}

0800f26c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800f26c:	b580      	push	{r7, lr}
 800f26e:	b08a      	sub	sp, #40	; 0x28
 800f270:	af02      	add	r7, sp, #8
 800f272:	60f8      	str	r0, [r7, #12]
 800f274:	60b9      	str	r1, [r7, #8]
 800f276:	4613      	mov	r3, r2
 800f278:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800f27a:	68fb      	ldr	r3, [r7, #12]
 800f27c:	2b00      	cmp	r3, #0
 800f27e:	d10a      	bne.n	800f296 <xQueueGenericCreate+0x2a>
	__asm volatile
 800f280:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f284:	f383 8811 	msr	BASEPRI, r3
 800f288:	f3bf 8f6f 	isb	sy
 800f28c:	f3bf 8f4f 	dsb	sy
 800f290:	613b      	str	r3, [r7, #16]
}
 800f292:	bf00      	nop
 800f294:	e7fe      	b.n	800f294 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f296:	68fb      	ldr	r3, [r7, #12]
 800f298:	68ba      	ldr	r2, [r7, #8]
 800f29a:	fb02 f303 	mul.w	r3, r2, r3
 800f29e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800f2a0:	69fb      	ldr	r3, [r7, #28]
 800f2a2:	3350      	adds	r3, #80	; 0x50
 800f2a4:	4618      	mov	r0, r3
 800f2a6:	f002 fccf 	bl	8011c48 <pvPortMalloc>
 800f2aa:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800f2ac:	69bb      	ldr	r3, [r7, #24]
 800f2ae:	2b00      	cmp	r3, #0
 800f2b0:	d011      	beq.n	800f2d6 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800f2b2:	69bb      	ldr	r3, [r7, #24]
 800f2b4:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800f2b6:	697b      	ldr	r3, [r7, #20]
 800f2b8:	3350      	adds	r3, #80	; 0x50
 800f2ba:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800f2bc:	69bb      	ldr	r3, [r7, #24]
 800f2be:	2200      	movs	r2, #0
 800f2c0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800f2c4:	79fa      	ldrb	r2, [r7, #7]
 800f2c6:	69bb      	ldr	r3, [r7, #24]
 800f2c8:	9300      	str	r3, [sp, #0]
 800f2ca:	4613      	mov	r3, r2
 800f2cc:	697a      	ldr	r2, [r7, #20]
 800f2ce:	68b9      	ldr	r1, [r7, #8]
 800f2d0:	68f8      	ldr	r0, [r7, #12]
 800f2d2:	f000 f805 	bl	800f2e0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800f2d6:	69bb      	ldr	r3, [r7, #24]
	}
 800f2d8:	4618      	mov	r0, r3
 800f2da:	3720      	adds	r7, #32
 800f2dc:	46bd      	mov	sp, r7
 800f2de:	bd80      	pop	{r7, pc}

0800f2e0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800f2e0:	b580      	push	{r7, lr}
 800f2e2:	b084      	sub	sp, #16
 800f2e4:	af00      	add	r7, sp, #0
 800f2e6:	60f8      	str	r0, [r7, #12]
 800f2e8:	60b9      	str	r1, [r7, #8]
 800f2ea:	607a      	str	r2, [r7, #4]
 800f2ec:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800f2ee:	68bb      	ldr	r3, [r7, #8]
 800f2f0:	2b00      	cmp	r3, #0
 800f2f2:	d103      	bne.n	800f2fc <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800f2f4:	69bb      	ldr	r3, [r7, #24]
 800f2f6:	69ba      	ldr	r2, [r7, #24]
 800f2f8:	601a      	str	r2, [r3, #0]
 800f2fa:	e002      	b.n	800f302 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800f2fc:	69bb      	ldr	r3, [r7, #24]
 800f2fe:	687a      	ldr	r2, [r7, #4]
 800f300:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800f302:	69bb      	ldr	r3, [r7, #24]
 800f304:	68fa      	ldr	r2, [r7, #12]
 800f306:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800f308:	69bb      	ldr	r3, [r7, #24]
 800f30a:	68ba      	ldr	r2, [r7, #8]
 800f30c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800f30e:	2101      	movs	r1, #1
 800f310:	69b8      	ldr	r0, [r7, #24]
 800f312:	f7ff fecb 	bl	800f0ac <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800f316:	69bb      	ldr	r3, [r7, #24]
 800f318:	78fa      	ldrb	r2, [r7, #3]
 800f31a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800f31e:	bf00      	nop
 800f320:	3710      	adds	r7, #16
 800f322:	46bd      	mov	sp, r7
 800f324:	bd80      	pop	{r7, pc}

0800f326 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800f326:	b580      	push	{r7, lr}
 800f328:	b08a      	sub	sp, #40	; 0x28
 800f32a:	af02      	add	r7, sp, #8
 800f32c:	60f8      	str	r0, [r7, #12]
 800f32e:	60b9      	str	r1, [r7, #8]
 800f330:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800f332:	68fb      	ldr	r3, [r7, #12]
 800f334:	2b00      	cmp	r3, #0
 800f336:	d10a      	bne.n	800f34e <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 800f338:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f33c:	f383 8811 	msr	BASEPRI, r3
 800f340:	f3bf 8f6f 	isb	sy
 800f344:	f3bf 8f4f 	dsb	sy
 800f348:	61bb      	str	r3, [r7, #24]
}
 800f34a:	bf00      	nop
 800f34c:	e7fe      	b.n	800f34c <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 800f34e:	68ba      	ldr	r2, [r7, #8]
 800f350:	68fb      	ldr	r3, [r7, #12]
 800f352:	429a      	cmp	r2, r3
 800f354:	d90a      	bls.n	800f36c <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 800f356:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f35a:	f383 8811 	msr	BASEPRI, r3
 800f35e:	f3bf 8f6f 	isb	sy
 800f362:	f3bf 8f4f 	dsb	sy
 800f366:	617b      	str	r3, [r7, #20]
}
 800f368:	bf00      	nop
 800f36a:	e7fe      	b.n	800f36a <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800f36c:	2302      	movs	r3, #2
 800f36e:	9300      	str	r3, [sp, #0]
 800f370:	687b      	ldr	r3, [r7, #4]
 800f372:	2200      	movs	r2, #0
 800f374:	2100      	movs	r1, #0
 800f376:	68f8      	ldr	r0, [r7, #12]
 800f378:	f7ff ff00 	bl	800f17c <xQueueGenericCreateStatic>
 800f37c:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800f37e:	69fb      	ldr	r3, [r7, #28]
 800f380:	2b00      	cmp	r3, #0
 800f382:	d002      	beq.n	800f38a <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800f384:	69fb      	ldr	r3, [r7, #28]
 800f386:	68ba      	ldr	r2, [r7, #8]
 800f388:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800f38a:	69fb      	ldr	r3, [r7, #28]
	}
 800f38c:	4618      	mov	r0, r3
 800f38e:	3720      	adds	r7, #32
 800f390:	46bd      	mov	sp, r7
 800f392:	bd80      	pop	{r7, pc}

0800f394 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800f394:	b580      	push	{r7, lr}
 800f396:	b086      	sub	sp, #24
 800f398:	af00      	add	r7, sp, #0
 800f39a:	6078      	str	r0, [r7, #4]
 800f39c:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800f39e:	687b      	ldr	r3, [r7, #4]
 800f3a0:	2b00      	cmp	r3, #0
 800f3a2:	d10a      	bne.n	800f3ba <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 800f3a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f3a8:	f383 8811 	msr	BASEPRI, r3
 800f3ac:	f3bf 8f6f 	isb	sy
 800f3b0:	f3bf 8f4f 	dsb	sy
 800f3b4:	613b      	str	r3, [r7, #16]
}
 800f3b6:	bf00      	nop
 800f3b8:	e7fe      	b.n	800f3b8 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 800f3ba:	683a      	ldr	r2, [r7, #0]
 800f3bc:	687b      	ldr	r3, [r7, #4]
 800f3be:	429a      	cmp	r2, r3
 800f3c0:	d90a      	bls.n	800f3d8 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 800f3c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f3c6:	f383 8811 	msr	BASEPRI, r3
 800f3ca:	f3bf 8f6f 	isb	sy
 800f3ce:	f3bf 8f4f 	dsb	sy
 800f3d2:	60fb      	str	r3, [r7, #12]
}
 800f3d4:	bf00      	nop
 800f3d6:	e7fe      	b.n	800f3d6 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800f3d8:	2202      	movs	r2, #2
 800f3da:	2100      	movs	r1, #0
 800f3dc:	6878      	ldr	r0, [r7, #4]
 800f3de:	f7ff ff45 	bl	800f26c <xQueueGenericCreate>
 800f3e2:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800f3e4:	697b      	ldr	r3, [r7, #20]
 800f3e6:	2b00      	cmp	r3, #0
 800f3e8:	d002      	beq.n	800f3f0 <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800f3ea:	697b      	ldr	r3, [r7, #20]
 800f3ec:	683a      	ldr	r2, [r7, #0]
 800f3ee:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800f3f0:	697b      	ldr	r3, [r7, #20]
	}
 800f3f2:	4618      	mov	r0, r3
 800f3f4:	3718      	adds	r7, #24
 800f3f6:	46bd      	mov	sp, r7
 800f3f8:	bd80      	pop	{r7, pc}
	...

0800f3fc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800f3fc:	b580      	push	{r7, lr}
 800f3fe:	b08e      	sub	sp, #56	; 0x38
 800f400:	af00      	add	r7, sp, #0
 800f402:	60f8      	str	r0, [r7, #12]
 800f404:	60b9      	str	r1, [r7, #8]
 800f406:	607a      	str	r2, [r7, #4]
 800f408:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800f40a:	2300      	movs	r3, #0
 800f40c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800f40e:	68fb      	ldr	r3, [r7, #12]
 800f410:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800f412:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f414:	2b00      	cmp	r3, #0
 800f416:	d10a      	bne.n	800f42e <xQueueGenericSend+0x32>
	__asm volatile
 800f418:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f41c:	f383 8811 	msr	BASEPRI, r3
 800f420:	f3bf 8f6f 	isb	sy
 800f424:	f3bf 8f4f 	dsb	sy
 800f428:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800f42a:	bf00      	nop
 800f42c:	e7fe      	b.n	800f42c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800f42e:	68bb      	ldr	r3, [r7, #8]
 800f430:	2b00      	cmp	r3, #0
 800f432:	d103      	bne.n	800f43c <xQueueGenericSend+0x40>
 800f434:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f436:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f438:	2b00      	cmp	r3, #0
 800f43a:	d101      	bne.n	800f440 <xQueueGenericSend+0x44>
 800f43c:	2301      	movs	r3, #1
 800f43e:	e000      	b.n	800f442 <xQueueGenericSend+0x46>
 800f440:	2300      	movs	r3, #0
 800f442:	2b00      	cmp	r3, #0
 800f444:	d10a      	bne.n	800f45c <xQueueGenericSend+0x60>
	__asm volatile
 800f446:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f44a:	f383 8811 	msr	BASEPRI, r3
 800f44e:	f3bf 8f6f 	isb	sy
 800f452:	f3bf 8f4f 	dsb	sy
 800f456:	627b      	str	r3, [r7, #36]	; 0x24
}
 800f458:	bf00      	nop
 800f45a:	e7fe      	b.n	800f45a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800f45c:	683b      	ldr	r3, [r7, #0]
 800f45e:	2b02      	cmp	r3, #2
 800f460:	d103      	bne.n	800f46a <xQueueGenericSend+0x6e>
 800f462:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f464:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f466:	2b01      	cmp	r3, #1
 800f468:	d101      	bne.n	800f46e <xQueueGenericSend+0x72>
 800f46a:	2301      	movs	r3, #1
 800f46c:	e000      	b.n	800f470 <xQueueGenericSend+0x74>
 800f46e:	2300      	movs	r3, #0
 800f470:	2b00      	cmp	r3, #0
 800f472:	d10a      	bne.n	800f48a <xQueueGenericSend+0x8e>
	__asm volatile
 800f474:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f478:	f383 8811 	msr	BASEPRI, r3
 800f47c:	f3bf 8f6f 	isb	sy
 800f480:	f3bf 8f4f 	dsb	sy
 800f484:	623b      	str	r3, [r7, #32]
}
 800f486:	bf00      	nop
 800f488:	e7fe      	b.n	800f488 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800f48a:	f001 fc65 	bl	8010d58 <xTaskGetSchedulerState>
 800f48e:	4603      	mov	r3, r0
 800f490:	2b00      	cmp	r3, #0
 800f492:	d102      	bne.n	800f49a <xQueueGenericSend+0x9e>
 800f494:	687b      	ldr	r3, [r7, #4]
 800f496:	2b00      	cmp	r3, #0
 800f498:	d101      	bne.n	800f49e <xQueueGenericSend+0xa2>
 800f49a:	2301      	movs	r3, #1
 800f49c:	e000      	b.n	800f4a0 <xQueueGenericSend+0xa4>
 800f49e:	2300      	movs	r3, #0
 800f4a0:	2b00      	cmp	r3, #0
 800f4a2:	d10a      	bne.n	800f4ba <xQueueGenericSend+0xbe>
	__asm volatile
 800f4a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f4a8:	f383 8811 	msr	BASEPRI, r3
 800f4ac:	f3bf 8f6f 	isb	sy
 800f4b0:	f3bf 8f4f 	dsb	sy
 800f4b4:	61fb      	str	r3, [r7, #28]
}
 800f4b6:	bf00      	nop
 800f4b8:	e7fe      	b.n	800f4b8 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800f4ba:	f002 faa3 	bl	8011a04 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800f4be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f4c0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f4c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f4c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f4c6:	429a      	cmp	r2, r3
 800f4c8:	d302      	bcc.n	800f4d0 <xQueueGenericSend+0xd4>
 800f4ca:	683b      	ldr	r3, [r7, #0]
 800f4cc:	2b02      	cmp	r3, #2
 800f4ce:	d129      	bne.n	800f524 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800f4d0:	683a      	ldr	r2, [r7, #0]
 800f4d2:	68b9      	ldr	r1, [r7, #8]
 800f4d4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f4d6:	f000 fc5e 	bl	800fd96 <prvCopyDataToQueue>
 800f4da:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800f4dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f4de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f4e0:	2b00      	cmp	r3, #0
 800f4e2:	d010      	beq.n	800f506 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800f4e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f4e6:	3324      	adds	r3, #36	; 0x24
 800f4e8:	4618      	mov	r0, r3
 800f4ea:	f001 fa73 	bl	80109d4 <xTaskRemoveFromEventList>
 800f4ee:	4603      	mov	r3, r0
 800f4f0:	2b00      	cmp	r3, #0
 800f4f2:	d013      	beq.n	800f51c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800f4f4:	4b3f      	ldr	r3, [pc, #252]	; (800f5f4 <xQueueGenericSend+0x1f8>)
 800f4f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f4fa:	601a      	str	r2, [r3, #0]
 800f4fc:	f3bf 8f4f 	dsb	sy
 800f500:	f3bf 8f6f 	isb	sy
 800f504:	e00a      	b.n	800f51c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800f506:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f508:	2b00      	cmp	r3, #0
 800f50a:	d007      	beq.n	800f51c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800f50c:	4b39      	ldr	r3, [pc, #228]	; (800f5f4 <xQueueGenericSend+0x1f8>)
 800f50e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f512:	601a      	str	r2, [r3, #0]
 800f514:	f3bf 8f4f 	dsb	sy
 800f518:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800f51c:	f002 faa2 	bl	8011a64 <vPortExitCritical>
				return pdPASS;
 800f520:	2301      	movs	r3, #1
 800f522:	e063      	b.n	800f5ec <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800f524:	687b      	ldr	r3, [r7, #4]
 800f526:	2b00      	cmp	r3, #0
 800f528:	d103      	bne.n	800f532 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800f52a:	f002 fa9b 	bl	8011a64 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800f52e:	2300      	movs	r3, #0
 800f530:	e05c      	b.n	800f5ec <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800f532:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f534:	2b00      	cmp	r3, #0
 800f536:	d106      	bne.n	800f546 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800f538:	f107 0314 	add.w	r3, r7, #20
 800f53c:	4618      	mov	r0, r3
 800f53e:	f001 faad 	bl	8010a9c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800f542:	2301      	movs	r3, #1
 800f544:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800f546:	f002 fa8d 	bl	8011a64 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800f54a:	f001 f819 	bl	8010580 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800f54e:	f002 fa59 	bl	8011a04 <vPortEnterCritical>
 800f552:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f554:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800f558:	b25b      	sxtb	r3, r3
 800f55a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f55e:	d103      	bne.n	800f568 <xQueueGenericSend+0x16c>
 800f560:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f562:	2200      	movs	r2, #0
 800f564:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800f568:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f56a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f56e:	b25b      	sxtb	r3, r3
 800f570:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f574:	d103      	bne.n	800f57e <xQueueGenericSend+0x182>
 800f576:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f578:	2200      	movs	r2, #0
 800f57a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800f57e:	f002 fa71 	bl	8011a64 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800f582:	1d3a      	adds	r2, r7, #4
 800f584:	f107 0314 	add.w	r3, r7, #20
 800f588:	4611      	mov	r1, r2
 800f58a:	4618      	mov	r0, r3
 800f58c:	f001 fa9c 	bl	8010ac8 <xTaskCheckForTimeOut>
 800f590:	4603      	mov	r3, r0
 800f592:	2b00      	cmp	r3, #0
 800f594:	d124      	bne.n	800f5e0 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800f596:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f598:	f000 fcf5 	bl	800ff86 <prvIsQueueFull>
 800f59c:	4603      	mov	r3, r0
 800f59e:	2b00      	cmp	r3, #0
 800f5a0:	d018      	beq.n	800f5d4 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800f5a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f5a4:	3310      	adds	r3, #16
 800f5a6:	687a      	ldr	r2, [r7, #4]
 800f5a8:	4611      	mov	r1, r2
 800f5aa:	4618      	mov	r0, r3
 800f5ac:	f001 f9c2 	bl	8010934 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800f5b0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f5b2:	f000 fc80 	bl	800feb6 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800f5b6:	f000 fff1 	bl	801059c <xTaskResumeAll>
 800f5ba:	4603      	mov	r3, r0
 800f5bc:	2b00      	cmp	r3, #0
 800f5be:	f47f af7c 	bne.w	800f4ba <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800f5c2:	4b0c      	ldr	r3, [pc, #48]	; (800f5f4 <xQueueGenericSend+0x1f8>)
 800f5c4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f5c8:	601a      	str	r2, [r3, #0]
 800f5ca:	f3bf 8f4f 	dsb	sy
 800f5ce:	f3bf 8f6f 	isb	sy
 800f5d2:	e772      	b.n	800f4ba <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800f5d4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f5d6:	f000 fc6e 	bl	800feb6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800f5da:	f000 ffdf 	bl	801059c <xTaskResumeAll>
 800f5de:	e76c      	b.n	800f4ba <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800f5e0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f5e2:	f000 fc68 	bl	800feb6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800f5e6:	f000 ffd9 	bl	801059c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800f5ea:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800f5ec:	4618      	mov	r0, r3
 800f5ee:	3738      	adds	r7, #56	; 0x38
 800f5f0:	46bd      	mov	sp, r7
 800f5f2:	bd80      	pop	{r7, pc}
 800f5f4:	e000ed04 	.word	0xe000ed04

0800f5f8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800f5f8:	b580      	push	{r7, lr}
 800f5fa:	b090      	sub	sp, #64	; 0x40
 800f5fc:	af00      	add	r7, sp, #0
 800f5fe:	60f8      	str	r0, [r7, #12]
 800f600:	60b9      	str	r1, [r7, #8]
 800f602:	607a      	str	r2, [r7, #4]
 800f604:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800f606:	68fb      	ldr	r3, [r7, #12]
 800f608:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800f60a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f60c:	2b00      	cmp	r3, #0
 800f60e:	d10a      	bne.n	800f626 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800f610:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f614:	f383 8811 	msr	BASEPRI, r3
 800f618:	f3bf 8f6f 	isb	sy
 800f61c:	f3bf 8f4f 	dsb	sy
 800f620:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800f622:	bf00      	nop
 800f624:	e7fe      	b.n	800f624 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800f626:	68bb      	ldr	r3, [r7, #8]
 800f628:	2b00      	cmp	r3, #0
 800f62a:	d103      	bne.n	800f634 <xQueueGenericSendFromISR+0x3c>
 800f62c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f62e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f630:	2b00      	cmp	r3, #0
 800f632:	d101      	bne.n	800f638 <xQueueGenericSendFromISR+0x40>
 800f634:	2301      	movs	r3, #1
 800f636:	e000      	b.n	800f63a <xQueueGenericSendFromISR+0x42>
 800f638:	2300      	movs	r3, #0
 800f63a:	2b00      	cmp	r3, #0
 800f63c:	d10a      	bne.n	800f654 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800f63e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f642:	f383 8811 	msr	BASEPRI, r3
 800f646:	f3bf 8f6f 	isb	sy
 800f64a:	f3bf 8f4f 	dsb	sy
 800f64e:	627b      	str	r3, [r7, #36]	; 0x24
}
 800f650:	bf00      	nop
 800f652:	e7fe      	b.n	800f652 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800f654:	683b      	ldr	r3, [r7, #0]
 800f656:	2b02      	cmp	r3, #2
 800f658:	d103      	bne.n	800f662 <xQueueGenericSendFromISR+0x6a>
 800f65a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f65c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f65e:	2b01      	cmp	r3, #1
 800f660:	d101      	bne.n	800f666 <xQueueGenericSendFromISR+0x6e>
 800f662:	2301      	movs	r3, #1
 800f664:	e000      	b.n	800f668 <xQueueGenericSendFromISR+0x70>
 800f666:	2300      	movs	r3, #0
 800f668:	2b00      	cmp	r3, #0
 800f66a:	d10a      	bne.n	800f682 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800f66c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f670:	f383 8811 	msr	BASEPRI, r3
 800f674:	f3bf 8f6f 	isb	sy
 800f678:	f3bf 8f4f 	dsb	sy
 800f67c:	623b      	str	r3, [r7, #32]
}
 800f67e:	bf00      	nop
 800f680:	e7fe      	b.n	800f680 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800f682:	f002 faa1 	bl	8011bc8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800f686:	f3ef 8211 	mrs	r2, BASEPRI
 800f68a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f68e:	f383 8811 	msr	BASEPRI, r3
 800f692:	f3bf 8f6f 	isb	sy
 800f696:	f3bf 8f4f 	dsb	sy
 800f69a:	61fa      	str	r2, [r7, #28]
 800f69c:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800f69e:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800f6a0:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800f6a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f6a4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f6a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f6a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f6aa:	429a      	cmp	r2, r3
 800f6ac:	d302      	bcc.n	800f6b4 <xQueueGenericSendFromISR+0xbc>
 800f6ae:	683b      	ldr	r3, [r7, #0]
 800f6b0:	2b02      	cmp	r3, #2
 800f6b2:	d12f      	bne.n	800f714 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800f6b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f6b6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f6ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800f6be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f6c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f6c2:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800f6c4:	683a      	ldr	r2, [r7, #0]
 800f6c6:	68b9      	ldr	r1, [r7, #8]
 800f6c8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800f6ca:	f000 fb64 	bl	800fd96 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800f6ce:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800f6d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f6d6:	d112      	bne.n	800f6fe <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800f6d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f6da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f6dc:	2b00      	cmp	r3, #0
 800f6de:	d016      	beq.n	800f70e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800f6e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f6e2:	3324      	adds	r3, #36	; 0x24
 800f6e4:	4618      	mov	r0, r3
 800f6e6:	f001 f975 	bl	80109d4 <xTaskRemoveFromEventList>
 800f6ea:	4603      	mov	r3, r0
 800f6ec:	2b00      	cmp	r3, #0
 800f6ee:	d00e      	beq.n	800f70e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800f6f0:	687b      	ldr	r3, [r7, #4]
 800f6f2:	2b00      	cmp	r3, #0
 800f6f4:	d00b      	beq.n	800f70e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800f6f6:	687b      	ldr	r3, [r7, #4]
 800f6f8:	2201      	movs	r2, #1
 800f6fa:	601a      	str	r2, [r3, #0]
 800f6fc:	e007      	b.n	800f70e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800f6fe:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800f702:	3301      	adds	r3, #1
 800f704:	b2db      	uxtb	r3, r3
 800f706:	b25a      	sxtb	r2, r3
 800f708:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f70a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800f70e:	2301      	movs	r3, #1
 800f710:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800f712:	e001      	b.n	800f718 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800f714:	2300      	movs	r3, #0
 800f716:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f718:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f71a:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800f71c:	697b      	ldr	r3, [r7, #20]
 800f71e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800f722:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800f724:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800f726:	4618      	mov	r0, r3
 800f728:	3740      	adds	r7, #64	; 0x40
 800f72a:	46bd      	mov	sp, r7
 800f72c:	bd80      	pop	{r7, pc}

0800f72e <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800f72e:	b580      	push	{r7, lr}
 800f730:	b08e      	sub	sp, #56	; 0x38
 800f732:	af00      	add	r7, sp, #0
 800f734:	6078      	str	r0, [r7, #4]
 800f736:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800f738:	687b      	ldr	r3, [r7, #4]
 800f73a:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800f73c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f73e:	2b00      	cmp	r3, #0
 800f740:	d10a      	bne.n	800f758 <xQueueGiveFromISR+0x2a>
	__asm volatile
 800f742:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f746:	f383 8811 	msr	BASEPRI, r3
 800f74a:	f3bf 8f6f 	isb	sy
 800f74e:	f3bf 8f4f 	dsb	sy
 800f752:	623b      	str	r3, [r7, #32]
}
 800f754:	bf00      	nop
 800f756:	e7fe      	b.n	800f756 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800f758:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f75a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f75c:	2b00      	cmp	r3, #0
 800f75e:	d00a      	beq.n	800f776 <xQueueGiveFromISR+0x48>
	__asm volatile
 800f760:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f764:	f383 8811 	msr	BASEPRI, r3
 800f768:	f3bf 8f6f 	isb	sy
 800f76c:	f3bf 8f4f 	dsb	sy
 800f770:	61fb      	str	r3, [r7, #28]
}
 800f772:	bf00      	nop
 800f774:	e7fe      	b.n	800f774 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800f776:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f778:	681b      	ldr	r3, [r3, #0]
 800f77a:	2b00      	cmp	r3, #0
 800f77c:	d103      	bne.n	800f786 <xQueueGiveFromISR+0x58>
 800f77e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f780:	689b      	ldr	r3, [r3, #8]
 800f782:	2b00      	cmp	r3, #0
 800f784:	d101      	bne.n	800f78a <xQueueGiveFromISR+0x5c>
 800f786:	2301      	movs	r3, #1
 800f788:	e000      	b.n	800f78c <xQueueGiveFromISR+0x5e>
 800f78a:	2300      	movs	r3, #0
 800f78c:	2b00      	cmp	r3, #0
 800f78e:	d10a      	bne.n	800f7a6 <xQueueGiveFromISR+0x78>
	__asm volatile
 800f790:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f794:	f383 8811 	msr	BASEPRI, r3
 800f798:	f3bf 8f6f 	isb	sy
 800f79c:	f3bf 8f4f 	dsb	sy
 800f7a0:	61bb      	str	r3, [r7, #24]
}
 800f7a2:	bf00      	nop
 800f7a4:	e7fe      	b.n	800f7a4 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800f7a6:	f002 fa0f 	bl	8011bc8 <vPortValidateInterruptPriority>
	__asm volatile
 800f7aa:	f3ef 8211 	mrs	r2, BASEPRI
 800f7ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f7b2:	f383 8811 	msr	BASEPRI, r3
 800f7b6:	f3bf 8f6f 	isb	sy
 800f7ba:	f3bf 8f4f 	dsb	sy
 800f7be:	617a      	str	r2, [r7, #20]
 800f7c0:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800f7c2:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800f7c4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800f7c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f7c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f7ca:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800f7cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f7ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f7d0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f7d2:	429a      	cmp	r2, r3
 800f7d4:	d22b      	bcs.n	800f82e <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800f7d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f7d8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f7dc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800f7e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f7e2:	1c5a      	adds	r2, r3, #1
 800f7e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f7e6:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800f7e8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800f7ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f7f0:	d112      	bne.n	800f818 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800f7f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f7f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f7f6:	2b00      	cmp	r3, #0
 800f7f8:	d016      	beq.n	800f828 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800f7fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f7fc:	3324      	adds	r3, #36	; 0x24
 800f7fe:	4618      	mov	r0, r3
 800f800:	f001 f8e8 	bl	80109d4 <xTaskRemoveFromEventList>
 800f804:	4603      	mov	r3, r0
 800f806:	2b00      	cmp	r3, #0
 800f808:	d00e      	beq.n	800f828 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800f80a:	683b      	ldr	r3, [r7, #0]
 800f80c:	2b00      	cmp	r3, #0
 800f80e:	d00b      	beq.n	800f828 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800f810:	683b      	ldr	r3, [r7, #0]
 800f812:	2201      	movs	r2, #1
 800f814:	601a      	str	r2, [r3, #0]
 800f816:	e007      	b.n	800f828 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800f818:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f81c:	3301      	adds	r3, #1
 800f81e:	b2db      	uxtb	r3, r3
 800f820:	b25a      	sxtb	r2, r3
 800f822:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f824:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800f828:	2301      	movs	r3, #1
 800f82a:	637b      	str	r3, [r7, #52]	; 0x34
 800f82c:	e001      	b.n	800f832 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800f82e:	2300      	movs	r3, #0
 800f830:	637b      	str	r3, [r7, #52]	; 0x34
 800f832:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f834:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800f836:	68fb      	ldr	r3, [r7, #12]
 800f838:	f383 8811 	msr	BASEPRI, r3
}
 800f83c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800f83e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800f840:	4618      	mov	r0, r3
 800f842:	3738      	adds	r7, #56	; 0x38
 800f844:	46bd      	mov	sp, r7
 800f846:	bd80      	pop	{r7, pc}

0800f848 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800f848:	b580      	push	{r7, lr}
 800f84a:	b08c      	sub	sp, #48	; 0x30
 800f84c:	af00      	add	r7, sp, #0
 800f84e:	60f8      	str	r0, [r7, #12]
 800f850:	60b9      	str	r1, [r7, #8]
 800f852:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800f854:	2300      	movs	r3, #0
 800f856:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800f858:	68fb      	ldr	r3, [r7, #12]
 800f85a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800f85c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f85e:	2b00      	cmp	r3, #0
 800f860:	d10a      	bne.n	800f878 <xQueueReceive+0x30>
	__asm volatile
 800f862:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f866:	f383 8811 	msr	BASEPRI, r3
 800f86a:	f3bf 8f6f 	isb	sy
 800f86e:	f3bf 8f4f 	dsb	sy
 800f872:	623b      	str	r3, [r7, #32]
}
 800f874:	bf00      	nop
 800f876:	e7fe      	b.n	800f876 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800f878:	68bb      	ldr	r3, [r7, #8]
 800f87a:	2b00      	cmp	r3, #0
 800f87c:	d103      	bne.n	800f886 <xQueueReceive+0x3e>
 800f87e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f880:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f882:	2b00      	cmp	r3, #0
 800f884:	d101      	bne.n	800f88a <xQueueReceive+0x42>
 800f886:	2301      	movs	r3, #1
 800f888:	e000      	b.n	800f88c <xQueueReceive+0x44>
 800f88a:	2300      	movs	r3, #0
 800f88c:	2b00      	cmp	r3, #0
 800f88e:	d10a      	bne.n	800f8a6 <xQueueReceive+0x5e>
	__asm volatile
 800f890:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f894:	f383 8811 	msr	BASEPRI, r3
 800f898:	f3bf 8f6f 	isb	sy
 800f89c:	f3bf 8f4f 	dsb	sy
 800f8a0:	61fb      	str	r3, [r7, #28]
}
 800f8a2:	bf00      	nop
 800f8a4:	e7fe      	b.n	800f8a4 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800f8a6:	f001 fa57 	bl	8010d58 <xTaskGetSchedulerState>
 800f8aa:	4603      	mov	r3, r0
 800f8ac:	2b00      	cmp	r3, #0
 800f8ae:	d102      	bne.n	800f8b6 <xQueueReceive+0x6e>
 800f8b0:	687b      	ldr	r3, [r7, #4]
 800f8b2:	2b00      	cmp	r3, #0
 800f8b4:	d101      	bne.n	800f8ba <xQueueReceive+0x72>
 800f8b6:	2301      	movs	r3, #1
 800f8b8:	e000      	b.n	800f8bc <xQueueReceive+0x74>
 800f8ba:	2300      	movs	r3, #0
 800f8bc:	2b00      	cmp	r3, #0
 800f8be:	d10a      	bne.n	800f8d6 <xQueueReceive+0x8e>
	__asm volatile
 800f8c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f8c4:	f383 8811 	msr	BASEPRI, r3
 800f8c8:	f3bf 8f6f 	isb	sy
 800f8cc:	f3bf 8f4f 	dsb	sy
 800f8d0:	61bb      	str	r3, [r7, #24]
}
 800f8d2:	bf00      	nop
 800f8d4:	e7fe      	b.n	800f8d4 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800f8d6:	f002 f895 	bl	8011a04 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800f8da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f8dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f8de:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800f8e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f8e2:	2b00      	cmp	r3, #0
 800f8e4:	d01f      	beq.n	800f926 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800f8e6:	68b9      	ldr	r1, [r7, #8]
 800f8e8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f8ea:	f000 fabe 	bl	800fe6a <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800f8ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f8f0:	1e5a      	subs	r2, r3, #1
 800f8f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f8f4:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f8f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f8f8:	691b      	ldr	r3, [r3, #16]
 800f8fa:	2b00      	cmp	r3, #0
 800f8fc:	d00f      	beq.n	800f91e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f8fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f900:	3310      	adds	r3, #16
 800f902:	4618      	mov	r0, r3
 800f904:	f001 f866 	bl	80109d4 <xTaskRemoveFromEventList>
 800f908:	4603      	mov	r3, r0
 800f90a:	2b00      	cmp	r3, #0
 800f90c:	d007      	beq.n	800f91e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800f90e:	4b3d      	ldr	r3, [pc, #244]	; (800fa04 <xQueueReceive+0x1bc>)
 800f910:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f914:	601a      	str	r2, [r3, #0]
 800f916:	f3bf 8f4f 	dsb	sy
 800f91a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800f91e:	f002 f8a1 	bl	8011a64 <vPortExitCritical>
				return pdPASS;
 800f922:	2301      	movs	r3, #1
 800f924:	e069      	b.n	800f9fa <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800f926:	687b      	ldr	r3, [r7, #4]
 800f928:	2b00      	cmp	r3, #0
 800f92a:	d103      	bne.n	800f934 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800f92c:	f002 f89a 	bl	8011a64 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800f930:	2300      	movs	r3, #0
 800f932:	e062      	b.n	800f9fa <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800f934:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f936:	2b00      	cmp	r3, #0
 800f938:	d106      	bne.n	800f948 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800f93a:	f107 0310 	add.w	r3, r7, #16
 800f93e:	4618      	mov	r0, r3
 800f940:	f001 f8ac 	bl	8010a9c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800f944:	2301      	movs	r3, #1
 800f946:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800f948:	f002 f88c 	bl	8011a64 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800f94c:	f000 fe18 	bl	8010580 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800f950:	f002 f858 	bl	8011a04 <vPortEnterCritical>
 800f954:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f956:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800f95a:	b25b      	sxtb	r3, r3
 800f95c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f960:	d103      	bne.n	800f96a <xQueueReceive+0x122>
 800f962:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f964:	2200      	movs	r2, #0
 800f966:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800f96a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f96c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f970:	b25b      	sxtb	r3, r3
 800f972:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f976:	d103      	bne.n	800f980 <xQueueReceive+0x138>
 800f978:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f97a:	2200      	movs	r2, #0
 800f97c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800f980:	f002 f870 	bl	8011a64 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800f984:	1d3a      	adds	r2, r7, #4
 800f986:	f107 0310 	add.w	r3, r7, #16
 800f98a:	4611      	mov	r1, r2
 800f98c:	4618      	mov	r0, r3
 800f98e:	f001 f89b 	bl	8010ac8 <xTaskCheckForTimeOut>
 800f992:	4603      	mov	r3, r0
 800f994:	2b00      	cmp	r3, #0
 800f996:	d123      	bne.n	800f9e0 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800f998:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f99a:	f000 fade 	bl	800ff5a <prvIsQueueEmpty>
 800f99e:	4603      	mov	r3, r0
 800f9a0:	2b00      	cmp	r3, #0
 800f9a2:	d017      	beq.n	800f9d4 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800f9a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f9a6:	3324      	adds	r3, #36	; 0x24
 800f9a8:	687a      	ldr	r2, [r7, #4]
 800f9aa:	4611      	mov	r1, r2
 800f9ac:	4618      	mov	r0, r3
 800f9ae:	f000 ffc1 	bl	8010934 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800f9b2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f9b4:	f000 fa7f 	bl	800feb6 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800f9b8:	f000 fdf0 	bl	801059c <xTaskResumeAll>
 800f9bc:	4603      	mov	r3, r0
 800f9be:	2b00      	cmp	r3, #0
 800f9c0:	d189      	bne.n	800f8d6 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800f9c2:	4b10      	ldr	r3, [pc, #64]	; (800fa04 <xQueueReceive+0x1bc>)
 800f9c4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f9c8:	601a      	str	r2, [r3, #0]
 800f9ca:	f3bf 8f4f 	dsb	sy
 800f9ce:	f3bf 8f6f 	isb	sy
 800f9d2:	e780      	b.n	800f8d6 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800f9d4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f9d6:	f000 fa6e 	bl	800feb6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800f9da:	f000 fddf 	bl	801059c <xTaskResumeAll>
 800f9de:	e77a      	b.n	800f8d6 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800f9e0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f9e2:	f000 fa68 	bl	800feb6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800f9e6:	f000 fdd9 	bl	801059c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800f9ea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f9ec:	f000 fab5 	bl	800ff5a <prvIsQueueEmpty>
 800f9f0:	4603      	mov	r3, r0
 800f9f2:	2b00      	cmp	r3, #0
 800f9f4:	f43f af6f 	beq.w	800f8d6 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800f9f8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800f9fa:	4618      	mov	r0, r3
 800f9fc:	3730      	adds	r7, #48	; 0x30
 800f9fe:	46bd      	mov	sp, r7
 800fa00:	bd80      	pop	{r7, pc}
 800fa02:	bf00      	nop
 800fa04:	e000ed04 	.word	0xe000ed04

0800fa08 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800fa08:	b580      	push	{r7, lr}
 800fa0a:	b08e      	sub	sp, #56	; 0x38
 800fa0c:	af00      	add	r7, sp, #0
 800fa0e:	6078      	str	r0, [r7, #4]
 800fa10:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800fa12:	2300      	movs	r3, #0
 800fa14:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800fa16:	687b      	ldr	r3, [r7, #4]
 800fa18:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800fa1a:	2300      	movs	r3, #0
 800fa1c:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800fa1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fa20:	2b00      	cmp	r3, #0
 800fa22:	d10a      	bne.n	800fa3a <xQueueSemaphoreTake+0x32>
	__asm volatile
 800fa24:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fa28:	f383 8811 	msr	BASEPRI, r3
 800fa2c:	f3bf 8f6f 	isb	sy
 800fa30:	f3bf 8f4f 	dsb	sy
 800fa34:	623b      	str	r3, [r7, #32]
}
 800fa36:	bf00      	nop
 800fa38:	e7fe      	b.n	800fa38 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800fa3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fa3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fa3e:	2b00      	cmp	r3, #0
 800fa40:	d00a      	beq.n	800fa58 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800fa42:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fa46:	f383 8811 	msr	BASEPRI, r3
 800fa4a:	f3bf 8f6f 	isb	sy
 800fa4e:	f3bf 8f4f 	dsb	sy
 800fa52:	61fb      	str	r3, [r7, #28]
}
 800fa54:	bf00      	nop
 800fa56:	e7fe      	b.n	800fa56 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800fa58:	f001 f97e 	bl	8010d58 <xTaskGetSchedulerState>
 800fa5c:	4603      	mov	r3, r0
 800fa5e:	2b00      	cmp	r3, #0
 800fa60:	d102      	bne.n	800fa68 <xQueueSemaphoreTake+0x60>
 800fa62:	683b      	ldr	r3, [r7, #0]
 800fa64:	2b00      	cmp	r3, #0
 800fa66:	d101      	bne.n	800fa6c <xQueueSemaphoreTake+0x64>
 800fa68:	2301      	movs	r3, #1
 800fa6a:	e000      	b.n	800fa6e <xQueueSemaphoreTake+0x66>
 800fa6c:	2300      	movs	r3, #0
 800fa6e:	2b00      	cmp	r3, #0
 800fa70:	d10a      	bne.n	800fa88 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800fa72:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fa76:	f383 8811 	msr	BASEPRI, r3
 800fa7a:	f3bf 8f6f 	isb	sy
 800fa7e:	f3bf 8f4f 	dsb	sy
 800fa82:	61bb      	str	r3, [r7, #24]
}
 800fa84:	bf00      	nop
 800fa86:	e7fe      	b.n	800fa86 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800fa88:	f001 ffbc 	bl	8011a04 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800fa8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fa8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fa90:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800fa92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fa94:	2b00      	cmp	r3, #0
 800fa96:	d024      	beq.n	800fae2 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800fa98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fa9a:	1e5a      	subs	r2, r3, #1
 800fa9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fa9e:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800faa0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800faa2:	681b      	ldr	r3, [r3, #0]
 800faa4:	2b00      	cmp	r3, #0
 800faa6:	d104      	bne.n	800fab2 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800faa8:	f001 facc 	bl	8011044 <pvTaskIncrementMutexHeldCount>
 800faac:	4602      	mov	r2, r0
 800faae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fab0:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800fab2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fab4:	691b      	ldr	r3, [r3, #16]
 800fab6:	2b00      	cmp	r3, #0
 800fab8:	d00f      	beq.n	800fada <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800faba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fabc:	3310      	adds	r3, #16
 800fabe:	4618      	mov	r0, r3
 800fac0:	f000 ff88 	bl	80109d4 <xTaskRemoveFromEventList>
 800fac4:	4603      	mov	r3, r0
 800fac6:	2b00      	cmp	r3, #0
 800fac8:	d007      	beq.n	800fada <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800faca:	4b54      	ldr	r3, [pc, #336]	; (800fc1c <xQueueSemaphoreTake+0x214>)
 800facc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fad0:	601a      	str	r2, [r3, #0]
 800fad2:	f3bf 8f4f 	dsb	sy
 800fad6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800fada:	f001 ffc3 	bl	8011a64 <vPortExitCritical>
				return pdPASS;
 800fade:	2301      	movs	r3, #1
 800fae0:	e097      	b.n	800fc12 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800fae2:	683b      	ldr	r3, [r7, #0]
 800fae4:	2b00      	cmp	r3, #0
 800fae6:	d111      	bne.n	800fb0c <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800fae8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800faea:	2b00      	cmp	r3, #0
 800faec:	d00a      	beq.n	800fb04 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800faee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800faf2:	f383 8811 	msr	BASEPRI, r3
 800faf6:	f3bf 8f6f 	isb	sy
 800fafa:	f3bf 8f4f 	dsb	sy
 800fafe:	617b      	str	r3, [r7, #20]
}
 800fb00:	bf00      	nop
 800fb02:	e7fe      	b.n	800fb02 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800fb04:	f001 ffae 	bl	8011a64 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800fb08:	2300      	movs	r3, #0
 800fb0a:	e082      	b.n	800fc12 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800fb0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fb0e:	2b00      	cmp	r3, #0
 800fb10:	d106      	bne.n	800fb20 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800fb12:	f107 030c 	add.w	r3, r7, #12
 800fb16:	4618      	mov	r0, r3
 800fb18:	f000 ffc0 	bl	8010a9c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800fb1c:	2301      	movs	r3, #1
 800fb1e:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800fb20:	f001 ffa0 	bl	8011a64 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800fb24:	f000 fd2c 	bl	8010580 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800fb28:	f001 ff6c 	bl	8011a04 <vPortEnterCritical>
 800fb2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb2e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800fb32:	b25b      	sxtb	r3, r3
 800fb34:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fb38:	d103      	bne.n	800fb42 <xQueueSemaphoreTake+0x13a>
 800fb3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb3c:	2200      	movs	r2, #0
 800fb3e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800fb42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb44:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800fb48:	b25b      	sxtb	r3, r3
 800fb4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fb4e:	d103      	bne.n	800fb58 <xQueueSemaphoreTake+0x150>
 800fb50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb52:	2200      	movs	r2, #0
 800fb54:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800fb58:	f001 ff84 	bl	8011a64 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800fb5c:	463a      	mov	r2, r7
 800fb5e:	f107 030c 	add.w	r3, r7, #12
 800fb62:	4611      	mov	r1, r2
 800fb64:	4618      	mov	r0, r3
 800fb66:	f000 ffaf 	bl	8010ac8 <xTaskCheckForTimeOut>
 800fb6a:	4603      	mov	r3, r0
 800fb6c:	2b00      	cmp	r3, #0
 800fb6e:	d132      	bne.n	800fbd6 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800fb70:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800fb72:	f000 f9f2 	bl	800ff5a <prvIsQueueEmpty>
 800fb76:	4603      	mov	r3, r0
 800fb78:	2b00      	cmp	r3, #0
 800fb7a:	d026      	beq.n	800fbca <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800fb7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb7e:	681b      	ldr	r3, [r3, #0]
 800fb80:	2b00      	cmp	r3, #0
 800fb82:	d109      	bne.n	800fb98 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800fb84:	f001 ff3e 	bl	8011a04 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800fb88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb8a:	689b      	ldr	r3, [r3, #8]
 800fb8c:	4618      	mov	r0, r3
 800fb8e:	f001 f901 	bl	8010d94 <xTaskPriorityInherit>
 800fb92:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800fb94:	f001 ff66 	bl	8011a64 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800fb98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb9a:	3324      	adds	r3, #36	; 0x24
 800fb9c:	683a      	ldr	r2, [r7, #0]
 800fb9e:	4611      	mov	r1, r2
 800fba0:	4618      	mov	r0, r3
 800fba2:	f000 fec7 	bl	8010934 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800fba6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800fba8:	f000 f985 	bl	800feb6 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800fbac:	f000 fcf6 	bl	801059c <xTaskResumeAll>
 800fbb0:	4603      	mov	r3, r0
 800fbb2:	2b00      	cmp	r3, #0
 800fbb4:	f47f af68 	bne.w	800fa88 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800fbb8:	4b18      	ldr	r3, [pc, #96]	; (800fc1c <xQueueSemaphoreTake+0x214>)
 800fbba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fbbe:	601a      	str	r2, [r3, #0]
 800fbc0:	f3bf 8f4f 	dsb	sy
 800fbc4:	f3bf 8f6f 	isb	sy
 800fbc8:	e75e      	b.n	800fa88 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800fbca:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800fbcc:	f000 f973 	bl	800feb6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800fbd0:	f000 fce4 	bl	801059c <xTaskResumeAll>
 800fbd4:	e758      	b.n	800fa88 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800fbd6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800fbd8:	f000 f96d 	bl	800feb6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800fbdc:	f000 fcde 	bl	801059c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800fbe0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800fbe2:	f000 f9ba 	bl	800ff5a <prvIsQueueEmpty>
 800fbe6:	4603      	mov	r3, r0
 800fbe8:	2b00      	cmp	r3, #0
 800fbea:	f43f af4d 	beq.w	800fa88 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800fbee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fbf0:	2b00      	cmp	r3, #0
 800fbf2:	d00d      	beq.n	800fc10 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800fbf4:	f001 ff06 	bl	8011a04 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800fbf8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800fbfa:	f000 f8b4 	bl	800fd66 <prvGetDisinheritPriorityAfterTimeout>
 800fbfe:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800fc00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc02:	689b      	ldr	r3, [r3, #8]
 800fc04:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800fc06:	4618      	mov	r0, r3
 800fc08:	f001 f99a 	bl	8010f40 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800fc0c:	f001 ff2a 	bl	8011a64 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800fc10:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800fc12:	4618      	mov	r0, r3
 800fc14:	3738      	adds	r7, #56	; 0x38
 800fc16:	46bd      	mov	sp, r7
 800fc18:	bd80      	pop	{r7, pc}
 800fc1a:	bf00      	nop
 800fc1c:	e000ed04 	.word	0xe000ed04

0800fc20 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800fc20:	b580      	push	{r7, lr}
 800fc22:	b08e      	sub	sp, #56	; 0x38
 800fc24:	af00      	add	r7, sp, #0
 800fc26:	60f8      	str	r0, [r7, #12]
 800fc28:	60b9      	str	r1, [r7, #8]
 800fc2a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800fc2c:	68fb      	ldr	r3, [r7, #12]
 800fc2e:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800fc30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fc32:	2b00      	cmp	r3, #0
 800fc34:	d10a      	bne.n	800fc4c <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800fc36:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fc3a:	f383 8811 	msr	BASEPRI, r3
 800fc3e:	f3bf 8f6f 	isb	sy
 800fc42:	f3bf 8f4f 	dsb	sy
 800fc46:	623b      	str	r3, [r7, #32]
}
 800fc48:	bf00      	nop
 800fc4a:	e7fe      	b.n	800fc4a <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800fc4c:	68bb      	ldr	r3, [r7, #8]
 800fc4e:	2b00      	cmp	r3, #0
 800fc50:	d103      	bne.n	800fc5a <xQueueReceiveFromISR+0x3a>
 800fc52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fc54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fc56:	2b00      	cmp	r3, #0
 800fc58:	d101      	bne.n	800fc5e <xQueueReceiveFromISR+0x3e>
 800fc5a:	2301      	movs	r3, #1
 800fc5c:	e000      	b.n	800fc60 <xQueueReceiveFromISR+0x40>
 800fc5e:	2300      	movs	r3, #0
 800fc60:	2b00      	cmp	r3, #0
 800fc62:	d10a      	bne.n	800fc7a <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800fc64:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fc68:	f383 8811 	msr	BASEPRI, r3
 800fc6c:	f3bf 8f6f 	isb	sy
 800fc70:	f3bf 8f4f 	dsb	sy
 800fc74:	61fb      	str	r3, [r7, #28]
}
 800fc76:	bf00      	nop
 800fc78:	e7fe      	b.n	800fc78 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800fc7a:	f001 ffa5 	bl	8011bc8 <vPortValidateInterruptPriority>
	__asm volatile
 800fc7e:	f3ef 8211 	mrs	r2, BASEPRI
 800fc82:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fc86:	f383 8811 	msr	BASEPRI, r3
 800fc8a:	f3bf 8f6f 	isb	sy
 800fc8e:	f3bf 8f4f 	dsb	sy
 800fc92:	61ba      	str	r2, [r7, #24]
 800fc94:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800fc96:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800fc98:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800fc9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fc9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fc9e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800fca0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fca2:	2b00      	cmp	r3, #0
 800fca4:	d02f      	beq.n	800fd06 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800fca6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fca8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800fcac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800fcb0:	68b9      	ldr	r1, [r7, #8]
 800fcb2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800fcb4:	f000 f8d9 	bl	800fe6a <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800fcb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fcba:	1e5a      	subs	r2, r3, #1
 800fcbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fcbe:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800fcc0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800fcc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fcc8:	d112      	bne.n	800fcf0 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800fcca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fccc:	691b      	ldr	r3, [r3, #16]
 800fcce:	2b00      	cmp	r3, #0
 800fcd0:	d016      	beq.n	800fd00 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800fcd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fcd4:	3310      	adds	r3, #16
 800fcd6:	4618      	mov	r0, r3
 800fcd8:	f000 fe7c 	bl	80109d4 <xTaskRemoveFromEventList>
 800fcdc:	4603      	mov	r3, r0
 800fcde:	2b00      	cmp	r3, #0
 800fce0:	d00e      	beq.n	800fd00 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800fce2:	687b      	ldr	r3, [r7, #4]
 800fce4:	2b00      	cmp	r3, #0
 800fce6:	d00b      	beq.n	800fd00 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800fce8:	687b      	ldr	r3, [r7, #4]
 800fcea:	2201      	movs	r2, #1
 800fcec:	601a      	str	r2, [r3, #0]
 800fcee:	e007      	b.n	800fd00 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800fcf0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fcf4:	3301      	adds	r3, #1
 800fcf6:	b2db      	uxtb	r3, r3
 800fcf8:	b25a      	sxtb	r2, r3
 800fcfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fcfc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800fd00:	2301      	movs	r3, #1
 800fd02:	637b      	str	r3, [r7, #52]	; 0x34
 800fd04:	e001      	b.n	800fd0a <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800fd06:	2300      	movs	r3, #0
 800fd08:	637b      	str	r3, [r7, #52]	; 0x34
 800fd0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fd0c:	613b      	str	r3, [r7, #16]
	__asm volatile
 800fd0e:	693b      	ldr	r3, [r7, #16]
 800fd10:	f383 8811 	msr	BASEPRI, r3
}
 800fd14:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800fd16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800fd18:	4618      	mov	r0, r3
 800fd1a:	3738      	adds	r7, #56	; 0x38
 800fd1c:	46bd      	mov	sp, r7
 800fd1e:	bd80      	pop	{r7, pc}

0800fd20 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800fd20:	b580      	push	{r7, lr}
 800fd22:	b084      	sub	sp, #16
 800fd24:	af00      	add	r7, sp, #0
 800fd26:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800fd28:	687b      	ldr	r3, [r7, #4]
 800fd2a:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800fd2c:	68fb      	ldr	r3, [r7, #12]
 800fd2e:	2b00      	cmp	r3, #0
 800fd30:	d10a      	bne.n	800fd48 <vQueueDelete+0x28>
	__asm volatile
 800fd32:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fd36:	f383 8811 	msr	BASEPRI, r3
 800fd3a:	f3bf 8f6f 	isb	sy
 800fd3e:	f3bf 8f4f 	dsb	sy
 800fd42:	60bb      	str	r3, [r7, #8]
}
 800fd44:	bf00      	nop
 800fd46:	e7fe      	b.n	800fd46 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800fd48:	68f8      	ldr	r0, [r7, #12]
 800fd4a:	f000 f95f 	bl	801000c <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800fd4e:	68fb      	ldr	r3, [r7, #12]
 800fd50:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800fd54:	2b00      	cmp	r3, #0
 800fd56:	d102      	bne.n	800fd5e <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 800fd58:	68f8      	ldr	r0, [r7, #12]
 800fd5a:	f002 f841 	bl	8011de0 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800fd5e:	bf00      	nop
 800fd60:	3710      	adds	r7, #16
 800fd62:	46bd      	mov	sp, r7
 800fd64:	bd80      	pop	{r7, pc}

0800fd66 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800fd66:	b480      	push	{r7}
 800fd68:	b085      	sub	sp, #20
 800fd6a:	af00      	add	r7, sp, #0
 800fd6c:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800fd6e:	687b      	ldr	r3, [r7, #4]
 800fd70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fd72:	2b00      	cmp	r3, #0
 800fd74:	d006      	beq.n	800fd84 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800fd76:	687b      	ldr	r3, [r7, #4]
 800fd78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fd7a:	681b      	ldr	r3, [r3, #0]
 800fd7c:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800fd80:	60fb      	str	r3, [r7, #12]
 800fd82:	e001      	b.n	800fd88 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800fd84:	2300      	movs	r3, #0
 800fd86:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800fd88:	68fb      	ldr	r3, [r7, #12]
	}
 800fd8a:	4618      	mov	r0, r3
 800fd8c:	3714      	adds	r7, #20
 800fd8e:	46bd      	mov	sp, r7
 800fd90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd94:	4770      	bx	lr

0800fd96 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800fd96:	b580      	push	{r7, lr}
 800fd98:	b086      	sub	sp, #24
 800fd9a:	af00      	add	r7, sp, #0
 800fd9c:	60f8      	str	r0, [r7, #12]
 800fd9e:	60b9      	str	r1, [r7, #8]
 800fda0:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800fda2:	2300      	movs	r3, #0
 800fda4:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800fda6:	68fb      	ldr	r3, [r7, #12]
 800fda8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fdaa:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800fdac:	68fb      	ldr	r3, [r7, #12]
 800fdae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fdb0:	2b00      	cmp	r3, #0
 800fdb2:	d10d      	bne.n	800fdd0 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800fdb4:	68fb      	ldr	r3, [r7, #12]
 800fdb6:	681b      	ldr	r3, [r3, #0]
 800fdb8:	2b00      	cmp	r3, #0
 800fdba:	d14d      	bne.n	800fe58 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800fdbc:	68fb      	ldr	r3, [r7, #12]
 800fdbe:	689b      	ldr	r3, [r3, #8]
 800fdc0:	4618      	mov	r0, r3
 800fdc2:	f001 f84f 	bl	8010e64 <xTaskPriorityDisinherit>
 800fdc6:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800fdc8:	68fb      	ldr	r3, [r7, #12]
 800fdca:	2200      	movs	r2, #0
 800fdcc:	609a      	str	r2, [r3, #8]
 800fdce:	e043      	b.n	800fe58 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800fdd0:	687b      	ldr	r3, [r7, #4]
 800fdd2:	2b00      	cmp	r3, #0
 800fdd4:	d119      	bne.n	800fe0a <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800fdd6:	68fb      	ldr	r3, [r7, #12]
 800fdd8:	6858      	ldr	r0, [r3, #4]
 800fdda:	68fb      	ldr	r3, [r7, #12]
 800fddc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fdde:	461a      	mov	r2, r3
 800fde0:	68b9      	ldr	r1, [r7, #8]
 800fde2:	f00b fd8d 	bl	801b900 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800fde6:	68fb      	ldr	r3, [r7, #12]
 800fde8:	685a      	ldr	r2, [r3, #4]
 800fdea:	68fb      	ldr	r3, [r7, #12]
 800fdec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fdee:	441a      	add	r2, r3
 800fdf0:	68fb      	ldr	r3, [r7, #12]
 800fdf2:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800fdf4:	68fb      	ldr	r3, [r7, #12]
 800fdf6:	685a      	ldr	r2, [r3, #4]
 800fdf8:	68fb      	ldr	r3, [r7, #12]
 800fdfa:	689b      	ldr	r3, [r3, #8]
 800fdfc:	429a      	cmp	r2, r3
 800fdfe:	d32b      	bcc.n	800fe58 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800fe00:	68fb      	ldr	r3, [r7, #12]
 800fe02:	681a      	ldr	r2, [r3, #0]
 800fe04:	68fb      	ldr	r3, [r7, #12]
 800fe06:	605a      	str	r2, [r3, #4]
 800fe08:	e026      	b.n	800fe58 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800fe0a:	68fb      	ldr	r3, [r7, #12]
 800fe0c:	68d8      	ldr	r0, [r3, #12]
 800fe0e:	68fb      	ldr	r3, [r7, #12]
 800fe10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fe12:	461a      	mov	r2, r3
 800fe14:	68b9      	ldr	r1, [r7, #8]
 800fe16:	f00b fd73 	bl	801b900 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800fe1a:	68fb      	ldr	r3, [r7, #12]
 800fe1c:	68da      	ldr	r2, [r3, #12]
 800fe1e:	68fb      	ldr	r3, [r7, #12]
 800fe20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fe22:	425b      	negs	r3, r3
 800fe24:	441a      	add	r2, r3
 800fe26:	68fb      	ldr	r3, [r7, #12]
 800fe28:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800fe2a:	68fb      	ldr	r3, [r7, #12]
 800fe2c:	68da      	ldr	r2, [r3, #12]
 800fe2e:	68fb      	ldr	r3, [r7, #12]
 800fe30:	681b      	ldr	r3, [r3, #0]
 800fe32:	429a      	cmp	r2, r3
 800fe34:	d207      	bcs.n	800fe46 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800fe36:	68fb      	ldr	r3, [r7, #12]
 800fe38:	689a      	ldr	r2, [r3, #8]
 800fe3a:	68fb      	ldr	r3, [r7, #12]
 800fe3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fe3e:	425b      	negs	r3, r3
 800fe40:	441a      	add	r2, r3
 800fe42:	68fb      	ldr	r3, [r7, #12]
 800fe44:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800fe46:	687b      	ldr	r3, [r7, #4]
 800fe48:	2b02      	cmp	r3, #2
 800fe4a:	d105      	bne.n	800fe58 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800fe4c:	693b      	ldr	r3, [r7, #16]
 800fe4e:	2b00      	cmp	r3, #0
 800fe50:	d002      	beq.n	800fe58 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800fe52:	693b      	ldr	r3, [r7, #16]
 800fe54:	3b01      	subs	r3, #1
 800fe56:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800fe58:	693b      	ldr	r3, [r7, #16]
 800fe5a:	1c5a      	adds	r2, r3, #1
 800fe5c:	68fb      	ldr	r3, [r7, #12]
 800fe5e:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800fe60:	697b      	ldr	r3, [r7, #20]
}
 800fe62:	4618      	mov	r0, r3
 800fe64:	3718      	adds	r7, #24
 800fe66:	46bd      	mov	sp, r7
 800fe68:	bd80      	pop	{r7, pc}

0800fe6a <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800fe6a:	b580      	push	{r7, lr}
 800fe6c:	b082      	sub	sp, #8
 800fe6e:	af00      	add	r7, sp, #0
 800fe70:	6078      	str	r0, [r7, #4]
 800fe72:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800fe74:	687b      	ldr	r3, [r7, #4]
 800fe76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fe78:	2b00      	cmp	r3, #0
 800fe7a:	d018      	beq.n	800feae <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800fe7c:	687b      	ldr	r3, [r7, #4]
 800fe7e:	68da      	ldr	r2, [r3, #12]
 800fe80:	687b      	ldr	r3, [r7, #4]
 800fe82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fe84:	441a      	add	r2, r3
 800fe86:	687b      	ldr	r3, [r7, #4]
 800fe88:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800fe8a:	687b      	ldr	r3, [r7, #4]
 800fe8c:	68da      	ldr	r2, [r3, #12]
 800fe8e:	687b      	ldr	r3, [r7, #4]
 800fe90:	689b      	ldr	r3, [r3, #8]
 800fe92:	429a      	cmp	r2, r3
 800fe94:	d303      	bcc.n	800fe9e <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800fe96:	687b      	ldr	r3, [r7, #4]
 800fe98:	681a      	ldr	r2, [r3, #0]
 800fe9a:	687b      	ldr	r3, [r7, #4]
 800fe9c:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800fe9e:	687b      	ldr	r3, [r7, #4]
 800fea0:	68d9      	ldr	r1, [r3, #12]
 800fea2:	687b      	ldr	r3, [r7, #4]
 800fea4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fea6:	461a      	mov	r2, r3
 800fea8:	6838      	ldr	r0, [r7, #0]
 800feaa:	f00b fd29 	bl	801b900 <memcpy>
	}
}
 800feae:	bf00      	nop
 800feb0:	3708      	adds	r7, #8
 800feb2:	46bd      	mov	sp, r7
 800feb4:	bd80      	pop	{r7, pc}

0800feb6 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800feb6:	b580      	push	{r7, lr}
 800feb8:	b084      	sub	sp, #16
 800feba:	af00      	add	r7, sp, #0
 800febc:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800febe:	f001 fda1 	bl	8011a04 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800fec2:	687b      	ldr	r3, [r7, #4]
 800fec4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800fec8:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800feca:	e011      	b.n	800fef0 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800fecc:	687b      	ldr	r3, [r7, #4]
 800fece:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fed0:	2b00      	cmp	r3, #0
 800fed2:	d012      	beq.n	800fefa <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800fed4:	687b      	ldr	r3, [r7, #4]
 800fed6:	3324      	adds	r3, #36	; 0x24
 800fed8:	4618      	mov	r0, r3
 800feda:	f000 fd7b 	bl	80109d4 <xTaskRemoveFromEventList>
 800fede:	4603      	mov	r3, r0
 800fee0:	2b00      	cmp	r3, #0
 800fee2:	d001      	beq.n	800fee8 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800fee4:	f000 fe52 	bl	8010b8c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800fee8:	7bfb      	ldrb	r3, [r7, #15]
 800feea:	3b01      	subs	r3, #1
 800feec:	b2db      	uxtb	r3, r3
 800feee:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800fef0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800fef4:	2b00      	cmp	r3, #0
 800fef6:	dce9      	bgt.n	800fecc <prvUnlockQueue+0x16>
 800fef8:	e000      	b.n	800fefc <prvUnlockQueue+0x46>
					break;
 800fefa:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800fefc:	687b      	ldr	r3, [r7, #4]
 800fefe:	22ff      	movs	r2, #255	; 0xff
 800ff00:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800ff04:	f001 fdae 	bl	8011a64 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800ff08:	f001 fd7c 	bl	8011a04 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800ff0c:	687b      	ldr	r3, [r7, #4]
 800ff0e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ff12:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800ff14:	e011      	b.n	800ff3a <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ff16:	687b      	ldr	r3, [r7, #4]
 800ff18:	691b      	ldr	r3, [r3, #16]
 800ff1a:	2b00      	cmp	r3, #0
 800ff1c:	d012      	beq.n	800ff44 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ff1e:	687b      	ldr	r3, [r7, #4]
 800ff20:	3310      	adds	r3, #16
 800ff22:	4618      	mov	r0, r3
 800ff24:	f000 fd56 	bl	80109d4 <xTaskRemoveFromEventList>
 800ff28:	4603      	mov	r3, r0
 800ff2a:	2b00      	cmp	r3, #0
 800ff2c:	d001      	beq.n	800ff32 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800ff2e:	f000 fe2d 	bl	8010b8c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800ff32:	7bbb      	ldrb	r3, [r7, #14]
 800ff34:	3b01      	subs	r3, #1
 800ff36:	b2db      	uxtb	r3, r3
 800ff38:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800ff3a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ff3e:	2b00      	cmp	r3, #0
 800ff40:	dce9      	bgt.n	800ff16 <prvUnlockQueue+0x60>
 800ff42:	e000      	b.n	800ff46 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800ff44:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800ff46:	687b      	ldr	r3, [r7, #4]
 800ff48:	22ff      	movs	r2, #255	; 0xff
 800ff4a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800ff4e:	f001 fd89 	bl	8011a64 <vPortExitCritical>
}
 800ff52:	bf00      	nop
 800ff54:	3710      	adds	r7, #16
 800ff56:	46bd      	mov	sp, r7
 800ff58:	bd80      	pop	{r7, pc}

0800ff5a <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800ff5a:	b580      	push	{r7, lr}
 800ff5c:	b084      	sub	sp, #16
 800ff5e:	af00      	add	r7, sp, #0
 800ff60:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800ff62:	f001 fd4f 	bl	8011a04 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800ff66:	687b      	ldr	r3, [r7, #4]
 800ff68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ff6a:	2b00      	cmp	r3, #0
 800ff6c:	d102      	bne.n	800ff74 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800ff6e:	2301      	movs	r3, #1
 800ff70:	60fb      	str	r3, [r7, #12]
 800ff72:	e001      	b.n	800ff78 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800ff74:	2300      	movs	r3, #0
 800ff76:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800ff78:	f001 fd74 	bl	8011a64 <vPortExitCritical>

	return xReturn;
 800ff7c:	68fb      	ldr	r3, [r7, #12]
}
 800ff7e:	4618      	mov	r0, r3
 800ff80:	3710      	adds	r7, #16
 800ff82:	46bd      	mov	sp, r7
 800ff84:	bd80      	pop	{r7, pc}

0800ff86 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800ff86:	b580      	push	{r7, lr}
 800ff88:	b084      	sub	sp, #16
 800ff8a:	af00      	add	r7, sp, #0
 800ff8c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800ff8e:	f001 fd39 	bl	8011a04 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800ff92:	687b      	ldr	r3, [r7, #4]
 800ff94:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ff96:	687b      	ldr	r3, [r7, #4]
 800ff98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ff9a:	429a      	cmp	r2, r3
 800ff9c:	d102      	bne.n	800ffa4 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800ff9e:	2301      	movs	r3, #1
 800ffa0:	60fb      	str	r3, [r7, #12]
 800ffa2:	e001      	b.n	800ffa8 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800ffa4:	2300      	movs	r3, #0
 800ffa6:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800ffa8:	f001 fd5c 	bl	8011a64 <vPortExitCritical>

	return xReturn;
 800ffac:	68fb      	ldr	r3, [r7, #12]
}
 800ffae:	4618      	mov	r0, r3
 800ffb0:	3710      	adds	r7, #16
 800ffb2:	46bd      	mov	sp, r7
 800ffb4:	bd80      	pop	{r7, pc}
	...

0800ffb8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800ffb8:	b480      	push	{r7}
 800ffba:	b085      	sub	sp, #20
 800ffbc:	af00      	add	r7, sp, #0
 800ffbe:	6078      	str	r0, [r7, #4]
 800ffc0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ffc2:	2300      	movs	r3, #0
 800ffc4:	60fb      	str	r3, [r7, #12]
 800ffc6:	e014      	b.n	800fff2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800ffc8:	4a0f      	ldr	r2, [pc, #60]	; (8010008 <vQueueAddToRegistry+0x50>)
 800ffca:	68fb      	ldr	r3, [r7, #12]
 800ffcc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800ffd0:	2b00      	cmp	r3, #0
 800ffd2:	d10b      	bne.n	800ffec <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800ffd4:	490c      	ldr	r1, [pc, #48]	; (8010008 <vQueueAddToRegistry+0x50>)
 800ffd6:	68fb      	ldr	r3, [r7, #12]
 800ffd8:	683a      	ldr	r2, [r7, #0]
 800ffda:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800ffde:	4a0a      	ldr	r2, [pc, #40]	; (8010008 <vQueueAddToRegistry+0x50>)
 800ffe0:	68fb      	ldr	r3, [r7, #12]
 800ffe2:	00db      	lsls	r3, r3, #3
 800ffe4:	4413      	add	r3, r2
 800ffe6:	687a      	ldr	r2, [r7, #4]
 800ffe8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800ffea:	e006      	b.n	800fffa <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ffec:	68fb      	ldr	r3, [r7, #12]
 800ffee:	3301      	adds	r3, #1
 800fff0:	60fb      	str	r3, [r7, #12]
 800fff2:	68fb      	ldr	r3, [r7, #12]
 800fff4:	2b07      	cmp	r3, #7
 800fff6:	d9e7      	bls.n	800ffc8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800fff8:	bf00      	nop
 800fffa:	bf00      	nop
 800fffc:	3714      	adds	r7, #20
 800fffe:	46bd      	mov	sp, r7
 8010000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010004:	4770      	bx	lr
 8010006:	bf00      	nop
 8010008:	20001140 	.word	0x20001140

0801000c <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 801000c:	b480      	push	{r7}
 801000e:	b085      	sub	sp, #20
 8010010:	af00      	add	r7, sp, #0
 8010012:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8010014:	2300      	movs	r3, #0
 8010016:	60fb      	str	r3, [r7, #12]
 8010018:	e016      	b.n	8010048 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 801001a:	4a10      	ldr	r2, [pc, #64]	; (801005c <vQueueUnregisterQueue+0x50>)
 801001c:	68fb      	ldr	r3, [r7, #12]
 801001e:	00db      	lsls	r3, r3, #3
 8010020:	4413      	add	r3, r2
 8010022:	685b      	ldr	r3, [r3, #4]
 8010024:	687a      	ldr	r2, [r7, #4]
 8010026:	429a      	cmp	r2, r3
 8010028:	d10b      	bne.n	8010042 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 801002a:	4a0c      	ldr	r2, [pc, #48]	; (801005c <vQueueUnregisterQueue+0x50>)
 801002c:	68fb      	ldr	r3, [r7, #12]
 801002e:	2100      	movs	r1, #0
 8010030:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8010034:	4a09      	ldr	r2, [pc, #36]	; (801005c <vQueueUnregisterQueue+0x50>)
 8010036:	68fb      	ldr	r3, [r7, #12]
 8010038:	00db      	lsls	r3, r3, #3
 801003a:	4413      	add	r3, r2
 801003c:	2200      	movs	r2, #0
 801003e:	605a      	str	r2, [r3, #4]
				break;
 8010040:	e006      	b.n	8010050 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8010042:	68fb      	ldr	r3, [r7, #12]
 8010044:	3301      	adds	r3, #1
 8010046:	60fb      	str	r3, [r7, #12]
 8010048:	68fb      	ldr	r3, [r7, #12]
 801004a:	2b07      	cmp	r3, #7
 801004c:	d9e5      	bls.n	801001a <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 801004e:	bf00      	nop
 8010050:	bf00      	nop
 8010052:	3714      	adds	r7, #20
 8010054:	46bd      	mov	sp, r7
 8010056:	f85d 7b04 	ldr.w	r7, [sp], #4
 801005a:	4770      	bx	lr
 801005c:	20001140 	.word	0x20001140

08010060 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8010060:	b580      	push	{r7, lr}
 8010062:	b086      	sub	sp, #24
 8010064:	af00      	add	r7, sp, #0
 8010066:	60f8      	str	r0, [r7, #12]
 8010068:	60b9      	str	r1, [r7, #8]
 801006a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 801006c:	68fb      	ldr	r3, [r7, #12]
 801006e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8010070:	f001 fcc8 	bl	8011a04 <vPortEnterCritical>
 8010074:	697b      	ldr	r3, [r7, #20]
 8010076:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801007a:	b25b      	sxtb	r3, r3
 801007c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010080:	d103      	bne.n	801008a <vQueueWaitForMessageRestricted+0x2a>
 8010082:	697b      	ldr	r3, [r7, #20]
 8010084:	2200      	movs	r2, #0
 8010086:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801008a:	697b      	ldr	r3, [r7, #20]
 801008c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8010090:	b25b      	sxtb	r3, r3
 8010092:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010096:	d103      	bne.n	80100a0 <vQueueWaitForMessageRestricted+0x40>
 8010098:	697b      	ldr	r3, [r7, #20]
 801009a:	2200      	movs	r2, #0
 801009c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80100a0:	f001 fce0 	bl	8011a64 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80100a4:	697b      	ldr	r3, [r7, #20]
 80100a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80100a8:	2b00      	cmp	r3, #0
 80100aa:	d106      	bne.n	80100ba <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80100ac:	697b      	ldr	r3, [r7, #20]
 80100ae:	3324      	adds	r3, #36	; 0x24
 80100b0:	687a      	ldr	r2, [r7, #4]
 80100b2:	68b9      	ldr	r1, [r7, #8]
 80100b4:	4618      	mov	r0, r3
 80100b6:	f000 fc61 	bl	801097c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80100ba:	6978      	ldr	r0, [r7, #20]
 80100bc:	f7ff fefb 	bl	800feb6 <prvUnlockQueue>
	}
 80100c0:	bf00      	nop
 80100c2:	3718      	adds	r7, #24
 80100c4:	46bd      	mov	sp, r7
 80100c6:	bd80      	pop	{r7, pc}

080100c8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80100c8:	b580      	push	{r7, lr}
 80100ca:	b08e      	sub	sp, #56	; 0x38
 80100cc:	af04      	add	r7, sp, #16
 80100ce:	60f8      	str	r0, [r7, #12]
 80100d0:	60b9      	str	r1, [r7, #8]
 80100d2:	607a      	str	r2, [r7, #4]
 80100d4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80100d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80100d8:	2b00      	cmp	r3, #0
 80100da:	d10a      	bne.n	80100f2 <xTaskCreateStatic+0x2a>
	__asm volatile
 80100dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80100e0:	f383 8811 	msr	BASEPRI, r3
 80100e4:	f3bf 8f6f 	isb	sy
 80100e8:	f3bf 8f4f 	dsb	sy
 80100ec:	623b      	str	r3, [r7, #32]
}
 80100ee:	bf00      	nop
 80100f0:	e7fe      	b.n	80100f0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80100f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80100f4:	2b00      	cmp	r3, #0
 80100f6:	d10a      	bne.n	801010e <xTaskCreateStatic+0x46>
	__asm volatile
 80100f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80100fc:	f383 8811 	msr	BASEPRI, r3
 8010100:	f3bf 8f6f 	isb	sy
 8010104:	f3bf 8f4f 	dsb	sy
 8010108:	61fb      	str	r3, [r7, #28]
}
 801010a:	bf00      	nop
 801010c:	e7fe      	b.n	801010c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 801010e:	23bc      	movs	r3, #188	; 0xbc
 8010110:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8010112:	693b      	ldr	r3, [r7, #16]
 8010114:	2bbc      	cmp	r3, #188	; 0xbc
 8010116:	d00a      	beq.n	801012e <xTaskCreateStatic+0x66>
	__asm volatile
 8010118:	f04f 0350 	mov.w	r3, #80	; 0x50
 801011c:	f383 8811 	msr	BASEPRI, r3
 8010120:	f3bf 8f6f 	isb	sy
 8010124:	f3bf 8f4f 	dsb	sy
 8010128:	61bb      	str	r3, [r7, #24]
}
 801012a:	bf00      	nop
 801012c:	e7fe      	b.n	801012c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 801012e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8010130:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010132:	2b00      	cmp	r3, #0
 8010134:	d01e      	beq.n	8010174 <xTaskCreateStatic+0xac>
 8010136:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010138:	2b00      	cmp	r3, #0
 801013a:	d01b      	beq.n	8010174 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 801013c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801013e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8010140:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010142:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010144:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8010146:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010148:	2202      	movs	r2, #2
 801014a:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 801014e:	2300      	movs	r3, #0
 8010150:	9303      	str	r3, [sp, #12]
 8010152:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010154:	9302      	str	r3, [sp, #8]
 8010156:	f107 0314 	add.w	r3, r7, #20
 801015a:	9301      	str	r3, [sp, #4]
 801015c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801015e:	9300      	str	r3, [sp, #0]
 8010160:	683b      	ldr	r3, [r7, #0]
 8010162:	687a      	ldr	r2, [r7, #4]
 8010164:	68b9      	ldr	r1, [r7, #8]
 8010166:	68f8      	ldr	r0, [r7, #12]
 8010168:	f000 f850 	bl	801020c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 801016c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801016e:	f000 f8f3 	bl	8010358 <prvAddNewTaskToReadyList>
 8010172:	e001      	b.n	8010178 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8010174:	2300      	movs	r3, #0
 8010176:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8010178:	697b      	ldr	r3, [r7, #20]
	}
 801017a:	4618      	mov	r0, r3
 801017c:	3728      	adds	r7, #40	; 0x28
 801017e:	46bd      	mov	sp, r7
 8010180:	bd80      	pop	{r7, pc}

08010182 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8010182:	b580      	push	{r7, lr}
 8010184:	b08c      	sub	sp, #48	; 0x30
 8010186:	af04      	add	r7, sp, #16
 8010188:	60f8      	str	r0, [r7, #12]
 801018a:	60b9      	str	r1, [r7, #8]
 801018c:	603b      	str	r3, [r7, #0]
 801018e:	4613      	mov	r3, r2
 8010190:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8010192:	88fb      	ldrh	r3, [r7, #6]
 8010194:	009b      	lsls	r3, r3, #2
 8010196:	4618      	mov	r0, r3
 8010198:	f001 fd56 	bl	8011c48 <pvPortMalloc>
 801019c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 801019e:	697b      	ldr	r3, [r7, #20]
 80101a0:	2b00      	cmp	r3, #0
 80101a2:	d00e      	beq.n	80101c2 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80101a4:	20bc      	movs	r0, #188	; 0xbc
 80101a6:	f001 fd4f 	bl	8011c48 <pvPortMalloc>
 80101aa:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80101ac:	69fb      	ldr	r3, [r7, #28]
 80101ae:	2b00      	cmp	r3, #0
 80101b0:	d003      	beq.n	80101ba <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80101b2:	69fb      	ldr	r3, [r7, #28]
 80101b4:	697a      	ldr	r2, [r7, #20]
 80101b6:	631a      	str	r2, [r3, #48]	; 0x30
 80101b8:	e005      	b.n	80101c6 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80101ba:	6978      	ldr	r0, [r7, #20]
 80101bc:	f001 fe10 	bl	8011de0 <vPortFree>
 80101c0:	e001      	b.n	80101c6 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80101c2:	2300      	movs	r3, #0
 80101c4:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80101c6:	69fb      	ldr	r3, [r7, #28]
 80101c8:	2b00      	cmp	r3, #0
 80101ca:	d017      	beq.n	80101fc <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80101cc:	69fb      	ldr	r3, [r7, #28]
 80101ce:	2200      	movs	r2, #0
 80101d0:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80101d4:	88fa      	ldrh	r2, [r7, #6]
 80101d6:	2300      	movs	r3, #0
 80101d8:	9303      	str	r3, [sp, #12]
 80101da:	69fb      	ldr	r3, [r7, #28]
 80101dc:	9302      	str	r3, [sp, #8]
 80101de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80101e0:	9301      	str	r3, [sp, #4]
 80101e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80101e4:	9300      	str	r3, [sp, #0]
 80101e6:	683b      	ldr	r3, [r7, #0]
 80101e8:	68b9      	ldr	r1, [r7, #8]
 80101ea:	68f8      	ldr	r0, [r7, #12]
 80101ec:	f000 f80e 	bl	801020c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80101f0:	69f8      	ldr	r0, [r7, #28]
 80101f2:	f000 f8b1 	bl	8010358 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80101f6:	2301      	movs	r3, #1
 80101f8:	61bb      	str	r3, [r7, #24]
 80101fa:	e002      	b.n	8010202 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80101fc:	f04f 33ff 	mov.w	r3, #4294967295
 8010200:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8010202:	69bb      	ldr	r3, [r7, #24]
	}
 8010204:	4618      	mov	r0, r3
 8010206:	3720      	adds	r7, #32
 8010208:	46bd      	mov	sp, r7
 801020a:	bd80      	pop	{r7, pc}

0801020c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 801020c:	b580      	push	{r7, lr}
 801020e:	b088      	sub	sp, #32
 8010210:	af00      	add	r7, sp, #0
 8010212:	60f8      	str	r0, [r7, #12]
 8010214:	60b9      	str	r1, [r7, #8]
 8010216:	607a      	str	r2, [r7, #4]
 8010218:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 801021a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801021c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 801021e:	687b      	ldr	r3, [r7, #4]
 8010220:	009b      	lsls	r3, r3, #2
 8010222:	461a      	mov	r2, r3
 8010224:	21a5      	movs	r1, #165	; 0xa5
 8010226:	f00b fb79 	bl	801b91c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 801022a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801022c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801022e:	6879      	ldr	r1, [r7, #4]
 8010230:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8010234:	440b      	add	r3, r1
 8010236:	009b      	lsls	r3, r3, #2
 8010238:	4413      	add	r3, r2
 801023a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 801023c:	69bb      	ldr	r3, [r7, #24]
 801023e:	f023 0307 	bic.w	r3, r3, #7
 8010242:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8010244:	69bb      	ldr	r3, [r7, #24]
 8010246:	f003 0307 	and.w	r3, r3, #7
 801024a:	2b00      	cmp	r3, #0
 801024c:	d00a      	beq.n	8010264 <prvInitialiseNewTask+0x58>
	__asm volatile
 801024e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010252:	f383 8811 	msr	BASEPRI, r3
 8010256:	f3bf 8f6f 	isb	sy
 801025a:	f3bf 8f4f 	dsb	sy
 801025e:	617b      	str	r3, [r7, #20]
}
 8010260:	bf00      	nop
 8010262:	e7fe      	b.n	8010262 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8010264:	68bb      	ldr	r3, [r7, #8]
 8010266:	2b00      	cmp	r3, #0
 8010268:	d01f      	beq.n	80102aa <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 801026a:	2300      	movs	r3, #0
 801026c:	61fb      	str	r3, [r7, #28]
 801026e:	e012      	b.n	8010296 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8010270:	68ba      	ldr	r2, [r7, #8]
 8010272:	69fb      	ldr	r3, [r7, #28]
 8010274:	4413      	add	r3, r2
 8010276:	7819      	ldrb	r1, [r3, #0]
 8010278:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801027a:	69fb      	ldr	r3, [r7, #28]
 801027c:	4413      	add	r3, r2
 801027e:	3334      	adds	r3, #52	; 0x34
 8010280:	460a      	mov	r2, r1
 8010282:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8010284:	68ba      	ldr	r2, [r7, #8]
 8010286:	69fb      	ldr	r3, [r7, #28]
 8010288:	4413      	add	r3, r2
 801028a:	781b      	ldrb	r3, [r3, #0]
 801028c:	2b00      	cmp	r3, #0
 801028e:	d006      	beq.n	801029e <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8010290:	69fb      	ldr	r3, [r7, #28]
 8010292:	3301      	adds	r3, #1
 8010294:	61fb      	str	r3, [r7, #28]
 8010296:	69fb      	ldr	r3, [r7, #28]
 8010298:	2b0f      	cmp	r3, #15
 801029a:	d9e9      	bls.n	8010270 <prvInitialiseNewTask+0x64>
 801029c:	e000      	b.n	80102a0 <prvInitialiseNewTask+0x94>
			{
				break;
 801029e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80102a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80102a2:	2200      	movs	r2, #0
 80102a4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80102a8:	e003      	b.n	80102b2 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80102aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80102ac:	2200      	movs	r2, #0
 80102ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80102b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80102b4:	2b37      	cmp	r3, #55	; 0x37
 80102b6:	d901      	bls.n	80102bc <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80102b8:	2337      	movs	r3, #55	; 0x37
 80102ba:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80102bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80102be:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80102c0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80102c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80102c4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80102c6:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80102c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80102ca:	2200      	movs	r2, #0
 80102cc:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80102ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80102d0:	3304      	adds	r3, #4
 80102d2:	4618      	mov	r0, r3
 80102d4:	f7fe fe56 	bl	800ef84 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80102d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80102da:	3318      	adds	r3, #24
 80102dc:	4618      	mov	r0, r3
 80102de:	f7fe fe51 	bl	800ef84 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80102e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80102e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80102e6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80102e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80102ea:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80102ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80102f0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80102f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80102f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80102f6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80102f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80102fa:	2200      	movs	r2, #0
 80102fc:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8010300:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010302:	2200      	movs	r2, #0
 8010304:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8010308:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801030a:	3354      	adds	r3, #84	; 0x54
 801030c:	2260      	movs	r2, #96	; 0x60
 801030e:	2100      	movs	r1, #0
 8010310:	4618      	mov	r0, r3
 8010312:	f00b fb03 	bl	801b91c <memset>
 8010316:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010318:	4a0c      	ldr	r2, [pc, #48]	; (801034c <prvInitialiseNewTask+0x140>)
 801031a:	659a      	str	r2, [r3, #88]	; 0x58
 801031c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801031e:	4a0c      	ldr	r2, [pc, #48]	; (8010350 <prvInitialiseNewTask+0x144>)
 8010320:	65da      	str	r2, [r3, #92]	; 0x5c
 8010322:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010324:	4a0b      	ldr	r2, [pc, #44]	; (8010354 <prvInitialiseNewTask+0x148>)
 8010326:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8010328:	683a      	ldr	r2, [r7, #0]
 801032a:	68f9      	ldr	r1, [r7, #12]
 801032c:	69b8      	ldr	r0, [r7, #24]
 801032e:	f001 fa3f 	bl	80117b0 <pxPortInitialiseStack>
 8010332:	4602      	mov	r2, r0
 8010334:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010336:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8010338:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801033a:	2b00      	cmp	r3, #0
 801033c:	d002      	beq.n	8010344 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 801033e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010340:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010342:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8010344:	bf00      	nop
 8010346:	3720      	adds	r7, #32
 8010348:	46bd      	mov	sp, r7
 801034a:	bd80      	pop	{r7, pc}
 801034c:	08020b3c 	.word	0x08020b3c
 8010350:	08020b5c 	.word	0x08020b5c
 8010354:	08020b1c 	.word	0x08020b1c

08010358 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8010358:	b580      	push	{r7, lr}
 801035a:	b082      	sub	sp, #8
 801035c:	af00      	add	r7, sp, #0
 801035e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8010360:	f001 fb50 	bl	8011a04 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8010364:	4b2d      	ldr	r3, [pc, #180]	; (801041c <prvAddNewTaskToReadyList+0xc4>)
 8010366:	681b      	ldr	r3, [r3, #0]
 8010368:	3301      	adds	r3, #1
 801036a:	4a2c      	ldr	r2, [pc, #176]	; (801041c <prvAddNewTaskToReadyList+0xc4>)
 801036c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 801036e:	4b2c      	ldr	r3, [pc, #176]	; (8010420 <prvAddNewTaskToReadyList+0xc8>)
 8010370:	681b      	ldr	r3, [r3, #0]
 8010372:	2b00      	cmp	r3, #0
 8010374:	d109      	bne.n	801038a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8010376:	4a2a      	ldr	r2, [pc, #168]	; (8010420 <prvAddNewTaskToReadyList+0xc8>)
 8010378:	687b      	ldr	r3, [r7, #4]
 801037a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 801037c:	4b27      	ldr	r3, [pc, #156]	; (801041c <prvAddNewTaskToReadyList+0xc4>)
 801037e:	681b      	ldr	r3, [r3, #0]
 8010380:	2b01      	cmp	r3, #1
 8010382:	d110      	bne.n	80103a6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8010384:	f000 fc26 	bl	8010bd4 <prvInitialiseTaskLists>
 8010388:	e00d      	b.n	80103a6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 801038a:	4b26      	ldr	r3, [pc, #152]	; (8010424 <prvAddNewTaskToReadyList+0xcc>)
 801038c:	681b      	ldr	r3, [r3, #0]
 801038e:	2b00      	cmp	r3, #0
 8010390:	d109      	bne.n	80103a6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8010392:	4b23      	ldr	r3, [pc, #140]	; (8010420 <prvAddNewTaskToReadyList+0xc8>)
 8010394:	681b      	ldr	r3, [r3, #0]
 8010396:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010398:	687b      	ldr	r3, [r7, #4]
 801039a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801039c:	429a      	cmp	r2, r3
 801039e:	d802      	bhi.n	80103a6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80103a0:	4a1f      	ldr	r2, [pc, #124]	; (8010420 <prvAddNewTaskToReadyList+0xc8>)
 80103a2:	687b      	ldr	r3, [r7, #4]
 80103a4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80103a6:	4b20      	ldr	r3, [pc, #128]	; (8010428 <prvAddNewTaskToReadyList+0xd0>)
 80103a8:	681b      	ldr	r3, [r3, #0]
 80103aa:	3301      	adds	r3, #1
 80103ac:	4a1e      	ldr	r2, [pc, #120]	; (8010428 <prvAddNewTaskToReadyList+0xd0>)
 80103ae:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80103b0:	4b1d      	ldr	r3, [pc, #116]	; (8010428 <prvAddNewTaskToReadyList+0xd0>)
 80103b2:	681a      	ldr	r2, [r3, #0]
 80103b4:	687b      	ldr	r3, [r7, #4]
 80103b6:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80103b8:	687b      	ldr	r3, [r7, #4]
 80103ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80103bc:	4b1b      	ldr	r3, [pc, #108]	; (801042c <prvAddNewTaskToReadyList+0xd4>)
 80103be:	681b      	ldr	r3, [r3, #0]
 80103c0:	429a      	cmp	r2, r3
 80103c2:	d903      	bls.n	80103cc <prvAddNewTaskToReadyList+0x74>
 80103c4:	687b      	ldr	r3, [r7, #4]
 80103c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80103c8:	4a18      	ldr	r2, [pc, #96]	; (801042c <prvAddNewTaskToReadyList+0xd4>)
 80103ca:	6013      	str	r3, [r2, #0]
 80103cc:	687b      	ldr	r3, [r7, #4]
 80103ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80103d0:	4613      	mov	r3, r2
 80103d2:	009b      	lsls	r3, r3, #2
 80103d4:	4413      	add	r3, r2
 80103d6:	009b      	lsls	r3, r3, #2
 80103d8:	4a15      	ldr	r2, [pc, #84]	; (8010430 <prvAddNewTaskToReadyList+0xd8>)
 80103da:	441a      	add	r2, r3
 80103dc:	687b      	ldr	r3, [r7, #4]
 80103de:	3304      	adds	r3, #4
 80103e0:	4619      	mov	r1, r3
 80103e2:	4610      	mov	r0, r2
 80103e4:	f7fe fddb 	bl	800ef9e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80103e8:	f001 fb3c 	bl	8011a64 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80103ec:	4b0d      	ldr	r3, [pc, #52]	; (8010424 <prvAddNewTaskToReadyList+0xcc>)
 80103ee:	681b      	ldr	r3, [r3, #0]
 80103f0:	2b00      	cmp	r3, #0
 80103f2:	d00e      	beq.n	8010412 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80103f4:	4b0a      	ldr	r3, [pc, #40]	; (8010420 <prvAddNewTaskToReadyList+0xc8>)
 80103f6:	681b      	ldr	r3, [r3, #0]
 80103f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80103fa:	687b      	ldr	r3, [r7, #4]
 80103fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80103fe:	429a      	cmp	r2, r3
 8010400:	d207      	bcs.n	8010412 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8010402:	4b0c      	ldr	r3, [pc, #48]	; (8010434 <prvAddNewTaskToReadyList+0xdc>)
 8010404:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010408:	601a      	str	r2, [r3, #0]
 801040a:	f3bf 8f4f 	dsb	sy
 801040e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8010412:	bf00      	nop
 8010414:	3708      	adds	r7, #8
 8010416:	46bd      	mov	sp, r7
 8010418:	bd80      	pop	{r7, pc}
 801041a:	bf00      	nop
 801041c:	20001654 	.word	0x20001654
 8010420:	20001180 	.word	0x20001180
 8010424:	20001660 	.word	0x20001660
 8010428:	20001670 	.word	0x20001670
 801042c:	2000165c 	.word	0x2000165c
 8010430:	20001184 	.word	0x20001184
 8010434:	e000ed04 	.word	0xe000ed04

08010438 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8010438:	b580      	push	{r7, lr}
 801043a:	b084      	sub	sp, #16
 801043c:	af00      	add	r7, sp, #0
 801043e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8010440:	2300      	movs	r3, #0
 8010442:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8010444:	687b      	ldr	r3, [r7, #4]
 8010446:	2b00      	cmp	r3, #0
 8010448:	d017      	beq.n	801047a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 801044a:	4b13      	ldr	r3, [pc, #76]	; (8010498 <vTaskDelay+0x60>)
 801044c:	681b      	ldr	r3, [r3, #0]
 801044e:	2b00      	cmp	r3, #0
 8010450:	d00a      	beq.n	8010468 <vTaskDelay+0x30>
	__asm volatile
 8010452:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010456:	f383 8811 	msr	BASEPRI, r3
 801045a:	f3bf 8f6f 	isb	sy
 801045e:	f3bf 8f4f 	dsb	sy
 8010462:	60bb      	str	r3, [r7, #8]
}
 8010464:	bf00      	nop
 8010466:	e7fe      	b.n	8010466 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8010468:	f000 f88a 	bl	8010580 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 801046c:	2100      	movs	r1, #0
 801046e:	6878      	ldr	r0, [r7, #4]
 8010470:	f000 fdfc 	bl	801106c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8010474:	f000 f892 	bl	801059c <xTaskResumeAll>
 8010478:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 801047a:	68fb      	ldr	r3, [r7, #12]
 801047c:	2b00      	cmp	r3, #0
 801047e:	d107      	bne.n	8010490 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8010480:	4b06      	ldr	r3, [pc, #24]	; (801049c <vTaskDelay+0x64>)
 8010482:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010486:	601a      	str	r2, [r3, #0]
 8010488:	f3bf 8f4f 	dsb	sy
 801048c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8010490:	bf00      	nop
 8010492:	3710      	adds	r7, #16
 8010494:	46bd      	mov	sp, r7
 8010496:	bd80      	pop	{r7, pc}
 8010498:	2000167c 	.word	0x2000167c
 801049c:	e000ed04 	.word	0xe000ed04

080104a0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80104a0:	b580      	push	{r7, lr}
 80104a2:	b08a      	sub	sp, #40	; 0x28
 80104a4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80104a6:	2300      	movs	r3, #0
 80104a8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80104aa:	2300      	movs	r3, #0
 80104ac:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80104ae:	463a      	mov	r2, r7
 80104b0:	1d39      	adds	r1, r7, #4
 80104b2:	f107 0308 	add.w	r3, r7, #8
 80104b6:	4618      	mov	r0, r3
 80104b8:	f7fe fd10 	bl	800eedc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80104bc:	6839      	ldr	r1, [r7, #0]
 80104be:	687b      	ldr	r3, [r7, #4]
 80104c0:	68ba      	ldr	r2, [r7, #8]
 80104c2:	9202      	str	r2, [sp, #8]
 80104c4:	9301      	str	r3, [sp, #4]
 80104c6:	2300      	movs	r3, #0
 80104c8:	9300      	str	r3, [sp, #0]
 80104ca:	2300      	movs	r3, #0
 80104cc:	460a      	mov	r2, r1
 80104ce:	4924      	ldr	r1, [pc, #144]	; (8010560 <vTaskStartScheduler+0xc0>)
 80104d0:	4824      	ldr	r0, [pc, #144]	; (8010564 <vTaskStartScheduler+0xc4>)
 80104d2:	f7ff fdf9 	bl	80100c8 <xTaskCreateStatic>
 80104d6:	4603      	mov	r3, r0
 80104d8:	4a23      	ldr	r2, [pc, #140]	; (8010568 <vTaskStartScheduler+0xc8>)
 80104da:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80104dc:	4b22      	ldr	r3, [pc, #136]	; (8010568 <vTaskStartScheduler+0xc8>)
 80104de:	681b      	ldr	r3, [r3, #0]
 80104e0:	2b00      	cmp	r3, #0
 80104e2:	d002      	beq.n	80104ea <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80104e4:	2301      	movs	r3, #1
 80104e6:	617b      	str	r3, [r7, #20]
 80104e8:	e001      	b.n	80104ee <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80104ea:	2300      	movs	r3, #0
 80104ec:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80104ee:	697b      	ldr	r3, [r7, #20]
 80104f0:	2b01      	cmp	r3, #1
 80104f2:	d102      	bne.n	80104fa <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80104f4:	f000 fe0e 	bl	8011114 <xTimerCreateTimerTask>
 80104f8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80104fa:	697b      	ldr	r3, [r7, #20]
 80104fc:	2b01      	cmp	r3, #1
 80104fe:	d11b      	bne.n	8010538 <vTaskStartScheduler+0x98>
	__asm volatile
 8010500:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010504:	f383 8811 	msr	BASEPRI, r3
 8010508:	f3bf 8f6f 	isb	sy
 801050c:	f3bf 8f4f 	dsb	sy
 8010510:	613b      	str	r3, [r7, #16]
}
 8010512:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8010514:	4b15      	ldr	r3, [pc, #84]	; (801056c <vTaskStartScheduler+0xcc>)
 8010516:	681b      	ldr	r3, [r3, #0]
 8010518:	3354      	adds	r3, #84	; 0x54
 801051a:	4a15      	ldr	r2, [pc, #84]	; (8010570 <vTaskStartScheduler+0xd0>)
 801051c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 801051e:	4b15      	ldr	r3, [pc, #84]	; (8010574 <vTaskStartScheduler+0xd4>)
 8010520:	f04f 32ff 	mov.w	r2, #4294967295
 8010524:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8010526:	4b14      	ldr	r3, [pc, #80]	; (8010578 <vTaskStartScheduler+0xd8>)
 8010528:	2201      	movs	r2, #1
 801052a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 801052c:	4b13      	ldr	r3, [pc, #76]	; (801057c <vTaskStartScheduler+0xdc>)
 801052e:	2200      	movs	r2, #0
 8010530:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8010532:	f001 f9c5 	bl	80118c0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8010536:	e00e      	b.n	8010556 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8010538:	697b      	ldr	r3, [r7, #20]
 801053a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801053e:	d10a      	bne.n	8010556 <vTaskStartScheduler+0xb6>
	__asm volatile
 8010540:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010544:	f383 8811 	msr	BASEPRI, r3
 8010548:	f3bf 8f6f 	isb	sy
 801054c:	f3bf 8f4f 	dsb	sy
 8010550:	60fb      	str	r3, [r7, #12]
}
 8010552:	bf00      	nop
 8010554:	e7fe      	b.n	8010554 <vTaskStartScheduler+0xb4>
}
 8010556:	bf00      	nop
 8010558:	3718      	adds	r7, #24
 801055a:	46bd      	mov	sp, r7
 801055c:	bd80      	pop	{r7, pc}
 801055e:	bf00      	nop
 8010560:	0801e578 	.word	0x0801e578
 8010564:	08010ba5 	.word	0x08010ba5
 8010568:	20001678 	.word	0x20001678
 801056c:	20001180 	.word	0x20001180
 8010570:	20000140 	.word	0x20000140
 8010574:	20001674 	.word	0x20001674
 8010578:	20001660 	.word	0x20001660
 801057c:	20001658 	.word	0x20001658

08010580 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8010580:	b480      	push	{r7}
 8010582:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8010584:	4b04      	ldr	r3, [pc, #16]	; (8010598 <vTaskSuspendAll+0x18>)
 8010586:	681b      	ldr	r3, [r3, #0]
 8010588:	3301      	adds	r3, #1
 801058a:	4a03      	ldr	r2, [pc, #12]	; (8010598 <vTaskSuspendAll+0x18>)
 801058c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 801058e:	bf00      	nop
 8010590:	46bd      	mov	sp, r7
 8010592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010596:	4770      	bx	lr
 8010598:	2000167c 	.word	0x2000167c

0801059c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 801059c:	b580      	push	{r7, lr}
 801059e:	b084      	sub	sp, #16
 80105a0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80105a2:	2300      	movs	r3, #0
 80105a4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80105a6:	2300      	movs	r3, #0
 80105a8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80105aa:	4b42      	ldr	r3, [pc, #264]	; (80106b4 <xTaskResumeAll+0x118>)
 80105ac:	681b      	ldr	r3, [r3, #0]
 80105ae:	2b00      	cmp	r3, #0
 80105b0:	d10a      	bne.n	80105c8 <xTaskResumeAll+0x2c>
	__asm volatile
 80105b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80105b6:	f383 8811 	msr	BASEPRI, r3
 80105ba:	f3bf 8f6f 	isb	sy
 80105be:	f3bf 8f4f 	dsb	sy
 80105c2:	603b      	str	r3, [r7, #0]
}
 80105c4:	bf00      	nop
 80105c6:	e7fe      	b.n	80105c6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80105c8:	f001 fa1c 	bl	8011a04 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80105cc:	4b39      	ldr	r3, [pc, #228]	; (80106b4 <xTaskResumeAll+0x118>)
 80105ce:	681b      	ldr	r3, [r3, #0]
 80105d0:	3b01      	subs	r3, #1
 80105d2:	4a38      	ldr	r2, [pc, #224]	; (80106b4 <xTaskResumeAll+0x118>)
 80105d4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80105d6:	4b37      	ldr	r3, [pc, #220]	; (80106b4 <xTaskResumeAll+0x118>)
 80105d8:	681b      	ldr	r3, [r3, #0]
 80105da:	2b00      	cmp	r3, #0
 80105dc:	d162      	bne.n	80106a4 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80105de:	4b36      	ldr	r3, [pc, #216]	; (80106b8 <xTaskResumeAll+0x11c>)
 80105e0:	681b      	ldr	r3, [r3, #0]
 80105e2:	2b00      	cmp	r3, #0
 80105e4:	d05e      	beq.n	80106a4 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80105e6:	e02f      	b.n	8010648 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80105e8:	4b34      	ldr	r3, [pc, #208]	; (80106bc <xTaskResumeAll+0x120>)
 80105ea:	68db      	ldr	r3, [r3, #12]
 80105ec:	68db      	ldr	r3, [r3, #12]
 80105ee:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80105f0:	68fb      	ldr	r3, [r7, #12]
 80105f2:	3318      	adds	r3, #24
 80105f4:	4618      	mov	r0, r3
 80105f6:	f7fe fd2f 	bl	800f058 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80105fa:	68fb      	ldr	r3, [r7, #12]
 80105fc:	3304      	adds	r3, #4
 80105fe:	4618      	mov	r0, r3
 8010600:	f7fe fd2a 	bl	800f058 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8010604:	68fb      	ldr	r3, [r7, #12]
 8010606:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010608:	4b2d      	ldr	r3, [pc, #180]	; (80106c0 <xTaskResumeAll+0x124>)
 801060a:	681b      	ldr	r3, [r3, #0]
 801060c:	429a      	cmp	r2, r3
 801060e:	d903      	bls.n	8010618 <xTaskResumeAll+0x7c>
 8010610:	68fb      	ldr	r3, [r7, #12]
 8010612:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010614:	4a2a      	ldr	r2, [pc, #168]	; (80106c0 <xTaskResumeAll+0x124>)
 8010616:	6013      	str	r3, [r2, #0]
 8010618:	68fb      	ldr	r3, [r7, #12]
 801061a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801061c:	4613      	mov	r3, r2
 801061e:	009b      	lsls	r3, r3, #2
 8010620:	4413      	add	r3, r2
 8010622:	009b      	lsls	r3, r3, #2
 8010624:	4a27      	ldr	r2, [pc, #156]	; (80106c4 <xTaskResumeAll+0x128>)
 8010626:	441a      	add	r2, r3
 8010628:	68fb      	ldr	r3, [r7, #12]
 801062a:	3304      	adds	r3, #4
 801062c:	4619      	mov	r1, r3
 801062e:	4610      	mov	r0, r2
 8010630:	f7fe fcb5 	bl	800ef9e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8010634:	68fb      	ldr	r3, [r7, #12]
 8010636:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010638:	4b23      	ldr	r3, [pc, #140]	; (80106c8 <xTaskResumeAll+0x12c>)
 801063a:	681b      	ldr	r3, [r3, #0]
 801063c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801063e:	429a      	cmp	r2, r3
 8010640:	d302      	bcc.n	8010648 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8010642:	4b22      	ldr	r3, [pc, #136]	; (80106cc <xTaskResumeAll+0x130>)
 8010644:	2201      	movs	r2, #1
 8010646:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8010648:	4b1c      	ldr	r3, [pc, #112]	; (80106bc <xTaskResumeAll+0x120>)
 801064a:	681b      	ldr	r3, [r3, #0]
 801064c:	2b00      	cmp	r3, #0
 801064e:	d1cb      	bne.n	80105e8 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8010650:	68fb      	ldr	r3, [r7, #12]
 8010652:	2b00      	cmp	r3, #0
 8010654:	d001      	beq.n	801065a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8010656:	f000 fb5f 	bl	8010d18 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 801065a:	4b1d      	ldr	r3, [pc, #116]	; (80106d0 <xTaskResumeAll+0x134>)
 801065c:	681b      	ldr	r3, [r3, #0]
 801065e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8010660:	687b      	ldr	r3, [r7, #4]
 8010662:	2b00      	cmp	r3, #0
 8010664:	d010      	beq.n	8010688 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8010666:	f000 f847 	bl	80106f8 <xTaskIncrementTick>
 801066a:	4603      	mov	r3, r0
 801066c:	2b00      	cmp	r3, #0
 801066e:	d002      	beq.n	8010676 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8010670:	4b16      	ldr	r3, [pc, #88]	; (80106cc <xTaskResumeAll+0x130>)
 8010672:	2201      	movs	r2, #1
 8010674:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8010676:	687b      	ldr	r3, [r7, #4]
 8010678:	3b01      	subs	r3, #1
 801067a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 801067c:	687b      	ldr	r3, [r7, #4]
 801067e:	2b00      	cmp	r3, #0
 8010680:	d1f1      	bne.n	8010666 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8010682:	4b13      	ldr	r3, [pc, #76]	; (80106d0 <xTaskResumeAll+0x134>)
 8010684:	2200      	movs	r2, #0
 8010686:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8010688:	4b10      	ldr	r3, [pc, #64]	; (80106cc <xTaskResumeAll+0x130>)
 801068a:	681b      	ldr	r3, [r3, #0]
 801068c:	2b00      	cmp	r3, #0
 801068e:	d009      	beq.n	80106a4 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8010690:	2301      	movs	r3, #1
 8010692:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8010694:	4b0f      	ldr	r3, [pc, #60]	; (80106d4 <xTaskResumeAll+0x138>)
 8010696:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801069a:	601a      	str	r2, [r3, #0]
 801069c:	f3bf 8f4f 	dsb	sy
 80106a0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80106a4:	f001 f9de 	bl	8011a64 <vPortExitCritical>

	return xAlreadyYielded;
 80106a8:	68bb      	ldr	r3, [r7, #8]
}
 80106aa:	4618      	mov	r0, r3
 80106ac:	3710      	adds	r7, #16
 80106ae:	46bd      	mov	sp, r7
 80106b0:	bd80      	pop	{r7, pc}
 80106b2:	bf00      	nop
 80106b4:	2000167c 	.word	0x2000167c
 80106b8:	20001654 	.word	0x20001654
 80106bc:	20001614 	.word	0x20001614
 80106c0:	2000165c 	.word	0x2000165c
 80106c4:	20001184 	.word	0x20001184
 80106c8:	20001180 	.word	0x20001180
 80106cc:	20001668 	.word	0x20001668
 80106d0:	20001664 	.word	0x20001664
 80106d4:	e000ed04 	.word	0xe000ed04

080106d8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80106d8:	b480      	push	{r7}
 80106da:	b083      	sub	sp, #12
 80106dc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80106de:	4b05      	ldr	r3, [pc, #20]	; (80106f4 <xTaskGetTickCount+0x1c>)
 80106e0:	681b      	ldr	r3, [r3, #0]
 80106e2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80106e4:	687b      	ldr	r3, [r7, #4]
}
 80106e6:	4618      	mov	r0, r3
 80106e8:	370c      	adds	r7, #12
 80106ea:	46bd      	mov	sp, r7
 80106ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106f0:	4770      	bx	lr
 80106f2:	bf00      	nop
 80106f4:	20001658 	.word	0x20001658

080106f8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80106f8:	b580      	push	{r7, lr}
 80106fa:	b086      	sub	sp, #24
 80106fc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80106fe:	2300      	movs	r3, #0
 8010700:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8010702:	4b4f      	ldr	r3, [pc, #316]	; (8010840 <xTaskIncrementTick+0x148>)
 8010704:	681b      	ldr	r3, [r3, #0]
 8010706:	2b00      	cmp	r3, #0
 8010708:	f040 808f 	bne.w	801082a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 801070c:	4b4d      	ldr	r3, [pc, #308]	; (8010844 <xTaskIncrementTick+0x14c>)
 801070e:	681b      	ldr	r3, [r3, #0]
 8010710:	3301      	adds	r3, #1
 8010712:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8010714:	4a4b      	ldr	r2, [pc, #300]	; (8010844 <xTaskIncrementTick+0x14c>)
 8010716:	693b      	ldr	r3, [r7, #16]
 8010718:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 801071a:	693b      	ldr	r3, [r7, #16]
 801071c:	2b00      	cmp	r3, #0
 801071e:	d120      	bne.n	8010762 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8010720:	4b49      	ldr	r3, [pc, #292]	; (8010848 <xTaskIncrementTick+0x150>)
 8010722:	681b      	ldr	r3, [r3, #0]
 8010724:	681b      	ldr	r3, [r3, #0]
 8010726:	2b00      	cmp	r3, #0
 8010728:	d00a      	beq.n	8010740 <xTaskIncrementTick+0x48>
	__asm volatile
 801072a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801072e:	f383 8811 	msr	BASEPRI, r3
 8010732:	f3bf 8f6f 	isb	sy
 8010736:	f3bf 8f4f 	dsb	sy
 801073a:	603b      	str	r3, [r7, #0]
}
 801073c:	bf00      	nop
 801073e:	e7fe      	b.n	801073e <xTaskIncrementTick+0x46>
 8010740:	4b41      	ldr	r3, [pc, #260]	; (8010848 <xTaskIncrementTick+0x150>)
 8010742:	681b      	ldr	r3, [r3, #0]
 8010744:	60fb      	str	r3, [r7, #12]
 8010746:	4b41      	ldr	r3, [pc, #260]	; (801084c <xTaskIncrementTick+0x154>)
 8010748:	681b      	ldr	r3, [r3, #0]
 801074a:	4a3f      	ldr	r2, [pc, #252]	; (8010848 <xTaskIncrementTick+0x150>)
 801074c:	6013      	str	r3, [r2, #0]
 801074e:	4a3f      	ldr	r2, [pc, #252]	; (801084c <xTaskIncrementTick+0x154>)
 8010750:	68fb      	ldr	r3, [r7, #12]
 8010752:	6013      	str	r3, [r2, #0]
 8010754:	4b3e      	ldr	r3, [pc, #248]	; (8010850 <xTaskIncrementTick+0x158>)
 8010756:	681b      	ldr	r3, [r3, #0]
 8010758:	3301      	adds	r3, #1
 801075a:	4a3d      	ldr	r2, [pc, #244]	; (8010850 <xTaskIncrementTick+0x158>)
 801075c:	6013      	str	r3, [r2, #0]
 801075e:	f000 fadb 	bl	8010d18 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8010762:	4b3c      	ldr	r3, [pc, #240]	; (8010854 <xTaskIncrementTick+0x15c>)
 8010764:	681b      	ldr	r3, [r3, #0]
 8010766:	693a      	ldr	r2, [r7, #16]
 8010768:	429a      	cmp	r2, r3
 801076a:	d349      	bcc.n	8010800 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801076c:	4b36      	ldr	r3, [pc, #216]	; (8010848 <xTaskIncrementTick+0x150>)
 801076e:	681b      	ldr	r3, [r3, #0]
 8010770:	681b      	ldr	r3, [r3, #0]
 8010772:	2b00      	cmp	r3, #0
 8010774:	d104      	bne.n	8010780 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010776:	4b37      	ldr	r3, [pc, #220]	; (8010854 <xTaskIncrementTick+0x15c>)
 8010778:	f04f 32ff 	mov.w	r2, #4294967295
 801077c:	601a      	str	r2, [r3, #0]
					break;
 801077e:	e03f      	b.n	8010800 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010780:	4b31      	ldr	r3, [pc, #196]	; (8010848 <xTaskIncrementTick+0x150>)
 8010782:	681b      	ldr	r3, [r3, #0]
 8010784:	68db      	ldr	r3, [r3, #12]
 8010786:	68db      	ldr	r3, [r3, #12]
 8010788:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 801078a:	68bb      	ldr	r3, [r7, #8]
 801078c:	685b      	ldr	r3, [r3, #4]
 801078e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8010790:	693a      	ldr	r2, [r7, #16]
 8010792:	687b      	ldr	r3, [r7, #4]
 8010794:	429a      	cmp	r2, r3
 8010796:	d203      	bcs.n	80107a0 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8010798:	4a2e      	ldr	r2, [pc, #184]	; (8010854 <xTaskIncrementTick+0x15c>)
 801079a:	687b      	ldr	r3, [r7, #4]
 801079c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 801079e:	e02f      	b.n	8010800 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80107a0:	68bb      	ldr	r3, [r7, #8]
 80107a2:	3304      	adds	r3, #4
 80107a4:	4618      	mov	r0, r3
 80107a6:	f7fe fc57 	bl	800f058 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80107aa:	68bb      	ldr	r3, [r7, #8]
 80107ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80107ae:	2b00      	cmp	r3, #0
 80107b0:	d004      	beq.n	80107bc <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80107b2:	68bb      	ldr	r3, [r7, #8]
 80107b4:	3318      	adds	r3, #24
 80107b6:	4618      	mov	r0, r3
 80107b8:	f7fe fc4e 	bl	800f058 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80107bc:	68bb      	ldr	r3, [r7, #8]
 80107be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80107c0:	4b25      	ldr	r3, [pc, #148]	; (8010858 <xTaskIncrementTick+0x160>)
 80107c2:	681b      	ldr	r3, [r3, #0]
 80107c4:	429a      	cmp	r2, r3
 80107c6:	d903      	bls.n	80107d0 <xTaskIncrementTick+0xd8>
 80107c8:	68bb      	ldr	r3, [r7, #8]
 80107ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80107cc:	4a22      	ldr	r2, [pc, #136]	; (8010858 <xTaskIncrementTick+0x160>)
 80107ce:	6013      	str	r3, [r2, #0]
 80107d0:	68bb      	ldr	r3, [r7, #8]
 80107d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80107d4:	4613      	mov	r3, r2
 80107d6:	009b      	lsls	r3, r3, #2
 80107d8:	4413      	add	r3, r2
 80107da:	009b      	lsls	r3, r3, #2
 80107dc:	4a1f      	ldr	r2, [pc, #124]	; (801085c <xTaskIncrementTick+0x164>)
 80107de:	441a      	add	r2, r3
 80107e0:	68bb      	ldr	r3, [r7, #8]
 80107e2:	3304      	adds	r3, #4
 80107e4:	4619      	mov	r1, r3
 80107e6:	4610      	mov	r0, r2
 80107e8:	f7fe fbd9 	bl	800ef9e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80107ec:	68bb      	ldr	r3, [r7, #8]
 80107ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80107f0:	4b1b      	ldr	r3, [pc, #108]	; (8010860 <xTaskIncrementTick+0x168>)
 80107f2:	681b      	ldr	r3, [r3, #0]
 80107f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80107f6:	429a      	cmp	r2, r3
 80107f8:	d3b8      	bcc.n	801076c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80107fa:	2301      	movs	r3, #1
 80107fc:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80107fe:	e7b5      	b.n	801076c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8010800:	4b17      	ldr	r3, [pc, #92]	; (8010860 <xTaskIncrementTick+0x168>)
 8010802:	681b      	ldr	r3, [r3, #0]
 8010804:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010806:	4915      	ldr	r1, [pc, #84]	; (801085c <xTaskIncrementTick+0x164>)
 8010808:	4613      	mov	r3, r2
 801080a:	009b      	lsls	r3, r3, #2
 801080c:	4413      	add	r3, r2
 801080e:	009b      	lsls	r3, r3, #2
 8010810:	440b      	add	r3, r1
 8010812:	681b      	ldr	r3, [r3, #0]
 8010814:	2b01      	cmp	r3, #1
 8010816:	d901      	bls.n	801081c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8010818:	2301      	movs	r3, #1
 801081a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 801081c:	4b11      	ldr	r3, [pc, #68]	; (8010864 <xTaskIncrementTick+0x16c>)
 801081e:	681b      	ldr	r3, [r3, #0]
 8010820:	2b00      	cmp	r3, #0
 8010822:	d007      	beq.n	8010834 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8010824:	2301      	movs	r3, #1
 8010826:	617b      	str	r3, [r7, #20]
 8010828:	e004      	b.n	8010834 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 801082a:	4b0f      	ldr	r3, [pc, #60]	; (8010868 <xTaskIncrementTick+0x170>)
 801082c:	681b      	ldr	r3, [r3, #0]
 801082e:	3301      	adds	r3, #1
 8010830:	4a0d      	ldr	r2, [pc, #52]	; (8010868 <xTaskIncrementTick+0x170>)
 8010832:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8010834:	697b      	ldr	r3, [r7, #20]
}
 8010836:	4618      	mov	r0, r3
 8010838:	3718      	adds	r7, #24
 801083a:	46bd      	mov	sp, r7
 801083c:	bd80      	pop	{r7, pc}
 801083e:	bf00      	nop
 8010840:	2000167c 	.word	0x2000167c
 8010844:	20001658 	.word	0x20001658
 8010848:	2000160c 	.word	0x2000160c
 801084c:	20001610 	.word	0x20001610
 8010850:	2000166c 	.word	0x2000166c
 8010854:	20001674 	.word	0x20001674
 8010858:	2000165c 	.word	0x2000165c
 801085c:	20001184 	.word	0x20001184
 8010860:	20001180 	.word	0x20001180
 8010864:	20001668 	.word	0x20001668
 8010868:	20001664 	.word	0x20001664

0801086c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 801086c:	b480      	push	{r7}
 801086e:	b085      	sub	sp, #20
 8010870:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8010872:	4b2a      	ldr	r3, [pc, #168]	; (801091c <vTaskSwitchContext+0xb0>)
 8010874:	681b      	ldr	r3, [r3, #0]
 8010876:	2b00      	cmp	r3, #0
 8010878:	d003      	beq.n	8010882 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 801087a:	4b29      	ldr	r3, [pc, #164]	; (8010920 <vTaskSwitchContext+0xb4>)
 801087c:	2201      	movs	r2, #1
 801087e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8010880:	e046      	b.n	8010910 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8010882:	4b27      	ldr	r3, [pc, #156]	; (8010920 <vTaskSwitchContext+0xb4>)
 8010884:	2200      	movs	r2, #0
 8010886:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010888:	4b26      	ldr	r3, [pc, #152]	; (8010924 <vTaskSwitchContext+0xb8>)
 801088a:	681b      	ldr	r3, [r3, #0]
 801088c:	60fb      	str	r3, [r7, #12]
 801088e:	e010      	b.n	80108b2 <vTaskSwitchContext+0x46>
 8010890:	68fb      	ldr	r3, [r7, #12]
 8010892:	2b00      	cmp	r3, #0
 8010894:	d10a      	bne.n	80108ac <vTaskSwitchContext+0x40>
	__asm volatile
 8010896:	f04f 0350 	mov.w	r3, #80	; 0x50
 801089a:	f383 8811 	msr	BASEPRI, r3
 801089e:	f3bf 8f6f 	isb	sy
 80108a2:	f3bf 8f4f 	dsb	sy
 80108a6:	607b      	str	r3, [r7, #4]
}
 80108a8:	bf00      	nop
 80108aa:	e7fe      	b.n	80108aa <vTaskSwitchContext+0x3e>
 80108ac:	68fb      	ldr	r3, [r7, #12]
 80108ae:	3b01      	subs	r3, #1
 80108b0:	60fb      	str	r3, [r7, #12]
 80108b2:	491d      	ldr	r1, [pc, #116]	; (8010928 <vTaskSwitchContext+0xbc>)
 80108b4:	68fa      	ldr	r2, [r7, #12]
 80108b6:	4613      	mov	r3, r2
 80108b8:	009b      	lsls	r3, r3, #2
 80108ba:	4413      	add	r3, r2
 80108bc:	009b      	lsls	r3, r3, #2
 80108be:	440b      	add	r3, r1
 80108c0:	681b      	ldr	r3, [r3, #0]
 80108c2:	2b00      	cmp	r3, #0
 80108c4:	d0e4      	beq.n	8010890 <vTaskSwitchContext+0x24>
 80108c6:	68fa      	ldr	r2, [r7, #12]
 80108c8:	4613      	mov	r3, r2
 80108ca:	009b      	lsls	r3, r3, #2
 80108cc:	4413      	add	r3, r2
 80108ce:	009b      	lsls	r3, r3, #2
 80108d0:	4a15      	ldr	r2, [pc, #84]	; (8010928 <vTaskSwitchContext+0xbc>)
 80108d2:	4413      	add	r3, r2
 80108d4:	60bb      	str	r3, [r7, #8]
 80108d6:	68bb      	ldr	r3, [r7, #8]
 80108d8:	685b      	ldr	r3, [r3, #4]
 80108da:	685a      	ldr	r2, [r3, #4]
 80108dc:	68bb      	ldr	r3, [r7, #8]
 80108de:	605a      	str	r2, [r3, #4]
 80108e0:	68bb      	ldr	r3, [r7, #8]
 80108e2:	685a      	ldr	r2, [r3, #4]
 80108e4:	68bb      	ldr	r3, [r7, #8]
 80108e6:	3308      	adds	r3, #8
 80108e8:	429a      	cmp	r2, r3
 80108ea:	d104      	bne.n	80108f6 <vTaskSwitchContext+0x8a>
 80108ec:	68bb      	ldr	r3, [r7, #8]
 80108ee:	685b      	ldr	r3, [r3, #4]
 80108f0:	685a      	ldr	r2, [r3, #4]
 80108f2:	68bb      	ldr	r3, [r7, #8]
 80108f4:	605a      	str	r2, [r3, #4]
 80108f6:	68bb      	ldr	r3, [r7, #8]
 80108f8:	685b      	ldr	r3, [r3, #4]
 80108fa:	68db      	ldr	r3, [r3, #12]
 80108fc:	4a0b      	ldr	r2, [pc, #44]	; (801092c <vTaskSwitchContext+0xc0>)
 80108fe:	6013      	str	r3, [r2, #0]
 8010900:	4a08      	ldr	r2, [pc, #32]	; (8010924 <vTaskSwitchContext+0xb8>)
 8010902:	68fb      	ldr	r3, [r7, #12]
 8010904:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8010906:	4b09      	ldr	r3, [pc, #36]	; (801092c <vTaskSwitchContext+0xc0>)
 8010908:	681b      	ldr	r3, [r3, #0]
 801090a:	3354      	adds	r3, #84	; 0x54
 801090c:	4a08      	ldr	r2, [pc, #32]	; (8010930 <vTaskSwitchContext+0xc4>)
 801090e:	6013      	str	r3, [r2, #0]
}
 8010910:	bf00      	nop
 8010912:	3714      	adds	r7, #20
 8010914:	46bd      	mov	sp, r7
 8010916:	f85d 7b04 	ldr.w	r7, [sp], #4
 801091a:	4770      	bx	lr
 801091c:	2000167c 	.word	0x2000167c
 8010920:	20001668 	.word	0x20001668
 8010924:	2000165c 	.word	0x2000165c
 8010928:	20001184 	.word	0x20001184
 801092c:	20001180 	.word	0x20001180
 8010930:	20000140 	.word	0x20000140

08010934 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8010934:	b580      	push	{r7, lr}
 8010936:	b084      	sub	sp, #16
 8010938:	af00      	add	r7, sp, #0
 801093a:	6078      	str	r0, [r7, #4]
 801093c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 801093e:	687b      	ldr	r3, [r7, #4]
 8010940:	2b00      	cmp	r3, #0
 8010942:	d10a      	bne.n	801095a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8010944:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010948:	f383 8811 	msr	BASEPRI, r3
 801094c:	f3bf 8f6f 	isb	sy
 8010950:	f3bf 8f4f 	dsb	sy
 8010954:	60fb      	str	r3, [r7, #12]
}
 8010956:	bf00      	nop
 8010958:	e7fe      	b.n	8010958 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 801095a:	4b07      	ldr	r3, [pc, #28]	; (8010978 <vTaskPlaceOnEventList+0x44>)
 801095c:	681b      	ldr	r3, [r3, #0]
 801095e:	3318      	adds	r3, #24
 8010960:	4619      	mov	r1, r3
 8010962:	6878      	ldr	r0, [r7, #4]
 8010964:	f7fe fb3f 	bl	800efe6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8010968:	2101      	movs	r1, #1
 801096a:	6838      	ldr	r0, [r7, #0]
 801096c:	f000 fb7e 	bl	801106c <prvAddCurrentTaskToDelayedList>
}
 8010970:	bf00      	nop
 8010972:	3710      	adds	r7, #16
 8010974:	46bd      	mov	sp, r7
 8010976:	bd80      	pop	{r7, pc}
 8010978:	20001180 	.word	0x20001180

0801097c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 801097c:	b580      	push	{r7, lr}
 801097e:	b086      	sub	sp, #24
 8010980:	af00      	add	r7, sp, #0
 8010982:	60f8      	str	r0, [r7, #12]
 8010984:	60b9      	str	r1, [r7, #8]
 8010986:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8010988:	68fb      	ldr	r3, [r7, #12]
 801098a:	2b00      	cmp	r3, #0
 801098c:	d10a      	bne.n	80109a4 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 801098e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010992:	f383 8811 	msr	BASEPRI, r3
 8010996:	f3bf 8f6f 	isb	sy
 801099a:	f3bf 8f4f 	dsb	sy
 801099e:	617b      	str	r3, [r7, #20]
}
 80109a0:	bf00      	nop
 80109a2:	e7fe      	b.n	80109a2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80109a4:	4b0a      	ldr	r3, [pc, #40]	; (80109d0 <vTaskPlaceOnEventListRestricted+0x54>)
 80109a6:	681b      	ldr	r3, [r3, #0]
 80109a8:	3318      	adds	r3, #24
 80109aa:	4619      	mov	r1, r3
 80109ac:	68f8      	ldr	r0, [r7, #12]
 80109ae:	f7fe faf6 	bl	800ef9e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80109b2:	687b      	ldr	r3, [r7, #4]
 80109b4:	2b00      	cmp	r3, #0
 80109b6:	d002      	beq.n	80109be <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80109b8:	f04f 33ff 	mov.w	r3, #4294967295
 80109bc:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80109be:	6879      	ldr	r1, [r7, #4]
 80109c0:	68b8      	ldr	r0, [r7, #8]
 80109c2:	f000 fb53 	bl	801106c <prvAddCurrentTaskToDelayedList>
	}
 80109c6:	bf00      	nop
 80109c8:	3718      	adds	r7, #24
 80109ca:	46bd      	mov	sp, r7
 80109cc:	bd80      	pop	{r7, pc}
 80109ce:	bf00      	nop
 80109d0:	20001180 	.word	0x20001180

080109d4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80109d4:	b580      	push	{r7, lr}
 80109d6:	b086      	sub	sp, #24
 80109d8:	af00      	add	r7, sp, #0
 80109da:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80109dc:	687b      	ldr	r3, [r7, #4]
 80109de:	68db      	ldr	r3, [r3, #12]
 80109e0:	68db      	ldr	r3, [r3, #12]
 80109e2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80109e4:	693b      	ldr	r3, [r7, #16]
 80109e6:	2b00      	cmp	r3, #0
 80109e8:	d10a      	bne.n	8010a00 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80109ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80109ee:	f383 8811 	msr	BASEPRI, r3
 80109f2:	f3bf 8f6f 	isb	sy
 80109f6:	f3bf 8f4f 	dsb	sy
 80109fa:	60fb      	str	r3, [r7, #12]
}
 80109fc:	bf00      	nop
 80109fe:	e7fe      	b.n	80109fe <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8010a00:	693b      	ldr	r3, [r7, #16]
 8010a02:	3318      	adds	r3, #24
 8010a04:	4618      	mov	r0, r3
 8010a06:	f7fe fb27 	bl	800f058 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8010a0a:	4b1e      	ldr	r3, [pc, #120]	; (8010a84 <xTaskRemoveFromEventList+0xb0>)
 8010a0c:	681b      	ldr	r3, [r3, #0]
 8010a0e:	2b00      	cmp	r3, #0
 8010a10:	d11d      	bne.n	8010a4e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8010a12:	693b      	ldr	r3, [r7, #16]
 8010a14:	3304      	adds	r3, #4
 8010a16:	4618      	mov	r0, r3
 8010a18:	f7fe fb1e 	bl	800f058 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8010a1c:	693b      	ldr	r3, [r7, #16]
 8010a1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010a20:	4b19      	ldr	r3, [pc, #100]	; (8010a88 <xTaskRemoveFromEventList+0xb4>)
 8010a22:	681b      	ldr	r3, [r3, #0]
 8010a24:	429a      	cmp	r2, r3
 8010a26:	d903      	bls.n	8010a30 <xTaskRemoveFromEventList+0x5c>
 8010a28:	693b      	ldr	r3, [r7, #16]
 8010a2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010a2c:	4a16      	ldr	r2, [pc, #88]	; (8010a88 <xTaskRemoveFromEventList+0xb4>)
 8010a2e:	6013      	str	r3, [r2, #0]
 8010a30:	693b      	ldr	r3, [r7, #16]
 8010a32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010a34:	4613      	mov	r3, r2
 8010a36:	009b      	lsls	r3, r3, #2
 8010a38:	4413      	add	r3, r2
 8010a3a:	009b      	lsls	r3, r3, #2
 8010a3c:	4a13      	ldr	r2, [pc, #76]	; (8010a8c <xTaskRemoveFromEventList+0xb8>)
 8010a3e:	441a      	add	r2, r3
 8010a40:	693b      	ldr	r3, [r7, #16]
 8010a42:	3304      	adds	r3, #4
 8010a44:	4619      	mov	r1, r3
 8010a46:	4610      	mov	r0, r2
 8010a48:	f7fe faa9 	bl	800ef9e <vListInsertEnd>
 8010a4c:	e005      	b.n	8010a5a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8010a4e:	693b      	ldr	r3, [r7, #16]
 8010a50:	3318      	adds	r3, #24
 8010a52:	4619      	mov	r1, r3
 8010a54:	480e      	ldr	r0, [pc, #56]	; (8010a90 <xTaskRemoveFromEventList+0xbc>)
 8010a56:	f7fe faa2 	bl	800ef9e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8010a5a:	693b      	ldr	r3, [r7, #16]
 8010a5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010a5e:	4b0d      	ldr	r3, [pc, #52]	; (8010a94 <xTaskRemoveFromEventList+0xc0>)
 8010a60:	681b      	ldr	r3, [r3, #0]
 8010a62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010a64:	429a      	cmp	r2, r3
 8010a66:	d905      	bls.n	8010a74 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8010a68:	2301      	movs	r3, #1
 8010a6a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8010a6c:	4b0a      	ldr	r3, [pc, #40]	; (8010a98 <xTaskRemoveFromEventList+0xc4>)
 8010a6e:	2201      	movs	r2, #1
 8010a70:	601a      	str	r2, [r3, #0]
 8010a72:	e001      	b.n	8010a78 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8010a74:	2300      	movs	r3, #0
 8010a76:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8010a78:	697b      	ldr	r3, [r7, #20]
}
 8010a7a:	4618      	mov	r0, r3
 8010a7c:	3718      	adds	r7, #24
 8010a7e:	46bd      	mov	sp, r7
 8010a80:	bd80      	pop	{r7, pc}
 8010a82:	bf00      	nop
 8010a84:	2000167c 	.word	0x2000167c
 8010a88:	2000165c 	.word	0x2000165c
 8010a8c:	20001184 	.word	0x20001184
 8010a90:	20001614 	.word	0x20001614
 8010a94:	20001180 	.word	0x20001180
 8010a98:	20001668 	.word	0x20001668

08010a9c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8010a9c:	b480      	push	{r7}
 8010a9e:	b083      	sub	sp, #12
 8010aa0:	af00      	add	r7, sp, #0
 8010aa2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8010aa4:	4b06      	ldr	r3, [pc, #24]	; (8010ac0 <vTaskInternalSetTimeOutState+0x24>)
 8010aa6:	681a      	ldr	r2, [r3, #0]
 8010aa8:	687b      	ldr	r3, [r7, #4]
 8010aaa:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8010aac:	4b05      	ldr	r3, [pc, #20]	; (8010ac4 <vTaskInternalSetTimeOutState+0x28>)
 8010aae:	681a      	ldr	r2, [r3, #0]
 8010ab0:	687b      	ldr	r3, [r7, #4]
 8010ab2:	605a      	str	r2, [r3, #4]
}
 8010ab4:	bf00      	nop
 8010ab6:	370c      	adds	r7, #12
 8010ab8:	46bd      	mov	sp, r7
 8010aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010abe:	4770      	bx	lr
 8010ac0:	2000166c 	.word	0x2000166c
 8010ac4:	20001658 	.word	0x20001658

08010ac8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8010ac8:	b580      	push	{r7, lr}
 8010aca:	b088      	sub	sp, #32
 8010acc:	af00      	add	r7, sp, #0
 8010ace:	6078      	str	r0, [r7, #4]
 8010ad0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8010ad2:	687b      	ldr	r3, [r7, #4]
 8010ad4:	2b00      	cmp	r3, #0
 8010ad6:	d10a      	bne.n	8010aee <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8010ad8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010adc:	f383 8811 	msr	BASEPRI, r3
 8010ae0:	f3bf 8f6f 	isb	sy
 8010ae4:	f3bf 8f4f 	dsb	sy
 8010ae8:	613b      	str	r3, [r7, #16]
}
 8010aea:	bf00      	nop
 8010aec:	e7fe      	b.n	8010aec <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8010aee:	683b      	ldr	r3, [r7, #0]
 8010af0:	2b00      	cmp	r3, #0
 8010af2:	d10a      	bne.n	8010b0a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8010af4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010af8:	f383 8811 	msr	BASEPRI, r3
 8010afc:	f3bf 8f6f 	isb	sy
 8010b00:	f3bf 8f4f 	dsb	sy
 8010b04:	60fb      	str	r3, [r7, #12]
}
 8010b06:	bf00      	nop
 8010b08:	e7fe      	b.n	8010b08 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8010b0a:	f000 ff7b 	bl	8011a04 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8010b0e:	4b1d      	ldr	r3, [pc, #116]	; (8010b84 <xTaskCheckForTimeOut+0xbc>)
 8010b10:	681b      	ldr	r3, [r3, #0]
 8010b12:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8010b14:	687b      	ldr	r3, [r7, #4]
 8010b16:	685b      	ldr	r3, [r3, #4]
 8010b18:	69ba      	ldr	r2, [r7, #24]
 8010b1a:	1ad3      	subs	r3, r2, r3
 8010b1c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8010b1e:	683b      	ldr	r3, [r7, #0]
 8010b20:	681b      	ldr	r3, [r3, #0]
 8010b22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010b26:	d102      	bne.n	8010b2e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8010b28:	2300      	movs	r3, #0
 8010b2a:	61fb      	str	r3, [r7, #28]
 8010b2c:	e023      	b.n	8010b76 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8010b2e:	687b      	ldr	r3, [r7, #4]
 8010b30:	681a      	ldr	r2, [r3, #0]
 8010b32:	4b15      	ldr	r3, [pc, #84]	; (8010b88 <xTaskCheckForTimeOut+0xc0>)
 8010b34:	681b      	ldr	r3, [r3, #0]
 8010b36:	429a      	cmp	r2, r3
 8010b38:	d007      	beq.n	8010b4a <xTaskCheckForTimeOut+0x82>
 8010b3a:	687b      	ldr	r3, [r7, #4]
 8010b3c:	685b      	ldr	r3, [r3, #4]
 8010b3e:	69ba      	ldr	r2, [r7, #24]
 8010b40:	429a      	cmp	r2, r3
 8010b42:	d302      	bcc.n	8010b4a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8010b44:	2301      	movs	r3, #1
 8010b46:	61fb      	str	r3, [r7, #28]
 8010b48:	e015      	b.n	8010b76 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8010b4a:	683b      	ldr	r3, [r7, #0]
 8010b4c:	681b      	ldr	r3, [r3, #0]
 8010b4e:	697a      	ldr	r2, [r7, #20]
 8010b50:	429a      	cmp	r2, r3
 8010b52:	d20b      	bcs.n	8010b6c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8010b54:	683b      	ldr	r3, [r7, #0]
 8010b56:	681a      	ldr	r2, [r3, #0]
 8010b58:	697b      	ldr	r3, [r7, #20]
 8010b5a:	1ad2      	subs	r2, r2, r3
 8010b5c:	683b      	ldr	r3, [r7, #0]
 8010b5e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8010b60:	6878      	ldr	r0, [r7, #4]
 8010b62:	f7ff ff9b 	bl	8010a9c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8010b66:	2300      	movs	r3, #0
 8010b68:	61fb      	str	r3, [r7, #28]
 8010b6a:	e004      	b.n	8010b76 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8010b6c:	683b      	ldr	r3, [r7, #0]
 8010b6e:	2200      	movs	r2, #0
 8010b70:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8010b72:	2301      	movs	r3, #1
 8010b74:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8010b76:	f000 ff75 	bl	8011a64 <vPortExitCritical>

	return xReturn;
 8010b7a:	69fb      	ldr	r3, [r7, #28]
}
 8010b7c:	4618      	mov	r0, r3
 8010b7e:	3720      	adds	r7, #32
 8010b80:	46bd      	mov	sp, r7
 8010b82:	bd80      	pop	{r7, pc}
 8010b84:	20001658 	.word	0x20001658
 8010b88:	2000166c 	.word	0x2000166c

08010b8c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8010b8c:	b480      	push	{r7}
 8010b8e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8010b90:	4b03      	ldr	r3, [pc, #12]	; (8010ba0 <vTaskMissedYield+0x14>)
 8010b92:	2201      	movs	r2, #1
 8010b94:	601a      	str	r2, [r3, #0]
}
 8010b96:	bf00      	nop
 8010b98:	46bd      	mov	sp, r7
 8010b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b9e:	4770      	bx	lr
 8010ba0:	20001668 	.word	0x20001668

08010ba4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8010ba4:	b580      	push	{r7, lr}
 8010ba6:	b082      	sub	sp, #8
 8010ba8:	af00      	add	r7, sp, #0
 8010baa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8010bac:	f000 f852 	bl	8010c54 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8010bb0:	4b06      	ldr	r3, [pc, #24]	; (8010bcc <prvIdleTask+0x28>)
 8010bb2:	681b      	ldr	r3, [r3, #0]
 8010bb4:	2b01      	cmp	r3, #1
 8010bb6:	d9f9      	bls.n	8010bac <prvIdleTask+0x8>
			{
				taskYIELD();
 8010bb8:	4b05      	ldr	r3, [pc, #20]	; (8010bd0 <prvIdleTask+0x2c>)
 8010bba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010bbe:	601a      	str	r2, [r3, #0]
 8010bc0:	f3bf 8f4f 	dsb	sy
 8010bc4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8010bc8:	e7f0      	b.n	8010bac <prvIdleTask+0x8>
 8010bca:	bf00      	nop
 8010bcc:	20001184 	.word	0x20001184
 8010bd0:	e000ed04 	.word	0xe000ed04

08010bd4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8010bd4:	b580      	push	{r7, lr}
 8010bd6:	b082      	sub	sp, #8
 8010bd8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8010bda:	2300      	movs	r3, #0
 8010bdc:	607b      	str	r3, [r7, #4]
 8010bde:	e00c      	b.n	8010bfa <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8010be0:	687a      	ldr	r2, [r7, #4]
 8010be2:	4613      	mov	r3, r2
 8010be4:	009b      	lsls	r3, r3, #2
 8010be6:	4413      	add	r3, r2
 8010be8:	009b      	lsls	r3, r3, #2
 8010bea:	4a12      	ldr	r2, [pc, #72]	; (8010c34 <prvInitialiseTaskLists+0x60>)
 8010bec:	4413      	add	r3, r2
 8010bee:	4618      	mov	r0, r3
 8010bf0:	f7fe f9a8 	bl	800ef44 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8010bf4:	687b      	ldr	r3, [r7, #4]
 8010bf6:	3301      	adds	r3, #1
 8010bf8:	607b      	str	r3, [r7, #4]
 8010bfa:	687b      	ldr	r3, [r7, #4]
 8010bfc:	2b37      	cmp	r3, #55	; 0x37
 8010bfe:	d9ef      	bls.n	8010be0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8010c00:	480d      	ldr	r0, [pc, #52]	; (8010c38 <prvInitialiseTaskLists+0x64>)
 8010c02:	f7fe f99f 	bl	800ef44 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8010c06:	480d      	ldr	r0, [pc, #52]	; (8010c3c <prvInitialiseTaskLists+0x68>)
 8010c08:	f7fe f99c 	bl	800ef44 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8010c0c:	480c      	ldr	r0, [pc, #48]	; (8010c40 <prvInitialiseTaskLists+0x6c>)
 8010c0e:	f7fe f999 	bl	800ef44 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8010c12:	480c      	ldr	r0, [pc, #48]	; (8010c44 <prvInitialiseTaskLists+0x70>)
 8010c14:	f7fe f996 	bl	800ef44 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8010c18:	480b      	ldr	r0, [pc, #44]	; (8010c48 <prvInitialiseTaskLists+0x74>)
 8010c1a:	f7fe f993 	bl	800ef44 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8010c1e:	4b0b      	ldr	r3, [pc, #44]	; (8010c4c <prvInitialiseTaskLists+0x78>)
 8010c20:	4a05      	ldr	r2, [pc, #20]	; (8010c38 <prvInitialiseTaskLists+0x64>)
 8010c22:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8010c24:	4b0a      	ldr	r3, [pc, #40]	; (8010c50 <prvInitialiseTaskLists+0x7c>)
 8010c26:	4a05      	ldr	r2, [pc, #20]	; (8010c3c <prvInitialiseTaskLists+0x68>)
 8010c28:	601a      	str	r2, [r3, #0]
}
 8010c2a:	bf00      	nop
 8010c2c:	3708      	adds	r7, #8
 8010c2e:	46bd      	mov	sp, r7
 8010c30:	bd80      	pop	{r7, pc}
 8010c32:	bf00      	nop
 8010c34:	20001184 	.word	0x20001184
 8010c38:	200015e4 	.word	0x200015e4
 8010c3c:	200015f8 	.word	0x200015f8
 8010c40:	20001614 	.word	0x20001614
 8010c44:	20001628 	.word	0x20001628
 8010c48:	20001640 	.word	0x20001640
 8010c4c:	2000160c 	.word	0x2000160c
 8010c50:	20001610 	.word	0x20001610

08010c54 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8010c54:	b580      	push	{r7, lr}
 8010c56:	b082      	sub	sp, #8
 8010c58:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8010c5a:	e019      	b.n	8010c90 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8010c5c:	f000 fed2 	bl	8011a04 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010c60:	4b10      	ldr	r3, [pc, #64]	; (8010ca4 <prvCheckTasksWaitingTermination+0x50>)
 8010c62:	68db      	ldr	r3, [r3, #12]
 8010c64:	68db      	ldr	r3, [r3, #12]
 8010c66:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8010c68:	687b      	ldr	r3, [r7, #4]
 8010c6a:	3304      	adds	r3, #4
 8010c6c:	4618      	mov	r0, r3
 8010c6e:	f7fe f9f3 	bl	800f058 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8010c72:	4b0d      	ldr	r3, [pc, #52]	; (8010ca8 <prvCheckTasksWaitingTermination+0x54>)
 8010c74:	681b      	ldr	r3, [r3, #0]
 8010c76:	3b01      	subs	r3, #1
 8010c78:	4a0b      	ldr	r2, [pc, #44]	; (8010ca8 <prvCheckTasksWaitingTermination+0x54>)
 8010c7a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8010c7c:	4b0b      	ldr	r3, [pc, #44]	; (8010cac <prvCheckTasksWaitingTermination+0x58>)
 8010c7e:	681b      	ldr	r3, [r3, #0]
 8010c80:	3b01      	subs	r3, #1
 8010c82:	4a0a      	ldr	r2, [pc, #40]	; (8010cac <prvCheckTasksWaitingTermination+0x58>)
 8010c84:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8010c86:	f000 feed 	bl	8011a64 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8010c8a:	6878      	ldr	r0, [r7, #4]
 8010c8c:	f000 f810 	bl	8010cb0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8010c90:	4b06      	ldr	r3, [pc, #24]	; (8010cac <prvCheckTasksWaitingTermination+0x58>)
 8010c92:	681b      	ldr	r3, [r3, #0]
 8010c94:	2b00      	cmp	r3, #0
 8010c96:	d1e1      	bne.n	8010c5c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8010c98:	bf00      	nop
 8010c9a:	bf00      	nop
 8010c9c:	3708      	adds	r7, #8
 8010c9e:	46bd      	mov	sp, r7
 8010ca0:	bd80      	pop	{r7, pc}
 8010ca2:	bf00      	nop
 8010ca4:	20001628 	.word	0x20001628
 8010ca8:	20001654 	.word	0x20001654
 8010cac:	2000163c 	.word	0x2000163c

08010cb0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8010cb0:	b580      	push	{r7, lr}
 8010cb2:	b084      	sub	sp, #16
 8010cb4:	af00      	add	r7, sp, #0
 8010cb6:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8010cb8:	687b      	ldr	r3, [r7, #4]
 8010cba:	3354      	adds	r3, #84	; 0x54
 8010cbc:	4618      	mov	r0, r3
 8010cbe:	f00b fcbf 	bl	801c640 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8010cc2:	687b      	ldr	r3, [r7, #4]
 8010cc4:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8010cc8:	2b00      	cmp	r3, #0
 8010cca:	d108      	bne.n	8010cde <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8010ccc:	687b      	ldr	r3, [r7, #4]
 8010cce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010cd0:	4618      	mov	r0, r3
 8010cd2:	f001 f885 	bl	8011de0 <vPortFree>
				vPortFree( pxTCB );
 8010cd6:	6878      	ldr	r0, [r7, #4]
 8010cd8:	f001 f882 	bl	8011de0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8010cdc:	e018      	b.n	8010d10 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8010cde:	687b      	ldr	r3, [r7, #4]
 8010ce0:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8010ce4:	2b01      	cmp	r3, #1
 8010ce6:	d103      	bne.n	8010cf0 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8010ce8:	6878      	ldr	r0, [r7, #4]
 8010cea:	f001 f879 	bl	8011de0 <vPortFree>
	}
 8010cee:	e00f      	b.n	8010d10 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8010cf0:	687b      	ldr	r3, [r7, #4]
 8010cf2:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8010cf6:	2b02      	cmp	r3, #2
 8010cf8:	d00a      	beq.n	8010d10 <prvDeleteTCB+0x60>
	__asm volatile
 8010cfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010cfe:	f383 8811 	msr	BASEPRI, r3
 8010d02:	f3bf 8f6f 	isb	sy
 8010d06:	f3bf 8f4f 	dsb	sy
 8010d0a:	60fb      	str	r3, [r7, #12]
}
 8010d0c:	bf00      	nop
 8010d0e:	e7fe      	b.n	8010d0e <prvDeleteTCB+0x5e>
	}
 8010d10:	bf00      	nop
 8010d12:	3710      	adds	r7, #16
 8010d14:	46bd      	mov	sp, r7
 8010d16:	bd80      	pop	{r7, pc}

08010d18 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8010d18:	b480      	push	{r7}
 8010d1a:	b083      	sub	sp, #12
 8010d1c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8010d1e:	4b0c      	ldr	r3, [pc, #48]	; (8010d50 <prvResetNextTaskUnblockTime+0x38>)
 8010d20:	681b      	ldr	r3, [r3, #0]
 8010d22:	681b      	ldr	r3, [r3, #0]
 8010d24:	2b00      	cmp	r3, #0
 8010d26:	d104      	bne.n	8010d32 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8010d28:	4b0a      	ldr	r3, [pc, #40]	; (8010d54 <prvResetNextTaskUnblockTime+0x3c>)
 8010d2a:	f04f 32ff 	mov.w	r2, #4294967295
 8010d2e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8010d30:	e008      	b.n	8010d44 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010d32:	4b07      	ldr	r3, [pc, #28]	; (8010d50 <prvResetNextTaskUnblockTime+0x38>)
 8010d34:	681b      	ldr	r3, [r3, #0]
 8010d36:	68db      	ldr	r3, [r3, #12]
 8010d38:	68db      	ldr	r3, [r3, #12]
 8010d3a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8010d3c:	687b      	ldr	r3, [r7, #4]
 8010d3e:	685b      	ldr	r3, [r3, #4]
 8010d40:	4a04      	ldr	r2, [pc, #16]	; (8010d54 <prvResetNextTaskUnblockTime+0x3c>)
 8010d42:	6013      	str	r3, [r2, #0]
}
 8010d44:	bf00      	nop
 8010d46:	370c      	adds	r7, #12
 8010d48:	46bd      	mov	sp, r7
 8010d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d4e:	4770      	bx	lr
 8010d50:	2000160c 	.word	0x2000160c
 8010d54:	20001674 	.word	0x20001674

08010d58 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8010d58:	b480      	push	{r7}
 8010d5a:	b083      	sub	sp, #12
 8010d5c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8010d5e:	4b0b      	ldr	r3, [pc, #44]	; (8010d8c <xTaskGetSchedulerState+0x34>)
 8010d60:	681b      	ldr	r3, [r3, #0]
 8010d62:	2b00      	cmp	r3, #0
 8010d64:	d102      	bne.n	8010d6c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8010d66:	2301      	movs	r3, #1
 8010d68:	607b      	str	r3, [r7, #4]
 8010d6a:	e008      	b.n	8010d7e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8010d6c:	4b08      	ldr	r3, [pc, #32]	; (8010d90 <xTaskGetSchedulerState+0x38>)
 8010d6e:	681b      	ldr	r3, [r3, #0]
 8010d70:	2b00      	cmp	r3, #0
 8010d72:	d102      	bne.n	8010d7a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8010d74:	2302      	movs	r3, #2
 8010d76:	607b      	str	r3, [r7, #4]
 8010d78:	e001      	b.n	8010d7e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8010d7a:	2300      	movs	r3, #0
 8010d7c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8010d7e:	687b      	ldr	r3, [r7, #4]
	}
 8010d80:	4618      	mov	r0, r3
 8010d82:	370c      	adds	r7, #12
 8010d84:	46bd      	mov	sp, r7
 8010d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d8a:	4770      	bx	lr
 8010d8c:	20001660 	.word	0x20001660
 8010d90:	2000167c 	.word	0x2000167c

08010d94 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8010d94:	b580      	push	{r7, lr}
 8010d96:	b084      	sub	sp, #16
 8010d98:	af00      	add	r7, sp, #0
 8010d9a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8010d9c:	687b      	ldr	r3, [r7, #4]
 8010d9e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8010da0:	2300      	movs	r3, #0
 8010da2:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8010da4:	687b      	ldr	r3, [r7, #4]
 8010da6:	2b00      	cmp	r3, #0
 8010da8:	d051      	beq.n	8010e4e <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8010daa:	68bb      	ldr	r3, [r7, #8]
 8010dac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010dae:	4b2a      	ldr	r3, [pc, #168]	; (8010e58 <xTaskPriorityInherit+0xc4>)
 8010db0:	681b      	ldr	r3, [r3, #0]
 8010db2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010db4:	429a      	cmp	r2, r3
 8010db6:	d241      	bcs.n	8010e3c <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8010db8:	68bb      	ldr	r3, [r7, #8]
 8010dba:	699b      	ldr	r3, [r3, #24]
 8010dbc:	2b00      	cmp	r3, #0
 8010dbe:	db06      	blt.n	8010dce <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010dc0:	4b25      	ldr	r3, [pc, #148]	; (8010e58 <xTaskPriorityInherit+0xc4>)
 8010dc2:	681b      	ldr	r3, [r3, #0]
 8010dc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010dc6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8010dca:	68bb      	ldr	r3, [r7, #8]
 8010dcc:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8010dce:	68bb      	ldr	r3, [r7, #8]
 8010dd0:	6959      	ldr	r1, [r3, #20]
 8010dd2:	68bb      	ldr	r3, [r7, #8]
 8010dd4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010dd6:	4613      	mov	r3, r2
 8010dd8:	009b      	lsls	r3, r3, #2
 8010dda:	4413      	add	r3, r2
 8010ddc:	009b      	lsls	r3, r3, #2
 8010dde:	4a1f      	ldr	r2, [pc, #124]	; (8010e5c <xTaskPriorityInherit+0xc8>)
 8010de0:	4413      	add	r3, r2
 8010de2:	4299      	cmp	r1, r3
 8010de4:	d122      	bne.n	8010e2c <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8010de6:	68bb      	ldr	r3, [r7, #8]
 8010de8:	3304      	adds	r3, #4
 8010dea:	4618      	mov	r0, r3
 8010dec:	f7fe f934 	bl	800f058 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8010df0:	4b19      	ldr	r3, [pc, #100]	; (8010e58 <xTaskPriorityInherit+0xc4>)
 8010df2:	681b      	ldr	r3, [r3, #0]
 8010df4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010df6:	68bb      	ldr	r3, [r7, #8]
 8010df8:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8010dfa:	68bb      	ldr	r3, [r7, #8]
 8010dfc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010dfe:	4b18      	ldr	r3, [pc, #96]	; (8010e60 <xTaskPriorityInherit+0xcc>)
 8010e00:	681b      	ldr	r3, [r3, #0]
 8010e02:	429a      	cmp	r2, r3
 8010e04:	d903      	bls.n	8010e0e <xTaskPriorityInherit+0x7a>
 8010e06:	68bb      	ldr	r3, [r7, #8]
 8010e08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010e0a:	4a15      	ldr	r2, [pc, #84]	; (8010e60 <xTaskPriorityInherit+0xcc>)
 8010e0c:	6013      	str	r3, [r2, #0]
 8010e0e:	68bb      	ldr	r3, [r7, #8]
 8010e10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010e12:	4613      	mov	r3, r2
 8010e14:	009b      	lsls	r3, r3, #2
 8010e16:	4413      	add	r3, r2
 8010e18:	009b      	lsls	r3, r3, #2
 8010e1a:	4a10      	ldr	r2, [pc, #64]	; (8010e5c <xTaskPriorityInherit+0xc8>)
 8010e1c:	441a      	add	r2, r3
 8010e1e:	68bb      	ldr	r3, [r7, #8]
 8010e20:	3304      	adds	r3, #4
 8010e22:	4619      	mov	r1, r3
 8010e24:	4610      	mov	r0, r2
 8010e26:	f7fe f8ba 	bl	800ef9e <vListInsertEnd>
 8010e2a:	e004      	b.n	8010e36 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8010e2c:	4b0a      	ldr	r3, [pc, #40]	; (8010e58 <xTaskPriorityInherit+0xc4>)
 8010e2e:	681b      	ldr	r3, [r3, #0]
 8010e30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010e32:	68bb      	ldr	r3, [r7, #8]
 8010e34:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8010e36:	2301      	movs	r3, #1
 8010e38:	60fb      	str	r3, [r7, #12]
 8010e3a:	e008      	b.n	8010e4e <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8010e3c:	68bb      	ldr	r3, [r7, #8]
 8010e3e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8010e40:	4b05      	ldr	r3, [pc, #20]	; (8010e58 <xTaskPriorityInherit+0xc4>)
 8010e42:	681b      	ldr	r3, [r3, #0]
 8010e44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010e46:	429a      	cmp	r2, r3
 8010e48:	d201      	bcs.n	8010e4e <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8010e4a:	2301      	movs	r3, #1
 8010e4c:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8010e4e:	68fb      	ldr	r3, [r7, #12]
	}
 8010e50:	4618      	mov	r0, r3
 8010e52:	3710      	adds	r7, #16
 8010e54:	46bd      	mov	sp, r7
 8010e56:	bd80      	pop	{r7, pc}
 8010e58:	20001180 	.word	0x20001180
 8010e5c:	20001184 	.word	0x20001184
 8010e60:	2000165c 	.word	0x2000165c

08010e64 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8010e64:	b580      	push	{r7, lr}
 8010e66:	b086      	sub	sp, #24
 8010e68:	af00      	add	r7, sp, #0
 8010e6a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8010e6c:	687b      	ldr	r3, [r7, #4]
 8010e6e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8010e70:	2300      	movs	r3, #0
 8010e72:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8010e74:	687b      	ldr	r3, [r7, #4]
 8010e76:	2b00      	cmp	r3, #0
 8010e78:	d056      	beq.n	8010f28 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8010e7a:	4b2e      	ldr	r3, [pc, #184]	; (8010f34 <xTaskPriorityDisinherit+0xd0>)
 8010e7c:	681b      	ldr	r3, [r3, #0]
 8010e7e:	693a      	ldr	r2, [r7, #16]
 8010e80:	429a      	cmp	r2, r3
 8010e82:	d00a      	beq.n	8010e9a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8010e84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010e88:	f383 8811 	msr	BASEPRI, r3
 8010e8c:	f3bf 8f6f 	isb	sy
 8010e90:	f3bf 8f4f 	dsb	sy
 8010e94:	60fb      	str	r3, [r7, #12]
}
 8010e96:	bf00      	nop
 8010e98:	e7fe      	b.n	8010e98 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8010e9a:	693b      	ldr	r3, [r7, #16]
 8010e9c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010e9e:	2b00      	cmp	r3, #0
 8010ea0:	d10a      	bne.n	8010eb8 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8010ea2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010ea6:	f383 8811 	msr	BASEPRI, r3
 8010eaa:	f3bf 8f6f 	isb	sy
 8010eae:	f3bf 8f4f 	dsb	sy
 8010eb2:	60bb      	str	r3, [r7, #8]
}
 8010eb4:	bf00      	nop
 8010eb6:	e7fe      	b.n	8010eb6 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8010eb8:	693b      	ldr	r3, [r7, #16]
 8010eba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010ebc:	1e5a      	subs	r2, r3, #1
 8010ebe:	693b      	ldr	r3, [r7, #16]
 8010ec0:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8010ec2:	693b      	ldr	r3, [r7, #16]
 8010ec4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010ec6:	693b      	ldr	r3, [r7, #16]
 8010ec8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010eca:	429a      	cmp	r2, r3
 8010ecc:	d02c      	beq.n	8010f28 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8010ece:	693b      	ldr	r3, [r7, #16]
 8010ed0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010ed2:	2b00      	cmp	r3, #0
 8010ed4:	d128      	bne.n	8010f28 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8010ed6:	693b      	ldr	r3, [r7, #16]
 8010ed8:	3304      	adds	r3, #4
 8010eda:	4618      	mov	r0, r3
 8010edc:	f7fe f8bc 	bl	800f058 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8010ee0:	693b      	ldr	r3, [r7, #16]
 8010ee2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8010ee4:	693b      	ldr	r3, [r7, #16]
 8010ee6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010ee8:	693b      	ldr	r3, [r7, #16]
 8010eea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010eec:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8010ef0:	693b      	ldr	r3, [r7, #16]
 8010ef2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8010ef4:	693b      	ldr	r3, [r7, #16]
 8010ef6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010ef8:	4b0f      	ldr	r3, [pc, #60]	; (8010f38 <xTaskPriorityDisinherit+0xd4>)
 8010efa:	681b      	ldr	r3, [r3, #0]
 8010efc:	429a      	cmp	r2, r3
 8010efe:	d903      	bls.n	8010f08 <xTaskPriorityDisinherit+0xa4>
 8010f00:	693b      	ldr	r3, [r7, #16]
 8010f02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010f04:	4a0c      	ldr	r2, [pc, #48]	; (8010f38 <xTaskPriorityDisinherit+0xd4>)
 8010f06:	6013      	str	r3, [r2, #0]
 8010f08:	693b      	ldr	r3, [r7, #16]
 8010f0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010f0c:	4613      	mov	r3, r2
 8010f0e:	009b      	lsls	r3, r3, #2
 8010f10:	4413      	add	r3, r2
 8010f12:	009b      	lsls	r3, r3, #2
 8010f14:	4a09      	ldr	r2, [pc, #36]	; (8010f3c <xTaskPriorityDisinherit+0xd8>)
 8010f16:	441a      	add	r2, r3
 8010f18:	693b      	ldr	r3, [r7, #16]
 8010f1a:	3304      	adds	r3, #4
 8010f1c:	4619      	mov	r1, r3
 8010f1e:	4610      	mov	r0, r2
 8010f20:	f7fe f83d 	bl	800ef9e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8010f24:	2301      	movs	r3, #1
 8010f26:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8010f28:	697b      	ldr	r3, [r7, #20]
	}
 8010f2a:	4618      	mov	r0, r3
 8010f2c:	3718      	adds	r7, #24
 8010f2e:	46bd      	mov	sp, r7
 8010f30:	bd80      	pop	{r7, pc}
 8010f32:	bf00      	nop
 8010f34:	20001180 	.word	0x20001180
 8010f38:	2000165c 	.word	0x2000165c
 8010f3c:	20001184 	.word	0x20001184

08010f40 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8010f40:	b580      	push	{r7, lr}
 8010f42:	b088      	sub	sp, #32
 8010f44:	af00      	add	r7, sp, #0
 8010f46:	6078      	str	r0, [r7, #4]
 8010f48:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8010f4a:	687b      	ldr	r3, [r7, #4]
 8010f4c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8010f4e:	2301      	movs	r3, #1
 8010f50:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8010f52:	687b      	ldr	r3, [r7, #4]
 8010f54:	2b00      	cmp	r3, #0
 8010f56:	d06a      	beq.n	801102e <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8010f58:	69bb      	ldr	r3, [r7, #24]
 8010f5a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010f5c:	2b00      	cmp	r3, #0
 8010f5e:	d10a      	bne.n	8010f76 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8010f60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010f64:	f383 8811 	msr	BASEPRI, r3
 8010f68:	f3bf 8f6f 	isb	sy
 8010f6c:	f3bf 8f4f 	dsb	sy
 8010f70:	60fb      	str	r3, [r7, #12]
}
 8010f72:	bf00      	nop
 8010f74:	e7fe      	b.n	8010f74 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8010f76:	69bb      	ldr	r3, [r7, #24]
 8010f78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010f7a:	683a      	ldr	r2, [r7, #0]
 8010f7c:	429a      	cmp	r2, r3
 8010f7e:	d902      	bls.n	8010f86 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8010f80:	683b      	ldr	r3, [r7, #0]
 8010f82:	61fb      	str	r3, [r7, #28]
 8010f84:	e002      	b.n	8010f8c <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8010f86:	69bb      	ldr	r3, [r7, #24]
 8010f88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010f8a:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8010f8c:	69bb      	ldr	r3, [r7, #24]
 8010f8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010f90:	69fa      	ldr	r2, [r7, #28]
 8010f92:	429a      	cmp	r2, r3
 8010f94:	d04b      	beq.n	801102e <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8010f96:	69bb      	ldr	r3, [r7, #24]
 8010f98:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010f9a:	697a      	ldr	r2, [r7, #20]
 8010f9c:	429a      	cmp	r2, r3
 8010f9e:	d146      	bne.n	801102e <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8010fa0:	4b25      	ldr	r3, [pc, #148]	; (8011038 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 8010fa2:	681b      	ldr	r3, [r3, #0]
 8010fa4:	69ba      	ldr	r2, [r7, #24]
 8010fa6:	429a      	cmp	r2, r3
 8010fa8:	d10a      	bne.n	8010fc0 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8010faa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010fae:	f383 8811 	msr	BASEPRI, r3
 8010fb2:	f3bf 8f6f 	isb	sy
 8010fb6:	f3bf 8f4f 	dsb	sy
 8010fba:	60bb      	str	r3, [r7, #8]
}
 8010fbc:	bf00      	nop
 8010fbe:	e7fe      	b.n	8010fbe <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8010fc0:	69bb      	ldr	r3, [r7, #24]
 8010fc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010fc4:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8010fc6:	69bb      	ldr	r3, [r7, #24]
 8010fc8:	69fa      	ldr	r2, [r7, #28]
 8010fca:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8010fcc:	69bb      	ldr	r3, [r7, #24]
 8010fce:	699b      	ldr	r3, [r3, #24]
 8010fd0:	2b00      	cmp	r3, #0
 8010fd2:	db04      	blt.n	8010fde <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010fd4:	69fb      	ldr	r3, [r7, #28]
 8010fd6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8010fda:	69bb      	ldr	r3, [r7, #24]
 8010fdc:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8010fde:	69bb      	ldr	r3, [r7, #24]
 8010fe0:	6959      	ldr	r1, [r3, #20]
 8010fe2:	693a      	ldr	r2, [r7, #16]
 8010fe4:	4613      	mov	r3, r2
 8010fe6:	009b      	lsls	r3, r3, #2
 8010fe8:	4413      	add	r3, r2
 8010fea:	009b      	lsls	r3, r3, #2
 8010fec:	4a13      	ldr	r2, [pc, #76]	; (801103c <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8010fee:	4413      	add	r3, r2
 8010ff0:	4299      	cmp	r1, r3
 8010ff2:	d11c      	bne.n	801102e <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8010ff4:	69bb      	ldr	r3, [r7, #24]
 8010ff6:	3304      	adds	r3, #4
 8010ff8:	4618      	mov	r0, r3
 8010ffa:	f7fe f82d 	bl	800f058 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8010ffe:	69bb      	ldr	r3, [r7, #24]
 8011000:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011002:	4b0f      	ldr	r3, [pc, #60]	; (8011040 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8011004:	681b      	ldr	r3, [r3, #0]
 8011006:	429a      	cmp	r2, r3
 8011008:	d903      	bls.n	8011012 <vTaskPriorityDisinheritAfterTimeout+0xd2>
 801100a:	69bb      	ldr	r3, [r7, #24]
 801100c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801100e:	4a0c      	ldr	r2, [pc, #48]	; (8011040 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8011010:	6013      	str	r3, [r2, #0]
 8011012:	69bb      	ldr	r3, [r7, #24]
 8011014:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011016:	4613      	mov	r3, r2
 8011018:	009b      	lsls	r3, r3, #2
 801101a:	4413      	add	r3, r2
 801101c:	009b      	lsls	r3, r3, #2
 801101e:	4a07      	ldr	r2, [pc, #28]	; (801103c <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8011020:	441a      	add	r2, r3
 8011022:	69bb      	ldr	r3, [r7, #24]
 8011024:	3304      	adds	r3, #4
 8011026:	4619      	mov	r1, r3
 8011028:	4610      	mov	r0, r2
 801102a:	f7fd ffb8 	bl	800ef9e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 801102e:	bf00      	nop
 8011030:	3720      	adds	r7, #32
 8011032:	46bd      	mov	sp, r7
 8011034:	bd80      	pop	{r7, pc}
 8011036:	bf00      	nop
 8011038:	20001180 	.word	0x20001180
 801103c:	20001184 	.word	0x20001184
 8011040:	2000165c 	.word	0x2000165c

08011044 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8011044:	b480      	push	{r7}
 8011046:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8011048:	4b07      	ldr	r3, [pc, #28]	; (8011068 <pvTaskIncrementMutexHeldCount+0x24>)
 801104a:	681b      	ldr	r3, [r3, #0]
 801104c:	2b00      	cmp	r3, #0
 801104e:	d004      	beq.n	801105a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8011050:	4b05      	ldr	r3, [pc, #20]	; (8011068 <pvTaskIncrementMutexHeldCount+0x24>)
 8011052:	681b      	ldr	r3, [r3, #0]
 8011054:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8011056:	3201      	adds	r2, #1
 8011058:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 801105a:	4b03      	ldr	r3, [pc, #12]	; (8011068 <pvTaskIncrementMutexHeldCount+0x24>)
 801105c:	681b      	ldr	r3, [r3, #0]
	}
 801105e:	4618      	mov	r0, r3
 8011060:	46bd      	mov	sp, r7
 8011062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011066:	4770      	bx	lr
 8011068:	20001180 	.word	0x20001180

0801106c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 801106c:	b580      	push	{r7, lr}
 801106e:	b084      	sub	sp, #16
 8011070:	af00      	add	r7, sp, #0
 8011072:	6078      	str	r0, [r7, #4]
 8011074:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8011076:	4b21      	ldr	r3, [pc, #132]	; (80110fc <prvAddCurrentTaskToDelayedList+0x90>)
 8011078:	681b      	ldr	r3, [r3, #0]
 801107a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801107c:	4b20      	ldr	r3, [pc, #128]	; (8011100 <prvAddCurrentTaskToDelayedList+0x94>)
 801107e:	681b      	ldr	r3, [r3, #0]
 8011080:	3304      	adds	r3, #4
 8011082:	4618      	mov	r0, r3
 8011084:	f7fd ffe8 	bl	800f058 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8011088:	687b      	ldr	r3, [r7, #4]
 801108a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801108e:	d10a      	bne.n	80110a6 <prvAddCurrentTaskToDelayedList+0x3a>
 8011090:	683b      	ldr	r3, [r7, #0]
 8011092:	2b00      	cmp	r3, #0
 8011094:	d007      	beq.n	80110a6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8011096:	4b1a      	ldr	r3, [pc, #104]	; (8011100 <prvAddCurrentTaskToDelayedList+0x94>)
 8011098:	681b      	ldr	r3, [r3, #0]
 801109a:	3304      	adds	r3, #4
 801109c:	4619      	mov	r1, r3
 801109e:	4819      	ldr	r0, [pc, #100]	; (8011104 <prvAddCurrentTaskToDelayedList+0x98>)
 80110a0:	f7fd ff7d 	bl	800ef9e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80110a4:	e026      	b.n	80110f4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80110a6:	68fa      	ldr	r2, [r7, #12]
 80110a8:	687b      	ldr	r3, [r7, #4]
 80110aa:	4413      	add	r3, r2
 80110ac:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80110ae:	4b14      	ldr	r3, [pc, #80]	; (8011100 <prvAddCurrentTaskToDelayedList+0x94>)
 80110b0:	681b      	ldr	r3, [r3, #0]
 80110b2:	68ba      	ldr	r2, [r7, #8]
 80110b4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80110b6:	68ba      	ldr	r2, [r7, #8]
 80110b8:	68fb      	ldr	r3, [r7, #12]
 80110ba:	429a      	cmp	r2, r3
 80110bc:	d209      	bcs.n	80110d2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80110be:	4b12      	ldr	r3, [pc, #72]	; (8011108 <prvAddCurrentTaskToDelayedList+0x9c>)
 80110c0:	681a      	ldr	r2, [r3, #0]
 80110c2:	4b0f      	ldr	r3, [pc, #60]	; (8011100 <prvAddCurrentTaskToDelayedList+0x94>)
 80110c4:	681b      	ldr	r3, [r3, #0]
 80110c6:	3304      	adds	r3, #4
 80110c8:	4619      	mov	r1, r3
 80110ca:	4610      	mov	r0, r2
 80110cc:	f7fd ff8b 	bl	800efe6 <vListInsert>
}
 80110d0:	e010      	b.n	80110f4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80110d2:	4b0e      	ldr	r3, [pc, #56]	; (801110c <prvAddCurrentTaskToDelayedList+0xa0>)
 80110d4:	681a      	ldr	r2, [r3, #0]
 80110d6:	4b0a      	ldr	r3, [pc, #40]	; (8011100 <prvAddCurrentTaskToDelayedList+0x94>)
 80110d8:	681b      	ldr	r3, [r3, #0]
 80110da:	3304      	adds	r3, #4
 80110dc:	4619      	mov	r1, r3
 80110de:	4610      	mov	r0, r2
 80110e0:	f7fd ff81 	bl	800efe6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80110e4:	4b0a      	ldr	r3, [pc, #40]	; (8011110 <prvAddCurrentTaskToDelayedList+0xa4>)
 80110e6:	681b      	ldr	r3, [r3, #0]
 80110e8:	68ba      	ldr	r2, [r7, #8]
 80110ea:	429a      	cmp	r2, r3
 80110ec:	d202      	bcs.n	80110f4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80110ee:	4a08      	ldr	r2, [pc, #32]	; (8011110 <prvAddCurrentTaskToDelayedList+0xa4>)
 80110f0:	68bb      	ldr	r3, [r7, #8]
 80110f2:	6013      	str	r3, [r2, #0]
}
 80110f4:	bf00      	nop
 80110f6:	3710      	adds	r7, #16
 80110f8:	46bd      	mov	sp, r7
 80110fa:	bd80      	pop	{r7, pc}
 80110fc:	20001658 	.word	0x20001658
 8011100:	20001180 	.word	0x20001180
 8011104:	20001640 	.word	0x20001640
 8011108:	20001610 	.word	0x20001610
 801110c:	2000160c 	.word	0x2000160c
 8011110:	20001674 	.word	0x20001674

08011114 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8011114:	b580      	push	{r7, lr}
 8011116:	b08a      	sub	sp, #40	; 0x28
 8011118:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 801111a:	2300      	movs	r3, #0
 801111c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 801111e:	f000 fb07 	bl	8011730 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8011122:	4b1c      	ldr	r3, [pc, #112]	; (8011194 <xTimerCreateTimerTask+0x80>)
 8011124:	681b      	ldr	r3, [r3, #0]
 8011126:	2b00      	cmp	r3, #0
 8011128:	d021      	beq.n	801116e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 801112a:	2300      	movs	r3, #0
 801112c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 801112e:	2300      	movs	r3, #0
 8011130:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8011132:	1d3a      	adds	r2, r7, #4
 8011134:	f107 0108 	add.w	r1, r7, #8
 8011138:	f107 030c 	add.w	r3, r7, #12
 801113c:	4618      	mov	r0, r3
 801113e:	f7fd fee7 	bl	800ef10 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8011142:	6879      	ldr	r1, [r7, #4]
 8011144:	68bb      	ldr	r3, [r7, #8]
 8011146:	68fa      	ldr	r2, [r7, #12]
 8011148:	9202      	str	r2, [sp, #8]
 801114a:	9301      	str	r3, [sp, #4]
 801114c:	2302      	movs	r3, #2
 801114e:	9300      	str	r3, [sp, #0]
 8011150:	2300      	movs	r3, #0
 8011152:	460a      	mov	r2, r1
 8011154:	4910      	ldr	r1, [pc, #64]	; (8011198 <xTimerCreateTimerTask+0x84>)
 8011156:	4811      	ldr	r0, [pc, #68]	; (801119c <xTimerCreateTimerTask+0x88>)
 8011158:	f7fe ffb6 	bl	80100c8 <xTaskCreateStatic>
 801115c:	4603      	mov	r3, r0
 801115e:	4a10      	ldr	r2, [pc, #64]	; (80111a0 <xTimerCreateTimerTask+0x8c>)
 8011160:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8011162:	4b0f      	ldr	r3, [pc, #60]	; (80111a0 <xTimerCreateTimerTask+0x8c>)
 8011164:	681b      	ldr	r3, [r3, #0]
 8011166:	2b00      	cmp	r3, #0
 8011168:	d001      	beq.n	801116e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 801116a:	2301      	movs	r3, #1
 801116c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 801116e:	697b      	ldr	r3, [r7, #20]
 8011170:	2b00      	cmp	r3, #0
 8011172:	d10a      	bne.n	801118a <xTimerCreateTimerTask+0x76>
	__asm volatile
 8011174:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011178:	f383 8811 	msr	BASEPRI, r3
 801117c:	f3bf 8f6f 	isb	sy
 8011180:	f3bf 8f4f 	dsb	sy
 8011184:	613b      	str	r3, [r7, #16]
}
 8011186:	bf00      	nop
 8011188:	e7fe      	b.n	8011188 <xTimerCreateTimerTask+0x74>
	return xReturn;
 801118a:	697b      	ldr	r3, [r7, #20]
}
 801118c:	4618      	mov	r0, r3
 801118e:	3718      	adds	r7, #24
 8011190:	46bd      	mov	sp, r7
 8011192:	bd80      	pop	{r7, pc}
 8011194:	200016b0 	.word	0x200016b0
 8011198:	0801e580 	.word	0x0801e580
 801119c:	080112d9 	.word	0x080112d9
 80111a0:	200016b4 	.word	0x200016b4

080111a4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80111a4:	b580      	push	{r7, lr}
 80111a6:	b08a      	sub	sp, #40	; 0x28
 80111a8:	af00      	add	r7, sp, #0
 80111aa:	60f8      	str	r0, [r7, #12]
 80111ac:	60b9      	str	r1, [r7, #8]
 80111ae:	607a      	str	r2, [r7, #4]
 80111b0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80111b2:	2300      	movs	r3, #0
 80111b4:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80111b6:	68fb      	ldr	r3, [r7, #12]
 80111b8:	2b00      	cmp	r3, #0
 80111ba:	d10a      	bne.n	80111d2 <xTimerGenericCommand+0x2e>
	__asm volatile
 80111bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80111c0:	f383 8811 	msr	BASEPRI, r3
 80111c4:	f3bf 8f6f 	isb	sy
 80111c8:	f3bf 8f4f 	dsb	sy
 80111cc:	623b      	str	r3, [r7, #32]
}
 80111ce:	bf00      	nop
 80111d0:	e7fe      	b.n	80111d0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80111d2:	4b1a      	ldr	r3, [pc, #104]	; (801123c <xTimerGenericCommand+0x98>)
 80111d4:	681b      	ldr	r3, [r3, #0]
 80111d6:	2b00      	cmp	r3, #0
 80111d8:	d02a      	beq.n	8011230 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80111da:	68bb      	ldr	r3, [r7, #8]
 80111dc:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80111de:	687b      	ldr	r3, [r7, #4]
 80111e0:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80111e2:	68fb      	ldr	r3, [r7, #12]
 80111e4:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80111e6:	68bb      	ldr	r3, [r7, #8]
 80111e8:	2b05      	cmp	r3, #5
 80111ea:	dc18      	bgt.n	801121e <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80111ec:	f7ff fdb4 	bl	8010d58 <xTaskGetSchedulerState>
 80111f0:	4603      	mov	r3, r0
 80111f2:	2b02      	cmp	r3, #2
 80111f4:	d109      	bne.n	801120a <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80111f6:	4b11      	ldr	r3, [pc, #68]	; (801123c <xTimerGenericCommand+0x98>)
 80111f8:	6818      	ldr	r0, [r3, #0]
 80111fa:	f107 0110 	add.w	r1, r7, #16
 80111fe:	2300      	movs	r3, #0
 8011200:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011202:	f7fe f8fb 	bl	800f3fc <xQueueGenericSend>
 8011206:	6278      	str	r0, [r7, #36]	; 0x24
 8011208:	e012      	b.n	8011230 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 801120a:	4b0c      	ldr	r3, [pc, #48]	; (801123c <xTimerGenericCommand+0x98>)
 801120c:	6818      	ldr	r0, [r3, #0]
 801120e:	f107 0110 	add.w	r1, r7, #16
 8011212:	2300      	movs	r3, #0
 8011214:	2200      	movs	r2, #0
 8011216:	f7fe f8f1 	bl	800f3fc <xQueueGenericSend>
 801121a:	6278      	str	r0, [r7, #36]	; 0x24
 801121c:	e008      	b.n	8011230 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 801121e:	4b07      	ldr	r3, [pc, #28]	; (801123c <xTimerGenericCommand+0x98>)
 8011220:	6818      	ldr	r0, [r3, #0]
 8011222:	f107 0110 	add.w	r1, r7, #16
 8011226:	2300      	movs	r3, #0
 8011228:	683a      	ldr	r2, [r7, #0]
 801122a:	f7fe f9e5 	bl	800f5f8 <xQueueGenericSendFromISR>
 801122e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8011230:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8011232:	4618      	mov	r0, r3
 8011234:	3728      	adds	r7, #40	; 0x28
 8011236:	46bd      	mov	sp, r7
 8011238:	bd80      	pop	{r7, pc}
 801123a:	bf00      	nop
 801123c:	200016b0 	.word	0x200016b0

08011240 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8011240:	b580      	push	{r7, lr}
 8011242:	b088      	sub	sp, #32
 8011244:	af02      	add	r7, sp, #8
 8011246:	6078      	str	r0, [r7, #4]
 8011248:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801124a:	4b22      	ldr	r3, [pc, #136]	; (80112d4 <prvProcessExpiredTimer+0x94>)
 801124c:	681b      	ldr	r3, [r3, #0]
 801124e:	68db      	ldr	r3, [r3, #12]
 8011250:	68db      	ldr	r3, [r3, #12]
 8011252:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8011254:	697b      	ldr	r3, [r7, #20]
 8011256:	3304      	adds	r3, #4
 8011258:	4618      	mov	r0, r3
 801125a:	f7fd fefd 	bl	800f058 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801125e:	697b      	ldr	r3, [r7, #20]
 8011260:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8011264:	f003 0304 	and.w	r3, r3, #4
 8011268:	2b00      	cmp	r3, #0
 801126a:	d022      	beq.n	80112b2 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 801126c:	697b      	ldr	r3, [r7, #20]
 801126e:	699a      	ldr	r2, [r3, #24]
 8011270:	687b      	ldr	r3, [r7, #4]
 8011272:	18d1      	adds	r1, r2, r3
 8011274:	687b      	ldr	r3, [r7, #4]
 8011276:	683a      	ldr	r2, [r7, #0]
 8011278:	6978      	ldr	r0, [r7, #20]
 801127a:	f000 f8d1 	bl	8011420 <prvInsertTimerInActiveList>
 801127e:	4603      	mov	r3, r0
 8011280:	2b00      	cmp	r3, #0
 8011282:	d01f      	beq.n	80112c4 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8011284:	2300      	movs	r3, #0
 8011286:	9300      	str	r3, [sp, #0]
 8011288:	2300      	movs	r3, #0
 801128a:	687a      	ldr	r2, [r7, #4]
 801128c:	2100      	movs	r1, #0
 801128e:	6978      	ldr	r0, [r7, #20]
 8011290:	f7ff ff88 	bl	80111a4 <xTimerGenericCommand>
 8011294:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8011296:	693b      	ldr	r3, [r7, #16]
 8011298:	2b00      	cmp	r3, #0
 801129a:	d113      	bne.n	80112c4 <prvProcessExpiredTimer+0x84>
	__asm volatile
 801129c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80112a0:	f383 8811 	msr	BASEPRI, r3
 80112a4:	f3bf 8f6f 	isb	sy
 80112a8:	f3bf 8f4f 	dsb	sy
 80112ac:	60fb      	str	r3, [r7, #12]
}
 80112ae:	bf00      	nop
 80112b0:	e7fe      	b.n	80112b0 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80112b2:	697b      	ldr	r3, [r7, #20]
 80112b4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80112b8:	f023 0301 	bic.w	r3, r3, #1
 80112bc:	b2da      	uxtb	r2, r3
 80112be:	697b      	ldr	r3, [r7, #20]
 80112c0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80112c4:	697b      	ldr	r3, [r7, #20]
 80112c6:	6a1b      	ldr	r3, [r3, #32]
 80112c8:	6978      	ldr	r0, [r7, #20]
 80112ca:	4798      	blx	r3
}
 80112cc:	bf00      	nop
 80112ce:	3718      	adds	r7, #24
 80112d0:	46bd      	mov	sp, r7
 80112d2:	bd80      	pop	{r7, pc}
 80112d4:	200016a8 	.word	0x200016a8

080112d8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80112d8:	b580      	push	{r7, lr}
 80112da:	b084      	sub	sp, #16
 80112dc:	af00      	add	r7, sp, #0
 80112de:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80112e0:	f107 0308 	add.w	r3, r7, #8
 80112e4:	4618      	mov	r0, r3
 80112e6:	f000 f857 	bl	8011398 <prvGetNextExpireTime>
 80112ea:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80112ec:	68bb      	ldr	r3, [r7, #8]
 80112ee:	4619      	mov	r1, r3
 80112f0:	68f8      	ldr	r0, [r7, #12]
 80112f2:	f000 f803 	bl	80112fc <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80112f6:	f000 f8d5 	bl	80114a4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80112fa:	e7f1      	b.n	80112e0 <prvTimerTask+0x8>

080112fc <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80112fc:	b580      	push	{r7, lr}
 80112fe:	b084      	sub	sp, #16
 8011300:	af00      	add	r7, sp, #0
 8011302:	6078      	str	r0, [r7, #4]
 8011304:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8011306:	f7ff f93b 	bl	8010580 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 801130a:	f107 0308 	add.w	r3, r7, #8
 801130e:	4618      	mov	r0, r3
 8011310:	f000 f866 	bl	80113e0 <prvSampleTimeNow>
 8011314:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8011316:	68bb      	ldr	r3, [r7, #8]
 8011318:	2b00      	cmp	r3, #0
 801131a:	d130      	bne.n	801137e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 801131c:	683b      	ldr	r3, [r7, #0]
 801131e:	2b00      	cmp	r3, #0
 8011320:	d10a      	bne.n	8011338 <prvProcessTimerOrBlockTask+0x3c>
 8011322:	687a      	ldr	r2, [r7, #4]
 8011324:	68fb      	ldr	r3, [r7, #12]
 8011326:	429a      	cmp	r2, r3
 8011328:	d806      	bhi.n	8011338 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 801132a:	f7ff f937 	bl	801059c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 801132e:	68f9      	ldr	r1, [r7, #12]
 8011330:	6878      	ldr	r0, [r7, #4]
 8011332:	f7ff ff85 	bl	8011240 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8011336:	e024      	b.n	8011382 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8011338:	683b      	ldr	r3, [r7, #0]
 801133a:	2b00      	cmp	r3, #0
 801133c:	d008      	beq.n	8011350 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 801133e:	4b13      	ldr	r3, [pc, #76]	; (801138c <prvProcessTimerOrBlockTask+0x90>)
 8011340:	681b      	ldr	r3, [r3, #0]
 8011342:	681b      	ldr	r3, [r3, #0]
 8011344:	2b00      	cmp	r3, #0
 8011346:	d101      	bne.n	801134c <prvProcessTimerOrBlockTask+0x50>
 8011348:	2301      	movs	r3, #1
 801134a:	e000      	b.n	801134e <prvProcessTimerOrBlockTask+0x52>
 801134c:	2300      	movs	r3, #0
 801134e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8011350:	4b0f      	ldr	r3, [pc, #60]	; (8011390 <prvProcessTimerOrBlockTask+0x94>)
 8011352:	6818      	ldr	r0, [r3, #0]
 8011354:	687a      	ldr	r2, [r7, #4]
 8011356:	68fb      	ldr	r3, [r7, #12]
 8011358:	1ad3      	subs	r3, r2, r3
 801135a:	683a      	ldr	r2, [r7, #0]
 801135c:	4619      	mov	r1, r3
 801135e:	f7fe fe7f 	bl	8010060 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8011362:	f7ff f91b 	bl	801059c <xTaskResumeAll>
 8011366:	4603      	mov	r3, r0
 8011368:	2b00      	cmp	r3, #0
 801136a:	d10a      	bne.n	8011382 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 801136c:	4b09      	ldr	r3, [pc, #36]	; (8011394 <prvProcessTimerOrBlockTask+0x98>)
 801136e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011372:	601a      	str	r2, [r3, #0]
 8011374:	f3bf 8f4f 	dsb	sy
 8011378:	f3bf 8f6f 	isb	sy
}
 801137c:	e001      	b.n	8011382 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 801137e:	f7ff f90d 	bl	801059c <xTaskResumeAll>
}
 8011382:	bf00      	nop
 8011384:	3710      	adds	r7, #16
 8011386:	46bd      	mov	sp, r7
 8011388:	bd80      	pop	{r7, pc}
 801138a:	bf00      	nop
 801138c:	200016ac 	.word	0x200016ac
 8011390:	200016b0 	.word	0x200016b0
 8011394:	e000ed04 	.word	0xe000ed04

08011398 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8011398:	b480      	push	{r7}
 801139a:	b085      	sub	sp, #20
 801139c:	af00      	add	r7, sp, #0
 801139e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80113a0:	4b0e      	ldr	r3, [pc, #56]	; (80113dc <prvGetNextExpireTime+0x44>)
 80113a2:	681b      	ldr	r3, [r3, #0]
 80113a4:	681b      	ldr	r3, [r3, #0]
 80113a6:	2b00      	cmp	r3, #0
 80113a8:	d101      	bne.n	80113ae <prvGetNextExpireTime+0x16>
 80113aa:	2201      	movs	r2, #1
 80113ac:	e000      	b.n	80113b0 <prvGetNextExpireTime+0x18>
 80113ae:	2200      	movs	r2, #0
 80113b0:	687b      	ldr	r3, [r7, #4]
 80113b2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80113b4:	687b      	ldr	r3, [r7, #4]
 80113b6:	681b      	ldr	r3, [r3, #0]
 80113b8:	2b00      	cmp	r3, #0
 80113ba:	d105      	bne.n	80113c8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80113bc:	4b07      	ldr	r3, [pc, #28]	; (80113dc <prvGetNextExpireTime+0x44>)
 80113be:	681b      	ldr	r3, [r3, #0]
 80113c0:	68db      	ldr	r3, [r3, #12]
 80113c2:	681b      	ldr	r3, [r3, #0]
 80113c4:	60fb      	str	r3, [r7, #12]
 80113c6:	e001      	b.n	80113cc <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80113c8:	2300      	movs	r3, #0
 80113ca:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80113cc:	68fb      	ldr	r3, [r7, #12]
}
 80113ce:	4618      	mov	r0, r3
 80113d0:	3714      	adds	r7, #20
 80113d2:	46bd      	mov	sp, r7
 80113d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113d8:	4770      	bx	lr
 80113da:	bf00      	nop
 80113dc:	200016a8 	.word	0x200016a8

080113e0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80113e0:	b580      	push	{r7, lr}
 80113e2:	b084      	sub	sp, #16
 80113e4:	af00      	add	r7, sp, #0
 80113e6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80113e8:	f7ff f976 	bl	80106d8 <xTaskGetTickCount>
 80113ec:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80113ee:	4b0b      	ldr	r3, [pc, #44]	; (801141c <prvSampleTimeNow+0x3c>)
 80113f0:	681b      	ldr	r3, [r3, #0]
 80113f2:	68fa      	ldr	r2, [r7, #12]
 80113f4:	429a      	cmp	r2, r3
 80113f6:	d205      	bcs.n	8011404 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80113f8:	f000 f936 	bl	8011668 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80113fc:	687b      	ldr	r3, [r7, #4]
 80113fe:	2201      	movs	r2, #1
 8011400:	601a      	str	r2, [r3, #0]
 8011402:	e002      	b.n	801140a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8011404:	687b      	ldr	r3, [r7, #4]
 8011406:	2200      	movs	r2, #0
 8011408:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 801140a:	4a04      	ldr	r2, [pc, #16]	; (801141c <prvSampleTimeNow+0x3c>)
 801140c:	68fb      	ldr	r3, [r7, #12]
 801140e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8011410:	68fb      	ldr	r3, [r7, #12]
}
 8011412:	4618      	mov	r0, r3
 8011414:	3710      	adds	r7, #16
 8011416:	46bd      	mov	sp, r7
 8011418:	bd80      	pop	{r7, pc}
 801141a:	bf00      	nop
 801141c:	200016b8 	.word	0x200016b8

08011420 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8011420:	b580      	push	{r7, lr}
 8011422:	b086      	sub	sp, #24
 8011424:	af00      	add	r7, sp, #0
 8011426:	60f8      	str	r0, [r7, #12]
 8011428:	60b9      	str	r1, [r7, #8]
 801142a:	607a      	str	r2, [r7, #4]
 801142c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 801142e:	2300      	movs	r3, #0
 8011430:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8011432:	68fb      	ldr	r3, [r7, #12]
 8011434:	68ba      	ldr	r2, [r7, #8]
 8011436:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8011438:	68fb      	ldr	r3, [r7, #12]
 801143a:	68fa      	ldr	r2, [r7, #12]
 801143c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 801143e:	68ba      	ldr	r2, [r7, #8]
 8011440:	687b      	ldr	r3, [r7, #4]
 8011442:	429a      	cmp	r2, r3
 8011444:	d812      	bhi.n	801146c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011446:	687a      	ldr	r2, [r7, #4]
 8011448:	683b      	ldr	r3, [r7, #0]
 801144a:	1ad2      	subs	r2, r2, r3
 801144c:	68fb      	ldr	r3, [r7, #12]
 801144e:	699b      	ldr	r3, [r3, #24]
 8011450:	429a      	cmp	r2, r3
 8011452:	d302      	bcc.n	801145a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8011454:	2301      	movs	r3, #1
 8011456:	617b      	str	r3, [r7, #20]
 8011458:	e01b      	b.n	8011492 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 801145a:	4b10      	ldr	r3, [pc, #64]	; (801149c <prvInsertTimerInActiveList+0x7c>)
 801145c:	681a      	ldr	r2, [r3, #0]
 801145e:	68fb      	ldr	r3, [r7, #12]
 8011460:	3304      	adds	r3, #4
 8011462:	4619      	mov	r1, r3
 8011464:	4610      	mov	r0, r2
 8011466:	f7fd fdbe 	bl	800efe6 <vListInsert>
 801146a:	e012      	b.n	8011492 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 801146c:	687a      	ldr	r2, [r7, #4]
 801146e:	683b      	ldr	r3, [r7, #0]
 8011470:	429a      	cmp	r2, r3
 8011472:	d206      	bcs.n	8011482 <prvInsertTimerInActiveList+0x62>
 8011474:	68ba      	ldr	r2, [r7, #8]
 8011476:	683b      	ldr	r3, [r7, #0]
 8011478:	429a      	cmp	r2, r3
 801147a:	d302      	bcc.n	8011482 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 801147c:	2301      	movs	r3, #1
 801147e:	617b      	str	r3, [r7, #20]
 8011480:	e007      	b.n	8011492 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8011482:	4b07      	ldr	r3, [pc, #28]	; (80114a0 <prvInsertTimerInActiveList+0x80>)
 8011484:	681a      	ldr	r2, [r3, #0]
 8011486:	68fb      	ldr	r3, [r7, #12]
 8011488:	3304      	adds	r3, #4
 801148a:	4619      	mov	r1, r3
 801148c:	4610      	mov	r0, r2
 801148e:	f7fd fdaa 	bl	800efe6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8011492:	697b      	ldr	r3, [r7, #20]
}
 8011494:	4618      	mov	r0, r3
 8011496:	3718      	adds	r7, #24
 8011498:	46bd      	mov	sp, r7
 801149a:	bd80      	pop	{r7, pc}
 801149c:	200016ac 	.word	0x200016ac
 80114a0:	200016a8 	.word	0x200016a8

080114a4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80114a4:	b580      	push	{r7, lr}
 80114a6:	b08e      	sub	sp, #56	; 0x38
 80114a8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80114aa:	e0ca      	b.n	8011642 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80114ac:	687b      	ldr	r3, [r7, #4]
 80114ae:	2b00      	cmp	r3, #0
 80114b0:	da18      	bge.n	80114e4 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80114b2:	1d3b      	adds	r3, r7, #4
 80114b4:	3304      	adds	r3, #4
 80114b6:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80114b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80114ba:	2b00      	cmp	r3, #0
 80114bc:	d10a      	bne.n	80114d4 <prvProcessReceivedCommands+0x30>
	__asm volatile
 80114be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80114c2:	f383 8811 	msr	BASEPRI, r3
 80114c6:	f3bf 8f6f 	isb	sy
 80114ca:	f3bf 8f4f 	dsb	sy
 80114ce:	61fb      	str	r3, [r7, #28]
}
 80114d0:	bf00      	nop
 80114d2:	e7fe      	b.n	80114d2 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80114d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80114d6:	681b      	ldr	r3, [r3, #0]
 80114d8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80114da:	6850      	ldr	r0, [r2, #4]
 80114dc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80114de:	6892      	ldr	r2, [r2, #8]
 80114e0:	4611      	mov	r1, r2
 80114e2:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80114e4:	687b      	ldr	r3, [r7, #4]
 80114e6:	2b00      	cmp	r3, #0
 80114e8:	f2c0 80aa 	blt.w	8011640 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80114ec:	68fb      	ldr	r3, [r7, #12]
 80114ee:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80114f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80114f2:	695b      	ldr	r3, [r3, #20]
 80114f4:	2b00      	cmp	r3, #0
 80114f6:	d004      	beq.n	8011502 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80114f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80114fa:	3304      	adds	r3, #4
 80114fc:	4618      	mov	r0, r3
 80114fe:	f7fd fdab 	bl	800f058 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8011502:	463b      	mov	r3, r7
 8011504:	4618      	mov	r0, r3
 8011506:	f7ff ff6b 	bl	80113e0 <prvSampleTimeNow>
 801150a:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 801150c:	687b      	ldr	r3, [r7, #4]
 801150e:	2b09      	cmp	r3, #9
 8011510:	f200 8097 	bhi.w	8011642 <prvProcessReceivedCommands+0x19e>
 8011514:	a201      	add	r2, pc, #4	; (adr r2, 801151c <prvProcessReceivedCommands+0x78>)
 8011516:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801151a:	bf00      	nop
 801151c:	08011545 	.word	0x08011545
 8011520:	08011545 	.word	0x08011545
 8011524:	08011545 	.word	0x08011545
 8011528:	080115b9 	.word	0x080115b9
 801152c:	080115cd 	.word	0x080115cd
 8011530:	08011617 	.word	0x08011617
 8011534:	08011545 	.word	0x08011545
 8011538:	08011545 	.word	0x08011545
 801153c:	080115b9 	.word	0x080115b9
 8011540:	080115cd 	.word	0x080115cd
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8011544:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011546:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801154a:	f043 0301 	orr.w	r3, r3, #1
 801154e:	b2da      	uxtb	r2, r3
 8011550:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011552:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8011556:	68ba      	ldr	r2, [r7, #8]
 8011558:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801155a:	699b      	ldr	r3, [r3, #24]
 801155c:	18d1      	adds	r1, r2, r3
 801155e:	68bb      	ldr	r3, [r7, #8]
 8011560:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011562:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011564:	f7ff ff5c 	bl	8011420 <prvInsertTimerInActiveList>
 8011568:	4603      	mov	r3, r0
 801156a:	2b00      	cmp	r3, #0
 801156c:	d069      	beq.n	8011642 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801156e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011570:	6a1b      	ldr	r3, [r3, #32]
 8011572:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011574:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8011576:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011578:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801157c:	f003 0304 	and.w	r3, r3, #4
 8011580:	2b00      	cmp	r3, #0
 8011582:	d05e      	beq.n	8011642 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8011584:	68ba      	ldr	r2, [r7, #8]
 8011586:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011588:	699b      	ldr	r3, [r3, #24]
 801158a:	441a      	add	r2, r3
 801158c:	2300      	movs	r3, #0
 801158e:	9300      	str	r3, [sp, #0]
 8011590:	2300      	movs	r3, #0
 8011592:	2100      	movs	r1, #0
 8011594:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011596:	f7ff fe05 	bl	80111a4 <xTimerGenericCommand>
 801159a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 801159c:	6a3b      	ldr	r3, [r7, #32]
 801159e:	2b00      	cmp	r3, #0
 80115a0:	d14f      	bne.n	8011642 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 80115a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80115a6:	f383 8811 	msr	BASEPRI, r3
 80115aa:	f3bf 8f6f 	isb	sy
 80115ae:	f3bf 8f4f 	dsb	sy
 80115b2:	61bb      	str	r3, [r7, #24]
}
 80115b4:	bf00      	nop
 80115b6:	e7fe      	b.n	80115b6 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80115b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80115ba:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80115be:	f023 0301 	bic.w	r3, r3, #1
 80115c2:	b2da      	uxtb	r2, r3
 80115c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80115c6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80115ca:	e03a      	b.n	8011642 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80115cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80115ce:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80115d2:	f043 0301 	orr.w	r3, r3, #1
 80115d6:	b2da      	uxtb	r2, r3
 80115d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80115da:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80115de:	68ba      	ldr	r2, [r7, #8]
 80115e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80115e2:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80115e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80115e6:	699b      	ldr	r3, [r3, #24]
 80115e8:	2b00      	cmp	r3, #0
 80115ea:	d10a      	bne.n	8011602 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 80115ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80115f0:	f383 8811 	msr	BASEPRI, r3
 80115f4:	f3bf 8f6f 	isb	sy
 80115f8:	f3bf 8f4f 	dsb	sy
 80115fc:	617b      	str	r3, [r7, #20]
}
 80115fe:	bf00      	nop
 8011600:	e7fe      	b.n	8011600 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8011602:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011604:	699a      	ldr	r2, [r3, #24]
 8011606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011608:	18d1      	adds	r1, r2, r3
 801160a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801160c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801160e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011610:	f7ff ff06 	bl	8011420 <prvInsertTimerInActiveList>
					break;
 8011614:	e015      	b.n	8011642 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8011616:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011618:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801161c:	f003 0302 	and.w	r3, r3, #2
 8011620:	2b00      	cmp	r3, #0
 8011622:	d103      	bne.n	801162c <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8011624:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011626:	f000 fbdb 	bl	8011de0 <vPortFree>
 801162a:	e00a      	b.n	8011642 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801162c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801162e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8011632:	f023 0301 	bic.w	r3, r3, #1
 8011636:	b2da      	uxtb	r2, r3
 8011638:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801163a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 801163e:	e000      	b.n	8011642 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8011640:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8011642:	4b08      	ldr	r3, [pc, #32]	; (8011664 <prvProcessReceivedCommands+0x1c0>)
 8011644:	681b      	ldr	r3, [r3, #0]
 8011646:	1d39      	adds	r1, r7, #4
 8011648:	2200      	movs	r2, #0
 801164a:	4618      	mov	r0, r3
 801164c:	f7fe f8fc 	bl	800f848 <xQueueReceive>
 8011650:	4603      	mov	r3, r0
 8011652:	2b00      	cmp	r3, #0
 8011654:	f47f af2a 	bne.w	80114ac <prvProcessReceivedCommands+0x8>
	}
}
 8011658:	bf00      	nop
 801165a:	bf00      	nop
 801165c:	3730      	adds	r7, #48	; 0x30
 801165e:	46bd      	mov	sp, r7
 8011660:	bd80      	pop	{r7, pc}
 8011662:	bf00      	nop
 8011664:	200016b0 	.word	0x200016b0

08011668 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8011668:	b580      	push	{r7, lr}
 801166a:	b088      	sub	sp, #32
 801166c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 801166e:	e048      	b.n	8011702 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8011670:	4b2d      	ldr	r3, [pc, #180]	; (8011728 <prvSwitchTimerLists+0xc0>)
 8011672:	681b      	ldr	r3, [r3, #0]
 8011674:	68db      	ldr	r3, [r3, #12]
 8011676:	681b      	ldr	r3, [r3, #0]
 8011678:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801167a:	4b2b      	ldr	r3, [pc, #172]	; (8011728 <prvSwitchTimerLists+0xc0>)
 801167c:	681b      	ldr	r3, [r3, #0]
 801167e:	68db      	ldr	r3, [r3, #12]
 8011680:	68db      	ldr	r3, [r3, #12]
 8011682:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8011684:	68fb      	ldr	r3, [r7, #12]
 8011686:	3304      	adds	r3, #4
 8011688:	4618      	mov	r0, r3
 801168a:	f7fd fce5 	bl	800f058 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801168e:	68fb      	ldr	r3, [r7, #12]
 8011690:	6a1b      	ldr	r3, [r3, #32]
 8011692:	68f8      	ldr	r0, [r7, #12]
 8011694:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8011696:	68fb      	ldr	r3, [r7, #12]
 8011698:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801169c:	f003 0304 	and.w	r3, r3, #4
 80116a0:	2b00      	cmp	r3, #0
 80116a2:	d02e      	beq.n	8011702 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80116a4:	68fb      	ldr	r3, [r7, #12]
 80116a6:	699b      	ldr	r3, [r3, #24]
 80116a8:	693a      	ldr	r2, [r7, #16]
 80116aa:	4413      	add	r3, r2
 80116ac:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80116ae:	68ba      	ldr	r2, [r7, #8]
 80116b0:	693b      	ldr	r3, [r7, #16]
 80116b2:	429a      	cmp	r2, r3
 80116b4:	d90e      	bls.n	80116d4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80116b6:	68fb      	ldr	r3, [r7, #12]
 80116b8:	68ba      	ldr	r2, [r7, #8]
 80116ba:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80116bc:	68fb      	ldr	r3, [r7, #12]
 80116be:	68fa      	ldr	r2, [r7, #12]
 80116c0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80116c2:	4b19      	ldr	r3, [pc, #100]	; (8011728 <prvSwitchTimerLists+0xc0>)
 80116c4:	681a      	ldr	r2, [r3, #0]
 80116c6:	68fb      	ldr	r3, [r7, #12]
 80116c8:	3304      	adds	r3, #4
 80116ca:	4619      	mov	r1, r3
 80116cc:	4610      	mov	r0, r2
 80116ce:	f7fd fc8a 	bl	800efe6 <vListInsert>
 80116d2:	e016      	b.n	8011702 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80116d4:	2300      	movs	r3, #0
 80116d6:	9300      	str	r3, [sp, #0]
 80116d8:	2300      	movs	r3, #0
 80116da:	693a      	ldr	r2, [r7, #16]
 80116dc:	2100      	movs	r1, #0
 80116de:	68f8      	ldr	r0, [r7, #12]
 80116e0:	f7ff fd60 	bl	80111a4 <xTimerGenericCommand>
 80116e4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80116e6:	687b      	ldr	r3, [r7, #4]
 80116e8:	2b00      	cmp	r3, #0
 80116ea:	d10a      	bne.n	8011702 <prvSwitchTimerLists+0x9a>
	__asm volatile
 80116ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80116f0:	f383 8811 	msr	BASEPRI, r3
 80116f4:	f3bf 8f6f 	isb	sy
 80116f8:	f3bf 8f4f 	dsb	sy
 80116fc:	603b      	str	r3, [r7, #0]
}
 80116fe:	bf00      	nop
 8011700:	e7fe      	b.n	8011700 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8011702:	4b09      	ldr	r3, [pc, #36]	; (8011728 <prvSwitchTimerLists+0xc0>)
 8011704:	681b      	ldr	r3, [r3, #0]
 8011706:	681b      	ldr	r3, [r3, #0]
 8011708:	2b00      	cmp	r3, #0
 801170a:	d1b1      	bne.n	8011670 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 801170c:	4b06      	ldr	r3, [pc, #24]	; (8011728 <prvSwitchTimerLists+0xc0>)
 801170e:	681b      	ldr	r3, [r3, #0]
 8011710:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8011712:	4b06      	ldr	r3, [pc, #24]	; (801172c <prvSwitchTimerLists+0xc4>)
 8011714:	681b      	ldr	r3, [r3, #0]
 8011716:	4a04      	ldr	r2, [pc, #16]	; (8011728 <prvSwitchTimerLists+0xc0>)
 8011718:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 801171a:	4a04      	ldr	r2, [pc, #16]	; (801172c <prvSwitchTimerLists+0xc4>)
 801171c:	697b      	ldr	r3, [r7, #20]
 801171e:	6013      	str	r3, [r2, #0]
}
 8011720:	bf00      	nop
 8011722:	3718      	adds	r7, #24
 8011724:	46bd      	mov	sp, r7
 8011726:	bd80      	pop	{r7, pc}
 8011728:	200016a8 	.word	0x200016a8
 801172c:	200016ac 	.word	0x200016ac

08011730 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8011730:	b580      	push	{r7, lr}
 8011732:	b082      	sub	sp, #8
 8011734:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8011736:	f000 f965 	bl	8011a04 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 801173a:	4b15      	ldr	r3, [pc, #84]	; (8011790 <prvCheckForValidListAndQueue+0x60>)
 801173c:	681b      	ldr	r3, [r3, #0]
 801173e:	2b00      	cmp	r3, #0
 8011740:	d120      	bne.n	8011784 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8011742:	4814      	ldr	r0, [pc, #80]	; (8011794 <prvCheckForValidListAndQueue+0x64>)
 8011744:	f7fd fbfe 	bl	800ef44 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8011748:	4813      	ldr	r0, [pc, #76]	; (8011798 <prvCheckForValidListAndQueue+0x68>)
 801174a:	f7fd fbfb 	bl	800ef44 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 801174e:	4b13      	ldr	r3, [pc, #76]	; (801179c <prvCheckForValidListAndQueue+0x6c>)
 8011750:	4a10      	ldr	r2, [pc, #64]	; (8011794 <prvCheckForValidListAndQueue+0x64>)
 8011752:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8011754:	4b12      	ldr	r3, [pc, #72]	; (80117a0 <prvCheckForValidListAndQueue+0x70>)
 8011756:	4a10      	ldr	r2, [pc, #64]	; (8011798 <prvCheckForValidListAndQueue+0x68>)
 8011758:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 801175a:	2300      	movs	r3, #0
 801175c:	9300      	str	r3, [sp, #0]
 801175e:	4b11      	ldr	r3, [pc, #68]	; (80117a4 <prvCheckForValidListAndQueue+0x74>)
 8011760:	4a11      	ldr	r2, [pc, #68]	; (80117a8 <prvCheckForValidListAndQueue+0x78>)
 8011762:	2110      	movs	r1, #16
 8011764:	200a      	movs	r0, #10
 8011766:	f7fd fd09 	bl	800f17c <xQueueGenericCreateStatic>
 801176a:	4603      	mov	r3, r0
 801176c:	4a08      	ldr	r2, [pc, #32]	; (8011790 <prvCheckForValidListAndQueue+0x60>)
 801176e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8011770:	4b07      	ldr	r3, [pc, #28]	; (8011790 <prvCheckForValidListAndQueue+0x60>)
 8011772:	681b      	ldr	r3, [r3, #0]
 8011774:	2b00      	cmp	r3, #0
 8011776:	d005      	beq.n	8011784 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8011778:	4b05      	ldr	r3, [pc, #20]	; (8011790 <prvCheckForValidListAndQueue+0x60>)
 801177a:	681b      	ldr	r3, [r3, #0]
 801177c:	490b      	ldr	r1, [pc, #44]	; (80117ac <prvCheckForValidListAndQueue+0x7c>)
 801177e:	4618      	mov	r0, r3
 8011780:	f7fe fc1a 	bl	800ffb8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8011784:	f000 f96e 	bl	8011a64 <vPortExitCritical>
}
 8011788:	bf00      	nop
 801178a:	46bd      	mov	sp, r7
 801178c:	bd80      	pop	{r7, pc}
 801178e:	bf00      	nop
 8011790:	200016b0 	.word	0x200016b0
 8011794:	20001680 	.word	0x20001680
 8011798:	20001694 	.word	0x20001694
 801179c:	200016a8 	.word	0x200016a8
 80117a0:	200016ac 	.word	0x200016ac
 80117a4:	2000175c 	.word	0x2000175c
 80117a8:	200016bc 	.word	0x200016bc
 80117ac:	0801e588 	.word	0x0801e588

080117b0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80117b0:	b480      	push	{r7}
 80117b2:	b085      	sub	sp, #20
 80117b4:	af00      	add	r7, sp, #0
 80117b6:	60f8      	str	r0, [r7, #12]
 80117b8:	60b9      	str	r1, [r7, #8]
 80117ba:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80117bc:	68fb      	ldr	r3, [r7, #12]
 80117be:	3b04      	subs	r3, #4
 80117c0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80117c2:	68fb      	ldr	r3, [r7, #12]
 80117c4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80117c8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80117ca:	68fb      	ldr	r3, [r7, #12]
 80117cc:	3b04      	subs	r3, #4
 80117ce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80117d0:	68bb      	ldr	r3, [r7, #8]
 80117d2:	f023 0201 	bic.w	r2, r3, #1
 80117d6:	68fb      	ldr	r3, [r7, #12]
 80117d8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80117da:	68fb      	ldr	r3, [r7, #12]
 80117dc:	3b04      	subs	r3, #4
 80117de:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80117e0:	4a0c      	ldr	r2, [pc, #48]	; (8011814 <pxPortInitialiseStack+0x64>)
 80117e2:	68fb      	ldr	r3, [r7, #12]
 80117e4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80117e6:	68fb      	ldr	r3, [r7, #12]
 80117e8:	3b14      	subs	r3, #20
 80117ea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80117ec:	687a      	ldr	r2, [r7, #4]
 80117ee:	68fb      	ldr	r3, [r7, #12]
 80117f0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80117f2:	68fb      	ldr	r3, [r7, #12]
 80117f4:	3b04      	subs	r3, #4
 80117f6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80117f8:	68fb      	ldr	r3, [r7, #12]
 80117fa:	f06f 0202 	mvn.w	r2, #2
 80117fe:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8011800:	68fb      	ldr	r3, [r7, #12]
 8011802:	3b20      	subs	r3, #32
 8011804:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8011806:	68fb      	ldr	r3, [r7, #12]
}
 8011808:	4618      	mov	r0, r3
 801180a:	3714      	adds	r7, #20
 801180c:	46bd      	mov	sp, r7
 801180e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011812:	4770      	bx	lr
 8011814:	08011819 	.word	0x08011819

08011818 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8011818:	b480      	push	{r7}
 801181a:	b085      	sub	sp, #20
 801181c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 801181e:	2300      	movs	r3, #0
 8011820:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8011822:	4b12      	ldr	r3, [pc, #72]	; (801186c <prvTaskExitError+0x54>)
 8011824:	681b      	ldr	r3, [r3, #0]
 8011826:	f1b3 3fff 	cmp.w	r3, #4294967295
 801182a:	d00a      	beq.n	8011842 <prvTaskExitError+0x2a>
	__asm volatile
 801182c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011830:	f383 8811 	msr	BASEPRI, r3
 8011834:	f3bf 8f6f 	isb	sy
 8011838:	f3bf 8f4f 	dsb	sy
 801183c:	60fb      	str	r3, [r7, #12]
}
 801183e:	bf00      	nop
 8011840:	e7fe      	b.n	8011840 <prvTaskExitError+0x28>
	__asm volatile
 8011842:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011846:	f383 8811 	msr	BASEPRI, r3
 801184a:	f3bf 8f6f 	isb	sy
 801184e:	f3bf 8f4f 	dsb	sy
 8011852:	60bb      	str	r3, [r7, #8]
}
 8011854:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8011856:	bf00      	nop
 8011858:	687b      	ldr	r3, [r7, #4]
 801185a:	2b00      	cmp	r3, #0
 801185c:	d0fc      	beq.n	8011858 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 801185e:	bf00      	nop
 8011860:	bf00      	nop
 8011862:	3714      	adds	r7, #20
 8011864:	46bd      	mov	sp, r7
 8011866:	f85d 7b04 	ldr.w	r7, [sp], #4
 801186a:	4770      	bx	lr
 801186c:	20000010 	.word	0x20000010

08011870 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8011870:	4b07      	ldr	r3, [pc, #28]	; (8011890 <pxCurrentTCBConst2>)
 8011872:	6819      	ldr	r1, [r3, #0]
 8011874:	6808      	ldr	r0, [r1, #0]
 8011876:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801187a:	f380 8809 	msr	PSP, r0
 801187e:	f3bf 8f6f 	isb	sy
 8011882:	f04f 0000 	mov.w	r0, #0
 8011886:	f380 8811 	msr	BASEPRI, r0
 801188a:	4770      	bx	lr
 801188c:	f3af 8000 	nop.w

08011890 <pxCurrentTCBConst2>:
 8011890:	20001180 	.word	0x20001180
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8011894:	bf00      	nop
 8011896:	bf00      	nop

08011898 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8011898:	4808      	ldr	r0, [pc, #32]	; (80118bc <prvPortStartFirstTask+0x24>)
 801189a:	6800      	ldr	r0, [r0, #0]
 801189c:	6800      	ldr	r0, [r0, #0]
 801189e:	f380 8808 	msr	MSP, r0
 80118a2:	f04f 0000 	mov.w	r0, #0
 80118a6:	f380 8814 	msr	CONTROL, r0
 80118aa:	b662      	cpsie	i
 80118ac:	b661      	cpsie	f
 80118ae:	f3bf 8f4f 	dsb	sy
 80118b2:	f3bf 8f6f 	isb	sy
 80118b6:	df00      	svc	0
 80118b8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80118ba:	bf00      	nop
 80118bc:	e000ed08 	.word	0xe000ed08

080118c0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80118c0:	b580      	push	{r7, lr}
 80118c2:	b086      	sub	sp, #24
 80118c4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80118c6:	4b46      	ldr	r3, [pc, #280]	; (80119e0 <xPortStartScheduler+0x120>)
 80118c8:	681b      	ldr	r3, [r3, #0]
 80118ca:	4a46      	ldr	r2, [pc, #280]	; (80119e4 <xPortStartScheduler+0x124>)
 80118cc:	4293      	cmp	r3, r2
 80118ce:	d10a      	bne.n	80118e6 <xPortStartScheduler+0x26>
	__asm volatile
 80118d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80118d4:	f383 8811 	msr	BASEPRI, r3
 80118d8:	f3bf 8f6f 	isb	sy
 80118dc:	f3bf 8f4f 	dsb	sy
 80118e0:	613b      	str	r3, [r7, #16]
}
 80118e2:	bf00      	nop
 80118e4:	e7fe      	b.n	80118e4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80118e6:	4b3e      	ldr	r3, [pc, #248]	; (80119e0 <xPortStartScheduler+0x120>)
 80118e8:	681b      	ldr	r3, [r3, #0]
 80118ea:	4a3f      	ldr	r2, [pc, #252]	; (80119e8 <xPortStartScheduler+0x128>)
 80118ec:	4293      	cmp	r3, r2
 80118ee:	d10a      	bne.n	8011906 <xPortStartScheduler+0x46>
	__asm volatile
 80118f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80118f4:	f383 8811 	msr	BASEPRI, r3
 80118f8:	f3bf 8f6f 	isb	sy
 80118fc:	f3bf 8f4f 	dsb	sy
 8011900:	60fb      	str	r3, [r7, #12]
}
 8011902:	bf00      	nop
 8011904:	e7fe      	b.n	8011904 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8011906:	4b39      	ldr	r3, [pc, #228]	; (80119ec <xPortStartScheduler+0x12c>)
 8011908:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 801190a:	697b      	ldr	r3, [r7, #20]
 801190c:	781b      	ldrb	r3, [r3, #0]
 801190e:	b2db      	uxtb	r3, r3
 8011910:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8011912:	697b      	ldr	r3, [r7, #20]
 8011914:	22ff      	movs	r2, #255	; 0xff
 8011916:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8011918:	697b      	ldr	r3, [r7, #20]
 801191a:	781b      	ldrb	r3, [r3, #0]
 801191c:	b2db      	uxtb	r3, r3
 801191e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8011920:	78fb      	ldrb	r3, [r7, #3]
 8011922:	b2db      	uxtb	r3, r3
 8011924:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8011928:	b2da      	uxtb	r2, r3
 801192a:	4b31      	ldr	r3, [pc, #196]	; (80119f0 <xPortStartScheduler+0x130>)
 801192c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 801192e:	4b31      	ldr	r3, [pc, #196]	; (80119f4 <xPortStartScheduler+0x134>)
 8011930:	2207      	movs	r2, #7
 8011932:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8011934:	e009      	b.n	801194a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8011936:	4b2f      	ldr	r3, [pc, #188]	; (80119f4 <xPortStartScheduler+0x134>)
 8011938:	681b      	ldr	r3, [r3, #0]
 801193a:	3b01      	subs	r3, #1
 801193c:	4a2d      	ldr	r2, [pc, #180]	; (80119f4 <xPortStartScheduler+0x134>)
 801193e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8011940:	78fb      	ldrb	r3, [r7, #3]
 8011942:	b2db      	uxtb	r3, r3
 8011944:	005b      	lsls	r3, r3, #1
 8011946:	b2db      	uxtb	r3, r3
 8011948:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801194a:	78fb      	ldrb	r3, [r7, #3]
 801194c:	b2db      	uxtb	r3, r3
 801194e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8011952:	2b80      	cmp	r3, #128	; 0x80
 8011954:	d0ef      	beq.n	8011936 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8011956:	4b27      	ldr	r3, [pc, #156]	; (80119f4 <xPortStartScheduler+0x134>)
 8011958:	681b      	ldr	r3, [r3, #0]
 801195a:	f1c3 0307 	rsb	r3, r3, #7
 801195e:	2b04      	cmp	r3, #4
 8011960:	d00a      	beq.n	8011978 <xPortStartScheduler+0xb8>
	__asm volatile
 8011962:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011966:	f383 8811 	msr	BASEPRI, r3
 801196a:	f3bf 8f6f 	isb	sy
 801196e:	f3bf 8f4f 	dsb	sy
 8011972:	60bb      	str	r3, [r7, #8]
}
 8011974:	bf00      	nop
 8011976:	e7fe      	b.n	8011976 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8011978:	4b1e      	ldr	r3, [pc, #120]	; (80119f4 <xPortStartScheduler+0x134>)
 801197a:	681b      	ldr	r3, [r3, #0]
 801197c:	021b      	lsls	r3, r3, #8
 801197e:	4a1d      	ldr	r2, [pc, #116]	; (80119f4 <xPortStartScheduler+0x134>)
 8011980:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8011982:	4b1c      	ldr	r3, [pc, #112]	; (80119f4 <xPortStartScheduler+0x134>)
 8011984:	681b      	ldr	r3, [r3, #0]
 8011986:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 801198a:	4a1a      	ldr	r2, [pc, #104]	; (80119f4 <xPortStartScheduler+0x134>)
 801198c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 801198e:	687b      	ldr	r3, [r7, #4]
 8011990:	b2da      	uxtb	r2, r3
 8011992:	697b      	ldr	r3, [r7, #20]
 8011994:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8011996:	4b18      	ldr	r3, [pc, #96]	; (80119f8 <xPortStartScheduler+0x138>)
 8011998:	681b      	ldr	r3, [r3, #0]
 801199a:	4a17      	ldr	r2, [pc, #92]	; (80119f8 <xPortStartScheduler+0x138>)
 801199c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80119a0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80119a2:	4b15      	ldr	r3, [pc, #84]	; (80119f8 <xPortStartScheduler+0x138>)
 80119a4:	681b      	ldr	r3, [r3, #0]
 80119a6:	4a14      	ldr	r2, [pc, #80]	; (80119f8 <xPortStartScheduler+0x138>)
 80119a8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80119ac:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80119ae:	f000 f8dd 	bl	8011b6c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80119b2:	4b12      	ldr	r3, [pc, #72]	; (80119fc <xPortStartScheduler+0x13c>)
 80119b4:	2200      	movs	r2, #0
 80119b6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80119b8:	f000 f8fc 	bl	8011bb4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80119bc:	4b10      	ldr	r3, [pc, #64]	; (8011a00 <xPortStartScheduler+0x140>)
 80119be:	681b      	ldr	r3, [r3, #0]
 80119c0:	4a0f      	ldr	r2, [pc, #60]	; (8011a00 <xPortStartScheduler+0x140>)
 80119c2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80119c6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80119c8:	f7ff ff66 	bl	8011898 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80119cc:	f7fe ff4e 	bl	801086c <vTaskSwitchContext>
	prvTaskExitError();
 80119d0:	f7ff ff22 	bl	8011818 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80119d4:	2300      	movs	r3, #0
}
 80119d6:	4618      	mov	r0, r3
 80119d8:	3718      	adds	r7, #24
 80119da:	46bd      	mov	sp, r7
 80119dc:	bd80      	pop	{r7, pc}
 80119de:	bf00      	nop
 80119e0:	e000ed00 	.word	0xe000ed00
 80119e4:	410fc271 	.word	0x410fc271
 80119e8:	410fc270 	.word	0x410fc270
 80119ec:	e000e400 	.word	0xe000e400
 80119f0:	200017ac 	.word	0x200017ac
 80119f4:	200017b0 	.word	0x200017b0
 80119f8:	e000ed20 	.word	0xe000ed20
 80119fc:	20000010 	.word	0x20000010
 8011a00:	e000ef34 	.word	0xe000ef34

08011a04 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8011a04:	b480      	push	{r7}
 8011a06:	b083      	sub	sp, #12
 8011a08:	af00      	add	r7, sp, #0
	__asm volatile
 8011a0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011a0e:	f383 8811 	msr	BASEPRI, r3
 8011a12:	f3bf 8f6f 	isb	sy
 8011a16:	f3bf 8f4f 	dsb	sy
 8011a1a:	607b      	str	r3, [r7, #4]
}
 8011a1c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8011a1e:	4b0f      	ldr	r3, [pc, #60]	; (8011a5c <vPortEnterCritical+0x58>)
 8011a20:	681b      	ldr	r3, [r3, #0]
 8011a22:	3301      	adds	r3, #1
 8011a24:	4a0d      	ldr	r2, [pc, #52]	; (8011a5c <vPortEnterCritical+0x58>)
 8011a26:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8011a28:	4b0c      	ldr	r3, [pc, #48]	; (8011a5c <vPortEnterCritical+0x58>)
 8011a2a:	681b      	ldr	r3, [r3, #0]
 8011a2c:	2b01      	cmp	r3, #1
 8011a2e:	d10f      	bne.n	8011a50 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8011a30:	4b0b      	ldr	r3, [pc, #44]	; (8011a60 <vPortEnterCritical+0x5c>)
 8011a32:	681b      	ldr	r3, [r3, #0]
 8011a34:	b2db      	uxtb	r3, r3
 8011a36:	2b00      	cmp	r3, #0
 8011a38:	d00a      	beq.n	8011a50 <vPortEnterCritical+0x4c>
	__asm volatile
 8011a3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011a3e:	f383 8811 	msr	BASEPRI, r3
 8011a42:	f3bf 8f6f 	isb	sy
 8011a46:	f3bf 8f4f 	dsb	sy
 8011a4a:	603b      	str	r3, [r7, #0]
}
 8011a4c:	bf00      	nop
 8011a4e:	e7fe      	b.n	8011a4e <vPortEnterCritical+0x4a>
	}
}
 8011a50:	bf00      	nop
 8011a52:	370c      	adds	r7, #12
 8011a54:	46bd      	mov	sp, r7
 8011a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a5a:	4770      	bx	lr
 8011a5c:	20000010 	.word	0x20000010
 8011a60:	e000ed04 	.word	0xe000ed04

08011a64 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8011a64:	b480      	push	{r7}
 8011a66:	b083      	sub	sp, #12
 8011a68:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8011a6a:	4b12      	ldr	r3, [pc, #72]	; (8011ab4 <vPortExitCritical+0x50>)
 8011a6c:	681b      	ldr	r3, [r3, #0]
 8011a6e:	2b00      	cmp	r3, #0
 8011a70:	d10a      	bne.n	8011a88 <vPortExitCritical+0x24>
	__asm volatile
 8011a72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011a76:	f383 8811 	msr	BASEPRI, r3
 8011a7a:	f3bf 8f6f 	isb	sy
 8011a7e:	f3bf 8f4f 	dsb	sy
 8011a82:	607b      	str	r3, [r7, #4]
}
 8011a84:	bf00      	nop
 8011a86:	e7fe      	b.n	8011a86 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8011a88:	4b0a      	ldr	r3, [pc, #40]	; (8011ab4 <vPortExitCritical+0x50>)
 8011a8a:	681b      	ldr	r3, [r3, #0]
 8011a8c:	3b01      	subs	r3, #1
 8011a8e:	4a09      	ldr	r2, [pc, #36]	; (8011ab4 <vPortExitCritical+0x50>)
 8011a90:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8011a92:	4b08      	ldr	r3, [pc, #32]	; (8011ab4 <vPortExitCritical+0x50>)
 8011a94:	681b      	ldr	r3, [r3, #0]
 8011a96:	2b00      	cmp	r3, #0
 8011a98:	d105      	bne.n	8011aa6 <vPortExitCritical+0x42>
 8011a9a:	2300      	movs	r3, #0
 8011a9c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8011a9e:	683b      	ldr	r3, [r7, #0]
 8011aa0:	f383 8811 	msr	BASEPRI, r3
}
 8011aa4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8011aa6:	bf00      	nop
 8011aa8:	370c      	adds	r7, #12
 8011aaa:	46bd      	mov	sp, r7
 8011aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ab0:	4770      	bx	lr
 8011ab2:	bf00      	nop
 8011ab4:	20000010 	.word	0x20000010
	...

08011ac0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8011ac0:	f3ef 8009 	mrs	r0, PSP
 8011ac4:	f3bf 8f6f 	isb	sy
 8011ac8:	4b15      	ldr	r3, [pc, #84]	; (8011b20 <pxCurrentTCBConst>)
 8011aca:	681a      	ldr	r2, [r3, #0]
 8011acc:	f01e 0f10 	tst.w	lr, #16
 8011ad0:	bf08      	it	eq
 8011ad2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8011ad6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011ada:	6010      	str	r0, [r2, #0]
 8011adc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8011ae0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8011ae4:	f380 8811 	msr	BASEPRI, r0
 8011ae8:	f3bf 8f4f 	dsb	sy
 8011aec:	f3bf 8f6f 	isb	sy
 8011af0:	f7fe febc 	bl	801086c <vTaskSwitchContext>
 8011af4:	f04f 0000 	mov.w	r0, #0
 8011af8:	f380 8811 	msr	BASEPRI, r0
 8011afc:	bc09      	pop	{r0, r3}
 8011afe:	6819      	ldr	r1, [r3, #0]
 8011b00:	6808      	ldr	r0, [r1, #0]
 8011b02:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011b06:	f01e 0f10 	tst.w	lr, #16
 8011b0a:	bf08      	it	eq
 8011b0c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8011b10:	f380 8809 	msr	PSP, r0
 8011b14:	f3bf 8f6f 	isb	sy
 8011b18:	4770      	bx	lr
 8011b1a:	bf00      	nop
 8011b1c:	f3af 8000 	nop.w

08011b20 <pxCurrentTCBConst>:
 8011b20:	20001180 	.word	0x20001180
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8011b24:	bf00      	nop
 8011b26:	bf00      	nop

08011b28 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8011b28:	b580      	push	{r7, lr}
 8011b2a:	b082      	sub	sp, #8
 8011b2c:	af00      	add	r7, sp, #0
	__asm volatile
 8011b2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011b32:	f383 8811 	msr	BASEPRI, r3
 8011b36:	f3bf 8f6f 	isb	sy
 8011b3a:	f3bf 8f4f 	dsb	sy
 8011b3e:	607b      	str	r3, [r7, #4]
}
 8011b40:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8011b42:	f7fe fdd9 	bl	80106f8 <xTaskIncrementTick>
 8011b46:	4603      	mov	r3, r0
 8011b48:	2b00      	cmp	r3, #0
 8011b4a:	d003      	beq.n	8011b54 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8011b4c:	4b06      	ldr	r3, [pc, #24]	; (8011b68 <xPortSysTickHandler+0x40>)
 8011b4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011b52:	601a      	str	r2, [r3, #0]
 8011b54:	2300      	movs	r3, #0
 8011b56:	603b      	str	r3, [r7, #0]
	__asm volatile
 8011b58:	683b      	ldr	r3, [r7, #0]
 8011b5a:	f383 8811 	msr	BASEPRI, r3
}
 8011b5e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8011b60:	bf00      	nop
 8011b62:	3708      	adds	r7, #8
 8011b64:	46bd      	mov	sp, r7
 8011b66:	bd80      	pop	{r7, pc}
 8011b68:	e000ed04 	.word	0xe000ed04

08011b6c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8011b6c:	b480      	push	{r7}
 8011b6e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8011b70:	4b0b      	ldr	r3, [pc, #44]	; (8011ba0 <vPortSetupTimerInterrupt+0x34>)
 8011b72:	2200      	movs	r2, #0
 8011b74:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8011b76:	4b0b      	ldr	r3, [pc, #44]	; (8011ba4 <vPortSetupTimerInterrupt+0x38>)
 8011b78:	2200      	movs	r2, #0
 8011b7a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8011b7c:	4b0a      	ldr	r3, [pc, #40]	; (8011ba8 <vPortSetupTimerInterrupt+0x3c>)
 8011b7e:	681b      	ldr	r3, [r3, #0]
 8011b80:	4a0a      	ldr	r2, [pc, #40]	; (8011bac <vPortSetupTimerInterrupt+0x40>)
 8011b82:	fba2 2303 	umull	r2, r3, r2, r3
 8011b86:	099b      	lsrs	r3, r3, #6
 8011b88:	4a09      	ldr	r2, [pc, #36]	; (8011bb0 <vPortSetupTimerInterrupt+0x44>)
 8011b8a:	3b01      	subs	r3, #1
 8011b8c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8011b8e:	4b04      	ldr	r3, [pc, #16]	; (8011ba0 <vPortSetupTimerInterrupt+0x34>)
 8011b90:	2207      	movs	r2, #7
 8011b92:	601a      	str	r2, [r3, #0]
}
 8011b94:	bf00      	nop
 8011b96:	46bd      	mov	sp, r7
 8011b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b9c:	4770      	bx	lr
 8011b9e:	bf00      	nop
 8011ba0:	e000e010 	.word	0xe000e010
 8011ba4:	e000e018 	.word	0xe000e018
 8011ba8:	20000000 	.word	0x20000000
 8011bac:	10624dd3 	.word	0x10624dd3
 8011bb0:	e000e014 	.word	0xe000e014

08011bb4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8011bb4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8011bc4 <vPortEnableVFP+0x10>
 8011bb8:	6801      	ldr	r1, [r0, #0]
 8011bba:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8011bbe:	6001      	str	r1, [r0, #0]
 8011bc0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8011bc2:	bf00      	nop
 8011bc4:	e000ed88 	.word	0xe000ed88

08011bc8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8011bc8:	b480      	push	{r7}
 8011bca:	b085      	sub	sp, #20
 8011bcc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8011bce:	f3ef 8305 	mrs	r3, IPSR
 8011bd2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8011bd4:	68fb      	ldr	r3, [r7, #12]
 8011bd6:	2b0f      	cmp	r3, #15
 8011bd8:	d914      	bls.n	8011c04 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8011bda:	4a17      	ldr	r2, [pc, #92]	; (8011c38 <vPortValidateInterruptPriority+0x70>)
 8011bdc:	68fb      	ldr	r3, [r7, #12]
 8011bde:	4413      	add	r3, r2
 8011be0:	781b      	ldrb	r3, [r3, #0]
 8011be2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8011be4:	4b15      	ldr	r3, [pc, #84]	; (8011c3c <vPortValidateInterruptPriority+0x74>)
 8011be6:	781b      	ldrb	r3, [r3, #0]
 8011be8:	7afa      	ldrb	r2, [r7, #11]
 8011bea:	429a      	cmp	r2, r3
 8011bec:	d20a      	bcs.n	8011c04 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8011bee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011bf2:	f383 8811 	msr	BASEPRI, r3
 8011bf6:	f3bf 8f6f 	isb	sy
 8011bfa:	f3bf 8f4f 	dsb	sy
 8011bfe:	607b      	str	r3, [r7, #4]
}
 8011c00:	bf00      	nop
 8011c02:	e7fe      	b.n	8011c02 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8011c04:	4b0e      	ldr	r3, [pc, #56]	; (8011c40 <vPortValidateInterruptPriority+0x78>)
 8011c06:	681b      	ldr	r3, [r3, #0]
 8011c08:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8011c0c:	4b0d      	ldr	r3, [pc, #52]	; (8011c44 <vPortValidateInterruptPriority+0x7c>)
 8011c0e:	681b      	ldr	r3, [r3, #0]
 8011c10:	429a      	cmp	r2, r3
 8011c12:	d90a      	bls.n	8011c2a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8011c14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011c18:	f383 8811 	msr	BASEPRI, r3
 8011c1c:	f3bf 8f6f 	isb	sy
 8011c20:	f3bf 8f4f 	dsb	sy
 8011c24:	603b      	str	r3, [r7, #0]
}
 8011c26:	bf00      	nop
 8011c28:	e7fe      	b.n	8011c28 <vPortValidateInterruptPriority+0x60>
	}
 8011c2a:	bf00      	nop
 8011c2c:	3714      	adds	r7, #20
 8011c2e:	46bd      	mov	sp, r7
 8011c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c34:	4770      	bx	lr
 8011c36:	bf00      	nop
 8011c38:	e000e3f0 	.word	0xe000e3f0
 8011c3c:	200017ac 	.word	0x200017ac
 8011c40:	e000ed0c 	.word	0xe000ed0c
 8011c44:	200017b0 	.word	0x200017b0

08011c48 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8011c48:	b580      	push	{r7, lr}
 8011c4a:	b08a      	sub	sp, #40	; 0x28
 8011c4c:	af00      	add	r7, sp, #0
 8011c4e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8011c50:	2300      	movs	r3, #0
 8011c52:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8011c54:	f7fe fc94 	bl	8010580 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8011c58:	4b5b      	ldr	r3, [pc, #364]	; (8011dc8 <pvPortMalloc+0x180>)
 8011c5a:	681b      	ldr	r3, [r3, #0]
 8011c5c:	2b00      	cmp	r3, #0
 8011c5e:	d101      	bne.n	8011c64 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8011c60:	f000 f920 	bl	8011ea4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8011c64:	4b59      	ldr	r3, [pc, #356]	; (8011dcc <pvPortMalloc+0x184>)
 8011c66:	681a      	ldr	r2, [r3, #0]
 8011c68:	687b      	ldr	r3, [r7, #4]
 8011c6a:	4013      	ands	r3, r2
 8011c6c:	2b00      	cmp	r3, #0
 8011c6e:	f040 8093 	bne.w	8011d98 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8011c72:	687b      	ldr	r3, [r7, #4]
 8011c74:	2b00      	cmp	r3, #0
 8011c76:	d01d      	beq.n	8011cb4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8011c78:	2208      	movs	r2, #8
 8011c7a:	687b      	ldr	r3, [r7, #4]
 8011c7c:	4413      	add	r3, r2
 8011c7e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8011c80:	687b      	ldr	r3, [r7, #4]
 8011c82:	f003 0307 	and.w	r3, r3, #7
 8011c86:	2b00      	cmp	r3, #0
 8011c88:	d014      	beq.n	8011cb4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8011c8a:	687b      	ldr	r3, [r7, #4]
 8011c8c:	f023 0307 	bic.w	r3, r3, #7
 8011c90:	3308      	adds	r3, #8
 8011c92:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8011c94:	687b      	ldr	r3, [r7, #4]
 8011c96:	f003 0307 	and.w	r3, r3, #7
 8011c9a:	2b00      	cmp	r3, #0
 8011c9c:	d00a      	beq.n	8011cb4 <pvPortMalloc+0x6c>
	__asm volatile
 8011c9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011ca2:	f383 8811 	msr	BASEPRI, r3
 8011ca6:	f3bf 8f6f 	isb	sy
 8011caa:	f3bf 8f4f 	dsb	sy
 8011cae:	617b      	str	r3, [r7, #20]
}
 8011cb0:	bf00      	nop
 8011cb2:	e7fe      	b.n	8011cb2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8011cb4:	687b      	ldr	r3, [r7, #4]
 8011cb6:	2b00      	cmp	r3, #0
 8011cb8:	d06e      	beq.n	8011d98 <pvPortMalloc+0x150>
 8011cba:	4b45      	ldr	r3, [pc, #276]	; (8011dd0 <pvPortMalloc+0x188>)
 8011cbc:	681b      	ldr	r3, [r3, #0]
 8011cbe:	687a      	ldr	r2, [r7, #4]
 8011cc0:	429a      	cmp	r2, r3
 8011cc2:	d869      	bhi.n	8011d98 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8011cc4:	4b43      	ldr	r3, [pc, #268]	; (8011dd4 <pvPortMalloc+0x18c>)
 8011cc6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8011cc8:	4b42      	ldr	r3, [pc, #264]	; (8011dd4 <pvPortMalloc+0x18c>)
 8011cca:	681b      	ldr	r3, [r3, #0]
 8011ccc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8011cce:	e004      	b.n	8011cda <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8011cd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011cd2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8011cd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011cd6:	681b      	ldr	r3, [r3, #0]
 8011cd8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8011cda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011cdc:	685b      	ldr	r3, [r3, #4]
 8011cde:	687a      	ldr	r2, [r7, #4]
 8011ce0:	429a      	cmp	r2, r3
 8011ce2:	d903      	bls.n	8011cec <pvPortMalloc+0xa4>
 8011ce4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011ce6:	681b      	ldr	r3, [r3, #0]
 8011ce8:	2b00      	cmp	r3, #0
 8011cea:	d1f1      	bne.n	8011cd0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8011cec:	4b36      	ldr	r3, [pc, #216]	; (8011dc8 <pvPortMalloc+0x180>)
 8011cee:	681b      	ldr	r3, [r3, #0]
 8011cf0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011cf2:	429a      	cmp	r2, r3
 8011cf4:	d050      	beq.n	8011d98 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8011cf6:	6a3b      	ldr	r3, [r7, #32]
 8011cf8:	681b      	ldr	r3, [r3, #0]
 8011cfa:	2208      	movs	r2, #8
 8011cfc:	4413      	add	r3, r2
 8011cfe:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8011d00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d02:	681a      	ldr	r2, [r3, #0]
 8011d04:	6a3b      	ldr	r3, [r7, #32]
 8011d06:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8011d08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d0a:	685a      	ldr	r2, [r3, #4]
 8011d0c:	687b      	ldr	r3, [r7, #4]
 8011d0e:	1ad2      	subs	r2, r2, r3
 8011d10:	2308      	movs	r3, #8
 8011d12:	005b      	lsls	r3, r3, #1
 8011d14:	429a      	cmp	r2, r3
 8011d16:	d91f      	bls.n	8011d58 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8011d18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011d1a:	687b      	ldr	r3, [r7, #4]
 8011d1c:	4413      	add	r3, r2
 8011d1e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8011d20:	69bb      	ldr	r3, [r7, #24]
 8011d22:	f003 0307 	and.w	r3, r3, #7
 8011d26:	2b00      	cmp	r3, #0
 8011d28:	d00a      	beq.n	8011d40 <pvPortMalloc+0xf8>
	__asm volatile
 8011d2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011d2e:	f383 8811 	msr	BASEPRI, r3
 8011d32:	f3bf 8f6f 	isb	sy
 8011d36:	f3bf 8f4f 	dsb	sy
 8011d3a:	613b      	str	r3, [r7, #16]
}
 8011d3c:	bf00      	nop
 8011d3e:	e7fe      	b.n	8011d3e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8011d40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d42:	685a      	ldr	r2, [r3, #4]
 8011d44:	687b      	ldr	r3, [r7, #4]
 8011d46:	1ad2      	subs	r2, r2, r3
 8011d48:	69bb      	ldr	r3, [r7, #24]
 8011d4a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8011d4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d4e:	687a      	ldr	r2, [r7, #4]
 8011d50:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8011d52:	69b8      	ldr	r0, [r7, #24]
 8011d54:	f000 f908 	bl	8011f68 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8011d58:	4b1d      	ldr	r3, [pc, #116]	; (8011dd0 <pvPortMalloc+0x188>)
 8011d5a:	681a      	ldr	r2, [r3, #0]
 8011d5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d5e:	685b      	ldr	r3, [r3, #4]
 8011d60:	1ad3      	subs	r3, r2, r3
 8011d62:	4a1b      	ldr	r2, [pc, #108]	; (8011dd0 <pvPortMalloc+0x188>)
 8011d64:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8011d66:	4b1a      	ldr	r3, [pc, #104]	; (8011dd0 <pvPortMalloc+0x188>)
 8011d68:	681a      	ldr	r2, [r3, #0]
 8011d6a:	4b1b      	ldr	r3, [pc, #108]	; (8011dd8 <pvPortMalloc+0x190>)
 8011d6c:	681b      	ldr	r3, [r3, #0]
 8011d6e:	429a      	cmp	r2, r3
 8011d70:	d203      	bcs.n	8011d7a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8011d72:	4b17      	ldr	r3, [pc, #92]	; (8011dd0 <pvPortMalloc+0x188>)
 8011d74:	681b      	ldr	r3, [r3, #0]
 8011d76:	4a18      	ldr	r2, [pc, #96]	; (8011dd8 <pvPortMalloc+0x190>)
 8011d78:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8011d7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d7c:	685a      	ldr	r2, [r3, #4]
 8011d7e:	4b13      	ldr	r3, [pc, #76]	; (8011dcc <pvPortMalloc+0x184>)
 8011d80:	681b      	ldr	r3, [r3, #0]
 8011d82:	431a      	orrs	r2, r3
 8011d84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d86:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8011d88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d8a:	2200      	movs	r2, #0
 8011d8c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8011d8e:	4b13      	ldr	r3, [pc, #76]	; (8011ddc <pvPortMalloc+0x194>)
 8011d90:	681b      	ldr	r3, [r3, #0]
 8011d92:	3301      	adds	r3, #1
 8011d94:	4a11      	ldr	r2, [pc, #68]	; (8011ddc <pvPortMalloc+0x194>)
 8011d96:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8011d98:	f7fe fc00 	bl	801059c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8011d9c:	69fb      	ldr	r3, [r7, #28]
 8011d9e:	f003 0307 	and.w	r3, r3, #7
 8011da2:	2b00      	cmp	r3, #0
 8011da4:	d00a      	beq.n	8011dbc <pvPortMalloc+0x174>
	__asm volatile
 8011da6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011daa:	f383 8811 	msr	BASEPRI, r3
 8011dae:	f3bf 8f6f 	isb	sy
 8011db2:	f3bf 8f4f 	dsb	sy
 8011db6:	60fb      	str	r3, [r7, #12]
}
 8011db8:	bf00      	nop
 8011dba:	e7fe      	b.n	8011dba <pvPortMalloc+0x172>
	return pvReturn;
 8011dbc:	69fb      	ldr	r3, [r7, #28]
}
 8011dbe:	4618      	mov	r0, r3
 8011dc0:	3728      	adds	r7, #40	; 0x28
 8011dc2:	46bd      	mov	sp, r7
 8011dc4:	bd80      	pop	{r7, pc}
 8011dc6:	bf00      	nop
 8011dc8:	200053bc 	.word	0x200053bc
 8011dcc:	200053d0 	.word	0x200053d0
 8011dd0:	200053c0 	.word	0x200053c0
 8011dd4:	200053b4 	.word	0x200053b4
 8011dd8:	200053c4 	.word	0x200053c4
 8011ddc:	200053c8 	.word	0x200053c8

08011de0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8011de0:	b580      	push	{r7, lr}
 8011de2:	b086      	sub	sp, #24
 8011de4:	af00      	add	r7, sp, #0
 8011de6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8011de8:	687b      	ldr	r3, [r7, #4]
 8011dea:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8011dec:	687b      	ldr	r3, [r7, #4]
 8011dee:	2b00      	cmp	r3, #0
 8011df0:	d04d      	beq.n	8011e8e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8011df2:	2308      	movs	r3, #8
 8011df4:	425b      	negs	r3, r3
 8011df6:	697a      	ldr	r2, [r7, #20]
 8011df8:	4413      	add	r3, r2
 8011dfa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8011dfc:	697b      	ldr	r3, [r7, #20]
 8011dfe:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8011e00:	693b      	ldr	r3, [r7, #16]
 8011e02:	685a      	ldr	r2, [r3, #4]
 8011e04:	4b24      	ldr	r3, [pc, #144]	; (8011e98 <vPortFree+0xb8>)
 8011e06:	681b      	ldr	r3, [r3, #0]
 8011e08:	4013      	ands	r3, r2
 8011e0a:	2b00      	cmp	r3, #0
 8011e0c:	d10a      	bne.n	8011e24 <vPortFree+0x44>
	__asm volatile
 8011e0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011e12:	f383 8811 	msr	BASEPRI, r3
 8011e16:	f3bf 8f6f 	isb	sy
 8011e1a:	f3bf 8f4f 	dsb	sy
 8011e1e:	60fb      	str	r3, [r7, #12]
}
 8011e20:	bf00      	nop
 8011e22:	e7fe      	b.n	8011e22 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8011e24:	693b      	ldr	r3, [r7, #16]
 8011e26:	681b      	ldr	r3, [r3, #0]
 8011e28:	2b00      	cmp	r3, #0
 8011e2a:	d00a      	beq.n	8011e42 <vPortFree+0x62>
	__asm volatile
 8011e2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011e30:	f383 8811 	msr	BASEPRI, r3
 8011e34:	f3bf 8f6f 	isb	sy
 8011e38:	f3bf 8f4f 	dsb	sy
 8011e3c:	60bb      	str	r3, [r7, #8]
}
 8011e3e:	bf00      	nop
 8011e40:	e7fe      	b.n	8011e40 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8011e42:	693b      	ldr	r3, [r7, #16]
 8011e44:	685a      	ldr	r2, [r3, #4]
 8011e46:	4b14      	ldr	r3, [pc, #80]	; (8011e98 <vPortFree+0xb8>)
 8011e48:	681b      	ldr	r3, [r3, #0]
 8011e4a:	4013      	ands	r3, r2
 8011e4c:	2b00      	cmp	r3, #0
 8011e4e:	d01e      	beq.n	8011e8e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8011e50:	693b      	ldr	r3, [r7, #16]
 8011e52:	681b      	ldr	r3, [r3, #0]
 8011e54:	2b00      	cmp	r3, #0
 8011e56:	d11a      	bne.n	8011e8e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8011e58:	693b      	ldr	r3, [r7, #16]
 8011e5a:	685a      	ldr	r2, [r3, #4]
 8011e5c:	4b0e      	ldr	r3, [pc, #56]	; (8011e98 <vPortFree+0xb8>)
 8011e5e:	681b      	ldr	r3, [r3, #0]
 8011e60:	43db      	mvns	r3, r3
 8011e62:	401a      	ands	r2, r3
 8011e64:	693b      	ldr	r3, [r7, #16]
 8011e66:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8011e68:	f7fe fb8a 	bl	8010580 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8011e6c:	693b      	ldr	r3, [r7, #16]
 8011e6e:	685a      	ldr	r2, [r3, #4]
 8011e70:	4b0a      	ldr	r3, [pc, #40]	; (8011e9c <vPortFree+0xbc>)
 8011e72:	681b      	ldr	r3, [r3, #0]
 8011e74:	4413      	add	r3, r2
 8011e76:	4a09      	ldr	r2, [pc, #36]	; (8011e9c <vPortFree+0xbc>)
 8011e78:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8011e7a:	6938      	ldr	r0, [r7, #16]
 8011e7c:	f000 f874 	bl	8011f68 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8011e80:	4b07      	ldr	r3, [pc, #28]	; (8011ea0 <vPortFree+0xc0>)
 8011e82:	681b      	ldr	r3, [r3, #0]
 8011e84:	3301      	adds	r3, #1
 8011e86:	4a06      	ldr	r2, [pc, #24]	; (8011ea0 <vPortFree+0xc0>)
 8011e88:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8011e8a:	f7fe fb87 	bl	801059c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8011e8e:	bf00      	nop
 8011e90:	3718      	adds	r7, #24
 8011e92:	46bd      	mov	sp, r7
 8011e94:	bd80      	pop	{r7, pc}
 8011e96:	bf00      	nop
 8011e98:	200053d0 	.word	0x200053d0
 8011e9c:	200053c0 	.word	0x200053c0
 8011ea0:	200053cc 	.word	0x200053cc

08011ea4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8011ea4:	b480      	push	{r7}
 8011ea6:	b085      	sub	sp, #20
 8011ea8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8011eaa:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8011eae:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8011eb0:	4b27      	ldr	r3, [pc, #156]	; (8011f50 <prvHeapInit+0xac>)
 8011eb2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8011eb4:	68fb      	ldr	r3, [r7, #12]
 8011eb6:	f003 0307 	and.w	r3, r3, #7
 8011eba:	2b00      	cmp	r3, #0
 8011ebc:	d00c      	beq.n	8011ed8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8011ebe:	68fb      	ldr	r3, [r7, #12]
 8011ec0:	3307      	adds	r3, #7
 8011ec2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8011ec4:	68fb      	ldr	r3, [r7, #12]
 8011ec6:	f023 0307 	bic.w	r3, r3, #7
 8011eca:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8011ecc:	68ba      	ldr	r2, [r7, #8]
 8011ece:	68fb      	ldr	r3, [r7, #12]
 8011ed0:	1ad3      	subs	r3, r2, r3
 8011ed2:	4a1f      	ldr	r2, [pc, #124]	; (8011f50 <prvHeapInit+0xac>)
 8011ed4:	4413      	add	r3, r2
 8011ed6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8011ed8:	68fb      	ldr	r3, [r7, #12]
 8011eda:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8011edc:	4a1d      	ldr	r2, [pc, #116]	; (8011f54 <prvHeapInit+0xb0>)
 8011ede:	687b      	ldr	r3, [r7, #4]
 8011ee0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8011ee2:	4b1c      	ldr	r3, [pc, #112]	; (8011f54 <prvHeapInit+0xb0>)
 8011ee4:	2200      	movs	r2, #0
 8011ee6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8011ee8:	687b      	ldr	r3, [r7, #4]
 8011eea:	68ba      	ldr	r2, [r7, #8]
 8011eec:	4413      	add	r3, r2
 8011eee:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8011ef0:	2208      	movs	r2, #8
 8011ef2:	68fb      	ldr	r3, [r7, #12]
 8011ef4:	1a9b      	subs	r3, r3, r2
 8011ef6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8011ef8:	68fb      	ldr	r3, [r7, #12]
 8011efa:	f023 0307 	bic.w	r3, r3, #7
 8011efe:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8011f00:	68fb      	ldr	r3, [r7, #12]
 8011f02:	4a15      	ldr	r2, [pc, #84]	; (8011f58 <prvHeapInit+0xb4>)
 8011f04:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8011f06:	4b14      	ldr	r3, [pc, #80]	; (8011f58 <prvHeapInit+0xb4>)
 8011f08:	681b      	ldr	r3, [r3, #0]
 8011f0a:	2200      	movs	r2, #0
 8011f0c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8011f0e:	4b12      	ldr	r3, [pc, #72]	; (8011f58 <prvHeapInit+0xb4>)
 8011f10:	681b      	ldr	r3, [r3, #0]
 8011f12:	2200      	movs	r2, #0
 8011f14:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8011f16:	687b      	ldr	r3, [r7, #4]
 8011f18:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8011f1a:	683b      	ldr	r3, [r7, #0]
 8011f1c:	68fa      	ldr	r2, [r7, #12]
 8011f1e:	1ad2      	subs	r2, r2, r3
 8011f20:	683b      	ldr	r3, [r7, #0]
 8011f22:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8011f24:	4b0c      	ldr	r3, [pc, #48]	; (8011f58 <prvHeapInit+0xb4>)
 8011f26:	681a      	ldr	r2, [r3, #0]
 8011f28:	683b      	ldr	r3, [r7, #0]
 8011f2a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8011f2c:	683b      	ldr	r3, [r7, #0]
 8011f2e:	685b      	ldr	r3, [r3, #4]
 8011f30:	4a0a      	ldr	r2, [pc, #40]	; (8011f5c <prvHeapInit+0xb8>)
 8011f32:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8011f34:	683b      	ldr	r3, [r7, #0]
 8011f36:	685b      	ldr	r3, [r3, #4]
 8011f38:	4a09      	ldr	r2, [pc, #36]	; (8011f60 <prvHeapInit+0xbc>)
 8011f3a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8011f3c:	4b09      	ldr	r3, [pc, #36]	; (8011f64 <prvHeapInit+0xc0>)
 8011f3e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8011f42:	601a      	str	r2, [r3, #0]
}
 8011f44:	bf00      	nop
 8011f46:	3714      	adds	r7, #20
 8011f48:	46bd      	mov	sp, r7
 8011f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f4e:	4770      	bx	lr
 8011f50:	200017b4 	.word	0x200017b4
 8011f54:	200053b4 	.word	0x200053b4
 8011f58:	200053bc 	.word	0x200053bc
 8011f5c:	200053c4 	.word	0x200053c4
 8011f60:	200053c0 	.word	0x200053c0
 8011f64:	200053d0 	.word	0x200053d0

08011f68 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8011f68:	b480      	push	{r7}
 8011f6a:	b085      	sub	sp, #20
 8011f6c:	af00      	add	r7, sp, #0
 8011f6e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8011f70:	4b28      	ldr	r3, [pc, #160]	; (8012014 <prvInsertBlockIntoFreeList+0xac>)
 8011f72:	60fb      	str	r3, [r7, #12]
 8011f74:	e002      	b.n	8011f7c <prvInsertBlockIntoFreeList+0x14>
 8011f76:	68fb      	ldr	r3, [r7, #12]
 8011f78:	681b      	ldr	r3, [r3, #0]
 8011f7a:	60fb      	str	r3, [r7, #12]
 8011f7c:	68fb      	ldr	r3, [r7, #12]
 8011f7e:	681b      	ldr	r3, [r3, #0]
 8011f80:	687a      	ldr	r2, [r7, #4]
 8011f82:	429a      	cmp	r2, r3
 8011f84:	d8f7      	bhi.n	8011f76 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8011f86:	68fb      	ldr	r3, [r7, #12]
 8011f88:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8011f8a:	68fb      	ldr	r3, [r7, #12]
 8011f8c:	685b      	ldr	r3, [r3, #4]
 8011f8e:	68ba      	ldr	r2, [r7, #8]
 8011f90:	4413      	add	r3, r2
 8011f92:	687a      	ldr	r2, [r7, #4]
 8011f94:	429a      	cmp	r2, r3
 8011f96:	d108      	bne.n	8011faa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8011f98:	68fb      	ldr	r3, [r7, #12]
 8011f9a:	685a      	ldr	r2, [r3, #4]
 8011f9c:	687b      	ldr	r3, [r7, #4]
 8011f9e:	685b      	ldr	r3, [r3, #4]
 8011fa0:	441a      	add	r2, r3
 8011fa2:	68fb      	ldr	r3, [r7, #12]
 8011fa4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8011fa6:	68fb      	ldr	r3, [r7, #12]
 8011fa8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8011faa:	687b      	ldr	r3, [r7, #4]
 8011fac:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8011fae:	687b      	ldr	r3, [r7, #4]
 8011fb0:	685b      	ldr	r3, [r3, #4]
 8011fb2:	68ba      	ldr	r2, [r7, #8]
 8011fb4:	441a      	add	r2, r3
 8011fb6:	68fb      	ldr	r3, [r7, #12]
 8011fb8:	681b      	ldr	r3, [r3, #0]
 8011fba:	429a      	cmp	r2, r3
 8011fbc:	d118      	bne.n	8011ff0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8011fbe:	68fb      	ldr	r3, [r7, #12]
 8011fc0:	681a      	ldr	r2, [r3, #0]
 8011fc2:	4b15      	ldr	r3, [pc, #84]	; (8012018 <prvInsertBlockIntoFreeList+0xb0>)
 8011fc4:	681b      	ldr	r3, [r3, #0]
 8011fc6:	429a      	cmp	r2, r3
 8011fc8:	d00d      	beq.n	8011fe6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8011fca:	687b      	ldr	r3, [r7, #4]
 8011fcc:	685a      	ldr	r2, [r3, #4]
 8011fce:	68fb      	ldr	r3, [r7, #12]
 8011fd0:	681b      	ldr	r3, [r3, #0]
 8011fd2:	685b      	ldr	r3, [r3, #4]
 8011fd4:	441a      	add	r2, r3
 8011fd6:	687b      	ldr	r3, [r7, #4]
 8011fd8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8011fda:	68fb      	ldr	r3, [r7, #12]
 8011fdc:	681b      	ldr	r3, [r3, #0]
 8011fde:	681a      	ldr	r2, [r3, #0]
 8011fe0:	687b      	ldr	r3, [r7, #4]
 8011fe2:	601a      	str	r2, [r3, #0]
 8011fe4:	e008      	b.n	8011ff8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8011fe6:	4b0c      	ldr	r3, [pc, #48]	; (8012018 <prvInsertBlockIntoFreeList+0xb0>)
 8011fe8:	681a      	ldr	r2, [r3, #0]
 8011fea:	687b      	ldr	r3, [r7, #4]
 8011fec:	601a      	str	r2, [r3, #0]
 8011fee:	e003      	b.n	8011ff8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8011ff0:	68fb      	ldr	r3, [r7, #12]
 8011ff2:	681a      	ldr	r2, [r3, #0]
 8011ff4:	687b      	ldr	r3, [r7, #4]
 8011ff6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8011ff8:	68fa      	ldr	r2, [r7, #12]
 8011ffa:	687b      	ldr	r3, [r7, #4]
 8011ffc:	429a      	cmp	r2, r3
 8011ffe:	d002      	beq.n	8012006 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8012000:	68fb      	ldr	r3, [r7, #12]
 8012002:	687a      	ldr	r2, [r7, #4]
 8012004:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8012006:	bf00      	nop
 8012008:	3714      	adds	r7, #20
 801200a:	46bd      	mov	sp, r7
 801200c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012010:	4770      	bx	lr
 8012012:	bf00      	nop
 8012014:	200053b4 	.word	0x200053b4
 8012018:	200053bc 	.word	0x200053bc

0801201c <_ZN8touchgfx12FontProviderD1Ev>:
     * @return The font with a font id of fontId.
     */
    virtual Font* getFont(FontId fontId) = 0;

    /** Finalizes an instance of the FontProvider class. */
    virtual ~FontProvider()
 801201c:	b480      	push	{r7}
 801201e:	b083      	sub	sp, #12
 8012020:	af00      	add	r7, sp, #0
 8012022:	6078      	str	r0, [r7, #4]
    {
 8012024:	4a04      	ldr	r2, [pc, #16]	; (8012038 <_ZN8touchgfx12FontProviderD1Ev+0x1c>)
 8012026:	687b      	ldr	r3, [r7, #4]
 8012028:	601a      	str	r2, [r3, #0]
    }
 801202a:	687b      	ldr	r3, [r7, #4]
 801202c:	4618      	mov	r0, r3
 801202e:	370c      	adds	r7, #12
 8012030:	46bd      	mov	sp, r7
 8012032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012036:	4770      	bx	lr
 8012038:	0801edbc 	.word	0x0801edbc

0801203c <_ZN8touchgfx12FontProviderD0Ev>:
    virtual ~FontProvider()
 801203c:	b580      	push	{r7, lr}
 801203e:	b082      	sub	sp, #8
 8012040:	af00      	add	r7, sp, #0
 8012042:	6078      	str	r0, [r7, #4]
    }
 8012044:	6878      	ldr	r0, [r7, #4]
 8012046:	f7ff ffe9 	bl	801201c <_ZN8touchgfx12FontProviderD1Ev>
 801204a:	2104      	movs	r1, #4
 801204c:	6878      	ldr	r0, [r7, #4]
 801204e:	f009 fabf 	bl	801b5d0 <_ZdlPvj>
 8012052:	687b      	ldr	r3, [r7, #4]
 8012054:	4618      	mov	r0, r3
 8012056:	3708      	adds	r7, #8
 8012058:	46bd      	mov	sp, r7
 801205a:	bd80      	pop	{r7, pc}

0801205c <_ZN23ApplicationFontProvider7getFontEt>:
#include <fonts/ApplicationFontProvider.hpp>
#include <fonts/GeneratedFont.hpp>
#include <texts/TypedTextDatabase.hpp>

touchgfx::Font* ApplicationFontProvider::getFont(touchgfx::FontId typography)
{
 801205c:	b580      	push	{r7, lr}
 801205e:	b082      	sub	sp, #8
 8012060:	af00      	add	r7, sp, #0
 8012062:	6078      	str	r0, [r7, #4]
 8012064:	460b      	mov	r3, r1
 8012066:	807b      	strh	r3, [r7, #2]
    switch (typography)
 8012068:	887b      	ldrh	r3, [r7, #2]
 801206a:	2b0c      	cmp	r3, #12
 801206c:	d85d      	bhi.n	801212a <_ZN23ApplicationFontProvider7getFontEt+0xce>
 801206e:	a201      	add	r2, pc, #4	; (adr r2, 8012074 <_ZN23ApplicationFontProvider7getFontEt+0x18>)
 8012070:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012074:	080120a9 	.word	0x080120a9
 8012078:	080120b3 	.word	0x080120b3
 801207c:	080120bd 	.word	0x080120bd
 8012080:	080120c7 	.word	0x080120c7
 8012084:	080120d1 	.word	0x080120d1
 8012088:	080120db 	.word	0x080120db
 801208c:	080120e5 	.word	0x080120e5
 8012090:	080120ef 	.word	0x080120ef
 8012094:	080120f9 	.word	0x080120f9
 8012098:	08012103 	.word	0x08012103
 801209c:	0801210d 	.word	0x0801210d
 80120a0:	08012117 	.word	0x08012117
 80120a4:	08012121 	.word	0x08012121
    {
    case Typography::DEFAULT:
        // verdana_20_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[0]);
 80120a8:	f001 f938 	bl	801331c <_ZN17TypedTextDatabase8getFontsEv>
 80120ac:	4603      	mov	r3, r0
 80120ae:	681b      	ldr	r3, [r3, #0]
 80120b0:	e03c      	b.n	801212c <_ZN23ApplicationFontProvider7getFontEt+0xd0>
    case Typography::BUTTONSENG:
        // AGENCYB_TTF_20_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[1]);
 80120b2:	f001 f933 	bl	801331c <_ZN17TypedTextDatabase8getFontsEv>
 80120b6:	4603      	mov	r3, r0
 80120b8:	685b      	ldr	r3, [r3, #4]
 80120ba:	e037      	b.n	801212c <_ZN23ApplicationFontProvider7getFontEt+0xd0>
    case Typography::TITLES:
        // AGENCYB_TTF_50_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[2]);
 80120bc:	f001 f92e 	bl	801331c <_ZN17TypedTextDatabase8getFontsEv>
 80120c0:	4603      	mov	r3, r0
 80120c2:	689b      	ldr	r3, [r3, #8]
 80120c4:	e032      	b.n	801212c <_ZN23ApplicationFontProvider7getFontEt+0xd0>
    case Typography::MEDIUMTITLE:
        // AGENCYB_TTF_30_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[3]);
 80120c6:	f001 f929 	bl	801331c <_ZN17TypedTextDatabase8getFontsEv>
 80120ca:	4603      	mov	r3, r0
 80120cc:	68db      	ldr	r3, [r3, #12]
 80120ce:	e02d      	b.n	801212c <_ZN23ApplicationFontProvider7getFontEt+0xd0>
    case Typography::BACKBUTTON:
        // AGENCYB_TTF_14_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[4]);
 80120d0:	f001 f924 	bl	801331c <_ZN17TypedTextDatabase8getFontsEv>
 80120d4:	4603      	mov	r3, r0
 80120d6:	691b      	ldr	r3, [r3, #16]
 80120d8:	e028      	b.n	801212c <_ZN23ApplicationFontProvider7getFontEt+0xd0>
    case Typography::DISPLAY:
        // AGENCYB_TTF_28_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[5]);
 80120da:	f001 f91f 	bl	801331c <_ZN17TypedTextDatabase8getFontsEv>
 80120de:	4603      	mov	r3, r0
 80120e0:	695b      	ldr	r3, [r3, #20]
 80120e2:	e023      	b.n	801212c <_ZN23ApplicationFontProvider7getFontEt+0xd0>
    case Typography::MODE:
        // AGENCYB_TTF_24_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[6]);
 80120e4:	f001 f91a 	bl	801331c <_ZN17TypedTextDatabase8getFontsEv>
 80120e8:	4603      	mov	r3, r0
 80120ea:	699b      	ldr	r3, [r3, #24]
 80120ec:	e01e      	b.n	801212c <_ZN23ApplicationFontProvider7getFontEt+0xd0>
    case Typography::KEYBOARD:
        // AGENCYB_TTF_20_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[1]);
 80120ee:	f001 f915 	bl	801331c <_ZN17TypedTextDatabase8getFontsEv>
 80120f2:	4603      	mov	r3, r0
 80120f4:	685b      	ldr	r3, [r3, #4]
 80120f6:	e019      	b.n	801212c <_ZN23ApplicationFontProvider7getFontEt+0xd0>
    case Typography::MAINTEXT:
        // AGENCYB_TTF_20_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[1]);
 80120f8:	f001 f910 	bl	801331c <_ZN17TypedTextDatabase8getFontsEv>
 80120fc:	4603      	mov	r3, r0
 80120fe:	685b      	ldr	r3, [r3, #4]
 8012100:	e014      	b.n	801212c <_ZN23ApplicationFontProvider7getFontEt+0xd0>
    case Typography::ITALICARIAL14:
        // AGENCYB_TTF_14_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[4]);
 8012102:	f001 f90b 	bl	801331c <_ZN17TypedTextDatabase8getFontsEv>
 8012106:	4603      	mov	r3, r0
 8012108:	691b      	ldr	r3, [r3, #16]
 801210a:	e00f      	b.n	801212c <_ZN23ApplicationFontProvider7getFontEt+0xd0>
    case Typography::SMALLARIEL10:
        // AGENCYB_TTF_12_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[7]);
 801210c:	f001 f906 	bl	801331c <_ZN17TypedTextDatabase8getFontsEv>
 8012110:	4603      	mov	r3, r0
 8012112:	69db      	ldr	r3, [r3, #28]
 8012114:	e00a      	b.n	801212c <_ZN23ApplicationFontProvider7getFontEt+0xd0>
    case Typography::LARGE:
        // verdana_40_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[8]);
 8012116:	f001 f901 	bl	801331c <_ZN17TypedTextDatabase8getFontsEv>
 801211a:	4603      	mov	r3, r0
 801211c:	6a1b      	ldr	r3, [r3, #32]
 801211e:	e005      	b.n	801212c <_ZN23ApplicationFontProvider7getFontEt+0xd0>
    case Typography::SMALL:
        // verdana_10_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[9]);
 8012120:	f001 f8fc 	bl	801331c <_ZN17TypedTextDatabase8getFontsEv>
 8012124:	4603      	mov	r3, r0
 8012126:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012128:	e000      	b.n	801212c <_ZN23ApplicationFontProvider7getFontEt+0xd0>
    default:
        return 0;
 801212a:	2300      	movs	r3, #0
    }
}
 801212c:	4618      	mov	r0, r3
 801212e:	3708      	adds	r7, #8
 8012130:	46bd      	mov	sp, r7
 8012132:	bd80      	pop	{r7, pc}

08012134 <_ZN23ApplicationFontProviderD1Ev>:
    static const touchgfx::FontId LARGE = 8;         // verdana_40_4bpp
    static const touchgfx::FontId SMALL = 9;         // verdana_10_4bpp
    static const uint16_t NUMBER_OF_FONTS = 10;
};

class ApplicationFontProvider : public touchgfx::FontProvider
 8012134:	b580      	push	{r7, lr}
 8012136:	b082      	sub	sp, #8
 8012138:	af00      	add	r7, sp, #0
 801213a:	6078      	str	r0, [r7, #4]
 801213c:	4a05      	ldr	r2, [pc, #20]	; (8012154 <_ZN23ApplicationFontProviderD1Ev+0x20>)
 801213e:	687b      	ldr	r3, [r7, #4]
 8012140:	601a      	str	r2, [r3, #0]
 8012142:	687b      	ldr	r3, [r7, #4]
 8012144:	4618      	mov	r0, r3
 8012146:	f7ff ff69 	bl	801201c <_ZN8touchgfx12FontProviderD1Ev>
 801214a:	687b      	ldr	r3, [r7, #4]
 801214c:	4618      	mov	r0, r3
 801214e:	3708      	adds	r7, #8
 8012150:	46bd      	mov	sp, r7
 8012152:	bd80      	pop	{r7, pc}
 8012154:	0801eda8 	.word	0x0801eda8

08012158 <_ZN23ApplicationFontProviderD0Ev>:
 8012158:	b580      	push	{r7, lr}
 801215a:	b082      	sub	sp, #8
 801215c:	af00      	add	r7, sp, #0
 801215e:	6078      	str	r0, [r7, #4]
 8012160:	6878      	ldr	r0, [r7, #4]
 8012162:	f7ff ffe7 	bl	8012134 <_ZN23ApplicationFontProviderD1Ev>
 8012166:	2104      	movs	r1, #4
 8012168:	6878      	ldr	r0, [r7, #4]
 801216a:	f009 fa31 	bl	801b5d0 <_ZdlPvj>
 801216e:	687b      	ldr	r3, [r7, #4]
 8012170:	4618      	mov	r0, r3
 8012172:	3708      	adds	r7, #8
 8012174:	46bd      	mov	sp, r7
 8012176:	bd80      	pop	{r7, pc}

08012178 <_ZN8touchgfx4FontD1Ev>:
 */
class Font
{
public:
    /** Finalizes an instance of the Font class. */
    virtual ~Font()
 8012178:	b480      	push	{r7}
 801217a:	b083      	sub	sp, #12
 801217c:	af00      	add	r7, sp, #0
 801217e:	6078      	str	r0, [r7, #4]
    {
 8012180:	4a04      	ldr	r2, [pc, #16]	; (8012194 <_ZN8touchgfx4FontD1Ev+0x1c>)
 8012182:	687b      	ldr	r3, [r7, #4]
 8012184:	601a      	str	r2, [r3, #0]
    }
 8012186:	687b      	ldr	r3, [r7, #4]
 8012188:	4618      	mov	r0, r3
 801218a:	370c      	adds	r7, #12
 801218c:	46bd      	mov	sp, r7
 801218e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012192:	4770      	bx	lr
 8012194:	0801ee38 	.word	0x0801ee38

08012198 <_ZN8touchgfx4FontD0Ev>:
    virtual ~Font()
 8012198:	b580      	push	{r7, lr}
 801219a:	b082      	sub	sp, #8
 801219c:	af00      	add	r7, sp, #0
 801219e:	6078      	str	r0, [r7, #4]
    }
 80121a0:	6878      	ldr	r0, [r7, #4]
 80121a2:	f7ff ffe9 	bl	8012178 <_ZN8touchgfx4FontD1Ev>
 80121a6:	2110      	movs	r1, #16
 80121a8:	6878      	ldr	r0, [r7, #4]
 80121aa:	f009 fa11 	bl	801b5d0 <_ZdlPvj>
 80121ae:	687b      	ldr	r3, [r7, #4]
 80121b0:	4618      	mov	r0, r3
 80121b2:	3708      	adds	r7, #8
 80121b4:	46bd      	mov	sp, r7
 80121b6:	bd80      	pop	{r7, pc}

080121b8 <_ZNK8touchgfx4Font8getGlyphEt>:
     *
     * @return A pointer to the glyph node or null if the glyph was not found.
     *
     * @see TextProvider::getNextLigature
     */
    virtual const GlyphNode* getGlyph(Unicode::UnicodeChar unicode) const
 80121b8:	b590      	push	{r4, r7, lr}
 80121ba:	b087      	sub	sp, #28
 80121bc:	af00      	add	r7, sp, #0
 80121be:	6078      	str	r0, [r7, #4]
 80121c0:	460b      	mov	r3, r1
 80121c2:	807b      	strh	r3, [r7, #2]
    {
        if (unicode == 0)
 80121c4:	887b      	ldrh	r3, [r7, #2]
 80121c6:	2b00      	cmp	r3, #0
 80121c8:	d101      	bne.n	80121ce <_ZNK8touchgfx4Font8getGlyphEt+0x16>
        {
            return 0;
 80121ca:	2300      	movs	r3, #0
 80121cc:	e010      	b.n	80121f0 <_ZNK8touchgfx4Font8getGlyphEt+0x38>
        }
        const uint8_t* dummyPixelDataPointer = 0;
 80121ce:	2300      	movs	r3, #0
 80121d0:	613b      	str	r3, [r7, #16]
        uint8_t bitsPerPixelDummy = 0;
 80121d2:	2300      	movs	r3, #0
 80121d4:	73fb      	strb	r3, [r7, #15]
        const GlyphNode* glyph = getGlyph(unicode, dummyPixelDataPointer, bitsPerPixelDummy);
 80121d6:	687b      	ldr	r3, [r7, #4]
 80121d8:	681b      	ldr	r3, [r3, #0]
 80121da:	3308      	adds	r3, #8
 80121dc:	681c      	ldr	r4, [r3, #0]
 80121de:	f107 030f 	add.w	r3, r7, #15
 80121e2:	f107 0210 	add.w	r2, r7, #16
 80121e6:	8879      	ldrh	r1, [r7, #2]
 80121e8:	6878      	ldr	r0, [r7, #4]
 80121ea:	47a0      	blx	r4
 80121ec:	6178      	str	r0, [r7, #20]
        return glyph;
 80121ee:	697b      	ldr	r3, [r7, #20]
    }
 80121f0:	4618      	mov	r0, r3
 80121f2:	371c      	adds	r7, #28
 80121f4:	46bd      	mov	sp, r7
 80121f6:	bd90      	pop	{r4, r7, pc}

080121f8 <_ZNK8touchgfx4Font15getFallbackCharEv>:
     * used when no glyph is available for some character. If 0 (zero) is returned, there is
     * no default character.
     *
     * @return The default character for the typography in case no glyph is available.
     */
    virtual Unicode::UnicodeChar getFallbackChar() const
 80121f8:	b480      	push	{r7}
 80121fa:	b083      	sub	sp, #12
 80121fc:	af00      	add	r7, sp, #0
 80121fe:	6078      	str	r0, [r7, #4]
    {
        return fallbackCharacter;
 8012200:	687b      	ldr	r3, [r7, #4]
 8012202:	895b      	ldrh	r3, [r3, #10]
    }
 8012204:	4618      	mov	r0, r3
 8012206:	370c      	adds	r7, #12
 8012208:	46bd      	mov	sp, r7
 801220a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801220e:	4770      	bx	lr

08012210 <_ZNK8touchgfx4Font15getEllipsisCharEv>:
     *
     * @return The ellipsis character for the typography.
     *
     * @see TextArea::setWideTextAction
     */
    virtual Unicode::UnicodeChar getEllipsisChar() const
 8012210:	b480      	push	{r7}
 8012212:	b083      	sub	sp, #12
 8012214:	af00      	add	r7, sp, #0
 8012216:	6078      	str	r0, [r7, #4]
    {
        return ellipsisCharacter;
 8012218:	687b      	ldr	r3, [r7, #4]
 801221a:	899b      	ldrh	r3, [r3, #12]
    }
 801221c:	4618      	mov	r0, r3
 801221e:	370c      	adds	r7, #12
 8012220:	46bd      	mov	sp, r7
 8012222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012226:	4770      	bx	lr

08012228 <_ZNK8touchgfx4Font13getFontHeightEv>:
     * @return The height in pixels of this font.
     *
     * @note It is not sufficient to allocate text areas with this height. Use
     *       getMinimumTextHeight for this.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getFontHeight() const
 8012228:	b480      	push	{r7}
 801222a:	b083      	sub	sp, #12
 801222c:	af00      	add	r7, sp, #0
 801222e:	6078      	str	r0, [r7, #4]
    {
        return fontHeight;
 8012230:	687b      	ldr	r3, [r7, #4]
 8012232:	889b      	ldrh	r3, [r3, #4]
    }
 8012234:	4618      	mov	r0, r3
 8012236:	370c      	adds	r7, #12
 8012238:	46bd      	mov	sp, r7
 801223a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801223e:	4770      	bx	lr

08012240 <_ZNK8touchgfx4Font20getMinimumTextHeightEv>:
     * account that certain characters (eg 'g') have pixels below the baseline, thus making
     * the text height larger than the font height.
     *
     * @return The minimum height needed for a text field that uses this font.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getMinimumTextHeight() const
 8012240:	b480      	push	{r7}
 8012242:	b083      	sub	sp, #12
 8012244:	af00      	add	r7, sp, #0
 8012246:	6078      	str	r0, [r7, #4]
    {
        return fontHeight + pixelsBelowBaseline;
 8012248:	687b      	ldr	r3, [r7, #4]
 801224a:	889a      	ldrh	r2, [r3, #4]
 801224c:	687b      	ldr	r3, [r7, #4]
 801224e:	799b      	ldrb	r3, [r3, #6]
 8012250:	b29b      	uxth	r3, r3
 8012252:	4413      	add	r3, r2
 8012254:	b29b      	uxth	r3, r3
    }
 8012256:	4618      	mov	r0, r3
 8012258:	370c      	adds	r7, #12
 801225a:	46bd      	mov	sp, r7
 801225c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012260:	4770      	bx	lr

08012262 <_ZNK8touchgfx4Font15getBitsPerPixelEv>:
    /**
     * Gets bits per pixel for this font.
     *
     * @return The number of bits used per pixel in this font.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getBitsPerPixel() const
 8012262:	b480      	push	{r7}
 8012264:	b083      	sub	sp, #12
 8012266:	af00      	add	r7, sp, #0
 8012268:	6078      	str	r0, [r7, #4]
    {
        return bPerPixel;
 801226a:	687b      	ldr	r3, [r7, #4]
 801226c:	79db      	ldrb	r3, [r3, #7]
 801226e:	f3c3 0306 	ubfx	r3, r3, #0, #7
 8012272:	b2db      	uxtb	r3, r3
    }
 8012274:	4618      	mov	r0, r3
 8012276:	370c      	adds	r7, #12
 8012278:	46bd      	mov	sp, r7
 801227a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801227e:	4770      	bx	lr

08012280 <_ZNK8touchgfx4Font15getByteAlignRowEv>:
    /**
     * Are the glyphs saved with each glyph row byte aligned?
     *
     * @return True if each glyph row is stored byte aligned, false otherwise.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getByteAlignRow() const
 8012280:	b480      	push	{r7}
 8012282:	b083      	sub	sp, #12
 8012284:	af00      	add	r7, sp, #0
 8012286:	6078      	str	r0, [r7, #4]
    {
        return bAlignRow;
 8012288:	687b      	ldr	r3, [r7, #4]
 801228a:	79db      	ldrb	r3, [r3, #7]
 801228c:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8012290:	b2db      	uxtb	r3, r3
    }
 8012292:	4618      	mov	r0, r3
 8012294:	370c      	adds	r7, #12
 8012296:	46bd      	mov	sp, r7
 8012298:	f85d 7b04 	ldr.w	r7, [sp], #4
 801229c:	4770      	bx	lr
	...

080122a0 <_ZN8touchgfx9ConstFontD1Ev>:
 *
 * @see Font
 *
 * @note Pure virtual class. Create an application-specific implementation of getPixelData().
 */
class ConstFont : public Font
 80122a0:	b580      	push	{r7, lr}
 80122a2:	b082      	sub	sp, #8
 80122a4:	af00      	add	r7, sp, #0
 80122a6:	6078      	str	r0, [r7, #4]
 80122a8:	4a05      	ldr	r2, [pc, #20]	; (80122c0 <_ZN8touchgfx9ConstFontD1Ev+0x20>)
 80122aa:	687b      	ldr	r3, [r7, #4]
 80122ac:	601a      	str	r2, [r3, #0]
 80122ae:	687b      	ldr	r3, [r7, #4]
 80122b0:	4618      	mov	r0, r3
 80122b2:	f7ff ff61 	bl	8012178 <_ZN8touchgfx4FontD1Ev>
 80122b6:	687b      	ldr	r3, [r7, #4]
 80122b8:	4618      	mov	r0, r3
 80122ba:	3708      	adds	r7, #8
 80122bc:	46bd      	mov	sp, r7
 80122be:	bd80      	pop	{r7, pc}
 80122c0:	0801fa40 	.word	0x0801fa40

080122c4 <_ZN8touchgfx9ConstFontD0Ev>:
 80122c4:	b580      	push	{r7, lr}
 80122c6:	b082      	sub	sp, #8
 80122c8:	af00      	add	r7, sp, #0
 80122ca:	6078      	str	r0, [r7, #4]
 80122cc:	6878      	ldr	r0, [r7, #4]
 80122ce:	f7ff ffe7 	bl	80122a0 <_ZN8touchgfx9ConstFontD1Ev>
 80122d2:	2118      	movs	r1, #24
 80122d4:	6878      	ldr	r0, [r7, #4]
 80122d6:	f009 f97b 	bl	801b5d0 <_ZdlPvj>
 80122da:	687b      	ldr	r3, [r7, #4]
 80122dc:	4618      	mov	r0, r3
 80122de:	3708      	adds	r7, #8
 80122e0:	46bd      	mov	sp, r7
 80122e2:	bd80      	pop	{r7, pc}

080122e4 <_ZN8touchgfx13GeneratedFontD1Ev>:
 * An GeneratedFont has both glyph table and glyph data placed in a flash which
 * supports random access read (i.e. not a NAND flash)
 *
 * @see ConstFont
 */
class GeneratedFont : public ConstFont
 80122e4:	b580      	push	{r7, lr}
 80122e6:	b082      	sub	sp, #8
 80122e8:	af00      	add	r7, sp, #0
 80122ea:	6078      	str	r0, [r7, #4]
 80122ec:	4a05      	ldr	r2, [pc, #20]	; (8012304 <_ZN8touchgfx13GeneratedFontD1Ev+0x20>)
 80122ee:	687b      	ldr	r3, [r7, #4]
 80122f0:	601a      	str	r2, [r3, #0]
 80122f2:	687b      	ldr	r3, [r7, #4]
 80122f4:	4618      	mov	r0, r3
 80122f6:	f7ff ffd3 	bl	80122a0 <_ZN8touchgfx9ConstFontD1Ev>
 80122fa:	687b      	ldr	r3, [r7, #4]
 80122fc:	4618      	mov	r0, r3
 80122fe:	3708      	adds	r7, #8
 8012300:	46bd      	mov	sp, r7
 8012302:	bd80      	pop	{r7, pc}
 8012304:	0801ede0 	.word	0x0801ede0

08012308 <_ZN8touchgfx13GeneratedFontD0Ev>:
 8012308:	b580      	push	{r7, lr}
 801230a:	b082      	sub	sp, #8
 801230c:	af00      	add	r7, sp, #0
 801230e:	6078      	str	r0, [r7, #4]
 8012310:	6878      	ldr	r0, [r7, #4]
 8012312:	f7ff ffe7 	bl	80122e4 <_ZN8touchgfx13GeneratedFontD1Ev>
 8012316:	2128      	movs	r1, #40	; 0x28
 8012318:	6878      	ldr	r0, [r7, #4]
 801231a:	f009 f959 	bl	801b5d0 <_ZdlPvj>
 801231e:	687b      	ldr	r3, [r7, #4]
 8012320:	4618      	mov	r0, r3
 8012322:	3708      	adds	r7, #8
 8012324:	46bd      	mov	sp, r7
 8012326:	bd80      	pop	{r7, pc}

08012328 <_ZN8touchgfx9TypedTextD1Ev>:
        : typedTextId(id)
    {
    }

    /** Finalizes an instance of the TypedText class. */
    virtual ~TypedText()
 8012328:	b480      	push	{r7}
 801232a:	b083      	sub	sp, #12
 801232c:	af00      	add	r7, sp, #0
 801232e:	6078      	str	r0, [r7, #4]
    {
 8012330:	4a04      	ldr	r2, [pc, #16]	; (8012344 <_ZN8touchgfx9TypedTextD1Ev+0x1c>)
 8012332:	687b      	ldr	r3, [r7, #4]
 8012334:	601a      	str	r2, [r3, #0]
    }
 8012336:	687b      	ldr	r3, [r7, #4]
 8012338:	4618      	mov	r0, r3
 801233a:	370c      	adds	r7, #12
 801233c:	46bd      	mov	sp, r7
 801233e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012342:	4770      	bx	lr
 8012344:	0801edd0 	.word	0x0801edd0

08012348 <_ZN8touchgfx9TypedTextD0Ev>:
    virtual ~TypedText()
 8012348:	b580      	push	{r7, lr}
 801234a:	b082      	sub	sp, #8
 801234c:	af00      	add	r7, sp, #0
 801234e:	6078      	str	r0, [r7, #4]
    }
 8012350:	6878      	ldr	r0, [r7, #4]
 8012352:	f7ff ffe9 	bl	8012328 <_ZN8touchgfx9TypedTextD1Ev>
 8012356:	2108      	movs	r1, #8
 8012358:	6878      	ldr	r0, [r7, #4]
 801235a:	f009 f939 	bl	801b5d0 <_ZdlPvj>
 801235e:	687b      	ldr	r3, [r7, #4]
 8012360:	4618      	mov	r0, r3
 8012362:	3708      	adds	r7, #8
 8012364:	46bd      	mov	sp, r7
 8012366:	bd80      	pop	{r7, pc}

08012368 <_ZNK8touchgfx13GeneratedFont12getGSUBTableEv>:
    /**
     * Gets GSUB table.
     *
     * @return The GSUB table or null if font has GSUB no table
     */
    virtual const uint16_t* getGSUBTable() const
 8012368:	b480      	push	{r7}
 801236a:	b083      	sub	sp, #12
 801236c:	af00      	add	r7, sp, #0
 801236e:	6078      	str	r0, [r7, #4]
    {
        return gsubTable;
 8012370:	687b      	ldr	r3, [r7, #4]
 8012372:	6a1b      	ldr	r3, [r3, #32]
    }
 8012374:	4618      	mov	r0, r3
 8012376:	370c      	adds	r7, #12
 8012378:	46bd      	mov	sp, r7
 801237a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801237e:	4770      	bx	lr

08012380 <_ZNK8touchgfx13GeneratedFont23getContextualFormsTableEv>:
    /**
     * Gets the contextual forms table used in arabic fonts.
     *
     * @return The FontContextualFormsTable or null if the font has no table.
     */
    virtual const FontContextualFormsTable* getContextualFormsTable() const
 8012380:	b480      	push	{r7}
 8012382:	b083      	sub	sp, #12
 8012384:	af00      	add	r7, sp, #0
 8012386:	6078      	str	r0, [r7, #4]
    {
        return arabicTable;
 8012388:	687b      	ldr	r3, [r7, #4]
 801238a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    }
 801238c:	4618      	mov	r0, r3
 801238e:	370c      	adds	r7, #12
 8012390:	46bd      	mov	sp, r7
 8012392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012396:	4770      	bx	lr

08012398 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>:

#include <fonts/GeneratedFont.hpp>

namespace touchgfx
{
GeneratedFont::GeneratedFont(const GlyphNode* list, uint16_t size, uint16_t height, uint8_t pixBelowBase, uint8_t bitsPerPixel, uint8_t byteAlignRow, uint8_t maxLeft, uint8_t maxRight, const uint8_t* const* glyphDataInternalFlash, const KerningNode* kerningList, const Unicode::UnicodeChar fallbackChar, const Unicode::UnicodeChar ellipsisChar, const uint16_t* const gsubData, const FontContextualFormsTable* formsTable)
 8012398:	b580      	push	{r7, lr}
 801239a:	b08c      	sub	sp, #48	; 0x30
 801239c:	af08      	add	r7, sp, #32
 801239e:	60f8      	str	r0, [r7, #12]
 80123a0:	60b9      	str	r1, [r7, #8]
 80123a2:	4611      	mov	r1, r2
 80123a4:	461a      	mov	r2, r3
 80123a6:	460b      	mov	r3, r1
 80123a8:	80fb      	strh	r3, [r7, #6]
 80123aa:	4613      	mov	r3, r2
 80123ac:	80bb      	strh	r3, [r7, #4]
    : ConstFont(list, size, height, pixBelowBase, bitsPerPixel, byteAlignRow, maxLeft, maxRight, fallbackChar, ellipsisChar),
      glyphData(glyphDataInternalFlash),
      kerningData(kerningList),
      gsubTable(gsubData),
      arabicTable(formsTable)
 80123ae:	68f8      	ldr	r0, [r7, #12]
 80123b0:	88b9      	ldrh	r1, [r7, #4]
 80123b2:	88fa      	ldrh	r2, [r7, #6]
 80123b4:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80123b6:	9306      	str	r3, [sp, #24]
 80123b8:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80123ba:	9305      	str	r3, [sp, #20]
 80123bc:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80123c0:	9304      	str	r3, [sp, #16]
 80123c2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80123c6:	9303      	str	r3, [sp, #12]
 80123c8:	f897 3020 	ldrb.w	r3, [r7, #32]
 80123cc:	9302      	str	r3, [sp, #8]
 80123ce:	7f3b      	ldrb	r3, [r7, #28]
 80123d0:	9301      	str	r3, [sp, #4]
 80123d2:	7e3b      	ldrb	r3, [r7, #24]
 80123d4:	9300      	str	r3, [sp, #0]
 80123d6:	460b      	mov	r3, r1
 80123d8:	68b9      	ldr	r1, [r7, #8]
 80123da:	f005 fea5 	bl	8018128 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt>
 80123de:	4a0a      	ldr	r2, [pc, #40]	; (8012408 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE+0x70>)
 80123e0:	68fb      	ldr	r3, [r7, #12]
 80123e2:	601a      	str	r2, [r3, #0]
 80123e4:	68fb      	ldr	r3, [r7, #12]
 80123e6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80123e8:	619a      	str	r2, [r3, #24]
 80123ea:	68fb      	ldr	r3, [r7, #12]
 80123ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80123ee:	61da      	str	r2, [r3, #28]
 80123f0:	68fb      	ldr	r3, [r7, #12]
 80123f2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80123f4:	621a      	str	r2, [r3, #32]
 80123f6:	68fb      	ldr	r3, [r7, #12]
 80123f8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80123fa:	625a      	str	r2, [r3, #36]	; 0x24
{
}
 80123fc:	68fb      	ldr	r3, [r7, #12]
 80123fe:	4618      	mov	r0, r3
 8012400:	3710      	adds	r7, #16
 8012402:	46bd      	mov	sp, r7
 8012404:	bd80      	pop	{r7, pc}
 8012406:	bf00      	nop
 8012408:	0801ede0 	.word	0x0801ede0

0801240c <_ZNK8touchgfx13GeneratedFont12getPixelDataEPKNS_9GlyphNodeE>:

const uint8_t* GeneratedFont::getPixelData(const GlyphNode* glyph) const
{
 801240c:	b480      	push	{r7}
 801240e:	b085      	sub	sp, #20
 8012410:	af00      	add	r7, sp, #0
 8012412:	6078      	str	r0, [r7, #4]
 8012414:	6039      	str	r1, [r7, #0]
    const uint8_t* const* table = (const uint8_t* const*)glyphData;
 8012416:	687b      	ldr	r3, [r7, #4]
 8012418:	699b      	ldr	r3, [r3, #24]
 801241a:	60fb      	str	r3, [r7, #12]
    return &(table[glyph->unicode / 2048][glyph->dataOffset]);
 801241c:	683b      	ldr	r3, [r7, #0]
 801241e:	889b      	ldrh	r3, [r3, #4]
 8012420:	0adb      	lsrs	r3, r3, #11
 8012422:	b29b      	uxth	r3, r3
 8012424:	009b      	lsls	r3, r3, #2
 8012426:	68fa      	ldr	r2, [r7, #12]
 8012428:	4413      	add	r3, r2
 801242a:	681a      	ldr	r2, [r3, #0]
 801242c:	683b      	ldr	r3, [r7, #0]
 801242e:	681b      	ldr	r3, [r3, #0]
 8012430:	4413      	add	r3, r2
}
 8012432:	4618      	mov	r0, r3
 8012434:	3714      	adds	r7, #20
 8012436:	46bd      	mov	sp, r7
 8012438:	f85d 7b04 	ldr.w	r7, [sp], #4
 801243c:	4770      	bx	lr

0801243e <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE>:

int8_t GeneratedFont::getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
{
 801243e:	b480      	push	{r7}
 8012440:	b089      	sub	sp, #36	; 0x24
 8012442:	af00      	add	r7, sp, #0
 8012444:	60f8      	str	r0, [r7, #12]
 8012446:	460b      	mov	r3, r1
 8012448:	607a      	str	r2, [r7, #4]
 801244a:	817b      	strh	r3, [r7, #10]
    if (!glyph || glyph->kerningTableSize == 0)
 801244c:	687b      	ldr	r3, [r7, #4]
 801244e:	2b00      	cmp	r3, #0
 8012450:	d003      	beq.n	801245a <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x1c>
 8012452:	687b      	ldr	r3, [r7, #4]
 8012454:	7b1b      	ldrb	r3, [r3, #12]
 8012456:	2b00      	cmp	r3, #0
 8012458:	d101      	bne.n	801245e <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x20>
    {
        return 0;
 801245a:	2300      	movs	r3, #0
 801245c:	e030      	b.n	80124c0 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x82>
    }

    const KerningNode* kerndata = kerningData + glyph->kerningTablePos();
 801245e:	68fb      	ldr	r3, [r7, #12]
 8012460:	69da      	ldr	r2, [r3, #28]
 8012462:	687b      	ldr	r3, [r7, #4]
 8012464:	617b      	str	r3, [r7, #20]
        return ((flags & GLYPH_DATA_KERNINGTABLEPOS_BIT8_10) << 8) | _kerningTablePos;
 8012466:	697b      	ldr	r3, [r7, #20]
 8012468:	7b5b      	ldrb	r3, [r3, #13]
 801246a:	021b      	lsls	r3, r3, #8
 801246c:	b21b      	sxth	r3, r3
 801246e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8012472:	b219      	sxth	r1, r3
 8012474:	697b      	ldr	r3, [r7, #20]
 8012476:	7adb      	ldrb	r3, [r3, #11]
 8012478:	b21b      	sxth	r3, r3
 801247a:	430b      	orrs	r3, r1
 801247c:	b21b      	sxth	r3, r3
 801247e:	b29b      	uxth	r3, r3
 8012480:	009b      	lsls	r3, r3, #2
 8012482:	4413      	add	r3, r2
 8012484:	61fb      	str	r3, [r7, #28]
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 8012486:	687b      	ldr	r3, [r7, #4]
 8012488:	7b1b      	ldrb	r3, [r3, #12]
 801248a:	837b      	strh	r3, [r7, #26]
 801248c:	8b7b      	ldrh	r3, [r7, #26]
 801248e:	2b00      	cmp	r3, #0
 8012490:	d015      	beq.n	80124be <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x80>
    {
        if (prevChar == kerndata->unicodePrevChar)
 8012492:	69fb      	ldr	r3, [r7, #28]
 8012494:	881b      	ldrh	r3, [r3, #0]
 8012496:	897a      	ldrh	r2, [r7, #10]
 8012498:	429a      	cmp	r2, r3
 801249a:	d103      	bne.n	80124a4 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x66>
        {
            return kerndata->distance;
 801249c:	69fb      	ldr	r3, [r7, #28]
 801249e:	f993 3002 	ldrsb.w	r3, [r3, #2]
 80124a2:	e00d      	b.n	80124c0 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x82>
        }
        if (prevChar < kerndata->unicodePrevChar)
 80124a4:	69fb      	ldr	r3, [r7, #28]
 80124a6:	881b      	ldrh	r3, [r3, #0]
 80124a8:	897a      	ldrh	r2, [r7, #10]
 80124aa:	429a      	cmp	r2, r3
 80124ac:	d306      	bcc.n	80124bc <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x7e>
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 80124ae:	8b7b      	ldrh	r3, [r7, #26]
 80124b0:	3b01      	subs	r3, #1
 80124b2:	837b      	strh	r3, [r7, #26]
 80124b4:	69fb      	ldr	r3, [r7, #28]
 80124b6:	3304      	adds	r3, #4
 80124b8:	61fb      	str	r3, [r7, #28]
 80124ba:	e7e7      	b.n	801248c <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x4e>
        {
            break;
 80124bc:	bf00      	nop
        }
    }
    return 0;
 80124be:	2300      	movs	r3, #0
}
 80124c0:	4618      	mov	r0, r3
 80124c2:	3724      	adds	r7, #36	; 0x24
 80124c4:	46bd      	mov	sp, r7
 80124c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124ca:	4770      	bx	lr

080124cc <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_AGENCYB_TTF_12_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_AGENCYB_TTF_12_4bpp();

touchgfx::GeneratedFont& getFont_AGENCYB_TTF_12_4bpp()
{
    static touchgfx::GeneratedFont AGENCYB_TTF_12_4bpp(glyphs_AGENCYB_TTF_12_4bpp, 65, 12, 2, 4, 1, 1, 1, unicodes_AGENCYB_TTF_12_4bpp, kerning_AGENCYB_TTF_12_4bpp, 63, 0, 0, 0);
 80124cc:	b580      	push	{r7, lr}
 80124ce:	af00      	add	r7, sp, #0
 80124d0:	4801      	ldr	r0, [pc, #4]	; (80124d8 <__tcf_0+0xc>)
 80124d2:	f7ff ff07 	bl	80122e4 <_ZN8touchgfx13GeneratedFontD1Ev>
 80124d6:	bd80      	pop	{r7, pc}
 80124d8:	200053d4 	.word	0x200053d4

080124dc <_Z27getFont_AGENCYB_TTF_12_4bppv>:
{
 80124dc:	b580      	push	{r7, lr}
 80124de:	b08c      	sub	sp, #48	; 0x30
 80124e0:	af0c      	add	r7, sp, #48	; 0x30
    static touchgfx::GeneratedFont AGENCYB_TTF_12_4bpp(glyphs_AGENCYB_TTF_12_4bpp, 65, 12, 2, 4, 1, 1, 1, unicodes_AGENCYB_TTF_12_4bpp, kerning_AGENCYB_TTF_12_4bpp, 63, 0, 0, 0);
 80124e2:	4b1f      	ldr	r3, [pc, #124]	; (8012560 <_Z27getFont_AGENCYB_TTF_12_4bppv+0x84>)
 80124e4:	781b      	ldrb	r3, [r3, #0]
 80124e6:	f3bf 8f5b 	dmb	ish
 80124ea:	b2db      	uxtb	r3, r3
 80124ec:	f003 0301 	and.w	r3, r3, #1
 80124f0:	2b00      	cmp	r3, #0
 80124f2:	bf0c      	ite	eq
 80124f4:	2301      	moveq	r3, #1
 80124f6:	2300      	movne	r3, #0
 80124f8:	b2db      	uxtb	r3, r3
 80124fa:	2b00      	cmp	r3, #0
 80124fc:	d02c      	beq.n	8012558 <_Z27getFont_AGENCYB_TTF_12_4bppv+0x7c>
 80124fe:	4818      	ldr	r0, [pc, #96]	; (8012560 <_Z27getFont_AGENCYB_TTF_12_4bppv+0x84>)
 8012500:	f009 f868 	bl	801b5d4 <__cxa_guard_acquire>
 8012504:	4603      	mov	r3, r0
 8012506:	2b00      	cmp	r3, #0
 8012508:	bf14      	ite	ne
 801250a:	2301      	movne	r3, #1
 801250c:	2300      	moveq	r3, #0
 801250e:	b2db      	uxtb	r3, r3
 8012510:	2b00      	cmp	r3, #0
 8012512:	d021      	beq.n	8012558 <_Z27getFont_AGENCYB_TTF_12_4bppv+0x7c>
 8012514:	2300      	movs	r3, #0
 8012516:	930a      	str	r3, [sp, #40]	; 0x28
 8012518:	2300      	movs	r3, #0
 801251a:	9309      	str	r3, [sp, #36]	; 0x24
 801251c:	2300      	movs	r3, #0
 801251e:	9308      	str	r3, [sp, #32]
 8012520:	233f      	movs	r3, #63	; 0x3f
 8012522:	9307      	str	r3, [sp, #28]
 8012524:	4b0f      	ldr	r3, [pc, #60]	; (8012564 <_Z27getFont_AGENCYB_TTF_12_4bppv+0x88>)
 8012526:	9306      	str	r3, [sp, #24]
 8012528:	4b0f      	ldr	r3, [pc, #60]	; (8012568 <_Z27getFont_AGENCYB_TTF_12_4bppv+0x8c>)
 801252a:	9305      	str	r3, [sp, #20]
 801252c:	2301      	movs	r3, #1
 801252e:	9304      	str	r3, [sp, #16]
 8012530:	2301      	movs	r3, #1
 8012532:	9303      	str	r3, [sp, #12]
 8012534:	2301      	movs	r3, #1
 8012536:	9302      	str	r3, [sp, #8]
 8012538:	2304      	movs	r3, #4
 801253a:	9301      	str	r3, [sp, #4]
 801253c:	2302      	movs	r3, #2
 801253e:	9300      	str	r3, [sp, #0]
 8012540:	230c      	movs	r3, #12
 8012542:	2241      	movs	r2, #65	; 0x41
 8012544:	4909      	ldr	r1, [pc, #36]	; (801256c <_Z27getFont_AGENCYB_TTF_12_4bppv+0x90>)
 8012546:	480a      	ldr	r0, [pc, #40]	; (8012570 <_Z27getFont_AGENCYB_TTF_12_4bppv+0x94>)
 8012548:	f7ff ff26 	bl	8012398 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 801254c:	4809      	ldr	r0, [pc, #36]	; (8012574 <_Z27getFont_AGENCYB_TTF_12_4bppv+0x98>)
 801254e:	f009 f88b 	bl	801b668 <atexit>
 8012552:	4803      	ldr	r0, [pc, #12]	; (8012560 <_Z27getFont_AGENCYB_TTF_12_4bppv+0x84>)
 8012554:	f009 f84a 	bl	801b5ec <__cxa_guard_release>
    return AGENCYB_TTF_12_4bpp;
 8012558:	4b05      	ldr	r3, [pc, #20]	; (8012570 <_Z27getFont_AGENCYB_TTF_12_4bppv+0x94>)
}
 801255a:	4618      	mov	r0, r3
 801255c:	46bd      	mov	sp, r7
 801255e:	bd80      	pop	{r7, pc}
 8012560:	200053fc 	.word	0x200053fc
 8012564:	08037cec 	.word	0x08037cec
 8012568:	08037fe0 	.word	0x08037fe0
 801256c:	080351f0 	.word	0x080351f0
 8012570:	200053d4 	.word	0x200053d4
 8012574:	080124cd 	.word	0x080124cd

08012578 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_AGENCYB_TTF_14_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_AGENCYB_TTF_14_4bpp();

touchgfx::GeneratedFont& getFont_AGENCYB_TTF_14_4bpp()
{
    static touchgfx::GeneratedFont AGENCYB_TTF_14_4bpp(glyphs_AGENCYB_TTF_14_4bpp, 113, 14, 4, 4, 1, 1, 1, unicodes_AGENCYB_TTF_14_4bpp, kerning_AGENCYB_TTF_14_4bpp, 63, 0, 0, 0);
 8012578:	b580      	push	{r7, lr}
 801257a:	af00      	add	r7, sp, #0
 801257c:	4801      	ldr	r0, [pc, #4]	; (8012584 <__tcf_0+0xc>)
 801257e:	f7ff feb1 	bl	80122e4 <_ZN8touchgfx13GeneratedFontD1Ev>
 8012582:	bd80      	pop	{r7, pc}
 8012584:	20005400 	.word	0x20005400

08012588 <_Z27getFont_AGENCYB_TTF_14_4bppv>:
{
 8012588:	b580      	push	{r7, lr}
 801258a:	b08c      	sub	sp, #48	; 0x30
 801258c:	af0c      	add	r7, sp, #48	; 0x30
    static touchgfx::GeneratedFont AGENCYB_TTF_14_4bpp(glyphs_AGENCYB_TTF_14_4bpp, 113, 14, 4, 4, 1, 1, 1, unicodes_AGENCYB_TTF_14_4bpp, kerning_AGENCYB_TTF_14_4bpp, 63, 0, 0, 0);
 801258e:	4b1f      	ldr	r3, [pc, #124]	; (801260c <_Z27getFont_AGENCYB_TTF_14_4bppv+0x84>)
 8012590:	781b      	ldrb	r3, [r3, #0]
 8012592:	f3bf 8f5b 	dmb	ish
 8012596:	b2db      	uxtb	r3, r3
 8012598:	f003 0301 	and.w	r3, r3, #1
 801259c:	2b00      	cmp	r3, #0
 801259e:	bf0c      	ite	eq
 80125a0:	2301      	moveq	r3, #1
 80125a2:	2300      	movne	r3, #0
 80125a4:	b2db      	uxtb	r3, r3
 80125a6:	2b00      	cmp	r3, #0
 80125a8:	d02c      	beq.n	8012604 <_Z27getFont_AGENCYB_TTF_14_4bppv+0x7c>
 80125aa:	4818      	ldr	r0, [pc, #96]	; (801260c <_Z27getFont_AGENCYB_TTF_14_4bppv+0x84>)
 80125ac:	f009 f812 	bl	801b5d4 <__cxa_guard_acquire>
 80125b0:	4603      	mov	r3, r0
 80125b2:	2b00      	cmp	r3, #0
 80125b4:	bf14      	ite	ne
 80125b6:	2301      	movne	r3, #1
 80125b8:	2300      	moveq	r3, #0
 80125ba:	b2db      	uxtb	r3, r3
 80125bc:	2b00      	cmp	r3, #0
 80125be:	d021      	beq.n	8012604 <_Z27getFont_AGENCYB_TTF_14_4bppv+0x7c>
 80125c0:	2300      	movs	r3, #0
 80125c2:	930a      	str	r3, [sp, #40]	; 0x28
 80125c4:	2300      	movs	r3, #0
 80125c6:	9309      	str	r3, [sp, #36]	; 0x24
 80125c8:	2300      	movs	r3, #0
 80125ca:	9308      	str	r3, [sp, #32]
 80125cc:	233f      	movs	r3, #63	; 0x3f
 80125ce:	9307      	str	r3, [sp, #28]
 80125d0:	4b0f      	ldr	r3, [pc, #60]	; (8012610 <_Z27getFont_AGENCYB_TTF_14_4bppv+0x88>)
 80125d2:	9306      	str	r3, [sp, #24]
 80125d4:	4b0f      	ldr	r3, [pc, #60]	; (8012614 <_Z27getFont_AGENCYB_TTF_14_4bppv+0x8c>)
 80125d6:	9305      	str	r3, [sp, #20]
 80125d8:	2301      	movs	r3, #1
 80125da:	9304      	str	r3, [sp, #16]
 80125dc:	2301      	movs	r3, #1
 80125de:	9303      	str	r3, [sp, #12]
 80125e0:	2301      	movs	r3, #1
 80125e2:	9302      	str	r3, [sp, #8]
 80125e4:	2304      	movs	r3, #4
 80125e6:	9301      	str	r3, [sp, #4]
 80125e8:	2304      	movs	r3, #4
 80125ea:	9300      	str	r3, [sp, #0]
 80125ec:	230e      	movs	r3, #14
 80125ee:	2271      	movs	r2, #113	; 0x71
 80125f0:	4909      	ldr	r1, [pc, #36]	; (8012618 <_Z27getFont_AGENCYB_TTF_14_4bppv+0x90>)
 80125f2:	480a      	ldr	r0, [pc, #40]	; (801261c <_Z27getFont_AGENCYB_TTF_14_4bppv+0x94>)
 80125f4:	f7ff fed0 	bl	8012398 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 80125f8:	4809      	ldr	r0, [pc, #36]	; (8012620 <_Z27getFont_AGENCYB_TTF_14_4bppv+0x98>)
 80125fa:	f009 f835 	bl	801b668 <atexit>
 80125fe:	4803      	ldr	r0, [pc, #12]	; (801260c <_Z27getFont_AGENCYB_TTF_14_4bppv+0x84>)
 8012600:	f008 fff4 	bl	801b5ec <__cxa_guard_release>
    return AGENCYB_TTF_14_4bpp;
 8012604:	4b05      	ldr	r3, [pc, #20]	; (801261c <_Z27getFont_AGENCYB_TTF_14_4bppv+0x94>)
}
 8012606:	4618      	mov	r0, r3
 8012608:	46bd      	mov	sp, r7
 801260a:	bd80      	pop	{r7, pc}
 801260c:	20005428 	.word	0x20005428
 8012610:	08037cf0 	.word	0x08037cf0
 8012614:	08037fe4 	.word	0x08037fe4
 8012618:	08035580 	.word	0x08035580
 801261c:	20005400 	.word	0x20005400
 8012620:	08012579 	.word	0x08012579

08012624 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_AGENCYB_TTF_20_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_AGENCYB_TTF_20_4bpp();

touchgfx::GeneratedFont& getFont_AGENCYB_TTF_20_4bpp()
{
    static touchgfx::GeneratedFont AGENCYB_TTF_20_4bpp(glyphs_AGENCYB_TTF_20_4bpp, 110, 20, 4, 4, 1, 1, 1, unicodes_AGENCYB_TTF_20_4bpp, kerning_AGENCYB_TTF_20_4bpp, 63, 0, 0, 0);
 8012624:	b580      	push	{r7, lr}
 8012626:	af00      	add	r7, sp, #0
 8012628:	4801      	ldr	r0, [pc, #4]	; (8012630 <__tcf_0+0xc>)
 801262a:	f7ff fe5b 	bl	80122e4 <_ZN8touchgfx13GeneratedFontD1Ev>
 801262e:	bd80      	pop	{r7, pc}
 8012630:	2000542c 	.word	0x2000542c

08012634 <_Z27getFont_AGENCYB_TTF_20_4bppv>:
{
 8012634:	b580      	push	{r7, lr}
 8012636:	b08c      	sub	sp, #48	; 0x30
 8012638:	af0c      	add	r7, sp, #48	; 0x30
    static touchgfx::GeneratedFont AGENCYB_TTF_20_4bpp(glyphs_AGENCYB_TTF_20_4bpp, 110, 20, 4, 4, 1, 1, 1, unicodes_AGENCYB_TTF_20_4bpp, kerning_AGENCYB_TTF_20_4bpp, 63, 0, 0, 0);
 801263a:	4b1f      	ldr	r3, [pc, #124]	; (80126b8 <_Z27getFont_AGENCYB_TTF_20_4bppv+0x84>)
 801263c:	781b      	ldrb	r3, [r3, #0]
 801263e:	f3bf 8f5b 	dmb	ish
 8012642:	b2db      	uxtb	r3, r3
 8012644:	f003 0301 	and.w	r3, r3, #1
 8012648:	2b00      	cmp	r3, #0
 801264a:	bf0c      	ite	eq
 801264c:	2301      	moveq	r3, #1
 801264e:	2300      	movne	r3, #0
 8012650:	b2db      	uxtb	r3, r3
 8012652:	2b00      	cmp	r3, #0
 8012654:	d02c      	beq.n	80126b0 <_Z27getFont_AGENCYB_TTF_20_4bppv+0x7c>
 8012656:	4818      	ldr	r0, [pc, #96]	; (80126b8 <_Z27getFont_AGENCYB_TTF_20_4bppv+0x84>)
 8012658:	f008 ffbc 	bl	801b5d4 <__cxa_guard_acquire>
 801265c:	4603      	mov	r3, r0
 801265e:	2b00      	cmp	r3, #0
 8012660:	bf14      	ite	ne
 8012662:	2301      	movne	r3, #1
 8012664:	2300      	moveq	r3, #0
 8012666:	b2db      	uxtb	r3, r3
 8012668:	2b00      	cmp	r3, #0
 801266a:	d021      	beq.n	80126b0 <_Z27getFont_AGENCYB_TTF_20_4bppv+0x7c>
 801266c:	2300      	movs	r3, #0
 801266e:	930a      	str	r3, [sp, #40]	; 0x28
 8012670:	2300      	movs	r3, #0
 8012672:	9309      	str	r3, [sp, #36]	; 0x24
 8012674:	2300      	movs	r3, #0
 8012676:	9308      	str	r3, [sp, #32]
 8012678:	233f      	movs	r3, #63	; 0x3f
 801267a:	9307      	str	r3, [sp, #28]
 801267c:	4b0f      	ldr	r3, [pc, #60]	; (80126bc <_Z27getFont_AGENCYB_TTF_20_4bppv+0x88>)
 801267e:	9306      	str	r3, [sp, #24]
 8012680:	4b0f      	ldr	r3, [pc, #60]	; (80126c0 <_Z27getFont_AGENCYB_TTF_20_4bppv+0x8c>)
 8012682:	9305      	str	r3, [sp, #20]
 8012684:	2301      	movs	r3, #1
 8012686:	9304      	str	r3, [sp, #16]
 8012688:	2301      	movs	r3, #1
 801268a:	9303      	str	r3, [sp, #12]
 801268c:	2301      	movs	r3, #1
 801268e:	9302      	str	r3, [sp, #8]
 8012690:	2304      	movs	r3, #4
 8012692:	9301      	str	r3, [sp, #4]
 8012694:	2304      	movs	r3, #4
 8012696:	9300      	str	r3, [sp, #0]
 8012698:	2314      	movs	r3, #20
 801269a:	226e      	movs	r2, #110	; 0x6e
 801269c:	4909      	ldr	r1, [pc, #36]	; (80126c4 <_Z27getFont_AGENCYB_TTF_20_4bppv+0x90>)
 801269e:	480a      	ldr	r0, [pc, #40]	; (80126c8 <_Z27getFont_AGENCYB_TTF_20_4bppv+0x94>)
 80126a0:	f7ff fe7a 	bl	8012398 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 80126a4:	4809      	ldr	r0, [pc, #36]	; (80126cc <_Z27getFont_AGENCYB_TTF_20_4bppv+0x98>)
 80126a6:	f008 ffdf 	bl	801b668 <atexit>
 80126aa:	4803      	ldr	r0, [pc, #12]	; (80126b8 <_Z27getFont_AGENCYB_TTF_20_4bppv+0x84>)
 80126ac:	f008 ff9e 	bl	801b5ec <__cxa_guard_release>
    return AGENCYB_TTF_20_4bpp;
 80126b0:	4b05      	ldr	r3, [pc, #20]	; (80126c8 <_Z27getFont_AGENCYB_TTF_20_4bppv+0x94>)
}
 80126b2:	4618      	mov	r0, r3
 80126b4:	46bd      	mov	sp, r7
 80126b6:	bd80      	pop	{r7, pc}
 80126b8:	20005454 	.word	0x20005454
 80126bc:	08037cf4 	.word	0x08037cf4
 80126c0:	08037ff8 	.word	0x08037ff8
 80126c4:	08035bb0 	.word	0x08035bb0
 80126c8:	2000542c 	.word	0x2000542c
 80126cc:	08012625 	.word	0x08012625

080126d0 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_AGENCYB_TTF_24_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_AGENCYB_TTF_24_4bpp();

touchgfx::GeneratedFont& getFont_AGENCYB_TTF_24_4bpp()
{
    static touchgfx::GeneratedFont AGENCYB_TTF_24_4bpp(glyphs_AGENCYB_TTF_24_4bpp, 63, 24, 4, 4, 1, 1, 1, unicodes_AGENCYB_TTF_24_4bpp, kerning_AGENCYB_TTF_24_4bpp, 63, 0, 0, 0);
 80126d0:	b580      	push	{r7, lr}
 80126d2:	af00      	add	r7, sp, #0
 80126d4:	4801      	ldr	r0, [pc, #4]	; (80126dc <__tcf_0+0xc>)
 80126d6:	f7ff fe05 	bl	80122e4 <_ZN8touchgfx13GeneratedFontD1Ev>
 80126da:	bd80      	pop	{r7, pc}
 80126dc:	20005458 	.word	0x20005458

080126e0 <_Z27getFont_AGENCYB_TTF_24_4bppv>:
{
 80126e0:	b580      	push	{r7, lr}
 80126e2:	b08c      	sub	sp, #48	; 0x30
 80126e4:	af0c      	add	r7, sp, #48	; 0x30
    static touchgfx::GeneratedFont AGENCYB_TTF_24_4bpp(glyphs_AGENCYB_TTF_24_4bpp, 63, 24, 4, 4, 1, 1, 1, unicodes_AGENCYB_TTF_24_4bpp, kerning_AGENCYB_TTF_24_4bpp, 63, 0, 0, 0);
 80126e6:	4b1f      	ldr	r3, [pc, #124]	; (8012764 <_Z27getFont_AGENCYB_TTF_24_4bppv+0x84>)
 80126e8:	781b      	ldrb	r3, [r3, #0]
 80126ea:	f3bf 8f5b 	dmb	ish
 80126ee:	b2db      	uxtb	r3, r3
 80126f0:	f003 0301 	and.w	r3, r3, #1
 80126f4:	2b00      	cmp	r3, #0
 80126f6:	bf0c      	ite	eq
 80126f8:	2301      	moveq	r3, #1
 80126fa:	2300      	movne	r3, #0
 80126fc:	b2db      	uxtb	r3, r3
 80126fe:	2b00      	cmp	r3, #0
 8012700:	d02c      	beq.n	801275c <_Z27getFont_AGENCYB_TTF_24_4bppv+0x7c>
 8012702:	4818      	ldr	r0, [pc, #96]	; (8012764 <_Z27getFont_AGENCYB_TTF_24_4bppv+0x84>)
 8012704:	f008 ff66 	bl	801b5d4 <__cxa_guard_acquire>
 8012708:	4603      	mov	r3, r0
 801270a:	2b00      	cmp	r3, #0
 801270c:	bf14      	ite	ne
 801270e:	2301      	movne	r3, #1
 8012710:	2300      	moveq	r3, #0
 8012712:	b2db      	uxtb	r3, r3
 8012714:	2b00      	cmp	r3, #0
 8012716:	d021      	beq.n	801275c <_Z27getFont_AGENCYB_TTF_24_4bppv+0x7c>
 8012718:	2300      	movs	r3, #0
 801271a:	930a      	str	r3, [sp, #40]	; 0x28
 801271c:	2300      	movs	r3, #0
 801271e:	9309      	str	r3, [sp, #36]	; 0x24
 8012720:	2300      	movs	r3, #0
 8012722:	9308      	str	r3, [sp, #32]
 8012724:	233f      	movs	r3, #63	; 0x3f
 8012726:	9307      	str	r3, [sp, #28]
 8012728:	4b0f      	ldr	r3, [pc, #60]	; (8012768 <_Z27getFont_AGENCYB_TTF_24_4bppv+0x88>)
 801272a:	9306      	str	r3, [sp, #24]
 801272c:	4b0f      	ldr	r3, [pc, #60]	; (801276c <_Z27getFont_AGENCYB_TTF_24_4bppv+0x8c>)
 801272e:	9305      	str	r3, [sp, #20]
 8012730:	2301      	movs	r3, #1
 8012732:	9304      	str	r3, [sp, #16]
 8012734:	2301      	movs	r3, #1
 8012736:	9303      	str	r3, [sp, #12]
 8012738:	2301      	movs	r3, #1
 801273a:	9302      	str	r3, [sp, #8]
 801273c:	2304      	movs	r3, #4
 801273e:	9301      	str	r3, [sp, #4]
 8012740:	2304      	movs	r3, #4
 8012742:	9300      	str	r3, [sp, #0]
 8012744:	2318      	movs	r3, #24
 8012746:	223f      	movs	r2, #63	; 0x3f
 8012748:	4909      	ldr	r1, [pc, #36]	; (8012770 <_Z27getFont_AGENCYB_TTF_24_4bppv+0x90>)
 801274a:	480a      	ldr	r0, [pc, #40]	; (8012774 <_Z27getFont_AGENCYB_TTF_24_4bppv+0x94>)
 801274c:	f7ff fe24 	bl	8012398 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 8012750:	4809      	ldr	r0, [pc, #36]	; (8012778 <_Z27getFont_AGENCYB_TTF_24_4bppv+0x98>)
 8012752:	f008 ff89 	bl	801b668 <atexit>
 8012756:	4803      	ldr	r0, [pc, #12]	; (8012764 <_Z27getFont_AGENCYB_TTF_24_4bppv+0x84>)
 8012758:	f008 ff48 	bl	801b5ec <__cxa_guard_release>
    return AGENCYB_TTF_24_4bpp;
 801275c:	4b05      	ldr	r3, [pc, #20]	; (8012774 <_Z27getFont_AGENCYB_TTF_24_4bppv+0x94>)
}
 801275e:	4618      	mov	r0, r3
 8012760:	46bd      	mov	sp, r7
 8012762:	bd80      	pop	{r7, pc}
 8012764:	20005480 	.word	0x20005480
 8012768:	08037cf8 	.word	0x08037cf8
 801276c:	0803800c 	.word	0x0803800c
 8012770:	080361b4 	.word	0x080361b4
 8012774:	20005458 	.word	0x20005458
 8012778:	080126d1 	.word	0x080126d1

0801277c <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_AGENCYB_TTF_28_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_AGENCYB_TTF_28_4bpp();

touchgfx::GeneratedFont& getFont_AGENCYB_TTF_28_4bpp()
{
    static touchgfx::GeneratedFont AGENCYB_TTF_28_4bpp(glyphs_AGENCYB_TTF_28_4bpp, 110, 28, 6, 4, 1, 1, 1, unicodes_AGENCYB_TTF_28_4bpp, kerning_AGENCYB_TTF_28_4bpp, 63, 0, 0, 0);
 801277c:	b580      	push	{r7, lr}
 801277e:	af00      	add	r7, sp, #0
 8012780:	4801      	ldr	r0, [pc, #4]	; (8012788 <__tcf_0+0xc>)
 8012782:	f7ff fdaf 	bl	80122e4 <_ZN8touchgfx13GeneratedFontD1Ev>
 8012786:	bd80      	pop	{r7, pc}
 8012788:	20005484 	.word	0x20005484

0801278c <_Z27getFont_AGENCYB_TTF_28_4bppv>:
{
 801278c:	b580      	push	{r7, lr}
 801278e:	b08c      	sub	sp, #48	; 0x30
 8012790:	af0c      	add	r7, sp, #48	; 0x30
    static touchgfx::GeneratedFont AGENCYB_TTF_28_4bpp(glyphs_AGENCYB_TTF_28_4bpp, 110, 28, 6, 4, 1, 1, 1, unicodes_AGENCYB_TTF_28_4bpp, kerning_AGENCYB_TTF_28_4bpp, 63, 0, 0, 0);
 8012792:	4b1f      	ldr	r3, [pc, #124]	; (8012810 <_Z27getFont_AGENCYB_TTF_28_4bppv+0x84>)
 8012794:	781b      	ldrb	r3, [r3, #0]
 8012796:	f3bf 8f5b 	dmb	ish
 801279a:	b2db      	uxtb	r3, r3
 801279c:	f003 0301 	and.w	r3, r3, #1
 80127a0:	2b00      	cmp	r3, #0
 80127a2:	bf0c      	ite	eq
 80127a4:	2301      	moveq	r3, #1
 80127a6:	2300      	movne	r3, #0
 80127a8:	b2db      	uxtb	r3, r3
 80127aa:	2b00      	cmp	r3, #0
 80127ac:	d02c      	beq.n	8012808 <_Z27getFont_AGENCYB_TTF_28_4bppv+0x7c>
 80127ae:	4818      	ldr	r0, [pc, #96]	; (8012810 <_Z27getFont_AGENCYB_TTF_28_4bppv+0x84>)
 80127b0:	f008 ff10 	bl	801b5d4 <__cxa_guard_acquire>
 80127b4:	4603      	mov	r3, r0
 80127b6:	2b00      	cmp	r3, #0
 80127b8:	bf14      	ite	ne
 80127ba:	2301      	movne	r3, #1
 80127bc:	2300      	moveq	r3, #0
 80127be:	b2db      	uxtb	r3, r3
 80127c0:	2b00      	cmp	r3, #0
 80127c2:	d021      	beq.n	8012808 <_Z27getFont_AGENCYB_TTF_28_4bppv+0x7c>
 80127c4:	2300      	movs	r3, #0
 80127c6:	930a      	str	r3, [sp, #40]	; 0x28
 80127c8:	2300      	movs	r3, #0
 80127ca:	9309      	str	r3, [sp, #36]	; 0x24
 80127cc:	2300      	movs	r3, #0
 80127ce:	9308      	str	r3, [sp, #32]
 80127d0:	233f      	movs	r3, #63	; 0x3f
 80127d2:	9307      	str	r3, [sp, #28]
 80127d4:	4b0f      	ldr	r3, [pc, #60]	; (8012814 <_Z27getFont_AGENCYB_TTF_28_4bppv+0x88>)
 80127d6:	9306      	str	r3, [sp, #24]
 80127d8:	4b0f      	ldr	r3, [pc, #60]	; (8012818 <_Z27getFont_AGENCYB_TTF_28_4bppv+0x8c>)
 80127da:	9305      	str	r3, [sp, #20]
 80127dc:	2301      	movs	r3, #1
 80127de:	9304      	str	r3, [sp, #16]
 80127e0:	2301      	movs	r3, #1
 80127e2:	9303      	str	r3, [sp, #12]
 80127e4:	2301      	movs	r3, #1
 80127e6:	9302      	str	r3, [sp, #8]
 80127e8:	2304      	movs	r3, #4
 80127ea:	9301      	str	r3, [sp, #4]
 80127ec:	2306      	movs	r3, #6
 80127ee:	9300      	str	r3, [sp, #0]
 80127f0:	231c      	movs	r3, #28
 80127f2:	226e      	movs	r2, #110	; 0x6e
 80127f4:	4909      	ldr	r1, [pc, #36]	; (801281c <_Z27getFont_AGENCYB_TTF_28_4bppv+0x90>)
 80127f6:	480a      	ldr	r0, [pc, #40]	; (8012820 <_Z27getFont_AGENCYB_TTF_28_4bppv+0x94>)
 80127f8:	f7ff fdce 	bl	8012398 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 80127fc:	4809      	ldr	r0, [pc, #36]	; (8012824 <_Z27getFont_AGENCYB_TTF_28_4bppv+0x98>)
 80127fe:	f008 ff33 	bl	801b668 <atexit>
 8012802:	4803      	ldr	r0, [pc, #12]	; (8012810 <_Z27getFont_AGENCYB_TTF_28_4bppv+0x84>)
 8012804:	f008 fef2 	bl	801b5ec <__cxa_guard_release>
    return AGENCYB_TTF_28_4bpp;
 8012808:	4b05      	ldr	r3, [pc, #20]	; (8012820 <_Z27getFont_AGENCYB_TTF_28_4bppv+0x94>)
}
 801280a:	4618      	mov	r0, r3
 801280c:	46bd      	mov	sp, r7
 801280e:	bd80      	pop	{r7, pc}
 8012810:	200054ac 	.word	0x200054ac
 8012814:	08037cfc 	.word	0x08037cfc
 8012818:	08038010 	.word	0x08038010
 801281c:	08036528 	.word	0x08036528
 8012820:	20005484 	.word	0x20005484
 8012824:	0801277d 	.word	0x0801277d

08012828 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_AGENCYB_TTF_30_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_AGENCYB_TTF_30_4bpp();

touchgfx::GeneratedFont& getFont_AGENCYB_TTF_30_4bpp()
{
    static touchgfx::GeneratedFont AGENCYB_TTF_30_4bpp(glyphs_AGENCYB_TTF_30_4bpp, 65, 30, 5, 4, 1, 1, 0, unicodes_AGENCYB_TTF_30_4bpp, kerning_AGENCYB_TTF_30_4bpp, 63, 0, 0, 0);
 8012828:	b580      	push	{r7, lr}
 801282a:	af00      	add	r7, sp, #0
 801282c:	4801      	ldr	r0, [pc, #4]	; (8012834 <__tcf_0+0xc>)
 801282e:	f7ff fd59 	bl	80122e4 <_ZN8touchgfx13GeneratedFontD1Ev>
 8012832:	bd80      	pop	{r7, pc}
 8012834:	200054b0 	.word	0x200054b0

08012838 <_Z27getFont_AGENCYB_TTF_30_4bppv>:
{
 8012838:	b580      	push	{r7, lr}
 801283a:	b08c      	sub	sp, #48	; 0x30
 801283c:	af0c      	add	r7, sp, #48	; 0x30
    static touchgfx::GeneratedFont AGENCYB_TTF_30_4bpp(glyphs_AGENCYB_TTF_30_4bpp, 65, 30, 5, 4, 1, 1, 0, unicodes_AGENCYB_TTF_30_4bpp, kerning_AGENCYB_TTF_30_4bpp, 63, 0, 0, 0);
 801283e:	4b1f      	ldr	r3, [pc, #124]	; (80128bc <_Z27getFont_AGENCYB_TTF_30_4bppv+0x84>)
 8012840:	781b      	ldrb	r3, [r3, #0]
 8012842:	f3bf 8f5b 	dmb	ish
 8012846:	b2db      	uxtb	r3, r3
 8012848:	f003 0301 	and.w	r3, r3, #1
 801284c:	2b00      	cmp	r3, #0
 801284e:	bf0c      	ite	eq
 8012850:	2301      	moveq	r3, #1
 8012852:	2300      	movne	r3, #0
 8012854:	b2db      	uxtb	r3, r3
 8012856:	2b00      	cmp	r3, #0
 8012858:	d02c      	beq.n	80128b4 <_Z27getFont_AGENCYB_TTF_30_4bppv+0x7c>
 801285a:	4818      	ldr	r0, [pc, #96]	; (80128bc <_Z27getFont_AGENCYB_TTF_30_4bppv+0x84>)
 801285c:	f008 feba 	bl	801b5d4 <__cxa_guard_acquire>
 8012860:	4603      	mov	r3, r0
 8012862:	2b00      	cmp	r3, #0
 8012864:	bf14      	ite	ne
 8012866:	2301      	movne	r3, #1
 8012868:	2300      	moveq	r3, #0
 801286a:	b2db      	uxtb	r3, r3
 801286c:	2b00      	cmp	r3, #0
 801286e:	d021      	beq.n	80128b4 <_Z27getFont_AGENCYB_TTF_30_4bppv+0x7c>
 8012870:	2300      	movs	r3, #0
 8012872:	930a      	str	r3, [sp, #40]	; 0x28
 8012874:	2300      	movs	r3, #0
 8012876:	9309      	str	r3, [sp, #36]	; 0x24
 8012878:	2300      	movs	r3, #0
 801287a:	9308      	str	r3, [sp, #32]
 801287c:	233f      	movs	r3, #63	; 0x3f
 801287e:	9307      	str	r3, [sp, #28]
 8012880:	4b0f      	ldr	r3, [pc, #60]	; (80128c0 <_Z27getFont_AGENCYB_TTF_30_4bppv+0x88>)
 8012882:	9306      	str	r3, [sp, #24]
 8012884:	4b0f      	ldr	r3, [pc, #60]	; (80128c4 <_Z27getFont_AGENCYB_TTF_30_4bppv+0x8c>)
 8012886:	9305      	str	r3, [sp, #20]
 8012888:	2300      	movs	r3, #0
 801288a:	9304      	str	r3, [sp, #16]
 801288c:	2301      	movs	r3, #1
 801288e:	9303      	str	r3, [sp, #12]
 8012890:	2301      	movs	r3, #1
 8012892:	9302      	str	r3, [sp, #8]
 8012894:	2304      	movs	r3, #4
 8012896:	9301      	str	r3, [sp, #4]
 8012898:	2305      	movs	r3, #5
 801289a:	9300      	str	r3, [sp, #0]
 801289c:	231e      	movs	r3, #30
 801289e:	2241      	movs	r2, #65	; 0x41
 80128a0:	4909      	ldr	r1, [pc, #36]	; (80128c8 <_Z27getFont_AGENCYB_TTF_30_4bppv+0x90>)
 80128a2:	480a      	ldr	r0, [pc, #40]	; (80128cc <_Z27getFont_AGENCYB_TTF_30_4bppv+0x94>)
 80128a4:	f7ff fd78 	bl	8012398 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 80128a8:	4809      	ldr	r0, [pc, #36]	; (80128d0 <_Z27getFont_AGENCYB_TTF_30_4bppv+0x98>)
 80128aa:	f008 fedd 	bl	801b668 <atexit>
 80128ae:	4803      	ldr	r0, [pc, #12]	; (80128bc <_Z27getFont_AGENCYB_TTF_30_4bppv+0x84>)
 80128b0:	f008 fe9c 	bl	801b5ec <__cxa_guard_release>
    return AGENCYB_TTF_30_4bpp;
 80128b4:	4b05      	ldr	r3, [pc, #20]	; (80128cc <_Z27getFont_AGENCYB_TTF_30_4bppv+0x94>)
}
 80128b6:	4618      	mov	r0, r3
 80128b8:	46bd      	mov	sp, r7
 80128ba:	bd80      	pop	{r7, pc}
 80128bc:	200054d8 	.word	0x200054d8
 80128c0:	08037d00 	.word	0x08037d00
 80128c4:	08038024 	.word	0x08038024
 80128c8:	08036b2c 	.word	0x08036b2c
 80128cc:	200054b0 	.word	0x200054b0
 80128d0:	08012829 	.word	0x08012829

080128d4 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_AGENCYB_TTF_50_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_AGENCYB_TTF_50_4bpp();

touchgfx::GeneratedFont& getFont_AGENCYB_TTF_50_4bpp()
{
    static touchgfx::GeneratedFont AGENCYB_TTF_50_4bpp(glyphs_AGENCYB_TTF_50_4bpp, 67, 50, 9, 4, 1, 2, 0, unicodes_AGENCYB_TTF_50_4bpp, kerning_AGENCYB_TTF_50_4bpp, 63, 0, 0, 0);
 80128d4:	b580      	push	{r7, lr}
 80128d6:	af00      	add	r7, sp, #0
 80128d8:	4801      	ldr	r0, [pc, #4]	; (80128e0 <__tcf_0+0xc>)
 80128da:	f7ff fd03 	bl	80122e4 <_ZN8touchgfx13GeneratedFontD1Ev>
 80128de:	bd80      	pop	{r7, pc}
 80128e0:	200054dc 	.word	0x200054dc

080128e4 <_Z27getFont_AGENCYB_TTF_50_4bppv>:
{
 80128e4:	b580      	push	{r7, lr}
 80128e6:	b08c      	sub	sp, #48	; 0x30
 80128e8:	af0c      	add	r7, sp, #48	; 0x30
    static touchgfx::GeneratedFont AGENCYB_TTF_50_4bpp(glyphs_AGENCYB_TTF_50_4bpp, 67, 50, 9, 4, 1, 2, 0, unicodes_AGENCYB_TTF_50_4bpp, kerning_AGENCYB_TTF_50_4bpp, 63, 0, 0, 0);
 80128ea:	4b1f      	ldr	r3, [pc, #124]	; (8012968 <_Z27getFont_AGENCYB_TTF_50_4bppv+0x84>)
 80128ec:	781b      	ldrb	r3, [r3, #0]
 80128ee:	f3bf 8f5b 	dmb	ish
 80128f2:	b2db      	uxtb	r3, r3
 80128f4:	f003 0301 	and.w	r3, r3, #1
 80128f8:	2b00      	cmp	r3, #0
 80128fa:	bf0c      	ite	eq
 80128fc:	2301      	moveq	r3, #1
 80128fe:	2300      	movne	r3, #0
 8012900:	b2db      	uxtb	r3, r3
 8012902:	2b00      	cmp	r3, #0
 8012904:	d02c      	beq.n	8012960 <_Z27getFont_AGENCYB_TTF_50_4bppv+0x7c>
 8012906:	4818      	ldr	r0, [pc, #96]	; (8012968 <_Z27getFont_AGENCYB_TTF_50_4bppv+0x84>)
 8012908:	f008 fe64 	bl	801b5d4 <__cxa_guard_acquire>
 801290c:	4603      	mov	r3, r0
 801290e:	2b00      	cmp	r3, #0
 8012910:	bf14      	ite	ne
 8012912:	2301      	movne	r3, #1
 8012914:	2300      	moveq	r3, #0
 8012916:	b2db      	uxtb	r3, r3
 8012918:	2b00      	cmp	r3, #0
 801291a:	d021      	beq.n	8012960 <_Z27getFont_AGENCYB_TTF_50_4bppv+0x7c>
 801291c:	2300      	movs	r3, #0
 801291e:	930a      	str	r3, [sp, #40]	; 0x28
 8012920:	2300      	movs	r3, #0
 8012922:	9309      	str	r3, [sp, #36]	; 0x24
 8012924:	2300      	movs	r3, #0
 8012926:	9308      	str	r3, [sp, #32]
 8012928:	233f      	movs	r3, #63	; 0x3f
 801292a:	9307      	str	r3, [sp, #28]
 801292c:	4b0f      	ldr	r3, [pc, #60]	; (801296c <_Z27getFont_AGENCYB_TTF_50_4bppv+0x88>)
 801292e:	9306      	str	r3, [sp, #24]
 8012930:	4b0f      	ldr	r3, [pc, #60]	; (8012970 <_Z27getFont_AGENCYB_TTF_50_4bppv+0x8c>)
 8012932:	9305      	str	r3, [sp, #20]
 8012934:	2300      	movs	r3, #0
 8012936:	9304      	str	r3, [sp, #16]
 8012938:	2302      	movs	r3, #2
 801293a:	9303      	str	r3, [sp, #12]
 801293c:	2301      	movs	r3, #1
 801293e:	9302      	str	r3, [sp, #8]
 8012940:	2304      	movs	r3, #4
 8012942:	9301      	str	r3, [sp, #4]
 8012944:	2309      	movs	r3, #9
 8012946:	9300      	str	r3, [sp, #0]
 8012948:	2332      	movs	r3, #50	; 0x32
 801294a:	2243      	movs	r2, #67	; 0x43
 801294c:	4909      	ldr	r1, [pc, #36]	; (8012974 <_Z27getFont_AGENCYB_TTF_50_4bppv+0x90>)
 801294e:	480a      	ldr	r0, [pc, #40]	; (8012978 <_Z27getFont_AGENCYB_TTF_50_4bppv+0x94>)
 8012950:	f7ff fd22 	bl	8012398 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 8012954:	4809      	ldr	r0, [pc, #36]	; (801297c <_Z27getFont_AGENCYB_TTF_50_4bppv+0x98>)
 8012956:	f008 fe87 	bl	801b668 <atexit>
 801295a:	4803      	ldr	r0, [pc, #12]	; (8012968 <_Z27getFont_AGENCYB_TTF_50_4bppv+0x84>)
 801295c:	f008 fe46 	bl	801b5ec <__cxa_guard_release>
    return AGENCYB_TTF_50_4bpp;
 8012960:	4b05      	ldr	r3, [pc, #20]	; (8012978 <_Z27getFont_AGENCYB_TTF_50_4bppv+0x94>)
}
 8012962:	4618      	mov	r0, r3
 8012964:	46bd      	mov	sp, r7
 8012966:	bd80      	pop	{r7, pc}
 8012968:	20005504 	.word	0x20005504
 801296c:	08037d04 	.word	0x08037d04
 8012970:	08038028 	.word	0x08038028
 8012974:	08036ebc 	.word	0x08036ebc
 8012978:	200054dc 	.word	0x200054dc
 801297c:	080128d5 	.word	0x080128d5

08012980 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_10_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_10_4bpp();

touchgfx::GeneratedFont& getFont_verdana_10_4bpp()
{
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 63, 10, 2, 4, 1, 1, 1, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
 8012980:	b580      	push	{r7, lr}
 8012982:	af00      	add	r7, sp, #0
 8012984:	4801      	ldr	r0, [pc, #4]	; (801298c <__tcf_0+0xc>)
 8012986:	f7ff fcad 	bl	80122e4 <_ZN8touchgfx13GeneratedFontD1Ev>
 801298a:	bd80      	pop	{r7, pc}
 801298c:	20005508 	.word	0x20005508

08012990 <_Z23getFont_verdana_10_4bppv>:
{
 8012990:	b580      	push	{r7, lr}
 8012992:	b08c      	sub	sp, #48	; 0x30
 8012994:	af0c      	add	r7, sp, #48	; 0x30
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 63, 10, 2, 4, 1, 1, 1, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
 8012996:	4b1f      	ldr	r3, [pc, #124]	; (8012a14 <_Z23getFont_verdana_10_4bppv+0x84>)
 8012998:	781b      	ldrb	r3, [r3, #0]
 801299a:	f3bf 8f5b 	dmb	ish
 801299e:	b2db      	uxtb	r3, r3
 80129a0:	f003 0301 	and.w	r3, r3, #1
 80129a4:	2b00      	cmp	r3, #0
 80129a6:	bf0c      	ite	eq
 80129a8:	2301      	moveq	r3, #1
 80129aa:	2300      	movne	r3, #0
 80129ac:	b2db      	uxtb	r3, r3
 80129ae:	2b00      	cmp	r3, #0
 80129b0:	d02c      	beq.n	8012a0c <_Z23getFont_verdana_10_4bppv+0x7c>
 80129b2:	4818      	ldr	r0, [pc, #96]	; (8012a14 <_Z23getFont_verdana_10_4bppv+0x84>)
 80129b4:	f008 fe0e 	bl	801b5d4 <__cxa_guard_acquire>
 80129b8:	4603      	mov	r3, r0
 80129ba:	2b00      	cmp	r3, #0
 80129bc:	bf14      	ite	ne
 80129be:	2301      	movne	r3, #1
 80129c0:	2300      	moveq	r3, #0
 80129c2:	b2db      	uxtb	r3, r3
 80129c4:	2b00      	cmp	r3, #0
 80129c6:	d021      	beq.n	8012a0c <_Z23getFont_verdana_10_4bppv+0x7c>
 80129c8:	2300      	movs	r3, #0
 80129ca:	930a      	str	r3, [sp, #40]	; 0x28
 80129cc:	2300      	movs	r3, #0
 80129ce:	9309      	str	r3, [sp, #36]	; 0x24
 80129d0:	2300      	movs	r3, #0
 80129d2:	9308      	str	r3, [sp, #32]
 80129d4:	233f      	movs	r3, #63	; 0x3f
 80129d6:	9307      	str	r3, [sp, #28]
 80129d8:	4b0f      	ldr	r3, [pc, #60]	; (8012a18 <_Z23getFont_verdana_10_4bppv+0x88>)
 80129da:	9306      	str	r3, [sp, #24]
 80129dc:	4b0f      	ldr	r3, [pc, #60]	; (8012a1c <_Z23getFont_verdana_10_4bppv+0x8c>)
 80129de:	9305      	str	r3, [sp, #20]
 80129e0:	2301      	movs	r3, #1
 80129e2:	9304      	str	r3, [sp, #16]
 80129e4:	2301      	movs	r3, #1
 80129e6:	9303      	str	r3, [sp, #12]
 80129e8:	2301      	movs	r3, #1
 80129ea:	9302      	str	r3, [sp, #8]
 80129ec:	2304      	movs	r3, #4
 80129ee:	9301      	str	r3, [sp, #4]
 80129f0:	2302      	movs	r3, #2
 80129f2:	9300      	str	r3, [sp, #0]
 80129f4:	230a      	movs	r3, #10
 80129f6:	223f      	movs	r2, #63	; 0x3f
 80129f8:	4909      	ldr	r1, [pc, #36]	; (8012a20 <_Z23getFont_verdana_10_4bppv+0x90>)
 80129fa:	480a      	ldr	r0, [pc, #40]	; (8012a24 <_Z23getFont_verdana_10_4bppv+0x94>)
 80129fc:	f7ff fccc 	bl	8012398 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 8012a00:	4809      	ldr	r0, [pc, #36]	; (8012a28 <_Z23getFont_verdana_10_4bppv+0x98>)
 8012a02:	f008 fe31 	bl	801b668 <atexit>
 8012a06:	4803      	ldr	r0, [pc, #12]	; (8012a14 <_Z23getFont_verdana_10_4bppv+0x84>)
 8012a08:	f008 fdf0 	bl	801b5ec <__cxa_guard_release>
    return verdana_10_4bpp;
 8012a0c:	4b05      	ldr	r3, [pc, #20]	; (8012a24 <_Z23getFont_verdana_10_4bppv+0x94>)
}
 8012a0e:	4618      	mov	r0, r3
 8012a10:	46bd      	mov	sp, r7
 8012a12:	bd80      	pop	{r7, pc}
 8012a14:	20005530 	.word	0x20005530
 8012a18:	08037d08 	.word	0x08037d08
 8012a1c:	0803802c 	.word	0x0803802c
 8012a20:	08037268 	.word	0x08037268
 8012a24:	20005508 	.word	0x20005508
 8012a28:	08012981 	.word	0x08012981

08012a2c <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_20_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_20_4bpp();

touchgfx::GeneratedFont& getFont_verdana_20_4bpp()
{
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 66, 20, 4, 4, 1, 1, 1, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
 8012a2c:	b580      	push	{r7, lr}
 8012a2e:	af00      	add	r7, sp, #0
 8012a30:	4801      	ldr	r0, [pc, #4]	; (8012a38 <__tcf_0+0xc>)
 8012a32:	f7ff fc57 	bl	80122e4 <_ZN8touchgfx13GeneratedFontD1Ev>
 8012a36:	bd80      	pop	{r7, pc}
 8012a38:	20005534 	.word	0x20005534

08012a3c <_Z23getFont_verdana_20_4bppv>:
{
 8012a3c:	b580      	push	{r7, lr}
 8012a3e:	b08c      	sub	sp, #48	; 0x30
 8012a40:	af0c      	add	r7, sp, #48	; 0x30
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 66, 20, 4, 4, 1, 1, 1, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
 8012a42:	4b1f      	ldr	r3, [pc, #124]	; (8012ac0 <_Z23getFont_verdana_20_4bppv+0x84>)
 8012a44:	781b      	ldrb	r3, [r3, #0]
 8012a46:	f3bf 8f5b 	dmb	ish
 8012a4a:	b2db      	uxtb	r3, r3
 8012a4c:	f003 0301 	and.w	r3, r3, #1
 8012a50:	2b00      	cmp	r3, #0
 8012a52:	bf0c      	ite	eq
 8012a54:	2301      	moveq	r3, #1
 8012a56:	2300      	movne	r3, #0
 8012a58:	b2db      	uxtb	r3, r3
 8012a5a:	2b00      	cmp	r3, #0
 8012a5c:	d02c      	beq.n	8012ab8 <_Z23getFont_verdana_20_4bppv+0x7c>
 8012a5e:	4818      	ldr	r0, [pc, #96]	; (8012ac0 <_Z23getFont_verdana_20_4bppv+0x84>)
 8012a60:	f008 fdb8 	bl	801b5d4 <__cxa_guard_acquire>
 8012a64:	4603      	mov	r3, r0
 8012a66:	2b00      	cmp	r3, #0
 8012a68:	bf14      	ite	ne
 8012a6a:	2301      	movne	r3, #1
 8012a6c:	2300      	moveq	r3, #0
 8012a6e:	b2db      	uxtb	r3, r3
 8012a70:	2b00      	cmp	r3, #0
 8012a72:	d021      	beq.n	8012ab8 <_Z23getFont_verdana_20_4bppv+0x7c>
 8012a74:	2300      	movs	r3, #0
 8012a76:	930a      	str	r3, [sp, #40]	; 0x28
 8012a78:	2300      	movs	r3, #0
 8012a7a:	9309      	str	r3, [sp, #36]	; 0x24
 8012a7c:	2300      	movs	r3, #0
 8012a7e:	9308      	str	r3, [sp, #32]
 8012a80:	233f      	movs	r3, #63	; 0x3f
 8012a82:	9307      	str	r3, [sp, #28]
 8012a84:	4b0f      	ldr	r3, [pc, #60]	; (8012ac4 <_Z23getFont_verdana_20_4bppv+0x88>)
 8012a86:	9306      	str	r3, [sp, #24]
 8012a88:	4b0f      	ldr	r3, [pc, #60]	; (8012ac8 <_Z23getFont_verdana_20_4bppv+0x8c>)
 8012a8a:	9305      	str	r3, [sp, #20]
 8012a8c:	2301      	movs	r3, #1
 8012a8e:	9304      	str	r3, [sp, #16]
 8012a90:	2301      	movs	r3, #1
 8012a92:	9303      	str	r3, [sp, #12]
 8012a94:	2301      	movs	r3, #1
 8012a96:	9302      	str	r3, [sp, #8]
 8012a98:	2304      	movs	r3, #4
 8012a9a:	9301      	str	r3, [sp, #4]
 8012a9c:	2304      	movs	r3, #4
 8012a9e:	9300      	str	r3, [sp, #0]
 8012aa0:	2314      	movs	r3, #20
 8012aa2:	2242      	movs	r2, #66	; 0x42
 8012aa4:	4909      	ldr	r1, [pc, #36]	; (8012acc <_Z23getFont_verdana_20_4bppv+0x90>)
 8012aa6:	480a      	ldr	r0, [pc, #40]	; (8012ad0 <_Z23getFont_verdana_20_4bppv+0x94>)
 8012aa8:	f7ff fc76 	bl	8012398 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 8012aac:	4809      	ldr	r0, [pc, #36]	; (8012ad4 <_Z23getFont_verdana_20_4bppv+0x98>)
 8012aae:	f008 fddb 	bl	801b668 <atexit>
 8012ab2:	4803      	ldr	r0, [pc, #12]	; (8012ac0 <_Z23getFont_verdana_20_4bppv+0x84>)
 8012ab4:	f008 fd9a 	bl	801b5ec <__cxa_guard_release>
    return verdana_20_4bpp;
 8012ab8:	4b05      	ldr	r3, [pc, #20]	; (8012ad0 <_Z23getFont_verdana_20_4bppv+0x94>)
}
 8012aba:	4618      	mov	r0, r3
 8012abc:	46bd      	mov	sp, r7
 8012abe:	bd80      	pop	{r7, pc}
 8012ac0:	2000555c 	.word	0x2000555c
 8012ac4:	08037d0c 	.word	0x08037d0c
 8012ac8:	08038030 	.word	0x08038030
 8012acc:	080375dc 	.word	0x080375dc
 8012ad0:	20005534 	.word	0x20005534
 8012ad4:	08012a2d 	.word	0x08012a2d

08012ad8 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_40_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_40_4bpp();

touchgfx::GeneratedFont& getFont_verdana_40_4bpp()
{
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 63, 40, 8, 4, 1, 2, 2, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 8012ad8:	b580      	push	{r7, lr}
 8012ada:	af00      	add	r7, sp, #0
 8012adc:	4801      	ldr	r0, [pc, #4]	; (8012ae4 <__tcf_0+0xc>)
 8012ade:	f7ff fc01 	bl	80122e4 <_ZN8touchgfx13GeneratedFontD1Ev>
 8012ae2:	bd80      	pop	{r7, pc}
 8012ae4:	20005560 	.word	0x20005560

08012ae8 <_Z23getFont_verdana_40_4bppv>:
{
 8012ae8:	b580      	push	{r7, lr}
 8012aea:	b08c      	sub	sp, #48	; 0x30
 8012aec:	af0c      	add	r7, sp, #48	; 0x30
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 63, 40, 8, 4, 1, 2, 2, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 8012aee:	4b1f      	ldr	r3, [pc, #124]	; (8012b6c <_Z23getFont_verdana_40_4bppv+0x84>)
 8012af0:	781b      	ldrb	r3, [r3, #0]
 8012af2:	f3bf 8f5b 	dmb	ish
 8012af6:	b2db      	uxtb	r3, r3
 8012af8:	f003 0301 	and.w	r3, r3, #1
 8012afc:	2b00      	cmp	r3, #0
 8012afe:	bf0c      	ite	eq
 8012b00:	2301      	moveq	r3, #1
 8012b02:	2300      	movne	r3, #0
 8012b04:	b2db      	uxtb	r3, r3
 8012b06:	2b00      	cmp	r3, #0
 8012b08:	d02c      	beq.n	8012b64 <_Z23getFont_verdana_40_4bppv+0x7c>
 8012b0a:	4818      	ldr	r0, [pc, #96]	; (8012b6c <_Z23getFont_verdana_40_4bppv+0x84>)
 8012b0c:	f008 fd62 	bl	801b5d4 <__cxa_guard_acquire>
 8012b10:	4603      	mov	r3, r0
 8012b12:	2b00      	cmp	r3, #0
 8012b14:	bf14      	ite	ne
 8012b16:	2301      	movne	r3, #1
 8012b18:	2300      	moveq	r3, #0
 8012b1a:	b2db      	uxtb	r3, r3
 8012b1c:	2b00      	cmp	r3, #0
 8012b1e:	d021      	beq.n	8012b64 <_Z23getFont_verdana_40_4bppv+0x7c>
 8012b20:	2300      	movs	r3, #0
 8012b22:	930a      	str	r3, [sp, #40]	; 0x28
 8012b24:	2300      	movs	r3, #0
 8012b26:	9309      	str	r3, [sp, #36]	; 0x24
 8012b28:	2300      	movs	r3, #0
 8012b2a:	9308      	str	r3, [sp, #32]
 8012b2c:	233f      	movs	r3, #63	; 0x3f
 8012b2e:	9307      	str	r3, [sp, #28]
 8012b30:	4b0f      	ldr	r3, [pc, #60]	; (8012b70 <_Z23getFont_verdana_40_4bppv+0x88>)
 8012b32:	9306      	str	r3, [sp, #24]
 8012b34:	4b0f      	ldr	r3, [pc, #60]	; (8012b74 <_Z23getFont_verdana_40_4bppv+0x8c>)
 8012b36:	9305      	str	r3, [sp, #20]
 8012b38:	2302      	movs	r3, #2
 8012b3a:	9304      	str	r3, [sp, #16]
 8012b3c:	2302      	movs	r3, #2
 8012b3e:	9303      	str	r3, [sp, #12]
 8012b40:	2301      	movs	r3, #1
 8012b42:	9302      	str	r3, [sp, #8]
 8012b44:	2304      	movs	r3, #4
 8012b46:	9301      	str	r3, [sp, #4]
 8012b48:	2308      	movs	r3, #8
 8012b4a:	9300      	str	r3, [sp, #0]
 8012b4c:	2328      	movs	r3, #40	; 0x28
 8012b4e:	223f      	movs	r2, #63	; 0x3f
 8012b50:	4909      	ldr	r1, [pc, #36]	; (8012b78 <_Z23getFont_verdana_40_4bppv+0x90>)
 8012b52:	480a      	ldr	r0, [pc, #40]	; (8012b7c <_Z23getFont_verdana_40_4bppv+0x94>)
 8012b54:	f7ff fc20 	bl	8012398 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 8012b58:	4809      	ldr	r0, [pc, #36]	; (8012b80 <_Z23getFont_verdana_40_4bppv+0x98>)
 8012b5a:	f008 fd85 	bl	801b668 <atexit>
 8012b5e:	4803      	ldr	r0, [pc, #12]	; (8012b6c <_Z23getFont_verdana_40_4bppv+0x84>)
 8012b60:	f008 fd44 	bl	801b5ec <__cxa_guard_release>
    return verdana_40_4bpp;
 8012b64:	4b05      	ldr	r3, [pc, #20]	; (8012b7c <_Z23getFont_verdana_40_4bppv+0x94>)
}
 8012b66:	4618      	mov	r0, r3
 8012b68:	46bd      	mov	sp, r7
 8012b6a:	bd80      	pop	{r7, pc}
 8012b6c:	20005588 	.word	0x20005588
 8012b70:	08037e48 	.word	0x08037e48
 8012b74:	08038034 	.word	0x08038034
 8012b78:	08037978 	.word	0x08037978
 8012b7c:	20005560 	.word	0x20005560
 8012b80:	08012ad9 	.word	0x08012ad9

08012b84 <_ZN8touchgfx9colortypeC1Ev>:
 * extract a 24/32-bit color from this type, use the getColor32 function.
 */
struct colortype
{
    /** Default constructor. Creates a black (0) color. */
    colortype()
 8012b84:	b480      	push	{r7}
 8012b86:	b083      	sub	sp, #12
 8012b88:	af00      	add	r7, sp, #0
 8012b8a:	6078      	str	r0, [r7, #4]
        : color(0)
 8012b8c:	687b      	ldr	r3, [r7, #4]
 8012b8e:	2200      	movs	r2, #0
 8012b90:	601a      	str	r2, [r3, #0]
    {
    }
 8012b92:	687b      	ldr	r3, [r7, #4]
 8012b94:	4618      	mov	r0, r3
 8012b96:	370c      	adds	r7, #12
 8012b98:	46bd      	mov	sp, r7
 8012b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b9e:	4770      	bx	lr

08012ba0 <_ZN8touchgfx9colortypeC1Em>:
     *
     * @param  col The color.
     *
     * @see Color::getColorFrom24BitRGB
     */
    colortype(uint32_t col)
 8012ba0:	b480      	push	{r7}
 8012ba2:	b083      	sub	sp, #12
 8012ba4:	af00      	add	r7, sp, #0
 8012ba6:	6078      	str	r0, [r7, #4]
 8012ba8:	6039      	str	r1, [r7, #0]
        : color(col)
 8012baa:	687b      	ldr	r3, [r7, #4]
 8012bac:	683a      	ldr	r2, [r7, #0]
 8012bae:	601a      	str	r2, [r3, #0]
    {
    }
 8012bb0:	687b      	ldr	r3, [r7, #4]
 8012bb2:	4618      	mov	r0, r3
 8012bb4:	370c      	adds	r7, #12
 8012bb6:	46bd      	mov	sp, r7
 8012bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012bbc:	4770      	bx	lr

08012bbe <_ZN8touchgfx4RectC1Ev>:
/** Class representing a Rectangle with a few convenient methods. */
class Rect
{
public:
    /** Default constructor. Resulting in an empty Rect with coordinates 0,0. */
    Rect()
 8012bbe:	b480      	push	{r7}
 8012bc0:	b083      	sub	sp, #12
 8012bc2:	af00      	add	r7, sp, #0
 8012bc4:	6078      	str	r0, [r7, #4]
        : x(0), y(0), width(0), height(0)
 8012bc6:	687b      	ldr	r3, [r7, #4]
 8012bc8:	2200      	movs	r2, #0
 8012bca:	801a      	strh	r2, [r3, #0]
 8012bcc:	687b      	ldr	r3, [r7, #4]
 8012bce:	2200      	movs	r2, #0
 8012bd0:	805a      	strh	r2, [r3, #2]
 8012bd2:	687b      	ldr	r3, [r7, #4]
 8012bd4:	2200      	movs	r2, #0
 8012bd6:	809a      	strh	r2, [r3, #4]
 8012bd8:	687b      	ldr	r3, [r7, #4]
 8012bda:	2200      	movs	r2, #0
 8012bdc:	80da      	strh	r2, [r3, #6]
    {
    }
 8012bde:	687b      	ldr	r3, [r7, #4]
 8012be0:	4618      	mov	r0, r3
 8012be2:	370c      	adds	r7, #12
 8012be4:	46bd      	mov	sp, r7
 8012be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012bea:	4770      	bx	lr

08012bec <_ZN8touchgfx4RectC1Essss>:
     * @param  x      The x coordinate.
     * @param  y      The y coordinate.
     * @param  width  The width.
     * @param  height The height.
     */
    Rect(int16_t x, int16_t y, int16_t width, int16_t height)
 8012bec:	b480      	push	{r7}
 8012bee:	b085      	sub	sp, #20
 8012bf0:	af00      	add	r7, sp, #0
 8012bf2:	60f8      	str	r0, [r7, #12]
 8012bf4:	4608      	mov	r0, r1
 8012bf6:	4611      	mov	r1, r2
 8012bf8:	461a      	mov	r2, r3
 8012bfa:	4603      	mov	r3, r0
 8012bfc:	817b      	strh	r3, [r7, #10]
 8012bfe:	460b      	mov	r3, r1
 8012c00:	813b      	strh	r3, [r7, #8]
 8012c02:	4613      	mov	r3, r2
 8012c04:	80fb      	strh	r3, [r7, #6]
        : x(x), y(y), width(width), height(height)
 8012c06:	68fb      	ldr	r3, [r7, #12]
 8012c08:	897a      	ldrh	r2, [r7, #10]
 8012c0a:	801a      	strh	r2, [r3, #0]
 8012c0c:	68fb      	ldr	r3, [r7, #12]
 8012c0e:	893a      	ldrh	r2, [r7, #8]
 8012c10:	805a      	strh	r2, [r3, #2]
 8012c12:	68fb      	ldr	r3, [r7, #12]
 8012c14:	88fa      	ldrh	r2, [r7, #6]
 8012c16:	809a      	strh	r2, [r3, #4]
 8012c18:	68fb      	ldr	r3, [r7, #12]
 8012c1a:	8b3a      	ldrh	r2, [r7, #24]
 8012c1c:	80da      	strh	r2, [r3, #6]
    {
    }
 8012c1e:	68fb      	ldr	r3, [r7, #12]
 8012c20:	4618      	mov	r0, r3
 8012c22:	3714      	adds	r7, #20
 8012c24:	46bd      	mov	sp, r7
 8012c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c2a:	4770      	bx	lr

08012c2c <_ZN8touchgfx8Drawable5setXYEss>:
     *
     * @see moveTo
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    void setXY(int16_t x, int16_t y)
 8012c2c:	b580      	push	{r7, lr}
 8012c2e:	b082      	sub	sp, #8
 8012c30:	af00      	add	r7, sp, #0
 8012c32:	6078      	str	r0, [r7, #4]
 8012c34:	460b      	mov	r3, r1
 8012c36:	807b      	strh	r3, [r7, #2]
 8012c38:	4613      	mov	r3, r2
 8012c3a:	803b      	strh	r3, [r7, #0]
    {
        setX(x);
 8012c3c:	687b      	ldr	r3, [r7, #4]
 8012c3e:	681b      	ldr	r3, [r3, #0]
 8012c40:	3330      	adds	r3, #48	; 0x30
 8012c42:	681b      	ldr	r3, [r3, #0]
 8012c44:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8012c48:	4611      	mov	r1, r2
 8012c4a:	6878      	ldr	r0, [r7, #4]
 8012c4c:	4798      	blx	r3
        setY(y);
 8012c4e:	687b      	ldr	r3, [r7, #4]
 8012c50:	681b      	ldr	r3, [r3, #0]
 8012c52:	3334      	adds	r3, #52	; 0x34
 8012c54:	681b      	ldr	r3, [r3, #0]
 8012c56:	f9b7 2000 	ldrsh.w	r2, [r7]
 8012c5a:	4611      	mov	r1, r2
 8012c5c:	6878      	ldr	r0, [r7, #4]
 8012c5e:	4798      	blx	r3
    }
 8012c60:	bf00      	nop
 8012c62:	3708      	adds	r7, #8
 8012c64:	46bd      	mov	sp, r7
 8012c66:	bd80      	pop	{r7, pc}

08012c68 <_ZN8touchgfx9TypedTextC1Et>:
    explicit TypedText(const TypedTextId id = TYPED_TEXT_INVALID)
 8012c68:	b480      	push	{r7}
 8012c6a:	b083      	sub	sp, #12
 8012c6c:	af00      	add	r7, sp, #0
 8012c6e:	6078      	str	r0, [r7, #4]
 8012c70:	460b      	mov	r3, r1
 8012c72:	807b      	strh	r3, [r7, #2]
        : typedTextId(id)
 8012c74:	4a06      	ldr	r2, [pc, #24]	; (8012c90 <_ZN8touchgfx9TypedTextC1Et+0x28>)
 8012c76:	687b      	ldr	r3, [r7, #4]
 8012c78:	601a      	str	r2, [r3, #0]
 8012c7a:	687b      	ldr	r3, [r7, #4]
 8012c7c:	887a      	ldrh	r2, [r7, #2]
 8012c7e:	809a      	strh	r2, [r3, #4]
    }
 8012c80:	687b      	ldr	r3, [r7, #4]
 8012c82:	4618      	mov	r0, r3
 8012c84:	370c      	adds	r7, #12
 8012c86:	46bd      	mov	sp, r7
 8012c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c8c:	4770      	bx	lr
 8012c8e:	bf00      	nop
 8012c90:	0801edd0 	.word	0x0801edd0

08012c94 <_ZN8touchgfx3HAL11getInstanceEv>:
    /**
     * Gets the HAL instance.
     *
     * @return The HAL instance.
     */
    static HAL* getInstance()
 8012c94:	b480      	push	{r7}
 8012c96:	af00      	add	r7, sp, #0
    {
        return instance;
 8012c98:	4b03      	ldr	r3, [pc, #12]	; (8012ca8 <_ZN8touchgfx3HAL11getInstanceEv+0x14>)
 8012c9a:	681b      	ldr	r3, [r3, #0]
    }
 8012c9c:	4618      	mov	r0, r3
 8012c9e:	46bd      	mov	sp, r7
 8012ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ca4:	4770      	bx	lr
 8012ca6:	bf00      	nop
 8012ca8:	20006df8 	.word	0x20006df8

08012cac <_ZN8touchgfx3HAL3lcdEv>:
    /**
     * Gets a reference to the LCD.
     *
     * @return A reference to the LCD.
     */
    static LCD& lcd()
 8012cac:	b480      	push	{r7}
 8012cae:	af00      	add	r7, sp, #0
    {
        if (instance->useAuxiliaryLCD && instance->auxiliaryLCD)
 8012cb0:	4b0b      	ldr	r3, [pc, #44]	; (8012ce0 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 8012cb2:	681b      	ldr	r3, [r3, #0]
 8012cb4:	f893 3076 	ldrb.w	r3, [r3, #118]	; 0x76
 8012cb8:	2b00      	cmp	r3, #0
 8012cba:	d008      	beq.n	8012cce <_ZN8touchgfx3HAL3lcdEv+0x22>
 8012cbc:	4b08      	ldr	r3, [pc, #32]	; (8012ce0 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 8012cbe:	681b      	ldr	r3, [r3, #0]
 8012cc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8012cc2:	2b00      	cmp	r3, #0
 8012cc4:	d003      	beq.n	8012cce <_ZN8touchgfx3HAL3lcdEv+0x22>
        {
            return *instance->auxiliaryLCD;
 8012cc6:	4b06      	ldr	r3, [pc, #24]	; (8012ce0 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 8012cc8:	681b      	ldr	r3, [r3, #0]
 8012cca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8012ccc:	e002      	b.n	8012cd4 <_ZN8touchgfx3HAL3lcdEv+0x28>
        }
        return instance->lcdRef;
 8012cce:	4b04      	ldr	r3, [pc, #16]	; (8012ce0 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 8012cd0:	681b      	ldr	r3, [r3, #0]
 8012cd2:	689b      	ldr	r3, [r3, #8]
    }
 8012cd4:	4618      	mov	r0, r3
 8012cd6:	46bd      	mov	sp, r7
 8012cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012cdc:	4770      	bx	lr
 8012cde:	bf00      	nop
 8012ce0:	20006df8 	.word	0x20006df8

08012ce4 <_ZN8touchgfx8Keyboard6LayoutD1Ev>:

    /**
     * Definition of the keyboard layout. The keyboard can handle changing layouts, so
     * different keyboard modes can be implemented by changing layouts and key mappings.
     */
    struct Layout
 8012ce4:	b580      	push	{r7, lr}
 8012ce6:	b082      	sub	sp, #8
 8012ce8:	af00      	add	r7, sp, #0
 8012cea:	6078      	str	r0, [r7, #4]
 8012cec:	687b      	ldr	r3, [r7, #4]
 8012cee:	331c      	adds	r3, #28
 8012cf0:	4618      	mov	r0, r3
 8012cf2:	f7ff fb19 	bl	8012328 <_ZN8touchgfx9TypedTextD1Ev>
 8012cf6:	687b      	ldr	r3, [r7, #4]
 8012cf8:	4618      	mov	r0, r3
 8012cfa:	3708      	adds	r7, #8
 8012cfc:	46bd      	mov	sp, r7
 8012cfe:	bd80      	pop	{r7, pc}

08012d00 <_Z41__static_initialization_and_destruction_0ii>:
}

void FrontendApplicationBase::gotoSyringeSelectionScreenWipeTransitionSouthImpl()
{
    touchgfx::makeTransition<SyringeSelectionView, SyringeSelectionPresenter, touchgfx::WipeTransition<SOUTH>, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
}
 8012d00:	b590      	push	{r4, r7, lr}
 8012d02:	b085      	sub	sp, #20
 8012d04:	af02      	add	r7, sp, #8
 8012d06:	6078      	str	r0, [r7, #4]
 8012d08:	6039      	str	r1, [r7, #0]
 8012d0a:	687b      	ldr	r3, [r7, #4]
 8012d0c:	2b01      	cmp	r3, #1
 8012d0e:	f040 81d3 	bne.w	80130b8 <_Z41__static_initialization_and_destruction_0ii+0x3b8>
 8012d12:	683b      	ldr	r3, [r7, #0]
 8012d14:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012d18:	4293      	cmp	r3, r2
 8012d1a:	f040 81cd 	bne.w	80130b8 <_Z41__static_initialization_and_destruction_0ii+0x3b8>
    {26, Rect(63 + 28 * 3, 149, 26, 40), BITMAP_KEYBOARD_KEY_HIGHLIGHTED_ID},
    {27, Rect(63 + 28 * 4, 149, 26, 40), BITMAP_KEYBOARD_KEY_HIGHLIGHTED_ID},
    {28, Rect(63 + 28 * 5, 149, 26, 40), BITMAP_KEYBOARD_KEY_HIGHLIGHTED_ID},
    {29, Rect(63 + 28 * 6, 149, 26, 40), BITMAP_KEYBOARD_KEY_HIGHLIGHTED_ID},
    {30, Rect(62, 193, 252, 40), BITMAP_KEYBOARD_SPACE_HIGHLIGHTED_ID}
};
 8012d1e:	4cda      	ldr	r4, [pc, #872]	; (8013088 <_Z41__static_initialization_and_destruction_0ii+0x388>)
 8012d20:	2301      	movs	r3, #1
 8012d22:	7023      	strb	r3, [r4, #0]
 8012d24:	1ca0      	adds	r0, r4, #2
 8012d26:	2328      	movs	r3, #40	; 0x28
 8012d28:	9300      	str	r3, [sp, #0]
 8012d2a:	231a      	movs	r3, #26
 8012d2c:	223d      	movs	r2, #61	; 0x3d
 8012d2e:	2107      	movs	r1, #7
 8012d30:	f7ff ff5c 	bl	8012bec <_ZN8touchgfx4RectC1Essss>
 8012d34:	2328      	movs	r3, #40	; 0x28
 8012d36:	8163      	strh	r3, [r4, #10]
 8012d38:	340c      	adds	r4, #12
 8012d3a:	2302      	movs	r3, #2
 8012d3c:	7023      	strb	r3, [r4, #0]
 8012d3e:	1ca0      	adds	r0, r4, #2
 8012d40:	2328      	movs	r3, #40	; 0x28
 8012d42:	9300      	str	r3, [sp, #0]
 8012d44:	231a      	movs	r3, #26
 8012d46:	223d      	movs	r2, #61	; 0x3d
 8012d48:	2123      	movs	r1, #35	; 0x23
 8012d4a:	f7ff ff4f 	bl	8012bec <_ZN8touchgfx4RectC1Essss>
 8012d4e:	2328      	movs	r3, #40	; 0x28
 8012d50:	8163      	strh	r3, [r4, #10]
 8012d52:	340c      	adds	r4, #12
 8012d54:	2303      	movs	r3, #3
 8012d56:	7023      	strb	r3, [r4, #0]
 8012d58:	1ca0      	adds	r0, r4, #2
 8012d5a:	2328      	movs	r3, #40	; 0x28
 8012d5c:	9300      	str	r3, [sp, #0]
 8012d5e:	231a      	movs	r3, #26
 8012d60:	223d      	movs	r2, #61	; 0x3d
 8012d62:	213f      	movs	r1, #63	; 0x3f
 8012d64:	f7ff ff42 	bl	8012bec <_ZN8touchgfx4RectC1Essss>
 8012d68:	2328      	movs	r3, #40	; 0x28
 8012d6a:	8163      	strh	r3, [r4, #10]
 8012d6c:	340c      	adds	r4, #12
 8012d6e:	2304      	movs	r3, #4
 8012d70:	7023      	strb	r3, [r4, #0]
 8012d72:	1ca0      	adds	r0, r4, #2
 8012d74:	2328      	movs	r3, #40	; 0x28
 8012d76:	9300      	str	r3, [sp, #0]
 8012d78:	231a      	movs	r3, #26
 8012d7a:	223d      	movs	r2, #61	; 0x3d
 8012d7c:	215b      	movs	r1, #91	; 0x5b
 8012d7e:	f7ff ff35 	bl	8012bec <_ZN8touchgfx4RectC1Essss>
 8012d82:	2328      	movs	r3, #40	; 0x28
 8012d84:	8163      	strh	r3, [r4, #10]
 8012d86:	340c      	adds	r4, #12
 8012d88:	2305      	movs	r3, #5
 8012d8a:	7023      	strb	r3, [r4, #0]
 8012d8c:	1ca0      	adds	r0, r4, #2
 8012d8e:	2328      	movs	r3, #40	; 0x28
 8012d90:	9300      	str	r3, [sp, #0]
 8012d92:	231a      	movs	r3, #26
 8012d94:	223d      	movs	r2, #61	; 0x3d
 8012d96:	2177      	movs	r1, #119	; 0x77
 8012d98:	f7ff ff28 	bl	8012bec <_ZN8touchgfx4RectC1Essss>
 8012d9c:	2328      	movs	r3, #40	; 0x28
 8012d9e:	8163      	strh	r3, [r4, #10]
 8012da0:	340c      	adds	r4, #12
 8012da2:	2306      	movs	r3, #6
 8012da4:	7023      	strb	r3, [r4, #0]
 8012da6:	1ca0      	adds	r0, r4, #2
 8012da8:	2328      	movs	r3, #40	; 0x28
 8012daa:	9300      	str	r3, [sp, #0]
 8012dac:	231a      	movs	r3, #26
 8012dae:	223d      	movs	r2, #61	; 0x3d
 8012db0:	2193      	movs	r1, #147	; 0x93
 8012db2:	f7ff ff1b 	bl	8012bec <_ZN8touchgfx4RectC1Essss>
 8012db6:	2328      	movs	r3, #40	; 0x28
 8012db8:	8163      	strh	r3, [r4, #10]
 8012dba:	340c      	adds	r4, #12
 8012dbc:	2307      	movs	r3, #7
 8012dbe:	7023      	strb	r3, [r4, #0]
 8012dc0:	1ca0      	adds	r0, r4, #2
 8012dc2:	2328      	movs	r3, #40	; 0x28
 8012dc4:	9300      	str	r3, [sp, #0]
 8012dc6:	231a      	movs	r3, #26
 8012dc8:	223d      	movs	r2, #61	; 0x3d
 8012dca:	21af      	movs	r1, #175	; 0xaf
 8012dcc:	f7ff ff0e 	bl	8012bec <_ZN8touchgfx4RectC1Essss>
 8012dd0:	2328      	movs	r3, #40	; 0x28
 8012dd2:	8163      	strh	r3, [r4, #10]
 8012dd4:	340c      	adds	r4, #12
 8012dd6:	2308      	movs	r3, #8
 8012dd8:	7023      	strb	r3, [r4, #0]
 8012dda:	1ca0      	adds	r0, r4, #2
 8012ddc:	2328      	movs	r3, #40	; 0x28
 8012dde:	9300      	str	r3, [sp, #0]
 8012de0:	231a      	movs	r3, #26
 8012de2:	223d      	movs	r2, #61	; 0x3d
 8012de4:	21cb      	movs	r1, #203	; 0xcb
 8012de6:	f7ff ff01 	bl	8012bec <_ZN8touchgfx4RectC1Essss>
 8012dea:	2328      	movs	r3, #40	; 0x28
 8012dec:	8163      	strh	r3, [r4, #10]
 8012dee:	340c      	adds	r4, #12
 8012df0:	2309      	movs	r3, #9
 8012df2:	7023      	strb	r3, [r4, #0]
 8012df4:	1ca0      	adds	r0, r4, #2
 8012df6:	2328      	movs	r3, #40	; 0x28
 8012df8:	9300      	str	r3, [sp, #0]
 8012dfa:	231a      	movs	r3, #26
 8012dfc:	223d      	movs	r2, #61	; 0x3d
 8012dfe:	21e7      	movs	r1, #231	; 0xe7
 8012e00:	f7ff fef4 	bl	8012bec <_ZN8touchgfx4RectC1Essss>
 8012e04:	2328      	movs	r3, #40	; 0x28
 8012e06:	8163      	strh	r3, [r4, #10]
 8012e08:	340c      	adds	r4, #12
 8012e0a:	230a      	movs	r3, #10
 8012e0c:	7023      	strb	r3, [r4, #0]
 8012e0e:	1ca0      	adds	r0, r4, #2
 8012e10:	2328      	movs	r3, #40	; 0x28
 8012e12:	9300      	str	r3, [sp, #0]
 8012e14:	231a      	movs	r3, #26
 8012e16:	223d      	movs	r2, #61	; 0x3d
 8012e18:	f240 1103 	movw	r1, #259	; 0x103
 8012e1c:	f7ff fee6 	bl	8012bec <_ZN8touchgfx4RectC1Essss>
 8012e20:	2328      	movs	r3, #40	; 0x28
 8012e22:	8163      	strh	r3, [r4, #10]
 8012e24:	340c      	adds	r4, #12
 8012e26:	230b      	movs	r3, #11
 8012e28:	7023      	strb	r3, [r4, #0]
 8012e2a:	1ca0      	adds	r0, r4, #2
 8012e2c:	2328      	movs	r3, #40	; 0x28
 8012e2e:	9300      	str	r3, [sp, #0]
 8012e30:	231a      	movs	r3, #26
 8012e32:	223d      	movs	r2, #61	; 0x3d
 8012e34:	f240 111f 	movw	r1, #287	; 0x11f
 8012e38:	f7ff fed8 	bl	8012bec <_ZN8touchgfx4RectC1Essss>
 8012e3c:	2328      	movs	r3, #40	; 0x28
 8012e3e:	8163      	strh	r3, [r4, #10]
 8012e40:	340c      	adds	r4, #12
 8012e42:	230c      	movs	r3, #12
 8012e44:	7023      	strb	r3, [r4, #0]
 8012e46:	1ca0      	adds	r0, r4, #2
 8012e48:	2328      	movs	r3, #40	; 0x28
 8012e4a:	9300      	str	r3, [sp, #0]
 8012e4c:	231a      	movs	r3, #26
 8012e4e:	2269      	movs	r2, #105	; 0x69
 8012e50:	2107      	movs	r1, #7
 8012e52:	f7ff fecb 	bl	8012bec <_ZN8touchgfx4RectC1Essss>
 8012e56:	2328      	movs	r3, #40	; 0x28
 8012e58:	8163      	strh	r3, [r4, #10]
 8012e5a:	340c      	adds	r4, #12
 8012e5c:	230d      	movs	r3, #13
 8012e5e:	7023      	strb	r3, [r4, #0]
 8012e60:	1ca0      	adds	r0, r4, #2
 8012e62:	2328      	movs	r3, #40	; 0x28
 8012e64:	9300      	str	r3, [sp, #0]
 8012e66:	231a      	movs	r3, #26
 8012e68:	2269      	movs	r2, #105	; 0x69
 8012e6a:	2123      	movs	r1, #35	; 0x23
 8012e6c:	f7ff febe 	bl	8012bec <_ZN8touchgfx4RectC1Essss>
 8012e70:	2328      	movs	r3, #40	; 0x28
 8012e72:	8163      	strh	r3, [r4, #10]
 8012e74:	340c      	adds	r4, #12
 8012e76:	230e      	movs	r3, #14
 8012e78:	7023      	strb	r3, [r4, #0]
 8012e7a:	1ca0      	adds	r0, r4, #2
 8012e7c:	2328      	movs	r3, #40	; 0x28
 8012e7e:	9300      	str	r3, [sp, #0]
 8012e80:	231a      	movs	r3, #26
 8012e82:	2269      	movs	r2, #105	; 0x69
 8012e84:	213f      	movs	r1, #63	; 0x3f
 8012e86:	f7ff feb1 	bl	8012bec <_ZN8touchgfx4RectC1Essss>
 8012e8a:	2328      	movs	r3, #40	; 0x28
 8012e8c:	8163      	strh	r3, [r4, #10]
 8012e8e:	340c      	adds	r4, #12
 8012e90:	230f      	movs	r3, #15
 8012e92:	7023      	strb	r3, [r4, #0]
 8012e94:	1ca0      	adds	r0, r4, #2
 8012e96:	2328      	movs	r3, #40	; 0x28
 8012e98:	9300      	str	r3, [sp, #0]
 8012e9a:	231a      	movs	r3, #26
 8012e9c:	2269      	movs	r2, #105	; 0x69
 8012e9e:	215b      	movs	r1, #91	; 0x5b
 8012ea0:	f7ff fea4 	bl	8012bec <_ZN8touchgfx4RectC1Essss>
 8012ea4:	2328      	movs	r3, #40	; 0x28
 8012ea6:	8163      	strh	r3, [r4, #10]
 8012ea8:	340c      	adds	r4, #12
 8012eaa:	2310      	movs	r3, #16
 8012eac:	7023      	strb	r3, [r4, #0]
 8012eae:	1ca0      	adds	r0, r4, #2
 8012eb0:	2328      	movs	r3, #40	; 0x28
 8012eb2:	9300      	str	r3, [sp, #0]
 8012eb4:	231a      	movs	r3, #26
 8012eb6:	2269      	movs	r2, #105	; 0x69
 8012eb8:	2177      	movs	r1, #119	; 0x77
 8012eba:	f7ff fe97 	bl	8012bec <_ZN8touchgfx4RectC1Essss>
 8012ebe:	2328      	movs	r3, #40	; 0x28
 8012ec0:	8163      	strh	r3, [r4, #10]
 8012ec2:	340c      	adds	r4, #12
 8012ec4:	2311      	movs	r3, #17
 8012ec6:	7023      	strb	r3, [r4, #0]
 8012ec8:	1ca0      	adds	r0, r4, #2
 8012eca:	2328      	movs	r3, #40	; 0x28
 8012ecc:	9300      	str	r3, [sp, #0]
 8012ece:	231a      	movs	r3, #26
 8012ed0:	2269      	movs	r2, #105	; 0x69
 8012ed2:	2193      	movs	r1, #147	; 0x93
 8012ed4:	f7ff fe8a 	bl	8012bec <_ZN8touchgfx4RectC1Essss>
 8012ed8:	2328      	movs	r3, #40	; 0x28
 8012eda:	8163      	strh	r3, [r4, #10]
 8012edc:	340c      	adds	r4, #12
 8012ede:	2312      	movs	r3, #18
 8012ee0:	7023      	strb	r3, [r4, #0]
 8012ee2:	1ca0      	adds	r0, r4, #2
 8012ee4:	2328      	movs	r3, #40	; 0x28
 8012ee6:	9300      	str	r3, [sp, #0]
 8012ee8:	231a      	movs	r3, #26
 8012eea:	2269      	movs	r2, #105	; 0x69
 8012eec:	21af      	movs	r1, #175	; 0xaf
 8012eee:	f7ff fe7d 	bl	8012bec <_ZN8touchgfx4RectC1Essss>
 8012ef2:	2328      	movs	r3, #40	; 0x28
 8012ef4:	8163      	strh	r3, [r4, #10]
 8012ef6:	340c      	adds	r4, #12
 8012ef8:	2313      	movs	r3, #19
 8012efa:	7023      	strb	r3, [r4, #0]
 8012efc:	1ca0      	adds	r0, r4, #2
 8012efe:	2328      	movs	r3, #40	; 0x28
 8012f00:	9300      	str	r3, [sp, #0]
 8012f02:	231a      	movs	r3, #26
 8012f04:	2269      	movs	r2, #105	; 0x69
 8012f06:	21cb      	movs	r1, #203	; 0xcb
 8012f08:	f7ff fe70 	bl	8012bec <_ZN8touchgfx4RectC1Essss>
 8012f0c:	2328      	movs	r3, #40	; 0x28
 8012f0e:	8163      	strh	r3, [r4, #10]
 8012f10:	340c      	adds	r4, #12
 8012f12:	2314      	movs	r3, #20
 8012f14:	7023      	strb	r3, [r4, #0]
 8012f16:	1ca0      	adds	r0, r4, #2
 8012f18:	2328      	movs	r3, #40	; 0x28
 8012f1a:	9300      	str	r3, [sp, #0]
 8012f1c:	231a      	movs	r3, #26
 8012f1e:	2269      	movs	r2, #105	; 0x69
 8012f20:	21e7      	movs	r1, #231	; 0xe7
 8012f22:	f7ff fe63 	bl	8012bec <_ZN8touchgfx4RectC1Essss>
 8012f26:	2328      	movs	r3, #40	; 0x28
 8012f28:	8163      	strh	r3, [r4, #10]
 8012f2a:	340c      	adds	r4, #12
 8012f2c:	2315      	movs	r3, #21
 8012f2e:	7023      	strb	r3, [r4, #0]
 8012f30:	1ca0      	adds	r0, r4, #2
 8012f32:	2328      	movs	r3, #40	; 0x28
 8012f34:	9300      	str	r3, [sp, #0]
 8012f36:	231a      	movs	r3, #26
 8012f38:	2269      	movs	r2, #105	; 0x69
 8012f3a:	f240 1103 	movw	r1, #259	; 0x103
 8012f3e:	f7ff fe55 	bl	8012bec <_ZN8touchgfx4RectC1Essss>
 8012f42:	2328      	movs	r3, #40	; 0x28
 8012f44:	8163      	strh	r3, [r4, #10]
 8012f46:	340c      	adds	r4, #12
 8012f48:	2316      	movs	r3, #22
 8012f4a:	7023      	strb	r3, [r4, #0]
 8012f4c:	1ca0      	adds	r0, r4, #2
 8012f4e:	2328      	movs	r3, #40	; 0x28
 8012f50:	9300      	str	r3, [sp, #0]
 8012f52:	231a      	movs	r3, #26
 8012f54:	2269      	movs	r2, #105	; 0x69
 8012f56:	f240 111f 	movw	r1, #287	; 0x11f
 8012f5a:	f7ff fe47 	bl	8012bec <_ZN8touchgfx4RectC1Essss>
 8012f5e:	2328      	movs	r3, #40	; 0x28
 8012f60:	8163      	strh	r3, [r4, #10]
 8012f62:	340c      	adds	r4, #12
 8012f64:	2317      	movs	r3, #23
 8012f66:	7023      	strb	r3, [r4, #0]
 8012f68:	1ca0      	adds	r0, r4, #2
 8012f6a:	2328      	movs	r3, #40	; 0x28
 8012f6c:	9300      	str	r3, [sp, #0]
 8012f6e:	231a      	movs	r3, #26
 8012f70:	2295      	movs	r2, #149	; 0x95
 8012f72:	213f      	movs	r1, #63	; 0x3f
 8012f74:	f7ff fe3a 	bl	8012bec <_ZN8touchgfx4RectC1Essss>
 8012f78:	2328      	movs	r3, #40	; 0x28
 8012f7a:	8163      	strh	r3, [r4, #10]
 8012f7c:	340c      	adds	r4, #12
 8012f7e:	2318      	movs	r3, #24
 8012f80:	7023      	strb	r3, [r4, #0]
 8012f82:	1ca0      	adds	r0, r4, #2
 8012f84:	2328      	movs	r3, #40	; 0x28
 8012f86:	9300      	str	r3, [sp, #0]
 8012f88:	231a      	movs	r3, #26
 8012f8a:	2295      	movs	r2, #149	; 0x95
 8012f8c:	215b      	movs	r1, #91	; 0x5b
 8012f8e:	f7ff fe2d 	bl	8012bec <_ZN8touchgfx4RectC1Essss>
 8012f92:	2328      	movs	r3, #40	; 0x28
 8012f94:	8163      	strh	r3, [r4, #10]
 8012f96:	340c      	adds	r4, #12
 8012f98:	2319      	movs	r3, #25
 8012f9a:	7023      	strb	r3, [r4, #0]
 8012f9c:	1ca0      	adds	r0, r4, #2
 8012f9e:	2328      	movs	r3, #40	; 0x28
 8012fa0:	9300      	str	r3, [sp, #0]
 8012fa2:	231a      	movs	r3, #26
 8012fa4:	2295      	movs	r2, #149	; 0x95
 8012fa6:	2177      	movs	r1, #119	; 0x77
 8012fa8:	f7ff fe20 	bl	8012bec <_ZN8touchgfx4RectC1Essss>
 8012fac:	2328      	movs	r3, #40	; 0x28
 8012fae:	8163      	strh	r3, [r4, #10]
 8012fb0:	340c      	adds	r4, #12
 8012fb2:	231a      	movs	r3, #26
 8012fb4:	7023      	strb	r3, [r4, #0]
 8012fb6:	1ca0      	adds	r0, r4, #2
 8012fb8:	2328      	movs	r3, #40	; 0x28
 8012fba:	9300      	str	r3, [sp, #0]
 8012fbc:	231a      	movs	r3, #26
 8012fbe:	2295      	movs	r2, #149	; 0x95
 8012fc0:	2193      	movs	r1, #147	; 0x93
 8012fc2:	f7ff fe13 	bl	8012bec <_ZN8touchgfx4RectC1Essss>
 8012fc6:	2328      	movs	r3, #40	; 0x28
 8012fc8:	8163      	strh	r3, [r4, #10]
 8012fca:	340c      	adds	r4, #12
 8012fcc:	231b      	movs	r3, #27
 8012fce:	7023      	strb	r3, [r4, #0]
 8012fd0:	1ca0      	adds	r0, r4, #2
 8012fd2:	2328      	movs	r3, #40	; 0x28
 8012fd4:	9300      	str	r3, [sp, #0]
 8012fd6:	231a      	movs	r3, #26
 8012fd8:	2295      	movs	r2, #149	; 0x95
 8012fda:	21af      	movs	r1, #175	; 0xaf
 8012fdc:	f7ff fe06 	bl	8012bec <_ZN8touchgfx4RectC1Essss>
 8012fe0:	2328      	movs	r3, #40	; 0x28
 8012fe2:	8163      	strh	r3, [r4, #10]
 8012fe4:	340c      	adds	r4, #12
 8012fe6:	231c      	movs	r3, #28
 8012fe8:	7023      	strb	r3, [r4, #0]
 8012fea:	1ca0      	adds	r0, r4, #2
 8012fec:	2328      	movs	r3, #40	; 0x28
 8012fee:	9300      	str	r3, [sp, #0]
 8012ff0:	231a      	movs	r3, #26
 8012ff2:	2295      	movs	r2, #149	; 0x95
 8012ff4:	21cb      	movs	r1, #203	; 0xcb
 8012ff6:	f7ff fdf9 	bl	8012bec <_ZN8touchgfx4RectC1Essss>
 8012ffa:	2328      	movs	r3, #40	; 0x28
 8012ffc:	8163      	strh	r3, [r4, #10]
 8012ffe:	340c      	adds	r4, #12
 8013000:	231d      	movs	r3, #29
 8013002:	7023      	strb	r3, [r4, #0]
 8013004:	1ca0      	adds	r0, r4, #2
 8013006:	2328      	movs	r3, #40	; 0x28
 8013008:	9300      	str	r3, [sp, #0]
 801300a:	231a      	movs	r3, #26
 801300c:	2295      	movs	r2, #149	; 0x95
 801300e:	21e7      	movs	r1, #231	; 0xe7
 8013010:	f7ff fdec 	bl	8012bec <_ZN8touchgfx4RectC1Essss>
 8013014:	2328      	movs	r3, #40	; 0x28
 8013016:	8163      	strh	r3, [r4, #10]
 8013018:	340c      	adds	r4, #12
 801301a:	231e      	movs	r3, #30
 801301c:	7023      	strb	r3, [r4, #0]
 801301e:	1ca0      	adds	r0, r4, #2
 8013020:	2328      	movs	r3, #40	; 0x28
 8013022:	9300      	str	r3, [sp, #0]
 8013024:	23fc      	movs	r3, #252	; 0xfc
 8013026:	22c1      	movs	r2, #193	; 0xc1
 8013028:	213e      	movs	r1, #62	; 0x3e
 801302a:	f7ff fddf 	bl	8012bec <_ZN8touchgfx4RectC1Essss>
 801302e:	232b      	movs	r3, #43	; 0x2b
 8013030:	8163      	strh	r3, [r4, #10]
static Keyboard::CallbackArea callbackAreas[3] =
{
    {Rect(5, 149, 56, 40), 0, BITMAP_KEYBOARD_KEY_SHIFT_HIGHLIGHTED_ID},     // caps-lock
    {Rect(258, 149, 56, 40), 0, BITMAP_KEYBOARD_KEY_DELETE_HIGHLIGHTED_ID},  // backspace
    {Rect(5, 193, 56, 40), 0, BITMAP_KEYBOARD_KEY_NUM_HIGHLIGHTED_ID},       // mode
};
 8013032:	4c16      	ldr	r4, [pc, #88]	; (801308c <_Z41__static_initialization_and_destruction_0ii+0x38c>)
 8013034:	4620      	mov	r0, r4
 8013036:	2328      	movs	r3, #40	; 0x28
 8013038:	9300      	str	r3, [sp, #0]
 801303a:	2338      	movs	r3, #56	; 0x38
 801303c:	2295      	movs	r2, #149	; 0x95
 801303e:	2105      	movs	r1, #5
 8013040:	f7ff fdd4 	bl	8012bec <_ZN8touchgfx4RectC1Essss>
 8013044:	2300      	movs	r3, #0
 8013046:	60a3      	str	r3, [r4, #8]
 8013048:	232a      	movs	r3, #42	; 0x2a
 801304a:	81a3      	strh	r3, [r4, #12]
 801304c:	3410      	adds	r4, #16
 801304e:	4620      	mov	r0, r4
 8013050:	2328      	movs	r3, #40	; 0x28
 8013052:	9300      	str	r3, [sp, #0]
 8013054:	2338      	movs	r3, #56	; 0x38
 8013056:	2295      	movs	r2, #149	; 0x95
 8013058:	f44f 7181 	mov.w	r1, #258	; 0x102
 801305c:	f7ff fdc6 	bl	8012bec <_ZN8touchgfx4RectC1Essss>
 8013060:	2300      	movs	r3, #0
 8013062:	60a3      	str	r3, [r4, #8]
 8013064:	2327      	movs	r3, #39	; 0x27
 8013066:	81a3      	strh	r3, [r4, #12]
 8013068:	3410      	adds	r4, #16
 801306a:	4620      	mov	r0, r4
 801306c:	2328      	movs	r3, #40	; 0x28
 801306e:	9300      	str	r3, [sp, #0]
 8013070:	2338      	movs	r3, #56	; 0x38
 8013072:	22c1      	movs	r2, #193	; 0xc1
 8013074:	2105      	movs	r1, #5
 8013076:	f7ff fdb9 	bl	8012bec <_ZN8touchgfx4RectC1Essss>
 801307a:	2300      	movs	r3, #0
 801307c:	60a3      	str	r3, [r4, #8]
 801307e:	2329      	movs	r3, #41	; 0x29
 8013080:	81a3      	strh	r3, [r4, #12]
#else
#error Unknown USE_BPP
#endif
    Typography::KEYBOARD,
    0
};
 8013082:	2328      	movs	r3, #40	; 0x28
 8013084:	9300      	str	r3, [sp, #0]
 8013086:	e003      	b.n	8013090 <_Z41__static_initialization_and_destruction_0ii+0x390>
 8013088:	2000558c 	.word	0x2000558c
 801308c:	200056f4 	.word	0x200056f4
 8013090:	f44f 739a 	mov.w	r3, #308	; 0x134
 8013094:	220a      	movs	r2, #10
 8013096:	210f      	movs	r1, #15
 8013098:	480f      	ldr	r0, [pc, #60]	; (80130d8 <_Z41__static_initialization_and_destruction_0ii+0x3d8>)
 801309a:	f7ff fda7 	bl	8012bec <_ZN8touchgfx4RectC1Essss>
 801309e:	2130      	movs	r1, #48	; 0x30
 80130a0:	480e      	ldr	r0, [pc, #56]	; (80130dc <_Z41__static_initialization_and_destruction_0ii+0x3dc>)
 80130a2:	f7ff fde1 	bl	8012c68 <_ZN8touchgfx9TypedTextC1Et>
 80130a6:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80130aa:	480d      	ldr	r0, [pc, #52]	; (80130e0 <_Z41__static_initialization_and_destruction_0ii+0x3e0>)
 80130ac:	f7ff fd78 	bl	8012ba0 <_ZN8touchgfx9colortypeC1Em>
 80130b0:	2100      	movs	r1, #0
 80130b2:	480c      	ldr	r0, [pc, #48]	; (80130e4 <_Z41__static_initialization_and_destruction_0ii+0x3e4>)
 80130b4:	f7ff fd74 	bl	8012ba0 <_ZN8touchgfx9colortypeC1Em>
static const Keyboard::Layout layout =
 80130b8:	687b      	ldr	r3, [r7, #4]
 80130ba:	2b00      	cmp	r3, #0
 80130bc:	d107      	bne.n	80130ce <_Z41__static_initialization_and_destruction_0ii+0x3ce>
 80130be:	683b      	ldr	r3, [r7, #0]
 80130c0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80130c4:	4293      	cmp	r3, r2
 80130c6:	d102      	bne.n	80130ce <_Z41__static_initialization_and_destruction_0ii+0x3ce>
 80130c8:	4807      	ldr	r0, [pc, #28]	; (80130e8 <_Z41__static_initialization_and_destruction_0ii+0x3e8>)
 80130ca:	f7ff fe0b 	bl	8012ce4 <_ZN8touchgfx8Keyboard6LayoutD1Ev>
 80130ce:	bf00      	nop
 80130d0:	370c      	adds	r7, #12
 80130d2:	46bd      	mov	sp, r7
 80130d4:	bd90      	pop	{r4, r7, pc}
 80130d6:	bf00      	nop
 80130d8:	20000026 	.word	0x20000026
 80130dc:	20000030 	.word	0x20000030
 80130e0:	20000038 	.word	0x20000038
 80130e4:	20000040 	.word	0x20000040
 80130e8:	20000014 	.word	0x20000014

080130ec <_GLOBAL__sub_I__ZN23FrontendApplicationBaseC2ER5ModelR12FrontendHeap>:
 80130ec:	b580      	push	{r7, lr}
 80130ee:	af00      	add	r7, sp, #0
 80130f0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80130f4:	2001      	movs	r0, #1
 80130f6:	f7ff fe03 	bl	8012d00 <_Z41__static_initialization_and_destruction_0ii>
 80130fa:	bd80      	pop	{r7, pc}

080130fc <_GLOBAL__sub_D__ZN23FrontendApplicationBaseC2ER5ModelR12FrontendHeap>:
 80130fc:	b580      	push	{r7, lr}
 80130fe:	af00      	add	r7, sp, #0
 8013100:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8013104:	2000      	movs	r0, #0
 8013106:	f7ff fdfb 	bl	8012d00 <_Z41__static_initialization_and_destruction_0ii>
 801310a:	bd80      	pop	{r7, pc}

0801310c <_ZNK8touchgfx4Font10getKerningEtPKNS_9GlyphNodeE>:
     * @param  prevChar The Unicode value of the previous character.
     * @param  glyph    the glyph object for the current character.
     *
     * @return The kerning distance between prevChar and glyph char.
     */
    virtual int8_t getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
 801310c:	b480      	push	{r7}
 801310e:	b085      	sub	sp, #20
 8013110:	af00      	add	r7, sp, #0
 8013112:	60f8      	str	r0, [r7, #12]
 8013114:	460b      	mov	r3, r1
 8013116:	607a      	str	r2, [r7, #4]
 8013118:	817b      	strh	r3, [r7, #10]
    {
        return 0;
 801311a:	2300      	movs	r3, #0
    }
 801311c:	4618      	mov	r0, r3
 801311e:	3714      	adds	r7, #20
 8013120:	46bd      	mov	sp, r7
 8013122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013126:	4770      	bx	lr

08013128 <_ZNK8touchgfx4Font12getGSUBTableEv>:
    /**
     * Gets GSUB table. Currently only used for Devanagari fonts.
     *
     * @return The GSUB table or null if font has GSUB no table.
     */
    virtual const uint16_t* getGSUBTable() const
 8013128:	b480      	push	{r7}
 801312a:	b083      	sub	sp, #12
 801312c:	af00      	add	r7, sp, #0
 801312e:	6078      	str	r0, [r7, #4]
    {
        return 0;
 8013130:	2300      	movs	r3, #0
    }
 8013132:	4618      	mov	r0, r3
 8013134:	370c      	adds	r7, #12
 8013136:	46bd      	mov	sp, r7
 8013138:	f85d 7b04 	ldr.w	r7, [sp], #4
 801313c:	4770      	bx	lr

0801313e <_ZNK8touchgfx4Font23getContextualFormsTableEv>:
    /**
     * Gets the contextual forms table used in arabic fonts.
     *
     * @return The FontContextualFormsTable or null if the font has no table.
     */
    virtual const FontContextualFormsTable* getContextualFormsTable() const
 801313e:	b480      	push	{r7}
 8013140:	b083      	sub	sp, #12
 8013142:	af00      	add	r7, sp, #0
 8013144:	6078      	str	r0, [r7, #4]
    {
        return 0;
 8013146:	2300      	movs	r3, #0
    }
 8013148:	4618      	mov	r0, r3
 801314a:	370c      	adds	r7, #12
 801314c:	46bd      	mov	sp, r7
 801314e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013152:	4770      	bx	lr

08013154 <_ZNK8touchgfx4Font14getStringWidthEPKtz>:
#include <touchgfx/hal/HAL.hpp>
#include <touchgfx/lcd/LCD.hpp>
#include <texts/TypedTextDatabase.hpp>

uint16_t touchgfx::Font::getStringWidth(const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 8013154:	b40e      	push	{r1, r2, r3}
 8013156:	b580      	push	{r7, lr}
 8013158:	b085      	sub	sp, #20
 801315a:	af00      	add	r7, sp, #0
 801315c:	6078      	str	r0, [r7, #4]
    va_list pArg;
    va_start(pArg, text);
 801315e:	f107 0320 	add.w	r3, r7, #32
 8013162:	60bb      	str	r3, [r7, #8]
    uint16_t width = getStringWidthLTR(TEXT_DIRECTION_LTR, text, pArg);
 8013164:	68bb      	ldr	r3, [r7, #8]
 8013166:	69fa      	ldr	r2, [r7, #28]
 8013168:	2100      	movs	r1, #0
 801316a:	6878      	ldr	r0, [r7, #4]
 801316c:	f004 feba 	bl	8017ee4 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
 8013170:	4603      	mov	r3, r0
 8013172:	81fb      	strh	r3, [r7, #14]
    va_end(pArg);
    return width;
 8013174:	89fb      	ldrh	r3, [r7, #14]
}
 8013176:	4618      	mov	r0, r3
 8013178:	3714      	adds	r7, #20
 801317a:	46bd      	mov	sp, r7
 801317c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8013180:	b003      	add	sp, #12
 8013182:	4770      	bx	lr

08013184 <_ZNK8touchgfx4Font14getStringWidthEhPKtz>:

uint16_t touchgfx::Font::getStringWidth(touchgfx::TextDirection textDirection, const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 8013184:	b40c      	push	{r2, r3}
 8013186:	b580      	push	{r7, lr}
 8013188:	b084      	sub	sp, #16
 801318a:	af00      	add	r7, sp, #0
 801318c:	6078      	str	r0, [r7, #4]
 801318e:	460b      	mov	r3, r1
 8013190:	70fb      	strb	r3, [r7, #3]
    va_list pArg;
    va_start(pArg, text);
 8013192:	f107 031c 	add.w	r3, r7, #28
 8013196:	60bb      	str	r3, [r7, #8]
    uint16_t width = getStringWidthLTR(textDirection, text, pArg);
 8013198:	78f9      	ldrb	r1, [r7, #3]
 801319a:	68bb      	ldr	r3, [r7, #8]
 801319c:	69ba      	ldr	r2, [r7, #24]
 801319e:	6878      	ldr	r0, [r7, #4]
 80131a0:	f004 fea0 	bl	8017ee4 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
 80131a4:	4603      	mov	r3, r0
 80131a6:	81fb      	strh	r3, [r7, #14]
    va_end(pArg);
    return width;
 80131a8:	89fb      	ldrh	r3, [r7, #14]
}
 80131aa:	4618      	mov	r0, r3
 80131ac:	3710      	adds	r7, #16
 80131ae:	46bd      	mov	sp, r7
 80131b0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80131b4:	b002      	add	sp, #8
 80131b6:	4770      	bx	lr

080131b8 <_ZN8touchgfx12TextProvider15getNextLigatureEh>:

touchgfx::Unicode::UnicodeChar touchgfx::TextProvider::getNextLigature(TextDirection direction)
{
 80131b8:	b580      	push	{r7, lr}
 80131ba:	b08a      	sub	sp, #40	; 0x28
 80131bc:	af00      	add	r7, sp, #0
 80131be:	6078      	str	r0, [r7, #4]
 80131c0:	460b      	mov	r3, r1
 80131c2:	70fb      	strb	r3, [r7, #3]
    if (fontGsubTable && nextCharacters.peekChar())
 80131c4:	687b      	ldr	r3, [r7, #4]
 80131c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80131c8:	2b00      	cmp	r3, #0
 80131ca:	d016      	beq.n	80131fa <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x42>
 80131cc:	687b      	ldr	r3, [r7, #4]
 80131ce:	3322      	adds	r3, #34	; 0x22
 80131d0:	627b      	str	r3, [r7, #36]	; 0x24
        {
            return used == size;
        }
        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar()
        {
            assert(used > 0);
 80131d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80131d4:	8adb      	ldrh	r3, [r3, #22]
 80131d6:	2b00      	cmp	r3, #0
 80131d8:	d105      	bne.n	80131e6 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x2e>
 80131da:	4b43      	ldr	r3, [pc, #268]	; (80132e8 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x130>)
 80131dc:	4a43      	ldr	r2, [pc, #268]	; (80132ec <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x134>)
 80131de:	21c0      	movs	r1, #192	; 0xc0
 80131e0:	4843      	ldr	r0, [pc, #268]	; (80132f0 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 80131e2:	f008 fa23 	bl	801b62c <__assert_func>
            return buffer[pos];
 80131e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80131e8:	8a9b      	ldrh	r3, [r3, #20]
 80131ea:	461a      	mov	r2, r3
 80131ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80131ee:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80131f2:	2b00      	cmp	r3, #0
 80131f4:	d001      	beq.n	80131fa <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x42>
 80131f6:	2301      	movs	r3, #1
 80131f8:	e000      	b.n	80131fc <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x44>
 80131fa:	2300      	movs	r3, #0
 80131fc:	2b00      	cmp	r3, #0
 80131fe:	d06a      	beq.n	80132d6 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x11e>
    {
        substituteGlyphs();
 8013200:	6878      	ldr	r0, [r7, #4]
 8013202:	f005 fd37 	bl	8018c74 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>
        if (nextCharacters.peekChar(1) == 0x093F) // Hindi I-matra
 8013206:	687b      	ldr	r3, [r7, #4]
 8013208:	3322      	adds	r3, #34	; 0x22
 801320a:	623b      	str	r3, [r7, #32]
 801320c:	2301      	movs	r3, #1
 801320e:	83fb      	strh	r3, [r7, #30]
        }
        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar(uint16_t offset)
        {
            assert(offset < used);
 8013210:	6a3b      	ldr	r3, [r7, #32]
 8013212:	8adb      	ldrh	r3, [r3, #22]
 8013214:	8bfa      	ldrh	r2, [r7, #30]
 8013216:	429a      	cmp	r2, r3
 8013218:	d305      	bcc.n	8013226 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x6e>
 801321a:	4b36      	ldr	r3, [pc, #216]	; (80132f4 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x13c>)
 801321c:	4a36      	ldr	r2, [pc, #216]	; (80132f8 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x140>)
 801321e:	21c5      	movs	r1, #197	; 0xc5
 8013220:	4833      	ldr	r0, [pc, #204]	; (80132f0 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 8013222:	f008 fa03 	bl	801b62c <__assert_func>
            const uint16_t index = pos + offset;
 8013226:	6a3b      	ldr	r3, [r7, #32]
 8013228:	8a9a      	ldrh	r2, [r3, #20]
 801322a:	8bfb      	ldrh	r3, [r7, #30]
 801322c:	4413      	add	r3, r2
 801322e:	83bb      	strh	r3, [r7, #28]
            return buffer[index < size ? index : index - size];
 8013230:	8bbb      	ldrh	r3, [r7, #28]
 8013232:	2b09      	cmp	r3, #9
 8013234:	d801      	bhi.n	801323a <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x82>
 8013236:	8bbb      	ldrh	r3, [r7, #28]
 8013238:	e001      	b.n	801323e <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x86>
 801323a:	8bbb      	ldrh	r3, [r7, #28]
 801323c:	3b0a      	subs	r3, #10
 801323e:	6a3a      	ldr	r2, [r7, #32]
 8013240:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8013244:	f640 123f 	movw	r2, #2367	; 0x93f
 8013248:	4293      	cmp	r3, r2
 801324a:	bf0c      	ite	eq
 801324c:	2301      	moveq	r3, #1
 801324e:	2300      	movne	r3, #0
 8013250:	b2db      	uxtb	r3, r3
 8013252:	2b00      	cmp	r3, #0
 8013254:	d03f      	beq.n	80132d6 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x11e>
        {
            nextCharacters.replaceAt1(nextCharacters.peekChar());
 8013256:	687b      	ldr	r3, [r7, #4]
 8013258:	3322      	adds	r3, #34	; 0x22
 801325a:	687a      	ldr	r2, [r7, #4]
 801325c:	3222      	adds	r2, #34	; 0x22
 801325e:	60ba      	str	r2, [r7, #8]
            assert(used > 0);
 8013260:	68ba      	ldr	r2, [r7, #8]
 8013262:	8ad2      	ldrh	r2, [r2, #22]
 8013264:	2a00      	cmp	r2, #0
 8013266:	d105      	bne.n	8013274 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xbc>
 8013268:	4b1f      	ldr	r3, [pc, #124]	; (80132e8 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x130>)
 801326a:	4a20      	ldr	r2, [pc, #128]	; (80132ec <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x134>)
 801326c:	21c0      	movs	r1, #192	; 0xc0
 801326e:	4820      	ldr	r0, [pc, #128]	; (80132f0 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 8013270:	f008 f9dc 	bl	801b62c <__assert_func>
            return buffer[pos];
 8013274:	68ba      	ldr	r2, [r7, #8]
 8013276:	8a92      	ldrh	r2, [r2, #20]
 8013278:	4611      	mov	r1, r2
 801327a:	68ba      	ldr	r2, [r7, #8]
 801327c:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 8013280:	613b      	str	r3, [r7, #16]
 8013282:	4613      	mov	r3, r2
 8013284:	81fb      	strh	r3, [r7, #14]
        {
            buffer[pos] = newChar;
        }
        FORCE_INLINE_FUNCTION void replaceAt1(Unicode::UnicodeChar newChar)
        {
            assert(used > 1);
 8013286:	693b      	ldr	r3, [r7, #16]
 8013288:	8adb      	ldrh	r3, [r3, #22]
 801328a:	2b01      	cmp	r3, #1
 801328c:	d806      	bhi.n	801329c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xe4>
 801328e:	4b1b      	ldr	r3, [pc, #108]	; (80132fc <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x144>)
 8013290:	4a1b      	ldr	r2, [pc, #108]	; (8013300 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x148>)
 8013292:	f240 110d 	movw	r1, #269	; 0x10d
 8013296:	4816      	ldr	r0, [pc, #88]	; (80132f0 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 8013298:	f008 f9c8 	bl	801b62c <__assert_func>
            const uint16_t index = pos + 1;
 801329c:	693b      	ldr	r3, [r7, #16]
 801329e:	8a9b      	ldrh	r3, [r3, #20]
 80132a0:	3301      	adds	r3, #1
 80132a2:	81bb      	strh	r3, [r7, #12]
            buffer[index < size ? index : 0] = newChar;
 80132a4:	89bb      	ldrh	r3, [r7, #12]
 80132a6:	2b09      	cmp	r3, #9
 80132a8:	d801      	bhi.n	80132ae <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xf6>
 80132aa:	89bb      	ldrh	r3, [r7, #12]
 80132ac:	e000      	b.n	80132b0 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xf8>
 80132ae:	2300      	movs	r3, #0
 80132b0:	693a      	ldr	r2, [r7, #16]
 80132b2:	89f9      	ldrh	r1, [r7, #14]
 80132b4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        }
 80132b8:	bf00      	nop
            nextCharacters.replaceAt0(0x093F);
 80132ba:	687b      	ldr	r3, [r7, #4]
 80132bc:	3322      	adds	r3, #34	; 0x22
 80132be:	61bb      	str	r3, [r7, #24]
 80132c0:	f640 133f 	movw	r3, #2367	; 0x93f
 80132c4:	82fb      	strh	r3, [r7, #22]
            buffer[pos] = newChar;
 80132c6:	69bb      	ldr	r3, [r7, #24]
 80132c8:	8a9b      	ldrh	r3, [r3, #20]
 80132ca:	4619      	mov	r1, r3
 80132cc:	69bb      	ldr	r3, [r7, #24]
 80132ce:	8afa      	ldrh	r2, [r7, #22]
 80132d0:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
        }
 80132d4:	bf00      	nop
        }
    }
    return getNextChar();
 80132d6:	6878      	ldr	r0, [r7, #4]
 80132d8:	f005 fbb0 	bl	8018a3c <_ZN8touchgfx12TextProvider11getNextCharEv>
 80132dc:	4603      	mov	r3, r0
}
 80132de:	4618      	mov	r0, r3
 80132e0:	3728      	adds	r7, #40	; 0x28
 80132e2:	46bd      	mov	sp, r7
 80132e4:	bd80      	pop	{r7, pc}
 80132e6:	bf00      	nop
 80132e8:	0801e590 	.word	0x0801e590
 80132ec:	0801e59c 	.word	0x0801e59c
 80132f0:	0801e648 	.word	0x0801e648
 80132f4:	0801e690 	.word	0x0801e690
 80132f8:	0801e6a0 	.word	0x0801e6a0
 80132fc:	0801e774 	.word	0x0801e774
 8013300:	0801e780 	.word	0x0801e780

08013304 <_ZN8touchgfx12TextProvider18initializeInternalEv>:

void touchgfx::TextProvider::initializeInternal()
{
 8013304:	b580      	push	{r7, lr}
 8013306:	b082      	sub	sp, #8
 8013308:	af00      	add	r7, sp, #0
 801330a:	6078      	str	r0, [r7, #4]
    fillInputBuffer();
 801330c:	6878      	ldr	r0, [r7, #4]
 801330e:	f005 fb4d 	bl	80189ac <_ZN8touchgfx12TextProvider15fillInputBufferEv>
}
 8013312:	bf00      	nop
 8013314:	3708      	adds	r7, #8
 8013316:	46bd      	mov	sp, r7
 8013318:	bd80      	pop	{r7, pc}
	...

0801331c <_ZN17TypedTextDatabase8getFontsEv>:
{
    return sizeof(typedText_database_DEFAULT) / sizeof(touchgfx::TypedText::TypedTextData);
}

const touchgfx::Font** getFonts()
{
 801331c:	b480      	push	{r7}
 801331e:	af00      	add	r7, sp, #0
    return touchgfx_fonts;
 8013320:	4b02      	ldr	r3, [pc, #8]	; (801332c <_ZN17TypedTextDatabase8getFontsEv+0x10>)
}
 8013322:	4618      	mov	r0, r3
 8013324:	46bd      	mov	sp, r7
 8013326:	f85d 7b04 	ldr.w	r7, [sp], #4
 801332a:	4770      	bx	lr
 801332c:	20005724 	.word	0x20005724

08013330 <_Z41__static_initialization_and_destruction_0ii>:
    case 9:
        touchgfx_fonts[9] = &(getFont_verdana_10_4bpp());
        break;
    }
}
} // namespace TypedTextDatabase
 8013330:	b580      	push	{r7, lr}
 8013332:	b082      	sub	sp, #8
 8013334:	af00      	add	r7, sp, #0
 8013336:	6078      	str	r0, [r7, #4]
 8013338:	6039      	str	r1, [r7, #0]
 801333a:	687b      	ldr	r3, [r7, #4]
 801333c:	2b01      	cmp	r3, #1
 801333e:	d136      	bne.n	80133ae <_Z41__static_initialization_and_destruction_0ii+0x7e>
 8013340:	683b      	ldr	r3, [r7, #0]
 8013342:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8013346:	4293      	cmp	r3, r2
 8013348:	d131      	bne.n	80133ae <_Z41__static_initialization_and_destruction_0ii+0x7e>
    &(getFont_verdana_20_4bpp()),
 801334a:	f7ff fb77 	bl	8012a3c <_Z23getFont_verdana_20_4bppv>
 801334e:	4603      	mov	r3, r0
};
 8013350:	4a19      	ldr	r2, [pc, #100]	; (80133b8 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 8013352:	6013      	str	r3, [r2, #0]
    &(getFont_AGENCYB_TTF_20_4bpp()),
 8013354:	f7ff f96e 	bl	8012634 <_Z27getFont_AGENCYB_TTF_20_4bppv>
 8013358:	4603      	mov	r3, r0
};
 801335a:	4a17      	ldr	r2, [pc, #92]	; (80133b8 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 801335c:	6053      	str	r3, [r2, #4]
    &(getFont_AGENCYB_TTF_50_4bpp()),
 801335e:	f7ff fac1 	bl	80128e4 <_Z27getFont_AGENCYB_TTF_50_4bppv>
 8013362:	4603      	mov	r3, r0
};
 8013364:	4a14      	ldr	r2, [pc, #80]	; (80133b8 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 8013366:	6093      	str	r3, [r2, #8]
    &(getFont_AGENCYB_TTF_30_4bpp()),
 8013368:	f7ff fa66 	bl	8012838 <_Z27getFont_AGENCYB_TTF_30_4bppv>
 801336c:	4603      	mov	r3, r0
};
 801336e:	4a12      	ldr	r2, [pc, #72]	; (80133b8 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 8013370:	60d3      	str	r3, [r2, #12]
    &(getFont_AGENCYB_TTF_14_4bpp()),
 8013372:	f7ff f909 	bl	8012588 <_Z27getFont_AGENCYB_TTF_14_4bppv>
 8013376:	4603      	mov	r3, r0
};
 8013378:	4a0f      	ldr	r2, [pc, #60]	; (80133b8 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 801337a:	6113      	str	r3, [r2, #16]
    &(getFont_AGENCYB_TTF_28_4bpp()),
 801337c:	f7ff fa06 	bl	801278c <_Z27getFont_AGENCYB_TTF_28_4bppv>
 8013380:	4603      	mov	r3, r0
};
 8013382:	4a0d      	ldr	r2, [pc, #52]	; (80133b8 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 8013384:	6153      	str	r3, [r2, #20]
    &(getFont_AGENCYB_TTF_24_4bpp()),
 8013386:	f7ff f9ab 	bl	80126e0 <_Z27getFont_AGENCYB_TTF_24_4bppv>
 801338a:	4603      	mov	r3, r0
};
 801338c:	4a0a      	ldr	r2, [pc, #40]	; (80133b8 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 801338e:	6193      	str	r3, [r2, #24]
    &(getFont_AGENCYB_TTF_12_4bpp()),
 8013390:	f7ff f8a4 	bl	80124dc <_Z27getFont_AGENCYB_TTF_12_4bppv>
 8013394:	4603      	mov	r3, r0
};
 8013396:	4a08      	ldr	r2, [pc, #32]	; (80133b8 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 8013398:	61d3      	str	r3, [r2, #28]
    &(getFont_verdana_40_4bpp()),
 801339a:	f7ff fba5 	bl	8012ae8 <_Z23getFont_verdana_40_4bppv>
 801339e:	4603      	mov	r3, r0
};
 80133a0:	4a05      	ldr	r2, [pc, #20]	; (80133b8 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 80133a2:	6213      	str	r3, [r2, #32]
    &(getFont_verdana_10_4bpp())
 80133a4:	f7ff faf4 	bl	8012990 <_Z23getFont_verdana_10_4bppv>
 80133a8:	4603      	mov	r3, r0
};
 80133aa:	4a03      	ldr	r2, [pc, #12]	; (80133b8 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 80133ac:	6253      	str	r3, [r2, #36]	; 0x24
} // namespace TypedTextDatabase
 80133ae:	bf00      	nop
 80133b0:	3708      	adds	r7, #8
 80133b2:	46bd      	mov	sp, r7
 80133b4:	bd80      	pop	{r7, pc}
 80133b6:	bf00      	nop
 80133b8:	20005724 	.word	0x20005724

080133bc <_GLOBAL__sub_I_touchgfx_fonts>:
 80133bc:	b580      	push	{r7, lr}
 80133be:	af00      	add	r7, sp, #0
 80133c0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80133c4:	2001      	movs	r0, #1
 80133c6:	f7ff ffb3 	bl	8013330 <_Z41__static_initialization_and_destruction_0ii>
 80133ca:	bd80      	pop	{r7, pc}

080133cc <_Z41__static_initialization_and_destruction_0ii>:
}

Unicode::UnicodeChar * CustomKeyboard::getBuffer()
{
	return keyboard.getBuffer();
}
 80133cc:	b590      	push	{r4, r7, lr}
 80133ce:	b085      	sub	sp, #20
 80133d0:	af02      	add	r7, sp, #8
 80133d2:	6078      	str	r0, [r7, #4]
 80133d4:	6039      	str	r1, [r7, #0]
 80133d6:	687b      	ldr	r3, [r7, #4]
 80133d8:	2b01      	cmp	r3, #1
 80133da:	f040 81d3 	bne.w	8013784 <_Z41__static_initialization_and_destruction_0ii+0x3b8>
 80133de:	683b      	ldr	r3, [r7, #0]
 80133e0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80133e4:	4293      	cmp	r3, r2
 80133e6:	f040 81cd 	bne.w	8013784 <_Z41__static_initialization_and_destruction_0ii+0x3b8>
};
 80133ea:	4cda      	ldr	r4, [pc, #872]	; (8013754 <_Z41__static_initialization_and_destruction_0ii+0x388>)
 80133ec:	2301      	movs	r3, #1
 80133ee:	7023      	strb	r3, [r4, #0]
 80133f0:	1ca0      	adds	r0, r4, #2
 80133f2:	2328      	movs	r3, #40	; 0x28
 80133f4:	9300      	str	r3, [sp, #0]
 80133f6:	231a      	movs	r3, #26
 80133f8:	223d      	movs	r2, #61	; 0x3d
 80133fa:	2107      	movs	r1, #7
 80133fc:	f7ff fbf6 	bl	8012bec <_ZN8touchgfx4RectC1Essss>
 8013400:	2328      	movs	r3, #40	; 0x28
 8013402:	8163      	strh	r3, [r4, #10]
 8013404:	340c      	adds	r4, #12
 8013406:	2302      	movs	r3, #2
 8013408:	7023      	strb	r3, [r4, #0]
 801340a:	1ca0      	adds	r0, r4, #2
 801340c:	2328      	movs	r3, #40	; 0x28
 801340e:	9300      	str	r3, [sp, #0]
 8013410:	231a      	movs	r3, #26
 8013412:	223d      	movs	r2, #61	; 0x3d
 8013414:	2123      	movs	r1, #35	; 0x23
 8013416:	f7ff fbe9 	bl	8012bec <_ZN8touchgfx4RectC1Essss>
 801341a:	2328      	movs	r3, #40	; 0x28
 801341c:	8163      	strh	r3, [r4, #10]
 801341e:	340c      	adds	r4, #12
 8013420:	2303      	movs	r3, #3
 8013422:	7023      	strb	r3, [r4, #0]
 8013424:	1ca0      	adds	r0, r4, #2
 8013426:	2328      	movs	r3, #40	; 0x28
 8013428:	9300      	str	r3, [sp, #0]
 801342a:	231a      	movs	r3, #26
 801342c:	223d      	movs	r2, #61	; 0x3d
 801342e:	213f      	movs	r1, #63	; 0x3f
 8013430:	f7ff fbdc 	bl	8012bec <_ZN8touchgfx4RectC1Essss>
 8013434:	2328      	movs	r3, #40	; 0x28
 8013436:	8163      	strh	r3, [r4, #10]
 8013438:	340c      	adds	r4, #12
 801343a:	2304      	movs	r3, #4
 801343c:	7023      	strb	r3, [r4, #0]
 801343e:	1ca0      	adds	r0, r4, #2
 8013440:	2328      	movs	r3, #40	; 0x28
 8013442:	9300      	str	r3, [sp, #0]
 8013444:	231a      	movs	r3, #26
 8013446:	223d      	movs	r2, #61	; 0x3d
 8013448:	215b      	movs	r1, #91	; 0x5b
 801344a:	f7ff fbcf 	bl	8012bec <_ZN8touchgfx4RectC1Essss>
 801344e:	2328      	movs	r3, #40	; 0x28
 8013450:	8163      	strh	r3, [r4, #10]
 8013452:	340c      	adds	r4, #12
 8013454:	2305      	movs	r3, #5
 8013456:	7023      	strb	r3, [r4, #0]
 8013458:	1ca0      	adds	r0, r4, #2
 801345a:	2328      	movs	r3, #40	; 0x28
 801345c:	9300      	str	r3, [sp, #0]
 801345e:	231a      	movs	r3, #26
 8013460:	223d      	movs	r2, #61	; 0x3d
 8013462:	2177      	movs	r1, #119	; 0x77
 8013464:	f7ff fbc2 	bl	8012bec <_ZN8touchgfx4RectC1Essss>
 8013468:	2328      	movs	r3, #40	; 0x28
 801346a:	8163      	strh	r3, [r4, #10]
 801346c:	340c      	adds	r4, #12
 801346e:	2306      	movs	r3, #6
 8013470:	7023      	strb	r3, [r4, #0]
 8013472:	1ca0      	adds	r0, r4, #2
 8013474:	2328      	movs	r3, #40	; 0x28
 8013476:	9300      	str	r3, [sp, #0]
 8013478:	231a      	movs	r3, #26
 801347a:	223d      	movs	r2, #61	; 0x3d
 801347c:	2193      	movs	r1, #147	; 0x93
 801347e:	f7ff fbb5 	bl	8012bec <_ZN8touchgfx4RectC1Essss>
 8013482:	2328      	movs	r3, #40	; 0x28
 8013484:	8163      	strh	r3, [r4, #10]
 8013486:	340c      	adds	r4, #12
 8013488:	2307      	movs	r3, #7
 801348a:	7023      	strb	r3, [r4, #0]
 801348c:	1ca0      	adds	r0, r4, #2
 801348e:	2328      	movs	r3, #40	; 0x28
 8013490:	9300      	str	r3, [sp, #0]
 8013492:	231a      	movs	r3, #26
 8013494:	223d      	movs	r2, #61	; 0x3d
 8013496:	21af      	movs	r1, #175	; 0xaf
 8013498:	f7ff fba8 	bl	8012bec <_ZN8touchgfx4RectC1Essss>
 801349c:	2328      	movs	r3, #40	; 0x28
 801349e:	8163      	strh	r3, [r4, #10]
 80134a0:	340c      	adds	r4, #12
 80134a2:	2308      	movs	r3, #8
 80134a4:	7023      	strb	r3, [r4, #0]
 80134a6:	1ca0      	adds	r0, r4, #2
 80134a8:	2328      	movs	r3, #40	; 0x28
 80134aa:	9300      	str	r3, [sp, #0]
 80134ac:	231a      	movs	r3, #26
 80134ae:	223d      	movs	r2, #61	; 0x3d
 80134b0:	21cb      	movs	r1, #203	; 0xcb
 80134b2:	f7ff fb9b 	bl	8012bec <_ZN8touchgfx4RectC1Essss>
 80134b6:	2328      	movs	r3, #40	; 0x28
 80134b8:	8163      	strh	r3, [r4, #10]
 80134ba:	340c      	adds	r4, #12
 80134bc:	2309      	movs	r3, #9
 80134be:	7023      	strb	r3, [r4, #0]
 80134c0:	1ca0      	adds	r0, r4, #2
 80134c2:	2328      	movs	r3, #40	; 0x28
 80134c4:	9300      	str	r3, [sp, #0]
 80134c6:	231a      	movs	r3, #26
 80134c8:	223d      	movs	r2, #61	; 0x3d
 80134ca:	21e7      	movs	r1, #231	; 0xe7
 80134cc:	f7ff fb8e 	bl	8012bec <_ZN8touchgfx4RectC1Essss>
 80134d0:	2328      	movs	r3, #40	; 0x28
 80134d2:	8163      	strh	r3, [r4, #10]
 80134d4:	340c      	adds	r4, #12
 80134d6:	230a      	movs	r3, #10
 80134d8:	7023      	strb	r3, [r4, #0]
 80134da:	1ca0      	adds	r0, r4, #2
 80134dc:	2328      	movs	r3, #40	; 0x28
 80134de:	9300      	str	r3, [sp, #0]
 80134e0:	231a      	movs	r3, #26
 80134e2:	223d      	movs	r2, #61	; 0x3d
 80134e4:	f240 1103 	movw	r1, #259	; 0x103
 80134e8:	f7ff fb80 	bl	8012bec <_ZN8touchgfx4RectC1Essss>
 80134ec:	2328      	movs	r3, #40	; 0x28
 80134ee:	8163      	strh	r3, [r4, #10]
 80134f0:	340c      	adds	r4, #12
 80134f2:	230b      	movs	r3, #11
 80134f4:	7023      	strb	r3, [r4, #0]
 80134f6:	1ca0      	adds	r0, r4, #2
 80134f8:	2328      	movs	r3, #40	; 0x28
 80134fa:	9300      	str	r3, [sp, #0]
 80134fc:	231a      	movs	r3, #26
 80134fe:	223d      	movs	r2, #61	; 0x3d
 8013500:	f240 111f 	movw	r1, #287	; 0x11f
 8013504:	f7ff fb72 	bl	8012bec <_ZN8touchgfx4RectC1Essss>
 8013508:	2328      	movs	r3, #40	; 0x28
 801350a:	8163      	strh	r3, [r4, #10]
 801350c:	340c      	adds	r4, #12
 801350e:	230c      	movs	r3, #12
 8013510:	7023      	strb	r3, [r4, #0]
 8013512:	1ca0      	adds	r0, r4, #2
 8013514:	2328      	movs	r3, #40	; 0x28
 8013516:	9300      	str	r3, [sp, #0]
 8013518:	231a      	movs	r3, #26
 801351a:	2269      	movs	r2, #105	; 0x69
 801351c:	2107      	movs	r1, #7
 801351e:	f7ff fb65 	bl	8012bec <_ZN8touchgfx4RectC1Essss>
 8013522:	2328      	movs	r3, #40	; 0x28
 8013524:	8163      	strh	r3, [r4, #10]
 8013526:	340c      	adds	r4, #12
 8013528:	230d      	movs	r3, #13
 801352a:	7023      	strb	r3, [r4, #0]
 801352c:	1ca0      	adds	r0, r4, #2
 801352e:	2328      	movs	r3, #40	; 0x28
 8013530:	9300      	str	r3, [sp, #0]
 8013532:	231a      	movs	r3, #26
 8013534:	2269      	movs	r2, #105	; 0x69
 8013536:	2123      	movs	r1, #35	; 0x23
 8013538:	f7ff fb58 	bl	8012bec <_ZN8touchgfx4RectC1Essss>
 801353c:	2328      	movs	r3, #40	; 0x28
 801353e:	8163      	strh	r3, [r4, #10]
 8013540:	340c      	adds	r4, #12
 8013542:	230e      	movs	r3, #14
 8013544:	7023      	strb	r3, [r4, #0]
 8013546:	1ca0      	adds	r0, r4, #2
 8013548:	2328      	movs	r3, #40	; 0x28
 801354a:	9300      	str	r3, [sp, #0]
 801354c:	231a      	movs	r3, #26
 801354e:	2269      	movs	r2, #105	; 0x69
 8013550:	213f      	movs	r1, #63	; 0x3f
 8013552:	f7ff fb4b 	bl	8012bec <_ZN8touchgfx4RectC1Essss>
 8013556:	2328      	movs	r3, #40	; 0x28
 8013558:	8163      	strh	r3, [r4, #10]
 801355a:	340c      	adds	r4, #12
 801355c:	230f      	movs	r3, #15
 801355e:	7023      	strb	r3, [r4, #0]
 8013560:	1ca0      	adds	r0, r4, #2
 8013562:	2328      	movs	r3, #40	; 0x28
 8013564:	9300      	str	r3, [sp, #0]
 8013566:	231a      	movs	r3, #26
 8013568:	2269      	movs	r2, #105	; 0x69
 801356a:	215b      	movs	r1, #91	; 0x5b
 801356c:	f7ff fb3e 	bl	8012bec <_ZN8touchgfx4RectC1Essss>
 8013570:	2328      	movs	r3, #40	; 0x28
 8013572:	8163      	strh	r3, [r4, #10]
 8013574:	340c      	adds	r4, #12
 8013576:	2310      	movs	r3, #16
 8013578:	7023      	strb	r3, [r4, #0]
 801357a:	1ca0      	adds	r0, r4, #2
 801357c:	2328      	movs	r3, #40	; 0x28
 801357e:	9300      	str	r3, [sp, #0]
 8013580:	231a      	movs	r3, #26
 8013582:	2269      	movs	r2, #105	; 0x69
 8013584:	2177      	movs	r1, #119	; 0x77
 8013586:	f7ff fb31 	bl	8012bec <_ZN8touchgfx4RectC1Essss>
 801358a:	2328      	movs	r3, #40	; 0x28
 801358c:	8163      	strh	r3, [r4, #10]
 801358e:	340c      	adds	r4, #12
 8013590:	2311      	movs	r3, #17
 8013592:	7023      	strb	r3, [r4, #0]
 8013594:	1ca0      	adds	r0, r4, #2
 8013596:	2328      	movs	r3, #40	; 0x28
 8013598:	9300      	str	r3, [sp, #0]
 801359a:	231a      	movs	r3, #26
 801359c:	2269      	movs	r2, #105	; 0x69
 801359e:	2193      	movs	r1, #147	; 0x93
 80135a0:	f7ff fb24 	bl	8012bec <_ZN8touchgfx4RectC1Essss>
 80135a4:	2328      	movs	r3, #40	; 0x28
 80135a6:	8163      	strh	r3, [r4, #10]
 80135a8:	340c      	adds	r4, #12
 80135aa:	2312      	movs	r3, #18
 80135ac:	7023      	strb	r3, [r4, #0]
 80135ae:	1ca0      	adds	r0, r4, #2
 80135b0:	2328      	movs	r3, #40	; 0x28
 80135b2:	9300      	str	r3, [sp, #0]
 80135b4:	231a      	movs	r3, #26
 80135b6:	2269      	movs	r2, #105	; 0x69
 80135b8:	21af      	movs	r1, #175	; 0xaf
 80135ba:	f7ff fb17 	bl	8012bec <_ZN8touchgfx4RectC1Essss>
 80135be:	2328      	movs	r3, #40	; 0x28
 80135c0:	8163      	strh	r3, [r4, #10]
 80135c2:	340c      	adds	r4, #12
 80135c4:	2313      	movs	r3, #19
 80135c6:	7023      	strb	r3, [r4, #0]
 80135c8:	1ca0      	adds	r0, r4, #2
 80135ca:	2328      	movs	r3, #40	; 0x28
 80135cc:	9300      	str	r3, [sp, #0]
 80135ce:	231a      	movs	r3, #26
 80135d0:	2269      	movs	r2, #105	; 0x69
 80135d2:	21cb      	movs	r1, #203	; 0xcb
 80135d4:	f7ff fb0a 	bl	8012bec <_ZN8touchgfx4RectC1Essss>
 80135d8:	2328      	movs	r3, #40	; 0x28
 80135da:	8163      	strh	r3, [r4, #10]
 80135dc:	340c      	adds	r4, #12
 80135de:	2314      	movs	r3, #20
 80135e0:	7023      	strb	r3, [r4, #0]
 80135e2:	1ca0      	adds	r0, r4, #2
 80135e4:	2328      	movs	r3, #40	; 0x28
 80135e6:	9300      	str	r3, [sp, #0]
 80135e8:	231a      	movs	r3, #26
 80135ea:	2269      	movs	r2, #105	; 0x69
 80135ec:	21e7      	movs	r1, #231	; 0xe7
 80135ee:	f7ff fafd 	bl	8012bec <_ZN8touchgfx4RectC1Essss>
 80135f2:	2328      	movs	r3, #40	; 0x28
 80135f4:	8163      	strh	r3, [r4, #10]
 80135f6:	340c      	adds	r4, #12
 80135f8:	2315      	movs	r3, #21
 80135fa:	7023      	strb	r3, [r4, #0]
 80135fc:	1ca0      	adds	r0, r4, #2
 80135fe:	2328      	movs	r3, #40	; 0x28
 8013600:	9300      	str	r3, [sp, #0]
 8013602:	231a      	movs	r3, #26
 8013604:	2269      	movs	r2, #105	; 0x69
 8013606:	f240 1103 	movw	r1, #259	; 0x103
 801360a:	f7ff faef 	bl	8012bec <_ZN8touchgfx4RectC1Essss>
 801360e:	2328      	movs	r3, #40	; 0x28
 8013610:	8163      	strh	r3, [r4, #10]
 8013612:	340c      	adds	r4, #12
 8013614:	2316      	movs	r3, #22
 8013616:	7023      	strb	r3, [r4, #0]
 8013618:	1ca0      	adds	r0, r4, #2
 801361a:	2328      	movs	r3, #40	; 0x28
 801361c:	9300      	str	r3, [sp, #0]
 801361e:	231a      	movs	r3, #26
 8013620:	2269      	movs	r2, #105	; 0x69
 8013622:	f240 111f 	movw	r1, #287	; 0x11f
 8013626:	f7ff fae1 	bl	8012bec <_ZN8touchgfx4RectC1Essss>
 801362a:	2328      	movs	r3, #40	; 0x28
 801362c:	8163      	strh	r3, [r4, #10]
 801362e:	340c      	adds	r4, #12
 8013630:	2317      	movs	r3, #23
 8013632:	7023      	strb	r3, [r4, #0]
 8013634:	1ca0      	adds	r0, r4, #2
 8013636:	2328      	movs	r3, #40	; 0x28
 8013638:	9300      	str	r3, [sp, #0]
 801363a:	231a      	movs	r3, #26
 801363c:	2295      	movs	r2, #149	; 0x95
 801363e:	213f      	movs	r1, #63	; 0x3f
 8013640:	f7ff fad4 	bl	8012bec <_ZN8touchgfx4RectC1Essss>
 8013644:	2328      	movs	r3, #40	; 0x28
 8013646:	8163      	strh	r3, [r4, #10]
 8013648:	340c      	adds	r4, #12
 801364a:	2318      	movs	r3, #24
 801364c:	7023      	strb	r3, [r4, #0]
 801364e:	1ca0      	adds	r0, r4, #2
 8013650:	2328      	movs	r3, #40	; 0x28
 8013652:	9300      	str	r3, [sp, #0]
 8013654:	231a      	movs	r3, #26
 8013656:	2295      	movs	r2, #149	; 0x95
 8013658:	215b      	movs	r1, #91	; 0x5b
 801365a:	f7ff fac7 	bl	8012bec <_ZN8touchgfx4RectC1Essss>
 801365e:	2328      	movs	r3, #40	; 0x28
 8013660:	8163      	strh	r3, [r4, #10]
 8013662:	340c      	adds	r4, #12
 8013664:	2319      	movs	r3, #25
 8013666:	7023      	strb	r3, [r4, #0]
 8013668:	1ca0      	adds	r0, r4, #2
 801366a:	2328      	movs	r3, #40	; 0x28
 801366c:	9300      	str	r3, [sp, #0]
 801366e:	231a      	movs	r3, #26
 8013670:	2295      	movs	r2, #149	; 0x95
 8013672:	2177      	movs	r1, #119	; 0x77
 8013674:	f7ff faba 	bl	8012bec <_ZN8touchgfx4RectC1Essss>
 8013678:	2328      	movs	r3, #40	; 0x28
 801367a:	8163      	strh	r3, [r4, #10]
 801367c:	340c      	adds	r4, #12
 801367e:	231a      	movs	r3, #26
 8013680:	7023      	strb	r3, [r4, #0]
 8013682:	1ca0      	adds	r0, r4, #2
 8013684:	2328      	movs	r3, #40	; 0x28
 8013686:	9300      	str	r3, [sp, #0]
 8013688:	231a      	movs	r3, #26
 801368a:	2295      	movs	r2, #149	; 0x95
 801368c:	2193      	movs	r1, #147	; 0x93
 801368e:	f7ff faad 	bl	8012bec <_ZN8touchgfx4RectC1Essss>
 8013692:	2328      	movs	r3, #40	; 0x28
 8013694:	8163      	strh	r3, [r4, #10]
 8013696:	340c      	adds	r4, #12
 8013698:	231b      	movs	r3, #27
 801369a:	7023      	strb	r3, [r4, #0]
 801369c:	1ca0      	adds	r0, r4, #2
 801369e:	2328      	movs	r3, #40	; 0x28
 80136a0:	9300      	str	r3, [sp, #0]
 80136a2:	231a      	movs	r3, #26
 80136a4:	2295      	movs	r2, #149	; 0x95
 80136a6:	21af      	movs	r1, #175	; 0xaf
 80136a8:	f7ff faa0 	bl	8012bec <_ZN8touchgfx4RectC1Essss>
 80136ac:	2328      	movs	r3, #40	; 0x28
 80136ae:	8163      	strh	r3, [r4, #10]
 80136b0:	340c      	adds	r4, #12
 80136b2:	231c      	movs	r3, #28
 80136b4:	7023      	strb	r3, [r4, #0]
 80136b6:	1ca0      	adds	r0, r4, #2
 80136b8:	2328      	movs	r3, #40	; 0x28
 80136ba:	9300      	str	r3, [sp, #0]
 80136bc:	231a      	movs	r3, #26
 80136be:	2295      	movs	r2, #149	; 0x95
 80136c0:	21cb      	movs	r1, #203	; 0xcb
 80136c2:	f7ff fa93 	bl	8012bec <_ZN8touchgfx4RectC1Essss>
 80136c6:	2328      	movs	r3, #40	; 0x28
 80136c8:	8163      	strh	r3, [r4, #10]
 80136ca:	340c      	adds	r4, #12
 80136cc:	231d      	movs	r3, #29
 80136ce:	7023      	strb	r3, [r4, #0]
 80136d0:	1ca0      	adds	r0, r4, #2
 80136d2:	2328      	movs	r3, #40	; 0x28
 80136d4:	9300      	str	r3, [sp, #0]
 80136d6:	231a      	movs	r3, #26
 80136d8:	2295      	movs	r2, #149	; 0x95
 80136da:	21e7      	movs	r1, #231	; 0xe7
 80136dc:	f7ff fa86 	bl	8012bec <_ZN8touchgfx4RectC1Essss>
 80136e0:	2328      	movs	r3, #40	; 0x28
 80136e2:	8163      	strh	r3, [r4, #10]
 80136e4:	340c      	adds	r4, #12
 80136e6:	231e      	movs	r3, #30
 80136e8:	7023      	strb	r3, [r4, #0]
 80136ea:	1ca0      	adds	r0, r4, #2
 80136ec:	2328      	movs	r3, #40	; 0x28
 80136ee:	9300      	str	r3, [sp, #0]
 80136f0:	23fc      	movs	r3, #252	; 0xfc
 80136f2:	22c1      	movs	r2, #193	; 0xc1
 80136f4:	213e      	movs	r1, #62	; 0x3e
 80136f6:	f7ff fa79 	bl	8012bec <_ZN8touchgfx4RectC1Essss>
 80136fa:	232b      	movs	r3, #43	; 0x2b
 80136fc:	8163      	strh	r3, [r4, #10]
};
 80136fe:	4c16      	ldr	r4, [pc, #88]	; (8013758 <_Z41__static_initialization_and_destruction_0ii+0x38c>)
 8013700:	4620      	mov	r0, r4
 8013702:	2328      	movs	r3, #40	; 0x28
 8013704:	9300      	str	r3, [sp, #0]
 8013706:	2338      	movs	r3, #56	; 0x38
 8013708:	2295      	movs	r2, #149	; 0x95
 801370a:	2105      	movs	r1, #5
 801370c:	f7ff fa6e 	bl	8012bec <_ZN8touchgfx4RectC1Essss>
 8013710:	2300      	movs	r3, #0
 8013712:	60a3      	str	r3, [r4, #8]
 8013714:	232a      	movs	r3, #42	; 0x2a
 8013716:	81a3      	strh	r3, [r4, #12]
 8013718:	3410      	adds	r4, #16
 801371a:	4620      	mov	r0, r4
 801371c:	2328      	movs	r3, #40	; 0x28
 801371e:	9300      	str	r3, [sp, #0]
 8013720:	2338      	movs	r3, #56	; 0x38
 8013722:	2295      	movs	r2, #149	; 0x95
 8013724:	f44f 7181 	mov.w	r1, #258	; 0x102
 8013728:	f7ff fa60 	bl	8012bec <_ZN8touchgfx4RectC1Essss>
 801372c:	2300      	movs	r3, #0
 801372e:	60a3      	str	r3, [r4, #8]
 8013730:	2327      	movs	r3, #39	; 0x27
 8013732:	81a3      	strh	r3, [r4, #12]
 8013734:	3410      	adds	r4, #16
 8013736:	4620      	mov	r0, r4
 8013738:	2328      	movs	r3, #40	; 0x28
 801373a:	9300      	str	r3, [sp, #0]
 801373c:	2338      	movs	r3, #56	; 0x38
 801373e:	22c1      	movs	r2, #193	; 0xc1
 8013740:	2105      	movs	r1, #5
 8013742:	f7ff fa53 	bl	8012bec <_ZN8touchgfx4RectC1Essss>
 8013746:	2300      	movs	r3, #0
 8013748:	60a3      	str	r3, [r4, #8]
 801374a:	2329      	movs	r3, #41	; 0x29
 801374c:	81a3      	strh	r3, [r4, #12]
};
 801374e:	2328      	movs	r3, #40	; 0x28
 8013750:	9300      	str	r3, [sp, #0]
 8013752:	e003      	b.n	801375c <_Z41__static_initialization_and_destruction_0ii+0x390>
 8013754:	2000574c 	.word	0x2000574c
 8013758:	200058b4 	.word	0x200058b4
 801375c:	f44f 739a 	mov.w	r3, #308	; 0x134
 8013760:	220a      	movs	r2, #10
 8013762:	210f      	movs	r1, #15
 8013764:	480f      	ldr	r0, [pc, #60]	; (80137a4 <_Z41__static_initialization_and_destruction_0ii+0x3d8>)
 8013766:	f7ff fa41 	bl	8012bec <_ZN8touchgfx4RectC1Essss>
 801376a:	2130      	movs	r1, #48	; 0x30
 801376c:	480e      	ldr	r0, [pc, #56]	; (80137a8 <_Z41__static_initialization_and_destruction_0ii+0x3dc>)
 801376e:	f7ff fa7b 	bl	8012c68 <_ZN8touchgfx9TypedTextC1Et>
 8013772:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8013776:	480d      	ldr	r0, [pc, #52]	; (80137ac <_Z41__static_initialization_and_destruction_0ii+0x3e0>)
 8013778:	f7ff fa12 	bl	8012ba0 <_ZN8touchgfx9colortypeC1Em>
 801377c:	2100      	movs	r1, #0
 801377e:	480c      	ldr	r0, [pc, #48]	; (80137b0 <_Z41__static_initialization_and_destruction_0ii+0x3e4>)
 8013780:	f7ff fa0e 	bl	8012ba0 <_ZN8touchgfx9colortypeC1Em>
static const Keyboard::Layout layout =
 8013784:	687b      	ldr	r3, [r7, #4]
 8013786:	2b00      	cmp	r3, #0
 8013788:	d107      	bne.n	801379a <_Z41__static_initialization_and_destruction_0ii+0x3ce>
 801378a:	683b      	ldr	r3, [r7, #0]
 801378c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8013790:	4293      	cmp	r3, r2
 8013792:	d102      	bne.n	801379a <_Z41__static_initialization_and_destruction_0ii+0x3ce>
 8013794:	4807      	ldr	r0, [pc, #28]	; (80137b4 <_Z41__static_initialization_and_destruction_0ii+0x3e8>)
 8013796:	f7ff faa5 	bl	8012ce4 <_ZN8touchgfx8Keyboard6LayoutD1Ev>
 801379a:	bf00      	nop
 801379c:	370c      	adds	r7, #12
 801379e:	46bd      	mov	sp, r7
 80137a0:	bd90      	pop	{r4, r7, pc}
 80137a2:	bf00      	nop
 80137a4:	20000056 	.word	0x20000056
 80137a8:	20000060 	.word	0x20000060
 80137ac:	20000068 	.word	0x20000068
 80137b0:	20000070 	.word	0x20000070
 80137b4:	20000044 	.word	0x20000044

080137b8 <_GLOBAL__sub_I__ZN14CustomKeyboardC2Ev>:
 80137b8:	b580      	push	{r7, lr}
 80137ba:	af00      	add	r7, sp, #0
 80137bc:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80137c0:	2001      	movs	r0, #1
 80137c2:	f7ff fe03 	bl	80133cc <_Z41__static_initialization_and_destruction_0ii>
 80137c6:	bd80      	pop	{r7, pc}

080137c8 <_GLOBAL__sub_D__ZN14CustomKeyboardC2Ev>:
 80137c8:	b580      	push	{r7, lr}
 80137ca:	af00      	add	r7, sp, #0
 80137cc:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80137d0:	2000      	movs	r0, #0
 80137d2:	f7ff fdfb 	bl	80133cc <_Z41__static_initialization_and_destruction_0ii>
 80137d6:	bd80      	pop	{r7, pc}

080137d8 <_Z41__static_initialization_and_destruction_0ii>:
}

void KeyboardPresenter::AlarmOrEvent(void)
{
        view.AlarmOrEvent();
}
 80137d8:	b590      	push	{r4, r7, lr}
 80137da:	b085      	sub	sp, #20
 80137dc:	af02      	add	r7, sp, #8
 80137de:	6078      	str	r0, [r7, #4]
 80137e0:	6039      	str	r1, [r7, #0]
 80137e2:	687b      	ldr	r3, [r7, #4]
 80137e4:	2b01      	cmp	r3, #1
 80137e6:	f040 81d3 	bne.w	8013b90 <_Z41__static_initialization_and_destruction_0ii+0x3b8>
 80137ea:	683b      	ldr	r3, [r7, #0]
 80137ec:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80137f0:	4293      	cmp	r3, r2
 80137f2:	f040 81cd 	bne.w	8013b90 <_Z41__static_initialization_and_destruction_0ii+0x3b8>
};
 80137f6:	4cda      	ldr	r4, [pc, #872]	; (8013b60 <_Z41__static_initialization_and_destruction_0ii+0x388>)
 80137f8:	2301      	movs	r3, #1
 80137fa:	7023      	strb	r3, [r4, #0]
 80137fc:	1ca0      	adds	r0, r4, #2
 80137fe:	2328      	movs	r3, #40	; 0x28
 8013800:	9300      	str	r3, [sp, #0]
 8013802:	231a      	movs	r3, #26
 8013804:	223d      	movs	r2, #61	; 0x3d
 8013806:	2107      	movs	r1, #7
 8013808:	f7ff f9f0 	bl	8012bec <_ZN8touchgfx4RectC1Essss>
 801380c:	2328      	movs	r3, #40	; 0x28
 801380e:	8163      	strh	r3, [r4, #10]
 8013810:	340c      	adds	r4, #12
 8013812:	2302      	movs	r3, #2
 8013814:	7023      	strb	r3, [r4, #0]
 8013816:	1ca0      	adds	r0, r4, #2
 8013818:	2328      	movs	r3, #40	; 0x28
 801381a:	9300      	str	r3, [sp, #0]
 801381c:	231a      	movs	r3, #26
 801381e:	223d      	movs	r2, #61	; 0x3d
 8013820:	2123      	movs	r1, #35	; 0x23
 8013822:	f7ff f9e3 	bl	8012bec <_ZN8touchgfx4RectC1Essss>
 8013826:	2328      	movs	r3, #40	; 0x28
 8013828:	8163      	strh	r3, [r4, #10]
 801382a:	340c      	adds	r4, #12
 801382c:	2303      	movs	r3, #3
 801382e:	7023      	strb	r3, [r4, #0]
 8013830:	1ca0      	adds	r0, r4, #2
 8013832:	2328      	movs	r3, #40	; 0x28
 8013834:	9300      	str	r3, [sp, #0]
 8013836:	231a      	movs	r3, #26
 8013838:	223d      	movs	r2, #61	; 0x3d
 801383a:	213f      	movs	r1, #63	; 0x3f
 801383c:	f7ff f9d6 	bl	8012bec <_ZN8touchgfx4RectC1Essss>
 8013840:	2328      	movs	r3, #40	; 0x28
 8013842:	8163      	strh	r3, [r4, #10]
 8013844:	340c      	adds	r4, #12
 8013846:	2304      	movs	r3, #4
 8013848:	7023      	strb	r3, [r4, #0]
 801384a:	1ca0      	adds	r0, r4, #2
 801384c:	2328      	movs	r3, #40	; 0x28
 801384e:	9300      	str	r3, [sp, #0]
 8013850:	231a      	movs	r3, #26
 8013852:	223d      	movs	r2, #61	; 0x3d
 8013854:	215b      	movs	r1, #91	; 0x5b
 8013856:	f7ff f9c9 	bl	8012bec <_ZN8touchgfx4RectC1Essss>
 801385a:	2328      	movs	r3, #40	; 0x28
 801385c:	8163      	strh	r3, [r4, #10]
 801385e:	340c      	adds	r4, #12
 8013860:	2305      	movs	r3, #5
 8013862:	7023      	strb	r3, [r4, #0]
 8013864:	1ca0      	adds	r0, r4, #2
 8013866:	2328      	movs	r3, #40	; 0x28
 8013868:	9300      	str	r3, [sp, #0]
 801386a:	231a      	movs	r3, #26
 801386c:	223d      	movs	r2, #61	; 0x3d
 801386e:	2177      	movs	r1, #119	; 0x77
 8013870:	f7ff f9bc 	bl	8012bec <_ZN8touchgfx4RectC1Essss>
 8013874:	2328      	movs	r3, #40	; 0x28
 8013876:	8163      	strh	r3, [r4, #10]
 8013878:	340c      	adds	r4, #12
 801387a:	2306      	movs	r3, #6
 801387c:	7023      	strb	r3, [r4, #0]
 801387e:	1ca0      	adds	r0, r4, #2
 8013880:	2328      	movs	r3, #40	; 0x28
 8013882:	9300      	str	r3, [sp, #0]
 8013884:	231a      	movs	r3, #26
 8013886:	223d      	movs	r2, #61	; 0x3d
 8013888:	2193      	movs	r1, #147	; 0x93
 801388a:	f7ff f9af 	bl	8012bec <_ZN8touchgfx4RectC1Essss>
 801388e:	2328      	movs	r3, #40	; 0x28
 8013890:	8163      	strh	r3, [r4, #10]
 8013892:	340c      	adds	r4, #12
 8013894:	2307      	movs	r3, #7
 8013896:	7023      	strb	r3, [r4, #0]
 8013898:	1ca0      	adds	r0, r4, #2
 801389a:	2328      	movs	r3, #40	; 0x28
 801389c:	9300      	str	r3, [sp, #0]
 801389e:	231a      	movs	r3, #26
 80138a0:	223d      	movs	r2, #61	; 0x3d
 80138a2:	21af      	movs	r1, #175	; 0xaf
 80138a4:	f7ff f9a2 	bl	8012bec <_ZN8touchgfx4RectC1Essss>
 80138a8:	2328      	movs	r3, #40	; 0x28
 80138aa:	8163      	strh	r3, [r4, #10]
 80138ac:	340c      	adds	r4, #12
 80138ae:	2308      	movs	r3, #8
 80138b0:	7023      	strb	r3, [r4, #0]
 80138b2:	1ca0      	adds	r0, r4, #2
 80138b4:	2328      	movs	r3, #40	; 0x28
 80138b6:	9300      	str	r3, [sp, #0]
 80138b8:	231a      	movs	r3, #26
 80138ba:	223d      	movs	r2, #61	; 0x3d
 80138bc:	21cb      	movs	r1, #203	; 0xcb
 80138be:	f7ff f995 	bl	8012bec <_ZN8touchgfx4RectC1Essss>
 80138c2:	2328      	movs	r3, #40	; 0x28
 80138c4:	8163      	strh	r3, [r4, #10]
 80138c6:	340c      	adds	r4, #12
 80138c8:	2309      	movs	r3, #9
 80138ca:	7023      	strb	r3, [r4, #0]
 80138cc:	1ca0      	adds	r0, r4, #2
 80138ce:	2328      	movs	r3, #40	; 0x28
 80138d0:	9300      	str	r3, [sp, #0]
 80138d2:	231a      	movs	r3, #26
 80138d4:	223d      	movs	r2, #61	; 0x3d
 80138d6:	21e7      	movs	r1, #231	; 0xe7
 80138d8:	f7ff f988 	bl	8012bec <_ZN8touchgfx4RectC1Essss>
 80138dc:	2328      	movs	r3, #40	; 0x28
 80138de:	8163      	strh	r3, [r4, #10]
 80138e0:	340c      	adds	r4, #12
 80138e2:	230a      	movs	r3, #10
 80138e4:	7023      	strb	r3, [r4, #0]
 80138e6:	1ca0      	adds	r0, r4, #2
 80138e8:	2328      	movs	r3, #40	; 0x28
 80138ea:	9300      	str	r3, [sp, #0]
 80138ec:	231a      	movs	r3, #26
 80138ee:	223d      	movs	r2, #61	; 0x3d
 80138f0:	f240 1103 	movw	r1, #259	; 0x103
 80138f4:	f7ff f97a 	bl	8012bec <_ZN8touchgfx4RectC1Essss>
 80138f8:	2328      	movs	r3, #40	; 0x28
 80138fa:	8163      	strh	r3, [r4, #10]
 80138fc:	340c      	adds	r4, #12
 80138fe:	230b      	movs	r3, #11
 8013900:	7023      	strb	r3, [r4, #0]
 8013902:	1ca0      	adds	r0, r4, #2
 8013904:	2328      	movs	r3, #40	; 0x28
 8013906:	9300      	str	r3, [sp, #0]
 8013908:	231a      	movs	r3, #26
 801390a:	223d      	movs	r2, #61	; 0x3d
 801390c:	f240 111f 	movw	r1, #287	; 0x11f
 8013910:	f7ff f96c 	bl	8012bec <_ZN8touchgfx4RectC1Essss>
 8013914:	2328      	movs	r3, #40	; 0x28
 8013916:	8163      	strh	r3, [r4, #10]
 8013918:	340c      	adds	r4, #12
 801391a:	230c      	movs	r3, #12
 801391c:	7023      	strb	r3, [r4, #0]
 801391e:	1ca0      	adds	r0, r4, #2
 8013920:	2328      	movs	r3, #40	; 0x28
 8013922:	9300      	str	r3, [sp, #0]
 8013924:	231a      	movs	r3, #26
 8013926:	2269      	movs	r2, #105	; 0x69
 8013928:	2107      	movs	r1, #7
 801392a:	f7ff f95f 	bl	8012bec <_ZN8touchgfx4RectC1Essss>
 801392e:	2328      	movs	r3, #40	; 0x28
 8013930:	8163      	strh	r3, [r4, #10]
 8013932:	340c      	adds	r4, #12
 8013934:	230d      	movs	r3, #13
 8013936:	7023      	strb	r3, [r4, #0]
 8013938:	1ca0      	adds	r0, r4, #2
 801393a:	2328      	movs	r3, #40	; 0x28
 801393c:	9300      	str	r3, [sp, #0]
 801393e:	231a      	movs	r3, #26
 8013940:	2269      	movs	r2, #105	; 0x69
 8013942:	2123      	movs	r1, #35	; 0x23
 8013944:	f7ff f952 	bl	8012bec <_ZN8touchgfx4RectC1Essss>
 8013948:	2328      	movs	r3, #40	; 0x28
 801394a:	8163      	strh	r3, [r4, #10]
 801394c:	340c      	adds	r4, #12
 801394e:	230e      	movs	r3, #14
 8013950:	7023      	strb	r3, [r4, #0]
 8013952:	1ca0      	adds	r0, r4, #2
 8013954:	2328      	movs	r3, #40	; 0x28
 8013956:	9300      	str	r3, [sp, #0]
 8013958:	231a      	movs	r3, #26
 801395a:	2269      	movs	r2, #105	; 0x69
 801395c:	213f      	movs	r1, #63	; 0x3f
 801395e:	f7ff f945 	bl	8012bec <_ZN8touchgfx4RectC1Essss>
 8013962:	2328      	movs	r3, #40	; 0x28
 8013964:	8163      	strh	r3, [r4, #10]
 8013966:	340c      	adds	r4, #12
 8013968:	230f      	movs	r3, #15
 801396a:	7023      	strb	r3, [r4, #0]
 801396c:	1ca0      	adds	r0, r4, #2
 801396e:	2328      	movs	r3, #40	; 0x28
 8013970:	9300      	str	r3, [sp, #0]
 8013972:	231a      	movs	r3, #26
 8013974:	2269      	movs	r2, #105	; 0x69
 8013976:	215b      	movs	r1, #91	; 0x5b
 8013978:	f7ff f938 	bl	8012bec <_ZN8touchgfx4RectC1Essss>
 801397c:	2328      	movs	r3, #40	; 0x28
 801397e:	8163      	strh	r3, [r4, #10]
 8013980:	340c      	adds	r4, #12
 8013982:	2310      	movs	r3, #16
 8013984:	7023      	strb	r3, [r4, #0]
 8013986:	1ca0      	adds	r0, r4, #2
 8013988:	2328      	movs	r3, #40	; 0x28
 801398a:	9300      	str	r3, [sp, #0]
 801398c:	231a      	movs	r3, #26
 801398e:	2269      	movs	r2, #105	; 0x69
 8013990:	2177      	movs	r1, #119	; 0x77
 8013992:	f7ff f92b 	bl	8012bec <_ZN8touchgfx4RectC1Essss>
 8013996:	2328      	movs	r3, #40	; 0x28
 8013998:	8163      	strh	r3, [r4, #10]
 801399a:	340c      	adds	r4, #12
 801399c:	2311      	movs	r3, #17
 801399e:	7023      	strb	r3, [r4, #0]
 80139a0:	1ca0      	adds	r0, r4, #2
 80139a2:	2328      	movs	r3, #40	; 0x28
 80139a4:	9300      	str	r3, [sp, #0]
 80139a6:	231a      	movs	r3, #26
 80139a8:	2269      	movs	r2, #105	; 0x69
 80139aa:	2193      	movs	r1, #147	; 0x93
 80139ac:	f7ff f91e 	bl	8012bec <_ZN8touchgfx4RectC1Essss>
 80139b0:	2328      	movs	r3, #40	; 0x28
 80139b2:	8163      	strh	r3, [r4, #10]
 80139b4:	340c      	adds	r4, #12
 80139b6:	2312      	movs	r3, #18
 80139b8:	7023      	strb	r3, [r4, #0]
 80139ba:	1ca0      	adds	r0, r4, #2
 80139bc:	2328      	movs	r3, #40	; 0x28
 80139be:	9300      	str	r3, [sp, #0]
 80139c0:	231a      	movs	r3, #26
 80139c2:	2269      	movs	r2, #105	; 0x69
 80139c4:	21af      	movs	r1, #175	; 0xaf
 80139c6:	f7ff f911 	bl	8012bec <_ZN8touchgfx4RectC1Essss>
 80139ca:	2328      	movs	r3, #40	; 0x28
 80139cc:	8163      	strh	r3, [r4, #10]
 80139ce:	340c      	adds	r4, #12
 80139d0:	2313      	movs	r3, #19
 80139d2:	7023      	strb	r3, [r4, #0]
 80139d4:	1ca0      	adds	r0, r4, #2
 80139d6:	2328      	movs	r3, #40	; 0x28
 80139d8:	9300      	str	r3, [sp, #0]
 80139da:	231a      	movs	r3, #26
 80139dc:	2269      	movs	r2, #105	; 0x69
 80139de:	21cb      	movs	r1, #203	; 0xcb
 80139e0:	f7ff f904 	bl	8012bec <_ZN8touchgfx4RectC1Essss>
 80139e4:	2328      	movs	r3, #40	; 0x28
 80139e6:	8163      	strh	r3, [r4, #10]
 80139e8:	340c      	adds	r4, #12
 80139ea:	2314      	movs	r3, #20
 80139ec:	7023      	strb	r3, [r4, #0]
 80139ee:	1ca0      	adds	r0, r4, #2
 80139f0:	2328      	movs	r3, #40	; 0x28
 80139f2:	9300      	str	r3, [sp, #0]
 80139f4:	231a      	movs	r3, #26
 80139f6:	2269      	movs	r2, #105	; 0x69
 80139f8:	21e7      	movs	r1, #231	; 0xe7
 80139fa:	f7ff f8f7 	bl	8012bec <_ZN8touchgfx4RectC1Essss>
 80139fe:	2328      	movs	r3, #40	; 0x28
 8013a00:	8163      	strh	r3, [r4, #10]
 8013a02:	340c      	adds	r4, #12
 8013a04:	2315      	movs	r3, #21
 8013a06:	7023      	strb	r3, [r4, #0]
 8013a08:	1ca0      	adds	r0, r4, #2
 8013a0a:	2328      	movs	r3, #40	; 0x28
 8013a0c:	9300      	str	r3, [sp, #0]
 8013a0e:	231a      	movs	r3, #26
 8013a10:	2269      	movs	r2, #105	; 0x69
 8013a12:	f240 1103 	movw	r1, #259	; 0x103
 8013a16:	f7ff f8e9 	bl	8012bec <_ZN8touchgfx4RectC1Essss>
 8013a1a:	2328      	movs	r3, #40	; 0x28
 8013a1c:	8163      	strh	r3, [r4, #10]
 8013a1e:	340c      	adds	r4, #12
 8013a20:	2316      	movs	r3, #22
 8013a22:	7023      	strb	r3, [r4, #0]
 8013a24:	1ca0      	adds	r0, r4, #2
 8013a26:	2328      	movs	r3, #40	; 0x28
 8013a28:	9300      	str	r3, [sp, #0]
 8013a2a:	231a      	movs	r3, #26
 8013a2c:	2269      	movs	r2, #105	; 0x69
 8013a2e:	f240 111f 	movw	r1, #287	; 0x11f
 8013a32:	f7ff f8db 	bl	8012bec <_ZN8touchgfx4RectC1Essss>
 8013a36:	2328      	movs	r3, #40	; 0x28
 8013a38:	8163      	strh	r3, [r4, #10]
 8013a3a:	340c      	adds	r4, #12
 8013a3c:	2317      	movs	r3, #23
 8013a3e:	7023      	strb	r3, [r4, #0]
 8013a40:	1ca0      	adds	r0, r4, #2
 8013a42:	2328      	movs	r3, #40	; 0x28
 8013a44:	9300      	str	r3, [sp, #0]
 8013a46:	231a      	movs	r3, #26
 8013a48:	2295      	movs	r2, #149	; 0x95
 8013a4a:	213f      	movs	r1, #63	; 0x3f
 8013a4c:	f7ff f8ce 	bl	8012bec <_ZN8touchgfx4RectC1Essss>
 8013a50:	2328      	movs	r3, #40	; 0x28
 8013a52:	8163      	strh	r3, [r4, #10]
 8013a54:	340c      	adds	r4, #12
 8013a56:	2318      	movs	r3, #24
 8013a58:	7023      	strb	r3, [r4, #0]
 8013a5a:	1ca0      	adds	r0, r4, #2
 8013a5c:	2328      	movs	r3, #40	; 0x28
 8013a5e:	9300      	str	r3, [sp, #0]
 8013a60:	231a      	movs	r3, #26
 8013a62:	2295      	movs	r2, #149	; 0x95
 8013a64:	215b      	movs	r1, #91	; 0x5b
 8013a66:	f7ff f8c1 	bl	8012bec <_ZN8touchgfx4RectC1Essss>
 8013a6a:	2328      	movs	r3, #40	; 0x28
 8013a6c:	8163      	strh	r3, [r4, #10]
 8013a6e:	340c      	adds	r4, #12
 8013a70:	2319      	movs	r3, #25
 8013a72:	7023      	strb	r3, [r4, #0]
 8013a74:	1ca0      	adds	r0, r4, #2
 8013a76:	2328      	movs	r3, #40	; 0x28
 8013a78:	9300      	str	r3, [sp, #0]
 8013a7a:	231a      	movs	r3, #26
 8013a7c:	2295      	movs	r2, #149	; 0x95
 8013a7e:	2177      	movs	r1, #119	; 0x77
 8013a80:	f7ff f8b4 	bl	8012bec <_ZN8touchgfx4RectC1Essss>
 8013a84:	2328      	movs	r3, #40	; 0x28
 8013a86:	8163      	strh	r3, [r4, #10]
 8013a88:	340c      	adds	r4, #12
 8013a8a:	231a      	movs	r3, #26
 8013a8c:	7023      	strb	r3, [r4, #0]
 8013a8e:	1ca0      	adds	r0, r4, #2
 8013a90:	2328      	movs	r3, #40	; 0x28
 8013a92:	9300      	str	r3, [sp, #0]
 8013a94:	231a      	movs	r3, #26
 8013a96:	2295      	movs	r2, #149	; 0x95
 8013a98:	2193      	movs	r1, #147	; 0x93
 8013a9a:	f7ff f8a7 	bl	8012bec <_ZN8touchgfx4RectC1Essss>
 8013a9e:	2328      	movs	r3, #40	; 0x28
 8013aa0:	8163      	strh	r3, [r4, #10]
 8013aa2:	340c      	adds	r4, #12
 8013aa4:	231b      	movs	r3, #27
 8013aa6:	7023      	strb	r3, [r4, #0]
 8013aa8:	1ca0      	adds	r0, r4, #2
 8013aaa:	2328      	movs	r3, #40	; 0x28
 8013aac:	9300      	str	r3, [sp, #0]
 8013aae:	231a      	movs	r3, #26
 8013ab0:	2295      	movs	r2, #149	; 0x95
 8013ab2:	21af      	movs	r1, #175	; 0xaf
 8013ab4:	f7ff f89a 	bl	8012bec <_ZN8touchgfx4RectC1Essss>
 8013ab8:	2328      	movs	r3, #40	; 0x28
 8013aba:	8163      	strh	r3, [r4, #10]
 8013abc:	340c      	adds	r4, #12
 8013abe:	231c      	movs	r3, #28
 8013ac0:	7023      	strb	r3, [r4, #0]
 8013ac2:	1ca0      	adds	r0, r4, #2
 8013ac4:	2328      	movs	r3, #40	; 0x28
 8013ac6:	9300      	str	r3, [sp, #0]
 8013ac8:	231a      	movs	r3, #26
 8013aca:	2295      	movs	r2, #149	; 0x95
 8013acc:	21cb      	movs	r1, #203	; 0xcb
 8013ace:	f7ff f88d 	bl	8012bec <_ZN8touchgfx4RectC1Essss>
 8013ad2:	2328      	movs	r3, #40	; 0x28
 8013ad4:	8163      	strh	r3, [r4, #10]
 8013ad6:	340c      	adds	r4, #12
 8013ad8:	231d      	movs	r3, #29
 8013ada:	7023      	strb	r3, [r4, #0]
 8013adc:	1ca0      	adds	r0, r4, #2
 8013ade:	2328      	movs	r3, #40	; 0x28
 8013ae0:	9300      	str	r3, [sp, #0]
 8013ae2:	231a      	movs	r3, #26
 8013ae4:	2295      	movs	r2, #149	; 0x95
 8013ae6:	21e7      	movs	r1, #231	; 0xe7
 8013ae8:	f7ff f880 	bl	8012bec <_ZN8touchgfx4RectC1Essss>
 8013aec:	2328      	movs	r3, #40	; 0x28
 8013aee:	8163      	strh	r3, [r4, #10]
 8013af0:	340c      	adds	r4, #12
 8013af2:	231e      	movs	r3, #30
 8013af4:	7023      	strb	r3, [r4, #0]
 8013af6:	1ca0      	adds	r0, r4, #2
 8013af8:	2328      	movs	r3, #40	; 0x28
 8013afa:	9300      	str	r3, [sp, #0]
 8013afc:	23fc      	movs	r3, #252	; 0xfc
 8013afe:	22c1      	movs	r2, #193	; 0xc1
 8013b00:	213e      	movs	r1, #62	; 0x3e
 8013b02:	f7ff f873 	bl	8012bec <_ZN8touchgfx4RectC1Essss>
 8013b06:	232b      	movs	r3, #43	; 0x2b
 8013b08:	8163      	strh	r3, [r4, #10]
};
 8013b0a:	4c16      	ldr	r4, [pc, #88]	; (8013b64 <_Z41__static_initialization_and_destruction_0ii+0x38c>)
 8013b0c:	4620      	mov	r0, r4
 8013b0e:	2328      	movs	r3, #40	; 0x28
 8013b10:	9300      	str	r3, [sp, #0]
 8013b12:	2338      	movs	r3, #56	; 0x38
 8013b14:	2295      	movs	r2, #149	; 0x95
 8013b16:	2105      	movs	r1, #5
 8013b18:	f7ff f868 	bl	8012bec <_ZN8touchgfx4RectC1Essss>
 8013b1c:	2300      	movs	r3, #0
 8013b1e:	60a3      	str	r3, [r4, #8]
 8013b20:	232a      	movs	r3, #42	; 0x2a
 8013b22:	81a3      	strh	r3, [r4, #12]
 8013b24:	3410      	adds	r4, #16
 8013b26:	4620      	mov	r0, r4
 8013b28:	2328      	movs	r3, #40	; 0x28
 8013b2a:	9300      	str	r3, [sp, #0]
 8013b2c:	2338      	movs	r3, #56	; 0x38
 8013b2e:	2295      	movs	r2, #149	; 0x95
 8013b30:	f44f 7181 	mov.w	r1, #258	; 0x102
 8013b34:	f7ff f85a 	bl	8012bec <_ZN8touchgfx4RectC1Essss>
 8013b38:	2300      	movs	r3, #0
 8013b3a:	60a3      	str	r3, [r4, #8]
 8013b3c:	2327      	movs	r3, #39	; 0x27
 8013b3e:	81a3      	strh	r3, [r4, #12]
 8013b40:	3410      	adds	r4, #16
 8013b42:	4620      	mov	r0, r4
 8013b44:	2328      	movs	r3, #40	; 0x28
 8013b46:	9300      	str	r3, [sp, #0]
 8013b48:	2338      	movs	r3, #56	; 0x38
 8013b4a:	22c1      	movs	r2, #193	; 0xc1
 8013b4c:	2105      	movs	r1, #5
 8013b4e:	f7ff f84d 	bl	8012bec <_ZN8touchgfx4RectC1Essss>
 8013b52:	2300      	movs	r3, #0
 8013b54:	60a3      	str	r3, [r4, #8]
 8013b56:	2329      	movs	r3, #41	; 0x29
 8013b58:	81a3      	strh	r3, [r4, #12]
};
 8013b5a:	2328      	movs	r3, #40	; 0x28
 8013b5c:	9300      	str	r3, [sp, #0]
 8013b5e:	e003      	b.n	8013b68 <_Z41__static_initialization_and_destruction_0ii+0x390>
 8013b60:	200058e4 	.word	0x200058e4
 8013b64:	20005a4c 	.word	0x20005a4c
 8013b68:	f44f 739a 	mov.w	r3, #308	; 0x134
 8013b6c:	220a      	movs	r2, #10
 8013b6e:	210f      	movs	r1, #15
 8013b70:	480f      	ldr	r0, [pc, #60]	; (8013bb0 <_Z41__static_initialization_and_destruction_0ii+0x3d8>)
 8013b72:	f7ff f83b 	bl	8012bec <_ZN8touchgfx4RectC1Essss>
 8013b76:	2130      	movs	r1, #48	; 0x30
 8013b78:	480e      	ldr	r0, [pc, #56]	; (8013bb4 <_Z41__static_initialization_and_destruction_0ii+0x3dc>)
 8013b7a:	f7ff f875 	bl	8012c68 <_ZN8touchgfx9TypedTextC1Et>
 8013b7e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8013b82:	480d      	ldr	r0, [pc, #52]	; (8013bb8 <_Z41__static_initialization_and_destruction_0ii+0x3e0>)
 8013b84:	f7ff f80c 	bl	8012ba0 <_ZN8touchgfx9colortypeC1Em>
 8013b88:	2100      	movs	r1, #0
 8013b8a:	480c      	ldr	r0, [pc, #48]	; (8013bbc <_Z41__static_initialization_and_destruction_0ii+0x3e4>)
 8013b8c:	f7ff f808 	bl	8012ba0 <_ZN8touchgfx9colortypeC1Em>
static const Keyboard::Layout layout =
 8013b90:	687b      	ldr	r3, [r7, #4]
 8013b92:	2b00      	cmp	r3, #0
 8013b94:	d107      	bne.n	8013ba6 <_Z41__static_initialization_and_destruction_0ii+0x3ce>
 8013b96:	683b      	ldr	r3, [r7, #0]
 8013b98:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8013b9c:	4293      	cmp	r3, r2
 8013b9e:	d102      	bne.n	8013ba6 <_Z41__static_initialization_and_destruction_0ii+0x3ce>
 8013ba0:	4807      	ldr	r0, [pc, #28]	; (8013bc0 <_Z41__static_initialization_and_destruction_0ii+0x3e8>)
 8013ba2:	f7ff f89f 	bl	8012ce4 <_ZN8touchgfx8Keyboard6LayoutD1Ev>
 8013ba6:	bf00      	nop
 8013ba8:	370c      	adds	r7, #12
 8013baa:	46bd      	mov	sp, r7
 8013bac:	bd90      	pop	{r4, r7, pc}
 8013bae:	bf00      	nop
 8013bb0:	20000086 	.word	0x20000086
 8013bb4:	20000090 	.word	0x20000090
 8013bb8:	20000098 	.word	0x20000098
 8013bbc:	200000a0 	.word	0x200000a0
 8013bc0:	20000074 	.word	0x20000074

08013bc4 <_GLOBAL__sub_I__ZN17KeyboardPresenterC2ER12KeyboardView>:
 8013bc4:	b580      	push	{r7, lr}
 8013bc6:	af00      	add	r7, sp, #0
 8013bc8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8013bcc:	2001      	movs	r0, #1
 8013bce:	f7ff fe03 	bl	80137d8 <_Z41__static_initialization_and_destruction_0ii>
 8013bd2:	bd80      	pop	{r7, pc}

08013bd4 <_GLOBAL__sub_D__ZN17KeyboardPresenterC2ER12KeyboardView>:
 8013bd4:	b580      	push	{r7, lr}
 8013bd6:	af00      	add	r7, sp, #0
 8013bd8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8013bdc:	2000      	movs	r0, #0
 8013bde:	f7ff fdfb 	bl	80137d8 <_Z41__static_initialization_and_destruction_0ii>
 8013be2:	bd80      	pop	{r7, pc}

08013be4 <_Z41__static_initialization_and_destruction_0ii>:
}

void KeyboardView::AlarmOrEvent(void)
{
	static_cast<FrontendApplication*>(Application::getInstance())->gotoMainScreenNoTransition();
}
 8013be4:	b590      	push	{r4, r7, lr}
 8013be6:	b085      	sub	sp, #20
 8013be8:	af02      	add	r7, sp, #8
 8013bea:	6078      	str	r0, [r7, #4]
 8013bec:	6039      	str	r1, [r7, #0]
 8013bee:	687b      	ldr	r3, [r7, #4]
 8013bf0:	2b01      	cmp	r3, #1
 8013bf2:	f040 81d3 	bne.w	8013f9c <_Z41__static_initialization_and_destruction_0ii+0x3b8>
 8013bf6:	683b      	ldr	r3, [r7, #0]
 8013bf8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8013bfc:	4293      	cmp	r3, r2
 8013bfe:	f040 81cd 	bne.w	8013f9c <_Z41__static_initialization_and_destruction_0ii+0x3b8>
};
 8013c02:	4cda      	ldr	r4, [pc, #872]	; (8013f6c <_Z41__static_initialization_and_destruction_0ii+0x388>)
 8013c04:	2301      	movs	r3, #1
 8013c06:	7023      	strb	r3, [r4, #0]
 8013c08:	1ca0      	adds	r0, r4, #2
 8013c0a:	2328      	movs	r3, #40	; 0x28
 8013c0c:	9300      	str	r3, [sp, #0]
 8013c0e:	231a      	movs	r3, #26
 8013c10:	223d      	movs	r2, #61	; 0x3d
 8013c12:	2107      	movs	r1, #7
 8013c14:	f7fe ffea 	bl	8012bec <_ZN8touchgfx4RectC1Essss>
 8013c18:	2328      	movs	r3, #40	; 0x28
 8013c1a:	8163      	strh	r3, [r4, #10]
 8013c1c:	340c      	adds	r4, #12
 8013c1e:	2302      	movs	r3, #2
 8013c20:	7023      	strb	r3, [r4, #0]
 8013c22:	1ca0      	adds	r0, r4, #2
 8013c24:	2328      	movs	r3, #40	; 0x28
 8013c26:	9300      	str	r3, [sp, #0]
 8013c28:	231a      	movs	r3, #26
 8013c2a:	223d      	movs	r2, #61	; 0x3d
 8013c2c:	2123      	movs	r1, #35	; 0x23
 8013c2e:	f7fe ffdd 	bl	8012bec <_ZN8touchgfx4RectC1Essss>
 8013c32:	2328      	movs	r3, #40	; 0x28
 8013c34:	8163      	strh	r3, [r4, #10]
 8013c36:	340c      	adds	r4, #12
 8013c38:	2303      	movs	r3, #3
 8013c3a:	7023      	strb	r3, [r4, #0]
 8013c3c:	1ca0      	adds	r0, r4, #2
 8013c3e:	2328      	movs	r3, #40	; 0x28
 8013c40:	9300      	str	r3, [sp, #0]
 8013c42:	231a      	movs	r3, #26
 8013c44:	223d      	movs	r2, #61	; 0x3d
 8013c46:	213f      	movs	r1, #63	; 0x3f
 8013c48:	f7fe ffd0 	bl	8012bec <_ZN8touchgfx4RectC1Essss>
 8013c4c:	2328      	movs	r3, #40	; 0x28
 8013c4e:	8163      	strh	r3, [r4, #10]
 8013c50:	340c      	adds	r4, #12
 8013c52:	2304      	movs	r3, #4
 8013c54:	7023      	strb	r3, [r4, #0]
 8013c56:	1ca0      	adds	r0, r4, #2
 8013c58:	2328      	movs	r3, #40	; 0x28
 8013c5a:	9300      	str	r3, [sp, #0]
 8013c5c:	231a      	movs	r3, #26
 8013c5e:	223d      	movs	r2, #61	; 0x3d
 8013c60:	215b      	movs	r1, #91	; 0x5b
 8013c62:	f7fe ffc3 	bl	8012bec <_ZN8touchgfx4RectC1Essss>
 8013c66:	2328      	movs	r3, #40	; 0x28
 8013c68:	8163      	strh	r3, [r4, #10]
 8013c6a:	340c      	adds	r4, #12
 8013c6c:	2305      	movs	r3, #5
 8013c6e:	7023      	strb	r3, [r4, #0]
 8013c70:	1ca0      	adds	r0, r4, #2
 8013c72:	2328      	movs	r3, #40	; 0x28
 8013c74:	9300      	str	r3, [sp, #0]
 8013c76:	231a      	movs	r3, #26
 8013c78:	223d      	movs	r2, #61	; 0x3d
 8013c7a:	2177      	movs	r1, #119	; 0x77
 8013c7c:	f7fe ffb6 	bl	8012bec <_ZN8touchgfx4RectC1Essss>
 8013c80:	2328      	movs	r3, #40	; 0x28
 8013c82:	8163      	strh	r3, [r4, #10]
 8013c84:	340c      	adds	r4, #12
 8013c86:	2306      	movs	r3, #6
 8013c88:	7023      	strb	r3, [r4, #0]
 8013c8a:	1ca0      	adds	r0, r4, #2
 8013c8c:	2328      	movs	r3, #40	; 0x28
 8013c8e:	9300      	str	r3, [sp, #0]
 8013c90:	231a      	movs	r3, #26
 8013c92:	223d      	movs	r2, #61	; 0x3d
 8013c94:	2193      	movs	r1, #147	; 0x93
 8013c96:	f7fe ffa9 	bl	8012bec <_ZN8touchgfx4RectC1Essss>
 8013c9a:	2328      	movs	r3, #40	; 0x28
 8013c9c:	8163      	strh	r3, [r4, #10]
 8013c9e:	340c      	adds	r4, #12
 8013ca0:	2307      	movs	r3, #7
 8013ca2:	7023      	strb	r3, [r4, #0]
 8013ca4:	1ca0      	adds	r0, r4, #2
 8013ca6:	2328      	movs	r3, #40	; 0x28
 8013ca8:	9300      	str	r3, [sp, #0]
 8013caa:	231a      	movs	r3, #26
 8013cac:	223d      	movs	r2, #61	; 0x3d
 8013cae:	21af      	movs	r1, #175	; 0xaf
 8013cb0:	f7fe ff9c 	bl	8012bec <_ZN8touchgfx4RectC1Essss>
 8013cb4:	2328      	movs	r3, #40	; 0x28
 8013cb6:	8163      	strh	r3, [r4, #10]
 8013cb8:	340c      	adds	r4, #12
 8013cba:	2308      	movs	r3, #8
 8013cbc:	7023      	strb	r3, [r4, #0]
 8013cbe:	1ca0      	adds	r0, r4, #2
 8013cc0:	2328      	movs	r3, #40	; 0x28
 8013cc2:	9300      	str	r3, [sp, #0]
 8013cc4:	231a      	movs	r3, #26
 8013cc6:	223d      	movs	r2, #61	; 0x3d
 8013cc8:	21cb      	movs	r1, #203	; 0xcb
 8013cca:	f7fe ff8f 	bl	8012bec <_ZN8touchgfx4RectC1Essss>
 8013cce:	2328      	movs	r3, #40	; 0x28
 8013cd0:	8163      	strh	r3, [r4, #10]
 8013cd2:	340c      	adds	r4, #12
 8013cd4:	2309      	movs	r3, #9
 8013cd6:	7023      	strb	r3, [r4, #0]
 8013cd8:	1ca0      	adds	r0, r4, #2
 8013cda:	2328      	movs	r3, #40	; 0x28
 8013cdc:	9300      	str	r3, [sp, #0]
 8013cde:	231a      	movs	r3, #26
 8013ce0:	223d      	movs	r2, #61	; 0x3d
 8013ce2:	21e7      	movs	r1, #231	; 0xe7
 8013ce4:	f7fe ff82 	bl	8012bec <_ZN8touchgfx4RectC1Essss>
 8013ce8:	2328      	movs	r3, #40	; 0x28
 8013cea:	8163      	strh	r3, [r4, #10]
 8013cec:	340c      	adds	r4, #12
 8013cee:	230a      	movs	r3, #10
 8013cf0:	7023      	strb	r3, [r4, #0]
 8013cf2:	1ca0      	adds	r0, r4, #2
 8013cf4:	2328      	movs	r3, #40	; 0x28
 8013cf6:	9300      	str	r3, [sp, #0]
 8013cf8:	231a      	movs	r3, #26
 8013cfa:	223d      	movs	r2, #61	; 0x3d
 8013cfc:	f240 1103 	movw	r1, #259	; 0x103
 8013d00:	f7fe ff74 	bl	8012bec <_ZN8touchgfx4RectC1Essss>
 8013d04:	2328      	movs	r3, #40	; 0x28
 8013d06:	8163      	strh	r3, [r4, #10]
 8013d08:	340c      	adds	r4, #12
 8013d0a:	230b      	movs	r3, #11
 8013d0c:	7023      	strb	r3, [r4, #0]
 8013d0e:	1ca0      	adds	r0, r4, #2
 8013d10:	2328      	movs	r3, #40	; 0x28
 8013d12:	9300      	str	r3, [sp, #0]
 8013d14:	231a      	movs	r3, #26
 8013d16:	223d      	movs	r2, #61	; 0x3d
 8013d18:	f240 111f 	movw	r1, #287	; 0x11f
 8013d1c:	f7fe ff66 	bl	8012bec <_ZN8touchgfx4RectC1Essss>
 8013d20:	2328      	movs	r3, #40	; 0x28
 8013d22:	8163      	strh	r3, [r4, #10]
 8013d24:	340c      	adds	r4, #12
 8013d26:	230c      	movs	r3, #12
 8013d28:	7023      	strb	r3, [r4, #0]
 8013d2a:	1ca0      	adds	r0, r4, #2
 8013d2c:	2328      	movs	r3, #40	; 0x28
 8013d2e:	9300      	str	r3, [sp, #0]
 8013d30:	231a      	movs	r3, #26
 8013d32:	2269      	movs	r2, #105	; 0x69
 8013d34:	2107      	movs	r1, #7
 8013d36:	f7fe ff59 	bl	8012bec <_ZN8touchgfx4RectC1Essss>
 8013d3a:	2328      	movs	r3, #40	; 0x28
 8013d3c:	8163      	strh	r3, [r4, #10]
 8013d3e:	340c      	adds	r4, #12
 8013d40:	230d      	movs	r3, #13
 8013d42:	7023      	strb	r3, [r4, #0]
 8013d44:	1ca0      	adds	r0, r4, #2
 8013d46:	2328      	movs	r3, #40	; 0x28
 8013d48:	9300      	str	r3, [sp, #0]
 8013d4a:	231a      	movs	r3, #26
 8013d4c:	2269      	movs	r2, #105	; 0x69
 8013d4e:	2123      	movs	r1, #35	; 0x23
 8013d50:	f7fe ff4c 	bl	8012bec <_ZN8touchgfx4RectC1Essss>
 8013d54:	2328      	movs	r3, #40	; 0x28
 8013d56:	8163      	strh	r3, [r4, #10]
 8013d58:	340c      	adds	r4, #12
 8013d5a:	230e      	movs	r3, #14
 8013d5c:	7023      	strb	r3, [r4, #0]
 8013d5e:	1ca0      	adds	r0, r4, #2
 8013d60:	2328      	movs	r3, #40	; 0x28
 8013d62:	9300      	str	r3, [sp, #0]
 8013d64:	231a      	movs	r3, #26
 8013d66:	2269      	movs	r2, #105	; 0x69
 8013d68:	213f      	movs	r1, #63	; 0x3f
 8013d6a:	f7fe ff3f 	bl	8012bec <_ZN8touchgfx4RectC1Essss>
 8013d6e:	2328      	movs	r3, #40	; 0x28
 8013d70:	8163      	strh	r3, [r4, #10]
 8013d72:	340c      	adds	r4, #12
 8013d74:	230f      	movs	r3, #15
 8013d76:	7023      	strb	r3, [r4, #0]
 8013d78:	1ca0      	adds	r0, r4, #2
 8013d7a:	2328      	movs	r3, #40	; 0x28
 8013d7c:	9300      	str	r3, [sp, #0]
 8013d7e:	231a      	movs	r3, #26
 8013d80:	2269      	movs	r2, #105	; 0x69
 8013d82:	215b      	movs	r1, #91	; 0x5b
 8013d84:	f7fe ff32 	bl	8012bec <_ZN8touchgfx4RectC1Essss>
 8013d88:	2328      	movs	r3, #40	; 0x28
 8013d8a:	8163      	strh	r3, [r4, #10]
 8013d8c:	340c      	adds	r4, #12
 8013d8e:	2310      	movs	r3, #16
 8013d90:	7023      	strb	r3, [r4, #0]
 8013d92:	1ca0      	adds	r0, r4, #2
 8013d94:	2328      	movs	r3, #40	; 0x28
 8013d96:	9300      	str	r3, [sp, #0]
 8013d98:	231a      	movs	r3, #26
 8013d9a:	2269      	movs	r2, #105	; 0x69
 8013d9c:	2177      	movs	r1, #119	; 0x77
 8013d9e:	f7fe ff25 	bl	8012bec <_ZN8touchgfx4RectC1Essss>
 8013da2:	2328      	movs	r3, #40	; 0x28
 8013da4:	8163      	strh	r3, [r4, #10]
 8013da6:	340c      	adds	r4, #12
 8013da8:	2311      	movs	r3, #17
 8013daa:	7023      	strb	r3, [r4, #0]
 8013dac:	1ca0      	adds	r0, r4, #2
 8013dae:	2328      	movs	r3, #40	; 0x28
 8013db0:	9300      	str	r3, [sp, #0]
 8013db2:	231a      	movs	r3, #26
 8013db4:	2269      	movs	r2, #105	; 0x69
 8013db6:	2193      	movs	r1, #147	; 0x93
 8013db8:	f7fe ff18 	bl	8012bec <_ZN8touchgfx4RectC1Essss>
 8013dbc:	2328      	movs	r3, #40	; 0x28
 8013dbe:	8163      	strh	r3, [r4, #10]
 8013dc0:	340c      	adds	r4, #12
 8013dc2:	2312      	movs	r3, #18
 8013dc4:	7023      	strb	r3, [r4, #0]
 8013dc6:	1ca0      	adds	r0, r4, #2
 8013dc8:	2328      	movs	r3, #40	; 0x28
 8013dca:	9300      	str	r3, [sp, #0]
 8013dcc:	231a      	movs	r3, #26
 8013dce:	2269      	movs	r2, #105	; 0x69
 8013dd0:	21af      	movs	r1, #175	; 0xaf
 8013dd2:	f7fe ff0b 	bl	8012bec <_ZN8touchgfx4RectC1Essss>
 8013dd6:	2328      	movs	r3, #40	; 0x28
 8013dd8:	8163      	strh	r3, [r4, #10]
 8013dda:	340c      	adds	r4, #12
 8013ddc:	2313      	movs	r3, #19
 8013dde:	7023      	strb	r3, [r4, #0]
 8013de0:	1ca0      	adds	r0, r4, #2
 8013de2:	2328      	movs	r3, #40	; 0x28
 8013de4:	9300      	str	r3, [sp, #0]
 8013de6:	231a      	movs	r3, #26
 8013de8:	2269      	movs	r2, #105	; 0x69
 8013dea:	21cb      	movs	r1, #203	; 0xcb
 8013dec:	f7fe fefe 	bl	8012bec <_ZN8touchgfx4RectC1Essss>
 8013df0:	2328      	movs	r3, #40	; 0x28
 8013df2:	8163      	strh	r3, [r4, #10]
 8013df4:	340c      	adds	r4, #12
 8013df6:	2314      	movs	r3, #20
 8013df8:	7023      	strb	r3, [r4, #0]
 8013dfa:	1ca0      	adds	r0, r4, #2
 8013dfc:	2328      	movs	r3, #40	; 0x28
 8013dfe:	9300      	str	r3, [sp, #0]
 8013e00:	231a      	movs	r3, #26
 8013e02:	2269      	movs	r2, #105	; 0x69
 8013e04:	21e7      	movs	r1, #231	; 0xe7
 8013e06:	f7fe fef1 	bl	8012bec <_ZN8touchgfx4RectC1Essss>
 8013e0a:	2328      	movs	r3, #40	; 0x28
 8013e0c:	8163      	strh	r3, [r4, #10]
 8013e0e:	340c      	adds	r4, #12
 8013e10:	2315      	movs	r3, #21
 8013e12:	7023      	strb	r3, [r4, #0]
 8013e14:	1ca0      	adds	r0, r4, #2
 8013e16:	2328      	movs	r3, #40	; 0x28
 8013e18:	9300      	str	r3, [sp, #0]
 8013e1a:	231a      	movs	r3, #26
 8013e1c:	2269      	movs	r2, #105	; 0x69
 8013e1e:	f240 1103 	movw	r1, #259	; 0x103
 8013e22:	f7fe fee3 	bl	8012bec <_ZN8touchgfx4RectC1Essss>
 8013e26:	2328      	movs	r3, #40	; 0x28
 8013e28:	8163      	strh	r3, [r4, #10]
 8013e2a:	340c      	adds	r4, #12
 8013e2c:	2316      	movs	r3, #22
 8013e2e:	7023      	strb	r3, [r4, #0]
 8013e30:	1ca0      	adds	r0, r4, #2
 8013e32:	2328      	movs	r3, #40	; 0x28
 8013e34:	9300      	str	r3, [sp, #0]
 8013e36:	231a      	movs	r3, #26
 8013e38:	2269      	movs	r2, #105	; 0x69
 8013e3a:	f240 111f 	movw	r1, #287	; 0x11f
 8013e3e:	f7fe fed5 	bl	8012bec <_ZN8touchgfx4RectC1Essss>
 8013e42:	2328      	movs	r3, #40	; 0x28
 8013e44:	8163      	strh	r3, [r4, #10]
 8013e46:	340c      	adds	r4, #12
 8013e48:	2317      	movs	r3, #23
 8013e4a:	7023      	strb	r3, [r4, #0]
 8013e4c:	1ca0      	adds	r0, r4, #2
 8013e4e:	2328      	movs	r3, #40	; 0x28
 8013e50:	9300      	str	r3, [sp, #0]
 8013e52:	231a      	movs	r3, #26
 8013e54:	2295      	movs	r2, #149	; 0x95
 8013e56:	213f      	movs	r1, #63	; 0x3f
 8013e58:	f7fe fec8 	bl	8012bec <_ZN8touchgfx4RectC1Essss>
 8013e5c:	2328      	movs	r3, #40	; 0x28
 8013e5e:	8163      	strh	r3, [r4, #10]
 8013e60:	340c      	adds	r4, #12
 8013e62:	2318      	movs	r3, #24
 8013e64:	7023      	strb	r3, [r4, #0]
 8013e66:	1ca0      	adds	r0, r4, #2
 8013e68:	2328      	movs	r3, #40	; 0x28
 8013e6a:	9300      	str	r3, [sp, #0]
 8013e6c:	231a      	movs	r3, #26
 8013e6e:	2295      	movs	r2, #149	; 0x95
 8013e70:	215b      	movs	r1, #91	; 0x5b
 8013e72:	f7fe febb 	bl	8012bec <_ZN8touchgfx4RectC1Essss>
 8013e76:	2328      	movs	r3, #40	; 0x28
 8013e78:	8163      	strh	r3, [r4, #10]
 8013e7a:	340c      	adds	r4, #12
 8013e7c:	2319      	movs	r3, #25
 8013e7e:	7023      	strb	r3, [r4, #0]
 8013e80:	1ca0      	adds	r0, r4, #2
 8013e82:	2328      	movs	r3, #40	; 0x28
 8013e84:	9300      	str	r3, [sp, #0]
 8013e86:	231a      	movs	r3, #26
 8013e88:	2295      	movs	r2, #149	; 0x95
 8013e8a:	2177      	movs	r1, #119	; 0x77
 8013e8c:	f7fe feae 	bl	8012bec <_ZN8touchgfx4RectC1Essss>
 8013e90:	2328      	movs	r3, #40	; 0x28
 8013e92:	8163      	strh	r3, [r4, #10]
 8013e94:	340c      	adds	r4, #12
 8013e96:	231a      	movs	r3, #26
 8013e98:	7023      	strb	r3, [r4, #0]
 8013e9a:	1ca0      	adds	r0, r4, #2
 8013e9c:	2328      	movs	r3, #40	; 0x28
 8013e9e:	9300      	str	r3, [sp, #0]
 8013ea0:	231a      	movs	r3, #26
 8013ea2:	2295      	movs	r2, #149	; 0x95
 8013ea4:	2193      	movs	r1, #147	; 0x93
 8013ea6:	f7fe fea1 	bl	8012bec <_ZN8touchgfx4RectC1Essss>
 8013eaa:	2328      	movs	r3, #40	; 0x28
 8013eac:	8163      	strh	r3, [r4, #10]
 8013eae:	340c      	adds	r4, #12
 8013eb0:	231b      	movs	r3, #27
 8013eb2:	7023      	strb	r3, [r4, #0]
 8013eb4:	1ca0      	adds	r0, r4, #2
 8013eb6:	2328      	movs	r3, #40	; 0x28
 8013eb8:	9300      	str	r3, [sp, #0]
 8013eba:	231a      	movs	r3, #26
 8013ebc:	2295      	movs	r2, #149	; 0x95
 8013ebe:	21af      	movs	r1, #175	; 0xaf
 8013ec0:	f7fe fe94 	bl	8012bec <_ZN8touchgfx4RectC1Essss>
 8013ec4:	2328      	movs	r3, #40	; 0x28
 8013ec6:	8163      	strh	r3, [r4, #10]
 8013ec8:	340c      	adds	r4, #12
 8013eca:	231c      	movs	r3, #28
 8013ecc:	7023      	strb	r3, [r4, #0]
 8013ece:	1ca0      	adds	r0, r4, #2
 8013ed0:	2328      	movs	r3, #40	; 0x28
 8013ed2:	9300      	str	r3, [sp, #0]
 8013ed4:	231a      	movs	r3, #26
 8013ed6:	2295      	movs	r2, #149	; 0x95
 8013ed8:	21cb      	movs	r1, #203	; 0xcb
 8013eda:	f7fe fe87 	bl	8012bec <_ZN8touchgfx4RectC1Essss>
 8013ede:	2328      	movs	r3, #40	; 0x28
 8013ee0:	8163      	strh	r3, [r4, #10]
 8013ee2:	340c      	adds	r4, #12
 8013ee4:	231d      	movs	r3, #29
 8013ee6:	7023      	strb	r3, [r4, #0]
 8013ee8:	1ca0      	adds	r0, r4, #2
 8013eea:	2328      	movs	r3, #40	; 0x28
 8013eec:	9300      	str	r3, [sp, #0]
 8013eee:	231a      	movs	r3, #26
 8013ef0:	2295      	movs	r2, #149	; 0x95
 8013ef2:	21e7      	movs	r1, #231	; 0xe7
 8013ef4:	f7fe fe7a 	bl	8012bec <_ZN8touchgfx4RectC1Essss>
 8013ef8:	2328      	movs	r3, #40	; 0x28
 8013efa:	8163      	strh	r3, [r4, #10]
 8013efc:	340c      	adds	r4, #12
 8013efe:	231e      	movs	r3, #30
 8013f00:	7023      	strb	r3, [r4, #0]
 8013f02:	1ca0      	adds	r0, r4, #2
 8013f04:	2328      	movs	r3, #40	; 0x28
 8013f06:	9300      	str	r3, [sp, #0]
 8013f08:	23fc      	movs	r3, #252	; 0xfc
 8013f0a:	22c1      	movs	r2, #193	; 0xc1
 8013f0c:	213e      	movs	r1, #62	; 0x3e
 8013f0e:	f7fe fe6d 	bl	8012bec <_ZN8touchgfx4RectC1Essss>
 8013f12:	232b      	movs	r3, #43	; 0x2b
 8013f14:	8163      	strh	r3, [r4, #10]
};
 8013f16:	4c16      	ldr	r4, [pc, #88]	; (8013f70 <_Z41__static_initialization_and_destruction_0ii+0x38c>)
 8013f18:	4620      	mov	r0, r4
 8013f1a:	2328      	movs	r3, #40	; 0x28
 8013f1c:	9300      	str	r3, [sp, #0]
 8013f1e:	2338      	movs	r3, #56	; 0x38
 8013f20:	2295      	movs	r2, #149	; 0x95
 8013f22:	2105      	movs	r1, #5
 8013f24:	f7fe fe62 	bl	8012bec <_ZN8touchgfx4RectC1Essss>
 8013f28:	2300      	movs	r3, #0
 8013f2a:	60a3      	str	r3, [r4, #8]
 8013f2c:	232a      	movs	r3, #42	; 0x2a
 8013f2e:	81a3      	strh	r3, [r4, #12]
 8013f30:	3410      	adds	r4, #16
 8013f32:	4620      	mov	r0, r4
 8013f34:	2328      	movs	r3, #40	; 0x28
 8013f36:	9300      	str	r3, [sp, #0]
 8013f38:	2338      	movs	r3, #56	; 0x38
 8013f3a:	2295      	movs	r2, #149	; 0x95
 8013f3c:	f44f 7181 	mov.w	r1, #258	; 0x102
 8013f40:	f7fe fe54 	bl	8012bec <_ZN8touchgfx4RectC1Essss>
 8013f44:	2300      	movs	r3, #0
 8013f46:	60a3      	str	r3, [r4, #8]
 8013f48:	2327      	movs	r3, #39	; 0x27
 8013f4a:	81a3      	strh	r3, [r4, #12]
 8013f4c:	3410      	adds	r4, #16
 8013f4e:	4620      	mov	r0, r4
 8013f50:	2328      	movs	r3, #40	; 0x28
 8013f52:	9300      	str	r3, [sp, #0]
 8013f54:	2338      	movs	r3, #56	; 0x38
 8013f56:	22c1      	movs	r2, #193	; 0xc1
 8013f58:	2105      	movs	r1, #5
 8013f5a:	f7fe fe47 	bl	8012bec <_ZN8touchgfx4RectC1Essss>
 8013f5e:	2300      	movs	r3, #0
 8013f60:	60a3      	str	r3, [r4, #8]
 8013f62:	2329      	movs	r3, #41	; 0x29
 8013f64:	81a3      	strh	r3, [r4, #12]
};
 8013f66:	2328      	movs	r3, #40	; 0x28
 8013f68:	9300      	str	r3, [sp, #0]
 8013f6a:	e003      	b.n	8013f74 <_Z41__static_initialization_and_destruction_0ii+0x390>
 8013f6c:	20005a7c 	.word	0x20005a7c
 8013f70:	20005be4 	.word	0x20005be4
 8013f74:	f44f 739a 	mov.w	r3, #308	; 0x134
 8013f78:	220a      	movs	r2, #10
 8013f7a:	210f      	movs	r1, #15
 8013f7c:	480f      	ldr	r0, [pc, #60]	; (8013fbc <_Z41__static_initialization_and_destruction_0ii+0x3d8>)
 8013f7e:	f7fe fe35 	bl	8012bec <_ZN8touchgfx4RectC1Essss>
 8013f82:	2130      	movs	r1, #48	; 0x30
 8013f84:	480e      	ldr	r0, [pc, #56]	; (8013fc0 <_Z41__static_initialization_and_destruction_0ii+0x3dc>)
 8013f86:	f7fe fe6f 	bl	8012c68 <_ZN8touchgfx9TypedTextC1Et>
 8013f8a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8013f8e:	480d      	ldr	r0, [pc, #52]	; (8013fc4 <_Z41__static_initialization_and_destruction_0ii+0x3e0>)
 8013f90:	f7fe fe06 	bl	8012ba0 <_ZN8touchgfx9colortypeC1Em>
 8013f94:	2100      	movs	r1, #0
 8013f96:	480c      	ldr	r0, [pc, #48]	; (8013fc8 <_Z41__static_initialization_and_destruction_0ii+0x3e4>)
 8013f98:	f7fe fe02 	bl	8012ba0 <_ZN8touchgfx9colortypeC1Em>
static const Keyboard::Layout layout =
 8013f9c:	687b      	ldr	r3, [r7, #4]
 8013f9e:	2b00      	cmp	r3, #0
 8013fa0:	d107      	bne.n	8013fb2 <_Z41__static_initialization_and_destruction_0ii+0x3ce>
 8013fa2:	683b      	ldr	r3, [r7, #0]
 8013fa4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8013fa8:	4293      	cmp	r3, r2
 8013faa:	d102      	bne.n	8013fb2 <_Z41__static_initialization_and_destruction_0ii+0x3ce>
 8013fac:	4807      	ldr	r0, [pc, #28]	; (8013fcc <_Z41__static_initialization_and_destruction_0ii+0x3e8>)
 8013fae:	f7fe fe99 	bl	8012ce4 <_ZN8touchgfx8Keyboard6LayoutD1Ev>
 8013fb2:	bf00      	nop
 8013fb4:	370c      	adds	r7, #12
 8013fb6:	46bd      	mov	sp, r7
 8013fb8:	bd90      	pop	{r4, r7, pc}
 8013fba:	bf00      	nop
 8013fbc:	200000b6 	.word	0x200000b6
 8013fc0:	200000c0 	.word	0x200000c0
 8013fc4:	200000c8 	.word	0x200000c8
 8013fc8:	200000d0 	.word	0x200000d0
 8013fcc:	200000a4 	.word	0x200000a4

08013fd0 <_GLOBAL__sub_I__ZN12KeyboardViewC2Ev>:
 8013fd0:	b580      	push	{r7, lr}
 8013fd2:	af00      	add	r7, sp, #0
 8013fd4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8013fd8:	2001      	movs	r0, #1
 8013fda:	f7ff fe03 	bl	8013be4 <_Z41__static_initialization_and_destruction_0ii>
 8013fde:	bd80      	pop	{r7, pc}

08013fe0 <_GLOBAL__sub_D__ZN12KeyboardViewC2Ev>:
 8013fe0:	b580      	push	{r7, lr}
 8013fe2:	af00      	add	r7, sp, #0
 8013fe4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8013fe8:	2000      	movs	r0, #0
 8013fea:	f7ff fdfb 	bl	8013be4 <_Z41__static_initialization_and_destruction_0ii>
 8013fee:	bd80      	pop	{r7, pc}

08013ff0 <_ZN8touchgfx15TouchControllerD1Ev>:
/** Basic Touch Controller interface. */
class TouchController
{
public:
    /** Finalizes an instance of the TouchController class. */
    virtual ~TouchController()
 8013ff0:	b480      	push	{r7}
 8013ff2:	b083      	sub	sp, #12
 8013ff4:	af00      	add	r7, sp, #0
 8013ff6:	6078      	str	r0, [r7, #4]
    {
 8013ff8:	4a04      	ldr	r2, [pc, #16]	; (801400c <_ZN8touchgfx15TouchControllerD1Ev+0x1c>)
 8013ffa:	687b      	ldr	r3, [r7, #4]
 8013ffc:	601a      	str	r2, [r3, #0]
    }
 8013ffe:	687b      	ldr	r3, [r7, #4]
 8014000:	4618      	mov	r0, r3
 8014002:	370c      	adds	r7, #12
 8014004:	46bd      	mov	sp, r7
 8014006:	f85d 7b04 	ldr.w	r7, [sp], #4
 801400a:	4770      	bx	lr
 801400c:	0801eea4 	.word	0x0801eea4

08014010 <_ZN8touchgfx15TouchControllerD0Ev>:
    virtual ~TouchController()
 8014010:	b580      	push	{r7, lr}
 8014012:	b082      	sub	sp, #8
 8014014:	af00      	add	r7, sp, #0
 8014016:	6078      	str	r0, [r7, #4]
    }
 8014018:	6878      	ldr	r0, [r7, #4]
 801401a:	f7ff ffe9 	bl	8013ff0 <_ZN8touchgfx15TouchControllerD1Ev>
 801401e:	2104      	movs	r1, #4
 8014020:	6878      	ldr	r0, [r7, #4]
 8014022:	f007 fad5 	bl	801b5d0 <_ZdlPvj>
 8014026:	687b      	ldr	r3, [r7, #4]
 8014028:	4618      	mov	r0, r3
 801402a:	3708      	adds	r7, #8
 801402c:	46bd      	mov	sp, r7
 801402e:	bd80      	pop	{r7, pc}

08014030 <_ZN20STM32TouchController4initEv>:
/* USER CODE BEGIN STM32TouchController */

#include <STM32TouchController.hpp>

void STM32TouchController::init()
{
 8014030:	b480      	push	{r7}
 8014032:	b083      	sub	sp, #12
 8014034:	af00      	add	r7, sp, #0
 8014036:	6078      	str	r0, [r7, #4]
    /**
     * Initialize touch controller and driver
     *
     */
}
 8014038:	bf00      	nop
 801403a:	370c      	adds	r7, #12
 801403c:	46bd      	mov	sp, r7
 801403e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014042:	4770      	bx	lr

08014044 <_ZN20STM32TouchController11sampleTouchERlS0_>:

bool STM32TouchController::sampleTouch(int32_t& x, int32_t& y)
{
 8014044:	b480      	push	{r7}
 8014046:	b085      	sub	sp, #20
 8014048:	af00      	add	r7, sp, #0
 801404a:	60f8      	str	r0, [r7, #12]
 801404c:	60b9      	str	r1, [r7, #8]
 801404e:	607a      	str	r2, [r7, #4]
     *
     * This function is called by the TouchGFX framework.
     * By default sampleTouch is called every tick, this can be adjusted by HAL::setTouchSampleRate(int8_t);
     *
     */
    return false;
 8014050:	2300      	movs	r3, #0
}
 8014052:	4618      	mov	r0, r3
 8014054:	3714      	adds	r7, #20
 8014056:	46bd      	mov	sp, r7
 8014058:	f85d 7b04 	ldr.w	r7, [sp], #4
 801405c:	4770      	bx	lr
	...

08014060 <_ZN20STM32TouchControllerD1Ev>:
 * @brief This class specializes TouchController Interface.
 *
 * @sa touchgfx::TouchController
 */

class STM32TouchController : public touchgfx::TouchController
 8014060:	b580      	push	{r7, lr}
 8014062:	b082      	sub	sp, #8
 8014064:	af00      	add	r7, sp, #0
 8014066:	6078      	str	r0, [r7, #4]
 8014068:	4a05      	ldr	r2, [pc, #20]	; (8014080 <_ZN20STM32TouchControllerD1Ev+0x20>)
 801406a:	687b      	ldr	r3, [r7, #4]
 801406c:	601a      	str	r2, [r3, #0]
 801406e:	687b      	ldr	r3, [r7, #4]
 8014070:	4618      	mov	r0, r3
 8014072:	f7ff ffbd 	bl	8013ff0 <_ZN8touchgfx15TouchControllerD1Ev>
 8014076:	687b      	ldr	r3, [r7, #4]
 8014078:	4618      	mov	r0, r3
 801407a:	3708      	adds	r7, #8
 801407c:	46bd      	mov	sp, r7
 801407e:	bd80      	pop	{r7, pc}
 8014080:	0801ee8c 	.word	0x0801ee8c

08014084 <_ZN20STM32TouchControllerD0Ev>:
 8014084:	b580      	push	{r7, lr}
 8014086:	b082      	sub	sp, #8
 8014088:	af00      	add	r7, sp, #0
 801408a:	6078      	str	r0, [r7, #4]
 801408c:	6878      	ldr	r0, [r7, #4]
 801408e:	f7ff ffe7 	bl	8014060 <_ZN20STM32TouchControllerD1Ev>
 8014092:	2104      	movs	r1, #4
 8014094:	6878      	ldr	r0, [r7, #4]
 8014096:	f007 fa9b 	bl	801b5d0 <_ZdlPvj>
 801409a:	687b      	ldr	r3, [r7, #4]
 801409c:	4618      	mov	r0, r3
 801409e:	3708      	adds	r7, #8
 80140a0:	46bd      	mov	sp, r7
 80140a2:	bd80      	pop	{r7, pc}

080140a4 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>:

/*
 * Sets a pin high.
 */
void GPIO::set(GPIO_ID id)
{
 80140a4:	b480      	push	{r7}
 80140a6:	b083      	sub	sp, #12
 80140a8:	af00      	add	r7, sp, #0
 80140aa:	4603      	mov	r3, r0
 80140ac:	71fb      	strb	r3, [r7, #7]

}
 80140ae:	bf00      	nop
 80140b0:	370c      	adds	r7, #12
 80140b2:	46bd      	mov	sp, r7
 80140b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80140b8:	4770      	bx	lr

080140ba <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>:

/*
 * Sets a pin low.
 */
void GPIO::clear(GPIO_ID id)
{
 80140ba:	b480      	push	{r7}
 80140bc:	b083      	sub	sp, #12
 80140be:	af00      	add	r7, sp, #0
 80140c0:	4603      	mov	r3, r0
 80140c2:	71fb      	strb	r3, [r7, #7]

}
 80140c4:	bf00      	nop
 80140c6:	370c      	adds	r7, #12
 80140c8:	46bd      	mov	sp, r7
 80140ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80140ce:	4770      	bx	lr

080140d0 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>:

/*
 * Toggles a pin.
 */
void GPIO::toggle(GPIO_ID id)
{
 80140d0:	b480      	push	{r7}
 80140d2:	b083      	sub	sp, #12
 80140d4:	af00      	add	r7, sp, #0
 80140d6:	4603      	mov	r3, r0
 80140d8:	71fb      	strb	r3, [r7, #7]

}
 80140da:	bf00      	nop
 80140dc:	370c      	adds	r7, #12
 80140de:	46bd      	mov	sp, r7
 80140e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80140e4:	4770      	bx	lr
	...

080140e8 <_ZN8touchgfx3HALD1Ev>:
    virtual ~HAL()
 80140e8:	b480      	push	{r7}
 80140ea:	b083      	sub	sp, #12
 80140ec:	af00      	add	r7, sp, #0
 80140ee:	6078      	str	r0, [r7, #4]
    {
 80140f0:	4a04      	ldr	r2, [pc, #16]	; (8014104 <_ZN8touchgfx3HALD1Ev+0x1c>)
 80140f2:	687b      	ldr	r3, [r7, #4]
 80140f4:	601a      	str	r2, [r3, #0]
    }
 80140f6:	687b      	ldr	r3, [r7, #4]
 80140f8:	4618      	mov	r0, r3
 80140fa:	370c      	adds	r7, #12
 80140fc:	46bd      	mov	sp, r7
 80140fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014102:	4770      	bx	lr
 8014104:	0801f364 	.word	0x0801f364

08014108 <_ZN8touchgfx3HALD0Ev>:
    virtual ~HAL()
 8014108:	b580      	push	{r7, lr}
 801410a:	b082      	sub	sp, #8
 801410c:	af00      	add	r7, sp, #0
 801410e:	6078      	str	r0, [r7, #4]
    }
 8014110:	6878      	ldr	r0, [r7, #4]
 8014112:	f7ff ffe9 	bl	80140e8 <_ZN8touchgfx3HALD1Ev>
 8014116:	217c      	movs	r1, #124	; 0x7c
 8014118:	6878      	ldr	r0, [r7, #4]
 801411a:	f007 fa59 	bl	801b5d0 <_ZdlPvj>
 801411e:	687b      	ldr	r3, [r7, #4]
 8014120:	4618      	mov	r0, r3
 8014122:	3708      	adds	r7, #8
 8014124:	46bd      	mov	sp, r7
 8014126:	bd80      	pop	{r7, pc}

08014128 <_ZN8touchgfx3HAL21setDisplayOrientationENS_18DisplayOrientationE>:
    virtual void setDisplayOrientation(DisplayOrientation orientation)
 8014128:	b480      	push	{r7}
 801412a:	b083      	sub	sp, #12
 801412c:	af00      	add	r7, sp, #0
 801412e:	6078      	str	r0, [r7, #4]
 8014130:	460b      	mov	r3, r1
 8014132:	70fb      	strb	r3, [r7, #3]
        requestedOrientation = orientation;
 8014134:	687b      	ldr	r3, [r7, #4]
 8014136:	78fa      	ldrb	r2, [r7, #3]
 8014138:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
        displayOrientationChangeRequested = true;
 801413c:	687b      	ldr	r3, [r7, #4]
 801413e:	2201      	movs	r2, #1
 8014140:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
    }
 8014144:	bf00      	nop
 8014146:	370c      	adds	r7, #12
 8014148:	46bd      	mov	sp, r7
 801414a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801414e:	4770      	bx	lr

08014150 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt>:
    virtual void setFrameBufferSize(uint16_t width, uint16_t height)
 8014150:	b580      	push	{r7, lr}
 8014152:	b082      	sub	sp, #8
 8014154:	af00      	add	r7, sp, #0
 8014156:	6078      	str	r0, [r7, #4]
 8014158:	460b      	mov	r3, r1
 801415a:	807b      	strh	r3, [r7, #2]
 801415c:	4613      	mov	r3, r2
 801415e:	803b      	strh	r3, [r7, #0]
        assert(width >= DISPLAY_WIDTH && height >= DISPLAY_HEIGHT && "Framebuffer cannot be smaller than display");
 8014160:	4b0c      	ldr	r3, [pc, #48]	; (8014194 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x44>)
 8014162:	881b      	ldrh	r3, [r3, #0]
 8014164:	887a      	ldrh	r2, [r7, #2]
 8014166:	429a      	cmp	r2, r3
 8014168:	d304      	bcc.n	8014174 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x24>
 801416a:	4b0b      	ldr	r3, [pc, #44]	; (8014198 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x48>)
 801416c:	881b      	ldrh	r3, [r3, #0]
 801416e:	883a      	ldrh	r2, [r7, #0]
 8014170:	429a      	cmp	r2, r3
 8014172:	d205      	bcs.n	8014180 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x30>
 8014174:	4b09      	ldr	r3, [pc, #36]	; (801419c <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x4c>)
 8014176:	4a0a      	ldr	r2, [pc, #40]	; (80141a0 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x50>)
 8014178:	219e      	movs	r1, #158	; 0x9e
 801417a:	480a      	ldr	r0, [pc, #40]	; (80141a4 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x54>)
 801417c:	f007 fa56 	bl	801b62c <__assert_func>
        FRAME_BUFFER_WIDTH = width;
 8014180:	4a09      	ldr	r2, [pc, #36]	; (80141a8 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x58>)
 8014182:	887b      	ldrh	r3, [r7, #2]
 8014184:	8013      	strh	r3, [r2, #0]
        FRAME_BUFFER_HEIGHT = height;
 8014186:	4a09      	ldr	r2, [pc, #36]	; (80141ac <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x5c>)
 8014188:	883b      	ldrh	r3, [r7, #0]
 801418a:	8013      	strh	r3, [r2, #0]
    }
 801418c:	bf00      	nop
 801418e:	3708      	adds	r7, #8
 8014190:	46bd      	mov	sp, r7
 8014192:	bd80      	pop	{r7, pc}
 8014194:	20006dea 	.word	0x20006dea
 8014198:	20006dec 	.word	0x20006dec
 801419c:	0801e834 	.word	0x0801e834
 80141a0:	0801e898 	.word	0x0801e898
 80141a4:	0801e8dc 	.word	0x0801e8dc
 80141a8:	20006df0 	.word	0x20006df0
 80141ac:	20006df2 	.word	0x20006df2

080141b0 <_ZN8touchgfx3HAL11getBlitCapsEv>:
     *
     * @return a bitmask of the supported blitcaps.
     *
     * @see enableDMAAcceleration
     */
    virtual BlitOperations getBlitCaps()
 80141b0:	b580      	push	{r7, lr}
 80141b2:	b082      	sub	sp, #8
 80141b4:	af00      	add	r7, sp, #0
 80141b6:	6078      	str	r0, [r7, #4]
    {
        if (useDMAAcceleration)
 80141b8:	687b      	ldr	r3, [r7, #4]
 80141ba:	f893 3077 	ldrb.w	r3, [r3, #119]	; 0x77
 80141be:	2b00      	cmp	r3, #0
 80141c0:	d009      	beq.n	80141d6 <_ZN8touchgfx3HAL11getBlitCapsEv+0x26>
        {
            return dma.getBlitCaps();
 80141c2:	687b      	ldr	r3, [r7, #4]
 80141c4:	685a      	ldr	r2, [r3, #4]
 80141c6:	687b      	ldr	r3, [r7, #4]
 80141c8:	685b      	ldr	r3, [r3, #4]
 80141ca:	681b      	ldr	r3, [r3, #0]
 80141cc:	681b      	ldr	r3, [r3, #0]
 80141ce:	4610      	mov	r0, r2
 80141d0:	4798      	blx	r3
 80141d2:	4603      	mov	r3, r0
 80141d4:	e000      	b.n	80141d8 <_ZN8touchgfx3HAL11getBlitCapsEv+0x28>
        }
        return static_cast<BlitOperations>(0);
 80141d6:	2300      	movs	r3, #0
    }
 80141d8:	4618      	mov	r0, r3
 80141da:	3708      	adds	r7, #8
 80141dc:	46bd      	mov	sp, r7
 80141de:	bd80      	pop	{r7, pc}

080141e0 <_ZN8touchgfx3HAL15backPorchExitedEv>:
    /**
     * Has to be called from within the LCD IRQ rutine when the Back Porch Exit is reached.
     *
     * Has to be called from within the LCD IRQ rutine when the Back Porch Exit is reached.
     */
    virtual void backPorchExited()
 80141e0:	b580      	push	{r7, lr}
 80141e2:	b082      	sub	sp, #8
 80141e4:	af00      	add	r7, sp, #0
 80141e6:	6078      	str	r0, [r7, #4]
    {
        swapFrameBuffers();
 80141e8:	6878      	ldr	r0, [r7, #4]
 80141ea:	f002 fe3f 	bl	8016e6c <_ZN8touchgfx3HAL16swapFrameBuffersEv>
        tick();
 80141ee:	687b      	ldr	r3, [r7, #4]
 80141f0:	681b      	ldr	r3, [r3, #0]
 80141f2:	33ac      	adds	r3, #172	; 0xac
 80141f4:	681b      	ldr	r3, [r3, #0]
 80141f6:	6878      	ldr	r0, [r7, #4]
 80141f8:	4798      	blx	r3
    }
 80141fa:	bf00      	nop
 80141fc:	3708      	adds	r7, #8
 80141fe:	46bd      	mov	sp, r7
 8014200:	bd80      	pop	{r7, pc}

08014202 <_ZN8touchgfx3HAL9sampleKeyERh>:
     * @param [out] key Output parameter that will be set to the key value if a keypress was
     *                  detected.
     *
     * @return True if a keypress was detected and the "key" parameter is set to a value.
     */
    virtual bool sampleKey(uint8_t& key)
 8014202:	b480      	push	{r7}
 8014204:	b083      	sub	sp, #12
 8014206:	af00      	add	r7, sp, #0
 8014208:	6078      	str	r0, [r7, #4]
 801420a:	6039      	str	r1, [r7, #0]
    {
        return false;
 801420c:	2300      	movs	r3, #0
    }
 801420e:	4618      	mov	r0, r3
 8014210:	370c      	adds	r7, #12
 8014212:	46bd      	mov	sp, r7
 8014214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014218:	4770      	bx	lr
	...

0801421c <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_>:
     * @param [in] animationStorage If non-null, the animation storage. If null animation storage
     *                              is disabled.
     *
     * @see setAnimationStorage
     */
    virtual void setFrameBufferStartAddresses(void* frameBuffer, void* doubleBuffer, void* animationStorage)
 801421c:	b580      	push	{r7, lr}
 801421e:	b084      	sub	sp, #16
 8014220:	af00      	add	r7, sp, #0
 8014222:	60f8      	str	r0, [r7, #12]
 8014224:	60b9      	str	r1, [r7, #8]
 8014226:	607a      	str	r2, [r7, #4]
 8014228:	603b      	str	r3, [r7, #0]
    {
        assert(frameBuffer != 0 && "A framebuffer address must be set");
 801422a:	68bb      	ldr	r3, [r7, #8]
 801422c:	2b00      	cmp	r3, #0
 801422e:	d106      	bne.n	801423e <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x22>
 8014230:	4b0f      	ldr	r3, [pc, #60]	; (8014270 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x54>)
 8014232:	4a10      	ldr	r2, [pc, #64]	; (8014274 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x58>)
 8014234:	f240 21bb 	movw	r1, #699	; 0x2bb
 8014238:	480f      	ldr	r0, [pc, #60]	; (8014278 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x5c>)
 801423a:	f007 f9f7 	bl	801b62c <__assert_func>
        frameBuffer0 = reinterpret_cast<uint16_t*>(frameBuffer);
 801423e:	68fb      	ldr	r3, [r7, #12]
 8014240:	68ba      	ldr	r2, [r7, #8]
 8014242:	63da      	str	r2, [r3, #60]	; 0x3c
        frameBuffer1 = reinterpret_cast<uint16_t*>(doubleBuffer);
 8014244:	68fb      	ldr	r3, [r7, #12]
 8014246:	687a      	ldr	r2, [r7, #4]
 8014248:	641a      	str	r2, [r3, #64]	; 0x40
        USE_DOUBLE_BUFFERING = doubleBuffer != 0;
 801424a:	687b      	ldr	r3, [r7, #4]
 801424c:	2b00      	cmp	r3, #0
 801424e:	bf14      	ite	ne
 8014250:	2301      	movne	r3, #1
 8014252:	2300      	moveq	r3, #0
 8014254:	b2da      	uxtb	r2, r3
 8014256:	4b09      	ldr	r3, [pc, #36]	; (801427c <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x60>)
 8014258:	701a      	strb	r2, [r3, #0]
        setAnimationStorage(animationStorage);
 801425a:	68fb      	ldr	r3, [r7, #12]
 801425c:	681b      	ldr	r3, [r3, #0]
 801425e:	338c      	adds	r3, #140	; 0x8c
 8014260:	681b      	ldr	r3, [r3, #0]
 8014262:	6839      	ldr	r1, [r7, #0]
 8014264:	68f8      	ldr	r0, [r7, #12]
 8014266:	4798      	blx	r3
    }
 8014268:	bf00      	nop
 801426a:	3710      	adds	r7, #16
 801426c:	46bd      	mov	sp, r7
 801426e:	bd80      	pop	{r7, pc}
 8014270:	0801e920 	.word	0x0801e920
 8014274:	0801e958 	.word	0x0801e958
 8014278:	0801e8dc 	.word	0x0801e8dc
 801427c:	20006df4 	.word	0x20006df4

08014280 <_ZN8touchgfx3HAL19setAnimationStorageEPv>:
     * @param [in] animationStorage If non-null, the animation storage. If null animation storage
     *                              is disabled.
     *
     * @see setFrameBufferStartAddresses
     */
    virtual void setAnimationStorage(void* animationStorage)
 8014280:	b480      	push	{r7}
 8014282:	b083      	sub	sp, #12
 8014284:	af00      	add	r7, sp, #0
 8014286:	6078      	str	r0, [r7, #4]
 8014288:	6039      	str	r1, [r7, #0]
    {
        frameBuffer2 = reinterpret_cast<uint16_t*>(animationStorage);
 801428a:	687b      	ldr	r3, [r7, #4]
 801428c:	683a      	ldr	r2, [r7, #0]
 801428e:	645a      	str	r2, [r3, #68]	; 0x44
        USE_ANIMATION_STORAGE = animationStorage != 0;
 8014290:	683b      	ldr	r3, [r7, #0]
 8014292:	2b00      	cmp	r3, #0
 8014294:	bf14      	ite	ne
 8014296:	2301      	movne	r3, #1
 8014298:	2300      	moveq	r3, #0
 801429a:	b2da      	uxtb	r2, r3
 801429c:	4b03      	ldr	r3, [pc, #12]	; (80142ac <_ZN8touchgfx3HAL19setAnimationStorageEPv+0x2c>)
 801429e:	701a      	strb	r2, [r3, #0]
    }
 80142a0:	bf00      	nop
 80142a2:	370c      	adds	r7, #12
 80142a4:	46bd      	mov	sp, r7
 80142a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80142aa:	4770      	bx	lr
 80142ac:	20006df5 	.word	0x20006df5

080142b0 <_ZNK8touchgfx3HAL18getFlashDataReaderEv>:
     * Gets the flash data reader. This method must be implemented in
     * subclasses that uses a FlashDataReader object.
     *
     * @return the FlashDataReader.
     */
    virtual FlashDataReader* getFlashDataReader() const
 80142b0:	b480      	push	{r7}
 80142b2:	b083      	sub	sp, #12
 80142b4:	af00      	add	r7, sp, #0
 80142b6:	6078      	str	r0, [r7, #4]
    {
        return 0;
 80142b8:	2300      	movs	r3, #0
    }
 80142ba:	4618      	mov	r0, r3
 80142bc:	370c      	adds	r7, #12
 80142be:	46bd      	mov	sp, r7
 80142c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80142c4:	4770      	bx	lr

080142c6 <_ZN8touchgfx3HAL9taskDelayEt>:
     *
     * @param  ms Number of milliseconds to wait.
     *
     * @see registerTaskDelayFunction
     */
    virtual void taskDelay(uint16_t ms)
 80142c6:	b580      	push	{r7, lr}
 80142c8:	b082      	sub	sp, #8
 80142ca:	af00      	add	r7, sp, #0
 80142cc:	6078      	str	r0, [r7, #4]
 80142ce:	460b      	mov	r3, r1
 80142d0:	807b      	strh	r3, [r7, #2]
    {
        if (taskDelayFunc)
 80142d2:	687b      	ldr	r3, [r7, #4]
 80142d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80142d6:	2b00      	cmp	r3, #0
 80142d8:	d004      	beq.n	80142e4 <_ZN8touchgfx3HAL9taskDelayEt+0x1e>
        {
            taskDelayFunc(ms);
 80142da:	687b      	ldr	r3, [r7, #4]
 80142dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80142de:	887a      	ldrh	r2, [r7, #2]
 80142e0:	4610      	mov	r0, r2
 80142e2:	4798      	blx	r3
        }
    }
 80142e4:	bf00      	nop
 80142e6:	3708      	adds	r7, #8
 80142e8:	46bd      	mov	sp, r7
 80142ea:	bd80      	pop	{r7, pc}

080142ec <_ZN8touchgfx3HAL10getDMATypeEv>:
     * Function for obtaining the DMA type of the concrete DMA implementation. As default,
     * will return DMA_TYPE_GENERIC type value.
     *
     * @return a DMAType value of the concrete DMA implementation.
     */
    virtual DMAType getDMAType()
 80142ec:	b580      	push	{r7, lr}
 80142ee:	b082      	sub	sp, #8
 80142f0:	af00      	add	r7, sp, #0
 80142f2:	6078      	str	r0, [r7, #4]
    {
        return dma.getDMAType();
 80142f4:	687b      	ldr	r3, [r7, #4]
 80142f6:	685a      	ldr	r2, [r3, #4]
 80142f8:	687b      	ldr	r3, [r7, #4]
 80142fa:	685b      	ldr	r3, [r3, #4]
 80142fc:	681b      	ldr	r3, [r3, #0]
 80142fe:	3318      	adds	r3, #24
 8014300:	681b      	ldr	r3, [r3, #0]
 8014302:	4610      	mov	r0, r2
 8014304:	4798      	blx	r3
 8014306:	4603      	mov	r3, r0
    }
 8014308:	4618      	mov	r0, r3
 801430a:	3708      	adds	r7, #8
 801430c:	46bd      	mov	sp, r7
 801430e:	bd80      	pop	{r7, pc}

08014310 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv>:

    /** Called by the touch driver to indicate that no touch is currently detected. */
    virtual void noTouch();

    /** Perform the actual display orientation change. */
    virtual void performDisplayOrientationChange()
 8014310:	b480      	push	{r7}
 8014312:	b085      	sub	sp, #20
 8014314:	af00      	add	r7, sp, #0
 8014316:	6078      	str	r0, [r7, #4]
    {
        if (requestedOrientation != nativeDisplayOrientation)
 8014318:	687b      	ldr	r3, [r7, #4]
 801431a:	f893 2074 	ldrb.w	r2, [r3, #116]	; 0x74
 801431e:	687b      	ldr	r3, [r7, #4]
 8014320:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8014324:	429a      	cmp	r2, r3
 8014326:	d011      	beq.n	801434c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x3c>
        {
            if (DISPLAY_ROTATION == rotate0)
 8014328:	4b14      	ldr	r3, [pc, #80]	; (801437c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x6c>)
 801432a:	781b      	ldrb	r3, [r3, #0]
 801432c:	2b00      	cmp	r3, #0
 801432e:	d11e      	bne.n	801436e <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x5e>
            {
                const uint16_t tmp = DISPLAY_HEIGHT;
 8014330:	4b13      	ldr	r3, [pc, #76]	; (8014380 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x70>)
 8014332:	881b      	ldrh	r3, [r3, #0]
 8014334:	81bb      	strh	r3, [r7, #12]
                DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8014336:	4b13      	ldr	r3, [pc, #76]	; (8014384 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x74>)
 8014338:	881a      	ldrh	r2, [r3, #0]
 801433a:	4b11      	ldr	r3, [pc, #68]	; (8014380 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x70>)
 801433c:	801a      	strh	r2, [r3, #0]
                DISPLAY_WIDTH = tmp;
 801433e:	4a11      	ldr	r2, [pc, #68]	; (8014384 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x74>)
 8014340:	89bb      	ldrh	r3, [r7, #12]
 8014342:	8013      	strh	r3, [r2, #0]
                DISPLAY_ROTATION = rotate90;
 8014344:	4b0d      	ldr	r3, [pc, #52]	; (801437c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x6c>)
 8014346:	2201      	movs	r2, #1
 8014348:	701a      	strb	r2, [r3, #0]
            const uint16_t tmp = DISPLAY_HEIGHT;
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
            DISPLAY_WIDTH = tmp;
            DISPLAY_ROTATION = rotate0;
        }
    }
 801434a:	e010      	b.n	801436e <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x5e>
        else if (DISPLAY_ROTATION != rotate0)
 801434c:	4b0b      	ldr	r3, [pc, #44]	; (801437c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x6c>)
 801434e:	781b      	ldrb	r3, [r3, #0]
 8014350:	2b00      	cmp	r3, #0
 8014352:	d00c      	beq.n	801436e <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x5e>
            const uint16_t tmp = DISPLAY_HEIGHT;
 8014354:	4b0a      	ldr	r3, [pc, #40]	; (8014380 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x70>)
 8014356:	881b      	ldrh	r3, [r3, #0]
 8014358:	81fb      	strh	r3, [r7, #14]
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
 801435a:	4b0a      	ldr	r3, [pc, #40]	; (8014384 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x74>)
 801435c:	881a      	ldrh	r2, [r3, #0]
 801435e:	4b08      	ldr	r3, [pc, #32]	; (8014380 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x70>)
 8014360:	801a      	strh	r2, [r3, #0]
            DISPLAY_WIDTH = tmp;
 8014362:	4a08      	ldr	r2, [pc, #32]	; (8014384 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x74>)
 8014364:	89fb      	ldrh	r3, [r7, #14]
 8014366:	8013      	strh	r3, [r2, #0]
            DISPLAY_ROTATION = rotate0;
 8014368:	4b04      	ldr	r3, [pc, #16]	; (801437c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x6c>)
 801436a:	2200      	movs	r2, #0
 801436c:	701a      	strb	r2, [r3, #0]
    }
 801436e:	bf00      	nop
 8014370:	3714      	adds	r7, #20
 8014372:	46bd      	mov	sp, r7
 8014374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014378:	4770      	bx	lr
 801437a:	bf00      	nop
 801437c:	20006dee 	.word	0x20006dee
 8014380:	20006dec 	.word	0x20006dec
 8014384:	20006dea 	.word	0x20006dea

08014388 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferEv>:
     *
     * This specialization is only in place to keep compilers happy. Base impl. will call the
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
 8014388:	b580      	push	{r7, lr}
 801438a:	b082      	sub	sp, #8
 801438c:	af00      	add	r7, sp, #0
 801438e:	6078      	str	r0, [r7, #4]
    {
        HAL::flushFrameBuffer();
 8014390:	687b      	ldr	r3, [r7, #4]
 8014392:	4618      	mov	r0, r3
 8014394:	f001 fef4 	bl	8016180 <_ZN8touchgfx3HAL16flushFrameBufferEv>
    }
 8014398:	bf00      	nop
 801439a:	3708      	adds	r7, #8
 801439c:	46bd      	mov	sp, r7
 801439e:	bd80      	pop	{r7, pc}

080143a0 <_ZN20TouchGFXGeneratedHALD1Ev>:
class TouchGFXGeneratedHAL : public touchgfx::HAL
 80143a0:	b580      	push	{r7, lr}
 80143a2:	b082      	sub	sp, #8
 80143a4:	af00      	add	r7, sp, #0
 80143a6:	6078      	str	r0, [r7, #4]
 80143a8:	4a05      	ldr	r2, [pc, #20]	; (80143c0 <_ZN20TouchGFXGeneratedHALD1Ev+0x20>)
 80143aa:	687b      	ldr	r3, [r7, #4]
 80143ac:	601a      	str	r2, [r3, #0]
 80143ae:	687b      	ldr	r3, [r7, #4]
 80143b0:	4618      	mov	r0, r3
 80143b2:	f7ff fe99 	bl	80140e8 <_ZN8touchgfx3HALD1Ev>
 80143b6:	687b      	ldr	r3, [r7, #4]
 80143b8:	4618      	mov	r0, r3
 80143ba:	3708      	adds	r7, #8
 80143bc:	46bd      	mov	sp, r7
 80143be:	bd80      	pop	{r7, pc}
 80143c0:	0801f008 	.word	0x0801f008

080143c4 <_ZN20TouchGFXGeneratedHALD0Ev>:
 80143c4:	b580      	push	{r7, lr}
 80143c6:	b082      	sub	sp, #8
 80143c8:	af00      	add	r7, sp, #0
 80143ca:	6078      	str	r0, [r7, #4]
 80143cc:	6878      	ldr	r0, [r7, #4]
 80143ce:	f7ff ffe7 	bl	80143a0 <_ZN20TouchGFXGeneratedHALD1Ev>
 80143d2:	217c      	movs	r1, #124	; 0x7c
 80143d4:	6878      	ldr	r0, [r7, #4]
 80143d6:	f007 f8fb 	bl	801b5d0 <_ZdlPvj>
 80143da:	687b      	ldr	r3, [r7, #4]
 80143dc:	4618      	mov	r0, r3
 80143de:	3708      	adds	r7, #8
 80143e0:	46bd      	mov	sp, r7
 80143e2:	bd80      	pop	{r7, pc}

080143e4 <_ZN11TouchGFXHAL16flushFrameBufferEv>:
     *
     * This specialization is only in place to keep compilers happy. Base impl. will call the
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
 80143e4:	b580      	push	{r7, lr}
 80143e6:	b082      	sub	sp, #8
 80143e8:	af00      	add	r7, sp, #0
 80143ea:	6078      	str	r0, [r7, #4]
    {
        TouchGFXGeneratedHAL::flushFrameBuffer();
 80143ec:	687b      	ldr	r3, [r7, #4]
 80143ee:	4618      	mov	r0, r3
 80143f0:	f7ff ffca 	bl	8014388 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferEv>
    }
 80143f4:	bf00      	nop
 80143f6:	3708      	adds	r7, #8
 80143f8:	46bd      	mov	sp, r7
 80143fa:	bd80      	pop	{r7, pc}

080143fc <_ZN11TouchGFXHAL10initializeEv>:
#include "stm32h7xx.h"

using namespace touchgfx;

void TouchGFXHAL::initialize()
{
 80143fc:	b580      	push	{r7, lr}
 80143fe:	b082      	sub	sp, #8
 8014400:	af00      	add	r7, sp, #0
 8014402:	6078      	str	r0, [r7, #4]
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.
    // Please note, HAL::initialize() must be called to initialize the framework.

    TouchGFXGeneratedHAL::initialize();
 8014404:	687b      	ldr	r3, [r7, #4]
 8014406:	4618      	mov	r0, r3
 8014408:	f001 f9f0 	bl	80157ec <_ZN20TouchGFXGeneratedHAL10initializeEv>
}
 801440c:	bf00      	nop
 801440e:	3708      	adds	r7, #8
 8014410:	46bd      	mov	sp, r7
 8014412:	bd80      	pop	{r7, pc}

08014414 <_ZNK11TouchGFXHAL17getTFTFrameBufferEv>:
 * Gets the frame buffer address used by the TFT controller.
 *
 * @return The address of the frame buffer currently being displayed on the TFT.
 */
uint16_t* TouchGFXHAL::getTFTFrameBuffer() const
{
 8014414:	b580      	push	{r7, lr}
 8014416:	b082      	sub	sp, #8
 8014418:	af00      	add	r7, sp, #0
 801441a:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of getTFTFrameBuffer().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    return TouchGFXGeneratedHAL::getTFTFrameBuffer();
 801441c:	687b      	ldr	r3, [r7, #4]
 801441e:	4618      	mov	r0, r3
 8014420:	f001 fa90 	bl	8015944 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>
 8014424:	4603      	mov	r3, r0
}
 8014426:	4618      	mov	r0, r3
 8014428:	3708      	adds	r7, #8
 801442a:	46bd      	mov	sp, r7
 801442c:	bd80      	pop	{r7, pc}

0801442e <_ZN11TouchGFXHAL17setTFTFrameBufferEPt>:
 * Sets the frame buffer address used by the TFT controller.
 *
 * @param [in] address New frame buffer address.
 */
void TouchGFXHAL::setTFTFrameBuffer(uint16_t* address)
{
 801442e:	b580      	push	{r7, lr}
 8014430:	b082      	sub	sp, #8
 8014432:	af00      	add	r7, sp, #0
 8014434:	6078      	str	r0, [r7, #4]
 8014436:	6039      	str	r1, [r7, #0]
    // Calling parent implementation of setTFTFrameBuffer(uint16_t* address).
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::setTFTFrameBuffer(address);
 8014438:	687b      	ldr	r3, [r7, #4]
 801443a:	6839      	ldr	r1, [r7, #0]
 801443c:	4618      	mov	r0, r3
 801443e:	f001 fa8f 	bl	8015960 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>
}
 8014442:	bf00      	nop
 8014444:	3708      	adds	r7, #8
 8014446:	46bd      	mov	sp, r7
 8014448:	bd80      	pop	{r7, pc}

0801444a <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE>:
 * @param rect The area of the screen that has been drawn, expressed in absolute coordinates.
 *
 * @see flushFrameBuffer().
 */
void TouchGFXHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
 801444a:	b580      	push	{r7, lr}
 801444c:	b082      	sub	sp, #8
 801444e:	af00      	add	r7, sp, #0
 8014450:	6078      	str	r0, [r7, #4]
 8014452:	6039      	str	r1, [r7, #0]
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.
    // Please note, HAL::flushFrameBuffer(const touchgfx::Rect& rect) must
    // be called to notify the touchgfx framework that flush has been performed.

    TouchGFXGeneratedHAL::flushFrameBuffer(rect);
 8014454:	687b      	ldr	r3, [r7, #4]
 8014456:	6839      	ldr	r1, [r7, #0]
 8014458:	4618      	mov	r0, r3
 801445a:	f001 fa97 	bl	801598c <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>
}
 801445e:	bf00      	nop
 8014460:	3708      	adds	r7, #8
 8014462:	46bd      	mov	sp, r7
 8014464:	bd80      	pop	{r7, pc}

08014466 <_ZN11TouchGFXHAL9blockCopyEPvPKvm>:

bool TouchGFXHAL::blockCopy(void* RESTRICT dest, const void* RESTRICT src, uint32_t numBytes)
{
 8014466:	b580      	push	{r7, lr}
 8014468:	b084      	sub	sp, #16
 801446a:	af00      	add	r7, sp, #0
 801446c:	60f8      	str	r0, [r7, #12]
 801446e:	60b9      	str	r1, [r7, #8]
 8014470:	607a      	str	r2, [r7, #4]
 8014472:	603b      	str	r3, [r7, #0]
    return TouchGFXGeneratedHAL::blockCopy(dest, src, numBytes);
 8014474:	68f8      	ldr	r0, [r7, #12]
 8014476:	683b      	ldr	r3, [r7, #0]
 8014478:	687a      	ldr	r2, [r7, #4]
 801447a:	68b9      	ldr	r1, [r7, #8]
 801447c:	f001 fade 	bl	8015a3c <_ZN20TouchGFXGeneratedHAL9blockCopyEPvPKvm>
 8014480:	4603      	mov	r3, r0
}
 8014482:	4618      	mov	r0, r3
 8014484:	3710      	adds	r7, #16
 8014486:	46bd      	mov	sp, r7
 8014488:	bd80      	pop	{r7, pc}

0801448a <_ZN11TouchGFXHAL19configureInterruptsEv>:
/**
 * Configures the interrupts relevant for TouchGFX. This primarily entails setting
 * the interrupt priorities for the DMA and LCD interrupts.
 */
void TouchGFXHAL::configureInterrupts()
{
 801448a:	b580      	push	{r7, lr}
 801448c:	b082      	sub	sp, #8
 801448e:	af00      	add	r7, sp, #0
 8014490:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of configureInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::configureInterrupts();
 8014492:	687b      	ldr	r3, [r7, #4]
 8014494:	4618      	mov	r0, r3
 8014496:	f001 f9d7 	bl	8015848 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>
}
 801449a:	bf00      	nop
 801449c:	3708      	adds	r7, #8
 801449e:	46bd      	mov	sp, r7
 80144a0:	bd80      	pop	{r7, pc}

080144a2 <_ZN11TouchGFXHAL16enableInterruptsEv>:

/**
 * Used for enabling interrupts set in configureInterrupts()
 */
void TouchGFXHAL::enableInterrupts()
{
 80144a2:	b580      	push	{r7, lr}
 80144a4:	b082      	sub	sp, #8
 80144a6:	af00      	add	r7, sp, #0
 80144a8:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of enableInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::enableInterrupts();
 80144aa:	687b      	ldr	r3, [r7, #4]
 80144ac:	4618      	mov	r0, r3
 80144ae:	f001 f9db 	bl	8015868 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>
}
 80144b2:	bf00      	nop
 80144b4:	3708      	adds	r7, #8
 80144b6:	46bd      	mov	sp, r7
 80144b8:	bd80      	pop	{r7, pc}

080144ba <_ZN11TouchGFXHAL17disableInterruptsEv>:

/**
 * Used for disabling interrupts set in configureInterrupts()
 */
void TouchGFXHAL::disableInterrupts()
{
 80144ba:	b580      	push	{r7, lr}
 80144bc:	b082      	sub	sp, #8
 80144be:	af00      	add	r7, sp, #0
 80144c0:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of disableInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::disableInterrupts();
 80144c2:	687b      	ldr	r3, [r7, #4]
 80144c4:	4618      	mov	r0, r3
 80144c6:	f001 f9dd 	bl	8015884 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>
}
 80144ca:	bf00      	nop
 80144cc:	3708      	adds	r7, #8
 80144ce:	46bd      	mov	sp, r7
 80144d0:	bd80      	pop	{r7, pc}

080144d2 <_ZN11TouchGFXHAL28enableLCDControllerInterruptEv>:
/**
 * Configure the LCD controller to fire interrupts at VSYNC. Called automatically
 * once TouchGFX initialization has completed.
 */
void TouchGFXHAL::enableLCDControllerInterrupt()
{
 80144d2:	b580      	push	{r7, lr}
 80144d4:	b082      	sub	sp, #8
 80144d6:	af00      	add	r7, sp, #0
 80144d8:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of enableLCDControllerInterrupt().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::enableLCDControllerInterrupt();
 80144da:	687b      	ldr	r3, [r7, #4]
 80144dc:	4618      	mov	r0, r3
 80144de:	f001 f9df 	bl	80158a0 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>
}
 80144e2:	bf00      	nop
 80144e4:	3708      	adds	r7, #8
 80144e6:	46bd      	mov	sp, r7
 80144e8:	bd80      	pop	{r7, pc}
	...

080144ec <_ZN11TouchGFXHALD1Ev>:
class TouchGFXHAL : public TouchGFXGeneratedHAL
 80144ec:	b580      	push	{r7, lr}
 80144ee:	b082      	sub	sp, #8
 80144f0:	af00      	add	r7, sp, #0
 80144f2:	6078      	str	r0, [r7, #4]
 80144f4:	4a05      	ldr	r2, [pc, #20]	; (801450c <_ZN11TouchGFXHALD1Ev+0x20>)
 80144f6:	687b      	ldr	r3, [r7, #4]
 80144f8:	601a      	str	r2, [r3, #0]
 80144fa:	687b      	ldr	r3, [r7, #4]
 80144fc:	4618      	mov	r0, r3
 80144fe:	f7ff ff4f 	bl	80143a0 <_ZN20TouchGFXGeneratedHALD1Ev>
 8014502:	687b      	ldr	r3, [r7, #4]
 8014504:	4618      	mov	r0, r3
 8014506:	3708      	adds	r7, #8
 8014508:	46bd      	mov	sp, r7
 801450a:	bd80      	pop	{r7, pc}
 801450c:	0801eebc 	.word	0x0801eebc

08014510 <_ZN11TouchGFXHALD0Ev>:
 8014510:	b580      	push	{r7, lr}
 8014512:	b082      	sub	sp, #8
 8014514:	af00      	add	r7, sp, #0
 8014516:	6078      	str	r0, [r7, #4]
 8014518:	6878      	ldr	r0, [r7, #4]
 801451a:	f7ff ffe7 	bl	80144ec <_ZN11TouchGFXHALD1Ev>
 801451e:	217c      	movs	r1, #124	; 0x7c
 8014520:	6878      	ldr	r0, [r7, #4]
 8014522:	f007 f855 	bl	801b5d0 <_ZdlPvj>
 8014526:	687b      	ldr	r3, [r7, #4]
 8014528:	4618      	mov	r0, r3
 801452a:	3708      	adds	r7, #8
 801452c:	46bd      	mov	sp, r7
 801452e:	bd80      	pop	{r7, pc}

08014530 <_ZN8touchgfx10OSWrappers10initializeEv>:

/*
 * Initialize frame buffer semaphore and queue/mutex for VSYNC signal.
 */
void OSWrappers::initialize()
{
 8014530:	b580      	push	{r7, lr}
 8014532:	af00      	add	r7, sp, #0
    // Create a queue of length 1
    frame_buffer_sem = osSemaphoreNew(1, 1, NULL); // Binary semaphore
 8014534:	2200      	movs	r2, #0
 8014536:	2101      	movs	r1, #1
 8014538:	2001      	movs	r0, #1
 801453a:	f7fa fa7e 	bl	800ea3a <osSemaphoreNew>
 801453e:	4603      	mov	r3, r0
 8014540:	4a0f      	ldr	r2, [pc, #60]	; (8014580 <_ZN8touchgfx10OSWrappers10initializeEv+0x50>)
 8014542:	6013      	str	r3, [r2, #0]
    assert((frame_buffer_sem != NULL) && "Creation of framebuffer semaphore failed");
 8014544:	4b0e      	ldr	r3, [pc, #56]	; (8014580 <_ZN8touchgfx10OSWrappers10initializeEv+0x50>)
 8014546:	681b      	ldr	r3, [r3, #0]
 8014548:	2b00      	cmp	r3, #0
 801454a:	d105      	bne.n	8014558 <_ZN8touchgfx10OSWrappers10initializeEv+0x28>
 801454c:	4b0d      	ldr	r3, [pc, #52]	; (8014584 <_ZN8touchgfx10OSWrappers10initializeEv+0x54>)
 801454e:	4a0e      	ldr	r2, [pc, #56]	; (8014588 <_ZN8touchgfx10OSWrappers10initializeEv+0x58>)
 8014550:	2129      	movs	r1, #41	; 0x29
 8014552:	480e      	ldr	r0, [pc, #56]	; (801458c <_ZN8touchgfx10OSWrappers10initializeEv+0x5c>)
 8014554:	f007 f86a 	bl	801b62c <__assert_func>

    // Create a queue of length 1
    vsync_queue = osMessageQueueNew(1, 4, NULL);
 8014558:	2200      	movs	r2, #0
 801455a:	2104      	movs	r1, #4
 801455c:	2001      	movs	r0, #1
 801455e:	f7fa fb8b 	bl	800ec78 <osMessageQueueNew>
 8014562:	4603      	mov	r3, r0
 8014564:	4a0a      	ldr	r2, [pc, #40]	; (8014590 <_ZN8touchgfx10OSWrappers10initializeEv+0x60>)
 8014566:	6013      	str	r3, [r2, #0]
    assert((vsync_queue != NULL) && "Creation of vsync message queue failed");
 8014568:	4b09      	ldr	r3, [pc, #36]	; (8014590 <_ZN8touchgfx10OSWrappers10initializeEv+0x60>)
 801456a:	681b      	ldr	r3, [r3, #0]
 801456c:	2b00      	cmp	r3, #0
 801456e:	d105      	bne.n	801457c <_ZN8touchgfx10OSWrappers10initializeEv+0x4c>
 8014570:	4b08      	ldr	r3, [pc, #32]	; (8014594 <_ZN8touchgfx10OSWrappers10initializeEv+0x64>)
 8014572:	4a05      	ldr	r2, [pc, #20]	; (8014588 <_ZN8touchgfx10OSWrappers10initializeEv+0x58>)
 8014574:	212d      	movs	r1, #45	; 0x2d
 8014576:	4805      	ldr	r0, [pc, #20]	; (801458c <_ZN8touchgfx10OSWrappers10initializeEv+0x5c>)
 8014578:	f007 f858 	bl	801b62c <__assert_func>
}
 801457c:	bf00      	nop
 801457e:	bd80      	pop	{r7, pc}
 8014580:	20005c14 	.word	0x20005c14
 8014584:	0801e9a8 	.word	0x0801e9a8
 8014588:	0801e9f4 	.word	0x0801e9f4
 801458c:	0801ea24 	.word	0x0801ea24
 8014590:	20005c18 	.word	0x20005c18
 8014594:	0801ea50 	.word	0x0801ea50

08014598 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>:

/*
 * Take the frame buffer semaphore. Blocks until semaphore is available.
 */
void OSWrappers::takeFrameBufferSemaphore()
{
 8014598:	b580      	push	{r7, lr}
 801459a:	af00      	add	r7, sp, #0
    osSemaphoreAcquire(frame_buffer_sem, osWaitForever);
 801459c:	4b04      	ldr	r3, [pc, #16]	; (80145b0 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv+0x18>)
 801459e:	681b      	ldr	r3, [r3, #0]
 80145a0:	f04f 31ff 	mov.w	r1, #4294967295
 80145a4:	4618      	mov	r0, r3
 80145a6:	f7fa fad1 	bl	800eb4c <osSemaphoreAcquire>
}
 80145aa:	bf00      	nop
 80145ac:	bd80      	pop	{r7, pc}
 80145ae:	bf00      	nop
 80145b0:	20005c14 	.word	0x20005c14

080145b4 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>:

/*
 * Release the frame buffer semaphore.
 */
void OSWrappers::giveFrameBufferSemaphore()
{
 80145b4:	b580      	push	{r7, lr}
 80145b6:	af00      	add	r7, sp, #0
    osSemaphoreRelease(frame_buffer_sem);
 80145b8:	4b03      	ldr	r3, [pc, #12]	; (80145c8 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv+0x14>)
 80145ba:	681b      	ldr	r3, [r3, #0]
 80145bc:	4618      	mov	r0, r3
 80145be:	f7fa fb17 	bl	800ebf0 <osSemaphoreRelease>
}
 80145c2:	bf00      	nop
 80145c4:	bd80      	pop	{r7, pc}
 80145c6:	bf00      	nop
 80145c8:	20005c14 	.word	0x20005c14

080145cc <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>:
 *
 * Note must return immediately! This function does not care who has the taken the semaphore,
 * it only serves to make sure that the semaphore is taken by someone.
 */
void OSWrappers::tryTakeFrameBufferSemaphore()
{
 80145cc:	b580      	push	{r7, lr}
 80145ce:	af00      	add	r7, sp, #0
    osSemaphoreAcquire(frame_buffer_sem, 0);
 80145d0:	4b03      	ldr	r3, [pc, #12]	; (80145e0 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv+0x14>)
 80145d2:	681b      	ldr	r3, [r3, #0]
 80145d4:	2100      	movs	r1, #0
 80145d6:	4618      	mov	r0, r3
 80145d8:	f7fa fab8 	bl	800eb4c <osSemaphoreAcquire>
}
 80145dc:	bf00      	nop
 80145de:	bd80      	pop	{r7, pc}
 80145e0:	20005c14 	.word	0x20005c14

080145e4 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>:
 *
 * Release the frame buffer semaphore in a way that is safe in interrupt context.
 * Called from ISR.
 */
void OSWrappers::giveFrameBufferSemaphoreFromISR()
{
 80145e4:	b580      	push	{r7, lr}
 80145e6:	af00      	add	r7, sp, #0
    osSemaphoreRelease(frame_buffer_sem);
 80145e8:	4b03      	ldr	r3, [pc, #12]	; (80145f8 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0x14>)
 80145ea:	681b      	ldr	r3, [r3, #0]
 80145ec:	4618      	mov	r0, r3
 80145ee:	f7fa faff 	bl	800ebf0 <osSemaphoreRelease>
}
 80145f2:	bf00      	nop
 80145f4:	bd80      	pop	{r7, pc}
 80145f6:	bf00      	nop
 80145f8:	20005c14 	.word	0x20005c14

080145fc <_ZN8touchgfx10OSWrappers11signalVSyncEv>:
 *
 * Note This function is called from an ISR, and should (depending on OS) trigger a
 * scheduling.
 */
void OSWrappers::signalVSync()
{
 80145fc:	b580      	push	{r7, lr}
 80145fe:	af00      	add	r7, sp, #0
    osMessageQueuePut(vsync_queue, &dummy, 0, 0);
 8014600:	4b04      	ldr	r3, [pc, #16]	; (8014614 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x18>)
 8014602:	6818      	ldr	r0, [r3, #0]
 8014604:	2300      	movs	r3, #0
 8014606:	2200      	movs	r2, #0
 8014608:	4903      	ldr	r1, [pc, #12]	; (8014618 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x1c>)
 801460a:	f7fa fba9 	bl	800ed60 <osMessageQueuePut>
}
 801460e:	bf00      	nop
 8014610:	bd80      	pop	{r7, pc}
 8014612:	bf00      	nop
 8014614:	20005c18 	.word	0x20005c18
 8014618:	200000d4 	.word	0x200000d4

0801461c <_ZN8touchgfx10OSWrappers12waitForVSyncEv>:
 *
 * Note This function must first clear the mutex/queue and then wait for the next one to
 * occur.
 */
void OSWrappers::waitForVSync()
{
 801461c:	b580      	push	{r7, lr}
 801461e:	b082      	sub	sp, #8
 8014620:	af00      	add	r7, sp, #0
    uint32_t dummyGet;
    // First make sure the queue is empty, by trying to remove an element with 0 timeout.
    osMessageQueueGet(vsync_queue, &dummyGet, 0, 0);
 8014622:	4b09      	ldr	r3, [pc, #36]	; (8014648 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x2c>)
 8014624:	6818      	ldr	r0, [r3, #0]
 8014626:	1d39      	adds	r1, r7, #4
 8014628:	2300      	movs	r3, #0
 801462a:	2200      	movs	r2, #0
 801462c:	f7fa fbf8 	bl	800ee20 <osMessageQueueGet>

    // Then, wait for next VSYNC to occur.
    osMessageQueueGet(vsync_queue, &dummyGet, 0, osWaitForever);
 8014630:	4b05      	ldr	r3, [pc, #20]	; (8014648 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x2c>)
 8014632:	6818      	ldr	r0, [r3, #0]
 8014634:	1d39      	adds	r1, r7, #4
 8014636:	f04f 33ff 	mov.w	r3, #4294967295
 801463a:	2200      	movs	r2, #0
 801463c:	f7fa fbf0 	bl	800ee20 <osMessageQueueGet>
}
 8014640:	bf00      	nop
 8014642:	3708      	adds	r7, #8
 8014644:	46bd      	mov	sp, r7
 8014646:	bd80      	pop	{r7, pc}
 8014648:	20005c18 	.word	0x20005c18

0801464c <_ZN8touchgfx10OSWrappers9taskDelayEt>:
 *
 * see HAL::setFrameRefreshStrategy(FrameRefreshStrategy s)
 * see HAL::registerTaskDelayFunction(void (*delayF)(uint16_t))
 */
void OSWrappers::taskDelay(uint16_t ms)
{
 801464c:	b580      	push	{r7, lr}
 801464e:	b082      	sub	sp, #8
 8014650:	af00      	add	r7, sp, #0
 8014652:	4603      	mov	r3, r0
 8014654:	80fb      	strh	r3, [r7, #6]
    osDelay(static_cast<uint32_t>(ms));
 8014656:	88fb      	ldrh	r3, [r7, #6]
 8014658:	4618      	mov	r0, r3
 801465a:	f7fa f9d3 	bl	800ea04 <osDelay>
}
 801465e:	bf00      	nop
 8014660:	3708      	adds	r7, #8
 8014662:	46bd      	mov	sp, r7
 8014664:	bd80      	pop	{r7, pc}
	...

08014668 <__NVIC_DisableIRQ>:
{
 8014668:	b480      	push	{r7}
 801466a:	b083      	sub	sp, #12
 801466c:	af00      	add	r7, sp, #0
 801466e:	4603      	mov	r3, r0
 8014670:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8014672:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8014676:	2b00      	cmp	r3, #0
 8014678:	db12      	blt.n	80146a0 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 801467a:	88fb      	ldrh	r3, [r7, #6]
 801467c:	f003 021f 	and.w	r2, r3, #31
 8014680:	490a      	ldr	r1, [pc, #40]	; (80146ac <__NVIC_DisableIRQ+0x44>)
 8014682:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8014686:	095b      	lsrs	r3, r3, #5
 8014688:	2001      	movs	r0, #1
 801468a:	fa00 f202 	lsl.w	r2, r0, r2
 801468e:	3320      	adds	r3, #32
 8014690:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8014694:	f3bf 8f4f 	dsb	sy
}
 8014698:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 801469a:	f3bf 8f6f 	isb	sy
}
 801469e:	bf00      	nop
}
 80146a0:	bf00      	nop
 80146a2:	370c      	adds	r7, #12
 80146a4:	46bd      	mov	sp, r7
 80146a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80146aa:	4770      	bx	lr
 80146ac:	e000e100 	.word	0xe000e100

080146b0 <_ZNK8touchgfx9colortypecvmEv>:
    operator uint32_t() const
 80146b0:	b480      	push	{r7}
 80146b2:	b083      	sub	sp, #12
 80146b4:	af00      	add	r7, sp, #0
 80146b6:	6078      	str	r0, [r7, #4]
        return color;
 80146b8:	687b      	ldr	r3, [r7, #4]
 80146ba:	681b      	ldr	r3, [r3, #0]
    }
 80146bc:	4618      	mov	r0, r3
 80146be:	370c      	adds	r7, #12
 80146c0:	46bd      	mov	sp, r7
 80146c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80146c6:	4770      	bx	lr

080146c8 <_ZN8touchgfx9DMA_QueueD1Ev>:
     * @param  op The blitop to add.
     */
    virtual void pushCopyOf(const BlitOp& op) = 0;

    /** Finalizes an instance of the DMA_Queue class. */
    virtual ~DMA_Queue()
 80146c8:	b480      	push	{r7}
 80146ca:	b083      	sub	sp, #12
 80146cc:	af00      	add	r7, sp, #0
 80146ce:	6078      	str	r0, [r7, #4]
    {
 80146d0:	4a04      	ldr	r2, [pc, #16]	; (80146e4 <_ZN8touchgfx9DMA_QueueD1Ev+0x1c>)
 80146d2:	687b      	ldr	r3, [r7, #4]
 80146d4:	601a      	str	r2, [r3, #0]
    }
 80146d6:	687b      	ldr	r3, [r7, #4]
 80146d8:	4618      	mov	r0, r3
 80146da:	370c      	adds	r7, #12
 80146dc:	46bd      	mov	sp, r7
 80146de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80146e2:	4770      	bx	lr
 80146e4:	0801efe4 	.word	0x0801efe4

080146e8 <_ZN8touchgfx9DMA_QueueD0Ev>:
    virtual ~DMA_Queue()
 80146e8:	b580      	push	{r7, lr}
 80146ea:	b082      	sub	sp, #8
 80146ec:	af00      	add	r7, sp, #0
 80146ee:	6078      	str	r0, [r7, #4]
    }
 80146f0:	6878      	ldr	r0, [r7, #4]
 80146f2:	f7ff ffe9 	bl	80146c8 <_ZN8touchgfx9DMA_QueueD1Ev>
 80146f6:	2104      	movs	r1, #4
 80146f8:	6878      	ldr	r0, [r7, #4]
 80146fa:	f006 ff69 	bl	801b5d0 <_ZdlPvj>
 80146fe:	687b      	ldr	r3, [r7, #4]
 8014700:	4618      	mov	r0, r3
 8014702:	3708      	adds	r7, #8
 8014704:	46bd      	mov	sp, r7
 8014706:	bd80      	pop	{r7, pc}

08014708 <_ZN8touchgfx13DMA_Interface5flushEv>:
     * @param  op The operation to add.
     */
    virtual void addToQueue(const BlitOp& op);

    /** This function blocks until all DMA transfers in the queue have been completed. */
    virtual void flush()
 8014708:	b580      	push	{r7, lr}
 801470a:	b082      	sub	sp, #8
 801470c:	af00      	add	r7, sp, #0
 801470e:	6078      	str	r0, [r7, #4]
    {
        waitForFrameBufferSemaphore();
 8014710:	687b      	ldr	r3, [r7, #4]
 8014712:	681b      	ldr	r3, [r3, #0]
 8014714:	3344      	adds	r3, #68	; 0x44
 8014716:	681b      	ldr	r3, [r3, #0]
 8014718:	6878      	ldr	r0, [r7, #4]
 801471a:	4798      	blx	r3
    }
 801471c:	bf00      	nop
 801471e:	3708      	adds	r7, #8
 8014720:	46bd      	mov	sp, r7
 8014722:	bd80      	pop	{r7, pc}

08014724 <_ZN8touchgfx13DMA_InterfaceD1Ev>:
    {
        return DMA_TYPE_GENERIC;
    }

    /** Finalizes an instance of the DMA_Interface class. */
    virtual ~DMA_Interface()
 8014724:	b480      	push	{r7}
 8014726:	b083      	sub	sp, #12
 8014728:	af00      	add	r7, sp, #0
 801472a:	6078      	str	r0, [r7, #4]
    {
 801472c:	4a04      	ldr	r2, [pc, #16]	; (8014740 <_ZN8touchgfx13DMA_InterfaceD1Ev+0x1c>)
 801472e:	687b      	ldr	r3, [r7, #4]
 8014730:	601a      	str	r2, [r3, #0]
    }
 8014732:	687b      	ldr	r3, [r7, #4]
 8014734:	4618      	mov	r0, r3
 8014736:	370c      	adds	r7, #12
 8014738:	46bd      	mov	sp, r7
 801473a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801473e:	4770      	bx	lr
 8014740:	0801f8c4 	.word	0x0801f8c4

08014744 <_ZN8touchgfx13DMA_InterfaceD0Ev>:
    virtual ~DMA_Interface()
 8014744:	b580      	push	{r7, lr}
 8014746:	b082      	sub	sp, #8
 8014748:	af00      	add	r7, sp, #0
 801474a:	6078      	str	r0, [r7, #4]
    }
 801474c:	6878      	ldr	r0, [r7, #4]
 801474e:	f7ff ffe9 	bl	8014724 <_ZN8touchgfx13DMA_InterfaceD1Ev>
 8014752:	210c      	movs	r1, #12
 8014754:	6878      	ldr	r0, [r7, #4]
 8014756:	f006 ff3b 	bl	801b5d0 <_ZdlPvj>
 801475a:	687b      	ldr	r3, [r7, #4]
 801475c:	4618      	mov	r0, r3
 801475e:	3708      	adds	r7, #8
 8014760:	46bd      	mov	sp, r7
 8014762:	bd80      	pop	{r7, pc}

08014764 <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE>:
    /**
     * Constructs a DMA Interface object.
     *
     * @param [in] dmaQueue Reference to the queue of DMA operations.
     */
    DMA_Interface(DMA_Queue& dmaQueue)
 8014764:	b480      	push	{r7}
 8014766:	b083      	sub	sp, #12
 8014768:	af00      	add	r7, sp, #0
 801476a:	6078      	str	r0, [r7, #4]
 801476c:	6039      	str	r1, [r7, #0]
        : queue(dmaQueue), isRunning(false), isAllowed(false)
 801476e:	4a09      	ldr	r2, [pc, #36]	; (8014794 <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE+0x30>)
 8014770:	687b      	ldr	r3, [r7, #4]
 8014772:	601a      	str	r2, [r3, #0]
 8014774:	687b      	ldr	r3, [r7, #4]
 8014776:	683a      	ldr	r2, [r7, #0]
 8014778:	605a      	str	r2, [r3, #4]
 801477a:	687b      	ldr	r3, [r7, #4]
 801477c:	2200      	movs	r2, #0
 801477e:	721a      	strb	r2, [r3, #8]
 8014780:	687b      	ldr	r3, [r7, #4]
 8014782:	2200      	movs	r2, #0
 8014784:	725a      	strb	r2, [r3, #9]
    {
    }
 8014786:	687b      	ldr	r3, [r7, #4]
 8014788:	4618      	mov	r0, r3
 801478a:	370c      	adds	r7, #12
 801478c:	46bd      	mov	sp, r7
 801478e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014792:	4770      	bx	lr
 8014794:	0801f8c4 	.word	0x0801f8c4

08014798 <_ZN8STM32DMA10getDMATypeEv>:
     *        Function for obtaining the DMA type of the concrete DMA_Interface implementation.
     *        As default, will return DMA_TYPE_CHROMART type value.
     *
     * @return a DMAType value of the concrete DMA_Interface implementation.
     */
    virtual touchgfx::DMAType getDMAType(void)
 8014798:	b480      	push	{r7}
 801479a:	b083      	sub	sp, #12
 801479c:	af00      	add	r7, sp, #0
 801479e:	6078      	str	r0, [r7, #4]
    {
        return touchgfx::DMA_TYPE_CHROMART;
 80147a0:	2301      	movs	r3, #1
    }
 80147a2:	4618      	mov	r0, r3
 80147a4:	370c      	adds	r7, #12
 80147a6:	46bd      	mov	sp, r7
 80147a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80147ac:	4770      	bx	lr

080147ae <_ZN8STM32DMA18signalDMAInterruptEv>:
     *
     * @brief Raises a DMA interrupt signal.
     *
     *        Raises a DMA interrupt signal.
     */
    virtual void signalDMAInterrupt()
 80147ae:	b580      	push	{r7, lr}
 80147b0:	b082      	sub	sp, #8
 80147b2:	af00      	add	r7, sp, #0
 80147b4:	6078      	str	r0, [r7, #4]
    {
        executeCompleted();
 80147b6:	687a      	ldr	r2, [r7, #4]
 80147b8:	687b      	ldr	r3, [r7, #4]
 80147ba:	681b      	ldr	r3, [r3, #0]
 80147bc:	3328      	adds	r3, #40	; 0x28
 80147be:	681b      	ldr	r3, [r3, #0]
 80147c0:	4610      	mov	r0, r2
 80147c2:	4798      	blx	r3
    }
 80147c4:	bf00      	nop
 80147c6:	3708      	adds	r7, #8
 80147c8:	46bd      	mov	sp, r7
 80147ca:	bd80      	pop	{r7, pc}

080147cc <_ZN8touchgfx3HAL18signalDMAInterruptEv>:
    void signalDMAInterrupt()
 80147cc:	b580      	push	{r7, lr}
 80147ce:	b082      	sub	sp, #8
 80147d0:	af00      	add	r7, sp, #0
 80147d2:	6078      	str	r0, [r7, #4]
        dma.signalDMAInterrupt();
 80147d4:	687b      	ldr	r3, [r7, #4]
 80147d6:	685a      	ldr	r2, [r3, #4]
 80147d8:	687b      	ldr	r3, [r7, #4]
 80147da:	685b      	ldr	r3, [r3, #4]
 80147dc:	681b      	ldr	r3, [r3, #0]
 80147de:	3314      	adds	r3, #20
 80147e0:	681b      	ldr	r3, [r3, #0]
 80147e2:	4610      	mov	r0, r2
 80147e4:	4798      	blx	r3
    }
 80147e6:	bf00      	nop
 80147e8:	3708      	adds	r7, #8
 80147ea:	46bd      	mov	sp, r7
 80147ec:	bd80      	pop	{r7, pc}
	...

080147f0 <DMA2D_IRQHandler>:
    const uint16_t size;
    const uint32_t* const data;
} clutData_t;

extern "C" void DMA2D_IRQHandler()
{
 80147f0:	b580      	push	{r7, lr}
 80147f2:	af00      	add	r7, sp, #0
    /* Transfer Complete Interrupt management ************************************/
    if ((READ_REG(DMA2D->ISR) & DMA2D_FLAG_TC) != RESET)
 80147f4:	4b13      	ldr	r3, [pc, #76]	; (8014844 <DMA2D_IRQHandler+0x54>)
 80147f6:	685b      	ldr	r3, [r3, #4]
 80147f8:	f003 0302 	and.w	r3, r3, #2
 80147fc:	2b00      	cmp	r3, #0
 80147fe:	bf14      	ite	ne
 8014800:	2301      	movne	r3, #1
 8014802:	2300      	moveq	r3, #0
 8014804:	b2db      	uxtb	r3, r3
 8014806:	2b00      	cmp	r3, #0
 8014808:	d019      	beq.n	801483e <DMA2D_IRQHandler+0x4e>
    {
        /* Verify Transfer Complete Interrupt */
        if ((READ_REG(DMA2D->CR) & DMA2D_IT_TC) != RESET)
 801480a:	4b0e      	ldr	r3, [pc, #56]	; (8014844 <DMA2D_IRQHandler+0x54>)
 801480c:	681b      	ldr	r3, [r3, #0]
 801480e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8014812:	2b00      	cmp	r3, #0
 8014814:	bf14      	ite	ne
 8014816:	2301      	movne	r3, #1
 8014818:	2300      	moveq	r3, #0
 801481a:	b2db      	uxtb	r3, r3
 801481c:	2b00      	cmp	r3, #0
 801481e:	d00e      	beq.n	801483e <DMA2D_IRQHandler+0x4e>
        {
            /* Disable the transfer complete interrupt */
            DMA2D->CR &= ~(DMA2D_IT_TC);
 8014820:	4b08      	ldr	r3, [pc, #32]	; (8014844 <DMA2D_IRQHandler+0x54>)
 8014822:	681b      	ldr	r3, [r3, #0]
 8014824:	4a07      	ldr	r2, [pc, #28]	; (8014844 <DMA2D_IRQHandler+0x54>)
 8014826:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 801482a:	6013      	str	r3, [r2, #0]

            /* Clear the transfer complete flag */
            DMA2D->IFCR = (DMA2D_FLAG_TC);
 801482c:	4b05      	ldr	r3, [pc, #20]	; (8014844 <DMA2D_IRQHandler+0x54>)
 801482e:	2202      	movs	r2, #2
 8014830:	609a      	str	r2, [r3, #8]

            /* Signal DMA queue of execution complete */
            touchgfx::HAL::getInstance()->signalDMAInterrupt();
 8014832:	f7fe fa2f 	bl	8012c94 <_ZN8touchgfx3HAL11getInstanceEv>
 8014836:	4603      	mov	r3, r0
 8014838:	4618      	mov	r0, r3
 801483a:	f7ff ffc7 	bl	80147cc <_ZN8touchgfx3HAL18signalDMAInterruptEv>
        }
    }
}
 801483e:	bf00      	nop
 8014840:	bd80      	pop	{r7, pc}
 8014842:	bf00      	nop
 8014844:	52001000 	.word	0x52001000

08014848 <_ZN8touchgfx6BlitOpC1Ev>:

/**
 * BlitOp instances carry the required information for performing operations on the LCD
 * (framebuffer) using DMA.
 */
struct BlitOp
 8014848:	b580      	push	{r7, lr}
 801484a:	b082      	sub	sp, #8
 801484c:	af00      	add	r7, sp, #0
 801484e:	6078      	str	r0, [r7, #4]
 8014850:	687b      	ldr	r3, [r7, #4]
 8014852:	330c      	adds	r3, #12
 8014854:	4618      	mov	r0, r3
 8014856:	f7fe f995 	bl	8012b84 <_ZN8touchgfx9colortypeC1Ev>
 801485a:	687b      	ldr	r3, [r7, #4]
 801485c:	4618      	mov	r0, r3
 801485e:	3708      	adds	r7, #8
 8014860:	46bd      	mov	sp, r7
 8014862:	bd80      	pop	{r7, pc}

08014864 <_ZN8STM32DMAC1Ev>:

STM32DMA::STM32DMA()
 8014864:	b5b0      	push	{r4, r5, r7, lr}
 8014866:	b082      	sub	sp, #8
 8014868:	af00      	add	r7, sp, #0
 801486a:	6078      	str	r0, [r7, #4]
    : DMA_Interface(dma_queue), dma_queue(queue_storage, sizeof(queue_storage) / sizeof(queue_storage[0]))
 801486c:	687a      	ldr	r2, [r7, #4]
 801486e:	687b      	ldr	r3, [r7, #4]
 8014870:	330c      	adds	r3, #12
 8014872:	4619      	mov	r1, r3
 8014874:	4610      	mov	r0, r2
 8014876:	f7ff ff75 	bl	8014764 <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE>
 801487a:	4a0e      	ldr	r2, [pc, #56]	; (80148b4 <_ZN8STM32DMAC1Ev+0x50>)
 801487c:	687b      	ldr	r3, [r7, #4]
 801487e:	601a      	str	r2, [r3, #0]
 8014880:	687b      	ldr	r3, [r7, #4]
 8014882:	f103 000c 	add.w	r0, r3, #12
 8014886:	687b      	ldr	r3, [r7, #4]
 8014888:	3320      	adds	r3, #32
 801488a:	2260      	movs	r2, #96	; 0x60
 801488c:	4619      	mov	r1, r3
 801488e:	f002 fc51 	bl	8017134 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>
 8014892:	687b      	ldr	r3, [r7, #4]
 8014894:	3320      	adds	r3, #32
 8014896:	245f      	movs	r4, #95	; 0x5f
 8014898:	461d      	mov	r5, r3
 801489a:	2c00      	cmp	r4, #0
 801489c:	db05      	blt.n	80148aa <_ZN8STM32DMAC1Ev+0x46>
 801489e:	4628      	mov	r0, r5
 80148a0:	f7ff ffd2 	bl	8014848 <_ZN8touchgfx6BlitOpC1Ev>
 80148a4:	3524      	adds	r5, #36	; 0x24
 80148a6:	3c01      	subs	r4, #1
 80148a8:	e7f7      	b.n	801489a <_ZN8STM32DMAC1Ev+0x36>
{
}
 80148aa:	687b      	ldr	r3, [r7, #4]
 80148ac:	4618      	mov	r0, r3
 80148ae:	3708      	adds	r7, #8
 80148b0:	46bd      	mov	sp, r7
 80148b2:	bdb0      	pop	{r4, r5, r7, pc}
 80148b4:	0801ef94 	.word	0x0801ef94

080148b8 <_ZN8STM32DMAD1Ev>:

STM32DMA::~STM32DMA()
 80148b8:	b580      	push	{r7, lr}
 80148ba:	b082      	sub	sp, #8
 80148bc:	af00      	add	r7, sp, #0
 80148be:	6078      	str	r0, [r7, #4]
 80148c0:	4a09      	ldr	r2, [pc, #36]	; (80148e8 <_ZN8STM32DMAD1Ev+0x30>)
 80148c2:	687b      	ldr	r3, [r7, #4]
 80148c4:	601a      	str	r2, [r3, #0]
{
    /* Disable DMA2D global Interrupt */
    NVIC_DisableIRQ(DMA2D_IRQn);
 80148c6:	205a      	movs	r0, #90	; 0x5a
 80148c8:	f7ff fece 	bl	8014668 <__NVIC_DisableIRQ>
STM32DMA::~STM32DMA()
 80148cc:	687b      	ldr	r3, [r7, #4]
 80148ce:	330c      	adds	r3, #12
 80148d0:	4618      	mov	r0, r3
 80148d2:	f000 fac9 	bl	8014e68 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>
 80148d6:	687b      	ldr	r3, [r7, #4]
 80148d8:	4618      	mov	r0, r3
 80148da:	f7ff ff23 	bl	8014724 <_ZN8touchgfx13DMA_InterfaceD1Ev>
}
 80148de:	687b      	ldr	r3, [r7, #4]
 80148e0:	4618      	mov	r0, r3
 80148e2:	3708      	adds	r7, #8
 80148e4:	46bd      	mov	sp, r7
 80148e6:	bd80      	pop	{r7, pc}
 80148e8:	0801ef94 	.word	0x0801ef94

080148ec <_ZN8STM32DMAD0Ev>:
STM32DMA::~STM32DMA()
 80148ec:	b580      	push	{r7, lr}
 80148ee:	b082      	sub	sp, #8
 80148f0:	af00      	add	r7, sp, #0
 80148f2:	6078      	str	r0, [r7, #4]
}
 80148f4:	6878      	ldr	r0, [r7, #4]
 80148f6:	f7ff ffdf 	bl	80148b8 <_ZN8STM32DMAD1Ev>
 80148fa:	f44f 615a 	mov.w	r1, #3488	; 0xda0
 80148fe:	6878      	ldr	r0, [r7, #4]
 8014900:	f006 fe66 	bl	801b5d0 <_ZdlPvj>
 8014904:	687b      	ldr	r3, [r7, #4]
 8014906:	4618      	mov	r0, r3
 8014908:	3708      	adds	r7, #8
 801490a:	46bd      	mov	sp, r7
 801490c:	bd80      	pop	{r7, pc}
	...

08014910 <_ZN8STM32DMA10initializeEv>:

void STM32DMA::initialize()
{
 8014910:	b580      	push	{r7, lr}
 8014912:	b084      	sub	sp, #16
 8014914:	af00      	add	r7, sp, #0
 8014916:	6078      	str	r0, [r7, #4]
    /* Ensure DMA2D Clock is enabled */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8014918:	4b13      	ldr	r3, [pc, #76]	; (8014968 <_ZN8STM32DMA10initializeEv+0x58>)
 801491a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 801491e:	4a12      	ldr	r2, [pc, #72]	; (8014968 <_ZN8STM32DMA10initializeEv+0x58>)
 8014920:	f043 0310 	orr.w	r3, r3, #16
 8014924:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 8014928:	4b0f      	ldr	r3, [pc, #60]	; (8014968 <_ZN8STM32DMA10initializeEv+0x58>)
 801492a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 801492e:	f003 0310 	and.w	r3, r3, #16
 8014932:	60fb      	str	r3, [r7, #12]
 8014934:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_DMA2D_FORCE_RESET();
 8014936:	4b0c      	ldr	r3, [pc, #48]	; (8014968 <_ZN8STM32DMA10initializeEv+0x58>)
 8014938:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801493a:	4a0b      	ldr	r2, [pc, #44]	; (8014968 <_ZN8STM32DMA10initializeEv+0x58>)
 801493c:	f043 0310 	orr.w	r3, r3, #16
 8014940:	67d3      	str	r3, [r2, #124]	; 0x7c
    __HAL_RCC_DMA2D_RELEASE_RESET();
 8014942:	4b09      	ldr	r3, [pc, #36]	; (8014968 <_ZN8STM32DMA10initializeEv+0x58>)
 8014944:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8014946:	4a08      	ldr	r2, [pc, #32]	; (8014968 <_ZN8STM32DMA10initializeEv+0x58>)
 8014948:	f023 0310 	bic.w	r3, r3, #16
 801494c:	67d3      	str	r3, [r2, #124]	; 0x7c

    /* Enable DMA2D global Interrupt */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 801494e:	2200      	movs	r2, #0
 8014950:	2105      	movs	r1, #5
 8014952:	205a      	movs	r0, #90	; 0x5a
 8014954:	f7f2 fac0 	bl	8006ed8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8014958:	205a      	movs	r0, #90	; 0x5a
 801495a:	f7f2 fad7 	bl	8006f0c <HAL_NVIC_EnableIRQ>
}
 801495e:	bf00      	nop
 8014960:	3710      	adds	r7, #16
 8014962:	46bd      	mov	sp, r7
 8014964:	bd80      	pop	{r7, pc}
 8014966:	bf00      	nop
 8014968:	58024400 	.word	0x58024400

0801496c <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE>:

inline uint32_t STM32DMA::getChromARTInputFormat(Bitmap::BitmapFormat format)
{
 801496c:	b580      	push	{r7, lr}
 801496e:	b084      	sub	sp, #16
 8014970:	af00      	add	r7, sp, #0
 8014972:	6078      	str	r0, [r7, #4]
 8014974:	460b      	mov	r3, r1
 8014976:	70fb      	strb	r3, [r7, #3]
    // Default color mode set to ARGB8888
    uint32_t dma2dColorMode = DMA2D_INPUT_ARGB8888;
 8014978:	2300      	movs	r3, #0
 801497a:	60fb      	str	r3, [r7, #12]

    switch (format)
 801497c:	78fb      	ldrb	r3, [r7, #3]
 801497e:	2b0b      	cmp	r3, #11
 8014980:	d826      	bhi.n	80149d0 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x64>
 8014982:	a201      	add	r2, pc, #4	; (adr r2, 8014988 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x1c>)
 8014984:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014988:	080149c5 	.word	0x080149c5
 801498c:	080149bf 	.word	0x080149bf
 8014990:	080149b9 	.word	0x080149b9
 8014994:	080149d1 	.word	0x080149d1
 8014998:	080149d1 	.word	0x080149d1
 801499c:	080149d1 	.word	0x080149d1
 80149a0:	080149d1 	.word	0x080149d1
 80149a4:	080149cb 	.word	0x080149cb
 80149a8:	080149cb 	.word	0x080149cb
 80149ac:	080149cb 	.word	0x080149cb
 80149b0:	080149cb 	.word	0x080149cb
 80149b4:	080149cb 	.word	0x080149cb
    {
    case Bitmap::ARGB8888: /* DMA2D input mode set to 32bit ARGB */
        dma2dColorMode = DMA2D_INPUT_ARGB8888;
 80149b8:	2300      	movs	r3, #0
 80149ba:	60fb      	str	r3, [r7, #12]
        break;
 80149bc:	e00e      	b.n	80149dc <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>
    case Bitmap::RGB888: /* DMA2D input mode set to 24bit RGB */
        dma2dColorMode = DMA2D_INPUT_RGB888;
 80149be:	2301      	movs	r3, #1
 80149c0:	60fb      	str	r3, [r7, #12]
        break;
 80149c2:	e00b      	b.n	80149dc <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>
    case Bitmap::RGB565: /* DMA2D input mode set to 16bit RGB */
        dma2dColorMode = DMA2D_INPUT_RGB565;
 80149c4:	2302      	movs	r3, #2
 80149c6:	60fb      	str	r3, [r7, #12]
        break;
 80149c8:	e008      	b.n	80149dc <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>
    case Bitmap::ARGB2222: /* Fall through */
    case Bitmap::ABGR2222: /* Fall through */
    case Bitmap::RGBA2222: /* Fall through */
    case Bitmap::BGRA2222: /* Fall through */
    case Bitmap::L8:       /* DMA2D input mode set to 8bit Color Look up table*/
        dma2dColorMode = DMA2D_INPUT_L8;
 80149ca:	2305      	movs	r3, #5
 80149cc:	60fb      	str	r3, [r7, #12]
        break;
 80149ce:	e005      	b.n	80149dc <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>
    case Bitmap::BW:     /* Fall through */
    case Bitmap::BW_RLE: /* Fall through */
    case Bitmap::GRAY4:  /* Fall through */
    case Bitmap::GRAY2:  /* Fall through */
    default:             /* Unsupported input format for DMA2D */
        assert(0 && "Unsupported Format!");
 80149d0:	4b05      	ldr	r3, [pc, #20]	; (80149e8 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x7c>)
 80149d2:	4a06      	ldr	r2, [pc, #24]	; (80149ec <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x80>)
 80149d4:	216f      	movs	r1, #111	; 0x6f
 80149d6:	4806      	ldr	r0, [pc, #24]	; (80149f0 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x84>)
 80149d8:	f006 fe28 	bl	801b62c <__assert_func>
        break;
    }

    return dma2dColorMode;
 80149dc:	68fb      	ldr	r3, [r7, #12]
}
 80149de:	4618      	mov	r0, r3
 80149e0:	3710      	adds	r7, #16
 80149e2:	46bd      	mov	sp, r7
 80149e4:	bd80      	pop	{r7, pc}
 80149e6:	bf00      	nop
 80149e8:	0801ea94 	.word	0x0801ea94
 80149ec:	0801eab0 	.word	0x0801eab0
 80149f0:	0801eafc 	.word	0x0801eafc

080149f4 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE>:

inline uint32_t STM32DMA::getChromARTOutputFormat(Bitmap::BitmapFormat format)
{
 80149f4:	b580      	push	{r7, lr}
 80149f6:	b084      	sub	sp, #16
 80149f8:	af00      	add	r7, sp, #0
 80149fa:	6078      	str	r0, [r7, #4]
 80149fc:	460b      	mov	r3, r1
 80149fe:	70fb      	strb	r3, [r7, #3]
    // Default color mode set to ARGB8888
    uint32_t dma2dColorMode = DMA2D_OUTPUT_ARGB8888;
 8014a00:	2300      	movs	r3, #0
 8014a02:	60fb      	str	r3, [r7, #12]

    switch (format)
 8014a04:	78fb      	ldrb	r3, [r7, #3]
 8014a06:	2b0a      	cmp	r3, #10
 8014a08:	d821      	bhi.n	8014a4e <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x5a>
 8014a0a:	a201      	add	r2, pc, #4	; (adr r2, 8014a10 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x1c>)
 8014a0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014a10:	08014a49 	.word	0x08014a49
 8014a14:	08014a43 	.word	0x08014a43
 8014a18:	08014a3d 	.word	0x08014a3d
 8014a1c:	08014a4f 	.word	0x08014a4f
 8014a20:	08014a4f 	.word	0x08014a4f
 8014a24:	08014a4f 	.word	0x08014a4f
 8014a28:	08014a4f 	.word	0x08014a4f
 8014a2c:	08014a43 	.word	0x08014a43
 8014a30:	08014a43 	.word	0x08014a43
 8014a34:	08014a43 	.word	0x08014a43
 8014a38:	08014a43 	.word	0x08014a43
    {
    case Bitmap::ARGB8888: /* DMA2D output mode set to 32bit ARGB */
        dma2dColorMode = DMA2D_OUTPUT_ARGB8888;
 8014a3c:	2300      	movs	r3, #0
 8014a3e:	60fb      	str	r3, [r7, #12]
        break;
 8014a40:	e00b      	b.n	8014a5a <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x66>
    case Bitmap::RGB888:   /* Fall through */
    case Bitmap::ARGB2222: /* Fall through */
    case Bitmap::ABGR2222: /* Fall through */
    case Bitmap::RGBA2222: /* Fall through */
    case Bitmap::BGRA2222: /* DMA2D output mode set to 24bit RGB */
        dma2dColorMode = DMA2D_OUTPUT_RGB888;
 8014a42:	2301      	movs	r3, #1
 8014a44:	60fb      	str	r3, [r7, #12]
        break;
 8014a46:	e008      	b.n	8014a5a <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x66>
    case Bitmap::RGB565: /* DMA2D output mode set to 16bit RGB */
        dma2dColorMode = DMA2D_OUTPUT_RGB565;
 8014a48:	2302      	movs	r3, #2
 8014a4a:	60fb      	str	r3, [r7, #12]
        break;
 8014a4c:	e005      	b.n	8014a5a <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x66>
    case Bitmap::BW:     /* Fall through */
    case Bitmap::BW_RLE: /* Fall through */
    case Bitmap::GRAY4:  /* Fall through */
    case Bitmap::GRAY2:  /* Fall through */
    default:             /* Unsupported output format for DMA2D */
        assert(0 && "Unsupported Format!");
 8014a4e:	4b05      	ldr	r3, [pc, #20]	; (8014a64 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>)
 8014a50:	4a05      	ldr	r2, [pc, #20]	; (8014a68 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x74>)
 8014a52:	2190      	movs	r1, #144	; 0x90
 8014a54:	4805      	ldr	r0, [pc, #20]	; (8014a6c <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x78>)
 8014a56:	f006 fde9 	bl	801b62c <__assert_func>
        break;
    }

    return dma2dColorMode;
 8014a5a:	68fb      	ldr	r3, [r7, #12]
}
 8014a5c:	4618      	mov	r0, r3
 8014a5e:	3710      	adds	r7, #16
 8014a60:	46bd      	mov	sp, r7
 8014a62:	bd80      	pop	{r7, pc}
 8014a64:	0801ea94 	.word	0x0801ea94
 8014a68:	0801eb28 	.word	0x0801eb28
 8014a6c:	0801eafc 	.word	0x0801eafc

08014a70 <_ZN8STM32DMA11getBlitCapsEv>:

BlitOperations STM32DMA::getBlitCaps()
{
 8014a70:	b480      	push	{r7}
 8014a72:	b083      	sub	sp, #12
 8014a74:	af00      	add	r7, sp, #0
 8014a76:	6078      	str	r0, [r7, #4]
                                       | BLIT_OP_COPY_L8
                                       | BLIT_OP_COPY_WITH_ALPHA
                                       | BLIT_OP_COPY_ARGB8888
                                       | BLIT_OP_COPY_ARGB8888_WITH_ALPHA
                                       | BLIT_OP_COPY_A4
                                       | BLIT_OP_COPY_A8);
 8014a78:	f240 33ef 	movw	r3, #1007	; 0x3ef
}
 8014a7c:	4618      	mov	r0, r3
 8014a7e:	370c      	adds	r7, #12
 8014a80:	46bd      	mov	sp, r7
 8014a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a86:	4770      	bx	lr

08014a88 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE>:
 * BLIT_OP_COPY_ARGB8888_WITH_ALPHA
 * BLIT_OP_COPY_A4
 * BLIT_OP_COPY_A8
 */
void STM32DMA::setupDataCopy(const BlitOp& blitOp)
{
 8014a88:	b590      	push	{r4, r7, lr}
 8014a8a:	b089      	sub	sp, #36	; 0x24
 8014a8c:	af00      	add	r7, sp, #0
 8014a8e:	6078      	str	r0, [r7, #4]
 8014a90:	6039      	str	r1, [r7, #0]
    uint32_t dma2dForegroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.srcFormat));
 8014a92:	683b      	ldr	r3, [r7, #0]
 8014a94:	7f5b      	ldrb	r3, [r3, #29]
 8014a96:	4619      	mov	r1, r3
 8014a98:	6878      	ldr	r0, [r7, #4]
 8014a9a:	f7ff ff67 	bl	801496c <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE>
 8014a9e:	61b8      	str	r0, [r7, #24]
    uint32_t dma2dBackgroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8014aa0:	683b      	ldr	r3, [r7, #0]
 8014aa2:	7f9b      	ldrb	r3, [r3, #30]
 8014aa4:	4619      	mov	r1, r3
 8014aa6:	6878      	ldr	r0, [r7, #4]
 8014aa8:	f7ff ff60 	bl	801496c <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE>
 8014aac:	6178      	str	r0, [r7, #20]
    uint32_t dma2dOutputColorMode = getChromARTOutputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8014aae:	683b      	ldr	r3, [r7, #0]
 8014ab0:	7f9b      	ldrb	r3, [r3, #30]
 8014ab2:	4619      	mov	r1, r3
 8014ab4:	6878      	ldr	r0, [r7, #4]
 8014ab6:	f7ff ff9d 	bl	80149f4 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE>
 8014aba:	6138      	str	r0, [r7, #16]

    /* DMA2D OOR register configuration ------------------------------------------*/
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 8014abc:	683b      	ldr	r3, [r7, #0]
 8014abe:	8b5b      	ldrh	r3, [r3, #26]
 8014ac0:	461a      	mov	r2, r3
 8014ac2:	683b      	ldr	r3, [r7, #0]
 8014ac4:	8a9b      	ldrh	r3, [r3, #20]
 8014ac6:	1ad2      	subs	r2, r2, r3
 8014ac8:	4b92      	ldr	r3, [pc, #584]	; (8014d14 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8014aca:	641a      	str	r2, [r3, #64]	; 0x40

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(DMA2D->BGOR, blitOp.dstLoopStride - blitOp.nSteps);
 8014acc:	683b      	ldr	r3, [r7, #0]
 8014ace:	8b5b      	ldrh	r3, [r3, #26]
 8014ad0:	461a      	mov	r2, r3
 8014ad2:	683b      	ldr	r3, [r7, #0]
 8014ad4:	8a9b      	ldrh	r3, [r3, #20]
 8014ad6:	1ad2      	subs	r2, r2, r3
 8014ad8:	4b8e      	ldr	r3, [pc, #568]	; (8014d14 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8014ada:	619a      	str	r2, [r3, #24]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(DMA2D->FGOR, blitOp.srcLoopStride - blitOp.nSteps);
 8014adc:	683b      	ldr	r3, [r7, #0]
 8014ade:	8b1b      	ldrh	r3, [r3, #24]
 8014ae0:	461a      	mov	r2, r3
 8014ae2:	683b      	ldr	r3, [r7, #0]
 8014ae4:	8a9b      	ldrh	r3, [r3, #20]
 8014ae6:	1ad2      	subs	r2, r2, r3
 8014ae8:	4b8a      	ldr	r3, [pc, #552]	; (8014d14 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8014aea:	611a      	str	r2, [r3, #16]

    /* DMA2D OPFCCR register configuration ---------------------------------------*/
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 8014aec:	4a89      	ldr	r2, [pc, #548]	; (8014d14 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8014aee:	693b      	ldr	r3, [r7, #16]
 8014af0:	6353      	str	r3, [r2, #52]	; 0x34

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8014af2:	683b      	ldr	r3, [r7, #0]
 8014af4:	8adb      	ldrh	r3, [r3, #22]
 8014af6:	461a      	mov	r2, r3
 8014af8:	683b      	ldr	r3, [r7, #0]
 8014afa:	8a9b      	ldrh	r3, [r3, #20]
 8014afc:	041b      	lsls	r3, r3, #16
 8014afe:	431a      	orrs	r2, r3
 8014b00:	4b84      	ldr	r3, [pc, #528]	; (8014d14 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8014b02:	645a      	str	r2, [r3, #68]	; 0x44

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8014b04:	683b      	ldr	r3, [r7, #0]
 8014b06:	691a      	ldr	r2, [r3, #16]
 8014b08:	4b82      	ldr	r3, [pc, #520]	; (8014d14 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8014b0a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Configure DMA2D source address */
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pSrc));
 8014b0c:	683b      	ldr	r3, [r7, #0]
 8014b0e:	685a      	ldr	r2, [r3, #4]
 8014b10:	4b80      	ldr	r3, [pc, #512]	; (8014d14 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8014b12:	60da      	str	r2, [r3, #12]

    switch (blitOp.operation)
 8014b14:	683b      	ldr	r3, [r7, #0]
 8014b16:	681b      	ldr	r3, [r3, #0]
 8014b18:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8014b1c:	d036      	beq.n	8014b8c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x104>
 8014b1e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8014b22:	f200 80e2 	bhi.w	8014cea <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x262>
 8014b26:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8014b2a:	d014      	beq.n	8014b56 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xce>
 8014b2c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8014b30:	f200 80db 	bhi.w	8014cea <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x262>
 8014b34:	2b80      	cmp	r3, #128	; 0x80
 8014b36:	d059      	beq.n	8014bec <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x164>
 8014b38:	2b80      	cmp	r3, #128	; 0x80
 8014b3a:	f200 80d6 	bhi.w	8014cea <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x262>
 8014b3e:	2b40      	cmp	r3, #64	; 0x40
 8014b40:	f000 80be 	beq.w	8014cc0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x238>
 8014b44:	2b40      	cmp	r3, #64	; 0x40
 8014b46:	f200 80d0 	bhi.w	8014cea <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x262>
 8014b4a:	2b04      	cmp	r3, #4
 8014b4c:	d039      	beq.n	8014bc2 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x13a>
 8014b4e:	2b20      	cmp	r3, #32
 8014b50:	f000 80b6 	beq.w	8014cc0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x238>
 8014b54:	e0c9      	b.n	8014cea <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x262>
    {
    case BLIT_OP_COPY_A4:
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A4 | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8014b56:	683b      	ldr	r3, [r7, #0]
 8014b58:	7f1b      	ldrb	r3, [r3, #28]
 8014b5a:	061b      	lsls	r3, r3, #24
 8014b5c:	4619      	mov	r1, r3
 8014b5e:	4a6d      	ldr	r2, [pc, #436]	; (8014d14 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8014b60:	4b6d      	ldr	r3, [pc, #436]	; (8014d18 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x290>)
 8014b62:	430b      	orrs	r3, r1
 8014b64:	61d3      	str	r3, [r2, #28]

        /* set DMA2D foreground color */
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 8014b66:	683b      	ldr	r3, [r7, #0]
 8014b68:	330c      	adds	r3, #12
 8014b6a:	4c6a      	ldr	r4, [pc, #424]	; (8014d14 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8014b6c:	4618      	mov	r0, r3
 8014b6e:	f7ff fd9f 	bl	80146b0 <_ZNK8touchgfx9colortypecvmEv>
 8014b72:	4603      	mov	r3, r0
 8014b74:	6223      	str	r3, [r4, #32]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8014b76:	4a67      	ldr	r2, [pc, #412]	; (8014d14 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8014b78:	697b      	ldr	r3, [r7, #20]
 8014b7a:	6253      	str	r3, [r2, #36]	; 0x24

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8014b7c:	683b      	ldr	r3, [r7, #0]
 8014b7e:	691a      	ldr	r2, [r3, #16]
 8014b80:	4b64      	ldr	r3, [pc, #400]	; (8014d14 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8014b82:	615a      	str	r2, [r3, #20]

        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 8014b84:	4b63      	ldr	r3, [pc, #396]	; (8014d14 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8014b86:	4a65      	ldr	r2, [pc, #404]	; (8014d1c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x294>)
 8014b88:	601a      	str	r2, [r3, #0]
        break;
 8014b8a:	e0da      	b.n	8014d42 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2ba>
    case BLIT_OP_COPY_A8:
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8014b8c:	683b      	ldr	r3, [r7, #0]
 8014b8e:	7f1b      	ldrb	r3, [r3, #28]
 8014b90:	061b      	lsls	r3, r3, #24
 8014b92:	4619      	mov	r1, r3
 8014b94:	4a5f      	ldr	r2, [pc, #380]	; (8014d14 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8014b96:	4b62      	ldr	r3, [pc, #392]	; (8014d20 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 8014b98:	430b      	orrs	r3, r1
 8014b9a:	61d3      	str	r3, [r2, #28]

        /* set DMA2D foreground color */
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 8014b9c:	683b      	ldr	r3, [r7, #0]
 8014b9e:	330c      	adds	r3, #12
 8014ba0:	4c5c      	ldr	r4, [pc, #368]	; (8014d14 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8014ba2:	4618      	mov	r0, r3
 8014ba4:	f7ff fd84 	bl	80146b0 <_ZNK8touchgfx9colortypecvmEv>
 8014ba8:	4603      	mov	r3, r0
 8014baa:	6223      	str	r3, [r4, #32]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8014bac:	4a59      	ldr	r2, [pc, #356]	; (8014d14 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8014bae:	697b      	ldr	r3, [r7, #20]
 8014bb0:	6253      	str	r3, [r2, #36]	; 0x24

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8014bb2:	683b      	ldr	r3, [r7, #0]
 8014bb4:	691a      	ldr	r2, [r3, #16]
 8014bb6:	4b57      	ldr	r3, [pc, #348]	; (8014d14 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8014bb8:	615a      	str	r2, [r3, #20]

        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 8014bba:	4b56      	ldr	r3, [pc, #344]	; (8014d14 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8014bbc:	4a57      	ldr	r2, [pc, #348]	; (8014d1c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x294>)
 8014bbe:	601a      	str	r2, [r3, #0]
        break;
 8014bc0:	e0bf      	b.n	8014d42 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2ba>
    case BLIT_OP_COPY_WITH_ALPHA:
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8014bc2:	683b      	ldr	r3, [r7, #0]
 8014bc4:	7f1b      	ldrb	r3, [r3, #28]
 8014bc6:	061b      	lsls	r3, r3, #24
 8014bc8:	461a      	mov	r2, r3
 8014bca:	69bb      	ldr	r3, [r7, #24]
 8014bcc:	4313      	orrs	r3, r2
 8014bce:	4a51      	ldr	r2, [pc, #324]	; (8014d14 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8014bd0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8014bd4:	61d3      	str	r3, [r2, #28]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8014bd6:	4a4f      	ldr	r2, [pc, #316]	; (8014d14 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8014bd8:	697b      	ldr	r3, [r7, #20]
 8014bda:	6253      	str	r3, [r2, #36]	; 0x24

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8014bdc:	683b      	ldr	r3, [r7, #0]
 8014bde:	691a      	ldr	r2, [r3, #16]
 8014be0:	4b4c      	ldr	r3, [pc, #304]	; (8014d14 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8014be2:	615a      	str	r2, [r3, #20]

        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 8014be4:	4b4b      	ldr	r3, [pc, #300]	; (8014d14 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8014be6:	4a4d      	ldr	r2, [pc, #308]	; (8014d1c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x294>)
 8014be8:	601a      	str	r2, [r3, #0]
        break;
 8014bea:	e0aa      	b.n	8014d42 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2ba>
    case BLIT_OP_COPY_L8:
        {
            bool blend = true;
 8014bec:	2301      	movs	r3, #1
 8014bee:	77fb      	strb	r3, [r7, #31]
            const clutData_t* const palette = reinterpret_cast<const clutData_t*>(blitOp.pClut);
 8014bf0:	683b      	ldr	r3, [r7, #0]
 8014bf2:	689b      	ldr	r3, [r3, #8]
 8014bf4:	60fb      	str	r3, [r7, #12]

            /* Write foreground CLUT memory address */
            WRITE_REG(DMA2D->FGCMAR, reinterpret_cast<uint32_t>(&palette->data));
 8014bf6:	68fb      	ldr	r3, [r7, #12]
 8014bf8:	1d1a      	adds	r2, r3, #4
 8014bfa:	4b46      	ldr	r3, [pc, #280]	; (8014d14 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8014bfc:	62da      	str	r2, [r3, #44]	; 0x2c

            /* Set DMA2D color mode and alpha mode */
            WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8014bfe:	683b      	ldr	r3, [r7, #0]
 8014c00:	7f1b      	ldrb	r3, [r3, #28]
 8014c02:	061b      	lsls	r3, r3, #24
 8014c04:	461a      	mov	r2, r3
 8014c06:	69bb      	ldr	r3, [r7, #24]
 8014c08:	4313      	orrs	r3, r2
 8014c0a:	4a42      	ldr	r2, [pc, #264]	; (8014d14 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8014c0c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8014c10:	61d3      	str	r3, [r2, #28]

            /* Write DMA2D BGPFCCR register */
            WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8014c12:	4a40      	ldr	r2, [pc, #256]	; (8014d14 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8014c14:	697b      	ldr	r3, [r7, #20]
 8014c16:	6253      	str	r3, [r2, #36]	; 0x24

            /* Configure DMA2D Stream source2 address */
            WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8014c18:	683b      	ldr	r3, [r7, #0]
 8014c1a:	691a      	ldr	r2, [r3, #16]
 8014c1c:	4b3d      	ldr	r3, [pc, #244]	; (8014d14 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8014c1e:	615a      	str	r2, [r3, #20]

            /* Configure CLUT */
            switch ((Bitmap::ClutFormat)palette->format)
 8014c20:	68fb      	ldr	r3, [r7, #12]
 8014c22:	881b      	ldrh	r3, [r3, #0]
 8014c24:	b2db      	uxtb	r3, r3
 8014c26:	2b00      	cmp	r3, #0
 8014c28:	d002      	beq.n	8014c30 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1a8>
 8014c2a:	2b01      	cmp	r3, #1
 8014c2c:	d00d      	beq.n	8014c4a <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1c2>
 8014c2e:	e020      	b.n	8014c72 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1ea>
            {
            case Bitmap::CLUT_FORMAT_L8_ARGB8888:
                /* Write foreground CLUT size and CLUT color mode */
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_ARGB8888 << DMA2D_FGPFCCR_CCM_Pos)));
 8014c30:	4b38      	ldr	r3, [pc, #224]	; (8014d14 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8014c32:	69da      	ldr	r2, [r3, #28]
 8014c34:	4b3b      	ldr	r3, [pc, #236]	; (8014d24 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8014c36:	4013      	ands	r3, r2
 8014c38:	68fa      	ldr	r2, [r7, #12]
 8014c3a:	8852      	ldrh	r2, [r2, #2]
 8014c3c:	3a01      	subs	r2, #1
 8014c3e:	0212      	lsls	r2, r2, #8
 8014c40:	4611      	mov	r1, r2
 8014c42:	4a34      	ldr	r2, [pc, #208]	; (8014d14 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8014c44:	430b      	orrs	r3, r1
 8014c46:	61d3      	str	r3, [r2, #28]
                break;
 8014c48:	e01a      	b.n	8014c80 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1f8>
            case Bitmap::CLUT_FORMAT_L8_RGB888:
                if(blitOp.alpha == 255)
 8014c4a:	683b      	ldr	r3, [r7, #0]
 8014c4c:	7f1b      	ldrb	r3, [r3, #28]
 8014c4e:	2bff      	cmp	r3, #255	; 0xff
 8014c50:	d101      	bne.n	8014c56 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1ce>
                {
                    blend = false;
 8014c52:	2300      	movs	r3, #0
 8014c54:	77fb      	strb	r3, [r7, #31]
                }
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_RGB888 << DMA2D_FGPFCCR_CCM_Pos)));
 8014c56:	4b2f      	ldr	r3, [pc, #188]	; (8014d14 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8014c58:	69da      	ldr	r2, [r3, #28]
 8014c5a:	4b32      	ldr	r3, [pc, #200]	; (8014d24 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8014c5c:	4013      	ands	r3, r2
 8014c5e:	68fa      	ldr	r2, [r7, #12]
 8014c60:	8852      	ldrh	r2, [r2, #2]
 8014c62:	3a01      	subs	r2, #1
 8014c64:	0212      	lsls	r2, r2, #8
 8014c66:	4313      	orrs	r3, r2
 8014c68:	4a2a      	ldr	r2, [pc, #168]	; (8014d14 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8014c6a:	f043 0310 	orr.w	r3, r3, #16
 8014c6e:	61d3      	str	r3, [r2, #28]
                break;
 8014c70:	e006      	b.n	8014c80 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1f8>

            case Bitmap::CLUT_FORMAT_L8_RGB565:
            default:
                assert(0 && "Unsupported format");
 8014c72:	4b2d      	ldr	r3, [pc, #180]	; (8014d28 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8014c74:	4a2d      	ldr	r2, [pc, #180]	; (8014d2c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a4>)
 8014c76:	f44f 718d 	mov.w	r1, #282	; 0x11a
 8014c7a:	482d      	ldr	r0, [pc, #180]	; (8014d30 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a8>)
 8014c7c:	f006 fcd6 	bl	801b62c <__assert_func>
                break;
            }

            /* Enable the CLUT loading for the foreground */
            SET_BIT(DMA2D->FGPFCCR, DMA2D_FGPFCCR_START);
 8014c80:	4b24      	ldr	r3, [pc, #144]	; (8014d14 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8014c82:	69db      	ldr	r3, [r3, #28]
 8014c84:	4a23      	ldr	r2, [pc, #140]	; (8014d14 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8014c86:	f043 0320 	orr.w	r3, r3, #32
 8014c8a:	61d3      	str	r3, [r2, #28]

            while ((READ_REG(DMA2D->FGPFCCR) & DMA2D_FGPFCCR_START) != 0U)
 8014c8c:	4b21      	ldr	r3, [pc, #132]	; (8014d14 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8014c8e:	69db      	ldr	r3, [r3, #28]
 8014c90:	f003 0320 	and.w	r3, r3, #32
 8014c94:	2b00      	cmp	r3, #0
 8014c96:	bf14      	ite	ne
 8014c98:	2301      	movne	r3, #1
 8014c9a:	2300      	moveq	r3, #0
 8014c9c:	b2db      	uxtb	r3, r3
 8014c9e:	2b00      	cmp	r3, #0
 8014ca0:	d000      	beq.n	8014ca4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x21c>
 8014ca2:	e7f3      	b.n	8014c8c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x204>
            {
            }
            DMA2D->IFCR = (DMA2D_FLAG_CTC);
 8014ca4:	4b1b      	ldr	r3, [pc, #108]	; (8014d14 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8014ca6:	2210      	movs	r2, #16
 8014ca8:	609a      	str	r2, [r3, #8]

            /* Set DMA2D mode */
            if(blend)
 8014caa:	7ffb      	ldrb	r3, [r7, #31]
 8014cac:	2b00      	cmp	r3, #0
 8014cae:	d003      	beq.n	8014cb8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x230>
            {
                WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 8014cb0:	4b18      	ldr	r3, [pc, #96]	; (8014d14 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8014cb2:	4a1a      	ldr	r2, [pc, #104]	; (8014d1c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x294>)
 8014cb4:	601a      	str	r2, [r3, #0]
            else
            {
                WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START);
            }
        }
        break;
 8014cb6:	e044      	b.n	8014d42 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2ba>
                WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START);
 8014cb8:	4b16      	ldr	r3, [pc, #88]	; (8014d14 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8014cba:	4a1e      	ldr	r2, [pc, #120]	; (8014d34 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2ac>)
 8014cbc:	601a      	str	r2, [r3, #0]
        break;
 8014cbe:	e040      	b.n	8014d42 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2ba>
    case BLIT_OP_COPY_ARGB8888:
    case BLIT_OP_COPY_ARGB8888_WITH_ALPHA:
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8014cc0:	683b      	ldr	r3, [r7, #0]
 8014cc2:	7f1b      	ldrb	r3, [r3, #28]
 8014cc4:	061b      	lsls	r3, r3, #24
 8014cc6:	461a      	mov	r2, r3
 8014cc8:	69bb      	ldr	r3, [r7, #24]
 8014cca:	4313      	orrs	r3, r2
 8014ccc:	4a11      	ldr	r2, [pc, #68]	; (8014d14 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8014cce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8014cd2:	61d3      	str	r3, [r2, #28]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8014cd4:	4a0f      	ldr	r2, [pc, #60]	; (8014d14 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8014cd6:	697b      	ldr	r3, [r7, #20]
 8014cd8:	6253      	str	r3, [r2, #36]	; 0x24

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8014cda:	683b      	ldr	r3, [r7, #0]
 8014cdc:	691a      	ldr	r2, [r3, #16]
 8014cde:	4b0d      	ldr	r3, [pc, #52]	; (8014d14 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8014ce0:	615a      	str	r2, [r3, #20]

        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 8014ce2:	4b0c      	ldr	r3, [pc, #48]	; (8014d14 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8014ce4:	4a0d      	ldr	r2, [pc, #52]	; (8014d1c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x294>)
 8014ce6:	601a      	str	r2, [r3, #0]
        break;
 8014ce8:	e02b      	b.n	8014d42 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2ba>
    default: /* BLIT_OP_COPY */
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8014cea:	683b      	ldr	r3, [r7, #0]
 8014cec:	7f1b      	ldrb	r3, [r3, #28]
 8014cee:	061b      	lsls	r3, r3, #24
 8014cf0:	461a      	mov	r2, r3
 8014cf2:	69bb      	ldr	r3, [r7, #24]
 8014cf4:	4313      	orrs	r3, r2
 8014cf6:	4a07      	ldr	r2, [pc, #28]	; (8014d14 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8014cf8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8014cfc:	61d3      	str	r3, [r2, #28]

        /* Perform pixel-format-conversion (PFC) If Bitmap format is not same format as framebuffer format */
        if (blitOp.srcFormat != blitOp.dstFormat)
 8014cfe:	683b      	ldr	r3, [r7, #0]
 8014d00:	7f5a      	ldrb	r2, [r3, #29]
 8014d02:	683b      	ldr	r3, [r7, #0]
 8014d04:	7f9b      	ldrb	r3, [r3, #30]
 8014d06:	429a      	cmp	r2, r3
 8014d08:	d016      	beq.n	8014d38 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2b0>
        {
            /* Start DMA2D : PFC Mode */
            WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START);
 8014d0a:	4b02      	ldr	r3, [pc, #8]	; (8014d14 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8014d0c:	4a09      	ldr	r2, [pc, #36]	; (8014d34 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2ac>)
 8014d0e:	601a      	str	r2, [r3, #0]
        else
        {
            /* Start DMA2D : M2M Mode */
            WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_IT_TC | DMA2D_CR_START);
        }
        break;
 8014d10:	e016      	b.n	8014d40 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2b8>
 8014d12:	bf00      	nop
 8014d14:	52001000 	.word	0x52001000
 8014d18:	0002000a 	.word	0x0002000a
 8014d1c:	00020201 	.word	0x00020201
 8014d20:	00020009 	.word	0x00020009
 8014d24:	ffff00ef 	.word	0xffff00ef
 8014d28:	0801eb74 	.word	0x0801eb74
 8014d2c:	0801eb90 	.word	0x0801eb90
 8014d30:	0801eafc 	.word	0x0801eafc
 8014d34:	00010201 	.word	0x00010201
            WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_IT_TC | DMA2D_CR_START);
 8014d38:	4b04      	ldr	r3, [pc, #16]	; (8014d4c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2c4>)
 8014d3a:	f240 2201 	movw	r2, #513	; 0x201
 8014d3e:	601a      	str	r2, [r3, #0]
        break;
 8014d40:	bf00      	nop
    }
}
 8014d42:	bf00      	nop
 8014d44:	3724      	adds	r7, #36	; 0x24
 8014d46:	46bd      	mov	sp, r7
 8014d48:	bd90      	pop	{r4, r7, pc}
 8014d4a:	bf00      	nop
 8014d4c:	52001000 	.word	0x52001000

08014d50 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE>:
 * void STM32DMA::setupDataFill(const BlitOp& blitOp) handles blit operation of
 * BLIT_OP_FILL
 * BLIT_OP_FILL_WITH_ALPHA
 */
void STM32DMA::setupDataFill(const BlitOp& blitOp)
{
 8014d50:	b590      	push	{r4, r7, lr}
 8014d52:	b085      	sub	sp, #20
 8014d54:	af00      	add	r7, sp, #0
 8014d56:	6078      	str	r0, [r7, #4]
 8014d58:	6039      	str	r1, [r7, #0]
    uint32_t dma2dOutputColorMode = getChromARTOutputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8014d5a:	683b      	ldr	r3, [r7, #0]
 8014d5c:	7f9b      	ldrb	r3, [r3, #30]
 8014d5e:	4619      	mov	r1, r3
 8014d60:	6878      	ldr	r0, [r7, #4]
 8014d62:	f7ff fe47 	bl	80149f4 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE>
 8014d66:	60f8      	str	r0, [r7, #12]

    /* DMA2D OPFCCR register configuration ---------------------------------------*/
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 8014d68:	4a3b      	ldr	r2, [pc, #236]	; (8014e58 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 8014d6a:	68fb      	ldr	r3, [r7, #12]
 8014d6c:	6353      	str	r3, [r2, #52]	; 0x34

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8014d6e:	683b      	ldr	r3, [r7, #0]
 8014d70:	8adb      	ldrh	r3, [r3, #22]
 8014d72:	461a      	mov	r2, r3
 8014d74:	683b      	ldr	r3, [r7, #0]
 8014d76:	8a9b      	ldrh	r3, [r3, #20]
 8014d78:	041b      	lsls	r3, r3, #16
 8014d7a:	431a      	orrs	r2, r3
 8014d7c:	4b36      	ldr	r3, [pc, #216]	; (8014e58 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 8014d7e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8014d80:	683b      	ldr	r3, [r7, #0]
 8014d82:	691a      	ldr	r2, [r3, #16]
 8014d84:	4b34      	ldr	r3, [pc, #208]	; (8014e58 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 8014d86:	63da      	str	r2, [r3, #60]	; 0x3c

    /* DMA2D OOR register configuration ------------------------------------------*/
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 8014d88:	683b      	ldr	r3, [r7, #0]
 8014d8a:	8b5b      	ldrh	r3, [r3, #26]
 8014d8c:	461a      	mov	r2, r3
 8014d8e:	683b      	ldr	r3, [r7, #0]
 8014d90:	8a9b      	ldrh	r3, [r3, #20]
 8014d92:	1ad2      	subs	r2, r2, r3
 8014d94:	4b30      	ldr	r3, [pc, #192]	; (8014e58 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 8014d96:	641a      	str	r2, [r3, #64]	; 0x40

    if (blitOp.operation == BLIT_OP_FILL_WITH_ALPHA)
 8014d98:	683b      	ldr	r3, [r7, #0]
 8014d9a:	681b      	ldr	r3, [r3, #0]
 8014d9c:	2b08      	cmp	r3, #8
 8014d9e:	d12e      	bne.n	8014dfe <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xae>
    {
        /* DMA2D BGOR register configuration -------------------------------------*/
        WRITE_REG(DMA2D->BGOR, blitOp.dstLoopStride - blitOp.nSteps);
 8014da0:	683b      	ldr	r3, [r7, #0]
 8014da2:	8b5b      	ldrh	r3, [r3, #26]
 8014da4:	461a      	mov	r2, r3
 8014da6:	683b      	ldr	r3, [r7, #0]
 8014da8:	8a9b      	ldrh	r3, [r3, #20]
 8014daa:	1ad2      	subs	r2, r2, r3
 8014dac:	4b2a      	ldr	r3, [pc, #168]	; (8014e58 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 8014dae:	619a      	str	r2, [r3, #24]

        /* DMA2D FGOR register configuration -------------------------------------*/
        WRITE_REG(DMA2D->FGOR, blitOp.dstLoopStride - blitOp.nSteps);
 8014db0:	683b      	ldr	r3, [r7, #0]
 8014db2:	8b5b      	ldrh	r3, [r3, #26]
 8014db4:	461a      	mov	r2, r3
 8014db6:	683b      	ldr	r3, [r7, #0]
 8014db8:	8a9b      	ldrh	r3, [r3, #20]
 8014dba:	1ad2      	subs	r2, r2, r3
 8014dbc:	4b26      	ldr	r3, [pc, #152]	; (8014e58 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 8014dbe:	611a      	str	r2, [r3, #16]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8014dc0:	4a25      	ldr	r2, [pc, #148]	; (8014e58 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 8014dc2:	68fb      	ldr	r3, [r7, #12]
 8014dc4:	6253      	str	r3, [r2, #36]	; 0x24

        /* Write DMA2D FGPFCCR register */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_REPLACE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | ((blitOp.alpha << 24) & DMA2D_BGPFCCR_ALPHA));
 8014dc6:	683b      	ldr	r3, [r7, #0]
 8014dc8:	7f1b      	ldrb	r3, [r3, #28]
 8014dca:	061b      	lsls	r3, r3, #24
 8014dcc:	4619      	mov	r1, r3
 8014dce:	4a22      	ldr	r2, [pc, #136]	; (8014e58 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 8014dd0:	4b22      	ldr	r3, [pc, #136]	; (8014e5c <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x10c>)
 8014dd2:	430b      	orrs	r3, r1
 8014dd4:	61d3      	str	r3, [r2, #28]

        /* DMA2D FGCOLR register configuration -------------------------------------*/
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 8014dd6:	683b      	ldr	r3, [r7, #0]
 8014dd8:	330c      	adds	r3, #12
 8014dda:	4c1f      	ldr	r4, [pc, #124]	; (8014e58 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 8014ddc:	4618      	mov	r0, r3
 8014dde:	f7ff fc67 	bl	80146b0 <_ZNK8touchgfx9colortypecvmEv>
 8014de2:	4603      	mov	r3, r0
 8014de4:	6223      	str	r3, [r4, #32]

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8014de6:	683b      	ldr	r3, [r7, #0]
 8014de8:	691a      	ldr	r2, [r3, #16]
 8014dea:	4b1b      	ldr	r3, [pc, #108]	; (8014e58 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 8014dec:	615a      	str	r2, [r3, #20]

        /* Configure DMA2D source address */
        WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8014dee:	683b      	ldr	r3, [r7, #0]
 8014df0:	691a      	ldr	r2, [r3, #16]
 8014df2:	4b19      	ldr	r3, [pc, #100]	; (8014e58 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 8014df4:	60da      	str	r2, [r3, #12]

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_M2M_BLEND));
 8014df6:	4b18      	ldr	r3, [pc, #96]	; (8014e58 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 8014df8:	4a19      	ldr	r2, [pc, #100]	; (8014e60 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x110>)
 8014dfa:	601a      	str	r2, [r3, #0]
        WRITE_REG(DMA2D->OCOLR, ((blitOp.color >> 8) & 0xF800) | ((blitOp.color >> 5) & 0x07E0) | ((blitOp.color >> 3) & 0x001F));

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_R2M));
    }
}
 8014dfc:	e027      	b.n	8014e4e <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xfe>
        WRITE_REG(DMA2D->FGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8014dfe:	4a16      	ldr	r2, [pc, #88]	; (8014e58 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 8014e00:	68fb      	ldr	r3, [r7, #12]
 8014e02:	61d3      	str	r3, [r2, #28]
        WRITE_REG(DMA2D->FGOR, 0);
 8014e04:	4b14      	ldr	r3, [pc, #80]	; (8014e58 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 8014e06:	2200      	movs	r2, #0
 8014e08:	611a      	str	r2, [r3, #16]
        WRITE_REG(DMA2D->OCOLR, ((blitOp.color >> 8) & 0xF800) | ((blitOp.color >> 5) & 0x07E0) | ((blitOp.color >> 3) & 0x001F));
 8014e0a:	683b      	ldr	r3, [r7, #0]
 8014e0c:	330c      	adds	r3, #12
 8014e0e:	4618      	mov	r0, r3
 8014e10:	f7ff fc4e 	bl	80146b0 <_ZNK8touchgfx9colortypecvmEv>
 8014e14:	4603      	mov	r3, r0
 8014e16:	0a1b      	lsrs	r3, r3, #8
 8014e18:	f403 4478 	and.w	r4, r3, #63488	; 0xf800
 8014e1c:	683b      	ldr	r3, [r7, #0]
 8014e1e:	330c      	adds	r3, #12
 8014e20:	4618      	mov	r0, r3
 8014e22:	f7ff fc45 	bl	80146b0 <_ZNK8touchgfx9colortypecvmEv>
 8014e26:	4603      	mov	r3, r0
 8014e28:	095b      	lsrs	r3, r3, #5
 8014e2a:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8014e2e:	431c      	orrs	r4, r3
 8014e30:	683b      	ldr	r3, [r7, #0]
 8014e32:	330c      	adds	r3, #12
 8014e34:	4618      	mov	r0, r3
 8014e36:	f7ff fc3b 	bl	80146b0 <_ZNK8touchgfx9colortypecvmEv>
 8014e3a:	4603      	mov	r3, r0
 8014e3c:	08db      	lsrs	r3, r3, #3
 8014e3e:	f003 031f 	and.w	r3, r3, #31
 8014e42:	4a05      	ldr	r2, [pc, #20]	; (8014e58 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 8014e44:	4323      	orrs	r3, r4
 8014e46:	6393      	str	r3, [r2, #56]	; 0x38
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_R2M));
 8014e48:	4b03      	ldr	r3, [pc, #12]	; (8014e58 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 8014e4a:	4a06      	ldr	r2, [pc, #24]	; (8014e64 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x114>)
 8014e4c:	601a      	str	r2, [r3, #0]
}
 8014e4e:	bf00      	nop
 8014e50:	3714      	adds	r7, #20
 8014e52:	46bd      	mov	sp, r7
 8014e54:	bd90      	pop	{r4, r7, pc}
 8014e56:	bf00      	nop
 8014e58:	52001000 	.word	0x52001000
 8014e5c:	00010009 	.word	0x00010009
 8014e60:	00020201 	.word	0x00020201
 8014e64:	00030201 	.word	0x00030201

08014e68 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>:
class LockFreeDMA_Queue : public DMA_Queue
 8014e68:	b580      	push	{r7, lr}
 8014e6a:	b082      	sub	sp, #8
 8014e6c:	af00      	add	r7, sp, #0
 8014e6e:	6078      	str	r0, [r7, #4]
 8014e70:	4a05      	ldr	r2, [pc, #20]	; (8014e88 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev+0x20>)
 8014e72:	687b      	ldr	r3, [r7, #4]
 8014e74:	601a      	str	r2, [r3, #0]
 8014e76:	687b      	ldr	r3, [r7, #4]
 8014e78:	4618      	mov	r0, r3
 8014e7a:	f7ff fc25 	bl	80146c8 <_ZN8touchgfx9DMA_QueueD1Ev>
 8014e7e:	687b      	ldr	r3, [r7, #4]
 8014e80:	4618      	mov	r0, r3
 8014e82:	3708      	adds	r7, #8
 8014e84:	46bd      	mov	sp, r7
 8014e86:	bd80      	pop	{r7, pc}
 8014e88:	0801f914 	.word	0x0801f914

08014e8c <_ZN8touchgfx17LockFreeDMA_QueueD0Ev>:
 8014e8c:	b580      	push	{r7, lr}
 8014e8e:	b082      	sub	sp, #8
 8014e90:	af00      	add	r7, sp, #0
 8014e92:	6078      	str	r0, [r7, #4]
 8014e94:	6878      	ldr	r0, [r7, #4]
 8014e96:	f7ff ffe7 	bl	8014e68 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>
 8014e9a:	2114      	movs	r1, #20
 8014e9c:	6878      	ldr	r0, [r7, #4]
 8014e9e:	f006 fb97 	bl	801b5d0 <_ZdlPvj>
 8014ea2:	687b      	ldr	r3, [r7, #4]
 8014ea4:	4618      	mov	r0, r3
 8014ea6:	3708      	adds	r7, #8
 8014ea8:	46bd      	mov	sp, r7
 8014eaa:	bd80      	pop	{r7, pc}

08014eac <_ZN8touchgfx3LCDD1Ev>:
        : textureMapperClass(0)
    {
    }

    /** Finalizes an instance of the LCD class. */
    virtual ~LCD()
 8014eac:	b480      	push	{r7}
 8014eae:	b083      	sub	sp, #12
 8014eb0:	af00      	add	r7, sp, #0
 8014eb2:	6078      	str	r0, [r7, #4]
    {
 8014eb4:	4a04      	ldr	r2, [pc, #16]	; (8014ec8 <_ZN8touchgfx3LCDD1Ev+0x1c>)
 8014eb6:	687b      	ldr	r3, [r7, #4]
 8014eb8:	601a      	str	r2, [r3, #0]
    }
 8014eba:	687b      	ldr	r3, [r7, #4]
 8014ebc:	4618      	mov	r0, r3
 8014ebe:	370c      	adds	r7, #12
 8014ec0:	46bd      	mov	sp, r7
 8014ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ec6:	4770      	bx	lr
 8014ec8:	0801f9e8 	.word	0x0801f9e8

08014ecc <_ZN8touchgfx3LCDD0Ev>:
    virtual ~LCD()
 8014ecc:	b580      	push	{r7, lr}
 8014ece:	b082      	sub	sp, #8
 8014ed0:	af00      	add	r7, sp, #0
 8014ed2:	6078      	str	r0, [r7, #4]
    }
 8014ed4:	6878      	ldr	r0, [r7, #4]
 8014ed6:	f7ff ffe9 	bl	8014eac <_ZN8touchgfx3LCDD1Ev>
 8014eda:	2108      	movs	r1, #8
 8014edc:	6878      	ldr	r0, [r7, #4]
 8014ede:	f006 fb77 	bl	801b5d0 <_ZdlPvj>
 8014ee2:	687b      	ldr	r3, [r7, #4]
 8014ee4:	4618      	mov	r0, r3
 8014ee6:	3708      	adds	r7, #8
 8014ee8:	46bd      	mov	sp, r7
 8014eea:	bd80      	pop	{r7, pc}

08014eec <_ZN8touchgfx8Gestures9DragStateC1Ev>:
    static const uint8_t MIN_VELOCITY_AT_RELEASE_BEFORE_SWIPE = 3;

    /** Defines the state of a drag. */
    struct DragState
    {
        DragState()
 8014eec:	b480      	push	{r7}
 8014eee:	b083      	sub	sp, #12
 8014ef0:	af00      	add	r7, sp, #0
 8014ef2:	6078      	str	r0, [r7, #4]
              downX(0),
              downY(0),
              tickCount(0),
              velocityX(0),
              velocityY(0),
              inProgress(false)
 8014ef4:	687b      	ldr	r3, [r7, #4]
 8014ef6:	2200      	movs	r2, #0
 8014ef8:	801a      	strh	r2, [r3, #0]
 8014efa:	687b      	ldr	r3, [r7, #4]
 8014efc:	2200      	movs	r2, #0
 8014efe:	805a      	strh	r2, [r3, #2]
 8014f00:	687b      	ldr	r3, [r7, #4]
 8014f02:	2200      	movs	r2, #0
 8014f04:	809a      	strh	r2, [r3, #4]
 8014f06:	687b      	ldr	r3, [r7, #4]
 8014f08:	2200      	movs	r2, #0
 8014f0a:	80da      	strh	r2, [r3, #6]
 8014f0c:	687b      	ldr	r3, [r7, #4]
 8014f0e:	2200      	movs	r2, #0
 8014f10:	811a      	strh	r2, [r3, #8]
 8014f12:	687b      	ldr	r3, [r7, #4]
 8014f14:	2200      	movs	r2, #0
 8014f16:	815a      	strh	r2, [r3, #10]
 8014f18:	687b      	ldr	r3, [r7, #4]
 8014f1a:	2200      	movs	r2, #0
 8014f1c:	819a      	strh	r2, [r3, #12]
 8014f1e:	687b      	ldr	r3, [r7, #4]
 8014f20:	2200      	movs	r2, #0
 8014f22:	739a      	strb	r2, [r3, #14]
        {
        }
 8014f24:	687b      	ldr	r3, [r7, #4]
 8014f26:	4618      	mov	r0, r3
 8014f28:	370c      	adds	r7, #12
 8014f2a:	46bd      	mov	sp, r7
 8014f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f30:	4770      	bx	lr

08014f32 <_ZN8touchgfx8GesturesC1Ev>:
        bool inProgress;    ///< Whether a drag is in progress or not
    };

public:
    /** Default constructor. Does nothing. */
    Gestures()
 8014f32:	b580      	push	{r7, lr}
 8014f34:	b082      	sub	sp, #8
 8014f36:	af00      	add	r7, sp, #0
 8014f38:	6078      	str	r0, [r7, #4]
        : drag(), listener(0), dragThresholdValue(0)
 8014f3a:	687b      	ldr	r3, [r7, #4]
 8014f3c:	4618      	mov	r0, r3
 8014f3e:	f7ff ffd5 	bl	8014eec <_ZN8touchgfx8Gestures9DragStateC1Ev>
 8014f42:	687b      	ldr	r3, [r7, #4]
 8014f44:	2200      	movs	r2, #0
 8014f46:	611a      	str	r2, [r3, #16]
 8014f48:	687b      	ldr	r3, [r7, #4]
 8014f4a:	2200      	movs	r2, #0
 8014f4c:	829a      	strh	r2, [r3, #20]
    {
    }
 8014f4e:	687b      	ldr	r3, [r7, #4]
 8014f50:	4618      	mov	r0, r3
 8014f52:	3708      	adds	r7, #8
 8014f54:	46bd      	mov	sp, r7
 8014f56:	bd80      	pop	{r7, pc}

08014f58 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt>:
    HAL(DMA_Interface& dmaInterface, LCD& display, TouchController& touchCtrl, uint16_t width, uint16_t height)
 8014f58:	b580      	push	{r7, lr}
 8014f5a:	b084      	sub	sp, #16
 8014f5c:	af00      	add	r7, sp, #0
 8014f5e:	60f8      	str	r0, [r7, #12]
 8014f60:	60b9      	str	r1, [r7, #8]
 8014f62:	607a      	str	r2, [r7, #4]
 8014f64:	603b      	str	r3, [r7, #0]
          lastRenderMethod(HARDWARE)
 8014f66:	4a55      	ldr	r2, [pc, #340]	; (80150bc <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x164>)
 8014f68:	68fb      	ldr	r3, [r7, #12]
 8014f6a:	601a      	str	r2, [r3, #0]
 8014f6c:	68fb      	ldr	r3, [r7, #12]
 8014f6e:	68ba      	ldr	r2, [r7, #8]
 8014f70:	605a      	str	r2, [r3, #4]
 8014f72:	68fb      	ldr	r3, [r7, #12]
 8014f74:	687a      	ldr	r2, [r7, #4]
 8014f76:	609a      	str	r2, [r3, #8]
 8014f78:	68fb      	ldr	r3, [r7, #12]
 8014f7a:	683a      	ldr	r2, [r7, #0]
 8014f7c:	60da      	str	r2, [r3, #12]
 8014f7e:	68fb      	ldr	r3, [r7, #12]
 8014f80:	2200      	movs	r2, #0
 8014f82:	611a      	str	r2, [r3, #16]
 8014f84:	68fb      	ldr	r3, [r7, #12]
 8014f86:	2200      	movs	r2, #0
 8014f88:	615a      	str	r2, [r3, #20]
 8014f8a:	68fb      	ldr	r3, [r7, #12]
 8014f8c:	2200      	movs	r2, #0
 8014f8e:	619a      	str	r2, [r3, #24]
 8014f90:	68fb      	ldr	r3, [r7, #12]
 8014f92:	331c      	adds	r3, #28
 8014f94:	4618      	mov	r0, r3
 8014f96:	f7ff ffcc 	bl	8014f32 <_ZN8touchgfx8GesturesC1Ev>
 8014f9a:	68fb      	ldr	r3, [r7, #12]
 8014f9c:	2200      	movs	r2, #0
 8014f9e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 8014fa2:	68fb      	ldr	r3, [r7, #12]
 8014fa4:	2200      	movs	r2, #0
 8014fa6:	639a      	str	r2, [r3, #56]	; 0x38
 8014fa8:	68fb      	ldr	r3, [r7, #12]
 8014faa:	2200      	movs	r2, #0
 8014fac:	63da      	str	r2, [r3, #60]	; 0x3c
 8014fae:	68fb      	ldr	r3, [r7, #12]
 8014fb0:	2200      	movs	r2, #0
 8014fb2:	641a      	str	r2, [r3, #64]	; 0x40
 8014fb4:	68fb      	ldr	r3, [r7, #12]
 8014fb6:	2200      	movs	r2, #0
 8014fb8:	645a      	str	r2, [r3, #68]	; 0x44
 8014fba:	68fb      	ldr	r3, [r7, #12]
 8014fbc:	2200      	movs	r2, #0
 8014fbe:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
 8014fc2:	68fb      	ldr	r3, [r7, #12]
 8014fc4:	2201      	movs	r2, #1
 8014fc6:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
 8014fca:	68fb      	ldr	r3, [r7, #12]
 8014fcc:	2200      	movs	r2, #0
 8014fce:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
 8014fd2:	68fb      	ldr	r3, [r7, #12]
 8014fd4:	2200      	movs	r2, #0
 8014fd6:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
 8014fda:	68fb      	ldr	r3, [r7, #12]
 8014fdc:	2200      	movs	r2, #0
 8014fde:	64da      	str	r2, [r3, #76]	; 0x4c
 8014fe0:	68fb      	ldr	r3, [r7, #12]
 8014fe2:	3350      	adds	r3, #80	; 0x50
 8014fe4:	4618      	mov	r0, r3
 8014fe6:	f7fd fdea 	bl	8012bbe <_ZN8touchgfx4RectC1Ev>
 8014fea:	68fb      	ldr	r3, [r7, #12]
 8014fec:	2200      	movs	r2, #0
 8014fee:	659a      	str	r2, [r3, #88]	; 0x58
 8014ff0:	68fb      	ldr	r3, [r7, #12]
 8014ff2:	2200      	movs	r2, #0
 8014ff4:	65da      	str	r2, [r3, #92]	; 0x5c
 8014ff6:	68fb      	ldr	r3, [r7, #12]
 8014ff8:	2200      	movs	r2, #0
 8014ffa:	661a      	str	r2, [r3, #96]	; 0x60
 8014ffc:	68fb      	ldr	r3, [r7, #12]
 8014ffe:	2201      	movs	r2, #1
 8015000:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
 8015004:	68fb      	ldr	r3, [r7, #12]
 8015006:	2200      	movs	r2, #0
 8015008:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
 801500c:	68fb      	ldr	r3, [r7, #12]
 801500e:	2200      	movs	r2, #0
 8015010:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
 8015014:	68fb      	ldr	r3, [r7, #12]
 8015016:	2201      	movs	r2, #1
 8015018:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
 801501c:	68fb      	ldr	r3, [r7, #12]
 801501e:	2200      	movs	r2, #0
 8015020:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
 8015024:	68fb      	ldr	r3, [r7, #12]
 8015026:	2200      	movs	r2, #0
 8015028:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
 801502c:	68fb      	ldr	r3, [r7, #12]
 801502e:	2200      	movs	r2, #0
 8015030:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
 8015034:	68fb      	ldr	r3, [r7, #12]
 8015036:	2200      	movs	r2, #0
 8015038:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
 801503c:	68fb      	ldr	r3, [r7, #12]
 801503e:	2200      	movs	r2, #0
 8015040:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
 8015044:	68fb      	ldr	r3, [r7, #12]
 8015046:	2200      	movs	r2, #0
 8015048:	671a      	str	r2, [r3, #112]	; 0x70
 801504a:	68fb      	ldr	r3, [r7, #12]
 801504c:	2200      	movs	r2, #0
 801504e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
 8015052:	68fb      	ldr	r3, [r7, #12]
 8015054:	2200      	movs	r2, #0
 8015056:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
 801505a:	68fb      	ldr	r3, [r7, #12]
 801505c:	2200      	movs	r2, #0
 801505e:	f883 2076 	strb.w	r2, [r3, #118]	; 0x76
 8015062:	68fb      	ldr	r3, [r7, #12]
 8015064:	2201      	movs	r2, #1
 8015066:	f883 2077 	strb.w	r2, [r3, #119]	; 0x77
 801506a:	68fb      	ldr	r3, [r7, #12]
 801506c:	2201      	movs	r2, #1
 801506e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
        instance = this;
 8015072:	4a13      	ldr	r2, [pc, #76]	; (80150c0 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x168>)
 8015074:	68fb      	ldr	r3, [r7, #12]
 8015076:	6013      	str	r3, [r2, #0]
        FRAME_BUFFER_WIDTH = DISPLAY_WIDTH = width;
 8015078:	4a12      	ldr	r2, [pc, #72]	; (80150c4 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x16c>)
 801507a:	8b3b      	ldrh	r3, [r7, #24]
 801507c:	8013      	strh	r3, [r2, #0]
 801507e:	4b11      	ldr	r3, [pc, #68]	; (80150c4 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x16c>)
 8015080:	881a      	ldrh	r2, [r3, #0]
 8015082:	4b11      	ldr	r3, [pc, #68]	; (80150c8 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x170>)
 8015084:	801a      	strh	r2, [r3, #0]
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT = height;
 8015086:	4a11      	ldr	r2, [pc, #68]	; (80150cc <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x174>)
 8015088:	8bbb      	ldrh	r3, [r7, #28]
 801508a:	8013      	strh	r3, [r2, #0]
 801508c:	4b0f      	ldr	r3, [pc, #60]	; (80150cc <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x174>)
 801508e:	881a      	ldrh	r2, [r3, #0]
 8015090:	4b0f      	ldr	r3, [pc, #60]	; (80150d0 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x178>)
 8015092:	801a      	strh	r2, [r3, #0]
        DISPLAY_ROTATION = rotate0;
 8015094:	4b0f      	ldr	r3, [pc, #60]	; (80150d4 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x17c>)
 8015096:	2200      	movs	r2, #0
 8015098:	701a      	strb	r2, [r3, #0]
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
 801509a:	8b3a      	ldrh	r2, [r7, #24]
 801509c:	8bbb      	ldrh	r3, [r7, #28]
 801509e:	429a      	cmp	r2, r3
 80150a0:	bf34      	ite	cc
 80150a2:	2301      	movcc	r3, #1
 80150a4:	2300      	movcs	r3, #0
 80150a6:	b2db      	uxtb	r3, r3
 80150a8:	461a      	mov	r2, r3
 80150aa:	68fb      	ldr	r3, [r7, #12]
 80150ac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }
 80150b0:	68fb      	ldr	r3, [r7, #12]
 80150b2:	4618      	mov	r0, r3
 80150b4:	3710      	adds	r7, #16
 80150b6:	46bd      	mov	sp, r7
 80150b8:	bd80      	pop	{r7, pc}
 80150ba:	bf00      	nop
 80150bc:	0801f364 	.word	0x0801f364
 80150c0:	20006df8 	.word	0x20006df8
 80150c4:	20006dea 	.word	0x20006dea
 80150c8:	20006df0 	.word	0x20006df0
 80150cc:	20006dec 	.word	0x20006dec
 80150d0:	20006df2 	.word	0x20006df2
 80150d4:	20006dee 	.word	0x20006dee

080150d8 <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>:
    TouchGFXGeneratedHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height) :
 80150d8:	b580      	push	{r7, lr}
 80150da:	b086      	sub	sp, #24
 80150dc:	af02      	add	r7, sp, #8
 80150de:	60f8      	str	r0, [r7, #12]
 80150e0:	60b9      	str	r1, [r7, #8]
 80150e2:	607a      	str	r2, [r7, #4]
 80150e4:	603b      	str	r3, [r7, #0]
        touchgfx::HAL(dma, display, tc, width, height)
 80150e6:	68f8      	ldr	r0, [r7, #12]
 80150e8:	8bbb      	ldrh	r3, [r7, #28]
 80150ea:	9301      	str	r3, [sp, #4]
 80150ec:	8b3b      	ldrh	r3, [r7, #24]
 80150ee:	9300      	str	r3, [sp, #0]
 80150f0:	683b      	ldr	r3, [r7, #0]
 80150f2:	687a      	ldr	r2, [r7, #4]
 80150f4:	68b9      	ldr	r1, [r7, #8]
 80150f6:	f7ff ff2f 	bl	8014f58 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt>
 80150fa:	4a04      	ldr	r2, [pc, #16]	; (801510c <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x34>)
 80150fc:	68fb      	ldr	r3, [r7, #12]
 80150fe:	601a      	str	r2, [r3, #0]
    }
 8015100:	68fb      	ldr	r3, [r7, #12]
 8015102:	4618      	mov	r0, r3
 8015104:	3710      	adds	r7, #16
 8015106:	46bd      	mov	sp, r7
 8015108:	bd80      	pop	{r7, pc}
 801510a:	bf00      	nop
 801510c:	0801f008 	.word	0x0801f008

08015110 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>:
    TouchGFXHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height) : TouchGFXGeneratedHAL(dma, display, tc, width, height)
 8015110:	b580      	push	{r7, lr}
 8015112:	b086      	sub	sp, #24
 8015114:	af02      	add	r7, sp, #8
 8015116:	60f8      	str	r0, [r7, #12]
 8015118:	60b9      	str	r1, [r7, #8]
 801511a:	607a      	str	r2, [r7, #4]
 801511c:	603b      	str	r3, [r7, #0]
 801511e:	68f8      	ldr	r0, [r7, #12]
 8015120:	8bbb      	ldrh	r3, [r7, #28]
 8015122:	9301      	str	r3, [sp, #4]
 8015124:	8b3b      	ldrh	r3, [r7, #24]
 8015126:	9300      	str	r3, [sp, #0]
 8015128:	683b      	ldr	r3, [r7, #0]
 801512a:	687a      	ldr	r2, [r7, #4]
 801512c:	68b9      	ldr	r1, [r7, #8]
 801512e:	f7ff ffd3 	bl	80150d8 <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>
 8015132:	4a04      	ldr	r2, [pc, #16]	; (8015144 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x34>)
 8015134:	68fb      	ldr	r3, [r7, #12]
 8015136:	601a      	str	r2, [r3, #0]
    }
 8015138:	68fb      	ldr	r3, [r7, #12]
 801513a:	4618      	mov	r0, r3
 801513c:	3710      	adds	r7, #16
 801513e:	46bd      	mov	sp, r7
 8015140:	bd80      	pop	{r7, pc}
 8015142:	bf00      	nop
 8015144:	0801eebc 	.word	0x0801eebc

08015148 <_ZN8touchgfx15TouchControllerC1Ev>:
class TouchController
 8015148:	b480      	push	{r7}
 801514a:	b083      	sub	sp, #12
 801514c:	af00      	add	r7, sp, #0
 801514e:	6078      	str	r0, [r7, #4]
 8015150:	4a04      	ldr	r2, [pc, #16]	; (8015164 <_ZN8touchgfx15TouchControllerC1Ev+0x1c>)
 8015152:	687b      	ldr	r3, [r7, #4]
 8015154:	601a      	str	r2, [r3, #0]
 8015156:	687b      	ldr	r3, [r7, #4]
 8015158:	4618      	mov	r0, r3
 801515a:	370c      	adds	r7, #12
 801515c:	46bd      	mov	sp, r7
 801515e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015162:	4770      	bx	lr
 8015164:	0801eea4 	.word	0x0801eea4

08015168 <_ZN20STM32TouchControllerC1Ev>:
{
public:

    STM32TouchController() {}
 8015168:	b580      	push	{r7, lr}
 801516a:	b082      	sub	sp, #8
 801516c:	af00      	add	r7, sp, #0
 801516e:	6078      	str	r0, [r7, #4]
 8015170:	687b      	ldr	r3, [r7, #4]
 8015172:	4618      	mov	r0, r3
 8015174:	f7ff ffe8 	bl	8015148 <_ZN8touchgfx15TouchControllerC1Ev>
 8015178:	4a03      	ldr	r2, [pc, #12]	; (8015188 <_ZN20STM32TouchControllerC1Ev+0x20>)
 801517a:	687b      	ldr	r3, [r7, #4]
 801517c:	601a      	str	r2, [r3, #0]
 801517e:	687b      	ldr	r3, [r7, #4]
 8015180:	4618      	mov	r0, r3
 8015182:	3708      	adds	r7, #8
 8015184:	46bd      	mov	sp, r7
 8015186:	bd80      	pop	{r7, pc}
 8015188:	0801ee8c 	.word	0x0801ee8c

0801518c <_ZN8touchgfx8LCD16bppD1Ev>:
 *
 * @see LCD
 *
 * @note All coordinates are expected to be in absolute coordinates!
 */
class LCD16bpp : public LCD
 801518c:	b580      	push	{r7, lr}
 801518e:	b082      	sub	sp, #8
 8015190:	af00      	add	r7, sp, #0
 8015192:	6078      	str	r0, [r7, #4]
 8015194:	4a05      	ldr	r2, [pc, #20]	; (80151ac <_ZN8touchgfx8LCD16bppD1Ev+0x20>)
 8015196:	687b      	ldr	r3, [r7, #4]
 8015198:	601a      	str	r2, [r3, #0]
 801519a:	687b      	ldr	r3, [r7, #4]
 801519c:	4618      	mov	r0, r3
 801519e:	f7ff fe85 	bl	8014eac <_ZN8touchgfx3LCDD1Ev>
 80151a2:	687b      	ldr	r3, [r7, #4]
 80151a4:	4618      	mov	r0, r3
 80151a6:	3708      	adds	r7, #8
 80151a8:	46bd      	mov	sp, r7
 80151aa:	bd80      	pop	{r7, pc}
 80151ac:	0802060c 	.word	0x0802060c

080151b0 <_ZN8touchgfx8LCD16bppD0Ev>:
 80151b0:	b580      	push	{r7, lr}
 80151b2:	b082      	sub	sp, #8
 80151b4:	af00      	add	r7, sp, #0
 80151b6:	6078      	str	r0, [r7, #4]
 80151b8:	6878      	ldr	r0, [r7, #4]
 80151ba:	f7ff ffe7 	bl	801518c <_ZN8touchgfx8LCD16bppD1Ev>
 80151be:	2178      	movs	r1, #120	; 0x78
 80151c0:	6878      	ldr	r0, [r7, #4]
 80151c2:	f006 fa05 	bl	801b5d0 <_ZdlPvj>
 80151c6:	687b      	ldr	r3, [r7, #4]
 80151c8:	4618      	mov	r0, r3
 80151ca:	3708      	adds	r7, #8
 80151cc:	46bd      	mov	sp, r7
 80151ce:	bd80      	pop	{r7, pc}

080151d0 <_Z41__static_initialization_and_destruction_0ii>:
     * this function from your GUI task.
     *
     * Note This function never returns
     */
    hal.taskEntry();
}
 80151d0:	b590      	push	{r4, r7, lr}
 80151d2:	b085      	sub	sp, #20
 80151d4:	af02      	add	r7, sp, #8
 80151d6:	6078      	str	r0, [r7, #4]
 80151d8:	6039      	str	r1, [r7, #0]
 80151da:	687b      	ldr	r3, [r7, #4]
 80151dc:	2b01      	cmp	r3, #1
 80151de:	f040 81e8 	bne.w	80155b2 <_Z41__static_initialization_and_destruction_0ii+0x3e2>
 80151e2:	683b      	ldr	r3, [r7, #0]
 80151e4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80151e8:	4293      	cmp	r3, r2
 80151ea:	f040 81e2 	bne.w	80155b2 <_Z41__static_initialization_and_destruction_0ii+0x3e2>
};
 80151ee:	4cda      	ldr	r4, [pc, #872]	; (8015558 <_Z41__static_initialization_and_destruction_0ii+0x388>)
 80151f0:	2301      	movs	r3, #1
 80151f2:	7023      	strb	r3, [r4, #0]
 80151f4:	1ca0      	adds	r0, r4, #2
 80151f6:	2328      	movs	r3, #40	; 0x28
 80151f8:	9300      	str	r3, [sp, #0]
 80151fa:	231a      	movs	r3, #26
 80151fc:	223d      	movs	r2, #61	; 0x3d
 80151fe:	2107      	movs	r1, #7
 8015200:	f7fd fcf4 	bl	8012bec <_ZN8touchgfx4RectC1Essss>
 8015204:	2328      	movs	r3, #40	; 0x28
 8015206:	8163      	strh	r3, [r4, #10]
 8015208:	340c      	adds	r4, #12
 801520a:	2302      	movs	r3, #2
 801520c:	7023      	strb	r3, [r4, #0]
 801520e:	1ca0      	adds	r0, r4, #2
 8015210:	2328      	movs	r3, #40	; 0x28
 8015212:	9300      	str	r3, [sp, #0]
 8015214:	231a      	movs	r3, #26
 8015216:	223d      	movs	r2, #61	; 0x3d
 8015218:	2123      	movs	r1, #35	; 0x23
 801521a:	f7fd fce7 	bl	8012bec <_ZN8touchgfx4RectC1Essss>
 801521e:	2328      	movs	r3, #40	; 0x28
 8015220:	8163      	strh	r3, [r4, #10]
 8015222:	340c      	adds	r4, #12
 8015224:	2303      	movs	r3, #3
 8015226:	7023      	strb	r3, [r4, #0]
 8015228:	1ca0      	adds	r0, r4, #2
 801522a:	2328      	movs	r3, #40	; 0x28
 801522c:	9300      	str	r3, [sp, #0]
 801522e:	231a      	movs	r3, #26
 8015230:	223d      	movs	r2, #61	; 0x3d
 8015232:	213f      	movs	r1, #63	; 0x3f
 8015234:	f7fd fcda 	bl	8012bec <_ZN8touchgfx4RectC1Essss>
 8015238:	2328      	movs	r3, #40	; 0x28
 801523a:	8163      	strh	r3, [r4, #10]
 801523c:	340c      	adds	r4, #12
 801523e:	2304      	movs	r3, #4
 8015240:	7023      	strb	r3, [r4, #0]
 8015242:	1ca0      	adds	r0, r4, #2
 8015244:	2328      	movs	r3, #40	; 0x28
 8015246:	9300      	str	r3, [sp, #0]
 8015248:	231a      	movs	r3, #26
 801524a:	223d      	movs	r2, #61	; 0x3d
 801524c:	215b      	movs	r1, #91	; 0x5b
 801524e:	f7fd fccd 	bl	8012bec <_ZN8touchgfx4RectC1Essss>
 8015252:	2328      	movs	r3, #40	; 0x28
 8015254:	8163      	strh	r3, [r4, #10]
 8015256:	340c      	adds	r4, #12
 8015258:	2305      	movs	r3, #5
 801525a:	7023      	strb	r3, [r4, #0]
 801525c:	1ca0      	adds	r0, r4, #2
 801525e:	2328      	movs	r3, #40	; 0x28
 8015260:	9300      	str	r3, [sp, #0]
 8015262:	231a      	movs	r3, #26
 8015264:	223d      	movs	r2, #61	; 0x3d
 8015266:	2177      	movs	r1, #119	; 0x77
 8015268:	f7fd fcc0 	bl	8012bec <_ZN8touchgfx4RectC1Essss>
 801526c:	2328      	movs	r3, #40	; 0x28
 801526e:	8163      	strh	r3, [r4, #10]
 8015270:	340c      	adds	r4, #12
 8015272:	2306      	movs	r3, #6
 8015274:	7023      	strb	r3, [r4, #0]
 8015276:	1ca0      	adds	r0, r4, #2
 8015278:	2328      	movs	r3, #40	; 0x28
 801527a:	9300      	str	r3, [sp, #0]
 801527c:	231a      	movs	r3, #26
 801527e:	223d      	movs	r2, #61	; 0x3d
 8015280:	2193      	movs	r1, #147	; 0x93
 8015282:	f7fd fcb3 	bl	8012bec <_ZN8touchgfx4RectC1Essss>
 8015286:	2328      	movs	r3, #40	; 0x28
 8015288:	8163      	strh	r3, [r4, #10]
 801528a:	340c      	adds	r4, #12
 801528c:	2307      	movs	r3, #7
 801528e:	7023      	strb	r3, [r4, #0]
 8015290:	1ca0      	adds	r0, r4, #2
 8015292:	2328      	movs	r3, #40	; 0x28
 8015294:	9300      	str	r3, [sp, #0]
 8015296:	231a      	movs	r3, #26
 8015298:	223d      	movs	r2, #61	; 0x3d
 801529a:	21af      	movs	r1, #175	; 0xaf
 801529c:	f7fd fca6 	bl	8012bec <_ZN8touchgfx4RectC1Essss>
 80152a0:	2328      	movs	r3, #40	; 0x28
 80152a2:	8163      	strh	r3, [r4, #10]
 80152a4:	340c      	adds	r4, #12
 80152a6:	2308      	movs	r3, #8
 80152a8:	7023      	strb	r3, [r4, #0]
 80152aa:	1ca0      	adds	r0, r4, #2
 80152ac:	2328      	movs	r3, #40	; 0x28
 80152ae:	9300      	str	r3, [sp, #0]
 80152b0:	231a      	movs	r3, #26
 80152b2:	223d      	movs	r2, #61	; 0x3d
 80152b4:	21cb      	movs	r1, #203	; 0xcb
 80152b6:	f7fd fc99 	bl	8012bec <_ZN8touchgfx4RectC1Essss>
 80152ba:	2328      	movs	r3, #40	; 0x28
 80152bc:	8163      	strh	r3, [r4, #10]
 80152be:	340c      	adds	r4, #12
 80152c0:	2309      	movs	r3, #9
 80152c2:	7023      	strb	r3, [r4, #0]
 80152c4:	1ca0      	adds	r0, r4, #2
 80152c6:	2328      	movs	r3, #40	; 0x28
 80152c8:	9300      	str	r3, [sp, #0]
 80152ca:	231a      	movs	r3, #26
 80152cc:	223d      	movs	r2, #61	; 0x3d
 80152ce:	21e7      	movs	r1, #231	; 0xe7
 80152d0:	f7fd fc8c 	bl	8012bec <_ZN8touchgfx4RectC1Essss>
 80152d4:	2328      	movs	r3, #40	; 0x28
 80152d6:	8163      	strh	r3, [r4, #10]
 80152d8:	340c      	adds	r4, #12
 80152da:	230a      	movs	r3, #10
 80152dc:	7023      	strb	r3, [r4, #0]
 80152de:	1ca0      	adds	r0, r4, #2
 80152e0:	2328      	movs	r3, #40	; 0x28
 80152e2:	9300      	str	r3, [sp, #0]
 80152e4:	231a      	movs	r3, #26
 80152e6:	223d      	movs	r2, #61	; 0x3d
 80152e8:	f240 1103 	movw	r1, #259	; 0x103
 80152ec:	f7fd fc7e 	bl	8012bec <_ZN8touchgfx4RectC1Essss>
 80152f0:	2328      	movs	r3, #40	; 0x28
 80152f2:	8163      	strh	r3, [r4, #10]
 80152f4:	340c      	adds	r4, #12
 80152f6:	230b      	movs	r3, #11
 80152f8:	7023      	strb	r3, [r4, #0]
 80152fa:	1ca0      	adds	r0, r4, #2
 80152fc:	2328      	movs	r3, #40	; 0x28
 80152fe:	9300      	str	r3, [sp, #0]
 8015300:	231a      	movs	r3, #26
 8015302:	223d      	movs	r2, #61	; 0x3d
 8015304:	f240 111f 	movw	r1, #287	; 0x11f
 8015308:	f7fd fc70 	bl	8012bec <_ZN8touchgfx4RectC1Essss>
 801530c:	2328      	movs	r3, #40	; 0x28
 801530e:	8163      	strh	r3, [r4, #10]
 8015310:	340c      	adds	r4, #12
 8015312:	230c      	movs	r3, #12
 8015314:	7023      	strb	r3, [r4, #0]
 8015316:	1ca0      	adds	r0, r4, #2
 8015318:	2328      	movs	r3, #40	; 0x28
 801531a:	9300      	str	r3, [sp, #0]
 801531c:	231a      	movs	r3, #26
 801531e:	2269      	movs	r2, #105	; 0x69
 8015320:	2107      	movs	r1, #7
 8015322:	f7fd fc63 	bl	8012bec <_ZN8touchgfx4RectC1Essss>
 8015326:	2328      	movs	r3, #40	; 0x28
 8015328:	8163      	strh	r3, [r4, #10]
 801532a:	340c      	adds	r4, #12
 801532c:	230d      	movs	r3, #13
 801532e:	7023      	strb	r3, [r4, #0]
 8015330:	1ca0      	adds	r0, r4, #2
 8015332:	2328      	movs	r3, #40	; 0x28
 8015334:	9300      	str	r3, [sp, #0]
 8015336:	231a      	movs	r3, #26
 8015338:	2269      	movs	r2, #105	; 0x69
 801533a:	2123      	movs	r1, #35	; 0x23
 801533c:	f7fd fc56 	bl	8012bec <_ZN8touchgfx4RectC1Essss>
 8015340:	2328      	movs	r3, #40	; 0x28
 8015342:	8163      	strh	r3, [r4, #10]
 8015344:	340c      	adds	r4, #12
 8015346:	230e      	movs	r3, #14
 8015348:	7023      	strb	r3, [r4, #0]
 801534a:	1ca0      	adds	r0, r4, #2
 801534c:	2328      	movs	r3, #40	; 0x28
 801534e:	9300      	str	r3, [sp, #0]
 8015350:	231a      	movs	r3, #26
 8015352:	2269      	movs	r2, #105	; 0x69
 8015354:	213f      	movs	r1, #63	; 0x3f
 8015356:	f7fd fc49 	bl	8012bec <_ZN8touchgfx4RectC1Essss>
 801535a:	2328      	movs	r3, #40	; 0x28
 801535c:	8163      	strh	r3, [r4, #10]
 801535e:	340c      	adds	r4, #12
 8015360:	230f      	movs	r3, #15
 8015362:	7023      	strb	r3, [r4, #0]
 8015364:	1ca0      	adds	r0, r4, #2
 8015366:	2328      	movs	r3, #40	; 0x28
 8015368:	9300      	str	r3, [sp, #0]
 801536a:	231a      	movs	r3, #26
 801536c:	2269      	movs	r2, #105	; 0x69
 801536e:	215b      	movs	r1, #91	; 0x5b
 8015370:	f7fd fc3c 	bl	8012bec <_ZN8touchgfx4RectC1Essss>
 8015374:	2328      	movs	r3, #40	; 0x28
 8015376:	8163      	strh	r3, [r4, #10]
 8015378:	340c      	adds	r4, #12
 801537a:	2310      	movs	r3, #16
 801537c:	7023      	strb	r3, [r4, #0]
 801537e:	1ca0      	adds	r0, r4, #2
 8015380:	2328      	movs	r3, #40	; 0x28
 8015382:	9300      	str	r3, [sp, #0]
 8015384:	231a      	movs	r3, #26
 8015386:	2269      	movs	r2, #105	; 0x69
 8015388:	2177      	movs	r1, #119	; 0x77
 801538a:	f7fd fc2f 	bl	8012bec <_ZN8touchgfx4RectC1Essss>
 801538e:	2328      	movs	r3, #40	; 0x28
 8015390:	8163      	strh	r3, [r4, #10]
 8015392:	340c      	adds	r4, #12
 8015394:	2311      	movs	r3, #17
 8015396:	7023      	strb	r3, [r4, #0]
 8015398:	1ca0      	adds	r0, r4, #2
 801539a:	2328      	movs	r3, #40	; 0x28
 801539c:	9300      	str	r3, [sp, #0]
 801539e:	231a      	movs	r3, #26
 80153a0:	2269      	movs	r2, #105	; 0x69
 80153a2:	2193      	movs	r1, #147	; 0x93
 80153a4:	f7fd fc22 	bl	8012bec <_ZN8touchgfx4RectC1Essss>
 80153a8:	2328      	movs	r3, #40	; 0x28
 80153aa:	8163      	strh	r3, [r4, #10]
 80153ac:	340c      	adds	r4, #12
 80153ae:	2312      	movs	r3, #18
 80153b0:	7023      	strb	r3, [r4, #0]
 80153b2:	1ca0      	adds	r0, r4, #2
 80153b4:	2328      	movs	r3, #40	; 0x28
 80153b6:	9300      	str	r3, [sp, #0]
 80153b8:	231a      	movs	r3, #26
 80153ba:	2269      	movs	r2, #105	; 0x69
 80153bc:	21af      	movs	r1, #175	; 0xaf
 80153be:	f7fd fc15 	bl	8012bec <_ZN8touchgfx4RectC1Essss>
 80153c2:	2328      	movs	r3, #40	; 0x28
 80153c4:	8163      	strh	r3, [r4, #10]
 80153c6:	340c      	adds	r4, #12
 80153c8:	2313      	movs	r3, #19
 80153ca:	7023      	strb	r3, [r4, #0]
 80153cc:	1ca0      	adds	r0, r4, #2
 80153ce:	2328      	movs	r3, #40	; 0x28
 80153d0:	9300      	str	r3, [sp, #0]
 80153d2:	231a      	movs	r3, #26
 80153d4:	2269      	movs	r2, #105	; 0x69
 80153d6:	21cb      	movs	r1, #203	; 0xcb
 80153d8:	f7fd fc08 	bl	8012bec <_ZN8touchgfx4RectC1Essss>
 80153dc:	2328      	movs	r3, #40	; 0x28
 80153de:	8163      	strh	r3, [r4, #10]
 80153e0:	340c      	adds	r4, #12
 80153e2:	2314      	movs	r3, #20
 80153e4:	7023      	strb	r3, [r4, #0]
 80153e6:	1ca0      	adds	r0, r4, #2
 80153e8:	2328      	movs	r3, #40	; 0x28
 80153ea:	9300      	str	r3, [sp, #0]
 80153ec:	231a      	movs	r3, #26
 80153ee:	2269      	movs	r2, #105	; 0x69
 80153f0:	21e7      	movs	r1, #231	; 0xe7
 80153f2:	f7fd fbfb 	bl	8012bec <_ZN8touchgfx4RectC1Essss>
 80153f6:	2328      	movs	r3, #40	; 0x28
 80153f8:	8163      	strh	r3, [r4, #10]
 80153fa:	340c      	adds	r4, #12
 80153fc:	2315      	movs	r3, #21
 80153fe:	7023      	strb	r3, [r4, #0]
 8015400:	1ca0      	adds	r0, r4, #2
 8015402:	2328      	movs	r3, #40	; 0x28
 8015404:	9300      	str	r3, [sp, #0]
 8015406:	231a      	movs	r3, #26
 8015408:	2269      	movs	r2, #105	; 0x69
 801540a:	f240 1103 	movw	r1, #259	; 0x103
 801540e:	f7fd fbed 	bl	8012bec <_ZN8touchgfx4RectC1Essss>
 8015412:	2328      	movs	r3, #40	; 0x28
 8015414:	8163      	strh	r3, [r4, #10]
 8015416:	340c      	adds	r4, #12
 8015418:	2316      	movs	r3, #22
 801541a:	7023      	strb	r3, [r4, #0]
 801541c:	1ca0      	adds	r0, r4, #2
 801541e:	2328      	movs	r3, #40	; 0x28
 8015420:	9300      	str	r3, [sp, #0]
 8015422:	231a      	movs	r3, #26
 8015424:	2269      	movs	r2, #105	; 0x69
 8015426:	f240 111f 	movw	r1, #287	; 0x11f
 801542a:	f7fd fbdf 	bl	8012bec <_ZN8touchgfx4RectC1Essss>
 801542e:	2328      	movs	r3, #40	; 0x28
 8015430:	8163      	strh	r3, [r4, #10]
 8015432:	340c      	adds	r4, #12
 8015434:	2317      	movs	r3, #23
 8015436:	7023      	strb	r3, [r4, #0]
 8015438:	1ca0      	adds	r0, r4, #2
 801543a:	2328      	movs	r3, #40	; 0x28
 801543c:	9300      	str	r3, [sp, #0]
 801543e:	231a      	movs	r3, #26
 8015440:	2295      	movs	r2, #149	; 0x95
 8015442:	213f      	movs	r1, #63	; 0x3f
 8015444:	f7fd fbd2 	bl	8012bec <_ZN8touchgfx4RectC1Essss>
 8015448:	2328      	movs	r3, #40	; 0x28
 801544a:	8163      	strh	r3, [r4, #10]
 801544c:	340c      	adds	r4, #12
 801544e:	2318      	movs	r3, #24
 8015450:	7023      	strb	r3, [r4, #0]
 8015452:	1ca0      	adds	r0, r4, #2
 8015454:	2328      	movs	r3, #40	; 0x28
 8015456:	9300      	str	r3, [sp, #0]
 8015458:	231a      	movs	r3, #26
 801545a:	2295      	movs	r2, #149	; 0x95
 801545c:	215b      	movs	r1, #91	; 0x5b
 801545e:	f7fd fbc5 	bl	8012bec <_ZN8touchgfx4RectC1Essss>
 8015462:	2328      	movs	r3, #40	; 0x28
 8015464:	8163      	strh	r3, [r4, #10]
 8015466:	340c      	adds	r4, #12
 8015468:	2319      	movs	r3, #25
 801546a:	7023      	strb	r3, [r4, #0]
 801546c:	1ca0      	adds	r0, r4, #2
 801546e:	2328      	movs	r3, #40	; 0x28
 8015470:	9300      	str	r3, [sp, #0]
 8015472:	231a      	movs	r3, #26
 8015474:	2295      	movs	r2, #149	; 0x95
 8015476:	2177      	movs	r1, #119	; 0x77
 8015478:	f7fd fbb8 	bl	8012bec <_ZN8touchgfx4RectC1Essss>
 801547c:	2328      	movs	r3, #40	; 0x28
 801547e:	8163      	strh	r3, [r4, #10]
 8015480:	340c      	adds	r4, #12
 8015482:	231a      	movs	r3, #26
 8015484:	7023      	strb	r3, [r4, #0]
 8015486:	1ca0      	adds	r0, r4, #2
 8015488:	2328      	movs	r3, #40	; 0x28
 801548a:	9300      	str	r3, [sp, #0]
 801548c:	231a      	movs	r3, #26
 801548e:	2295      	movs	r2, #149	; 0x95
 8015490:	2193      	movs	r1, #147	; 0x93
 8015492:	f7fd fbab 	bl	8012bec <_ZN8touchgfx4RectC1Essss>
 8015496:	2328      	movs	r3, #40	; 0x28
 8015498:	8163      	strh	r3, [r4, #10]
 801549a:	340c      	adds	r4, #12
 801549c:	231b      	movs	r3, #27
 801549e:	7023      	strb	r3, [r4, #0]
 80154a0:	1ca0      	adds	r0, r4, #2
 80154a2:	2328      	movs	r3, #40	; 0x28
 80154a4:	9300      	str	r3, [sp, #0]
 80154a6:	231a      	movs	r3, #26
 80154a8:	2295      	movs	r2, #149	; 0x95
 80154aa:	21af      	movs	r1, #175	; 0xaf
 80154ac:	f7fd fb9e 	bl	8012bec <_ZN8touchgfx4RectC1Essss>
 80154b0:	2328      	movs	r3, #40	; 0x28
 80154b2:	8163      	strh	r3, [r4, #10]
 80154b4:	340c      	adds	r4, #12
 80154b6:	231c      	movs	r3, #28
 80154b8:	7023      	strb	r3, [r4, #0]
 80154ba:	1ca0      	adds	r0, r4, #2
 80154bc:	2328      	movs	r3, #40	; 0x28
 80154be:	9300      	str	r3, [sp, #0]
 80154c0:	231a      	movs	r3, #26
 80154c2:	2295      	movs	r2, #149	; 0x95
 80154c4:	21cb      	movs	r1, #203	; 0xcb
 80154c6:	f7fd fb91 	bl	8012bec <_ZN8touchgfx4RectC1Essss>
 80154ca:	2328      	movs	r3, #40	; 0x28
 80154cc:	8163      	strh	r3, [r4, #10]
 80154ce:	340c      	adds	r4, #12
 80154d0:	231d      	movs	r3, #29
 80154d2:	7023      	strb	r3, [r4, #0]
 80154d4:	1ca0      	adds	r0, r4, #2
 80154d6:	2328      	movs	r3, #40	; 0x28
 80154d8:	9300      	str	r3, [sp, #0]
 80154da:	231a      	movs	r3, #26
 80154dc:	2295      	movs	r2, #149	; 0x95
 80154de:	21e7      	movs	r1, #231	; 0xe7
 80154e0:	f7fd fb84 	bl	8012bec <_ZN8touchgfx4RectC1Essss>
 80154e4:	2328      	movs	r3, #40	; 0x28
 80154e6:	8163      	strh	r3, [r4, #10]
 80154e8:	340c      	adds	r4, #12
 80154ea:	231e      	movs	r3, #30
 80154ec:	7023      	strb	r3, [r4, #0]
 80154ee:	1ca0      	adds	r0, r4, #2
 80154f0:	2328      	movs	r3, #40	; 0x28
 80154f2:	9300      	str	r3, [sp, #0]
 80154f4:	23fc      	movs	r3, #252	; 0xfc
 80154f6:	22c1      	movs	r2, #193	; 0xc1
 80154f8:	213e      	movs	r1, #62	; 0x3e
 80154fa:	f7fd fb77 	bl	8012bec <_ZN8touchgfx4RectC1Essss>
 80154fe:	232b      	movs	r3, #43	; 0x2b
 8015500:	8163      	strh	r3, [r4, #10]
};
 8015502:	4c16      	ldr	r4, [pc, #88]	; (801555c <_Z41__static_initialization_and_destruction_0ii+0x38c>)
 8015504:	4620      	mov	r0, r4
 8015506:	2328      	movs	r3, #40	; 0x28
 8015508:	9300      	str	r3, [sp, #0]
 801550a:	2338      	movs	r3, #56	; 0x38
 801550c:	2295      	movs	r2, #149	; 0x95
 801550e:	2105      	movs	r1, #5
 8015510:	f7fd fb6c 	bl	8012bec <_ZN8touchgfx4RectC1Essss>
 8015514:	2300      	movs	r3, #0
 8015516:	60a3      	str	r3, [r4, #8]
 8015518:	232a      	movs	r3, #42	; 0x2a
 801551a:	81a3      	strh	r3, [r4, #12]
 801551c:	3410      	adds	r4, #16
 801551e:	4620      	mov	r0, r4
 8015520:	2328      	movs	r3, #40	; 0x28
 8015522:	9300      	str	r3, [sp, #0]
 8015524:	2338      	movs	r3, #56	; 0x38
 8015526:	2295      	movs	r2, #149	; 0x95
 8015528:	f44f 7181 	mov.w	r1, #258	; 0x102
 801552c:	f7fd fb5e 	bl	8012bec <_ZN8touchgfx4RectC1Essss>
 8015530:	2300      	movs	r3, #0
 8015532:	60a3      	str	r3, [r4, #8]
 8015534:	2327      	movs	r3, #39	; 0x27
 8015536:	81a3      	strh	r3, [r4, #12]
 8015538:	3410      	adds	r4, #16
 801553a:	4620      	mov	r0, r4
 801553c:	2328      	movs	r3, #40	; 0x28
 801553e:	9300      	str	r3, [sp, #0]
 8015540:	2338      	movs	r3, #56	; 0x38
 8015542:	22c1      	movs	r2, #193	; 0xc1
 8015544:	2105      	movs	r1, #5
 8015546:	f7fd fb51 	bl	8012bec <_ZN8touchgfx4RectC1Essss>
 801554a:	2300      	movs	r3, #0
 801554c:	60a3      	str	r3, [r4, #8]
 801554e:	2329      	movs	r3, #41	; 0x29
 8015550:	81a3      	strh	r3, [r4, #12]
};
 8015552:	2328      	movs	r3, #40	; 0x28
 8015554:	9300      	str	r3, [sp, #0]
 8015556:	e003      	b.n	8015560 <_Z41__static_initialization_and_destruction_0ii+0x390>
 8015558:	20005c1c 	.word	0x20005c1c
 801555c:	20005d84 	.word	0x20005d84
 8015560:	f44f 739a 	mov.w	r3, #308	; 0x134
 8015564:	220a      	movs	r2, #10
 8015566:	210f      	movs	r1, #15
 8015568:	4821      	ldr	r0, [pc, #132]	; (80155f0 <_Z41__static_initialization_and_destruction_0ii+0x420>)
 801556a:	f7fd fb3f 	bl	8012bec <_ZN8touchgfx4RectC1Essss>
 801556e:	2130      	movs	r1, #48	; 0x30
 8015570:	4820      	ldr	r0, [pc, #128]	; (80155f4 <_Z41__static_initialization_and_destruction_0ii+0x424>)
 8015572:	f7fd fb79 	bl	8012c68 <_ZN8touchgfx9TypedTextC1Et>
 8015576:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801557a:	481f      	ldr	r0, [pc, #124]	; (80155f8 <_Z41__static_initialization_and_destruction_0ii+0x428>)
 801557c:	f7fd fb10 	bl	8012ba0 <_ZN8touchgfx9colortypeC1Em>
 8015580:	2100      	movs	r1, #0
 8015582:	481e      	ldr	r0, [pc, #120]	; (80155fc <_Z41__static_initialization_and_destruction_0ii+0x42c>)
 8015584:	f7fd fb0c 	bl	8012ba0 <_ZN8touchgfx9colortypeC1Em>
static STM32TouchController tc;
 8015588:	481d      	ldr	r0, [pc, #116]	; (8015600 <_Z41__static_initialization_and_destruction_0ii+0x430>)
 801558a:	f7ff fded 	bl	8015168 <_ZN20STM32TouchControllerC1Ev>
static STM32DMA dma;
 801558e:	481d      	ldr	r0, [pc, #116]	; (8015604 <_Z41__static_initialization_and_destruction_0ii+0x434>)
 8015590:	f7ff f968 	bl	8014864 <_ZN8STM32DMAC1Ev>
static LCD16bpp display;
 8015594:	481c      	ldr	r0, [pc, #112]	; (8015608 <_Z41__static_initialization_and_destruction_0ii+0x438>)
 8015596:	f004 fc8b 	bl	8019eb0 <_ZN8touchgfx8LCD16bppC1Ev>
static TouchGFXHAL hal(dma, display, tc, 480, 272);
 801559a:	f44f 7388 	mov.w	r3, #272	; 0x110
 801559e:	9301      	str	r3, [sp, #4]
 80155a0:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 80155a4:	9300      	str	r3, [sp, #0]
 80155a6:	4b16      	ldr	r3, [pc, #88]	; (8015600 <_Z41__static_initialization_and_destruction_0ii+0x430>)
 80155a8:	4a17      	ldr	r2, [pc, #92]	; (8015608 <_Z41__static_initialization_and_destruction_0ii+0x438>)
 80155aa:	4916      	ldr	r1, [pc, #88]	; (8015604 <_Z41__static_initialization_and_destruction_0ii+0x434>)
 80155ac:	4817      	ldr	r0, [pc, #92]	; (801560c <_Z41__static_initialization_and_destruction_0ii+0x43c>)
 80155ae:	f7ff fdaf 	bl	8015110 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>
 80155b2:	687b      	ldr	r3, [r7, #4]
 80155b4:	2b00      	cmp	r3, #0
 80155b6:	d116      	bne.n	80155e6 <_Z41__static_initialization_and_destruction_0ii+0x416>
 80155b8:	683b      	ldr	r3, [r7, #0]
 80155ba:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80155be:	4293      	cmp	r3, r2
 80155c0:	d111      	bne.n	80155e6 <_Z41__static_initialization_and_destruction_0ii+0x416>
 80155c2:	4812      	ldr	r0, [pc, #72]	; (801560c <_Z41__static_initialization_and_destruction_0ii+0x43c>)
 80155c4:	f7fe ff92 	bl	80144ec <_ZN11TouchGFXHALD1Ev>
static ApplicationFontProvider fontProvider;
 80155c8:	4811      	ldr	r0, [pc, #68]	; (8015610 <_Z41__static_initialization_and_destruction_0ii+0x440>)
 80155ca:	f7fc fdb3 	bl	8012134 <_ZN23ApplicationFontProviderD1Ev>
static LCD16bpp display;
 80155ce:	480e      	ldr	r0, [pc, #56]	; (8015608 <_Z41__static_initialization_and_destruction_0ii+0x438>)
 80155d0:	f7ff fddc 	bl	801518c <_ZN8touchgfx8LCD16bppD1Ev>
static STM32DMA dma;
 80155d4:	480b      	ldr	r0, [pc, #44]	; (8015604 <_Z41__static_initialization_and_destruction_0ii+0x434>)
 80155d6:	f7ff f96f 	bl	80148b8 <_ZN8STM32DMAD1Ev>
static STM32TouchController tc;
 80155da:	4809      	ldr	r0, [pc, #36]	; (8015600 <_Z41__static_initialization_and_destruction_0ii+0x430>)
 80155dc:	f7fe fd40 	bl	8014060 <_ZN20STM32TouchControllerD1Ev>
static const Keyboard::Layout layout =
 80155e0:	480c      	ldr	r0, [pc, #48]	; (8015614 <_Z41__static_initialization_and_destruction_0ii+0x444>)
 80155e2:	f7fd fb7f 	bl	8012ce4 <_ZN8touchgfx8Keyboard6LayoutD1Ev>
}
 80155e6:	bf00      	nop
 80155e8:	370c      	adds	r7, #12
 80155ea:	46bd      	mov	sp, r7
 80155ec:	bd90      	pop	{r4, r7, pc}
 80155ee:	bf00      	nop
 80155f0:	200000ea 	.word	0x200000ea
 80155f4:	200000f4 	.word	0x200000f4
 80155f8:	200000fc 	.word	0x200000fc
 80155fc:	20000104 	.word	0x20000104
 8015600:	20005db4 	.word	0x20005db4
 8015604:	20005db8 	.word	0x20005db8
 8015608:	20006b58 	.word	0x20006b58
 801560c:	20006bd0 	.word	0x20006bd0
 8015610:	20000108 	.word	0x20000108
 8015614:	200000d8 	.word	0x200000d8

08015618 <_GLOBAL__sub_I_touchgfx_init>:
 8015618:	b580      	push	{r7, lr}
 801561a:	af00      	add	r7, sp, #0
 801561c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8015620:	2001      	movs	r0, #1
 8015622:	f7ff fdd5 	bl	80151d0 <_Z41__static_initialization_and_destruction_0ii>
 8015626:	bd80      	pop	{r7, pc}

08015628 <_GLOBAL__sub_D_touchgfx_init>:
 8015628:	b580      	push	{r7, lr}
 801562a:	af00      	add	r7, sp, #0
 801562c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8015630:	2000      	movs	r0, #0
 8015632:	f7ff fdcd 	bl	80151d0 <_Z41__static_initialization_and_destruction_0ii>
 8015636:	bd80      	pop	{r7, pc}

08015638 <_ZN8touchgfx3HAL17frontPorchEnteredEv>:
    void frontPorchEntered()
 8015638:	b580      	push	{r7, lr}
 801563a:	b082      	sub	sp, #8
 801563c:	af00      	add	r7, sp, #0
 801563e:	6078      	str	r0, [r7, #4]
        allowDMATransfers();
 8015640:	687b      	ldr	r3, [r7, #4]
 8015642:	681b      	ldr	r3, [r3, #0]
 8015644:	3320      	adds	r3, #32
 8015646:	681b      	ldr	r3, [r3, #0]
 8015648:	6878      	ldr	r0, [r7, #4]
 801564a:	4798      	blx	r3
    }
 801564c:	bf00      	nop
 801564e:	3708      	adds	r7, #8
 8015650:	46bd      	mov	sp, r7
 8015652:	bd80      	pop	{r7, pc}

08015654 <_ZN8touchgfx3HAL5vSyncEv>:
    void vSync()
 8015654:	b480      	push	{r7}
 8015656:	b083      	sub	sp, #12
 8015658:	af00      	add	r7, sp, #0
 801565a:	6078      	str	r0, [r7, #4]
        vSyncCnt++;
 801565c:	687b      	ldr	r3, [r7, #4]
 801565e:	f893 3066 	ldrb.w	r3, [r3, #102]	; 0x66
 8015662:	3301      	adds	r3, #1
 8015664:	b2da      	uxtb	r2, r3
 8015666:	687b      	ldr	r3, [r7, #4]
 8015668:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
    }
 801566c:	bf00      	nop
 801566e:	370c      	adds	r7, #12
 8015670:	46bd      	mov	sp, r7
 8015672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015676:	4770      	bx	lr

08015678 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE>:
    bool setFrameRefreshStrategy(FrameRefreshStrategy s)
 8015678:	b580      	push	{r7, lr}
 801567a:	b082      	sub	sp, #8
 801567c:	af00      	add	r7, sp, #0
 801567e:	6078      	str	r0, [r7, #4]
 8015680:	460b      	mov	r3, r1
 8015682:	70fb      	strb	r3, [r7, #3]
        if (s == REFRESH_STRATEGY_DEFAULT || s == REFRESH_STRATEGY_PARTIAL_FRAMEBUFFER)
 8015684:	78fb      	ldrb	r3, [r7, #3]
 8015686:	2b00      	cmp	r3, #0
 8015688:	d002      	beq.n	8015690 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x18>
 801568a:	78fb      	ldrb	r3, [r7, #3]
 801568c:	2b02      	cmp	r3, #2
 801568e:	d105      	bne.n	801569c <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x24>
            refreshStrategy = s;
 8015690:	687b      	ldr	r3, [r7, #4]
 8015692:	78fa      	ldrb	r2, [r7, #3]
 8015694:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
            return true;
 8015698:	2301      	movs	r3, #1
 801569a:	e027      	b.n	80156ec <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x74>
        if (s == REFRESH_STRATEGY_OPTIM_SINGLE_BUFFER_TFT_CTRL)
 801569c:	78fb      	ldrb	r3, [r7, #3]
 801569e:	2b01      	cmp	r3, #1
 80156a0:	d123      	bne.n	80156ea <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x72>
            if (taskDelayFunc != 0 && getTFTCurrentLine() != 0xFFFF && !USE_DOUBLE_BUFFERING)
 80156a2:	687b      	ldr	r3, [r7, #4]
 80156a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80156a6:	2b00      	cmp	r3, #0
 80156a8:	d014      	beq.n	80156d4 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x5c>
 80156aa:	687b      	ldr	r3, [r7, #4]
 80156ac:	681b      	ldr	r3, [r3, #0]
 80156ae:	339c      	adds	r3, #156	; 0x9c
 80156b0:	681b      	ldr	r3, [r3, #0]
 80156b2:	6878      	ldr	r0, [r7, #4]
 80156b4:	4798      	blx	r3
 80156b6:	4603      	mov	r3, r0
 80156b8:	461a      	mov	r2, r3
 80156ba:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80156be:	429a      	cmp	r2, r3
 80156c0:	d008      	beq.n	80156d4 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x5c>
 80156c2:	4b0c      	ldr	r3, [pc, #48]	; (80156f4 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x7c>)
 80156c4:	781b      	ldrb	r3, [r3, #0]
 80156c6:	f083 0301 	eor.w	r3, r3, #1
 80156ca:	b2db      	uxtb	r3, r3
 80156cc:	2b00      	cmp	r3, #0
 80156ce:	d001      	beq.n	80156d4 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x5c>
 80156d0:	2301      	movs	r3, #1
 80156d2:	e000      	b.n	80156d6 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x5e>
 80156d4:	2300      	movs	r3, #0
 80156d6:	2b00      	cmp	r3, #0
 80156d8:	d005      	beq.n	80156e6 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x6e>
                refreshStrategy = s;
 80156da:	687b      	ldr	r3, [r7, #4]
 80156dc:	78fa      	ldrb	r2, [r7, #3]
 80156de:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
                return true;
 80156e2:	2301      	movs	r3, #1
 80156e4:	e002      	b.n	80156ec <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x74>
            return false;
 80156e6:	2300      	movs	r3, #0
 80156e8:	e000      	b.n	80156ec <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x74>
        return false;
 80156ea:	2300      	movs	r3, #0
    }
 80156ec:	4618      	mov	r0, r3
 80156ee:	3708      	adds	r7, #8
 80156f0:	46bd      	mov	sp, r7
 80156f2:	bd80      	pop	{r7, pc}
 80156f4:	20006df4 	.word	0x20006df4

080156f8 <_ZN8touchgfx3HAL25registerTaskDelayFunctionEPFvtE>:
    void registerTaskDelayFunction(void (*delayF)(uint16_t))
 80156f8:	b480      	push	{r7}
 80156fa:	b083      	sub	sp, #12
 80156fc:	af00      	add	r7, sp, #0
 80156fe:	6078      	str	r0, [r7, #4]
 8015700:	6039      	str	r1, [r7, #0]
        taskDelayFunc = delayF;
 8015702:	687b      	ldr	r3, [r7, #4]
 8015704:	683a      	ldr	r2, [r7, #0]
 8015706:	639a      	str	r2, [r3, #56]	; 0x38
    }
 8015708:	bf00      	nop
 801570a:	370c      	adds	r7, #12
 801570c:	46bd      	mov	sp, r7
 801570e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015712:	4770      	bx	lr

08015714 <__NVIC_EnableIRQ>:
{
 8015714:	b480      	push	{r7}
 8015716:	b083      	sub	sp, #12
 8015718:	af00      	add	r7, sp, #0
 801571a:	4603      	mov	r3, r0
 801571c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 801571e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8015722:	2b00      	cmp	r3, #0
 8015724:	db0b      	blt.n	801573e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8015726:	88fb      	ldrh	r3, [r7, #6]
 8015728:	f003 021f 	and.w	r2, r3, #31
 801572c:	4907      	ldr	r1, [pc, #28]	; (801574c <__NVIC_EnableIRQ+0x38>)
 801572e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8015732:	095b      	lsrs	r3, r3, #5
 8015734:	2001      	movs	r0, #1
 8015736:	fa00 f202 	lsl.w	r2, r0, r2
 801573a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 801573e:	bf00      	nop
 8015740:	370c      	adds	r7, #12
 8015742:	46bd      	mov	sp, r7
 8015744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015748:	4770      	bx	lr
 801574a:	bf00      	nop
 801574c:	e000e100 	.word	0xe000e100

08015750 <__NVIC_DisableIRQ>:
{
 8015750:	b480      	push	{r7}
 8015752:	b083      	sub	sp, #12
 8015754:	af00      	add	r7, sp, #0
 8015756:	4603      	mov	r3, r0
 8015758:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 801575a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801575e:	2b00      	cmp	r3, #0
 8015760:	db12      	blt.n	8015788 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8015762:	88fb      	ldrh	r3, [r7, #6]
 8015764:	f003 021f 	and.w	r2, r3, #31
 8015768:	490a      	ldr	r1, [pc, #40]	; (8015794 <__NVIC_DisableIRQ+0x44>)
 801576a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801576e:	095b      	lsrs	r3, r3, #5
 8015770:	2001      	movs	r0, #1
 8015772:	fa00 f202 	lsl.w	r2, r0, r2
 8015776:	3320      	adds	r3, #32
 8015778:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 801577c:	f3bf 8f4f 	dsb	sy
}
 8015780:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8015782:	f3bf 8f6f 	isb	sy
}
 8015786:	bf00      	nop
}
 8015788:	bf00      	nop
 801578a:	370c      	adds	r7, #12
 801578c:	46bd      	mov	sp, r7
 801578e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015792:	4770      	bx	lr
 8015794:	e000e100 	.word	0xe000e100

08015798 <__NVIC_SetPriority>:
{
 8015798:	b480      	push	{r7}
 801579a:	b083      	sub	sp, #12
 801579c:	af00      	add	r7, sp, #0
 801579e:	4603      	mov	r3, r0
 80157a0:	6039      	str	r1, [r7, #0]
 80157a2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80157a4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80157a8:	2b00      	cmp	r3, #0
 80157aa:	db0a      	blt.n	80157c2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80157ac:	683b      	ldr	r3, [r7, #0]
 80157ae:	b2da      	uxtb	r2, r3
 80157b0:	490c      	ldr	r1, [pc, #48]	; (80157e4 <__NVIC_SetPriority+0x4c>)
 80157b2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80157b6:	0112      	lsls	r2, r2, #4
 80157b8:	b2d2      	uxtb	r2, r2
 80157ba:	440b      	add	r3, r1
 80157bc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80157c0:	e00a      	b.n	80157d8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80157c2:	683b      	ldr	r3, [r7, #0]
 80157c4:	b2da      	uxtb	r2, r3
 80157c6:	4908      	ldr	r1, [pc, #32]	; (80157e8 <__NVIC_SetPriority+0x50>)
 80157c8:	88fb      	ldrh	r3, [r7, #6]
 80157ca:	f003 030f 	and.w	r3, r3, #15
 80157ce:	3b04      	subs	r3, #4
 80157d0:	0112      	lsls	r2, r2, #4
 80157d2:	b2d2      	uxtb	r2, r2
 80157d4:	440b      	add	r3, r1
 80157d6:	761a      	strb	r2, [r3, #24]
}
 80157d8:	bf00      	nop
 80157da:	370c      	adds	r7, #12
 80157dc:	46bd      	mov	sp, r7
 80157de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80157e2:	4770      	bx	lr
 80157e4:	e000e100 	.word	0xe000e100
 80157e8:	e000ed00 	.word	0xe000ed00

080157ec <_ZN20TouchGFXGeneratedHAL10initializeEv>:
    static uint16_t lcd_int_active_line;
    static uint16_t lcd_int_porch_line;
}

void TouchGFXGeneratedHAL::initialize()
{
 80157ec:	b5b0      	push	{r4, r5, r7, lr}
 80157ee:	b082      	sub	sp, #8
 80157f0:	af00      	add	r7, sp, #0
 80157f2:	6078      	str	r0, [r7, #4]
    HAL::initialize();
 80157f4:	687b      	ldr	r3, [r7, #4]
 80157f6:	4618      	mov	r0, r3
 80157f8:	f000 fd17 	bl	801622a <_ZN8touchgfx3HAL10initializeEv>
    registerEventListener(*(Application::getInstance()));
 80157fc:	687d      	ldr	r5, [r7, #4]
 80157fe:	687b      	ldr	r3, [r7, #4]
 8015800:	681b      	ldr	r3, [r3, #0]
 8015802:	3364      	adds	r3, #100	; 0x64
 8015804:	681c      	ldr	r4, [r3, #0]
 8015806:	f002 fb5d 	bl	8017ec4 <_ZN8touchgfx11Application11getInstanceEv>
 801580a:	4603      	mov	r3, r0
 801580c:	4619      	mov	r1, r3
 801580e:	4628      	mov	r0, r5
 8015810:	47a0      	blx	r4
    registerTaskDelayFunction(&OSWrappers::taskDelay);
 8015812:	687b      	ldr	r3, [r7, #4]
 8015814:	490b      	ldr	r1, [pc, #44]	; (8015844 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x58>)
 8015816:	4618      	mov	r0, r3
 8015818:	f7ff ff6e 	bl	80156f8 <_ZN8touchgfx3HAL25registerTaskDelayFunctionEPFvtE>
    setFrameRefreshStrategy(HAL::REFRESH_STRATEGY_OPTIM_SINGLE_BUFFER_TFT_CTRL);
 801581c:	687b      	ldr	r3, [r7, #4]
 801581e:	2101      	movs	r1, #1
 8015820:	4618      	mov	r0, r3
 8015822:	f7ff ff29 	bl	8015678 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE>
    setFrameBufferStartAddresses((void*)0xD0000000, (void*)0, (void*)0);
 8015826:	6878      	ldr	r0, [r7, #4]
 8015828:	687b      	ldr	r3, [r7, #4]
 801582a:	681b      	ldr	r3, [r3, #0]
 801582c:	3388      	adds	r3, #136	; 0x88
 801582e:	681c      	ldr	r4, [r3, #0]
 8015830:	2300      	movs	r3, #0
 8015832:	2200      	movs	r2, #0
 8015834:	f04f 4150 	mov.w	r1, #3489660928	; 0xd0000000
 8015838:	47a0      	blx	r4
}
 801583a:	bf00      	nop
 801583c:	3708      	adds	r7, #8
 801583e:	46bd      	mov	sp, r7
 8015840:	bdb0      	pop	{r4, r5, r7, pc}
 8015842:	bf00      	nop
 8015844:	0801464d 	.word	0x0801464d

08015848 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>:

void TouchGFXGeneratedHAL::configureInterrupts()
{
 8015848:	b580      	push	{r7, lr}
 801584a:	b082      	sub	sp, #8
 801584c:	af00      	add	r7, sp, #0
 801584e:	6078      	str	r0, [r7, #4]
    NVIC_SetPriority(DMA2D_IRQn, 9);
 8015850:	2109      	movs	r1, #9
 8015852:	205a      	movs	r0, #90	; 0x5a
 8015854:	f7ff ffa0 	bl	8015798 <__NVIC_SetPriority>
    NVIC_SetPriority(LTDC_IRQn, 9);
 8015858:	2109      	movs	r1, #9
 801585a:	2058      	movs	r0, #88	; 0x58
 801585c:	f7ff ff9c 	bl	8015798 <__NVIC_SetPriority>
}
 8015860:	bf00      	nop
 8015862:	3708      	adds	r7, #8
 8015864:	46bd      	mov	sp, r7
 8015866:	bd80      	pop	{r7, pc}

08015868 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>:

void TouchGFXGeneratedHAL::enableInterrupts()
{
 8015868:	b580      	push	{r7, lr}
 801586a:	b082      	sub	sp, #8
 801586c:	af00      	add	r7, sp, #0
 801586e:	6078      	str	r0, [r7, #4]
    NVIC_EnableIRQ(DMA2D_IRQn);
 8015870:	205a      	movs	r0, #90	; 0x5a
 8015872:	f7ff ff4f 	bl	8015714 <__NVIC_EnableIRQ>
    NVIC_EnableIRQ(LTDC_IRQn);
 8015876:	2058      	movs	r0, #88	; 0x58
 8015878:	f7ff ff4c 	bl	8015714 <__NVIC_EnableIRQ>
}
 801587c:	bf00      	nop
 801587e:	3708      	adds	r7, #8
 8015880:	46bd      	mov	sp, r7
 8015882:	bd80      	pop	{r7, pc}

08015884 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>:

void TouchGFXGeneratedHAL::disableInterrupts()
{
 8015884:	b580      	push	{r7, lr}
 8015886:	b082      	sub	sp, #8
 8015888:	af00      	add	r7, sp, #0
 801588a:	6078      	str	r0, [r7, #4]
    NVIC_DisableIRQ(DMA2D_IRQn);
 801588c:	205a      	movs	r0, #90	; 0x5a
 801588e:	f7ff ff5f 	bl	8015750 <__NVIC_DisableIRQ>
    NVIC_DisableIRQ(LTDC_IRQn);
 8015892:	2058      	movs	r0, #88	; 0x58
 8015894:	f7ff ff5c 	bl	8015750 <__NVIC_DisableIRQ>
}
 8015898:	bf00      	nop
 801589a:	3708      	adds	r7, #8
 801589c:	46bd      	mov	sp, r7
 801589e:	bd80      	pop	{r7, pc}

080158a0 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>:

void TouchGFXGeneratedHAL::enableLCDControllerInterrupt()
{
 80158a0:	b480      	push	{r7}
 80158a2:	b083      	sub	sp, #12
 80158a4:	af00      	add	r7, sp, #0
 80158a6:	6078      	str	r0, [r7, #4]
    lcd_int_active_line = (LTDC->BPCR & 0x7FF) - 1;
 80158a8:	4b11      	ldr	r3, [pc, #68]	; (80158f0 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 80158aa:	68db      	ldr	r3, [r3, #12]
 80158ac:	b29b      	uxth	r3, r3
 80158ae:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80158b2:	b29b      	uxth	r3, r3
 80158b4:	3b01      	subs	r3, #1
 80158b6:	b29a      	uxth	r2, r3
 80158b8:	4b0e      	ldr	r3, [pc, #56]	; (80158f4 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x54>)
 80158ba:	801a      	strh	r2, [r3, #0]
    lcd_int_porch_line = (LTDC->AWCR & 0x7FF) - 1;
 80158bc:	4b0c      	ldr	r3, [pc, #48]	; (80158f0 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 80158be:	691b      	ldr	r3, [r3, #16]
 80158c0:	b29b      	uxth	r3, r3
 80158c2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80158c6:	b29b      	uxth	r3, r3
 80158c8:	3b01      	subs	r3, #1
 80158ca:	b29a      	uxth	r2, r3
 80158cc:	4b0a      	ldr	r3, [pc, #40]	; (80158f8 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x58>)
 80158ce:	801a      	strh	r2, [r3, #0]

    /* Sets the Line Interrupt position */
    LTDC->LIPCR = lcd_int_active_line;
 80158d0:	4b08      	ldr	r3, [pc, #32]	; (80158f4 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x54>)
 80158d2:	881a      	ldrh	r2, [r3, #0]
 80158d4:	4b06      	ldr	r3, [pc, #24]	; (80158f0 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 80158d6:	641a      	str	r2, [r3, #64]	; 0x40
    /* Line Interrupt Enable            */
    LTDC->IER |= LTDC_IER_LIE;
 80158d8:	4b05      	ldr	r3, [pc, #20]	; (80158f0 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 80158da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80158dc:	4a04      	ldr	r2, [pc, #16]	; (80158f0 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 80158de:	f043 0301 	orr.w	r3, r3, #1
 80158e2:	6353      	str	r3, [r2, #52]	; 0x34
}
 80158e4:	bf00      	nop
 80158e6:	370c      	adds	r7, #12
 80158e8:	46bd      	mov	sp, r7
 80158ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80158ee:	4770      	bx	lr
 80158f0:	50001000 	.word	0x50001000
 80158f4:	20006de6 	.word	0x20006de6
 80158f8:	20006de8 	.word	0x20006de8

080158fc <_ZN20TouchGFXGeneratedHAL10beginFrameEv>:

bool TouchGFXGeneratedHAL::beginFrame()
{
 80158fc:	b580      	push	{r7, lr}
 80158fe:	b082      	sub	sp, #8
 8015900:	af00      	add	r7, sp, #0
 8015902:	6078      	str	r0, [r7, #4]
    return HAL::beginFrame();
 8015904:	687b      	ldr	r3, [r7, #4]
 8015906:	4618      	mov	r0, r3
 8015908:	f000 fc76 	bl	80161f8 <_ZN8touchgfx3HAL10beginFrameEv>
 801590c:	4603      	mov	r3, r0
}
 801590e:	4618      	mov	r0, r3
 8015910:	3708      	adds	r7, #8
 8015912:	46bd      	mov	sp, r7
 8015914:	bd80      	pop	{r7, pc}
	...

08015918 <_ZN20TouchGFXGeneratedHAL8endFrameEv>:

void TouchGFXGeneratedHAL::endFrame()
{
 8015918:	b580      	push	{r7, lr}
 801591a:	b082      	sub	sp, #8
 801591c:	af00      	add	r7, sp, #0
 801591e:	6078      	str	r0, [r7, #4]
    if (frameBufferUpdatedThisFrame)
 8015920:	687b      	ldr	r3, [r7, #4]
 8015922:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 8015926:	2b00      	cmp	r3, #0
 8015928:	d002      	beq.n	8015930 <_ZN20TouchGFXGeneratedHAL8endFrameEv+0x18>
    {
        refreshRequested = true;
 801592a:	4b05      	ldr	r3, [pc, #20]	; (8015940 <_ZN20TouchGFXGeneratedHAL8endFrameEv+0x28>)
 801592c:	2201      	movs	r2, #1
 801592e:	701a      	strb	r2, [r3, #0]
    }
    HAL::endFrame();
 8015930:	687b      	ldr	r3, [r7, #4]
 8015932:	4618      	mov	r0, r3
 8015934:	f000 fc6c 	bl	8016210 <_ZN8touchgfx3HAL8endFrameEv>
}
 8015938:	bf00      	nop
 801593a:	3708      	adds	r7, #8
 801593c:	46bd      	mov	sp, r7
 801593e:	bd80      	pop	{r7, pc}
 8015940:	20006de4 	.word	0x20006de4

08015944 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>:

uint16_t* TouchGFXGeneratedHAL::getTFTFrameBuffer() const
{
 8015944:	b480      	push	{r7}
 8015946:	b083      	sub	sp, #12
 8015948:	af00      	add	r7, sp, #0
 801594a:	6078      	str	r0, [r7, #4]
    return (uint16_t*)LTDC_Layer1->CFBAR;
 801594c:	4b03      	ldr	r3, [pc, #12]	; (801595c <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv+0x18>)
 801594e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
 8015950:	4618      	mov	r0, r3
 8015952:	370c      	adds	r7, #12
 8015954:	46bd      	mov	sp, r7
 8015956:	f85d 7b04 	ldr.w	r7, [sp], #4
 801595a:	4770      	bx	lr
 801595c:	50001084 	.word	0x50001084

08015960 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>:

void TouchGFXGeneratedHAL::setTFTFrameBuffer(uint16_t* adr)
{
 8015960:	b480      	push	{r7}
 8015962:	b083      	sub	sp, #12
 8015964:	af00      	add	r7, sp, #0
 8015966:	6078      	str	r0, [r7, #4]
 8015968:	6039      	str	r1, [r7, #0]
    LTDC_Layer1->CFBAR = (uint32_t)adr;
 801596a:	4a06      	ldr	r2, [pc, #24]	; (8015984 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt+0x24>)
 801596c:	683b      	ldr	r3, [r7, #0]
 801596e:	6293      	str	r3, [r2, #40]	; 0x28

    /* Reload immediate */
    LTDC->SRCR = (uint32_t)LTDC_SRCR_IMR;
 8015970:	4b05      	ldr	r3, [pc, #20]	; (8015988 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt+0x28>)
 8015972:	2201      	movs	r2, #1
 8015974:	625a      	str	r2, [r3, #36]	; 0x24
}
 8015976:	bf00      	nop
 8015978:	370c      	adds	r7, #12
 801597a:	46bd      	mov	sp, r7
 801597c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015980:	4770      	bx	lr
 8015982:	bf00      	nop
 8015984:	50001084 	.word	0x50001084
 8015988:	50001000 	.word	0x50001000

0801598c <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>:

void TouchGFXGeneratedHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
 801598c:	b580      	push	{r7, lr}
 801598e:	b086      	sub	sp, #24
 8015990:	af00      	add	r7, sp, #0
 8015992:	6078      	str	r0, [r7, #4]
 8015994:	6039      	str	r1, [r7, #0]
    HAL::flushFrameBuffer(rect);
 8015996:	687b      	ldr	r3, [r7, #4]
 8015998:	6839      	ldr	r1, [r7, #0]
 801599a:	4618      	mov	r0, r3
 801599c:	f000 fbf6 	bl	801618c <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>
    // If the framebuffer is placed in Write Through cached memory (e.g. SRAM) then
    // the DCache must be flushed prior to DMA2D accessing it. That's done
    // using the function SCB_CleanInvalidateDCache(). Remember to enable "CPU Cache" in the
    // "System Core" settings for "Cortex M7" in CubeMX in order for this function call to work.
    if (SCB->CCR & SCB_CCR_DC_Msk)
 80159a0:	4b25      	ldr	r3, [pc, #148]	; (8015a38 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE+0xac>)
 80159a2:	695b      	ldr	r3, [r3, #20]
 80159a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80159a8:	2b00      	cmp	r3, #0
 80159aa:	bf14      	ite	ne
 80159ac:	2301      	movne	r3, #1
 80159ae:	2300      	moveq	r3, #0
 80159b0:	b2db      	uxtb	r3, r3
 80159b2:	2b00      	cmp	r3, #0
 80159b4:	d03c      	beq.n	8015a30 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE+0xa4>
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 80159b6:	4b20      	ldr	r3, [pc, #128]	; (8015a38 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE+0xac>)
 80159b8:	2200      	movs	r2, #0
 80159ba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80159be:	f3bf 8f4f 	dsb	sy
}
 80159c2:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 80159c4:	4b1c      	ldr	r3, [pc, #112]	; (8015a38 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE+0xac>)
 80159c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80159ca:	617b      	str	r3, [r7, #20]

                                            /* clean & invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80159cc:	697b      	ldr	r3, [r7, #20]
 80159ce:	0b5b      	lsrs	r3, r3, #13
 80159d0:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80159d4:	613b      	str	r3, [r7, #16]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80159d6:	697b      	ldr	r3, [r7, #20]
 80159d8:	08db      	lsrs	r3, r3, #3
 80159da:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80159de:	60fb      	str	r3, [r7, #12]
      do {
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 80159e0:	693b      	ldr	r3, [r7, #16]
 80159e2:	015a      	lsls	r2, r3, #5
 80159e4:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 80159e8:	4013      	ands	r3, r2
                       ((ways << SCB_DCCISW_WAY_Pos) & SCB_DCCISW_WAY_Msk)  );
 80159ea:	68fa      	ldr	r2, [r7, #12]
 80159ec:	0792      	lsls	r2, r2, #30
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 80159ee:	4912      	ldr	r1, [pc, #72]	; (8015a38 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE+0xac>)
 80159f0:	4313      	orrs	r3, r2
 80159f2:	f8c1 3274 	str.w	r3, [r1, #628]	; 0x274
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 80159f6:	68fb      	ldr	r3, [r7, #12]
 80159f8:	1e5a      	subs	r2, r3, #1
 80159fa:	60fa      	str	r2, [r7, #12]
 80159fc:	2b00      	cmp	r3, #0
 80159fe:	bf14      	ite	ne
 8015a00:	2301      	movne	r3, #1
 8015a02:	2300      	moveq	r3, #0
 8015a04:	b2db      	uxtb	r3, r3
 8015a06:	2b00      	cmp	r3, #0
 8015a08:	d000      	beq.n	8015a0c <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE+0x80>
      do {
 8015a0a:	e7e9      	b.n	80159e0 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE+0x54>
    } while(sets-- != 0U);
 8015a0c:	693b      	ldr	r3, [r7, #16]
 8015a0e:	1e5a      	subs	r2, r3, #1
 8015a10:	613a      	str	r2, [r7, #16]
 8015a12:	2b00      	cmp	r3, #0
 8015a14:	bf14      	ite	ne
 8015a16:	2301      	movne	r3, #1
 8015a18:	2300      	moveq	r3, #0
 8015a1a:	b2db      	uxtb	r3, r3
 8015a1c:	2b00      	cmp	r3, #0
 8015a1e:	d000      	beq.n	8015a22 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE+0x96>
    do {
 8015a20:	e7d9      	b.n	80159d6 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE+0x4a>
  __ASM volatile ("dsb 0xF":::"memory");
 8015a22:	f3bf 8f4f 	dsb	sy
}
 8015a26:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8015a28:	f3bf 8f6f 	isb	sy
}
 8015a2c:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 8015a2e:	bf00      	nop
    {
        SCB_CleanInvalidateDCache();
    }
}
 8015a30:	bf00      	nop
 8015a32:	3718      	adds	r7, #24
 8015a34:	46bd      	mov	sp, r7
 8015a36:	bd80      	pop	{r7, pc}
 8015a38:	e000ed00 	.word	0xe000ed00

08015a3c <_ZN20TouchGFXGeneratedHAL9blockCopyEPvPKvm>:

bool TouchGFXGeneratedHAL::blockCopy(void* RESTRICT dest, const void* RESTRICT src, uint32_t numBytes)
{
 8015a3c:	b580      	push	{r7, lr}
 8015a3e:	b084      	sub	sp, #16
 8015a40:	af00      	add	r7, sp, #0
 8015a42:	60f8      	str	r0, [r7, #12]
 8015a44:	60b9      	str	r1, [r7, #8]
 8015a46:	607a      	str	r2, [r7, #4]
 8015a48:	603b      	str	r3, [r7, #0]
    return HAL::blockCopy(dest, src, numBytes);
 8015a4a:	68f8      	ldr	r0, [r7, #12]
 8015a4c:	683b      	ldr	r3, [r7, #0]
 8015a4e:	687a      	ldr	r2, [r7, #4]
 8015a50:	68b9      	ldr	r1, [r7, #8]
 8015a52:	f000 fd04 	bl	801645e <_ZN8touchgfx3HAL9blockCopyEPvPKvm>
 8015a56:	4603      	mov	r3, r0
}
 8015a58:	4618      	mov	r0, r3
 8015a5a:	3710      	adds	r7, #16
 8015a5c:	46bd      	mov	sp, r7
 8015a5e:	bd80      	pop	{r7, pc}

08015a60 <_ZN20TouchGFXGeneratedHAL17getTFTCurrentLineEv>:

uint16_t TouchGFXGeneratedHAL::getTFTCurrentLine()
{
 8015a60:	b480      	push	{r7}
 8015a62:	b085      	sub	sp, #20
 8015a64:	af00      	add	r7, sp, #0
 8015a66:	6078      	str	r0, [r7, #4]
    // This function only requires an implementation if single buffering
    // on LTDC display is being used (REFRESH_STRATEGY_OPTIM_SINGLE_BUFFER_TFT_CTRL).

    // The CPSR register (bits 15:0) specify current line of TFT controller.
    uint16_t curr = (uint16_t)(LTDC->CPSR & 0xffff);
 8015a68:	4b0d      	ldr	r3, [pc, #52]	; (8015aa0 <_ZN20TouchGFXGeneratedHAL17getTFTCurrentLineEv+0x40>)
 8015a6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015a6c:	81fb      	strh	r3, [r7, #14]
    uint16_t backPorchY = (uint16_t)(LTDC->BPCR & 0x7FF) + 1;
 8015a6e:	4b0c      	ldr	r3, [pc, #48]	; (8015aa0 <_ZN20TouchGFXGeneratedHAL17getTFTCurrentLineEv+0x40>)
 8015a70:	68db      	ldr	r3, [r3, #12]
 8015a72:	b29b      	uxth	r3, r3
 8015a74:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8015a78:	b29b      	uxth	r3, r3
 8015a7a:	3301      	adds	r3, #1
 8015a7c:	81bb      	strh	r3, [r7, #12]

    // The semantics of the getTFTCurrentLine() function is to return a value
    // in the range of 0-totalheight. If we are still in back porch area, return 0.
    return (curr < backPorchY) ? 0 : (curr - backPorchY);
 8015a7e:	89fa      	ldrh	r2, [r7, #14]
 8015a80:	89bb      	ldrh	r3, [r7, #12]
 8015a82:	429a      	cmp	r2, r3
 8015a84:	d304      	bcc.n	8015a90 <_ZN20TouchGFXGeneratedHAL17getTFTCurrentLineEv+0x30>
 8015a86:	89fa      	ldrh	r2, [r7, #14]
 8015a88:	89bb      	ldrh	r3, [r7, #12]
 8015a8a:	1ad3      	subs	r3, r2, r3
 8015a8c:	b29b      	uxth	r3, r3
 8015a8e:	e000      	b.n	8015a92 <_ZN20TouchGFXGeneratedHAL17getTFTCurrentLineEv+0x32>
 8015a90:	2300      	movs	r3, #0
}
 8015a92:	4618      	mov	r0, r3
 8015a94:	3714      	adds	r7, #20
 8015a96:	46bd      	mov	sp, r7
 8015a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a9c:	4770      	bx	lr
 8015a9e:	bf00      	nop
 8015aa0:	50001000 	.word	0x50001000

08015aa4 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv>:

void TouchGFXGeneratedHAL::InvalidateCache()
{
 8015aa4:	b480      	push	{r7}
 8015aa6:	b087      	sub	sp, #28
 8015aa8:	af00      	add	r7, sp, #0
 8015aaa:	6078      	str	r0, [r7, #4]
    // If the framebuffer is placed in Write Through cached memory (e.g. SRAM) then
    // the DCache must be flushed prior to DMA2D accessing it. That's done
    // using the function SCB_CleanInvalidateDCache(). Remember to enable "CPU Cache" in the
    // "System Core" settings for "Cortex M7" in CubeMX in order for this function call to work.
    if (SCB->CCR & SCB_CCR_DC_Msk)
 8015aac:	4b26      	ldr	r3, [pc, #152]	; (8015b48 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0xa4>)
 8015aae:	695b      	ldr	r3, [r3, #20]
 8015ab0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8015ab4:	2b00      	cmp	r3, #0
 8015ab6:	bf14      	ite	ne
 8015ab8:	2301      	movne	r3, #1
 8015aba:	2300      	moveq	r3, #0
 8015abc:	b2db      	uxtb	r3, r3
 8015abe:	2b00      	cmp	r3, #0
 8015ac0:	d03c      	beq.n	8015b3c <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0x98>
    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8015ac2:	4b21      	ldr	r3, [pc, #132]	; (8015b48 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0xa4>)
 8015ac4:	2200      	movs	r2, #0
 8015ac6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8015aca:	f3bf 8f4f 	dsb	sy
}
 8015ace:	bf00      	nop
    ccsidr = SCB->CCSIDR;
 8015ad0:	4b1d      	ldr	r3, [pc, #116]	; (8015b48 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0xa4>)
 8015ad2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8015ad6:	617b      	str	r3, [r7, #20]
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8015ad8:	697b      	ldr	r3, [r7, #20]
 8015ada:	0b5b      	lsrs	r3, r3, #13
 8015adc:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8015ae0:	613b      	str	r3, [r7, #16]
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8015ae2:	697b      	ldr	r3, [r7, #20]
 8015ae4:	08db      	lsrs	r3, r3, #3
 8015ae6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8015aea:	60fb      	str	r3, [r7, #12]
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8015aec:	693b      	ldr	r3, [r7, #16]
 8015aee:	015a      	lsls	r2, r3, #5
 8015af0:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8015af4:	4013      	ands	r3, r2
                       ((ways << SCB_DCCISW_WAY_Pos) & SCB_DCCISW_WAY_Msk)  );
 8015af6:	68fa      	ldr	r2, [r7, #12]
 8015af8:	0792      	lsls	r2, r2, #30
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8015afa:	4913      	ldr	r1, [pc, #76]	; (8015b48 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0xa4>)
 8015afc:	4313      	orrs	r3, r2
 8015afe:	f8c1 3274 	str.w	r3, [r1, #628]	; 0x274
      } while (ways-- != 0U);
 8015b02:	68fb      	ldr	r3, [r7, #12]
 8015b04:	1e5a      	subs	r2, r3, #1
 8015b06:	60fa      	str	r2, [r7, #12]
 8015b08:	2b00      	cmp	r3, #0
 8015b0a:	bf14      	ite	ne
 8015b0c:	2301      	movne	r3, #1
 8015b0e:	2300      	moveq	r3, #0
 8015b10:	b2db      	uxtb	r3, r3
 8015b12:	2b00      	cmp	r3, #0
 8015b14:	d000      	beq.n	8015b18 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0x74>
      do {
 8015b16:	e7e9      	b.n	8015aec <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0x48>
    } while(sets-- != 0U);
 8015b18:	693b      	ldr	r3, [r7, #16]
 8015b1a:	1e5a      	subs	r2, r3, #1
 8015b1c:	613a      	str	r2, [r7, #16]
 8015b1e:	2b00      	cmp	r3, #0
 8015b20:	bf14      	ite	ne
 8015b22:	2301      	movne	r3, #1
 8015b24:	2300      	moveq	r3, #0
 8015b26:	b2db      	uxtb	r3, r3
 8015b28:	2b00      	cmp	r3, #0
 8015b2a:	d000      	beq.n	8015b2e <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0x8a>
    do {
 8015b2c:	e7d9      	b.n	8015ae2 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0x3e>
  __ASM volatile ("dsb 0xF":::"memory");
 8015b2e:	f3bf 8f4f 	dsb	sy
}
 8015b32:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8015b34:	f3bf 8f6f 	isb	sy
}
 8015b38:	bf00      	nop
}
 8015b3a:	bf00      	nop
    {
        SCB_CleanInvalidateDCache();
    }
}
 8015b3c:	bf00      	nop
 8015b3e:	371c      	adds	r7, #28
 8015b40:	46bd      	mov	sp, r7
 8015b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015b46:	4770      	bx	lr
 8015b48:	e000ed00 	.word	0xe000ed00

08015b4c <_ZN20TouchGFXGeneratedHAL10FlushCacheEv>:

void TouchGFXGeneratedHAL::FlushCache()
{
 8015b4c:	b480      	push	{r7}
 8015b4e:	b087      	sub	sp, #28
 8015b50:	af00      	add	r7, sp, #0
 8015b52:	6078      	str	r0, [r7, #4]
    // If the framebuffer is placed in Write Through cached memory (e.g. SRAM) then
    // the DCache must be flushed prior to DMA2D accessing it. That's done
    // using the function SCB_CleanInvalidateDCache(). Remember to enable "CPU Cache" in the
    // "System Core" settings for "Cortex M7" in CubeMX in order for this function call to work.
    if (SCB->CCR & SCB_CCR_DC_Msk)
 8015b54:	4b26      	ldr	r3, [pc, #152]	; (8015bf0 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0xa4>)
 8015b56:	695b      	ldr	r3, [r3, #20]
 8015b58:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8015b5c:	2b00      	cmp	r3, #0
 8015b5e:	bf14      	ite	ne
 8015b60:	2301      	movne	r3, #1
 8015b62:	2300      	moveq	r3, #0
 8015b64:	b2db      	uxtb	r3, r3
 8015b66:	2b00      	cmp	r3, #0
 8015b68:	d03c      	beq.n	8015be4 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x98>
    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8015b6a:	4b21      	ldr	r3, [pc, #132]	; (8015bf0 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0xa4>)
 8015b6c:	2200      	movs	r2, #0
 8015b6e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8015b72:	f3bf 8f4f 	dsb	sy
}
 8015b76:	bf00      	nop
    ccsidr = SCB->CCSIDR;
 8015b78:	4b1d      	ldr	r3, [pc, #116]	; (8015bf0 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0xa4>)
 8015b7a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8015b7e:	617b      	str	r3, [r7, #20]
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8015b80:	697b      	ldr	r3, [r7, #20]
 8015b82:	0b5b      	lsrs	r3, r3, #13
 8015b84:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8015b88:	613b      	str	r3, [r7, #16]
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8015b8a:	697b      	ldr	r3, [r7, #20]
 8015b8c:	08db      	lsrs	r3, r3, #3
 8015b8e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8015b92:	60fb      	str	r3, [r7, #12]
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8015b94:	693b      	ldr	r3, [r7, #16]
 8015b96:	015a      	lsls	r2, r3, #5
 8015b98:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8015b9c:	4013      	ands	r3, r2
                       ((ways << SCB_DCCISW_WAY_Pos) & SCB_DCCISW_WAY_Msk)  );
 8015b9e:	68fa      	ldr	r2, [r7, #12]
 8015ba0:	0792      	lsls	r2, r2, #30
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8015ba2:	4913      	ldr	r1, [pc, #76]	; (8015bf0 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0xa4>)
 8015ba4:	4313      	orrs	r3, r2
 8015ba6:	f8c1 3274 	str.w	r3, [r1, #628]	; 0x274
      } while (ways-- != 0U);
 8015baa:	68fb      	ldr	r3, [r7, #12]
 8015bac:	1e5a      	subs	r2, r3, #1
 8015bae:	60fa      	str	r2, [r7, #12]
 8015bb0:	2b00      	cmp	r3, #0
 8015bb2:	bf14      	ite	ne
 8015bb4:	2301      	movne	r3, #1
 8015bb6:	2300      	moveq	r3, #0
 8015bb8:	b2db      	uxtb	r3, r3
 8015bba:	2b00      	cmp	r3, #0
 8015bbc:	d000      	beq.n	8015bc0 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x74>
      do {
 8015bbe:	e7e9      	b.n	8015b94 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x48>
    } while(sets-- != 0U);
 8015bc0:	693b      	ldr	r3, [r7, #16]
 8015bc2:	1e5a      	subs	r2, r3, #1
 8015bc4:	613a      	str	r2, [r7, #16]
 8015bc6:	2b00      	cmp	r3, #0
 8015bc8:	bf14      	ite	ne
 8015bca:	2301      	movne	r3, #1
 8015bcc:	2300      	moveq	r3, #0
 8015bce:	b2db      	uxtb	r3, r3
 8015bd0:	2b00      	cmp	r3, #0
 8015bd2:	d000      	beq.n	8015bd6 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x8a>
    do {
 8015bd4:	e7d9      	b.n	8015b8a <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x3e>
  __ASM volatile ("dsb 0xF":::"memory");
 8015bd6:	f3bf 8f4f 	dsb	sy
}
 8015bda:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8015bdc:	f3bf 8f6f 	isb	sy
}
 8015be0:	bf00      	nop
}
 8015be2:	bf00      	nop
    {
        SCB_CleanInvalidateDCache();
    }
}
 8015be4:	bf00      	nop
 8015be6:	371c      	adds	r7, #28
 8015be8:	46bd      	mov	sp, r7
 8015bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015bee:	4770      	bx	lr
 8015bf0:	e000ed00 	.word	0xe000ed00

08015bf4 <HAL_LTDC_LineEventCallback>:

extern "C"
{
    void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef* hltdc)
    {
 8015bf4:	b580      	push	{r7, lr}
 8015bf6:	b082      	sub	sp, #8
 8015bf8:	af00      	add	r7, sp, #0
 8015bfa:	6078      	str	r0, [r7, #4]
        if (!HAL::getInstance())
 8015bfc:	f7fd f84a 	bl	8012c94 <_ZN8touchgfx3HAL11getInstanceEv>
 8015c00:	4603      	mov	r3, r0
 8015c02:	2b00      	cmp	r3, #0
 8015c04:	bf0c      	ite	eq
 8015c06:	2301      	moveq	r3, #1
 8015c08:	2300      	movne	r3, #0
 8015c0a:	b2db      	uxtb	r3, r3
 8015c0c:	2b00      	cmp	r3, #0
 8015c0e:	d132      	bne.n	8015c76 <HAL_LTDC_LineEventCallback+0x82>
        {
            return;
        }

        if (LTDC->LIPCR == lcd_int_active_line)
 8015c10:	4b1b      	ldr	r3, [pc, #108]	; (8015c80 <HAL_LTDC_LineEventCallback+0x8c>)
 8015c12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015c14:	4a1b      	ldr	r2, [pc, #108]	; (8015c84 <HAL_LTDC_LineEventCallback+0x90>)
 8015c16:	8812      	ldrh	r2, [r2, #0]
 8015c18:	4293      	cmp	r3, r2
 8015c1a:	bf0c      	ite	eq
 8015c1c:	2301      	moveq	r3, #1
 8015c1e:	2300      	movne	r3, #0
 8015c20:	b2db      	uxtb	r3, r3
 8015c22:	2b00      	cmp	r3, #0
 8015c24:	d017      	beq.n	8015c56 <HAL_LTDC_LineEventCallback+0x62>
        {
            //entering active area
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_porch_line);
 8015c26:	4b18      	ldr	r3, [pc, #96]	; (8015c88 <HAL_LTDC_LineEventCallback+0x94>)
 8015c28:	881b      	ldrh	r3, [r3, #0]
 8015c2a:	4619      	mov	r1, r3
 8015c2c:	6878      	ldr	r0, [r7, #4]
 8015c2e:	f7f1 ff45 	bl	8007abc <HAL_LTDC_ProgramLineEvent>
            HAL::getInstance()->vSync();
 8015c32:	f7fd f82f 	bl	8012c94 <_ZN8touchgfx3HAL11getInstanceEv>
 8015c36:	4603      	mov	r3, r0
 8015c38:	4618      	mov	r0, r3
 8015c3a:	f7ff fd0b 	bl	8015654 <_ZN8touchgfx3HAL5vSyncEv>
            OSWrappers::signalVSync();
 8015c3e:	f7fe fcdd 	bl	80145fc <_ZN8touchgfx10OSWrappers11signalVSyncEv>

            // Swap frame buffers immediately instead of waiting for the task to be scheduled in.
            // Note: task will also swap when it wakes up, but that operation is guarded and will not have
            // any effect if already swapped.
            HAL::getInstance()->swapFrameBuffers();
 8015c42:	f7fd f827 	bl	8012c94 <_ZN8touchgfx3HAL11getInstanceEv>
 8015c46:	4603      	mov	r3, r0
 8015c48:	4618      	mov	r0, r3
 8015c4a:	f001 f90f 	bl	8016e6c <_ZN8touchgfx3HAL16swapFrameBuffersEv>
            GPIO::set(GPIO::VSYNC_FREQ);
 8015c4e:	2000      	movs	r0, #0
 8015c50:	f7fe fa28 	bl	80140a4 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 8015c54:	e010      	b.n	8015c78 <HAL_LTDC_LineEventCallback+0x84>
        }
        else
        {
            //exiting active area
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_active_line);
 8015c56:	4b0b      	ldr	r3, [pc, #44]	; (8015c84 <HAL_LTDC_LineEventCallback+0x90>)
 8015c58:	881b      	ldrh	r3, [r3, #0]
 8015c5a:	4619      	mov	r1, r3
 8015c5c:	6878      	ldr	r0, [r7, #4]
 8015c5e:	f7f1 ff2d 	bl	8007abc <HAL_LTDC_ProgramLineEvent>

            // Signal to the framework that display update has finished.
            HAL::getInstance()->frontPorchEntered();
 8015c62:	f7fd f817 	bl	8012c94 <_ZN8touchgfx3HAL11getInstanceEv>
 8015c66:	4603      	mov	r3, r0
 8015c68:	4618      	mov	r0, r3
 8015c6a:	f7ff fce5 	bl	8015638 <_ZN8touchgfx3HAL17frontPorchEnteredEv>
            GPIO::clear(GPIO::VSYNC_FREQ);
 8015c6e:	2000      	movs	r0, #0
 8015c70:	f7fe fa23 	bl	80140ba <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 8015c74:	e000      	b.n	8015c78 <HAL_LTDC_LineEventCallback+0x84>
            return;
 8015c76:	bf00      	nop
        }
    }
 8015c78:	3708      	adds	r7, #8
 8015c7a:	46bd      	mov	sp, r7
 8015c7c:	bd80      	pop	{r7, pc}
 8015c7e:	bf00      	nop
 8015c80:	50001000 	.word	0x50001000
 8015c84:	20006de6 	.word	0x20006de6
 8015c88:	20006de8 	.word	0x20006de8

08015c8c <_Z41__static_initialization_and_destruction_0ii>:
}
 8015c8c:	b590      	push	{r4, r7, lr}
 8015c8e:	b085      	sub	sp, #20
 8015c90:	af02      	add	r7, sp, #8
 8015c92:	6078      	str	r0, [r7, #4]
 8015c94:	6039      	str	r1, [r7, #0]
 8015c96:	687b      	ldr	r3, [r7, #4]
 8015c98:	2b01      	cmp	r3, #1
 8015c9a:	f040 81d3 	bne.w	8016044 <_Z41__static_initialization_and_destruction_0ii+0x3b8>
 8015c9e:	683b      	ldr	r3, [r7, #0]
 8015ca0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8015ca4:	4293      	cmp	r3, r2
 8015ca6:	f040 81cd 	bne.w	8016044 <_Z41__static_initialization_and_destruction_0ii+0x3b8>
};
 8015caa:	4cda      	ldr	r4, [pc, #872]	; (8016014 <_Z41__static_initialization_and_destruction_0ii+0x388>)
 8015cac:	2301      	movs	r3, #1
 8015cae:	7023      	strb	r3, [r4, #0]
 8015cb0:	1ca0      	adds	r0, r4, #2
 8015cb2:	2328      	movs	r3, #40	; 0x28
 8015cb4:	9300      	str	r3, [sp, #0]
 8015cb6:	231a      	movs	r3, #26
 8015cb8:	223d      	movs	r2, #61	; 0x3d
 8015cba:	2107      	movs	r1, #7
 8015cbc:	f7fc ff96 	bl	8012bec <_ZN8touchgfx4RectC1Essss>
 8015cc0:	2328      	movs	r3, #40	; 0x28
 8015cc2:	8163      	strh	r3, [r4, #10]
 8015cc4:	340c      	adds	r4, #12
 8015cc6:	2302      	movs	r3, #2
 8015cc8:	7023      	strb	r3, [r4, #0]
 8015cca:	1ca0      	adds	r0, r4, #2
 8015ccc:	2328      	movs	r3, #40	; 0x28
 8015cce:	9300      	str	r3, [sp, #0]
 8015cd0:	231a      	movs	r3, #26
 8015cd2:	223d      	movs	r2, #61	; 0x3d
 8015cd4:	2123      	movs	r1, #35	; 0x23
 8015cd6:	f7fc ff89 	bl	8012bec <_ZN8touchgfx4RectC1Essss>
 8015cda:	2328      	movs	r3, #40	; 0x28
 8015cdc:	8163      	strh	r3, [r4, #10]
 8015cde:	340c      	adds	r4, #12
 8015ce0:	2303      	movs	r3, #3
 8015ce2:	7023      	strb	r3, [r4, #0]
 8015ce4:	1ca0      	adds	r0, r4, #2
 8015ce6:	2328      	movs	r3, #40	; 0x28
 8015ce8:	9300      	str	r3, [sp, #0]
 8015cea:	231a      	movs	r3, #26
 8015cec:	223d      	movs	r2, #61	; 0x3d
 8015cee:	213f      	movs	r1, #63	; 0x3f
 8015cf0:	f7fc ff7c 	bl	8012bec <_ZN8touchgfx4RectC1Essss>
 8015cf4:	2328      	movs	r3, #40	; 0x28
 8015cf6:	8163      	strh	r3, [r4, #10]
 8015cf8:	340c      	adds	r4, #12
 8015cfa:	2304      	movs	r3, #4
 8015cfc:	7023      	strb	r3, [r4, #0]
 8015cfe:	1ca0      	adds	r0, r4, #2
 8015d00:	2328      	movs	r3, #40	; 0x28
 8015d02:	9300      	str	r3, [sp, #0]
 8015d04:	231a      	movs	r3, #26
 8015d06:	223d      	movs	r2, #61	; 0x3d
 8015d08:	215b      	movs	r1, #91	; 0x5b
 8015d0a:	f7fc ff6f 	bl	8012bec <_ZN8touchgfx4RectC1Essss>
 8015d0e:	2328      	movs	r3, #40	; 0x28
 8015d10:	8163      	strh	r3, [r4, #10]
 8015d12:	340c      	adds	r4, #12
 8015d14:	2305      	movs	r3, #5
 8015d16:	7023      	strb	r3, [r4, #0]
 8015d18:	1ca0      	adds	r0, r4, #2
 8015d1a:	2328      	movs	r3, #40	; 0x28
 8015d1c:	9300      	str	r3, [sp, #0]
 8015d1e:	231a      	movs	r3, #26
 8015d20:	223d      	movs	r2, #61	; 0x3d
 8015d22:	2177      	movs	r1, #119	; 0x77
 8015d24:	f7fc ff62 	bl	8012bec <_ZN8touchgfx4RectC1Essss>
 8015d28:	2328      	movs	r3, #40	; 0x28
 8015d2a:	8163      	strh	r3, [r4, #10]
 8015d2c:	340c      	adds	r4, #12
 8015d2e:	2306      	movs	r3, #6
 8015d30:	7023      	strb	r3, [r4, #0]
 8015d32:	1ca0      	adds	r0, r4, #2
 8015d34:	2328      	movs	r3, #40	; 0x28
 8015d36:	9300      	str	r3, [sp, #0]
 8015d38:	231a      	movs	r3, #26
 8015d3a:	223d      	movs	r2, #61	; 0x3d
 8015d3c:	2193      	movs	r1, #147	; 0x93
 8015d3e:	f7fc ff55 	bl	8012bec <_ZN8touchgfx4RectC1Essss>
 8015d42:	2328      	movs	r3, #40	; 0x28
 8015d44:	8163      	strh	r3, [r4, #10]
 8015d46:	340c      	adds	r4, #12
 8015d48:	2307      	movs	r3, #7
 8015d4a:	7023      	strb	r3, [r4, #0]
 8015d4c:	1ca0      	adds	r0, r4, #2
 8015d4e:	2328      	movs	r3, #40	; 0x28
 8015d50:	9300      	str	r3, [sp, #0]
 8015d52:	231a      	movs	r3, #26
 8015d54:	223d      	movs	r2, #61	; 0x3d
 8015d56:	21af      	movs	r1, #175	; 0xaf
 8015d58:	f7fc ff48 	bl	8012bec <_ZN8touchgfx4RectC1Essss>
 8015d5c:	2328      	movs	r3, #40	; 0x28
 8015d5e:	8163      	strh	r3, [r4, #10]
 8015d60:	340c      	adds	r4, #12
 8015d62:	2308      	movs	r3, #8
 8015d64:	7023      	strb	r3, [r4, #0]
 8015d66:	1ca0      	adds	r0, r4, #2
 8015d68:	2328      	movs	r3, #40	; 0x28
 8015d6a:	9300      	str	r3, [sp, #0]
 8015d6c:	231a      	movs	r3, #26
 8015d6e:	223d      	movs	r2, #61	; 0x3d
 8015d70:	21cb      	movs	r1, #203	; 0xcb
 8015d72:	f7fc ff3b 	bl	8012bec <_ZN8touchgfx4RectC1Essss>
 8015d76:	2328      	movs	r3, #40	; 0x28
 8015d78:	8163      	strh	r3, [r4, #10]
 8015d7a:	340c      	adds	r4, #12
 8015d7c:	2309      	movs	r3, #9
 8015d7e:	7023      	strb	r3, [r4, #0]
 8015d80:	1ca0      	adds	r0, r4, #2
 8015d82:	2328      	movs	r3, #40	; 0x28
 8015d84:	9300      	str	r3, [sp, #0]
 8015d86:	231a      	movs	r3, #26
 8015d88:	223d      	movs	r2, #61	; 0x3d
 8015d8a:	21e7      	movs	r1, #231	; 0xe7
 8015d8c:	f7fc ff2e 	bl	8012bec <_ZN8touchgfx4RectC1Essss>
 8015d90:	2328      	movs	r3, #40	; 0x28
 8015d92:	8163      	strh	r3, [r4, #10]
 8015d94:	340c      	adds	r4, #12
 8015d96:	230a      	movs	r3, #10
 8015d98:	7023      	strb	r3, [r4, #0]
 8015d9a:	1ca0      	adds	r0, r4, #2
 8015d9c:	2328      	movs	r3, #40	; 0x28
 8015d9e:	9300      	str	r3, [sp, #0]
 8015da0:	231a      	movs	r3, #26
 8015da2:	223d      	movs	r2, #61	; 0x3d
 8015da4:	f240 1103 	movw	r1, #259	; 0x103
 8015da8:	f7fc ff20 	bl	8012bec <_ZN8touchgfx4RectC1Essss>
 8015dac:	2328      	movs	r3, #40	; 0x28
 8015dae:	8163      	strh	r3, [r4, #10]
 8015db0:	340c      	adds	r4, #12
 8015db2:	230b      	movs	r3, #11
 8015db4:	7023      	strb	r3, [r4, #0]
 8015db6:	1ca0      	adds	r0, r4, #2
 8015db8:	2328      	movs	r3, #40	; 0x28
 8015dba:	9300      	str	r3, [sp, #0]
 8015dbc:	231a      	movs	r3, #26
 8015dbe:	223d      	movs	r2, #61	; 0x3d
 8015dc0:	f240 111f 	movw	r1, #287	; 0x11f
 8015dc4:	f7fc ff12 	bl	8012bec <_ZN8touchgfx4RectC1Essss>
 8015dc8:	2328      	movs	r3, #40	; 0x28
 8015dca:	8163      	strh	r3, [r4, #10]
 8015dcc:	340c      	adds	r4, #12
 8015dce:	230c      	movs	r3, #12
 8015dd0:	7023      	strb	r3, [r4, #0]
 8015dd2:	1ca0      	adds	r0, r4, #2
 8015dd4:	2328      	movs	r3, #40	; 0x28
 8015dd6:	9300      	str	r3, [sp, #0]
 8015dd8:	231a      	movs	r3, #26
 8015dda:	2269      	movs	r2, #105	; 0x69
 8015ddc:	2107      	movs	r1, #7
 8015dde:	f7fc ff05 	bl	8012bec <_ZN8touchgfx4RectC1Essss>
 8015de2:	2328      	movs	r3, #40	; 0x28
 8015de4:	8163      	strh	r3, [r4, #10]
 8015de6:	340c      	adds	r4, #12
 8015de8:	230d      	movs	r3, #13
 8015dea:	7023      	strb	r3, [r4, #0]
 8015dec:	1ca0      	adds	r0, r4, #2
 8015dee:	2328      	movs	r3, #40	; 0x28
 8015df0:	9300      	str	r3, [sp, #0]
 8015df2:	231a      	movs	r3, #26
 8015df4:	2269      	movs	r2, #105	; 0x69
 8015df6:	2123      	movs	r1, #35	; 0x23
 8015df8:	f7fc fef8 	bl	8012bec <_ZN8touchgfx4RectC1Essss>
 8015dfc:	2328      	movs	r3, #40	; 0x28
 8015dfe:	8163      	strh	r3, [r4, #10]
 8015e00:	340c      	adds	r4, #12
 8015e02:	230e      	movs	r3, #14
 8015e04:	7023      	strb	r3, [r4, #0]
 8015e06:	1ca0      	adds	r0, r4, #2
 8015e08:	2328      	movs	r3, #40	; 0x28
 8015e0a:	9300      	str	r3, [sp, #0]
 8015e0c:	231a      	movs	r3, #26
 8015e0e:	2269      	movs	r2, #105	; 0x69
 8015e10:	213f      	movs	r1, #63	; 0x3f
 8015e12:	f7fc feeb 	bl	8012bec <_ZN8touchgfx4RectC1Essss>
 8015e16:	2328      	movs	r3, #40	; 0x28
 8015e18:	8163      	strh	r3, [r4, #10]
 8015e1a:	340c      	adds	r4, #12
 8015e1c:	230f      	movs	r3, #15
 8015e1e:	7023      	strb	r3, [r4, #0]
 8015e20:	1ca0      	adds	r0, r4, #2
 8015e22:	2328      	movs	r3, #40	; 0x28
 8015e24:	9300      	str	r3, [sp, #0]
 8015e26:	231a      	movs	r3, #26
 8015e28:	2269      	movs	r2, #105	; 0x69
 8015e2a:	215b      	movs	r1, #91	; 0x5b
 8015e2c:	f7fc fede 	bl	8012bec <_ZN8touchgfx4RectC1Essss>
 8015e30:	2328      	movs	r3, #40	; 0x28
 8015e32:	8163      	strh	r3, [r4, #10]
 8015e34:	340c      	adds	r4, #12
 8015e36:	2310      	movs	r3, #16
 8015e38:	7023      	strb	r3, [r4, #0]
 8015e3a:	1ca0      	adds	r0, r4, #2
 8015e3c:	2328      	movs	r3, #40	; 0x28
 8015e3e:	9300      	str	r3, [sp, #0]
 8015e40:	231a      	movs	r3, #26
 8015e42:	2269      	movs	r2, #105	; 0x69
 8015e44:	2177      	movs	r1, #119	; 0x77
 8015e46:	f7fc fed1 	bl	8012bec <_ZN8touchgfx4RectC1Essss>
 8015e4a:	2328      	movs	r3, #40	; 0x28
 8015e4c:	8163      	strh	r3, [r4, #10]
 8015e4e:	340c      	adds	r4, #12
 8015e50:	2311      	movs	r3, #17
 8015e52:	7023      	strb	r3, [r4, #0]
 8015e54:	1ca0      	adds	r0, r4, #2
 8015e56:	2328      	movs	r3, #40	; 0x28
 8015e58:	9300      	str	r3, [sp, #0]
 8015e5a:	231a      	movs	r3, #26
 8015e5c:	2269      	movs	r2, #105	; 0x69
 8015e5e:	2193      	movs	r1, #147	; 0x93
 8015e60:	f7fc fec4 	bl	8012bec <_ZN8touchgfx4RectC1Essss>
 8015e64:	2328      	movs	r3, #40	; 0x28
 8015e66:	8163      	strh	r3, [r4, #10]
 8015e68:	340c      	adds	r4, #12
 8015e6a:	2312      	movs	r3, #18
 8015e6c:	7023      	strb	r3, [r4, #0]
 8015e6e:	1ca0      	adds	r0, r4, #2
 8015e70:	2328      	movs	r3, #40	; 0x28
 8015e72:	9300      	str	r3, [sp, #0]
 8015e74:	231a      	movs	r3, #26
 8015e76:	2269      	movs	r2, #105	; 0x69
 8015e78:	21af      	movs	r1, #175	; 0xaf
 8015e7a:	f7fc feb7 	bl	8012bec <_ZN8touchgfx4RectC1Essss>
 8015e7e:	2328      	movs	r3, #40	; 0x28
 8015e80:	8163      	strh	r3, [r4, #10]
 8015e82:	340c      	adds	r4, #12
 8015e84:	2313      	movs	r3, #19
 8015e86:	7023      	strb	r3, [r4, #0]
 8015e88:	1ca0      	adds	r0, r4, #2
 8015e8a:	2328      	movs	r3, #40	; 0x28
 8015e8c:	9300      	str	r3, [sp, #0]
 8015e8e:	231a      	movs	r3, #26
 8015e90:	2269      	movs	r2, #105	; 0x69
 8015e92:	21cb      	movs	r1, #203	; 0xcb
 8015e94:	f7fc feaa 	bl	8012bec <_ZN8touchgfx4RectC1Essss>
 8015e98:	2328      	movs	r3, #40	; 0x28
 8015e9a:	8163      	strh	r3, [r4, #10]
 8015e9c:	340c      	adds	r4, #12
 8015e9e:	2314      	movs	r3, #20
 8015ea0:	7023      	strb	r3, [r4, #0]
 8015ea2:	1ca0      	adds	r0, r4, #2
 8015ea4:	2328      	movs	r3, #40	; 0x28
 8015ea6:	9300      	str	r3, [sp, #0]
 8015ea8:	231a      	movs	r3, #26
 8015eaa:	2269      	movs	r2, #105	; 0x69
 8015eac:	21e7      	movs	r1, #231	; 0xe7
 8015eae:	f7fc fe9d 	bl	8012bec <_ZN8touchgfx4RectC1Essss>
 8015eb2:	2328      	movs	r3, #40	; 0x28
 8015eb4:	8163      	strh	r3, [r4, #10]
 8015eb6:	340c      	adds	r4, #12
 8015eb8:	2315      	movs	r3, #21
 8015eba:	7023      	strb	r3, [r4, #0]
 8015ebc:	1ca0      	adds	r0, r4, #2
 8015ebe:	2328      	movs	r3, #40	; 0x28
 8015ec0:	9300      	str	r3, [sp, #0]
 8015ec2:	231a      	movs	r3, #26
 8015ec4:	2269      	movs	r2, #105	; 0x69
 8015ec6:	f240 1103 	movw	r1, #259	; 0x103
 8015eca:	f7fc fe8f 	bl	8012bec <_ZN8touchgfx4RectC1Essss>
 8015ece:	2328      	movs	r3, #40	; 0x28
 8015ed0:	8163      	strh	r3, [r4, #10]
 8015ed2:	340c      	adds	r4, #12
 8015ed4:	2316      	movs	r3, #22
 8015ed6:	7023      	strb	r3, [r4, #0]
 8015ed8:	1ca0      	adds	r0, r4, #2
 8015eda:	2328      	movs	r3, #40	; 0x28
 8015edc:	9300      	str	r3, [sp, #0]
 8015ede:	231a      	movs	r3, #26
 8015ee0:	2269      	movs	r2, #105	; 0x69
 8015ee2:	f240 111f 	movw	r1, #287	; 0x11f
 8015ee6:	f7fc fe81 	bl	8012bec <_ZN8touchgfx4RectC1Essss>
 8015eea:	2328      	movs	r3, #40	; 0x28
 8015eec:	8163      	strh	r3, [r4, #10]
 8015eee:	340c      	adds	r4, #12
 8015ef0:	2317      	movs	r3, #23
 8015ef2:	7023      	strb	r3, [r4, #0]
 8015ef4:	1ca0      	adds	r0, r4, #2
 8015ef6:	2328      	movs	r3, #40	; 0x28
 8015ef8:	9300      	str	r3, [sp, #0]
 8015efa:	231a      	movs	r3, #26
 8015efc:	2295      	movs	r2, #149	; 0x95
 8015efe:	213f      	movs	r1, #63	; 0x3f
 8015f00:	f7fc fe74 	bl	8012bec <_ZN8touchgfx4RectC1Essss>
 8015f04:	2328      	movs	r3, #40	; 0x28
 8015f06:	8163      	strh	r3, [r4, #10]
 8015f08:	340c      	adds	r4, #12
 8015f0a:	2318      	movs	r3, #24
 8015f0c:	7023      	strb	r3, [r4, #0]
 8015f0e:	1ca0      	adds	r0, r4, #2
 8015f10:	2328      	movs	r3, #40	; 0x28
 8015f12:	9300      	str	r3, [sp, #0]
 8015f14:	231a      	movs	r3, #26
 8015f16:	2295      	movs	r2, #149	; 0x95
 8015f18:	215b      	movs	r1, #91	; 0x5b
 8015f1a:	f7fc fe67 	bl	8012bec <_ZN8touchgfx4RectC1Essss>
 8015f1e:	2328      	movs	r3, #40	; 0x28
 8015f20:	8163      	strh	r3, [r4, #10]
 8015f22:	340c      	adds	r4, #12
 8015f24:	2319      	movs	r3, #25
 8015f26:	7023      	strb	r3, [r4, #0]
 8015f28:	1ca0      	adds	r0, r4, #2
 8015f2a:	2328      	movs	r3, #40	; 0x28
 8015f2c:	9300      	str	r3, [sp, #0]
 8015f2e:	231a      	movs	r3, #26
 8015f30:	2295      	movs	r2, #149	; 0x95
 8015f32:	2177      	movs	r1, #119	; 0x77
 8015f34:	f7fc fe5a 	bl	8012bec <_ZN8touchgfx4RectC1Essss>
 8015f38:	2328      	movs	r3, #40	; 0x28
 8015f3a:	8163      	strh	r3, [r4, #10]
 8015f3c:	340c      	adds	r4, #12
 8015f3e:	231a      	movs	r3, #26
 8015f40:	7023      	strb	r3, [r4, #0]
 8015f42:	1ca0      	adds	r0, r4, #2
 8015f44:	2328      	movs	r3, #40	; 0x28
 8015f46:	9300      	str	r3, [sp, #0]
 8015f48:	231a      	movs	r3, #26
 8015f4a:	2295      	movs	r2, #149	; 0x95
 8015f4c:	2193      	movs	r1, #147	; 0x93
 8015f4e:	f7fc fe4d 	bl	8012bec <_ZN8touchgfx4RectC1Essss>
 8015f52:	2328      	movs	r3, #40	; 0x28
 8015f54:	8163      	strh	r3, [r4, #10]
 8015f56:	340c      	adds	r4, #12
 8015f58:	231b      	movs	r3, #27
 8015f5a:	7023      	strb	r3, [r4, #0]
 8015f5c:	1ca0      	adds	r0, r4, #2
 8015f5e:	2328      	movs	r3, #40	; 0x28
 8015f60:	9300      	str	r3, [sp, #0]
 8015f62:	231a      	movs	r3, #26
 8015f64:	2295      	movs	r2, #149	; 0x95
 8015f66:	21af      	movs	r1, #175	; 0xaf
 8015f68:	f7fc fe40 	bl	8012bec <_ZN8touchgfx4RectC1Essss>
 8015f6c:	2328      	movs	r3, #40	; 0x28
 8015f6e:	8163      	strh	r3, [r4, #10]
 8015f70:	340c      	adds	r4, #12
 8015f72:	231c      	movs	r3, #28
 8015f74:	7023      	strb	r3, [r4, #0]
 8015f76:	1ca0      	adds	r0, r4, #2
 8015f78:	2328      	movs	r3, #40	; 0x28
 8015f7a:	9300      	str	r3, [sp, #0]
 8015f7c:	231a      	movs	r3, #26
 8015f7e:	2295      	movs	r2, #149	; 0x95
 8015f80:	21cb      	movs	r1, #203	; 0xcb
 8015f82:	f7fc fe33 	bl	8012bec <_ZN8touchgfx4RectC1Essss>
 8015f86:	2328      	movs	r3, #40	; 0x28
 8015f88:	8163      	strh	r3, [r4, #10]
 8015f8a:	340c      	adds	r4, #12
 8015f8c:	231d      	movs	r3, #29
 8015f8e:	7023      	strb	r3, [r4, #0]
 8015f90:	1ca0      	adds	r0, r4, #2
 8015f92:	2328      	movs	r3, #40	; 0x28
 8015f94:	9300      	str	r3, [sp, #0]
 8015f96:	231a      	movs	r3, #26
 8015f98:	2295      	movs	r2, #149	; 0x95
 8015f9a:	21e7      	movs	r1, #231	; 0xe7
 8015f9c:	f7fc fe26 	bl	8012bec <_ZN8touchgfx4RectC1Essss>
 8015fa0:	2328      	movs	r3, #40	; 0x28
 8015fa2:	8163      	strh	r3, [r4, #10]
 8015fa4:	340c      	adds	r4, #12
 8015fa6:	231e      	movs	r3, #30
 8015fa8:	7023      	strb	r3, [r4, #0]
 8015faa:	1ca0      	adds	r0, r4, #2
 8015fac:	2328      	movs	r3, #40	; 0x28
 8015fae:	9300      	str	r3, [sp, #0]
 8015fb0:	23fc      	movs	r3, #252	; 0xfc
 8015fb2:	22c1      	movs	r2, #193	; 0xc1
 8015fb4:	213e      	movs	r1, #62	; 0x3e
 8015fb6:	f7fc fe19 	bl	8012bec <_ZN8touchgfx4RectC1Essss>
 8015fba:	232b      	movs	r3, #43	; 0x2b
 8015fbc:	8163      	strh	r3, [r4, #10]
};
 8015fbe:	4c16      	ldr	r4, [pc, #88]	; (8016018 <_Z41__static_initialization_and_destruction_0ii+0x38c>)
 8015fc0:	4620      	mov	r0, r4
 8015fc2:	2328      	movs	r3, #40	; 0x28
 8015fc4:	9300      	str	r3, [sp, #0]
 8015fc6:	2338      	movs	r3, #56	; 0x38
 8015fc8:	2295      	movs	r2, #149	; 0x95
 8015fca:	2105      	movs	r1, #5
 8015fcc:	f7fc fe0e 	bl	8012bec <_ZN8touchgfx4RectC1Essss>
 8015fd0:	2300      	movs	r3, #0
 8015fd2:	60a3      	str	r3, [r4, #8]
 8015fd4:	232a      	movs	r3, #42	; 0x2a
 8015fd6:	81a3      	strh	r3, [r4, #12]
 8015fd8:	3410      	adds	r4, #16
 8015fda:	4620      	mov	r0, r4
 8015fdc:	2328      	movs	r3, #40	; 0x28
 8015fde:	9300      	str	r3, [sp, #0]
 8015fe0:	2338      	movs	r3, #56	; 0x38
 8015fe2:	2295      	movs	r2, #149	; 0x95
 8015fe4:	f44f 7181 	mov.w	r1, #258	; 0x102
 8015fe8:	f7fc fe00 	bl	8012bec <_ZN8touchgfx4RectC1Essss>
 8015fec:	2300      	movs	r3, #0
 8015fee:	60a3      	str	r3, [r4, #8]
 8015ff0:	2327      	movs	r3, #39	; 0x27
 8015ff2:	81a3      	strh	r3, [r4, #12]
 8015ff4:	3410      	adds	r4, #16
 8015ff6:	4620      	mov	r0, r4
 8015ff8:	2328      	movs	r3, #40	; 0x28
 8015ffa:	9300      	str	r3, [sp, #0]
 8015ffc:	2338      	movs	r3, #56	; 0x38
 8015ffe:	22c1      	movs	r2, #193	; 0xc1
 8016000:	2105      	movs	r1, #5
 8016002:	f7fc fdf3 	bl	8012bec <_ZN8touchgfx4RectC1Essss>
 8016006:	2300      	movs	r3, #0
 8016008:	60a3      	str	r3, [r4, #8]
 801600a:	2329      	movs	r3, #41	; 0x29
 801600c:	81a3      	strh	r3, [r4, #12]
};
 801600e:	2328      	movs	r3, #40	; 0x28
 8016010:	9300      	str	r3, [sp, #0]
 8016012:	e003      	b.n	801601c <_Z41__static_initialization_and_destruction_0ii+0x390>
 8016014:	20006c4c 	.word	0x20006c4c
 8016018:	20006db4 	.word	0x20006db4
 801601c:	f44f 739a 	mov.w	r3, #308	; 0x134
 8016020:	220a      	movs	r2, #10
 8016022:	210f      	movs	r1, #15
 8016024:	480f      	ldr	r0, [pc, #60]	; (8016064 <_Z41__static_initialization_and_destruction_0ii+0x3d8>)
 8016026:	f7fc fde1 	bl	8012bec <_ZN8touchgfx4RectC1Essss>
 801602a:	2130      	movs	r1, #48	; 0x30
 801602c:	480e      	ldr	r0, [pc, #56]	; (8016068 <_Z41__static_initialization_and_destruction_0ii+0x3dc>)
 801602e:	f7fc fe1b 	bl	8012c68 <_ZN8touchgfx9TypedTextC1Et>
 8016032:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8016036:	480d      	ldr	r0, [pc, #52]	; (801606c <_Z41__static_initialization_and_destruction_0ii+0x3e0>)
 8016038:	f7fc fdb2 	bl	8012ba0 <_ZN8touchgfx9colortypeC1Em>
 801603c:	2100      	movs	r1, #0
 801603e:	480c      	ldr	r0, [pc, #48]	; (8016070 <_Z41__static_initialization_and_destruction_0ii+0x3e4>)
 8016040:	f7fc fdae 	bl	8012ba0 <_ZN8touchgfx9colortypeC1Em>
static const Keyboard::Layout layout =
 8016044:	687b      	ldr	r3, [r7, #4]
 8016046:	2b00      	cmp	r3, #0
 8016048:	d107      	bne.n	801605a <_Z41__static_initialization_and_destruction_0ii+0x3ce>
 801604a:	683b      	ldr	r3, [r7, #0]
 801604c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8016050:	4293      	cmp	r3, r2
 8016052:	d102      	bne.n	801605a <_Z41__static_initialization_and_destruction_0ii+0x3ce>
 8016054:	4807      	ldr	r0, [pc, #28]	; (8016074 <_Z41__static_initialization_and_destruction_0ii+0x3e8>)
 8016056:	f7fc fe45 	bl	8012ce4 <_ZN8touchgfx8Keyboard6LayoutD1Ev>
 801605a:	bf00      	nop
 801605c:	370c      	adds	r7, #12
 801605e:	46bd      	mov	sp, r7
 8016060:	bd90      	pop	{r4, r7, pc}
 8016062:	bf00      	nop
 8016064:	2000011e 	.word	0x2000011e
 8016068:	20000128 	.word	0x20000128
 801606c:	20000130 	.word	0x20000130
 8016070:	20000138 	.word	0x20000138
 8016074:	2000010c 	.word	0x2000010c

08016078 <_GLOBAL__sub_I__ZN20TouchGFXGeneratedHAL10initializeEv>:
 8016078:	b580      	push	{r7, lr}
 801607a:	af00      	add	r7, sp, #0
 801607c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8016080:	2001      	movs	r0, #1
 8016082:	f7ff fe03 	bl	8015c8c <_Z41__static_initialization_and_destruction_0ii>
 8016086:	bd80      	pop	{r7, pc}

08016088 <_GLOBAL__sub_D__ZN20TouchGFXGeneratedHAL10initializeEv>:
 8016088:	b580      	push	{r7, lr}
 801608a:	af00      	add	r7, sp, #0
 801608c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8016090:	2000      	movs	r0, #0
 8016092:	f7ff fdfb 	bl	8015c8c <_Z41__static_initialization_and_destruction_0ii>
 8016096:	bd80      	pop	{r7, pc}

08016098 <_ZN8touchgfx4RectaNERKS0_>:
 8016098:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801609c:	f9b1 7000 	ldrsh.w	r7, [r1]
 80160a0:	888c      	ldrh	r4, [r1, #4]
 80160a2:	f9b0 9000 	ldrsh.w	r9, [r0]
 80160a6:	443c      	add	r4, r7
 80160a8:	b2a4      	uxth	r4, r4
 80160aa:	fa0f f884 	sxth.w	r8, r4
 80160ae:	45c1      	cmp	r9, r8
 80160b0:	da2f      	bge.n	8016112 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 80160b2:	8882      	ldrh	r2, [r0, #4]
 80160b4:	444a      	add	r2, r9
 80160b6:	b292      	uxth	r2, r2
 80160b8:	fa0f fe82 	sxth.w	lr, r2
 80160bc:	4577      	cmp	r7, lr
 80160be:	da28      	bge.n	8016112 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 80160c0:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
 80160c4:	88cb      	ldrh	r3, [r1, #6]
 80160c6:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 80160ca:	442b      	add	r3, r5
 80160cc:	b21b      	sxth	r3, r3
 80160ce:	429e      	cmp	r6, r3
 80160d0:	da1f      	bge.n	8016112 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 80160d2:	88c3      	ldrh	r3, [r0, #6]
 80160d4:	4433      	add	r3, r6
 80160d6:	b29b      	uxth	r3, r3
 80160d8:	fa0f fc83 	sxth.w	ip, r3
 80160dc:	4565      	cmp	r5, ip
 80160de:	da18      	bge.n	8016112 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 80160e0:	454f      	cmp	r7, r9
 80160e2:	bfb8      	it	lt
 80160e4:	464f      	movlt	r7, r9
 80160e6:	42b5      	cmp	r5, r6
 80160e8:	bfb8      	it	lt
 80160ea:	4635      	movlt	r5, r6
 80160ec:	45f0      	cmp	r8, lr
 80160ee:	bfd8      	it	le
 80160f0:	4622      	movle	r2, r4
 80160f2:	1bd2      	subs	r2, r2, r7
 80160f4:	8082      	strh	r2, [r0, #4]
 80160f6:	884a      	ldrh	r2, [r1, #2]
 80160f8:	88c9      	ldrh	r1, [r1, #6]
 80160fa:	8007      	strh	r7, [r0, #0]
 80160fc:	440a      	add	r2, r1
 80160fe:	8045      	strh	r5, [r0, #2]
 8016100:	b292      	uxth	r2, r2
 8016102:	b211      	sxth	r1, r2
 8016104:	458c      	cmp	ip, r1
 8016106:	bfa8      	it	ge
 8016108:	4613      	movge	r3, r2
 801610a:	1b5b      	subs	r3, r3, r5
 801610c:	80c3      	strh	r3, [r0, #6]
 801610e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016112:	2300      	movs	r3, #0
 8016114:	8003      	strh	r3, [r0, #0]
 8016116:	8043      	strh	r3, [r0, #2]
 8016118:	8083      	strh	r3, [r0, #4]
 801611a:	80c3      	strh	r3, [r0, #6]
 801611c:	e7f7      	b.n	801610e <_ZN8touchgfx4RectaNERKS0_+0x76>

0801611e <_ZNK8touchgfx4Rect7isEmptyEv>:
 801611e:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8016122:	2b00      	cmp	r3, #0
 8016124:	dd06      	ble.n	8016134 <_ZNK8touchgfx4Rect7isEmptyEv+0x16>
 8016126:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 801612a:	2800      	cmp	r0, #0
 801612c:	bfcc      	ite	gt
 801612e:	2000      	movgt	r0, #0
 8016130:	2001      	movle	r0, #1
 8016132:	4770      	bx	lr
 8016134:	2001      	movs	r0, #1
 8016136:	4770      	bx	lr

08016138 <_ZNK8touchgfx10ClickEvent12getEventTypeEv>:
 8016138:	2000      	movs	r0, #0
 801613a:	4770      	bx	lr

0801613c <_ZNK8touchgfx9DragEvent12getEventTypeEv>:
 801613c:	2001      	movs	r0, #1
 801613e:	4770      	bx	lr

08016140 <_ZN8touchgfx9DragEventD1Ev>:
 8016140:	4770      	bx	lr

08016142 <_ZN8touchgfx10ClickEventD1Ev>:
 8016142:	4770      	bx	lr

08016144 <_ZN8touchgfx10ClickEventD0Ev>:
 8016144:	b510      	push	{r4, lr}
 8016146:	4604      	mov	r4, r0
 8016148:	210c      	movs	r1, #12
 801614a:	f005 fa41 	bl	801b5d0 <_ZdlPvj>
 801614e:	4620      	mov	r0, r4
 8016150:	bd10      	pop	{r4, pc}

08016152 <_ZN8touchgfx9DragEventD0Ev>:
 8016152:	b510      	push	{r4, lr}
 8016154:	4604      	mov	r4, r0
 8016156:	2110      	movs	r1, #16
 8016158:	f005 fa3a 	bl	801b5d0 <_ZdlPvj>
 801615c:	4620      	mov	r0, r4
 801615e:	bd10      	pop	{r4, pc}

08016160 <_ZN8touchgfx3HAL17getTFTCurrentLineEv>:
 8016160:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8016164:	4770      	bx	lr

08016166 <_ZN8touchgfx3HAL15InvalidateCacheEv>:
 8016166:	4770      	bx	lr

08016168 <_ZN8touchgfx3HAL10FlushCacheEv>:
 8016168:	4770      	bx	lr

0801616a <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEt>:
 801616a:	6803      	ldr	r3, [r0, #0]
 801616c:	b513      	push	{r0, r1, r4, lr}
 801616e:	f8d3 40a8 	ldr.w	r4, [r3, #168]	; 0xa8
 8016172:	2300      	movs	r3, #0
 8016174:	e9cd 3300 	strd	r3, r3, [sp]
 8016178:	466b      	mov	r3, sp
 801617a:	47a0      	blx	r4
 801617c:	b002      	add	sp, #8
 801617e:	bd10      	pop	{r4, pc}

08016180 <_ZN8touchgfx3HAL16flushFrameBufferEv>:
 8016180:	2301      	movs	r3, #1
 8016182:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
 8016186:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
 801618a:	4770      	bx	lr

0801618c <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>:
 801618c:	2301      	movs	r3, #1
 801618e:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
 8016192:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
 8016196:	4770      	bx	lr

08016198 <_ZN8touchgfx3HAL17allowDMATransfersEv>:
 8016198:	6843      	ldr	r3, [r0, #4]
 801619a:	2201      	movs	r2, #1
 801619c:	725a      	strb	r2, [r3, #9]
 801619e:	6840      	ldr	r0, [r0, #4]
 80161a0:	6803      	ldr	r3, [r0, #0]
 80161a2:	691b      	ldr	r3, [r3, #16]
 80161a4:	4718      	bx	r3

080161a6 <_ZN8touchgfx3HAL8flushDMAEv>:
 80161a6:	6840      	ldr	r0, [r0, #4]
 80161a8:	6803      	ldr	r3, [r0, #0]
 80161aa:	689b      	ldr	r3, [r3, #8]
 80161ac:	4718      	bx	r3

080161ae <_ZN8touchgfx3HAL8blitCopyEPKtttttthbtNS_6Bitmap12BitmapFormatES4_b>:
 80161ae:	b530      	push	{r4, r5, lr}
 80161b0:	b08b      	sub	sp, #44	; 0x2c
 80161b2:	6804      	ldr	r4, [r0, #0]
 80161b4:	f89d 5058 	ldrb.w	r5, [sp, #88]	; 0x58
 80161b8:	9509      	str	r5, [sp, #36]	; 0x24
 80161ba:	f89d 5054 	ldrb.w	r5, [sp, #84]	; 0x54
 80161be:	9508      	str	r5, [sp, #32]
 80161c0:	f89d 5050 	ldrb.w	r5, [sp, #80]	; 0x50
 80161c4:	9507      	str	r5, [sp, #28]
 80161c6:	f8bd 504c 	ldrh.w	r5, [sp, #76]	; 0x4c
 80161ca:	9506      	str	r5, [sp, #24]
 80161cc:	f89d 5048 	ldrb.w	r5, [sp, #72]	; 0x48
 80161d0:	9505      	str	r5, [sp, #20]
 80161d2:	f89d 5044 	ldrb.w	r5, [sp, #68]	; 0x44
 80161d6:	9504      	str	r5, [sp, #16]
 80161d8:	f8bd 5040 	ldrh.w	r5, [sp, #64]	; 0x40
 80161dc:	9503      	str	r5, [sp, #12]
 80161de:	f8bd 503c 	ldrh.w	r5, [sp, #60]	; 0x3c
 80161e2:	9502      	str	r5, [sp, #8]
 80161e4:	f8bd 5038 	ldrh.w	r5, [sp, #56]	; 0x38
 80161e8:	e9cd 3500 	strd	r3, r5, [sp]
 80161ec:	4613      	mov	r3, r2
 80161ee:	6be4      	ldr	r4, [r4, #60]	; 0x3c
 80161f0:	2200      	movs	r2, #0
 80161f2:	47a0      	blx	r4
 80161f4:	b00b      	add	sp, #44	; 0x2c
 80161f6:	bd30      	pop	{r4, r5, pc}

080161f8 <_ZN8touchgfx3HAL10beginFrameEv>:
 80161f8:	4b04      	ldr	r3, [pc, #16]	; (801620c <_ZN8touchgfx3HAL10beginFrameEv+0x14>)
 80161fa:	781b      	ldrb	r3, [r3, #0]
 80161fc:	b123      	cbz	r3, 8016208 <_ZN8touchgfx3HAL10beginFrameEv+0x10>
 80161fe:	f890 006a 	ldrb.w	r0, [r0, #106]	; 0x6a
 8016202:	f080 0001 	eor.w	r0, r0, #1
 8016206:	4770      	bx	lr
 8016208:	2001      	movs	r0, #1
 801620a:	4770      	bx	lr
 801620c:	20006df4 	.word	0x20006df4

08016210 <_ZN8touchgfx3HAL8endFrameEv>:
 8016210:	b510      	push	{r4, lr}
 8016212:	4604      	mov	r4, r0
 8016214:	6840      	ldr	r0, [r0, #4]
 8016216:	6803      	ldr	r3, [r0, #0]
 8016218:	689b      	ldr	r3, [r3, #8]
 801621a:	4798      	blx	r3
 801621c:	f894 3069 	ldrb.w	r3, [r4, #105]	; 0x69
 8016220:	b113      	cbz	r3, 8016228 <_ZN8touchgfx3HAL8endFrameEv+0x18>
 8016222:	2301      	movs	r3, #1
 8016224:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
 8016228:	bd10      	pop	{r4, pc}

0801622a <_ZN8touchgfx3HAL10initializeEv>:
 801622a:	b510      	push	{r4, lr}
 801622c:	4604      	mov	r4, r0
 801622e:	f7fe f97f 	bl	8014530 <_ZN8touchgfx10OSWrappers10initializeEv>
 8016232:	6860      	ldr	r0, [r4, #4]
 8016234:	6803      	ldr	r3, [r0, #0]
 8016236:	68db      	ldr	r3, [r3, #12]
 8016238:	4798      	blx	r3
 801623a:	68e0      	ldr	r0, [r4, #12]
 801623c:	6803      	ldr	r3, [r0, #0]
 801623e:	689b      	ldr	r3, [r3, #8]
 8016240:	4798      	blx	r3
 8016242:	6823      	ldr	r3, [r4, #0]
 8016244:	4620      	mov	r0, r4
 8016246:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8016248:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801624c:	4718      	bx	r3

0801624e <_ZN8touchgfx3HAL9taskEntryEv>:
 801624e:	b508      	push	{r3, lr}
 8016250:	6803      	ldr	r3, [r0, #0]
 8016252:	4604      	mov	r4, r0
 8016254:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8016258:	4798      	blx	r3
 801625a:	6823      	ldr	r3, [r4, #0]
 801625c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801625e:	4620      	mov	r0, r4
 8016260:	4798      	blx	r3
 8016262:	f7fe f9db 	bl	801461c <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
 8016266:	6823      	ldr	r3, [r4, #0]
 8016268:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801626a:	e7f8      	b.n	801625e <_ZN8touchgfx3HAL9taskEntryEv+0x10>

0801626c <_ZN8touchgfx3HAL4tickEv>:
 801626c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 801626e:	6803      	ldr	r3, [r0, #0]
 8016270:	4604      	mov	r4, r0
 8016272:	4d5b      	ldr	r5, [pc, #364]	; (80163e0 <_ZN8touchgfx3HAL4tickEv+0x174>)
 8016274:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8016278:	4798      	blx	r3
 801627a:	2800      	cmp	r0, #0
 801627c:	f000 8095 	beq.w	80163aa <_ZN8touchgfx3HAL4tickEv+0x13e>
 8016280:	2001      	movs	r0, #1
 8016282:	2600      	movs	r6, #0
 8016284:	f7fd ff0e 	bl	80140a4 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 8016288:	f894 3066 	ldrb.w	r3, [r4, #102]	; 0x66
 801628c:	f884 604b 	strb.w	r6, [r4, #75]	; 0x4b
 8016290:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
 8016294:	f894 3075 	ldrb.w	r3, [r4, #117]	; 0x75
 8016298:	f884 6066 	strb.w	r6, [r4, #102]	; 0x66
 801629c:	b133      	cbz	r3, 80162ac <_ZN8touchgfx3HAL4tickEv+0x40>
 801629e:	6823      	ldr	r3, [r4, #0]
 80162a0:	4620      	mov	r0, r4
 80162a2:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80162a6:	4798      	blx	r3
 80162a8:	f884 6075 	strb.w	r6, [r4, #117]	; 0x75
 80162ac:	f894 304a 	ldrb.w	r3, [r4, #74]	; 0x4a
 80162b0:	2601      	movs	r6, #1
 80162b2:	6862      	ldr	r2, [r4, #4]
 80162b4:	f083 0301 	eor.w	r3, r3, #1
 80162b8:	702e      	strb	r6, [r5, #0]
 80162ba:	7253      	strb	r3, [r2, #9]
 80162bc:	f001 fe02 	bl	8017ec4 <_ZN8touchgfx11Application11getInstanceEv>
 80162c0:	6803      	ldr	r3, [r0, #0]
 80162c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80162c4:	4798      	blx	r3
 80162c6:	f894 3067 	ldrb.w	r3, [r4, #103]	; 0x67
 80162ca:	b90b      	cbnz	r3, 80162d0 <_ZN8touchgfx3HAL4tickEv+0x64>
 80162cc:	f884 6067 	strb.w	r6, [r4, #103]	; 0x67
 80162d0:	f001 fdf8 	bl	8017ec4 <_ZN8touchgfx11Application11getInstanceEv>
 80162d4:	6803      	ldr	r3, [r0, #0]
 80162d6:	695b      	ldr	r3, [r3, #20]
 80162d8:	4798      	blx	r3
 80162da:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80162dc:	6803      	ldr	r3, [r0, #0]
 80162de:	691b      	ldr	r3, [r3, #16]
 80162e0:	4798      	blx	r3
 80162e2:	f894 3067 	ldrb.w	r3, [r4, #103]	; 0x67
 80162e6:	f894 2068 	ldrb.w	r2, [r4, #104]	; 0x68
 80162ea:	3b01      	subs	r3, #1
 80162ec:	b2db      	uxtb	r3, r3
 80162ee:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
 80162f2:	b10a      	cbz	r2, 80162f8 <_ZN8touchgfx3HAL4tickEv+0x8c>
 80162f4:	2b00      	cmp	r3, #0
 80162f6:	d1eb      	bne.n	80162d0 <_ZN8touchgfx3HAL4tickEv+0x64>
 80162f8:	4a3a      	ldr	r2, [pc, #232]	; (80163e4 <_ZN8touchgfx3HAL4tickEv+0x178>)
 80162fa:	f994 1064 	ldrsb.w	r1, [r4, #100]	; 0x64
 80162fe:	7813      	ldrb	r3, [r2, #0]
 8016300:	3301      	adds	r3, #1
 8016302:	b25b      	sxtb	r3, r3
 8016304:	4299      	cmp	r1, r3
 8016306:	7013      	strb	r3, [r2, #0]
 8016308:	dc10      	bgt.n	801632c <_ZN8touchgfx3HAL4tickEv+0xc0>
 801630a:	2300      	movs	r3, #0
 801630c:	68e0      	ldr	r0, [r4, #12]
 801630e:	a902      	add	r1, sp, #8
 8016310:	7013      	strb	r3, [r2, #0]
 8016312:	aa03      	add	r2, sp, #12
 8016314:	6803      	ldr	r3, [r0, #0]
 8016316:	68db      	ldr	r3, [r3, #12]
 8016318:	4798      	blx	r3
 801631a:	6823      	ldr	r3, [r4, #0]
 801631c:	2800      	cmp	r0, #0
 801631e:	d050      	beq.n	80163c2 <_ZN8touchgfx3HAL4tickEv+0x156>
 8016320:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8016324:	4620      	mov	r0, r4
 8016326:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 801632a:	4798      	blx	r3
 801632c:	2300      	movs	r3, #0
 801632e:	6960      	ldr	r0, [r4, #20]
 8016330:	f88d 3007 	strb.w	r3, [sp, #7]
 8016334:	b158      	cbz	r0, 801634e <_ZN8touchgfx3HAL4tickEv+0xe2>
 8016336:	6803      	ldr	r3, [r0, #0]
 8016338:	f10d 0107 	add.w	r1, sp, #7
 801633c:	68db      	ldr	r3, [r3, #12]
 801633e:	4798      	blx	r3
 8016340:	b128      	cbz	r0, 801634e <_ZN8touchgfx3HAL4tickEv+0xe2>
 8016342:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8016344:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8016348:	6803      	ldr	r3, [r0, #0]
 801634a:	68db      	ldr	r3, [r3, #12]
 801634c:	4798      	blx	r3
 801634e:	f104 001c 	add.w	r0, r4, #28
 8016352:	f005 f88d 	bl	801b470 <_ZN8touchgfx8Gestures4tickEv>
 8016356:	f894 306c 	ldrb.w	r3, [r4, #108]	; 0x6c
 801635a:	b30b      	cbz	r3, 80163a0 <_ZN8touchgfx3HAL4tickEv+0x134>
 801635c:	6920      	ldr	r0, [r4, #16]
 801635e:	6803      	ldr	r3, [r0, #0]
 8016360:	691b      	ldr	r3, [r3, #16]
 8016362:	4798      	blx	r3
 8016364:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8016366:	4606      	mov	r6, r0
 8016368:	b903      	cbnz	r3, 801636c <_ZN8touchgfx3HAL4tickEv+0x100>
 801636a:	6720      	str	r0, [r4, #112]	; 0x70
 801636c:	6f23      	ldr	r3, [r4, #112]	; 0x70
 801636e:	4a1e      	ldr	r2, [pc, #120]	; (80163e8 <_ZN8touchgfx3HAL4tickEv+0x17c>)
 8016370:	1af3      	subs	r3, r6, r3
 8016372:	4293      	cmp	r3, r2
 8016374:	d914      	bls.n	80163a0 <_ZN8touchgfx3HAL4tickEv+0x134>
 8016376:	6920      	ldr	r0, [r4, #16]
 8016378:	6803      	ldr	r3, [r0, #0]
 801637a:	699b      	ldr	r3, [r3, #24]
 801637c:	4798      	blx	r3
 801637e:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8016380:	2264      	movs	r2, #100	; 0x64
 8016382:	1af3      	subs	r3, r6, r3
 8016384:	fbb3 f3f2 	udiv	r3, r3, r2
 8016388:	fbb0 f0f3 	udiv	r0, r0, r3
 801638c:	2800      	cmp	r0, #0
 801638e:	dc1d      	bgt.n	80163cc <_ZN8touchgfx3HAL4tickEv+0x160>
 8016390:	f884 2065 	strb.w	r2, [r4, #101]	; 0x65
 8016394:	6920      	ldr	r0, [r4, #16]
 8016396:	2100      	movs	r1, #0
 8016398:	6803      	ldr	r3, [r0, #0]
 801639a:	69db      	ldr	r3, [r3, #28]
 801639c:	4798      	blx	r3
 801639e:	6726      	str	r6, [r4, #112]	; 0x70
 80163a0:	f001 fd90 	bl	8017ec4 <_ZN8touchgfx11Application11getInstanceEv>
 80163a4:	6803      	ldr	r3, [r0, #0]
 80163a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80163a8:	4798      	blx	r3
 80163aa:	6823      	ldr	r3, [r4, #0]
 80163ac:	4620      	mov	r0, r4
 80163ae:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80163b2:	4798      	blx	r3
 80163b4:	2001      	movs	r0, #1
 80163b6:	f7fd fe80 	bl	80140ba <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 80163ba:	2300      	movs	r3, #0
 80163bc:	702b      	strb	r3, [r5, #0]
 80163be:	b004      	add	sp, #16
 80163c0:	bd70      	pop	{r4, r5, r6, pc}
 80163c2:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80163c6:	4620      	mov	r0, r4
 80163c8:	4798      	blx	r3
 80163ca:	e7af      	b.n	801632c <_ZN8touchgfx3HAL4tickEv+0xc0>
 80163cc:	2863      	cmp	r0, #99	; 0x63
 80163ce:	bfcb      	itete	gt
 80163d0:	2300      	movgt	r3, #0
 80163d2:	f1c0 0064 	rsble	r0, r0, #100	; 0x64
 80163d6:	f884 3065 	strbgt.w	r3, [r4, #101]	; 0x65
 80163da:	f884 0065 	strble.w	r0, [r4, #101]	; 0x65
 80163de:	e7d9      	b.n	8016394 <_ZN8touchgfx3HAL4tickEv+0x128>
 80163e0:	20006dfc 	.word	0x20006dfc
 80163e4:	20006dfd 	.word	0x20006dfd
 80163e8:	05f5e100 	.word	0x05f5e100

080163ec <_ZN8touchgfx3HAL17unlockFrameBufferEv>:
 80163ec:	f7fe b8e2 	b.w	80145b4 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

080163f0 <_ZN8touchgfx3HAL21registerEventListenerERNS_15UIEventListenerE>:
 80163f0:	6581      	str	r1, [r0, #88]	; 0x58
 80163f2:	301c      	adds	r0, #28
 80163f4:	f005 b83a 	b.w	801b46c <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>

080163f8 <_ZN8touchgfx3HAL5touchEll>:
 80163f8:	b530      	push	{r4, r5, lr}
 80163fa:	b087      	sub	sp, #28
 80163fc:	4604      	mov	r4, r0
 80163fe:	a804      	add	r0, sp, #16
 8016400:	e9cd 1204 	strd	r1, r2, [sp, #16]
 8016404:	f001 fcb8 	bl	8017d78 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>
 8016408:	9b04      	ldr	r3, [sp, #16]
 801640a:	a906      	add	r1, sp, #24
 801640c:	a803      	add	r0, sp, #12
 801640e:	f8ad 300c 	strh.w	r3, [sp, #12]
 8016412:	9b05      	ldr	r3, [sp, #20]
 8016414:	f821 3d0a 	strh.w	r3, [r1, #-10]!
 8016418:	f001 fd00 	bl	8017e1c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>
 801641c:	f894 106b 	ldrb.w	r1, [r4, #107]	; 0x6b
 8016420:	f104 001c 	add.w	r0, r4, #28
 8016424:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 8016428:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 801642c:	b189      	cbz	r1, 8016452 <_ZN8touchgfx3HAL5touchEll+0x5a>
 801642e:	f8b4 5060 	ldrh.w	r5, [r4, #96]	; 0x60
 8016432:	9300      	str	r3, [sp, #0]
 8016434:	4613      	mov	r3, r2
 8016436:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 801643a:	462a      	mov	r2, r5
 801643c:	f005 f826 	bl	801b48c <_ZN8touchgfx8Gestures17registerDragEventEtttt>
 8016440:	b128      	cbz	r0, 801644e <_ZN8touchgfx3HAL5touchEll+0x56>
 8016442:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 8016446:	65e3      	str	r3, [r4, #92]	; 0x5c
 8016448:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 801644c:	6623      	str	r3, [r4, #96]	; 0x60
 801644e:	b007      	add	sp, #28
 8016450:	bd30      	pop	{r4, r5, pc}
 8016452:	f005 f85b 	bl	801b50c <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 8016456:	2301      	movs	r3, #1
 8016458:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
 801645c:	e7f1      	b.n	8016442 <_ZN8touchgfx3HAL5touchEll+0x4a>

0801645e <_ZN8touchgfx3HAL9blockCopyEPvPKvm>:
 801645e:	b510      	push	{r4, lr}
 8016460:	2b00      	cmp	r3, #0
 8016462:	d046      	beq.n	80164f2 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 8016464:	ea81 0002 	eor.w	r0, r1, r2
 8016468:	07c4      	lsls	r4, r0, #31
 801646a:	d508      	bpl.n	801647e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x20>
 801646c:	440b      	add	r3, r1
 801646e:	3a01      	subs	r2, #1
 8016470:	428b      	cmp	r3, r1
 8016472:	d93e      	bls.n	80164f2 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 8016474:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 8016478:	f801 0b01 	strb.w	r0, [r1], #1
 801647c:	e7f8      	b.n	8016470 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x12>
 801647e:	07d0      	lsls	r0, r2, #31
 8016480:	bf42      	ittt	mi
 8016482:	f812 0b01 	ldrbmi.w	r0, [r2], #1
 8016486:	f103 33ff 	addmi.w	r3, r3, #4294967295
 801648a:	f801 0b01 	strbmi.w	r0, [r1], #1
 801648e:	2b01      	cmp	r3, #1
 8016490:	d911      	bls.n	80164b6 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 8016492:	ea81 0402 	eor.w	r4, r1, r2
 8016496:	4610      	mov	r0, r2
 8016498:	07a4      	lsls	r4, r4, #30
 801649a:	d022      	beq.n	80164e2 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x84>
 801649c:	f023 0401 	bic.w	r4, r3, #1
 80164a0:	440c      	add	r4, r1
 80164a2:	428c      	cmp	r4, r1
 80164a4:	4602      	mov	r2, r0
 80164a6:	d904      	bls.n	80164b2 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x54>
 80164a8:	8812      	ldrh	r2, [r2, #0]
 80164aa:	3002      	adds	r0, #2
 80164ac:	f821 2b02 	strh.w	r2, [r1], #2
 80164b0:	e7f7      	b.n	80164a2 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x44>
 80164b2:	f003 0301 	and.w	r3, r3, #1
 80164b6:	f023 0003 	bic.w	r0, r3, #3
 80164ba:	4408      	add	r0, r1
 80164bc:	4288      	cmp	r0, r1
 80164be:	4614      	mov	r4, r2
 80164c0:	d904      	bls.n	80164cc <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x6e>
 80164c2:	6824      	ldr	r4, [r4, #0]
 80164c4:	3204      	adds	r2, #4
 80164c6:	f841 4b04 	str.w	r4, [r1], #4
 80164ca:	e7f7      	b.n	80164bc <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x5e>
 80164cc:	f003 0303 	and.w	r3, r3, #3
 80164d0:	3a01      	subs	r2, #1
 80164d2:	440b      	add	r3, r1
 80164d4:	428b      	cmp	r3, r1
 80164d6:	d90c      	bls.n	80164f2 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 80164d8:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 80164dc:	f801 0b01 	strb.w	r0, [r1], #1
 80164e0:	e7f8      	b.n	80164d4 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x76>
 80164e2:	0790      	lsls	r0, r2, #30
 80164e4:	d0e7      	beq.n	80164b6 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 80164e6:	f832 0b02 	ldrh.w	r0, [r2], #2
 80164ea:	3b02      	subs	r3, #2
 80164ec:	f821 0b02 	strh.w	r0, [r1], #2
 80164f0:	e7e1      	b.n	80164b6 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 80164f2:	2001      	movs	r0, #1
 80164f4:	bd10      	pop	{r4, pc}

080164f6 <_ZN8touchgfx3HAL7noTouchEv>:
 80164f6:	b510      	push	{r4, lr}
 80164f8:	f890 306b 	ldrb.w	r3, [r0, #107]	; 0x6b
 80164fc:	4604      	mov	r4, r0
 80164fe:	b153      	cbz	r3, 8016516 <_ZN8touchgfx3HAL7noTouchEv+0x20>
 8016500:	f8b0 3060 	ldrh.w	r3, [r0, #96]	; 0x60
 8016504:	2101      	movs	r1, #1
 8016506:	f8b0 205c 	ldrh.w	r2, [r0, #92]	; 0x5c
 801650a:	301c      	adds	r0, #28
 801650c:	f004 fffe 	bl	801b50c <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 8016510:	2300      	movs	r3, #0
 8016512:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
 8016516:	bd10      	pop	{r4, pc}

08016518 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt>:
 8016518:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801651c:	4604      	mov	r4, r0
 801651e:	6980      	ldr	r0, [r0, #24]
 8016520:	b085      	sub	sp, #20
 8016522:	460f      	mov	r7, r1
 8016524:	4690      	mov	r8, r2
 8016526:	4699      	mov	r9, r3
 8016528:	b930      	cbnz	r0, 8016538 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x20>
 801652a:	4b1c      	ldr	r3, [pc, #112]	; (801659c <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x84>)
 801652c:	f44f 719f 	mov.w	r1, #318	; 0x13e
 8016530:	4a1b      	ldr	r2, [pc, #108]	; (80165a0 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x88>)
 8016532:	481c      	ldr	r0, [pc, #112]	; (80165a4 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x8c>)
 8016534:	f005 f87a 	bl	801b62c <__assert_func>
 8016538:	ad04      	add	r5, sp, #16
 801653a:	2600      	movs	r6, #0
 801653c:	f845 6d04 	str.w	r6, [r5, #-4]!
 8016540:	6806      	ldr	r6, [r0, #0]
 8016542:	9501      	str	r5, [sp, #4]
 8016544:	f8bd 5030 	ldrh.w	r5, [sp, #48]	; 0x30
 8016548:	9500      	str	r5, [sp, #0]
 801654a:	6835      	ldr	r5, [r6, #0]
 801654c:	47a8      	blx	r5
 801654e:	4d16      	ldr	r5, [pc, #88]	; (80165a8 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x90>)
 8016550:	4606      	mov	r6, r0
 8016552:	f8a5 9000 	strh.w	r9, [r5]
 8016556:	f7fc fba9 	bl	8012cac <_ZN8touchgfx3HAL3lcdEv>
 801655a:	6803      	ldr	r3, [r0, #0]
 801655c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801655e:	4798      	blx	r3
 8016560:	2801      	cmp	r0, #1
 8016562:	d012      	beq.n	801658a <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x72>
 8016564:	d306      	bcc.n	8016574 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x5c>
 8016566:	280d      	cmp	r0, #13
 8016568:	d80b      	bhi.n	8016582 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x6a>
 801656a:	4b10      	ldr	r3, [pc, #64]	; (80165ac <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x94>)
 801656c:	f240 115b 	movw	r1, #347	; 0x15b
 8016570:	4a0b      	ldr	r2, [pc, #44]	; (80165a0 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x88>)
 8016572:	e7de      	b.n	8016532 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x1a>
 8016574:	882b      	ldrh	r3, [r5, #0]
 8016576:	fb08 7203 	mla	r2, r8, r3, r7
 801657a:	9b03      	ldr	r3, [sp, #12]
 801657c:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
 8016580:	63e3      	str	r3, [r4, #60]	; 0x3c
 8016582:	4630      	mov	r0, r6
 8016584:	b005      	add	sp, #20
 8016586:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801658a:	882a      	ldrh	r2, [r5, #0]
 801658c:	9b03      	ldr	r3, [sp, #12]
 801658e:	fb08 7202 	mla	r2, r8, r2, r7
 8016592:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8016596:	1a9a      	subs	r2, r3, r2
 8016598:	63e2      	str	r2, [r4, #60]	; 0x3c
 801659a:	e7f2      	b.n	8016582 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x6a>
 801659c:	0801f266 	.word	0x0801f266
 80165a0:	0801f5ff 	.word	0x0801f5ff
 80165a4:	0801f2ab 	.word	0x0801f2ab
 80165a8:	20006df0 	.word	0x20006df0
 80165ac:	0801f2d1 	.word	0x0801f2d1

080165b0 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbb>:
 80165b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80165b2:	b08b      	sub	sp, #44	; 0x2c
 80165b4:	4617      	mov	r7, r2
 80165b6:	4604      	mov	r4, r0
 80165b8:	460e      	mov	r6, r1
 80165ba:	461d      	mov	r5, r3
 80165bc:	f7fc fb76 	bl	8012cac <_ZN8touchgfx3HAL3lcdEv>
 80165c0:	6803      	ldr	r3, [r0, #0]
 80165c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80165c4:	4798      	blx	r3
 80165c6:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
 80165ca:	9007      	str	r0, [sp, #28]
 80165cc:	4631      	mov	r1, r6
 80165ce:	6822      	ldr	r2, [r4, #0]
 80165d0:	e9cd 0308 	strd	r0, r3, [sp, #32]
 80165d4:	4b0c      	ldr	r3, [pc, #48]	; (8016608 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbb+0x58>)
 80165d6:	4620      	mov	r0, r4
 80165d8:	881b      	ldrh	r3, [r3, #0]
 80165da:	9306      	str	r3, [sp, #24]
 80165dc:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 80165e0:	9305      	str	r3, [sp, #20]
 80165e2:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
 80165e6:	9304      	str	r3, [sp, #16]
 80165e8:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 80165ec:	9303      	str	r3, [sp, #12]
 80165ee:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 80165f2:	9302      	str	r3, [sp, #8]
 80165f4:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 80165f8:	e9cd 5300 	strd	r5, r3, [sp]
 80165fc:	463b      	mov	r3, r7
 80165fe:	6bd5      	ldr	r5, [r2, #60]	; 0x3c
 8016600:	2200      	movs	r2, #0
 8016602:	47a8      	blx	r5
 8016604:	b00b      	add	sp, #44	; 0x2c
 8016606:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016608:	20006df0 	.word	0x20006df0

0801660c <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttthb>:
 801660c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8016610:	4698      	mov	r8, r3
 8016612:	6803      	ldr	r3, [r0, #0]
 8016614:	b08b      	sub	sp, #44	; 0x2c
 8016616:	4617      	mov	r7, r2
 8016618:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
 801661a:	460e      	mov	r6, r1
 801661c:	4b13      	ldr	r3, [pc, #76]	; (801666c <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttthb+0x60>)
 801661e:	4604      	mov	r4, r0
 8016620:	f8b3 9000 	ldrh.w	r9, [r3]
 8016624:	f7fc fb42 	bl	8012cac <_ZN8touchgfx3HAL3lcdEv>
 8016628:	6803      	ldr	r3, [r0, #0]
 801662a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801662c:	4798      	blx	r3
 801662e:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 8016632:	2200      	movs	r2, #0
 8016634:	4631      	mov	r1, r6
 8016636:	e9cd 0308 	strd	r0, r3, [sp, #32]
 801663a:	2302      	movs	r3, #2
 801663c:	4620      	mov	r0, r4
 801663e:	e9cd 9306 	strd	r9, r3, [sp, #24]
 8016642:	2301      	movs	r3, #1
 8016644:	9305      	str	r3, [sp, #20]
 8016646:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
 801664a:	9304      	str	r3, [sp, #16]
 801664c:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 8016650:	9303      	str	r3, [sp, #12]
 8016652:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 8016656:	9302      	str	r3, [sp, #8]
 8016658:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 801665c:	e9cd 8300 	strd	r8, r3, [sp]
 8016660:	463b      	mov	r3, r7
 8016662:	47a8      	blx	r5
 8016664:	b00b      	add	sp, #44	; 0x2c
 8016666:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801666a:	bf00      	nop
 801666c:	20006df0 	.word	0x20006df0

08016670 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthb>:
 8016670:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8016674:	4698      	mov	r8, r3
 8016676:	6803      	ldr	r3, [r0, #0]
 8016678:	b087      	sub	sp, #28
 801667a:	460e      	mov	r6, r1
 801667c:	6d9d      	ldr	r5, [r3, #88]	; 0x58
 801667e:	4617      	mov	r7, r2
 8016680:	4b0f      	ldr	r3, [pc, #60]	; (80166c0 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthb+0x50>)
 8016682:	4604      	mov	r4, r0
 8016684:	f8b3 9000 	ldrh.w	r9, [r3]
 8016688:	f7fc fb10 	bl	8012cac <_ZN8touchgfx3HAL3lcdEv>
 801668c:	6803      	ldr	r3, [r0, #0]
 801668e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016690:	4798      	blx	r3
 8016692:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44
 8016696:	463a      	mov	r2, r7
 8016698:	4631      	mov	r1, r6
 801669a:	f8cd 900c 	str.w	r9, [sp, #12]
 801669e:	e9cd 0304 	strd	r0, r3, [sp, #16]
 80166a2:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 80166a6:	4620      	mov	r0, r4
 80166a8:	9302      	str	r3, [sp, #8]
 80166aa:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 80166ae:	9301      	str	r3, [sp, #4]
 80166b0:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 80166b4:	9300      	str	r3, [sp, #0]
 80166b6:	4643      	mov	r3, r8
 80166b8:	47a8      	blx	r5
 80166ba:	b007      	add	sp, #28
 80166bc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80166c0:	20006df0 	.word	0x20006df0

080166c4 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE>:
 80166c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80166c8:	4604      	mov	r4, r0
 80166ca:	b08f      	sub	sp, #60	; 0x3c
 80166cc:	4610      	mov	r0, r2
 80166ce:	460d      	mov	r5, r1
 80166d0:	4691      	mov	r9, r2
 80166d2:	461e      	mov	r6, r3
 80166d4:	f002 fd36 	bl	8019144 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 80166d8:	2800      	cmp	r0, #0
 80166da:	f000 809c 	beq.w	8016816 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x152>
 80166de:	6823      	ldr	r3, [r4, #0]
 80166e0:	4620      	mov	r0, r4
 80166e2:	f8df b194 	ldr.w	fp, [pc, #404]	; 8016878 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b4>
 80166e6:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 80166ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80166ec:	4798      	blx	r3
 80166ee:	6823      	ldr	r3, [r4, #0]
 80166f0:	4620      	mov	r0, r4
 80166f2:	f8df a188 	ldr.w	sl, [pc, #392]	; 801687c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b8>
 80166f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80166f8:	4798      	blx	r3
 80166fa:	f8bb 3000 	ldrh.w	r3, [fp]
 80166fe:	4f5b      	ldr	r7, [pc, #364]	; (801686c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1a8>)
 8016700:	9301      	str	r3, [sp, #4]
 8016702:	f8ba 3000 	ldrh.w	r3, [sl]
 8016706:	f828 9d1c 	strh.w	r9, [r8, #-28]!
 801670a:	4640      	mov	r0, r8
 801670c:	9302      	str	r3, [sp, #8]
 801670e:	883b      	ldrh	r3, [r7, #0]
 8016710:	9303      	str	r3, [sp, #12]
 8016712:	4b57      	ldr	r3, [pc, #348]	; (8016870 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 8016714:	881a      	ldrh	r2, [r3, #0]
 8016716:	9305      	str	r3, [sp, #20]
 8016718:	9204      	str	r2, [sp, #16]
 801671a:	f002 fd1f 	bl	801915c <_ZNK8touchgfx6Bitmap8getWidthEv>
 801671e:	8038      	strh	r0, [r7, #0]
 8016720:	4640      	mov	r0, r8
 8016722:	f002 fd5f 	bl	80191e4 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8016726:	9b05      	ldr	r3, [sp, #20]
 8016728:	8018      	strh	r0, [r3, #0]
 801672a:	4b52      	ldr	r3, [pc, #328]	; (8016874 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 801672c:	781b      	ldrb	r3, [r3, #0]
 801672e:	2b00      	cmp	r3, #0
 8016730:	d174      	bne.n	801681c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x158>
 8016732:	883b      	ldrh	r3, [r7, #0]
 8016734:	f8aa 0000 	strh.w	r0, [sl]
 8016738:	f8ab 3000 	strh.w	r3, [fp]
 801673c:	4648      	mov	r0, r9
 801673e:	e9d4 870f 	ldrd	r8, r7, [r4, #60]	; 0x3c
 8016742:	f002 fcff 	bl	8019144 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 8016746:	2200      	movs	r2, #0
 8016748:	e9c4 000f 	strd	r0, r0, [r4, #60]	; 0x3c
 801674c:	4611      	mov	r1, r2
 801674e:	4628      	mov	r0, r5
 8016750:	f9b5 9004 	ldrsh.w	r9, [r5, #4]
 8016754:	f9b5 a006 	ldrsh.w	sl, [r5, #6]
 8016758:	f7fc fa68 	bl	8012c2c <_ZN8touchgfx8Drawable5setXYEss>
 801675c:	2301      	movs	r3, #1
 801675e:	f895 b025 	ldrb.w	fp, [r5, #37]	; 0x25
 8016762:	f885 3025 	strb.w	r3, [r5, #37]	; 0x25
 8016766:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 801676a:	2b00      	cmp	r3, #0
 801676c:	dd5c      	ble.n	8016828 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x164>
 801676e:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 8016772:	2b00      	cmp	r3, #0
 8016774:	dd58      	ble.n	8016828 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x164>
 8016776:	462a      	mov	r2, r5
 8016778:	ab0a      	add	r3, sp, #40	; 0x28
 801677a:	f852 0f04 	ldr.w	r0, [r2, #4]!
 801677e:	6851      	ldr	r1, [r2, #4]
 8016780:	c303      	stmia	r3!, {r0, r1}
 8016782:	4631      	mov	r1, r6
 8016784:	a80a      	add	r0, sp, #40	; 0x28
 8016786:	f7ff fc87 	bl	8016098 <_ZN8touchgfx4RectaNERKS0_>
 801678a:	4b38      	ldr	r3, [pc, #224]	; (801686c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1a8>)
 801678c:	2100      	movs	r1, #0
 801678e:	f9b3 2000 	ldrsh.w	r2, [r3]
 8016792:	4b37      	ldr	r3, [pc, #220]	; (8016870 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 8016794:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
 8016798:	aa0a      	add	r2, sp, #40	; 0x28
 801679a:	f9b3 3000 	ldrsh.w	r3, [r3]
 801679e:	910c      	str	r1, [sp, #48]	; 0x30
 80167a0:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 80167a4:	ab08      	add	r3, sp, #32
 80167a6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80167aa:	e883 0003 	stmia.w	r3, {r0, r1}
 80167ae:	4618      	mov	r0, r3
 80167b0:	a90c      	add	r1, sp, #48	; 0x30
 80167b2:	f7ff fc71 	bl	8016098 <_ZN8touchgfx4RectaNERKS0_>
 80167b6:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80167b8:	2b00      	cmp	r3, #0
 80167ba:	d13c      	bne.n	8016836 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x172>
 80167bc:	2000      	movs	r0, #0
 80167be:	f884 0076 	strb.w	r0, [r4, #118]	; 0x76
 80167c2:	2600      	movs	r6, #0
 80167c4:	696b      	ldr	r3, [r5, #20]
 80167c6:	a908      	add	r1, sp, #32
 80167c8:	682a      	ldr	r2, [r5, #0]
 80167ca:	4628      	mov	r0, r5
 80167cc:	9305      	str	r3, [sp, #20]
 80167ce:	616e      	str	r6, [r5, #20]
 80167d0:	6892      	ldr	r2, [r2, #8]
 80167d2:	4790      	blx	r2
 80167d4:	9b05      	ldr	r3, [sp, #20]
 80167d6:	4652      	mov	r2, sl
 80167d8:	4649      	mov	r1, r9
 80167da:	616b      	str	r3, [r5, #20]
 80167dc:	4628      	mov	r0, r5
 80167de:	f884 6076 	strb.w	r6, [r4, #118]	; 0x76
 80167e2:	f885 b025 	strb.w	fp, [r5, #37]	; 0x25
 80167e6:	f7fc fa21 	bl	8012c2c <_ZN8touchgfx8Drawable5setXYEss>
 80167ea:	9a01      	ldr	r2, [sp, #4]
 80167ec:	4b22      	ldr	r3, [pc, #136]	; (8016878 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b4>)
 80167ee:	4620      	mov	r0, r4
 80167f0:	801a      	strh	r2, [r3, #0]
 80167f2:	9a02      	ldr	r2, [sp, #8]
 80167f4:	4b21      	ldr	r3, [pc, #132]	; (801687c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b8>)
 80167f6:	801a      	strh	r2, [r3, #0]
 80167f8:	9a03      	ldr	r2, [sp, #12]
 80167fa:	4b1c      	ldr	r3, [pc, #112]	; (801686c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1a8>)
 80167fc:	801a      	strh	r2, [r3, #0]
 80167fe:	4b1c      	ldr	r3, [pc, #112]	; (8016870 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 8016800:	9a04      	ldr	r2, [sp, #16]
 8016802:	801a      	strh	r2, [r3, #0]
 8016804:	6823      	ldr	r3, [r4, #0]
 8016806:	e9c4 870f 	strd	r8, r7, [r4, #60]	; 0x3c
 801680a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801680c:	4798      	blx	r3
 801680e:	6823      	ldr	r3, [r4, #0]
 8016810:	4620      	mov	r0, r4
 8016812:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016814:	4798      	blx	r3
 8016816:	b00f      	add	sp, #60	; 0x3c
 8016818:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801681c:	883b      	ldrh	r3, [r7, #0]
 801681e:	f8ab 0000 	strh.w	r0, [fp]
 8016822:	f8aa 3000 	strh.w	r3, [sl]
 8016826:	e789      	b.n	801673c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x78>
 8016828:	462a      	mov	r2, r5
 801682a:	ab0a      	add	r3, sp, #40	; 0x28
 801682c:	f852 0f04 	ldr.w	r0, [r2, #4]!
 8016830:	6851      	ldr	r1, [r2, #4]
 8016832:	c303      	stmia	r3!, {r0, r1}
 8016834:	e7a9      	b.n	801678a <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xc6>
 8016836:	a807      	add	r0, sp, #28
 8016838:	f002 fe36 	bl	80194a8 <_ZNK8touchgfx6Bitmap9getFormatEv>
 801683c:	4606      	mov	r6, r0
 801683e:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8016840:	6803      	ldr	r3, [r0, #0]
 8016842:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016844:	4798      	blx	r3
 8016846:	4286      	cmp	r6, r0
 8016848:	d1b8      	bne.n	80167bc <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xf8>
 801684a:	f7fc fa2f 	bl	8012cac <_ZN8touchgfx3HAL3lcdEv>
 801684e:	6803      	ldr	r3, [r0, #0]
 8016850:	4606      	mov	r6, r0
 8016852:	a807      	add	r0, sp, #28
 8016854:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016856:	9305      	str	r3, [sp, #20]
 8016858:	f002 fe26 	bl	80194a8 <_ZNK8touchgfx6Bitmap9getFormatEv>
 801685c:	9b05      	ldr	r3, [sp, #20]
 801685e:	4601      	mov	r1, r0
 8016860:	4630      	mov	r0, r6
 8016862:	4798      	blx	r3
 8016864:	f080 0001 	eor.w	r0, r0, #1
 8016868:	b2c0      	uxtb	r0, r0
 801686a:	e7a8      	b.n	80167be <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xfa>
 801686c:	20006dea 	.word	0x20006dea
 8016870:	20006dec 	.word	0x20006dec
 8016874:	20006dee 	.word	0x20006dee
 8016878:	20006df0 	.word	0x20006df0
 801687c:	20006df2 	.word	0x20006df2

08016880 <_ZN8touchgfx3HAL20getClientFrameBufferEv>:
 8016880:	4b07      	ldr	r3, [pc, #28]	; (80168a0 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x20>)
 8016882:	b510      	push	{r4, lr}
 8016884:	781b      	ldrb	r3, [r3, #0]
 8016886:	4604      	mov	r4, r0
 8016888:	b13b      	cbz	r3, 801689a <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 801688a:	6803      	ldr	r3, [r0, #0]
 801688c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801688e:	4798      	blx	r3
 8016890:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8016892:	4283      	cmp	r3, r0
 8016894:	d101      	bne.n	801689a <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 8016896:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8016898:	bd10      	pop	{r4, pc}
 801689a:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 801689c:	e7fc      	b.n	8016898 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x18>
 801689e:	bf00      	nop
 80168a0:	20006df4 	.word	0x20006df4

080168a4 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt>:
 80168a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80168a8:	b08a      	sub	sp, #40	; 0x28
 80168aa:	4692      	mov	sl, r2
 80168ac:	461d      	mov	r5, r3
 80168ae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80168b2:	f8bd 9054 	ldrh.w	r9, [sp, #84]	; 0x54
 80168b6:	2400      	movs	r4, #0
 80168b8:	f8bd 8048 	ldrh.w	r8, [sp, #72]	; 0x48
 80168bc:	4606      	mov	r6, r0
 80168be:	f8bd 704c 	ldrh.w	r7, [sp, #76]	; 0x4c
 80168c2:	fb09 a505 	mla	r5, r9, r5, sl
 80168c6:	9404      	str	r4, [sp, #16]
 80168c8:	f8ad 8018 	strh.w	r8, [sp, #24]
 80168cc:	f8ad 701a 	strh.w	r7, [sp, #26]
 80168d0:	f88d 4020 	strb.w	r4, [sp, #32]
 80168d4:	e9cd 3101 	strd	r3, r1, [sp, #4]
 80168d8:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 80168dc:	f8ad 301c 	strh.w	r3, [sp, #28]
 80168e0:	f7ff ffce 	bl	8016880 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 80168e4:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 80168e8:	f8ad 901e 	strh.w	r9, [sp, #30]
 80168ec:	f88d 4022 	strb.w	r4, [sp, #34]	; 0x22
 80168f0:	9505      	str	r5, [sp, #20]
 80168f2:	f88d 4021 	strb.w	r4, [sp, #33]	; 0x21
 80168f6:	f88d 4023 	strb.w	r4, [sp, #35]	; 0x23
 80168fa:	f88d 4024 	strb.w	r4, [sp, #36]	; 0x24
 80168fe:	f1b8 0f00 	cmp.w	r8, #0
 8016902:	d000      	beq.n	8016906 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0x62>
 8016904:	b937      	cbnz	r7, 8016914 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0x70>
 8016906:	4b0d      	ldr	r3, [pc, #52]	; (801693c <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0x98>)
 8016908:	f240 2102 	movw	r1, #514	; 0x202
 801690c:	4a0c      	ldr	r2, [pc, #48]	; (8016940 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0x9c>)
 801690e:	480d      	ldr	r0, [pc, #52]	; (8016944 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0xa0>)
 8016910:	f004 fe8c 	bl	801b62c <__assert_func>
 8016914:	6833      	ldr	r3, [r6, #0]
 8016916:	4630      	mov	r0, r6
 8016918:	9c01      	ldr	r4, [sp, #4]
 801691a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801691c:	4798      	blx	r3
 801691e:	4220      	tst	r0, r4
 8016920:	d104      	bne.n	801692c <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0x88>
 8016922:	4b09      	ldr	r3, [pc, #36]	; (8016948 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0xa4>)
 8016924:	f240 2103 	movw	r1, #515	; 0x203
 8016928:	4a05      	ldr	r2, [pc, #20]	; (8016940 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0x9c>)
 801692a:	e7f0      	b.n	801690e <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0x6a>
 801692c:	6870      	ldr	r0, [r6, #4]
 801692e:	a901      	add	r1, sp, #4
 8016930:	6803      	ldr	r3, [r0, #0]
 8016932:	685b      	ldr	r3, [r3, #4]
 8016934:	4798      	blx	r3
 8016936:	b00a      	add	sp, #40	; 0x28
 8016938:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801693c:	0801f100 	.word	0x0801f100
 8016940:	0801f434 	.word	0x0801f434
 8016944:	0801f2ab 	.word	0x0801f2ab
 8016948:	0801f138 	.word	0x0801f138

0801694c <_ZN8touchgfx3HAL12blitFillWordEtttttt>:
 801694c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016950:	b08b      	sub	sp, #44	; 0x2c
 8016952:	4693      	mov	fp, r2
 8016954:	461d      	mov	r5, r3
 8016956:	2400      	movs	r4, #0
 8016958:	f8bd 9058 	ldrh.w	r9, [sp, #88]	; 0x58
 801695c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8016960:	468a      	mov	sl, r1
 8016962:	f8bd 8050 	ldrh.w	r8, [sp, #80]	; 0x50
 8016966:	fb09 b505 	mla	r5, r9, r5, fp
 801696a:	f8bd 7054 	ldrh.w	r7, [sp, #84]	; 0x54
 801696e:	4606      	mov	r6, r0
 8016970:	9404      	str	r4, [sp, #16]
 8016972:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8016976:	f7ff ff83 	bl	8016880 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 801697a:	f8ad 8018 	strh.w	r8, [sp, #24]
 801697e:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 8016982:	f8ad 701a 	strh.w	r7, [sp, #26]
 8016986:	f8ad 401c 	strh.w	r4, [sp, #28]
 801698a:	9505      	str	r5, [sp, #20]
 801698c:	f8ad 901e 	strh.w	r9, [sp, #30]
 8016990:	f8cd a010 	str.w	sl, [sp, #16]
 8016994:	f8ad 4020 	strh.w	r4, [sp, #32]
 8016998:	f88d 4022 	strb.w	r4, [sp, #34]	; 0x22
 801699c:	f88d 4023 	strb.w	r4, [sp, #35]	; 0x23
 80169a0:	f88d 4024 	strb.w	r4, [sp, #36]	; 0x24
 80169a4:	f1b8 0f00 	cmp.w	r8, #0
 80169a8:	d000      	beq.n	80169ac <_ZN8touchgfx3HAL12blitFillWordEtttttt+0x60>
 80169aa:	b937      	cbnz	r7, 80169ba <_ZN8touchgfx3HAL12blitFillWordEtttttt+0x6e>
 80169ac:	4b0d      	ldr	r3, [pc, #52]	; (80169e4 <_ZN8touchgfx3HAL12blitFillWordEtttttt+0x98>)
 80169ae:	f240 2119 	movw	r1, #537	; 0x219
 80169b2:	4a0d      	ldr	r2, [pc, #52]	; (80169e8 <_ZN8touchgfx3HAL12blitFillWordEtttttt+0x9c>)
 80169b4:	480d      	ldr	r0, [pc, #52]	; (80169ec <_ZN8touchgfx3HAL12blitFillWordEtttttt+0xa0>)
 80169b6:	f004 fe39 	bl	801b62c <__assert_func>
 80169ba:	6833      	ldr	r3, [r6, #0]
 80169bc:	4630      	mov	r0, r6
 80169be:	9c01      	ldr	r4, [sp, #4]
 80169c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80169c2:	4798      	blx	r3
 80169c4:	4220      	tst	r0, r4
 80169c6:	d104      	bne.n	80169d2 <_ZN8touchgfx3HAL12blitFillWordEtttttt+0x86>
 80169c8:	4b09      	ldr	r3, [pc, #36]	; (80169f0 <_ZN8touchgfx3HAL12blitFillWordEtttttt+0xa4>)
 80169ca:	f240 211a 	movw	r1, #538	; 0x21a
 80169ce:	4a06      	ldr	r2, [pc, #24]	; (80169e8 <_ZN8touchgfx3HAL12blitFillWordEtttttt+0x9c>)
 80169d0:	e7f0      	b.n	80169b4 <_ZN8touchgfx3HAL12blitFillWordEtttttt+0x68>
 80169d2:	6870      	ldr	r0, [r6, #4]
 80169d4:	a901      	add	r1, sp, #4
 80169d6:	6803      	ldr	r3, [r0, #0]
 80169d8:	685b      	ldr	r3, [r3, #4]
 80169da:	4798      	blx	r3
 80169dc:	b00b      	add	sp, #44	; 0x2c
 80169de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80169e2:	bf00      	nop
 80169e4:	0801f17d 	.word	0x0801f17d
 80169e8:	0801f4aa 	.word	0x0801f4aa
 80169ec:	0801f2ab 	.word	0x0801f2ab
 80169f0:	0801f1b5 	.word	0x0801f1b5

080169f4 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE>:
 80169f4:	b508      	push	{r3, lr}
 80169f6:	290d      	cmp	r1, #13
 80169f8:	d817      	bhi.n	8016a2a <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x36>
 80169fa:	e8df f001 	tbb	[pc, r1]
 80169fe:	090b      	.short	0x090b
 8016a00:	0d0d0d07 	.word	0x0d0d0d07
 8016a04:	1414140d 	.word	0x1414140d
 8016a08:	0d0d1414 	.word	0x0d0d1414
 8016a0c:	2020      	movs	r0, #32
 8016a0e:	bd08      	pop	{r3, pc}
 8016a10:	2018      	movs	r0, #24
 8016a12:	e7fc      	b.n	8016a0e <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 8016a14:	2010      	movs	r0, #16
 8016a16:	e7fa      	b.n	8016a0e <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 8016a18:	4b05      	ldr	r3, [pc, #20]	; (8016a30 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x3c>)
 8016a1a:	f240 2183 	movw	r1, #643	; 0x283
 8016a1e:	4a05      	ldr	r2, [pc, #20]	; (8016a34 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x40>)
 8016a20:	4805      	ldr	r0, [pc, #20]	; (8016a38 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x44>)
 8016a22:	f004 fe03 	bl	801b62c <__assert_func>
 8016a26:	2008      	movs	r0, #8
 8016a28:	e7f1      	b.n	8016a0e <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 8016a2a:	2000      	movs	r0, #0
 8016a2c:	e7ef      	b.n	8016a0e <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 8016a2e:	bf00      	nop
 8016a30:	0801f327 	.word	0x0801f327
 8016a34:	0801f7d5 	.word	0x0801f7d5
 8016a38:	0801f2ab 	.word	0x0801f2ab

08016a3c <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>:
 8016a3c:	b570      	push	{r4, r5, r6, lr}
 8016a3e:	460d      	mov	r5, r1
 8016a40:	f89d 1014 	ldrb.w	r1, [sp, #20]
 8016a44:	4616      	mov	r6, r2
 8016a46:	461c      	mov	r4, r3
 8016a48:	f7ff ffd4 	bl	80169f4 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE>
 8016a4c:	f8bd 1010 	ldrh.w	r1, [sp, #16]
 8016a50:	10c0      	asrs	r0, r0, #3
 8016a52:	fb06 5101 	mla	r1, r6, r1, r5
 8016a56:	fb00 4001 	mla	r0, r0, r1, r4
 8016a5a:	bd70      	pop	{r4, r5, r6, pc}

08016a5c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b>:
 8016a5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016a60:	b08c      	sub	sp, #48	; 0x30
 8016a62:	f04f 0c00 	mov.w	ip, #0
 8016a66:	4604      	mov	r4, r0
 8016a68:	469a      	mov	sl, r3
 8016a6a:	f89d 506c 	ldrb.w	r5, [sp, #108]	; 0x6c
 8016a6e:	f8bd 7054 	ldrh.w	r7, [sp, #84]	; 0x54
 8016a72:	2d0b      	cmp	r5, #11
 8016a74:	f8bd 6058 	ldrh.w	r6, [sp, #88]	; 0x58
 8016a78:	f89d 3060 	ldrb.w	r3, [sp, #96]	; 0x60
 8016a7c:	f89d 0064 	ldrb.w	r0, [sp, #100]	; 0x64
 8016a80:	f8bd 9068 	ldrh.w	r9, [sp, #104]	; 0x68
 8016a84:	f89d 8070 	ldrb.w	r8, [sp, #112]	; 0x70
 8016a88:	f8cd c018 	str.w	ip, [sp, #24]
 8016a8c:	d130      	bne.n	8016af0 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x94>
 8016a8e:	2080      	movs	r0, #128	; 0x80
 8016a90:	9205      	str	r2, [sp, #20]
 8016a92:	f8bd 205c 	ldrh.w	r2, [sp, #92]	; 0x5c
 8016a96:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
 8016a9a:	f8ad 2024 	strh.w	r2, [sp, #36]	; 0x24
 8016a9e:	f8ad 7020 	strh.w	r7, [sp, #32]
 8016aa2:	f8ad 6022 	strh.w	r6, [sp, #34]	; 0x22
 8016aa6:	e9cd 0103 	strd	r0, r1, [sp, #12]
 8016aaa:	4620      	mov	r0, r4
 8016aac:	f7ff fee8 	bl	8016880 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8016ab0:	f8bd 2050 	ldrh.w	r2, [sp, #80]	; 0x50
 8016ab4:	4603      	mov	r3, r0
 8016ab6:	4651      	mov	r1, sl
 8016ab8:	4620      	mov	r0, r4
 8016aba:	e9cd 9800 	strd	r9, r8, [sp]
 8016abe:	f7ff ffbd 	bl	8016a3c <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>
 8016ac2:	f89d 3074 	ldrb.w	r3, [sp, #116]	; 0x74
 8016ac6:	9007      	str	r0, [sp, #28]
 8016ac8:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
 8016acc:	2300      	movs	r3, #0
 8016ace:	f8ad 9026 	strh.w	r9, [sp, #38]	; 0x26
 8016ad2:	f88d 5029 	strb.w	r5, [sp, #41]	; 0x29
 8016ad6:	f88d 802a 	strb.w	r8, [sp, #42]	; 0x2a
 8016ada:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
 8016ade:	b107      	cbz	r7, 8016ae2 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x86>
 8016ae0:	b9d6      	cbnz	r6, 8016b18 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xbc>
 8016ae2:	4b17      	ldr	r3, [pc, #92]	; (8016b40 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xe4>)
 8016ae4:	f240 11c9 	movw	r1, #457	; 0x1c9
 8016ae8:	4a16      	ldr	r2, [pc, #88]	; (8016b44 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xe8>)
 8016aea:	4817      	ldr	r0, [pc, #92]	; (8016b48 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xec>)
 8016aec:	f004 fd9e 	bl	801b62c <__assert_func>
 8016af0:	2d02      	cmp	r5, #2
 8016af2:	d108      	bne.n	8016b06 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xaa>
 8016af4:	2bff      	cmp	r3, #255	; 0xff
 8016af6:	d104      	bne.n	8016b02 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xa6>
 8016af8:	2800      	cmp	r0, #0
 8016afa:	bf14      	ite	ne
 8016afc:	2040      	movne	r0, #64	; 0x40
 8016afe:	2020      	moveq	r0, #32
 8016b00:	e7c6      	b.n	8016a90 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x34>
 8016b02:	2040      	movs	r0, #64	; 0x40
 8016b04:	e7c4      	b.n	8016a90 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x34>
 8016b06:	2bff      	cmp	r3, #255	; 0xff
 8016b08:	d104      	bne.n	8016b14 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xb8>
 8016b0a:	2800      	cmp	r0, #0
 8016b0c:	bf14      	ite	ne
 8016b0e:	2004      	movne	r0, #4
 8016b10:	2001      	moveq	r0, #1
 8016b12:	e7bd      	b.n	8016a90 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x34>
 8016b14:	2004      	movs	r0, #4
 8016b16:	e7bb      	b.n	8016a90 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x34>
 8016b18:	6823      	ldr	r3, [r4, #0]
 8016b1a:	4620      	mov	r0, r4
 8016b1c:	9d03      	ldr	r5, [sp, #12]
 8016b1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016b20:	4798      	blx	r3
 8016b22:	4228      	tst	r0, r5
 8016b24:	d104      	bne.n	8016b30 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xd4>
 8016b26:	4b09      	ldr	r3, [pc, #36]	; (8016b4c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xf0>)
 8016b28:	f44f 71e5 	mov.w	r1, #458	; 0x1ca
 8016b2c:	4a05      	ldr	r2, [pc, #20]	; (8016b44 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xe8>)
 8016b2e:	e7dc      	b.n	8016aea <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x8e>
 8016b30:	6860      	ldr	r0, [r4, #4]
 8016b32:	a903      	add	r1, sp, #12
 8016b34:	6803      	ldr	r3, [r0, #0]
 8016b36:	685b      	ldr	r3, [r3, #4]
 8016b38:	4798      	blx	r3
 8016b3a:	b00c      	add	sp, #48	; 0x30
 8016b3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016b40:	0801f100 	.word	0x0801f100
 8016b44:	0801f663 	.word	0x0801f663
 8016b48:	0801f2ab 	.word	0x0801f2ab
 8016b4c:	0801f138 	.word	0x0801f138

08016b50 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb>:
 8016b50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016b54:	b08d      	sub	sp, #52	; 0x34
 8016b56:	469b      	mov	fp, r3
 8016b58:	2500      	movs	r5, #0
 8016b5a:	4604      	mov	r4, r0
 8016b5c:	f89d 7060 	ldrb.w	r7, [sp, #96]	; 0x60
 8016b60:	4692      	mov	sl, r2
 8016b62:	f89d 6068 	ldrb.w	r6, [sp, #104]	; 0x68
 8016b66:	4689      	mov	r9, r1
 8016b68:	2fff      	cmp	r7, #255	; 0xff
 8016b6a:	f8bd 8064 	ldrh.w	r8, [sp, #100]	; 0x64
 8016b6e:	9506      	str	r5, [sp, #24]
 8016b70:	bf14      	ite	ne
 8016b72:	2308      	movne	r3, #8
 8016b74:	2302      	moveq	r3, #2
 8016b76:	e9cd 3503 	strd	r3, r5, [sp, #12]
 8016b7a:	f7ff fe81 	bl	8016880 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8016b7e:	465a      	mov	r2, fp
 8016b80:	4603      	mov	r3, r0
 8016b82:	4651      	mov	r1, sl
 8016b84:	4620      	mov	r0, r4
 8016b86:	e9cd 8600 	strd	r8, r6, [sp]
 8016b8a:	f7ff ff57 	bl	8016a3c <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>
 8016b8e:	f8bd 3058 	ldrh.w	r3, [sp, #88]	; 0x58
 8016b92:	f8ad 5024 	strh.w	r5, [sp, #36]	; 0x24
 8016b96:	f8ad 3020 	strh.w	r3, [sp, #32]
 8016b9a:	f8bd 305c 	ldrh.w	r3, [sp, #92]	; 0x5c
 8016b9e:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
 8016ba2:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 8016ba6:	f89d 306c 	ldrb.w	r3, [sp, #108]	; 0x6c
 8016baa:	9d03      	ldr	r5, [sp, #12]
 8016bac:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
 8016bb0:	6823      	ldr	r3, [r4, #0]
 8016bb2:	9007      	str	r0, [sp, #28]
 8016bb4:	4620      	mov	r0, r4
 8016bb6:	f8ad 8026 	strh.w	r8, [sp, #38]	; 0x26
 8016bba:	f8cd 9018 	str.w	r9, [sp, #24]
 8016bbe:	f88d 7028 	strb.w	r7, [sp, #40]	; 0x28
 8016bc2:	f88d 6029 	strb.w	r6, [sp, #41]	; 0x29
 8016bc6:	f88d 602a 	strb.w	r6, [sp, #42]	; 0x2a
 8016bca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016bcc:	4798      	blx	r3
 8016bce:	4228      	tst	r0, r5
 8016bd0:	d106      	bne.n	8016be0 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb+0x90>
 8016bd2:	4b07      	ldr	r3, [pc, #28]	; (8016bf0 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb+0xa0>)
 8016bd4:	f44f 710c 	mov.w	r1, #560	; 0x230
 8016bd8:	4a06      	ldr	r2, [pc, #24]	; (8016bf4 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb+0xa4>)
 8016bda:	4807      	ldr	r0, [pc, #28]	; (8016bf8 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb+0xa8>)
 8016bdc:	f004 fd26 	bl	801b62c <__assert_func>
 8016be0:	6860      	ldr	r0, [r4, #4]
 8016be2:	a903      	add	r1, sp, #12
 8016be4:	6803      	ldr	r3, [r0, #0]
 8016be6:	685b      	ldr	r3, [r3, #4]
 8016be8:	4798      	blx	r3
 8016bea:	b00d      	add	sp, #52	; 0x34
 8016bec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016bf0:	0801f138 	.word	0x0801f138
 8016bf4:	0801f73a 	.word	0x0801f73a
 8016bf8:	0801f2ab 	.word	0x0801f2ab

08016bfc <_ZNK8touchgfx3HAL13getDstAddressEttPt>:
 8016bfc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8016c00:	461f      	mov	r7, r3
 8016c02:	4b0b      	ldr	r3, [pc, #44]	; (8016c30 <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x34>)
 8016c04:	460d      	mov	r5, r1
 8016c06:	4616      	mov	r6, r2
 8016c08:	f8b3 8000 	ldrh.w	r8, [r3]
 8016c0c:	4604      	mov	r4, r0
 8016c0e:	f7fc f84d 	bl	8012cac <_ZN8touchgfx3HAL3lcdEv>
 8016c12:	6803      	ldr	r3, [r0, #0]
 8016c14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016c16:	4798      	blx	r3
 8016c18:	463b      	mov	r3, r7
 8016c1a:	4632      	mov	r2, r6
 8016c1c:	4629      	mov	r1, r5
 8016c1e:	e9cd 8000 	strd	r8, r0, [sp]
 8016c22:	4620      	mov	r0, r4
 8016c24:	f7ff ff0a 	bl	8016a3c <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>
 8016c28:	b002      	add	sp, #8
 8016c2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016c2e:	bf00      	nop
 8016c30:	20006df0 	.word	0x20006df0

08016c34 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb>:
 8016c34:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8016c38:	b08b      	sub	sp, #44	; 0x2c
 8016c3a:	4699      	mov	r9, r3
 8016c3c:	4690      	mov	r8, r2
 8016c3e:	4604      	mov	r4, r0
 8016c40:	f8bd 305c 	ldrh.w	r3, [sp, #92]	; 0x5c
 8016c44:	2500      	movs	r5, #0
 8016c46:	f8bd 7048 	ldrh.w	r7, [sp, #72]	; 0x48
 8016c4a:	f8bd 604c 	ldrh.w	r6, [sp, #76]	; 0x4c
 8016c4e:	9504      	str	r5, [sp, #16]
 8016c50:	f8ad 7018 	strh.w	r7, [sp, #24]
 8016c54:	f8ad 601a 	strh.w	r6, [sp, #26]
 8016c58:	e9cd 3101 	strd	r3, r1, [sp, #4]
 8016c5c:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 8016c60:	f8ad 301c 	strh.w	r3, [sp, #28]
 8016c64:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 8016c68:	f88d 3020 	strb.w	r3, [sp, #32]
 8016c6c:	f7ff fe08 	bl	8016880 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8016c70:	464a      	mov	r2, r9
 8016c72:	4603      	mov	r3, r0
 8016c74:	4641      	mov	r1, r8
 8016c76:	4620      	mov	r0, r4
 8016c78:	f7ff ffc0 	bl	8016bfc <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8016c7c:	4b19      	ldr	r3, [pc, #100]	; (8016ce4 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0xb0>)
 8016c7e:	9005      	str	r0, [sp, #20]
 8016c80:	881b      	ldrh	r3, [r3, #0]
 8016c82:	f8ad 301e 	strh.w	r3, [sp, #30]
 8016c86:	f7fc f811 	bl	8012cac <_ZN8touchgfx3HAL3lcdEv>
 8016c8a:	6803      	ldr	r3, [r0, #0]
 8016c8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016c8e:	4798      	blx	r3
 8016c90:	f88d 0022 	strb.w	r0, [sp, #34]	; 0x22
 8016c94:	f88d 0021 	strb.w	r0, [sp, #33]	; 0x21
 8016c98:	b107      	cbz	r7, 8016c9c <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0x68>
 8016c9a:	b936      	cbnz	r6, 8016caa <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0x76>
 8016c9c:	4b12      	ldr	r3, [pc, #72]	; (8016ce8 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0xb4>)
 8016c9e:	f44f 71f3 	mov.w	r1, #486	; 0x1e6
 8016ca2:	4a12      	ldr	r2, [pc, #72]	; (8016cec <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0xb8>)
 8016ca4:	4812      	ldr	r0, [pc, #72]	; (8016cf0 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0xbc>)
 8016ca6:	f004 fcc1 	bl	801b62c <__assert_func>
 8016caa:	6823      	ldr	r3, [r4, #0]
 8016cac:	4620      	mov	r0, r4
 8016cae:	9e01      	ldr	r6, [sp, #4]
 8016cb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016cb2:	4798      	blx	r3
 8016cb4:	4230      	tst	r0, r6
 8016cb6:	d104      	bne.n	8016cc2 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0x8e>
 8016cb8:	4b0e      	ldr	r3, [pc, #56]	; (8016cf4 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0xc0>)
 8016cba:	f240 11e7 	movw	r1, #487	; 0x1e7
 8016cbe:	4a0b      	ldr	r2, [pc, #44]	; (8016cec <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0xb8>)
 8016cc0:	e7f0      	b.n	8016ca4 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0x70>
 8016cc2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8016cc4:	a901      	add	r1, sp, #4
 8016cc6:	6860      	ldr	r0, [r4, #4]
 8016cc8:	9304      	str	r3, [sp, #16]
 8016cca:	f89d 3060 	ldrb.w	r3, [sp, #96]	; 0x60
 8016cce:	f88d 5024 	strb.w	r5, [sp, #36]	; 0x24
 8016cd2:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
 8016cd6:	6803      	ldr	r3, [r0, #0]
 8016cd8:	685b      	ldr	r3, [r3, #4]
 8016cda:	4798      	blx	r3
 8016cdc:	b00b      	add	sp, #44	; 0x2c
 8016cde:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016ce2:	bf00      	nop
 8016ce4:	20006df0 	.word	0x20006df0
 8016ce8:	0801f100 	.word	0x0801f100
 8016cec:	0801f50f 	.word	0x0801f50f
 8016cf0:	0801f2ab 	.word	0x0801f2ab
 8016cf4:	0801f138 	.word	0x0801f138

08016cf8 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE>:
 8016cf8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016cfa:	b08d      	sub	sp, #52	; 0x34
 8016cfc:	4604      	mov	r4, r0
 8016cfe:	466b      	mov	r3, sp
 8016d00:	e883 0006 	stmia.w	r3, {r1, r2}
 8016d04:	4b21      	ldr	r3, [pc, #132]	; (8016d8c <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x94>)
 8016d06:	781b      	ldrb	r3, [r3, #0]
 8016d08:	b933      	cbnz	r3, 8016d18 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x20>
 8016d0a:	4b21      	ldr	r3, [pc, #132]	; (8016d90 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x98>)
 8016d0c:	f240 2141 	movw	r1, #577	; 0x241
 8016d10:	4a20      	ldr	r2, [pc, #128]	; (8016d94 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x9c>)
 8016d12:	4821      	ldr	r0, [pc, #132]	; (8016d98 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0xa0>)
 8016d14:	f004 fc8a 	bl	801b62c <__assert_func>
 8016d18:	2300      	movs	r3, #0
 8016d1a:	2501      	movs	r5, #1
 8016d1c:	f8bd 6000 	ldrh.w	r6, [sp]
 8016d20:	9306      	str	r3, [sp, #24]
 8016d22:	6803      	ldr	r3, [r0, #0]
 8016d24:	f8bd 7002 	ldrh.w	r7, [sp, #2]
 8016d28:	9503      	str	r5, [sp, #12]
 8016d2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016d2c:	4798      	blx	r3
 8016d2e:	463a      	mov	r2, r7
 8016d30:	4631      	mov	r1, r6
 8016d32:	4603      	mov	r3, r0
 8016d34:	4620      	mov	r0, r4
 8016d36:	f7ff ff61 	bl	8016bfc <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8016d3a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8016d3c:	9004      	str	r0, [sp, #16]
 8016d3e:	9307      	str	r3, [sp, #28]
 8016d40:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8016d44:	f8ad 3020 	strh.w	r3, [sp, #32]
 8016d48:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8016d4c:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 8016d50:	4b12      	ldr	r3, [pc, #72]	; (8016d9c <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0xa4>)
 8016d52:	881b      	ldrh	r3, [r3, #0]
 8016d54:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 8016d58:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 8016d5c:	f7fb ffa6 	bl	8012cac <_ZN8touchgfx3HAL3lcdEv>
 8016d60:	6803      	ldr	r3, [r0, #0]
 8016d62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016d64:	4798      	blx	r3
 8016d66:	23ff      	movs	r3, #255	; 0xff
 8016d68:	f88d 0029 	strb.w	r0, [sp, #41]	; 0x29
 8016d6c:	a903      	add	r1, sp, #12
 8016d6e:	f88d 002a 	strb.w	r0, [sp, #42]	; 0x2a
 8016d72:	6860      	ldr	r0, [r4, #4]
 8016d74:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
 8016d78:	f88d 502b 	strb.w	r5, [sp, #43]	; 0x2b
 8016d7c:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
 8016d80:	6803      	ldr	r3, [r0, #0]
 8016d82:	685b      	ldr	r3, [r3, #4]
 8016d84:	4798      	blx	r3
 8016d86:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8016d88:	b00d      	add	sp, #52	; 0x34
 8016d8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016d8c:	20006df5 	.word	0x20006df5
 8016d90:	0801f1ff 	.word	0x0801f1ff
 8016d94:	0801f5b9 	.word	0x0801f5b9
 8016d98:	0801f2ab 	.word	0x0801f2ab
 8016d9c:	20006df0 	.word	0x20006df0

08016da0 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm>:
 8016da0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016da4:	b08c      	sub	sp, #48	; 0x30
 8016da6:	461e      	mov	r6, r3
 8016da8:	2300      	movs	r3, #0
 8016daa:	4604      	mov	r4, r0
 8016dac:	466d      	mov	r5, sp
 8016dae:	9306      	str	r3, [sp, #24]
 8016db0:	6803      	ldr	r3, [r0, #0]
 8016db2:	e885 0006 	stmia.w	r5, {r1, r2}
 8016db6:	2501      	movs	r5, #1
 8016db8:	f8bd 7000 	ldrh.w	r7, [sp]
 8016dbc:	f8bd 8002 	ldrh.w	r8, [sp, #2]
 8016dc0:	9503      	str	r5, [sp, #12]
 8016dc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016dc4:	4798      	blx	r3
 8016dc6:	4642      	mov	r2, r8
 8016dc8:	4639      	mov	r1, r7
 8016dca:	4603      	mov	r3, r0
 8016dcc:	4620      	mov	r0, r4
 8016dce:	f7ff ff15 	bl	8016bfc <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8016dd2:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8016dd6:	9004      	str	r0, [sp, #16]
 8016dd8:	f8ad 3020 	strh.w	r3, [sp, #32]
 8016ddc:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8016de0:	9607      	str	r6, [sp, #28]
 8016de2:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 8016de6:	4b10      	ldr	r3, [pc, #64]	; (8016e28 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm+0x88>)
 8016de8:	881b      	ldrh	r3, [r3, #0]
 8016dea:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 8016dee:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8016df0:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 8016df4:	f7fb ff5a 	bl	8012cac <_ZN8touchgfx3HAL3lcdEv>
 8016df8:	6803      	ldr	r3, [r0, #0]
 8016dfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016dfc:	4798      	blx	r3
 8016dfe:	23ff      	movs	r3, #255	; 0xff
 8016e00:	f88d 0029 	strb.w	r0, [sp, #41]	; 0x29
 8016e04:	a903      	add	r1, sp, #12
 8016e06:	f88d 002a 	strb.w	r0, [sp, #42]	; 0x2a
 8016e0a:	6860      	ldr	r0, [r4, #4]
 8016e0c:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
 8016e10:	f88d 502b 	strb.w	r5, [sp, #43]	; 0x2b
 8016e14:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
 8016e18:	6803      	ldr	r3, [r0, #0]
 8016e1a:	685b      	ldr	r3, [r3, #4]
 8016e1c:	4798      	blx	r3
 8016e1e:	4630      	mov	r0, r6
 8016e20:	b00c      	add	sp, #48	; 0x30
 8016e22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016e26:	bf00      	nop
 8016e28:	20006df0 	.word	0x20006df0

08016e2c <_ZN8touchgfx3HAL25copyFromTFTToClientBufferENS_4RectE>:
 8016e2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016e2e:	b085      	sub	sp, #20
 8016e30:	4605      	mov	r5, r0
 8016e32:	ac02      	add	r4, sp, #8
 8016e34:	e884 0006 	stmia.w	r4, {r1, r2}
 8016e38:	f8bd 6008 	ldrh.w	r6, [sp, #8]
 8016e3c:	f8bd 700a 	ldrh.w	r7, [sp, #10]
 8016e40:	f7ff fd1e 	bl	8016880 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8016e44:	4631      	mov	r1, r6
 8016e46:	4603      	mov	r3, r0
 8016e48:	463a      	mov	r2, r7
 8016e4a:	4628      	mov	r0, r5
 8016e4c:	f7ff fed6 	bl	8016bfc <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8016e50:	4a05      	ldr	r2, [pc, #20]	; (8016e68 <_ZN8touchgfx3HAL25copyFromTFTToClientBufferENS_4RectE+0x3c>)
 8016e52:	682b      	ldr	r3, [r5, #0]
 8016e54:	8812      	ldrh	r2, [r2, #0]
 8016e56:	9200      	str	r2, [sp, #0]
 8016e58:	6ede      	ldr	r6, [r3, #108]	; 0x6c
 8016e5a:	4603      	mov	r3, r0
 8016e5c:	4628      	mov	r0, r5
 8016e5e:	e894 0006 	ldmia.w	r4, {r1, r2}
 8016e62:	47b0      	blx	r6
 8016e64:	b005      	add	sp, #20
 8016e66:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016e68:	20006df0 	.word	0x20006df0

08016e6c <_ZN8touchgfx3HAL16swapFrameBuffersEv>:
 8016e6c:	b570      	push	{r4, r5, r6, lr}
 8016e6e:	f890 306a 	ldrb.w	r3, [r0, #106]	; 0x6a
 8016e72:	4604      	mov	r4, r0
 8016e74:	b19b      	cbz	r3, 8016e9e <_ZN8touchgfx3HAL16swapFrameBuffersEv+0x32>
 8016e76:	2002      	movs	r0, #2
 8016e78:	f7fd f92a 	bl	80140d0 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>
 8016e7c:	2300      	movs	r3, #0
 8016e7e:	4620      	mov	r0, r4
 8016e80:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
 8016e84:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
 8016e88:	6823      	ldr	r3, [r4, #0]
 8016e8a:	f8d3 50b8 	ldr.w	r5, [r3, #184]	; 0xb8
 8016e8e:	f7ff fcf7 	bl	8016880 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8016e92:	4601      	mov	r1, r0
 8016e94:	4620      	mov	r0, r4
 8016e96:	462b      	mov	r3, r5
 8016e98:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016e9c:	4718      	bx	r3
 8016e9e:	bd70      	pop	{r4, r5, r6, pc}

08016ea0 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>:
 8016ea0:	b538      	push	{r3, r4, r5, lr}
 8016ea2:	f890 3078 	ldrb.w	r3, [r0, #120]	; 0x78
 8016ea6:	4604      	mov	r4, r0
 8016ea8:	460d      	mov	r5, r1
 8016eaa:	428b      	cmp	r3, r1
 8016eac:	d006      	beq.n	8016ebc <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x1c>
 8016eae:	6803      	ldr	r3, [r0, #0]
 8016eb0:	b929      	cbnz	r1, 8016ebe <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x1e>
 8016eb2:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8016eb6:	4798      	blx	r3
 8016eb8:	f884 5078 	strb.w	r5, [r4, #120]	; 0x78
 8016ebc:	bd38      	pop	{r3, r4, r5, pc}
 8016ebe:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8016ec2:	e7f8      	b.n	8016eb6 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x16>

08016ec4 <_ZN8touchgfx3HAL15lockFrameBufferEv>:
 8016ec4:	4b0d      	ldr	r3, [pc, #52]	; (8016efc <_ZN8touchgfx3HAL15lockFrameBufferEv+0x38>)
 8016ec6:	b510      	push	{r4, lr}
 8016ec8:	781b      	ldrb	r3, [r3, #0]
 8016eca:	4604      	mov	r4, r0
 8016ecc:	b95b      	cbnz	r3, 8016ee6 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 8016ece:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
 8016ed2:	2b02      	cmp	r3, #2
 8016ed4:	d007      	beq.n	8016ee6 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 8016ed6:	6840      	ldr	r0, [r0, #4]
 8016ed8:	f000 f938 	bl	801714c <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>
 8016edc:	b118      	cbz	r0, 8016ee6 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 8016ede:	6862      	ldr	r2, [r4, #4]
 8016ee0:	7a53      	ldrb	r3, [r2, #9]
 8016ee2:	2b00      	cmp	r3, #0
 8016ee4:	d0fc      	beq.n	8016ee0 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x1c>
 8016ee6:	f7fd fb57 	bl	8014598 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 8016eea:	4620      	mov	r0, r4
 8016eec:	2100      	movs	r1, #0
 8016eee:	f7ff ffd7 	bl	8016ea0 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 8016ef2:	4620      	mov	r0, r4
 8016ef4:	f7ff fcc4 	bl	8016880 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8016ef8:	bd10      	pop	{r4, pc}
 8016efa:	bf00      	nop
 8016efc:	20006df4 	.word	0x20006df4

08016f00 <_ZN8touchgfx13DMA_Interface10initializeEv>:
 8016f00:	4770      	bx	lr

08016f02 <_ZN8touchgfx13DMA_Interface10getDMATypeEv>:
 8016f02:	2000      	movs	r0, #0
 8016f04:	4770      	bx	lr

08016f06 <_ZN8touchgfx17LockFreeDMA_Queue7isEmptyEv>:
 8016f06:	e9d0 2003 	ldrd	r2, r0, [r0, #12]
 8016f0a:	1a13      	subs	r3, r2, r0
 8016f0c:	4258      	negs	r0, r3
 8016f0e:	4158      	adcs	r0, r3
 8016f10:	4770      	bx	lr

08016f12 <_ZN8touchgfx17LockFreeDMA_Queue6isFullEv>:
 8016f12:	e9d0 2303 	ldrd	r2, r3, [r0, #12]
 8016f16:	1a9b      	subs	r3, r3, r2
 8016f18:	2b00      	cmp	r3, #0
 8016f1a:	bfdc      	itt	le
 8016f1c:	6882      	ldrle	r2, [r0, #8]
 8016f1e:	189b      	addle	r3, r3, r2
 8016f20:	2b01      	cmp	r3, #1
 8016f22:	bfcc      	ite	gt
 8016f24:	2000      	movgt	r0, #0
 8016f26:	2001      	movle	r0, #1
 8016f28:	4770      	bx	lr

08016f2a <_ZN8touchgfx17LockFreeDMA_Queue5firstEv>:
 8016f2a:	6902      	ldr	r2, [r0, #16]
 8016f2c:	6843      	ldr	r3, [r0, #4]
 8016f2e:	2024      	movs	r0, #36	; 0x24
 8016f30:	fb00 3002 	mla	r0, r0, r2, r3
 8016f34:	4770      	bx	lr

08016f36 <_ZN8touchgfx13DMA_Interface13seedExecutionEv>:
 8016f36:	6803      	ldr	r3, [r0, #0]
 8016f38:	691b      	ldr	r3, [r3, #16]
 8016f3a:	4718      	bx	r3

08016f3c <_ZN8touchgfx13DMA_Interface11enableAlphaEh>:
 8016f3c:	4770      	bx	lr

08016f3e <_ZN8touchgfx13DMA_Interface12disableAlphaEv>:
 8016f3e:	4770      	bx	lr

08016f40 <_ZN8touchgfx13DMA_Interface7executeEv>:
 8016f40:	2301      	movs	r3, #1
 8016f42:	b570      	push	{r4, r5, r6, lr}
 8016f44:	7203      	strb	r3, [r0, #8]
 8016f46:	4604      	mov	r4, r0
 8016f48:	6840      	ldr	r0, [r0, #4]
 8016f4a:	6803      	ldr	r3, [r0, #0]
 8016f4c:	699b      	ldr	r3, [r3, #24]
 8016f4e:	4798      	blx	r3
 8016f50:	6803      	ldr	r3, [r0, #0]
 8016f52:	4605      	mov	r5, r0
 8016f54:	2b40      	cmp	r3, #64	; 0x40
 8016f56:	d039      	beq.n	8016fcc <_ZN8touchgfx13DMA_Interface7executeEv+0x8c>
 8016f58:	d815      	bhi.n	8016f86 <_ZN8touchgfx13DMA_Interface7executeEv+0x46>
 8016f5a:	2b04      	cmp	r3, #4
 8016f5c:	d022      	beq.n	8016fa4 <_ZN8touchgfx13DMA_Interface7executeEv+0x64>
 8016f5e:	d808      	bhi.n	8016f72 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 8016f60:	2b01      	cmp	r3, #1
 8016f62:	d033      	beq.n	8016fcc <_ZN8touchgfx13DMA_Interface7executeEv+0x8c>
 8016f64:	2b02      	cmp	r3, #2
 8016f66:	d108      	bne.n	8016f7a <_ZN8touchgfx13DMA_Interface7executeEv+0x3a>
 8016f68:	6823      	ldr	r3, [r4, #0]
 8016f6a:	4620      	mov	r0, r4
 8016f6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8016f6e:	4798      	blx	r3
 8016f70:	e025      	b.n	8016fbe <_ZN8touchgfx13DMA_Interface7executeEv+0x7e>
 8016f72:	2b08      	cmp	r3, #8
 8016f74:	d01e      	beq.n	8016fb4 <_ZN8touchgfx13DMA_Interface7executeEv+0x74>
 8016f76:	2b20      	cmp	r3, #32
 8016f78:	d028      	beq.n	8016fcc <_ZN8touchgfx13DMA_Interface7executeEv+0x8c>
 8016f7a:	4b17      	ldr	r3, [pc, #92]	; (8016fd8 <_ZN8touchgfx13DMA_Interface7executeEv+0x98>)
 8016f7c:	2188      	movs	r1, #136	; 0x88
 8016f7e:	4a17      	ldr	r2, [pc, #92]	; (8016fdc <_ZN8touchgfx13DMA_Interface7executeEv+0x9c>)
 8016f80:	4817      	ldr	r0, [pc, #92]	; (8016fe0 <_ZN8touchgfx13DMA_Interface7executeEv+0xa0>)
 8016f82:	f004 fb53 	bl	801b62c <__assert_func>
 8016f86:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8016f8a:	d01f      	beq.n	8016fcc <_ZN8touchgfx13DMA_Interface7executeEv+0x8c>
 8016f8c:	d804      	bhi.n	8016f98 <_ZN8touchgfx13DMA_Interface7executeEv+0x58>
 8016f8e:	2b80      	cmp	r3, #128	; 0x80
 8016f90:	d01c      	beq.n	8016fcc <_ZN8touchgfx13DMA_Interface7executeEv+0x8c>
 8016f92:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8016f96:	e7ef      	b.n	8016f78 <_ZN8touchgfx13DMA_Interface7executeEv+0x38>
 8016f98:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8016f9c:	d016      	beq.n	8016fcc <_ZN8touchgfx13DMA_Interface7executeEv+0x8c>
 8016f9e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8016fa2:	e7e0      	b.n	8016f66 <_ZN8touchgfx13DMA_Interface7executeEv+0x26>
 8016fa4:	6823      	ldr	r3, [r4, #0]
 8016fa6:	7f01      	ldrb	r1, [r0, #28]
 8016fa8:	4620      	mov	r0, r4
 8016faa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016fac:	4798      	blx	r3
 8016fae:	6823      	ldr	r3, [r4, #0]
 8016fb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016fb2:	e006      	b.n	8016fc2 <_ZN8touchgfx13DMA_Interface7executeEv+0x82>
 8016fb4:	6823      	ldr	r3, [r4, #0]
 8016fb6:	7f01      	ldrb	r1, [r0, #28]
 8016fb8:	4620      	mov	r0, r4
 8016fba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016fbc:	4798      	blx	r3
 8016fbe:	6823      	ldr	r3, [r4, #0]
 8016fc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016fc2:	4629      	mov	r1, r5
 8016fc4:	4620      	mov	r0, r4
 8016fc6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016fca:	4718      	bx	r3
 8016fcc:	6823      	ldr	r3, [r4, #0]
 8016fce:	4620      	mov	r0, r4
 8016fd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8016fd2:	4798      	blx	r3
 8016fd4:	e7eb      	b.n	8016fae <_ZN8touchgfx13DMA_Interface7executeEv+0x6e>
 8016fd6:	bf00      	nop
 8016fd8:	0801f81e 	.word	0x0801f81e
 8016fdc:	0801f930 	.word	0x0801f930
 8016fe0:	0801f843 	.word	0x0801f843

08016fe4 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE>:
 8016fe4:	b570      	push	{r4, r5, r6, lr}
 8016fe6:	4604      	mov	r4, r0
 8016fe8:	460e      	mov	r6, r1
 8016fea:	6860      	ldr	r0, [r4, #4]
 8016fec:	6803      	ldr	r3, [r0, #0]
 8016fee:	685b      	ldr	r3, [r3, #4]
 8016ff0:	4798      	blx	r3
 8016ff2:	2800      	cmp	r0, #0
 8016ff4:	d1f9      	bne.n	8016fea <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x6>
 8016ff6:	4d0d      	ldr	r5, [pc, #52]	; (801702c <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x48>)
 8016ff8:	6828      	ldr	r0, [r5, #0]
 8016ffa:	6803      	ldr	r3, [r0, #0]
 8016ffc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8016ffe:	4798      	blx	r3
 8017000:	f7fd fae4 	bl	80145cc <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>
 8017004:	6828      	ldr	r0, [r5, #0]
 8017006:	2101      	movs	r1, #1
 8017008:	f7ff ff4a 	bl	8016ea0 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 801700c:	6860      	ldr	r0, [r4, #4]
 801700e:	4631      	mov	r1, r6
 8017010:	6803      	ldr	r3, [r0, #0]
 8017012:	689b      	ldr	r3, [r3, #8]
 8017014:	4798      	blx	r3
 8017016:	6823      	ldr	r3, [r4, #0]
 8017018:	4620      	mov	r0, r4
 801701a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801701c:	4798      	blx	r3
 801701e:	6828      	ldr	r0, [r5, #0]
 8017020:	6803      	ldr	r3, [r0, #0]
 8017022:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017026:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8017028:	4718      	bx	r3
 801702a:	bf00      	nop
 801702c:	20006df8 	.word	0x20006df8

08017030 <_ZN8touchgfx13DMA_Interface27waitForFrameBufferSemaphoreEv>:
 8017030:	b508      	push	{r3, lr}
 8017032:	f7fd fab1 	bl	8014598 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 8017036:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 801703a:	f7fd babb 	b.w	80145b4 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

0801703e <_ZN8touchgfx13DMA_Interface5startEv>:
 801703e:	b510      	push	{r4, lr}
 8017040:	4604      	mov	r4, r0
 8017042:	6840      	ldr	r0, [r0, #4]
 8017044:	6803      	ldr	r3, [r0, #0]
 8017046:	681b      	ldr	r3, [r3, #0]
 8017048:	4798      	blx	r3
 801704a:	b948      	cbnz	r0, 8017060 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 801704c:	7a63      	ldrb	r3, [r4, #9]
 801704e:	b13b      	cbz	r3, 8017060 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 8017050:	7a23      	ldrb	r3, [r4, #8]
 8017052:	b92b      	cbnz	r3, 8017060 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 8017054:	6823      	ldr	r3, [r4, #0]
 8017056:	4620      	mov	r0, r4
 8017058:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801705a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801705e:	4718      	bx	r3
 8017060:	bd10      	pop	{r4, pc}
	...

08017064 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE>:
 8017064:	b510      	push	{r4, lr}
 8017066:	e9d0 3203 	ldrd	r3, r2, [r0, #12]
 801706a:	1ad2      	subs	r2, r2, r3
 801706c:	2a00      	cmp	r2, #0
 801706e:	bfdc      	itt	le
 8017070:	6884      	ldrle	r4, [r0, #8]
 8017072:	1912      	addle	r2, r2, r4
 8017074:	2a01      	cmp	r2, #1
 8017076:	dd17      	ble.n	80170a8 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x44>
 8017078:	6842      	ldr	r2, [r0, #4]
 801707a:	2424      	movs	r4, #36	; 0x24
 801707c:	fb04 2303 	mla	r3, r4, r3, r2
 8017080:	f101 0220 	add.w	r2, r1, #32
 8017084:	f851 4b04 	ldr.w	r4, [r1], #4
 8017088:	4291      	cmp	r1, r2
 801708a:	f843 4b04 	str.w	r4, [r3], #4
 801708e:	d1f9      	bne.n	8017084 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x20>
 8017090:	780a      	ldrb	r2, [r1, #0]
 8017092:	701a      	strb	r2, [r3, #0]
 8017094:	68c3      	ldr	r3, [r0, #12]
 8017096:	6882      	ldr	r2, [r0, #8]
 8017098:	f3bf 8f5b 	dmb	ish
 801709c:	3301      	adds	r3, #1
 801709e:	429a      	cmp	r2, r3
 80170a0:	bfd8      	it	le
 80170a2:	1a9b      	suble	r3, r3, r2
 80170a4:	60c3      	str	r3, [r0, #12]
 80170a6:	bd10      	pop	{r4, pc}
 80170a8:	4b02      	ldr	r3, [pc, #8]	; (80170b4 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x50>)
 80170aa:	2136      	movs	r1, #54	; 0x36
 80170ac:	4a02      	ldr	r2, [pc, #8]	; (80170b8 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x54>)
 80170ae:	4803      	ldr	r0, [pc, #12]	; (80170bc <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x58>)
 80170b0:	f004 fabc 	bl	801b62c <__assert_func>
 80170b4:	0801f869 	.word	0x0801f869
 80170b8:	0801f960 	.word	0x0801f960
 80170bc:	0801f843 	.word	0x0801f843

080170c0 <_ZN8touchgfx17LockFreeDMA_Queue3popEv>:
 80170c0:	b510      	push	{r4, lr}
 80170c2:	6803      	ldr	r3, [r0, #0]
 80170c4:	4604      	mov	r4, r0
 80170c6:	681b      	ldr	r3, [r3, #0]
 80170c8:	4798      	blx	r3
 80170ca:	b128      	cbz	r0, 80170d8 <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x18>
 80170cc:	4b07      	ldr	r3, [pc, #28]	; (80170ec <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x2c>)
 80170ce:	213c      	movs	r1, #60	; 0x3c
 80170d0:	4a07      	ldr	r2, [pc, #28]	; (80170f0 <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x30>)
 80170d2:	4808      	ldr	r0, [pc, #32]	; (80170f4 <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x34>)
 80170d4:	f004 faaa 	bl	801b62c <__assert_func>
 80170d8:	6923      	ldr	r3, [r4, #16]
 80170da:	68a2      	ldr	r2, [r4, #8]
 80170dc:	f3bf 8f5b 	dmb	ish
 80170e0:	3301      	adds	r3, #1
 80170e2:	429a      	cmp	r2, r3
 80170e4:	bfd8      	it	le
 80170e6:	1a9b      	suble	r3, r3, r2
 80170e8:	6123      	str	r3, [r4, #16]
 80170ea:	bd10      	pop	{r4, pc}
 80170ec:	0801f88c 	.word	0x0801f88c
 80170f0:	0801f9ae 	.word	0x0801f9ae
 80170f4:	0801f843 	.word	0x0801f843

080170f8 <_ZN8touchgfx13DMA_Interface16executeCompletedEv>:
 80170f8:	b570      	push	{r4, r5, r6, lr}
 80170fa:	4604      	mov	r4, r0
 80170fc:	6840      	ldr	r0, [r0, #4]
 80170fe:	6803      	ldr	r3, [r0, #0]
 8017100:	681b      	ldr	r3, [r3, #0]
 8017102:	4798      	blx	r3
 8017104:	4605      	mov	r5, r0
 8017106:	b930      	cbnz	r0, 8017116 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 8017108:	7a23      	ldrb	r3, [r4, #8]
 801710a:	b123      	cbz	r3, 8017116 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 801710c:	6860      	ldr	r0, [r4, #4]
 801710e:	6803      	ldr	r3, [r0, #0]
 8017110:	695b      	ldr	r3, [r3, #20]
 8017112:	4798      	blx	r3
 8017114:	7225      	strb	r5, [r4, #8]
 8017116:	6860      	ldr	r0, [r4, #4]
 8017118:	6803      	ldr	r3, [r0, #0]
 801711a:	681b      	ldr	r3, [r3, #0]
 801711c:	4798      	blx	r3
 801711e:	b928      	cbnz	r0, 801712c <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x34>
 8017120:	6823      	ldr	r3, [r4, #0]
 8017122:	4620      	mov	r0, r4
 8017124:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017126:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801712a:	4718      	bx	r3
 801712c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017130:	f7fd ba58 	b.w	80145e4 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>

08017134 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>:
 8017134:	b510      	push	{r4, lr}
 8017136:	6082      	str	r2, [r0, #8]
 8017138:	2200      	movs	r2, #0
 801713a:	4c03      	ldr	r4, [pc, #12]	; (8017148 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi+0x14>)
 801713c:	e9c0 2203 	strd	r2, r2, [r0, #12]
 8017140:	e9c0 4100 	strd	r4, r1, [r0]
 8017144:	bd10      	pop	{r4, pc}
 8017146:	bf00      	nop
 8017148:	0801f914 	.word	0x0801f914

0801714c <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>:
 801714c:	6840      	ldr	r0, [r0, #4]
 801714e:	6803      	ldr	r3, [r0, #0]
 8017150:	681b      	ldr	r3, [r3, #0]
 8017152:	4718      	bx	r3

08017154 <_ZN8touchgfx3LCD27supportDynamicBitmapDrawingENS_6Bitmap12BitmapFormatE>:
 8017154:	b510      	push	{r4, lr}
 8017156:	6803      	ldr	r3, [r0, #0]
 8017158:	460c      	mov	r4, r1
 801715a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801715c:	4798      	blx	r3
 801715e:	1b03      	subs	r3, r0, r4
 8017160:	4258      	negs	r0, r3
 8017162:	4158      	adcs	r0, r3
 8017164:	bd10      	pop	{r4, pc}
	...

08017168 <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE>:
 8017168:	4b01      	ldr	r3, [pc, #4]	; (8017170 <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE+0x8>)
 801716a:	6019      	str	r1, [r3, #0]
 801716c:	4770      	bx	lr
 801716e:	bf00      	nop
 8017170:	20006e00 	.word	0x20006e00

08017174 <_ZN8touchgfx3LCD18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 8017174:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017178:	4696      	mov	lr, r2
 801717a:	b097      	sub	sp, #92	; 0x5c
 801717c:	4605      	mov	r5, r0
 801717e:	4614      	mov	r4, r2
 8017180:	460e      	mov	r6, r1
 8017182:	461f      	mov	r7, r3
 8017184:	f10d 0c1c 	add.w	ip, sp, #28
 8017188:	f8bd 8088 	ldrh.w	r8, [sp, #136]	; 0x88
 801718c:	f89d 908c 	ldrb.w	r9, [sp, #140]	; 0x8c
 8017190:	f8bd a090 	ldrh.w	sl, [sp, #144]	; 0x90
 8017194:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8017198:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801719c:	f8de 3000 	ldr.w	r3, [lr]
 80171a0:	f104 0e14 	add.w	lr, r4, #20
 80171a4:	f8cc 3000 	str.w	r3, [ip]
 80171a8:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 80171ac:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80171b0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80171b4:	f8de 3000 	ldr.w	r3, [lr]
 80171b8:	f104 0e28 	add.w	lr, r4, #40	; 0x28
 80171bc:	f8cc 3000 	str.w	r3, [ip]
 80171c0:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
 80171c4:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80171c8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80171cc:	f8de 3000 	ldr.w	r3, [lr]
 80171d0:	4631      	mov	r1, r6
 80171d2:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80171d4:	4628      	mov	r0, r5
 80171d6:	f8cc 3000 	str.w	r3, [ip]
 80171da:	682b      	ldr	r3, [r5, #0]
 80171dc:	9201      	str	r2, [sp, #4]
 80171de:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80171e0:	f8cd 8008 	str.w	r8, [sp, #8]
 80171e4:	9200      	str	r2, [sp, #0]
 80171e6:	aa07      	add	r2, sp, #28
 80171e8:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 80171ec:	f8d3 b03c 	ldr.w	fp, [r3, #60]	; 0x3c
 80171f0:	463b      	mov	r3, r7
 80171f2:	47d8      	blx	fp
 80171f4:	46a6      	mov	lr, r4
 80171f6:	f10d 0c1c 	add.w	ip, sp, #28
 80171fa:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80171fe:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8017202:	f8de 3000 	ldr.w	r3, [lr]
 8017206:	f104 0e28 	add.w	lr, r4, #40	; 0x28
 801720a:	343c      	adds	r4, #60	; 0x3c
 801720c:	f8cc 3000 	str.w	r3, [ip]
 8017210:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 8017214:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8017218:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801721c:	f8de 3000 	ldr.w	r3, [lr]
 8017220:	f8cc 3000 	str.w	r3, [ip]
 8017224:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
 8017228:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801722a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801722e:	6823      	ldr	r3, [r4, #0]
 8017230:	4631      	mov	r1, r6
 8017232:	4628      	mov	r0, r5
 8017234:	f8cc 3000 	str.w	r3, [ip]
 8017238:	682b      	ldr	r3, [r5, #0]
 801723a:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 801723e:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8017240:	f8cd 8008 	str.w	r8, [sp, #8]
 8017244:	9201      	str	r2, [sp, #4]
 8017246:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8017248:	9200      	str	r2, [sp, #0]
 801724a:	aa07      	add	r2, sp, #28
 801724c:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
 801724e:	463b      	mov	r3, r7
 8017250:	47a0      	blx	r4
 8017252:	b017      	add	sp, #92	; 0x5c
 8017254:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08017258 <_ZN8touchgfx3LCD28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 8017258:	2000      	movs	r0, #0
 801725a:	4770      	bx	lr

0801725c <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht>:
 801725c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017260:	b08d      	sub	sp, #52	; 0x34
 8017262:	4688      	mov	r8, r1
 8017264:	f8d3 c000 	ldr.w	ip, [r3]
 8017268:	9916      	ldr	r1, [sp, #88]	; 0x58
 801726a:	f8bd 4070 	ldrh.w	r4, [sp, #112]	; 0x70
 801726e:	680f      	ldr	r7, [r1, #0]
 8017270:	ed92 4a09 	vldr	s8, [r2, #36]	; 0x24
 8017274:	eba7 070c 	sub.w	r7, r7, ip
 8017278:	edd2 4a0b 	vldr	s9, [r2, #44]	; 0x2c
 801727c:	edd3 6a07 	vldr	s13, [r3, #28]
 8017280:	42bc      	cmp	r4, r7
 8017282:	9918      	ldr	r1, [sp, #96]	; 0x60
 8017284:	f8dd a064 	ldr.w	sl, [sp, #100]	; 0x64
 8017288:	bfa8      	it	ge
 801728a:	463c      	movge	r4, r7
 801728c:	f9b1 9000 	ldrsh.w	r9, [r1]
 8017290:	f9ba 1000 	ldrsh.w	r1, [sl]
 8017294:	ee07 4a90 	vmov	s15, r4
 8017298:	eb09 0e0c 	add.w	lr, r9, ip
 801729c:	edd3 1a0a 	vldr	s3, [r3, #40]	; 0x28
 80172a0:	eeb8 5ae7 	vcvt.f32.s32	s10, s15
 80172a4:	edd2 7a0d 	vldr	s15, [r2, #52]	; 0x34
 80172a8:	ed93 2a0d 	vldr	s4, [r3, #52]	; 0x34
 80172ac:	4571      	cmp	r1, lr
 80172ae:	ee25 4a04 	vmul.f32	s8, s10, s8
 80172b2:	ee65 4a24 	vmul.f32	s9, s10, s9
 80172b6:	ee25 5a27 	vmul.f32	s10, s10, s15
 80172ba:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80172be:	ee71 0aa4 	vadd.f32	s1, s3, s9
 80172c2:	ee32 1a05 	vadd.f32	s2, s4, s10
 80172c6:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80172ca:	ee36 0a84 	vadd.f32	s0, s13, s8
 80172ce:	ee61 1a87 	vmul.f32	s3, s3, s14
 80172d2:	ee22 2a07 	vmul.f32	s4, s4, s14
 80172d6:	f340 808c 	ble.w	80173f2 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x196>
 80172da:	eba1 060e 	sub.w	r6, r1, lr
 80172de:	fb96 f5f4 	sdiv	r5, r6, r4
 80172e2:	ee07 5a10 	vmov	s14, r5
 80172e6:	2d00      	cmp	r5, #0
 80172e8:	fb04 6615 	mls	r6, r4, r5, r6
 80172ec:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80172f0:	eea7 0a04 	vfma.f32	s0, s14, s8
 80172f4:	eee7 0a24 	vfma.f32	s1, s14, s9
 80172f8:	eea7 1a05 	vfma.f32	s2, s14, s10
 80172fc:	dd12      	ble.n	8017324 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xc8>
 80172fe:	ee70 6a44 	vsub.f32	s13, s0, s8
 8017302:	ee70 1ae4 	vsub.f32	s3, s1, s9
 8017306:	ee31 2a45 	vsub.f32	s4, s2, s10
 801730a:	eef5 6a40 	vcmp.f32	s13, #0.0
 801730e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017312:	bf14      	ite	ne
 8017314:	ee87 7aa6 	vdivne.f32	s14, s15, s13
 8017318:	eeb0 7a67 	vmoveq.f32	s14, s15
 801731c:	ee61 1a87 	vmul.f32	s3, s3, s14
 8017320:	ee22 2a07 	vmul.f32	s4, s4, s14
 8017324:	fb05 f204 	mul.w	r2, r5, r4
 8017328:	1abf      	subs	r7, r7, r2
 801732a:	4494      	add	ip, r2
 801732c:	f8ba 2004 	ldrh.w	r2, [sl, #4]
 8017330:	4411      	add	r1, r2
 8017332:	eb09 020c 	add.w	r2, r9, ip
 8017336:	b209      	sxth	r1, r1
 8017338:	443a      	add	r2, r7
 801733a:	428a      	cmp	r2, r1
 801733c:	bfc4      	itt	gt
 801733e:	eba1 0209 	subgt.w	r2, r1, r9
 8017342:	eba2 070c 	subgt.w	r7, r2, ip
 8017346:	2f00      	cmp	r7, #0
 8017348:	dd50      	ble.n	80173ec <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x190>
 801734a:	fb97 f1f4 	sdiv	r1, r7, r4
 801734e:	fb04 7211 	mls	r2, r4, r1, r7
 8017352:	b90a      	cbnz	r2, 8017358 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xfc>
 8017354:	3901      	subs	r1, #1
 8017356:	4622      	mov	r2, r4
 8017358:	eec7 3a80 	vdiv.f32	s7, s15, s0
 801735c:	6840      	ldr	r0, [r0, #4]
 801735e:	f89d b06c 	ldrb.w	fp, [sp, #108]	; 0x6c
 8017362:	44b6      	add	lr, r6
 8017364:	f8d0 a000 	ldr.w	sl, [r0]
 8017368:	2900      	cmp	r1, #0
 801736a:	bfcc      	ite	gt
 801736c:	46a1      	movgt	r9, r4
 801736e:	4691      	movle	r9, r2
 8017370:	900b      	str	r0, [sp, #44]	; 0x2c
 8017372:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8017374:	fb04 e505 	mla	r5, r4, r5, lr
 8017378:	eef0 6a42 	vmov.f32	s13, s4
 801737c:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 8017380:	9008      	str	r0, [sp, #32]
 8017382:	eeb0 7a61 	vmov.f32	s14, s3
 8017386:	9818      	ldr	r0, [sp, #96]	; 0x60
 8017388:	695b      	ldr	r3, [r3, #20]
 801738a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801738e:	f9b0 b002 	ldrsh.w	fp, [r0, #2]
 8017392:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 8017396:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8017398:	445b      	add	r3, fp
 801739a:	9307      	str	r3, [sp, #28]
 801739c:	ee16 3a90 	vmov	r3, s13
 80173a0:	e9cd 8505 	strd	r8, r5, [sp, #20]
 80173a4:	ee60 2aa3 	vmul.f32	s5, s1, s7
 80173a8:	ee21 3a23 	vmul.f32	s6, s2, s7
 80173ac:	ee72 7ae1 	vsub.f32	s15, s5, s3
 80173b0:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 80173b4:	ee17 7a90 	vmov	r7, s15
 80173b8:	ee73 7a42 	vsub.f32	s15, s6, s4
 80173bc:	fb97 f7f4 	sdiv	r7, r7, r4
 80173c0:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 80173c4:	ee17 ca90 	vmov	ip, s15
 80173c8:	fb9c fcf4 	sdiv	ip, ip, r4
 80173cc:	fb0c 3306 	mla	r3, ip, r6, r3
 80173d0:	9302      	str	r3, [sp, #8]
 80173d2:	ee17 3a10 	vmov	r3, s14
 80173d6:	e9cd 7c03 	strd	r7, ip, [sp, #12]
 80173da:	fb07 3706 	mla	r7, r7, r6, r3
 80173de:	eba9 0306 	sub.w	r3, r9, r6
 80173e2:	e9cd 4700 	strd	r4, r7, [sp]
 80173e6:	f8da 4008 	ldr.w	r4, [sl, #8]
 80173ea:	47a0      	blx	r4
 80173ec:	b00d      	add	sp, #52	; 0x34
 80173ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80173f2:	2500      	movs	r5, #0
 80173f4:	462e      	mov	r6, r5
 80173f6:	e799      	b.n	801732c <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xd0>

080173f8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 80173f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80173fc:	b0db      	sub	sp, #364	; 0x16c
 80173fe:	461d      	mov	r5, r3
 8017400:	4614      	mov	r4, r2
 8017402:	f8bd 3198 	ldrh.w	r3, [sp, #408]	; 0x198
 8017406:	910f      	str	r1, [sp, #60]	; 0x3c
 8017408:	4629      	mov	r1, r5
 801740a:	930a      	str	r3, [sp, #40]	; 0x28
 801740c:	f89d 319c 	ldrb.w	r3, [sp, #412]	; 0x19c
 8017410:	9009      	str	r0, [sp, #36]	; 0x24
 8017412:	930b      	str	r3, [sp, #44]	; 0x2c
 8017414:	f8bd 31a0 	ldrh.w	r3, [sp, #416]	; 0x1a0
 8017418:	f8dd b194 	ldr.w	fp, [sp, #404]	; 0x194
 801741c:	9310      	str	r3, [sp, #64]	; 0x40
 801741e:	6803      	ldr	r3, [r0, #0]
 8017420:	6c5f      	ldr	r7, [r3, #68]	; 0x44
 8017422:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8017426:	47b8      	blx	r7
 8017428:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801742a:	6058      	str	r0, [r3, #4]
 801742c:	2800      	cmp	r0, #0
 801742e:	f000 83a1 	beq.w	8017b74 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8017432:	682b      	ldr	r3, [r5, #0]
 8017434:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 8017438:	ed94 7a02 	vldr	s14, [r4, #8]
 801743c:	9314      	str	r3, [sp, #80]	; 0x50
 801743e:	686b      	ldr	r3, [r5, #4]
 8017440:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8017444:	9315      	str	r3, [sp, #84]	; 0x54
 8017446:	4bc1      	ldr	r3, [pc, #772]	; (801774c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x354>)
 8017448:	7819      	ldrb	r1, [r3, #0]
 801744a:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
 801744e:	2900      	cmp	r1, #0
 8017450:	bf16      	itet	ne
 8017452:	4619      	movne	r1, r3
 8017454:	4611      	moveq	r1, r2
 8017456:	4613      	movne	r3, r2
 8017458:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801745c:	9116      	str	r1, [sp, #88]	; 0x58
 801745e:	e9cd 3217 	strd	r3, r2, [sp, #92]	; 0x5c
 8017462:	f240 8387 	bls.w	8017b74 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8017466:	ed94 7a07 	vldr	s14, [r4, #28]
 801746a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801746e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017472:	f240 837f 	bls.w	8017b74 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8017476:	ed94 7a0c 	vldr	s14, [r4, #48]	; 0x30
 801747a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801747e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017482:	f240 8377 	bls.w	8017b74 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8017486:	6822      	ldr	r2, [r4, #0]
 8017488:	4bb1      	ldr	r3, [pc, #708]	; (8017750 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x358>)
 801748a:	429a      	cmp	r2, r3
 801748c:	f2c0 8372 	blt.w	8017b74 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8017490:	49b0      	ldr	r1, [pc, #704]	; (8017754 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x35c>)
 8017492:	6963      	ldr	r3, [r4, #20]
 8017494:	428a      	cmp	r2, r1
 8017496:	f300 836d 	bgt.w	8017b74 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801749a:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
 801749e:	48ae      	ldr	r0, [pc, #696]	; (8017758 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x360>)
 80174a0:	33ff      	adds	r3, #255	; 0xff
 80174a2:	4283      	cmp	r3, r0
 80174a4:	f200 8366 	bhi.w	8017b74 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 80174a8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80174aa:	4dac      	ldr	r5, [pc, #688]	; (801775c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x364>)
 80174ac:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
 80174b0:	33ff      	adds	r3, #255	; 0xff
 80174b2:	42ab      	cmp	r3, r5
 80174b4:	f200 835e 	bhi.w	8017b74 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 80174b8:	6862      	ldr	r2, [r4, #4]
 80174ba:	f502 331c 	add.w	r3, r2, #159744	; 0x27000
 80174be:	33ff      	adds	r3, #255	; 0xff
 80174c0:	4283      	cmp	r3, r0
 80174c2:	f200 8357 	bhi.w	8017b74 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 80174c6:	69a1      	ldr	r1, [r4, #24]
 80174c8:	f501 331c 	add.w	r3, r1, #159744	; 0x27000
 80174cc:	33ff      	adds	r3, #255	; 0xff
 80174ce:	4283      	cmp	r3, r0
 80174d0:	f200 8350 	bhi.w	8017b74 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 80174d4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80174d6:	f503 301c 	add.w	r0, r3, #159744	; 0x27000
 80174da:	30ff      	adds	r0, #255	; 0xff
 80174dc:	42a8      	cmp	r0, r5
 80174de:	f200 8349 	bhi.w	8017b74 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 80174e2:	428a      	cmp	r2, r1
 80174e4:	f280 8110 	bge.w	8017708 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x310>
 80174e8:	429a      	cmp	r2, r3
 80174ea:	f300 8119 	bgt.w	8017720 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x328>
 80174ee:	4299      	cmp	r1, r3
 80174f0:	f280 811d 	bge.w	801772e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x336>
 80174f4:	2502      	movs	r5, #2
 80174f6:	2701      	movs	r7, #1
 80174f8:	46a9      	mov	r9, r5
 80174fa:	46b8      	mov	r8, r7
 80174fc:	f04f 0a00 	mov.w	sl, #0
 8017500:	4621      	mov	r1, r4
 8017502:	a849      	add	r0, sp, #292	; 0x124
 8017504:	f001 fbe4 	bl	8018cd0 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>
 8017508:	4622      	mov	r2, r4
 801750a:	4653      	mov	r3, sl
 801750c:	a949      	add	r1, sp, #292	; 0x124
 801750e:	f8cd 9000 	str.w	r9, [sp]
 8017512:	a819      	add	r0, sp, #100	; 0x64
 8017514:	f001 fd0c 	bl	8018f30 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 8017518:	4622      	mov	r2, r4
 801751a:	4653      	mov	r3, sl
 801751c:	a949      	add	r1, sp, #292	; 0x124
 801751e:	f8cd 8000 	str.w	r8, [sp]
 8017522:	a829      	add	r0, sp, #164	; 0xa4
 8017524:	f001 fd04 	bl	8018f30 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 8017528:	4643      	mov	r3, r8
 801752a:	4622      	mov	r2, r4
 801752c:	a949      	add	r1, sp, #292	; 0x124
 801752e:	f8cd 9000 	str.w	r9, [sp]
 8017532:	a839      	add	r0, sp, #228	; 0xe4
 8017534:	f001 fcfc 	bl	8018f30 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 8017538:	42af      	cmp	r7, r5
 801753a:	af12      	add	r7, sp, #72	; 0x48
 801753c:	bfb7      	itett	lt
 801753e:	2300      	movlt	r3, #0
 8017540:	2301      	movge	r3, #1
 8017542:	ad29      	addlt	r5, sp, #164	; 0xa4
 8017544:	ac19      	addlt	r4, sp, #100	; 0x64
 8017546:	bfb1      	iteee	lt
 8017548:	930e      	strlt	r3, [sp, #56]	; 0x38
 801754a:	ad19      	addge	r5, sp, #100	; 0x64
 801754c:	930e      	strge	r3, [sp, #56]	; 0x38
 801754e:	ac29      	addge	r4, sp, #164	; 0xa4
 8017550:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8017552:	e893 0003 	ldmia.w	r3, {r0, r1}
 8017556:	e887 0003 	stmia.w	r7, {r0, r1}
 801755a:	b928      	cbnz	r0, 8017568 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x170>
 801755c:	4b80      	ldr	r3, [pc, #512]	; (8017760 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x368>)
 801755e:	6818      	ldr	r0, [r3, #0]
 8017560:	6803      	ldr	r3, [r0, #0]
 8017562:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017564:	4798      	blx	r3
 8017566:	6038      	str	r0, [r7, #0]
 8017568:	9b64      	ldr	r3, [sp, #400]	; 0x190
 801756a:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 801756e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8017572:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 8017574:	930c      	str	r3, [sp, #48]	; 0x30
 8017576:	990c      	ldr	r1, [sp, #48]	; 0x30
 8017578:	6963      	ldr	r3, [r4, #20]
 801757a:	440b      	add	r3, r1
 801757c:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 8017580:	4408      	add	r0, r1
 8017582:	b200      	sxth	r0, r0
 8017584:	4283      	cmp	r3, r0
 8017586:	900d      	str	r0, [sp, #52]	; 0x34
 8017588:	f280 80dd 	bge.w	8017746 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x34e>
 801758c:	428b      	cmp	r3, r1
 801758e:	da08      	bge.n	80175a2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 8017590:	2a00      	cmp	r2, #0
 8017592:	dd06      	ble.n	80175a2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 8017594:	1acb      	subs	r3, r1, r3
 8017596:	429a      	cmp	r2, r3
 8017598:	f2c0 80e4 	blt.w	8017764 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36c>
 801759c:	2b00      	cmp	r3, #0
 801759e:	f300 80e2 	bgt.w	8017766 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36e>
 80175a2:	6967      	ldr	r7, [r4, #20]
 80175a4:	f10d 0850 	add.w	r8, sp, #80	; 0x50
 80175a8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80175aa:	443b      	add	r3, r7
 80175ac:	461f      	mov	r7, r3
 80175ae:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80175b0:	1bdf      	subs	r7, r3, r7
 80175b2:	4297      	cmp	r7, r2
 80175b4:	bfa8      	it	ge
 80175b6:	4617      	movge	r7, r2
 80175b8:	2f00      	cmp	r7, #0
 80175ba:	f340 8166 	ble.w	801788a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x492>
 80175be:	9b64      	ldr	r3, [sp, #400]	; 0x190
 80175c0:	6829      	ldr	r1, [r5, #0]
 80175c2:	f9b3 2000 	ldrsh.w	r2, [r3]
 80175c6:	f9bb 3000 	ldrsh.w	r3, [fp]
 80175ca:	4411      	add	r1, r2
 80175cc:	6820      	ldr	r0, [r4, #0]
 80175ce:	4299      	cmp	r1, r3
 80175d0:	dd1a      	ble.n	8017608 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 80175d2:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 80175d6:	4402      	add	r2, r0
 80175d8:	440b      	add	r3, r1
 80175da:	b21b      	sxth	r3, r3
 80175dc:	429a      	cmp	r2, r3
 80175de:	dc13      	bgt.n	8017608 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 80175e0:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80175e2:	a912      	add	r1, sp, #72	; 0x48
 80175e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80175e6:	9809      	ldr	r0, [sp, #36]	; 0x24
 80175e8:	681b      	ldr	r3, [r3, #0]
 80175ea:	9206      	str	r2, [sp, #24]
 80175ec:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80175ee:	9500      	str	r5, [sp, #0]
 80175f0:	9205      	str	r2, [sp, #20]
 80175f2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80175f4:	e9cd b203 	strd	fp, r2, [sp, #12]
 80175f8:	9a64      	ldr	r2, [sp, #400]	; 0x190
 80175fa:	e9cd 8201 	strd	r8, r2, [sp, #4]
 80175fe:	aa49      	add	r2, sp, #292	; 0x124
 8017600:	f8d3 9048 	ldr.w	r9, [r3, #72]	; 0x48
 8017604:	4623      	mov	r3, r4
 8017606:	47c8      	blx	r9
 8017608:	ed94 7a0a 	vldr	s14, [r4, #40]	; 0x28
 801760c:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
 8017610:	edd4 6a0e 	vldr	s13, [r4, #56]	; 0x38
 8017614:	ee37 7a27 	vadd.f32	s14, s14, s15
 8017618:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
 801761c:	68a1      	ldr	r1, [r4, #8]
 801761e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8017622:	ed94 6a08 	vldr	s12, [r4, #32]
 8017626:	edd4 6a07 	vldr	s13, [r4, #28]
 801762a:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 801762e:	ee76 6a86 	vadd.f32	s13, s13, s12
 8017632:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 8017636:	e9d4 2300 	ldrd	r2, r3, [r4]
 801763a:	edc4 6a07 	vstr	s13, [r4, #28]
 801763e:	441a      	add	r2, r3
 8017640:	6963      	ldr	r3, [r4, #20]
 8017642:	3301      	adds	r3, #1
 8017644:	6022      	str	r2, [r4, #0]
 8017646:	6163      	str	r3, [r4, #20]
 8017648:	69a3      	ldr	r3, [r4, #24]
 801764a:	3b01      	subs	r3, #1
 801764c:	61a3      	str	r3, [r4, #24]
 801764e:	6923      	ldr	r3, [r4, #16]
 8017650:	440b      	add	r3, r1
 8017652:	68e1      	ldr	r1, [r4, #12]
 8017654:	428b      	cmp	r3, r1
 8017656:	6123      	str	r3, [r4, #16]
 8017658:	db15      	blt.n	8017686 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x28e>
 801765a:	ed94 6a09 	vldr	s12, [r4, #36]	; 0x24
 801765e:	3201      	adds	r2, #1
 8017660:	1a5b      	subs	r3, r3, r1
 8017662:	ee76 6a26 	vadd.f32	s13, s12, s13
 8017666:	6022      	str	r2, [r4, #0]
 8017668:	6123      	str	r3, [r4, #16]
 801766a:	edc4 6a07 	vstr	s13, [r4, #28]
 801766e:	edd4 6a0c 	vldr	s13, [r4, #48]	; 0x30
 8017672:	ee36 7a87 	vadd.f32	s14, s13, s14
 8017676:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 801767a:	ed94 7a0f 	vldr	s14, [r4, #60]	; 0x3c
 801767e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8017682:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 8017686:	ed95 7a0a 	vldr	s14, [r5, #40]	; 0x28
 801768a:	edd5 7a0b 	vldr	s15, [r5, #44]	; 0x2c
 801768e:	edd5 6a0e 	vldr	s13, [r5, #56]	; 0x38
 8017692:	ee37 7a27 	vadd.f32	s14, s14, s15
 8017696:	edd5 7a0d 	vldr	s15, [r5, #52]	; 0x34
 801769a:	68a9      	ldr	r1, [r5, #8]
 801769c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80176a0:	ed95 6a08 	vldr	s12, [r5, #32]
 80176a4:	edd5 6a07 	vldr	s13, [r5, #28]
 80176a8:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 80176ac:	ee76 6a86 	vadd.f32	s13, s13, s12
 80176b0:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 80176b4:	e9d5 2300 	ldrd	r2, r3, [r5]
 80176b8:	edc5 6a07 	vstr	s13, [r5, #28]
 80176bc:	441a      	add	r2, r3
 80176be:	696b      	ldr	r3, [r5, #20]
 80176c0:	3301      	adds	r3, #1
 80176c2:	602a      	str	r2, [r5, #0]
 80176c4:	616b      	str	r3, [r5, #20]
 80176c6:	69ab      	ldr	r3, [r5, #24]
 80176c8:	3b01      	subs	r3, #1
 80176ca:	61ab      	str	r3, [r5, #24]
 80176cc:	692b      	ldr	r3, [r5, #16]
 80176ce:	440b      	add	r3, r1
 80176d0:	68e9      	ldr	r1, [r5, #12]
 80176d2:	428b      	cmp	r3, r1
 80176d4:	612b      	str	r3, [r5, #16]
 80176d6:	db15      	blt.n	8017704 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x30c>
 80176d8:	ed95 6a09 	vldr	s12, [r5, #36]	; 0x24
 80176dc:	3201      	adds	r2, #1
 80176de:	1a5b      	subs	r3, r3, r1
 80176e0:	ee76 6a26 	vadd.f32	s13, s12, s13
 80176e4:	602a      	str	r2, [r5, #0]
 80176e6:	612b      	str	r3, [r5, #16]
 80176e8:	edc5 6a07 	vstr	s13, [r5, #28]
 80176ec:	edd5 6a0c 	vldr	s13, [r5, #48]	; 0x30
 80176f0:	ee36 7a87 	vadd.f32	s14, s13, s14
 80176f4:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 80176f8:	ed95 7a0f 	vldr	s14, [r5, #60]	; 0x3c
 80176fc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8017700:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 8017704:	3f01      	subs	r7, #1
 8017706:	e757      	b.n	80175b8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1c0>
 8017708:	4299      	cmp	r1, r3
 801770a:	dc13      	bgt.n	8017734 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x33c>
 801770c:	429a      	cmp	r2, r3
 801770e:	da14      	bge.n	801773a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x342>
 8017710:	2502      	movs	r5, #2
 8017712:	2703      	movs	r7, #3
 8017714:	f04f 0800 	mov.w	r8, #0
 8017718:	46a9      	mov	r9, r5
 801771a:	f04f 0a01 	mov.w	sl, #1
 801771e:	e6ef      	b.n	8017500 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 8017720:	2501      	movs	r5, #1
 8017722:	2700      	movs	r7, #0
 8017724:	46a9      	mov	r9, r5
 8017726:	46b8      	mov	r8, r7
 8017728:	f04f 0a02 	mov.w	sl, #2
 801772c:	e6e8      	b.n	8017500 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 801772e:	2501      	movs	r5, #1
 8017730:	2702      	movs	r7, #2
 8017732:	e6e1      	b.n	80174f8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x100>
 8017734:	2500      	movs	r5, #0
 8017736:	2701      	movs	r7, #1
 8017738:	e7f4      	b.n	8017724 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x32c>
 801773a:	2702      	movs	r7, #2
 801773c:	2503      	movs	r5, #3
 801773e:	f04f 0900 	mov.w	r9, #0
 8017742:	46b8      	mov	r8, r7
 8017744:	e7e9      	b.n	801771a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x322>
 8017746:	4613      	mov	r3, r2
 8017748:	e728      	b.n	801759c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1a4>
 801774a:	bf00      	nop
 801774c:	20006dee 	.word	0x20006dee
 8017750:	fffd8f01 	.word	0xfffd8f01
 8017754:	00027100 	.word	0x00027100
 8017758:	0004e1ff 	.word	0x0004e1ff
 801775c:	0004e1fe 	.word	0x0004e1fe
 8017760:	20006df8 	.word	0x20006df8
 8017764:	4613      	mov	r3, r2
 8017766:	992b      	ldr	r1, [sp, #172]	; 0xac
 8017768:	469e      	mov	lr, r3
 801776a:	9f2e      	ldr	r7, [sp, #184]	; 0xb8
 801776c:	469c      	mov	ip, r3
 801776e:	9111      	str	r1, [sp, #68]	; 0x44
 8017770:	f04f 0900 	mov.w	r9, #0
 8017774:	eddd 4a34 	vldr	s9, [sp, #208]	; 0xd0
 8017778:	ed9d 7a33 	vldr	s14, [sp, #204]	; 0xcc
 801777c:	ed9d 4a37 	vldr	s8, [sp, #220]	; 0xdc
 8017780:	eddd 7a36 	vldr	s15, [sp, #216]	; 0xd8
 8017784:	eddd 3a31 	vldr	s7, [sp, #196]	; 0xc4
 8017788:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
 801778c:	ed9d 5a32 	vldr	s10, [sp, #200]	; 0xc8
 8017790:	eddd 5a35 	vldr	s11, [sp, #212]	; 0xd4
 8017794:	ed9d 6a38 	vldr	s12, [sp, #224]	; 0xe0
 8017798:	e9dd 0a29 	ldrd	r0, sl, [sp, #164]	; 0xa4
 801779c:	e9dd 812c 	ldrd	r8, r1, [sp, #176]	; 0xb0
 80177a0:	f1bc 0f00 	cmp.w	ip, #0
 80177a4:	d147      	bne.n	8017836 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x43e>
 80177a6:	eb03 0c07 	add.w	ip, r3, r7
 80177aa:	1ad7      	subs	r7, r2, r3
 80177ac:	f1b9 0f00 	cmp.w	r9, #0
 80177b0:	d009      	beq.n	80177c6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3ce>
 80177b2:	9029      	str	r0, [sp, #164]	; 0xa4
 80177b4:	ed8d 7a33 	vstr	s14, [sp, #204]	; 0xcc
 80177b8:	edcd 7a36 	vstr	s15, [sp, #216]	; 0xd8
 80177bc:	edcd 6a30 	vstr	s13, [sp, #192]	; 0xc0
 80177c0:	912d      	str	r1, [sp, #180]	; 0xb4
 80177c2:	e9cd c72e 	strd	ip, r7, [sp, #184]	; 0xb8
 80177c6:	991b      	ldr	r1, [sp, #108]	; 0x6c
 80177c8:	f04f 0800 	mov.w	r8, #0
 80177cc:	eddd 4a24 	vldr	s9, [sp, #144]	; 0x90
 80177d0:	9111      	str	r1, [sp, #68]	; 0x44
 80177d2:	eddd 6a23 	vldr	s13, [sp, #140]	; 0x8c
 80177d6:	ed9d 4a27 	vldr	s8, [sp, #156]	; 0x9c
 80177da:	ed9d 7a26 	vldr	s14, [sp, #152]	; 0x98
 80177de:	eddd 3a21 	vldr	s7, [sp, #132]	; 0x84
 80177e2:	eddd 7a20 	vldr	s15, [sp, #128]	; 0x80
 80177e6:	ed9d 5a22 	vldr	s10, [sp, #136]	; 0x88
 80177ea:	eddd 5a25 	vldr	s11, [sp, #148]	; 0x94
 80177ee:	ed9d 6a28 	vldr	s12, [sp, #160]	; 0xa0
 80177f2:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	; 0x64
 80177f6:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	; 0x78
 80177fa:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	; 0x70
 80177fe:	f1be 0f00 	cmp.w	lr, #0
 8017802:	d031      	beq.n	8017868 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x470>
 8017804:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8017806:	4450      	add	r0, sl
 8017808:	ee76 6aa4 	vadd.f32	s13, s13, s9
 801780c:	4431      	add	r1, r6
 801780e:	ee37 7a04 	vadd.f32	s14, s14, s8
 8017812:	ee77 7aa3 	vadd.f32	s15, s15, s7
 8017816:	4549      	cmp	r1, r9
 8017818:	db08      	blt.n	801782c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x434>
 801781a:	ee77 7a85 	vadd.f32	s15, s15, s10
 801781e:	3001      	adds	r0, #1
 8017820:	ee76 6aa5 	vadd.f32	s13, s13, s11
 8017824:	eba1 0109 	sub.w	r1, r1, r9
 8017828:	ee37 7a06 	vadd.f32	s14, s14, s12
 801782c:	f10e 3eff 	add.w	lr, lr, #4294967295
 8017830:	f04f 0801 	mov.w	r8, #1
 8017834:	e7e3      	b.n	80177fe <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x406>
 8017836:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8017838:	4450      	add	r0, sl
 801783a:	ee37 7a24 	vadd.f32	s14, s14, s9
 801783e:	4431      	add	r1, r6
 8017840:	ee77 7a84 	vadd.f32	s15, s15, s8
 8017844:	ee76 6aa3 	vadd.f32	s13, s13, s7
 8017848:	4541      	cmp	r1, r8
 801784a:	db08      	blt.n	801785e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x466>
 801784c:	ee76 6a85 	vadd.f32	s13, s13, s10
 8017850:	3001      	adds	r0, #1
 8017852:	ee37 7a25 	vadd.f32	s14, s14, s11
 8017856:	eba1 0108 	sub.w	r1, r1, r8
 801785a:	ee77 7a86 	vadd.f32	s15, s15, s12
 801785e:	f10c 3cff 	add.w	ip, ip, #4294967295
 8017862:	f04f 0901 	mov.w	r9, #1
 8017866:	e79b      	b.n	80177a0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3a8>
 8017868:	449c      	add	ip, r3
 801786a:	1aff      	subs	r7, r7, r3
 801786c:	f1b8 0f00 	cmp.w	r8, #0
 8017870:	d009      	beq.n	8017886 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x48e>
 8017872:	9019      	str	r0, [sp, #100]	; 0x64
 8017874:	edcd 6a23 	vstr	s13, [sp, #140]	; 0x8c
 8017878:	ed8d 7a26 	vstr	s14, [sp, #152]	; 0x98
 801787c:	edcd 7a20 	vstr	s15, [sp, #128]	; 0x80
 8017880:	911d      	str	r1, [sp, #116]	; 0x74
 8017882:	e9cd c71e 	strd	ip, r7, [sp, #120]	; 0x78
 8017886:	1ad2      	subs	r2, r2, r3
 8017888:	e68b      	b.n	80175a2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 801788a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801788c:	9a3f      	ldr	r2, [sp, #252]	; 0xfc
 801788e:	2b00      	cmp	r3, #0
 8017890:	f000 80d1 	beq.w	8017a36 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63e>
 8017894:	ad19      	add	r5, sp, #100	; 0x64
 8017896:	ac39      	add	r4, sp, #228	; 0xe4
 8017898:	9b64      	ldr	r3, [sp, #400]	; 0x190
 801789a:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 801789e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80178a2:	930c      	str	r3, [sp, #48]	; 0x30
 80178a4:	990c      	ldr	r1, [sp, #48]	; 0x30
 80178a6:	6963      	ldr	r3, [r4, #20]
 80178a8:	440b      	add	r3, r1
 80178aa:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 80178ae:	4408      	add	r0, r1
 80178b0:	b200      	sxth	r0, r0
 80178b2:	4283      	cmp	r3, r0
 80178b4:	900d      	str	r0, [sp, #52]	; 0x34
 80178b6:	f280 80c1 	bge.w	8017a3c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x644>
 80178ba:	428b      	cmp	r3, r1
 80178bc:	da08      	bge.n	80178d0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 80178be:	2a00      	cmp	r2, #0
 80178c0:	dd06      	ble.n	80178d0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 80178c2:	1acb      	subs	r3, r1, r3
 80178c4:	429a      	cmp	r2, r3
 80178c6:	f2c0 80bb 	blt.w	8017a40 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x648>
 80178ca:	2b00      	cmp	r3, #0
 80178cc:	f300 80b9 	bgt.w	8017a42 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x64a>
 80178d0:	6967      	ldr	r7, [r4, #20]
 80178d2:	f10d 0850 	add.w	r8, sp, #80	; 0x50
 80178d6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80178d8:	443b      	add	r3, r7
 80178da:	461f      	mov	r7, r3
 80178dc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80178de:	1bdf      	subs	r7, r3, r7
 80178e0:	4297      	cmp	r7, r2
 80178e2:	bfa8      	it	ge
 80178e4:	4617      	movge	r7, r2
 80178e6:	2f00      	cmp	r7, #0
 80178e8:	f340 813c 	ble.w	8017b64 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x76c>
 80178ec:	9b64      	ldr	r3, [sp, #400]	; 0x190
 80178ee:	6829      	ldr	r1, [r5, #0]
 80178f0:	f9b3 2000 	ldrsh.w	r2, [r3]
 80178f4:	f9bb 3000 	ldrsh.w	r3, [fp]
 80178f8:	4411      	add	r1, r2
 80178fa:	6820      	ldr	r0, [r4, #0]
 80178fc:	4299      	cmp	r1, r3
 80178fe:	dd1a      	ble.n	8017936 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 8017900:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 8017904:	4402      	add	r2, r0
 8017906:	440b      	add	r3, r1
 8017908:	b21b      	sxth	r3, r3
 801790a:	429a      	cmp	r2, r3
 801790c:	dc13      	bgt.n	8017936 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 801790e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8017910:	a912      	add	r1, sp, #72	; 0x48
 8017912:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017914:	9809      	ldr	r0, [sp, #36]	; 0x24
 8017916:	681b      	ldr	r3, [r3, #0]
 8017918:	9206      	str	r2, [sp, #24]
 801791a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801791c:	9500      	str	r5, [sp, #0]
 801791e:	9205      	str	r2, [sp, #20]
 8017920:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8017922:	e9cd b203 	strd	fp, r2, [sp, #12]
 8017926:	9a64      	ldr	r2, [sp, #400]	; 0x190
 8017928:	e9cd 8201 	strd	r8, r2, [sp, #4]
 801792c:	aa49      	add	r2, sp, #292	; 0x124
 801792e:	f8d3 9048 	ldr.w	r9, [r3, #72]	; 0x48
 8017932:	4623      	mov	r3, r4
 8017934:	47c8      	blx	r9
 8017936:	ed94 7a0a 	vldr	s14, [r4, #40]	; 0x28
 801793a:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
 801793e:	edd4 6a0e 	vldr	s13, [r4, #56]	; 0x38
 8017942:	ee37 7a27 	vadd.f32	s14, s14, s15
 8017946:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
 801794a:	68a1      	ldr	r1, [r4, #8]
 801794c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8017950:	ed94 6a08 	vldr	s12, [r4, #32]
 8017954:	edd4 6a07 	vldr	s13, [r4, #28]
 8017958:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 801795c:	ee76 6a86 	vadd.f32	s13, s13, s12
 8017960:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 8017964:	e9d4 2300 	ldrd	r2, r3, [r4]
 8017968:	edc4 6a07 	vstr	s13, [r4, #28]
 801796c:	441a      	add	r2, r3
 801796e:	6963      	ldr	r3, [r4, #20]
 8017970:	3301      	adds	r3, #1
 8017972:	6022      	str	r2, [r4, #0]
 8017974:	6163      	str	r3, [r4, #20]
 8017976:	69a3      	ldr	r3, [r4, #24]
 8017978:	3b01      	subs	r3, #1
 801797a:	61a3      	str	r3, [r4, #24]
 801797c:	6923      	ldr	r3, [r4, #16]
 801797e:	440b      	add	r3, r1
 8017980:	68e1      	ldr	r1, [r4, #12]
 8017982:	428b      	cmp	r3, r1
 8017984:	6123      	str	r3, [r4, #16]
 8017986:	db15      	blt.n	80179b4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x5bc>
 8017988:	ed94 6a09 	vldr	s12, [r4, #36]	; 0x24
 801798c:	3201      	adds	r2, #1
 801798e:	1a5b      	subs	r3, r3, r1
 8017990:	ee76 6a26 	vadd.f32	s13, s12, s13
 8017994:	6022      	str	r2, [r4, #0]
 8017996:	6123      	str	r3, [r4, #16]
 8017998:	edc4 6a07 	vstr	s13, [r4, #28]
 801799c:	edd4 6a0c 	vldr	s13, [r4, #48]	; 0x30
 80179a0:	ee36 7a87 	vadd.f32	s14, s13, s14
 80179a4:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 80179a8:	ed94 7a0f 	vldr	s14, [r4, #60]	; 0x3c
 80179ac:	ee77 7a27 	vadd.f32	s15, s14, s15
 80179b0:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 80179b4:	ed95 7a0a 	vldr	s14, [r5, #40]	; 0x28
 80179b8:	edd5 7a0b 	vldr	s15, [r5, #44]	; 0x2c
 80179bc:	edd5 6a0e 	vldr	s13, [r5, #56]	; 0x38
 80179c0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80179c4:	edd5 7a0d 	vldr	s15, [r5, #52]	; 0x34
 80179c8:	68a9      	ldr	r1, [r5, #8]
 80179ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80179ce:	ed95 6a08 	vldr	s12, [r5, #32]
 80179d2:	edd5 6a07 	vldr	s13, [r5, #28]
 80179d6:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 80179da:	ee76 6a86 	vadd.f32	s13, s13, s12
 80179de:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 80179e2:	e9d5 2300 	ldrd	r2, r3, [r5]
 80179e6:	edc5 6a07 	vstr	s13, [r5, #28]
 80179ea:	441a      	add	r2, r3
 80179ec:	696b      	ldr	r3, [r5, #20]
 80179ee:	3301      	adds	r3, #1
 80179f0:	602a      	str	r2, [r5, #0]
 80179f2:	616b      	str	r3, [r5, #20]
 80179f4:	69ab      	ldr	r3, [r5, #24]
 80179f6:	3b01      	subs	r3, #1
 80179f8:	61ab      	str	r3, [r5, #24]
 80179fa:	692b      	ldr	r3, [r5, #16]
 80179fc:	440b      	add	r3, r1
 80179fe:	68e9      	ldr	r1, [r5, #12]
 8017a00:	428b      	cmp	r3, r1
 8017a02:	612b      	str	r3, [r5, #16]
 8017a04:	db15      	blt.n	8017a32 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63a>
 8017a06:	ed95 6a09 	vldr	s12, [r5, #36]	; 0x24
 8017a0a:	3201      	adds	r2, #1
 8017a0c:	1a5b      	subs	r3, r3, r1
 8017a0e:	ee76 6a26 	vadd.f32	s13, s12, s13
 8017a12:	602a      	str	r2, [r5, #0]
 8017a14:	612b      	str	r3, [r5, #16]
 8017a16:	edc5 6a07 	vstr	s13, [r5, #28]
 8017a1a:	edd5 6a0c 	vldr	s13, [r5, #48]	; 0x30
 8017a1e:	ee36 7a87 	vadd.f32	s14, s13, s14
 8017a22:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 8017a26:	ed95 7a0f 	vldr	s14, [r5, #60]	; 0x3c
 8017a2a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8017a2e:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 8017a32:	3f01      	subs	r7, #1
 8017a34:	e757      	b.n	80178e6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4ee>
 8017a36:	ad39      	add	r5, sp, #228	; 0xe4
 8017a38:	ac19      	add	r4, sp, #100	; 0x64
 8017a3a:	e72d      	b.n	8017898 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4a0>
 8017a3c:	4613      	mov	r3, r2
 8017a3e:	e744      	b.n	80178ca <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d2>
 8017a40:	4613      	mov	r3, r2
 8017a42:	9e3b      	ldr	r6, [sp, #236]	; 0xec
 8017a44:	469e      	mov	lr, r3
 8017a46:	f8dd c0f8 	ldr.w	ip, [sp, #248]	; 0xf8
 8017a4a:	461f      	mov	r7, r3
 8017a4c:	ed9d 7a43 	vldr	s14, [sp, #268]	; 0x10c
 8017a50:	f04f 0900 	mov.w	r9, #0
 8017a54:	eddd 4a44 	vldr	s9, [sp, #272]	; 0x110
 8017a58:	eddd 7a46 	vldr	s15, [sp, #280]	; 0x118
 8017a5c:	ed9d 4a47 	vldr	s8, [sp, #284]	; 0x11c
 8017a60:	eddd 6a40 	vldr	s13, [sp, #256]	; 0x100
 8017a64:	eddd 3a41 	vldr	s7, [sp, #260]	; 0x104
 8017a68:	993d      	ldr	r1, [sp, #244]	; 0xf4
 8017a6a:	f8dd 80f0 	ldr.w	r8, [sp, #240]	; 0xf0
 8017a6e:	ed9d 5a42 	vldr	s10, [sp, #264]	; 0x108
 8017a72:	eddd 5a45 	vldr	s11, [sp, #276]	; 0x114
 8017a76:	ed9d 6a48 	vldr	s12, [sp, #288]	; 0x120
 8017a7a:	960e      	str	r6, [sp, #56]	; 0x38
 8017a7c:	e9dd 0a39 	ldrd	r0, sl, [sp, #228]	; 0xe4
 8017a80:	2f00      	cmp	r7, #0
 8017a82:	d146      	bne.n	8017b12 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x71a>
 8017a84:	449c      	add	ip, r3
 8017a86:	1ad7      	subs	r7, r2, r3
 8017a88:	f1b9 0f00 	cmp.w	r9, #0
 8017a8c:	d009      	beq.n	8017aa2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6aa>
 8017a8e:	9039      	str	r0, [sp, #228]	; 0xe4
 8017a90:	913d      	str	r1, [sp, #244]	; 0xf4
 8017a92:	edcd 6a40 	vstr	s13, [sp, #256]	; 0x100
 8017a96:	ed8d 7a43 	vstr	s14, [sp, #268]	; 0x10c
 8017a9a:	edcd 7a46 	vstr	s15, [sp, #280]	; 0x118
 8017a9e:	e9cd c73e 	strd	ip, r7, [sp, #248]	; 0xf8
 8017aa2:	991b      	ldr	r1, [sp, #108]	; 0x6c
 8017aa4:	f04f 0800 	mov.w	r8, #0
 8017aa8:	eddd 4a24 	vldr	s9, [sp, #144]	; 0x90
 8017aac:	910e      	str	r1, [sp, #56]	; 0x38
 8017aae:	eddd 6a23 	vldr	s13, [sp, #140]	; 0x8c
 8017ab2:	ed9d 4a27 	vldr	s8, [sp, #156]	; 0x9c
 8017ab6:	ed9d 7a26 	vldr	s14, [sp, #152]	; 0x98
 8017aba:	eddd 3a21 	vldr	s7, [sp, #132]	; 0x84
 8017abe:	eddd 7a20 	vldr	s15, [sp, #128]	; 0x80
 8017ac2:	ed9d 5a22 	vldr	s10, [sp, #136]	; 0x88
 8017ac6:	eddd 5a25 	vldr	s11, [sp, #148]	; 0x94
 8017aca:	ed9d 6a28 	vldr	s12, [sp, #160]	; 0xa0
 8017ace:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	; 0x64
 8017ad2:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	; 0x78
 8017ad6:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	; 0x70
 8017ada:	f1be 0f00 	cmp.w	lr, #0
 8017ade:	d030      	beq.n	8017b42 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x74a>
 8017ae0:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8017ae2:	4450      	add	r0, sl
 8017ae4:	ee76 6aa4 	vadd.f32	s13, s13, s9
 8017ae8:	4431      	add	r1, r6
 8017aea:	ee37 7a04 	vadd.f32	s14, s14, s8
 8017aee:	ee77 7aa3 	vadd.f32	s15, s15, s7
 8017af2:	4549      	cmp	r1, r9
 8017af4:	db08      	blt.n	8017b08 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x710>
 8017af6:	ee77 7a85 	vadd.f32	s15, s15, s10
 8017afa:	3001      	adds	r0, #1
 8017afc:	ee76 6aa5 	vadd.f32	s13, s13, s11
 8017b00:	eba1 0109 	sub.w	r1, r1, r9
 8017b04:	ee37 7a06 	vadd.f32	s14, s14, s12
 8017b08:	f10e 3eff 	add.w	lr, lr, #4294967295
 8017b0c:	f04f 0801 	mov.w	r8, #1
 8017b10:	e7e3      	b.n	8017ada <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6e2>
 8017b12:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8017b14:	4450      	add	r0, sl
 8017b16:	ee37 7a24 	vadd.f32	s14, s14, s9
 8017b1a:	4431      	add	r1, r6
 8017b1c:	ee77 7a84 	vadd.f32	s15, s15, s8
 8017b20:	ee76 6aa3 	vadd.f32	s13, s13, s7
 8017b24:	4541      	cmp	r1, r8
 8017b26:	db08      	blt.n	8017b3a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x742>
 8017b28:	ee76 6a85 	vadd.f32	s13, s13, s10
 8017b2c:	3001      	adds	r0, #1
 8017b2e:	ee37 7a25 	vadd.f32	s14, s14, s11
 8017b32:	eba1 0108 	sub.w	r1, r1, r8
 8017b36:	ee77 7a86 	vadd.f32	s15, s15, s12
 8017b3a:	3f01      	subs	r7, #1
 8017b3c:	f04f 0901 	mov.w	r9, #1
 8017b40:	e79e      	b.n	8017a80 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x688>
 8017b42:	449c      	add	ip, r3
 8017b44:	1aff      	subs	r7, r7, r3
 8017b46:	f1b8 0f00 	cmp.w	r8, #0
 8017b4a:	d009      	beq.n	8017b60 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x768>
 8017b4c:	9019      	str	r0, [sp, #100]	; 0x64
 8017b4e:	edcd 6a23 	vstr	s13, [sp, #140]	; 0x8c
 8017b52:	ed8d 7a26 	vstr	s14, [sp, #152]	; 0x98
 8017b56:	edcd 7a20 	vstr	s15, [sp, #128]	; 0x80
 8017b5a:	911d      	str	r1, [sp, #116]	; 0x74
 8017b5c:	e9cd c71e 	strd	ip, r7, [sp, #120]	; 0x78
 8017b60:	1ad2      	subs	r2, r2, r3
 8017b62:	e6b5      	b.n	80178d0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 8017b64:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8017b66:	681b      	ldr	r3, [r3, #0]
 8017b68:	b923      	cbnz	r3, 8017b74 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8017b6a:	4b04      	ldr	r3, [pc, #16]	; (8017b7c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x784>)
 8017b6c:	6818      	ldr	r0, [r3, #0]
 8017b6e:	6803      	ldr	r3, [r0, #0]
 8017b70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017b72:	4798      	blx	r3
 8017b74:	b05b      	add	sp, #364	; 0x16c
 8017b76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017b7a:	bf00      	nop
 8017b7c:	20006df8 	.word	0x20006df8

08017b80 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>:
 8017b80:	2b02      	cmp	r3, #2
 8017b82:	b510      	push	{r4, lr}
 8017b84:	f9b0 4000 	ldrsh.w	r4, [r0]
 8017b88:	d00b      	beq.n	8017ba2 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x22>
 8017b8a:	2b03      	cmp	r3, #3
 8017b8c:	d00e      	beq.n	8017bac <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x2c>
 8017b8e:	2b01      	cmp	r3, #1
 8017b90:	d001      	beq.n	8017b96 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x16>
 8017b92:	1860      	adds	r0, r4, r1
 8017b94:	bd10      	pop	{r4, pc}
 8017b96:	8880      	ldrh	r0, [r0, #4]
 8017b98:	4420      	add	r0, r4
 8017b9a:	b200      	sxth	r0, r0
 8017b9c:	1a80      	subs	r0, r0, r2
 8017b9e:	3801      	subs	r0, #1
 8017ba0:	e7f8      	b.n	8017b94 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x14>
 8017ba2:	8880      	ldrh	r0, [r0, #4]
 8017ba4:	4420      	add	r0, r4
 8017ba6:	b200      	sxth	r0, r0
 8017ba8:	1a40      	subs	r0, r0, r1
 8017baa:	e7f8      	b.n	8017b9e <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x1e>
 8017bac:	18a0      	adds	r0, r4, r2
 8017bae:	e7f1      	b.n	8017b94 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x14>

08017bb0 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>:
 8017bb0:	2b02      	cmp	r3, #2
 8017bb2:	b510      	push	{r4, lr}
 8017bb4:	f9b0 4002 	ldrsh.w	r4, [r0, #2]
 8017bb8:	d006      	beq.n	8017bc8 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x18>
 8017bba:	2b03      	cmp	r3, #3
 8017bbc:	d00a      	beq.n	8017bd4 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x24>
 8017bbe:	2b01      	cmp	r3, #1
 8017bc0:	bf14      	ite	ne
 8017bc2:	18a0      	addne	r0, r4, r2
 8017bc4:	1860      	addeq	r0, r4, r1
 8017bc6:	bd10      	pop	{r4, pc}
 8017bc8:	88c0      	ldrh	r0, [r0, #6]
 8017bca:	4420      	add	r0, r4
 8017bcc:	b200      	sxth	r0, r0
 8017bce:	1a80      	subs	r0, r0, r2
 8017bd0:	3801      	subs	r0, #1
 8017bd2:	e7f8      	b.n	8017bc6 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x16>
 8017bd4:	88c0      	ldrh	r0, [r0, #6]
 8017bd6:	4420      	add	r0, r4
 8017bd8:	b200      	sxth	r0, r0
 8017bda:	1a40      	subs	r0, r0, r1
 8017bdc:	e7f8      	b.n	8017bd0 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x20>
	...

08017be0 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE>:
 8017be0:	4b01      	ldr	r3, [pc, #4]	; (8017be8 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE+0x8>)
 8017be2:	2200      	movs	r2, #0
 8017be4:	601a      	str	r2, [r3, #0]
 8017be6:	4770      	bx	lr
 8017be8:	20006e00 	.word	0x20006e00

08017bec <_ZN8touchgfx16TouchCalibration4clzuEm>:
 8017bec:	4603      	mov	r3, r0
 8017bee:	b1c8      	cbz	r0, 8017c24 <_ZN8touchgfx16TouchCalibration4clzuEm+0x38>
 8017bf0:	0c02      	lsrs	r2, r0, #16
 8017bf2:	0412      	lsls	r2, r2, #16
 8017bf4:	b9a2      	cbnz	r2, 8017c20 <_ZN8touchgfx16TouchCalibration4clzuEm+0x34>
 8017bf6:	0403      	lsls	r3, r0, #16
 8017bf8:	2010      	movs	r0, #16
 8017bfa:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8017bfe:	bf04      	itt	eq
 8017c00:	021b      	lsleq	r3, r3, #8
 8017c02:	3008      	addeq	r0, #8
 8017c04:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8017c08:	bf04      	itt	eq
 8017c0a:	011b      	lsleq	r3, r3, #4
 8017c0c:	3004      	addeq	r0, #4
 8017c0e:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8017c12:	bf04      	itt	eq
 8017c14:	009b      	lsleq	r3, r3, #2
 8017c16:	3002      	addeq	r0, #2
 8017c18:	2b00      	cmp	r3, #0
 8017c1a:	db04      	blt.n	8017c26 <_ZN8touchgfx16TouchCalibration4clzuEm+0x3a>
 8017c1c:	3001      	adds	r0, #1
 8017c1e:	4770      	bx	lr
 8017c20:	2000      	movs	r0, #0
 8017c22:	e7ea      	b.n	8017bfa <_ZN8touchgfx16TouchCalibration4clzuEm+0xe>
 8017c24:	2020      	movs	r0, #32
 8017c26:	4770      	bx	lr

08017c28 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>:
 8017c28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017c2c:	b087      	sub	sp, #28
 8017c2e:	4681      	mov	r9, r0
 8017c30:	4698      	mov	r8, r3
 8017c32:	4610      	mov	r0, r2
 8017c34:	460d      	mov	r5, r1
 8017c36:	e9dd 4710 	ldrd	r4, r7, [sp, #64]	; 0x40
 8017c3a:	b981      	cbnz	r1, 8017c5e <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x36>
 8017c3c:	b14b      	cbz	r3, 8017c52 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x2a>
 8017c3e:	460b      	mov	r3, r1
 8017c40:	464a      	mov	r2, r9
 8017c42:	4641      	mov	r1, r8
 8017c44:	e9cd 4700 	strd	r4, r7, [sp]
 8017c48:	f7ff ffee 	bl	8017c28 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 8017c4c:	b007      	add	sp, #28
 8017c4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017c52:	f04f 33ff 	mov.w	r3, #4294967295
 8017c56:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 8017c5a:	603b      	str	r3, [r7, #0]
 8017c5c:	e7f6      	b.n	8017c4c <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>
 8017c5e:	fa32 fa01 	lsrs.w	sl, r2, r1
 8017c62:	d107      	bne.n	8017c74 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x4c>
 8017c64:	fb09 f602 	mul.w	r6, r9, r2
 8017c68:	fbb6 f0f4 	udiv	r0, r6, r4
 8017c6c:	fb04 6610 	mls	r6, r4, r0, r6
 8017c70:	603e      	str	r6, [r7, #0]
 8017c72:	e7eb      	b.n	8017c4c <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>
 8017c74:	2601      	movs	r6, #1
 8017c76:	fa09 fb01 	lsl.w	fp, r9, r1
 8017c7a:	408e      	lsls	r6, r1
 8017c7c:	fbbb f3f4 	udiv	r3, fp, r4
 8017c80:	3e01      	subs	r6, #1
 8017c82:	9302      	str	r3, [sp, #8]
 8017c84:	fb0a f303 	mul.w	r3, sl, r3
 8017c88:	4016      	ands	r6, r2
 8017c8a:	9303      	str	r3, [sp, #12]
 8017c8c:	4630      	mov	r0, r6
 8017c8e:	f7ff ffad 	bl	8017bec <_ZN8touchgfx16TouchCalibration4clzuEm>
 8017c92:	464a      	mov	r2, r9
 8017c94:	460b      	mov	r3, r1
 8017c96:	4601      	mov	r1, r0
 8017c98:	4630      	mov	r0, r6
 8017c9a:	e9cd 4700 	strd	r4, r7, [sp]
 8017c9e:	f7ff ffc3 	bl	8017c28 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 8017ca2:	9b02      	ldr	r3, [sp, #8]
 8017ca4:	4606      	mov	r6, r0
 8017ca6:	eb05 0108 	add.w	r1, r5, r8
 8017caa:	fb04 bb13 	mls	fp, r4, r3, fp
 8017cae:	4658      	mov	r0, fp
 8017cb0:	f7ff ff9c 	bl	8017bec <_ZN8touchgfx16TouchCalibration4clzuEm>
 8017cb4:	ab05      	add	r3, sp, #20
 8017cb6:	465a      	mov	r2, fp
 8017cb8:	e9cd 4300 	strd	r4, r3, [sp]
 8017cbc:	4603      	mov	r3, r0
 8017cbe:	4650      	mov	r0, sl
 8017cc0:	f7ff ffb2 	bl	8017c28 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 8017cc4:	6839      	ldr	r1, [r7, #0]
 8017cc6:	9a05      	ldr	r2, [sp, #20]
 8017cc8:	9b03      	ldr	r3, [sp, #12]
 8017cca:	4411      	add	r1, r2
 8017ccc:	fbb1 f2f4 	udiv	r2, r1, r4
 8017cd0:	18d3      	adds	r3, r2, r3
 8017cd2:	fb04 1412 	mls	r4, r4, r2, r1
 8017cd6:	441e      	add	r6, r3
 8017cd8:	603c      	str	r4, [r7, #0]
 8017cda:	4430      	add	r0, r6
 8017cdc:	e7b6      	b.n	8017c4c <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>

08017cde <_ZN8touchgfx16TouchCalibration6muldivEllllRl>:
 8017cde:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8017ce2:	b085      	sub	sp, #20
 8017ce4:	f1b0 0900 	subs.w	r9, r0, #0
 8017ce8:	461d      	mov	r5, r3
 8017cea:	4617      	mov	r7, r2
 8017cec:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8017cee:	bfbb      	ittet	lt
 8017cf0:	f1c9 0900 	rsblt	r9, r9, #0
 8017cf4:	f04f 36ff 	movlt.w	r6, #4294967295
 8017cf8:	2601      	movge	r6, #1
 8017cfa:	6823      	ldrlt	r3, [r4, #0]
 8017cfc:	bfbc      	itt	lt
 8017cfe:	425b      	neglt	r3, r3
 8017d00:	6023      	strlt	r3, [r4, #0]
 8017d02:	2a00      	cmp	r2, #0
 8017d04:	da04      	bge.n	8017d10 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x32>
 8017d06:	6823      	ldr	r3, [r4, #0]
 8017d08:	4257      	negs	r7, r2
 8017d0a:	4276      	negs	r6, r6
 8017d0c:	425b      	negs	r3, r3
 8017d0e:	6023      	str	r3, [r4, #0]
 8017d10:	2d00      	cmp	r5, #0
 8017d12:	4638      	mov	r0, r7
 8017d14:	bfba      	itte	lt
 8017d16:	426d      	neglt	r5, r5
 8017d18:	f04f 38ff 	movlt.w	r8, #4294967295
 8017d1c:	f04f 0801 	movge.w	r8, #1
 8017d20:	f7ff ff64 	bl	8017bec <_ZN8touchgfx16TouchCalibration4clzuEm>
 8017d24:	ab03      	add	r3, sp, #12
 8017d26:	463a      	mov	r2, r7
 8017d28:	e9cd 5300 	strd	r5, r3, [sp]
 8017d2c:	4603      	mov	r3, r0
 8017d2e:	4648      	mov	r0, r9
 8017d30:	f7ff ff7a 	bl	8017c28 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 8017d34:	6823      	ldr	r3, [r4, #0]
 8017d36:	9a03      	ldr	r2, [sp, #12]
 8017d38:	4546      	cmp	r6, r8
 8017d3a:	441a      	add	r2, r3
 8017d3c:	fb92 f3f5 	sdiv	r3, r2, r5
 8017d40:	4418      	add	r0, r3
 8017d42:	fb05 2313 	mls	r3, r5, r3, r2
 8017d46:	bf18      	it	ne
 8017d48:	4240      	negne	r0, r0
 8017d4a:	1c72      	adds	r2, r6, #1
 8017d4c:	6023      	str	r3, [r4, #0]
 8017d4e:	d105      	bne.n	8017d5c <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7e>
 8017d50:	2b00      	cmp	r3, #0
 8017d52:	f1c3 0200 	rsb	r2, r3, #0
 8017d56:	db0b      	blt.n	8017d70 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x92>
 8017d58:	6022      	str	r2, [r4, #0]
 8017d5a:	e006      	b.n	8017d6a <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 8017d5c:	2e01      	cmp	r6, #1
 8017d5e:	d104      	bne.n	8017d6a <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 8017d60:	2b00      	cmp	r3, #0
 8017d62:	da02      	bge.n	8017d6a <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 8017d64:	442b      	add	r3, r5
 8017d66:	3801      	subs	r0, #1
 8017d68:	6023      	str	r3, [r4, #0]
 8017d6a:	b005      	add	sp, #20
 8017d6c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017d70:	3801      	subs	r0, #1
 8017d72:	1b52      	subs	r2, r2, r5
 8017d74:	e7f0      	b.n	8017d58 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7a>
	...

08017d78 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>:
 8017d78:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8017d7c:	4c1c      	ldr	r4, [pc, #112]	; (8017df0 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x78>)
 8017d7e:	4605      	mov	r5, r0
 8017d80:	6807      	ldr	r7, [r0, #0]
 8017d82:	69a3      	ldr	r3, [r4, #24]
 8017d84:	b92b      	cbnz	r3, 8017d92 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x1a>
 8017d86:	6840      	ldr	r0, [r0, #4]
 8017d88:	e9c5 7000 	strd	r7, r0, [r5]
 8017d8c:	b004      	add	sp, #16
 8017d8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017d92:	f04f 0802 	mov.w	r8, #2
 8017d96:	68a2      	ldr	r2, [r4, #8]
 8017d98:	ae04      	add	r6, sp, #16
 8017d9a:	6820      	ldr	r0, [r4, #0]
 8017d9c:	fb93 f1f8 	sdiv	r1, r3, r8
 8017da0:	440a      	add	r2, r1
 8017da2:	69e1      	ldr	r1, [r4, #28]
 8017da4:	f846 2d04 	str.w	r2, [r6, #-4]!
 8017da8:	463a      	mov	r2, r7
 8017daa:	9600      	str	r6, [sp, #0]
 8017dac:	f7ff ff97 	bl	8017cde <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 8017db0:	69a3      	ldr	r3, [r4, #24]
 8017db2:	4607      	mov	r7, r0
 8017db4:	686a      	ldr	r2, [r5, #4]
 8017db6:	6a21      	ldr	r1, [r4, #32]
 8017db8:	9600      	str	r6, [sp, #0]
 8017dba:	6860      	ldr	r0, [r4, #4]
 8017dbc:	f7ff ff8f 	bl	8017cde <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 8017dc0:	69a3      	ldr	r3, [r4, #24]
 8017dc2:	6962      	ldr	r2, [r4, #20]
 8017dc4:	4407      	add	r7, r0
 8017dc6:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8017dc8:	9600      	str	r6, [sp, #0]
 8017dca:	68e0      	ldr	r0, [r4, #12]
 8017dcc:	fb93 f8f8 	sdiv	r8, r3, r8
 8017dd0:	4442      	add	r2, r8
 8017dd2:	9203      	str	r2, [sp, #12]
 8017dd4:	682a      	ldr	r2, [r5, #0]
 8017dd6:	f7ff ff82 	bl	8017cde <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 8017dda:	4680      	mov	r8, r0
 8017ddc:	9600      	str	r6, [sp, #0]
 8017dde:	69a3      	ldr	r3, [r4, #24]
 8017de0:	686a      	ldr	r2, [r5, #4]
 8017de2:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8017de4:	6920      	ldr	r0, [r4, #16]
 8017de6:	f7ff ff7a 	bl	8017cde <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 8017dea:	4440      	add	r0, r8
 8017dec:	e7cc      	b.n	8017d88 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x10>
 8017dee:	bf00      	nop
 8017df0:	20006e04 	.word	0x20006e04

08017df4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>:
 8017df4:	4b07      	ldr	r3, [pc, #28]	; (8017e14 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x20>)
 8017df6:	781b      	ldrb	r3, [r3, #0]
 8017df8:	2b01      	cmp	r3, #1
 8017dfa:	d109      	bne.n	8017e10 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x1c>
 8017dfc:	f9b1 3000 	ldrsh.w	r3, [r1]
 8017e00:	f9b0 2000 	ldrsh.w	r2, [r0]
 8017e04:	8003      	strh	r3, [r0, #0]
 8017e06:	4b04      	ldr	r3, [pc, #16]	; (8017e18 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x24>)
 8017e08:	881b      	ldrh	r3, [r3, #0]
 8017e0a:	3b01      	subs	r3, #1
 8017e0c:	1a9b      	subs	r3, r3, r2
 8017e0e:	800b      	strh	r3, [r1, #0]
 8017e10:	4770      	bx	lr
 8017e12:	bf00      	nop
 8017e14:	20006dee 	.word	0x20006dee
 8017e18:	20006dea 	.word	0x20006dea

08017e1c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>:
 8017e1c:	4b07      	ldr	r3, [pc, #28]	; (8017e3c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x20>)
 8017e1e:	b510      	push	{r4, lr}
 8017e20:	781b      	ldrb	r3, [r3, #0]
 8017e22:	2b01      	cmp	r3, #1
 8017e24:	d108      	bne.n	8017e38 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x1c>
 8017e26:	4b06      	ldr	r3, [pc, #24]	; (8017e40 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x24>)
 8017e28:	880c      	ldrh	r4, [r1, #0]
 8017e2a:	881b      	ldrh	r3, [r3, #0]
 8017e2c:	f9b0 2000 	ldrsh.w	r2, [r0]
 8017e30:	3b01      	subs	r3, #1
 8017e32:	1b1b      	subs	r3, r3, r4
 8017e34:	8003      	strh	r3, [r0, #0]
 8017e36:	800a      	strh	r2, [r1, #0]
 8017e38:	bd10      	pop	{r4, pc}
 8017e3a:	bf00      	nop
 8017e3c:	20006dee 	.word	0x20006dee
 8017e40:	20006dea 	.word	0x20006dea

08017e44 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>:
 8017e44:	4b08      	ldr	r3, [pc, #32]	; (8017e68 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x24>)
 8017e46:	781b      	ldrb	r3, [r3, #0]
 8017e48:	2b01      	cmp	r3, #1
 8017e4a:	d10c      	bne.n	8017e66 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x22>
 8017e4c:	8803      	ldrh	r3, [r0, #0]
 8017e4e:	f9b0 1004 	ldrsh.w	r1, [r0, #4]
 8017e52:	8842      	ldrh	r2, [r0, #2]
 8017e54:	8002      	strh	r2, [r0, #0]
 8017e56:	185a      	adds	r2, r3, r1
 8017e58:	4b04      	ldr	r3, [pc, #16]	; (8017e6c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x28>)
 8017e5a:	881b      	ldrh	r3, [r3, #0]
 8017e5c:	1a9b      	subs	r3, r3, r2
 8017e5e:	8043      	strh	r3, [r0, #2]
 8017e60:	88c3      	ldrh	r3, [r0, #6]
 8017e62:	80c1      	strh	r1, [r0, #6]
 8017e64:	8083      	strh	r3, [r0, #4]
 8017e66:	4770      	bx	lr
 8017e68:	20006dee 	.word	0x20006dee
 8017e6c:	20006dea 	.word	0x20006dea

08017e70 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>:
 8017e70:	4b07      	ldr	r3, [pc, #28]	; (8017e90 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x20>)
 8017e72:	b510      	push	{r4, lr}
 8017e74:	781b      	ldrb	r3, [r3, #0]
 8017e76:	2b01      	cmp	r3, #1
 8017e78:	d108      	bne.n	8017e8c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x1c>
 8017e7a:	f9b1 3000 	ldrsh.w	r3, [r1]
 8017e7e:	f9b0 4000 	ldrsh.w	r4, [r0]
 8017e82:	8003      	strh	r3, [r0, #0]
 8017e84:	8893      	ldrh	r3, [r2, #4]
 8017e86:	3b01      	subs	r3, #1
 8017e88:	1b1b      	subs	r3, r3, r4
 8017e8a:	800b      	strh	r3, [r1, #0]
 8017e8c:	bd10      	pop	{r4, pc}
 8017e8e:	bf00      	nop
 8017e90:	20006dee 	.word	0x20006dee

08017e94 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>:
 8017e94:	4b0a      	ldr	r3, [pc, #40]	; (8017ec0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x2c>)
 8017e96:	460a      	mov	r2, r1
 8017e98:	b510      	push	{r4, lr}
 8017e9a:	781b      	ldrb	r3, [r3, #0]
 8017e9c:	2b01      	cmp	r3, #1
 8017e9e:	d10d      	bne.n	8017ebc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x28>
 8017ea0:	8881      	ldrh	r1, [r0, #4]
 8017ea2:	8803      	ldrh	r3, [r0, #0]
 8017ea4:	440b      	add	r3, r1
 8017ea6:	4601      	mov	r1, r0
 8017ea8:	3b01      	subs	r3, #1
 8017eaa:	f821 3b02 	strh.w	r3, [r1], #2
 8017eae:	f7ff ffdf 	bl	8017e70 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>
 8017eb2:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8017eb6:	88c2      	ldrh	r2, [r0, #6]
 8017eb8:	80c3      	strh	r3, [r0, #6]
 8017eba:	8082      	strh	r2, [r0, #4]
 8017ebc:	bd10      	pop	{r4, pc}
 8017ebe:	bf00      	nop
 8017ec0:	20006dee 	.word	0x20006dee

08017ec4 <_ZN8touchgfx11Application11getInstanceEv>:
 8017ec4:	4b01      	ldr	r3, [pc, #4]	; (8017ecc <_ZN8touchgfx11Application11getInstanceEv+0x8>)
 8017ec6:	6818      	ldr	r0, [r3, #0]
 8017ec8:	4770      	bx	lr
 8017eca:	bf00      	nop
 8017ecc:	20006e38 	.word	0x20006e38

08017ed0 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE>:
 8017ed0:	4b03      	ldr	r3, [pc, #12]	; (8017ee0 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE+0x10>)
 8017ed2:	2200      	movs	r2, #0
 8017ed4:	801a      	strh	r2, [r3, #0]
 8017ed6:	805a      	strh	r2, [r3, #2]
 8017ed8:	809a      	strh	r2, [r3, #4]
 8017eda:	80da      	strh	r2, [r3, #6]
 8017edc:	4770      	bx	lr
 8017ede:	bf00      	nop
 8017ee0:	20006e30 	.word	0x20006e30

08017ee4 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>:
 8017ee4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017ee8:	b09d      	sub	sp, #116	; 0x74
 8017eea:	4606      	mov	r6, r0
 8017eec:	4614      	mov	r4, r2
 8017eee:	468a      	mov	sl, r1
 8017ef0:	a803      	add	r0, sp, #12
 8017ef2:	461d      	mov	r5, r3
 8017ef4:	f000 f9ae 	bl	8018254 <_ZN8touchgfx12TextProviderC1Ev>
 8017ef8:	6833      	ldr	r3, [r6, #0]
 8017efa:	4630      	mov	r0, r6
 8017efc:	f242 0b0b 	movw	fp, #8203	; 0x200b
 8017f00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017f02:	4798      	blx	r3
 8017f04:	6833      	ldr	r3, [r6, #0]
 8017f06:	4607      	mov	r7, r0
 8017f08:	4630      	mov	r0, r6
 8017f0a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8017f0c:	4798      	blx	r3
 8017f0e:	462a      	mov	r2, r5
 8017f10:	2500      	movs	r5, #0
 8017f12:	4621      	mov	r1, r4
 8017f14:	9000      	str	r0, [sp, #0]
 8017f16:	463b      	mov	r3, r7
 8017f18:	462c      	mov	r4, r5
 8017f1a:	46a9      	mov	r9, r5
 8017f1c:	46a8      	mov	r8, r5
 8017f1e:	a803      	add	r0, sp, #12
 8017f20:	f000 f9eb 	bl	80182fa <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8017f24:	2300      	movs	r3, #0
 8017f26:	9302      	str	r3, [sp, #8]
 8017f28:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 8017f2c:	429c      	cmp	r4, r3
 8017f2e:	d002      	beq.n	8017f36 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x52>
 8017f30:	455c      	cmp	r4, fp
 8017f32:	bf18      	it	ne
 8017f34:	4625      	movne	r5, r4
 8017f36:	ab02      	add	r3, sp, #8
 8017f38:	4632      	mov	r2, r6
 8017f3a:	4651      	mov	r1, sl
 8017f3c:	a803      	add	r0, sp, #12
 8017f3e:	f000 fcdd 	bl	80188fc <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8017f42:	4604      	mov	r4, r0
 8017f44:	b108      	cbz	r0, 8017f4a <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x66>
 8017f46:	280a      	cmp	r0, #10
 8017f48:	d10a      	bne.n	8017f60 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x7c>
 8017f4a:	45c1      	cmp	r9, r8
 8017f4c:	bf38      	it	cc
 8017f4e:	46c1      	movcc	r9, r8
 8017f50:	f04f 0800 	mov.w	r8, #0
 8017f54:	2c00      	cmp	r4, #0
 8017f56:	d1e5      	bne.n	8017f24 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
 8017f58:	4648      	mov	r0, r9
 8017f5a:	b01d      	add	sp, #116	; 0x74
 8017f5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017f60:	9a02      	ldr	r2, [sp, #8]
 8017f62:	2a00      	cmp	r2, #0
 8017f64:	d0de      	beq.n	8017f24 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
 8017f66:	7b57      	ldrb	r7, [r2, #13]
 8017f68:	4629      	mov	r1, r5
 8017f6a:	6833      	ldr	r3, [r6, #0]
 8017f6c:	007f      	lsls	r7, r7, #1
 8017f6e:	8894      	ldrh	r4, [r2, #4]
 8017f70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8017f72:	f407 7080 	and.w	r0, r7, #256	; 0x100
 8017f76:	7a97      	ldrb	r7, [r2, #10]
 8017f78:	4307      	orrs	r7, r0
 8017f7a:	4630      	mov	r0, r6
 8017f7c:	4798      	blx	r3
 8017f7e:	4438      	add	r0, r7
 8017f80:	4480      	add	r8, r0
 8017f82:	fa1f f888 	uxth.w	r8, r8
 8017f86:	e7e5      	b.n	8017f54 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x70>

08017f88 <_ZNK8touchgfx4Font12getCharWidthEt>:
 8017f88:	b508      	push	{r3, lr}
 8017f8a:	6803      	ldr	r3, [r0, #0]
 8017f8c:	68db      	ldr	r3, [r3, #12]
 8017f8e:	4798      	blx	r3
 8017f90:	b128      	cbz	r0, 8017f9e <_ZNK8touchgfx4Font12getCharWidthEt+0x16>
 8017f92:	7b43      	ldrb	r3, [r0, #13]
 8017f94:	7a80      	ldrb	r0, [r0, #10]
 8017f96:	005b      	lsls	r3, r3, #1
 8017f98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8017f9c:	4318      	orrs	r0, r3
 8017f9e:	bd08      	pop	{r3, pc}

08017fa0 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz>:
 8017fa0:	b40e      	push	{r1, r2, r3}
 8017fa2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017fa4:	b09e      	sub	sp, #120	; 0x78
 8017fa6:	4605      	mov	r5, r0
 8017fa8:	ab23      	add	r3, sp, #140	; 0x8c
 8017faa:	a805      	add	r0, sp, #20
 8017fac:	f853 4b04 	ldr.w	r4, [r3], #4
 8017fb0:	9303      	str	r3, [sp, #12]
 8017fb2:	f000 f94f 	bl	8018254 <_ZN8touchgfx12TextProviderC1Ev>
 8017fb6:	682b      	ldr	r3, [r5, #0]
 8017fb8:	4628      	mov	r0, r5
 8017fba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017fbc:	4798      	blx	r3
 8017fbe:	682b      	ldr	r3, [r5, #0]
 8017fc0:	4606      	mov	r6, r0
 8017fc2:	4628      	mov	r0, r5
 8017fc4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8017fc6:	4798      	blx	r3
 8017fc8:	4633      	mov	r3, r6
 8017fca:	4621      	mov	r1, r4
 8017fcc:	ae1e      	add	r6, sp, #120	; 0x78
 8017fce:	2400      	movs	r4, #0
 8017fd0:	9000      	str	r0, [sp, #0]
 8017fd2:	9a03      	ldr	r2, [sp, #12]
 8017fd4:	a805      	add	r0, sp, #20
 8017fd6:	f000 f990 	bl	80182fa <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8017fda:	f846 4d68 	str.w	r4, [r6, #-104]!
 8017fde:	462a      	mov	r2, r5
 8017fe0:	4633      	mov	r3, r6
 8017fe2:	4621      	mov	r1, r4
 8017fe4:	a805      	add	r0, sp, #20
 8017fe6:	f000 fc89 	bl	80188fc <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8017fea:	b300      	cbz	r0, 801802e <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x8e>
 8017fec:	280a      	cmp	r0, #10
 8017fee:	d01a      	beq.n	8018026 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x86>
 8017ff0:	9f04      	ldr	r7, [sp, #16]
 8017ff2:	b1c7      	cbz	r7, 8018026 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x86>
 8017ff4:	7b78      	ldrb	r0, [r7, #13]
 8017ff6:	7a3b      	ldrb	r3, [r7, #8]
 8017ff8:	00c1      	lsls	r1, r0, #3
 8017ffa:	88aa      	ldrh	r2, [r5, #4]
 8017ffc:	f401 7180 	and.w	r1, r1, #256	; 0x100
 8018000:	4319      	orrs	r1, r3
 8018002:	0643      	lsls	r3, r0, #25
 8018004:	ea4f 1000 	mov.w	r0, r0, lsl #4
 8018008:	bf48      	it	mi
 801800a:	f5a1 7300 	submi.w	r3, r1, #512	; 0x200
 801800e:	f400 7080 	and.w	r0, r0, #256	; 0x100
 8018012:	bf48      	it	mi
 8018014:	b219      	sxthmi	r1, r3
 8018016:	79fb      	ldrb	r3, [r7, #7]
 8018018:	4303      	orrs	r3, r0
 801801a:	4413      	add	r3, r2
 801801c:	1a5b      	subs	r3, r3, r1
 801801e:	b29b      	uxth	r3, r3
 8018020:	42a3      	cmp	r3, r4
 8018022:	bfc8      	it	gt
 8018024:	b21c      	sxthgt	r4, r3
 8018026:	4633      	mov	r3, r6
 8018028:	462a      	mov	r2, r5
 801802a:	2100      	movs	r1, #0
 801802c:	e7da      	b.n	8017fe4 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x44>
 801802e:	b2a0      	uxth	r0, r4
 8018030:	b01e      	add	sp, #120	; 0x78
 8018032:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8018036:	b003      	add	sp, #12
 8018038:	4770      	bx	lr

0801803a <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz>:
 801803a:	b40e      	push	{r1, r2, r3}
 801803c:	b570      	push	{r4, r5, r6, lr}
 801803e:	b09d      	sub	sp, #116	; 0x74
 8018040:	4604      	mov	r4, r0
 8018042:	ab21      	add	r3, sp, #132	; 0x84
 8018044:	a803      	add	r0, sp, #12
 8018046:	f853 5b04 	ldr.w	r5, [r3], #4
 801804a:	9302      	str	r3, [sp, #8]
 801804c:	f000 f902 	bl	8018254 <_ZN8touchgfx12TextProviderC1Ev>
 8018050:	6823      	ldr	r3, [r4, #0]
 8018052:	4620      	mov	r0, r4
 8018054:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8018056:	4798      	blx	r3
 8018058:	6823      	ldr	r3, [r4, #0]
 801805a:	4606      	mov	r6, r0
 801805c:	4620      	mov	r0, r4
 801805e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8018060:	2401      	movs	r4, #1
 8018062:	4798      	blx	r3
 8018064:	4633      	mov	r3, r6
 8018066:	9000      	str	r0, [sp, #0]
 8018068:	4629      	mov	r1, r5
 801806a:	9a02      	ldr	r2, [sp, #8]
 801806c:	a803      	add	r0, sp, #12
 801806e:	f000 f944 	bl	80182fa <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8018072:	a803      	add	r0, sp, #12
 8018074:	f000 fce2 	bl	8018a3c <_ZN8touchgfx12TextProvider11getNextCharEv>
 8018078:	b2a3      	uxth	r3, r4
 801807a:	b138      	cbz	r0, 801808c <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x52>
 801807c:	280a      	cmp	r0, #10
 801807e:	a803      	add	r0, sp, #12
 8018080:	bf04      	itt	eq
 8018082:	3301      	addeq	r3, #1
 8018084:	b21c      	sxtheq	r4, r3
 8018086:	f000 fcd9 	bl	8018a3c <_ZN8touchgfx12TextProvider11getNextCharEv>
 801808a:	e7f5      	b.n	8018078 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x3e>
 801808c:	4618      	mov	r0, r3
 801808e:	b01d      	add	sp, #116	; 0x74
 8018090:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8018094:	b003      	add	sp, #12
 8018096:	4770      	bx	lr

08018098 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz>:
 8018098:	b40e      	push	{r1, r2, r3}
 801809a:	b5f0      	push	{r4, r5, r6, r7, lr}
 801809c:	b09e      	sub	sp, #120	; 0x78
 801809e:	4604      	mov	r4, r0
 80180a0:	ab23      	add	r3, sp, #140	; 0x8c
 80180a2:	a805      	add	r0, sp, #20
 80180a4:	f853 5b04 	ldr.w	r5, [r3], #4
 80180a8:	9303      	str	r3, [sp, #12]
 80180aa:	f000 f8d3 	bl	8018254 <_ZN8touchgfx12TextProviderC1Ev>
 80180ae:	6823      	ldr	r3, [r4, #0]
 80180b0:	4620      	mov	r0, r4
 80180b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80180b4:	4798      	blx	r3
 80180b6:	6823      	ldr	r3, [r4, #0]
 80180b8:	4606      	mov	r6, r0
 80180ba:	4620      	mov	r0, r4
 80180bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80180be:	4798      	blx	r3
 80180c0:	4633      	mov	r3, r6
 80180c2:	4629      	mov	r1, r5
 80180c4:	9000      	str	r0, [sp, #0]
 80180c6:	9a03      	ldr	r2, [sp, #12]
 80180c8:	a805      	add	r0, sp, #20
 80180ca:	f000 f916 	bl	80182fa <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 80180ce:	ad1e      	add	r5, sp, #120	; 0x78
 80180d0:	2100      	movs	r1, #0
 80180d2:	26ff      	movs	r6, #255	; 0xff
 80180d4:	4622      	mov	r2, r4
 80180d6:	a805      	add	r0, sp, #20
 80180d8:	f845 1d68 	str.w	r1, [r5, #-104]!
 80180dc:	462b      	mov	r3, r5
 80180de:	f000 fc0d 	bl	80188fc <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 80180e2:	b1d8      	cbz	r0, 801811c <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x84>
 80180e4:	280a      	cmp	r0, #10
 80180e6:	d012      	beq.n	801810e <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x76>
 80180e8:	9804      	ldr	r0, [sp, #16]
 80180ea:	b180      	cbz	r0, 801810e <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x76>
 80180ec:	7b47      	ldrb	r7, [r0, #13]
 80180ee:	7922      	ldrb	r2, [r4, #4]
 80180f0:	00fb      	lsls	r3, r7, #3
 80180f2:	f403 7180 	and.w	r1, r3, #256	; 0x100
 80180f6:	7a03      	ldrb	r3, [r0, #8]
 80180f8:	430b      	orrs	r3, r1
 80180fa:	0679      	lsls	r1, r7, #25
 80180fc:	bf44      	itt	mi
 80180fe:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8018102:	b21b      	sxthmi	r3, r3
 8018104:	1ad3      	subs	r3, r2, r3
 8018106:	b2db      	uxtb	r3, r3
 8018108:	429e      	cmp	r6, r3
 801810a:	bf28      	it	cs
 801810c:	461e      	movcs	r6, r3
 801810e:	462b      	mov	r3, r5
 8018110:	4622      	mov	r2, r4
 8018112:	2100      	movs	r1, #0
 8018114:	a805      	add	r0, sp, #20
 8018116:	f000 fbf1 	bl	80188fc <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801811a:	e7e2      	b.n	80180e2 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x4a>
 801811c:	4630      	mov	r0, r6
 801811e:	b01e      	add	sp, #120	; 0x78
 8018120:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8018124:	b003      	add	sp, #12
 8018126:	4770      	bx	lr

08018128 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt>:
 8018128:	b530      	push	{r4, r5, lr}
 801812a:	8083      	strh	r3, [r0, #4]
 801812c:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8018130:	f89d 5010 	ldrb.w	r5, [sp, #16]
 8018134:	7183      	strb	r3, [r0, #6]
 8018136:	79c3      	ldrb	r3, [r0, #7]
 8018138:	6101      	str	r1, [r0, #16]
 801813a:	f365 0306 	bfi	r3, r5, #0, #7
 801813e:	f89d 5014 	ldrb.w	r5, [sp, #20]
 8018142:	8282      	strh	r2, [r0, #20]
 8018144:	f365 13c7 	bfi	r3, r5, #7, #1
 8018148:	71c3      	strb	r3, [r0, #7]
 801814a:	f89d 3018 	ldrb.w	r3, [sp, #24]
 801814e:	7203      	strb	r3, [r0, #8]
 8018150:	f89d 301c 	ldrb.w	r3, [sp, #28]
 8018154:	7243      	strb	r3, [r0, #9]
 8018156:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 801815a:	8143      	strh	r3, [r0, #10]
 801815c:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
 8018160:	8183      	strh	r3, [r0, #12]
 8018162:	4b01      	ldr	r3, [pc, #4]	; (8018168 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt+0x40>)
 8018164:	6003      	str	r3, [r0, #0]
 8018166:	bd30      	pop	{r4, r5, pc}
 8018168:	0801fa40 	.word	0x0801fa40

0801816c <_ZNK8touchgfx9ConstFont4findEt>:
 801816c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801816e:	6904      	ldr	r4, [r0, #16]
 8018170:	b3bc      	cbz	r4, 80181e2 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8018172:	88a3      	ldrh	r3, [r4, #4]
 8018174:	8a82      	ldrh	r2, [r0, #20]
 8018176:	1acb      	subs	r3, r1, r3
 8018178:	f102 32ff 	add.w	r2, r2, #4294967295
 801817c:	d431      	bmi.n	80181e2 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801817e:	4293      	cmp	r3, r2
 8018180:	dd0c      	ble.n	801819c <_ZNK8touchgfx9ConstFont4findEt+0x30>
 8018182:	230e      	movs	r3, #14
 8018184:	fb03 4302 	mla	r3, r3, r2, r4
 8018188:	889b      	ldrh	r3, [r3, #4]
 801818a:	1a5b      	subs	r3, r3, r1
 801818c:	1ad3      	subs	r3, r2, r3
 801818e:	429a      	cmp	r2, r3
 8018190:	db27      	blt.n	80181e2 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8018192:	2b00      	cmp	r3, #0
 8018194:	bfbc      	itt	lt
 8018196:	2302      	movlt	r3, #2
 8018198:	fb92 f3f3 	sdivlt	r3, r2, r3
 801819c:	2500      	movs	r5, #0
 801819e:	260e      	movs	r6, #14
 80181a0:	4295      	cmp	r5, r2
 80181a2:	dc1e      	bgt.n	80181e2 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 80181a4:	fb06 4003 	mla	r0, r6, r3, r4
 80181a8:	8887      	ldrh	r7, [r0, #4]
 80181aa:	42b9      	cmp	r1, r7
 80181ac:	d01a      	beq.n	80181e4 <_ZNK8touchgfx9ConstFont4findEt+0x78>
 80181ae:	d20d      	bcs.n	80181cc <_ZNK8touchgfx9ConstFont4findEt+0x60>
 80181b0:	1e5a      	subs	r2, r3, #1
 80181b2:	4295      	cmp	r5, r2
 80181b4:	dc15      	bgt.n	80181e2 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 80181b6:	f830 3c0a 	ldrh.w	r3, [r0, #-10]
 80181ba:	1a5b      	subs	r3, r3, r1
 80181bc:	1ad3      	subs	r3, r2, r3
 80181be:	429a      	cmp	r2, r3
 80181c0:	db0f      	blt.n	80181e2 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 80181c2:	429d      	cmp	r5, r3
 80181c4:	ddec      	ble.n	80181a0 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 80181c6:	1953      	adds	r3, r2, r5
 80181c8:	105b      	asrs	r3, r3, #1
 80181ca:	e7e9      	b.n	80181a0 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 80181cc:	1c5d      	adds	r5, r3, #1
 80181ce:	42aa      	cmp	r2, r5
 80181d0:	db07      	blt.n	80181e2 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 80181d2:	8a43      	ldrh	r3, [r0, #18]
 80181d4:	1acb      	subs	r3, r1, r3
 80181d6:	442b      	add	r3, r5
 80181d8:	429d      	cmp	r5, r3
 80181da:	dc02      	bgt.n	80181e2 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 80181dc:	429a      	cmp	r2, r3
 80181de:	dadf      	bge.n	80181a0 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 80181e0:	e7f1      	b.n	80181c6 <_ZNK8touchgfx9ConstFont4findEt+0x5a>
 80181e2:	2000      	movs	r0, #0
 80181e4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080181e6 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh>:
 80181e6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80181e8:	4604      	mov	r4, r0
 80181ea:	4617      	mov	r7, r2
 80181ec:	461e      	mov	r6, r3
 80181ee:	b911      	cbnz	r1, 80181f6 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x10>
 80181f0:	2500      	movs	r5, #0
 80181f2:	4628      	mov	r0, r5
 80181f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80181f6:	290a      	cmp	r1, #10
 80181f8:	d0fa      	beq.n	80181f0 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 80181fa:	f64f 62ff 	movw	r2, #65279	; 0xfeff
 80181fe:	4291      	cmp	r1, r2
 8018200:	d0f6      	beq.n	80181f0 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 8018202:	f242 020b 	movw	r2, #8203	; 0x200b
 8018206:	4291      	cmp	r1, r2
 8018208:	d0f2      	beq.n	80181f0 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 801820a:	f7ff ffaf 	bl	801816c <_ZNK8touchgfx9ConstFont4findEt>
 801820e:	4605      	mov	r5, r0
 8018210:	b950      	cbnz	r0, 8018228 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x42>
 8018212:	6823      	ldr	r3, [r4, #0]
 8018214:	4620      	mov	r0, r4
 8018216:	691b      	ldr	r3, [r3, #16]
 8018218:	4798      	blx	r3
 801821a:	4601      	mov	r1, r0
 801821c:	4620      	mov	r0, r4
 801821e:	f7ff ffa5 	bl	801816c <_ZNK8touchgfx9ConstFont4findEt>
 8018222:	4605      	mov	r5, r0
 8018224:	2800      	cmp	r0, #0
 8018226:	d0e3      	beq.n	80181f0 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 8018228:	6823      	ldr	r3, [r4, #0]
 801822a:	4629      	mov	r1, r5
 801822c:	4620      	mov	r0, r4
 801822e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8018230:	4798      	blx	r3
 8018232:	6038      	str	r0, [r7, #0]
 8018234:	6823      	ldr	r3, [r4, #0]
 8018236:	4620      	mov	r0, r4
 8018238:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801823a:	4798      	blx	r3
 801823c:	7030      	strb	r0, [r6, #0]
 801823e:	e7d8      	b.n	80181f2 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xc>

08018240 <_ZNK8touchgfx12GestureEvent12getEventTypeEv>:
 8018240:	2002      	movs	r0, #2
 8018242:	4770      	bx	lr

08018244 <_ZN8touchgfx12GestureEventD1Ev>:
 8018244:	4770      	bx	lr

08018246 <_ZN8touchgfx12GestureEventD0Ev>:
 8018246:	b510      	push	{r4, lr}
 8018248:	4604      	mov	r4, r0
 801824a:	210c      	movs	r1, #12
 801824c:	f003 f9c0 	bl	801b5d0 <_ZdlPvj>
 8018250:	4620      	mov	r0, r4
 8018252:	bd10      	pop	{r4, pc}

08018254 <_ZN8touchgfx12TextProviderC1Ev>:
 8018254:	b538      	push	{r3, r4, r5, lr}
 8018256:	2500      	movs	r5, #0
 8018258:	2302      	movs	r3, #2
 801825a:	4604      	mov	r4, r0
 801825c:	220e      	movs	r2, #14
 801825e:	7403      	strb	r3, [r0, #16]
 8018260:	4629      	mov	r1, r5
 8018262:	6145      	str	r5, [r0, #20]
 8018264:	7605      	strb	r5, [r0, #24]
 8018266:	83c5      	strh	r5, [r0, #30]
 8018268:	8405      	strh	r5, [r0, #32]
 801826a:	86c5      	strh	r5, [r0, #54]	; 0x36
 801826c:	8705      	strh	r5, [r0, #56]	; 0x38
 801826e:	87c5      	strh	r5, [r0, #62]	; 0x3e
 8018270:	f8a0 5040 	strh.w	r5, [r0, #64]	; 0x40
 8018274:	e9c0 5500 	strd	r5, r5, [r0]
 8018278:	e9c0 5511 	strd	r5, r5, [r0, #68]	; 0x44
 801827c:	304c      	adds	r0, #76	; 0x4c
 801827e:	f003 fb4d 	bl	801b91c <memset>
 8018282:	2301      	movs	r3, #1
 8018284:	4620      	mov	r0, r4
 8018286:	f8a4 505a 	strh.w	r5, [r4, #90]	; 0x5a
 801828a:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 801828e:	f8a4 505e 	strh.w	r5, [r4, #94]	; 0x5e
 8018292:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
 8018296:	f884 5061 	strb.w	r5, [r4, #97]	; 0x61
 801829a:	f7fb f833 	bl	8013304 <_ZN8touchgfx12TextProvider18initializeInternalEv>
 801829e:	4620      	mov	r0, r4
 80182a0:	bd38      	pop	{r3, r4, r5, pc}

080182a2 <_ZN8touchgfx12TextProvider19getNextCharInternalEv>:
 80182a2:	b530      	push	{r4, r5, lr}
 80182a4:	2500      	movs	r5, #0
 80182a6:	2401      	movs	r4, #1
 80182a8:	6843      	ldr	r3, [r0, #4]
 80182aa:	b913      	cbnz	r3, 80182b2 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x10>
 80182ac:	6803      	ldr	r3, [r0, #0]
 80182ae:	b313      	cbz	r3, 80182f6 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x54>
 80182b0:	6043      	str	r3, [r0, #4]
 80182b2:	7e03      	ldrb	r3, [r0, #24]
 80182b4:	b143      	cbz	r3, 80182c8 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x26>
 80182b6:	6943      	ldr	r3, [r0, #20]
 80182b8:	b12b      	cbz	r3, 80182c6 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 80182ba:	881a      	ldrh	r2, [r3, #0]
 80182bc:	b11a      	cbz	r2, 80182c6 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 80182be:	1c9a      	adds	r2, r3, #2
 80182c0:	6142      	str	r2, [r0, #20]
 80182c2:	8818      	ldrh	r0, [r3, #0]
 80182c4:	bd30      	pop	{r4, r5, pc}
 80182c6:	7605      	strb	r5, [r0, #24]
 80182c8:	6843      	ldr	r3, [r0, #4]
 80182ca:	8819      	ldrh	r1, [r3, #0]
 80182cc:	b199      	cbz	r1, 80182f6 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x54>
 80182ce:	1c9a      	adds	r2, r3, #2
 80182d0:	2902      	cmp	r1, #2
 80182d2:	6042      	str	r2, [r0, #4]
 80182d4:	d1f5      	bne.n	80182c2 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x20>
 80182d6:	7c03      	ldrb	r3, [r0, #16]
 80182d8:	2b01      	cmp	r3, #1
 80182da:	d8e5      	bhi.n	80182a8 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 80182dc:	1c5a      	adds	r2, r3, #1
 80182de:	3302      	adds	r3, #2
 80182e0:	7402      	strb	r2, [r0, #16]
 80182e2:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80182e6:	6143      	str	r3, [r0, #20]
 80182e8:	2b00      	cmp	r3, #0
 80182ea:	d0dd      	beq.n	80182a8 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 80182ec:	881b      	ldrh	r3, [r3, #0]
 80182ee:	2b00      	cmp	r3, #0
 80182f0:	d0da      	beq.n	80182a8 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 80182f2:	7604      	strb	r4, [r0, #24]
 80182f4:	e7d8      	b.n	80182a8 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 80182f6:	2000      	movs	r0, #0
 80182f8:	e7e4      	b.n	80182c4 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x22>

080182fa <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>:
 80182fa:	6001      	str	r1, [r0, #0]
 80182fc:	2100      	movs	r1, #0
 80182fe:	b430      	push	{r4, r5}
 8018300:	6041      	str	r1, [r0, #4]
 8018302:	6815      	ldr	r5, [r2, #0]
 8018304:	6085      	str	r5, [r0, #8]
 8018306:	6852      	ldr	r2, [r2, #4]
 8018308:	6443      	str	r3, [r0, #68]	; 0x44
 801830a:	9b02      	ldr	r3, [sp, #8]
 801830c:	60c2      	str	r2, [r0, #12]
 801830e:	7401      	strb	r1, [r0, #16]
 8018310:	6141      	str	r1, [r0, #20]
 8018312:	7601      	strb	r1, [r0, #24]
 8018314:	8701      	strh	r1, [r0, #56]	; 0x38
 8018316:	8401      	strh	r1, [r0, #32]
 8018318:	f8a0 1040 	strh.w	r1, [r0, #64]	; 0x40
 801831c:	6483      	str	r3, [r0, #72]	; 0x48
 801831e:	bc30      	pop	{r4, r5}
 8018320:	f7fa bff0 	b.w	8013304 <_ZN8touchgfx12TextProvider18initializeInternalEv>

08018324 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>:
 8018324:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018326:	4605      	mov	r5, r0
 8018328:	4608      	mov	r0, r1
 801832a:	b1f1      	cbz	r1, 801836a <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x46>
 801832c:	f105 044c 	add.w	r4, r5, #76	; 0x4c
 8018330:	460b      	mov	r3, r1
 8018332:	f101 0708 	add.w	r7, r1, #8
 8018336:	4622      	mov	r2, r4
 8018338:	6818      	ldr	r0, [r3, #0]
 801833a:	3308      	adds	r3, #8
 801833c:	f853 1c04 	ldr.w	r1, [r3, #-4]
 8018340:	4626      	mov	r6, r4
 8018342:	42bb      	cmp	r3, r7
 8018344:	c603      	stmia	r6!, {r0, r1}
 8018346:	4634      	mov	r4, r6
 8018348:	d1f6      	bne.n	8018338 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x14>
 801834a:	6818      	ldr	r0, [r3, #0]
 801834c:	6030      	str	r0, [r6, #0]
 801834e:	4610      	mov	r0, r2
 8018350:	889b      	ldrh	r3, [r3, #4]
 8018352:	80b3      	strh	r3, [r6, #4]
 8018354:	f895 3059 	ldrb.w	r3, [r5, #89]	; 0x59
 8018358:	015b      	lsls	r3, r3, #5
 801835a:	f403 7180 	and.w	r1, r3, #256	; 0x100
 801835e:	f895 3052 	ldrb.w	r3, [r5, #82]	; 0x52
 8018362:	430b      	orrs	r3, r1
 8018364:	425b      	negs	r3, r3
 8018366:	f885 3055 	strb.w	r3, [r5, #85]	; 0x55
 801836a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801836c <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>:
 801836c:	b538      	push	{r3, r4, r5, lr}
 801836e:	460c      	mov	r4, r1
 8018370:	6811      	ldr	r1, [r2, #0]
 8018372:	4610      	mov	r0, r2
 8018374:	68cd      	ldr	r5, [r1, #12]
 8018376:	4619      	mov	r1, r3
 8018378:	47a8      	blx	r5
 801837a:	2800      	cmp	r0, #0
 801837c:	bf08      	it	eq
 801837e:	4620      	moveq	r0, r4
 8018380:	bd38      	pop	{r3, r4, r5, pc}
	...

08018384 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>:
 8018384:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018386:	4604      	mov	r4, r0
 8018388:	4615      	mov	r5, r2
 801838a:	4608      	mov	r0, r1
 801838c:	b93a      	cbnz	r2, 801839e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1a>
 801838e:	f8a4 205a 	strh.w	r2, [r4, #90]	; 0x5a
 8018392:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
 8018396:	f8a4 205e 	strh.w	r2, [r4, #94]	; 0x5e
 801839a:	4628      	mov	r0, r5
 801839c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801839e:	f892 c00d 	ldrb.w	ip, [r2, #13]
 80183a2:	8893      	ldrh	r3, [r2, #4]
 80183a4:	ea4f 160c 	mov.w	r6, ip, lsl #4
 80183a8:	f406 7280 	and.w	r2, r6, #256	; 0x100
 80183ac:	79ee      	ldrb	r6, [r5, #7]
 80183ae:	4316      	orrs	r6, r2
 80183b0:	f46f 6263 	mvn.w	r2, #3632	; 0xe30
 80183b4:	189a      	adds	r2, r3, r2
 80183b6:	b2b7      	uxth	r7, r6
 80183b8:	b291      	uxth	r1, r2
 80183ba:	291d      	cmp	r1, #29
 80183bc:	f200 8084 	bhi.w	80184c8 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x144>
 80183c0:	2201      	movs	r2, #1
 80183c2:	10f6      	asrs	r6, r6, #3
 80183c4:	408a      	lsls	r2, r1
 80183c6:	4978      	ldr	r1, [pc, #480]	; (80185a8 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x224>)
 80183c8:	420a      	tst	r2, r1
 80183ca:	d12e      	bne.n	801842a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xa6>
 80183cc:	f412 7f60 	tst.w	r2, #896	; 0x380
 80183d0:	d07a      	beq.n	80184c8 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x144>
 80183d2:	f104 024c 	add.w	r2, r4, #76	; 0x4c
 80183d6:	462b      	mov	r3, r5
 80183d8:	f105 0e08 	add.w	lr, r5, #8
 80183dc:	4615      	mov	r5, r2
 80183de:	6818      	ldr	r0, [r3, #0]
 80183e0:	3308      	adds	r3, #8
 80183e2:	f853 1c04 	ldr.w	r1, [r3, #-4]
 80183e6:	4694      	mov	ip, r2
 80183e8:	4573      	cmp	r3, lr
 80183ea:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 80183ee:	4662      	mov	r2, ip
 80183f0:	d1f5      	bne.n	80183de <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x5a>
 80183f2:	6818      	ldr	r0, [r3, #0]
 80183f4:	f8cc 0000 	str.w	r0, [ip]
 80183f8:	889b      	ldrh	r3, [r3, #4]
 80183fa:	f8ac 3004 	strh.w	r3, [ip, #4]
 80183fe:	b2b3      	uxth	r3, r6
 8018400:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 8018404:	f894 0059 	ldrb.w	r0, [r4, #89]	; 0x59
 8018408:	1aca      	subs	r2, r1, r3
 801840a:	1bcf      	subs	r7, r1, r7
 801840c:	f020 0060 	bic.w	r0, r0, #96	; 0x60
 8018410:	b292      	uxth	r2, r2
 8018412:	1afb      	subs	r3, r7, r3
 8018414:	f884 2054 	strb.w	r2, [r4, #84]	; 0x54
 8018418:	10d2      	asrs	r2, r2, #3
 801841a:	f002 0260 	and.w	r2, r2, #96	; 0x60
 801841e:	4302      	orrs	r2, r0
 8018420:	f884 2059 	strb.w	r2, [r4, #89]	; 0x59
 8018424:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
 8018428:	e7b7      	b.n	801839a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x16>
 801842a:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 801842c:	b92b      	cbnz	r3, 801843a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xb6>
 801842e:	4b5f      	ldr	r3, [pc, #380]	; (80185ac <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x228>)
 8018430:	21c0      	movs	r1, #192	; 0xc0
 8018432:	4a5f      	ldr	r2, [pc, #380]	; (80185b0 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x22c>)
 8018434:	485f      	ldr	r0, [pc, #380]	; (80185b4 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x230>)
 8018436:	f003 f8f9 	bl	801b62c <__assert_func>
 801843a:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 801843c:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8018440:	8c59      	ldrh	r1, [r3, #34]	; 0x22
 8018442:	f640 6333 	movw	r3, #3635	; 0xe33
 8018446:	4299      	cmp	r1, r3
 8018448:	d110      	bne.n	801846c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xe8>
 801844a:	6803      	ldr	r3, [r0, #0]
 801844c:	68db      	ldr	r3, [r3, #12]
 801844e:	4798      	blx	r3
 8018450:	7b41      	ldrb	r1, [r0, #13]
 8018452:	00cb      	lsls	r3, r1, #3
 8018454:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8018458:	7a03      	ldrb	r3, [r0, #8]
 801845a:	0648      	lsls	r0, r1, #25
 801845c:	ea43 0302 	orr.w	r3, r3, r2
 8018460:	bf44      	itt	mi
 8018462:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8018466:	b21b      	sxthmi	r3, r3
 8018468:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 801846c:	f8b4 305a 	ldrh.w	r3, [r4, #90]	; 0x5a
 8018470:	462a      	mov	r2, r5
 8018472:	f105 0c08 	add.w	ip, r5, #8
 8018476:	443b      	add	r3, r7
 8018478:	4433      	add	r3, r6
 801847a:	f104 064c 	add.w	r6, r4, #76	; 0x4c
 801847e:	b29b      	uxth	r3, r3
 8018480:	4635      	mov	r5, r6
 8018482:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 8018486:	6810      	ldr	r0, [r2, #0]
 8018488:	3208      	adds	r2, #8
 801848a:	f852 1c04 	ldr.w	r1, [r2, #-4]
 801848e:	4637      	mov	r7, r6
 8018490:	4562      	cmp	r2, ip
 8018492:	c703      	stmia	r7!, {r0, r1}
 8018494:	463e      	mov	r6, r7
 8018496:	d1f6      	bne.n	8018486 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x102>
 8018498:	6810      	ldr	r0, [r2, #0]
 801849a:	6038      	str	r0, [r7, #0]
 801849c:	8892      	ldrh	r2, [r2, #4]
 801849e:	80ba      	strh	r2, [r7, #4]
 80184a0:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 80184a4:	10db      	asrs	r3, r3, #3
 80184a6:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
 80184aa:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80184ae:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80184b2:	4313      	orrs	r3, r2
 80184b4:	f894 205e 	ldrb.w	r2, [r4, #94]	; 0x5e
 80184b8:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 80184bc:	f894 3055 	ldrb.w	r3, [r4, #85]	; 0x55
 80184c0:	1a9b      	subs	r3, r3, r2
 80184c2:	f884 3055 	strb.w	r3, [r4, #85]	; 0x55
 80184c6:	e768      	b.n	801839a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x16>
 80184c8:	f023 0204 	bic.w	r2, r3, #4
 80184cc:	f640 611b 	movw	r1, #3611	; 0xe1b
 80184d0:	428a      	cmp	r2, r1
 80184d2:	d003      	beq.n	80184dc <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x158>
 80184d4:	f640 621d 	movw	r2, #3613	; 0xe1d
 80184d8:	4293      	cmp	r3, r2
 80184da:	d120      	bne.n	801851e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x19a>
 80184dc:	3b01      	subs	r3, #1
 80184de:	4602      	mov	r2, r0
 80184e0:	4629      	mov	r1, r5
 80184e2:	4620      	mov	r0, r4
 80184e4:	b29b      	uxth	r3, r3
 80184e6:	f7ff ff41 	bl	801836c <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 80184ea:	7b41      	ldrb	r1, [r0, #13]
 80184ec:	00cb      	lsls	r3, r1, #3
 80184ee:	0649      	lsls	r1, r1, #25
 80184f0:	f403 7280 	and.w	r2, r3, #256	; 0x100
 80184f4:	7a03      	ldrb	r3, [r0, #8]
 80184f6:	ea43 0302 	orr.w	r3, r3, r2
 80184fa:	bf44      	itt	mi
 80184fc:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8018500:	b21b      	sxthmi	r3, r3
 8018502:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 8018506:	7b6b      	ldrb	r3, [r5, #13]
 8018508:	7aaa      	ldrb	r2, [r5, #10]
 801850a:	005b      	lsls	r3, r3, #1
 801850c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8018510:	4313      	orrs	r3, r2
 8018512:	115a      	asrs	r2, r3, #5
 8018514:	eb02 0393 	add.w	r3, r2, r3, lsr #2
 8018518:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
 801851c:	e035      	b.n	801858a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x206>
 801851e:	ea4f 02cc 	mov.w	r2, ip, lsl #3
 8018522:	f01c 0f40 	tst.w	ip, #64	; 0x40
 8018526:	f402 7180 	and.w	r1, r2, #256	; 0x100
 801852a:	7a2a      	ldrb	r2, [r5, #8]
 801852c:	ea42 0201 	orr.w	r2, r2, r1
 8018530:	f640 6109 	movw	r1, #3593	; 0xe09
 8018534:	bf1c      	itt	ne
 8018536:	f5a2 7200 	subne.w	r2, r2, #512	; 0x200
 801853a:	b212      	sxthne	r2, r2
 801853c:	f8a4 205a 	strh.w	r2, [r4, #90]	; 0x5a
 8018540:	f023 0210 	bic.w	r2, r3, #16
 8018544:	428a      	cmp	r2, r1
 8018546:	d003      	beq.n	8018550 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1cc>
 8018548:	f640 6213 	movw	r2, #3603	; 0xe13
 801854c:	4293      	cmp	r3, r2
 801854e:	d129      	bne.n	80185a4 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x220>
 8018550:	7b6e      	ldrb	r6, [r5, #13]
 8018552:	4629      	mov	r1, r5
 8018554:	0076      	lsls	r6, r6, #1
 8018556:	f406 7280 	and.w	r2, r6, #256	; 0x100
 801855a:	7aae      	ldrb	r6, [r5, #10]
 801855c:	4316      	orrs	r6, r2
 801855e:	f640 6213 	movw	r2, #3603	; 0xe13
 8018562:	4293      	cmp	r3, r2
 8018564:	4602      	mov	r2, r0
 8018566:	4620      	mov	r0, r4
 8018568:	bf16      	itet	ne
 801856a:	f103 33ff 	addne.w	r3, r3, #4294967295
 801856e:	f640 630c 	movweq	r3, #3596	; 0xe0c
 8018572:	b29b      	uxthne	r3, r3
 8018574:	f7ff fefa 	bl	801836c <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 8018578:	7b43      	ldrb	r3, [r0, #13]
 801857a:	7a82      	ldrb	r2, [r0, #10]
 801857c:	005b      	lsls	r3, r3, #1
 801857e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8018582:	4313      	orrs	r3, r2
 8018584:	1af6      	subs	r6, r6, r3
 8018586:	f8a4 605e 	strh.w	r6, [r4, #94]	; 0x5e
 801858a:	7b69      	ldrb	r1, [r5, #13]
 801858c:	00cb      	lsls	r3, r1, #3
 801858e:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8018592:	7a2b      	ldrb	r3, [r5, #8]
 8018594:	4313      	orrs	r3, r2
 8018596:	064a      	lsls	r2, r1, #25
 8018598:	bf44      	itt	mi
 801859a:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801859e:	b21b      	sxthmi	r3, r3
 80185a0:	1bdb      	subs	r3, r3, r7
 80185a2:	e73f      	b.n	8018424 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xa0>
 80185a4:	2300      	movs	r3, #0
 80185a6:	e7b7      	b.n	8018518 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x194>
 80185a8:	3fc00079 	.word	0x3fc00079
 80185ac:	0801faa4 	.word	0x0801faa4
 80185b0:	0801fd16 	.word	0x0801fd16
 80185b4:	0801faad 	.word	0x0801faad

080185b8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>:
 80185b8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80185bc:	4604      	mov	r4, r0
 80185be:	b942      	cbnz	r2, 80185d2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1a>
 80185c0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80185c4:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
 80185c8:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
 80185cc:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
 80185d0:	e046      	b.n	8018660 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xa8>
 80185d2:	7b51      	ldrb	r1, [r2, #13]
 80185d4:	8893      	ldrh	r3, [r2, #4]
 80185d6:	010f      	lsls	r7, r1, #4
 80185d8:	f407 7080 	and.w	r0, r7, #256	; 0x100
 80185dc:	79d7      	ldrb	r7, [r2, #7]
 80185de:	4307      	orrs	r7, r0
 80185e0:	2f04      	cmp	r7, #4
 80185e2:	b2bd      	uxth	r5, r7
 80185e4:	bfcc      	ite	gt
 80185e6:	08bf      	lsrgt	r7, r7, #2
 80185e8:	2701      	movle	r7, #1
 80185ea:	f5b3 6fdd 	cmp.w	r3, #1768	; 0x6e8
 80185ee:	f200 80ab 	bhi.w	8018748 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x190>
 80185f2:	f240 60e7 	movw	r0, #1767	; 0x6e7
 80185f6:	4283      	cmp	r3, r0
 80185f8:	d216      	bcs.n	8018628 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 80185fa:	f240 605b 	movw	r0, #1627	; 0x65b
 80185fe:	4283      	cmp	r3, r0
 8018600:	d859      	bhi.n	80186b6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xfe>
 8018602:	f240 6057 	movw	r0, #1623	; 0x657
 8018606:	4283      	cmp	r3, r0
 8018608:	d20e      	bcs.n	8018628 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801860a:	f5b3 6fca 	cmp.w	r3, #1616	; 0x650
 801860e:	d24a      	bcs.n	80186a6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xee>
 8018610:	f240 604e 	movw	r0, #1614	; 0x64e
 8018614:	4283      	cmp	r3, r0
 8018616:	d207      	bcs.n	8018628 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 8018618:	f240 601a 	movw	r0, #1562	; 0x61a
 801861c:	4283      	cmp	r3, r0
 801861e:	d02a      	beq.n	8018676 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 8018620:	d821      	bhi.n	8018666 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xae>
 8018622:	f5b3 6fc2 	cmp.w	r3, #1552	; 0x610
 8018626:	d35b      	bcc.n	80186e0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 8018628:	f9b4 305a 	ldrsh.w	r3, [r4, #90]	; 0x5a
 801862c:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 8018630:	f040 80d0 	bne.w	80187d4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21c>
 8018634:	f9b4 005c 	ldrsh.w	r0, [r4, #92]	; 0x5c
 8018638:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 801863c:	f040 80ca 	bne.w	80187d4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21c>
 8018640:	00cb      	lsls	r3, r1, #3
 8018642:	0649      	lsls	r1, r1, #25
 8018644:	f403 7080 	and.w	r0, r3, #256	; 0x100
 8018648:	7a13      	ldrb	r3, [r2, #8]
 801864a:	ea43 0300 	orr.w	r3, r3, r0
 801864e:	bf44      	itt	mi
 8018650:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8018654:	b21b      	sxthmi	r3, r3
 8018656:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 801865a:	1b5d      	subs	r5, r3, r5
 801865c:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 8018660:	4610      	mov	r0, r2
 8018662:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018666:	f240 604b 	movw	r0, #1611	; 0x64b
 801866a:	4283      	cmp	r3, r0
 801866c:	d338      	bcc.n	80186e0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 801866e:	f240 604c 	movw	r0, #1612	; 0x64c
 8018672:	4283      	cmp	r3, r0
 8018674:	d9d8      	bls.n	8018628 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 8018676:	f9b4 005a 	ldrsh.w	r0, [r4, #90]	; 0x5a
 801867a:	f9b4 305c 	ldrsh.w	r3, [r4, #92]	; 0x5c
 801867e:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 8018682:	f040 80f2 	bne.w	801886a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b2>
 8018686:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 801868a:	f040 80ee 	bne.w	801886a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b2>
 801868e:	00cb      	lsls	r3, r1, #3
 8018690:	064e      	lsls	r6, r1, #25
 8018692:	f403 7080 	and.w	r0, r3, #256	; 0x100
 8018696:	7a13      	ldrb	r3, [r2, #8]
 8018698:	ea43 0300 	orr.w	r3, r3, r0
 801869c:	bf44      	itt	mi
 801869e:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 80186a2:	b21b      	sxthmi	r3, r3
 80186a4:	e7d9      	b.n	801865a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xa2>
 80186a6:	f240 6054 	movw	r0, #1620	; 0x654
 80186aa:	4283      	cmp	r3, r0
 80186ac:	d8e3      	bhi.n	8018676 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 80186ae:	f5b3 6fca 	cmp.w	r3, #1616	; 0x650
 80186b2:	d9e0      	bls.n	8018676 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 80186b4:	e7b8      	b.n	8018628 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 80186b6:	f240 6074 	movw	r0, #1652	; 0x674
 80186ba:	4283      	cmp	r3, r0
 80186bc:	d0b4      	beq.n	8018628 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 80186be:	d82d      	bhi.n	801871c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x164>
 80186c0:	f240 605e 	movw	r0, #1630	; 0x65e
 80186c4:	4283      	cmp	r3, r0
 80186c6:	d804      	bhi.n	80186d2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x11a>
 80186c8:	f240 605d 	movw	r0, #1629	; 0x65d
 80186cc:	4283      	cmp	r3, r0
 80186ce:	d3d2      	bcc.n	8018676 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 80186d0:	e7aa      	b.n	8018628 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 80186d2:	f240 605f 	movw	r0, #1631	; 0x65f
 80186d6:	4283      	cmp	r3, r0
 80186d8:	d0cd      	beq.n	8018676 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 80186da:	f5b3 6fce 	cmp.w	r3, #1648	; 0x670
 80186de:	d0a3      	beq.n	8018628 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 80186e0:	00cb      	lsls	r3, r1, #3
 80186e2:	0649      	lsls	r1, r1, #25
 80186e4:	f403 7080 	and.w	r0, r3, #256	; 0x100
 80186e8:	7a13      	ldrb	r3, [r2, #8]
 80186ea:	ea43 0300 	orr.w	r3, r3, r0
 80186ee:	bf44      	itt	mi
 80186f0:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 80186f4:	b21b      	sxthmi	r3, r3
 80186f6:	1b5d      	subs	r5, r3, r5
 80186f8:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 80186fc:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 8018700:	7b53      	ldrb	r3, [r2, #13]
 8018702:	015b      	lsls	r3, r3, #5
 8018704:	f403 7180 	and.w	r1, r3, #256	; 0x100
 8018708:	7993      	ldrb	r3, [r2, #6]
 801870a:	430b      	orrs	r3, r1
 801870c:	2105      	movs	r1, #5
 801870e:	005b      	lsls	r3, r3, #1
 8018710:	fb93 f3f1 	sdiv	r3, r3, r1
 8018714:	f992 1009 	ldrsb.w	r1, [r2, #9]
 8018718:	440b      	add	r3, r1
 801871a:	e757      	b.n	80185cc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x14>
 801871c:	f240 60e2 	movw	r0, #1762	; 0x6e2
 8018720:	4283      	cmp	r3, r0
 8018722:	d809      	bhi.n	8018738 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x180>
 8018724:	f240 60df 	movw	r0, #1759	; 0x6df
 8018728:	4283      	cmp	r3, r0
 801872a:	f4bf af7d 	bcs.w	8018628 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801872e:	f2a3 63d6 	subw	r3, r3, #1750	; 0x6d6
 8018732:	2b05      	cmp	r3, #5
 8018734:	d8d4      	bhi.n	80186e0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 8018736:	e777      	b.n	8018628 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 8018738:	f240 60e3 	movw	r0, #1763	; 0x6e3
 801873c:	4283      	cmp	r3, r0
 801873e:	d09a      	beq.n	8018676 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 8018740:	f240 60e4 	movw	r0, #1764	; 0x6e4
 8018744:	4283      	cmp	r3, r0
 8018746:	e7ca      	b.n	80186de <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x126>
 8018748:	f5b3 6f0f 	cmp.w	r3, #2288	; 0x8f0
 801874c:	d22b      	bcs.n	80187a6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1ee>
 801874e:	f640 00ed 	movw	r0, #2285	; 0x8ed
 8018752:	4283      	cmp	r3, r0
 8018754:	d28f      	bcs.n	8018676 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 8018756:	f640 00e5 	movw	r0, #2277	; 0x8e5
 801875a:	4283      	cmp	r3, r0
 801875c:	d816      	bhi.n	801878c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d4>
 801875e:	f640 00e4 	movw	r0, #2276	; 0x8e4
 8018762:	4283      	cmp	r3, r0
 8018764:	f4bf af60 	bcs.w	8018628 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 8018768:	f240 60ec 	movw	r0, #1772	; 0x6ec
 801876c:	4283      	cmp	r3, r0
 801876e:	d80a      	bhi.n	8018786 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1ce>
 8018770:	f240 60eb 	movw	r0, #1771	; 0x6eb
 8018774:	4283      	cmp	r3, r0
 8018776:	f4bf af57 	bcs.w	8018628 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801877a:	f240 60ea 	movw	r0, #1770	; 0x6ea
 801877e:	4283      	cmp	r3, r0
 8018780:	f43f af79 	beq.w	8018676 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 8018784:	e7ac      	b.n	80186e0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 8018786:	f240 60ed 	movw	r0, #1773	; 0x6ed
 801878a:	e7f8      	b.n	801877e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1c6>
 801878c:	f640 00e8 	movw	r0, #2280	; 0x8e8
 8018790:	4283      	cmp	r3, r0
 8018792:	d802      	bhi.n	801879a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e2>
 8018794:	f640 00e7 	movw	r0, #2279	; 0x8e7
 8018798:	e798      	b.n	80186cc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x114>
 801879a:	f640 00e9 	movw	r0, #2281	; 0x8e9
 801879e:	4283      	cmp	r3, r0
 80187a0:	f47f af42 	bne.w	8018628 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 80187a4:	e767      	b.n	8018676 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 80187a6:	f640 00f6 	movw	r0, #2294	; 0x8f6
 80187aa:	4283      	cmp	r3, r0
 80187ac:	f43f af63 	beq.w	8018676 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 80187b0:	d802      	bhi.n	80187b8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x200>
 80187b2:	f640 00f2 	movw	r0, #2290	; 0x8f2
 80187b6:	e7f2      	b.n	801879e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e6>
 80187b8:	f640 00fa 	movw	r0, #2298	; 0x8fa
 80187bc:	4283      	cmp	r3, r0
 80187be:	d805      	bhi.n	80187cc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x214>
 80187c0:	f640 00f9 	movw	r0, #2297	; 0x8f9
 80187c4:	4283      	cmp	r3, r0
 80187c6:	f4ff af2f 	bcc.w	8018628 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 80187ca:	e754      	b.n	8018676 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 80187cc:	f640 00fe 	movw	r0, #2302	; 0x8fe
 80187d0:	4283      	cmp	r3, r0
 80187d2:	e7af      	b.n	8018734 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x17c>
 80187d4:	f104 0c4c 	add.w	ip, r4, #76	; 0x4c
 80187d8:	4617      	mov	r7, r2
 80187da:	f102 0808 	add.w	r8, r2, #8
 80187de:	4666      	mov	r6, ip
 80187e0:	6838      	ldr	r0, [r7, #0]
 80187e2:	3708      	adds	r7, #8
 80187e4:	f857 1c04 	ldr.w	r1, [r7, #-4]
 80187e8:	46e6      	mov	lr, ip
 80187ea:	4547      	cmp	r7, r8
 80187ec:	e8ae 0003 	stmia.w	lr!, {r0, r1}
 80187f0:	46f4      	mov	ip, lr
 80187f2:	d1f5      	bne.n	80187e0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x228>
 80187f4:	6838      	ldr	r0, [r7, #0]
 80187f6:	f8ce 0000 	str.w	r0, [lr]
 80187fa:	88b9      	ldrh	r1, [r7, #4]
 80187fc:	f8ae 1004 	strh.w	r1, [lr, #4]
 8018800:	f9b4 005e 	ldrsh.w	r0, [r4, #94]	; 0x5e
 8018804:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 8018808:	d009      	beq.n	801881e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x266>
 801880a:	7b51      	ldrb	r1, [r2, #13]
 801880c:	7992      	ldrb	r2, [r2, #6]
 801880e:	0149      	lsls	r1, r1, #5
 8018810:	f401 7180 	and.w	r1, r1, #256	; 0x100
 8018814:	4311      	orrs	r1, r2
 8018816:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 801881a:	f884 0055 	strb.w	r0, [r4, #85]	; 0x55
 801881e:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 8018822:	d00d      	beq.n	8018840 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x288>
 8018824:	442b      	add	r3, r5
 8018826:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
 801882a:	b29b      	uxth	r3, r3
 801882c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8018830:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 8018834:	10db      	asrs	r3, r3, #3
 8018836:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801883a:	4313      	orrs	r3, r2
 801883c:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 8018840:	f894 1059 	ldrb.w	r1, [r4, #89]	; 0x59
 8018844:	00cb      	lsls	r3, r1, #3
 8018846:	064f      	lsls	r7, r1, #25
 8018848:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801884c:	f894 3054 	ldrb.w	r3, [r4, #84]	; 0x54
 8018850:	ea43 0302 	orr.w	r3, r3, r2
 8018854:	bf44      	itt	mi
 8018856:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801885a:	b21b      	sxthmi	r3, r3
 801885c:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 8018860:	1b5d      	subs	r5, r3, r5
 8018862:	4632      	mov	r2, r6
 8018864:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 8018868:	e6fa      	b.n	8018660 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xa8>
 801886a:	f104 0e4c 	add.w	lr, r4, #76	; 0x4c
 801886e:	4694      	mov	ip, r2
 8018870:	f102 0908 	add.w	r9, r2, #8
 8018874:	4676      	mov	r6, lr
 8018876:	f8dc 0000 	ldr.w	r0, [ip]
 801887a:	f10c 0c08 	add.w	ip, ip, #8
 801887e:	f85c 1c04 	ldr.w	r1, [ip, #-4]
 8018882:	46f0      	mov	r8, lr
 8018884:	45cc      	cmp	ip, r9
 8018886:	e8a8 0003 	stmia.w	r8!, {r0, r1}
 801888a:	46c6      	mov	lr, r8
 801888c:	d1f3      	bne.n	8018876 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2be>
 801888e:	f8dc 0000 	ldr.w	r0, [ip]
 8018892:	f8c8 0000 	str.w	r0, [r8]
 8018896:	f8bc 1004 	ldrh.w	r1, [ip, #4]
 801889a:	f8a8 1004 	strh.w	r1, [r8, #4]
 801889e:	f9b4 005e 	ldrsh.w	r0, [r4, #94]	; 0x5e
 80188a2:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 80188a6:	d009      	beq.n	80188bc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x304>
 80188a8:	7b51      	ldrb	r1, [r2, #13]
 80188aa:	7992      	ldrb	r2, [r2, #6]
 80188ac:	0149      	lsls	r1, r1, #5
 80188ae:	f401 7180 	and.w	r1, r1, #256	; 0x100
 80188b2:	4311      	orrs	r1, r2
 80188b4:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 80188b8:	f884 0055 	strb.w	r0, [r4, #85]	; 0x55
 80188bc:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 80188c0:	d00d      	beq.n	80188de <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x326>
 80188c2:	1bdb      	subs	r3, r3, r7
 80188c4:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
 80188c8:	b29b      	uxth	r3, r3
 80188ca:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80188ce:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 80188d2:	10db      	asrs	r3, r3, #3
 80188d4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80188d8:	4313      	orrs	r3, r2
 80188da:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 80188de:	f894 1059 	ldrb.w	r1, [r4, #89]	; 0x59
 80188e2:	00cb      	lsls	r3, r1, #3
 80188e4:	0648      	lsls	r0, r1, #25
 80188e6:	f403 7280 	and.w	r2, r3, #256	; 0x100
 80188ea:	f894 3054 	ldrb.w	r3, [r4, #84]	; 0x54
 80188ee:	ea43 0302 	orr.w	r3, r3, r2
 80188f2:	bf44      	itt	mi
 80188f4:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 80188f8:	b21b      	sxthmi	r3, r3
 80188fa:	e7b1      	b.n	8018860 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2a8>

080188fc <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>:
 80188fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018900:	461e      	mov	r6, r3
 8018902:	8f03      	ldrh	r3, [r0, #56]	; 0x38
 8018904:	4604      	mov	r4, r0
 8018906:	4617      	mov	r7, r2
 8018908:	b92b      	cbnz	r3, 8018916 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x1a>
 801890a:	4b25      	ldr	r3, [pc, #148]	; (80189a0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0xa4>)
 801890c:	21c0      	movs	r1, #192	; 0xc0
 801890e:	4a25      	ldr	r2, [pc, #148]	; (80189a4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0xa8>)
 8018910:	4825      	ldr	r0, [pc, #148]	; (80189a8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0xac>)
 8018912:	f002 fe8b 	bl	801b62c <__assert_func>
 8018916:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 8018918:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 801891c:	f8b3 8022 	ldrh.w	r8, [r3, #34]	; 0x22
 8018920:	f7fa fc4a 	bl	80131b8 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8018924:	4605      	mov	r5, r0
 8018926:	b918      	cbnz	r0, 8018930 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x34>
 8018928:	6030      	str	r0, [r6, #0]
 801892a:	4628      	mov	r0, r5
 801892c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018930:	683b      	ldr	r3, [r7, #0]
 8018932:	4601      	mov	r1, r0
 8018934:	4638      	mov	r0, r7
 8018936:	68db      	ldr	r3, [r3, #12]
 8018938:	4798      	blx	r3
 801893a:	f5a8 63c0 	sub.w	r3, r8, #1536	; 0x600
 801893e:	4602      	mov	r2, r0
 8018940:	6030      	str	r0, [r6, #0]
 8018942:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8018946:	d213      	bcs.n	8018970 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x74>
 8018948:	4643      	mov	r3, r8
 801894a:	4639      	mov	r1, r7
 801894c:	4620      	mov	r0, r4
 801894e:	f7ff fe33 	bl	80185b8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
 8018952:	6030      	str	r0, [r6, #0]
 8018954:	6833      	ldr	r3, [r6, #0]
 8018956:	b143      	cbz	r3, 801896a <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x6e>
 8018958:	7b5a      	ldrb	r2, [r3, #13]
 801895a:	7a9b      	ldrb	r3, [r3, #10]
 801895c:	0052      	lsls	r2, r2, #1
 801895e:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8018962:	4313      	orrs	r3, r2
 8018964:	bf0c      	ite	eq
 8018966:	2301      	moveq	r3, #1
 8018968:	2300      	movne	r3, #0
 801896a:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
 801896e:	e7dc      	b.n	801892a <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x2e>
 8018970:	f5a5 6360 	sub.w	r3, r5, #3584	; 0xe00
 8018974:	b29b      	uxth	r3, r3
 8018976:	2b7f      	cmp	r3, #127	; 0x7f
 8018978:	d804      	bhi.n	8018984 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x88>
 801897a:	4639      	mov	r1, r7
 801897c:	4620      	mov	r0, r4
 801897e:	f7ff fd01 	bl	8018384 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 8018982:	e7e6      	b.n	8018952 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x56>
 8018984:	f894 3061 	ldrb.w	r3, [r4, #97]	; 0x61
 8018988:	2b00      	cmp	r3, #0
 801898a:	d0e3      	beq.n	8018954 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x58>
 801898c:	f640 1302 	movw	r3, #2306	; 0x902
 8018990:	429d      	cmp	r5, r3
 8018992:	d1df      	bne.n	8018954 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x58>
 8018994:	4601      	mov	r1, r0
 8018996:	4620      	mov	r0, r4
 8018998:	f7ff fcc4 	bl	8018324 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 801899c:	e7d9      	b.n	8018952 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x56>
 801899e:	bf00      	nop
 80189a0:	0801faa4 	.word	0x0801faa4
 80189a4:	0801fd16 	.word	0x0801fd16
 80189a8:	0801faad 	.word	0x0801faad

080189ac <_ZN8touchgfx12TextProvider15fillInputBufferEv>:
 80189ac:	b510      	push	{r4, lr}
 80189ae:	4604      	mov	r4, r0
 80189b0:	f8b4 1040 	ldrh.w	r1, [r4, #64]	; 0x40
 80189b4:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 80189b6:	b9d9      	cbnz	r1, 80189f0 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x44>
 80189b8:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 80189ba:	2b0a      	cmp	r3, #10
 80189bc:	d037      	beq.n	8018a2e <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x82>
 80189be:	4620      	mov	r0, r4
 80189c0:	f7ff fc6f 	bl	80182a2 <_ZN8touchgfx12TextProvider19getNextCharInternalEv>
 80189c4:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 80189c6:	2b09      	cmp	r3, #9
 80189c8:	d906      	bls.n	80189d8 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x2c>
 80189ca:	4b19      	ldr	r3, [pc, #100]	; (8018a30 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x84>)
 80189cc:	f44f 7182 	mov.w	r1, #260	; 0x104
 80189d0:	4a18      	ldr	r2, [pc, #96]	; (8018a34 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x88>)
 80189d2:	4819      	ldr	r0, [pc, #100]	; (8018a38 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x8c>)
 80189d4:	f002 fe2a 	bl	801b62c <__assert_func>
 80189d8:	1c5a      	adds	r2, r3, #1
 80189da:	8722      	strh	r2, [r4, #56]	; 0x38
 80189dc:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 80189de:	4413      	add	r3, r2
 80189e0:	b29b      	uxth	r3, r3
 80189e2:	2b09      	cmp	r3, #9
 80189e4:	bf88      	it	hi
 80189e6:	3b0a      	subhi	r3, #10
 80189e8:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 80189ec:	8458      	strh	r0, [r3, #34]	; 0x22
 80189ee:	e7e3      	b.n	80189b8 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0xc>
 80189f0:	2b0a      	cmp	r3, #10
 80189f2:	d01c      	beq.n	8018a2e <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x82>
 80189f4:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 80189f6:	3901      	subs	r1, #1
 80189f8:	eb04 0042 	add.w	r0, r4, r2, lsl #1
 80189fc:	8f40      	ldrh	r0, [r0, #58]	; 0x3a
 80189fe:	f8a4 1040 	strh.w	r1, [r4, #64]	; 0x40
 8018a02:	1c51      	adds	r1, r2, #1
 8018a04:	b289      	uxth	r1, r1
 8018a06:	2901      	cmp	r1, #1
 8018a08:	bf8a      	itet	hi
 8018a0a:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8018a0e:	87e1      	strhls	r1, [r4, #62]	; 0x3e
 8018a10:	87e2      	strhhi	r2, [r4, #62]	; 0x3e
 8018a12:	2b09      	cmp	r3, #9
 8018a14:	d8d9      	bhi.n	80189ca <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x1e>
 8018a16:	1c5a      	adds	r2, r3, #1
 8018a18:	8722      	strh	r2, [r4, #56]	; 0x38
 8018a1a:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8018a1c:	4413      	add	r3, r2
 8018a1e:	b29b      	uxth	r3, r3
 8018a20:	2b09      	cmp	r3, #9
 8018a22:	bf88      	it	hi
 8018a24:	3b0a      	subhi	r3, #10
 8018a26:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8018a2a:	8458      	strh	r0, [r3, #34]	; 0x22
 8018a2c:	e7c0      	b.n	80189b0 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x4>
 8018a2e:	bd10      	pop	{r4, pc}
 8018a30:	0801fad9 	.word	0x0801fad9
 8018a34:	0801fe6c 	.word	0x0801fe6c
 8018a38:	0801faad 	.word	0x0801faad

08018a3c <_ZN8touchgfx12TextProvider11getNextCharEv>:
 8018a3c:	b538      	push	{r3, r4, r5, lr}
 8018a3e:	8f02      	ldrh	r2, [r0, #56]	; 0x38
 8018a40:	4604      	mov	r4, r0
 8018a42:	b92a      	cbnz	r2, 8018a50 <_ZN8touchgfx12TextProvider11getNextCharEv+0x14>
 8018a44:	4b13      	ldr	r3, [pc, #76]	; (8018a94 <_ZN8touchgfx12TextProvider11getNextCharEv+0x58>)
 8018a46:	21d5      	movs	r1, #213	; 0xd5
 8018a48:	4a13      	ldr	r2, [pc, #76]	; (8018a98 <_ZN8touchgfx12TextProvider11getNextCharEv+0x5c>)
 8018a4a:	4814      	ldr	r0, [pc, #80]	; (8018a9c <_ZN8touchgfx12TextProvider11getNextCharEv+0x60>)
 8018a4c:	f002 fdee 	bl	801b62c <__assert_func>
 8018a50:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 8018a52:	3a01      	subs	r2, #1
 8018a54:	eb00 0143 	add.w	r1, r0, r3, lsl #1
 8018a58:	8c4d      	ldrh	r5, [r1, #34]	; 0x22
 8018a5a:	8702      	strh	r2, [r0, #56]	; 0x38
 8018a5c:	1c5a      	adds	r2, r3, #1
 8018a5e:	b292      	uxth	r2, r2
 8018a60:	2a09      	cmp	r2, #9
 8018a62:	bf8a      	itet	hi
 8018a64:	3b09      	subhi	r3, #9
 8018a66:	86c2      	strhls	r2, [r0, #54]	; 0x36
 8018a68:	86c3      	strhhi	r3, [r0, #54]	; 0x36
 8018a6a:	f7ff ff9f 	bl	80189ac <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 8018a6e:	8c23      	ldrh	r3, [r4, #32]
 8018a70:	2b01      	cmp	r3, #1
 8018a72:	bf9c      	itt	ls
 8018a74:	3301      	addls	r3, #1
 8018a76:	8423      	strhls	r3, [r4, #32]
 8018a78:	8be3      	ldrh	r3, [r4, #30]
 8018a7a:	b90b      	cbnz	r3, 8018a80 <_ZN8touchgfx12TextProvider11getNextCharEv+0x44>
 8018a7c:	2302      	movs	r3, #2
 8018a7e:	83e3      	strh	r3, [r4, #30]
 8018a80:	8be3      	ldrh	r3, [r4, #30]
 8018a82:	4628      	mov	r0, r5
 8018a84:	3b01      	subs	r3, #1
 8018a86:	b29b      	uxth	r3, r3
 8018a88:	83e3      	strh	r3, [r4, #30]
 8018a8a:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8018a8e:	8365      	strh	r5, [r4, #26]
 8018a90:	bd38      	pop	{r3, r4, r5, pc}
 8018a92:	bf00      	nop
 8018a94:	0801faa4 	.word	0x0801faa4
 8018a98:	0801fdc1 	.word	0x0801fdc1
 8018a9c:	0801faad 	.word	0x0801faad

08018aa0 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>:
 8018aa0:	428a      	cmp	r2, r1
 8018aa2:	b538      	push	{r3, r4, r5, lr}
 8018aa4:	8f04      	ldrh	r4, [r0, #56]	; 0x38
 8018aa6:	d90c      	bls.n	8018ac2 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x22>
 8018aa8:	b92c      	cbnz	r4, 8018ab6 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x16>
 8018aaa:	4b1c      	ldr	r3, [pc, #112]	; (8018b1c <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x7c>)
 8018aac:	21e1      	movs	r1, #225	; 0xe1
 8018aae:	4a1c      	ldr	r2, [pc, #112]	; (8018b20 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x80>)
 8018ab0:	481c      	ldr	r0, [pc, #112]	; (8018b24 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x84>)
 8018ab2:	f002 fdbb 	bl	801b62c <__assert_func>
 8018ab6:	3c01      	subs	r4, #1
 8018ab8:	4b1b      	ldr	r3, [pc, #108]	; (8018b28 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x88>)
 8018aba:	4a1c      	ldr	r2, [pc, #112]	; (8018b2c <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x8c>)
 8018abc:	21c5      	movs	r1, #197	; 0xc5
 8018abe:	8704      	strh	r4, [r0, #56]	; 0x38
 8018ac0:	e7f6      	b.n	8018ab0 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x10>
 8018ac2:	428c      	cmp	r4, r1
 8018ac4:	d203      	bcs.n	8018ace <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x2e>
 8018ac6:	4b1a      	ldr	r3, [pc, #104]	; (8018b30 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x90>)
 8018ac8:	21cb      	movs	r1, #203	; 0xcb
 8018aca:	4a1a      	ldr	r2, [pc, #104]	; (8018b34 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x94>)
 8018acc:	e7f0      	b.n	8018ab0 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x10>
 8018ace:	1a64      	subs	r4, r4, r1
 8018ad0:	250a      	movs	r5, #10
 8018ad2:	8704      	strh	r4, [r0, #56]	; 0x38
 8018ad4:	8ec4      	ldrh	r4, [r0, #54]	; 0x36
 8018ad6:	4421      	add	r1, r4
 8018ad8:	b289      	uxth	r1, r1
 8018ada:	2909      	cmp	r1, #9
 8018adc:	bf88      	it	hi
 8018ade:	390a      	subhi	r1, #10
 8018ae0:	86c1      	strh	r1, [r0, #54]	; 0x36
 8018ae2:	b1ba      	cbz	r2, 8018b14 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x74>
 8018ae4:	3a01      	subs	r2, #1
 8018ae6:	8f01      	ldrh	r1, [r0, #56]	; 0x38
 8018ae8:	b292      	uxth	r2, r2
 8018aea:	2909      	cmp	r1, #9
 8018aec:	f833 4012 	ldrh.w	r4, [r3, r2, lsl #1]
 8018af0:	d903      	bls.n	8018afa <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x5a>
 8018af2:	4b11      	ldr	r3, [pc, #68]	; (8018b38 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x98>)
 8018af4:	21e6      	movs	r1, #230	; 0xe6
 8018af6:	4a11      	ldr	r2, [pc, #68]	; (8018b3c <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x9c>)
 8018af8:	e7da      	b.n	8018ab0 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x10>
 8018afa:	3101      	adds	r1, #1
 8018afc:	8701      	strh	r1, [r0, #56]	; 0x38
 8018afe:	8ec1      	ldrh	r1, [r0, #54]	; 0x36
 8018b00:	b901      	cbnz	r1, 8018b04 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x64>
 8018b02:	86c5      	strh	r5, [r0, #54]	; 0x36
 8018b04:	8ec1      	ldrh	r1, [r0, #54]	; 0x36
 8018b06:	3901      	subs	r1, #1
 8018b08:	b289      	uxth	r1, r1
 8018b0a:	86c1      	strh	r1, [r0, #54]	; 0x36
 8018b0c:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 8018b10:	844c      	strh	r4, [r1, #34]	; 0x22
 8018b12:	e7e6      	b.n	8018ae2 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x42>
 8018b14:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8018b18:	f7ff bf48 	b.w	80189ac <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 8018b1c:	0801faa4 	.word	0x0801faa4
 8018b20:	0801fb9a 	.word	0x0801fb9a
 8018b24:	0801faad 	.word	0x0801faad
 8018b28:	0801fae5 	.word	0x0801fae5
 8018b2c:	0801fc44 	.word	0x0801fc44
 8018b30:	0801faf3 	.word	0x0801faf3
 8018b34:	0801ff1b 	.word	0x0801ff1b
 8018b38:	0801faff 	.word	0x0801faff
 8018b3c:	0801fb12 	.word	0x0801fb12

08018b40 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>:
 8018b40:	3a01      	subs	r2, #1
 8018b42:	b570      	push	{r4, r5, r6, lr}
 8018b44:	b292      	uxth	r2, r2
 8018b46:	f64f 76ff 	movw	r6, #65535	; 0xffff
 8018b4a:	42b2      	cmp	r2, r6
 8018b4c:	d019      	beq.n	8018b82 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x42>
 8018b4e:	8c04      	ldrh	r4, [r0, #32]
 8018b50:	f831 5b02 	ldrh.w	r5, [r1], #2
 8018b54:	4294      	cmp	r4, r2
 8018b56:	d805      	bhi.n	8018b64 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x24>
 8018b58:	4b19      	ldr	r3, [pc, #100]	; (8018bc0 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x80>)
 8018b5a:	4a1a      	ldr	r2, [pc, #104]	; (8018bc4 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x84>)
 8018b5c:	21c5      	movs	r1, #197	; 0xc5
 8018b5e:	481a      	ldr	r0, [pc, #104]	; (8018bc8 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x88>)
 8018b60:	f002 fd64 	bl	801b62c <__assert_func>
 8018b64:	8bc4      	ldrh	r4, [r0, #30]
 8018b66:	4414      	add	r4, r2
 8018b68:	3a01      	subs	r2, #1
 8018b6a:	b2a4      	uxth	r4, r4
 8018b6c:	b292      	uxth	r2, r2
 8018b6e:	2c01      	cmp	r4, #1
 8018b70:	bf88      	it	hi
 8018b72:	3c02      	subhi	r4, #2
 8018b74:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 8018b78:	8b64      	ldrh	r4, [r4, #26]
 8018b7a:	42ac      	cmp	r4, r5
 8018b7c:	d0e5      	beq.n	8018b4a <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0xa>
 8018b7e:	2000      	movs	r0, #0
 8018b80:	bd70      	pop	{r4, r5, r6, pc}
 8018b82:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 8018b86:	2400      	movs	r4, #0
 8018b88:	4413      	add	r3, r2
 8018b8a:	b2a2      	uxth	r2, r4
 8018b8c:	429a      	cmp	r2, r3
 8018b8e:	da14      	bge.n	8018bba <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x7a>
 8018b90:	8f06      	ldrh	r6, [r0, #56]	; 0x38
 8018b92:	f831 5014 	ldrh.w	r5, [r1, r4, lsl #1]
 8018b96:	4296      	cmp	r6, r2
 8018b98:	d802      	bhi.n	8018ba0 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x60>
 8018b9a:	4b09      	ldr	r3, [pc, #36]	; (8018bc0 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x80>)
 8018b9c:	4a0b      	ldr	r2, [pc, #44]	; (8018bcc <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x8c>)
 8018b9e:	e7dd      	b.n	8018b5c <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x1c>
 8018ba0:	8ec6      	ldrh	r6, [r0, #54]	; 0x36
 8018ba2:	3401      	adds	r4, #1
 8018ba4:	4432      	add	r2, r6
 8018ba6:	b292      	uxth	r2, r2
 8018ba8:	2a09      	cmp	r2, #9
 8018baa:	bf88      	it	hi
 8018bac:	3a0a      	subhi	r2, #10
 8018bae:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 8018bb2:	8c52      	ldrh	r2, [r2, #34]	; 0x22
 8018bb4:	42aa      	cmp	r2, r5
 8018bb6:	d0e8      	beq.n	8018b8a <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x4a>
 8018bb8:	e7e1      	b.n	8018b7e <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x3e>
 8018bba:	2001      	movs	r0, #1
 8018bbc:	e7e0      	b.n	8018b80 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x40>
 8018bbe:	bf00      	nop
 8018bc0:	0801fae5 	.word	0x0801fae5
 8018bc4:	0801ff9f 	.word	0x0801ff9f
 8018bc8:	0801faad 	.word	0x0801faad
 8018bcc:	0801fc44 	.word	0x0801fc44

08018bd0 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>:
 8018bd0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018bd4:	4605      	mov	r5, r0
 8018bd6:	4616      	mov	r6, r2
 8018bd8:	1c8c      	adds	r4, r1, #2
 8018bda:	8809      	ldrh	r1, [r1, #0]
 8018bdc:	ea4f 3a11 	mov.w	sl, r1, lsr #12
 8018be0:	f834 301a 	ldrh.w	r3, [r4, sl, lsl #1]
 8018be4:	42b3      	cmp	r3, r6
 8018be6:	d124      	bne.n	8018c32 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x62>
 8018be8:	f3c1 2903 	ubfx	r9, r1, #8, #4
 8018bec:	f3c1 1803 	ubfx	r8, r1, #4, #4
 8018bf0:	f001 070f 	and.w	r7, r1, #15
 8018bf4:	4652      	mov	r2, sl
 8018bf6:	f8cd 8000 	str.w	r8, [sp]
 8018bfa:	464b      	mov	r3, r9
 8018bfc:	4621      	mov	r1, r4
 8018bfe:	4628      	mov	r0, r5
 8018c00:	f7ff ff9e 	bl	8018b40 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>
 8018c04:	4683      	mov	fp, r0
 8018c06:	b168      	cbz	r0, 8018c24 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x54>
 8018c08:	eb0a 0109 	add.w	r1, sl, r9
 8018c0c:	463a      	mov	r2, r7
 8018c0e:	4628      	mov	r0, r5
 8018c10:	4441      	add	r1, r8
 8018c12:	eb04 0341 	add.w	r3, r4, r1, lsl #1
 8018c16:	4649      	mov	r1, r9
 8018c18:	f7ff ff42 	bl	8018aa0 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>
 8018c1c:	4658      	mov	r0, fp
 8018c1e:	b003      	add	sp, #12
 8018c20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018c24:	eb07 010a 	add.w	r1, r7, sl
 8018c28:	4449      	add	r1, r9
 8018c2a:	4441      	add	r1, r8
 8018c2c:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 8018c30:	e7d2      	b.n	8018bd8 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x8>
 8018c32:	f04f 0b00 	mov.w	fp, #0
 8018c36:	e7f1      	b.n	8018c1c <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x4c>

08018c38 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>:
 8018c38:	b570      	push	{r4, r5, r6, lr}
 8018c3a:	8810      	ldrh	r0, [r2, #0]
 8018c3c:	4298      	cmp	r0, r3
 8018c3e:	d817      	bhi.n	8018c70 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 8018c40:	1e48      	subs	r0, r1, #1
 8018c42:	f832 0020 	ldrh.w	r0, [r2, r0, lsl #2]
 8018c46:	4298      	cmp	r0, r3
 8018c48:	d312      	bcc.n	8018c70 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 8018c4a:	2400      	movs	r4, #0
 8018c4c:	428c      	cmp	r4, r1
 8018c4e:	d20f      	bcs.n	8018c70 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 8018c50:	1860      	adds	r0, r4, r1
 8018c52:	1040      	asrs	r0, r0, #1
 8018c54:	f832 6020 	ldrh.w	r6, [r2, r0, lsl #2]
 8018c58:	0085      	lsls	r5, r0, #2
 8018c5a:	42b3      	cmp	r3, r6
 8018c5c:	d902      	bls.n	8018c64 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x2c>
 8018c5e:	3001      	adds	r0, #1
 8018c60:	b284      	uxth	r4, r0
 8018c62:	e7f3      	b.n	8018c4c <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 8018c64:	d201      	bcs.n	8018c6a <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x32>
 8018c66:	b281      	uxth	r1, r0
 8018c68:	e7f0      	b.n	8018c4c <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 8018c6a:	442a      	add	r2, r5
 8018c6c:	8850      	ldrh	r0, [r2, #2]
 8018c6e:	bd70      	pop	{r4, r5, r6, pc}
 8018c70:	2000      	movs	r0, #0
 8018c72:	e7fc      	b.n	8018c6e <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x36>

08018c74 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>:
 8018c74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018c78:	6c45      	ldr	r5, [r0, #68]	; 0x44
 8018c7a:	4604      	mov	r4, r0
 8018c7c:	260b      	movs	r6, #11
 8018c7e:	886f      	ldrh	r7, [r5, #2]
 8018c80:	087f      	lsrs	r7, r7, #1
 8018c82:	3e01      	subs	r6, #1
 8018c84:	d01b      	beq.n	8018cbe <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x4a>
 8018c86:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 8018c88:	b92b      	cbnz	r3, 8018c96 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x22>
 8018c8a:	4b0e      	ldr	r3, [pc, #56]	; (8018cc4 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x50>)
 8018c8c:	21c0      	movs	r1, #192	; 0xc0
 8018c8e:	4a0e      	ldr	r2, [pc, #56]	; (8018cc8 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x54>)
 8018c90:	480e      	ldr	r0, [pc, #56]	; (8018ccc <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x58>)
 8018c92:	f002 fccb 	bl	801b62c <__assert_func>
 8018c96:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8018c98:	462a      	mov	r2, r5
 8018c9a:	4639      	mov	r1, r7
 8018c9c:	4620      	mov	r0, r4
 8018c9e:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8018ca2:	f8b3 8022 	ldrh.w	r8, [r3, #34]	; 0x22
 8018ca6:	4643      	mov	r3, r8
 8018ca8:	f7ff ffc6 	bl	8018c38 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>
 8018cac:	b138      	cbz	r0, 8018cbe <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x4a>
 8018cae:	eb05 0140 	add.w	r1, r5, r0, lsl #1
 8018cb2:	4642      	mov	r2, r8
 8018cb4:	4620      	mov	r0, r4
 8018cb6:	f7ff ff8b 	bl	8018bd0 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>
 8018cba:	2800      	cmp	r0, #0
 8018cbc:	d1e1      	bne.n	8018c82 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0xe>
 8018cbe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018cc2:	bf00      	nop
 8018cc4:	0801faa4 	.word	0x0801faa4
 8018cc8:	0801fd16 	.word	0x0801fd16
 8018ccc:	0801faad 	.word	0x0801faad

08018cd0 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>:
 8018cd0:	b570      	push	{r4, r5, r6, lr}
 8018cd2:	694a      	ldr	r2, [r1, #20]
 8018cd4:	6a8d      	ldr	r5, [r1, #40]	; 0x28
 8018cd6:	684b      	ldr	r3, [r1, #4]
 8018cd8:	1b54      	subs	r4, r2, r5
 8018cda:	6ace      	ldr	r6, [r1, #44]	; 0x2c
 8018cdc:	f000 8106 	beq.w	8018eec <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x21c>
 8018ce0:	1b9b      	subs	r3, r3, r6
 8018ce2:	d003      	beq.n	8018cec <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 8018ce4:	4363      	muls	r3, r4
 8018ce6:	2210      	movs	r2, #16
 8018ce8:	fb93 f3f2 	sdiv	r3, r3, r2
 8018cec:	680c      	ldr	r4, [r1, #0]
 8018cee:	698a      	ldr	r2, [r1, #24]
 8018cf0:	1b65      	subs	r5, r4, r5
 8018cf2:	f000 80fd 	beq.w	8018ef0 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x220>
 8018cf6:	1b92      	subs	r2, r2, r6
 8018cf8:	d003      	beq.n	8018d02 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 8018cfa:	436a      	muls	r2, r5
 8018cfc:	2410      	movs	r4, #16
 8018cfe:	fb92 f2f4 	sdiv	r2, r2, r4
 8018d02:	1a9b      	subs	r3, r3, r2
 8018d04:	ed9f 4a89 	vldr	s8, [pc, #548]	; 8018f2c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x25c>
 8018d08:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8018d0c:	460a      	mov	r2, r1
 8018d0e:	ee07 3a90 	vmov	s15, r3
 8018d12:	f100 040c 	add.w	r4, r0, #12
 8018d16:	4603      	mov	r3, r0
 8018d18:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8018d1c:	ee67 7a84 	vmul.f32	s15, s15, s8
 8018d20:	ee87 3a27 	vdiv.f32	s6, s14, s15
 8018d24:	eeb1 6a43 	vneg.f32	s12, s6
 8018d28:	edd2 7a02 	vldr	s15, [r2, #8]
 8018d2c:	3214      	adds	r2, #20
 8018d2e:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8018d32:	ece3 6a01 	vstmia	r3!, {s13}
 8018d36:	429c      	cmp	r4, r3
 8018d38:	ed52 7a02 	vldr	s15, [r2, #-8]
 8018d3c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8018d40:	edc3 7a02 	vstr	s15, [r3, #8]
 8018d44:	ed52 7a01 	vldr	s15, [r2, #-4]
 8018d48:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8018d4c:	edc3 7a05 	vstr	s15, [r3, #20]
 8018d50:	d1ea      	bne.n	8018d28 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x58>
 8018d52:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8018d54:	698b      	ldr	r3, [r1, #24]
 8018d56:	edd0 4a02 	vldr	s9, [r0, #8]
 8018d5a:	1a9b      	subs	r3, r3, r2
 8018d5c:	edd0 3a00 	vldr	s7, [r0]
 8018d60:	edd0 6a01 	vldr	s13, [r0, #4]
 8018d64:	ee07 3a90 	vmov	s15, r3
 8018d68:	684b      	ldr	r3, [r1, #4]
 8018d6a:	ee76 6ae4 	vsub.f32	s13, s13, s9
 8018d6e:	ed90 5a05 	vldr	s10, [r0, #20]
 8018d72:	1a9b      	subs	r3, r3, r2
 8018d74:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8018d78:	ee73 4ae4 	vsub.f32	s9, s7, s9
 8018d7c:	ed90 2a03 	vldr	s4, [r0, #12]
 8018d80:	ee07 3a10 	vmov	s14, r3
 8018d84:	edd0 5a04 	vldr	s11, [r0, #16]
 8018d88:	ee67 7a84 	vmul.f32	s15, s15, s8
 8018d8c:	ed90 1a07 	vldr	s2, [r0, #28]
 8018d90:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8018d94:	edd0 2a06 	vldr	s5, [r0, #24]
 8018d98:	ee75 5ac5 	vsub.f32	s11, s11, s10
 8018d9c:	ee64 7ae7 	vnmul.f32	s15, s9, s15
 8018da0:	ee27 7a04 	vmul.f32	s14, s14, s8
 8018da4:	ee32 5a45 	vsub.f32	s10, s4, s10
 8018da8:	eee6 7a87 	vfma.f32	s15, s13, s14
 8018dac:	ee67 7a83 	vmul.f32	s15, s15, s6
 8018db0:	edc0 7a09 	vstr	s15, [r0, #36]	; 0x24
 8018db4:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 8018db6:	694a      	ldr	r2, [r1, #20]
 8018db8:	1b13      	subs	r3, r2, r4
 8018dba:	ee07 3a10 	vmov	s14, r3
 8018dbe:	680b      	ldr	r3, [r1, #0]
 8018dc0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8018dc4:	1b1b      	subs	r3, r3, r4
 8018dc6:	ee27 7a04 	vmul.f32	s14, s14, s8
 8018dca:	ee64 4ac7 	vnmul.f32	s9, s9, s14
 8018dce:	ee07 3a10 	vmov	s14, r3
 8018dd2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8018dd6:	ee27 7a04 	vmul.f32	s14, s14, s8
 8018dda:	eee6 4a87 	vfma.f32	s9, s13, s14
 8018dde:	ee64 4a86 	vmul.f32	s9, s9, s12
 8018de2:	edc0 4a0a 	vstr	s9, [r0, #40]	; 0x28
 8018de6:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8018de8:	698b      	ldr	r3, [r1, #24]
 8018dea:	1a9b      	subs	r3, r3, r2
 8018dec:	ee06 3a90 	vmov	s13, r3
 8018df0:	684b      	ldr	r3, [r1, #4]
 8018df2:	1a9b      	subs	r3, r3, r2
 8018df4:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8018df8:	ee07 3a10 	vmov	s14, r3
 8018dfc:	ee66 6a84 	vmul.f32	s13, s13, s8
 8018e00:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8018e04:	ee65 6a66 	vnmul.f32	s13, s10, s13
 8018e08:	ee27 7a04 	vmul.f32	s14, s14, s8
 8018e0c:	eee5 6a87 	vfma.f32	s13, s11, s14
 8018e10:	ee66 6a83 	vmul.f32	s13, s13, s6
 8018e14:	edc0 6a0b 	vstr	s13, [r0, #44]	; 0x2c
 8018e18:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 8018e1a:	694a      	ldr	r2, [r1, #20]
 8018e1c:	1b13      	subs	r3, r2, r4
 8018e1e:	ee07 3a10 	vmov	s14, r3
 8018e22:	680b      	ldr	r3, [r1, #0]
 8018e24:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8018e28:	1b1b      	subs	r3, r3, r4
 8018e2a:	ee27 7a04 	vmul.f32	s14, s14, s8
 8018e2e:	ee25 5a47 	vnmul.f32	s10, s10, s14
 8018e32:	ee07 3a10 	vmov	s14, r3
 8018e36:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8018e3a:	ee27 7a04 	vmul.f32	s14, s14, s8
 8018e3e:	eea5 5a87 	vfma.f32	s10, s11, s14
 8018e42:	edd0 5a08 	vldr	s11, [r0, #32]
 8018e46:	ee31 1a65 	vsub.f32	s2, s2, s11
 8018e4a:	ee72 5ae5 	vsub.f32	s11, s5, s11
 8018e4e:	ee25 5a06 	vmul.f32	s10, s10, s12
 8018e52:	ed80 5a0c 	vstr	s10, [r0, #48]	; 0x30
 8018e56:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8018e58:	698b      	ldr	r3, [r1, #24]
 8018e5a:	1a9b      	subs	r3, r3, r2
 8018e5c:	ee07 3a10 	vmov	s14, r3
 8018e60:	684b      	ldr	r3, [r1, #4]
 8018e62:	1a9b      	subs	r3, r3, r2
 8018e64:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8018e68:	ee01 3a90 	vmov	s3, r3
 8018e6c:	ee27 7a04 	vmul.f32	s14, s14, s8
 8018e70:	eef8 1ae1 	vcvt.f32.s32	s3, s3
 8018e74:	ee25 7ac7 	vnmul.f32	s14, s11, s14
 8018e78:	ee61 1a84 	vmul.f32	s3, s3, s8
 8018e7c:	eea1 7a21 	vfma.f32	s14, s2, s3
 8018e80:	ee27 7a03 	vmul.f32	s14, s14, s6
 8018e84:	ed80 7a0d 	vstr	s14, [r0, #52]	; 0x34
 8018e88:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 8018e8a:	694a      	ldr	r2, [r1, #20]
 8018e8c:	1b13      	subs	r3, r2, r4
 8018e8e:	ee03 3a10 	vmov	s6, r3
 8018e92:	680b      	ldr	r3, [r1, #0]
 8018e94:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 8018e98:	1b1b      	subs	r3, r3, r4
 8018e9a:	ee23 3a04 	vmul.f32	s6, s6, s8
 8018e9e:	ee65 5ac3 	vnmul.f32	s11, s11, s6
 8018ea2:	ee03 3a10 	vmov	s6, r3
 8018ea6:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 8018eaa:	ee23 4a04 	vmul.f32	s8, s6, s8
 8018eae:	eee1 5a04 	vfma.f32	s11, s2, s8
 8018eb2:	ee25 6a86 	vmul.f32	s12, s11, s12
 8018eb6:	ee62 5a67 	vnmul.f32	s11, s4, s15
 8018eba:	ed80 6a0e 	vstr	s12, [r0, #56]	; 0x38
 8018ebe:	eee3 5aa6 	vfma.f32	s11, s7, s13
 8018ec2:	eef5 5ac0 	vcmpe.f32	s11, #0.0
 8018ec6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018eca:	dd13      	ble.n	8018ef4 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x224>
 8018ecc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8018ed0:	ee62 7ae7 	vnmul.f32	s15, s5, s15
 8018ed4:	63c3      	str	r3, [r0, #60]	; 0x3c
 8018ed6:	eee3 7a87 	vfma.f32	s15, s7, s14
 8018eda:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8018ede:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018ee2:	dd15      	ble.n	8018f10 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x240>
 8018ee4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8018ee8:	6403      	str	r3, [r0, #64]	; 0x40
 8018eea:	bd70      	pop	{r4, r5, r6, pc}
 8018eec:	4623      	mov	r3, r4
 8018eee:	e6fd      	b.n	8018cec <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 8018ef0:	462a      	mov	r2, r5
 8018ef2:	e706      	b.n	8018d02 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 8018ef4:	d502      	bpl.n	8018efc <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x22c>
 8018ef6:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8018efa:	e7e9      	b.n	8018ed0 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x200>
 8018efc:	ee22 2a64 	vnmul.f32	s4, s4, s9
 8018f00:	eea3 2a85 	vfma.f32	s4, s7, s10
 8018f04:	eeb5 2ac0 	vcmpe.f32	s4, #0.0
 8018f08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018f0c:	dade      	bge.n	8018ecc <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1fc>
 8018f0e:	e7f2      	b.n	8018ef6 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x226>
 8018f10:	d502      	bpl.n	8018f18 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x248>
 8018f12:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8018f16:	e7e7      	b.n	8018ee8 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x218>
 8018f18:	ee62 4ae4 	vnmul.f32	s9, s5, s9
 8018f1c:	eee3 4a86 	vfma.f32	s9, s7, s12
 8018f20:	eef5 4ac0 	vcmpe.f32	s9, #0.0
 8018f24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018f28:	dadc      	bge.n	8018ee4 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x214>
 8018f2a:	e7f2      	b.n	8018f12 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x242>
 8018f2c:	3d800000 	.word	0x3d800000

08018f30 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>:
 8018f30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018f34:	2714      	movs	r7, #20
 8018f36:	435f      	muls	r7, r3
 8018f38:	eb02 0c07 	add.w	ip, r2, r7
 8018f3c:	f8dc 5004 	ldr.w	r5, [ip, #4]
 8018f40:	f115 0e0f 	adds.w	lr, r5, #15
 8018f44:	d433      	bmi.n	8018fae <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x7e>
 8018f46:	ea4f 1e2e 	mov.w	lr, lr, asr #4
 8018f4a:	9c08      	ldr	r4, [sp, #32]
 8018f4c:	2614      	movs	r6, #20
 8018f4e:	f8c0 e014 	str.w	lr, [r0, #20]
 8018f52:	4366      	muls	r6, r4
 8018f54:	eb02 0806 	add.w	r8, r2, r6
 8018f58:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8018f5c:	f115 040f 	adds.w	r4, r5, #15
 8018f60:	d431      	bmi.n	8018fc6 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x96>
 8018f62:	1124      	asrs	r4, r4, #4
 8018f64:	eba4 040e 	sub.w	r4, r4, lr
 8018f68:	6184      	str	r4, [r0, #24]
 8018f6a:	2c00      	cmp	r4, #0
 8018f6c:	f000 80aa 	beq.w	80190c4 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x194>
 8018f70:	f8dc 9004 	ldr.w	r9, [ip, #4]
 8018f74:	f8d8 4004 	ldr.w	r4, [r8, #4]
 8018f78:	5995      	ldr	r5, [r2, r6]
 8018f7a:	eba4 0809 	sub.w	r8, r4, r9
 8018f7e:	59d4      	ldr	r4, [r2, r7]
 8018f80:	eba5 0a04 	sub.w	sl, r5, r4
 8018f84:	ea4f 1608 	mov.w	r6, r8, lsl #4
 8018f88:	ea4f 150a 	mov.w	r5, sl, lsl #4
 8018f8c:	2e00      	cmp	r6, #0
 8018f8e:	fb0e fe05 	mul.w	lr, lr, r5
 8018f92:	fb0a ee19 	mls	lr, sl, r9, lr
 8018f96:	fb08 e404 	mla	r4, r8, r4, lr
 8018f9a:	f104 34ff 	add.w	r4, r4, #4294967295
 8018f9e:	4434      	add	r4, r6
 8018fa0:	dc1d      	bgt.n	8018fde <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0xae>
 8018fa2:	4b5b      	ldr	r3, [pc, #364]	; (8019110 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1e0>)
 8018fa4:	21f7      	movs	r1, #247	; 0xf7
 8018fa6:	4a5b      	ldr	r2, [pc, #364]	; (8019114 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1e4>)
 8018fa8:	485b      	ldr	r0, [pc, #364]	; (8019118 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1e8>)
 8018faa:	f002 fb3f 	bl	801b62c <__assert_func>
 8018fae:	2410      	movs	r4, #16
 8018fb0:	f1c5 0501 	rsb	r5, r5, #1
 8018fb4:	fb9e fef4 	sdiv	lr, lr, r4
 8018fb8:	f015 050f 	ands.w	r5, r5, #15
 8018fbc:	bf18      	it	ne
 8018fbe:	2501      	movne	r5, #1
 8018fc0:	ebae 0e05 	sub.w	lr, lr, r5
 8018fc4:	e7c1      	b.n	8018f4a <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1a>
 8018fc6:	f04f 0910 	mov.w	r9, #16
 8018fca:	f1c5 0501 	rsb	r5, r5, #1
 8018fce:	fb94 f4f9 	sdiv	r4, r4, r9
 8018fd2:	f015 050f 	ands.w	r5, r5, #15
 8018fd6:	bf18      	it	ne
 8018fd8:	2501      	movne	r5, #1
 8018fda:	1b64      	subs	r4, r4, r5
 8018fdc:	e7c2      	b.n	8018f64 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x34>
 8018fde:	2c00      	cmp	r4, #0
 8018fe0:	db72      	blt.n	80190c8 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x198>
 8018fe2:	fb94 fef6 	sdiv	lr, r4, r6
 8018fe6:	fb06 441e 	mls	r4, r6, lr, r4
 8018fea:	f8c0 e000 	str.w	lr, [r0]
 8018fee:	6104      	str	r4, [r0, #16]
 8018ff0:	2d00      	cmp	r5, #0
 8018ff2:	db7b      	blt.n	80190ec <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1bc>
 8018ff4:	fb95 f4f6 	sdiv	r4, r5, r6
 8018ff8:	fb06 5514 	mls	r5, r6, r4, r5
 8018ffc:	6044      	str	r4, [r0, #4]
 8018ffe:	6085      	str	r5, [r0, #8]
 8019000:	60c6      	str	r6, [r0, #12]
 8019002:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8019006:	f8dc 4004 	ldr.w	r4, [ip, #4]
 801900a:	6945      	ldr	r5, [r0, #20]
 801900c:	59d2      	ldr	r2, [r2, r7]
 801900e:	ebc4 1405 	rsb	r4, r4, r5, lsl #4
 8019012:	eddf 6a42 	vldr	s13, [pc, #264]	; 801911c <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1ec>
 8019016:	ed91 6a0a 	vldr	s12, [r1, #40]	; 0x28
 801901a:	ee07 4a10 	vmov	s14, r4
 801901e:	6804      	ldr	r4, [r0, #0]
 8019020:	ebc2 1204 	rsb	r2, r2, r4, lsl #4
 8019024:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8019028:	ee07 2a90 	vmov	s15, r2
 801902c:	ee27 7a26 	vmul.f32	s14, s14, s13
 8019030:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8019034:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8019038:	edd3 6a00 	vldr	s13, [r3]
 801903c:	eee6 6a07 	vfma.f32	s13, s12, s14
 8019040:	ed91 6a09 	vldr	s12, [r1, #36]	; 0x24
 8019044:	eee6 6a27 	vfma.f32	s13, s12, s15
 8019048:	edc0 6a07 	vstr	s13, [r0, #28]
 801904c:	edd0 6a01 	vldr	s13, [r0, #4]
 8019050:	edd1 5a09 	vldr	s11, [r1, #36]	; 0x24
 8019054:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8019058:	ed91 6a0a 	vldr	s12, [r1, #40]	; 0x28
 801905c:	eea6 6aa5 	vfma.f32	s12, s13, s11
 8019060:	ed80 6a08 	vstr	s12, [r0, #32]
 8019064:	6a4a      	ldr	r2, [r1, #36]	; 0x24
 8019066:	6242      	str	r2, [r0, #36]	; 0x24
 8019068:	edd1 5a0c 	vldr	s11, [r1, #48]	; 0x30
 801906c:	ed93 6a03 	vldr	s12, [r3, #12]
 8019070:	eea5 6a87 	vfma.f32	s12, s11, s14
 8019074:	edd1 5a0b 	vldr	s11, [r1, #44]	; 0x2c
 8019078:	eea5 6aa7 	vfma.f32	s12, s11, s15
 801907c:	ed80 6a0a 	vstr	s12, [r0, #40]	; 0x28
 8019080:	edd1 5a0b 	vldr	s11, [r1, #44]	; 0x2c
 8019084:	ed91 6a0c 	vldr	s12, [r1, #48]	; 0x30
 8019088:	eea6 6aa5 	vfma.f32	s12, s13, s11
 801908c:	ed80 6a0b 	vstr	s12, [r0, #44]	; 0x2c
 8019090:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8019092:	6302      	str	r2, [r0, #48]	; 0x30
 8019094:	ed93 6a06 	vldr	s12, [r3, #24]
 8019098:	edd1 5a0e 	vldr	s11, [r1, #56]	; 0x38
 801909c:	eea5 6a87 	vfma.f32	s12, s11, s14
 80190a0:	eeb0 7a46 	vmov.f32	s14, s12
 80190a4:	ed91 6a0d 	vldr	s12, [r1, #52]	; 0x34
 80190a8:	eea6 7a27 	vfma.f32	s14, s12, s15
 80190ac:	ed80 7a0d 	vstr	s14, [r0, #52]	; 0x34
 80190b0:	ed91 7a0d 	vldr	s14, [r1, #52]	; 0x34
 80190b4:	edd1 7a0e 	vldr	s15, [r1, #56]	; 0x38
 80190b8:	eee6 7a87 	vfma.f32	s15, s13, s14
 80190bc:	edc0 7a0e 	vstr	s15, [r0, #56]	; 0x38
 80190c0:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 80190c2:	63c3      	str	r3, [r0, #60]	; 0x3c
 80190c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80190c8:	4264      	negs	r4, r4
 80190ca:	fb94 fef6 	sdiv	lr, r4, r6
 80190ce:	f1ce 0800 	rsb	r8, lr, #0
 80190d2:	fb06 441e 	mls	r4, r6, lr, r4
 80190d6:	f8c0 8000 	str.w	r8, [r0]
 80190da:	6104      	str	r4, [r0, #16]
 80190dc:	2c00      	cmp	r4, #0
 80190de:	d087      	beq.n	8018ff0 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0xc0>
 80190e0:	ea6f 0e0e 	mvn.w	lr, lr
 80190e4:	1b34      	subs	r4, r6, r4
 80190e6:	f8c0 e000 	str.w	lr, [r0]
 80190ea:	e780      	b.n	8018fee <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0xbe>
 80190ec:	426d      	negs	r5, r5
 80190ee:	fb95 f4f6 	sdiv	r4, r5, r6
 80190f2:	f1c4 0e00 	rsb	lr, r4, #0
 80190f6:	fb06 5514 	mls	r5, r6, r4, r5
 80190fa:	f8c0 e004 	str.w	lr, [r0, #4]
 80190fe:	6085      	str	r5, [r0, #8]
 8019100:	2d00      	cmp	r5, #0
 8019102:	f43f af7d 	beq.w	8019000 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0xd0>
 8019106:	43e4      	mvns	r4, r4
 8019108:	1b75      	subs	r5, r6, r5
 801910a:	6044      	str	r4, [r0, #4]
 801910c:	e777      	b.n	8018ffe <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0xce>
 801910e:	bf00      	nop
 8019110:	08020070 	.word	0x08020070
 8019114:	080200af 	.word	0x080200af
 8019118:	08020080 	.word	0x08020080
 801911c:	3d800000 	.word	0x3d800000

08019120 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>:
 8019120:	4b06      	ldr	r3, [pc, #24]	; (801913c <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x1c>)
 8019122:	881a      	ldrh	r2, [r3, #0]
 8019124:	4282      	cmp	r2, r0
 8019126:	d807      	bhi.n	8019138 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x18>
 8019128:	4b05      	ldr	r3, [pc, #20]	; (8019140 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x20>)
 801912a:	881b      	ldrh	r3, [r3, #0]
 801912c:	4413      	add	r3, r2
 801912e:	4298      	cmp	r0, r3
 8019130:	bfac      	ite	ge
 8019132:	2000      	movge	r0, #0
 8019134:	2001      	movlt	r0, #1
 8019136:	4770      	bx	lr
 8019138:	2000      	movs	r0, #0
 801913a:	4770      	bx	lr
 801913c:	20006e44 	.word	0x20006e44
 8019140:	20006e46 	.word	0x20006e46

08019144 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>:
 8019144:	b508      	push	{r3, lr}
 8019146:	4601      	mov	r1, r0
 8019148:	f7ff ffea 	bl	8019120 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>
 801914c:	b118      	cbz	r0, 8019156 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x12>
 801914e:	4b02      	ldr	r3, [pc, #8]	; (8019158 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x14>)
 8019150:	681b      	ldr	r3, [r3, #0]
 8019152:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 8019156:	bd08      	pop	{r3, pc}
 8019158:	20006e3c 	.word	0x20006e3c

0801915c <_ZNK8touchgfx6Bitmap8getWidthEv>:
 801915c:	b508      	push	{r3, lr}
 801915e:	4b17      	ldr	r3, [pc, #92]	; (80191bc <_ZNK8touchgfx6Bitmap8getWidthEv+0x60>)
 8019160:	6819      	ldr	r1, [r3, #0]
 8019162:	b931      	cbnz	r1, 8019172 <_ZNK8touchgfx6Bitmap8getWidthEv+0x16>
 8019164:	4b16      	ldr	r3, [pc, #88]	; (80191c0 <_ZNK8touchgfx6Bitmap8getWidthEv+0x64>)
 8019166:	f240 4184 	movw	r1, #1156	; 0x484
 801916a:	4a16      	ldr	r2, [pc, #88]	; (80191c4 <_ZNK8touchgfx6Bitmap8getWidthEv+0x68>)
 801916c:	4816      	ldr	r0, [pc, #88]	; (80191c8 <_ZNK8touchgfx6Bitmap8getWidthEv+0x6c>)
 801916e:	f002 fa5d 	bl	801b62c <__assert_func>
 8019172:	4a16      	ldr	r2, [pc, #88]	; (80191cc <_ZNK8touchgfx6Bitmap8getWidthEv+0x70>)
 8019174:	8803      	ldrh	r3, [r0, #0]
 8019176:	8812      	ldrh	r2, [r2, #0]
 8019178:	4293      	cmp	r3, r2
 801917a:	d204      	bcs.n	8019186 <_ZNK8touchgfx6Bitmap8getWidthEv+0x2a>
 801917c:	2214      	movs	r2, #20
 801917e:	fb02 1303 	mla	r3, r2, r3, r1
 8019182:	8918      	ldrh	r0, [r3, #8]
 8019184:	bd08      	pop	{r3, pc}
 8019186:	4912      	ldr	r1, [pc, #72]	; (80191d0 <_ZNK8touchgfx6Bitmap8getWidthEv+0x74>)
 8019188:	8809      	ldrh	r1, [r1, #0]
 801918a:	4411      	add	r1, r2
 801918c:	428b      	cmp	r3, r1
 801918e:	da06      	bge.n	801919e <_ZNK8touchgfx6Bitmap8getWidthEv+0x42>
 8019190:	1a9b      	subs	r3, r3, r2
 8019192:	4a10      	ldr	r2, [pc, #64]	; (80191d4 <_ZNK8touchgfx6Bitmap8getWidthEv+0x78>)
 8019194:	210e      	movs	r1, #14
 8019196:	6812      	ldr	r2, [r2, #0]
 8019198:	fb01 2303 	mla	r3, r1, r3, r2
 801919c:	e7f1      	b.n	8019182 <_ZNK8touchgfx6Bitmap8getWidthEv+0x26>
 801919e:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80191a2:	4293      	cmp	r3, r2
 80191a4:	d107      	bne.n	80191b6 <_ZNK8touchgfx6Bitmap8getWidthEv+0x5a>
 80191a6:	4b0c      	ldr	r3, [pc, #48]	; (80191d8 <_ZNK8touchgfx6Bitmap8getWidthEv+0x7c>)
 80191a8:	781b      	ldrb	r3, [r3, #0]
 80191aa:	b913      	cbnz	r3, 80191b2 <_ZNK8touchgfx6Bitmap8getWidthEv+0x56>
 80191ac:	4b0b      	ldr	r3, [pc, #44]	; (80191dc <_ZNK8touchgfx6Bitmap8getWidthEv+0x80>)
 80191ae:	8818      	ldrh	r0, [r3, #0]
 80191b0:	e7e8      	b.n	8019184 <_ZNK8touchgfx6Bitmap8getWidthEv+0x28>
 80191b2:	4b0b      	ldr	r3, [pc, #44]	; (80191e0 <_ZNK8touchgfx6Bitmap8getWidthEv+0x84>)
 80191b4:	e7fb      	b.n	80191ae <_ZNK8touchgfx6Bitmap8getWidthEv+0x52>
 80191b6:	2000      	movs	r0, #0
 80191b8:	e7e4      	b.n	8019184 <_ZNK8touchgfx6Bitmap8getWidthEv+0x28>
 80191ba:	bf00      	nop
 80191bc:	20006e48 	.word	0x20006e48
 80191c0:	0802014d 	.word	0x0802014d
 80191c4:	080201f0 	.word	0x080201f0
 80191c8:	08020128 	.word	0x08020128
 80191cc:	20006e44 	.word	0x20006e44
 80191d0:	20006e46 	.word	0x20006e46
 80191d4:	20006e40 	.word	0x20006e40
 80191d8:	20006dee 	.word	0x20006dee
 80191dc:	20006df0 	.word	0x20006df0
 80191e0:	20006df2 	.word	0x20006df2

080191e4 <_ZNK8touchgfx6Bitmap9getHeightEv>:
 80191e4:	b508      	push	{r3, lr}
 80191e6:	4b17      	ldr	r3, [pc, #92]	; (8019244 <_ZNK8touchgfx6Bitmap9getHeightEv+0x60>)
 80191e8:	6819      	ldr	r1, [r3, #0]
 80191ea:	b931      	cbnz	r1, 80191fa <_ZNK8touchgfx6Bitmap9getHeightEv+0x16>
 80191ec:	4b16      	ldr	r3, [pc, #88]	; (8019248 <_ZNK8touchgfx6Bitmap9getHeightEv+0x64>)
 80191ee:	f44f 6193 	mov.w	r1, #1176	; 0x498
 80191f2:	4a16      	ldr	r2, [pc, #88]	; (801924c <_ZNK8touchgfx6Bitmap9getHeightEv+0x68>)
 80191f4:	4816      	ldr	r0, [pc, #88]	; (8019250 <_ZNK8touchgfx6Bitmap9getHeightEv+0x6c>)
 80191f6:	f002 fa19 	bl	801b62c <__assert_func>
 80191fa:	4a16      	ldr	r2, [pc, #88]	; (8019254 <_ZNK8touchgfx6Bitmap9getHeightEv+0x70>)
 80191fc:	8803      	ldrh	r3, [r0, #0]
 80191fe:	8812      	ldrh	r2, [r2, #0]
 8019200:	4293      	cmp	r3, r2
 8019202:	d204      	bcs.n	801920e <_ZNK8touchgfx6Bitmap9getHeightEv+0x2a>
 8019204:	2214      	movs	r2, #20
 8019206:	fb02 1303 	mla	r3, r2, r3, r1
 801920a:	8958      	ldrh	r0, [r3, #10]
 801920c:	bd08      	pop	{r3, pc}
 801920e:	4912      	ldr	r1, [pc, #72]	; (8019258 <_ZNK8touchgfx6Bitmap9getHeightEv+0x74>)
 8019210:	8809      	ldrh	r1, [r1, #0]
 8019212:	4411      	add	r1, r2
 8019214:	428b      	cmp	r3, r1
 8019216:	da06      	bge.n	8019226 <_ZNK8touchgfx6Bitmap9getHeightEv+0x42>
 8019218:	1a9b      	subs	r3, r3, r2
 801921a:	4a10      	ldr	r2, [pc, #64]	; (801925c <_ZNK8touchgfx6Bitmap9getHeightEv+0x78>)
 801921c:	210e      	movs	r1, #14
 801921e:	6812      	ldr	r2, [r2, #0]
 8019220:	fb01 2303 	mla	r3, r1, r3, r2
 8019224:	e7f1      	b.n	801920a <_ZNK8touchgfx6Bitmap9getHeightEv+0x26>
 8019226:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801922a:	4293      	cmp	r3, r2
 801922c:	d107      	bne.n	801923e <_ZNK8touchgfx6Bitmap9getHeightEv+0x5a>
 801922e:	4b0c      	ldr	r3, [pc, #48]	; (8019260 <_ZNK8touchgfx6Bitmap9getHeightEv+0x7c>)
 8019230:	781b      	ldrb	r3, [r3, #0]
 8019232:	b913      	cbnz	r3, 801923a <_ZNK8touchgfx6Bitmap9getHeightEv+0x56>
 8019234:	4b0b      	ldr	r3, [pc, #44]	; (8019264 <_ZNK8touchgfx6Bitmap9getHeightEv+0x80>)
 8019236:	8818      	ldrh	r0, [r3, #0]
 8019238:	e7e8      	b.n	801920c <_ZNK8touchgfx6Bitmap9getHeightEv+0x28>
 801923a:	4b0b      	ldr	r3, [pc, #44]	; (8019268 <_ZNK8touchgfx6Bitmap9getHeightEv+0x84>)
 801923c:	e7fb      	b.n	8019236 <_ZNK8touchgfx6Bitmap9getHeightEv+0x52>
 801923e:	2000      	movs	r0, #0
 8019240:	e7e4      	b.n	801920c <_ZNK8touchgfx6Bitmap9getHeightEv+0x28>
 8019242:	bf00      	nop
 8019244:	20006e48 	.word	0x20006e48
 8019248:	0802014d 	.word	0x0802014d
 801924c:	0802021c 	.word	0x0802021c
 8019250:	08020128 	.word	0x08020128
 8019254:	20006e44 	.word	0x20006e44
 8019258:	20006e46 	.word	0x20006e46
 801925c:	20006e40 	.word	0x20006e40
 8019260:	20006dee 	.word	0x20006dee
 8019264:	20006df2 	.word	0x20006df2
 8019268:	20006df0 	.word	0x20006df0

0801926c <_ZNK8touchgfx6Bitmap12getSolidRectEv>:
 801926c:	4b23      	ldr	r3, [pc, #140]	; (80192fc <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x90>)
 801926e:	b510      	push	{r4, lr}
 8019270:	681c      	ldr	r4, [r3, #0]
 8019272:	b934      	cbnz	r4, 8019282 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x16>
 8019274:	4b22      	ldr	r3, [pc, #136]	; (8019300 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x94>)
 8019276:	f240 41ac 	movw	r1, #1196	; 0x4ac
 801927a:	4a22      	ldr	r2, [pc, #136]	; (8019304 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x98>)
 801927c:	4822      	ldr	r0, [pc, #136]	; (8019308 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x9c>)
 801927e:	f002 f9d5 	bl	801b62c <__assert_func>
 8019282:	4a22      	ldr	r2, [pc, #136]	; (801930c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xa0>)
 8019284:	880b      	ldrh	r3, [r1, #0]
 8019286:	8812      	ldrh	r2, [r2, #0]
 8019288:	4293      	cmp	r3, r2
 801928a:	d211      	bcs.n	80192b0 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x44>
 801928c:	2214      	movs	r2, #20
 801928e:	fb02 4303 	mla	r3, r2, r3, r4
 8019292:	f9b3 400c 	ldrsh.w	r4, [r3, #12]
 8019296:	f9b3 100e 	ldrsh.w	r1, [r3, #14]
 801929a:	8a1a      	ldrh	r2, [r3, #16]
 801929c:	8a5b      	ldrh	r3, [r3, #18]
 801929e:	f3c2 020c 	ubfx	r2, r2, #0, #13
 80192a2:	8004      	strh	r4, [r0, #0]
 80192a4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80192a8:	8041      	strh	r1, [r0, #2]
 80192aa:	8082      	strh	r2, [r0, #4]
 80192ac:	80c3      	strh	r3, [r0, #6]
 80192ae:	e00e      	b.n	80192ce <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x62>
 80192b0:	4917      	ldr	r1, [pc, #92]	; (8019310 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xa4>)
 80192b2:	8809      	ldrh	r1, [r1, #0]
 80192b4:	4411      	add	r1, r2
 80192b6:	428b      	cmp	r3, r1
 80192b8:	da0a      	bge.n	80192d0 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x64>
 80192ba:	1a9b      	subs	r3, r3, r2
 80192bc:	4a15      	ldr	r2, [pc, #84]	; (8019314 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xa8>)
 80192be:	210e      	movs	r1, #14
 80192c0:	6812      	ldr	r2, [r2, #0]
 80192c2:	fb01 2303 	mla	r3, r1, r3, r2
 80192c6:	681a      	ldr	r2, [r3, #0]
 80192c8:	6002      	str	r2, [r0, #0]
 80192ca:	685a      	ldr	r2, [r3, #4]
 80192cc:	6042      	str	r2, [r0, #4]
 80192ce:	bd10      	pop	{r4, pc}
 80192d0:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80192d4:	4293      	cmp	r3, r2
 80192d6:	d10b      	bne.n	80192f0 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x84>
 80192d8:	4b0f      	ldr	r3, [pc, #60]	; (8019318 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xac>)
 80192da:	f9b3 1000 	ldrsh.w	r1, [r3]
 80192de:	4b0f      	ldr	r3, [pc, #60]	; (801931c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xb0>)
 80192e0:	8081      	strh	r1, [r0, #4]
 80192e2:	f9b3 2000 	ldrsh.w	r2, [r3]
 80192e6:	2300      	movs	r3, #0
 80192e8:	80c2      	strh	r2, [r0, #6]
 80192ea:	8003      	strh	r3, [r0, #0]
 80192ec:	8043      	strh	r3, [r0, #2]
 80192ee:	e7ee      	b.n	80192ce <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x62>
 80192f0:	2300      	movs	r3, #0
 80192f2:	8003      	strh	r3, [r0, #0]
 80192f4:	8043      	strh	r3, [r0, #2]
 80192f6:	8083      	strh	r3, [r0, #4]
 80192f8:	e7d8      	b.n	80192ac <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x40>
 80192fa:	bf00      	nop
 80192fc:	20006e48 	.word	0x20006e48
 8019300:	0802014d 	.word	0x0802014d
 8019304:	08020189 	.word	0x08020189
 8019308:	08020128 	.word	0x08020128
 801930c:	20006e44 	.word	0x20006e44
 8019310:	20006e46 	.word	0x20006e46
 8019314:	20006e40 	.word	0x20006e40
 8019318:	20006dea 	.word	0x20006dea
 801931c:	20006dec 	.word	0x20006dec

08019320 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>:
 8019320:	4b18      	ldr	r3, [pc, #96]	; (8019384 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x64>)
 8019322:	681b      	ldr	r3, [r3, #0]
 8019324:	b34b      	cbz	r3, 801937a <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5a>
 8019326:	4a18      	ldr	r2, [pc, #96]	; (8019388 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x68>)
 8019328:	8800      	ldrh	r0, [r0, #0]
 801932a:	8812      	ldrh	r2, [r2, #0]
 801932c:	4290      	cmp	r0, r2
 801932e:	d211      	bcs.n	8019354 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x34>
 8019330:	2214      	movs	r2, #20
 8019332:	fb02 3300 	mla	r3, r2, r0, r3
 8019336:	8a1a      	ldrh	r2, [r3, #16]
 8019338:	8919      	ldrh	r1, [r3, #8]
 801933a:	f3c2 020c 	ubfx	r2, r2, #0, #13
 801933e:	428a      	cmp	r2, r1
 8019340:	db1d      	blt.n	801937e <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5e>
 8019342:	8a58      	ldrh	r0, [r3, #18]
 8019344:	f3c0 000c 	ubfx	r0, r0, #0, #13
 8019348:	895b      	ldrh	r3, [r3, #10]
 801934a:	4298      	cmp	r0, r3
 801934c:	bfac      	ite	ge
 801934e:	2000      	movge	r0, #0
 8019350:	2001      	movlt	r0, #1
 8019352:	4770      	bx	lr
 8019354:	4b0d      	ldr	r3, [pc, #52]	; (801938c <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x6c>)
 8019356:	881b      	ldrh	r3, [r3, #0]
 8019358:	4413      	add	r3, r2
 801935a:	4298      	cmp	r0, r3
 801935c:	da0d      	bge.n	801937a <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5a>
 801935e:	4b0c      	ldr	r3, [pc, #48]	; (8019390 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x70>)
 8019360:	1a80      	subs	r0, r0, r2
 8019362:	220e      	movs	r2, #14
 8019364:	681b      	ldr	r3, [r3, #0]
 8019366:	fb02 3300 	mla	r3, r2, r0, r3
 801936a:	f9b3 1004 	ldrsh.w	r1, [r3, #4]
 801936e:	891a      	ldrh	r2, [r3, #8]
 8019370:	4291      	cmp	r1, r2
 8019372:	db04      	blt.n	801937e <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5e>
 8019374:	f9b3 0006 	ldrsh.w	r0, [r3, #6]
 8019378:	e7e6      	b.n	8019348 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x28>
 801937a:	2000      	movs	r0, #0
 801937c:	4770      	bx	lr
 801937e:	2001      	movs	r0, #1
 8019380:	4770      	bx	lr
 8019382:	bf00      	nop
 8019384:	20006e48 	.word	0x20006e48
 8019388:	20006e44 	.word	0x20006e44
 801938c:	20006e46 	.word	0x20006e46
 8019390:	20006e40 	.word	0x20006e40

08019394 <_ZNK8touchgfx6Bitmap7getDataEv>:
 8019394:	b508      	push	{r3, lr}
 8019396:	4b12      	ldr	r3, [pc, #72]	; (80193e0 <_ZNK8touchgfx6Bitmap7getDataEv+0x4c>)
 8019398:	6819      	ldr	r1, [r3, #0]
 801939a:	b931      	cbnz	r1, 80193aa <_ZNK8touchgfx6Bitmap7getDataEv+0x16>
 801939c:	4b11      	ldr	r3, [pc, #68]	; (80193e4 <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 801939e:	f44f 619a 	mov.w	r1, #1232	; 0x4d0
 80193a2:	4a11      	ldr	r2, [pc, #68]	; (80193e8 <_ZNK8touchgfx6Bitmap7getDataEv+0x54>)
 80193a4:	4811      	ldr	r0, [pc, #68]	; (80193ec <_ZNK8touchgfx6Bitmap7getDataEv+0x58>)
 80193a6:	f002 f941 	bl	801b62c <__assert_func>
 80193aa:	8803      	ldrh	r3, [r0, #0]
 80193ac:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80193b0:	4293      	cmp	r3, r2
 80193b2:	d012      	beq.n	80193da <_ZNK8touchgfx6Bitmap7getDataEv+0x46>
 80193b4:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80193b8:	4293      	cmp	r3, r2
 80193ba:	d103      	bne.n	80193c4 <_ZNK8touchgfx6Bitmap7getDataEv+0x30>
 80193bc:	4b0c      	ldr	r3, [pc, #48]	; (80193f0 <_ZNK8touchgfx6Bitmap7getDataEv+0x5c>)
 80193be:	681b      	ldr	r3, [r3, #0]
 80193c0:	6c58      	ldr	r0, [r3, #68]	; 0x44
 80193c2:	bd08      	pop	{r3, pc}
 80193c4:	4a0b      	ldr	r2, [pc, #44]	; (80193f4 <_ZNK8touchgfx6Bitmap7getDataEv+0x60>)
 80193c6:	6812      	ldr	r2, [r2, #0]
 80193c8:	b11a      	cbz	r2, 80193d2 <_ZNK8touchgfx6Bitmap7getDataEv+0x3e>
 80193ca:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80193ce:	2800      	cmp	r0, #0
 80193d0:	d1f7      	bne.n	80193c2 <_ZNK8touchgfx6Bitmap7getDataEv+0x2e>
 80193d2:	2214      	movs	r2, #20
 80193d4:	4353      	muls	r3, r2
 80193d6:	58c8      	ldr	r0, [r1, r3]
 80193d8:	e7f3      	b.n	80193c2 <_ZNK8touchgfx6Bitmap7getDataEv+0x2e>
 80193da:	2000      	movs	r0, #0
 80193dc:	e7f1      	b.n	80193c2 <_ZNK8touchgfx6Bitmap7getDataEv+0x2e>
 80193de:	bf00      	nop
 80193e0:	20006e48 	.word	0x20006e48
 80193e4:	0802014d 	.word	0x0802014d
 80193e8:	080201bf 	.word	0x080201bf
 80193ec:	08020128 	.word	0x08020128
 80193f0:	20006df8 	.word	0x20006df8
 80193f4:	20006e3c 	.word	0x20006e3c

080193f8 <_ZNK8touchgfx6Bitmap12getExtraDataEv>:
 80193f8:	8802      	ldrh	r2, [r0, #0]
 80193fa:	f64f 73fd 	movw	r3, #65533	; 0xfffd
 80193fe:	429a      	cmp	r2, r3
 8019400:	d845      	bhi.n	801948e <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x96>
 8019402:	4b24      	ldr	r3, [pc, #144]	; (8019494 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
 8019404:	8818      	ldrh	r0, [r3, #0]
 8019406:	4282      	cmp	r2, r0
 8019408:	d221      	bcs.n	801944e <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x56>
 801940a:	4b23      	ldr	r3, [pc, #140]	; (8019498 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa0>)
 801940c:	6819      	ldr	r1, [r3, #0]
 801940e:	2314      	movs	r3, #20
 8019410:	fb03 1302 	mla	r3, r3, r2, r1
 8019414:	6858      	ldr	r0, [r3, #4]
 8019416:	2800      	cmp	r0, #0
 8019418:	d03a      	beq.n	8019490 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>
 801941a:	4920      	ldr	r1, [pc, #128]	; (801949c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa4>)
 801941c:	6809      	ldr	r1, [r1, #0]
 801941e:	2900      	cmp	r1, #0
 8019420:	d036      	beq.n	8019490 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>
 8019422:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8019426:	2900      	cmp	r1, #0
 8019428:	d032      	beq.n	8019490 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>
 801942a:	891a      	ldrh	r2, [r3, #8]
 801942c:	8958      	ldrh	r0, [r3, #10]
 801942e:	4350      	muls	r0, r2
 8019430:	7c5a      	ldrb	r2, [r3, #17]
 8019432:	7cdb      	ldrb	r3, [r3, #19]
 8019434:	0952      	lsrs	r2, r2, #5
 8019436:	f3c3 1342 	ubfx	r3, r3, #5, #3
 801943a:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 801943e:	2b0b      	cmp	r3, #11
 8019440:	bf18      	it	ne
 8019442:	0040      	lslne	r0, r0, #1
 8019444:	3003      	adds	r0, #3
 8019446:	f020 0003 	bic.w	r0, r0, #3
 801944a:	4408      	add	r0, r1
 801944c:	4770      	bx	lr
 801944e:	4b14      	ldr	r3, [pc, #80]	; (80194a0 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa8>)
 8019450:	881b      	ldrh	r3, [r3, #0]
 8019452:	4403      	add	r3, r0
 8019454:	429a      	cmp	r2, r3
 8019456:	da1a      	bge.n	801948e <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x96>
 8019458:	4b12      	ldr	r3, [pc, #72]	; (80194a4 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xac>)
 801945a:	1a10      	subs	r0, r2, r0
 801945c:	210e      	movs	r1, #14
 801945e:	681b      	ldr	r3, [r3, #0]
 8019460:	fb01 3000 	mla	r0, r1, r0, r3
 8019464:	7b03      	ldrb	r3, [r0, #12]
 8019466:	f003 031f 	and.w	r3, r3, #31
 801946a:	2b0b      	cmp	r3, #11
 801946c:	d10b      	bne.n	8019486 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 801946e:	8903      	ldrh	r3, [r0, #8]
 8019470:	8940      	ldrh	r0, [r0, #10]
 8019472:	4358      	muls	r0, r3
 8019474:	4b09      	ldr	r3, [pc, #36]	; (801949c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa4>)
 8019476:	3003      	adds	r0, #3
 8019478:	6819      	ldr	r1, [r3, #0]
 801947a:	f020 0303 	bic.w	r3, r0, #3
 801947e:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
 8019482:	4418      	add	r0, r3
 8019484:	4770      	bx	lr
 8019486:	2b0d      	cmp	r3, #13
 8019488:	d101      	bne.n	801948e <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x96>
 801948a:	300d      	adds	r0, #13
 801948c:	4770      	bx	lr
 801948e:	2000      	movs	r0, #0
 8019490:	4770      	bx	lr
 8019492:	bf00      	nop
 8019494:	20006e44 	.word	0x20006e44
 8019498:	20006e48 	.word	0x20006e48
 801949c:	20006e3c 	.word	0x20006e3c
 80194a0:	20006e46 	.word	0x20006e46
 80194a4:	20006e40 	.word	0x20006e40

080194a8 <_ZNK8touchgfx6Bitmap9getFormatEv>:
 80194a8:	4b17      	ldr	r3, [pc, #92]	; (8019508 <_ZNK8touchgfx6Bitmap9getFormatEv+0x60>)
 80194aa:	b510      	push	{r4, lr}
 80194ac:	6819      	ldr	r1, [r3, #0]
 80194ae:	8803      	ldrh	r3, [r0, #0]
 80194b0:	b1e9      	cbz	r1, 80194ee <_ZNK8touchgfx6Bitmap9getFormatEv+0x46>
 80194b2:	4a16      	ldr	r2, [pc, #88]	; (801950c <_ZNK8touchgfx6Bitmap9getFormatEv+0x64>)
 80194b4:	8812      	ldrh	r2, [r2, #0]
 80194b6:	429a      	cmp	r2, r3
 80194b8:	d90a      	bls.n	80194d0 <_ZNK8touchgfx6Bitmap9getFormatEv+0x28>
 80194ba:	2214      	movs	r2, #20
 80194bc:	fb02 1303 	mla	r3, r2, r3, r1
 80194c0:	7c58      	ldrb	r0, [r3, #17]
 80194c2:	0942      	lsrs	r2, r0, #5
 80194c4:	7cd8      	ldrb	r0, [r3, #19]
 80194c6:	f3c0 1042 	ubfx	r0, r0, #5, #3
 80194ca:	ea40 00c2 	orr.w	r0, r0, r2, lsl #3
 80194ce:	bd10      	pop	{r4, pc}
 80194d0:	490f      	ldr	r1, [pc, #60]	; (8019510 <_ZNK8touchgfx6Bitmap9getFormatEv+0x68>)
 80194d2:	8809      	ldrh	r1, [r1, #0]
 80194d4:	4411      	add	r1, r2
 80194d6:	428b      	cmp	r3, r1
 80194d8:	da09      	bge.n	80194ee <_ZNK8touchgfx6Bitmap9getFormatEv+0x46>
 80194da:	1a9b      	subs	r3, r3, r2
 80194dc:	4a0d      	ldr	r2, [pc, #52]	; (8019514 <_ZNK8touchgfx6Bitmap9getFormatEv+0x6c>)
 80194de:	210e      	movs	r1, #14
 80194e0:	6812      	ldr	r2, [r2, #0]
 80194e2:	fb01 2303 	mla	r3, r1, r3, r2
 80194e6:	7b18      	ldrb	r0, [r3, #12]
 80194e8:	f000 001f 	and.w	r0, r0, #31
 80194ec:	e7ef      	b.n	80194ce <_ZNK8touchgfx6Bitmap9getFormatEv+0x26>
 80194ee:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80194f2:	4293      	cmp	r3, r2
 80194f4:	d106      	bne.n	8019504 <_ZNK8touchgfx6Bitmap9getFormatEv+0x5c>
 80194f6:	f7f9 fbd9 	bl	8012cac <_ZN8touchgfx3HAL3lcdEv>
 80194fa:	6803      	ldr	r3, [r0, #0]
 80194fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019500:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019502:	4718      	bx	r3
 8019504:	2000      	movs	r0, #0
 8019506:	e7e2      	b.n	80194ce <_ZNK8touchgfx6Bitmap9getFormatEv+0x26>
 8019508:	20006e48 	.word	0x20006e48
 801950c:	20006e44 	.word	0x20006e44
 8019510:	20006e46 	.word	0x20006e46
 8019514:	20006e40 	.word	0x20006e40

08019518 <_ZNK8touchgfx8LCD16bpp8bitDepthEv>:
 8019518:	2010      	movs	r0, #16
 801951a:	4770      	bx	lr

0801951c <_ZNK8touchgfx8LCD16bpp17framebufferFormatEv>:
 801951c:	2000      	movs	r0, #0
 801951e:	4770      	bx	lr

08019520 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 8019520:	2bff      	cmp	r3, #255	; 0xff
 8019522:	d050      	beq.n	80195c6 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa6>
 8019524:	2a0b      	cmp	r2, #11
 8019526:	d04a      	beq.n	80195be <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9e>
 8019528:	d80e      	bhi.n	8019548 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x28>
 801952a:	2a03      	cmp	r2, #3
 801952c:	d03f      	beq.n	80195ae <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x8e>
 801952e:	d804      	bhi.n	801953a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 8019530:	2a01      	cmp	r2, #1
 8019532:	d03e      	beq.n	80195b2 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x92>
 8019534:	d93f      	bls.n	80195b6 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x96>
 8019536:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8019538:	4770      	bx	lr
 801953a:	2a09      	cmp	r2, #9
 801953c:	d03f      	beq.n	80195be <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9e>
 801953e:	d83c      	bhi.n	80195ba <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9a>
 8019540:	2a08      	cmp	r2, #8
 8019542:	d03a      	beq.n	80195ba <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9a>
 8019544:	2000      	movs	r0, #0
 8019546:	4770      	bx	lr
 8019548:	2a2f      	cmp	r2, #47	; 0x2f
 801954a:	d024      	beq.n	8019596 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x76>
 801954c:	d80d      	bhi.n	801956a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x4a>
 801954e:	2a2d      	cmp	r2, #45	; 0x2d
 8019550:	d014      	beq.n	801957c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x5c>
 8019552:	d826      	bhi.n	80195a2 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x82>
 8019554:	2a2c      	cmp	r2, #44	; 0x2c
 8019556:	d1f5      	bne.n	8019544 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8019558:	684b      	ldr	r3, [r1, #4]
 801955a:	781b      	ldrb	r3, [r3, #0]
 801955c:	2b01      	cmp	r3, #1
 801955e:	d018      	beq.n	8019592 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x72>
 8019560:	d323      	bcc.n	80195aa <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x8a>
 8019562:	2b02      	cmp	r3, #2
 8019564:	d1ee      	bne.n	8019544 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8019566:	6880      	ldr	r0, [r0, #8]
 8019568:	4770      	bx	lr
 801956a:	2a31      	cmp	r2, #49	; 0x31
 801956c:	d004      	beq.n	8019578 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x58>
 801956e:	d328      	bcc.n	80195c2 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa2>
 8019570:	2a32      	cmp	r2, #50	; 0x32
 8019572:	d026      	beq.n	80195c2 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa2>
 8019574:	2a33      	cmp	r2, #51	; 0x33
 8019576:	d1e5      	bne.n	8019544 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8019578:	6f00      	ldr	r0, [r0, #112]	; 0x70
 801957a:	4770      	bx	lr
 801957c:	684b      	ldr	r3, [r1, #4]
 801957e:	781b      	ldrb	r3, [r3, #0]
 8019580:	2b01      	cmp	r3, #1
 8019582:	d004      	beq.n	801958e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 8019584:	d30b      	bcc.n	801959e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 8019586:	2b02      	cmp	r3, #2
 8019588:	d1dc      	bne.n	8019544 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801958a:	6900      	ldr	r0, [r0, #16]
 801958c:	4770      	bx	lr
 801958e:	6a00      	ldr	r0, [r0, #32]
 8019590:	4770      	bx	lr
 8019592:	6980      	ldr	r0, [r0, #24]
 8019594:	4770      	bx	lr
 8019596:	684b      	ldr	r3, [r1, #4]
 8019598:	781b      	ldrb	r3, [r3, #0]
 801959a:	2b00      	cmp	r3, #0
 801959c:	d1d2      	bne.n	8019544 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801959e:	6b00      	ldr	r0, [r0, #48]	; 0x30
 80195a0:	4770      	bx	lr
 80195a2:	684b      	ldr	r3, [r1, #4]
 80195a4:	781b      	ldrb	r3, [r3, #0]
 80195a6:	2b00      	cmp	r3, #0
 80195a8:	d1cc      	bne.n	8019544 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 80195aa:	6a80      	ldr	r0, [r0, #40]	; 0x28
 80195ac:	4770      	bx	lr
 80195ae:	6c80      	ldr	r0, [r0, #72]	; 0x48
 80195b0:	4770      	bx	lr
 80195b2:	6d00      	ldr	r0, [r0, #80]	; 0x50
 80195b4:	4770      	bx	lr
 80195b6:	6c00      	ldr	r0, [r0, #64]	; 0x40
 80195b8:	4770      	bx	lr
 80195ba:	6d80      	ldr	r0, [r0, #88]	; 0x58
 80195bc:	4770      	bx	lr
 80195be:	6e00      	ldr	r0, [r0, #96]	; 0x60
 80195c0:	4770      	bx	lr
 80195c2:	6e80      	ldr	r0, [r0, #104]	; 0x68
 80195c4:	4770      	bx	lr
 80195c6:	2a0b      	cmp	r2, #11
 80195c8:	d049      	beq.n	801965e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13e>
 80195ca:	d80e      	bhi.n	80195ea <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xca>
 80195cc:	2a03      	cmp	r2, #3
 80195ce:	d040      	beq.n	8019652 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x132>
 80195d0:	d804      	bhi.n	80195dc <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xbc>
 80195d2:	2a01      	cmp	r2, #1
 80195d4:	d03f      	beq.n	8019656 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x136>
 80195d6:	d940      	bls.n	801965a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13a>
 80195d8:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 80195da:	4770      	bx	lr
 80195dc:	2a09      	cmp	r2, #9
 80195de:	d03e      	beq.n	801965e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13e>
 80195e0:	d801      	bhi.n	80195e6 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xc6>
 80195e2:	2a08      	cmp	r2, #8
 80195e4:	d1ae      	bne.n	8019544 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 80195e6:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
 80195e8:	4770      	bx	lr
 80195ea:	2a2f      	cmp	r2, #47	; 0x2f
 80195ec:	d024      	beq.n	8019638 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x118>
 80195ee:	d80d      	bhi.n	801960c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xec>
 80195f0:	2a2d      	cmp	r2, #45	; 0x2d
 80195f2:	d014      	beq.n	801961e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xfe>
 80195f4:	d826      	bhi.n	8019644 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x124>
 80195f6:	2a2c      	cmp	r2, #44	; 0x2c
 80195f8:	d1a4      	bne.n	8019544 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 80195fa:	684b      	ldr	r3, [r1, #4]
 80195fc:	781b      	ldrb	r3, [r3, #0]
 80195fe:	2b01      	cmp	r3, #1
 8019600:	d018      	beq.n	8019634 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x114>
 8019602:	d324      	bcc.n	801964e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x12e>
 8019604:	2b02      	cmp	r3, #2
 8019606:	d19d      	bne.n	8019544 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8019608:	68c0      	ldr	r0, [r0, #12]
 801960a:	4770      	bx	lr
 801960c:	2a31      	cmp	r2, #49	; 0x31
 801960e:	d004      	beq.n	801961a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xfa>
 8019610:	d327      	bcc.n	8019662 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x142>
 8019612:	2a32      	cmp	r2, #50	; 0x32
 8019614:	d025      	beq.n	8019662 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x142>
 8019616:	2a33      	cmp	r2, #51	; 0x33
 8019618:	d194      	bne.n	8019544 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801961a:	6f40      	ldr	r0, [r0, #116]	; 0x74
 801961c:	4770      	bx	lr
 801961e:	684b      	ldr	r3, [r1, #4]
 8019620:	781b      	ldrb	r3, [r3, #0]
 8019622:	2b01      	cmp	r3, #1
 8019624:	d004      	beq.n	8019630 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x110>
 8019626:	d30b      	bcc.n	8019640 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x120>
 8019628:	2b02      	cmp	r3, #2
 801962a:	d18b      	bne.n	8019544 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801962c:	6940      	ldr	r0, [r0, #20]
 801962e:	4770      	bx	lr
 8019630:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8019632:	4770      	bx	lr
 8019634:	69c0      	ldr	r0, [r0, #28]
 8019636:	4770      	bx	lr
 8019638:	684b      	ldr	r3, [r1, #4]
 801963a:	781b      	ldrb	r3, [r3, #0]
 801963c:	2b00      	cmp	r3, #0
 801963e:	d181      	bne.n	8019544 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8019640:	6b40      	ldr	r0, [r0, #52]	; 0x34
 8019642:	4770      	bx	lr
 8019644:	684b      	ldr	r3, [r1, #4]
 8019646:	781b      	ldrb	r3, [r3, #0]
 8019648:	2b00      	cmp	r3, #0
 801964a:	f47f af7b 	bne.w	8019544 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801964e:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 8019650:	4770      	bx	lr
 8019652:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 8019654:	4770      	bx	lr
 8019656:	6d40      	ldr	r0, [r0, #84]	; 0x54
 8019658:	4770      	bx	lr
 801965a:	6c40      	ldr	r0, [r0, #68]	; 0x44
 801965c:	4770      	bx	lr
 801965e:	6e40      	ldr	r0, [r0, #100]	; 0x64
 8019660:	4770      	bx	lr
 8019662:	6ec0      	ldr	r0, [r0, #108]	; 0x6c
 8019664:	4770      	bx	lr
	...

08019668 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t>:
 8019668:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801966c:	4692      	mov	sl, r2
 801966e:	4a22      	ldr	r2, [pc, #136]	; (80196f8 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x90>)
 8019670:	b088      	sub	sp, #32
 8019672:	4605      	mov	r5, r0
 8019674:	6812      	ldr	r2, [r2, #0]
 8019676:	4689      	mov	r9, r1
 8019678:	f892 2048 	ldrb.w	r2, [r2, #72]	; 0x48
 801967c:	2a02      	cmp	r2, #2
 801967e:	d106      	bne.n	801968e <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x26>
 8019680:	4b1e      	ldr	r3, [pc, #120]	; (80196fc <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x94>)
 8019682:	f44f 7158 	mov.w	r1, #864	; 0x360
 8019686:	4a1e      	ldr	r2, [pc, #120]	; (8019700 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x98>)
 8019688:	481e      	ldr	r0, [pc, #120]	; (8019704 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x9c>)
 801968a:	f001 ffcf 	bl	801b62c <__assert_func>
 801968e:	ac08      	add	r4, sp, #32
 8019690:	f824 3d0c 	strh.w	r3, [r4, #-12]!
 8019694:	4620      	mov	r0, r4
 8019696:	f7ff ff07 	bl	80194a8 <_ZNK8touchgfx6Bitmap9getFormatEv>
 801969a:	682b      	ldr	r3, [r5, #0]
 801969c:	4606      	mov	r6, r0
 801969e:	4628      	mov	r0, r5
 80196a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80196a2:	4798      	blx	r3
 80196a4:	4286      	cmp	r6, r0
 80196a6:	d004      	beq.n	80196b2 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x4a>
 80196a8:	4b17      	ldr	r3, [pc, #92]	; (8019708 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0xa0>)
 80196aa:	f240 3162 	movw	r1, #866	; 0x362
 80196ae:	4a14      	ldr	r2, [pc, #80]	; (8019700 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x98>)
 80196b0:	e7ea      	b.n	8019688 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20>
 80196b2:	4620      	mov	r0, r4
 80196b4:	f7ff fe6e 	bl	8019394 <_ZNK8touchgfx6Bitmap7getDataEv>
 80196b8:	4606      	mov	r6, r0
 80196ba:	b920      	cbnz	r0, 80196c6 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x5e>
 80196bc:	4b13      	ldr	r3, [pc, #76]	; (801970c <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0xa4>)
 80196be:	f44f 7159 	mov.w	r1, #868	; 0x364
 80196c2:	4a0f      	ldr	r2, [pc, #60]	; (8019700 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x98>)
 80196c4:	e7e0      	b.n	8019688 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20>
 80196c6:	682b      	ldr	r3, [r5, #0]
 80196c8:	4620      	mov	r0, r4
 80196ca:	f8d3 8018 	ldr.w	r8, [r3, #24]
 80196ce:	f7ff fd45 	bl	801915c <_ZNK8touchgfx6Bitmap8getWidthEv>
 80196d2:	4607      	mov	r7, r0
 80196d4:	4620      	mov	r0, r4
 80196d6:	f7ff fd85 	bl	80191e4 <_ZNK8touchgfx6Bitmap9getHeightEv>
 80196da:	4653      	mov	r3, sl
 80196dc:	b200      	sxth	r0, r0
 80196de:	464a      	mov	r2, r9
 80196e0:	b23f      	sxth	r7, r7
 80196e2:	4629      	mov	r1, r5
 80196e4:	9002      	str	r0, [sp, #8]
 80196e6:	a806      	add	r0, sp, #24
 80196e8:	e9cd 6700 	strd	r6, r7, [sp]
 80196ec:	47c0      	blx	r8
 80196ee:	4630      	mov	r0, r6
 80196f0:	b008      	add	sp, #32
 80196f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80196f6:	bf00      	nop
 80196f8:	20006df8 	.word	0x20006df8
 80196fc:	080203e6 	.word	0x080203e6
 8019700:	080209c0 	.word	0x080209c0
 8019704:	08020498 	.word	0x08020498
 8019708:	080204ca 	.word	0x080204ca
 801970c:	0802051f 	.word	0x0802051f

08019710 <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv>:
 8019710:	b508      	push	{r3, lr}
 8019712:	4b06      	ldr	r3, [pc, #24]	; (801972c <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv+0x1c>)
 8019714:	8818      	ldrh	r0, [r3, #0]
 8019716:	b928      	cbnz	r0, 8019724 <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv+0x14>
 8019718:	4b05      	ldr	r3, [pc, #20]	; (8019730 <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv+0x20>)
 801971a:	2153      	movs	r1, #83	; 0x53
 801971c:	4a05      	ldr	r2, [pc, #20]	; (8019734 <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv+0x24>)
 801971e:	4806      	ldr	r0, [pc, #24]	; (8019738 <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv+0x28>)
 8019720:	f001 ff84 	bl	801b62c <__assert_func>
 8019724:	0040      	lsls	r0, r0, #1
 8019726:	b280      	uxth	r0, r0
 8019728:	bd08      	pop	{r3, pc}
 801972a:	bf00      	nop
 801972c:	20006df0 	.word	0x20006df0
 8019730:	0802058e 	.word	0x0802058e
 8019734:	080208f2 	.word	0x080208f2
 8019738:	080205d0 	.word	0x080205d0

0801973c <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE>:
 801973c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8019740:	2300      	movs	r3, #0
 8019742:	9300      	str	r3, [sp, #0]
 8019744:	4b3d      	ldr	r3, [pc, #244]	; (801983c <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x100>)
 8019746:	781b      	ldrb	r3, [r3, #0]
 8019748:	2b00      	cmp	r3, #0
 801974a:	d137      	bne.n	80197bc <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x80>
 801974c:	4a3c      	ldr	r2, [pc, #240]	; (8019840 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x104>)
 801974e:	f9b2 2000 	ldrsh.w	r2, [r2]
 8019752:	f8ad 2004 	strh.w	r2, [sp, #4]
 8019756:	2b00      	cmp	r3, #0
 8019758:	d132      	bne.n	80197c0 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x84>
 801975a:	4b3a      	ldr	r3, [pc, #232]	; (8019844 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x108>)
 801975c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8019760:	ac02      	add	r4, sp, #8
 8019762:	6808      	ldr	r0, [r1, #0]
 8019764:	f8ad 3006 	strh.w	r3, [sp, #6]
 8019768:	ab02      	add	r3, sp, #8
 801976a:	6849      	ldr	r1, [r1, #4]
 801976c:	4d36      	ldr	r5, [pc, #216]	; (8019848 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x10c>)
 801976e:	c303      	stmia	r3!, {r0, r1}
 8019770:	4669      	mov	r1, sp
 8019772:	4620      	mov	r0, r4
 8019774:	f7fe fb8e 	bl	8017e94 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8019778:	4668      	mov	r0, sp
 801977a:	f7fe fb63 	bl	8017e44 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801977e:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 8019782:	f8bd 2000 	ldrh.w	r2, [sp]
 8019786:	462f      	mov	r7, r5
 8019788:	6828      	ldr	r0, [r5, #0]
 801978a:	4413      	add	r3, r2
 801978c:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 8019790:	f8ad 3008 	strh.w	r3, [sp, #8]
 8019794:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 8019798:	4413      	add	r3, r2
 801979a:	f8ad 300a 	strh.w	r3, [sp, #10]
 801979e:	6803      	ldr	r3, [r0, #0]
 80197a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80197a2:	4798      	blx	r3
 80197a4:	f010 0f01 	tst.w	r0, #1
 80197a8:	d00c      	beq.n	80197c4 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x88>
 80197aa:	6828      	ldr	r0, [r5, #0]
 80197ac:	6803      	ldr	r3, [r0, #0]
 80197ae:	e894 0006 	ldmia.w	r4, {r1, r2}
 80197b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80197b4:	4798      	blx	r3
 80197b6:	b004      	add	sp, #16
 80197b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80197bc:	4a21      	ldr	r2, [pc, #132]	; (8019844 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x108>)
 80197be:	e7c6      	b.n	801974e <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x12>
 80197c0:	4b1f      	ldr	r3, [pc, #124]	; (8019840 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x104>)
 80197c2:	e7cb      	b.n	801975c <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x20>
 80197c4:	6838      	ldr	r0, [r7, #0]
 80197c6:	f9bd 800c 	ldrsh.w	r8, [sp, #12]
 80197ca:	6803      	ldr	r3, [r0, #0]
 80197cc:	f9bd 500e 	ldrsh.w	r5, [sp, #14]
 80197d0:	ea4f 0848 	mov.w	r8, r8, lsl #1
 80197d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80197d6:	4798      	blx	r3
 80197d8:	f9bd 3008 	ldrsh.w	r3, [sp, #8]
 80197dc:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 80197e0:	f8bd 6004 	ldrh.w	r6, [sp, #4]
 80197e4:	fb16 3602 	smlabb	r6, r6, r2, r3
 80197e8:	eb00 0646 	add.w	r6, r0, r6, lsl #1
 80197ec:	6838      	ldr	r0, [r7, #0]
 80197ee:	6803      	ldr	r3, [r0, #0]
 80197f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80197f2:	4798      	blx	r3
 80197f4:	4a12      	ldr	r2, [pc, #72]	; (8019840 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x104>)
 80197f6:	f9bd 400a 	ldrsh.w	r4, [sp, #10]
 80197fa:	8813      	ldrh	r3, [r2, #0]
 80197fc:	4691      	mov	r9, r2
 80197fe:	f9bd 1008 	ldrsh.w	r1, [sp, #8]
 8019802:	435d      	muls	r5, r3
 8019804:	fb03 1404 	mla	r4, r3, r4, r1
 8019808:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 801980c:	eb04 0545 	add.w	r5, r4, r5, lsl #1
 8019810:	6838      	ldr	r0, [r7, #0]
 8019812:	42ac      	cmp	r4, r5
 8019814:	6803      	ldr	r3, [r0, #0]
 8019816:	d20e      	bcs.n	8019836 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0xfa>
 8019818:	f8d3 a034 	ldr.w	sl, [r3, #52]	; 0x34
 801981c:	4632      	mov	r2, r6
 801981e:	4643      	mov	r3, r8
 8019820:	4621      	mov	r1, r4
 8019822:	47d0      	blx	sl
 8019824:	f8b9 3000 	ldrh.w	r3, [r9]
 8019828:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801982c:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 8019830:	eb06 0643 	add.w	r6, r6, r3, lsl #1
 8019834:	e7ec      	b.n	8019810 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0xd4>
 8019836:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019838:	4798      	blx	r3
 801983a:	e7bc      	b.n	80197b6 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x7a>
 801983c:	20006dee 	.word	0x20006dee
 8019840:	20006df0 	.word	0x20006df0
 8019844:	20006df2 	.word	0x20006df2
 8019848:	20006df8 	.word	0x20006df8

0801984c <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb>:
 801984c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019850:	b08b      	sub	sp, #44	; 0x2c
 8019852:	460f      	mov	r7, r1
 8019854:	4616      	mov	r6, r2
 8019856:	f89d b050 	ldrb.w	fp, [sp, #80]	; 0x50
 801985a:	f89d 4054 	ldrb.w	r4, [sp, #84]	; 0x54
 801985e:	f1bb 0f00 	cmp.w	fp, #0
 8019862:	d049      	beq.n	80198f8 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xac>
 8019864:	6810      	ldr	r0, [r2, #0]
 8019866:	ad06      	add	r5, sp, #24
 8019868:	6851      	ldr	r1, [r2, #4]
 801986a:	c503      	stmia	r5!, {r0, r1}
 801986c:	6818      	ldr	r0, [r3, #0]
 801986e:	ad08      	add	r5, sp, #32
 8019870:	6859      	ldr	r1, [r3, #4]
 8019872:	c503      	stmia	r5!, {r0, r1}
 8019874:	a806      	add	r0, sp, #24
 8019876:	f7fe fae5 	bl	8017e44 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801987a:	4631      	mov	r1, r6
 801987c:	a808      	add	r0, sp, #32
 801987e:	f7fe fb09 	bl	8017e94 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8019882:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 8019886:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 801988a:	f8bd 601c 	ldrh.w	r6, [sp, #28]
 801988e:	f9bd 8024 	ldrsh.w	r8, [sp, #36]	; 0x24
 8019892:	fb16 2103 	smlabb	r1, r6, r3, r2
 8019896:	f9bd 5026 	ldrsh.w	r5, [sp, #38]	; 0x26
 801989a:	eb07 0641 	add.w	r6, r7, r1, lsl #1
 801989e:	f8bd 1018 	ldrh.w	r1, [sp, #24]
 80198a2:	4f5f      	ldr	r7, [pc, #380]	; (8019a20 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1d4>)
 80198a4:	440a      	add	r2, r1
 80198a6:	6838      	ldr	r0, [r7, #0]
 80198a8:	46b9      	mov	r9, r7
 80198aa:	f8ad 2020 	strh.w	r2, [sp, #32]
 80198ae:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 80198b2:	4413      	add	r3, r2
 80198b4:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 80198b8:	6803      	ldr	r3, [r0, #0]
 80198ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80198bc:	4798      	blx	r3
 80198be:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 80198c2:	d01c      	beq.n	80198fe <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xb2>
 80198c4:	f010 0f04 	tst.w	r0, #4
 80198c8:	d01d      	beq.n	8019906 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xba>
 80198ca:	f8d9 0000 	ldr.w	r0, [r9]
 80198ce:	2700      	movs	r7, #0
 80198d0:	b2ad      	uxth	r5, r5
 80198d2:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 80198d6:	6801      	ldr	r1, [r0, #0]
 80198d8:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 80198dc:	f8cd b00c 	str.w	fp, [sp, #12]
 80198e0:	9501      	str	r5, [sp, #4]
 80198e2:	e9cd 4704 	strd	r4, r7, [sp, #16]
 80198e6:	f8bd 401c 	ldrh.w	r4, [sp, #28]
 80198ea:	9402      	str	r4, [sp, #8]
 80198ec:	fa1f f488 	uxth.w	r4, r8
 80198f0:	9400      	str	r4, [sp, #0]
 80198f2:	6c4c      	ldr	r4, [r1, #68]	; 0x44
 80198f4:	4631      	mov	r1, r6
 80198f6:	47a0      	blx	r4
 80198f8:	b00b      	add	sp, #44	; 0x2c
 80198fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80198fe:	b914      	cbnz	r4, 8019906 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xba>
 8019900:	f010 0f01 	tst.w	r0, #1
 8019904:	e7e0      	b.n	80198c8 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x7c>
 8019906:	f8d9 0000 	ldr.w	r0, [r9]
 801990a:	ea4f 0748 	mov.w	r7, r8, lsl #1
 801990e:	6803      	ldr	r3, [r0, #0]
 8019910:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8019912:	4798      	blx	r3
 8019914:	4b43      	ldr	r3, [pc, #268]	; (8019a24 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1d8>)
 8019916:	f9bd 4022 	ldrsh.w	r4, [sp, #34]	; 0x22
 801991a:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 801991e:	881a      	ldrh	r2, [r3, #0]
 8019920:	469a      	mov	sl, r3
 8019922:	f9bd 1020 	ldrsh.w	r1, [sp, #32]
 8019926:	fb05 f502 	mul.w	r5, r5, r2
 801992a:	fb02 1404 	mla	r4, r2, r4, r1
 801992e:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 8019932:	d059      	beq.n	80199e8 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x19c>
 8019934:	f1cb 09ff 	rsb	r9, fp, #255	; 0xff
 8019938:	eb04 0545 	add.w	r5, r4, r5, lsl #1
 801993c:	fa1f f28b 	uxth.w	r2, fp
 8019940:	469e      	mov	lr, r3
 8019942:	fa1f f989 	uxth.w	r9, r9
 8019946:	42ac      	cmp	r4, r5
 8019948:	d264      	bcs.n	8019a14 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1c8>
 801994a:	eb04 0a07 	add.w	sl, r4, r7
 801994e:	4554      	cmp	r4, sl
 8019950:	d23d      	bcs.n	80199ce <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x182>
 8019952:	8821      	ldrh	r1, [r4, #0]
 8019954:	f836 3b02 	ldrh.w	r3, [r6], #2
 8019958:	1208      	asrs	r0, r1, #8
 801995a:	ea4f 2c23 	mov.w	ip, r3, asr #8
 801995e:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8019962:	ea4f 0be1 	mov.w	fp, r1, asr #3
 8019966:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801996a:	00c9      	lsls	r1, r1, #3
 801996c:	fb10 f009 	smulbb	r0, r0, r9
 8019970:	f00b 0bfc 	and.w	fp, fp, #252	; 0xfc
 8019974:	b2c9      	uxtb	r1, r1
 8019976:	fb0c 0c02 	mla	ip, ip, r2, r0
 801997a:	10d8      	asrs	r0, r3, #3
 801997c:	fb1b fb09 	smulbb	fp, fp, r9
 8019980:	00db      	lsls	r3, r3, #3
 8019982:	fa1f fc8c 	uxth.w	ip, ip
 8019986:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 801998a:	fb11 f109 	smulbb	r1, r1, r9
 801998e:	b2db      	uxtb	r3, r3
 8019990:	fb00 b002 	mla	r0, r0, r2, fp
 8019994:	f10c 0b01 	add.w	fp, ip, #1
 8019998:	fb03 1302 	mla	r3, r3, r2, r1
 801999c:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 80199a0:	b29b      	uxth	r3, r3
 80199a2:	b280      	uxth	r0, r0
 80199a4:	f40c 4b78 	and.w	fp, ip, #63488	; 0xf800
 80199a8:	f103 0c01 	add.w	ip, r3, #1
 80199ac:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 80199b0:	1c43      	adds	r3, r0, #1
 80199b2:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 80199b6:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 80199ba:	0940      	lsrs	r0, r0, #5
 80199bc:	ea4c 0c0b 	orr.w	ip, ip, fp
 80199c0:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 80199c4:	ea4c 0c00 	orr.w	ip, ip, r0
 80199c8:	f824 cb02 	strh.w	ip, [r4], #2
 80199cc:	e7bf      	b.n	801994e <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x102>
 80199ce:	f8be 3000 	ldrh.w	r3, [lr]
 80199d2:	eba3 0308 	sub.w	r3, r3, r8
 80199d6:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 80199da:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 80199de:	eba3 0308 	sub.w	r3, r3, r8
 80199e2:	eb06 0643 	add.w	r6, r6, r3, lsl #1
 80199e6:	e7ae      	b.n	8019946 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xfa>
 80199e8:	eb04 0545 	add.w	r5, r4, r5, lsl #1
 80199ec:	f8d9 0000 	ldr.w	r0, [r9]
 80199f0:	42ac      	cmp	r4, r5
 80199f2:	6803      	ldr	r3, [r0, #0]
 80199f4:	d20e      	bcs.n	8019a14 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1c8>
 80199f6:	f8d3 8034 	ldr.w	r8, [r3, #52]	; 0x34
 80199fa:	4632      	mov	r2, r6
 80199fc:	463b      	mov	r3, r7
 80199fe:	4621      	mov	r1, r4
 8019a00:	47c0      	blx	r8
 8019a02:	f8ba 3000 	ldrh.w	r3, [sl]
 8019a06:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8019a0a:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 8019a0e:	eb06 0643 	add.w	r6, r6, r3, lsl #1
 8019a12:	e7eb      	b.n	80199ec <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1a0>
 8019a14:	4b02      	ldr	r3, [pc, #8]	; (8019a20 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1d4>)
 8019a16:	6818      	ldr	r0, [r3, #0]
 8019a18:	6803      	ldr	r3, [r0, #0]
 8019a1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019a1c:	4798      	blx	r3
 8019a1e:	e76b      	b.n	80198f8 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xac>
 8019a20:	20006df8 	.word	0x20006df8
 8019a24:	20006df0 	.word	0x20006df0

08019a28 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh>:
 8019a28:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019a2a:	4606      	mov	r6, r0
 8019a2c:	b087      	sub	sp, #28
 8019a2e:	460c      	mov	r4, r1
 8019a30:	4617      	mov	r7, r2
 8019a32:	461d      	mov	r5, r3
 8019a34:	b333      	cbz	r3, 8019a84 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 8019a36:	4608      	mov	r0, r1
 8019a38:	f7fc fb71 	bl	801611e <_ZNK8touchgfx4Rect7isEmptyEv>
 8019a3c:	bb10      	cbnz	r0, 8019a84 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 8019a3e:	6820      	ldr	r0, [r4, #0]
 8019a40:	ab04      	add	r3, sp, #16
 8019a42:	6861      	ldr	r1, [r4, #4]
 8019a44:	4c1b      	ldr	r4, [pc, #108]	; (8019ab4 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x8c>)
 8019a46:	c303      	stmia	r3!, {r0, r1}
 8019a48:	a804      	add	r0, sp, #16
 8019a4a:	f7fe f9fb 	bl	8017e44 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8019a4e:	6820      	ldr	r0, [r4, #0]
 8019a50:	6803      	ldr	r3, [r0, #0]
 8019a52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019a54:	4798      	blx	r3
 8019a56:	2dff      	cmp	r5, #255	; 0xff
 8019a58:	d016      	beq.n	8019a88 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x60>
 8019a5a:	f010 0f08 	tst.w	r0, #8
 8019a5e:	6820      	ldr	r0, [r4, #0]
 8019a60:	d015      	beq.n	8019a8e <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x66>
 8019a62:	2400      	movs	r4, #0
 8019a64:	6801      	ldr	r1, [r0, #0]
 8019a66:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 8019a6a:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 8019a6e:	e9cd 5402 	strd	r5, r4, [sp, #8]
 8019a72:	f8bd 4016 	ldrh.w	r4, [sp, #22]
 8019a76:	9401      	str	r4, [sp, #4]
 8019a78:	f8bd 4014 	ldrh.w	r4, [sp, #20]
 8019a7c:	9400      	str	r4, [sp, #0]
 8019a7e:	6e0c      	ldr	r4, [r1, #96]	; 0x60
 8019a80:	4639      	mov	r1, r7
 8019a82:	47a0      	blx	r4
 8019a84:	b007      	add	sp, #28
 8019a86:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019a88:	f010 0f02 	tst.w	r0, #2
 8019a8c:	e7e7      	b.n	8019a5e <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x36>
 8019a8e:	6803      	ldr	r3, [r0, #0]
 8019a90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8019a92:	4798      	blx	r3
 8019a94:	4b08      	ldr	r3, [pc, #32]	; (8019ab8 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x90>)
 8019a96:	4601      	mov	r1, r0
 8019a98:	4630      	mov	r0, r6
 8019a9a:	881a      	ldrh	r2, [r3, #0]
 8019a9c:	6833      	ldr	r3, [r6, #0]
 8019a9e:	e9cd 7500 	strd	r7, r5, [sp]
 8019aa2:	6a5d      	ldr	r5, [r3, #36]	; 0x24
 8019aa4:	ab04      	add	r3, sp, #16
 8019aa6:	47a8      	blx	r5
 8019aa8:	6820      	ldr	r0, [r4, #0]
 8019aaa:	6803      	ldr	r3, [r0, #0]
 8019aac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019aae:	4798      	blx	r3
 8019ab0:	e7e8      	b.n	8019a84 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 8019ab2:	bf00      	nop
 8019ab4:	20006df8 	.word	0x20006df8
 8019ab8:	20006df0 	.word	0x20006df0

08019abc <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss>:
 8019abc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019ac0:	4690      	mov	r8, r2
 8019ac2:	4a8d      	ldr	r2, [pc, #564]	; (8019cf8 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x23c>)
 8019ac4:	b091      	sub	sp, #68	; 0x44
 8019ac6:	4606      	mov	r6, r0
 8019ac8:	6812      	ldr	r2, [r2, #0]
 8019aca:	460d      	mov	r5, r1
 8019acc:	461c      	mov	r4, r3
 8019ace:	f9bd b06c 	ldrsh.w	fp, [sp, #108]	; 0x6c
 8019ad2:	f892 2048 	ldrb.w	r2, [r2, #72]	; 0x48
 8019ad6:	f9bd 7070 	ldrsh.w	r7, [sp, #112]	; 0x70
 8019ada:	2a02      	cmp	r2, #2
 8019adc:	d106      	bne.n	8019aec <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x30>
 8019ade:	4b87      	ldr	r3, [pc, #540]	; (8019cfc <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x240>)
 8019ae0:	f240 316b 	movw	r1, #875	; 0x36b
 8019ae4:	4a86      	ldr	r2, [pc, #536]	; (8019d00 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x244>)
 8019ae6:	4887      	ldr	r0, [pc, #540]	; (8019d04 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x248>)
 8019ae8:	f001 fda0 	bl	801b62c <__assert_func>
 8019aec:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8019aee:	b923      	cbnz	r3, 8019afa <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x3e>
 8019af0:	4b85      	ldr	r3, [pc, #532]	; (8019d08 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x24c>)
 8019af2:	f44f 715b 	mov.w	r1, #876	; 0x36c
 8019af6:	4a82      	ldr	r2, [pc, #520]	; (8019d00 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x244>)
 8019af8:	e7f5      	b.n	8019ae6 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x2a>
 8019afa:	f9b4 1000 	ldrsh.w	r1, [r4]
 8019afe:	f10d 0928 	add.w	r9, sp, #40	; 0x28
 8019b02:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 8019b06:	f8ad 1028 	strh.w	r1, [sp, #40]	; 0x28
 8019b0a:	4648      	mov	r0, r9
 8019b0c:	4621      	mov	r1, r4
 8019b0e:	f8ad 202a 	strh.w	r2, [sp, #42]	; 0x2a
 8019b12:	f8ad b02c 	strh.w	fp, [sp, #44]	; 0x2c
 8019b16:	f8ad 702e 	strh.w	r7, [sp, #46]	; 0x2e
 8019b1a:	f7fc fabd 	bl	8016098 <_ZN8touchgfx4RectaNERKS0_>
 8019b1e:	4641      	mov	r1, r8
 8019b20:	4648      	mov	r0, r9
 8019b22:	f7fc fab9 	bl	8016098 <_ZN8touchgfx4RectaNERKS0_>
 8019b26:	4a79      	ldr	r2, [pc, #484]	; (8019d0c <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x250>)
 8019b28:	f8b2 c000 	ldrh.w	ip, [r2]
 8019b2c:	4a78      	ldr	r2, [pc, #480]	; (8019d10 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x254>)
 8019b2e:	fa0f f18c 	sxth.w	r1, ip
 8019b32:	8810      	ldrh	r0, [r2, #0]
 8019b34:	f9bd 2028 	ldrsh.w	r2, [sp, #40]	; 0x28
 8019b38:	fa0f fe80 	sxth.w	lr, r0
 8019b3c:	2a00      	cmp	r2, #0
 8019b3e:	da07      	bge.n	8019b50 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x94>
 8019b40:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
 8019b44:	4442      	add	r2, r8
 8019b46:	f8ad 202c 	strh.w	r2, [sp, #44]	; 0x2c
 8019b4a:	2200      	movs	r2, #0
 8019b4c:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
 8019b50:	f9bd 2028 	ldrsh.w	r2, [sp, #40]	; 0x28
 8019b54:	f9bd 802c 	ldrsh.w	r8, [sp, #44]	; 0x2c
 8019b58:	1a89      	subs	r1, r1, r2
 8019b5a:	4588      	cmp	r8, r1
 8019b5c:	bfc4      	itt	gt
 8019b5e:	ebac 0102 	subgt.w	r1, ip, r2
 8019b62:	f8ad 102c 	strhgt.w	r1, [sp, #44]	; 0x2c
 8019b66:	f9bd 102a 	ldrsh.w	r1, [sp, #42]	; 0x2a
 8019b6a:	2900      	cmp	r1, #0
 8019b6c:	da07      	bge.n	8019b7e <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xc2>
 8019b6e:	f8bd 802e 	ldrh.w	r8, [sp, #46]	; 0x2e
 8019b72:	4441      	add	r1, r8
 8019b74:	f8ad 102e 	strh.w	r1, [sp, #46]	; 0x2e
 8019b78:	2100      	movs	r1, #0
 8019b7a:	f8ad 102a 	strh.w	r1, [sp, #42]	; 0x2a
 8019b7e:	f9bd a02a 	ldrsh.w	sl, [sp, #42]	; 0x2a
 8019b82:	f9bd 102e 	ldrsh.w	r1, [sp, #46]	; 0x2e
 8019b86:	ebae 0e0a 	sub.w	lr, lr, sl
 8019b8a:	4571      	cmp	r1, lr
 8019b8c:	bfc4      	itt	gt
 8019b8e:	eba0 010a 	subgt.w	r1, r0, sl
 8019b92:	f8ad 102e 	strhgt.w	r1, [sp, #46]	; 0x2e
 8019b96:	495f      	ldr	r1, [pc, #380]	; (8019d14 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x258>)
 8019b98:	7809      	ldrb	r1, [r1, #0]
 8019b9a:	b9a9      	cbnz	r1, 8019bc8 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x10c>
 8019b9c:	f9bd 802c 	ldrsh.w	r8, [sp, #44]	; 0x2c
 8019ba0:	45e0      	cmp	r8, ip
 8019ba2:	bf14      	ite	ne
 8019ba4:	2300      	movne	r3, #0
 8019ba6:	2301      	moveq	r3, #1
 8019ba8:	4648      	mov	r0, r9
 8019baa:	9202      	str	r2, [sp, #8]
 8019bac:	9305      	str	r3, [sp, #20]
 8019bae:	f7fc fab6 	bl	801611e <_ZNK8touchgfx4Rect7isEmptyEv>
 8019bb2:	9a02      	ldr	r2, [sp, #8]
 8019bb4:	b160      	cbz	r0, 8019bd0 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x114>
 8019bb6:	2300      	movs	r3, #0
 8019bb8:	8033      	strh	r3, [r6, #0]
 8019bba:	8073      	strh	r3, [r6, #2]
 8019bbc:	80b3      	strh	r3, [r6, #4]
 8019bbe:	4630      	mov	r0, r6
 8019bc0:	80f3      	strh	r3, [r6, #6]
 8019bc2:	b011      	add	sp, #68	; 0x44
 8019bc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019bc8:	f9bd 802e 	ldrsh.w	r8, [sp, #46]	; 0x2e
 8019bcc:	4580      	cmp	r8, r0
 8019bce:	e7e8      	b.n	8019ba2 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xe6>
 8019bd0:	8821      	ldrh	r1, [r4, #0]
 8019bd2:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	; 0x2c
 8019bd6:	1a52      	subs	r2, r2, r1
 8019bd8:	900e      	str	r0, [sp, #56]	; 0x38
 8019bda:	9304      	str	r3, [sp, #16]
 8019bdc:	a90e      	add	r1, sp, #56	; 0x38
 8019bde:	f9bd 302e 	ldrsh.w	r3, [sp, #46]	; 0x2e
 8019be2:	a80c      	add	r0, sp, #48	; 0x30
 8019be4:	f8ad 703e 	strh.w	r7, [sp, #62]	; 0x3e
 8019be8:	9306      	str	r3, [sp, #24]
 8019bea:	b213      	sxth	r3, r2
 8019bec:	f8ad b03c 	strh.w	fp, [sp, #60]	; 0x3c
 8019bf0:	9302      	str	r3, [sp, #8]
 8019bf2:	8863      	ldrh	r3, [r4, #2]
 8019bf4:	f8df 8100 	ldr.w	r8, [pc, #256]	; 8019cf8 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x23c>
 8019bf8:	ebaa 0a03 	sub.w	sl, sl, r3
 8019bfc:	fa0f f38a 	sxth.w	r3, sl
 8019c00:	9303      	str	r3, [sp, #12]
 8019c02:	9b02      	ldr	r3, [sp, #8]
 8019c04:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
 8019c08:	9b03      	ldr	r3, [sp, #12]
 8019c0a:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 8019c0e:	9b04      	ldr	r3, [sp, #16]
 8019c10:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
 8019c14:	9b06      	ldr	r3, [sp, #24]
 8019c16:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 8019c1a:	f7fe f93b 	bl	8017e94 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8019c1e:	4648      	mov	r0, r9
 8019c20:	f7fe f910 	bl	8017e44 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8019c24:	a80e      	add	r0, sp, #56	; 0x38
 8019c26:	f7fe f90d 	bl	8017e44 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8019c2a:	4b3b      	ldr	r3, [pc, #236]	; (8019d18 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x25c>)
 8019c2c:	4628      	mov	r0, r5
 8019c2e:	f9bd 703c 	ldrsh.w	r7, [sp, #60]	; 0x3c
 8019c32:	881b      	ldrh	r3, [r3, #0]
 8019c34:	9307      	str	r3, [sp, #28]
 8019c36:	682b      	ldr	r3, [r5, #0]
 8019c38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8019c3a:	4798      	blx	r3
 8019c3c:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	; 0x30
 8019c40:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
 8019c44:	4682      	mov	sl, r0
 8019c46:	f8d8 0000 	ldr.w	r0, [r8]
 8019c4a:	fb17 2303 	smlabb	r3, r7, r3, r2
 8019c4e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8019c50:	eb02 0443 	add.w	r4, r2, r3, lsl #1
 8019c54:	6803      	ldr	r3, [r0, #0]
 8019c56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8019c58:	4798      	blx	r3
 8019c5a:	9009      	str	r0, [sp, #36]	; 0x24
 8019c5c:	f8d8 0000 	ldr.w	r0, [r8]
 8019c60:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
 8019c64:	6802      	ldr	r2, [r0, #0]
 8019c66:	9308      	str	r3, [sp, #32]
 8019c68:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8019c6a:	f9bd 502a 	ldrsh.w	r5, [sp, #42]	; 0x2a
 8019c6e:	4790      	blx	r2
 8019c70:	f010 0f01 	tst.w	r0, #1
 8019c74:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019c76:	d011      	beq.n	8019c9c <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1e0>
 8019c78:	f8d8 0000 	ldr.w	r0, [r8]
 8019c7c:	6803      	ldr	r3, [r0, #0]
 8019c7e:	f8cd b000 	str.w	fp, [sp]
 8019c82:	6edd      	ldr	r5, [r3, #108]	; 0x6c
 8019c84:	4623      	mov	r3, r4
 8019c86:	e899 0006 	ldmia.w	r9, {r1, r2}
 8019c8a:	47a8      	blx	r5
 8019c8c:	9b02      	ldr	r3, [sp, #8]
 8019c8e:	8033      	strh	r3, [r6, #0]
 8019c90:	9b03      	ldr	r3, [sp, #12]
 8019c92:	8073      	strh	r3, [r6, #2]
 8019c94:	9b04      	ldr	r3, [sp, #16]
 8019c96:	80b3      	strh	r3, [r6, #4]
 8019c98:	9b06      	ldr	r3, [sp, #24]
 8019c9a:	e790      	b.n	8019bbe <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x102>
 8019c9c:	9a08      	ldr	r2, [sp, #32]
 8019c9e:	fb0a f505 	mul.w	r5, sl, r5
 8019ca2:	eb05 0542 	add.w	r5, r5, r2, lsl #1
 8019ca6:	9a05      	ldr	r2, [sp, #20]
 8019ca8:	441d      	add	r5, r3
 8019caa:	f9bd 3036 	ldrsh.w	r3, [sp, #54]	; 0x36
 8019cae:	b162      	cbz	r2, 8019cca <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x20e>
 8019cb0:	9a07      	ldr	r2, [sp, #28]
 8019cb2:	4297      	cmp	r7, r2
 8019cb4:	d109      	bne.n	8019cca <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x20e>
 8019cb6:	f8d8 0000 	ldr.w	r0, [r8]
 8019cba:	fb03 f30a 	mul.w	r3, r3, sl
 8019cbe:	4621      	mov	r1, r4
 8019cc0:	6802      	ldr	r2, [r0, #0]
 8019cc2:	6b57      	ldr	r7, [r2, #52]	; 0x34
 8019cc4:	462a      	mov	r2, r5
 8019cc6:	47b8      	blx	r7
 8019cc8:	e7e0      	b.n	8019c8c <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1d0>
 8019cca:	437b      	muls	r3, r7
 8019ccc:	f8df b028 	ldr.w	fp, [pc, #40]	; 8019cf8 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x23c>
 8019cd0:	007f      	lsls	r7, r7, #1
 8019cd2:	eb04 0843 	add.w	r8, r4, r3, lsl #1
 8019cd6:	4544      	cmp	r4, r8
 8019cd8:	d2d8      	bcs.n	8019c8c <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1d0>
 8019cda:	f8db 0000 	ldr.w	r0, [fp]
 8019cde:	4621      	mov	r1, r4
 8019ce0:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	; 0x34
 8019ce4:	443c      	add	r4, r7
 8019ce6:	6802      	ldr	r2, [r0, #0]
 8019ce8:	005b      	lsls	r3, r3, #1
 8019cea:	f8d2 9034 	ldr.w	r9, [r2, #52]	; 0x34
 8019cee:	462a      	mov	r2, r5
 8019cf0:	47c8      	blx	r9
 8019cf2:	4455      	add	r5, sl
 8019cf4:	e7ef      	b.n	8019cd6 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x21a>
 8019cf6:	bf00      	nop
 8019cf8:	20006df8 	.word	0x20006df8
 8019cfc:	080203e6 	.word	0x080203e6
 8019d00:	0802092d 	.word	0x0802092d
 8019d04:	08020498 	.word	0x08020498
 8019d08:	08020398 	.word	0x08020398
 8019d0c:	20006dea 	.word	0x20006dea
 8019d10:	20006dec 	.word	0x20006dec
 8019d14:	20006dee 	.word	0x20006dee
 8019d18:	20006df0 	.word	0x20006df0

08019d1c <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh>:
 8019d1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019d20:	f89d 7024 	ldrb.w	r7, [sp, #36]	; 0x24
 8019d24:	4688      	mov	r8, r1
 8019d26:	4614      	mov	r4, r2
 8019d28:	461d      	mov	r5, r3
 8019d2a:	9e08      	ldr	r6, [sp, #32]
 8019d2c:	2f00      	cmp	r7, #0
 8019d2e:	f000 80b4 	beq.w	8019e9a <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x17e>
 8019d32:	4618      	mov	r0, r3
 8019d34:	f7fc f9f3 	bl	801611e <_ZNK8touchgfx4Rect7isEmptyEv>
 8019d38:	2800      	cmp	r0, #0
 8019d3a:	f040 80ae 	bne.w	8019e9a <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x17e>
 8019d3e:	f9b5 1000 	ldrsh.w	r1, [r5]
 8019d42:	2fff      	cmp	r7, #255	; 0xff
 8019d44:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 8019d48:	f9b5 0004 	ldrsh.w	r0, [r5, #4]
 8019d4c:	fb04 1303 	mla	r3, r4, r3, r1
 8019d50:	f9b5 5006 	ldrsh.w	r5, [r5, #6]
 8019d54:	eba4 0200 	sub.w	r2, r4, r0
 8019d58:	eb08 0143 	add.w	r1, r8, r3, lsl #1
 8019d5c:	fb04 f505 	mul.w	r5, r4, r5
 8019d60:	ea4f 2816 	mov.w	r8, r6, lsr #8
 8019d64:	eb01 0545 	add.w	r5, r1, r5, lsl #1
 8019d68:	d04b      	beq.n	8019e02 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xe6>
 8019d6a:	b2bc      	uxth	r4, r7
 8019d6c:	f1c7 0cff 	rsb	ip, r7, #255	; 0xff
 8019d70:	f3c6 4e07 	ubfx	lr, r6, #16, #8
 8019d74:	fa5f f788 	uxtb.w	r7, r8
 8019d78:	b2f3      	uxtb	r3, r6
 8019d7a:	0040      	lsls	r0, r0, #1
 8019d7c:	fb0e fe04 	mul.w	lr, lr, r4
 8019d80:	4367      	muls	r7, r4
 8019d82:	ea4f 0842 	mov.w	r8, r2, lsl #1
 8019d86:	4363      	muls	r3, r4
 8019d88:	fa1f fc8c 	uxth.w	ip, ip
 8019d8c:	42a9      	cmp	r1, r5
 8019d8e:	f080 8084 	bcs.w	8019e9a <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x17e>
 8019d92:	eb01 0900 	add.w	r9, r1, r0
 8019d96:	4549      	cmp	r1, r9
 8019d98:	d231      	bcs.n	8019dfe <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xe2>
 8019d9a:	880a      	ldrh	r2, [r1, #0]
 8019d9c:	1214      	asrs	r4, r2, #8
 8019d9e:	10d6      	asrs	r6, r2, #3
 8019da0:	f004 04f8 	and.w	r4, r4, #248	; 0xf8
 8019da4:	00d2      	lsls	r2, r2, #3
 8019da6:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 8019daa:	b2d2      	uxtb	r2, r2
 8019dac:	ea44 1454 	orr.w	r4, r4, r4, lsr #5
 8019db0:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 8019db4:	fb14 f40c 	smulbb	r4, r4, ip
 8019db8:	ea46 1696 	orr.w	r6, r6, r6, lsr #6
 8019dbc:	fb12 f20c 	smulbb	r2, r2, ip
 8019dc0:	fb16 f60c 	smulbb	r6, r6, ip
 8019dc4:	4474      	add	r4, lr
 8019dc6:	441a      	add	r2, r3
 8019dc8:	b2a4      	uxth	r4, r4
 8019dca:	443e      	add	r6, r7
 8019dcc:	b292      	uxth	r2, r2
 8019dce:	f104 0a01 	add.w	sl, r4, #1
 8019dd2:	b2b6      	uxth	r6, r6
 8019dd4:	eb0a 2414 	add.w	r4, sl, r4, lsr #8
 8019dd8:	f102 0a01 	add.w	sl, r2, #1
 8019ddc:	eb0a 2212 	add.w	r2, sl, r2, lsr #8
 8019de0:	f404 4478 	and.w	r4, r4, #63488	; 0xf800
 8019de4:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 8019de8:	4322      	orrs	r2, r4
 8019dea:	1c74      	adds	r4, r6, #1
 8019dec:	eb04 2616 	add.w	r6, r4, r6, lsr #8
 8019df0:	0976      	lsrs	r6, r6, #5
 8019df2:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 8019df6:	4332      	orrs	r2, r6
 8019df8:	f821 2b02 	strh.w	r2, [r1], #2
 8019dfc:	e7cb      	b.n	8019d96 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x7a>
 8019dfe:	4441      	add	r1, r8
 8019e00:	e7c4      	b.n	8019d8c <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x70>
 8019e02:	0973      	lsrs	r3, r6, #5
 8019e04:	4f26      	ldr	r7, [pc, #152]	; (8019ea0 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x184>)
 8019e06:	f3c6 06c4 	ubfx	r6, r6, #3, #5
 8019e0a:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8019e0e:	ea08 0707 	and.w	r7, r8, r7
 8019e12:	433b      	orrs	r3, r7
 8019e14:	4333      	orrs	r3, r6
 8019e16:	07e6      	lsls	r6, r4, #31
 8019e18:	b29b      	uxth	r3, r3
 8019e1a:	d50b      	bpl.n	8019e34 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x118>
 8019e1c:	0040      	lsls	r0, r0, #1
 8019e1e:	0052      	lsls	r2, r2, #1
 8019e20:	42a9      	cmp	r1, r5
 8019e22:	d23a      	bcs.n	8019e9a <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x17e>
 8019e24:	180c      	adds	r4, r1, r0
 8019e26:	42a1      	cmp	r1, r4
 8019e28:	d202      	bcs.n	8019e30 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x114>
 8019e2a:	f821 3b02 	strh.w	r3, [r1], #2
 8019e2e:	e7fa      	b.n	8019e26 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x10a>
 8019e30:	4411      	add	r1, r2
 8019e32:	e7f5      	b.n	8019e20 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x104>
 8019e34:	078f      	lsls	r7, r1, #30
 8019e36:	d008      	beq.n	8019e4a <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x12e>
 8019e38:	0066      	lsls	r6, r4, #1
 8019e3a:	460a      	mov	r2, r1
 8019e3c:	42aa      	cmp	r2, r5
 8019e3e:	d202      	bcs.n	8019e46 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x12a>
 8019e40:	8013      	strh	r3, [r2, #0]
 8019e42:	4432      	add	r2, r6
 8019e44:	e7fa      	b.n	8019e3c <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x120>
 8019e46:	3102      	adds	r1, #2
 8019e48:	3801      	subs	r0, #1
 8019e4a:	07c6      	lsls	r6, r0, #31
 8019e4c:	d50b      	bpl.n	8019e66 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x14a>
 8019e4e:	f100 4200 	add.w	r2, r0, #2147483648	; 0x80000000
 8019e52:	0066      	lsls	r6, r4, #1
 8019e54:	3a01      	subs	r2, #1
 8019e56:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 8019e5a:	42aa      	cmp	r2, r5
 8019e5c:	d202      	bcs.n	8019e64 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x148>
 8019e5e:	8013      	strh	r3, [r2, #0]
 8019e60:	4432      	add	r2, r6
 8019e62:	e7fa      	b.n	8019e5a <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x13e>
 8019e64:	3801      	subs	r0, #1
 8019e66:	b1c0      	cbz	r0, 8019e9a <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x17e>
 8019e68:	1040      	asrs	r0, r0, #1
 8019e6a:	ea43 4303 	orr.w	r3, r3, r3, lsl #16
 8019e6e:	0080      	lsls	r0, r0, #2
 8019e70:	0064      	lsls	r4, r4, #1
 8019e72:	42a9      	cmp	r1, r5
 8019e74:	d211      	bcs.n	8019e9a <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x17e>
 8019e76:	078a      	lsls	r2, r1, #30
 8019e78:	d006      	beq.n	8019e88 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x16c>
 8019e7a:	4b0a      	ldr	r3, [pc, #40]	; (8019ea4 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x188>)
 8019e7c:	f240 4137 	movw	r1, #1079	; 0x437
 8019e80:	4a09      	ldr	r2, [pc, #36]	; (8019ea8 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x18c>)
 8019e82:	480a      	ldr	r0, [pc, #40]	; (8019eac <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x190>)
 8019e84:	f001 fbd2 	bl	801b62c <__assert_func>
 8019e88:	180e      	adds	r6, r1, r0
 8019e8a:	460a      	mov	r2, r1
 8019e8c:	42b2      	cmp	r2, r6
 8019e8e:	d202      	bcs.n	8019e96 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x17a>
 8019e90:	f842 3b04 	str.w	r3, [r2], #4
 8019e94:	e7fa      	b.n	8019e8c <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x170>
 8019e96:	4421      	add	r1, r4
 8019e98:	e7eb      	b.n	8019e72 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x156>
 8019e9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019e9e:	bf00      	nop
 8019ea0:	00fff800 	.word	0x00fff800
 8019ea4:	08020249 	.word	0x08020249
 8019ea8:	0802065c 	.word	0x0802065c
 8019eac:	08020498 	.word	0x08020498

08019eb0 <_ZN8touchgfx8LCD16bppC1Ev>:
 8019eb0:	2200      	movs	r2, #0
 8019eb2:	4910      	ldr	r1, [pc, #64]	; (8019ef4 <_ZN8touchgfx8LCD16bppC1Ev+0x44>)
 8019eb4:	6042      	str	r2, [r0, #4]
 8019eb6:	6001      	str	r1, [r0, #0]
 8019eb8:	e9c0 2202 	strd	r2, r2, [r0, #8]
 8019ebc:	e9c0 2204 	strd	r2, r2, [r0, #16]
 8019ec0:	e9c0 2206 	strd	r2, r2, [r0, #24]
 8019ec4:	e9c0 2208 	strd	r2, r2, [r0, #32]
 8019ec8:	e9c0 220a 	strd	r2, r2, [r0, #40]	; 0x28
 8019ecc:	e9c0 220c 	strd	r2, r2, [r0, #48]	; 0x30
 8019ed0:	e9c0 220e 	strd	r2, r2, [r0, #56]	; 0x38
 8019ed4:	e9c0 2210 	strd	r2, r2, [r0, #64]	; 0x40
 8019ed8:	e9c0 2212 	strd	r2, r2, [r0, #72]	; 0x48
 8019edc:	e9c0 2214 	strd	r2, r2, [r0, #80]	; 0x50
 8019ee0:	e9c0 2216 	strd	r2, r2, [r0, #88]	; 0x58
 8019ee4:	e9c0 2218 	strd	r2, r2, [r0, #96]	; 0x60
 8019ee8:	e9c0 221a 	strd	r2, r2, [r0, #104]	; 0x68
 8019eec:	e9c0 221c 	strd	r2, r2, [r0, #112]	; 0x70
 8019ef0:	4770      	bx	lr
 8019ef2:	bf00      	nop
 8019ef4:	0802060c 	.word	0x0802060c

08019ef8 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>:
 8019ef8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019efc:	b08d      	sub	sp, #52	; 0x34
 8019efe:	460d      	mov	r5, r1
 8019f00:	4604      	mov	r4, r0
 8019f02:	4699      	mov	r9, r3
 8019f04:	6808      	ldr	r0, [r1, #0]
 8019f06:	ab08      	add	r3, sp, #32
 8019f08:	6849      	ldr	r1, [r1, #4]
 8019f0a:	c303      	stmia	r3!, {r0, r1}
 8019f0c:	6810      	ldr	r0, [r2, #0]
 8019f0e:	ab0a      	add	r3, sp, #40	; 0x28
 8019f10:	6851      	ldr	r1, [r2, #4]
 8019f12:	c303      	stmia	r3!, {r0, r1}
 8019f14:	a808      	add	r0, sp, #32
 8019f16:	f7fd ff95 	bl	8017e44 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8019f1a:	4629      	mov	r1, r5
 8019f1c:	a80a      	add	r0, sp, #40	; 0x28
 8019f1e:	4d67      	ldr	r5, [pc, #412]	; (801a0bc <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1c4>)
 8019f20:	f7fd ffb8 	bl	8017e94 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8019f24:	f9bd 2028 	ldrsh.w	r2, [sp, #40]	; 0x28
 8019f28:	f9bd 302a 	ldrsh.w	r3, [sp, #42]	; 0x2a
 8019f2c:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
 8019f30:	6828      	ldr	r0, [r5, #0]
 8019f32:	fb11 2103 	smlabb	r1, r1, r3, r2
 8019f36:	f9bd 802c 	ldrsh.w	r8, [sp, #44]	; 0x2c
 8019f3a:	f9bd 602e 	ldrsh.w	r6, [sp, #46]	; 0x2e
 8019f3e:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 8019f42:	f8bd 1020 	ldrh.w	r1, [sp, #32]
 8019f46:	440a      	add	r2, r1
 8019f48:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
 8019f4c:	f8bd 2022 	ldrh.w	r2, [sp, #34]	; 0x22
 8019f50:	4413      	add	r3, r2
 8019f52:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 8019f56:	6803      	ldr	r3, [r0, #0]
 8019f58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019f5a:	4798      	blx	r3
 8019f5c:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8019f60:	d119      	bne.n	8019f96 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x9e>
 8019f62:	f010 0f20 	tst.w	r0, #32
 8019f66:	6828      	ldr	r0, [r5, #0]
 8019f68:	d018      	beq.n	8019f9c <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xa4>
 8019f6a:	2500      	movs	r5, #0
 8019f6c:	6801      	ldr	r1, [r0, #0]
 8019f6e:	b2b6      	uxth	r6, r6
 8019f70:	f8bd 302a 	ldrh.w	r3, [sp, #42]	; 0x2a
 8019f74:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
 8019f78:	9601      	str	r6, [sp, #4]
 8019f7a:	e9cd 9503 	strd	r9, r5, [sp, #12]
 8019f7e:	f8bd 5024 	ldrh.w	r5, [sp, #36]	; 0x24
 8019f82:	9502      	str	r5, [sp, #8]
 8019f84:	fa1f f588 	uxth.w	r5, r8
 8019f88:	9500      	str	r5, [sp, #0]
 8019f8a:	6d0d      	ldr	r5, [r1, #80]	; 0x50
 8019f8c:	4621      	mov	r1, r4
 8019f8e:	47a8      	blx	r5
 8019f90:	b00d      	add	sp, #52	; 0x34
 8019f92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019f96:	f010 0f40 	tst.w	r0, #64	; 0x40
 8019f9a:	e7e4      	b.n	8019f66 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x6e>
 8019f9c:	6803      	ldr	r3, [r0, #0]
 8019f9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8019fa0:	4798      	blx	r3
 8019fa2:	4947      	ldr	r1, [pc, #284]	; (801a0c0 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1c8>)
 8019fa4:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	; 0x2a
 8019fa8:	880b      	ldrh	r3, [r1, #0]
 8019faa:	468a      	mov	sl, r1
 8019fac:	f9bd 5028 	ldrsh.w	r5, [sp, #40]	; 0x28
 8019fb0:	fb03 5202 	mla	r2, r3, r2, r5
 8019fb4:	4373      	muls	r3, r6
 8019fb6:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 8019fba:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8019fbe:	9307      	str	r3, [sp, #28]
 8019fc0:	ea4f 0348 	mov.w	r3, r8, lsl #1
 8019fc4:	9306      	str	r3, [sp, #24]
 8019fc6:	9b07      	ldr	r3, [sp, #28]
 8019fc8:	4298      	cmp	r0, r3
 8019fca:	d270      	bcs.n	801a0ae <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1b6>
 8019fcc:	9b06      	ldr	r3, [sp, #24]
 8019fce:	4621      	mov	r1, r4
 8019fd0:	eb00 0b03 	add.w	fp, r0, r3
 8019fd4:	4558      	cmp	r0, fp
 8019fd6:	d25d      	bcs.n	801a094 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x19c>
 8019fd8:	f851 4b04 	ldr.w	r4, [r1], #4
 8019fdc:	0e23      	lsrs	r3, r4, #24
 8019fde:	d014      	beq.n	801a00a <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x112>
 8019fe0:	2bff      	cmp	r3, #255	; 0xff
 8019fe2:	ea4f 2c14 	mov.w	ip, r4, lsr #8
 8019fe6:	d112      	bne.n	801a00e <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x116>
 8019fe8:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8019fec:	d10f      	bne.n	801a00e <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x116>
 8019fee:	0963      	lsrs	r3, r4, #5
 8019ff0:	f42c 6cff 	bic.w	ip, ip, #2040	; 0x7f8
 8019ff4:	f3c4 04c4 	ubfx	r4, r4, #3, #5
 8019ff8:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8019ffc:	f02c 0c07 	bic.w	ip, ip, #7
 801a000:	ea43 0c0c 	orr.w	ip, r3, ip
 801a004:	ea4c 0404 	orr.w	r4, ip, r4
 801a008:	8004      	strh	r4, [r0, #0]
 801a00a:	3002      	adds	r0, #2
 801a00c:	e7e2      	b.n	8019fd4 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xdc>
 801a00e:	fb09 f303 	mul.w	r3, r9, r3
 801a012:	8807      	ldrh	r7, [r0, #0]
 801a014:	f3c4 4e07 	ubfx	lr, r4, #16, #8
 801a018:	fa5f fc8c 	uxtb.w	ip, ip
 801a01c:	1c5a      	adds	r2, r3, #1
 801a01e:	123e      	asrs	r6, r7, #8
 801a020:	10fd      	asrs	r5, r7, #3
 801a022:	eb02 2223 	add.w	r2, r2, r3, asr #8
 801a026:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 801a02a:	00ff      	lsls	r7, r7, #3
 801a02c:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 801a030:	1212      	asrs	r2, r2, #8
 801a032:	ea46 1656 	orr.w	r6, r6, r6, lsr #5
 801a036:	b293      	uxth	r3, r2
 801a038:	43d2      	mvns	r2, r2
 801a03a:	b2ff      	uxtb	r7, r7
 801a03c:	fb1e fe03 	smulbb	lr, lr, r3
 801a040:	b2d2      	uxtb	r2, r2
 801a042:	fb1c fc03 	smulbb	ip, ip, r3
 801a046:	b2e4      	uxtb	r4, r4
 801a048:	fb06 e602 	mla	r6, r6, r2, lr
 801a04c:	ea45 1595 	orr.w	r5, r5, r5, lsr #6
 801a050:	fb14 f403 	smulbb	r4, r4, r3
 801a054:	ea47 1757 	orr.w	r7, r7, r7, lsr #5
 801a058:	b2b6      	uxth	r6, r6
 801a05a:	fb05 c502 	mla	r5, r5, r2, ip
 801a05e:	fb07 4702 	mla	r7, r7, r2, r4
 801a062:	f106 0e01 	add.w	lr, r6, #1
 801a066:	b2ad      	uxth	r5, r5
 801a068:	b2bf      	uxth	r7, r7
 801a06a:	eb0e 2616 	add.w	r6, lr, r6, lsr #8
 801a06e:	f105 0c01 	add.w	ip, r5, #1
 801a072:	f406 4e78 	and.w	lr, r6, #63488	; 0xf800
 801a076:	1c7e      	adds	r6, r7, #1
 801a078:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
 801a07c:	eb06 2617 	add.w	r6, r6, r7, lsr #8
 801a080:	096d      	lsrs	r5, r5, #5
 801a082:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 801a086:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 801a08a:	ea46 060e 	orr.w	r6, r6, lr
 801a08e:	432e      	orrs	r6, r5
 801a090:	8006      	strh	r6, [r0, #0]
 801a092:	e7ba      	b.n	801a00a <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x112>
 801a094:	f8ba 3000 	ldrh.w	r3, [sl]
 801a098:	f9bd 4024 	ldrsh.w	r4, [sp, #36]	; 0x24
 801a09c:	eba3 0308 	sub.w	r3, r3, r8
 801a0a0:	eba4 0408 	sub.w	r4, r4, r8
 801a0a4:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801a0a8:	eb01 0484 	add.w	r4, r1, r4, lsl #2
 801a0ac:	e78b      	b.n	8019fc6 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xce>
 801a0ae:	4b03      	ldr	r3, [pc, #12]	; (801a0bc <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1c4>)
 801a0b0:	6818      	ldr	r0, [r3, #0]
 801a0b2:	6803      	ldr	r3, [r0, #0]
 801a0b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a0b6:	4798      	blx	r3
 801a0b8:	e76a      	b.n	8019f90 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x98>
 801a0ba:	bf00      	nop
 801a0bc:	20006df8 	.word	0x20006df8
 801a0c0:	20006df0 	.word	0x20006df0

0801a0c4 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_>:
 801a0c4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801a0c8:	b085      	sub	sp, #20
 801a0ca:	6810      	ldr	r0, [r2, #0]
 801a0cc:	460c      	mov	r4, r1
 801a0ce:	6851      	ldr	r1, [r2, #4]
 801a0d0:	466d      	mov	r5, sp
 801a0d2:	4616      	mov	r6, r2
 801a0d4:	c503      	stmia	r5!, {r0, r1}
 801a0d6:	6818      	ldr	r0, [r3, #0]
 801a0d8:	6859      	ldr	r1, [r3, #4]
 801a0da:	c503      	stmia	r5!, {r0, r1}
 801a0dc:	4668      	mov	r0, sp
 801a0de:	4d2e      	ldr	r5, [pc, #184]	; (801a198 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xd4>)
 801a0e0:	f7fd feb0 	bl	8017e44 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801a0e4:	4631      	mov	r1, r6
 801a0e6:	a802      	add	r0, sp, #8
 801a0e8:	4e2c      	ldr	r6, [pc, #176]	; (801a19c <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xd8>)
 801a0ea:	f7fd fed3 	bl	8017e94 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801a0ee:	f9bd 2008 	ldrsh.w	r2, [sp, #8]
 801a0f2:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 801a0f6:	f8bd 1004 	ldrh.w	r1, [sp, #4]
 801a0fa:	6828      	ldr	r0, [r5, #0]
 801a0fc:	fb11 2103 	smlabb	r1, r1, r3, r2
 801a100:	f9bd 700c 	ldrsh.w	r7, [sp, #12]
 801a104:	f9bd 800e 	ldrsh.w	r8, [sp, #14]
 801a108:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 801a10c:	f8bd 1000 	ldrh.w	r1, [sp]
 801a110:	440a      	add	r2, r1
 801a112:	f8ad 2008 	strh.w	r2, [sp, #8]
 801a116:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 801a11a:	4413      	add	r3, r2
 801a11c:	f8ad 300a 	strh.w	r3, [sp, #10]
 801a120:	6803      	ldr	r3, [r0, #0]
 801a122:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801a124:	4798      	blx	r3
 801a126:	8833      	ldrh	r3, [r6, #0]
 801a128:	f9bd 200a 	ldrsh.w	r2, [sp, #10]
 801a12c:	ea4f 0c47 	mov.w	ip, r7, lsl #1
 801a130:	f9bd 1008 	ldrsh.w	r1, [sp, #8]
 801a134:	f8df e068 	ldr.w	lr, [pc, #104]	; 801a1a0 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xdc>
 801a138:	fb03 1202 	mla	r2, r3, r2, r1
 801a13c:	fb08 f303 	mul.w	r3, r8, r3
 801a140:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 801a144:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 801a148:	4298      	cmp	r0, r3
 801a14a:	d21d      	bcs.n	801a188 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xc4>
 801a14c:	eb00 080c 	add.w	r8, r0, ip
 801a150:	4540      	cmp	r0, r8
 801a152:	d20f      	bcs.n	801a174 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xb0>
 801a154:	f854 1b04 	ldr.w	r1, [r4], #4
 801a158:	ea4f 1951 	mov.w	r9, r1, lsr #5
 801a15c:	ea0e 2211 	and.w	r2, lr, r1, lsr #8
 801a160:	f3c1 01c4 	ubfx	r1, r1, #3, #5
 801a164:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 801a168:	ea42 0209 	orr.w	r2, r2, r9
 801a16c:	430a      	orrs	r2, r1
 801a16e:	f820 2b02 	strh.w	r2, [r0], #2
 801a172:	e7ed      	b.n	801a150 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0x8c>
 801a174:	8832      	ldrh	r2, [r6, #0]
 801a176:	1bd2      	subs	r2, r2, r7
 801a178:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 801a17c:	f9bd 2004 	ldrsh.w	r2, [sp, #4]
 801a180:	1bd2      	subs	r2, r2, r7
 801a182:	eb04 0482 	add.w	r4, r4, r2, lsl #2
 801a186:	e7df      	b.n	801a148 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0x84>
 801a188:	6828      	ldr	r0, [r5, #0]
 801a18a:	6803      	ldr	r3, [r0, #0]
 801a18c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a18e:	4798      	blx	r3
 801a190:	b005      	add	sp, #20
 801a192:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801a196:	bf00      	nop
 801a198:	20006df8 	.word	0x20006df8
 801a19c:	20006df0 	.word	0x20006df0
 801a1a0:	fffff800 	.word	0xfffff800

0801a1a4 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h>:
 801a1a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a1a8:	b08e      	sub	sp, #56	; 0x38
 801a1aa:	460e      	mov	r6, r1
 801a1ac:	4604      	mov	r4, r0
 801a1ae:	461d      	mov	r5, r3
 801a1b0:	6808      	ldr	r0, [r1, #0]
 801a1b2:	ab0a      	add	r3, sp, #40	; 0x28
 801a1b4:	6849      	ldr	r1, [r1, #4]
 801a1b6:	f8df 81d4 	ldr.w	r8, [pc, #468]	; 801a38c <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1e8>
 801a1ba:	f8df 91d4 	ldr.w	r9, [pc, #468]	; 801a390 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1ec>
 801a1be:	c303      	stmia	r3!, {r0, r1}
 801a1c0:	6810      	ldr	r0, [r2, #0]
 801a1c2:	ab0c      	add	r3, sp, #48	; 0x30
 801a1c4:	6851      	ldr	r1, [r2, #4]
 801a1c6:	c303      	stmia	r3!, {r0, r1}
 801a1c8:	a80a      	add	r0, sp, #40	; 0x28
 801a1ca:	f7fd fe3b 	bl	8017e44 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801a1ce:	4631      	mov	r1, r6
 801a1d0:	a80c      	add	r0, sp, #48	; 0x30
 801a1d2:	f7fd fe5f 	bl	8017e94 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801a1d6:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	; 0x30
 801a1da:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
 801a1de:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 801a1e2:	f8d8 0000 	ldr.w	r0, [r8]
 801a1e6:	fb11 2103 	smlabb	r1, r1, r3, r2
 801a1ea:	f9bd 7034 	ldrsh.w	r7, [sp, #52]	; 0x34
 801a1ee:	f9bd 6036 	ldrsh.w	r6, [sp, #54]	; 0x36
 801a1f2:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801a1f6:	440c      	add	r4, r1
 801a1f8:	f8bd 1028 	ldrh.w	r1, [sp, #40]	; 0x28
 801a1fc:	440a      	add	r2, r1
 801a1fe:	f8ad 2030 	strh.w	r2, [sp, #48]	; 0x30
 801a202:	f8bd 202a 	ldrh.w	r2, [sp, #42]	; 0x2a
 801a206:	4413      	add	r3, r2
 801a208:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 801a20c:	6803      	ldr	r3, [r0, #0]
 801a20e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801a210:	4798      	blx	r3
 801a212:	2dff      	cmp	r5, #255	; 0xff
 801a214:	d124      	bne.n	801a260 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0xbc>
 801a216:	f010 0f01 	tst.w	r0, #1
 801a21a:	f8d8 0000 	ldr.w	r0, [r8]
 801a21e:	d022      	beq.n	801a266 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0xc2>
 801a220:	2100      	movs	r1, #0
 801a222:	f04f 0e01 	mov.w	lr, #1
 801a226:	f8d0 c000 	ldr.w	ip, [r0]
 801a22a:	b2b6      	uxth	r6, r6
 801a22c:	f8cd e018 	str.w	lr, [sp, #24]
 801a230:	b2bf      	uxth	r7, r7
 801a232:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
 801a236:	f8bd 2030 	ldrh.w	r2, [sp, #48]	; 0x30
 801a23a:	e9cd 1107 	strd	r1, r1, [sp, #28]
 801a23e:	f8b9 e000 	ldrh.w	lr, [r9]
 801a242:	9503      	str	r5, [sp, #12]
 801a244:	9601      	str	r6, [sp, #4]
 801a246:	9700      	str	r7, [sp, #0]
 801a248:	e9cd 1e04 	strd	r1, lr, [sp, #16]
 801a24c:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 801a250:	9102      	str	r1, [sp, #8]
 801a252:	4621      	mov	r1, r4
 801a254:	f8dc 5040 	ldr.w	r5, [ip, #64]	; 0x40
 801a258:	47a8      	blx	r5
 801a25a:	b00e      	add	sp, #56	; 0x38
 801a25c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a260:	f010 0f04 	tst.w	r0, #4
 801a264:	e7d9      	b.n	801a21a <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x76>
 801a266:	6803      	ldr	r3, [r0, #0]
 801a268:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801a26a:	4798      	blx	r3
 801a26c:	f8b9 3000 	ldrh.w	r3, [r9]
 801a270:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	; 0x32
 801a274:	ea4f 0e47 	mov.w	lr, r7, lsl #1
 801a278:	f9bd 1030 	ldrsh.w	r1, [sp, #48]	; 0x30
 801a27c:	435e      	muls	r6, r3
 801a27e:	f9bd c02c 	ldrsh.w	ip, [sp, #44]	; 0x2c
 801a282:	2dff      	cmp	r5, #255	; 0xff
 801a284:	fb03 1202 	mla	r2, r3, r2, r1
 801a288:	ebac 0c07 	sub.w	ip, ip, r7
 801a28c:	eba3 0707 	sub.w	r7, r3, r7
 801a290:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 801a294:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 801a298:	eb00 0646 	add.w	r6, r0, r6, lsl #1
 801a29c:	ea4f 0747 	mov.w	r7, r7, lsl #1
 801a2a0:	d049      	beq.n	801a336 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x192>
 801a2a2:	43eb      	mvns	r3, r5
 801a2a4:	fa1f f985 	uxth.w	r9, r5
 801a2a8:	b2db      	uxtb	r3, r3
 801a2aa:	42b0      	cmp	r0, r6
 801a2ac:	d266      	bcs.n	801a37c <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1d8>
 801a2ae:	eb00 0a0e 	add.w	sl, r0, lr
 801a2b2:	4550      	cmp	r0, sl
 801a2b4:	4621      	mov	r1, r4
 801a2b6:	f104 0403 	add.w	r4, r4, #3
 801a2ba:	d25b      	bcs.n	801a374 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1d0>
 801a2bc:	8802      	ldrh	r2, [r0, #0]
 801a2be:	f814 1c01 	ldrb.w	r1, [r4, #-1]
 801a2c2:	ea4f 2822 	mov.w	r8, r2, asr #8
 801a2c6:	fb11 f109 	smulbb	r1, r1, r9
 801a2ca:	10d5      	asrs	r5, r2, #3
 801a2cc:	f008 08f8 	and.w	r8, r8, #248	; 0xf8
 801a2d0:	00d2      	lsls	r2, r2, #3
 801a2d2:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 801a2d6:	ea48 1858 	orr.w	r8, r8, r8, lsr #5
 801a2da:	ea45 1595 	orr.w	r5, r5, r5, lsr #6
 801a2de:	fb08 1803 	mla	r8, r8, r3, r1
 801a2e2:	f814 1c02 	ldrb.w	r1, [r4, #-2]
 801a2e6:	b2d2      	uxtb	r2, r2
 801a2e8:	fb11 f109 	smulbb	r1, r1, r9
 801a2ec:	fa1f f888 	uxth.w	r8, r8
 801a2f0:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 801a2f4:	fb05 1503 	mla	r5, r5, r3, r1
 801a2f8:	f814 1c03 	ldrb.w	r1, [r4, #-3]
 801a2fc:	fb11 f109 	smulbb	r1, r1, r9
 801a300:	b2ad      	uxth	r5, r5
 801a302:	fb02 1203 	mla	r2, r2, r3, r1
 801a306:	f108 0101 	add.w	r1, r8, #1
 801a30a:	b292      	uxth	r2, r2
 801a30c:	eb01 2818 	add.w	r8, r1, r8, lsr #8
 801a310:	1c51      	adds	r1, r2, #1
 801a312:	f408 4878 	and.w	r8, r8, #63488	; 0xf800
 801a316:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 801a31a:	1c69      	adds	r1, r5, #1
 801a31c:	eb01 2515 	add.w	r5, r1, r5, lsr #8
 801a320:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 801a324:	096d      	lsrs	r5, r5, #5
 801a326:	ea42 0208 	orr.w	r2, r2, r8
 801a32a:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 801a32e:	432a      	orrs	r2, r5
 801a330:	f820 2b02 	strh.w	r2, [r0], #2
 801a334:	e7bd      	b.n	801a2b2 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x10e>
 801a336:	4a14      	ldr	r2, [pc, #80]	; (801a388 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1e4>)
 801a338:	42b0      	cmp	r0, r6
 801a33a:	d21f      	bcs.n	801a37c <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1d8>
 801a33c:	eb00 050e 	add.w	r5, r0, lr
 801a340:	42a8      	cmp	r0, r5
 801a342:	4621      	mov	r1, r4
 801a344:	f104 0403 	add.w	r4, r4, #3
 801a348:	d210      	bcs.n	801a36c <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1c8>
 801a34a:	f814 3c02 	ldrb.w	r3, [r4, #-2]
 801a34e:	f814 1c01 	ldrb.w	r1, [r4, #-1]
 801a352:	00db      	lsls	r3, r3, #3
 801a354:	ea02 2101 	and.w	r1, r2, r1, lsl #8
 801a358:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801a35c:	430b      	orrs	r3, r1
 801a35e:	f814 1c03 	ldrb.w	r1, [r4, #-3]
 801a362:	ea43 03d1 	orr.w	r3, r3, r1, lsr #3
 801a366:	f820 3b02 	strh.w	r3, [r0], #2
 801a36a:	e7e9      	b.n	801a340 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x19c>
 801a36c:	4438      	add	r0, r7
 801a36e:	eb01 040c 	add.w	r4, r1, ip
 801a372:	e7e1      	b.n	801a338 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x194>
 801a374:	4438      	add	r0, r7
 801a376:	eb01 040c 	add.w	r4, r1, ip
 801a37a:	e796      	b.n	801a2aa <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x106>
 801a37c:	4b03      	ldr	r3, [pc, #12]	; (801a38c <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1e8>)
 801a37e:	6818      	ldr	r0, [r3, #0]
 801a380:	6803      	ldr	r3, [r0, #0]
 801a382:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a384:	4798      	blx	r3
 801a386:	e768      	b.n	801a25a <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0xb6>
 801a388:	fffff800 	.word	0xfffff800
 801a38c:	20006df8 	.word	0x20006df8
 801a390:	20006df0 	.word	0x20006df0

0801a394 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb>:
 801a394:	b570      	push	{r4, r5, r6, lr}
 801a396:	9c04      	ldr	r4, [sp, #16]
 801a398:	4605      	mov	r5, r0
 801a39a:	f89d 6018 	ldrb.w	r6, [sp, #24]
 801a39e:	4608      	mov	r0, r1
 801a3a0:	4619      	mov	r1, r3
 801a3a2:	f89d 3014 	ldrb.w	r3, [sp, #20]
 801a3a6:	2a0d      	cmp	r2, #13
 801a3a8:	d825      	bhi.n	801a3f6 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x62>
 801a3aa:	e8df f002 	tbb	[pc, r2]
 801a3ae:	1807      	.short	0x1807
 801a3b0:	1d1d1d13 	.word	0x1d1d1d13
 801a3b4:	1d1d1d1d 	.word	0x1d1d1d1d
 801a3b8:	1d1d1d1d 	.word	0x1d1d1d1d
 801a3bc:	682a      	ldr	r2, [r5, #0]
 801a3be:	e9cd 3604 	strd	r3, r6, [sp, #16]
 801a3c2:	68d6      	ldr	r6, [r2, #12]
 801a3c4:	4623      	mov	r3, r4
 801a3c6:	460a      	mov	r2, r1
 801a3c8:	4601      	mov	r1, r0
 801a3ca:	46b4      	mov	ip, r6
 801a3cc:	4628      	mov	r0, r5
 801a3ce:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801a3d2:	4760      	bx	ip
 801a3d4:	4622      	mov	r2, r4
 801a3d6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801a3da:	f7ff bd8d 	b.w	8019ef8 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 801a3de:	4622      	mov	r2, r4
 801a3e0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801a3e4:	f7ff bede 	b.w	801a1a4 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h>
 801a3e8:	4b03      	ldr	r3, [pc, #12]	; (801a3f8 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x64>)
 801a3ea:	f240 3159 	movw	r1, #857	; 0x359
 801a3ee:	4a03      	ldr	r2, [pc, #12]	; (801a3fc <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x68>)
 801a3f0:	4803      	ldr	r0, [pc, #12]	; (801a400 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x6c>)
 801a3f2:	f001 f91b 	bl	801b62c <__assert_func>
 801a3f6:	bd70      	pop	{r4, r5, r6, pc}
 801a3f8:	0802055d 	.word	0x0802055d
 801a3fc:	08020a46 	.word	0x08020a46
 801a400:	08020498 	.word	0x08020498

0801a404 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>:
 801a404:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a408:	b093      	sub	sp, #76	; 0x4c
 801a40a:	880e      	ldrh	r6, [r1, #0]
 801a40c:	4681      	mov	r9, r0
 801a40e:	4688      	mov	r8, r1
 801a410:	4615      	mov	r5, r2
 801a412:	f89d a070 	ldrb.w	sl, [sp, #112]	; 0x70
 801a416:	b136      	cbz	r6, 801a426 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x22>
 801a418:	4b70      	ldr	r3, [pc, #448]	; (801a5dc <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1d8>)
 801a41a:	f44f 71c3 	mov.w	r1, #390	; 0x186
 801a41e:	4a70      	ldr	r2, [pc, #448]	; (801a5e0 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1dc>)
 801a420:	4870      	ldr	r0, [pc, #448]	; (801a5e4 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1e0>)
 801a422:	f001 f903 	bl	801b62c <__assert_func>
 801a426:	6810      	ldr	r0, [r2, #0]
 801a428:	ac0e      	add	r4, sp, #56	; 0x38
 801a42a:	6851      	ldr	r1, [r2, #4]
 801a42c:	4f6e      	ldr	r7, [pc, #440]	; (801a5e8 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1e4>)
 801a42e:	f8df b1bc 	ldr.w	fp, [pc, #444]	; 801a5ec <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1e8>
 801a432:	c403      	stmia	r4!, {r0, r1}
 801a434:	6818      	ldr	r0, [r3, #0]
 801a436:	ac10      	add	r4, sp, #64	; 0x40
 801a438:	6859      	ldr	r1, [r3, #4]
 801a43a:	c403      	stmia	r4!, {r0, r1}
 801a43c:	a80e      	add	r0, sp, #56	; 0x38
 801a43e:	f7fd fd01 	bl	8017e44 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801a442:	4629      	mov	r1, r5
 801a444:	a810      	add	r0, sp, #64	; 0x40
 801a446:	f7fd fd25 	bl	8017e94 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801a44a:	f9bd 2040 	ldrsh.w	r2, [sp, #64]	; 0x40
 801a44e:	f9bd 3042 	ldrsh.w	r3, [sp, #66]	; 0x42
 801a452:	f8bd 103c 	ldrh.w	r1, [sp, #60]	; 0x3c
 801a456:	6838      	ldr	r0, [r7, #0]
 801a458:	fb11 2103 	smlabb	r1, r1, r3, r2
 801a45c:	f9bd 4044 	ldrsh.w	r4, [sp, #68]	; 0x44
 801a460:	f9bd 5046 	ldrsh.w	r5, [sp, #70]	; 0x46
 801a464:	4489      	add	r9, r1
 801a466:	f8bd 1038 	ldrh.w	r1, [sp, #56]	; 0x38
 801a46a:	440a      	add	r2, r1
 801a46c:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 801a470:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 801a474:	4413      	add	r3, r2
 801a476:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 801a47a:	6803      	ldr	r3, [r0, #0]
 801a47c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801a47e:	4798      	blx	r3
 801a480:	f010 0f80 	tst.w	r0, #128	; 0x80
 801a484:	6838      	ldr	r0, [r7, #0]
 801a486:	d01d      	beq.n	801a4c4 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xc0>
 801a488:	210b      	movs	r1, #11
 801a48a:	6802      	ldr	r2, [r0, #0]
 801a48c:	b2a4      	uxth	r4, r4
 801a48e:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 801a492:	9107      	str	r1, [sp, #28]
 801a494:	b2ad      	uxth	r5, r5
 801a496:	e9cd 6608 	strd	r6, r6, [sp, #32]
 801a49a:	f8bb 1000 	ldrh.w	r1, [fp]
 801a49e:	9502      	str	r5, [sp, #8]
 801a4a0:	9106      	str	r1, [sp, #24]
 801a4a2:	2101      	movs	r1, #1
 801a4a4:	9401      	str	r4, [sp, #4]
 801a4a6:	e9cd a104 	strd	sl, r1, [sp, #16]
 801a4aa:	f8bd 103c 	ldrh.w	r1, [sp, #60]	; 0x3c
 801a4ae:	9103      	str	r1, [sp, #12]
 801a4b0:	f8bd 1042 	ldrh.w	r1, [sp, #66]	; 0x42
 801a4b4:	9100      	str	r1, [sp, #0]
 801a4b6:	4649      	mov	r1, r9
 801a4b8:	6bd4      	ldr	r4, [r2, #60]	; 0x3c
 801a4ba:	4642      	mov	r2, r8
 801a4bc:	47a0      	blx	r4
 801a4be:	b013      	add	sp, #76	; 0x4c
 801a4c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a4c4:	6803      	ldr	r3, [r0, #0]
 801a4c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801a4c8:	4798      	blx	r3
 801a4ca:	f8bb 3000 	ldrh.w	r3, [fp]
 801a4ce:	f9bd 2042 	ldrsh.w	r2, [sp, #66]	; 0x42
 801a4d2:	f04f 0e04 	mov.w	lr, #4
 801a4d6:	f9bd 1040 	ldrsh.w	r1, [sp, #64]	; 0x40
 801a4da:	435d      	muls	r5, r3
 801a4dc:	fb03 1202 	mla	r2, r3, r2, r1
 801a4e0:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 801a4e4:	eb00 0245 	add.w	r2, r0, r5, lsl #1
 801a4e8:	920c      	str	r2, [sp, #48]	; 0x30
 801a4ea:	f9bd 203c 	ldrsh.w	r2, [sp, #60]	; 0x3c
 801a4ee:	1b12      	subs	r2, r2, r4
 801a4f0:	920d      	str	r2, [sp, #52]	; 0x34
 801a4f2:	0062      	lsls	r2, r4, #1
 801a4f4:	1b1c      	subs	r4, r3, r4
 801a4f6:	920a      	str	r2, [sp, #40]	; 0x28
 801a4f8:	0063      	lsls	r3, r4, #1
 801a4fa:	930b      	str	r3, [sp, #44]	; 0x2c
 801a4fc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801a4fe:	4298      	cmp	r0, r3
 801a500:	d266      	bcs.n	801a5d0 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1cc>
 801a502:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801a504:	eb00 0b03 	add.w	fp, r0, r3
 801a508:	4558      	cmp	r0, fp
 801a50a:	d25c      	bcs.n	801a5c6 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1c2>
 801a50c:	f819 3b01 	ldrb.w	r3, [r9], #1
 801a510:	fb1e e303 	smlabb	r3, lr, r3, lr
 801a514:	f858 2003 	ldr.w	r2, [r8, r3]
 801a518:	0e11      	lsrs	r1, r2, #24
 801a51a:	d012      	beq.n	801a542 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x13e>
 801a51c:	29ff      	cmp	r1, #255	; 0xff
 801a51e:	ea4f 2712 	mov.w	r7, r2, lsr #8
 801a522:	d110      	bne.n	801a546 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x142>
 801a524:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 801a528:	d10d      	bne.n	801a546 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x142>
 801a52a:	0953      	lsrs	r3, r2, #5
 801a52c:	f427 67ff 	bic.w	r7, r7, #2040	; 0x7f8
 801a530:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 801a534:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801a538:	f027 0707 	bic.w	r7, r7, #7
 801a53c:	431f      	orrs	r7, r3
 801a53e:	433a      	orrs	r2, r7
 801a540:	8002      	strh	r2, [r0, #0]
 801a542:	3002      	adds	r0, #2
 801a544:	e7e0      	b.n	801a508 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x104>
 801a546:	fb0a f101 	mul.w	r1, sl, r1
 801a54a:	8806      	ldrh	r6, [r0, #0]
 801a54c:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 801a550:	b2d2      	uxtb	r2, r2
 801a552:	1c4b      	adds	r3, r1, #1
 801a554:	1235      	asrs	r5, r6, #8
 801a556:	10f4      	asrs	r4, r6, #3
 801a558:	eb03 2321 	add.w	r3, r3, r1, asr #8
 801a55c:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 801a560:	00f6      	lsls	r6, r6, #3
 801a562:	f004 04fc 	and.w	r4, r4, #252	; 0xfc
 801a566:	121b      	asrs	r3, r3, #8
 801a568:	b2f6      	uxtb	r6, r6
 801a56a:	b299      	uxth	r1, r3
 801a56c:	43db      	mvns	r3, r3
 801a56e:	ea45 1555 	orr.w	r5, r5, r5, lsr #5
 801a572:	fb1c fc01 	smulbb	ip, ip, r1
 801a576:	b2db      	uxtb	r3, r3
 801a578:	fb12 f201 	smulbb	r2, r2, r1
 801a57c:	ea46 1656 	orr.w	r6, r6, r6, lsr #5
 801a580:	fb05 c503 	mla	r5, r5, r3, ip
 801a584:	b2ff      	uxtb	r7, r7
 801a586:	fb06 2203 	mla	r2, r6, r3, r2
 801a58a:	ea44 1494 	orr.w	r4, r4, r4, lsr #6
 801a58e:	fb17 f701 	smulbb	r7, r7, r1
 801a592:	b2ad      	uxth	r5, r5
 801a594:	b292      	uxth	r2, r2
 801a596:	fb04 7403 	mla	r4, r4, r3, r7
 801a59a:	f105 0c01 	add.w	ip, r5, #1
 801a59e:	1c57      	adds	r7, r2, #1
 801a5a0:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
 801a5a4:	eb07 2712 	add.w	r7, r7, r2, lsr #8
 801a5a8:	b2a4      	uxth	r4, r4
 801a5aa:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 801a5ae:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 801a5b2:	433d      	orrs	r5, r7
 801a5b4:	1c67      	adds	r7, r4, #1
 801a5b6:	eb07 2414 	add.w	r4, r7, r4, lsr #8
 801a5ba:	0964      	lsrs	r4, r4, #5
 801a5bc:	f404 64fc 	and.w	r4, r4, #2016	; 0x7e0
 801a5c0:	4325      	orrs	r5, r4
 801a5c2:	8005      	strh	r5, [r0, #0]
 801a5c4:	e7bd      	b.n	801a542 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x13e>
 801a5c6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801a5c8:	4418      	add	r0, r3
 801a5ca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801a5cc:	4499      	add	r9, r3
 801a5ce:	e795      	b.n	801a4fc <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xf8>
 801a5d0:	4b05      	ldr	r3, [pc, #20]	; (801a5e8 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1e4>)
 801a5d2:	6818      	ldr	r0, [r3, #0]
 801a5d4:	6803      	ldr	r3, [r0, #0]
 801a5d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a5d8:	4798      	blx	r3
 801a5da:	e770      	b.n	801a4be <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xba>
 801a5dc:	08020348 	.word	0x08020348
 801a5e0:	08020867 	.word	0x08020867
 801a5e4:	08020498 	.word	0x08020498
 801a5e8:	20006df8 	.word	0x20006df8
 801a5ec:	20006df0 	.word	0x20006df0

0801a5f0 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h>:
 801a5f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a5f4:	4614      	mov	r4, r2
 801a5f6:	880a      	ldrh	r2, [r1, #0]
 801a5f8:	b087      	sub	sp, #28
 801a5fa:	4680      	mov	r8, r0
 801a5fc:	2a02      	cmp	r2, #2
 801a5fe:	460d      	mov	r5, r1
 801a600:	f89d 6040 	ldrb.w	r6, [sp, #64]	; 0x40
 801a604:	d006      	beq.n	801a614 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x24>
 801a606:	4b63      	ldr	r3, [pc, #396]	; (801a794 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x1a4>)
 801a608:	f240 11dd 	movw	r1, #477	; 0x1dd
 801a60c:	4a62      	ldr	r2, [pc, #392]	; (801a798 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x1a8>)
 801a60e:	4863      	ldr	r0, [pc, #396]	; (801a79c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x1ac>)
 801a610:	f001 f80c 	bl	801b62c <__assert_func>
 801a614:	2e00      	cmp	r6, #0
 801a616:	f000 80b9 	beq.w	801a78c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x19c>
 801a61a:	6820      	ldr	r0, [r4, #0]
 801a61c:	af02      	add	r7, sp, #8
 801a61e:	6861      	ldr	r1, [r4, #4]
 801a620:	c703      	stmia	r7!, {r0, r1}
 801a622:	6818      	ldr	r0, [r3, #0]
 801a624:	af04      	add	r7, sp, #16
 801a626:	6859      	ldr	r1, [r3, #4]
 801a628:	c703      	stmia	r7!, {r0, r1}
 801a62a:	a802      	add	r0, sp, #8
 801a62c:	f7fd fc0a 	bl	8017e44 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801a630:	4621      	mov	r1, r4
 801a632:	a804      	add	r0, sp, #16
 801a634:	f7fd fc2e 	bl	8017e94 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801a638:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 801a63c:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 801a640:	f8bd 400c 	ldrh.w	r4, [sp, #12]
 801a644:	f9bd 7016 	ldrsh.w	r7, [sp, #22]
 801a648:	fb14 2103 	smlabb	r1, r4, r3, r2
 801a64c:	eb08 0401 	add.w	r4, r8, r1
 801a650:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 801a654:	f9bd 8014 	ldrsh.w	r8, [sp, #20]
 801a658:	440a      	add	r2, r1
 801a65a:	ea4f 0a48 	mov.w	sl, r8, lsl #1
 801a65e:	f8ad 2010 	strh.w	r2, [sp, #16]
 801a662:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 801a666:	4413      	add	r3, r2
 801a668:	f8ad 3012 	strh.w	r3, [sp, #18]
 801a66c:	4b4c      	ldr	r3, [pc, #304]	; (801a7a0 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x1b0>)
 801a66e:	6818      	ldr	r0, [r3, #0]
 801a670:	6803      	ldr	r3, [r0, #0]
 801a672:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801a674:	4798      	blx	r3
 801a676:	4b4b      	ldr	r3, [pc, #300]	; (801a7a4 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x1b4>)
 801a678:	f9bd 1012 	ldrsh.w	r1, [sp, #18]
 801a67c:	2eff      	cmp	r6, #255	; 0xff
 801a67e:	881a      	ldrh	r2, [r3, #0]
 801a680:	f9bd c010 	ldrsh.w	ip, [sp, #16]
 801a684:	fb02 c101 	mla	r1, r2, r1, ip
 801a688:	fb02 f207 	mul.w	r2, r2, r7
 801a68c:	eb00 0041 	add.w	r0, r0, r1, lsl #1
 801a690:	f105 0104 	add.w	r1, r5, #4
 801a694:	461d      	mov	r5, r3
 801a696:	d05a      	beq.n	801a74e <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x15e>
 801a698:	f1c6 0eff 	rsb	lr, r6, #255	; 0xff
 801a69c:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 801a6a0:	b2b6      	uxth	r6, r6
 801a6a2:	9301      	str	r3, [sp, #4]
 801a6a4:	fa1f fe8e 	uxth.w	lr, lr
 801a6a8:	4282      	cmp	r2, r0
 801a6aa:	d96a      	bls.n	801a782 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x192>
 801a6ac:	eb00 0b0a 	add.w	fp, r0, sl
 801a6b0:	4583      	cmp	fp, r0
 801a6b2:	d940      	bls.n	801a736 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x146>
 801a6b4:	8805      	ldrh	r5, [r0, #0]
 801a6b6:	f814 3b01 	ldrb.w	r3, [r4], #1
 801a6ba:	122f      	asrs	r7, r5, #8
 801a6bc:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 801a6c0:	ea4f 09e5 	mov.w	r9, r5, asr #3
 801a6c4:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801a6c8:	00ed      	lsls	r5, r5, #3
 801a6ca:	ea4f 2c23 	mov.w	ip, r3, asr #8
 801a6ce:	f009 09fc 	and.w	r9, r9, #252	; 0xfc
 801a6d2:	fb17 f70e 	smulbb	r7, r7, lr
 801a6d6:	b2ed      	uxtb	r5, r5
 801a6d8:	fb19 f90e 	smulbb	r9, r9, lr
 801a6dc:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801a6e0:	fb15 f50e 	smulbb	r5, r5, lr
 801a6e4:	fb0c 7c06 	mla	ip, ip, r6, r7
 801a6e8:	10df      	asrs	r7, r3, #3
 801a6ea:	00db      	lsls	r3, r3, #3
 801a6ec:	fa1f fc8c 	uxth.w	ip, ip
 801a6f0:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801a6f4:	b2db      	uxtb	r3, r3
 801a6f6:	fb07 9706 	mla	r7, r7, r6, r9
 801a6fa:	f10c 0901 	add.w	r9, ip, #1
 801a6fe:	fb03 5306 	mla	r3, r3, r6, r5
 801a702:	eb09 2c1c 	add.w	ip, r9, ip, lsr #8
 801a706:	b29b      	uxth	r3, r3
 801a708:	f40c 4978 	and.w	r9, ip, #63488	; 0xf800
 801a70c:	b2bf      	uxth	r7, r7
 801a70e:	f103 0c01 	add.w	ip, r3, #1
 801a712:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 801a716:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 801a71a:	ea4c 0c09 	orr.w	ip, ip, r9
 801a71e:	f107 0901 	add.w	r9, r7, #1
 801a722:	eb09 2717 	add.w	r7, r9, r7, lsr #8
 801a726:	097f      	lsrs	r7, r7, #5
 801a728:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 801a72c:	ea4c 0c07 	orr.w	ip, ip, r7
 801a730:	f820 cb02 	strh.w	ip, [r0], #2
 801a734:	e7bc      	b.n	801a6b0 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0xc0>
 801a736:	9b01      	ldr	r3, [sp, #4]
 801a738:	881b      	ldrh	r3, [r3, #0]
 801a73a:	eba3 0308 	sub.w	r3, r3, r8
 801a73e:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801a742:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 801a746:	eba3 0308 	sub.w	r3, r3, r8
 801a74a:	441c      	add	r4, r3
 801a74c:	e7ac      	b.n	801a6a8 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0xb8>
 801a74e:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 801a752:	4282      	cmp	r2, r0
 801a754:	d915      	bls.n	801a782 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x192>
 801a756:	eb00 060a 	add.w	r6, r0, sl
 801a75a:	4286      	cmp	r6, r0
 801a75c:	d906      	bls.n	801a76c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x17c>
 801a75e:	f814 3b01 	ldrb.w	r3, [r4], #1
 801a762:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 801a766:	f820 3b02 	strh.w	r3, [r0], #2
 801a76a:	e7f6      	b.n	801a75a <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x16a>
 801a76c:	882b      	ldrh	r3, [r5, #0]
 801a76e:	eba3 0308 	sub.w	r3, r3, r8
 801a772:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801a776:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 801a77a:	eba3 0308 	sub.w	r3, r3, r8
 801a77e:	441c      	add	r4, r3
 801a780:	e7e7      	b.n	801a752 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x162>
 801a782:	4b07      	ldr	r3, [pc, #28]	; (801a7a0 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x1b0>)
 801a784:	6818      	ldr	r0, [r3, #0]
 801a786:	6803      	ldr	r3, [r0, #0]
 801a788:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a78a:	4798      	blx	r3
 801a78c:	b007      	add	sp, #28
 801a78e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a792:	bf00      	nop
 801a794:	08020278 	.word	0x08020278
 801a798:	080206d1 	.word	0x080206d1
 801a79c:	08020498 	.word	0x08020498
 801a7a0:	20006df8 	.word	0x20006df8
 801a7a4:	20006df0 	.word	0x20006df0

0801a7a8 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>:
 801a7a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a7ac:	f8b1 9000 	ldrh.w	r9, [r1]
 801a7b0:	b091      	sub	sp, #68	; 0x44
 801a7b2:	4604      	mov	r4, r0
 801a7b4:	460f      	mov	r7, r1
 801a7b6:	f1b9 0f01 	cmp.w	r9, #1
 801a7ba:	4690      	mov	r8, r2
 801a7bc:	f89d 5068 	ldrb.w	r5, [sp, #104]	; 0x68
 801a7c0:	d006      	beq.n	801a7d0 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x28>
 801a7c2:	4b84      	ldr	r3, [pc, #528]	; (801a9d4 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x22c>)
 801a7c4:	f240 212b 	movw	r1, #555	; 0x22b
 801a7c8:	4a83      	ldr	r2, [pc, #524]	; (801a9d8 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x230>)
 801a7ca:	4884      	ldr	r0, [pc, #528]	; (801a9dc <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x234>)
 801a7cc:	f000 ff2e 	bl	801b62c <__assert_func>
 801a7d0:	2d00      	cmp	r5, #0
 801a7d2:	d04f      	beq.n	801a874 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xcc>
 801a7d4:	6810      	ldr	r0, [r2, #0]
 801a7d6:	ae0c      	add	r6, sp, #48	; 0x30
 801a7d8:	6851      	ldr	r1, [r2, #4]
 801a7da:	f8df b208 	ldr.w	fp, [pc, #520]	; 801a9e4 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x23c>
 801a7de:	c603      	stmia	r6!, {r0, r1}
 801a7e0:	6818      	ldr	r0, [r3, #0]
 801a7e2:	ae0e      	add	r6, sp, #56	; 0x38
 801a7e4:	6859      	ldr	r1, [r3, #4]
 801a7e6:	c603      	stmia	r6!, {r0, r1}
 801a7e8:	a80c      	add	r0, sp, #48	; 0x30
 801a7ea:	f7fd fb2b 	bl	8017e44 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801a7ee:	4641      	mov	r1, r8
 801a7f0:	a80e      	add	r0, sp, #56	; 0x38
 801a7f2:	f8df 81f4 	ldr.w	r8, [pc, #500]	; 801a9e8 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x240>
 801a7f6:	f7fd fb4d 	bl	8017e94 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801a7fa:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	; 0x38
 801a7fe:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 801a802:	f8bd 1034 	ldrh.w	r1, [sp, #52]	; 0x34
 801a806:	f8db 0000 	ldr.w	r0, [fp]
 801a80a:	fb11 2103 	smlabb	r1, r1, r3, r2
 801a80e:	f9bd 603c 	ldrsh.w	r6, [sp, #60]	; 0x3c
 801a812:	f9bd a03e 	ldrsh.w	sl, [sp, #62]	; 0x3e
 801a816:	440c      	add	r4, r1
 801a818:	f8bd 1030 	ldrh.w	r1, [sp, #48]	; 0x30
 801a81c:	440a      	add	r2, r1
 801a81e:	f8ad 2038 	strh.w	r2, [sp, #56]	; 0x38
 801a822:	f8bd 2032 	ldrh.w	r2, [sp, #50]	; 0x32
 801a826:	4413      	add	r3, r2
 801a828:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 801a82c:	6803      	ldr	r3, [r0, #0]
 801a82e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801a830:	4798      	blx	r3
 801a832:	f010 0f80 	tst.w	r0, #128	; 0x80
 801a836:	f8db 0000 	ldr.w	r0, [fp]
 801a83a:	d01e      	beq.n	801a87a <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xd2>
 801a83c:	2200      	movs	r2, #0
 801a83e:	6801      	ldr	r1, [r0, #0]
 801a840:	b2b6      	uxth	r6, r6
 801a842:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 801a846:	e9cd 2208 	strd	r2, r2, [sp, #32]
 801a84a:	220b      	movs	r2, #11
 801a84c:	9207      	str	r2, [sp, #28]
 801a84e:	f8b8 2000 	ldrh.w	r2, [r8]
 801a852:	9504      	str	r5, [sp, #16]
 801a854:	9601      	str	r6, [sp, #4]
 801a856:	e9cd 9205 	strd	r9, r2, [sp, #20]
 801a85a:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 801a85e:	9203      	str	r2, [sp, #12]
 801a860:	fa1f f28a 	uxth.w	r2, sl
 801a864:	9202      	str	r2, [sp, #8]
 801a866:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 801a86a:	9200      	str	r2, [sp, #0]
 801a86c:	463a      	mov	r2, r7
 801a86e:	6bcd      	ldr	r5, [r1, #60]	; 0x3c
 801a870:	4621      	mov	r1, r4
 801a872:	47a8      	blx	r5
 801a874:	b011      	add	sp, #68	; 0x44
 801a876:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a87a:	6803      	ldr	r3, [r0, #0]
 801a87c:	ea4f 0946 	mov.w	r9, r6, lsl #1
 801a880:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801a882:	4798      	blx	r3
 801a884:	f8b8 2000 	ldrh.w	r2, [r8]
 801a888:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 801a88c:	2dff      	cmp	r5, #255	; 0xff
 801a88e:	f9bd 1038 	ldrsh.w	r1, [sp, #56]	; 0x38
 801a892:	fb0a fa02 	mul.w	sl, sl, r2
 801a896:	fb02 1303 	mla	r3, r2, r3, r1
 801a89a:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801a89e:	d062      	beq.n	801a966 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1be>
 801a8a0:	ea6f 0c05 	mvn.w	ip, r5
 801a8a4:	eb00 034a 	add.w	r3, r0, sl, lsl #1
 801a8a8:	b2ad      	uxth	r5, r5
 801a8aa:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
 801a8ae:	fa5f fc8c 	uxtb.w	ip, ip
 801a8b2:	930a      	str	r3, [sp, #40]	; 0x28
 801a8b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801a8b6:	4298      	cmp	r0, r3
 801a8b8:	f080 8085 	bcs.w	801a9c6 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x21e>
 801a8bc:	eb00 0b09 	add.w	fp, r0, r9
 801a8c0:	4558      	cmp	r0, fp
 801a8c2:	d246      	bcs.n	801a952 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1aa>
 801a8c4:	f814 eb01 	ldrb.w	lr, [r4], #1
 801a8c8:	2303      	movs	r3, #3
 801a8ca:	2204      	movs	r2, #4
 801a8cc:	fb13 2e0e 	smlabb	lr, r3, lr, r2
 801a8d0:	8803      	ldrh	r3, [r0, #0]
 801a8d2:	eb07 0a0e 	add.w	sl, r7, lr
 801a8d6:	1219      	asrs	r1, r3, #8
 801a8d8:	10da      	asrs	r2, r3, #3
 801a8da:	f817 e00e 	ldrb.w	lr, [r7, lr]
 801a8de:	f89a 8002 	ldrb.w	r8, [sl, #2]
 801a8e2:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 801a8e6:	00db      	lsls	r3, r3, #3
 801a8e8:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 801a8ec:	fb18 f805 	smulbb	r8, r8, r5
 801a8f0:	ea41 1151 	orr.w	r1, r1, r1, lsr #5
 801a8f4:	fb1e fe05 	smulbb	lr, lr, r5
 801a8f8:	b2db      	uxtb	r3, r3
 801a8fa:	fb01 810c 	mla	r1, r1, ip, r8
 801a8fe:	f89a 8001 	ldrb.w	r8, [sl, #1]
 801a902:	ea42 1292 	orr.w	r2, r2, r2, lsr #6
 801a906:	fb18 f805 	smulbb	r8, r8, r5
 801a90a:	ea43 1353 	orr.w	r3, r3, r3, lsr #5
 801a90e:	b289      	uxth	r1, r1
 801a910:	fb02 820c 	mla	r2, r2, ip, r8
 801a914:	fb03 e30c 	mla	r3, r3, ip, lr
 801a918:	f101 0801 	add.w	r8, r1, #1
 801a91c:	b292      	uxth	r2, r2
 801a91e:	b29b      	uxth	r3, r3
 801a920:	eb08 2111 	add.w	r1, r8, r1, lsr #8
 801a924:	f102 0801 	add.w	r8, r2, #1
 801a928:	f103 0e01 	add.w	lr, r3, #1
 801a92c:	eb08 2812 	add.w	r8, r8, r2, lsr #8
 801a930:	f401 4178 	and.w	r1, r1, #63488	; 0xf800
 801a934:	eb0e 2e13 	add.w	lr, lr, r3, lsr #8
 801a938:	ea4f 1858 	mov.w	r8, r8, lsr #5
 801a93c:	f3ce 2ec4 	ubfx	lr, lr, #11, #5
 801a940:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
 801a944:	ea4e 0101 	orr.w	r1, lr, r1
 801a948:	ea41 0108 	orr.w	r1, r1, r8
 801a94c:	f820 1b02 	strh.w	r1, [r0], #2
 801a950:	e7b6      	b.n	801a8c0 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x118>
 801a952:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801a954:	881b      	ldrh	r3, [r3, #0]
 801a956:	1b9b      	subs	r3, r3, r6
 801a958:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801a95c:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	; 0x34
 801a960:	1b9b      	subs	r3, r3, r6
 801a962:	441c      	add	r4, r3
 801a964:	e7a6      	b.n	801a8b4 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x10c>
 801a966:	eb00 0a4a 	add.w	sl, r0, sl, lsl #1
 801a96a:	2203      	movs	r2, #3
 801a96c:	2504      	movs	r5, #4
 801a96e:	491c      	ldr	r1, [pc, #112]	; (801a9e0 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x238>)
 801a970:	4550      	cmp	r0, sl
 801a972:	d228      	bcs.n	801a9c6 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x21e>
 801a974:	eb00 0c09 	add.w	ip, r0, r9
 801a978:	4560      	cmp	r0, ip
 801a97a:	4623      	mov	r3, r4
 801a97c:	d219      	bcs.n	801a9b2 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x20a>
 801a97e:	f893 e000 	ldrb.w	lr, [r3]
 801a982:	3401      	adds	r4, #1
 801a984:	fb12 5e0e 	smlabb	lr, r2, lr, r5
 801a988:	eb07 0b0e 	add.w	fp, r7, lr
 801a98c:	f817 e00e 	ldrb.w	lr, [r7, lr]
 801a990:	f89b 3002 	ldrb.w	r3, [fp, #2]
 801a994:	f89b b001 	ldrb.w	fp, [fp, #1]
 801a998:	ea01 2303 	and.w	r3, r1, r3, lsl #8
 801a99c:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 801a9a0:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 801a9a4:	ea43 030b 	orr.w	r3, r3, fp
 801a9a8:	ea43 03de 	orr.w	r3, r3, lr, lsr #3
 801a9ac:	f820 3b02 	strh.w	r3, [r0], #2
 801a9b0:	e7e2      	b.n	801a978 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1d0>
 801a9b2:	f8b8 3000 	ldrh.w	r3, [r8]
 801a9b6:	1b9b      	subs	r3, r3, r6
 801a9b8:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801a9bc:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	; 0x34
 801a9c0:	1b9b      	subs	r3, r3, r6
 801a9c2:	441c      	add	r4, r3
 801a9c4:	e7d4      	b.n	801a970 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1c8>
 801a9c6:	4b07      	ldr	r3, [pc, #28]	; (801a9e4 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x23c>)
 801a9c8:	6818      	ldr	r0, [r3, #0]
 801a9ca:	6803      	ldr	r3, [r0, #0]
 801a9cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a9ce:	4798      	blx	r3
 801a9d0:	e750      	b.n	801a874 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xcc>
 801a9d2:	bf00      	nop
 801a9d4:	080202c6 	.word	0x080202c6
 801a9d8:	0802075a 	.word	0x0802075a
 801a9dc:	08020498 	.word	0x08020498
 801a9e0:	fffff800 	.word	0xfffff800
 801a9e4:	20006df8 	.word	0x20006df8
 801a9e8:	20006df0 	.word	0x20006df0

0801a9ec <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>:
 801a9ec:	b430      	push	{r4, r5}
 801a9ee:	780d      	ldrb	r5, [r1, #0]
 801a9f0:	f89d 4008 	ldrb.w	r4, [sp, #8]
 801a9f4:	2d01      	cmp	r5, #1
 801a9f6:	d00a      	beq.n	801aa0e <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x22>
 801a9f8:	d305      	bcc.n	801aa06 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x1a>
 801a9fa:	2d02      	cmp	r5, #2
 801a9fc:	d10b      	bne.n	801aa16 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x2a>
 801a9fe:	9402      	str	r4, [sp, #8]
 801aa00:	bc30      	pop	{r4, r5}
 801aa02:	f7ff bdf5 	b.w	801a5f0 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h>
 801aa06:	9402      	str	r4, [sp, #8]
 801aa08:	bc30      	pop	{r4, r5}
 801aa0a:	f7ff bcfb 	b.w	801a404 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>
 801aa0e:	9402      	str	r4, [sp, #8]
 801aa10:	bc30      	pop	{r4, r5}
 801aa12:	f7ff bec9 	b.w	801a7a8 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>
 801aa16:	bc30      	pop	{r4, r5}
 801aa18:	4770      	bx	lr
	...

0801aa1c <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>:
 801aa1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801aa20:	b087      	sub	sp, #28
 801aa22:	4604      	mov	r4, r0
 801aa24:	460e      	mov	r6, r1
 801aa26:	6810      	ldr	r0, [r2, #0]
 801aa28:	6851      	ldr	r1, [r2, #4]
 801aa2a:	ad02      	add	r5, sp, #8
 801aa2c:	4617      	mov	r7, r2
 801aa2e:	f89d a040 	ldrb.w	sl, [sp, #64]	; 0x40
 801aa32:	f8df 9230 	ldr.w	r9, [pc, #560]	; 801ac64 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x248>
 801aa36:	c503      	stmia	r5!, {r0, r1}
 801aa38:	6818      	ldr	r0, [r3, #0]
 801aa3a:	ad04      	add	r5, sp, #16
 801aa3c:	6859      	ldr	r1, [r3, #4]
 801aa3e:	c503      	stmia	r5!, {r0, r1}
 801aa40:	a802      	add	r0, sp, #8
 801aa42:	f7fd f9ff 	bl	8017e44 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801aa46:	4639      	mov	r1, r7
 801aa48:	a804      	add	r0, sp, #16
 801aa4a:	f7fd fa23 	bl	8017e94 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801aa4e:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 801aa52:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 801aa56:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 801aa5a:	f9bd 8014 	ldrsh.w	r8, [sp, #20]
 801aa5e:	fb11 2103 	smlabb	r1, r1, r3, r2
 801aa62:	f9bd 5016 	ldrsh.w	r5, [sp, #22]
 801aa66:	eb04 0441 	add.w	r4, r4, r1, lsl #1
 801aa6a:	440e      	add	r6, r1
 801aa6c:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 801aa70:	440a      	add	r2, r1
 801aa72:	f8ad 2010 	strh.w	r2, [sp, #16]
 801aa76:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 801aa7a:	4413      	add	r3, r2
 801aa7c:	f8ad 3012 	strh.w	r3, [sp, #18]
 801aa80:	4b77      	ldr	r3, [pc, #476]	; (801ac60 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x244>)
 801aa82:	6818      	ldr	r0, [r3, #0]
 801aa84:	6803      	ldr	r3, [r0, #0]
 801aa86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801aa88:	4798      	blx	r3
 801aa8a:	f8b9 b000 	ldrh.w	fp, [r9]
 801aa8e:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 801aa92:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 801aa96:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 801aa9a:	fb05 f50b 	mul.w	r5, r5, fp
 801aa9e:	fb0b 2303 	mla	r3, fp, r3, r2
 801aaa2:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801aaa6:	ea4f 0348 	mov.w	r3, r8, lsl #1
 801aaaa:	9300      	str	r3, [sp, #0]
 801aaac:	d069      	beq.n	801ab82 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x166>
 801aaae:	eb00 0b45 	add.w	fp, r0, r5, lsl #1
 801aab2:	4558      	cmp	r0, fp
 801aab4:	f080 80cc 	bcs.w	801ac50 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x234>
 801aab8:	9b00      	ldr	r3, [sp, #0]
 801aaba:	4631      	mov	r1, r6
 801aabc:	18c3      	adds	r3, r0, r3
 801aabe:	9301      	str	r3, [sp, #4]
 801aac0:	9b01      	ldr	r3, [sp, #4]
 801aac2:	4298      	cmp	r0, r3
 801aac4:	d24f      	bcs.n	801ab66 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x14a>
 801aac6:	f811 2b01 	ldrb.w	r2, [r1], #1
 801aaca:	2a00      	cmp	r2, #0
 801aacc:	d048      	beq.n	801ab60 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x144>
 801aace:	fb0a f202 	mul.w	r2, sl, r2
 801aad2:	1c53      	adds	r3, r2, #1
 801aad4:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 801aad8:	121b      	asrs	r3, r3, #8
 801aada:	d041      	beq.n	801ab60 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x144>
 801aadc:	8802      	ldrh	r2, [r0, #0]
 801aade:	b29e      	uxth	r6, r3
 801aae0:	f8b4 c000 	ldrh.w	ip, [r4]
 801aae4:	43db      	mvns	r3, r3
 801aae6:	1215      	asrs	r5, r2, #8
 801aae8:	b2db      	uxtb	r3, r3
 801aaea:	ea4f 272c 	mov.w	r7, ip, asr #8
 801aaee:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 801aaf2:	ea4f 0ee2 	mov.w	lr, r2, asr #3
 801aaf6:	fb15 f503 	smulbb	r5, r5, r3
 801aafa:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801aafe:	00d2      	lsls	r2, r2, #3
 801ab00:	f00e 0efc 	and.w	lr, lr, #252	; 0xfc
 801ab04:	fb07 5706 	mla	r7, r7, r6, r5
 801ab08:	ea4f 05ec 	mov.w	r5, ip, asr #3
 801ab0c:	b2d2      	uxtb	r2, r2
 801ab0e:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 801ab12:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 801ab16:	fb1e fe03 	smulbb	lr, lr, r3
 801ab1a:	b2bf      	uxth	r7, r7
 801ab1c:	fb12 f203 	smulbb	r2, r2, r3
 801ab20:	fa5f fc8c 	uxtb.w	ip, ip
 801ab24:	fb05 e506 	mla	r5, r5, r6, lr
 801ab28:	f107 0e01 	add.w	lr, r7, #1
 801ab2c:	fb0c 2c06 	mla	ip, ip, r6, r2
 801ab30:	eb0e 2717 	add.w	r7, lr, r7, lsr #8
 801ab34:	fa1f fc8c 	uxth.w	ip, ip
 801ab38:	f407 4e78 	and.w	lr, r7, #63488	; 0xf800
 801ab3c:	b2ad      	uxth	r5, r5
 801ab3e:	f10c 0701 	add.w	r7, ip, #1
 801ab42:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 801ab46:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 801ab4a:	ea47 070e 	orr.w	r7, r7, lr
 801ab4e:	f105 0e01 	add.w	lr, r5, #1
 801ab52:	eb0e 2515 	add.w	r5, lr, r5, lsr #8
 801ab56:	096d      	lsrs	r5, r5, #5
 801ab58:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 801ab5c:	432f      	orrs	r7, r5
 801ab5e:	8007      	strh	r7, [r0, #0]
 801ab60:	3002      	adds	r0, #2
 801ab62:	3402      	adds	r4, #2
 801ab64:	e7ac      	b.n	801aac0 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0xa4>
 801ab66:	f8b9 3000 	ldrh.w	r3, [r9]
 801ab6a:	f9bd 600c 	ldrsh.w	r6, [sp, #12]
 801ab6e:	eba3 0308 	sub.w	r3, r3, r8
 801ab72:	eba6 0608 	sub.w	r6, r6, r8
 801ab76:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801ab7a:	eb04 0446 	add.w	r4, r4, r6, lsl #1
 801ab7e:	440e      	add	r6, r1
 801ab80:	e797      	b.n	801aab2 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x96>
 801ab82:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 801ab86:	42a8      	cmp	r0, r5
 801ab88:	d262      	bcs.n	801ac50 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x234>
 801ab8a:	9b00      	ldr	r3, [sp, #0]
 801ab8c:	4631      	mov	r1, r6
 801ab8e:	eb00 0b03 	add.w	fp, r0, r3
 801ab92:	4558      	cmp	r0, fp
 801ab94:	d24e      	bcs.n	801ac34 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x218>
 801ab96:	f811 3b01 	ldrb.w	r3, [r1], #1
 801ab9a:	b12b      	cbz	r3, 801aba8 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x18c>
 801ab9c:	2bff      	cmp	r3, #255	; 0xff
 801ab9e:	f8b4 e000 	ldrh.w	lr, [r4]
 801aba2:	d104      	bne.n	801abae <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x192>
 801aba4:	f8a0 e000 	strh.w	lr, [r0]
 801aba8:	3002      	adds	r0, #2
 801abaa:	3402      	adds	r4, #2
 801abac:	e7f1      	b.n	801ab92 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x176>
 801abae:	8802      	ldrh	r2, [r0, #0]
 801abb0:	b29f      	uxth	r7, r3
 801abb2:	43db      	mvns	r3, r3
 801abb4:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 801abb8:	1216      	asrs	r6, r2, #8
 801abba:	b2db      	uxtb	r3, r3
 801abbc:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801abc0:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 801abc4:	ea4f 0ae2 	mov.w	sl, r2, asr #3
 801abc8:	00d2      	lsls	r2, r2, #3
 801abca:	fb16 f603 	smulbb	r6, r6, r3
 801abce:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
 801abd2:	b2d2      	uxtb	r2, r2
 801abd4:	fb0c 6c07 	mla	ip, ip, r7, r6
 801abd8:	ea4f 06ee 	mov.w	r6, lr, asr #3
 801abdc:	fb1a fa03 	smulbb	sl, sl, r3
 801abe0:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801abe4:	fa1f fc8c 	uxth.w	ip, ip
 801abe8:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801abec:	fb12 f303 	smulbb	r3, r2, r3
 801abf0:	fa5f fe8e 	uxtb.w	lr, lr
 801abf4:	fb06 a607 	mla	r6, r6, r7, sl
 801abf8:	f10c 0201 	add.w	r2, ip, #1
 801abfc:	fb0e 3307 	mla	r3, lr, r7, r3
 801ac00:	b2b6      	uxth	r6, r6
 801ac02:	b29b      	uxth	r3, r3
 801ac04:	eb02 2c1c 	add.w	ip, r2, ip, lsr #8
 801ac08:	f106 0a01 	add.w	sl, r6, #1
 801ac0c:	f40c 4278 	and.w	r2, ip, #63488	; 0xf800
 801ac10:	f103 0c01 	add.w	ip, r3, #1
 801ac14:	eb0a 2616 	add.w	r6, sl, r6, lsr #8
 801ac18:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 801ac1c:	0976      	lsrs	r6, r6, #5
 801ac1e:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 801ac22:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 801ac26:	ea4c 0c02 	orr.w	ip, ip, r2
 801ac2a:	ea4c 0c06 	orr.w	ip, ip, r6
 801ac2e:	f8a0 c000 	strh.w	ip, [r0]
 801ac32:	e7b9      	b.n	801aba8 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x18c>
 801ac34:	f8b9 3000 	ldrh.w	r3, [r9]
 801ac38:	f9bd 600c 	ldrsh.w	r6, [sp, #12]
 801ac3c:	eba3 0308 	sub.w	r3, r3, r8
 801ac40:	eba6 0608 	sub.w	r6, r6, r8
 801ac44:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801ac48:	eb04 0446 	add.w	r4, r4, r6, lsl #1
 801ac4c:	440e      	add	r6, r1
 801ac4e:	e79a      	b.n	801ab86 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x16a>
 801ac50:	4b03      	ldr	r3, [pc, #12]	; (801ac60 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x244>)
 801ac52:	6818      	ldr	r0, [r3, #0]
 801ac54:	6803      	ldr	r3, [r0, #0]
 801ac56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801ac58:	4798      	blx	r3
 801ac5a:	b007      	add	sp, #28
 801ac5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ac60:	20006df8 	.word	0x20006df8
 801ac64:	20006df0 	.word	0x20006df0

0801ac68 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb>:
 801ac68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ac6c:	b089      	sub	sp, #36	; 0x24
 801ac6e:	4682      	mov	sl, r0
 801ac70:	460f      	mov	r7, r1
 801ac72:	4691      	mov	r9, r2
 801ac74:	f89d 604c 	ldrb.w	r6, [sp, #76]	; 0x4c
 801ac78:	4698      	mov	r8, r3
 801ac7a:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801ac7c:	2e00      	cmp	r6, #0
 801ac7e:	d03d      	beq.n	801acfc <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x94>
 801ac80:	4608      	mov	r0, r1
 801ac82:	f7fe fa6b 	bl	801915c <_ZNK8touchgfx6Bitmap8getWidthEv>
 801ac86:	4605      	mov	r5, r0
 801ac88:	4638      	mov	r0, r7
 801ac8a:	f7fe faab 	bl	80191e4 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801ac8e:	f8ad 000e 	strh.w	r0, [sp, #14]
 801ac92:	4638      	mov	r0, r7
 801ac94:	f8ad 9008 	strh.w	r9, [sp, #8]
 801ac98:	f8ad 500c 	strh.w	r5, [sp, #12]
 801ac9c:	f8ad 800a 	strh.w	r8, [sp, #10]
 801aca0:	f7fe fb78 	bl	8019394 <_ZNK8touchgfx6Bitmap7getDataEv>
 801aca4:	4605      	mov	r5, r0
 801aca6:	4638      	mov	r0, r7
 801aca8:	f7fe fba6 	bl	80193f8 <_ZNK8touchgfx6Bitmap12getExtraDataEv>
 801acac:	4681      	mov	r9, r0
 801acae:	4638      	mov	r0, r7
 801acb0:	f7fe fbfa 	bl	80194a8 <_ZNK8touchgfx6Bitmap9getFormatEv>
 801acb4:	280b      	cmp	r0, #11
 801acb6:	f200 816f 	bhi.w	801af98 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x330>
 801acba:	e8df f010 	tbh	[pc, r0, lsl #1]
 801acbe:	00c3      	.short	0x00c3
 801acc0:	000c00b4 	.word	0x000c00b4
 801acc4:	016d016d 	.word	0x016d016d
 801acc8:	016d016d 	.word	0x016d016d
 801accc:	016d016d 	.word	0x016d016d
 801acd0:	016d016d 	.word	0x016d016d
 801acd4:	00bb      	.short	0x00bb
 801acd6:	4bb3      	ldr	r3, [pc, #716]	; (801afa4 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x33c>)
 801acd8:	6818      	ldr	r0, [r3, #0]
 801acda:	6803      	ldr	r3, [r0, #0]
 801acdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801acde:	4798      	blx	r3
 801ace0:	2eff      	cmp	r6, #255	; 0xff
 801ace2:	d121      	bne.n	801ad28 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xc0>
 801ace4:	0683      	lsls	r3, r0, #26
 801ace6:	d41f      	bmi.n	801ad28 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xc0>
 801ace8:	4638      	mov	r0, r7
 801acea:	f7fe fb19 	bl	8019320 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>
 801acee:	b940      	cbnz	r0, 801ad02 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x9a>
 801acf0:	4623      	mov	r3, r4
 801acf2:	aa02      	add	r2, sp, #8
 801acf4:	4629      	mov	r1, r5
 801acf6:	4650      	mov	r0, sl
 801acf8:	f7ff f9e4 	bl	801a0c4 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_>
 801acfc:	b009      	add	sp, #36	; 0x24
 801acfe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ad02:	f10d 0818 	add.w	r8, sp, #24
 801ad06:	4639      	mov	r1, r7
 801ad08:	af04      	add	r7, sp, #16
 801ad0a:	4640      	mov	r0, r8
 801ad0c:	f7fe faae 	bl	801926c <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 801ad10:	e898 0003 	ldmia.w	r8, {r0, r1}
 801ad14:	e887 0003 	stmia.w	r7, {r0, r1}
 801ad18:	4638      	mov	r0, r7
 801ad1a:	4621      	mov	r1, r4
 801ad1c:	f7fb f9bc 	bl	8016098 <_ZN8touchgfx4RectaNERKS0_>
 801ad20:	4638      	mov	r0, r7
 801ad22:	f7fb f9fc 	bl	801611e <_ZNK8touchgfx4Rect7isEmptyEv>
 801ad26:	b130      	cbz	r0, 801ad36 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xce>
 801ad28:	4633      	mov	r3, r6
 801ad2a:	4622      	mov	r2, r4
 801ad2c:	a902      	add	r1, sp, #8
 801ad2e:	4628      	mov	r0, r5
 801ad30:	f7ff f8e2 	bl	8019ef8 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 801ad34:	e7e2      	b.n	801acfc <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x94>
 801ad36:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 801ad3a:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 801ad3e:	4293      	cmp	r3, r2
 801ad40:	dd12      	ble.n	801ad68 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x100>
 801ad42:	1a9b      	subs	r3, r3, r2
 801ad44:	f9b4 0000 	ldrsh.w	r0, [r4]
 801ad48:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 801ad4c:	f8ad 0018 	strh.w	r0, [sp, #24]
 801ad50:	4628      	mov	r0, r5
 801ad52:	f8ad 201a 	strh.w	r2, [sp, #26]
 801ad56:	4642      	mov	r2, r8
 801ad58:	f8ad 101c 	strh.w	r1, [sp, #28]
 801ad5c:	a902      	add	r1, sp, #8
 801ad5e:	f8ad 301e 	strh.w	r3, [sp, #30]
 801ad62:	4633      	mov	r3, r6
 801ad64:	f7ff f8c8 	bl	8019ef8 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 801ad68:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
 801ad6c:	f9b4 2000 	ldrsh.w	r2, [r4]
 801ad70:	4293      	cmp	r3, r2
 801ad72:	dd12      	ble.n	801ad9a <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x132>
 801ad74:	1a9b      	subs	r3, r3, r2
 801ad76:	f9bd 0012 	ldrsh.w	r0, [sp, #18]
 801ad7a:	f9bd 1016 	ldrsh.w	r1, [sp, #22]
 801ad7e:	f8ad 2018 	strh.w	r2, [sp, #24]
 801ad82:	4642      	mov	r2, r8
 801ad84:	f8ad 001a 	strh.w	r0, [sp, #26]
 801ad88:	4628      	mov	r0, r5
 801ad8a:	f8ad 301c 	strh.w	r3, [sp, #28]
 801ad8e:	23ff      	movs	r3, #255	; 0xff
 801ad90:	f8ad 101e 	strh.w	r1, [sp, #30]
 801ad94:	a902      	add	r1, sp, #8
 801ad96:	f7ff f8af 	bl	8019ef8 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 801ad9a:	463b      	mov	r3, r7
 801ad9c:	aa02      	add	r2, sp, #8
 801ad9e:	4629      	mov	r1, r5
 801ada0:	4650      	mov	r0, sl
 801ada2:	f7ff f98f 	bl	801a0c4 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_>
 801ada6:	88a2      	ldrh	r2, [r4, #4]
 801ada8:	8823      	ldrh	r3, [r4, #0]
 801adaa:	f8bd 1014 	ldrh.w	r1, [sp, #20]
 801adae:	4413      	add	r3, r2
 801adb0:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 801adb4:	440a      	add	r2, r1
 801adb6:	b29b      	uxth	r3, r3
 801adb8:	b292      	uxth	r2, r2
 801adba:	b218      	sxth	r0, r3
 801adbc:	b211      	sxth	r1, r2
 801adbe:	4288      	cmp	r0, r1
 801adc0:	dd12      	ble.n	801ade8 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x180>
 801adc2:	1a9b      	subs	r3, r3, r2
 801adc4:	f9bd 0016 	ldrsh.w	r0, [sp, #22]
 801adc8:	f9bd 6012 	ldrsh.w	r6, [sp, #18]
 801adcc:	4642      	mov	r2, r8
 801adce:	f8ad 1018 	strh.w	r1, [sp, #24]
 801add2:	a902      	add	r1, sp, #8
 801add4:	f8ad 301c 	strh.w	r3, [sp, #28]
 801add8:	23ff      	movs	r3, #255	; 0xff
 801adda:	f8ad 001e 	strh.w	r0, [sp, #30]
 801adde:	4628      	mov	r0, r5
 801ade0:	f8ad 601a 	strh.w	r6, [sp, #26]
 801ade4:	f7ff f888 	bl	8019ef8 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 801ade8:	88e2      	ldrh	r2, [r4, #6]
 801adea:	8863      	ldrh	r3, [r4, #2]
 801adec:	f8bd 1016 	ldrh.w	r1, [sp, #22]
 801adf0:	4413      	add	r3, r2
 801adf2:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 801adf6:	440a      	add	r2, r1
 801adf8:	b29b      	uxth	r3, r3
 801adfa:	b292      	uxth	r2, r2
 801adfc:	b218      	sxth	r0, r3
 801adfe:	b211      	sxth	r1, r2
 801ae00:	4288      	cmp	r0, r1
 801ae02:	f77f af7b 	ble.w	801acfc <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x94>
 801ae06:	1a9b      	subs	r3, r3, r2
 801ae08:	f9b4 6000 	ldrsh.w	r6, [r4]
 801ae0c:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 801ae10:	4642      	mov	r2, r8
 801ae12:	f8ad 301e 	strh.w	r3, [sp, #30]
 801ae16:	23ff      	movs	r3, #255	; 0xff
 801ae18:	f8ad 6018 	strh.w	r6, [sp, #24]
 801ae1c:	f8ad 101a 	strh.w	r1, [sp, #26]
 801ae20:	f8ad 001c 	strh.w	r0, [sp, #28]
 801ae24:	e782      	b.n	801ad2c <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xc4>
 801ae26:	4633      	mov	r3, r6
 801ae28:	4622      	mov	r2, r4
 801ae2a:	a902      	add	r1, sp, #8
 801ae2c:	4628      	mov	r0, r5
 801ae2e:	f7ff f9b9 	bl	801a1a4 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h>
 801ae32:	e763      	b.n	801acfc <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x94>
 801ae34:	9600      	str	r6, [sp, #0]
 801ae36:	4623      	mov	r3, r4
 801ae38:	aa02      	add	r2, sp, #8
 801ae3a:	4649      	mov	r1, r9
 801ae3c:	4628      	mov	r0, r5
 801ae3e:	f7ff fdd5 	bl	801a9ec <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>
 801ae42:	e75b      	b.n	801acfc <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x94>
 801ae44:	4638      	mov	r0, r7
 801ae46:	f7fe fa6b 	bl	8019320 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>
 801ae4a:	b950      	cbnz	r0, 801ae62 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x1fa>
 801ae4c:	f8da 3000 	ldr.w	r3, [sl]
 801ae50:	aa02      	add	r2, sp, #8
 801ae52:	4629      	mov	r1, r5
 801ae54:	e9cd 6000 	strd	r6, r0, [sp]
 801ae58:	4650      	mov	r0, sl
 801ae5a:	68de      	ldr	r6, [r3, #12]
 801ae5c:	4623      	mov	r3, r4
 801ae5e:	47b0      	blx	r6
 801ae60:	e74c      	b.n	801acfc <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x94>
 801ae62:	f10d 0818 	add.w	r8, sp, #24
 801ae66:	4639      	mov	r1, r7
 801ae68:	af04      	add	r7, sp, #16
 801ae6a:	4640      	mov	r0, r8
 801ae6c:	f7fe f9fe 	bl	801926c <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 801ae70:	e898 0003 	ldmia.w	r8, {r0, r1}
 801ae74:	e887 0003 	stmia.w	r7, {r0, r1}
 801ae78:	4638      	mov	r0, r7
 801ae7a:	4621      	mov	r1, r4
 801ae7c:	f7fb f90c 	bl	8016098 <_ZN8touchgfx4RectaNERKS0_>
 801ae80:	4638      	mov	r0, r7
 801ae82:	f7fb f94c 	bl	801611e <_ZNK8touchgfx4Rect7isEmptyEv>
 801ae86:	b138      	cbz	r0, 801ae98 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x230>
 801ae88:	4623      	mov	r3, r4
 801ae8a:	9600      	str	r6, [sp, #0]
 801ae8c:	aa02      	add	r2, sp, #8
 801ae8e:	4649      	mov	r1, r9
 801ae90:	4628      	mov	r0, r5
 801ae92:	f7ff fdc3 	bl	801aa1c <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 801ae96:	e731      	b.n	801acfc <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x94>
 801ae98:	f8da 3000 	ldr.w	r3, [sl]
 801ae9c:	aa02      	add	r2, sp, #8
 801ae9e:	4629      	mov	r1, r5
 801aea0:	e9cd 6000 	strd	r6, r0, [sp]
 801aea4:	4650      	mov	r0, sl
 801aea6:	f8d3 b00c 	ldr.w	fp, [r3, #12]
 801aeaa:	463b      	mov	r3, r7
 801aeac:	47d8      	blx	fp
 801aeae:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 801aeb2:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 801aeb6:	4293      	cmp	r3, r2
 801aeb8:	dd13      	ble.n	801aee2 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x27a>
 801aeba:	f9b4 0000 	ldrsh.w	r0, [r4]
 801aebe:	1a9b      	subs	r3, r3, r2
 801aec0:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 801aec4:	f8ad 0018 	strh.w	r0, [sp, #24]
 801aec8:	4628      	mov	r0, r5
 801aeca:	f8ad 201a 	strh.w	r2, [sp, #26]
 801aece:	aa02      	add	r2, sp, #8
 801aed0:	f8ad 101c 	strh.w	r1, [sp, #28]
 801aed4:	4649      	mov	r1, r9
 801aed6:	f8ad 301e 	strh.w	r3, [sp, #30]
 801aeda:	4643      	mov	r3, r8
 801aedc:	9600      	str	r6, [sp, #0]
 801aede:	f7ff fd9d 	bl	801aa1c <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 801aee2:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
 801aee6:	f9b4 2000 	ldrsh.w	r2, [r4]
 801aeea:	4293      	cmp	r3, r2
 801aeec:	dd13      	ble.n	801af16 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x2ae>
 801aeee:	1a9b      	subs	r3, r3, r2
 801aef0:	f9bd 0012 	ldrsh.w	r0, [sp, #18]
 801aef4:	f9bd 1016 	ldrsh.w	r1, [sp, #22]
 801aef8:	f8ad 2018 	strh.w	r2, [sp, #24]
 801aefc:	aa02      	add	r2, sp, #8
 801aefe:	f8ad 001a 	strh.w	r0, [sp, #26]
 801af02:	4628      	mov	r0, r5
 801af04:	f8ad 301c 	strh.w	r3, [sp, #28]
 801af08:	4643      	mov	r3, r8
 801af0a:	f8ad 101e 	strh.w	r1, [sp, #30]
 801af0e:	4649      	mov	r1, r9
 801af10:	9600      	str	r6, [sp, #0]
 801af12:	f7ff fd83 	bl	801aa1c <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 801af16:	88a2      	ldrh	r2, [r4, #4]
 801af18:	8823      	ldrh	r3, [r4, #0]
 801af1a:	f8bd 1014 	ldrh.w	r1, [sp, #20]
 801af1e:	4413      	add	r3, r2
 801af20:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 801af24:	440a      	add	r2, r1
 801af26:	b29b      	uxth	r3, r3
 801af28:	b292      	uxth	r2, r2
 801af2a:	b218      	sxth	r0, r3
 801af2c:	b211      	sxth	r1, r2
 801af2e:	4288      	cmp	r0, r1
 801af30:	dd13      	ble.n	801af5a <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x2f2>
 801af32:	1a9b      	subs	r3, r3, r2
 801af34:	f9bd 0016 	ldrsh.w	r0, [sp, #22]
 801af38:	f9bd 7012 	ldrsh.w	r7, [sp, #18]
 801af3c:	aa02      	add	r2, sp, #8
 801af3e:	f8ad 1018 	strh.w	r1, [sp, #24]
 801af42:	4649      	mov	r1, r9
 801af44:	f8ad 301c 	strh.w	r3, [sp, #28]
 801af48:	4643      	mov	r3, r8
 801af4a:	f8ad 001e 	strh.w	r0, [sp, #30]
 801af4e:	4628      	mov	r0, r5
 801af50:	9600      	str	r6, [sp, #0]
 801af52:	f8ad 701a 	strh.w	r7, [sp, #26]
 801af56:	f7ff fd61 	bl	801aa1c <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 801af5a:	88e2      	ldrh	r2, [r4, #6]
 801af5c:	8863      	ldrh	r3, [r4, #2]
 801af5e:	f8bd 1016 	ldrh.w	r1, [sp, #22]
 801af62:	4413      	add	r3, r2
 801af64:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 801af68:	440a      	add	r2, r1
 801af6a:	b29b      	uxth	r3, r3
 801af6c:	b292      	uxth	r2, r2
 801af6e:	b218      	sxth	r0, r3
 801af70:	b211      	sxth	r1, r2
 801af72:	4288      	cmp	r0, r1
 801af74:	f77f aec2 	ble.w	801acfc <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x94>
 801af78:	f9b4 7000 	ldrsh.w	r7, [r4]
 801af7c:	1a9b      	subs	r3, r3, r2
 801af7e:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 801af82:	f8ad 301e 	strh.w	r3, [sp, #30]
 801af86:	4643      	mov	r3, r8
 801af88:	f8ad 7018 	strh.w	r7, [sp, #24]
 801af8c:	f8ad 101a 	strh.w	r1, [sp, #26]
 801af90:	f8ad 001c 	strh.w	r0, [sp, #28]
 801af94:	9600      	str	r6, [sp, #0]
 801af96:	e779      	b.n	801ae8c <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x224>
 801af98:	4b03      	ldr	r3, [pc, #12]	; (801afa8 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x340>)
 801af9a:	21b0      	movs	r1, #176	; 0xb0
 801af9c:	4a03      	ldr	r2, [pc, #12]	; (801afac <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x344>)
 801af9e:	4804      	ldr	r0, [pc, #16]	; (801afb0 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x348>)
 801afa0:	f000 fb44 	bl	801b62c <__assert_func>
 801afa4:	20006df8 	.word	0x20006df8
 801afa8:	08020314 	.word	0x08020314
 801afac:	080207e3 	.word	0x080207e3
 801afb0:	08020498 	.word	0x08020498

0801afb4 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE>:
 801afb4:	b508      	push	{r3, lr}
 801afb6:	b180      	cbz	r0, 801afda <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x26>
 801afb8:	2902      	cmp	r1, #2
 801afba:	d014      	beq.n	801afe6 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x32>
 801afbc:	2903      	cmp	r1, #3
 801afbe:	d01d      	beq.n	801affc <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x48>
 801afc0:	2901      	cmp	r1, #1
 801afc2:	d101      	bne.n	801afc8 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x14>
 801afc4:	2001      	movs	r0, #1
 801afc6:	bd08      	pop	{r3, pc}
 801afc8:	4b0e      	ldr	r3, [pc, #56]	; (801b004 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x50>)
 801afca:	8818      	ldrh	r0, [r3, #0]
 801afcc:	b990      	cbnz	r0, 801aff4 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x40>
 801afce:	4b0e      	ldr	r3, [pc, #56]	; (801b008 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x54>)
 801afd0:	2153      	movs	r1, #83	; 0x53
 801afd2:	4a0e      	ldr	r2, [pc, #56]	; (801b00c <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x58>)
 801afd4:	480e      	ldr	r0, [pc, #56]	; (801b010 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x5c>)
 801afd6:	f000 fb29 	bl	801b62c <__assert_func>
 801afda:	2902      	cmp	r1, #2
 801afdc:	d00e      	beq.n	801affc <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x48>
 801afde:	2903      	cmp	r1, #3
 801afe0:	d0f2      	beq.n	801afc8 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x14>
 801afe2:	2901      	cmp	r1, #1
 801afe4:	d1ee      	bne.n	801afc4 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x10>
 801afe6:	4b07      	ldr	r3, [pc, #28]	; (801b004 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x50>)
 801afe8:	8818      	ldrh	r0, [r3, #0]
 801afea:	2800      	cmp	r0, #0
 801afec:	d0ef      	beq.n	801afce <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x1a>
 801afee:	f3c0 000e 	ubfx	r0, r0, #0, #15
 801aff2:	e7e8      	b.n	801afc6 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x12>
 801aff4:	f3c0 000e 	ubfx	r0, r0, #0, #15
 801aff8:	4240      	negs	r0, r0
 801affa:	e7e4      	b.n	801afc6 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x12>
 801affc:	f04f 30ff 	mov.w	r0, #4294967295
 801b000:	e7e1      	b.n	801afc6 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x12>
 801b002:	bf00      	nop
 801b004:	20006df0 	.word	0x20006df0
 801b008:	0802058e 	.word	0x0802058e
 801b00c:	080208f2 	.word	0x080208f2
 801b010:	080205d0 	.word	0x080205d0

0801b014 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE>:
 801b014:	b508      	push	{r3, lr}
 801b016:	b180      	cbz	r0, 801b03a <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x26>
 801b018:	2902      	cmp	r1, #2
 801b01a:	d014      	beq.n	801b046 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x32>
 801b01c:	2903      	cmp	r1, #3
 801b01e:	d018      	beq.n	801b052 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x3e>
 801b020:	2901      	cmp	r1, #1
 801b022:	d001      	beq.n	801b028 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x14>
 801b024:	2001      	movs	r0, #1
 801b026:	e013      	b.n	801b050 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x3c>
 801b028:	4b0e      	ldr	r3, [pc, #56]	; (801b064 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x50>)
 801b02a:	8818      	ldrh	r0, [r3, #0]
 801b02c:	b970      	cbnz	r0, 801b04c <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x38>
 801b02e:	4b0e      	ldr	r3, [pc, #56]	; (801b068 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x54>)
 801b030:	2153      	movs	r1, #83	; 0x53
 801b032:	4a0e      	ldr	r2, [pc, #56]	; (801b06c <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x58>)
 801b034:	480e      	ldr	r0, [pc, #56]	; (801b070 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x5c>)
 801b036:	f000 faf9 	bl	801b62c <__assert_func>
 801b03a:	2902      	cmp	r1, #2
 801b03c:	d009      	beq.n	801b052 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x3e>
 801b03e:	2903      	cmp	r1, #3
 801b040:	d0f0      	beq.n	801b024 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x10>
 801b042:	2901      	cmp	r1, #1
 801b044:	d1f0      	bne.n	801b028 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x14>
 801b046:	f04f 30ff 	mov.w	r0, #4294967295
 801b04a:	e001      	b.n	801b050 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x3c>
 801b04c:	f3c0 000e 	ubfx	r0, r0, #0, #15
 801b050:	bd08      	pop	{r3, pc}
 801b052:	4b04      	ldr	r3, [pc, #16]	; (801b064 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x50>)
 801b054:	8818      	ldrh	r0, [r3, #0]
 801b056:	2800      	cmp	r0, #0
 801b058:	d0e9      	beq.n	801b02e <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x1a>
 801b05a:	f3c0 000e 	ubfx	r0, r0, #0, #15
 801b05e:	4240      	negs	r0, r0
 801b060:	e7f6      	b.n	801b050 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x3c>
 801b062:	bf00      	nop
 801b064:	20006df0 	.word	0x20006df0
 801b068:	0802058e 	.word	0x0802058e
 801b06c:	080208f2 	.word	0x080208f2
 801b070:	080205d0 	.word	0x080205d0

0801b074 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE>:
 801b074:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b078:	b099      	sub	sp, #100	; 0x64
 801b07a:	910b      	str	r1, [sp, #44]	; 0x2c
 801b07c:	a914      	add	r1, sp, #80	; 0x50
 801b07e:	f9bd 5088 	ldrsh.w	r5, [sp, #136]	; 0x88
 801b082:	f8bd 6090 	ldrh.w	r6, [sp, #144]	; 0x90
 801b086:	f8bd 7094 	ldrh.w	r7, [sp, #148]	; 0x94
 801b08a:	f89d 80ac 	ldrb.w	r8, [sp, #172]	; 0xac
 801b08e:	f89d a0b4 	ldrb.w	sl, [sp, #180]	; 0xb4
 801b092:	e881 000c 	stmia.w	r1, {r2, r3}
 801b096:	f9bd 308c 	ldrsh.w	r3, [sp, #140]	; 0x8c
 801b09a:	e9dd 2126 	ldrd	r2, r1, [sp, #152]	; 0x98
 801b09e:	930a      	str	r3, [sp, #40]	; 0x28
 801b0a0:	f89d 30a4 	ldrb.w	r3, [sp, #164]	; 0xa4
 801b0a4:	f891 900d 	ldrb.w	r9, [r1, #13]
 801b0a8:	9311      	str	r3, [sp, #68]	; 0x44
 801b0aa:	f89d 30b0 	ldrb.w	r3, [sp, #176]	; 0xb0
 801b0ae:	7988      	ldrb	r0, [r1, #6]
 801b0b0:	930c      	str	r3, [sp, #48]	; 0x30
 801b0b2:	ea4f 1349 	mov.w	r3, r9, lsl #5
 801b0b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801b0ba:	4303      	orrs	r3, r0
 801b0bc:	9309      	str	r3, [sp, #36]	; 0x24
 801b0be:	f000 81a1 	beq.w	801b404 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x390>
 801b0c2:	ea4f 1909 	mov.w	r9, r9, lsl #4
 801b0c6:	f409 7380 	and.w	r3, r9, #256	; 0x100
 801b0ca:	f891 9007 	ldrb.w	r9, [r1, #7]
 801b0ce:	ea59 0903 	orrs.w	r9, r9, r3
 801b0d2:	f000 8197 	beq.w	801b404 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x390>
 801b0d6:	f991 3009 	ldrsb.w	r3, [r1, #9]
 801b0da:	b29b      	uxth	r3, r3
 801b0dc:	2e00      	cmp	r6, #0
 801b0de:	f000 813a 	beq.w	801b356 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2e2>
 801b0e2:	1af6      	subs	r6, r6, r3
 801b0e4:	b2b6      	uxth	r6, r6
 801b0e6:	0433      	lsls	r3, r6, #16
 801b0e8:	d502      	bpl.n	801b0f0 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x7c>
 801b0ea:	1bad      	subs	r5, r5, r6
 801b0ec:	2600      	movs	r6, #0
 801b0ee:	b22d      	sxth	r5, r5
 801b0f0:	f9b2 1000 	ldrsh.w	r1, [r2]
 801b0f4:	a814      	add	r0, sp, #80	; 0x50
 801b0f6:	f8bd 4024 	ldrh.w	r4, [sp, #36]	; 0x24
 801b0fa:	428d      	cmp	r5, r1
 801b0fc:	b28b      	uxth	r3, r1
 801b0fe:	f8cd 9034 	str.w	r9, [sp, #52]	; 0x34
 801b102:	bfbf      	itttt	lt
 801b104:	18f6      	addlt	r6, r6, r3
 801b106:	1b75      	sublt	r5, r6, r5
 801b108:	b2ae      	uxthlt	r6, r5
 801b10a:	460d      	movlt	r5, r1
 801b10c:	8891      	ldrh	r1, [r2, #4]
 801b10e:	440b      	add	r3, r1
 801b110:	4629      	mov	r1, r5
 801b112:	b21b      	sxth	r3, r3
 801b114:	9310      	str	r3, [sp, #64]	; 0x40
 801b116:	88d3      	ldrh	r3, [r2, #6]
 801b118:	8852      	ldrh	r2, [r2, #2]
 801b11a:	4413      	add	r3, r2
 801b11c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801b11e:	b21b      	sxth	r3, r3
 801b120:	930f      	str	r3, [sp, #60]	; 0x3c
 801b122:	4bbd      	ldr	r3, [pc, #756]	; (801b418 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a4>)
 801b124:	f893 b000 	ldrb.w	fp, [r3]
 801b128:	f10b 3cff 	add.w	ip, fp, #4294967295
 801b12c:	f1dc 0300 	rsbs	r3, ip, #0
 801b130:	eb43 030c 	adc.w	r3, r3, ip
 801b134:	930e      	str	r3, [sp, #56]	; 0x38
 801b136:	4653      	mov	r3, sl
 801b138:	f7fc fd22 	bl	8017b80 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>
 801b13c:	4629      	mov	r1, r5
 801b13e:	f8ad 005c 	strh.w	r0, [sp, #92]	; 0x5c
 801b142:	4653      	mov	r3, sl
 801b144:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801b146:	a814      	add	r0, sp, #80	; 0x50
 801b148:	f7fc fd32 	bl	8017bb0 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>
 801b14c:	a918      	add	r1, sp, #96	; 0x60
 801b14e:	f821 0d02 	strh.w	r0, [r1, #-2]!
 801b152:	a817      	add	r0, sp, #92	; 0x5c
 801b154:	f7fc fe4e 	bl	8017df4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>
 801b158:	f1ba 0f00 	cmp.w	sl, #0
 801b15c:	f040 80fe 	bne.w	801b35c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2e8>
 801b160:	f1bb 0f01 	cmp.w	fp, #1
 801b164:	f040 8102 	bne.w	801b36c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2f8>
 801b168:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801b16a:	b153      	cbz	r3, 801b182 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x10e>
 801b16c:	2408      	movs	r4, #8
 801b16e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801b170:	fb94 f3f8 	sdiv	r3, r4, r8
 801b174:	1e5c      	subs	r4, r3, #1
 801b176:	4414      	add	r4, r2
 801b178:	fb94 f4f3 	sdiv	r4, r4, r3
 801b17c:	fb14 f403 	smulbb	r4, r4, r3
 801b180:	b2a4      	uxth	r4, r4
 801b182:	b906      	cbnz	r6, 801b186 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x112>
 801b184:	b16f      	cbz	r7, 801b1a2 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x12e>
 801b186:	fb07 6304 	mla	r3, r7, r4, r6
 801b18a:	9928      	ldr	r1, [sp, #160]	; 0xa0
 801b18c:	463a      	mov	r2, r7
 801b18e:	fb08 f303 	mul.w	r3, r8, r3
 801b192:	f003 0707 	and.w	r7, r3, #7
 801b196:	eb01 03d3 	add.w	r3, r1, r3, lsr #3
 801b19a:	9328      	str	r3, [sp, #160]	; 0xa0
 801b19c:	eba9 0302 	sub.w	r3, r9, r2
 801b1a0:	930d      	str	r3, [sp, #52]	; 0x34
 801b1a2:	4651      	mov	r1, sl
 801b1a4:	980e      	ldr	r0, [sp, #56]	; 0x38
 801b1a6:	f7ff ff05 	bl	801afb4 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE>
 801b1aa:	4651      	mov	r1, sl
 801b1ac:	4681      	mov	r9, r0
 801b1ae:	980e      	ldr	r0, [sp, #56]	; 0x38
 801b1b0:	f7ff ff30 	bl	801b014 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE>
 801b1b4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801b1b6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801b1b8:	4683      	mov	fp, r0
 801b1ba:	eba3 0a02 	sub.w	sl, r3, r2
 801b1be:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801b1c0:	459a      	cmp	sl, r3
 801b1c2:	bfa8      	it	ge
 801b1c4:	469a      	movge	sl, r3
 801b1c6:	f1ba 0f00 	cmp.w	sl, #0
 801b1ca:	f340 811b 	ble.w	801b404 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x390>
 801b1ce:	1bad      	subs	r5, r5, r6
 801b1d0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801b1d2:	1b5d      	subs	r5, r3, r5
 801b1d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b1d6:	429d      	cmp	r5, r3
 801b1d8:	bfd4      	ite	le
 801b1da:	ebc6 0605 	rsble	r6, r6, r5
 801b1de:	ebc6 0603 	rsbgt	r6, r6, r3
 801b1e2:	2e00      	cmp	r6, #0
 801b1e4:	f340 810e 	ble.w	801b404 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x390>
 801b1e8:	1ba4      	subs	r4, r4, r6
 801b1ea:	fb08 f304 	mul.w	r3, r8, r4
 801b1ee:	930f      	str	r3, [sp, #60]	; 0x3c
 801b1f0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801b1f2:	2b00      	cmp	r3, #0
 801b1f4:	f040 810b 	bne.w	801b40e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x39a>
 801b1f8:	4b88      	ldr	r3, [pc, #544]	; (801b41c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a8>)
 801b1fa:	6818      	ldr	r0, [r3, #0]
 801b1fc:	6803      	ldr	r3, [r0, #0]
 801b1fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801b200:	4798      	blx	r3
 801b202:	2301      	movs	r3, #1
 801b204:	4a86      	ldr	r2, [pc, #536]	; (801b420 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3ac>)
 801b206:	fa03 f308 	lsl.w	r3, r3, r8
 801b20a:	8811      	ldrh	r1, [r2, #0]
 801b20c:	f9bd 205c 	ldrsh.w	r2, [sp, #92]	; 0x5c
 801b210:	3b01      	subs	r3, #1
 801b212:	b2db      	uxtb	r3, r3
 801b214:	930e      	str	r3, [sp, #56]	; 0x38
 801b216:	f9bd 305e 	ldrsh.w	r3, [sp, #94]	; 0x5e
 801b21a:	fb01 2303 	mla	r3, r1, r3, r2
 801b21e:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 801b222:	930a      	str	r3, [sp, #40]	; 0x28
 801b224:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801b226:	f3c3 4307 	ubfx	r3, r3, #16, #8
 801b22a:	9313      	str	r3, [sp, #76]	; 0x4c
 801b22c:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801b22e:	0a19      	lsrs	r1, r3, #8
 801b230:	b2cb      	uxtb	r3, r1
 801b232:	9312      	str	r3, [sp, #72]	; 0x48
 801b234:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801b236:	b2db      	uxtb	r3, r3
 801b238:	9311      	str	r3, [sp, #68]	; 0x44
 801b23a:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801b23c:	095a      	lsrs	r2, r3, #5
 801b23e:	4b79      	ldr	r3, [pc, #484]	; (801b424 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3b0>)
 801b240:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801b244:	400b      	ands	r3, r1
 801b246:	4313      	orrs	r3, r2
 801b248:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 801b24a:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 801b24e:	4313      	orrs	r3, r2
 801b250:	b29b      	uxth	r3, r3
 801b252:	9310      	str	r3, [sp, #64]	; 0x40
 801b254:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801b256:	781a      	ldrb	r2, [r3, #0]
 801b258:	ea4f 0349 	mov.w	r3, r9, lsl #1
 801b25c:	fb06 b919 	mls	r9, r6, r9, fp
 801b260:	413a      	asrs	r2, r7
 801b262:	fb03 fb06 	mul.w	fp, r3, r6
 801b266:	930d      	str	r3, [sp, #52]	; 0x34
 801b268:	b2d2      	uxtb	r2, r2
 801b26a:	eb0b 0b49 	add.w	fp, fp, r9, lsl #1
 801b26e:	f11a 3aff 	adds.w	sl, sl, #4294967295
 801b272:	f0c0 80ea 	bcc.w	801b44a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3d6>
 801b276:	46b6      	mov	lr, r6
 801b278:	f8dd c028 	ldr.w	ip, [sp, #40]	; 0x28
 801b27c:	f11e 3eff 	adds.w	lr, lr, #4294967295
 801b280:	f0c0 80d2 	bcc.w	801b428 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3b4>
 801b284:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801b286:	4013      	ands	r3, r2
 801b288:	d055      	beq.n	801b336 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2c2>
 801b28a:	20ff      	movs	r0, #255	; 0xff
 801b28c:	990e      	ldr	r1, [sp, #56]	; 0x38
 801b28e:	fb90 f1f1 	sdiv	r1, r0, r1
 801b292:	434b      	muls	r3, r1
 801b294:	2bfe      	cmp	r3, #254	; 0xfe
 801b296:	dd03      	ble.n	801b2a0 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x22c>
 801b298:	990c      	ldr	r1, [sp, #48]	; 0x30
 801b29a:	4281      	cmp	r1, r0
 801b29c:	f000 80b9 	beq.w	801b412 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x39e>
 801b2a0:	990c      	ldr	r1, [sp, #48]	; 0x30
 801b2a2:	f8bc 4000 	ldrh.w	r4, [ip]
 801b2a6:	fb11 f303 	smulbb	r3, r1, r3
 801b2aa:	1220      	asrs	r0, r4, #8
 801b2ac:	b29b      	uxth	r3, r3
 801b2ae:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 801b2b2:	1c59      	adds	r1, r3, #1
 801b2b4:	ea40 1050 	orr.w	r0, r0, r0, lsr #5
 801b2b8:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 801b2bc:	10e1      	asrs	r1, r4, #3
 801b2be:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801b2c2:	00e4      	lsls	r4, r4, #3
 801b2c4:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 801b2c8:	b29d      	uxth	r5, r3
 801b2ca:	43db      	mvns	r3, r3
 801b2cc:	ea41 1191 	orr.w	r1, r1, r1, lsr #6
 801b2d0:	b2db      	uxtb	r3, r3
 801b2d2:	b2e4      	uxtb	r4, r4
 801b2d4:	9309      	str	r3, [sp, #36]	; 0x24
 801b2d6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801b2d8:	ea44 1454 	orr.w	r4, r4, r4, lsr #5
 801b2dc:	fb13 f905 	smulbb	r9, r3, r5
 801b2e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b2e2:	fb00 9003 	mla	r0, r0, r3, r9
 801b2e6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801b2e8:	fb13 f905 	smulbb	r9, r3, r5
 801b2ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b2ee:	b280      	uxth	r0, r0
 801b2f0:	fb01 9103 	mla	r1, r1, r3, r9
 801b2f4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801b2f6:	fb13 f505 	smulbb	r5, r3, r5
 801b2fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b2fc:	b289      	uxth	r1, r1
 801b2fe:	fb04 5403 	mla	r4, r4, r3, r5
 801b302:	1c43      	adds	r3, r0, #1
 801b304:	b2a4      	uxth	r4, r4
 801b306:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 801b30a:	f104 0901 	add.w	r9, r4, #1
 801b30e:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
 801b312:	eb09 2914 	add.w	r9, r9, r4, lsr #8
 801b316:	f3c9 29c4 	ubfx	r9, r9, #11, #5
 801b31a:	ea49 0000 	orr.w	r0, r9, r0
 801b31e:	f101 0901 	add.w	r9, r1, #1
 801b322:	eb09 2911 	add.w	r9, r9, r1, lsr #8
 801b326:	ea4f 1959 	mov.w	r9, r9, lsr #5
 801b32a:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 801b32e:	ea40 0009 	orr.w	r0, r0, r9
 801b332:	f8ac 0000 	strh.w	r0, [ip]
 801b336:	4447      	add	r7, r8
 801b338:	b2bf      	uxth	r7, r7
 801b33a:	2f07      	cmp	r7, #7
 801b33c:	bf89      	itett	hi
 801b33e:	9b28      	ldrhi	r3, [sp, #160]	; 0xa0
 801b340:	fa42 f208 	asrls.w	r2, r2, r8
 801b344:	2700      	movhi	r7, #0
 801b346:	785a      	ldrbhi	r2, [r3, #1]
 801b348:	bf8a      	itet	hi
 801b34a:	3301      	addhi	r3, #1
 801b34c:	b2d2      	uxtbls	r2, r2
 801b34e:	9328      	strhi	r3, [sp, #160]	; 0xa0
 801b350:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801b352:	449c      	add	ip, r3
 801b354:	e792      	b.n	801b27c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x208>
 801b356:	441d      	add	r5, r3
 801b358:	b22d      	sxth	r5, r5
 801b35a:	e6c9      	b.n	801b0f0 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x7c>
 801b35c:	f1ba 0f01 	cmp.w	sl, #1
 801b360:	f47f af02 	bne.w	801b168 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf4>
 801b364:	f1bb 0f01 	cmp.w	fp, #1
 801b368:	f47f aefe 	bne.w	801b168 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf4>
 801b36c:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 801b41c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a8>
 801b370:	f8db 0000 	ldr.w	r0, [fp]
 801b374:	6803      	ldr	r3, [r0, #0]
 801b376:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801b378:	4798      	blx	r3
 801b37a:	f410 7380 	ands.w	r3, r0, #256	; 0x100
 801b37e:	465a      	mov	r2, fp
 801b380:	d006      	beq.n	801b390 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x31c>
 801b382:	f1b8 0f04 	cmp.w	r8, #4
 801b386:	d140      	bne.n	801b40a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x396>
 801b388:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801b38a:	3300      	adds	r3, #0
 801b38c:	bf18      	it	ne
 801b38e:	2301      	movne	r3, #1
 801b390:	0580      	lsls	r0, r0, #22
 801b392:	d563      	bpl.n	801b45c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3e8>
 801b394:	f1b8 0f08 	cmp.w	r8, #8
 801b398:	d160      	bne.n	801b45c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3e8>
 801b39a:	2b00      	cmp	r3, #0
 801b39c:	bf0c      	ite	eq
 801b39e:	f44f 7100 	moveq.w	r1, #512	; 0x200
 801b3a2:	f44f 7180 	movne.w	r1, #256	; 0x100
 801b3a6:	2e00      	cmp	r6, #0
 801b3a8:	f47f aede 	bne.w	801b168 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf4>
 801b3ac:	2f00      	cmp	r7, #0
 801b3ae:	f47f aedb 	bne.w	801b168 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf4>
 801b3b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b3b4:	9810      	ldr	r0, [sp, #64]	; 0x40
 801b3b6:	18eb      	adds	r3, r5, r3
 801b3b8:	4283      	cmp	r3, r0
 801b3ba:	f73f aed5 	bgt.w	801b168 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf4>
 801b3be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801b3c0:	980f      	ldr	r0, [sp, #60]	; 0x3c
 801b3c2:	444b      	add	r3, r9
 801b3c4:	4283      	cmp	r3, r0
 801b3c6:	f73f aecf 	bgt.w	801b168 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf4>
 801b3ca:	f1b8 0f08 	cmp.w	r8, #8
 801b3ce:	6810      	ldr	r0, [r2, #0]
 801b3d0:	f04f 0600 	mov.w	r6, #0
 801b3d4:	f8bd 305e 	ldrh.w	r3, [sp, #94]	; 0x5e
 801b3d8:	bf18      	it	ne
 801b3da:	3401      	addne	r4, #1
 801b3dc:	6805      	ldr	r5, [r0, #0]
 801b3de:	f8bd 205c 	ldrh.w	r2, [sp, #92]	; 0x5c
 801b3e2:	bf18      	it	ne
 801b3e4:	f024 0401 	bicne.w	r4, r4, #1
 801b3e8:	e9cd 1605 	strd	r1, r6, [sp, #20]
 801b3ec:	990c      	ldr	r1, [sp, #48]	; 0x30
 801b3ee:	bf18      	it	ne
 801b3f0:	b2a4      	uxthne	r4, r4
 801b3f2:	9104      	str	r1, [sp, #16]
 801b3f4:	992a      	ldr	r1, [sp, #168]	; 0xa8
 801b3f6:	e9cd 4900 	strd	r4, r9, [sp]
 801b3fa:	e9cd 4102 	strd	r4, r1, [sp, #8]
 801b3fe:	9928      	ldr	r1, [sp, #160]	; 0xa0
 801b400:	6d6c      	ldr	r4, [r5, #84]	; 0x54
 801b402:	47a0      	blx	r4
 801b404:	b019      	add	sp, #100	; 0x64
 801b406:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b40a:	2300      	movs	r3, #0
 801b40c:	e7c0      	b.n	801b390 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x31c>
 801b40e:	980b      	ldr	r0, [sp, #44]	; 0x2c
 801b410:	e6f7      	b.n	801b202 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x18e>
 801b412:	9810      	ldr	r0, [sp, #64]	; 0x40
 801b414:	e78d      	b.n	801b332 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2be>
 801b416:	bf00      	nop
 801b418:	20006dee 	.word	0x20006dee
 801b41c:	20006df8 	.word	0x20006df8
 801b420:	20006df0 	.word	0x20006df0
 801b424:	00fff800 	.word	0x00fff800
 801b428:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801b42a:	b153      	cbz	r3, 801b442 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3ce>
 801b42c:	441f      	add	r7, r3
 801b42e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801b430:	b2bf      	uxth	r7, r7
 801b432:	eb03 03d7 	add.w	r3, r3, r7, lsr #3
 801b436:	f007 0707 	and.w	r7, r7, #7
 801b43a:	781a      	ldrb	r2, [r3, #0]
 801b43c:	9328      	str	r3, [sp, #160]	; 0xa0
 801b43e:	413a      	asrs	r2, r7
 801b440:	b2d2      	uxtb	r2, r2
 801b442:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801b444:	445b      	add	r3, fp
 801b446:	930a      	str	r3, [sp, #40]	; 0x28
 801b448:	e711      	b.n	801b26e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1fa>
 801b44a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801b44c:	2b00      	cmp	r3, #0
 801b44e:	d1d9      	bne.n	801b404 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x390>
 801b450:	4b05      	ldr	r3, [pc, #20]	; (801b468 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3f4>)
 801b452:	6818      	ldr	r0, [r3, #0]
 801b454:	6803      	ldr	r3, [r0, #0]
 801b456:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b458:	4798      	blx	r3
 801b45a:	e7d3      	b.n	801b404 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x390>
 801b45c:	2b00      	cmp	r3, #0
 801b45e:	f43f ae83 	beq.w	801b168 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf4>
 801b462:	f44f 7180 	mov.w	r1, #256	; 0x100
 801b466:	e79e      	b.n	801b3a6 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x332>
 801b468:	20006df8 	.word	0x20006df8

0801b46c <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>:
 801b46c:	6101      	str	r1, [r0, #16]
 801b46e:	4770      	bx	lr

0801b470 <_ZN8touchgfx8Gestures4tickEv>:
 801b470:	7b83      	ldrb	r3, [r0, #14]
 801b472:	b14b      	cbz	r3, 801b488 <_ZN8touchgfx8Gestures4tickEv+0x18>
 801b474:	8903      	ldrh	r3, [r0, #8]
 801b476:	3301      	adds	r3, #1
 801b478:	b29b      	uxth	r3, r3
 801b47a:	2b07      	cmp	r3, #7
 801b47c:	8103      	strh	r3, [r0, #8]
 801b47e:	bf81      	itttt	hi
 801b480:	2300      	movhi	r3, #0
 801b482:	8143      	strhhi	r3, [r0, #10]
 801b484:	8183      	strhhi	r3, [r0, #12]
 801b486:	7383      	strbhi	r3, [r0, #14]
 801b488:	4770      	bx	lr
	...

0801b48c <_ZN8touchgfx8Gestures17registerDragEventEtttt>:
 801b48c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 801b490:	4698      	mov	r8, r3
 801b492:	8883      	ldrh	r3, [r0, #4]
 801b494:	4604      	mov	r4, r0
 801b496:	4617      	mov	r7, r2
 801b498:	f8ad 3006 	strh.w	r3, [sp, #6]
 801b49c:	eba8 0303 	sub.w	r3, r8, r3
 801b4a0:	4a19      	ldr	r2, [pc, #100]	; (801b508 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x7c>)
 801b4a2:	460e      	mov	r6, r1
 801b4a4:	b21b      	sxth	r3, r3
 801b4a6:	88c1      	ldrh	r1, [r0, #6]
 801b4a8:	9200      	str	r2, [sp, #0]
 801b4aa:	2000      	movs	r0, #0
 801b4ac:	2b00      	cmp	r3, #0
 801b4ae:	8aa2      	ldrh	r2, [r4, #20]
 801b4b0:	f8bd 5028 	ldrh.w	r5, [sp, #40]	; 0x28
 801b4b4:	bfb8      	it	lt
 801b4b6:	425b      	neglt	r3, r3
 801b4b8:	f88d 0004 	strb.w	r0, [sp, #4]
 801b4bc:	f8ad 1008 	strh.w	r1, [sp, #8]
 801b4c0:	b21b      	sxth	r3, r3
 801b4c2:	f8ad 800a 	strh.w	r8, [sp, #10]
 801b4c6:	f8ad 500c 	strh.w	r5, [sp, #12]
 801b4ca:	4293      	cmp	r3, r2
 801b4cc:	dc07      	bgt.n	801b4de <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x52>
 801b4ce:	1a69      	subs	r1, r5, r1
 801b4d0:	b209      	sxth	r1, r1
 801b4d2:	2900      	cmp	r1, #0
 801b4d4:	bfb8      	it	lt
 801b4d6:	4249      	neglt	r1, r1
 801b4d8:	b209      	sxth	r1, r1
 801b4da:	428a      	cmp	r2, r1
 801b4dc:	da10      	bge.n	801b500 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x74>
 801b4de:	6920      	ldr	r0, [r4, #16]
 801b4e0:	4669      	mov	r1, sp
 801b4e2:	eba8 0606 	sub.w	r6, r8, r6
 801b4e6:	1bef      	subs	r7, r5, r7
 801b4e8:	6803      	ldr	r3, [r0, #0]
 801b4ea:	685b      	ldr	r3, [r3, #4]
 801b4ec:	4798      	blx	r3
 801b4ee:	2300      	movs	r3, #0
 801b4f0:	2001      	movs	r0, #1
 801b4f2:	8166      	strh	r6, [r4, #10]
 801b4f4:	8123      	strh	r3, [r4, #8]
 801b4f6:	81a7      	strh	r7, [r4, #12]
 801b4f8:	f8a4 8004 	strh.w	r8, [r4, #4]
 801b4fc:	80e5      	strh	r5, [r4, #6]
 801b4fe:	73a0      	strb	r0, [r4, #14]
 801b500:	b004      	add	sp, #16
 801b502:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b506:	bf00      	nop
 801b508:	0801f0f4 	.word	0x0801f0f4

0801b50c <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>:
 801b50c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801b50e:	461e      	mov	r6, r3
 801b510:	1e4b      	subs	r3, r1, #1
 801b512:	b085      	sub	sp, #20
 801b514:	4604      	mov	r4, r0
 801b516:	2b01      	cmp	r3, #1
 801b518:	460d      	mov	r5, r1
 801b51a:	4617      	mov	r7, r2
 801b51c:	d84b      	bhi.n	801b5b6 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xaa>
 801b51e:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 801b522:	1cd3      	adds	r3, r2, #3
 801b524:	b29b      	uxth	r3, r3
 801b526:	2b06      	cmp	r3, #6
 801b528:	d916      	bls.n	801b558 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x4c>
 801b52a:	f8df c0a0 	ldr.w	ip, [pc, #160]	; 801b5cc <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 801b52e:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 801b532:	f8cd c004 	str.w	ip, [sp, #4]
 801b536:	f04f 0c00 	mov.w	ip, #0
 801b53a:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 801b53e:	6900      	ldr	r0, [r0, #16]
 801b540:	f8ad 100c 	strh.w	r1, [sp, #12]
 801b544:	a901      	add	r1, sp, #4
 801b546:	f88d c008 	strb.w	ip, [sp, #8]
 801b54a:	f8ad 200a 	strh.w	r2, [sp, #10]
 801b54e:	f8ad 300e 	strh.w	r3, [sp, #14]
 801b552:	6803      	ldr	r3, [r0, #0]
 801b554:	689b      	ldr	r3, [r3, #8]
 801b556:	4798      	blx	r3
 801b558:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801b55c:	1cd3      	adds	r3, r2, #3
 801b55e:	b29b      	uxth	r3, r3
 801b560:	2b06      	cmp	r3, #6
 801b562:	d916      	bls.n	801b592 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 801b564:	f8df c064 	ldr.w	ip, [pc, #100]	; 801b5cc <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 801b568:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 801b56c:	f8cd c004 	str.w	ip, [sp, #4]
 801b570:	f04f 0c01 	mov.w	ip, #1
 801b574:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 801b578:	6920      	ldr	r0, [r4, #16]
 801b57a:	f8ad 100c 	strh.w	r1, [sp, #12]
 801b57e:	a901      	add	r1, sp, #4
 801b580:	f88d c008 	strb.w	ip, [sp, #8]
 801b584:	f8ad 200a 	strh.w	r2, [sp, #10]
 801b588:	f8ad 300e 	strh.w	r3, [sp, #14]
 801b58c:	6803      	ldr	r3, [r0, #0]
 801b58e:	689b      	ldr	r3, [r3, #8]
 801b590:	4798      	blx	r3
 801b592:	4b0d      	ldr	r3, [pc, #52]	; (801b5c8 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xbc>)
 801b594:	a901      	add	r1, sp, #4
 801b596:	6920      	ldr	r0, [r4, #16]
 801b598:	9301      	str	r3, [sp, #4]
 801b59a:	2300      	movs	r3, #0
 801b59c:	f88d 5008 	strb.w	r5, [sp, #8]
 801b5a0:	f8ad 700a 	strh.w	r7, [sp, #10]
 801b5a4:	f8ad 600c 	strh.w	r6, [sp, #12]
 801b5a8:	f8ad 300e 	strh.w	r3, [sp, #14]
 801b5ac:	6803      	ldr	r3, [r0, #0]
 801b5ae:	681b      	ldr	r3, [r3, #0]
 801b5b0:	4798      	blx	r3
 801b5b2:	b005      	add	sp, #20
 801b5b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801b5b6:	2900      	cmp	r1, #0
 801b5b8:	d1eb      	bne.n	801b592 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 801b5ba:	80a2      	strh	r2, [r4, #4]
 801b5bc:	80c6      	strh	r6, [r0, #6]
 801b5be:	60a1      	str	r1, [r4, #8]
 801b5c0:	81a1      	strh	r1, [r4, #12]
 801b5c2:	73a1      	strb	r1, [r4, #14]
 801b5c4:	e7e5      	b.n	801b592 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 801b5c6:	bf00      	nop
 801b5c8:	0801f0e0 	.word	0x0801f0e0
 801b5cc:	0801fa98 	.word	0x0801fa98

0801b5d0 <_ZdlPvj>:
 801b5d0:	f000 b812 	b.w	801b5f8 <_ZdlPv>

0801b5d4 <__cxa_guard_acquire>:
 801b5d4:	6803      	ldr	r3, [r0, #0]
 801b5d6:	07db      	lsls	r3, r3, #31
 801b5d8:	d406      	bmi.n	801b5e8 <__cxa_guard_acquire+0x14>
 801b5da:	7843      	ldrb	r3, [r0, #1]
 801b5dc:	b103      	cbz	r3, 801b5e0 <__cxa_guard_acquire+0xc>
 801b5de:	deff      	udf	#255	; 0xff
 801b5e0:	2301      	movs	r3, #1
 801b5e2:	7043      	strb	r3, [r0, #1]
 801b5e4:	4618      	mov	r0, r3
 801b5e6:	4770      	bx	lr
 801b5e8:	2000      	movs	r0, #0
 801b5ea:	4770      	bx	lr

0801b5ec <__cxa_guard_release>:
 801b5ec:	2301      	movs	r3, #1
 801b5ee:	6003      	str	r3, [r0, #0]
 801b5f0:	4770      	bx	lr

0801b5f2 <__cxa_pure_virtual>:
 801b5f2:	b508      	push	{r3, lr}
 801b5f4:	f000 f80e 	bl	801b614 <_ZSt9terminatev>

0801b5f8 <_ZdlPv>:
 801b5f8:	f000 b97a 	b.w	801b8f0 <free>

0801b5fc <_ZN10__cxxabiv111__terminateEPFvvE>:
 801b5fc:	b508      	push	{r3, lr}
 801b5fe:	4780      	blx	r0
 801b600:	f000 f80d 	bl	801b61e <abort>

0801b604 <_ZSt13get_terminatev>:
 801b604:	4b02      	ldr	r3, [pc, #8]	; (801b610 <_ZSt13get_terminatev+0xc>)
 801b606:	6818      	ldr	r0, [r3, #0]
 801b608:	f3bf 8f5b 	dmb	ish
 801b60c:	4770      	bx	lr
 801b60e:	bf00      	nop
 801b610:	2000013c 	.word	0x2000013c

0801b614 <_ZSt9terminatev>:
 801b614:	b508      	push	{r3, lr}
 801b616:	f7ff fff5 	bl	801b604 <_ZSt13get_terminatev>
 801b61a:	f7ff ffef 	bl	801b5fc <_ZN10__cxxabiv111__terminateEPFvvE>

0801b61e <abort>:
 801b61e:	b508      	push	{r3, lr}
 801b620:	2006      	movs	r0, #6
 801b622:	f001 f8a1 	bl	801c768 <raise>
 801b626:	2001      	movs	r0, #1
 801b628:	f7e8 f90c 	bl	8003844 <_exit>

0801b62c <__assert_func>:
 801b62c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801b62e:	4614      	mov	r4, r2
 801b630:	461a      	mov	r2, r3
 801b632:	4b09      	ldr	r3, [pc, #36]	; (801b658 <__assert_func+0x2c>)
 801b634:	681b      	ldr	r3, [r3, #0]
 801b636:	4605      	mov	r5, r0
 801b638:	68d8      	ldr	r0, [r3, #12]
 801b63a:	b14c      	cbz	r4, 801b650 <__assert_func+0x24>
 801b63c:	4b07      	ldr	r3, [pc, #28]	; (801b65c <__assert_func+0x30>)
 801b63e:	9100      	str	r1, [sp, #0]
 801b640:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801b644:	4906      	ldr	r1, [pc, #24]	; (801b660 <__assert_func+0x34>)
 801b646:	462b      	mov	r3, r5
 801b648:	f000 f8f0 	bl	801b82c <fiprintf>
 801b64c:	f7ff ffe7 	bl	801b61e <abort>
 801b650:	4b04      	ldr	r3, [pc, #16]	; (801b664 <__assert_func+0x38>)
 801b652:	461c      	mov	r4, r3
 801b654:	e7f3      	b.n	801b63e <__assert_func+0x12>
 801b656:	bf00      	nop
 801b658:	20000140 	.word	0x20000140
 801b65c:	08020add 	.word	0x08020add
 801b660:	08020aea 	.word	0x08020aea
 801b664:	08020b18 	.word	0x08020b18

0801b668 <atexit>:
 801b668:	2300      	movs	r3, #0
 801b66a:	4601      	mov	r1, r0
 801b66c:	461a      	mov	r2, r3
 801b66e:	4618      	mov	r0, r3
 801b670:	f001 b9cc 	b.w	801ca0c <__register_exitproc>

0801b674 <__errno>:
 801b674:	4b01      	ldr	r3, [pc, #4]	; (801b67c <__errno+0x8>)
 801b676:	6818      	ldr	r0, [r3, #0]
 801b678:	4770      	bx	lr
 801b67a:	bf00      	nop
 801b67c:	20000140 	.word	0x20000140

0801b680 <std>:
 801b680:	2300      	movs	r3, #0
 801b682:	b510      	push	{r4, lr}
 801b684:	4604      	mov	r4, r0
 801b686:	e9c0 3300 	strd	r3, r3, [r0]
 801b68a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801b68e:	6083      	str	r3, [r0, #8]
 801b690:	8181      	strh	r1, [r0, #12]
 801b692:	6643      	str	r3, [r0, #100]	; 0x64
 801b694:	81c2      	strh	r2, [r0, #14]
 801b696:	6183      	str	r3, [r0, #24]
 801b698:	4619      	mov	r1, r3
 801b69a:	2208      	movs	r2, #8
 801b69c:	305c      	adds	r0, #92	; 0x5c
 801b69e:	f000 f93d 	bl	801b91c <memset>
 801b6a2:	4b05      	ldr	r3, [pc, #20]	; (801b6b8 <std+0x38>)
 801b6a4:	6263      	str	r3, [r4, #36]	; 0x24
 801b6a6:	4b05      	ldr	r3, [pc, #20]	; (801b6bc <std+0x3c>)
 801b6a8:	62a3      	str	r3, [r4, #40]	; 0x28
 801b6aa:	4b05      	ldr	r3, [pc, #20]	; (801b6c0 <std+0x40>)
 801b6ac:	62e3      	str	r3, [r4, #44]	; 0x2c
 801b6ae:	4b05      	ldr	r3, [pc, #20]	; (801b6c4 <std+0x44>)
 801b6b0:	6224      	str	r4, [r4, #32]
 801b6b2:	6323      	str	r3, [r4, #48]	; 0x30
 801b6b4:	bd10      	pop	{r4, pc}
 801b6b6:	bf00      	nop
 801b6b8:	0801c7e1 	.word	0x0801c7e1
 801b6bc:	0801c803 	.word	0x0801c803
 801b6c0:	0801c83b 	.word	0x0801c83b
 801b6c4:	0801c85f 	.word	0x0801c85f

0801b6c8 <_cleanup_r>:
 801b6c8:	4901      	ldr	r1, [pc, #4]	; (801b6d0 <_cleanup_r+0x8>)
 801b6ca:	f000 b8c1 	b.w	801b850 <_fwalk_reent>
 801b6ce:	bf00      	nop
 801b6d0:	0801d7f1 	.word	0x0801d7f1

0801b6d4 <__sfmoreglue>:
 801b6d4:	b570      	push	{r4, r5, r6, lr}
 801b6d6:	2268      	movs	r2, #104	; 0x68
 801b6d8:	1e4d      	subs	r5, r1, #1
 801b6da:	4355      	muls	r5, r2
 801b6dc:	460e      	mov	r6, r1
 801b6de:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801b6e2:	f000 f98f 	bl	801ba04 <_malloc_r>
 801b6e6:	4604      	mov	r4, r0
 801b6e8:	b140      	cbz	r0, 801b6fc <__sfmoreglue+0x28>
 801b6ea:	2100      	movs	r1, #0
 801b6ec:	e9c0 1600 	strd	r1, r6, [r0]
 801b6f0:	300c      	adds	r0, #12
 801b6f2:	60a0      	str	r0, [r4, #8]
 801b6f4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801b6f8:	f000 f910 	bl	801b91c <memset>
 801b6fc:	4620      	mov	r0, r4
 801b6fe:	bd70      	pop	{r4, r5, r6, pc}

0801b700 <__sfp_lock_acquire>:
 801b700:	4801      	ldr	r0, [pc, #4]	; (801b708 <__sfp_lock_acquire+0x8>)
 801b702:	f000 b8ea 	b.w	801b8da <__retarget_lock_acquire_recursive>
 801b706:	bf00      	nop
 801b708:	20006e4e 	.word	0x20006e4e

0801b70c <__sfp_lock_release>:
 801b70c:	4801      	ldr	r0, [pc, #4]	; (801b714 <__sfp_lock_release+0x8>)
 801b70e:	f000 b8e6 	b.w	801b8de <__retarget_lock_release_recursive>
 801b712:	bf00      	nop
 801b714:	20006e4e 	.word	0x20006e4e

0801b718 <__sinit_lock_acquire>:
 801b718:	4801      	ldr	r0, [pc, #4]	; (801b720 <__sinit_lock_acquire+0x8>)
 801b71a:	f000 b8de 	b.w	801b8da <__retarget_lock_acquire_recursive>
 801b71e:	bf00      	nop
 801b720:	20006e4f 	.word	0x20006e4f

0801b724 <__sinit_lock_release>:
 801b724:	4801      	ldr	r0, [pc, #4]	; (801b72c <__sinit_lock_release+0x8>)
 801b726:	f000 b8da 	b.w	801b8de <__retarget_lock_release_recursive>
 801b72a:	bf00      	nop
 801b72c:	20006e4f 	.word	0x20006e4f

0801b730 <__sinit>:
 801b730:	b510      	push	{r4, lr}
 801b732:	4604      	mov	r4, r0
 801b734:	f7ff fff0 	bl	801b718 <__sinit_lock_acquire>
 801b738:	69a3      	ldr	r3, [r4, #24]
 801b73a:	b11b      	cbz	r3, 801b744 <__sinit+0x14>
 801b73c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b740:	f7ff bff0 	b.w	801b724 <__sinit_lock_release>
 801b744:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801b748:	6523      	str	r3, [r4, #80]	; 0x50
 801b74a:	4b13      	ldr	r3, [pc, #76]	; (801b798 <__sinit+0x68>)
 801b74c:	4a13      	ldr	r2, [pc, #76]	; (801b79c <__sinit+0x6c>)
 801b74e:	681b      	ldr	r3, [r3, #0]
 801b750:	62a2      	str	r2, [r4, #40]	; 0x28
 801b752:	42a3      	cmp	r3, r4
 801b754:	bf04      	itt	eq
 801b756:	2301      	moveq	r3, #1
 801b758:	61a3      	streq	r3, [r4, #24]
 801b75a:	4620      	mov	r0, r4
 801b75c:	f000 f820 	bl	801b7a0 <__sfp>
 801b760:	6060      	str	r0, [r4, #4]
 801b762:	4620      	mov	r0, r4
 801b764:	f000 f81c 	bl	801b7a0 <__sfp>
 801b768:	60a0      	str	r0, [r4, #8]
 801b76a:	4620      	mov	r0, r4
 801b76c:	f000 f818 	bl	801b7a0 <__sfp>
 801b770:	2200      	movs	r2, #0
 801b772:	60e0      	str	r0, [r4, #12]
 801b774:	2104      	movs	r1, #4
 801b776:	6860      	ldr	r0, [r4, #4]
 801b778:	f7ff ff82 	bl	801b680 <std>
 801b77c:	68a0      	ldr	r0, [r4, #8]
 801b77e:	2201      	movs	r2, #1
 801b780:	2109      	movs	r1, #9
 801b782:	f7ff ff7d 	bl	801b680 <std>
 801b786:	68e0      	ldr	r0, [r4, #12]
 801b788:	2202      	movs	r2, #2
 801b78a:	2112      	movs	r1, #18
 801b78c:	f7ff ff78 	bl	801b680 <std>
 801b790:	2301      	movs	r3, #1
 801b792:	61a3      	str	r3, [r4, #24]
 801b794:	e7d2      	b.n	801b73c <__sinit+0xc>
 801b796:	bf00      	nop
 801b798:	08020b7c 	.word	0x08020b7c
 801b79c:	0801b6c9 	.word	0x0801b6c9

0801b7a0 <__sfp>:
 801b7a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b7a2:	4607      	mov	r7, r0
 801b7a4:	f7ff ffac 	bl	801b700 <__sfp_lock_acquire>
 801b7a8:	4b1e      	ldr	r3, [pc, #120]	; (801b824 <__sfp+0x84>)
 801b7aa:	681e      	ldr	r6, [r3, #0]
 801b7ac:	69b3      	ldr	r3, [r6, #24]
 801b7ae:	b913      	cbnz	r3, 801b7b6 <__sfp+0x16>
 801b7b0:	4630      	mov	r0, r6
 801b7b2:	f7ff ffbd 	bl	801b730 <__sinit>
 801b7b6:	3648      	adds	r6, #72	; 0x48
 801b7b8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801b7bc:	3b01      	subs	r3, #1
 801b7be:	d503      	bpl.n	801b7c8 <__sfp+0x28>
 801b7c0:	6833      	ldr	r3, [r6, #0]
 801b7c2:	b30b      	cbz	r3, 801b808 <__sfp+0x68>
 801b7c4:	6836      	ldr	r6, [r6, #0]
 801b7c6:	e7f7      	b.n	801b7b8 <__sfp+0x18>
 801b7c8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801b7cc:	b9d5      	cbnz	r5, 801b804 <__sfp+0x64>
 801b7ce:	4b16      	ldr	r3, [pc, #88]	; (801b828 <__sfp+0x88>)
 801b7d0:	60e3      	str	r3, [r4, #12]
 801b7d2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801b7d6:	6665      	str	r5, [r4, #100]	; 0x64
 801b7d8:	f000 f87e 	bl	801b8d8 <__retarget_lock_init_recursive>
 801b7dc:	f7ff ff96 	bl	801b70c <__sfp_lock_release>
 801b7e0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801b7e4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 801b7e8:	6025      	str	r5, [r4, #0]
 801b7ea:	61a5      	str	r5, [r4, #24]
 801b7ec:	2208      	movs	r2, #8
 801b7ee:	4629      	mov	r1, r5
 801b7f0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801b7f4:	f000 f892 	bl	801b91c <memset>
 801b7f8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801b7fc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801b800:	4620      	mov	r0, r4
 801b802:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801b804:	3468      	adds	r4, #104	; 0x68
 801b806:	e7d9      	b.n	801b7bc <__sfp+0x1c>
 801b808:	2104      	movs	r1, #4
 801b80a:	4638      	mov	r0, r7
 801b80c:	f7ff ff62 	bl	801b6d4 <__sfmoreglue>
 801b810:	4604      	mov	r4, r0
 801b812:	6030      	str	r0, [r6, #0]
 801b814:	2800      	cmp	r0, #0
 801b816:	d1d5      	bne.n	801b7c4 <__sfp+0x24>
 801b818:	f7ff ff78 	bl	801b70c <__sfp_lock_release>
 801b81c:	230c      	movs	r3, #12
 801b81e:	603b      	str	r3, [r7, #0]
 801b820:	e7ee      	b.n	801b800 <__sfp+0x60>
 801b822:	bf00      	nop
 801b824:	08020b7c 	.word	0x08020b7c
 801b828:	ffff0001 	.word	0xffff0001

0801b82c <fiprintf>:
 801b82c:	b40e      	push	{r1, r2, r3}
 801b82e:	b503      	push	{r0, r1, lr}
 801b830:	4601      	mov	r1, r0
 801b832:	ab03      	add	r3, sp, #12
 801b834:	4805      	ldr	r0, [pc, #20]	; (801b84c <fiprintf+0x20>)
 801b836:	f853 2b04 	ldr.w	r2, [r3], #4
 801b83a:	6800      	ldr	r0, [r0, #0]
 801b83c:	9301      	str	r3, [sp, #4]
 801b83e:	f000 f97f 	bl	801bb40 <_vfiprintf_r>
 801b842:	b002      	add	sp, #8
 801b844:	f85d eb04 	ldr.w	lr, [sp], #4
 801b848:	b003      	add	sp, #12
 801b84a:	4770      	bx	lr
 801b84c:	20000140 	.word	0x20000140

0801b850 <_fwalk_reent>:
 801b850:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801b854:	4606      	mov	r6, r0
 801b856:	4688      	mov	r8, r1
 801b858:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801b85c:	2700      	movs	r7, #0
 801b85e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801b862:	f1b9 0901 	subs.w	r9, r9, #1
 801b866:	d505      	bpl.n	801b874 <_fwalk_reent+0x24>
 801b868:	6824      	ldr	r4, [r4, #0]
 801b86a:	2c00      	cmp	r4, #0
 801b86c:	d1f7      	bne.n	801b85e <_fwalk_reent+0xe>
 801b86e:	4638      	mov	r0, r7
 801b870:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801b874:	89ab      	ldrh	r3, [r5, #12]
 801b876:	2b01      	cmp	r3, #1
 801b878:	d907      	bls.n	801b88a <_fwalk_reent+0x3a>
 801b87a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801b87e:	3301      	adds	r3, #1
 801b880:	d003      	beq.n	801b88a <_fwalk_reent+0x3a>
 801b882:	4629      	mov	r1, r5
 801b884:	4630      	mov	r0, r6
 801b886:	47c0      	blx	r8
 801b888:	4307      	orrs	r7, r0
 801b88a:	3568      	adds	r5, #104	; 0x68
 801b88c:	e7e9      	b.n	801b862 <_fwalk_reent+0x12>
	...

0801b890 <__libc_init_array>:
 801b890:	b570      	push	{r4, r5, r6, lr}
 801b892:	4d0d      	ldr	r5, [pc, #52]	; (801b8c8 <__libc_init_array+0x38>)
 801b894:	4c0d      	ldr	r4, [pc, #52]	; (801b8cc <__libc_init_array+0x3c>)
 801b896:	1b64      	subs	r4, r4, r5
 801b898:	10a4      	asrs	r4, r4, #2
 801b89a:	2600      	movs	r6, #0
 801b89c:	42a6      	cmp	r6, r4
 801b89e:	d109      	bne.n	801b8b4 <__libc_init_array+0x24>
 801b8a0:	4d0b      	ldr	r5, [pc, #44]	; (801b8d0 <__libc_init_array+0x40>)
 801b8a2:	4c0c      	ldr	r4, [pc, #48]	; (801b8d4 <__libc_init_array+0x44>)
 801b8a4:	f002 fe02 	bl	801e4ac <_init>
 801b8a8:	1b64      	subs	r4, r4, r5
 801b8aa:	10a4      	asrs	r4, r4, #2
 801b8ac:	2600      	movs	r6, #0
 801b8ae:	42a6      	cmp	r6, r4
 801b8b0:	d105      	bne.n	801b8be <__libc_init_array+0x2e>
 801b8b2:	bd70      	pop	{r4, r5, r6, pc}
 801b8b4:	f855 3b04 	ldr.w	r3, [r5], #4
 801b8b8:	4798      	blx	r3
 801b8ba:	3601      	adds	r6, #1
 801b8bc:	e7ee      	b.n	801b89c <__libc_init_array+0xc>
 801b8be:	f855 3b04 	ldr.w	r3, [r5], #4
 801b8c2:	4798      	blx	r3
 801b8c4:	3601      	adds	r6, #1
 801b8c6:	e7f2      	b.n	801b8ae <__libc_init_array+0x1e>
 801b8c8:	08038040 	.word	0x08038040
 801b8cc:	08038040 	.word	0x08038040
 801b8d0:	08038040 	.word	0x08038040
 801b8d4:	08038068 	.word	0x08038068

0801b8d8 <__retarget_lock_init_recursive>:
 801b8d8:	4770      	bx	lr

0801b8da <__retarget_lock_acquire_recursive>:
 801b8da:	4770      	bx	lr

0801b8dc <__retarget_lock_release>:
 801b8dc:	4770      	bx	lr

0801b8de <__retarget_lock_release_recursive>:
 801b8de:	4770      	bx	lr

0801b8e0 <malloc>:
 801b8e0:	4b02      	ldr	r3, [pc, #8]	; (801b8ec <malloc+0xc>)
 801b8e2:	4601      	mov	r1, r0
 801b8e4:	6818      	ldr	r0, [r3, #0]
 801b8e6:	f000 b88d 	b.w	801ba04 <_malloc_r>
 801b8ea:	bf00      	nop
 801b8ec:	20000140 	.word	0x20000140

0801b8f0 <free>:
 801b8f0:	4b02      	ldr	r3, [pc, #8]	; (801b8fc <free+0xc>)
 801b8f2:	4601      	mov	r1, r0
 801b8f4:	6818      	ldr	r0, [r3, #0]
 801b8f6:	f000 b819 	b.w	801b92c <_free_r>
 801b8fa:	bf00      	nop
 801b8fc:	20000140 	.word	0x20000140

0801b900 <memcpy>:
 801b900:	440a      	add	r2, r1
 801b902:	4291      	cmp	r1, r2
 801b904:	f100 33ff 	add.w	r3, r0, #4294967295
 801b908:	d100      	bne.n	801b90c <memcpy+0xc>
 801b90a:	4770      	bx	lr
 801b90c:	b510      	push	{r4, lr}
 801b90e:	f811 4b01 	ldrb.w	r4, [r1], #1
 801b912:	f803 4f01 	strb.w	r4, [r3, #1]!
 801b916:	4291      	cmp	r1, r2
 801b918:	d1f9      	bne.n	801b90e <memcpy+0xe>
 801b91a:	bd10      	pop	{r4, pc}

0801b91c <memset>:
 801b91c:	4402      	add	r2, r0
 801b91e:	4603      	mov	r3, r0
 801b920:	4293      	cmp	r3, r2
 801b922:	d100      	bne.n	801b926 <memset+0xa>
 801b924:	4770      	bx	lr
 801b926:	f803 1b01 	strb.w	r1, [r3], #1
 801b92a:	e7f9      	b.n	801b920 <memset+0x4>

0801b92c <_free_r>:
 801b92c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801b92e:	2900      	cmp	r1, #0
 801b930:	d044      	beq.n	801b9bc <_free_r+0x90>
 801b932:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801b936:	9001      	str	r0, [sp, #4]
 801b938:	2b00      	cmp	r3, #0
 801b93a:	f1a1 0404 	sub.w	r4, r1, #4
 801b93e:	bfb8      	it	lt
 801b940:	18e4      	addlt	r4, r4, r3
 801b942:	f002 f827 	bl	801d994 <__malloc_lock>
 801b946:	4a1e      	ldr	r2, [pc, #120]	; (801b9c0 <_free_r+0x94>)
 801b948:	9801      	ldr	r0, [sp, #4]
 801b94a:	6813      	ldr	r3, [r2, #0]
 801b94c:	b933      	cbnz	r3, 801b95c <_free_r+0x30>
 801b94e:	6063      	str	r3, [r4, #4]
 801b950:	6014      	str	r4, [r2, #0]
 801b952:	b003      	add	sp, #12
 801b954:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801b958:	f002 b822 	b.w	801d9a0 <__malloc_unlock>
 801b95c:	42a3      	cmp	r3, r4
 801b95e:	d908      	bls.n	801b972 <_free_r+0x46>
 801b960:	6825      	ldr	r5, [r4, #0]
 801b962:	1961      	adds	r1, r4, r5
 801b964:	428b      	cmp	r3, r1
 801b966:	bf01      	itttt	eq
 801b968:	6819      	ldreq	r1, [r3, #0]
 801b96a:	685b      	ldreq	r3, [r3, #4]
 801b96c:	1949      	addeq	r1, r1, r5
 801b96e:	6021      	streq	r1, [r4, #0]
 801b970:	e7ed      	b.n	801b94e <_free_r+0x22>
 801b972:	461a      	mov	r2, r3
 801b974:	685b      	ldr	r3, [r3, #4]
 801b976:	b10b      	cbz	r3, 801b97c <_free_r+0x50>
 801b978:	42a3      	cmp	r3, r4
 801b97a:	d9fa      	bls.n	801b972 <_free_r+0x46>
 801b97c:	6811      	ldr	r1, [r2, #0]
 801b97e:	1855      	adds	r5, r2, r1
 801b980:	42a5      	cmp	r5, r4
 801b982:	d10b      	bne.n	801b99c <_free_r+0x70>
 801b984:	6824      	ldr	r4, [r4, #0]
 801b986:	4421      	add	r1, r4
 801b988:	1854      	adds	r4, r2, r1
 801b98a:	42a3      	cmp	r3, r4
 801b98c:	6011      	str	r1, [r2, #0]
 801b98e:	d1e0      	bne.n	801b952 <_free_r+0x26>
 801b990:	681c      	ldr	r4, [r3, #0]
 801b992:	685b      	ldr	r3, [r3, #4]
 801b994:	6053      	str	r3, [r2, #4]
 801b996:	4421      	add	r1, r4
 801b998:	6011      	str	r1, [r2, #0]
 801b99a:	e7da      	b.n	801b952 <_free_r+0x26>
 801b99c:	d902      	bls.n	801b9a4 <_free_r+0x78>
 801b99e:	230c      	movs	r3, #12
 801b9a0:	6003      	str	r3, [r0, #0]
 801b9a2:	e7d6      	b.n	801b952 <_free_r+0x26>
 801b9a4:	6825      	ldr	r5, [r4, #0]
 801b9a6:	1961      	adds	r1, r4, r5
 801b9a8:	428b      	cmp	r3, r1
 801b9aa:	bf04      	itt	eq
 801b9ac:	6819      	ldreq	r1, [r3, #0]
 801b9ae:	685b      	ldreq	r3, [r3, #4]
 801b9b0:	6063      	str	r3, [r4, #4]
 801b9b2:	bf04      	itt	eq
 801b9b4:	1949      	addeq	r1, r1, r5
 801b9b6:	6021      	streq	r1, [r4, #0]
 801b9b8:	6054      	str	r4, [r2, #4]
 801b9ba:	e7ca      	b.n	801b952 <_free_r+0x26>
 801b9bc:	b003      	add	sp, #12
 801b9be:	bd30      	pop	{r4, r5, pc}
 801b9c0:	20006e50 	.word	0x20006e50

0801b9c4 <sbrk_aligned>:
 801b9c4:	b570      	push	{r4, r5, r6, lr}
 801b9c6:	4e0e      	ldr	r6, [pc, #56]	; (801ba00 <sbrk_aligned+0x3c>)
 801b9c8:	460c      	mov	r4, r1
 801b9ca:	6831      	ldr	r1, [r6, #0]
 801b9cc:	4605      	mov	r5, r0
 801b9ce:	b911      	cbnz	r1, 801b9d6 <sbrk_aligned+0x12>
 801b9d0:	f000 fe92 	bl	801c6f8 <_sbrk_r>
 801b9d4:	6030      	str	r0, [r6, #0]
 801b9d6:	4621      	mov	r1, r4
 801b9d8:	4628      	mov	r0, r5
 801b9da:	f000 fe8d 	bl	801c6f8 <_sbrk_r>
 801b9de:	1c43      	adds	r3, r0, #1
 801b9e0:	d00a      	beq.n	801b9f8 <sbrk_aligned+0x34>
 801b9e2:	1cc4      	adds	r4, r0, #3
 801b9e4:	f024 0403 	bic.w	r4, r4, #3
 801b9e8:	42a0      	cmp	r0, r4
 801b9ea:	d007      	beq.n	801b9fc <sbrk_aligned+0x38>
 801b9ec:	1a21      	subs	r1, r4, r0
 801b9ee:	4628      	mov	r0, r5
 801b9f0:	f000 fe82 	bl	801c6f8 <_sbrk_r>
 801b9f4:	3001      	adds	r0, #1
 801b9f6:	d101      	bne.n	801b9fc <sbrk_aligned+0x38>
 801b9f8:	f04f 34ff 	mov.w	r4, #4294967295
 801b9fc:	4620      	mov	r0, r4
 801b9fe:	bd70      	pop	{r4, r5, r6, pc}
 801ba00:	20006e54 	.word	0x20006e54

0801ba04 <_malloc_r>:
 801ba04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ba08:	1ccd      	adds	r5, r1, #3
 801ba0a:	f025 0503 	bic.w	r5, r5, #3
 801ba0e:	3508      	adds	r5, #8
 801ba10:	2d0c      	cmp	r5, #12
 801ba12:	bf38      	it	cc
 801ba14:	250c      	movcc	r5, #12
 801ba16:	2d00      	cmp	r5, #0
 801ba18:	4607      	mov	r7, r0
 801ba1a:	db01      	blt.n	801ba20 <_malloc_r+0x1c>
 801ba1c:	42a9      	cmp	r1, r5
 801ba1e:	d905      	bls.n	801ba2c <_malloc_r+0x28>
 801ba20:	230c      	movs	r3, #12
 801ba22:	603b      	str	r3, [r7, #0]
 801ba24:	2600      	movs	r6, #0
 801ba26:	4630      	mov	r0, r6
 801ba28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ba2c:	4e2e      	ldr	r6, [pc, #184]	; (801bae8 <_malloc_r+0xe4>)
 801ba2e:	f001 ffb1 	bl	801d994 <__malloc_lock>
 801ba32:	6833      	ldr	r3, [r6, #0]
 801ba34:	461c      	mov	r4, r3
 801ba36:	bb34      	cbnz	r4, 801ba86 <_malloc_r+0x82>
 801ba38:	4629      	mov	r1, r5
 801ba3a:	4638      	mov	r0, r7
 801ba3c:	f7ff ffc2 	bl	801b9c4 <sbrk_aligned>
 801ba40:	1c43      	adds	r3, r0, #1
 801ba42:	4604      	mov	r4, r0
 801ba44:	d14d      	bne.n	801bae2 <_malloc_r+0xde>
 801ba46:	6834      	ldr	r4, [r6, #0]
 801ba48:	4626      	mov	r6, r4
 801ba4a:	2e00      	cmp	r6, #0
 801ba4c:	d140      	bne.n	801bad0 <_malloc_r+0xcc>
 801ba4e:	6823      	ldr	r3, [r4, #0]
 801ba50:	4631      	mov	r1, r6
 801ba52:	4638      	mov	r0, r7
 801ba54:	eb04 0803 	add.w	r8, r4, r3
 801ba58:	f000 fe4e 	bl	801c6f8 <_sbrk_r>
 801ba5c:	4580      	cmp	r8, r0
 801ba5e:	d13a      	bne.n	801bad6 <_malloc_r+0xd2>
 801ba60:	6821      	ldr	r1, [r4, #0]
 801ba62:	3503      	adds	r5, #3
 801ba64:	1a6d      	subs	r5, r5, r1
 801ba66:	f025 0503 	bic.w	r5, r5, #3
 801ba6a:	3508      	adds	r5, #8
 801ba6c:	2d0c      	cmp	r5, #12
 801ba6e:	bf38      	it	cc
 801ba70:	250c      	movcc	r5, #12
 801ba72:	4629      	mov	r1, r5
 801ba74:	4638      	mov	r0, r7
 801ba76:	f7ff ffa5 	bl	801b9c4 <sbrk_aligned>
 801ba7a:	3001      	adds	r0, #1
 801ba7c:	d02b      	beq.n	801bad6 <_malloc_r+0xd2>
 801ba7e:	6823      	ldr	r3, [r4, #0]
 801ba80:	442b      	add	r3, r5
 801ba82:	6023      	str	r3, [r4, #0]
 801ba84:	e00e      	b.n	801baa4 <_malloc_r+0xa0>
 801ba86:	6822      	ldr	r2, [r4, #0]
 801ba88:	1b52      	subs	r2, r2, r5
 801ba8a:	d41e      	bmi.n	801baca <_malloc_r+0xc6>
 801ba8c:	2a0b      	cmp	r2, #11
 801ba8e:	d916      	bls.n	801babe <_malloc_r+0xba>
 801ba90:	1961      	adds	r1, r4, r5
 801ba92:	42a3      	cmp	r3, r4
 801ba94:	6025      	str	r5, [r4, #0]
 801ba96:	bf18      	it	ne
 801ba98:	6059      	strne	r1, [r3, #4]
 801ba9a:	6863      	ldr	r3, [r4, #4]
 801ba9c:	bf08      	it	eq
 801ba9e:	6031      	streq	r1, [r6, #0]
 801baa0:	5162      	str	r2, [r4, r5]
 801baa2:	604b      	str	r3, [r1, #4]
 801baa4:	4638      	mov	r0, r7
 801baa6:	f104 060b 	add.w	r6, r4, #11
 801baaa:	f001 ff79 	bl	801d9a0 <__malloc_unlock>
 801baae:	f026 0607 	bic.w	r6, r6, #7
 801bab2:	1d23      	adds	r3, r4, #4
 801bab4:	1af2      	subs	r2, r6, r3
 801bab6:	d0b6      	beq.n	801ba26 <_malloc_r+0x22>
 801bab8:	1b9b      	subs	r3, r3, r6
 801baba:	50a3      	str	r3, [r4, r2]
 801babc:	e7b3      	b.n	801ba26 <_malloc_r+0x22>
 801babe:	6862      	ldr	r2, [r4, #4]
 801bac0:	42a3      	cmp	r3, r4
 801bac2:	bf0c      	ite	eq
 801bac4:	6032      	streq	r2, [r6, #0]
 801bac6:	605a      	strne	r2, [r3, #4]
 801bac8:	e7ec      	b.n	801baa4 <_malloc_r+0xa0>
 801baca:	4623      	mov	r3, r4
 801bacc:	6864      	ldr	r4, [r4, #4]
 801bace:	e7b2      	b.n	801ba36 <_malloc_r+0x32>
 801bad0:	4634      	mov	r4, r6
 801bad2:	6876      	ldr	r6, [r6, #4]
 801bad4:	e7b9      	b.n	801ba4a <_malloc_r+0x46>
 801bad6:	230c      	movs	r3, #12
 801bad8:	603b      	str	r3, [r7, #0]
 801bada:	4638      	mov	r0, r7
 801badc:	f001 ff60 	bl	801d9a0 <__malloc_unlock>
 801bae0:	e7a1      	b.n	801ba26 <_malloc_r+0x22>
 801bae2:	6025      	str	r5, [r4, #0]
 801bae4:	e7de      	b.n	801baa4 <_malloc_r+0xa0>
 801bae6:	bf00      	nop
 801bae8:	20006e50 	.word	0x20006e50

0801baec <__sfputc_r>:
 801baec:	6893      	ldr	r3, [r2, #8]
 801baee:	3b01      	subs	r3, #1
 801baf0:	2b00      	cmp	r3, #0
 801baf2:	b410      	push	{r4}
 801baf4:	6093      	str	r3, [r2, #8]
 801baf6:	da08      	bge.n	801bb0a <__sfputc_r+0x1e>
 801baf8:	6994      	ldr	r4, [r2, #24]
 801bafa:	42a3      	cmp	r3, r4
 801bafc:	db01      	blt.n	801bb02 <__sfputc_r+0x16>
 801bafe:	290a      	cmp	r1, #10
 801bb00:	d103      	bne.n	801bb0a <__sfputc_r+0x1e>
 801bb02:	f85d 4b04 	ldr.w	r4, [sp], #4
 801bb06:	f000 beaf 	b.w	801c868 <__swbuf_r>
 801bb0a:	6813      	ldr	r3, [r2, #0]
 801bb0c:	1c58      	adds	r0, r3, #1
 801bb0e:	6010      	str	r0, [r2, #0]
 801bb10:	7019      	strb	r1, [r3, #0]
 801bb12:	4608      	mov	r0, r1
 801bb14:	f85d 4b04 	ldr.w	r4, [sp], #4
 801bb18:	4770      	bx	lr

0801bb1a <__sfputs_r>:
 801bb1a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801bb1c:	4606      	mov	r6, r0
 801bb1e:	460f      	mov	r7, r1
 801bb20:	4614      	mov	r4, r2
 801bb22:	18d5      	adds	r5, r2, r3
 801bb24:	42ac      	cmp	r4, r5
 801bb26:	d101      	bne.n	801bb2c <__sfputs_r+0x12>
 801bb28:	2000      	movs	r0, #0
 801bb2a:	e007      	b.n	801bb3c <__sfputs_r+0x22>
 801bb2c:	f814 1b01 	ldrb.w	r1, [r4], #1
 801bb30:	463a      	mov	r2, r7
 801bb32:	4630      	mov	r0, r6
 801bb34:	f7ff ffda 	bl	801baec <__sfputc_r>
 801bb38:	1c43      	adds	r3, r0, #1
 801bb3a:	d1f3      	bne.n	801bb24 <__sfputs_r+0xa>
 801bb3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801bb40 <_vfiprintf_r>:
 801bb40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bb44:	460d      	mov	r5, r1
 801bb46:	b09d      	sub	sp, #116	; 0x74
 801bb48:	4614      	mov	r4, r2
 801bb4a:	4698      	mov	r8, r3
 801bb4c:	4606      	mov	r6, r0
 801bb4e:	b118      	cbz	r0, 801bb58 <_vfiprintf_r+0x18>
 801bb50:	6983      	ldr	r3, [r0, #24]
 801bb52:	b90b      	cbnz	r3, 801bb58 <_vfiprintf_r+0x18>
 801bb54:	f7ff fdec 	bl	801b730 <__sinit>
 801bb58:	4b89      	ldr	r3, [pc, #548]	; (801bd80 <_vfiprintf_r+0x240>)
 801bb5a:	429d      	cmp	r5, r3
 801bb5c:	d11b      	bne.n	801bb96 <_vfiprintf_r+0x56>
 801bb5e:	6875      	ldr	r5, [r6, #4]
 801bb60:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801bb62:	07d9      	lsls	r1, r3, #31
 801bb64:	d405      	bmi.n	801bb72 <_vfiprintf_r+0x32>
 801bb66:	89ab      	ldrh	r3, [r5, #12]
 801bb68:	059a      	lsls	r2, r3, #22
 801bb6a:	d402      	bmi.n	801bb72 <_vfiprintf_r+0x32>
 801bb6c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801bb6e:	f7ff feb4 	bl	801b8da <__retarget_lock_acquire_recursive>
 801bb72:	89ab      	ldrh	r3, [r5, #12]
 801bb74:	071b      	lsls	r3, r3, #28
 801bb76:	d501      	bpl.n	801bb7c <_vfiprintf_r+0x3c>
 801bb78:	692b      	ldr	r3, [r5, #16]
 801bb7a:	b9eb      	cbnz	r3, 801bbb8 <_vfiprintf_r+0x78>
 801bb7c:	4629      	mov	r1, r5
 801bb7e:	4630      	mov	r0, r6
 801bb80:	f000 fed6 	bl	801c930 <__swsetup_r>
 801bb84:	b1c0      	cbz	r0, 801bbb8 <_vfiprintf_r+0x78>
 801bb86:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801bb88:	07dc      	lsls	r4, r3, #31
 801bb8a:	d50e      	bpl.n	801bbaa <_vfiprintf_r+0x6a>
 801bb8c:	f04f 30ff 	mov.w	r0, #4294967295
 801bb90:	b01d      	add	sp, #116	; 0x74
 801bb92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bb96:	4b7b      	ldr	r3, [pc, #492]	; (801bd84 <_vfiprintf_r+0x244>)
 801bb98:	429d      	cmp	r5, r3
 801bb9a:	d101      	bne.n	801bba0 <_vfiprintf_r+0x60>
 801bb9c:	68b5      	ldr	r5, [r6, #8]
 801bb9e:	e7df      	b.n	801bb60 <_vfiprintf_r+0x20>
 801bba0:	4b79      	ldr	r3, [pc, #484]	; (801bd88 <_vfiprintf_r+0x248>)
 801bba2:	429d      	cmp	r5, r3
 801bba4:	bf08      	it	eq
 801bba6:	68f5      	ldreq	r5, [r6, #12]
 801bba8:	e7da      	b.n	801bb60 <_vfiprintf_r+0x20>
 801bbaa:	89ab      	ldrh	r3, [r5, #12]
 801bbac:	0598      	lsls	r0, r3, #22
 801bbae:	d4ed      	bmi.n	801bb8c <_vfiprintf_r+0x4c>
 801bbb0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801bbb2:	f7ff fe94 	bl	801b8de <__retarget_lock_release_recursive>
 801bbb6:	e7e9      	b.n	801bb8c <_vfiprintf_r+0x4c>
 801bbb8:	2300      	movs	r3, #0
 801bbba:	9309      	str	r3, [sp, #36]	; 0x24
 801bbbc:	2320      	movs	r3, #32
 801bbbe:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801bbc2:	f8cd 800c 	str.w	r8, [sp, #12]
 801bbc6:	2330      	movs	r3, #48	; 0x30
 801bbc8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 801bd8c <_vfiprintf_r+0x24c>
 801bbcc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801bbd0:	f04f 0901 	mov.w	r9, #1
 801bbd4:	4623      	mov	r3, r4
 801bbd6:	469a      	mov	sl, r3
 801bbd8:	f813 2b01 	ldrb.w	r2, [r3], #1
 801bbdc:	b10a      	cbz	r2, 801bbe2 <_vfiprintf_r+0xa2>
 801bbde:	2a25      	cmp	r2, #37	; 0x25
 801bbe0:	d1f9      	bne.n	801bbd6 <_vfiprintf_r+0x96>
 801bbe2:	ebba 0b04 	subs.w	fp, sl, r4
 801bbe6:	d00b      	beq.n	801bc00 <_vfiprintf_r+0xc0>
 801bbe8:	465b      	mov	r3, fp
 801bbea:	4622      	mov	r2, r4
 801bbec:	4629      	mov	r1, r5
 801bbee:	4630      	mov	r0, r6
 801bbf0:	f7ff ff93 	bl	801bb1a <__sfputs_r>
 801bbf4:	3001      	adds	r0, #1
 801bbf6:	f000 80aa 	beq.w	801bd4e <_vfiprintf_r+0x20e>
 801bbfa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801bbfc:	445a      	add	r2, fp
 801bbfe:	9209      	str	r2, [sp, #36]	; 0x24
 801bc00:	f89a 3000 	ldrb.w	r3, [sl]
 801bc04:	2b00      	cmp	r3, #0
 801bc06:	f000 80a2 	beq.w	801bd4e <_vfiprintf_r+0x20e>
 801bc0a:	2300      	movs	r3, #0
 801bc0c:	f04f 32ff 	mov.w	r2, #4294967295
 801bc10:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801bc14:	f10a 0a01 	add.w	sl, sl, #1
 801bc18:	9304      	str	r3, [sp, #16]
 801bc1a:	9307      	str	r3, [sp, #28]
 801bc1c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801bc20:	931a      	str	r3, [sp, #104]	; 0x68
 801bc22:	4654      	mov	r4, sl
 801bc24:	2205      	movs	r2, #5
 801bc26:	f814 1b01 	ldrb.w	r1, [r4], #1
 801bc2a:	4858      	ldr	r0, [pc, #352]	; (801bd8c <_vfiprintf_r+0x24c>)
 801bc2c:	f7e4 fb60 	bl	80002f0 <memchr>
 801bc30:	9a04      	ldr	r2, [sp, #16]
 801bc32:	b9d8      	cbnz	r0, 801bc6c <_vfiprintf_r+0x12c>
 801bc34:	06d1      	lsls	r1, r2, #27
 801bc36:	bf44      	itt	mi
 801bc38:	2320      	movmi	r3, #32
 801bc3a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801bc3e:	0713      	lsls	r3, r2, #28
 801bc40:	bf44      	itt	mi
 801bc42:	232b      	movmi	r3, #43	; 0x2b
 801bc44:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801bc48:	f89a 3000 	ldrb.w	r3, [sl]
 801bc4c:	2b2a      	cmp	r3, #42	; 0x2a
 801bc4e:	d015      	beq.n	801bc7c <_vfiprintf_r+0x13c>
 801bc50:	9a07      	ldr	r2, [sp, #28]
 801bc52:	4654      	mov	r4, sl
 801bc54:	2000      	movs	r0, #0
 801bc56:	f04f 0c0a 	mov.w	ip, #10
 801bc5a:	4621      	mov	r1, r4
 801bc5c:	f811 3b01 	ldrb.w	r3, [r1], #1
 801bc60:	3b30      	subs	r3, #48	; 0x30
 801bc62:	2b09      	cmp	r3, #9
 801bc64:	d94e      	bls.n	801bd04 <_vfiprintf_r+0x1c4>
 801bc66:	b1b0      	cbz	r0, 801bc96 <_vfiprintf_r+0x156>
 801bc68:	9207      	str	r2, [sp, #28]
 801bc6a:	e014      	b.n	801bc96 <_vfiprintf_r+0x156>
 801bc6c:	eba0 0308 	sub.w	r3, r0, r8
 801bc70:	fa09 f303 	lsl.w	r3, r9, r3
 801bc74:	4313      	orrs	r3, r2
 801bc76:	9304      	str	r3, [sp, #16]
 801bc78:	46a2      	mov	sl, r4
 801bc7a:	e7d2      	b.n	801bc22 <_vfiprintf_r+0xe2>
 801bc7c:	9b03      	ldr	r3, [sp, #12]
 801bc7e:	1d19      	adds	r1, r3, #4
 801bc80:	681b      	ldr	r3, [r3, #0]
 801bc82:	9103      	str	r1, [sp, #12]
 801bc84:	2b00      	cmp	r3, #0
 801bc86:	bfbb      	ittet	lt
 801bc88:	425b      	neglt	r3, r3
 801bc8a:	f042 0202 	orrlt.w	r2, r2, #2
 801bc8e:	9307      	strge	r3, [sp, #28]
 801bc90:	9307      	strlt	r3, [sp, #28]
 801bc92:	bfb8      	it	lt
 801bc94:	9204      	strlt	r2, [sp, #16]
 801bc96:	7823      	ldrb	r3, [r4, #0]
 801bc98:	2b2e      	cmp	r3, #46	; 0x2e
 801bc9a:	d10c      	bne.n	801bcb6 <_vfiprintf_r+0x176>
 801bc9c:	7863      	ldrb	r3, [r4, #1]
 801bc9e:	2b2a      	cmp	r3, #42	; 0x2a
 801bca0:	d135      	bne.n	801bd0e <_vfiprintf_r+0x1ce>
 801bca2:	9b03      	ldr	r3, [sp, #12]
 801bca4:	1d1a      	adds	r2, r3, #4
 801bca6:	681b      	ldr	r3, [r3, #0]
 801bca8:	9203      	str	r2, [sp, #12]
 801bcaa:	2b00      	cmp	r3, #0
 801bcac:	bfb8      	it	lt
 801bcae:	f04f 33ff 	movlt.w	r3, #4294967295
 801bcb2:	3402      	adds	r4, #2
 801bcb4:	9305      	str	r3, [sp, #20]
 801bcb6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 801bd9c <_vfiprintf_r+0x25c>
 801bcba:	7821      	ldrb	r1, [r4, #0]
 801bcbc:	2203      	movs	r2, #3
 801bcbe:	4650      	mov	r0, sl
 801bcc0:	f7e4 fb16 	bl	80002f0 <memchr>
 801bcc4:	b140      	cbz	r0, 801bcd8 <_vfiprintf_r+0x198>
 801bcc6:	2340      	movs	r3, #64	; 0x40
 801bcc8:	eba0 000a 	sub.w	r0, r0, sl
 801bccc:	fa03 f000 	lsl.w	r0, r3, r0
 801bcd0:	9b04      	ldr	r3, [sp, #16]
 801bcd2:	4303      	orrs	r3, r0
 801bcd4:	3401      	adds	r4, #1
 801bcd6:	9304      	str	r3, [sp, #16]
 801bcd8:	f814 1b01 	ldrb.w	r1, [r4], #1
 801bcdc:	482c      	ldr	r0, [pc, #176]	; (801bd90 <_vfiprintf_r+0x250>)
 801bcde:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801bce2:	2206      	movs	r2, #6
 801bce4:	f7e4 fb04 	bl	80002f0 <memchr>
 801bce8:	2800      	cmp	r0, #0
 801bcea:	d03f      	beq.n	801bd6c <_vfiprintf_r+0x22c>
 801bcec:	4b29      	ldr	r3, [pc, #164]	; (801bd94 <_vfiprintf_r+0x254>)
 801bcee:	bb1b      	cbnz	r3, 801bd38 <_vfiprintf_r+0x1f8>
 801bcf0:	9b03      	ldr	r3, [sp, #12]
 801bcf2:	3307      	adds	r3, #7
 801bcf4:	f023 0307 	bic.w	r3, r3, #7
 801bcf8:	3308      	adds	r3, #8
 801bcfa:	9303      	str	r3, [sp, #12]
 801bcfc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801bcfe:	443b      	add	r3, r7
 801bd00:	9309      	str	r3, [sp, #36]	; 0x24
 801bd02:	e767      	b.n	801bbd4 <_vfiprintf_r+0x94>
 801bd04:	fb0c 3202 	mla	r2, ip, r2, r3
 801bd08:	460c      	mov	r4, r1
 801bd0a:	2001      	movs	r0, #1
 801bd0c:	e7a5      	b.n	801bc5a <_vfiprintf_r+0x11a>
 801bd0e:	2300      	movs	r3, #0
 801bd10:	3401      	adds	r4, #1
 801bd12:	9305      	str	r3, [sp, #20]
 801bd14:	4619      	mov	r1, r3
 801bd16:	f04f 0c0a 	mov.w	ip, #10
 801bd1a:	4620      	mov	r0, r4
 801bd1c:	f810 2b01 	ldrb.w	r2, [r0], #1
 801bd20:	3a30      	subs	r2, #48	; 0x30
 801bd22:	2a09      	cmp	r2, #9
 801bd24:	d903      	bls.n	801bd2e <_vfiprintf_r+0x1ee>
 801bd26:	2b00      	cmp	r3, #0
 801bd28:	d0c5      	beq.n	801bcb6 <_vfiprintf_r+0x176>
 801bd2a:	9105      	str	r1, [sp, #20]
 801bd2c:	e7c3      	b.n	801bcb6 <_vfiprintf_r+0x176>
 801bd2e:	fb0c 2101 	mla	r1, ip, r1, r2
 801bd32:	4604      	mov	r4, r0
 801bd34:	2301      	movs	r3, #1
 801bd36:	e7f0      	b.n	801bd1a <_vfiprintf_r+0x1da>
 801bd38:	ab03      	add	r3, sp, #12
 801bd3a:	9300      	str	r3, [sp, #0]
 801bd3c:	462a      	mov	r2, r5
 801bd3e:	4b16      	ldr	r3, [pc, #88]	; (801bd98 <_vfiprintf_r+0x258>)
 801bd40:	a904      	add	r1, sp, #16
 801bd42:	4630      	mov	r0, r6
 801bd44:	f000 f8bc 	bl	801bec0 <_printf_float>
 801bd48:	4607      	mov	r7, r0
 801bd4a:	1c78      	adds	r0, r7, #1
 801bd4c:	d1d6      	bne.n	801bcfc <_vfiprintf_r+0x1bc>
 801bd4e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801bd50:	07d9      	lsls	r1, r3, #31
 801bd52:	d405      	bmi.n	801bd60 <_vfiprintf_r+0x220>
 801bd54:	89ab      	ldrh	r3, [r5, #12]
 801bd56:	059a      	lsls	r2, r3, #22
 801bd58:	d402      	bmi.n	801bd60 <_vfiprintf_r+0x220>
 801bd5a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801bd5c:	f7ff fdbf 	bl	801b8de <__retarget_lock_release_recursive>
 801bd60:	89ab      	ldrh	r3, [r5, #12]
 801bd62:	065b      	lsls	r3, r3, #25
 801bd64:	f53f af12 	bmi.w	801bb8c <_vfiprintf_r+0x4c>
 801bd68:	9809      	ldr	r0, [sp, #36]	; 0x24
 801bd6a:	e711      	b.n	801bb90 <_vfiprintf_r+0x50>
 801bd6c:	ab03      	add	r3, sp, #12
 801bd6e:	9300      	str	r3, [sp, #0]
 801bd70:	462a      	mov	r2, r5
 801bd72:	4b09      	ldr	r3, [pc, #36]	; (801bd98 <_vfiprintf_r+0x258>)
 801bd74:	a904      	add	r1, sp, #16
 801bd76:	4630      	mov	r0, r6
 801bd78:	f000 fb2e 	bl	801c3d8 <_printf_i>
 801bd7c:	e7e4      	b.n	801bd48 <_vfiprintf_r+0x208>
 801bd7e:	bf00      	nop
 801bd80:	08020b3c 	.word	0x08020b3c
 801bd84:	08020b5c 	.word	0x08020b5c
 801bd88:	08020b1c 	.word	0x08020b1c
 801bd8c:	08020b80 	.word	0x08020b80
 801bd90:	08020b8a 	.word	0x08020b8a
 801bd94:	0801bec1 	.word	0x0801bec1
 801bd98:	0801bb1b 	.word	0x0801bb1b
 801bd9c:	08020b86 	.word	0x08020b86

0801bda0 <__cvt>:
 801bda0:	b5f0      	push	{r4, r5, r6, r7, lr}
 801bda2:	ed2d 8b02 	vpush	{d8}
 801bda6:	eeb0 8b40 	vmov.f64	d8, d0
 801bdaa:	b085      	sub	sp, #20
 801bdac:	4617      	mov	r7, r2
 801bdae:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 801bdb0:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 801bdb2:	ee18 2a90 	vmov	r2, s17
 801bdb6:	f025 0520 	bic.w	r5, r5, #32
 801bdba:	2a00      	cmp	r2, #0
 801bdbc:	bfb6      	itet	lt
 801bdbe:	222d      	movlt	r2, #45	; 0x2d
 801bdc0:	2200      	movge	r2, #0
 801bdc2:	eeb1 8b40 	vneglt.f64	d8, d0
 801bdc6:	2d46      	cmp	r5, #70	; 0x46
 801bdc8:	460c      	mov	r4, r1
 801bdca:	701a      	strb	r2, [r3, #0]
 801bdcc:	d004      	beq.n	801bdd8 <__cvt+0x38>
 801bdce:	2d45      	cmp	r5, #69	; 0x45
 801bdd0:	d100      	bne.n	801bdd4 <__cvt+0x34>
 801bdd2:	3401      	adds	r4, #1
 801bdd4:	2102      	movs	r1, #2
 801bdd6:	e000      	b.n	801bdda <__cvt+0x3a>
 801bdd8:	2103      	movs	r1, #3
 801bdda:	ab03      	add	r3, sp, #12
 801bddc:	9301      	str	r3, [sp, #4]
 801bdde:	ab02      	add	r3, sp, #8
 801bde0:	9300      	str	r3, [sp, #0]
 801bde2:	4622      	mov	r2, r4
 801bde4:	4633      	mov	r3, r6
 801bde6:	eeb0 0b48 	vmov.f64	d0, d8
 801bdea:	f000 ff0d 	bl	801cc08 <_dtoa_r>
 801bdee:	2d47      	cmp	r5, #71	; 0x47
 801bdf0:	d101      	bne.n	801bdf6 <__cvt+0x56>
 801bdf2:	07fb      	lsls	r3, r7, #31
 801bdf4:	d51a      	bpl.n	801be2c <__cvt+0x8c>
 801bdf6:	2d46      	cmp	r5, #70	; 0x46
 801bdf8:	eb00 0204 	add.w	r2, r0, r4
 801bdfc:	d10c      	bne.n	801be18 <__cvt+0x78>
 801bdfe:	7803      	ldrb	r3, [r0, #0]
 801be00:	2b30      	cmp	r3, #48	; 0x30
 801be02:	d107      	bne.n	801be14 <__cvt+0x74>
 801be04:	eeb5 8b40 	vcmp.f64	d8, #0.0
 801be08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801be0c:	bf1c      	itt	ne
 801be0e:	f1c4 0401 	rsbne	r4, r4, #1
 801be12:	6034      	strne	r4, [r6, #0]
 801be14:	6833      	ldr	r3, [r6, #0]
 801be16:	441a      	add	r2, r3
 801be18:	eeb5 8b40 	vcmp.f64	d8, #0.0
 801be1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801be20:	bf08      	it	eq
 801be22:	9203      	streq	r2, [sp, #12]
 801be24:	2130      	movs	r1, #48	; 0x30
 801be26:	9b03      	ldr	r3, [sp, #12]
 801be28:	4293      	cmp	r3, r2
 801be2a:	d307      	bcc.n	801be3c <__cvt+0x9c>
 801be2c:	9b03      	ldr	r3, [sp, #12]
 801be2e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801be30:	1a1b      	subs	r3, r3, r0
 801be32:	6013      	str	r3, [r2, #0]
 801be34:	b005      	add	sp, #20
 801be36:	ecbd 8b02 	vpop	{d8}
 801be3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801be3c:	1c5c      	adds	r4, r3, #1
 801be3e:	9403      	str	r4, [sp, #12]
 801be40:	7019      	strb	r1, [r3, #0]
 801be42:	e7f0      	b.n	801be26 <__cvt+0x86>

0801be44 <__exponent>:
 801be44:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801be46:	4603      	mov	r3, r0
 801be48:	2900      	cmp	r1, #0
 801be4a:	bfb8      	it	lt
 801be4c:	4249      	neglt	r1, r1
 801be4e:	f803 2b02 	strb.w	r2, [r3], #2
 801be52:	bfb4      	ite	lt
 801be54:	222d      	movlt	r2, #45	; 0x2d
 801be56:	222b      	movge	r2, #43	; 0x2b
 801be58:	2909      	cmp	r1, #9
 801be5a:	7042      	strb	r2, [r0, #1]
 801be5c:	dd2a      	ble.n	801beb4 <__exponent+0x70>
 801be5e:	f10d 0407 	add.w	r4, sp, #7
 801be62:	46a4      	mov	ip, r4
 801be64:	270a      	movs	r7, #10
 801be66:	46a6      	mov	lr, r4
 801be68:	460a      	mov	r2, r1
 801be6a:	fb91 f6f7 	sdiv	r6, r1, r7
 801be6e:	fb07 1516 	mls	r5, r7, r6, r1
 801be72:	3530      	adds	r5, #48	; 0x30
 801be74:	2a63      	cmp	r2, #99	; 0x63
 801be76:	f104 34ff 	add.w	r4, r4, #4294967295
 801be7a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 801be7e:	4631      	mov	r1, r6
 801be80:	dcf1      	bgt.n	801be66 <__exponent+0x22>
 801be82:	3130      	adds	r1, #48	; 0x30
 801be84:	f1ae 0502 	sub.w	r5, lr, #2
 801be88:	f804 1c01 	strb.w	r1, [r4, #-1]
 801be8c:	1c44      	adds	r4, r0, #1
 801be8e:	4629      	mov	r1, r5
 801be90:	4561      	cmp	r1, ip
 801be92:	d30a      	bcc.n	801beaa <__exponent+0x66>
 801be94:	f10d 0209 	add.w	r2, sp, #9
 801be98:	eba2 020e 	sub.w	r2, r2, lr
 801be9c:	4565      	cmp	r5, ip
 801be9e:	bf88      	it	hi
 801bea0:	2200      	movhi	r2, #0
 801bea2:	4413      	add	r3, r2
 801bea4:	1a18      	subs	r0, r3, r0
 801bea6:	b003      	add	sp, #12
 801bea8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801beaa:	f811 2b01 	ldrb.w	r2, [r1], #1
 801beae:	f804 2f01 	strb.w	r2, [r4, #1]!
 801beb2:	e7ed      	b.n	801be90 <__exponent+0x4c>
 801beb4:	2330      	movs	r3, #48	; 0x30
 801beb6:	3130      	adds	r1, #48	; 0x30
 801beb8:	7083      	strb	r3, [r0, #2]
 801beba:	70c1      	strb	r1, [r0, #3]
 801bebc:	1d03      	adds	r3, r0, #4
 801bebe:	e7f1      	b.n	801bea4 <__exponent+0x60>

0801bec0 <_printf_float>:
 801bec0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bec4:	b08b      	sub	sp, #44	; 0x2c
 801bec6:	460c      	mov	r4, r1
 801bec8:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 801becc:	4616      	mov	r6, r2
 801bece:	461f      	mov	r7, r3
 801bed0:	4605      	mov	r5, r0
 801bed2:	f001 fcc9 	bl	801d868 <_localeconv_r>
 801bed6:	f8d0 b000 	ldr.w	fp, [r0]
 801beda:	4658      	mov	r0, fp
 801bedc:	f7e4 fa00 	bl	80002e0 <strlen>
 801bee0:	2300      	movs	r3, #0
 801bee2:	9308      	str	r3, [sp, #32]
 801bee4:	f8d8 3000 	ldr.w	r3, [r8]
 801bee8:	f894 9018 	ldrb.w	r9, [r4, #24]
 801beec:	6822      	ldr	r2, [r4, #0]
 801beee:	3307      	adds	r3, #7
 801bef0:	f023 0307 	bic.w	r3, r3, #7
 801bef4:	f103 0108 	add.w	r1, r3, #8
 801bef8:	f8c8 1000 	str.w	r1, [r8]
 801befc:	4682      	mov	sl, r0
 801befe:	e9d3 0100 	ldrd	r0, r1, [r3]
 801bf02:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 801bf06:	ed9f 7b98 	vldr	d7, [pc, #608]	; 801c168 <_printf_float+0x2a8>
 801bf0a:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 801bf0e:	eeb0 6bc0 	vabs.f64	d6, d0
 801bf12:	eeb4 6b47 	vcmp.f64	d6, d7
 801bf16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801bf1a:	dd24      	ble.n	801bf66 <_printf_float+0xa6>
 801bf1c:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 801bf20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801bf24:	d502      	bpl.n	801bf2c <_printf_float+0x6c>
 801bf26:	232d      	movs	r3, #45	; 0x2d
 801bf28:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801bf2c:	4b90      	ldr	r3, [pc, #576]	; (801c170 <_printf_float+0x2b0>)
 801bf2e:	4891      	ldr	r0, [pc, #580]	; (801c174 <_printf_float+0x2b4>)
 801bf30:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 801bf34:	bf94      	ite	ls
 801bf36:	4698      	movls	r8, r3
 801bf38:	4680      	movhi	r8, r0
 801bf3a:	2303      	movs	r3, #3
 801bf3c:	6123      	str	r3, [r4, #16]
 801bf3e:	f022 0204 	bic.w	r2, r2, #4
 801bf42:	2300      	movs	r3, #0
 801bf44:	6022      	str	r2, [r4, #0]
 801bf46:	9304      	str	r3, [sp, #16]
 801bf48:	9700      	str	r7, [sp, #0]
 801bf4a:	4633      	mov	r3, r6
 801bf4c:	aa09      	add	r2, sp, #36	; 0x24
 801bf4e:	4621      	mov	r1, r4
 801bf50:	4628      	mov	r0, r5
 801bf52:	f000 f9d3 	bl	801c2fc <_printf_common>
 801bf56:	3001      	adds	r0, #1
 801bf58:	f040 808a 	bne.w	801c070 <_printf_float+0x1b0>
 801bf5c:	f04f 30ff 	mov.w	r0, #4294967295
 801bf60:	b00b      	add	sp, #44	; 0x2c
 801bf62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bf66:	eeb4 0b40 	vcmp.f64	d0, d0
 801bf6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801bf6e:	d709      	bvc.n	801bf84 <_printf_float+0xc4>
 801bf70:	ee10 3a90 	vmov	r3, s1
 801bf74:	2b00      	cmp	r3, #0
 801bf76:	bfbc      	itt	lt
 801bf78:	232d      	movlt	r3, #45	; 0x2d
 801bf7a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 801bf7e:	487e      	ldr	r0, [pc, #504]	; (801c178 <_printf_float+0x2b8>)
 801bf80:	4b7e      	ldr	r3, [pc, #504]	; (801c17c <_printf_float+0x2bc>)
 801bf82:	e7d5      	b.n	801bf30 <_printf_float+0x70>
 801bf84:	6863      	ldr	r3, [r4, #4]
 801bf86:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 801bf8a:	9104      	str	r1, [sp, #16]
 801bf8c:	1c59      	adds	r1, r3, #1
 801bf8e:	d13c      	bne.n	801c00a <_printf_float+0x14a>
 801bf90:	2306      	movs	r3, #6
 801bf92:	6063      	str	r3, [r4, #4]
 801bf94:	2300      	movs	r3, #0
 801bf96:	9303      	str	r3, [sp, #12]
 801bf98:	ab08      	add	r3, sp, #32
 801bf9a:	e9cd 9301 	strd	r9, r3, [sp, #4]
 801bf9e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 801bfa2:	ab07      	add	r3, sp, #28
 801bfa4:	6861      	ldr	r1, [r4, #4]
 801bfa6:	9300      	str	r3, [sp, #0]
 801bfa8:	6022      	str	r2, [r4, #0]
 801bfaa:	f10d 031b 	add.w	r3, sp, #27
 801bfae:	4628      	mov	r0, r5
 801bfb0:	f7ff fef6 	bl	801bda0 <__cvt>
 801bfb4:	9b04      	ldr	r3, [sp, #16]
 801bfb6:	9907      	ldr	r1, [sp, #28]
 801bfb8:	2b47      	cmp	r3, #71	; 0x47
 801bfba:	4680      	mov	r8, r0
 801bfbc:	d108      	bne.n	801bfd0 <_printf_float+0x110>
 801bfbe:	1cc8      	adds	r0, r1, #3
 801bfc0:	db02      	blt.n	801bfc8 <_printf_float+0x108>
 801bfc2:	6863      	ldr	r3, [r4, #4]
 801bfc4:	4299      	cmp	r1, r3
 801bfc6:	dd41      	ble.n	801c04c <_printf_float+0x18c>
 801bfc8:	f1a9 0902 	sub.w	r9, r9, #2
 801bfcc:	fa5f f989 	uxtb.w	r9, r9
 801bfd0:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 801bfd4:	d820      	bhi.n	801c018 <_printf_float+0x158>
 801bfd6:	3901      	subs	r1, #1
 801bfd8:	464a      	mov	r2, r9
 801bfda:	f104 0050 	add.w	r0, r4, #80	; 0x50
 801bfde:	9107      	str	r1, [sp, #28]
 801bfe0:	f7ff ff30 	bl	801be44 <__exponent>
 801bfe4:	9a08      	ldr	r2, [sp, #32]
 801bfe6:	9004      	str	r0, [sp, #16]
 801bfe8:	1813      	adds	r3, r2, r0
 801bfea:	2a01      	cmp	r2, #1
 801bfec:	6123      	str	r3, [r4, #16]
 801bfee:	dc02      	bgt.n	801bff6 <_printf_float+0x136>
 801bff0:	6822      	ldr	r2, [r4, #0]
 801bff2:	07d2      	lsls	r2, r2, #31
 801bff4:	d501      	bpl.n	801bffa <_printf_float+0x13a>
 801bff6:	3301      	adds	r3, #1
 801bff8:	6123      	str	r3, [r4, #16]
 801bffa:	f89d 301b 	ldrb.w	r3, [sp, #27]
 801bffe:	2b00      	cmp	r3, #0
 801c000:	d0a2      	beq.n	801bf48 <_printf_float+0x88>
 801c002:	232d      	movs	r3, #45	; 0x2d
 801c004:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801c008:	e79e      	b.n	801bf48 <_printf_float+0x88>
 801c00a:	9904      	ldr	r1, [sp, #16]
 801c00c:	2947      	cmp	r1, #71	; 0x47
 801c00e:	d1c1      	bne.n	801bf94 <_printf_float+0xd4>
 801c010:	2b00      	cmp	r3, #0
 801c012:	d1bf      	bne.n	801bf94 <_printf_float+0xd4>
 801c014:	2301      	movs	r3, #1
 801c016:	e7bc      	b.n	801bf92 <_printf_float+0xd2>
 801c018:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 801c01c:	d118      	bne.n	801c050 <_printf_float+0x190>
 801c01e:	2900      	cmp	r1, #0
 801c020:	6863      	ldr	r3, [r4, #4]
 801c022:	dd0b      	ble.n	801c03c <_printf_float+0x17c>
 801c024:	6121      	str	r1, [r4, #16]
 801c026:	b913      	cbnz	r3, 801c02e <_printf_float+0x16e>
 801c028:	6822      	ldr	r2, [r4, #0]
 801c02a:	07d0      	lsls	r0, r2, #31
 801c02c:	d502      	bpl.n	801c034 <_printf_float+0x174>
 801c02e:	3301      	adds	r3, #1
 801c030:	440b      	add	r3, r1
 801c032:	6123      	str	r3, [r4, #16]
 801c034:	2300      	movs	r3, #0
 801c036:	65a1      	str	r1, [r4, #88]	; 0x58
 801c038:	9304      	str	r3, [sp, #16]
 801c03a:	e7de      	b.n	801bffa <_printf_float+0x13a>
 801c03c:	b913      	cbnz	r3, 801c044 <_printf_float+0x184>
 801c03e:	6822      	ldr	r2, [r4, #0]
 801c040:	07d2      	lsls	r2, r2, #31
 801c042:	d501      	bpl.n	801c048 <_printf_float+0x188>
 801c044:	3302      	adds	r3, #2
 801c046:	e7f4      	b.n	801c032 <_printf_float+0x172>
 801c048:	2301      	movs	r3, #1
 801c04a:	e7f2      	b.n	801c032 <_printf_float+0x172>
 801c04c:	f04f 0967 	mov.w	r9, #103	; 0x67
 801c050:	9b08      	ldr	r3, [sp, #32]
 801c052:	4299      	cmp	r1, r3
 801c054:	db05      	blt.n	801c062 <_printf_float+0x1a2>
 801c056:	6823      	ldr	r3, [r4, #0]
 801c058:	6121      	str	r1, [r4, #16]
 801c05a:	07d8      	lsls	r0, r3, #31
 801c05c:	d5ea      	bpl.n	801c034 <_printf_float+0x174>
 801c05e:	1c4b      	adds	r3, r1, #1
 801c060:	e7e7      	b.n	801c032 <_printf_float+0x172>
 801c062:	2900      	cmp	r1, #0
 801c064:	bfd4      	ite	le
 801c066:	f1c1 0202 	rsble	r2, r1, #2
 801c06a:	2201      	movgt	r2, #1
 801c06c:	4413      	add	r3, r2
 801c06e:	e7e0      	b.n	801c032 <_printf_float+0x172>
 801c070:	6823      	ldr	r3, [r4, #0]
 801c072:	055a      	lsls	r2, r3, #21
 801c074:	d407      	bmi.n	801c086 <_printf_float+0x1c6>
 801c076:	6923      	ldr	r3, [r4, #16]
 801c078:	4642      	mov	r2, r8
 801c07a:	4631      	mov	r1, r6
 801c07c:	4628      	mov	r0, r5
 801c07e:	47b8      	blx	r7
 801c080:	3001      	adds	r0, #1
 801c082:	d12a      	bne.n	801c0da <_printf_float+0x21a>
 801c084:	e76a      	b.n	801bf5c <_printf_float+0x9c>
 801c086:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 801c08a:	f240 80e2 	bls.w	801c252 <_printf_float+0x392>
 801c08e:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 801c092:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801c096:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c09a:	d133      	bne.n	801c104 <_printf_float+0x244>
 801c09c:	4a38      	ldr	r2, [pc, #224]	; (801c180 <_printf_float+0x2c0>)
 801c09e:	2301      	movs	r3, #1
 801c0a0:	4631      	mov	r1, r6
 801c0a2:	4628      	mov	r0, r5
 801c0a4:	47b8      	blx	r7
 801c0a6:	3001      	adds	r0, #1
 801c0a8:	f43f af58 	beq.w	801bf5c <_printf_float+0x9c>
 801c0ac:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 801c0b0:	429a      	cmp	r2, r3
 801c0b2:	db02      	blt.n	801c0ba <_printf_float+0x1fa>
 801c0b4:	6823      	ldr	r3, [r4, #0]
 801c0b6:	07d8      	lsls	r0, r3, #31
 801c0b8:	d50f      	bpl.n	801c0da <_printf_float+0x21a>
 801c0ba:	4653      	mov	r3, sl
 801c0bc:	465a      	mov	r2, fp
 801c0be:	4631      	mov	r1, r6
 801c0c0:	4628      	mov	r0, r5
 801c0c2:	47b8      	blx	r7
 801c0c4:	3001      	adds	r0, #1
 801c0c6:	f43f af49 	beq.w	801bf5c <_printf_float+0x9c>
 801c0ca:	f04f 0800 	mov.w	r8, #0
 801c0ce:	f104 091a 	add.w	r9, r4, #26
 801c0d2:	9b08      	ldr	r3, [sp, #32]
 801c0d4:	3b01      	subs	r3, #1
 801c0d6:	4543      	cmp	r3, r8
 801c0d8:	dc09      	bgt.n	801c0ee <_printf_float+0x22e>
 801c0da:	6823      	ldr	r3, [r4, #0]
 801c0dc:	079b      	lsls	r3, r3, #30
 801c0de:	f100 8108 	bmi.w	801c2f2 <_printf_float+0x432>
 801c0e2:	68e0      	ldr	r0, [r4, #12]
 801c0e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c0e6:	4298      	cmp	r0, r3
 801c0e8:	bfb8      	it	lt
 801c0ea:	4618      	movlt	r0, r3
 801c0ec:	e738      	b.n	801bf60 <_printf_float+0xa0>
 801c0ee:	2301      	movs	r3, #1
 801c0f0:	464a      	mov	r2, r9
 801c0f2:	4631      	mov	r1, r6
 801c0f4:	4628      	mov	r0, r5
 801c0f6:	47b8      	blx	r7
 801c0f8:	3001      	adds	r0, #1
 801c0fa:	f43f af2f 	beq.w	801bf5c <_printf_float+0x9c>
 801c0fe:	f108 0801 	add.w	r8, r8, #1
 801c102:	e7e6      	b.n	801c0d2 <_printf_float+0x212>
 801c104:	9b07      	ldr	r3, [sp, #28]
 801c106:	2b00      	cmp	r3, #0
 801c108:	dc3c      	bgt.n	801c184 <_printf_float+0x2c4>
 801c10a:	4a1d      	ldr	r2, [pc, #116]	; (801c180 <_printf_float+0x2c0>)
 801c10c:	2301      	movs	r3, #1
 801c10e:	4631      	mov	r1, r6
 801c110:	4628      	mov	r0, r5
 801c112:	47b8      	blx	r7
 801c114:	3001      	adds	r0, #1
 801c116:	f43f af21 	beq.w	801bf5c <_printf_float+0x9c>
 801c11a:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 801c11e:	4313      	orrs	r3, r2
 801c120:	d102      	bne.n	801c128 <_printf_float+0x268>
 801c122:	6823      	ldr	r3, [r4, #0]
 801c124:	07d9      	lsls	r1, r3, #31
 801c126:	d5d8      	bpl.n	801c0da <_printf_float+0x21a>
 801c128:	4653      	mov	r3, sl
 801c12a:	465a      	mov	r2, fp
 801c12c:	4631      	mov	r1, r6
 801c12e:	4628      	mov	r0, r5
 801c130:	47b8      	blx	r7
 801c132:	3001      	adds	r0, #1
 801c134:	f43f af12 	beq.w	801bf5c <_printf_float+0x9c>
 801c138:	f04f 0900 	mov.w	r9, #0
 801c13c:	f104 0a1a 	add.w	sl, r4, #26
 801c140:	9b07      	ldr	r3, [sp, #28]
 801c142:	425b      	negs	r3, r3
 801c144:	454b      	cmp	r3, r9
 801c146:	dc01      	bgt.n	801c14c <_printf_float+0x28c>
 801c148:	9b08      	ldr	r3, [sp, #32]
 801c14a:	e795      	b.n	801c078 <_printf_float+0x1b8>
 801c14c:	2301      	movs	r3, #1
 801c14e:	4652      	mov	r2, sl
 801c150:	4631      	mov	r1, r6
 801c152:	4628      	mov	r0, r5
 801c154:	47b8      	blx	r7
 801c156:	3001      	adds	r0, #1
 801c158:	f43f af00 	beq.w	801bf5c <_printf_float+0x9c>
 801c15c:	f109 0901 	add.w	r9, r9, #1
 801c160:	e7ee      	b.n	801c140 <_printf_float+0x280>
 801c162:	bf00      	nop
 801c164:	f3af 8000 	nop.w
 801c168:	ffffffff 	.word	0xffffffff
 801c16c:	7fefffff 	.word	0x7fefffff
 801c170:	08020b91 	.word	0x08020b91
 801c174:	08020b95 	.word	0x08020b95
 801c178:	08020b9d 	.word	0x08020b9d
 801c17c:	08020b99 	.word	0x08020b99
 801c180:	08020276 	.word	0x08020276
 801c184:	9a08      	ldr	r2, [sp, #32]
 801c186:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801c188:	429a      	cmp	r2, r3
 801c18a:	bfa8      	it	ge
 801c18c:	461a      	movge	r2, r3
 801c18e:	2a00      	cmp	r2, #0
 801c190:	4691      	mov	r9, r2
 801c192:	dc38      	bgt.n	801c206 <_printf_float+0x346>
 801c194:	2300      	movs	r3, #0
 801c196:	9305      	str	r3, [sp, #20]
 801c198:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801c19c:	f104 021a 	add.w	r2, r4, #26
 801c1a0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801c1a2:	9905      	ldr	r1, [sp, #20]
 801c1a4:	9304      	str	r3, [sp, #16]
 801c1a6:	eba3 0309 	sub.w	r3, r3, r9
 801c1aa:	428b      	cmp	r3, r1
 801c1ac:	dc33      	bgt.n	801c216 <_printf_float+0x356>
 801c1ae:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 801c1b2:	429a      	cmp	r2, r3
 801c1b4:	db3c      	blt.n	801c230 <_printf_float+0x370>
 801c1b6:	6823      	ldr	r3, [r4, #0]
 801c1b8:	07da      	lsls	r2, r3, #31
 801c1ba:	d439      	bmi.n	801c230 <_printf_float+0x370>
 801c1bc:	9b08      	ldr	r3, [sp, #32]
 801c1be:	9a04      	ldr	r2, [sp, #16]
 801c1c0:	9907      	ldr	r1, [sp, #28]
 801c1c2:	1a9a      	subs	r2, r3, r2
 801c1c4:	eba3 0901 	sub.w	r9, r3, r1
 801c1c8:	4591      	cmp	r9, r2
 801c1ca:	bfa8      	it	ge
 801c1cc:	4691      	movge	r9, r2
 801c1ce:	f1b9 0f00 	cmp.w	r9, #0
 801c1d2:	dc35      	bgt.n	801c240 <_printf_float+0x380>
 801c1d4:	f04f 0800 	mov.w	r8, #0
 801c1d8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801c1dc:	f104 0a1a 	add.w	sl, r4, #26
 801c1e0:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 801c1e4:	1a9b      	subs	r3, r3, r2
 801c1e6:	eba3 0309 	sub.w	r3, r3, r9
 801c1ea:	4543      	cmp	r3, r8
 801c1ec:	f77f af75 	ble.w	801c0da <_printf_float+0x21a>
 801c1f0:	2301      	movs	r3, #1
 801c1f2:	4652      	mov	r2, sl
 801c1f4:	4631      	mov	r1, r6
 801c1f6:	4628      	mov	r0, r5
 801c1f8:	47b8      	blx	r7
 801c1fa:	3001      	adds	r0, #1
 801c1fc:	f43f aeae 	beq.w	801bf5c <_printf_float+0x9c>
 801c200:	f108 0801 	add.w	r8, r8, #1
 801c204:	e7ec      	b.n	801c1e0 <_printf_float+0x320>
 801c206:	4613      	mov	r3, r2
 801c208:	4631      	mov	r1, r6
 801c20a:	4642      	mov	r2, r8
 801c20c:	4628      	mov	r0, r5
 801c20e:	47b8      	blx	r7
 801c210:	3001      	adds	r0, #1
 801c212:	d1bf      	bne.n	801c194 <_printf_float+0x2d4>
 801c214:	e6a2      	b.n	801bf5c <_printf_float+0x9c>
 801c216:	2301      	movs	r3, #1
 801c218:	4631      	mov	r1, r6
 801c21a:	4628      	mov	r0, r5
 801c21c:	9204      	str	r2, [sp, #16]
 801c21e:	47b8      	blx	r7
 801c220:	3001      	adds	r0, #1
 801c222:	f43f ae9b 	beq.w	801bf5c <_printf_float+0x9c>
 801c226:	9b05      	ldr	r3, [sp, #20]
 801c228:	9a04      	ldr	r2, [sp, #16]
 801c22a:	3301      	adds	r3, #1
 801c22c:	9305      	str	r3, [sp, #20]
 801c22e:	e7b7      	b.n	801c1a0 <_printf_float+0x2e0>
 801c230:	4653      	mov	r3, sl
 801c232:	465a      	mov	r2, fp
 801c234:	4631      	mov	r1, r6
 801c236:	4628      	mov	r0, r5
 801c238:	47b8      	blx	r7
 801c23a:	3001      	adds	r0, #1
 801c23c:	d1be      	bne.n	801c1bc <_printf_float+0x2fc>
 801c23e:	e68d      	b.n	801bf5c <_printf_float+0x9c>
 801c240:	9a04      	ldr	r2, [sp, #16]
 801c242:	464b      	mov	r3, r9
 801c244:	4442      	add	r2, r8
 801c246:	4631      	mov	r1, r6
 801c248:	4628      	mov	r0, r5
 801c24a:	47b8      	blx	r7
 801c24c:	3001      	adds	r0, #1
 801c24e:	d1c1      	bne.n	801c1d4 <_printf_float+0x314>
 801c250:	e684      	b.n	801bf5c <_printf_float+0x9c>
 801c252:	9a08      	ldr	r2, [sp, #32]
 801c254:	2a01      	cmp	r2, #1
 801c256:	dc01      	bgt.n	801c25c <_printf_float+0x39c>
 801c258:	07db      	lsls	r3, r3, #31
 801c25a:	d537      	bpl.n	801c2cc <_printf_float+0x40c>
 801c25c:	2301      	movs	r3, #1
 801c25e:	4642      	mov	r2, r8
 801c260:	4631      	mov	r1, r6
 801c262:	4628      	mov	r0, r5
 801c264:	47b8      	blx	r7
 801c266:	3001      	adds	r0, #1
 801c268:	f43f ae78 	beq.w	801bf5c <_printf_float+0x9c>
 801c26c:	4653      	mov	r3, sl
 801c26e:	465a      	mov	r2, fp
 801c270:	4631      	mov	r1, r6
 801c272:	4628      	mov	r0, r5
 801c274:	47b8      	blx	r7
 801c276:	3001      	adds	r0, #1
 801c278:	f43f ae70 	beq.w	801bf5c <_printf_float+0x9c>
 801c27c:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 801c280:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801c284:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c288:	d01b      	beq.n	801c2c2 <_printf_float+0x402>
 801c28a:	9b08      	ldr	r3, [sp, #32]
 801c28c:	f108 0201 	add.w	r2, r8, #1
 801c290:	3b01      	subs	r3, #1
 801c292:	4631      	mov	r1, r6
 801c294:	4628      	mov	r0, r5
 801c296:	47b8      	blx	r7
 801c298:	3001      	adds	r0, #1
 801c29a:	d10e      	bne.n	801c2ba <_printf_float+0x3fa>
 801c29c:	e65e      	b.n	801bf5c <_printf_float+0x9c>
 801c29e:	2301      	movs	r3, #1
 801c2a0:	464a      	mov	r2, r9
 801c2a2:	4631      	mov	r1, r6
 801c2a4:	4628      	mov	r0, r5
 801c2a6:	47b8      	blx	r7
 801c2a8:	3001      	adds	r0, #1
 801c2aa:	f43f ae57 	beq.w	801bf5c <_printf_float+0x9c>
 801c2ae:	f108 0801 	add.w	r8, r8, #1
 801c2b2:	9b08      	ldr	r3, [sp, #32]
 801c2b4:	3b01      	subs	r3, #1
 801c2b6:	4543      	cmp	r3, r8
 801c2b8:	dcf1      	bgt.n	801c29e <_printf_float+0x3de>
 801c2ba:	9b04      	ldr	r3, [sp, #16]
 801c2bc:	f104 0250 	add.w	r2, r4, #80	; 0x50
 801c2c0:	e6db      	b.n	801c07a <_printf_float+0x1ba>
 801c2c2:	f04f 0800 	mov.w	r8, #0
 801c2c6:	f104 091a 	add.w	r9, r4, #26
 801c2ca:	e7f2      	b.n	801c2b2 <_printf_float+0x3f2>
 801c2cc:	2301      	movs	r3, #1
 801c2ce:	4642      	mov	r2, r8
 801c2d0:	e7df      	b.n	801c292 <_printf_float+0x3d2>
 801c2d2:	2301      	movs	r3, #1
 801c2d4:	464a      	mov	r2, r9
 801c2d6:	4631      	mov	r1, r6
 801c2d8:	4628      	mov	r0, r5
 801c2da:	47b8      	blx	r7
 801c2dc:	3001      	adds	r0, #1
 801c2de:	f43f ae3d 	beq.w	801bf5c <_printf_float+0x9c>
 801c2e2:	f108 0801 	add.w	r8, r8, #1
 801c2e6:	68e3      	ldr	r3, [r4, #12]
 801c2e8:	9909      	ldr	r1, [sp, #36]	; 0x24
 801c2ea:	1a5b      	subs	r3, r3, r1
 801c2ec:	4543      	cmp	r3, r8
 801c2ee:	dcf0      	bgt.n	801c2d2 <_printf_float+0x412>
 801c2f0:	e6f7      	b.n	801c0e2 <_printf_float+0x222>
 801c2f2:	f04f 0800 	mov.w	r8, #0
 801c2f6:	f104 0919 	add.w	r9, r4, #25
 801c2fa:	e7f4      	b.n	801c2e6 <_printf_float+0x426>

0801c2fc <_printf_common>:
 801c2fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801c300:	4616      	mov	r6, r2
 801c302:	4699      	mov	r9, r3
 801c304:	688a      	ldr	r2, [r1, #8]
 801c306:	690b      	ldr	r3, [r1, #16]
 801c308:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801c30c:	4293      	cmp	r3, r2
 801c30e:	bfb8      	it	lt
 801c310:	4613      	movlt	r3, r2
 801c312:	6033      	str	r3, [r6, #0]
 801c314:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801c318:	4607      	mov	r7, r0
 801c31a:	460c      	mov	r4, r1
 801c31c:	b10a      	cbz	r2, 801c322 <_printf_common+0x26>
 801c31e:	3301      	adds	r3, #1
 801c320:	6033      	str	r3, [r6, #0]
 801c322:	6823      	ldr	r3, [r4, #0]
 801c324:	0699      	lsls	r1, r3, #26
 801c326:	bf42      	ittt	mi
 801c328:	6833      	ldrmi	r3, [r6, #0]
 801c32a:	3302      	addmi	r3, #2
 801c32c:	6033      	strmi	r3, [r6, #0]
 801c32e:	6825      	ldr	r5, [r4, #0]
 801c330:	f015 0506 	ands.w	r5, r5, #6
 801c334:	d106      	bne.n	801c344 <_printf_common+0x48>
 801c336:	f104 0a19 	add.w	sl, r4, #25
 801c33a:	68e3      	ldr	r3, [r4, #12]
 801c33c:	6832      	ldr	r2, [r6, #0]
 801c33e:	1a9b      	subs	r3, r3, r2
 801c340:	42ab      	cmp	r3, r5
 801c342:	dc26      	bgt.n	801c392 <_printf_common+0x96>
 801c344:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801c348:	1e13      	subs	r3, r2, #0
 801c34a:	6822      	ldr	r2, [r4, #0]
 801c34c:	bf18      	it	ne
 801c34e:	2301      	movne	r3, #1
 801c350:	0692      	lsls	r2, r2, #26
 801c352:	d42b      	bmi.n	801c3ac <_printf_common+0xb0>
 801c354:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801c358:	4649      	mov	r1, r9
 801c35a:	4638      	mov	r0, r7
 801c35c:	47c0      	blx	r8
 801c35e:	3001      	adds	r0, #1
 801c360:	d01e      	beq.n	801c3a0 <_printf_common+0xa4>
 801c362:	6823      	ldr	r3, [r4, #0]
 801c364:	68e5      	ldr	r5, [r4, #12]
 801c366:	6832      	ldr	r2, [r6, #0]
 801c368:	f003 0306 	and.w	r3, r3, #6
 801c36c:	2b04      	cmp	r3, #4
 801c36e:	bf08      	it	eq
 801c370:	1aad      	subeq	r5, r5, r2
 801c372:	68a3      	ldr	r3, [r4, #8]
 801c374:	6922      	ldr	r2, [r4, #16]
 801c376:	bf0c      	ite	eq
 801c378:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801c37c:	2500      	movne	r5, #0
 801c37e:	4293      	cmp	r3, r2
 801c380:	bfc4      	itt	gt
 801c382:	1a9b      	subgt	r3, r3, r2
 801c384:	18ed      	addgt	r5, r5, r3
 801c386:	2600      	movs	r6, #0
 801c388:	341a      	adds	r4, #26
 801c38a:	42b5      	cmp	r5, r6
 801c38c:	d11a      	bne.n	801c3c4 <_printf_common+0xc8>
 801c38e:	2000      	movs	r0, #0
 801c390:	e008      	b.n	801c3a4 <_printf_common+0xa8>
 801c392:	2301      	movs	r3, #1
 801c394:	4652      	mov	r2, sl
 801c396:	4649      	mov	r1, r9
 801c398:	4638      	mov	r0, r7
 801c39a:	47c0      	blx	r8
 801c39c:	3001      	adds	r0, #1
 801c39e:	d103      	bne.n	801c3a8 <_printf_common+0xac>
 801c3a0:	f04f 30ff 	mov.w	r0, #4294967295
 801c3a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801c3a8:	3501      	adds	r5, #1
 801c3aa:	e7c6      	b.n	801c33a <_printf_common+0x3e>
 801c3ac:	18e1      	adds	r1, r4, r3
 801c3ae:	1c5a      	adds	r2, r3, #1
 801c3b0:	2030      	movs	r0, #48	; 0x30
 801c3b2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801c3b6:	4422      	add	r2, r4
 801c3b8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801c3bc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801c3c0:	3302      	adds	r3, #2
 801c3c2:	e7c7      	b.n	801c354 <_printf_common+0x58>
 801c3c4:	2301      	movs	r3, #1
 801c3c6:	4622      	mov	r2, r4
 801c3c8:	4649      	mov	r1, r9
 801c3ca:	4638      	mov	r0, r7
 801c3cc:	47c0      	blx	r8
 801c3ce:	3001      	adds	r0, #1
 801c3d0:	d0e6      	beq.n	801c3a0 <_printf_common+0xa4>
 801c3d2:	3601      	adds	r6, #1
 801c3d4:	e7d9      	b.n	801c38a <_printf_common+0x8e>
	...

0801c3d8 <_printf_i>:
 801c3d8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801c3dc:	7e0f      	ldrb	r7, [r1, #24]
 801c3de:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801c3e0:	2f78      	cmp	r7, #120	; 0x78
 801c3e2:	4691      	mov	r9, r2
 801c3e4:	4680      	mov	r8, r0
 801c3e6:	460c      	mov	r4, r1
 801c3e8:	469a      	mov	sl, r3
 801c3ea:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801c3ee:	d807      	bhi.n	801c400 <_printf_i+0x28>
 801c3f0:	2f62      	cmp	r7, #98	; 0x62
 801c3f2:	d80a      	bhi.n	801c40a <_printf_i+0x32>
 801c3f4:	2f00      	cmp	r7, #0
 801c3f6:	f000 80d8 	beq.w	801c5aa <_printf_i+0x1d2>
 801c3fa:	2f58      	cmp	r7, #88	; 0x58
 801c3fc:	f000 80a3 	beq.w	801c546 <_printf_i+0x16e>
 801c400:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801c404:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801c408:	e03a      	b.n	801c480 <_printf_i+0xa8>
 801c40a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801c40e:	2b15      	cmp	r3, #21
 801c410:	d8f6      	bhi.n	801c400 <_printf_i+0x28>
 801c412:	a101      	add	r1, pc, #4	; (adr r1, 801c418 <_printf_i+0x40>)
 801c414:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801c418:	0801c471 	.word	0x0801c471
 801c41c:	0801c485 	.word	0x0801c485
 801c420:	0801c401 	.word	0x0801c401
 801c424:	0801c401 	.word	0x0801c401
 801c428:	0801c401 	.word	0x0801c401
 801c42c:	0801c401 	.word	0x0801c401
 801c430:	0801c485 	.word	0x0801c485
 801c434:	0801c401 	.word	0x0801c401
 801c438:	0801c401 	.word	0x0801c401
 801c43c:	0801c401 	.word	0x0801c401
 801c440:	0801c401 	.word	0x0801c401
 801c444:	0801c591 	.word	0x0801c591
 801c448:	0801c4b5 	.word	0x0801c4b5
 801c44c:	0801c573 	.word	0x0801c573
 801c450:	0801c401 	.word	0x0801c401
 801c454:	0801c401 	.word	0x0801c401
 801c458:	0801c5b3 	.word	0x0801c5b3
 801c45c:	0801c401 	.word	0x0801c401
 801c460:	0801c4b5 	.word	0x0801c4b5
 801c464:	0801c401 	.word	0x0801c401
 801c468:	0801c401 	.word	0x0801c401
 801c46c:	0801c57b 	.word	0x0801c57b
 801c470:	682b      	ldr	r3, [r5, #0]
 801c472:	1d1a      	adds	r2, r3, #4
 801c474:	681b      	ldr	r3, [r3, #0]
 801c476:	602a      	str	r2, [r5, #0]
 801c478:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801c47c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801c480:	2301      	movs	r3, #1
 801c482:	e0a3      	b.n	801c5cc <_printf_i+0x1f4>
 801c484:	6820      	ldr	r0, [r4, #0]
 801c486:	6829      	ldr	r1, [r5, #0]
 801c488:	0606      	lsls	r6, r0, #24
 801c48a:	f101 0304 	add.w	r3, r1, #4
 801c48e:	d50a      	bpl.n	801c4a6 <_printf_i+0xce>
 801c490:	680e      	ldr	r6, [r1, #0]
 801c492:	602b      	str	r3, [r5, #0]
 801c494:	2e00      	cmp	r6, #0
 801c496:	da03      	bge.n	801c4a0 <_printf_i+0xc8>
 801c498:	232d      	movs	r3, #45	; 0x2d
 801c49a:	4276      	negs	r6, r6
 801c49c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801c4a0:	485e      	ldr	r0, [pc, #376]	; (801c61c <_printf_i+0x244>)
 801c4a2:	230a      	movs	r3, #10
 801c4a4:	e019      	b.n	801c4da <_printf_i+0x102>
 801c4a6:	680e      	ldr	r6, [r1, #0]
 801c4a8:	602b      	str	r3, [r5, #0]
 801c4aa:	f010 0f40 	tst.w	r0, #64	; 0x40
 801c4ae:	bf18      	it	ne
 801c4b0:	b236      	sxthne	r6, r6
 801c4b2:	e7ef      	b.n	801c494 <_printf_i+0xbc>
 801c4b4:	682b      	ldr	r3, [r5, #0]
 801c4b6:	6820      	ldr	r0, [r4, #0]
 801c4b8:	1d19      	adds	r1, r3, #4
 801c4ba:	6029      	str	r1, [r5, #0]
 801c4bc:	0601      	lsls	r1, r0, #24
 801c4be:	d501      	bpl.n	801c4c4 <_printf_i+0xec>
 801c4c0:	681e      	ldr	r6, [r3, #0]
 801c4c2:	e002      	b.n	801c4ca <_printf_i+0xf2>
 801c4c4:	0646      	lsls	r6, r0, #25
 801c4c6:	d5fb      	bpl.n	801c4c0 <_printf_i+0xe8>
 801c4c8:	881e      	ldrh	r6, [r3, #0]
 801c4ca:	4854      	ldr	r0, [pc, #336]	; (801c61c <_printf_i+0x244>)
 801c4cc:	2f6f      	cmp	r7, #111	; 0x6f
 801c4ce:	bf0c      	ite	eq
 801c4d0:	2308      	moveq	r3, #8
 801c4d2:	230a      	movne	r3, #10
 801c4d4:	2100      	movs	r1, #0
 801c4d6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801c4da:	6865      	ldr	r5, [r4, #4]
 801c4dc:	60a5      	str	r5, [r4, #8]
 801c4de:	2d00      	cmp	r5, #0
 801c4e0:	bfa2      	ittt	ge
 801c4e2:	6821      	ldrge	r1, [r4, #0]
 801c4e4:	f021 0104 	bicge.w	r1, r1, #4
 801c4e8:	6021      	strge	r1, [r4, #0]
 801c4ea:	b90e      	cbnz	r6, 801c4f0 <_printf_i+0x118>
 801c4ec:	2d00      	cmp	r5, #0
 801c4ee:	d04d      	beq.n	801c58c <_printf_i+0x1b4>
 801c4f0:	4615      	mov	r5, r2
 801c4f2:	fbb6 f1f3 	udiv	r1, r6, r3
 801c4f6:	fb03 6711 	mls	r7, r3, r1, r6
 801c4fa:	5dc7      	ldrb	r7, [r0, r7]
 801c4fc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 801c500:	4637      	mov	r7, r6
 801c502:	42bb      	cmp	r3, r7
 801c504:	460e      	mov	r6, r1
 801c506:	d9f4      	bls.n	801c4f2 <_printf_i+0x11a>
 801c508:	2b08      	cmp	r3, #8
 801c50a:	d10b      	bne.n	801c524 <_printf_i+0x14c>
 801c50c:	6823      	ldr	r3, [r4, #0]
 801c50e:	07de      	lsls	r6, r3, #31
 801c510:	d508      	bpl.n	801c524 <_printf_i+0x14c>
 801c512:	6923      	ldr	r3, [r4, #16]
 801c514:	6861      	ldr	r1, [r4, #4]
 801c516:	4299      	cmp	r1, r3
 801c518:	bfde      	ittt	le
 801c51a:	2330      	movle	r3, #48	; 0x30
 801c51c:	f805 3c01 	strble.w	r3, [r5, #-1]
 801c520:	f105 35ff 	addle.w	r5, r5, #4294967295
 801c524:	1b52      	subs	r2, r2, r5
 801c526:	6122      	str	r2, [r4, #16]
 801c528:	f8cd a000 	str.w	sl, [sp]
 801c52c:	464b      	mov	r3, r9
 801c52e:	aa03      	add	r2, sp, #12
 801c530:	4621      	mov	r1, r4
 801c532:	4640      	mov	r0, r8
 801c534:	f7ff fee2 	bl	801c2fc <_printf_common>
 801c538:	3001      	adds	r0, #1
 801c53a:	d14c      	bne.n	801c5d6 <_printf_i+0x1fe>
 801c53c:	f04f 30ff 	mov.w	r0, #4294967295
 801c540:	b004      	add	sp, #16
 801c542:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801c546:	4835      	ldr	r0, [pc, #212]	; (801c61c <_printf_i+0x244>)
 801c548:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 801c54c:	6829      	ldr	r1, [r5, #0]
 801c54e:	6823      	ldr	r3, [r4, #0]
 801c550:	f851 6b04 	ldr.w	r6, [r1], #4
 801c554:	6029      	str	r1, [r5, #0]
 801c556:	061d      	lsls	r5, r3, #24
 801c558:	d514      	bpl.n	801c584 <_printf_i+0x1ac>
 801c55a:	07df      	lsls	r7, r3, #31
 801c55c:	bf44      	itt	mi
 801c55e:	f043 0320 	orrmi.w	r3, r3, #32
 801c562:	6023      	strmi	r3, [r4, #0]
 801c564:	b91e      	cbnz	r6, 801c56e <_printf_i+0x196>
 801c566:	6823      	ldr	r3, [r4, #0]
 801c568:	f023 0320 	bic.w	r3, r3, #32
 801c56c:	6023      	str	r3, [r4, #0]
 801c56e:	2310      	movs	r3, #16
 801c570:	e7b0      	b.n	801c4d4 <_printf_i+0xfc>
 801c572:	6823      	ldr	r3, [r4, #0]
 801c574:	f043 0320 	orr.w	r3, r3, #32
 801c578:	6023      	str	r3, [r4, #0]
 801c57a:	2378      	movs	r3, #120	; 0x78
 801c57c:	4828      	ldr	r0, [pc, #160]	; (801c620 <_printf_i+0x248>)
 801c57e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801c582:	e7e3      	b.n	801c54c <_printf_i+0x174>
 801c584:	0659      	lsls	r1, r3, #25
 801c586:	bf48      	it	mi
 801c588:	b2b6      	uxthmi	r6, r6
 801c58a:	e7e6      	b.n	801c55a <_printf_i+0x182>
 801c58c:	4615      	mov	r5, r2
 801c58e:	e7bb      	b.n	801c508 <_printf_i+0x130>
 801c590:	682b      	ldr	r3, [r5, #0]
 801c592:	6826      	ldr	r6, [r4, #0]
 801c594:	6961      	ldr	r1, [r4, #20]
 801c596:	1d18      	adds	r0, r3, #4
 801c598:	6028      	str	r0, [r5, #0]
 801c59a:	0635      	lsls	r5, r6, #24
 801c59c:	681b      	ldr	r3, [r3, #0]
 801c59e:	d501      	bpl.n	801c5a4 <_printf_i+0x1cc>
 801c5a0:	6019      	str	r1, [r3, #0]
 801c5a2:	e002      	b.n	801c5aa <_printf_i+0x1d2>
 801c5a4:	0670      	lsls	r0, r6, #25
 801c5a6:	d5fb      	bpl.n	801c5a0 <_printf_i+0x1c8>
 801c5a8:	8019      	strh	r1, [r3, #0]
 801c5aa:	2300      	movs	r3, #0
 801c5ac:	6123      	str	r3, [r4, #16]
 801c5ae:	4615      	mov	r5, r2
 801c5b0:	e7ba      	b.n	801c528 <_printf_i+0x150>
 801c5b2:	682b      	ldr	r3, [r5, #0]
 801c5b4:	1d1a      	adds	r2, r3, #4
 801c5b6:	602a      	str	r2, [r5, #0]
 801c5b8:	681d      	ldr	r5, [r3, #0]
 801c5ba:	6862      	ldr	r2, [r4, #4]
 801c5bc:	2100      	movs	r1, #0
 801c5be:	4628      	mov	r0, r5
 801c5c0:	f7e3 fe96 	bl	80002f0 <memchr>
 801c5c4:	b108      	cbz	r0, 801c5ca <_printf_i+0x1f2>
 801c5c6:	1b40      	subs	r0, r0, r5
 801c5c8:	6060      	str	r0, [r4, #4]
 801c5ca:	6863      	ldr	r3, [r4, #4]
 801c5cc:	6123      	str	r3, [r4, #16]
 801c5ce:	2300      	movs	r3, #0
 801c5d0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801c5d4:	e7a8      	b.n	801c528 <_printf_i+0x150>
 801c5d6:	6923      	ldr	r3, [r4, #16]
 801c5d8:	462a      	mov	r2, r5
 801c5da:	4649      	mov	r1, r9
 801c5dc:	4640      	mov	r0, r8
 801c5de:	47d0      	blx	sl
 801c5e0:	3001      	adds	r0, #1
 801c5e2:	d0ab      	beq.n	801c53c <_printf_i+0x164>
 801c5e4:	6823      	ldr	r3, [r4, #0]
 801c5e6:	079b      	lsls	r3, r3, #30
 801c5e8:	d413      	bmi.n	801c612 <_printf_i+0x23a>
 801c5ea:	68e0      	ldr	r0, [r4, #12]
 801c5ec:	9b03      	ldr	r3, [sp, #12]
 801c5ee:	4298      	cmp	r0, r3
 801c5f0:	bfb8      	it	lt
 801c5f2:	4618      	movlt	r0, r3
 801c5f4:	e7a4      	b.n	801c540 <_printf_i+0x168>
 801c5f6:	2301      	movs	r3, #1
 801c5f8:	4632      	mov	r2, r6
 801c5fa:	4649      	mov	r1, r9
 801c5fc:	4640      	mov	r0, r8
 801c5fe:	47d0      	blx	sl
 801c600:	3001      	adds	r0, #1
 801c602:	d09b      	beq.n	801c53c <_printf_i+0x164>
 801c604:	3501      	adds	r5, #1
 801c606:	68e3      	ldr	r3, [r4, #12]
 801c608:	9903      	ldr	r1, [sp, #12]
 801c60a:	1a5b      	subs	r3, r3, r1
 801c60c:	42ab      	cmp	r3, r5
 801c60e:	dcf2      	bgt.n	801c5f6 <_printf_i+0x21e>
 801c610:	e7eb      	b.n	801c5ea <_printf_i+0x212>
 801c612:	2500      	movs	r5, #0
 801c614:	f104 0619 	add.w	r6, r4, #25
 801c618:	e7f5      	b.n	801c606 <_printf_i+0x22e>
 801c61a:	bf00      	nop
 801c61c:	08020ba1 	.word	0x08020ba1
 801c620:	08020bb2 	.word	0x08020bb2

0801c624 <cleanup_glue>:
 801c624:	b538      	push	{r3, r4, r5, lr}
 801c626:	460c      	mov	r4, r1
 801c628:	6809      	ldr	r1, [r1, #0]
 801c62a:	4605      	mov	r5, r0
 801c62c:	b109      	cbz	r1, 801c632 <cleanup_glue+0xe>
 801c62e:	f7ff fff9 	bl	801c624 <cleanup_glue>
 801c632:	4621      	mov	r1, r4
 801c634:	4628      	mov	r0, r5
 801c636:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801c63a:	f7ff b977 	b.w	801b92c <_free_r>
	...

0801c640 <_reclaim_reent>:
 801c640:	4b2c      	ldr	r3, [pc, #176]	; (801c6f4 <_reclaim_reent+0xb4>)
 801c642:	681b      	ldr	r3, [r3, #0]
 801c644:	4283      	cmp	r3, r0
 801c646:	b570      	push	{r4, r5, r6, lr}
 801c648:	4604      	mov	r4, r0
 801c64a:	d051      	beq.n	801c6f0 <_reclaim_reent+0xb0>
 801c64c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 801c64e:	b143      	cbz	r3, 801c662 <_reclaim_reent+0x22>
 801c650:	68db      	ldr	r3, [r3, #12]
 801c652:	2b00      	cmp	r3, #0
 801c654:	d14a      	bne.n	801c6ec <_reclaim_reent+0xac>
 801c656:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801c658:	6819      	ldr	r1, [r3, #0]
 801c65a:	b111      	cbz	r1, 801c662 <_reclaim_reent+0x22>
 801c65c:	4620      	mov	r0, r4
 801c65e:	f7ff f965 	bl	801b92c <_free_r>
 801c662:	6961      	ldr	r1, [r4, #20]
 801c664:	b111      	cbz	r1, 801c66c <_reclaim_reent+0x2c>
 801c666:	4620      	mov	r0, r4
 801c668:	f7ff f960 	bl	801b92c <_free_r>
 801c66c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 801c66e:	b111      	cbz	r1, 801c676 <_reclaim_reent+0x36>
 801c670:	4620      	mov	r0, r4
 801c672:	f7ff f95b 	bl	801b92c <_free_r>
 801c676:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 801c678:	b111      	cbz	r1, 801c680 <_reclaim_reent+0x40>
 801c67a:	4620      	mov	r0, r4
 801c67c:	f7ff f956 	bl	801b92c <_free_r>
 801c680:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 801c682:	b111      	cbz	r1, 801c68a <_reclaim_reent+0x4a>
 801c684:	4620      	mov	r0, r4
 801c686:	f7ff f951 	bl	801b92c <_free_r>
 801c68a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 801c68c:	b111      	cbz	r1, 801c694 <_reclaim_reent+0x54>
 801c68e:	4620      	mov	r0, r4
 801c690:	f7ff f94c 	bl	801b92c <_free_r>
 801c694:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 801c696:	b111      	cbz	r1, 801c69e <_reclaim_reent+0x5e>
 801c698:	4620      	mov	r0, r4
 801c69a:	f7ff f947 	bl	801b92c <_free_r>
 801c69e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 801c6a0:	b111      	cbz	r1, 801c6a8 <_reclaim_reent+0x68>
 801c6a2:	4620      	mov	r0, r4
 801c6a4:	f7ff f942 	bl	801b92c <_free_r>
 801c6a8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801c6aa:	b111      	cbz	r1, 801c6b2 <_reclaim_reent+0x72>
 801c6ac:	4620      	mov	r0, r4
 801c6ae:	f7ff f93d 	bl	801b92c <_free_r>
 801c6b2:	69a3      	ldr	r3, [r4, #24]
 801c6b4:	b1e3      	cbz	r3, 801c6f0 <_reclaim_reent+0xb0>
 801c6b6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 801c6b8:	4620      	mov	r0, r4
 801c6ba:	4798      	blx	r3
 801c6bc:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 801c6be:	b1b9      	cbz	r1, 801c6f0 <_reclaim_reent+0xb0>
 801c6c0:	4620      	mov	r0, r4
 801c6c2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801c6c6:	f7ff bfad 	b.w	801c624 <cleanup_glue>
 801c6ca:	5949      	ldr	r1, [r1, r5]
 801c6cc:	b941      	cbnz	r1, 801c6e0 <_reclaim_reent+0xa0>
 801c6ce:	3504      	adds	r5, #4
 801c6d0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801c6d2:	2d80      	cmp	r5, #128	; 0x80
 801c6d4:	68d9      	ldr	r1, [r3, #12]
 801c6d6:	d1f8      	bne.n	801c6ca <_reclaim_reent+0x8a>
 801c6d8:	4620      	mov	r0, r4
 801c6da:	f7ff f927 	bl	801b92c <_free_r>
 801c6de:	e7ba      	b.n	801c656 <_reclaim_reent+0x16>
 801c6e0:	680e      	ldr	r6, [r1, #0]
 801c6e2:	4620      	mov	r0, r4
 801c6e4:	f7ff f922 	bl	801b92c <_free_r>
 801c6e8:	4631      	mov	r1, r6
 801c6ea:	e7ef      	b.n	801c6cc <_reclaim_reent+0x8c>
 801c6ec:	2500      	movs	r5, #0
 801c6ee:	e7ef      	b.n	801c6d0 <_reclaim_reent+0x90>
 801c6f0:	bd70      	pop	{r4, r5, r6, pc}
 801c6f2:	bf00      	nop
 801c6f4:	20000140 	.word	0x20000140

0801c6f8 <_sbrk_r>:
 801c6f8:	b538      	push	{r3, r4, r5, lr}
 801c6fa:	4d06      	ldr	r5, [pc, #24]	; (801c714 <_sbrk_r+0x1c>)
 801c6fc:	2300      	movs	r3, #0
 801c6fe:	4604      	mov	r4, r0
 801c700:	4608      	mov	r0, r1
 801c702:	602b      	str	r3, [r5, #0]
 801c704:	f7e7 f916 	bl	8003934 <_sbrk>
 801c708:	1c43      	adds	r3, r0, #1
 801c70a:	d102      	bne.n	801c712 <_sbrk_r+0x1a>
 801c70c:	682b      	ldr	r3, [r5, #0]
 801c70e:	b103      	cbz	r3, 801c712 <_sbrk_r+0x1a>
 801c710:	6023      	str	r3, [r4, #0]
 801c712:	bd38      	pop	{r3, r4, r5, pc}
 801c714:	20006f60 	.word	0x20006f60

0801c718 <_raise_r>:
 801c718:	291f      	cmp	r1, #31
 801c71a:	b538      	push	{r3, r4, r5, lr}
 801c71c:	4604      	mov	r4, r0
 801c71e:	460d      	mov	r5, r1
 801c720:	d904      	bls.n	801c72c <_raise_r+0x14>
 801c722:	2316      	movs	r3, #22
 801c724:	6003      	str	r3, [r0, #0]
 801c726:	f04f 30ff 	mov.w	r0, #4294967295
 801c72a:	bd38      	pop	{r3, r4, r5, pc}
 801c72c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801c72e:	b112      	cbz	r2, 801c736 <_raise_r+0x1e>
 801c730:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801c734:	b94b      	cbnz	r3, 801c74a <_raise_r+0x32>
 801c736:	4620      	mov	r0, r4
 801c738:	f000 f830 	bl	801c79c <_getpid_r>
 801c73c:	462a      	mov	r2, r5
 801c73e:	4601      	mov	r1, r0
 801c740:	4620      	mov	r0, r4
 801c742:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801c746:	f000 b817 	b.w	801c778 <_kill_r>
 801c74a:	2b01      	cmp	r3, #1
 801c74c:	d00a      	beq.n	801c764 <_raise_r+0x4c>
 801c74e:	1c59      	adds	r1, r3, #1
 801c750:	d103      	bne.n	801c75a <_raise_r+0x42>
 801c752:	2316      	movs	r3, #22
 801c754:	6003      	str	r3, [r0, #0]
 801c756:	2001      	movs	r0, #1
 801c758:	e7e7      	b.n	801c72a <_raise_r+0x12>
 801c75a:	2400      	movs	r4, #0
 801c75c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801c760:	4628      	mov	r0, r5
 801c762:	4798      	blx	r3
 801c764:	2000      	movs	r0, #0
 801c766:	e7e0      	b.n	801c72a <_raise_r+0x12>

0801c768 <raise>:
 801c768:	4b02      	ldr	r3, [pc, #8]	; (801c774 <raise+0xc>)
 801c76a:	4601      	mov	r1, r0
 801c76c:	6818      	ldr	r0, [r3, #0]
 801c76e:	f7ff bfd3 	b.w	801c718 <_raise_r>
 801c772:	bf00      	nop
 801c774:	20000140 	.word	0x20000140

0801c778 <_kill_r>:
 801c778:	b538      	push	{r3, r4, r5, lr}
 801c77a:	4d07      	ldr	r5, [pc, #28]	; (801c798 <_kill_r+0x20>)
 801c77c:	2300      	movs	r3, #0
 801c77e:	4604      	mov	r4, r0
 801c780:	4608      	mov	r0, r1
 801c782:	4611      	mov	r1, r2
 801c784:	602b      	str	r3, [r5, #0]
 801c786:	f7e7 f84d 	bl	8003824 <_kill>
 801c78a:	1c43      	adds	r3, r0, #1
 801c78c:	d102      	bne.n	801c794 <_kill_r+0x1c>
 801c78e:	682b      	ldr	r3, [r5, #0]
 801c790:	b103      	cbz	r3, 801c794 <_kill_r+0x1c>
 801c792:	6023      	str	r3, [r4, #0]
 801c794:	bd38      	pop	{r3, r4, r5, pc}
 801c796:	bf00      	nop
 801c798:	20006f60 	.word	0x20006f60

0801c79c <_getpid_r>:
 801c79c:	f7e7 b83a 	b.w	8003814 <_getpid>

0801c7a0 <siprintf>:
 801c7a0:	b40e      	push	{r1, r2, r3}
 801c7a2:	b500      	push	{lr}
 801c7a4:	b09c      	sub	sp, #112	; 0x70
 801c7a6:	ab1d      	add	r3, sp, #116	; 0x74
 801c7a8:	9002      	str	r0, [sp, #8]
 801c7aa:	9006      	str	r0, [sp, #24]
 801c7ac:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801c7b0:	4809      	ldr	r0, [pc, #36]	; (801c7d8 <siprintf+0x38>)
 801c7b2:	9107      	str	r1, [sp, #28]
 801c7b4:	9104      	str	r1, [sp, #16]
 801c7b6:	4909      	ldr	r1, [pc, #36]	; (801c7dc <siprintf+0x3c>)
 801c7b8:	f853 2b04 	ldr.w	r2, [r3], #4
 801c7bc:	9105      	str	r1, [sp, #20]
 801c7be:	6800      	ldr	r0, [r0, #0]
 801c7c0:	9301      	str	r3, [sp, #4]
 801c7c2:	a902      	add	r1, sp, #8
 801c7c4:	f001 fd16 	bl	801e1f4 <_svfiprintf_r>
 801c7c8:	9b02      	ldr	r3, [sp, #8]
 801c7ca:	2200      	movs	r2, #0
 801c7cc:	701a      	strb	r2, [r3, #0]
 801c7ce:	b01c      	add	sp, #112	; 0x70
 801c7d0:	f85d eb04 	ldr.w	lr, [sp], #4
 801c7d4:	b003      	add	sp, #12
 801c7d6:	4770      	bx	lr
 801c7d8:	20000140 	.word	0x20000140
 801c7dc:	ffff0208 	.word	0xffff0208

0801c7e0 <__sread>:
 801c7e0:	b510      	push	{r4, lr}
 801c7e2:	460c      	mov	r4, r1
 801c7e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801c7e8:	f001 fe04 	bl	801e3f4 <_read_r>
 801c7ec:	2800      	cmp	r0, #0
 801c7ee:	bfab      	itete	ge
 801c7f0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801c7f2:	89a3      	ldrhlt	r3, [r4, #12]
 801c7f4:	181b      	addge	r3, r3, r0
 801c7f6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801c7fa:	bfac      	ite	ge
 801c7fc:	6563      	strge	r3, [r4, #84]	; 0x54
 801c7fe:	81a3      	strhlt	r3, [r4, #12]
 801c800:	bd10      	pop	{r4, pc}

0801c802 <__swrite>:
 801c802:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c806:	461f      	mov	r7, r3
 801c808:	898b      	ldrh	r3, [r1, #12]
 801c80a:	05db      	lsls	r3, r3, #23
 801c80c:	4605      	mov	r5, r0
 801c80e:	460c      	mov	r4, r1
 801c810:	4616      	mov	r6, r2
 801c812:	d505      	bpl.n	801c820 <__swrite+0x1e>
 801c814:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801c818:	2302      	movs	r3, #2
 801c81a:	2200      	movs	r2, #0
 801c81c:	f001 f828 	bl	801d870 <_lseek_r>
 801c820:	89a3      	ldrh	r3, [r4, #12]
 801c822:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801c826:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801c82a:	81a3      	strh	r3, [r4, #12]
 801c82c:	4632      	mov	r2, r6
 801c82e:	463b      	mov	r3, r7
 801c830:	4628      	mov	r0, r5
 801c832:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801c836:	f000 b869 	b.w	801c90c <_write_r>

0801c83a <__sseek>:
 801c83a:	b510      	push	{r4, lr}
 801c83c:	460c      	mov	r4, r1
 801c83e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801c842:	f001 f815 	bl	801d870 <_lseek_r>
 801c846:	1c43      	adds	r3, r0, #1
 801c848:	89a3      	ldrh	r3, [r4, #12]
 801c84a:	bf15      	itete	ne
 801c84c:	6560      	strne	r0, [r4, #84]	; 0x54
 801c84e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801c852:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801c856:	81a3      	strheq	r3, [r4, #12]
 801c858:	bf18      	it	ne
 801c85a:	81a3      	strhne	r3, [r4, #12]
 801c85c:	bd10      	pop	{r4, pc}

0801c85e <__sclose>:
 801c85e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801c862:	f000 b935 	b.w	801cad0 <_close_r>
	...

0801c868 <__swbuf_r>:
 801c868:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c86a:	460e      	mov	r6, r1
 801c86c:	4614      	mov	r4, r2
 801c86e:	4605      	mov	r5, r0
 801c870:	b118      	cbz	r0, 801c87a <__swbuf_r+0x12>
 801c872:	6983      	ldr	r3, [r0, #24]
 801c874:	b90b      	cbnz	r3, 801c87a <__swbuf_r+0x12>
 801c876:	f7fe ff5b 	bl	801b730 <__sinit>
 801c87a:	4b21      	ldr	r3, [pc, #132]	; (801c900 <__swbuf_r+0x98>)
 801c87c:	429c      	cmp	r4, r3
 801c87e:	d12b      	bne.n	801c8d8 <__swbuf_r+0x70>
 801c880:	686c      	ldr	r4, [r5, #4]
 801c882:	69a3      	ldr	r3, [r4, #24]
 801c884:	60a3      	str	r3, [r4, #8]
 801c886:	89a3      	ldrh	r3, [r4, #12]
 801c888:	071a      	lsls	r2, r3, #28
 801c88a:	d52f      	bpl.n	801c8ec <__swbuf_r+0x84>
 801c88c:	6923      	ldr	r3, [r4, #16]
 801c88e:	b36b      	cbz	r3, 801c8ec <__swbuf_r+0x84>
 801c890:	6923      	ldr	r3, [r4, #16]
 801c892:	6820      	ldr	r0, [r4, #0]
 801c894:	1ac0      	subs	r0, r0, r3
 801c896:	6963      	ldr	r3, [r4, #20]
 801c898:	b2f6      	uxtb	r6, r6
 801c89a:	4283      	cmp	r3, r0
 801c89c:	4637      	mov	r7, r6
 801c89e:	dc04      	bgt.n	801c8aa <__swbuf_r+0x42>
 801c8a0:	4621      	mov	r1, r4
 801c8a2:	4628      	mov	r0, r5
 801c8a4:	f000 ffa4 	bl	801d7f0 <_fflush_r>
 801c8a8:	bb30      	cbnz	r0, 801c8f8 <__swbuf_r+0x90>
 801c8aa:	68a3      	ldr	r3, [r4, #8]
 801c8ac:	3b01      	subs	r3, #1
 801c8ae:	60a3      	str	r3, [r4, #8]
 801c8b0:	6823      	ldr	r3, [r4, #0]
 801c8b2:	1c5a      	adds	r2, r3, #1
 801c8b4:	6022      	str	r2, [r4, #0]
 801c8b6:	701e      	strb	r6, [r3, #0]
 801c8b8:	6963      	ldr	r3, [r4, #20]
 801c8ba:	3001      	adds	r0, #1
 801c8bc:	4283      	cmp	r3, r0
 801c8be:	d004      	beq.n	801c8ca <__swbuf_r+0x62>
 801c8c0:	89a3      	ldrh	r3, [r4, #12]
 801c8c2:	07db      	lsls	r3, r3, #31
 801c8c4:	d506      	bpl.n	801c8d4 <__swbuf_r+0x6c>
 801c8c6:	2e0a      	cmp	r6, #10
 801c8c8:	d104      	bne.n	801c8d4 <__swbuf_r+0x6c>
 801c8ca:	4621      	mov	r1, r4
 801c8cc:	4628      	mov	r0, r5
 801c8ce:	f000 ff8f 	bl	801d7f0 <_fflush_r>
 801c8d2:	b988      	cbnz	r0, 801c8f8 <__swbuf_r+0x90>
 801c8d4:	4638      	mov	r0, r7
 801c8d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801c8d8:	4b0a      	ldr	r3, [pc, #40]	; (801c904 <__swbuf_r+0x9c>)
 801c8da:	429c      	cmp	r4, r3
 801c8dc:	d101      	bne.n	801c8e2 <__swbuf_r+0x7a>
 801c8de:	68ac      	ldr	r4, [r5, #8]
 801c8e0:	e7cf      	b.n	801c882 <__swbuf_r+0x1a>
 801c8e2:	4b09      	ldr	r3, [pc, #36]	; (801c908 <__swbuf_r+0xa0>)
 801c8e4:	429c      	cmp	r4, r3
 801c8e6:	bf08      	it	eq
 801c8e8:	68ec      	ldreq	r4, [r5, #12]
 801c8ea:	e7ca      	b.n	801c882 <__swbuf_r+0x1a>
 801c8ec:	4621      	mov	r1, r4
 801c8ee:	4628      	mov	r0, r5
 801c8f0:	f000 f81e 	bl	801c930 <__swsetup_r>
 801c8f4:	2800      	cmp	r0, #0
 801c8f6:	d0cb      	beq.n	801c890 <__swbuf_r+0x28>
 801c8f8:	f04f 37ff 	mov.w	r7, #4294967295
 801c8fc:	e7ea      	b.n	801c8d4 <__swbuf_r+0x6c>
 801c8fe:	bf00      	nop
 801c900:	08020b3c 	.word	0x08020b3c
 801c904:	08020b5c 	.word	0x08020b5c
 801c908:	08020b1c 	.word	0x08020b1c

0801c90c <_write_r>:
 801c90c:	b538      	push	{r3, r4, r5, lr}
 801c90e:	4d07      	ldr	r5, [pc, #28]	; (801c92c <_write_r+0x20>)
 801c910:	4604      	mov	r4, r0
 801c912:	4608      	mov	r0, r1
 801c914:	4611      	mov	r1, r2
 801c916:	2200      	movs	r2, #0
 801c918:	602a      	str	r2, [r5, #0]
 801c91a:	461a      	mov	r2, r3
 801c91c:	f7e6 ffb9 	bl	8003892 <_write>
 801c920:	1c43      	adds	r3, r0, #1
 801c922:	d102      	bne.n	801c92a <_write_r+0x1e>
 801c924:	682b      	ldr	r3, [r5, #0]
 801c926:	b103      	cbz	r3, 801c92a <_write_r+0x1e>
 801c928:	6023      	str	r3, [r4, #0]
 801c92a:	bd38      	pop	{r3, r4, r5, pc}
 801c92c:	20006f60 	.word	0x20006f60

0801c930 <__swsetup_r>:
 801c930:	4b32      	ldr	r3, [pc, #200]	; (801c9fc <__swsetup_r+0xcc>)
 801c932:	b570      	push	{r4, r5, r6, lr}
 801c934:	681d      	ldr	r5, [r3, #0]
 801c936:	4606      	mov	r6, r0
 801c938:	460c      	mov	r4, r1
 801c93a:	b125      	cbz	r5, 801c946 <__swsetup_r+0x16>
 801c93c:	69ab      	ldr	r3, [r5, #24]
 801c93e:	b913      	cbnz	r3, 801c946 <__swsetup_r+0x16>
 801c940:	4628      	mov	r0, r5
 801c942:	f7fe fef5 	bl	801b730 <__sinit>
 801c946:	4b2e      	ldr	r3, [pc, #184]	; (801ca00 <__swsetup_r+0xd0>)
 801c948:	429c      	cmp	r4, r3
 801c94a:	d10f      	bne.n	801c96c <__swsetup_r+0x3c>
 801c94c:	686c      	ldr	r4, [r5, #4]
 801c94e:	89a3      	ldrh	r3, [r4, #12]
 801c950:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801c954:	0719      	lsls	r1, r3, #28
 801c956:	d42c      	bmi.n	801c9b2 <__swsetup_r+0x82>
 801c958:	06dd      	lsls	r5, r3, #27
 801c95a:	d411      	bmi.n	801c980 <__swsetup_r+0x50>
 801c95c:	2309      	movs	r3, #9
 801c95e:	6033      	str	r3, [r6, #0]
 801c960:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801c964:	81a3      	strh	r3, [r4, #12]
 801c966:	f04f 30ff 	mov.w	r0, #4294967295
 801c96a:	e03e      	b.n	801c9ea <__swsetup_r+0xba>
 801c96c:	4b25      	ldr	r3, [pc, #148]	; (801ca04 <__swsetup_r+0xd4>)
 801c96e:	429c      	cmp	r4, r3
 801c970:	d101      	bne.n	801c976 <__swsetup_r+0x46>
 801c972:	68ac      	ldr	r4, [r5, #8]
 801c974:	e7eb      	b.n	801c94e <__swsetup_r+0x1e>
 801c976:	4b24      	ldr	r3, [pc, #144]	; (801ca08 <__swsetup_r+0xd8>)
 801c978:	429c      	cmp	r4, r3
 801c97a:	bf08      	it	eq
 801c97c:	68ec      	ldreq	r4, [r5, #12]
 801c97e:	e7e6      	b.n	801c94e <__swsetup_r+0x1e>
 801c980:	0758      	lsls	r0, r3, #29
 801c982:	d512      	bpl.n	801c9aa <__swsetup_r+0x7a>
 801c984:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801c986:	b141      	cbz	r1, 801c99a <__swsetup_r+0x6a>
 801c988:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801c98c:	4299      	cmp	r1, r3
 801c98e:	d002      	beq.n	801c996 <__swsetup_r+0x66>
 801c990:	4630      	mov	r0, r6
 801c992:	f7fe ffcb 	bl	801b92c <_free_r>
 801c996:	2300      	movs	r3, #0
 801c998:	6363      	str	r3, [r4, #52]	; 0x34
 801c99a:	89a3      	ldrh	r3, [r4, #12]
 801c99c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801c9a0:	81a3      	strh	r3, [r4, #12]
 801c9a2:	2300      	movs	r3, #0
 801c9a4:	6063      	str	r3, [r4, #4]
 801c9a6:	6923      	ldr	r3, [r4, #16]
 801c9a8:	6023      	str	r3, [r4, #0]
 801c9aa:	89a3      	ldrh	r3, [r4, #12]
 801c9ac:	f043 0308 	orr.w	r3, r3, #8
 801c9b0:	81a3      	strh	r3, [r4, #12]
 801c9b2:	6923      	ldr	r3, [r4, #16]
 801c9b4:	b94b      	cbnz	r3, 801c9ca <__swsetup_r+0x9a>
 801c9b6:	89a3      	ldrh	r3, [r4, #12]
 801c9b8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801c9bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801c9c0:	d003      	beq.n	801c9ca <__swsetup_r+0x9a>
 801c9c2:	4621      	mov	r1, r4
 801c9c4:	4630      	mov	r0, r6
 801c9c6:	f000 ff8b 	bl	801d8e0 <__smakebuf_r>
 801c9ca:	89a0      	ldrh	r0, [r4, #12]
 801c9cc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801c9d0:	f010 0301 	ands.w	r3, r0, #1
 801c9d4:	d00a      	beq.n	801c9ec <__swsetup_r+0xbc>
 801c9d6:	2300      	movs	r3, #0
 801c9d8:	60a3      	str	r3, [r4, #8]
 801c9da:	6963      	ldr	r3, [r4, #20]
 801c9dc:	425b      	negs	r3, r3
 801c9de:	61a3      	str	r3, [r4, #24]
 801c9e0:	6923      	ldr	r3, [r4, #16]
 801c9e2:	b943      	cbnz	r3, 801c9f6 <__swsetup_r+0xc6>
 801c9e4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801c9e8:	d1ba      	bne.n	801c960 <__swsetup_r+0x30>
 801c9ea:	bd70      	pop	{r4, r5, r6, pc}
 801c9ec:	0781      	lsls	r1, r0, #30
 801c9ee:	bf58      	it	pl
 801c9f0:	6963      	ldrpl	r3, [r4, #20]
 801c9f2:	60a3      	str	r3, [r4, #8]
 801c9f4:	e7f4      	b.n	801c9e0 <__swsetup_r+0xb0>
 801c9f6:	2000      	movs	r0, #0
 801c9f8:	e7f7      	b.n	801c9ea <__swsetup_r+0xba>
 801c9fa:	bf00      	nop
 801c9fc:	20000140 	.word	0x20000140
 801ca00:	08020b3c 	.word	0x08020b3c
 801ca04:	08020b5c 	.word	0x08020b5c
 801ca08:	08020b1c 	.word	0x08020b1c

0801ca0c <__register_exitproc>:
 801ca0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801ca10:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 801cacc <__register_exitproc+0xc0>
 801ca14:	4606      	mov	r6, r0
 801ca16:	f8d8 0000 	ldr.w	r0, [r8]
 801ca1a:	461f      	mov	r7, r3
 801ca1c:	460d      	mov	r5, r1
 801ca1e:	4691      	mov	r9, r2
 801ca20:	f7fe ff5b 	bl	801b8da <__retarget_lock_acquire_recursive>
 801ca24:	4b25      	ldr	r3, [pc, #148]	; (801cabc <__register_exitproc+0xb0>)
 801ca26:	681c      	ldr	r4, [r3, #0]
 801ca28:	b934      	cbnz	r4, 801ca38 <__register_exitproc+0x2c>
 801ca2a:	4c25      	ldr	r4, [pc, #148]	; (801cac0 <__register_exitproc+0xb4>)
 801ca2c:	601c      	str	r4, [r3, #0]
 801ca2e:	4b25      	ldr	r3, [pc, #148]	; (801cac4 <__register_exitproc+0xb8>)
 801ca30:	b113      	cbz	r3, 801ca38 <__register_exitproc+0x2c>
 801ca32:	681b      	ldr	r3, [r3, #0]
 801ca34:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 801ca38:	6863      	ldr	r3, [r4, #4]
 801ca3a:	2b1f      	cmp	r3, #31
 801ca3c:	dd07      	ble.n	801ca4e <__register_exitproc+0x42>
 801ca3e:	f8d8 0000 	ldr.w	r0, [r8]
 801ca42:	f7fe ff4c 	bl	801b8de <__retarget_lock_release_recursive>
 801ca46:	f04f 30ff 	mov.w	r0, #4294967295
 801ca4a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801ca4e:	b34e      	cbz	r6, 801caa4 <__register_exitproc+0x98>
 801ca50:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 801ca54:	b988      	cbnz	r0, 801ca7a <__register_exitproc+0x6e>
 801ca56:	4b1c      	ldr	r3, [pc, #112]	; (801cac8 <__register_exitproc+0xbc>)
 801ca58:	b923      	cbnz	r3, 801ca64 <__register_exitproc+0x58>
 801ca5a:	f8d8 0000 	ldr.w	r0, [r8]
 801ca5e:	f7fe ff3d 	bl	801b8dc <__retarget_lock_release>
 801ca62:	e7f0      	b.n	801ca46 <__register_exitproc+0x3a>
 801ca64:	f44f 7084 	mov.w	r0, #264	; 0x108
 801ca68:	f7fe ff3a 	bl	801b8e0 <malloc>
 801ca6c:	2800      	cmp	r0, #0
 801ca6e:	d0f4      	beq.n	801ca5a <__register_exitproc+0x4e>
 801ca70:	2300      	movs	r3, #0
 801ca72:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
 801ca76:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 801ca7a:	6863      	ldr	r3, [r4, #4]
 801ca7c:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 801ca80:	2201      	movs	r2, #1
 801ca82:	409a      	lsls	r2, r3
 801ca84:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 801ca88:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 801ca8c:	4313      	orrs	r3, r2
 801ca8e:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 801ca92:	2e02      	cmp	r6, #2
 801ca94:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
 801ca98:	bf02      	ittt	eq
 801ca9a:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
 801ca9e:	4313      	orreq	r3, r2
 801caa0:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
 801caa4:	6863      	ldr	r3, [r4, #4]
 801caa6:	f8d8 0000 	ldr.w	r0, [r8]
 801caaa:	1c5a      	adds	r2, r3, #1
 801caac:	3302      	adds	r3, #2
 801caae:	6062      	str	r2, [r4, #4]
 801cab0:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 801cab4:	f7fe ff13 	bl	801b8de <__retarget_lock_release_recursive>
 801cab8:	2000      	movs	r0, #0
 801caba:	e7c6      	b.n	801ca4a <__register_exitproc+0x3e>
 801cabc:	20006ff0 	.word	0x20006ff0
 801cac0:	20006f64 	.word	0x20006f64
 801cac4:	08020bc4 	.word	0x08020bc4
 801cac8:	0801b8e1 	.word	0x0801b8e1
 801cacc:	200001a4 	.word	0x200001a4

0801cad0 <_close_r>:
 801cad0:	b538      	push	{r3, r4, r5, lr}
 801cad2:	4d06      	ldr	r5, [pc, #24]	; (801caec <_close_r+0x1c>)
 801cad4:	2300      	movs	r3, #0
 801cad6:	4604      	mov	r4, r0
 801cad8:	4608      	mov	r0, r1
 801cada:	602b      	str	r3, [r5, #0]
 801cadc:	f7e6 fef5 	bl	80038ca <_close>
 801cae0:	1c43      	adds	r3, r0, #1
 801cae2:	d102      	bne.n	801caea <_close_r+0x1a>
 801cae4:	682b      	ldr	r3, [r5, #0]
 801cae6:	b103      	cbz	r3, 801caea <_close_r+0x1a>
 801cae8:	6023      	str	r3, [r4, #0]
 801caea:	bd38      	pop	{r3, r4, r5, pc}
 801caec:	20006f60 	.word	0x20006f60

0801caf0 <quorem>:
 801caf0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801caf4:	6903      	ldr	r3, [r0, #16]
 801caf6:	690c      	ldr	r4, [r1, #16]
 801caf8:	42a3      	cmp	r3, r4
 801cafa:	4607      	mov	r7, r0
 801cafc:	f2c0 8081 	blt.w	801cc02 <quorem+0x112>
 801cb00:	3c01      	subs	r4, #1
 801cb02:	f101 0814 	add.w	r8, r1, #20
 801cb06:	f100 0514 	add.w	r5, r0, #20
 801cb0a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801cb0e:	9301      	str	r3, [sp, #4]
 801cb10:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801cb14:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801cb18:	3301      	adds	r3, #1
 801cb1a:	429a      	cmp	r2, r3
 801cb1c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 801cb20:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801cb24:	fbb2 f6f3 	udiv	r6, r2, r3
 801cb28:	d331      	bcc.n	801cb8e <quorem+0x9e>
 801cb2a:	f04f 0e00 	mov.w	lr, #0
 801cb2e:	4640      	mov	r0, r8
 801cb30:	46ac      	mov	ip, r5
 801cb32:	46f2      	mov	sl, lr
 801cb34:	f850 2b04 	ldr.w	r2, [r0], #4
 801cb38:	b293      	uxth	r3, r2
 801cb3a:	fb06 e303 	mla	r3, r6, r3, lr
 801cb3e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 801cb42:	b29b      	uxth	r3, r3
 801cb44:	ebaa 0303 	sub.w	r3, sl, r3
 801cb48:	f8dc a000 	ldr.w	sl, [ip]
 801cb4c:	0c12      	lsrs	r2, r2, #16
 801cb4e:	fa13 f38a 	uxtah	r3, r3, sl
 801cb52:	fb06 e202 	mla	r2, r6, r2, lr
 801cb56:	9300      	str	r3, [sp, #0]
 801cb58:	9b00      	ldr	r3, [sp, #0]
 801cb5a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 801cb5e:	b292      	uxth	r2, r2
 801cb60:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 801cb64:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801cb68:	f8bd 3000 	ldrh.w	r3, [sp]
 801cb6c:	4581      	cmp	r9, r0
 801cb6e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801cb72:	f84c 3b04 	str.w	r3, [ip], #4
 801cb76:	ea4f 4a22 	mov.w	sl, r2, asr #16
 801cb7a:	d2db      	bcs.n	801cb34 <quorem+0x44>
 801cb7c:	f855 300b 	ldr.w	r3, [r5, fp]
 801cb80:	b92b      	cbnz	r3, 801cb8e <quorem+0x9e>
 801cb82:	9b01      	ldr	r3, [sp, #4]
 801cb84:	3b04      	subs	r3, #4
 801cb86:	429d      	cmp	r5, r3
 801cb88:	461a      	mov	r2, r3
 801cb8a:	d32e      	bcc.n	801cbea <quorem+0xfa>
 801cb8c:	613c      	str	r4, [r7, #16]
 801cb8e:	4638      	mov	r0, r7
 801cb90:	f001 f98e 	bl	801deb0 <__mcmp>
 801cb94:	2800      	cmp	r0, #0
 801cb96:	db24      	blt.n	801cbe2 <quorem+0xf2>
 801cb98:	3601      	adds	r6, #1
 801cb9a:	4628      	mov	r0, r5
 801cb9c:	f04f 0c00 	mov.w	ip, #0
 801cba0:	f858 2b04 	ldr.w	r2, [r8], #4
 801cba4:	f8d0 e000 	ldr.w	lr, [r0]
 801cba8:	b293      	uxth	r3, r2
 801cbaa:	ebac 0303 	sub.w	r3, ip, r3
 801cbae:	0c12      	lsrs	r2, r2, #16
 801cbb0:	fa13 f38e 	uxtah	r3, r3, lr
 801cbb4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 801cbb8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801cbbc:	b29b      	uxth	r3, r3
 801cbbe:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801cbc2:	45c1      	cmp	r9, r8
 801cbc4:	f840 3b04 	str.w	r3, [r0], #4
 801cbc8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 801cbcc:	d2e8      	bcs.n	801cba0 <quorem+0xb0>
 801cbce:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801cbd2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801cbd6:	b922      	cbnz	r2, 801cbe2 <quorem+0xf2>
 801cbd8:	3b04      	subs	r3, #4
 801cbda:	429d      	cmp	r5, r3
 801cbdc:	461a      	mov	r2, r3
 801cbde:	d30a      	bcc.n	801cbf6 <quorem+0x106>
 801cbe0:	613c      	str	r4, [r7, #16]
 801cbe2:	4630      	mov	r0, r6
 801cbe4:	b003      	add	sp, #12
 801cbe6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cbea:	6812      	ldr	r2, [r2, #0]
 801cbec:	3b04      	subs	r3, #4
 801cbee:	2a00      	cmp	r2, #0
 801cbf0:	d1cc      	bne.n	801cb8c <quorem+0x9c>
 801cbf2:	3c01      	subs	r4, #1
 801cbf4:	e7c7      	b.n	801cb86 <quorem+0x96>
 801cbf6:	6812      	ldr	r2, [r2, #0]
 801cbf8:	3b04      	subs	r3, #4
 801cbfa:	2a00      	cmp	r2, #0
 801cbfc:	d1f0      	bne.n	801cbe0 <quorem+0xf0>
 801cbfe:	3c01      	subs	r4, #1
 801cc00:	e7eb      	b.n	801cbda <quorem+0xea>
 801cc02:	2000      	movs	r0, #0
 801cc04:	e7ee      	b.n	801cbe4 <quorem+0xf4>
	...

0801cc08 <_dtoa_r>:
 801cc08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cc0c:	ed2d 8b02 	vpush	{d8}
 801cc10:	6a45      	ldr	r5, [r0, #36]	; 0x24
 801cc12:	b091      	sub	sp, #68	; 0x44
 801cc14:	ed8d 0b02 	vstr	d0, [sp, #8]
 801cc18:	ec59 8b10 	vmov	r8, r9, d0
 801cc1c:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 801cc1e:	9106      	str	r1, [sp, #24]
 801cc20:	4606      	mov	r6, r0
 801cc22:	9208      	str	r2, [sp, #32]
 801cc24:	930c      	str	r3, [sp, #48]	; 0x30
 801cc26:	b975      	cbnz	r5, 801cc46 <_dtoa_r+0x3e>
 801cc28:	2010      	movs	r0, #16
 801cc2a:	f7fe fe59 	bl	801b8e0 <malloc>
 801cc2e:	4602      	mov	r2, r0
 801cc30:	6270      	str	r0, [r6, #36]	; 0x24
 801cc32:	b920      	cbnz	r0, 801cc3e <_dtoa_r+0x36>
 801cc34:	4baa      	ldr	r3, [pc, #680]	; (801cee0 <_dtoa_r+0x2d8>)
 801cc36:	21ea      	movs	r1, #234	; 0xea
 801cc38:	48aa      	ldr	r0, [pc, #680]	; (801cee4 <_dtoa_r+0x2dc>)
 801cc3a:	f7fe fcf7 	bl	801b62c <__assert_func>
 801cc3e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801cc42:	6005      	str	r5, [r0, #0]
 801cc44:	60c5      	str	r5, [r0, #12]
 801cc46:	6a73      	ldr	r3, [r6, #36]	; 0x24
 801cc48:	6819      	ldr	r1, [r3, #0]
 801cc4a:	b151      	cbz	r1, 801cc62 <_dtoa_r+0x5a>
 801cc4c:	685a      	ldr	r2, [r3, #4]
 801cc4e:	604a      	str	r2, [r1, #4]
 801cc50:	2301      	movs	r3, #1
 801cc52:	4093      	lsls	r3, r2
 801cc54:	608b      	str	r3, [r1, #8]
 801cc56:	4630      	mov	r0, r6
 801cc58:	f000 fee8 	bl	801da2c <_Bfree>
 801cc5c:	6a73      	ldr	r3, [r6, #36]	; 0x24
 801cc5e:	2200      	movs	r2, #0
 801cc60:	601a      	str	r2, [r3, #0]
 801cc62:	f1b9 0300 	subs.w	r3, r9, #0
 801cc66:	bfbb      	ittet	lt
 801cc68:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 801cc6c:	9303      	strlt	r3, [sp, #12]
 801cc6e:	2300      	movge	r3, #0
 801cc70:	2201      	movlt	r2, #1
 801cc72:	bfac      	ite	ge
 801cc74:	6023      	strge	r3, [r4, #0]
 801cc76:	6022      	strlt	r2, [r4, #0]
 801cc78:	4b9b      	ldr	r3, [pc, #620]	; (801cee8 <_dtoa_r+0x2e0>)
 801cc7a:	9c03      	ldr	r4, [sp, #12]
 801cc7c:	43a3      	bics	r3, r4
 801cc7e:	d11c      	bne.n	801ccba <_dtoa_r+0xb2>
 801cc80:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801cc82:	f242 730f 	movw	r3, #9999	; 0x270f
 801cc86:	6013      	str	r3, [r2, #0]
 801cc88:	f3c4 0313 	ubfx	r3, r4, #0, #20
 801cc8c:	ea53 0308 	orrs.w	r3, r3, r8
 801cc90:	f000 84fd 	beq.w	801d68e <_dtoa_r+0xa86>
 801cc94:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801cc96:	b963      	cbnz	r3, 801ccb2 <_dtoa_r+0xaa>
 801cc98:	4b94      	ldr	r3, [pc, #592]	; (801ceec <_dtoa_r+0x2e4>)
 801cc9a:	e01f      	b.n	801ccdc <_dtoa_r+0xd4>
 801cc9c:	4b94      	ldr	r3, [pc, #592]	; (801cef0 <_dtoa_r+0x2e8>)
 801cc9e:	9301      	str	r3, [sp, #4]
 801cca0:	3308      	adds	r3, #8
 801cca2:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 801cca4:	6013      	str	r3, [r2, #0]
 801cca6:	9801      	ldr	r0, [sp, #4]
 801cca8:	b011      	add	sp, #68	; 0x44
 801ccaa:	ecbd 8b02 	vpop	{d8}
 801ccae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ccb2:	4b8e      	ldr	r3, [pc, #568]	; (801ceec <_dtoa_r+0x2e4>)
 801ccb4:	9301      	str	r3, [sp, #4]
 801ccb6:	3303      	adds	r3, #3
 801ccb8:	e7f3      	b.n	801cca2 <_dtoa_r+0x9a>
 801ccba:	ed9d 8b02 	vldr	d8, [sp, #8]
 801ccbe:	eeb5 8b40 	vcmp.f64	d8, #0.0
 801ccc2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ccc6:	d10b      	bne.n	801cce0 <_dtoa_r+0xd8>
 801ccc8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801ccca:	2301      	movs	r3, #1
 801cccc:	6013      	str	r3, [r2, #0]
 801ccce:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801ccd0:	2b00      	cmp	r3, #0
 801ccd2:	f000 84d9 	beq.w	801d688 <_dtoa_r+0xa80>
 801ccd6:	4887      	ldr	r0, [pc, #540]	; (801cef4 <_dtoa_r+0x2ec>)
 801ccd8:	6018      	str	r0, [r3, #0]
 801ccda:	1e43      	subs	r3, r0, #1
 801ccdc:	9301      	str	r3, [sp, #4]
 801ccde:	e7e2      	b.n	801cca6 <_dtoa_r+0x9e>
 801cce0:	a90f      	add	r1, sp, #60	; 0x3c
 801cce2:	aa0e      	add	r2, sp, #56	; 0x38
 801cce4:	4630      	mov	r0, r6
 801cce6:	eeb0 0b48 	vmov.f64	d0, d8
 801ccea:	f001 f987 	bl	801dffc <__d2b>
 801ccee:	f3c4 510a 	ubfx	r1, r4, #20, #11
 801ccf2:	4605      	mov	r5, r0
 801ccf4:	980e      	ldr	r0, [sp, #56]	; 0x38
 801ccf6:	2900      	cmp	r1, #0
 801ccf8:	d046      	beq.n	801cd88 <_dtoa_r+0x180>
 801ccfa:	ee18 4a90 	vmov	r4, s17
 801ccfe:	f3c4 0413 	ubfx	r4, r4, #0, #20
 801cd02:	ec53 2b18 	vmov	r2, r3, d8
 801cd06:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 801cd0a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 801cd0e:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 801cd12:	2400      	movs	r4, #0
 801cd14:	ec43 2b16 	vmov	d6, r2, r3
 801cd18:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 801cd1c:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 801cec8 <_dtoa_r+0x2c0>
 801cd20:	ee36 7b47 	vsub.f64	d7, d6, d7
 801cd24:	ed9f 6b6a 	vldr	d6, [pc, #424]	; 801ced0 <_dtoa_r+0x2c8>
 801cd28:	eea7 6b05 	vfma.f64	d6, d7, d5
 801cd2c:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 801ced8 <_dtoa_r+0x2d0>
 801cd30:	ee07 1a90 	vmov	s15, r1
 801cd34:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 801cd38:	eeb0 7b46 	vmov.f64	d7, d6
 801cd3c:	eea4 7b05 	vfma.f64	d7, d4, d5
 801cd40:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 801cd44:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 801cd48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801cd4c:	ee16 ba90 	vmov	fp, s13
 801cd50:	940a      	str	r4, [sp, #40]	; 0x28
 801cd52:	d508      	bpl.n	801cd66 <_dtoa_r+0x15e>
 801cd54:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 801cd58:	eeb4 6b47 	vcmp.f64	d6, d7
 801cd5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801cd60:	bf18      	it	ne
 801cd62:	f10b 3bff 	addne.w	fp, fp, #4294967295
 801cd66:	f1bb 0f16 	cmp.w	fp, #22
 801cd6a:	d82f      	bhi.n	801cdcc <_dtoa_r+0x1c4>
 801cd6c:	4b62      	ldr	r3, [pc, #392]	; (801cef8 <_dtoa_r+0x2f0>)
 801cd6e:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 801cd72:	ed93 7b00 	vldr	d7, [r3]
 801cd76:	eeb4 8bc7 	vcmpe.f64	d8, d7
 801cd7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801cd7e:	d501      	bpl.n	801cd84 <_dtoa_r+0x17c>
 801cd80:	f10b 3bff 	add.w	fp, fp, #4294967295
 801cd84:	2300      	movs	r3, #0
 801cd86:	e022      	b.n	801cdce <_dtoa_r+0x1c6>
 801cd88:	990f      	ldr	r1, [sp, #60]	; 0x3c
 801cd8a:	4401      	add	r1, r0
 801cd8c:	f201 4332 	addw	r3, r1, #1074	; 0x432
 801cd90:	2b20      	cmp	r3, #32
 801cd92:	bfc1      	itttt	gt
 801cd94:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 801cd98:	fa04 f303 	lslgt.w	r3, r4, r3
 801cd9c:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 801cda0:	fa28 f804 	lsrgt.w	r8, r8, r4
 801cda4:	bfd6      	itet	le
 801cda6:	f1c3 0320 	rsble	r3, r3, #32
 801cdaa:	ea43 0808 	orrgt.w	r8, r3, r8
 801cdae:	fa08 f803 	lslle.w	r8, r8, r3
 801cdb2:	ee07 8a90 	vmov	s15, r8
 801cdb6:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 801cdba:	3901      	subs	r1, #1
 801cdbc:	ee17 4a90 	vmov	r4, s15
 801cdc0:	ec53 2b17 	vmov	r2, r3, d7
 801cdc4:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 801cdc8:	2401      	movs	r4, #1
 801cdca:	e7a3      	b.n	801cd14 <_dtoa_r+0x10c>
 801cdcc:	2301      	movs	r3, #1
 801cdce:	930b      	str	r3, [sp, #44]	; 0x2c
 801cdd0:	1a43      	subs	r3, r0, r1
 801cdd2:	1e5a      	subs	r2, r3, #1
 801cdd4:	bf45      	ittet	mi
 801cdd6:	f1c3 0301 	rsbmi	r3, r3, #1
 801cdda:	9304      	strmi	r3, [sp, #16]
 801cddc:	2300      	movpl	r3, #0
 801cdde:	2300      	movmi	r3, #0
 801cde0:	9205      	str	r2, [sp, #20]
 801cde2:	bf54      	ite	pl
 801cde4:	9304      	strpl	r3, [sp, #16]
 801cde6:	9305      	strmi	r3, [sp, #20]
 801cde8:	f1bb 0f00 	cmp.w	fp, #0
 801cdec:	db18      	blt.n	801ce20 <_dtoa_r+0x218>
 801cdee:	9b05      	ldr	r3, [sp, #20]
 801cdf0:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 801cdf4:	445b      	add	r3, fp
 801cdf6:	9305      	str	r3, [sp, #20]
 801cdf8:	2300      	movs	r3, #0
 801cdfa:	9a06      	ldr	r2, [sp, #24]
 801cdfc:	2a09      	cmp	r2, #9
 801cdfe:	d849      	bhi.n	801ce94 <_dtoa_r+0x28c>
 801ce00:	2a05      	cmp	r2, #5
 801ce02:	bfc4      	itt	gt
 801ce04:	3a04      	subgt	r2, #4
 801ce06:	9206      	strgt	r2, [sp, #24]
 801ce08:	9a06      	ldr	r2, [sp, #24]
 801ce0a:	f1a2 0202 	sub.w	r2, r2, #2
 801ce0e:	bfcc      	ite	gt
 801ce10:	2400      	movgt	r4, #0
 801ce12:	2401      	movle	r4, #1
 801ce14:	2a03      	cmp	r2, #3
 801ce16:	d848      	bhi.n	801ceaa <_dtoa_r+0x2a2>
 801ce18:	e8df f002 	tbb	[pc, r2]
 801ce1c:	3a2c2e0b 	.word	0x3a2c2e0b
 801ce20:	9b04      	ldr	r3, [sp, #16]
 801ce22:	2200      	movs	r2, #0
 801ce24:	eba3 030b 	sub.w	r3, r3, fp
 801ce28:	9304      	str	r3, [sp, #16]
 801ce2a:	9209      	str	r2, [sp, #36]	; 0x24
 801ce2c:	f1cb 0300 	rsb	r3, fp, #0
 801ce30:	e7e3      	b.n	801cdfa <_dtoa_r+0x1f2>
 801ce32:	2200      	movs	r2, #0
 801ce34:	9207      	str	r2, [sp, #28]
 801ce36:	9a08      	ldr	r2, [sp, #32]
 801ce38:	2a00      	cmp	r2, #0
 801ce3a:	dc39      	bgt.n	801ceb0 <_dtoa_r+0x2a8>
 801ce3c:	f04f 0a01 	mov.w	sl, #1
 801ce40:	46d1      	mov	r9, sl
 801ce42:	4652      	mov	r2, sl
 801ce44:	f8cd a020 	str.w	sl, [sp, #32]
 801ce48:	6a77      	ldr	r7, [r6, #36]	; 0x24
 801ce4a:	2100      	movs	r1, #0
 801ce4c:	6079      	str	r1, [r7, #4]
 801ce4e:	2004      	movs	r0, #4
 801ce50:	f100 0c14 	add.w	ip, r0, #20
 801ce54:	4594      	cmp	ip, r2
 801ce56:	6879      	ldr	r1, [r7, #4]
 801ce58:	d92f      	bls.n	801ceba <_dtoa_r+0x2b2>
 801ce5a:	4630      	mov	r0, r6
 801ce5c:	930d      	str	r3, [sp, #52]	; 0x34
 801ce5e:	f000 fda5 	bl	801d9ac <_Balloc>
 801ce62:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801ce64:	9001      	str	r0, [sp, #4]
 801ce66:	4602      	mov	r2, r0
 801ce68:	2800      	cmp	r0, #0
 801ce6a:	d149      	bne.n	801cf00 <_dtoa_r+0x2f8>
 801ce6c:	4b23      	ldr	r3, [pc, #140]	; (801cefc <_dtoa_r+0x2f4>)
 801ce6e:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 801ce72:	e6e1      	b.n	801cc38 <_dtoa_r+0x30>
 801ce74:	2201      	movs	r2, #1
 801ce76:	e7dd      	b.n	801ce34 <_dtoa_r+0x22c>
 801ce78:	2200      	movs	r2, #0
 801ce7a:	9207      	str	r2, [sp, #28]
 801ce7c:	9a08      	ldr	r2, [sp, #32]
 801ce7e:	eb0b 0a02 	add.w	sl, fp, r2
 801ce82:	f10a 0901 	add.w	r9, sl, #1
 801ce86:	464a      	mov	r2, r9
 801ce88:	2a01      	cmp	r2, #1
 801ce8a:	bfb8      	it	lt
 801ce8c:	2201      	movlt	r2, #1
 801ce8e:	e7db      	b.n	801ce48 <_dtoa_r+0x240>
 801ce90:	2201      	movs	r2, #1
 801ce92:	e7f2      	b.n	801ce7a <_dtoa_r+0x272>
 801ce94:	2401      	movs	r4, #1
 801ce96:	2200      	movs	r2, #0
 801ce98:	e9cd 2406 	strd	r2, r4, [sp, #24]
 801ce9c:	f04f 3aff 	mov.w	sl, #4294967295
 801cea0:	2100      	movs	r1, #0
 801cea2:	46d1      	mov	r9, sl
 801cea4:	2212      	movs	r2, #18
 801cea6:	9108      	str	r1, [sp, #32]
 801cea8:	e7ce      	b.n	801ce48 <_dtoa_r+0x240>
 801ceaa:	2201      	movs	r2, #1
 801ceac:	9207      	str	r2, [sp, #28]
 801ceae:	e7f5      	b.n	801ce9c <_dtoa_r+0x294>
 801ceb0:	f8dd a020 	ldr.w	sl, [sp, #32]
 801ceb4:	46d1      	mov	r9, sl
 801ceb6:	4652      	mov	r2, sl
 801ceb8:	e7c6      	b.n	801ce48 <_dtoa_r+0x240>
 801ceba:	3101      	adds	r1, #1
 801cebc:	6079      	str	r1, [r7, #4]
 801cebe:	0040      	lsls	r0, r0, #1
 801cec0:	e7c6      	b.n	801ce50 <_dtoa_r+0x248>
 801cec2:	bf00      	nop
 801cec4:	f3af 8000 	nop.w
 801cec8:	636f4361 	.word	0x636f4361
 801cecc:	3fd287a7 	.word	0x3fd287a7
 801ced0:	8b60c8b3 	.word	0x8b60c8b3
 801ced4:	3fc68a28 	.word	0x3fc68a28
 801ced8:	509f79fb 	.word	0x509f79fb
 801cedc:	3fd34413 	.word	0x3fd34413
 801cee0:	08020cd6 	.word	0x08020cd6
 801cee4:	08020ced 	.word	0x08020ced
 801cee8:	7ff00000 	.word	0x7ff00000
 801ceec:	08020cd2 	.word	0x08020cd2
 801cef0:	08020cc9 	.word	0x08020cc9
 801cef4:	08020277 	.word	0x08020277
 801cef8:	08020de0 	.word	0x08020de0
 801cefc:	08020d48 	.word	0x08020d48
 801cf00:	6a72      	ldr	r2, [r6, #36]	; 0x24
 801cf02:	9901      	ldr	r1, [sp, #4]
 801cf04:	6011      	str	r1, [r2, #0]
 801cf06:	f1b9 0f0e 	cmp.w	r9, #14
 801cf0a:	d86c      	bhi.n	801cfe6 <_dtoa_r+0x3de>
 801cf0c:	2c00      	cmp	r4, #0
 801cf0e:	d06a      	beq.n	801cfe6 <_dtoa_r+0x3de>
 801cf10:	f1bb 0f00 	cmp.w	fp, #0
 801cf14:	f340 80a0 	ble.w	801d058 <_dtoa_r+0x450>
 801cf18:	49c1      	ldr	r1, [pc, #772]	; (801d220 <_dtoa_r+0x618>)
 801cf1a:	f00b 020f 	and.w	r2, fp, #15
 801cf1e:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 801cf22:	f41b 7f80 	tst.w	fp, #256	; 0x100
 801cf26:	ed92 7b00 	vldr	d7, [r2]
 801cf2a:	ea4f 112b 	mov.w	r1, fp, asr #4
 801cf2e:	f000 8087 	beq.w	801d040 <_dtoa_r+0x438>
 801cf32:	4abc      	ldr	r2, [pc, #752]	; (801d224 <_dtoa_r+0x61c>)
 801cf34:	ed92 6b08 	vldr	d6, [r2, #32]
 801cf38:	ee88 6b06 	vdiv.f64	d6, d8, d6
 801cf3c:	ed8d 6b02 	vstr	d6, [sp, #8]
 801cf40:	f001 010f 	and.w	r1, r1, #15
 801cf44:	2203      	movs	r2, #3
 801cf46:	48b7      	ldr	r0, [pc, #732]	; (801d224 <_dtoa_r+0x61c>)
 801cf48:	2900      	cmp	r1, #0
 801cf4a:	d17b      	bne.n	801d044 <_dtoa_r+0x43c>
 801cf4c:	ed9d 6b02 	vldr	d6, [sp, #8]
 801cf50:	ee86 7b07 	vdiv.f64	d7, d6, d7
 801cf54:	ed8d 7b02 	vstr	d7, [sp, #8]
 801cf58:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801cf5a:	2900      	cmp	r1, #0
 801cf5c:	f000 80a2 	beq.w	801d0a4 <_dtoa_r+0x49c>
 801cf60:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 801cf64:	ed9d 7b02 	vldr	d7, [sp, #8]
 801cf68:	eeb4 7bc6 	vcmpe.f64	d7, d6
 801cf6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801cf70:	f140 8098 	bpl.w	801d0a4 <_dtoa_r+0x49c>
 801cf74:	f1b9 0f00 	cmp.w	r9, #0
 801cf78:	f000 8094 	beq.w	801d0a4 <_dtoa_r+0x49c>
 801cf7c:	f1ba 0f00 	cmp.w	sl, #0
 801cf80:	dd2f      	ble.n	801cfe2 <_dtoa_r+0x3da>
 801cf82:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 801cf86:	ee27 7b06 	vmul.f64	d7, d7, d6
 801cf8a:	ed8d 7b02 	vstr	d7, [sp, #8]
 801cf8e:	f10b 37ff 	add.w	r7, fp, #4294967295
 801cf92:	3201      	adds	r2, #1
 801cf94:	4650      	mov	r0, sl
 801cf96:	ed9d 6b02 	vldr	d6, [sp, #8]
 801cf9a:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 801cf9e:	ee07 2a90 	vmov	s15, r2
 801cfa2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801cfa6:	eea7 5b06 	vfma.f64	d5, d7, d6
 801cfaa:	ee15 4a90 	vmov	r4, s11
 801cfae:	ec52 1b15 	vmov	r1, r2, d5
 801cfb2:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 801cfb6:	2800      	cmp	r0, #0
 801cfb8:	d177      	bne.n	801d0aa <_dtoa_r+0x4a2>
 801cfba:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 801cfbe:	ee36 6b47 	vsub.f64	d6, d6, d7
 801cfc2:	ec42 1b17 	vmov	d7, r1, r2
 801cfc6:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801cfca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801cfce:	f300 8263 	bgt.w	801d498 <_dtoa_r+0x890>
 801cfd2:	eeb1 7b47 	vneg.f64	d7, d7
 801cfd6:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801cfda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801cfde:	f100 8258 	bmi.w	801d492 <_dtoa_r+0x88a>
 801cfe2:	ed8d 8b02 	vstr	d8, [sp, #8]
 801cfe6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801cfe8:	2a00      	cmp	r2, #0
 801cfea:	f2c0 811d 	blt.w	801d228 <_dtoa_r+0x620>
 801cfee:	f1bb 0f0e 	cmp.w	fp, #14
 801cff2:	f300 8119 	bgt.w	801d228 <_dtoa_r+0x620>
 801cff6:	4b8a      	ldr	r3, [pc, #552]	; (801d220 <_dtoa_r+0x618>)
 801cff8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 801cffc:	ed93 6b00 	vldr	d6, [r3]
 801d000:	9b08      	ldr	r3, [sp, #32]
 801d002:	2b00      	cmp	r3, #0
 801d004:	f280 80b7 	bge.w	801d176 <_dtoa_r+0x56e>
 801d008:	f1b9 0f00 	cmp.w	r9, #0
 801d00c:	f300 80b3 	bgt.w	801d176 <_dtoa_r+0x56e>
 801d010:	f040 823f 	bne.w	801d492 <_dtoa_r+0x88a>
 801d014:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 801d018:	ee26 6b07 	vmul.f64	d6, d6, d7
 801d01c:	ed9d 7b02 	vldr	d7, [sp, #8]
 801d020:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801d024:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d028:	464c      	mov	r4, r9
 801d02a:	464f      	mov	r7, r9
 801d02c:	f280 8215 	bge.w	801d45a <_dtoa_r+0x852>
 801d030:	f8dd 8004 	ldr.w	r8, [sp, #4]
 801d034:	2331      	movs	r3, #49	; 0x31
 801d036:	f808 3b01 	strb.w	r3, [r8], #1
 801d03a:	f10b 0b01 	add.w	fp, fp, #1
 801d03e:	e211      	b.n	801d464 <_dtoa_r+0x85c>
 801d040:	2202      	movs	r2, #2
 801d042:	e780      	b.n	801cf46 <_dtoa_r+0x33e>
 801d044:	07cc      	lsls	r4, r1, #31
 801d046:	d504      	bpl.n	801d052 <_dtoa_r+0x44a>
 801d048:	ed90 6b00 	vldr	d6, [r0]
 801d04c:	3201      	adds	r2, #1
 801d04e:	ee27 7b06 	vmul.f64	d7, d7, d6
 801d052:	1049      	asrs	r1, r1, #1
 801d054:	3008      	adds	r0, #8
 801d056:	e777      	b.n	801cf48 <_dtoa_r+0x340>
 801d058:	d022      	beq.n	801d0a0 <_dtoa_r+0x498>
 801d05a:	f1cb 0100 	rsb	r1, fp, #0
 801d05e:	4a70      	ldr	r2, [pc, #448]	; (801d220 <_dtoa_r+0x618>)
 801d060:	f001 000f 	and.w	r0, r1, #15
 801d064:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 801d068:	ed92 7b00 	vldr	d7, [r2]
 801d06c:	ee28 7b07 	vmul.f64	d7, d8, d7
 801d070:	ed8d 7b02 	vstr	d7, [sp, #8]
 801d074:	486b      	ldr	r0, [pc, #428]	; (801d224 <_dtoa_r+0x61c>)
 801d076:	1109      	asrs	r1, r1, #4
 801d078:	2400      	movs	r4, #0
 801d07a:	2202      	movs	r2, #2
 801d07c:	b929      	cbnz	r1, 801d08a <_dtoa_r+0x482>
 801d07e:	2c00      	cmp	r4, #0
 801d080:	f43f af6a 	beq.w	801cf58 <_dtoa_r+0x350>
 801d084:	ed8d 7b02 	vstr	d7, [sp, #8]
 801d088:	e766      	b.n	801cf58 <_dtoa_r+0x350>
 801d08a:	07cf      	lsls	r7, r1, #31
 801d08c:	d505      	bpl.n	801d09a <_dtoa_r+0x492>
 801d08e:	ed90 6b00 	vldr	d6, [r0]
 801d092:	3201      	adds	r2, #1
 801d094:	2401      	movs	r4, #1
 801d096:	ee27 7b06 	vmul.f64	d7, d7, d6
 801d09a:	1049      	asrs	r1, r1, #1
 801d09c:	3008      	adds	r0, #8
 801d09e:	e7ed      	b.n	801d07c <_dtoa_r+0x474>
 801d0a0:	2202      	movs	r2, #2
 801d0a2:	e759      	b.n	801cf58 <_dtoa_r+0x350>
 801d0a4:	465f      	mov	r7, fp
 801d0a6:	4648      	mov	r0, r9
 801d0a8:	e775      	b.n	801cf96 <_dtoa_r+0x38e>
 801d0aa:	ec42 1b17 	vmov	d7, r1, r2
 801d0ae:	4a5c      	ldr	r2, [pc, #368]	; (801d220 <_dtoa_r+0x618>)
 801d0b0:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 801d0b4:	ed12 4b02 	vldr	d4, [r2, #-8]
 801d0b8:	9a01      	ldr	r2, [sp, #4]
 801d0ba:	1814      	adds	r4, r2, r0
 801d0bc:	9a07      	ldr	r2, [sp, #28]
 801d0be:	b352      	cbz	r2, 801d116 <_dtoa_r+0x50e>
 801d0c0:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 801d0c4:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 801d0c8:	f8dd 8004 	ldr.w	r8, [sp, #4]
 801d0cc:	ee83 5b04 	vdiv.f64	d5, d3, d4
 801d0d0:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 801d0d4:	ee35 7b47 	vsub.f64	d7, d5, d7
 801d0d8:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 801d0dc:	ee14 2a90 	vmov	r2, s9
 801d0e0:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 801d0e4:	3230      	adds	r2, #48	; 0x30
 801d0e6:	ee36 6b45 	vsub.f64	d6, d6, d5
 801d0ea:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801d0ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d0f2:	f808 2b01 	strb.w	r2, [r8], #1
 801d0f6:	d439      	bmi.n	801d16c <_dtoa_r+0x564>
 801d0f8:	ee32 5b46 	vsub.f64	d5, d2, d6
 801d0fc:	eeb4 5bc7 	vcmpe.f64	d5, d7
 801d100:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d104:	d472      	bmi.n	801d1ec <_dtoa_r+0x5e4>
 801d106:	45a0      	cmp	r8, r4
 801d108:	f43f af6b 	beq.w	801cfe2 <_dtoa_r+0x3da>
 801d10c:	ee27 7b03 	vmul.f64	d7, d7, d3
 801d110:	ee26 6b03 	vmul.f64	d6, d6, d3
 801d114:	e7e0      	b.n	801d0d8 <_dtoa_r+0x4d0>
 801d116:	f8dd 8004 	ldr.w	r8, [sp, #4]
 801d11a:	ee27 7b04 	vmul.f64	d7, d7, d4
 801d11e:	4621      	mov	r1, r4
 801d120:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 801d124:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 801d128:	ee14 2a90 	vmov	r2, s9
 801d12c:	3230      	adds	r2, #48	; 0x30
 801d12e:	f808 2b01 	strb.w	r2, [r8], #1
 801d132:	45a0      	cmp	r8, r4
 801d134:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 801d138:	ee36 6b45 	vsub.f64	d6, d6, d5
 801d13c:	d118      	bne.n	801d170 <_dtoa_r+0x568>
 801d13e:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 801d142:	ee37 4b05 	vadd.f64	d4, d7, d5
 801d146:	eeb4 6bc4 	vcmpe.f64	d6, d4
 801d14a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d14e:	dc4d      	bgt.n	801d1ec <_dtoa_r+0x5e4>
 801d150:	ee35 7b47 	vsub.f64	d7, d5, d7
 801d154:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801d158:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d15c:	f57f af41 	bpl.w	801cfe2 <_dtoa_r+0x3da>
 801d160:	4688      	mov	r8, r1
 801d162:	3901      	subs	r1, #1
 801d164:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 801d168:	2b30      	cmp	r3, #48	; 0x30
 801d16a:	d0f9      	beq.n	801d160 <_dtoa_r+0x558>
 801d16c:	46bb      	mov	fp, r7
 801d16e:	e02a      	b.n	801d1c6 <_dtoa_r+0x5be>
 801d170:	ee26 6b03 	vmul.f64	d6, d6, d3
 801d174:	e7d6      	b.n	801d124 <_dtoa_r+0x51c>
 801d176:	ed9d 7b02 	vldr	d7, [sp, #8]
 801d17a:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 801d17e:	f8dd 8004 	ldr.w	r8, [sp, #4]
 801d182:	ee87 5b06 	vdiv.f64	d5, d7, d6
 801d186:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 801d18a:	ee15 3a10 	vmov	r3, s10
 801d18e:	3330      	adds	r3, #48	; 0x30
 801d190:	f808 3b01 	strb.w	r3, [r8], #1
 801d194:	9b01      	ldr	r3, [sp, #4]
 801d196:	eba8 0303 	sub.w	r3, r8, r3
 801d19a:	4599      	cmp	r9, r3
 801d19c:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 801d1a0:	eea3 7b46 	vfms.f64	d7, d3, d6
 801d1a4:	d133      	bne.n	801d20e <_dtoa_r+0x606>
 801d1a6:	ee37 7b07 	vadd.f64	d7, d7, d7
 801d1aa:	eeb4 7bc6 	vcmpe.f64	d7, d6
 801d1ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d1b2:	dc1a      	bgt.n	801d1ea <_dtoa_r+0x5e2>
 801d1b4:	eeb4 7b46 	vcmp.f64	d7, d6
 801d1b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d1bc:	d103      	bne.n	801d1c6 <_dtoa_r+0x5be>
 801d1be:	ee15 3a10 	vmov	r3, s10
 801d1c2:	07d9      	lsls	r1, r3, #31
 801d1c4:	d411      	bmi.n	801d1ea <_dtoa_r+0x5e2>
 801d1c6:	4629      	mov	r1, r5
 801d1c8:	4630      	mov	r0, r6
 801d1ca:	f000 fc2f 	bl	801da2c <_Bfree>
 801d1ce:	2300      	movs	r3, #0
 801d1d0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801d1d2:	f888 3000 	strb.w	r3, [r8]
 801d1d6:	f10b 0301 	add.w	r3, fp, #1
 801d1da:	6013      	str	r3, [r2, #0]
 801d1dc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801d1de:	2b00      	cmp	r3, #0
 801d1e0:	f43f ad61 	beq.w	801cca6 <_dtoa_r+0x9e>
 801d1e4:	f8c3 8000 	str.w	r8, [r3]
 801d1e8:	e55d      	b.n	801cca6 <_dtoa_r+0x9e>
 801d1ea:	465f      	mov	r7, fp
 801d1ec:	4643      	mov	r3, r8
 801d1ee:	4698      	mov	r8, r3
 801d1f0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801d1f4:	2a39      	cmp	r2, #57	; 0x39
 801d1f6:	d106      	bne.n	801d206 <_dtoa_r+0x5fe>
 801d1f8:	9a01      	ldr	r2, [sp, #4]
 801d1fa:	429a      	cmp	r2, r3
 801d1fc:	d1f7      	bne.n	801d1ee <_dtoa_r+0x5e6>
 801d1fe:	9901      	ldr	r1, [sp, #4]
 801d200:	2230      	movs	r2, #48	; 0x30
 801d202:	3701      	adds	r7, #1
 801d204:	700a      	strb	r2, [r1, #0]
 801d206:	781a      	ldrb	r2, [r3, #0]
 801d208:	3201      	adds	r2, #1
 801d20a:	701a      	strb	r2, [r3, #0]
 801d20c:	e7ae      	b.n	801d16c <_dtoa_r+0x564>
 801d20e:	ee27 7b04 	vmul.f64	d7, d7, d4
 801d212:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801d216:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d21a:	d1b2      	bne.n	801d182 <_dtoa_r+0x57a>
 801d21c:	e7d3      	b.n	801d1c6 <_dtoa_r+0x5be>
 801d21e:	bf00      	nop
 801d220:	08020de0 	.word	0x08020de0
 801d224:	08020db8 	.word	0x08020db8
 801d228:	9907      	ldr	r1, [sp, #28]
 801d22a:	2900      	cmp	r1, #0
 801d22c:	f000 80d0 	beq.w	801d3d0 <_dtoa_r+0x7c8>
 801d230:	9906      	ldr	r1, [sp, #24]
 801d232:	2901      	cmp	r1, #1
 801d234:	f300 80b4 	bgt.w	801d3a0 <_dtoa_r+0x798>
 801d238:	990a      	ldr	r1, [sp, #40]	; 0x28
 801d23a:	2900      	cmp	r1, #0
 801d23c:	f000 80ac 	beq.w	801d398 <_dtoa_r+0x790>
 801d240:	f202 4233 	addw	r2, r2, #1075	; 0x433
 801d244:	f8dd 8010 	ldr.w	r8, [sp, #16]
 801d248:	461c      	mov	r4, r3
 801d24a:	930a      	str	r3, [sp, #40]	; 0x28
 801d24c:	9b04      	ldr	r3, [sp, #16]
 801d24e:	4413      	add	r3, r2
 801d250:	9304      	str	r3, [sp, #16]
 801d252:	9b05      	ldr	r3, [sp, #20]
 801d254:	2101      	movs	r1, #1
 801d256:	4413      	add	r3, r2
 801d258:	4630      	mov	r0, r6
 801d25a:	9305      	str	r3, [sp, #20]
 801d25c:	f000 fc9e 	bl	801db9c <__i2b>
 801d260:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801d262:	4607      	mov	r7, r0
 801d264:	f1b8 0f00 	cmp.w	r8, #0
 801d268:	dd0d      	ble.n	801d286 <_dtoa_r+0x67e>
 801d26a:	9a05      	ldr	r2, [sp, #20]
 801d26c:	2a00      	cmp	r2, #0
 801d26e:	dd0a      	ble.n	801d286 <_dtoa_r+0x67e>
 801d270:	4542      	cmp	r2, r8
 801d272:	9904      	ldr	r1, [sp, #16]
 801d274:	bfa8      	it	ge
 801d276:	4642      	movge	r2, r8
 801d278:	1a89      	subs	r1, r1, r2
 801d27a:	9104      	str	r1, [sp, #16]
 801d27c:	9905      	ldr	r1, [sp, #20]
 801d27e:	eba8 0802 	sub.w	r8, r8, r2
 801d282:	1a8a      	subs	r2, r1, r2
 801d284:	9205      	str	r2, [sp, #20]
 801d286:	b303      	cbz	r3, 801d2ca <_dtoa_r+0x6c2>
 801d288:	9a07      	ldr	r2, [sp, #28]
 801d28a:	2a00      	cmp	r2, #0
 801d28c:	f000 80a5 	beq.w	801d3da <_dtoa_r+0x7d2>
 801d290:	2c00      	cmp	r4, #0
 801d292:	dd13      	ble.n	801d2bc <_dtoa_r+0x6b4>
 801d294:	4639      	mov	r1, r7
 801d296:	4622      	mov	r2, r4
 801d298:	4630      	mov	r0, r6
 801d29a:	930d      	str	r3, [sp, #52]	; 0x34
 801d29c:	f000 fd3e 	bl	801dd1c <__pow5mult>
 801d2a0:	462a      	mov	r2, r5
 801d2a2:	4601      	mov	r1, r0
 801d2a4:	4607      	mov	r7, r0
 801d2a6:	4630      	mov	r0, r6
 801d2a8:	f000 fc8e 	bl	801dbc8 <__multiply>
 801d2ac:	4629      	mov	r1, r5
 801d2ae:	900a      	str	r0, [sp, #40]	; 0x28
 801d2b0:	4630      	mov	r0, r6
 801d2b2:	f000 fbbb 	bl	801da2c <_Bfree>
 801d2b6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801d2b8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801d2ba:	4615      	mov	r5, r2
 801d2bc:	1b1a      	subs	r2, r3, r4
 801d2be:	d004      	beq.n	801d2ca <_dtoa_r+0x6c2>
 801d2c0:	4629      	mov	r1, r5
 801d2c2:	4630      	mov	r0, r6
 801d2c4:	f000 fd2a 	bl	801dd1c <__pow5mult>
 801d2c8:	4605      	mov	r5, r0
 801d2ca:	2101      	movs	r1, #1
 801d2cc:	4630      	mov	r0, r6
 801d2ce:	f000 fc65 	bl	801db9c <__i2b>
 801d2d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d2d4:	2b00      	cmp	r3, #0
 801d2d6:	4604      	mov	r4, r0
 801d2d8:	f340 8081 	ble.w	801d3de <_dtoa_r+0x7d6>
 801d2dc:	461a      	mov	r2, r3
 801d2de:	4601      	mov	r1, r0
 801d2e0:	4630      	mov	r0, r6
 801d2e2:	f000 fd1b 	bl	801dd1c <__pow5mult>
 801d2e6:	9b06      	ldr	r3, [sp, #24]
 801d2e8:	2b01      	cmp	r3, #1
 801d2ea:	4604      	mov	r4, r0
 801d2ec:	dd7a      	ble.n	801d3e4 <_dtoa_r+0x7dc>
 801d2ee:	2300      	movs	r3, #0
 801d2f0:	930a      	str	r3, [sp, #40]	; 0x28
 801d2f2:	6922      	ldr	r2, [r4, #16]
 801d2f4:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 801d2f8:	6910      	ldr	r0, [r2, #16]
 801d2fa:	f000 fbff 	bl	801dafc <__hi0bits>
 801d2fe:	f1c0 0020 	rsb	r0, r0, #32
 801d302:	9b05      	ldr	r3, [sp, #20]
 801d304:	4418      	add	r0, r3
 801d306:	f010 001f 	ands.w	r0, r0, #31
 801d30a:	f000 808c 	beq.w	801d426 <_dtoa_r+0x81e>
 801d30e:	f1c0 0220 	rsb	r2, r0, #32
 801d312:	2a04      	cmp	r2, #4
 801d314:	f340 8085 	ble.w	801d422 <_dtoa_r+0x81a>
 801d318:	f1c0 001c 	rsb	r0, r0, #28
 801d31c:	9b04      	ldr	r3, [sp, #16]
 801d31e:	4403      	add	r3, r0
 801d320:	9304      	str	r3, [sp, #16]
 801d322:	9b05      	ldr	r3, [sp, #20]
 801d324:	4403      	add	r3, r0
 801d326:	4480      	add	r8, r0
 801d328:	9305      	str	r3, [sp, #20]
 801d32a:	9b04      	ldr	r3, [sp, #16]
 801d32c:	2b00      	cmp	r3, #0
 801d32e:	dd05      	ble.n	801d33c <_dtoa_r+0x734>
 801d330:	4629      	mov	r1, r5
 801d332:	461a      	mov	r2, r3
 801d334:	4630      	mov	r0, r6
 801d336:	f000 fd4b 	bl	801ddd0 <__lshift>
 801d33a:	4605      	mov	r5, r0
 801d33c:	9b05      	ldr	r3, [sp, #20]
 801d33e:	2b00      	cmp	r3, #0
 801d340:	dd05      	ble.n	801d34e <_dtoa_r+0x746>
 801d342:	4621      	mov	r1, r4
 801d344:	461a      	mov	r2, r3
 801d346:	4630      	mov	r0, r6
 801d348:	f000 fd42 	bl	801ddd0 <__lshift>
 801d34c:	4604      	mov	r4, r0
 801d34e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801d350:	2b00      	cmp	r3, #0
 801d352:	d06a      	beq.n	801d42a <_dtoa_r+0x822>
 801d354:	4621      	mov	r1, r4
 801d356:	4628      	mov	r0, r5
 801d358:	f000 fdaa 	bl	801deb0 <__mcmp>
 801d35c:	2800      	cmp	r0, #0
 801d35e:	da64      	bge.n	801d42a <_dtoa_r+0x822>
 801d360:	2300      	movs	r3, #0
 801d362:	4629      	mov	r1, r5
 801d364:	220a      	movs	r2, #10
 801d366:	4630      	mov	r0, r6
 801d368:	f000 fb82 	bl	801da70 <__multadd>
 801d36c:	9b07      	ldr	r3, [sp, #28]
 801d36e:	f10b 3bff 	add.w	fp, fp, #4294967295
 801d372:	4605      	mov	r5, r0
 801d374:	2b00      	cmp	r3, #0
 801d376:	f000 8191 	beq.w	801d69c <_dtoa_r+0xa94>
 801d37a:	4639      	mov	r1, r7
 801d37c:	2300      	movs	r3, #0
 801d37e:	220a      	movs	r2, #10
 801d380:	4630      	mov	r0, r6
 801d382:	f000 fb75 	bl	801da70 <__multadd>
 801d386:	f1ba 0f00 	cmp.w	sl, #0
 801d38a:	4607      	mov	r7, r0
 801d38c:	f300 808d 	bgt.w	801d4aa <_dtoa_r+0x8a2>
 801d390:	9b06      	ldr	r3, [sp, #24]
 801d392:	2b02      	cmp	r3, #2
 801d394:	dc50      	bgt.n	801d438 <_dtoa_r+0x830>
 801d396:	e088      	b.n	801d4aa <_dtoa_r+0x8a2>
 801d398:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801d39a:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 801d39e:	e751      	b.n	801d244 <_dtoa_r+0x63c>
 801d3a0:	f109 34ff 	add.w	r4, r9, #4294967295
 801d3a4:	42a3      	cmp	r3, r4
 801d3a6:	bfbf      	itttt	lt
 801d3a8:	9a09      	ldrlt	r2, [sp, #36]	; 0x24
 801d3aa:	1ae3      	sublt	r3, r4, r3
 801d3ac:	18d2      	addlt	r2, r2, r3
 801d3ae:	9209      	strlt	r2, [sp, #36]	; 0x24
 801d3b0:	bfb6      	itet	lt
 801d3b2:	4623      	movlt	r3, r4
 801d3b4:	1b1c      	subge	r4, r3, r4
 801d3b6:	2400      	movlt	r4, #0
 801d3b8:	f1b9 0f00 	cmp.w	r9, #0
 801d3bc:	bfb5      	itete	lt
 801d3be:	9a04      	ldrlt	r2, [sp, #16]
 801d3c0:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 801d3c4:	eba2 0809 	sublt.w	r8, r2, r9
 801d3c8:	464a      	movge	r2, r9
 801d3ca:	bfb8      	it	lt
 801d3cc:	2200      	movlt	r2, #0
 801d3ce:	e73c      	b.n	801d24a <_dtoa_r+0x642>
 801d3d0:	f8dd 8010 	ldr.w	r8, [sp, #16]
 801d3d4:	9f07      	ldr	r7, [sp, #28]
 801d3d6:	461c      	mov	r4, r3
 801d3d8:	e744      	b.n	801d264 <_dtoa_r+0x65c>
 801d3da:	461a      	mov	r2, r3
 801d3dc:	e770      	b.n	801d2c0 <_dtoa_r+0x6b8>
 801d3de:	9b06      	ldr	r3, [sp, #24]
 801d3e0:	2b01      	cmp	r3, #1
 801d3e2:	dc18      	bgt.n	801d416 <_dtoa_r+0x80e>
 801d3e4:	9b02      	ldr	r3, [sp, #8]
 801d3e6:	b9b3      	cbnz	r3, 801d416 <_dtoa_r+0x80e>
 801d3e8:	9b03      	ldr	r3, [sp, #12]
 801d3ea:	f3c3 0213 	ubfx	r2, r3, #0, #20
 801d3ee:	b9a2      	cbnz	r2, 801d41a <_dtoa_r+0x812>
 801d3f0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 801d3f4:	0d12      	lsrs	r2, r2, #20
 801d3f6:	0512      	lsls	r2, r2, #20
 801d3f8:	b18a      	cbz	r2, 801d41e <_dtoa_r+0x816>
 801d3fa:	9b04      	ldr	r3, [sp, #16]
 801d3fc:	3301      	adds	r3, #1
 801d3fe:	9304      	str	r3, [sp, #16]
 801d400:	9b05      	ldr	r3, [sp, #20]
 801d402:	3301      	adds	r3, #1
 801d404:	9305      	str	r3, [sp, #20]
 801d406:	2301      	movs	r3, #1
 801d408:	930a      	str	r3, [sp, #40]	; 0x28
 801d40a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d40c:	2b00      	cmp	r3, #0
 801d40e:	f47f af70 	bne.w	801d2f2 <_dtoa_r+0x6ea>
 801d412:	2001      	movs	r0, #1
 801d414:	e775      	b.n	801d302 <_dtoa_r+0x6fa>
 801d416:	2300      	movs	r3, #0
 801d418:	e7f6      	b.n	801d408 <_dtoa_r+0x800>
 801d41a:	9b02      	ldr	r3, [sp, #8]
 801d41c:	e7f4      	b.n	801d408 <_dtoa_r+0x800>
 801d41e:	920a      	str	r2, [sp, #40]	; 0x28
 801d420:	e7f3      	b.n	801d40a <_dtoa_r+0x802>
 801d422:	d082      	beq.n	801d32a <_dtoa_r+0x722>
 801d424:	4610      	mov	r0, r2
 801d426:	301c      	adds	r0, #28
 801d428:	e778      	b.n	801d31c <_dtoa_r+0x714>
 801d42a:	f1b9 0f00 	cmp.w	r9, #0
 801d42e:	dc37      	bgt.n	801d4a0 <_dtoa_r+0x898>
 801d430:	9b06      	ldr	r3, [sp, #24]
 801d432:	2b02      	cmp	r3, #2
 801d434:	dd34      	ble.n	801d4a0 <_dtoa_r+0x898>
 801d436:	46ca      	mov	sl, r9
 801d438:	f1ba 0f00 	cmp.w	sl, #0
 801d43c:	d10d      	bne.n	801d45a <_dtoa_r+0x852>
 801d43e:	4621      	mov	r1, r4
 801d440:	4653      	mov	r3, sl
 801d442:	2205      	movs	r2, #5
 801d444:	4630      	mov	r0, r6
 801d446:	f000 fb13 	bl	801da70 <__multadd>
 801d44a:	4601      	mov	r1, r0
 801d44c:	4604      	mov	r4, r0
 801d44e:	4628      	mov	r0, r5
 801d450:	f000 fd2e 	bl	801deb0 <__mcmp>
 801d454:	2800      	cmp	r0, #0
 801d456:	f73f adeb 	bgt.w	801d030 <_dtoa_r+0x428>
 801d45a:	9b08      	ldr	r3, [sp, #32]
 801d45c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 801d460:	ea6f 0b03 	mvn.w	fp, r3
 801d464:	f04f 0900 	mov.w	r9, #0
 801d468:	4621      	mov	r1, r4
 801d46a:	4630      	mov	r0, r6
 801d46c:	f000 fade 	bl	801da2c <_Bfree>
 801d470:	2f00      	cmp	r7, #0
 801d472:	f43f aea8 	beq.w	801d1c6 <_dtoa_r+0x5be>
 801d476:	f1b9 0f00 	cmp.w	r9, #0
 801d47a:	d005      	beq.n	801d488 <_dtoa_r+0x880>
 801d47c:	45b9      	cmp	r9, r7
 801d47e:	d003      	beq.n	801d488 <_dtoa_r+0x880>
 801d480:	4649      	mov	r1, r9
 801d482:	4630      	mov	r0, r6
 801d484:	f000 fad2 	bl	801da2c <_Bfree>
 801d488:	4639      	mov	r1, r7
 801d48a:	4630      	mov	r0, r6
 801d48c:	f000 face 	bl	801da2c <_Bfree>
 801d490:	e699      	b.n	801d1c6 <_dtoa_r+0x5be>
 801d492:	2400      	movs	r4, #0
 801d494:	4627      	mov	r7, r4
 801d496:	e7e0      	b.n	801d45a <_dtoa_r+0x852>
 801d498:	46bb      	mov	fp, r7
 801d49a:	4604      	mov	r4, r0
 801d49c:	4607      	mov	r7, r0
 801d49e:	e5c7      	b.n	801d030 <_dtoa_r+0x428>
 801d4a0:	9b07      	ldr	r3, [sp, #28]
 801d4a2:	46ca      	mov	sl, r9
 801d4a4:	2b00      	cmp	r3, #0
 801d4a6:	f000 8100 	beq.w	801d6aa <_dtoa_r+0xaa2>
 801d4aa:	f1b8 0f00 	cmp.w	r8, #0
 801d4ae:	dd05      	ble.n	801d4bc <_dtoa_r+0x8b4>
 801d4b0:	4639      	mov	r1, r7
 801d4b2:	4642      	mov	r2, r8
 801d4b4:	4630      	mov	r0, r6
 801d4b6:	f000 fc8b 	bl	801ddd0 <__lshift>
 801d4ba:	4607      	mov	r7, r0
 801d4bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801d4be:	2b00      	cmp	r3, #0
 801d4c0:	d05d      	beq.n	801d57e <_dtoa_r+0x976>
 801d4c2:	6879      	ldr	r1, [r7, #4]
 801d4c4:	4630      	mov	r0, r6
 801d4c6:	f000 fa71 	bl	801d9ac <_Balloc>
 801d4ca:	4680      	mov	r8, r0
 801d4cc:	b928      	cbnz	r0, 801d4da <_dtoa_r+0x8d2>
 801d4ce:	4b82      	ldr	r3, [pc, #520]	; (801d6d8 <_dtoa_r+0xad0>)
 801d4d0:	4602      	mov	r2, r0
 801d4d2:	f240 21ea 	movw	r1, #746	; 0x2ea
 801d4d6:	f7ff bbaf 	b.w	801cc38 <_dtoa_r+0x30>
 801d4da:	693a      	ldr	r2, [r7, #16]
 801d4dc:	3202      	adds	r2, #2
 801d4de:	0092      	lsls	r2, r2, #2
 801d4e0:	f107 010c 	add.w	r1, r7, #12
 801d4e4:	300c      	adds	r0, #12
 801d4e6:	f7fe fa0b 	bl	801b900 <memcpy>
 801d4ea:	2201      	movs	r2, #1
 801d4ec:	4641      	mov	r1, r8
 801d4ee:	4630      	mov	r0, r6
 801d4f0:	f000 fc6e 	bl	801ddd0 <__lshift>
 801d4f4:	9b01      	ldr	r3, [sp, #4]
 801d4f6:	3301      	adds	r3, #1
 801d4f8:	9304      	str	r3, [sp, #16]
 801d4fa:	9b01      	ldr	r3, [sp, #4]
 801d4fc:	4453      	add	r3, sl
 801d4fe:	9308      	str	r3, [sp, #32]
 801d500:	9b02      	ldr	r3, [sp, #8]
 801d502:	f003 0301 	and.w	r3, r3, #1
 801d506:	46b9      	mov	r9, r7
 801d508:	9307      	str	r3, [sp, #28]
 801d50a:	4607      	mov	r7, r0
 801d50c:	9b04      	ldr	r3, [sp, #16]
 801d50e:	4621      	mov	r1, r4
 801d510:	3b01      	subs	r3, #1
 801d512:	4628      	mov	r0, r5
 801d514:	9302      	str	r3, [sp, #8]
 801d516:	f7ff faeb 	bl	801caf0 <quorem>
 801d51a:	4603      	mov	r3, r0
 801d51c:	3330      	adds	r3, #48	; 0x30
 801d51e:	9005      	str	r0, [sp, #20]
 801d520:	4649      	mov	r1, r9
 801d522:	4628      	mov	r0, r5
 801d524:	9309      	str	r3, [sp, #36]	; 0x24
 801d526:	f000 fcc3 	bl	801deb0 <__mcmp>
 801d52a:	463a      	mov	r2, r7
 801d52c:	4682      	mov	sl, r0
 801d52e:	4621      	mov	r1, r4
 801d530:	4630      	mov	r0, r6
 801d532:	f000 fcd9 	bl	801dee8 <__mdiff>
 801d536:	68c2      	ldr	r2, [r0, #12]
 801d538:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d53a:	4680      	mov	r8, r0
 801d53c:	bb0a      	cbnz	r2, 801d582 <_dtoa_r+0x97a>
 801d53e:	4601      	mov	r1, r0
 801d540:	4628      	mov	r0, r5
 801d542:	f000 fcb5 	bl	801deb0 <__mcmp>
 801d546:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d548:	4602      	mov	r2, r0
 801d54a:	4641      	mov	r1, r8
 801d54c:	4630      	mov	r0, r6
 801d54e:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 801d552:	f000 fa6b 	bl	801da2c <_Bfree>
 801d556:	9b06      	ldr	r3, [sp, #24]
 801d558:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801d55a:	f8dd 8010 	ldr.w	r8, [sp, #16]
 801d55e:	ea43 0102 	orr.w	r1, r3, r2
 801d562:	9b07      	ldr	r3, [sp, #28]
 801d564:	430b      	orrs	r3, r1
 801d566:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d568:	d10d      	bne.n	801d586 <_dtoa_r+0x97e>
 801d56a:	2b39      	cmp	r3, #57	; 0x39
 801d56c:	d029      	beq.n	801d5c2 <_dtoa_r+0x9ba>
 801d56e:	f1ba 0f00 	cmp.w	sl, #0
 801d572:	dd01      	ble.n	801d578 <_dtoa_r+0x970>
 801d574:	9b05      	ldr	r3, [sp, #20]
 801d576:	3331      	adds	r3, #49	; 0x31
 801d578:	9a02      	ldr	r2, [sp, #8]
 801d57a:	7013      	strb	r3, [r2, #0]
 801d57c:	e774      	b.n	801d468 <_dtoa_r+0x860>
 801d57e:	4638      	mov	r0, r7
 801d580:	e7b8      	b.n	801d4f4 <_dtoa_r+0x8ec>
 801d582:	2201      	movs	r2, #1
 801d584:	e7e1      	b.n	801d54a <_dtoa_r+0x942>
 801d586:	f1ba 0f00 	cmp.w	sl, #0
 801d58a:	db06      	blt.n	801d59a <_dtoa_r+0x992>
 801d58c:	9906      	ldr	r1, [sp, #24]
 801d58e:	ea41 0a0a 	orr.w	sl, r1, sl
 801d592:	9907      	ldr	r1, [sp, #28]
 801d594:	ea5a 0101 	orrs.w	r1, sl, r1
 801d598:	d120      	bne.n	801d5dc <_dtoa_r+0x9d4>
 801d59a:	2a00      	cmp	r2, #0
 801d59c:	ddec      	ble.n	801d578 <_dtoa_r+0x970>
 801d59e:	4629      	mov	r1, r5
 801d5a0:	2201      	movs	r2, #1
 801d5a2:	4630      	mov	r0, r6
 801d5a4:	9304      	str	r3, [sp, #16]
 801d5a6:	f000 fc13 	bl	801ddd0 <__lshift>
 801d5aa:	4621      	mov	r1, r4
 801d5ac:	4605      	mov	r5, r0
 801d5ae:	f000 fc7f 	bl	801deb0 <__mcmp>
 801d5b2:	2800      	cmp	r0, #0
 801d5b4:	9b04      	ldr	r3, [sp, #16]
 801d5b6:	dc02      	bgt.n	801d5be <_dtoa_r+0x9b6>
 801d5b8:	d1de      	bne.n	801d578 <_dtoa_r+0x970>
 801d5ba:	07da      	lsls	r2, r3, #31
 801d5bc:	d5dc      	bpl.n	801d578 <_dtoa_r+0x970>
 801d5be:	2b39      	cmp	r3, #57	; 0x39
 801d5c0:	d1d8      	bne.n	801d574 <_dtoa_r+0x96c>
 801d5c2:	9a02      	ldr	r2, [sp, #8]
 801d5c4:	2339      	movs	r3, #57	; 0x39
 801d5c6:	7013      	strb	r3, [r2, #0]
 801d5c8:	4643      	mov	r3, r8
 801d5ca:	4698      	mov	r8, r3
 801d5cc:	3b01      	subs	r3, #1
 801d5ce:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 801d5d2:	2a39      	cmp	r2, #57	; 0x39
 801d5d4:	d051      	beq.n	801d67a <_dtoa_r+0xa72>
 801d5d6:	3201      	adds	r2, #1
 801d5d8:	701a      	strb	r2, [r3, #0]
 801d5da:	e745      	b.n	801d468 <_dtoa_r+0x860>
 801d5dc:	2a00      	cmp	r2, #0
 801d5de:	dd03      	ble.n	801d5e8 <_dtoa_r+0x9e0>
 801d5e0:	2b39      	cmp	r3, #57	; 0x39
 801d5e2:	d0ee      	beq.n	801d5c2 <_dtoa_r+0x9ba>
 801d5e4:	3301      	adds	r3, #1
 801d5e6:	e7c7      	b.n	801d578 <_dtoa_r+0x970>
 801d5e8:	9a04      	ldr	r2, [sp, #16]
 801d5ea:	9908      	ldr	r1, [sp, #32]
 801d5ec:	f802 3c01 	strb.w	r3, [r2, #-1]
 801d5f0:	428a      	cmp	r2, r1
 801d5f2:	d02b      	beq.n	801d64c <_dtoa_r+0xa44>
 801d5f4:	4629      	mov	r1, r5
 801d5f6:	2300      	movs	r3, #0
 801d5f8:	220a      	movs	r2, #10
 801d5fa:	4630      	mov	r0, r6
 801d5fc:	f000 fa38 	bl	801da70 <__multadd>
 801d600:	45b9      	cmp	r9, r7
 801d602:	4605      	mov	r5, r0
 801d604:	f04f 0300 	mov.w	r3, #0
 801d608:	f04f 020a 	mov.w	r2, #10
 801d60c:	4649      	mov	r1, r9
 801d60e:	4630      	mov	r0, r6
 801d610:	d107      	bne.n	801d622 <_dtoa_r+0xa1a>
 801d612:	f000 fa2d 	bl	801da70 <__multadd>
 801d616:	4681      	mov	r9, r0
 801d618:	4607      	mov	r7, r0
 801d61a:	9b04      	ldr	r3, [sp, #16]
 801d61c:	3301      	adds	r3, #1
 801d61e:	9304      	str	r3, [sp, #16]
 801d620:	e774      	b.n	801d50c <_dtoa_r+0x904>
 801d622:	f000 fa25 	bl	801da70 <__multadd>
 801d626:	4639      	mov	r1, r7
 801d628:	4681      	mov	r9, r0
 801d62a:	2300      	movs	r3, #0
 801d62c:	220a      	movs	r2, #10
 801d62e:	4630      	mov	r0, r6
 801d630:	f000 fa1e 	bl	801da70 <__multadd>
 801d634:	4607      	mov	r7, r0
 801d636:	e7f0      	b.n	801d61a <_dtoa_r+0xa12>
 801d638:	f1ba 0f00 	cmp.w	sl, #0
 801d63c:	9a01      	ldr	r2, [sp, #4]
 801d63e:	bfcc      	ite	gt
 801d640:	46d0      	movgt	r8, sl
 801d642:	f04f 0801 	movle.w	r8, #1
 801d646:	4490      	add	r8, r2
 801d648:	f04f 0900 	mov.w	r9, #0
 801d64c:	4629      	mov	r1, r5
 801d64e:	2201      	movs	r2, #1
 801d650:	4630      	mov	r0, r6
 801d652:	9302      	str	r3, [sp, #8]
 801d654:	f000 fbbc 	bl	801ddd0 <__lshift>
 801d658:	4621      	mov	r1, r4
 801d65a:	4605      	mov	r5, r0
 801d65c:	f000 fc28 	bl	801deb0 <__mcmp>
 801d660:	2800      	cmp	r0, #0
 801d662:	dcb1      	bgt.n	801d5c8 <_dtoa_r+0x9c0>
 801d664:	d102      	bne.n	801d66c <_dtoa_r+0xa64>
 801d666:	9b02      	ldr	r3, [sp, #8]
 801d668:	07db      	lsls	r3, r3, #31
 801d66a:	d4ad      	bmi.n	801d5c8 <_dtoa_r+0x9c0>
 801d66c:	4643      	mov	r3, r8
 801d66e:	4698      	mov	r8, r3
 801d670:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801d674:	2a30      	cmp	r2, #48	; 0x30
 801d676:	d0fa      	beq.n	801d66e <_dtoa_r+0xa66>
 801d678:	e6f6      	b.n	801d468 <_dtoa_r+0x860>
 801d67a:	9a01      	ldr	r2, [sp, #4]
 801d67c:	429a      	cmp	r2, r3
 801d67e:	d1a4      	bne.n	801d5ca <_dtoa_r+0x9c2>
 801d680:	f10b 0b01 	add.w	fp, fp, #1
 801d684:	2331      	movs	r3, #49	; 0x31
 801d686:	e778      	b.n	801d57a <_dtoa_r+0x972>
 801d688:	4b14      	ldr	r3, [pc, #80]	; (801d6dc <_dtoa_r+0xad4>)
 801d68a:	f7ff bb27 	b.w	801ccdc <_dtoa_r+0xd4>
 801d68e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801d690:	2b00      	cmp	r3, #0
 801d692:	f47f ab03 	bne.w	801cc9c <_dtoa_r+0x94>
 801d696:	4b12      	ldr	r3, [pc, #72]	; (801d6e0 <_dtoa_r+0xad8>)
 801d698:	f7ff bb20 	b.w	801ccdc <_dtoa_r+0xd4>
 801d69c:	f1ba 0f00 	cmp.w	sl, #0
 801d6a0:	dc03      	bgt.n	801d6aa <_dtoa_r+0xaa2>
 801d6a2:	9b06      	ldr	r3, [sp, #24]
 801d6a4:	2b02      	cmp	r3, #2
 801d6a6:	f73f aec7 	bgt.w	801d438 <_dtoa_r+0x830>
 801d6aa:	f8dd 8004 	ldr.w	r8, [sp, #4]
 801d6ae:	4621      	mov	r1, r4
 801d6b0:	4628      	mov	r0, r5
 801d6b2:	f7ff fa1d 	bl	801caf0 <quorem>
 801d6b6:	f100 0330 	add.w	r3, r0, #48	; 0x30
 801d6ba:	f808 3b01 	strb.w	r3, [r8], #1
 801d6be:	9a01      	ldr	r2, [sp, #4]
 801d6c0:	eba8 0202 	sub.w	r2, r8, r2
 801d6c4:	4592      	cmp	sl, r2
 801d6c6:	ddb7      	ble.n	801d638 <_dtoa_r+0xa30>
 801d6c8:	4629      	mov	r1, r5
 801d6ca:	2300      	movs	r3, #0
 801d6cc:	220a      	movs	r2, #10
 801d6ce:	4630      	mov	r0, r6
 801d6d0:	f000 f9ce 	bl	801da70 <__multadd>
 801d6d4:	4605      	mov	r5, r0
 801d6d6:	e7ea      	b.n	801d6ae <_dtoa_r+0xaa6>
 801d6d8:	08020d48 	.word	0x08020d48
 801d6dc:	08020276 	.word	0x08020276
 801d6e0:	08020cc9 	.word	0x08020cc9

0801d6e4 <__sflush_r>:
 801d6e4:	898a      	ldrh	r2, [r1, #12]
 801d6e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d6ea:	4605      	mov	r5, r0
 801d6ec:	0710      	lsls	r0, r2, #28
 801d6ee:	460c      	mov	r4, r1
 801d6f0:	d458      	bmi.n	801d7a4 <__sflush_r+0xc0>
 801d6f2:	684b      	ldr	r3, [r1, #4]
 801d6f4:	2b00      	cmp	r3, #0
 801d6f6:	dc05      	bgt.n	801d704 <__sflush_r+0x20>
 801d6f8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801d6fa:	2b00      	cmp	r3, #0
 801d6fc:	dc02      	bgt.n	801d704 <__sflush_r+0x20>
 801d6fe:	2000      	movs	r0, #0
 801d700:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d704:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801d706:	2e00      	cmp	r6, #0
 801d708:	d0f9      	beq.n	801d6fe <__sflush_r+0x1a>
 801d70a:	2300      	movs	r3, #0
 801d70c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801d710:	682f      	ldr	r7, [r5, #0]
 801d712:	602b      	str	r3, [r5, #0]
 801d714:	d032      	beq.n	801d77c <__sflush_r+0x98>
 801d716:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801d718:	89a3      	ldrh	r3, [r4, #12]
 801d71a:	075a      	lsls	r2, r3, #29
 801d71c:	d505      	bpl.n	801d72a <__sflush_r+0x46>
 801d71e:	6863      	ldr	r3, [r4, #4]
 801d720:	1ac0      	subs	r0, r0, r3
 801d722:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801d724:	b10b      	cbz	r3, 801d72a <__sflush_r+0x46>
 801d726:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801d728:	1ac0      	subs	r0, r0, r3
 801d72a:	2300      	movs	r3, #0
 801d72c:	4602      	mov	r2, r0
 801d72e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801d730:	6a21      	ldr	r1, [r4, #32]
 801d732:	4628      	mov	r0, r5
 801d734:	47b0      	blx	r6
 801d736:	1c43      	adds	r3, r0, #1
 801d738:	89a3      	ldrh	r3, [r4, #12]
 801d73a:	d106      	bne.n	801d74a <__sflush_r+0x66>
 801d73c:	6829      	ldr	r1, [r5, #0]
 801d73e:	291d      	cmp	r1, #29
 801d740:	d82c      	bhi.n	801d79c <__sflush_r+0xb8>
 801d742:	4a2a      	ldr	r2, [pc, #168]	; (801d7ec <__sflush_r+0x108>)
 801d744:	40ca      	lsrs	r2, r1
 801d746:	07d6      	lsls	r6, r2, #31
 801d748:	d528      	bpl.n	801d79c <__sflush_r+0xb8>
 801d74a:	2200      	movs	r2, #0
 801d74c:	6062      	str	r2, [r4, #4]
 801d74e:	04d9      	lsls	r1, r3, #19
 801d750:	6922      	ldr	r2, [r4, #16]
 801d752:	6022      	str	r2, [r4, #0]
 801d754:	d504      	bpl.n	801d760 <__sflush_r+0x7c>
 801d756:	1c42      	adds	r2, r0, #1
 801d758:	d101      	bne.n	801d75e <__sflush_r+0x7a>
 801d75a:	682b      	ldr	r3, [r5, #0]
 801d75c:	b903      	cbnz	r3, 801d760 <__sflush_r+0x7c>
 801d75e:	6560      	str	r0, [r4, #84]	; 0x54
 801d760:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801d762:	602f      	str	r7, [r5, #0]
 801d764:	2900      	cmp	r1, #0
 801d766:	d0ca      	beq.n	801d6fe <__sflush_r+0x1a>
 801d768:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801d76c:	4299      	cmp	r1, r3
 801d76e:	d002      	beq.n	801d776 <__sflush_r+0x92>
 801d770:	4628      	mov	r0, r5
 801d772:	f7fe f8db 	bl	801b92c <_free_r>
 801d776:	2000      	movs	r0, #0
 801d778:	6360      	str	r0, [r4, #52]	; 0x34
 801d77a:	e7c1      	b.n	801d700 <__sflush_r+0x1c>
 801d77c:	6a21      	ldr	r1, [r4, #32]
 801d77e:	2301      	movs	r3, #1
 801d780:	4628      	mov	r0, r5
 801d782:	47b0      	blx	r6
 801d784:	1c41      	adds	r1, r0, #1
 801d786:	d1c7      	bne.n	801d718 <__sflush_r+0x34>
 801d788:	682b      	ldr	r3, [r5, #0]
 801d78a:	2b00      	cmp	r3, #0
 801d78c:	d0c4      	beq.n	801d718 <__sflush_r+0x34>
 801d78e:	2b1d      	cmp	r3, #29
 801d790:	d001      	beq.n	801d796 <__sflush_r+0xb2>
 801d792:	2b16      	cmp	r3, #22
 801d794:	d101      	bne.n	801d79a <__sflush_r+0xb6>
 801d796:	602f      	str	r7, [r5, #0]
 801d798:	e7b1      	b.n	801d6fe <__sflush_r+0x1a>
 801d79a:	89a3      	ldrh	r3, [r4, #12]
 801d79c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801d7a0:	81a3      	strh	r3, [r4, #12]
 801d7a2:	e7ad      	b.n	801d700 <__sflush_r+0x1c>
 801d7a4:	690f      	ldr	r7, [r1, #16]
 801d7a6:	2f00      	cmp	r7, #0
 801d7a8:	d0a9      	beq.n	801d6fe <__sflush_r+0x1a>
 801d7aa:	0793      	lsls	r3, r2, #30
 801d7ac:	680e      	ldr	r6, [r1, #0]
 801d7ae:	bf08      	it	eq
 801d7b0:	694b      	ldreq	r3, [r1, #20]
 801d7b2:	600f      	str	r7, [r1, #0]
 801d7b4:	bf18      	it	ne
 801d7b6:	2300      	movne	r3, #0
 801d7b8:	eba6 0807 	sub.w	r8, r6, r7
 801d7bc:	608b      	str	r3, [r1, #8]
 801d7be:	f1b8 0f00 	cmp.w	r8, #0
 801d7c2:	dd9c      	ble.n	801d6fe <__sflush_r+0x1a>
 801d7c4:	6a21      	ldr	r1, [r4, #32]
 801d7c6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801d7c8:	4643      	mov	r3, r8
 801d7ca:	463a      	mov	r2, r7
 801d7cc:	4628      	mov	r0, r5
 801d7ce:	47b0      	blx	r6
 801d7d0:	2800      	cmp	r0, #0
 801d7d2:	dc06      	bgt.n	801d7e2 <__sflush_r+0xfe>
 801d7d4:	89a3      	ldrh	r3, [r4, #12]
 801d7d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801d7da:	81a3      	strh	r3, [r4, #12]
 801d7dc:	f04f 30ff 	mov.w	r0, #4294967295
 801d7e0:	e78e      	b.n	801d700 <__sflush_r+0x1c>
 801d7e2:	4407      	add	r7, r0
 801d7e4:	eba8 0800 	sub.w	r8, r8, r0
 801d7e8:	e7e9      	b.n	801d7be <__sflush_r+0xda>
 801d7ea:	bf00      	nop
 801d7ec:	20400001 	.word	0x20400001

0801d7f0 <_fflush_r>:
 801d7f0:	b538      	push	{r3, r4, r5, lr}
 801d7f2:	690b      	ldr	r3, [r1, #16]
 801d7f4:	4605      	mov	r5, r0
 801d7f6:	460c      	mov	r4, r1
 801d7f8:	b913      	cbnz	r3, 801d800 <_fflush_r+0x10>
 801d7fa:	2500      	movs	r5, #0
 801d7fc:	4628      	mov	r0, r5
 801d7fe:	bd38      	pop	{r3, r4, r5, pc}
 801d800:	b118      	cbz	r0, 801d80a <_fflush_r+0x1a>
 801d802:	6983      	ldr	r3, [r0, #24]
 801d804:	b90b      	cbnz	r3, 801d80a <_fflush_r+0x1a>
 801d806:	f7fd ff93 	bl	801b730 <__sinit>
 801d80a:	4b14      	ldr	r3, [pc, #80]	; (801d85c <_fflush_r+0x6c>)
 801d80c:	429c      	cmp	r4, r3
 801d80e:	d11b      	bne.n	801d848 <_fflush_r+0x58>
 801d810:	686c      	ldr	r4, [r5, #4]
 801d812:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801d816:	2b00      	cmp	r3, #0
 801d818:	d0ef      	beq.n	801d7fa <_fflush_r+0xa>
 801d81a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801d81c:	07d0      	lsls	r0, r2, #31
 801d81e:	d404      	bmi.n	801d82a <_fflush_r+0x3a>
 801d820:	0599      	lsls	r1, r3, #22
 801d822:	d402      	bmi.n	801d82a <_fflush_r+0x3a>
 801d824:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801d826:	f7fe f858 	bl	801b8da <__retarget_lock_acquire_recursive>
 801d82a:	4628      	mov	r0, r5
 801d82c:	4621      	mov	r1, r4
 801d82e:	f7ff ff59 	bl	801d6e4 <__sflush_r>
 801d832:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801d834:	07da      	lsls	r2, r3, #31
 801d836:	4605      	mov	r5, r0
 801d838:	d4e0      	bmi.n	801d7fc <_fflush_r+0xc>
 801d83a:	89a3      	ldrh	r3, [r4, #12]
 801d83c:	059b      	lsls	r3, r3, #22
 801d83e:	d4dd      	bmi.n	801d7fc <_fflush_r+0xc>
 801d840:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801d842:	f7fe f84c 	bl	801b8de <__retarget_lock_release_recursive>
 801d846:	e7d9      	b.n	801d7fc <_fflush_r+0xc>
 801d848:	4b05      	ldr	r3, [pc, #20]	; (801d860 <_fflush_r+0x70>)
 801d84a:	429c      	cmp	r4, r3
 801d84c:	d101      	bne.n	801d852 <_fflush_r+0x62>
 801d84e:	68ac      	ldr	r4, [r5, #8]
 801d850:	e7df      	b.n	801d812 <_fflush_r+0x22>
 801d852:	4b04      	ldr	r3, [pc, #16]	; (801d864 <_fflush_r+0x74>)
 801d854:	429c      	cmp	r4, r3
 801d856:	bf08      	it	eq
 801d858:	68ec      	ldreq	r4, [r5, #12]
 801d85a:	e7da      	b.n	801d812 <_fflush_r+0x22>
 801d85c:	08020b3c 	.word	0x08020b3c
 801d860:	08020b5c 	.word	0x08020b5c
 801d864:	08020b1c 	.word	0x08020b1c

0801d868 <_localeconv_r>:
 801d868:	4800      	ldr	r0, [pc, #0]	; (801d86c <_localeconv_r+0x4>)
 801d86a:	4770      	bx	lr
 801d86c:	20000298 	.word	0x20000298

0801d870 <_lseek_r>:
 801d870:	b538      	push	{r3, r4, r5, lr}
 801d872:	4d07      	ldr	r5, [pc, #28]	; (801d890 <_lseek_r+0x20>)
 801d874:	4604      	mov	r4, r0
 801d876:	4608      	mov	r0, r1
 801d878:	4611      	mov	r1, r2
 801d87a:	2200      	movs	r2, #0
 801d87c:	602a      	str	r2, [r5, #0]
 801d87e:	461a      	mov	r2, r3
 801d880:	f7e6 f84a 	bl	8003918 <_lseek>
 801d884:	1c43      	adds	r3, r0, #1
 801d886:	d102      	bne.n	801d88e <_lseek_r+0x1e>
 801d888:	682b      	ldr	r3, [r5, #0]
 801d88a:	b103      	cbz	r3, 801d88e <_lseek_r+0x1e>
 801d88c:	6023      	str	r3, [r4, #0]
 801d88e:	bd38      	pop	{r3, r4, r5, pc}
 801d890:	20006f60 	.word	0x20006f60

0801d894 <__swhatbuf_r>:
 801d894:	b570      	push	{r4, r5, r6, lr}
 801d896:	460e      	mov	r6, r1
 801d898:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801d89c:	2900      	cmp	r1, #0
 801d89e:	b096      	sub	sp, #88	; 0x58
 801d8a0:	4614      	mov	r4, r2
 801d8a2:	461d      	mov	r5, r3
 801d8a4:	da08      	bge.n	801d8b8 <__swhatbuf_r+0x24>
 801d8a6:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 801d8aa:	2200      	movs	r2, #0
 801d8ac:	602a      	str	r2, [r5, #0]
 801d8ae:	061a      	lsls	r2, r3, #24
 801d8b0:	d410      	bmi.n	801d8d4 <__swhatbuf_r+0x40>
 801d8b2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801d8b6:	e00e      	b.n	801d8d6 <__swhatbuf_r+0x42>
 801d8b8:	466a      	mov	r2, sp
 801d8ba:	f000 fdad 	bl	801e418 <_fstat_r>
 801d8be:	2800      	cmp	r0, #0
 801d8c0:	dbf1      	blt.n	801d8a6 <__swhatbuf_r+0x12>
 801d8c2:	9a01      	ldr	r2, [sp, #4]
 801d8c4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801d8c8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801d8cc:	425a      	negs	r2, r3
 801d8ce:	415a      	adcs	r2, r3
 801d8d0:	602a      	str	r2, [r5, #0]
 801d8d2:	e7ee      	b.n	801d8b2 <__swhatbuf_r+0x1e>
 801d8d4:	2340      	movs	r3, #64	; 0x40
 801d8d6:	2000      	movs	r0, #0
 801d8d8:	6023      	str	r3, [r4, #0]
 801d8da:	b016      	add	sp, #88	; 0x58
 801d8dc:	bd70      	pop	{r4, r5, r6, pc}
	...

0801d8e0 <__smakebuf_r>:
 801d8e0:	898b      	ldrh	r3, [r1, #12]
 801d8e2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801d8e4:	079d      	lsls	r5, r3, #30
 801d8e6:	4606      	mov	r6, r0
 801d8e8:	460c      	mov	r4, r1
 801d8ea:	d507      	bpl.n	801d8fc <__smakebuf_r+0x1c>
 801d8ec:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801d8f0:	6023      	str	r3, [r4, #0]
 801d8f2:	6123      	str	r3, [r4, #16]
 801d8f4:	2301      	movs	r3, #1
 801d8f6:	6163      	str	r3, [r4, #20]
 801d8f8:	b002      	add	sp, #8
 801d8fa:	bd70      	pop	{r4, r5, r6, pc}
 801d8fc:	ab01      	add	r3, sp, #4
 801d8fe:	466a      	mov	r2, sp
 801d900:	f7ff ffc8 	bl	801d894 <__swhatbuf_r>
 801d904:	9900      	ldr	r1, [sp, #0]
 801d906:	4605      	mov	r5, r0
 801d908:	4630      	mov	r0, r6
 801d90a:	f7fe f87b 	bl	801ba04 <_malloc_r>
 801d90e:	b948      	cbnz	r0, 801d924 <__smakebuf_r+0x44>
 801d910:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801d914:	059a      	lsls	r2, r3, #22
 801d916:	d4ef      	bmi.n	801d8f8 <__smakebuf_r+0x18>
 801d918:	f023 0303 	bic.w	r3, r3, #3
 801d91c:	f043 0302 	orr.w	r3, r3, #2
 801d920:	81a3      	strh	r3, [r4, #12]
 801d922:	e7e3      	b.n	801d8ec <__smakebuf_r+0xc>
 801d924:	4b0d      	ldr	r3, [pc, #52]	; (801d95c <__smakebuf_r+0x7c>)
 801d926:	62b3      	str	r3, [r6, #40]	; 0x28
 801d928:	89a3      	ldrh	r3, [r4, #12]
 801d92a:	6020      	str	r0, [r4, #0]
 801d92c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801d930:	81a3      	strh	r3, [r4, #12]
 801d932:	9b00      	ldr	r3, [sp, #0]
 801d934:	6163      	str	r3, [r4, #20]
 801d936:	9b01      	ldr	r3, [sp, #4]
 801d938:	6120      	str	r0, [r4, #16]
 801d93a:	b15b      	cbz	r3, 801d954 <__smakebuf_r+0x74>
 801d93c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801d940:	4630      	mov	r0, r6
 801d942:	f000 fd7b 	bl	801e43c <_isatty_r>
 801d946:	b128      	cbz	r0, 801d954 <__smakebuf_r+0x74>
 801d948:	89a3      	ldrh	r3, [r4, #12]
 801d94a:	f023 0303 	bic.w	r3, r3, #3
 801d94e:	f043 0301 	orr.w	r3, r3, #1
 801d952:	81a3      	strh	r3, [r4, #12]
 801d954:	89a0      	ldrh	r0, [r4, #12]
 801d956:	4305      	orrs	r5, r0
 801d958:	81a5      	strh	r5, [r4, #12]
 801d95a:	e7cd      	b.n	801d8f8 <__smakebuf_r+0x18>
 801d95c:	0801b6c9 	.word	0x0801b6c9

0801d960 <memmove>:
 801d960:	4288      	cmp	r0, r1
 801d962:	b510      	push	{r4, lr}
 801d964:	eb01 0402 	add.w	r4, r1, r2
 801d968:	d902      	bls.n	801d970 <memmove+0x10>
 801d96a:	4284      	cmp	r4, r0
 801d96c:	4623      	mov	r3, r4
 801d96e:	d807      	bhi.n	801d980 <memmove+0x20>
 801d970:	1e43      	subs	r3, r0, #1
 801d972:	42a1      	cmp	r1, r4
 801d974:	d008      	beq.n	801d988 <memmove+0x28>
 801d976:	f811 2b01 	ldrb.w	r2, [r1], #1
 801d97a:	f803 2f01 	strb.w	r2, [r3, #1]!
 801d97e:	e7f8      	b.n	801d972 <memmove+0x12>
 801d980:	4402      	add	r2, r0
 801d982:	4601      	mov	r1, r0
 801d984:	428a      	cmp	r2, r1
 801d986:	d100      	bne.n	801d98a <memmove+0x2a>
 801d988:	bd10      	pop	{r4, pc}
 801d98a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801d98e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801d992:	e7f7      	b.n	801d984 <memmove+0x24>

0801d994 <__malloc_lock>:
 801d994:	4801      	ldr	r0, [pc, #4]	; (801d99c <__malloc_lock+0x8>)
 801d996:	f7fd bfa0 	b.w	801b8da <__retarget_lock_acquire_recursive>
 801d99a:	bf00      	nop
 801d99c:	20006e4d 	.word	0x20006e4d

0801d9a0 <__malloc_unlock>:
 801d9a0:	4801      	ldr	r0, [pc, #4]	; (801d9a8 <__malloc_unlock+0x8>)
 801d9a2:	f7fd bf9c 	b.w	801b8de <__retarget_lock_release_recursive>
 801d9a6:	bf00      	nop
 801d9a8:	20006e4d 	.word	0x20006e4d

0801d9ac <_Balloc>:
 801d9ac:	b570      	push	{r4, r5, r6, lr}
 801d9ae:	6a46      	ldr	r6, [r0, #36]	; 0x24
 801d9b0:	4604      	mov	r4, r0
 801d9b2:	460d      	mov	r5, r1
 801d9b4:	b976      	cbnz	r6, 801d9d4 <_Balloc+0x28>
 801d9b6:	2010      	movs	r0, #16
 801d9b8:	f7fd ff92 	bl	801b8e0 <malloc>
 801d9bc:	4602      	mov	r2, r0
 801d9be:	6260      	str	r0, [r4, #36]	; 0x24
 801d9c0:	b920      	cbnz	r0, 801d9cc <_Balloc+0x20>
 801d9c2:	4b18      	ldr	r3, [pc, #96]	; (801da24 <_Balloc+0x78>)
 801d9c4:	4818      	ldr	r0, [pc, #96]	; (801da28 <_Balloc+0x7c>)
 801d9c6:	2166      	movs	r1, #102	; 0x66
 801d9c8:	f7fd fe30 	bl	801b62c <__assert_func>
 801d9cc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801d9d0:	6006      	str	r6, [r0, #0]
 801d9d2:	60c6      	str	r6, [r0, #12]
 801d9d4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 801d9d6:	68f3      	ldr	r3, [r6, #12]
 801d9d8:	b183      	cbz	r3, 801d9fc <_Balloc+0x50>
 801d9da:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801d9dc:	68db      	ldr	r3, [r3, #12]
 801d9de:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801d9e2:	b9b8      	cbnz	r0, 801da14 <_Balloc+0x68>
 801d9e4:	2101      	movs	r1, #1
 801d9e6:	fa01 f605 	lsl.w	r6, r1, r5
 801d9ea:	1d72      	adds	r2, r6, #5
 801d9ec:	0092      	lsls	r2, r2, #2
 801d9ee:	4620      	mov	r0, r4
 801d9f0:	f000 fb60 	bl	801e0b4 <_calloc_r>
 801d9f4:	b160      	cbz	r0, 801da10 <_Balloc+0x64>
 801d9f6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801d9fa:	e00e      	b.n	801da1a <_Balloc+0x6e>
 801d9fc:	2221      	movs	r2, #33	; 0x21
 801d9fe:	2104      	movs	r1, #4
 801da00:	4620      	mov	r0, r4
 801da02:	f000 fb57 	bl	801e0b4 <_calloc_r>
 801da06:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801da08:	60f0      	str	r0, [r6, #12]
 801da0a:	68db      	ldr	r3, [r3, #12]
 801da0c:	2b00      	cmp	r3, #0
 801da0e:	d1e4      	bne.n	801d9da <_Balloc+0x2e>
 801da10:	2000      	movs	r0, #0
 801da12:	bd70      	pop	{r4, r5, r6, pc}
 801da14:	6802      	ldr	r2, [r0, #0]
 801da16:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801da1a:	2300      	movs	r3, #0
 801da1c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801da20:	e7f7      	b.n	801da12 <_Balloc+0x66>
 801da22:	bf00      	nop
 801da24:	08020cd6 	.word	0x08020cd6
 801da28:	08020d59 	.word	0x08020d59

0801da2c <_Bfree>:
 801da2c:	b570      	push	{r4, r5, r6, lr}
 801da2e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 801da30:	4605      	mov	r5, r0
 801da32:	460c      	mov	r4, r1
 801da34:	b976      	cbnz	r6, 801da54 <_Bfree+0x28>
 801da36:	2010      	movs	r0, #16
 801da38:	f7fd ff52 	bl	801b8e0 <malloc>
 801da3c:	4602      	mov	r2, r0
 801da3e:	6268      	str	r0, [r5, #36]	; 0x24
 801da40:	b920      	cbnz	r0, 801da4c <_Bfree+0x20>
 801da42:	4b09      	ldr	r3, [pc, #36]	; (801da68 <_Bfree+0x3c>)
 801da44:	4809      	ldr	r0, [pc, #36]	; (801da6c <_Bfree+0x40>)
 801da46:	218a      	movs	r1, #138	; 0x8a
 801da48:	f7fd fdf0 	bl	801b62c <__assert_func>
 801da4c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801da50:	6006      	str	r6, [r0, #0]
 801da52:	60c6      	str	r6, [r0, #12]
 801da54:	b13c      	cbz	r4, 801da66 <_Bfree+0x3a>
 801da56:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 801da58:	6862      	ldr	r2, [r4, #4]
 801da5a:	68db      	ldr	r3, [r3, #12]
 801da5c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801da60:	6021      	str	r1, [r4, #0]
 801da62:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801da66:	bd70      	pop	{r4, r5, r6, pc}
 801da68:	08020cd6 	.word	0x08020cd6
 801da6c:	08020d59 	.word	0x08020d59

0801da70 <__multadd>:
 801da70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801da74:	690d      	ldr	r5, [r1, #16]
 801da76:	4607      	mov	r7, r0
 801da78:	460c      	mov	r4, r1
 801da7a:	461e      	mov	r6, r3
 801da7c:	f101 0c14 	add.w	ip, r1, #20
 801da80:	2000      	movs	r0, #0
 801da82:	f8dc 3000 	ldr.w	r3, [ip]
 801da86:	b299      	uxth	r1, r3
 801da88:	fb02 6101 	mla	r1, r2, r1, r6
 801da8c:	0c1e      	lsrs	r6, r3, #16
 801da8e:	0c0b      	lsrs	r3, r1, #16
 801da90:	fb02 3306 	mla	r3, r2, r6, r3
 801da94:	b289      	uxth	r1, r1
 801da96:	3001      	adds	r0, #1
 801da98:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 801da9c:	4285      	cmp	r5, r0
 801da9e:	f84c 1b04 	str.w	r1, [ip], #4
 801daa2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801daa6:	dcec      	bgt.n	801da82 <__multadd+0x12>
 801daa8:	b30e      	cbz	r6, 801daee <__multadd+0x7e>
 801daaa:	68a3      	ldr	r3, [r4, #8]
 801daac:	42ab      	cmp	r3, r5
 801daae:	dc19      	bgt.n	801dae4 <__multadd+0x74>
 801dab0:	6861      	ldr	r1, [r4, #4]
 801dab2:	4638      	mov	r0, r7
 801dab4:	3101      	adds	r1, #1
 801dab6:	f7ff ff79 	bl	801d9ac <_Balloc>
 801daba:	4680      	mov	r8, r0
 801dabc:	b928      	cbnz	r0, 801daca <__multadd+0x5a>
 801dabe:	4602      	mov	r2, r0
 801dac0:	4b0c      	ldr	r3, [pc, #48]	; (801daf4 <__multadd+0x84>)
 801dac2:	480d      	ldr	r0, [pc, #52]	; (801daf8 <__multadd+0x88>)
 801dac4:	21b5      	movs	r1, #181	; 0xb5
 801dac6:	f7fd fdb1 	bl	801b62c <__assert_func>
 801daca:	6922      	ldr	r2, [r4, #16]
 801dacc:	3202      	adds	r2, #2
 801dace:	f104 010c 	add.w	r1, r4, #12
 801dad2:	0092      	lsls	r2, r2, #2
 801dad4:	300c      	adds	r0, #12
 801dad6:	f7fd ff13 	bl	801b900 <memcpy>
 801dada:	4621      	mov	r1, r4
 801dadc:	4638      	mov	r0, r7
 801dade:	f7ff ffa5 	bl	801da2c <_Bfree>
 801dae2:	4644      	mov	r4, r8
 801dae4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801dae8:	3501      	adds	r5, #1
 801daea:	615e      	str	r6, [r3, #20]
 801daec:	6125      	str	r5, [r4, #16]
 801daee:	4620      	mov	r0, r4
 801daf0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801daf4:	08020d48 	.word	0x08020d48
 801daf8:	08020d59 	.word	0x08020d59

0801dafc <__hi0bits>:
 801dafc:	0c03      	lsrs	r3, r0, #16
 801dafe:	041b      	lsls	r3, r3, #16
 801db00:	b9d3      	cbnz	r3, 801db38 <__hi0bits+0x3c>
 801db02:	0400      	lsls	r0, r0, #16
 801db04:	2310      	movs	r3, #16
 801db06:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801db0a:	bf04      	itt	eq
 801db0c:	0200      	lsleq	r0, r0, #8
 801db0e:	3308      	addeq	r3, #8
 801db10:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 801db14:	bf04      	itt	eq
 801db16:	0100      	lsleq	r0, r0, #4
 801db18:	3304      	addeq	r3, #4
 801db1a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 801db1e:	bf04      	itt	eq
 801db20:	0080      	lsleq	r0, r0, #2
 801db22:	3302      	addeq	r3, #2
 801db24:	2800      	cmp	r0, #0
 801db26:	db05      	blt.n	801db34 <__hi0bits+0x38>
 801db28:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 801db2c:	f103 0301 	add.w	r3, r3, #1
 801db30:	bf08      	it	eq
 801db32:	2320      	moveq	r3, #32
 801db34:	4618      	mov	r0, r3
 801db36:	4770      	bx	lr
 801db38:	2300      	movs	r3, #0
 801db3a:	e7e4      	b.n	801db06 <__hi0bits+0xa>

0801db3c <__lo0bits>:
 801db3c:	6803      	ldr	r3, [r0, #0]
 801db3e:	f013 0207 	ands.w	r2, r3, #7
 801db42:	4601      	mov	r1, r0
 801db44:	d00b      	beq.n	801db5e <__lo0bits+0x22>
 801db46:	07da      	lsls	r2, r3, #31
 801db48:	d423      	bmi.n	801db92 <__lo0bits+0x56>
 801db4a:	0798      	lsls	r0, r3, #30
 801db4c:	bf49      	itett	mi
 801db4e:	085b      	lsrmi	r3, r3, #1
 801db50:	089b      	lsrpl	r3, r3, #2
 801db52:	2001      	movmi	r0, #1
 801db54:	600b      	strmi	r3, [r1, #0]
 801db56:	bf5c      	itt	pl
 801db58:	600b      	strpl	r3, [r1, #0]
 801db5a:	2002      	movpl	r0, #2
 801db5c:	4770      	bx	lr
 801db5e:	b298      	uxth	r0, r3
 801db60:	b9a8      	cbnz	r0, 801db8e <__lo0bits+0x52>
 801db62:	0c1b      	lsrs	r3, r3, #16
 801db64:	2010      	movs	r0, #16
 801db66:	b2da      	uxtb	r2, r3
 801db68:	b90a      	cbnz	r2, 801db6e <__lo0bits+0x32>
 801db6a:	3008      	adds	r0, #8
 801db6c:	0a1b      	lsrs	r3, r3, #8
 801db6e:	071a      	lsls	r2, r3, #28
 801db70:	bf04      	itt	eq
 801db72:	091b      	lsreq	r3, r3, #4
 801db74:	3004      	addeq	r0, #4
 801db76:	079a      	lsls	r2, r3, #30
 801db78:	bf04      	itt	eq
 801db7a:	089b      	lsreq	r3, r3, #2
 801db7c:	3002      	addeq	r0, #2
 801db7e:	07da      	lsls	r2, r3, #31
 801db80:	d403      	bmi.n	801db8a <__lo0bits+0x4e>
 801db82:	085b      	lsrs	r3, r3, #1
 801db84:	f100 0001 	add.w	r0, r0, #1
 801db88:	d005      	beq.n	801db96 <__lo0bits+0x5a>
 801db8a:	600b      	str	r3, [r1, #0]
 801db8c:	4770      	bx	lr
 801db8e:	4610      	mov	r0, r2
 801db90:	e7e9      	b.n	801db66 <__lo0bits+0x2a>
 801db92:	2000      	movs	r0, #0
 801db94:	4770      	bx	lr
 801db96:	2020      	movs	r0, #32
 801db98:	4770      	bx	lr
	...

0801db9c <__i2b>:
 801db9c:	b510      	push	{r4, lr}
 801db9e:	460c      	mov	r4, r1
 801dba0:	2101      	movs	r1, #1
 801dba2:	f7ff ff03 	bl	801d9ac <_Balloc>
 801dba6:	4602      	mov	r2, r0
 801dba8:	b928      	cbnz	r0, 801dbb6 <__i2b+0x1a>
 801dbaa:	4b05      	ldr	r3, [pc, #20]	; (801dbc0 <__i2b+0x24>)
 801dbac:	4805      	ldr	r0, [pc, #20]	; (801dbc4 <__i2b+0x28>)
 801dbae:	f44f 71a0 	mov.w	r1, #320	; 0x140
 801dbb2:	f7fd fd3b 	bl	801b62c <__assert_func>
 801dbb6:	2301      	movs	r3, #1
 801dbb8:	6144      	str	r4, [r0, #20]
 801dbba:	6103      	str	r3, [r0, #16]
 801dbbc:	bd10      	pop	{r4, pc}
 801dbbe:	bf00      	nop
 801dbc0:	08020d48 	.word	0x08020d48
 801dbc4:	08020d59 	.word	0x08020d59

0801dbc8 <__multiply>:
 801dbc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801dbcc:	4691      	mov	r9, r2
 801dbce:	690a      	ldr	r2, [r1, #16]
 801dbd0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801dbd4:	429a      	cmp	r2, r3
 801dbd6:	bfb8      	it	lt
 801dbd8:	460b      	movlt	r3, r1
 801dbda:	460c      	mov	r4, r1
 801dbdc:	bfbc      	itt	lt
 801dbde:	464c      	movlt	r4, r9
 801dbe0:	4699      	movlt	r9, r3
 801dbe2:	6927      	ldr	r7, [r4, #16]
 801dbe4:	f8d9 a010 	ldr.w	sl, [r9, #16]
 801dbe8:	68a3      	ldr	r3, [r4, #8]
 801dbea:	6861      	ldr	r1, [r4, #4]
 801dbec:	eb07 060a 	add.w	r6, r7, sl
 801dbf0:	42b3      	cmp	r3, r6
 801dbf2:	b085      	sub	sp, #20
 801dbf4:	bfb8      	it	lt
 801dbf6:	3101      	addlt	r1, #1
 801dbf8:	f7ff fed8 	bl	801d9ac <_Balloc>
 801dbfc:	b930      	cbnz	r0, 801dc0c <__multiply+0x44>
 801dbfe:	4602      	mov	r2, r0
 801dc00:	4b44      	ldr	r3, [pc, #272]	; (801dd14 <__multiply+0x14c>)
 801dc02:	4845      	ldr	r0, [pc, #276]	; (801dd18 <__multiply+0x150>)
 801dc04:	f240 115d 	movw	r1, #349	; 0x15d
 801dc08:	f7fd fd10 	bl	801b62c <__assert_func>
 801dc0c:	f100 0514 	add.w	r5, r0, #20
 801dc10:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 801dc14:	462b      	mov	r3, r5
 801dc16:	2200      	movs	r2, #0
 801dc18:	4543      	cmp	r3, r8
 801dc1a:	d321      	bcc.n	801dc60 <__multiply+0x98>
 801dc1c:	f104 0314 	add.w	r3, r4, #20
 801dc20:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 801dc24:	f109 0314 	add.w	r3, r9, #20
 801dc28:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 801dc2c:	9202      	str	r2, [sp, #8]
 801dc2e:	1b3a      	subs	r2, r7, r4
 801dc30:	3a15      	subs	r2, #21
 801dc32:	f022 0203 	bic.w	r2, r2, #3
 801dc36:	3204      	adds	r2, #4
 801dc38:	f104 0115 	add.w	r1, r4, #21
 801dc3c:	428f      	cmp	r7, r1
 801dc3e:	bf38      	it	cc
 801dc40:	2204      	movcc	r2, #4
 801dc42:	9201      	str	r2, [sp, #4]
 801dc44:	9a02      	ldr	r2, [sp, #8]
 801dc46:	9303      	str	r3, [sp, #12]
 801dc48:	429a      	cmp	r2, r3
 801dc4a:	d80c      	bhi.n	801dc66 <__multiply+0x9e>
 801dc4c:	2e00      	cmp	r6, #0
 801dc4e:	dd03      	ble.n	801dc58 <__multiply+0x90>
 801dc50:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801dc54:	2b00      	cmp	r3, #0
 801dc56:	d05a      	beq.n	801dd0e <__multiply+0x146>
 801dc58:	6106      	str	r6, [r0, #16]
 801dc5a:	b005      	add	sp, #20
 801dc5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801dc60:	f843 2b04 	str.w	r2, [r3], #4
 801dc64:	e7d8      	b.n	801dc18 <__multiply+0x50>
 801dc66:	f8b3 a000 	ldrh.w	sl, [r3]
 801dc6a:	f1ba 0f00 	cmp.w	sl, #0
 801dc6e:	d024      	beq.n	801dcba <__multiply+0xf2>
 801dc70:	f104 0e14 	add.w	lr, r4, #20
 801dc74:	46a9      	mov	r9, r5
 801dc76:	f04f 0c00 	mov.w	ip, #0
 801dc7a:	f85e 2b04 	ldr.w	r2, [lr], #4
 801dc7e:	f8d9 1000 	ldr.w	r1, [r9]
 801dc82:	fa1f fb82 	uxth.w	fp, r2
 801dc86:	b289      	uxth	r1, r1
 801dc88:	fb0a 110b 	mla	r1, sl, fp, r1
 801dc8c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 801dc90:	f8d9 2000 	ldr.w	r2, [r9]
 801dc94:	4461      	add	r1, ip
 801dc96:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801dc9a:	fb0a c20b 	mla	r2, sl, fp, ip
 801dc9e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 801dca2:	b289      	uxth	r1, r1
 801dca4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 801dca8:	4577      	cmp	r7, lr
 801dcaa:	f849 1b04 	str.w	r1, [r9], #4
 801dcae:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801dcb2:	d8e2      	bhi.n	801dc7a <__multiply+0xb2>
 801dcb4:	9a01      	ldr	r2, [sp, #4]
 801dcb6:	f845 c002 	str.w	ip, [r5, r2]
 801dcba:	9a03      	ldr	r2, [sp, #12]
 801dcbc:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 801dcc0:	3304      	adds	r3, #4
 801dcc2:	f1b9 0f00 	cmp.w	r9, #0
 801dcc6:	d020      	beq.n	801dd0a <__multiply+0x142>
 801dcc8:	6829      	ldr	r1, [r5, #0]
 801dcca:	f104 0c14 	add.w	ip, r4, #20
 801dcce:	46ae      	mov	lr, r5
 801dcd0:	f04f 0a00 	mov.w	sl, #0
 801dcd4:	f8bc b000 	ldrh.w	fp, [ip]
 801dcd8:	f8be 2002 	ldrh.w	r2, [lr, #2]
 801dcdc:	fb09 220b 	mla	r2, r9, fp, r2
 801dce0:	4492      	add	sl, r2
 801dce2:	b289      	uxth	r1, r1
 801dce4:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 801dce8:	f84e 1b04 	str.w	r1, [lr], #4
 801dcec:	f85c 2b04 	ldr.w	r2, [ip], #4
 801dcf0:	f8be 1000 	ldrh.w	r1, [lr]
 801dcf4:	0c12      	lsrs	r2, r2, #16
 801dcf6:	fb09 1102 	mla	r1, r9, r2, r1
 801dcfa:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 801dcfe:	4567      	cmp	r7, ip
 801dd00:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 801dd04:	d8e6      	bhi.n	801dcd4 <__multiply+0x10c>
 801dd06:	9a01      	ldr	r2, [sp, #4]
 801dd08:	50a9      	str	r1, [r5, r2]
 801dd0a:	3504      	adds	r5, #4
 801dd0c:	e79a      	b.n	801dc44 <__multiply+0x7c>
 801dd0e:	3e01      	subs	r6, #1
 801dd10:	e79c      	b.n	801dc4c <__multiply+0x84>
 801dd12:	bf00      	nop
 801dd14:	08020d48 	.word	0x08020d48
 801dd18:	08020d59 	.word	0x08020d59

0801dd1c <__pow5mult>:
 801dd1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801dd20:	4615      	mov	r5, r2
 801dd22:	f012 0203 	ands.w	r2, r2, #3
 801dd26:	4606      	mov	r6, r0
 801dd28:	460f      	mov	r7, r1
 801dd2a:	d007      	beq.n	801dd3c <__pow5mult+0x20>
 801dd2c:	4c25      	ldr	r4, [pc, #148]	; (801ddc4 <__pow5mult+0xa8>)
 801dd2e:	3a01      	subs	r2, #1
 801dd30:	2300      	movs	r3, #0
 801dd32:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801dd36:	f7ff fe9b 	bl	801da70 <__multadd>
 801dd3a:	4607      	mov	r7, r0
 801dd3c:	10ad      	asrs	r5, r5, #2
 801dd3e:	d03d      	beq.n	801ddbc <__pow5mult+0xa0>
 801dd40:	6a74      	ldr	r4, [r6, #36]	; 0x24
 801dd42:	b97c      	cbnz	r4, 801dd64 <__pow5mult+0x48>
 801dd44:	2010      	movs	r0, #16
 801dd46:	f7fd fdcb 	bl	801b8e0 <malloc>
 801dd4a:	4602      	mov	r2, r0
 801dd4c:	6270      	str	r0, [r6, #36]	; 0x24
 801dd4e:	b928      	cbnz	r0, 801dd5c <__pow5mult+0x40>
 801dd50:	4b1d      	ldr	r3, [pc, #116]	; (801ddc8 <__pow5mult+0xac>)
 801dd52:	481e      	ldr	r0, [pc, #120]	; (801ddcc <__pow5mult+0xb0>)
 801dd54:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 801dd58:	f7fd fc68 	bl	801b62c <__assert_func>
 801dd5c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801dd60:	6004      	str	r4, [r0, #0]
 801dd62:	60c4      	str	r4, [r0, #12]
 801dd64:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 801dd68:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801dd6c:	b94c      	cbnz	r4, 801dd82 <__pow5mult+0x66>
 801dd6e:	f240 2171 	movw	r1, #625	; 0x271
 801dd72:	4630      	mov	r0, r6
 801dd74:	f7ff ff12 	bl	801db9c <__i2b>
 801dd78:	2300      	movs	r3, #0
 801dd7a:	f8c8 0008 	str.w	r0, [r8, #8]
 801dd7e:	4604      	mov	r4, r0
 801dd80:	6003      	str	r3, [r0, #0]
 801dd82:	f04f 0900 	mov.w	r9, #0
 801dd86:	07eb      	lsls	r3, r5, #31
 801dd88:	d50a      	bpl.n	801dda0 <__pow5mult+0x84>
 801dd8a:	4639      	mov	r1, r7
 801dd8c:	4622      	mov	r2, r4
 801dd8e:	4630      	mov	r0, r6
 801dd90:	f7ff ff1a 	bl	801dbc8 <__multiply>
 801dd94:	4639      	mov	r1, r7
 801dd96:	4680      	mov	r8, r0
 801dd98:	4630      	mov	r0, r6
 801dd9a:	f7ff fe47 	bl	801da2c <_Bfree>
 801dd9e:	4647      	mov	r7, r8
 801dda0:	106d      	asrs	r5, r5, #1
 801dda2:	d00b      	beq.n	801ddbc <__pow5mult+0xa0>
 801dda4:	6820      	ldr	r0, [r4, #0]
 801dda6:	b938      	cbnz	r0, 801ddb8 <__pow5mult+0x9c>
 801dda8:	4622      	mov	r2, r4
 801ddaa:	4621      	mov	r1, r4
 801ddac:	4630      	mov	r0, r6
 801ddae:	f7ff ff0b 	bl	801dbc8 <__multiply>
 801ddb2:	6020      	str	r0, [r4, #0]
 801ddb4:	f8c0 9000 	str.w	r9, [r0]
 801ddb8:	4604      	mov	r4, r0
 801ddba:	e7e4      	b.n	801dd86 <__pow5mult+0x6a>
 801ddbc:	4638      	mov	r0, r7
 801ddbe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801ddc2:	bf00      	nop
 801ddc4:	08020ea8 	.word	0x08020ea8
 801ddc8:	08020cd6 	.word	0x08020cd6
 801ddcc:	08020d59 	.word	0x08020d59

0801ddd0 <__lshift>:
 801ddd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801ddd4:	460c      	mov	r4, r1
 801ddd6:	6849      	ldr	r1, [r1, #4]
 801ddd8:	6923      	ldr	r3, [r4, #16]
 801ddda:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801ddde:	68a3      	ldr	r3, [r4, #8]
 801dde0:	4607      	mov	r7, r0
 801dde2:	4691      	mov	r9, r2
 801dde4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801dde8:	f108 0601 	add.w	r6, r8, #1
 801ddec:	42b3      	cmp	r3, r6
 801ddee:	db0b      	blt.n	801de08 <__lshift+0x38>
 801ddf0:	4638      	mov	r0, r7
 801ddf2:	f7ff fddb 	bl	801d9ac <_Balloc>
 801ddf6:	4605      	mov	r5, r0
 801ddf8:	b948      	cbnz	r0, 801de0e <__lshift+0x3e>
 801ddfa:	4602      	mov	r2, r0
 801ddfc:	4b2a      	ldr	r3, [pc, #168]	; (801dea8 <__lshift+0xd8>)
 801ddfe:	482b      	ldr	r0, [pc, #172]	; (801deac <__lshift+0xdc>)
 801de00:	f240 11d9 	movw	r1, #473	; 0x1d9
 801de04:	f7fd fc12 	bl	801b62c <__assert_func>
 801de08:	3101      	adds	r1, #1
 801de0a:	005b      	lsls	r3, r3, #1
 801de0c:	e7ee      	b.n	801ddec <__lshift+0x1c>
 801de0e:	2300      	movs	r3, #0
 801de10:	f100 0114 	add.w	r1, r0, #20
 801de14:	f100 0210 	add.w	r2, r0, #16
 801de18:	4618      	mov	r0, r3
 801de1a:	4553      	cmp	r3, sl
 801de1c:	db37      	blt.n	801de8e <__lshift+0xbe>
 801de1e:	6920      	ldr	r0, [r4, #16]
 801de20:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801de24:	f104 0314 	add.w	r3, r4, #20
 801de28:	f019 091f 	ands.w	r9, r9, #31
 801de2c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801de30:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 801de34:	d02f      	beq.n	801de96 <__lshift+0xc6>
 801de36:	f1c9 0e20 	rsb	lr, r9, #32
 801de3a:	468a      	mov	sl, r1
 801de3c:	f04f 0c00 	mov.w	ip, #0
 801de40:	681a      	ldr	r2, [r3, #0]
 801de42:	fa02 f209 	lsl.w	r2, r2, r9
 801de46:	ea42 020c 	orr.w	r2, r2, ip
 801de4a:	f84a 2b04 	str.w	r2, [sl], #4
 801de4e:	f853 2b04 	ldr.w	r2, [r3], #4
 801de52:	4298      	cmp	r0, r3
 801de54:	fa22 fc0e 	lsr.w	ip, r2, lr
 801de58:	d8f2      	bhi.n	801de40 <__lshift+0x70>
 801de5a:	1b03      	subs	r3, r0, r4
 801de5c:	3b15      	subs	r3, #21
 801de5e:	f023 0303 	bic.w	r3, r3, #3
 801de62:	3304      	adds	r3, #4
 801de64:	f104 0215 	add.w	r2, r4, #21
 801de68:	4290      	cmp	r0, r2
 801de6a:	bf38      	it	cc
 801de6c:	2304      	movcc	r3, #4
 801de6e:	f841 c003 	str.w	ip, [r1, r3]
 801de72:	f1bc 0f00 	cmp.w	ip, #0
 801de76:	d001      	beq.n	801de7c <__lshift+0xac>
 801de78:	f108 0602 	add.w	r6, r8, #2
 801de7c:	3e01      	subs	r6, #1
 801de7e:	4638      	mov	r0, r7
 801de80:	612e      	str	r6, [r5, #16]
 801de82:	4621      	mov	r1, r4
 801de84:	f7ff fdd2 	bl	801da2c <_Bfree>
 801de88:	4628      	mov	r0, r5
 801de8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801de8e:	f842 0f04 	str.w	r0, [r2, #4]!
 801de92:	3301      	adds	r3, #1
 801de94:	e7c1      	b.n	801de1a <__lshift+0x4a>
 801de96:	3904      	subs	r1, #4
 801de98:	f853 2b04 	ldr.w	r2, [r3], #4
 801de9c:	f841 2f04 	str.w	r2, [r1, #4]!
 801dea0:	4298      	cmp	r0, r3
 801dea2:	d8f9      	bhi.n	801de98 <__lshift+0xc8>
 801dea4:	e7ea      	b.n	801de7c <__lshift+0xac>
 801dea6:	bf00      	nop
 801dea8:	08020d48 	.word	0x08020d48
 801deac:	08020d59 	.word	0x08020d59

0801deb0 <__mcmp>:
 801deb0:	b530      	push	{r4, r5, lr}
 801deb2:	6902      	ldr	r2, [r0, #16]
 801deb4:	690c      	ldr	r4, [r1, #16]
 801deb6:	1b12      	subs	r2, r2, r4
 801deb8:	d10e      	bne.n	801ded8 <__mcmp+0x28>
 801deba:	f100 0314 	add.w	r3, r0, #20
 801debe:	3114      	adds	r1, #20
 801dec0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 801dec4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 801dec8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 801decc:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 801ded0:	42a5      	cmp	r5, r4
 801ded2:	d003      	beq.n	801dedc <__mcmp+0x2c>
 801ded4:	d305      	bcc.n	801dee2 <__mcmp+0x32>
 801ded6:	2201      	movs	r2, #1
 801ded8:	4610      	mov	r0, r2
 801deda:	bd30      	pop	{r4, r5, pc}
 801dedc:	4283      	cmp	r3, r0
 801dede:	d3f3      	bcc.n	801dec8 <__mcmp+0x18>
 801dee0:	e7fa      	b.n	801ded8 <__mcmp+0x28>
 801dee2:	f04f 32ff 	mov.w	r2, #4294967295
 801dee6:	e7f7      	b.n	801ded8 <__mcmp+0x28>

0801dee8 <__mdiff>:
 801dee8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801deec:	460c      	mov	r4, r1
 801deee:	4606      	mov	r6, r0
 801def0:	4611      	mov	r1, r2
 801def2:	4620      	mov	r0, r4
 801def4:	4690      	mov	r8, r2
 801def6:	f7ff ffdb 	bl	801deb0 <__mcmp>
 801defa:	1e05      	subs	r5, r0, #0
 801defc:	d110      	bne.n	801df20 <__mdiff+0x38>
 801defe:	4629      	mov	r1, r5
 801df00:	4630      	mov	r0, r6
 801df02:	f7ff fd53 	bl	801d9ac <_Balloc>
 801df06:	b930      	cbnz	r0, 801df16 <__mdiff+0x2e>
 801df08:	4b3a      	ldr	r3, [pc, #232]	; (801dff4 <__mdiff+0x10c>)
 801df0a:	4602      	mov	r2, r0
 801df0c:	f240 2132 	movw	r1, #562	; 0x232
 801df10:	4839      	ldr	r0, [pc, #228]	; (801dff8 <__mdiff+0x110>)
 801df12:	f7fd fb8b 	bl	801b62c <__assert_func>
 801df16:	2301      	movs	r3, #1
 801df18:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801df1c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801df20:	bfa4      	itt	ge
 801df22:	4643      	movge	r3, r8
 801df24:	46a0      	movge	r8, r4
 801df26:	4630      	mov	r0, r6
 801df28:	f8d8 1004 	ldr.w	r1, [r8, #4]
 801df2c:	bfa6      	itte	ge
 801df2e:	461c      	movge	r4, r3
 801df30:	2500      	movge	r5, #0
 801df32:	2501      	movlt	r5, #1
 801df34:	f7ff fd3a 	bl	801d9ac <_Balloc>
 801df38:	b920      	cbnz	r0, 801df44 <__mdiff+0x5c>
 801df3a:	4b2e      	ldr	r3, [pc, #184]	; (801dff4 <__mdiff+0x10c>)
 801df3c:	4602      	mov	r2, r0
 801df3e:	f44f 7110 	mov.w	r1, #576	; 0x240
 801df42:	e7e5      	b.n	801df10 <__mdiff+0x28>
 801df44:	f8d8 7010 	ldr.w	r7, [r8, #16]
 801df48:	6926      	ldr	r6, [r4, #16]
 801df4a:	60c5      	str	r5, [r0, #12]
 801df4c:	f104 0914 	add.w	r9, r4, #20
 801df50:	f108 0514 	add.w	r5, r8, #20
 801df54:	f100 0e14 	add.w	lr, r0, #20
 801df58:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 801df5c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 801df60:	f108 0210 	add.w	r2, r8, #16
 801df64:	46f2      	mov	sl, lr
 801df66:	2100      	movs	r1, #0
 801df68:	f859 3b04 	ldr.w	r3, [r9], #4
 801df6c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 801df70:	fa1f f883 	uxth.w	r8, r3
 801df74:	fa11 f18b 	uxtah	r1, r1, fp
 801df78:	0c1b      	lsrs	r3, r3, #16
 801df7a:	eba1 0808 	sub.w	r8, r1, r8
 801df7e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 801df82:	eb03 4328 	add.w	r3, r3, r8, asr #16
 801df86:	fa1f f888 	uxth.w	r8, r8
 801df8a:	1419      	asrs	r1, r3, #16
 801df8c:	454e      	cmp	r6, r9
 801df8e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 801df92:	f84a 3b04 	str.w	r3, [sl], #4
 801df96:	d8e7      	bhi.n	801df68 <__mdiff+0x80>
 801df98:	1b33      	subs	r3, r6, r4
 801df9a:	3b15      	subs	r3, #21
 801df9c:	f023 0303 	bic.w	r3, r3, #3
 801dfa0:	3304      	adds	r3, #4
 801dfa2:	3415      	adds	r4, #21
 801dfa4:	42a6      	cmp	r6, r4
 801dfa6:	bf38      	it	cc
 801dfa8:	2304      	movcc	r3, #4
 801dfaa:	441d      	add	r5, r3
 801dfac:	4473      	add	r3, lr
 801dfae:	469e      	mov	lr, r3
 801dfb0:	462e      	mov	r6, r5
 801dfb2:	4566      	cmp	r6, ip
 801dfb4:	d30e      	bcc.n	801dfd4 <__mdiff+0xec>
 801dfb6:	f10c 0203 	add.w	r2, ip, #3
 801dfba:	1b52      	subs	r2, r2, r5
 801dfbc:	f022 0203 	bic.w	r2, r2, #3
 801dfc0:	3d03      	subs	r5, #3
 801dfc2:	45ac      	cmp	ip, r5
 801dfc4:	bf38      	it	cc
 801dfc6:	2200      	movcc	r2, #0
 801dfc8:	441a      	add	r2, r3
 801dfca:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 801dfce:	b17b      	cbz	r3, 801dff0 <__mdiff+0x108>
 801dfd0:	6107      	str	r7, [r0, #16]
 801dfd2:	e7a3      	b.n	801df1c <__mdiff+0x34>
 801dfd4:	f856 8b04 	ldr.w	r8, [r6], #4
 801dfd8:	fa11 f288 	uxtah	r2, r1, r8
 801dfdc:	1414      	asrs	r4, r2, #16
 801dfde:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 801dfe2:	b292      	uxth	r2, r2
 801dfe4:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 801dfe8:	f84e 2b04 	str.w	r2, [lr], #4
 801dfec:	1421      	asrs	r1, r4, #16
 801dfee:	e7e0      	b.n	801dfb2 <__mdiff+0xca>
 801dff0:	3f01      	subs	r7, #1
 801dff2:	e7ea      	b.n	801dfca <__mdiff+0xe2>
 801dff4:	08020d48 	.word	0x08020d48
 801dff8:	08020d59 	.word	0x08020d59

0801dffc <__d2b>:
 801dffc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801e000:	4689      	mov	r9, r1
 801e002:	2101      	movs	r1, #1
 801e004:	ec57 6b10 	vmov	r6, r7, d0
 801e008:	4690      	mov	r8, r2
 801e00a:	f7ff fccf 	bl	801d9ac <_Balloc>
 801e00e:	4604      	mov	r4, r0
 801e010:	b930      	cbnz	r0, 801e020 <__d2b+0x24>
 801e012:	4602      	mov	r2, r0
 801e014:	4b25      	ldr	r3, [pc, #148]	; (801e0ac <__d2b+0xb0>)
 801e016:	4826      	ldr	r0, [pc, #152]	; (801e0b0 <__d2b+0xb4>)
 801e018:	f240 310a 	movw	r1, #778	; 0x30a
 801e01c:	f7fd fb06 	bl	801b62c <__assert_func>
 801e020:	f3c7 550a 	ubfx	r5, r7, #20, #11
 801e024:	f3c7 0313 	ubfx	r3, r7, #0, #20
 801e028:	bb35      	cbnz	r5, 801e078 <__d2b+0x7c>
 801e02a:	2e00      	cmp	r6, #0
 801e02c:	9301      	str	r3, [sp, #4]
 801e02e:	d028      	beq.n	801e082 <__d2b+0x86>
 801e030:	4668      	mov	r0, sp
 801e032:	9600      	str	r6, [sp, #0]
 801e034:	f7ff fd82 	bl	801db3c <__lo0bits>
 801e038:	9900      	ldr	r1, [sp, #0]
 801e03a:	b300      	cbz	r0, 801e07e <__d2b+0x82>
 801e03c:	9a01      	ldr	r2, [sp, #4]
 801e03e:	f1c0 0320 	rsb	r3, r0, #32
 801e042:	fa02 f303 	lsl.w	r3, r2, r3
 801e046:	430b      	orrs	r3, r1
 801e048:	40c2      	lsrs	r2, r0
 801e04a:	6163      	str	r3, [r4, #20]
 801e04c:	9201      	str	r2, [sp, #4]
 801e04e:	9b01      	ldr	r3, [sp, #4]
 801e050:	61a3      	str	r3, [r4, #24]
 801e052:	2b00      	cmp	r3, #0
 801e054:	bf14      	ite	ne
 801e056:	2202      	movne	r2, #2
 801e058:	2201      	moveq	r2, #1
 801e05a:	6122      	str	r2, [r4, #16]
 801e05c:	b1d5      	cbz	r5, 801e094 <__d2b+0x98>
 801e05e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 801e062:	4405      	add	r5, r0
 801e064:	f8c9 5000 	str.w	r5, [r9]
 801e068:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 801e06c:	f8c8 0000 	str.w	r0, [r8]
 801e070:	4620      	mov	r0, r4
 801e072:	b003      	add	sp, #12
 801e074:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801e078:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801e07c:	e7d5      	b.n	801e02a <__d2b+0x2e>
 801e07e:	6161      	str	r1, [r4, #20]
 801e080:	e7e5      	b.n	801e04e <__d2b+0x52>
 801e082:	a801      	add	r0, sp, #4
 801e084:	f7ff fd5a 	bl	801db3c <__lo0bits>
 801e088:	9b01      	ldr	r3, [sp, #4]
 801e08a:	6163      	str	r3, [r4, #20]
 801e08c:	2201      	movs	r2, #1
 801e08e:	6122      	str	r2, [r4, #16]
 801e090:	3020      	adds	r0, #32
 801e092:	e7e3      	b.n	801e05c <__d2b+0x60>
 801e094:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801e098:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 801e09c:	f8c9 0000 	str.w	r0, [r9]
 801e0a0:	6918      	ldr	r0, [r3, #16]
 801e0a2:	f7ff fd2b 	bl	801dafc <__hi0bits>
 801e0a6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801e0aa:	e7df      	b.n	801e06c <__d2b+0x70>
 801e0ac:	08020d48 	.word	0x08020d48
 801e0b0:	08020d59 	.word	0x08020d59

0801e0b4 <_calloc_r>:
 801e0b4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801e0b6:	fba1 2402 	umull	r2, r4, r1, r2
 801e0ba:	b94c      	cbnz	r4, 801e0d0 <_calloc_r+0x1c>
 801e0bc:	4611      	mov	r1, r2
 801e0be:	9201      	str	r2, [sp, #4]
 801e0c0:	f7fd fca0 	bl	801ba04 <_malloc_r>
 801e0c4:	9a01      	ldr	r2, [sp, #4]
 801e0c6:	4605      	mov	r5, r0
 801e0c8:	b930      	cbnz	r0, 801e0d8 <_calloc_r+0x24>
 801e0ca:	4628      	mov	r0, r5
 801e0cc:	b003      	add	sp, #12
 801e0ce:	bd30      	pop	{r4, r5, pc}
 801e0d0:	220c      	movs	r2, #12
 801e0d2:	6002      	str	r2, [r0, #0]
 801e0d4:	2500      	movs	r5, #0
 801e0d6:	e7f8      	b.n	801e0ca <_calloc_r+0x16>
 801e0d8:	4621      	mov	r1, r4
 801e0da:	f7fd fc1f 	bl	801b91c <memset>
 801e0de:	e7f4      	b.n	801e0ca <_calloc_r+0x16>

0801e0e0 <_realloc_r>:
 801e0e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e0e4:	4680      	mov	r8, r0
 801e0e6:	4614      	mov	r4, r2
 801e0e8:	460e      	mov	r6, r1
 801e0ea:	b921      	cbnz	r1, 801e0f6 <_realloc_r+0x16>
 801e0ec:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801e0f0:	4611      	mov	r1, r2
 801e0f2:	f7fd bc87 	b.w	801ba04 <_malloc_r>
 801e0f6:	b92a      	cbnz	r2, 801e104 <_realloc_r+0x24>
 801e0f8:	f7fd fc18 	bl	801b92c <_free_r>
 801e0fc:	4625      	mov	r5, r4
 801e0fe:	4628      	mov	r0, r5
 801e100:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e104:	f000 f9bc 	bl	801e480 <_malloc_usable_size_r>
 801e108:	4284      	cmp	r4, r0
 801e10a:	4607      	mov	r7, r0
 801e10c:	d802      	bhi.n	801e114 <_realloc_r+0x34>
 801e10e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801e112:	d812      	bhi.n	801e13a <_realloc_r+0x5a>
 801e114:	4621      	mov	r1, r4
 801e116:	4640      	mov	r0, r8
 801e118:	f7fd fc74 	bl	801ba04 <_malloc_r>
 801e11c:	4605      	mov	r5, r0
 801e11e:	2800      	cmp	r0, #0
 801e120:	d0ed      	beq.n	801e0fe <_realloc_r+0x1e>
 801e122:	42bc      	cmp	r4, r7
 801e124:	4622      	mov	r2, r4
 801e126:	4631      	mov	r1, r6
 801e128:	bf28      	it	cs
 801e12a:	463a      	movcs	r2, r7
 801e12c:	f7fd fbe8 	bl	801b900 <memcpy>
 801e130:	4631      	mov	r1, r6
 801e132:	4640      	mov	r0, r8
 801e134:	f7fd fbfa 	bl	801b92c <_free_r>
 801e138:	e7e1      	b.n	801e0fe <_realloc_r+0x1e>
 801e13a:	4635      	mov	r5, r6
 801e13c:	e7df      	b.n	801e0fe <_realloc_r+0x1e>

0801e13e <__ssputs_r>:
 801e13e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801e142:	688e      	ldr	r6, [r1, #8]
 801e144:	429e      	cmp	r6, r3
 801e146:	4682      	mov	sl, r0
 801e148:	460c      	mov	r4, r1
 801e14a:	4690      	mov	r8, r2
 801e14c:	461f      	mov	r7, r3
 801e14e:	d838      	bhi.n	801e1c2 <__ssputs_r+0x84>
 801e150:	898a      	ldrh	r2, [r1, #12]
 801e152:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801e156:	d032      	beq.n	801e1be <__ssputs_r+0x80>
 801e158:	6825      	ldr	r5, [r4, #0]
 801e15a:	6909      	ldr	r1, [r1, #16]
 801e15c:	eba5 0901 	sub.w	r9, r5, r1
 801e160:	6965      	ldr	r5, [r4, #20]
 801e162:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801e166:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801e16a:	3301      	adds	r3, #1
 801e16c:	444b      	add	r3, r9
 801e16e:	106d      	asrs	r5, r5, #1
 801e170:	429d      	cmp	r5, r3
 801e172:	bf38      	it	cc
 801e174:	461d      	movcc	r5, r3
 801e176:	0553      	lsls	r3, r2, #21
 801e178:	d531      	bpl.n	801e1de <__ssputs_r+0xa0>
 801e17a:	4629      	mov	r1, r5
 801e17c:	f7fd fc42 	bl	801ba04 <_malloc_r>
 801e180:	4606      	mov	r6, r0
 801e182:	b950      	cbnz	r0, 801e19a <__ssputs_r+0x5c>
 801e184:	230c      	movs	r3, #12
 801e186:	f8ca 3000 	str.w	r3, [sl]
 801e18a:	89a3      	ldrh	r3, [r4, #12]
 801e18c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801e190:	81a3      	strh	r3, [r4, #12]
 801e192:	f04f 30ff 	mov.w	r0, #4294967295
 801e196:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801e19a:	6921      	ldr	r1, [r4, #16]
 801e19c:	464a      	mov	r2, r9
 801e19e:	f7fd fbaf 	bl	801b900 <memcpy>
 801e1a2:	89a3      	ldrh	r3, [r4, #12]
 801e1a4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801e1a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801e1ac:	81a3      	strh	r3, [r4, #12]
 801e1ae:	6126      	str	r6, [r4, #16]
 801e1b0:	6165      	str	r5, [r4, #20]
 801e1b2:	444e      	add	r6, r9
 801e1b4:	eba5 0509 	sub.w	r5, r5, r9
 801e1b8:	6026      	str	r6, [r4, #0]
 801e1ba:	60a5      	str	r5, [r4, #8]
 801e1bc:	463e      	mov	r6, r7
 801e1be:	42be      	cmp	r6, r7
 801e1c0:	d900      	bls.n	801e1c4 <__ssputs_r+0x86>
 801e1c2:	463e      	mov	r6, r7
 801e1c4:	6820      	ldr	r0, [r4, #0]
 801e1c6:	4632      	mov	r2, r6
 801e1c8:	4641      	mov	r1, r8
 801e1ca:	f7ff fbc9 	bl	801d960 <memmove>
 801e1ce:	68a3      	ldr	r3, [r4, #8]
 801e1d0:	1b9b      	subs	r3, r3, r6
 801e1d2:	60a3      	str	r3, [r4, #8]
 801e1d4:	6823      	ldr	r3, [r4, #0]
 801e1d6:	4433      	add	r3, r6
 801e1d8:	6023      	str	r3, [r4, #0]
 801e1da:	2000      	movs	r0, #0
 801e1dc:	e7db      	b.n	801e196 <__ssputs_r+0x58>
 801e1de:	462a      	mov	r2, r5
 801e1e0:	f7ff ff7e 	bl	801e0e0 <_realloc_r>
 801e1e4:	4606      	mov	r6, r0
 801e1e6:	2800      	cmp	r0, #0
 801e1e8:	d1e1      	bne.n	801e1ae <__ssputs_r+0x70>
 801e1ea:	6921      	ldr	r1, [r4, #16]
 801e1ec:	4650      	mov	r0, sl
 801e1ee:	f7fd fb9d 	bl	801b92c <_free_r>
 801e1f2:	e7c7      	b.n	801e184 <__ssputs_r+0x46>

0801e1f4 <_svfiprintf_r>:
 801e1f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e1f8:	4698      	mov	r8, r3
 801e1fa:	898b      	ldrh	r3, [r1, #12]
 801e1fc:	061b      	lsls	r3, r3, #24
 801e1fe:	b09d      	sub	sp, #116	; 0x74
 801e200:	4607      	mov	r7, r0
 801e202:	460d      	mov	r5, r1
 801e204:	4614      	mov	r4, r2
 801e206:	d50e      	bpl.n	801e226 <_svfiprintf_r+0x32>
 801e208:	690b      	ldr	r3, [r1, #16]
 801e20a:	b963      	cbnz	r3, 801e226 <_svfiprintf_r+0x32>
 801e20c:	2140      	movs	r1, #64	; 0x40
 801e20e:	f7fd fbf9 	bl	801ba04 <_malloc_r>
 801e212:	6028      	str	r0, [r5, #0]
 801e214:	6128      	str	r0, [r5, #16]
 801e216:	b920      	cbnz	r0, 801e222 <_svfiprintf_r+0x2e>
 801e218:	230c      	movs	r3, #12
 801e21a:	603b      	str	r3, [r7, #0]
 801e21c:	f04f 30ff 	mov.w	r0, #4294967295
 801e220:	e0d1      	b.n	801e3c6 <_svfiprintf_r+0x1d2>
 801e222:	2340      	movs	r3, #64	; 0x40
 801e224:	616b      	str	r3, [r5, #20]
 801e226:	2300      	movs	r3, #0
 801e228:	9309      	str	r3, [sp, #36]	; 0x24
 801e22a:	2320      	movs	r3, #32
 801e22c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801e230:	f8cd 800c 	str.w	r8, [sp, #12]
 801e234:	2330      	movs	r3, #48	; 0x30
 801e236:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 801e3e0 <_svfiprintf_r+0x1ec>
 801e23a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801e23e:	f04f 0901 	mov.w	r9, #1
 801e242:	4623      	mov	r3, r4
 801e244:	469a      	mov	sl, r3
 801e246:	f813 2b01 	ldrb.w	r2, [r3], #1
 801e24a:	b10a      	cbz	r2, 801e250 <_svfiprintf_r+0x5c>
 801e24c:	2a25      	cmp	r2, #37	; 0x25
 801e24e:	d1f9      	bne.n	801e244 <_svfiprintf_r+0x50>
 801e250:	ebba 0b04 	subs.w	fp, sl, r4
 801e254:	d00b      	beq.n	801e26e <_svfiprintf_r+0x7a>
 801e256:	465b      	mov	r3, fp
 801e258:	4622      	mov	r2, r4
 801e25a:	4629      	mov	r1, r5
 801e25c:	4638      	mov	r0, r7
 801e25e:	f7ff ff6e 	bl	801e13e <__ssputs_r>
 801e262:	3001      	adds	r0, #1
 801e264:	f000 80aa 	beq.w	801e3bc <_svfiprintf_r+0x1c8>
 801e268:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801e26a:	445a      	add	r2, fp
 801e26c:	9209      	str	r2, [sp, #36]	; 0x24
 801e26e:	f89a 3000 	ldrb.w	r3, [sl]
 801e272:	2b00      	cmp	r3, #0
 801e274:	f000 80a2 	beq.w	801e3bc <_svfiprintf_r+0x1c8>
 801e278:	2300      	movs	r3, #0
 801e27a:	f04f 32ff 	mov.w	r2, #4294967295
 801e27e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801e282:	f10a 0a01 	add.w	sl, sl, #1
 801e286:	9304      	str	r3, [sp, #16]
 801e288:	9307      	str	r3, [sp, #28]
 801e28a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801e28e:	931a      	str	r3, [sp, #104]	; 0x68
 801e290:	4654      	mov	r4, sl
 801e292:	2205      	movs	r2, #5
 801e294:	f814 1b01 	ldrb.w	r1, [r4], #1
 801e298:	4851      	ldr	r0, [pc, #324]	; (801e3e0 <_svfiprintf_r+0x1ec>)
 801e29a:	f7e2 f829 	bl	80002f0 <memchr>
 801e29e:	9a04      	ldr	r2, [sp, #16]
 801e2a0:	b9d8      	cbnz	r0, 801e2da <_svfiprintf_r+0xe6>
 801e2a2:	06d0      	lsls	r0, r2, #27
 801e2a4:	bf44      	itt	mi
 801e2a6:	2320      	movmi	r3, #32
 801e2a8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801e2ac:	0711      	lsls	r1, r2, #28
 801e2ae:	bf44      	itt	mi
 801e2b0:	232b      	movmi	r3, #43	; 0x2b
 801e2b2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801e2b6:	f89a 3000 	ldrb.w	r3, [sl]
 801e2ba:	2b2a      	cmp	r3, #42	; 0x2a
 801e2bc:	d015      	beq.n	801e2ea <_svfiprintf_r+0xf6>
 801e2be:	9a07      	ldr	r2, [sp, #28]
 801e2c0:	4654      	mov	r4, sl
 801e2c2:	2000      	movs	r0, #0
 801e2c4:	f04f 0c0a 	mov.w	ip, #10
 801e2c8:	4621      	mov	r1, r4
 801e2ca:	f811 3b01 	ldrb.w	r3, [r1], #1
 801e2ce:	3b30      	subs	r3, #48	; 0x30
 801e2d0:	2b09      	cmp	r3, #9
 801e2d2:	d94e      	bls.n	801e372 <_svfiprintf_r+0x17e>
 801e2d4:	b1b0      	cbz	r0, 801e304 <_svfiprintf_r+0x110>
 801e2d6:	9207      	str	r2, [sp, #28]
 801e2d8:	e014      	b.n	801e304 <_svfiprintf_r+0x110>
 801e2da:	eba0 0308 	sub.w	r3, r0, r8
 801e2de:	fa09 f303 	lsl.w	r3, r9, r3
 801e2e2:	4313      	orrs	r3, r2
 801e2e4:	9304      	str	r3, [sp, #16]
 801e2e6:	46a2      	mov	sl, r4
 801e2e8:	e7d2      	b.n	801e290 <_svfiprintf_r+0x9c>
 801e2ea:	9b03      	ldr	r3, [sp, #12]
 801e2ec:	1d19      	adds	r1, r3, #4
 801e2ee:	681b      	ldr	r3, [r3, #0]
 801e2f0:	9103      	str	r1, [sp, #12]
 801e2f2:	2b00      	cmp	r3, #0
 801e2f4:	bfbb      	ittet	lt
 801e2f6:	425b      	neglt	r3, r3
 801e2f8:	f042 0202 	orrlt.w	r2, r2, #2
 801e2fc:	9307      	strge	r3, [sp, #28]
 801e2fe:	9307      	strlt	r3, [sp, #28]
 801e300:	bfb8      	it	lt
 801e302:	9204      	strlt	r2, [sp, #16]
 801e304:	7823      	ldrb	r3, [r4, #0]
 801e306:	2b2e      	cmp	r3, #46	; 0x2e
 801e308:	d10c      	bne.n	801e324 <_svfiprintf_r+0x130>
 801e30a:	7863      	ldrb	r3, [r4, #1]
 801e30c:	2b2a      	cmp	r3, #42	; 0x2a
 801e30e:	d135      	bne.n	801e37c <_svfiprintf_r+0x188>
 801e310:	9b03      	ldr	r3, [sp, #12]
 801e312:	1d1a      	adds	r2, r3, #4
 801e314:	681b      	ldr	r3, [r3, #0]
 801e316:	9203      	str	r2, [sp, #12]
 801e318:	2b00      	cmp	r3, #0
 801e31a:	bfb8      	it	lt
 801e31c:	f04f 33ff 	movlt.w	r3, #4294967295
 801e320:	3402      	adds	r4, #2
 801e322:	9305      	str	r3, [sp, #20]
 801e324:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 801e3f0 <_svfiprintf_r+0x1fc>
 801e328:	7821      	ldrb	r1, [r4, #0]
 801e32a:	2203      	movs	r2, #3
 801e32c:	4650      	mov	r0, sl
 801e32e:	f7e1 ffdf 	bl	80002f0 <memchr>
 801e332:	b140      	cbz	r0, 801e346 <_svfiprintf_r+0x152>
 801e334:	2340      	movs	r3, #64	; 0x40
 801e336:	eba0 000a 	sub.w	r0, r0, sl
 801e33a:	fa03 f000 	lsl.w	r0, r3, r0
 801e33e:	9b04      	ldr	r3, [sp, #16]
 801e340:	4303      	orrs	r3, r0
 801e342:	3401      	adds	r4, #1
 801e344:	9304      	str	r3, [sp, #16]
 801e346:	f814 1b01 	ldrb.w	r1, [r4], #1
 801e34a:	4826      	ldr	r0, [pc, #152]	; (801e3e4 <_svfiprintf_r+0x1f0>)
 801e34c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801e350:	2206      	movs	r2, #6
 801e352:	f7e1 ffcd 	bl	80002f0 <memchr>
 801e356:	2800      	cmp	r0, #0
 801e358:	d038      	beq.n	801e3cc <_svfiprintf_r+0x1d8>
 801e35a:	4b23      	ldr	r3, [pc, #140]	; (801e3e8 <_svfiprintf_r+0x1f4>)
 801e35c:	bb1b      	cbnz	r3, 801e3a6 <_svfiprintf_r+0x1b2>
 801e35e:	9b03      	ldr	r3, [sp, #12]
 801e360:	3307      	adds	r3, #7
 801e362:	f023 0307 	bic.w	r3, r3, #7
 801e366:	3308      	adds	r3, #8
 801e368:	9303      	str	r3, [sp, #12]
 801e36a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e36c:	4433      	add	r3, r6
 801e36e:	9309      	str	r3, [sp, #36]	; 0x24
 801e370:	e767      	b.n	801e242 <_svfiprintf_r+0x4e>
 801e372:	fb0c 3202 	mla	r2, ip, r2, r3
 801e376:	460c      	mov	r4, r1
 801e378:	2001      	movs	r0, #1
 801e37a:	e7a5      	b.n	801e2c8 <_svfiprintf_r+0xd4>
 801e37c:	2300      	movs	r3, #0
 801e37e:	3401      	adds	r4, #1
 801e380:	9305      	str	r3, [sp, #20]
 801e382:	4619      	mov	r1, r3
 801e384:	f04f 0c0a 	mov.w	ip, #10
 801e388:	4620      	mov	r0, r4
 801e38a:	f810 2b01 	ldrb.w	r2, [r0], #1
 801e38e:	3a30      	subs	r2, #48	; 0x30
 801e390:	2a09      	cmp	r2, #9
 801e392:	d903      	bls.n	801e39c <_svfiprintf_r+0x1a8>
 801e394:	2b00      	cmp	r3, #0
 801e396:	d0c5      	beq.n	801e324 <_svfiprintf_r+0x130>
 801e398:	9105      	str	r1, [sp, #20]
 801e39a:	e7c3      	b.n	801e324 <_svfiprintf_r+0x130>
 801e39c:	fb0c 2101 	mla	r1, ip, r1, r2
 801e3a0:	4604      	mov	r4, r0
 801e3a2:	2301      	movs	r3, #1
 801e3a4:	e7f0      	b.n	801e388 <_svfiprintf_r+0x194>
 801e3a6:	ab03      	add	r3, sp, #12
 801e3a8:	9300      	str	r3, [sp, #0]
 801e3aa:	462a      	mov	r2, r5
 801e3ac:	4b0f      	ldr	r3, [pc, #60]	; (801e3ec <_svfiprintf_r+0x1f8>)
 801e3ae:	a904      	add	r1, sp, #16
 801e3b0:	4638      	mov	r0, r7
 801e3b2:	f7fd fd85 	bl	801bec0 <_printf_float>
 801e3b6:	1c42      	adds	r2, r0, #1
 801e3b8:	4606      	mov	r6, r0
 801e3ba:	d1d6      	bne.n	801e36a <_svfiprintf_r+0x176>
 801e3bc:	89ab      	ldrh	r3, [r5, #12]
 801e3be:	065b      	lsls	r3, r3, #25
 801e3c0:	f53f af2c 	bmi.w	801e21c <_svfiprintf_r+0x28>
 801e3c4:	9809      	ldr	r0, [sp, #36]	; 0x24
 801e3c6:	b01d      	add	sp, #116	; 0x74
 801e3c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e3cc:	ab03      	add	r3, sp, #12
 801e3ce:	9300      	str	r3, [sp, #0]
 801e3d0:	462a      	mov	r2, r5
 801e3d2:	4b06      	ldr	r3, [pc, #24]	; (801e3ec <_svfiprintf_r+0x1f8>)
 801e3d4:	a904      	add	r1, sp, #16
 801e3d6:	4638      	mov	r0, r7
 801e3d8:	f7fd fffe 	bl	801c3d8 <_printf_i>
 801e3dc:	e7eb      	b.n	801e3b6 <_svfiprintf_r+0x1c2>
 801e3de:	bf00      	nop
 801e3e0:	08020b80 	.word	0x08020b80
 801e3e4:	08020b8a 	.word	0x08020b8a
 801e3e8:	0801bec1 	.word	0x0801bec1
 801e3ec:	0801e13f 	.word	0x0801e13f
 801e3f0:	08020b86 	.word	0x08020b86

0801e3f4 <_read_r>:
 801e3f4:	b538      	push	{r3, r4, r5, lr}
 801e3f6:	4d07      	ldr	r5, [pc, #28]	; (801e414 <_read_r+0x20>)
 801e3f8:	4604      	mov	r4, r0
 801e3fa:	4608      	mov	r0, r1
 801e3fc:	4611      	mov	r1, r2
 801e3fe:	2200      	movs	r2, #0
 801e400:	602a      	str	r2, [r5, #0]
 801e402:	461a      	mov	r2, r3
 801e404:	f7e5 fa28 	bl	8003858 <_read>
 801e408:	1c43      	adds	r3, r0, #1
 801e40a:	d102      	bne.n	801e412 <_read_r+0x1e>
 801e40c:	682b      	ldr	r3, [r5, #0]
 801e40e:	b103      	cbz	r3, 801e412 <_read_r+0x1e>
 801e410:	6023      	str	r3, [r4, #0]
 801e412:	bd38      	pop	{r3, r4, r5, pc}
 801e414:	20006f60 	.word	0x20006f60

0801e418 <_fstat_r>:
 801e418:	b538      	push	{r3, r4, r5, lr}
 801e41a:	4d07      	ldr	r5, [pc, #28]	; (801e438 <_fstat_r+0x20>)
 801e41c:	2300      	movs	r3, #0
 801e41e:	4604      	mov	r4, r0
 801e420:	4608      	mov	r0, r1
 801e422:	4611      	mov	r1, r2
 801e424:	602b      	str	r3, [r5, #0]
 801e426:	f7e5 fa5c 	bl	80038e2 <_fstat>
 801e42a:	1c43      	adds	r3, r0, #1
 801e42c:	d102      	bne.n	801e434 <_fstat_r+0x1c>
 801e42e:	682b      	ldr	r3, [r5, #0]
 801e430:	b103      	cbz	r3, 801e434 <_fstat_r+0x1c>
 801e432:	6023      	str	r3, [r4, #0]
 801e434:	bd38      	pop	{r3, r4, r5, pc}
 801e436:	bf00      	nop
 801e438:	20006f60 	.word	0x20006f60

0801e43c <_isatty_r>:
 801e43c:	b538      	push	{r3, r4, r5, lr}
 801e43e:	4d06      	ldr	r5, [pc, #24]	; (801e458 <_isatty_r+0x1c>)
 801e440:	2300      	movs	r3, #0
 801e442:	4604      	mov	r4, r0
 801e444:	4608      	mov	r0, r1
 801e446:	602b      	str	r3, [r5, #0]
 801e448:	f7e5 fa5b 	bl	8003902 <_isatty>
 801e44c:	1c43      	adds	r3, r0, #1
 801e44e:	d102      	bne.n	801e456 <_isatty_r+0x1a>
 801e450:	682b      	ldr	r3, [r5, #0]
 801e452:	b103      	cbz	r3, 801e456 <_isatty_r+0x1a>
 801e454:	6023      	str	r3, [r4, #0]
 801e456:	bd38      	pop	{r3, r4, r5, pc}
 801e458:	20006f60 	.word	0x20006f60

0801e45c <__ascii_mbtowc>:
 801e45c:	b082      	sub	sp, #8
 801e45e:	b901      	cbnz	r1, 801e462 <__ascii_mbtowc+0x6>
 801e460:	a901      	add	r1, sp, #4
 801e462:	b142      	cbz	r2, 801e476 <__ascii_mbtowc+0x1a>
 801e464:	b14b      	cbz	r3, 801e47a <__ascii_mbtowc+0x1e>
 801e466:	7813      	ldrb	r3, [r2, #0]
 801e468:	600b      	str	r3, [r1, #0]
 801e46a:	7812      	ldrb	r2, [r2, #0]
 801e46c:	1e10      	subs	r0, r2, #0
 801e46e:	bf18      	it	ne
 801e470:	2001      	movne	r0, #1
 801e472:	b002      	add	sp, #8
 801e474:	4770      	bx	lr
 801e476:	4610      	mov	r0, r2
 801e478:	e7fb      	b.n	801e472 <__ascii_mbtowc+0x16>
 801e47a:	f06f 0001 	mvn.w	r0, #1
 801e47e:	e7f8      	b.n	801e472 <__ascii_mbtowc+0x16>

0801e480 <_malloc_usable_size_r>:
 801e480:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801e484:	1f18      	subs	r0, r3, #4
 801e486:	2b00      	cmp	r3, #0
 801e488:	bfbc      	itt	lt
 801e48a:	580b      	ldrlt	r3, [r1, r0]
 801e48c:	18c0      	addlt	r0, r0, r3
 801e48e:	4770      	bx	lr

0801e490 <__ascii_wctomb>:
 801e490:	b149      	cbz	r1, 801e4a6 <__ascii_wctomb+0x16>
 801e492:	2aff      	cmp	r2, #255	; 0xff
 801e494:	bf85      	ittet	hi
 801e496:	238a      	movhi	r3, #138	; 0x8a
 801e498:	6003      	strhi	r3, [r0, #0]
 801e49a:	700a      	strbls	r2, [r1, #0]
 801e49c:	f04f 30ff 	movhi.w	r0, #4294967295
 801e4a0:	bf98      	it	ls
 801e4a2:	2001      	movls	r0, #1
 801e4a4:	4770      	bx	lr
 801e4a6:	4608      	mov	r0, r1
 801e4a8:	4770      	bx	lr
	...

0801e4ac <_init>:
 801e4ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e4ae:	bf00      	nop
 801e4b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801e4b2:	bc08      	pop	{r3}
 801e4b4:	469e      	mov	lr, r3
 801e4b6:	4770      	bx	lr

0801e4b8 <_fini>:
 801e4b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e4ba:	bf00      	nop
 801e4bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801e4be:	bc08      	pop	{r3}
 801e4c0:	469e      	mov	lr, r3
 801e4c2:	4770      	bx	lr
